{"sha": "f467b8d77c7b991ce214e0e5ff9b13c01812c8a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NjdiOGQ3N2M3Yjk5MWNlMjE0ZTBlNWZmOWIxM2MwMTgxMmM4YTc=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-10-13T13:46:34Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2020-11-05T09:22:08Z"}, "message": "Extend automatic_links lint to take into account URLs without link syntax", "tree": {"sha": "4a4d135e0c4348e14053d3b02a4b063823c6d8f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a4d135e0c4348e14053d3b02a4b063823c6d8f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7", "html_url": "https://github.com/rust-lang/rust/commit/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bc8965c418e90c135ee90554108bd0bdbe0a8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc8965c418e90c135ee90554108bd0bdbe0a8d8", "html_url": "https://github.com/rust-lang/rust/commit/6bc8965c418e90c135ee90554108bd0bdbe0a8d8"}], "stats": {"total": 139, "additions": 94, "deletions": 45}, "files": [{"sha": "3a1dae971cc19f6bb191bbf9a892a2157cb2d9e0", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f467b8d77c7b991ce214e0e5ff9b13c01812c8a7", "patch": "@@ -4297,6 +4297,7 @@ dependencies = [\n  \"itertools 0.9.0\",\n  \"minifier\",\n  \"pulldown-cmark 0.8.0\",\n+ \"regex\",\n  \"rustc-rayon\",\n  \"serde\",\n  \"serde_json\","}, {"sha": "a85aa882af891b40b8d7c924a1acd6186f5b2098", "filename": "src/doc/rustdoc/src/lints.md", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md?ref=f467b8d77c7b991ce214e0e5ff9b13c01812c8a7", "patch": "@@ -294,6 +294,7 @@ which could use the \"automatic\" link syntax. For example:\n ```rust\n #![warn(automatic_links)]\n \n+/// http://hello.rs\n /// [http://a.com](http://a.com)\n /// [http://b.com]\n ///\n@@ -304,24 +305,27 @@ pub fn foo() {}\n Which will give:\n \n ```text\n-error: Unneeded long form for URL\n+warning: won't be a link as is\n  --> foo.rs:3:5\n   |\n-3 | /// [http://a.com](http://a.com)\n-  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+3 | /// http://hello.rs\n+  |     ^^^^^^^^^^^^^^^ help: use an automatic link instead: `<http://hello.rs>`\n   |\n note: the lint level is defined here\n  --> foo.rs:1:9\n   |\n-1 | #![deny(automatic_links)]\n+1 | #![warn(automatic_links)]\n   |         ^^^^^^^^^^^^^^^\n-  = help: Try with `<http://a.com>` instead\n \n-error: Unneeded long form for URL\n+warning: unneeded long form for URL\n+ --> foo.rs:4:5\n+  |\n+4 | /// [http://a.com](http://a.com)\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<http://a.com>`\n+\n+warning: unneeded long form for URL\n  --> foo.rs:5:5\n   |\n 5 | /// [http://b.com]\n-  |     ^^^^^^^^^^^^^^\n-  |\n-  = help: Try with `<http://b.com>` instead\n+  |     ^^^^^^^^^^^^^^ help: use an automatic link instead: `<http://b.com>`\n ```"}, {"sha": "b0f5bac6abd0fc069d431fef32ddc4733697a1bd", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=f467b8d77c7b991ce214e0e5ff9b13c01812c8a7", "patch": "@@ -16,6 +16,7 @@ serde_json = \"1.0\"\n smallvec = \"1.0\"\n tempfile = \"3\"\n itertools = \"0.9\"\n+regex = \"1\"\n \n [dev-dependencies]\n expect-test = \"1.0\""}, {"sha": "11c1a4d0bfba860e43af66b268efcb9bea41181f", "filename": "src/librustdoc/passes/automatic_links.rs", "status": "modified", "additions": 62, "deletions": 27, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7/src%2Flibrustdoc%2Fpasses%2Fautomatic_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7/src%2Flibrustdoc%2Fpasses%2Fautomatic_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fautomatic_links.rs?ref=f467b8d77c7b991ce214e0e5ff9b13c01812c8a7", "patch": "@@ -3,23 +3,55 @@ use crate::clean::*;\n use crate::core::DocContext;\n use crate::fold::DocFolder;\n use crate::html::markdown::opts;\n-use pulldown_cmark::{Event, Parser, Tag};\n+use core::ops::Range;\n+use pulldown_cmark::{Event, LinkType, Parser, Tag};\n+use regex::Regex;\n+use rustc_errors::Applicability;\n use rustc_feature::UnstableFeatures;\n use rustc_session::lint;\n \n pub const CHECK_AUTOMATIC_LINKS: Pass = Pass {\n     name: \"check-automatic-links\",\n     run: check_automatic_links,\n-    description: \"detects URLS/email addresses that could be written using brackets\",\n+    description: \"detects URLS/email addresses that could be written using angle brackets\",\n };\n \n+const URL_REGEX: &str =\n+    r\"https?://(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,4}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)\";\n+\n struct AutomaticLinksLinter<'a, 'tcx> {\n     cx: &'a DocContext<'tcx>,\n+    regex: Regex,\n }\n \n impl<'a, 'tcx> AutomaticLinksLinter<'a, 'tcx> {\n     fn new(cx: &'a DocContext<'tcx>) -> Self {\n-        AutomaticLinksLinter { cx }\n+        AutomaticLinksLinter { cx, regex: Regex::new(URL_REGEX).expect(\"failed to build regex\") }\n+    }\n+\n+    fn find_raw_urls(\n+        &self,\n+        text: &str,\n+        range: Range<usize>,\n+        f: &impl Fn(&DocContext<'_>, &str, &str, Range<usize>),\n+    ) {\n+        for (pos, c) in text.char_indices() {\n+            // For now, we only check \"full\" URLs.\n+            if c == 'h' {\n+                let text = &text[pos..];\n+                if text.starts_with(\"http://\") || text.starts_with(\"https://\") {\n+                    if let Some(m) = self.regex.find(text) {\n+                        let url = &text[..m.end()];\n+                        f(\n+                            self.cx,\n+                            \"won't be a link as is\",\n+                            url,\n+                            Range { start: range.start + pos, end: range.start + pos + m.end() },\n+                        )\n+                    }\n+                }\n+            }\n+        }\n     }\n }\n \n@@ -44,45 +76,48 @@ impl<'a, 'tcx> DocFolder for AutomaticLinksLinter<'a, 'tcx> {\n         };\n         let dox = item.attrs.collapsed_doc_value().unwrap_or_default();\n         if !dox.is_empty() {\n-            let cx = &self.cx;\n+            let report_diag = |cx: &DocContext<'_>, msg: &str, url: &str, range: Range<usize>| {\n+                let sp = super::source_span_for_markdown_range(cx, &dox, &range, &item.attrs)\n+                    .or_else(|| span_of_attrs(&item.attrs))\n+                    .unwrap_or(item.source.span());\n+                cx.tcx.struct_span_lint_hir(lint::builtin::AUTOMATIC_LINKS, hir_id, sp, |lint| {\n+                    lint.build(msg)\n+                        .span_suggestion(\n+                            sp,\n+                            \"use an automatic link instead\",\n+                            format!(\"<{}>\", url),\n+                            Applicability::MachineApplicable,\n+                        )\n+                        .emit()\n+                });\n+            };\n \n             let p = Parser::new_ext(&dox, opts()).into_offset_iter();\n \n             let mut title = String::new();\n             let mut in_link = false;\n+            let mut ignore = false;\n \n             for (event, range) in p {\n                 match event {\n-                    Event::Start(Tag::Link(..)) => in_link = true,\n+                    Event::Start(Tag::Link(kind, _, _)) => {\n+                        in_link = true;\n+                        ignore = matches!(kind, LinkType::Autolink | LinkType::Email);\n+                    }\n                     Event::End(Tag::Link(_, url, _)) => {\n                         in_link = false;\n-                        if url.as_ref() != title {\n-                            continue;\n+                        if url.as_ref() == title && !ignore {\n+                            report_diag(self.cx, \"unneeded long form for URL\", &url, range);\n                         }\n-                        let sp = match super::source_span_for_markdown_range(\n-                            cx,\n-                            &dox,\n-                            &range,\n-                            &item.attrs,\n-                        ) {\n-                            Some(sp) => sp,\n-                            None => span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n-                        };\n-                        cx.tcx.struct_span_lint_hir(\n-                            lint::builtin::AUTOMATIC_LINKS,\n-                            hir_id,\n-                            sp,\n-                            |lint| {\n-                                lint.build(\"Unneeded long form for URL\")\n-                                    .help(&format!(\"Try with `<{}>` instead\", url))\n-                                    .emit()\n-                            },\n-                        );\n                         title.clear();\n+                        ignore = false;\n                     }\n                     Event::Text(s) if in_link => {\n-                        title.push_str(&s);\n+                        if !ignore {\n+                            title.push_str(&s);\n+                        }\n                     }\n+                    Event::Text(s) => self.find_raw_urls(&s, range, &report_diag),\n                     _ => {}\n                 }\n             }"}, {"sha": "f9dbe67e5b1dae02ff48e1d6b1cf82ef00aeb715", "filename": "src/test/rustdoc-ui/automatic-links.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7/src%2Ftest%2Frustdoc-ui%2Fautomatic-links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7/src%2Ftest%2Frustdoc-ui%2Fautomatic-links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fautomatic-links.rs?ref=f467b8d77c7b991ce214e0e5ff9b13c01812c8a7", "patch": "@@ -1,15 +1,20 @@\n #![deny(automatic_links)]\n \n /// [http://a.com](http://a.com)\n-//~^ ERROR Unneeded long form for URL\n+//~^ ERROR unneeded long form for URL\n /// [http://b.com]\n-//~^ ERROR Unneeded long form for URL\n+//~^ ERROR unneeded long form for URL\n ///\n /// [http://b.com]: http://b.com\n ///\n /// [http://c.com][http://c.com]\n pub fn a() {}\n \n+/// https://somewhere.com?hello=12\n+//~^ ERROR won't be a link as is\n+pub fn c() {}\n+\n+/// <https://somewhere.com>\n /// [a](http://a.com)\n /// [b]\n ///"}, {"sha": "d2c0c51d7a472943e40c03891c9d059eff7242e1", "filename": "src/test/rustdoc-ui/automatic-links.stderr", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7/src%2Ftest%2Frustdoc-ui%2Fautomatic-links.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f467b8d77c7b991ce214e0e5ff9b13c01812c8a7/src%2Ftest%2Frustdoc-ui%2Fautomatic-links.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fautomatic-links.stderr?ref=f467b8d77c7b991ce214e0e5ff9b13c01812c8a7", "patch": "@@ -1,23 +1,26 @@\n-error: Unneeded long form for URL\n+error: unneeded long form for URL\n   --> $DIR/automatic-links.rs:3:5\n    |\n LL | /// [http://a.com](http://a.com)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<http://a.com>`\n    |\n note: the lint level is defined here\n   --> $DIR/automatic-links.rs:1:9\n    |\n LL | #![deny(automatic_links)]\n    |         ^^^^^^^^^^^^^^^\n-   = help: Try with `<http://a.com>` instead\n \n-error: Unneeded long form for URL\n+error: unneeded long form for URL\n   --> $DIR/automatic-links.rs:5:5\n    |\n LL | /// [http://b.com]\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^ help: use an automatic link instead: `<http://b.com>`\n+\n+error: won't be a link as is\n+  --> $DIR/automatic-links.rs:13:5\n    |\n-   = help: Try with `<http://b.com>` instead\n+LL | /// https://somewhere.com?hello=12\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use an automatic link instead: `<https://somewhere.com?hello=12>`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n "}]}