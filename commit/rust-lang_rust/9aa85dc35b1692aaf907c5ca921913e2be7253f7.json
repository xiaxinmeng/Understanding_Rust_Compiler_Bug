{"sha": "9aa85dc35b1692aaf907c5ca921913e2be7253f7", "node_id": "C_kwDOAAsO6NoAKDlhYTg1ZGMzNWIxNjkyYWFmOTA3YzVjYTkyMTkxM2UyYmU3MjUzZjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T18:14:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-27T18:14:24Z"}, "message": "Auto merge of #9511 - rust-lang:box-default, r=Alexendoo\n\nadd `box-default` lint\n\nThis adds a `box-default` lint to suggest using `Box::default()` instead of `Box::new(Default::default())`, which offers less moving parts and potentially better performance according to [the perf book](https://nnethercote.github.io/perf-book/standard-library-types.html#box).\n\n---\n\nchangelog: add [`box_default`] lint", "tree": {"sha": "3cb73a0e23531ac332fff8fe6b6fb3fa6787dc9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb73a0e23531ac332fff8fe6b6fb3fa6787dc9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9aa85dc35b1692aaf907c5ca921913e2be7253f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9aa85dc35b1692aaf907c5ca921913e2be7253f7", "html_url": "https://github.com/rust-lang/rust/commit/9aa85dc35b1692aaf907c5ca921913e2be7253f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9aa85dc35b1692aaf907c5ca921913e2be7253f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "257fb4b458d9fc86530899705fa14c68a5c69d07", "url": "https://api.github.com/repos/rust-lang/rust/commits/257fb4b458d9fc86530899705fa14c68a5c69d07", "html_url": "https://github.com/rust-lang/rust/commit/257fb4b458d9fc86530899705fa14c68a5c69d07"}, {"sha": "63f441ec855f0de342ccc2b9ff90776c633ca9e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/63f441ec855f0de342ccc2b9ff90776c633ca9e6", "html_url": "https://github.com/rust-lang/rust/commit/63f441ec855f0de342ccc2b9ff90776c633ca9e6"}], "stats": {"total": 213, "additions": 197, "deletions": 16}, "files": [{"sha": "ef6140152ffca50f6cff224cb49fec97284f4451", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aa85dc35b1692aaf907c5ca921913e2be7253f7/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/9aa85dc35b1692aaf907c5ca921913e2be7253f7/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=9aa85dc35b1692aaf907c5ca921913e2be7253f7", "patch": "@@ -3759,6 +3759,7 @@ Released 2018-09-13\n [`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const\n [`borrowed_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box\n [`box_collection`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_collection\n+[`box_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_default\n [`box_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_vec\n [`boxed_local`]: https://rust-lang.github.io/rust-clippy/master/index.html#boxed_local\n [`branches_sharing_code`]: https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code"}, {"sha": "792183ac40814ef90355cd13e94a3bd72ce3cfbf", "filename": "clippy_lints/src/box_default.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/9aa85dc35b1692aaf907c5ca921913e2be7253f7/clippy_lints%2Fsrc%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa85dc35b1692aaf907c5ca921913e2be7253f7/clippy_lints%2Fsrc%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbox_default.rs?ref=9aa85dc35b1692aaf907c5ca921913e2be7253f7", "patch": "@@ -0,0 +1,61 @@\n+use clippy_utils::{diagnostics::span_lint_and_help, is_default_equivalent, path_def_id};\n+use rustc_hir::{Expr, ExprKind, QPath};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// checks for `Box::new(T::default())`, which is better written as\n+    /// `Box::<T>::default()`.\n+    ///\n+    /// ### Why is this bad?\n+    /// First, it's more complex, involving two calls instead of one.\n+    /// Second, `Box::default()` can be faster\n+    /// [in certain cases](https://nnethercote.github.io/perf-book/standard-library-types.html#box).\n+    ///\n+    /// ### Known problems\n+    /// The lint may miss some cases (e.g. Box::new(String::from(\"\"))).\n+    /// On the other hand, it will trigger on cases where the `default`\n+    /// code comes from a macro that does something different based on\n+    /// e.g. target operating system.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let x: Box<String> = Box::new(Default::default());\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let x: Box<String> = Box::default();\n+    /// ```\n+    #[clippy::version = \"1.65.0\"]\n+    pub BOX_DEFAULT,\n+    perf,\n+    \"Using Box::new(T::default()) instead of Box::default()\"\n+}\n+\n+declare_lint_pass!(BoxDefault => [BOX_DEFAULT]);\n+\n+impl LateLintPass<'_> for BoxDefault {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if let ExprKind::Call(box_new, [arg]) = expr.kind\n+            && let ExprKind::Path(QPath::TypeRelative(ty, seg)) = box_new.kind\n+            && let ExprKind::Call(..) = arg.kind\n+            && !in_external_macro(cx.sess(), expr.span)\n+            && expr.span.eq_ctxt(arg.span)\n+            && seg.ident.name == sym::new\n+            && path_def_id(cx, ty) == cx.tcx.lang_items().owned_box()\n+            && is_default_equivalent(cx, arg)\n+        {\n+            span_lint_and_help(\n+                cx,\n+                BOX_DEFAULT,\n+                expr.span,\n+                \"`Box::new(_)` of default value\",\n+                None,\n+                \"use `Box::default()` instead\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "8a6f5d3ccd2a40ad2beacb142259accf0a38f51b", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aa85dc35b1692aaf907c5ca921913e2be7253f7/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa85dc35b1692aaf907c5ca921913e2be7253f7/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=9aa85dc35b1692aaf907c5ca921913e2be7253f7", "patch": "@@ -21,6 +21,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(booleans::NONMINIMAL_BOOL),\n     LintId::of(booleans::OVERLY_COMPLEX_BOOL_EXPR),\n     LintId::of(borrow_deref_ref::BORROW_DEREF_REF),\n+    LintId::of(box_default::BOX_DEFAULT),\n     LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n     LintId::of(casts::CAST_ENUM_TRUNCATION),"}, {"sha": "ee08d802ccfbf7e8452cce8403474beea1afdb9b", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aa85dc35b1692aaf907c5ca921913e2be7253f7/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa85dc35b1692aaf907c5ca921913e2be7253f7/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=9aa85dc35b1692aaf907c5ca921913e2be7253f7", "patch": "@@ -60,6 +60,7 @@ store.register_lints(&[\n     booleans::NONMINIMAL_BOOL,\n     booleans::OVERLY_COMPLEX_BOOL_EXPR,\n     borrow_deref_ref::BORROW_DEREF_REF,\n+    box_default::BOX_DEFAULT,\n     cargo::CARGO_COMMON_METADATA,\n     cargo::MULTIPLE_CRATE_VERSIONS,\n     cargo::NEGATIVE_FEATURE_NAMES,"}, {"sha": "8e927470e02ffea36f947a6133ba0dacb98f4226", "filename": "clippy_lints/src/lib.register_perf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aa85dc35b1692aaf907c5ca921913e2be7253f7/clippy_lints%2Fsrc%2Flib.register_perf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa85dc35b1692aaf907c5ca921913e2be7253f7/clippy_lints%2Fsrc%2Flib.register_perf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_perf.rs?ref=9aa85dc35b1692aaf907c5ca921913e2be7253f7", "patch": "@@ -3,6 +3,7 @@\n // Manual edits will be overwritten.\n \n store.register_group(true, \"clippy::perf\", Some(\"clippy_perf\"), vec![\n+    LintId::of(box_default::BOX_DEFAULT),\n     LintId::of(entry::MAP_ENTRY),\n     LintId::of(escape::BOXED_LOCAL),\n     LintId::of(format_args::FORMAT_IN_FORMAT_ARGS),"}, {"sha": "e5a87df51174992781650f20f7bff46daee588f1", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9aa85dc35b1692aaf907c5ca921913e2be7253f7/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa85dc35b1692aaf907c5ca921913e2be7253f7/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9aa85dc35b1692aaf907c5ca921913e2be7253f7", "patch": "@@ -181,6 +181,7 @@ mod bool_assert_comparison;\n mod bool_to_int_with_if;\n mod booleans;\n mod borrow_deref_ref;\n+mod box_default;\n mod cargo;\n mod casts;\n mod checked_conversions;\n@@ -533,8 +534,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         store.register_late_pass(|| Box::new(utils::internal_lints::CompilerLintFunctions::new()));\n         store.register_late_pass(|| Box::new(utils::internal_lints::IfChainStyle));\n         store.register_late_pass(|| Box::new(utils::internal_lints::InvalidPaths));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::InterningDefinedSymbol::default()));\n-        store.register_late_pass(|| Box::new(utils::internal_lints::LintWithoutLintPass::default()));\n+        store.register_late_pass(|| Box::<utils::internal_lints::InterningDefinedSymbol>::default());\n+        store.register_late_pass(|| Box::<utils::internal_lints::LintWithoutLintPass>::default());\n         store.register_late_pass(|| Box::new(utils::internal_lints::MatchTypeOnDiagItem));\n         store.register_late_pass(|| Box::new(utils::internal_lints::OuterExpnDataPass));\n         store.register_late_pass(|| Box::new(utils::internal_lints::MsrvAttrImpl));\n@@ -627,10 +628,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n             msrv,\n         ))\n     });\n-    store.register_late_pass(|| Box::new(shadow::Shadow::default()));\n+    store.register_late_pass(|| Box::<shadow::Shadow>::default());\n     store.register_late_pass(|| Box::new(unit_types::UnitTypes));\n     store.register_late_pass(|| Box::new(loops::Loops));\n-    store.register_late_pass(|| Box::new(main_recursion::MainRecursion::default()));\n+    store.register_late_pass(|| Box::<main_recursion::MainRecursion>::default());\n     store.register_late_pass(|| Box::new(lifetimes::Lifetimes));\n     store.register_late_pass(|| Box::new(entry::HashMapPass));\n     store.register_late_pass(|| Box::new(minmax::MinMaxPass));\n@@ -664,7 +665,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(format::UselessFormat));\n     store.register_late_pass(|| Box::new(swap::Swap));\n     store.register_late_pass(|| Box::new(overflow_check_conditional::OverflowCheckConditional));\n-    store.register_late_pass(|| Box::new(new_without_default::NewWithoutDefault::default()));\n+    store.register_late_pass(|| Box::<new_without_default::NewWithoutDefault>::default());\n     let disallowed_names = conf.disallowed_names.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || Box::new(disallowed_names::DisallowedNames::new(disallowed_names.clone())));\n     let too_many_arguments_threshold = conf.too_many_arguments_threshold;\n@@ -703,7 +704,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(ref_option_ref::RefOptionRef));\n     store.register_late_pass(|| Box::new(infinite_iter::InfiniteIter));\n     store.register_late_pass(|| Box::new(inline_fn_without_body::InlineFnWithoutBody));\n-    store.register_late_pass(|| Box::new(useless_conversion::UselessConversion::default()));\n+    store.register_late_pass(|| Box::<useless_conversion::UselessConversion>::default());\n     store.register_late_pass(|| Box::new(implicit_hasher::ImplicitHasher));\n     store.register_late_pass(|| Box::new(fallible_impl_from::FallibleImplFrom));\n     store.register_late_pass(|| Box::new(question_mark::QuestionMark));\n@@ -773,7 +774,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n             upper_case_acronyms_aggressive,\n         ))\n     });\n-    store.register_late_pass(|| Box::new(default::Default::default()));\n+    store.register_late_pass(|| Box::<default::Default>::default());\n     store.register_late_pass(move || Box::new(unused_self::UnusedSelf::new(avoid_breaking_exported_api)));\n     store.register_late_pass(|| Box::new(mutable_debug_assertion::DebugAssertWithMutCall));\n     store.register_late_pass(|| Box::new(exit::Exit));\n@@ -796,7 +797,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| Box::new(option_env_unwrap::OptionEnvUnwrap));\n     let warn_on_all_wildcard_imports = conf.warn_on_all_wildcard_imports;\n     store.register_late_pass(move || Box::new(wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports)));\n-    store.register_late_pass(|| Box::new(redundant_pub_crate::RedundantPubCrate::default()));\n+    store.register_late_pass(|| Box::<redundant_pub_crate::RedundantPubCrate>::default());\n     store.register_late_pass(|| Box::new(unnamed_address::UnnamedAddress));\n     store.register_late_pass(move || Box::new(dereference::Dereferencing::new(msrv)));\n     store.register_late_pass(|| Box::new(option_if_let_else::OptionIfLetElse));\n@@ -814,7 +815,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n     let macro_matcher = conf.standard_macro_braces.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_early_pass(move || Box::new(nonstandard_macro_braces::MacroBraces::new(&macro_matcher)));\n-    store.register_late_pass(|| Box::new(macro_use::MacroUseImports::default()));\n+    store.register_late_pass(|| Box::<macro_use::MacroUseImports>::default());\n     store.register_late_pass(|| Box::new(pattern_type_mismatch::PatternTypeMismatch));\n     store.register_late_pass(|| Box::new(unwrap_in_result::UnwrapInResult));\n     store.register_late_pass(|| Box::new(semicolon_if_nothing_returned::SemicolonIfNothingReturned));\n@@ -827,7 +828,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(strings::StrToString));\n     store.register_late_pass(|| Box::new(strings::StringToString));\n     store.register_late_pass(|| Box::new(zero_sized_map_values::ZeroSizedMapValues));\n-    store.register_late_pass(|| Box::new(vec_init_then_push::VecInitThenPush::default()));\n+    store.register_late_pass(|| Box::<vec_init_then_push::VecInitThenPush>::default());\n     store.register_late_pass(|| Box::new(redundant_slicing::RedundantSlicing));\n     store.register_late_pass(|| Box::new(from_str_radix_10::FromStrRadix10));\n     store.register_late_pass(move || Box::new(if_then_some_else_none::IfThenSomeElseNone::new(msrv)));\n@@ -865,7 +866,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(manual_bits::ManualBits::new(msrv)));\n     store.register_late_pass(|| Box::new(default_union_representation::DefaultUnionRepresentation));\n     store.register_early_pass(|| Box::new(doc_link_with_quotes::DocLinkWithQuotes));\n-    store.register_late_pass(|| Box::new(only_used_in_recursion::OnlyUsedInRecursion::default()));\n+    store.register_late_pass(|| Box::<only_used_in_recursion::OnlyUsedInRecursion>::default());\n     let allow_dbg_in_tests = conf.allow_dbg_in_tests;\n     store.register_late_pass(move || Box::new(dbg_macro::DbgMacro::new(allow_dbg_in_tests)));\n     let cargo_ignore_publish = conf.cargo_ignore_publish;\n@@ -874,7 +875,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n             ignore_publish: cargo_ignore_publish,\n         })\n     });\n-    store.register_late_pass(|| Box::new(write::Write::default()));\n+    store.register_late_pass(|| Box::<write::Write>::default());\n     store.register_early_pass(|| Box::new(crate_in_macro_def::CrateInMacroDef));\n     store.register_early_pass(|| Box::new(empty_structs_with_brackets::EmptyStructsWithBrackets));\n     store.register_late_pass(|| Box::new(unnecessary_owned_empty_strings::UnnecessaryOwnedEmptyStrings));\n@@ -884,7 +885,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || Box::new(large_include_file::LargeIncludeFile::new(max_include_file_size)));\n     store.register_late_pass(|| Box::new(strings::TrimSplitWhitespace));\n     store.register_late_pass(|| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n-    store.register_early_pass(|| Box::new(duplicate_mod::DuplicateMod::default()));\n+    store.register_early_pass(|| Box::<duplicate_mod::DuplicateMod>::default());\n     store.register_early_pass(|| Box::new(unused_rounding::UnusedRounding));\n     store.register_early_pass(move || Box::new(almost_complete_letter_range::AlmostCompleteLetterRange::new(msrv)));\n     store.register_late_pass(|| Box::new(swap_ptr_to_ref::SwapPtrToRef));\n@@ -896,13 +897,14 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n     store.register_late_pass(move || Box::new(operators::Operators::new(verbose_bit_mask_threshold)));\n     store.register_late_pass(|| Box::new(invalid_utf8_in_unchecked::InvalidUtf8InUnchecked));\n-    store.register_late_pass(|| Box::new(std_instead_of_core::StdReexports::default()));\n+    store.register_late_pass(|| Box::<std_instead_of_core::StdReexports>::default());\n     store.register_late_pass(|| Box::new(manual_instant_elapsed::ManualInstantElapsed));\n     store.register_late_pass(|| Box::new(partialeq_to_none::PartialeqToNone));\n     store.register_late_pass(|| Box::new(manual_string_new::ManualStringNew));\n     store.register_late_pass(|| Box::new(unused_peekable::UnusedPeekable));\n     store.register_early_pass(|| Box::new(multi_assignments::MultiAssignments));\n     store.register_late_pass(|| Box::new(bool_to_int_with_if::BoolToIntWithIf));\n+    store.register_late_pass(|| Box::new(box_default::BoxDefault));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "166be0618ffddd5a39c31c1f6a56127bc1b7b366", "filename": "src/docs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9aa85dc35b1692aaf907c5ca921913e2be7253f7/src%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa85dc35b1692aaf907c5ca921913e2be7253f7/src%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs.rs?ref=9aa85dc35b1692aaf907c5ca921913e2be7253f7", "patch": "@@ -48,6 +48,7 @@ docs! {\n     \"borrow_interior_mutable_const\",\n     \"borrowed_box\",\n     \"box_collection\",\n+    \"box_default\",\n     \"boxed_local\",\n     \"branches_sharing_code\",\n     \"builtin_type_shadow\","}, {"sha": "ffac894d0c50a46cef1cb788d5c8ceef945ab7c1", "filename": "src/docs/box_default.txt", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9aa85dc35b1692aaf907c5ca921913e2be7253f7/src%2Fdocs%2Fbox_default.txt", "raw_url": "https://github.com/rust-lang/rust/raw/9aa85dc35b1692aaf907c5ca921913e2be7253f7/src%2Fdocs%2Fbox_default.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdocs%2Fbox_default.txt?ref=9aa85dc35b1692aaf907c5ca921913e2be7253f7", "patch": "@@ -0,0 +1,23 @@\n+### What it does\n+checks for `Box::new(T::default())`, which is better written as\n+`Box::<T>::default()`.\n+\n+### Why is this bad?\n+First, it's more complex, involving two calls instead of one.\n+Second, `Box::default()` can be faster\n+[in certain cases](https://nnethercote.github.io/perf-book/standard-library-types.html#box).\n+\n+### Known problems\n+The lint may miss some cases (e.g. Box::new(String::from(\"\"))).\n+On the other hand, it will trigger on cases where the `default`\n+code comes from a macro that does something different based on\n+e.g. target operating system.\n+\n+### Example\n+```\n+let x: Box<String> = Box::new(Default::default());\n+```\n+Use instead:\n+```\n+let x: Box<String> = Box::default();\n+```\n\\ No newline at end of file"}, {"sha": "4c9947b9ae724d0bcd9b9fe6afefc7b83dc65734", "filename": "tests/ui/box_collection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9aa85dc35b1692aaf907c5ca921913e2be7253f7/tests%2Fui%2Fbox_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa85dc35b1692aaf907c5ca921913e2be7253f7/tests%2Fui%2Fbox_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_collection.rs?ref=9aa85dc35b1692aaf907c5ca921913e2be7253f7", "patch": "@@ -15,7 +15,7 @@ macro_rules! boxit {\n }\n \n fn test_macro() {\n-    boxit!(Vec::new(), Vec<u8>);\n+    boxit!(vec![1], Vec<u8>);\n }\n \n fn test1(foo: Box<Vec<bool>>) {}\n@@ -50,7 +50,7 @@ fn test_local_not_linted() {\n pub fn pub_test(foo: Box<Vec<bool>>) {}\n \n pub fn pub_test_ret() -> Box<Vec<bool>> {\n-    Box::new(Vec::new())\n+    Box::default()\n }\n \n fn main() {}"}, {"sha": "dc522705bc6248b99ac1fa6644ea29db27691890", "filename": "tests/ui/box_default.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9aa85dc35b1692aaf907c5ca921913e2be7253f7/tests%2Fui%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9aa85dc35b1692aaf907c5ca921913e2be7253f7/tests%2Fui%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.rs?ref=9aa85dc35b1692aaf907c5ca921913e2be7253f7", "patch": "@@ -0,0 +1,31 @@\n+#![warn(clippy::box_default)]\n+\n+#[derive(Default)]\n+struct ImplementsDefault;\n+\n+struct OwnDefault;\n+\n+impl OwnDefault {\n+    fn default() -> Self {\n+        Self\n+    }\n+}\n+\n+macro_rules! outer {\n+    ($e: expr) => {\n+        $e\n+    };\n+}\n+\n+fn main() {\n+    let _string: Box<String> = Box::new(Default::default());\n+    let _byte = Box::new(u8::default());\n+    let _vec = Box::new(Vec::<u8>::new());\n+    let _impl = Box::new(ImplementsDefault::default());\n+    let _impl2 = Box::new(<ImplementsDefault as Default>::default());\n+    let _impl3: Box<ImplementsDefault> = Box::new(Default::default());\n+    let _own = Box::new(OwnDefault::default()); // should not lint\n+    let _in_macro = outer!(Box::new(String::new()));\n+    // false negative: default is from different expansion\n+    let _vec2: Box<Vec<ImplementsDefault>> = Box::new(vec![]);\n+}"}, {"sha": "341766a502b1aca0db312522e4433ce57423fd05", "filename": "tests/ui/box_default.stderr", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9aa85dc35b1692aaf907c5ca921913e2be7253f7/tests%2Fui%2Fbox_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9aa85dc35b1692aaf907c5ca921913e2be7253f7/tests%2Fui%2Fbox_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox_default.stderr?ref=9aa85dc35b1692aaf907c5ca921913e2be7253f7", "patch": "@@ -0,0 +1,59 @@\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:21:32\n+   |\n+LL |     let _string: Box<String> = Box::new(Default::default());\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::box-default` implied by `-D warnings`\n+   = help: use `Box::default()` instead\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:22:17\n+   |\n+LL |     let _byte = Box::new(u8::default());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Box::default()` instead\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:23:16\n+   |\n+LL |     let _vec = Box::new(Vec::<u8>::new());\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Box::default()` instead\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:24:17\n+   |\n+LL |     let _impl = Box::new(ImplementsDefault::default());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Box::default()` instead\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:25:18\n+   |\n+LL |     let _impl2 = Box::new(<ImplementsDefault as Default>::default());\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Box::default()` instead\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:26:42\n+   |\n+LL |     let _impl3: Box<ImplementsDefault> = Box::new(Default::default());\n+   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Box::default()` instead\n+\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:28:28\n+   |\n+LL |     let _in_macro = outer!(Box::new(String::new()));\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: use `Box::default()` instead\n+\n+error: aborting due to 7 previous errors\n+"}]}