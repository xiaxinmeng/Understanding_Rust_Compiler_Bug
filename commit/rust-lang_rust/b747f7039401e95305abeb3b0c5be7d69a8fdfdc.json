{"sha": "b747f7039401e95305abeb3b0c5be7d69a8fdfdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NDdmNzAzOTQwMWU5NTMwNWFiZWIzYjBjNWJlN2Q2OWE4ZmRmZGM=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-06T21:30:37Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-11-06T21:30:37Z"}, "message": "rollup merge of #18591 : nick29581/dst-bug-str", "tree": {"sha": "ce55f64c1647ea72ed8b62e4a85c1849371c9787", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce55f64c1647ea72ed8b62e4a85c1849371c9787"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b747f7039401e95305abeb3b0c5be7d69a8fdfdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b747f7039401e95305abeb3b0c5be7d69a8fdfdc", "html_url": "https://github.com/rust-lang/rust/commit/b747f7039401e95305abeb3b0c5be7d69a8fdfdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b747f7039401e95305abeb3b0c5be7d69a8fdfdc/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73aaeb0fbdb14290b68288324e678068d2cfa6be", "url": "https://api.github.com/repos/rust-lang/rust/commits/73aaeb0fbdb14290b68288324e678068d2cfa6be", "html_url": "https://github.com/rust-lang/rust/commit/73aaeb0fbdb14290b68288324e678068d2cfa6be"}, {"sha": "9af15e3a6b38ce5f44764476b521ab52dea07975", "url": "https://api.github.com/repos/rust-lang/rust/commits/9af15e3a6b38ce5f44764476b521ab52dea07975", "html_url": "https://github.com/rust-lang/rust/commit/9af15e3a6b38ce5f44764476b521ab52dea07975"}], "stats": {"total": 71, "additions": 44, "deletions": 27}, "files": [{"sha": "0d3a84eb8bcf341219242a2697a7267f17923059", "filename": "src/librustc/middle/trans/adt.rs", "status": "modified", "additions": 19, "deletions": 26, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b747f7039401e95305abeb3b0c5be7d69a8fdfdc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b747f7039401e95305abeb3b0c5be7d69a8fdfdc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fadt.rs?ref=b747f7039401e95305abeb3b0c5be7d69a8fdfdc", "patch": "@@ -49,6 +49,7 @@ use std::num::Int;\n use std::rc::Rc;\n \n use llvm::{ValueRef, True, IntEQ, IntNE};\n+use back::abi::slice_elt_base;\n use middle::subst;\n use middle::subst::Subst;\n use middle::trans::_match;\n@@ -235,7 +236,7 @@ fn represent_type_uncached(cx: &CrateContext, t: ty::t) -> Repr {\n                     if cases[1 - discr].is_zerolen(cx, t) {\n                         let st = mk_struct(cx, cases[discr].tys.as_slice(),\n                                            false, t);\n-                        match cases[discr].find_ptr() {\n+                        match cases[discr].find_ptr(cx) {\n                             Some(ThinPointer(_)) if st.fields.len() == 1 => {\n                                 return RawNullablePointer {\n                                     nndiscr: discr as Disr,\n@@ -290,47 +291,38 @@ struct Case {\n #[deriving(Eq, PartialEq, Show)]\n pub enum PointerField {\n     ThinPointer(uint),\n-    FatPointer(uint, uint)\n+    FatPointer(uint)\n }\n \n impl Case {\n     fn is_zerolen(&self, cx: &CrateContext, scapegoat: ty::t) -> bool {\n         mk_struct(cx, self.tys.as_slice(), false, scapegoat).size == 0\n     }\n \n-    fn find_ptr(&self) -> Option<PointerField> {\n-        use back::abi::{fn_field_code, slice_elt_base, trt_field_box};\n-\n+    fn find_ptr(&self, cx: &CrateContext) -> Option<PointerField> {\n         for (i, &ty) in self.tys.iter().enumerate() {\n             match ty::get(ty).sty {\n-                // &T/&mut T could either be a thin or fat pointer depending on T\n-                ty::ty_rptr(_, ty::mt { ty, .. }) => match ty::get(ty).sty {\n+                // &T/&mut T/Box<T> could either be a thin or fat pointer depending on T\n+                ty::ty_rptr(_, ty::mt { ty, .. }) | ty::ty_uniq(ty) => match ty::get(ty).sty {\n                     // &[T] and &str are a pointer and length pair\n-                    ty::ty_vec(_, None) | ty::ty_str => return Some(FatPointer(i, slice_elt_base)),\n-\n-                    // &Trait/&mut Trait are a pair of pointers: the actual object and a vtable\n-                    ty::ty_trait(..) => return Some(FatPointer(i, trt_field_box)),\n-\n-                    // Any other &T/&mut T is just a pointer\n-                    _ => return Some(ThinPointer(i))\n-                },\n+                    ty::ty_vec(_, None) | ty::ty_str => return Some(FatPointer(i)),\n \n-                // Box<T> could either be a thin or fat pointer depending on T\n-                ty::ty_uniq(t) => match ty::get(t).sty {\n-                    ty::ty_vec(_, None) => return Some(FatPointer(i, slice_elt_base)),\n+                    // &Trait is a pair of pointers: the actual object and a vtable\n+                    ty::ty_trait(..) => return Some(FatPointer(i)),\n \n-                    // Box<Trait> is a pair of pointers: the actual object and a vtable\n-                    ty::ty_trait(..) => return Some(FatPointer(i, trt_field_box)),\n+                    ty::ty_struct(..) if !ty::type_is_sized(cx.tcx(), ty) => {\n+                        return Some(FatPointer(i))\n+                    }\n \n-                    // Any other Box<T> is just a pointer\n+                    // Any other &T is just a pointer\n                     _ => return Some(ThinPointer(i))\n                 },\n \n                 // Functions are just pointers\n                 ty::ty_bare_fn(..) => return Some(ThinPointer(i)),\n \n                 // Closures are a pair of pointers: the code and environment\n-                ty::ty_closure(..) => return Some(FatPointer(i, fn_field_code)),\n+                ty::ty_closure(..) => return Some(FatPointer(i)),\n \n                 // Anything else is not a pointer\n                 _ => continue\n@@ -636,6 +628,7 @@ pub fn trans_get_discr(bcx: Block, r: &Repr, scrutinee: ValueRef, cast_to: Optio\n     -> ValueRef {\n     let signed;\n     let val;\n+    debug!(\"trans_get_discr r: {}\", r);\n     match *r {\n         CEnum(ity, min, max) => {\n             val = load_discr(bcx, ity, scrutinee, min, max);\n@@ -671,7 +664,7 @@ fn struct_wrapped_nullable_bitdiscr(bcx: Block, nndiscr: Disr, ptrfield: Pointer\n                                     scrutinee: ValueRef) -> ValueRef {\n     let llptrptr = match ptrfield {\n         ThinPointer(field) => GEPi(bcx, scrutinee, [0, field]),\n-        FatPointer(field, pair) => GEPi(bcx, scrutinee, [0, field, pair])\n+        FatPointer(field) => GEPi(bcx, scrutinee, [0, field, slice_elt_base])\n     };\n     let llptr = Load(bcx, llptrptr);\n     let cmp = if nndiscr == 0 { IntEQ } else { IntNE };\n@@ -767,8 +760,8 @@ pub fn trans_set_discr(bcx: Block, r: &Repr, val: ValueRef, discr: Disr) {\n                     ThinPointer(field) =>\n                         (GEPi(bcx, val, [0, field]),\n                          type_of::type_of(bcx.ccx(), nonnull.fields[field])),\n-                    FatPointer(field, pair) => {\n-                        let v = GEPi(bcx, val, [0, field, pair]);\n+                    FatPointer(field) => {\n+                        let v = GEPi(bcx, val, [0, field, slice_elt_base]);\n                         (v, val_ty(v).element_type())\n                     }\n                 };\n@@ -1102,7 +1095,7 @@ pub fn const_get_discrim(ccx: &CrateContext, r: &Repr, val: ValueRef)\n         StructWrappedNullablePointer { nndiscr, ptrfield, .. } => {\n             let (idx, sub_idx) = match ptrfield {\n                 ThinPointer(field) => (field, None),\n-                FatPointer(field, pair) => (field, Some(pair))\n+                FatPointer(field) => (field, Some(slice_elt_base))\n             };\n             if is_null(const_struct_field(ccx, val, idx, sub_idx)) {\n                 /* subtraction as uint is ok because nndiscr is either 0 or 1 */"}, {"sha": "8309811cf0b45afaa470a4a0b946d605ca77ee60", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b747f7039401e95305abeb3b0c5be7d69a8fdfdc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b747f7039401e95305abeb3b0c5be7d69a8fdfdc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=b747f7039401e95305abeb3b0c5be7d69a8fdfdc", "patch": "@@ -2255,7 +2255,7 @@ impl EnumMemberDescriptionFactory {\n                 let null_variant_name = token::get_name((*self.variants)[null_variant_index].name);\n                 let discrfield = match ptrfield {\n                     adt::ThinPointer(field) => format!(\"{}\", field),\n-                    adt::FatPointer(field, pair) => format!(\"{}${}\", field, pair)\n+                    adt::FatPointer(field) => format!(\"{}\", field)\n                 };\n                 let union_member_name = format!(\"RUST$ENCODED$ENUM${}${}\",\n                                                 discrfield,"}, {"sha": "335317be4b419a0753b97977d7f6a175246c40ca", "filename": "src/librustc_back/abi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b747f7039401e95305abeb3b0c5be7d69a8fdfdc/src%2Flibrustc_back%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b747f7039401e95305abeb3b0c5be7d69a8fdfdc/src%2Flibrustc_back%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Fabi.rs?ref=b747f7039401e95305abeb3b0c5be7d69a8fdfdc", "patch": "@@ -14,6 +14,9 @@ pub const box_field_refcnt: uint = 0u;\n pub const box_field_drop_glue: uint = 1u;\n pub const box_field_body: uint = 4u;\n \n+// FIXME(18590) although we have three different layouts here, the compiler relies on\n+// them being the same. We should replace them with one set of constants.\n+\n // The two halves of a closure: code and environment.\n pub const fn_field_code: uint = 0u;\n pub const fn_field_box: uint = 1u;"}, {"sha": "c734c1a322245c0e516179f1465bfe24ce9be83e", "filename": "src/test/run-pass/issue-18353.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b747f7039401e95305abeb3b0c5be7d69a8fdfdc/src%2Ftest%2Frun-pass%2Fissue-18353.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b747f7039401e95305abeb3b0c5be7d69a8fdfdc/src%2Ftest%2Frun-pass%2Fissue-18353.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18353.rs?ref=b747f7039401e95305abeb3b0c5be7d69a8fdfdc", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that wrapping an unsized struct in an enum which gets optimised does\n+// not ICE.\n+\n+struct Str {\n+    f: [u8]\n+}\n+\n+fn main() {\n+    let str: Option<&Str> = None;\n+    str.is_some();\n+}"}]}