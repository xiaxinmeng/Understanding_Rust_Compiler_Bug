{"sha": "bb33830c60f9b815bce976567c53a0b7e3f13d9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMzM4MzBjNjBmOWI4MTViY2U5NzY1NjdjNTNhMGI3ZTNmMTNkOWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-14T12:05:51Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-03-14T12:05:51Z"}, "message": "Implement more atomic intrinsics", "tree": {"sha": "9fe4472d53f5a5ac6d2d63f7dd9db852c9d53266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fe4472d53f5a5ac6d2d63f7dd9db852c9d53266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb33830c60f9b815bce976567c53a0b7e3f13d9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb33830c60f9b815bce976567c53a0b7e3f13d9c", "html_url": "https://github.com/rust-lang/rust/commit/bb33830c60f9b815bce976567c53a0b7e3f13d9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb33830c60f9b815bce976567c53a0b7e3f13d9c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adddde7cba89ff9a80647acd336bbf9325e52b3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/adddde7cba89ff9a80647acd336bbf9325e52b3c", "html_url": "https://github.com/rust-lang/rust/commit/adddde7cba89ff9a80647acd336bbf9325e52b3c"}], "stats": {"total": 105, "additions": 82, "deletions": 23}, "files": [{"sha": "2776857a8816081612e054409b10f1a5986fd04f", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/bb33830c60f9b815bce976567c53a0b7e3f13d9c/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb33830c60f9b815bce976567c53a0b7e3f13d9c/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=bb33830c60f9b815bce976567c53a0b7e3f13d9c", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 // we are inherently singlethreaded and singlecored, this is a nop\n             }\n \n-            \"atomic_xchg\" => {\n+            _ if intrinsic_name.starts_with(\"atomic_xchg\") => {\n                 let ty = substs.type_at(0);\n                 let ptr = arg_vals[0].read_ptr(&self.memory)?;\n                 let change = self.value_to_primval(arg_vals[1], ty)?;\n@@ -92,8 +92,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(Lvalue::from_ptr(ptr), change, ty)?;\n             }\n \n-            \"atomic_cxchg_relaxed\" |\n-            \"atomic_cxchg\" => {\n+            _ if intrinsic_name.starts_with(\"atomic_cxchg\") => {\n                 let ty = substs.type_at(0);\n                 let ptr = arg_vals[0].read_ptr(&self.memory)?;\n                 let expect_old = self.value_to_primval(arg_vals[1], ty)?;\n@@ -111,8 +110,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(Lvalue::from_ptr(ptr), change, ty)?;\n             }\n \n-            \"atomic_xadd\" |\n-            \"atomic_xadd_relaxed\" => {\n+            \"atomic_or\" | \"atomic_or_acq\" | \"atomic_or_rel\" | \"atomic_or_acqrel\" | \"atomic_or_relaxed\" |\n+            \"atomic_xor\" | \"atomic_xor_acq\" | \"atomic_xor_rel\" | \"atomic_xor_acqrel\" | \"atomic_xor_relaxed\" |\n+            \"atomic_and\" | \"atomic_and_acq\" | \"atomic_and_rel\" | \"atomic_and_acqrel\" | \"atomic_and_relaxed\" |\n+            \"atomic_xadd\" | \"atomic_xadd_acq\" | \"atomic_xadd_rel\" | \"atomic_xadd_acqrel\" | \"atomic_xadd_relaxed\" |\n+            \"atomic_xsub\" | \"atomic_xsub_acq\" | \"atomic_xsub_rel\" | \"atomic_xsub_acqrel\" | \"atomic_xsub_relaxed\" => {\n                 let ty = substs.type_at(0);\n                 let ptr = arg_vals[0].read_ptr(&self.memory)?;\n                 let change = self.value_to_primval(arg_vals[1], ty)?;\n@@ -124,27 +126,18 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 };\n                 self.write_primval(dest, old, ty)?;\n                 let kind = self.ty_to_primval_kind(ty)?;\n-                // FIXME: what do atomics do on overflow?\n-                let (val, _) = operator::binary_op(mir::BinOp::Add, old, kind, change, kind)?;\n-                self.write_primval(Lvalue::from_ptr(ptr), val, ty)?;\n-            },\n-\n-            \"atomic_xsub_rel\" => {\n-                let ty = substs.type_at(0);\n-                let ptr = arg_vals[0].read_ptr(&self.memory)?;\n-                let change = self.value_to_primval(arg_vals[1], ty)?;\n-                let old = self.read_value(ptr, ty)?;\n-                let old = match old {\n-                    Value::ByVal(val) => val,\n-                    Value::ByRef(_) => bug!(\"just read the value, can't be byref\"),\n-                    Value::ByValPair(..) => bug!(\"atomic_xsub_rel doesn't work with nonprimitives\"),\n+                let op = match intrinsic_name.split('_').nth(1).unwrap() {\n+                    \"or\" => mir::BinOp::BitOr,\n+                    \"xor\" => mir::BinOp::BitXor,\n+                    \"and\" => mir::BinOp::BitAnd,\n+                    \"xadd\" => mir::BinOp::Add,\n+                    \"xsub\" => mir::BinOp::Sub,\n+                    _ => bug!(),\n                 };\n-                self.write_primval(dest, old, ty)?;\n-                let kind = self.ty_to_primval_kind(ty)?;\n                 // FIXME: what do atomics do on overflow?\n-                let (val, _) = operator::binary_op(mir::BinOp::Sub, old, kind, change, kind)?;\n+                let (val, _) = operator::binary_op(op, old, kind, change, kind)?;\n                 self.write_primval(Lvalue::from_ptr(ptr), val, ty)?;\n-            }\n+            },\n \n             \"breakpoint\" => unimplemented!(), // halt miri\n "}, {"sha": "ada584705401f3dd3f71431c4b223e5b001a5838", "filename": "tests/run-pass/atomic-access-bool.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bb33830c60f9b815bce976567c53a0b7e3f13d9c/tests%2Frun-pass%2Fatomic-access-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb33830c60f9b815bce976567c53a0b7e3f13d9c/tests%2Frun-pass%2Fatomic-access-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fatomic-access-bool.rs?ref=bb33830c60f9b815bce976567c53a0b7e3f13d9c", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::sync::atomic::{AtomicBool, ATOMIC_BOOL_INIT};\n+use std::sync::atomic::Ordering::*;\n+\n+static mut ATOMIC: AtomicBool = ATOMIC_BOOL_INIT;\n+\n+fn main() {\n+    unsafe {\n+        assert_eq!(*ATOMIC.get_mut(), false);\n+        ATOMIC.store(true, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), true);\n+        ATOMIC.fetch_or(false, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), true);\n+        ATOMIC.fetch_and(false, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), false);\n+        ATOMIC.fetch_nand(true, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), true);\n+        ATOMIC.fetch_xor(true, SeqCst);\n+        assert_eq!(*ATOMIC.get_mut(), false);\n+    }\n+}"}, {"sha": "61e9a965889669556d36c798a322e28e3deda2f4", "filename": "tests/run-pass/atomic-compare_exchange.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bb33830c60f9b815bce976567c53a0b7e3f13d9c/tests%2Frun-pass%2Fatomic-compare_exchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb33830c60f9b815bce976567c53a0b7e3f13d9c/tests%2Frun-pass%2Fatomic-compare_exchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fatomic-compare_exchange.rs?ref=bb33830c60f9b815bce976567c53a0b7e3f13d9c", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::sync::atomic::{AtomicIsize, ATOMIC_ISIZE_INIT};\n+use std::sync::atomic::Ordering::*;\n+\n+static ATOMIC: AtomicIsize = ATOMIC_ISIZE_INIT;\n+\n+fn main() {\n+    // Make sure trans can emit all the intrinsics correctly\n+    ATOMIC.compare_exchange(0, 1, Relaxed, Relaxed).ok();\n+    ATOMIC.compare_exchange(0, 1, Acquire, Relaxed).ok();\n+    ATOMIC.compare_exchange(0, 1, Release, Relaxed).ok();\n+    ATOMIC.compare_exchange(0, 1, AcqRel, Relaxed).ok();\n+    ATOMIC.compare_exchange(0, 1, SeqCst, Relaxed).ok();\n+    ATOMIC.compare_exchange(0, 1, Acquire, Acquire).ok();\n+    ATOMIC.compare_exchange(0, 1, AcqRel, Acquire).ok();\n+    ATOMIC.compare_exchange(0, 1, SeqCst, Acquire).ok();\n+    ATOMIC.compare_exchange(0, 1, SeqCst, SeqCst).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, Relaxed, Relaxed).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, Acquire, Relaxed).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, Release, Relaxed).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, AcqRel, Relaxed).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, SeqCst, Relaxed).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, Acquire, Acquire).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, AcqRel, Acquire).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, SeqCst, Acquire).ok();\n+    ATOMIC.compare_exchange_weak(0, 1, SeqCst, SeqCst).ok();\n+}"}]}