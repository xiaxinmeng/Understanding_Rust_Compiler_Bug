{"sha": "5f7055988b52e61040130a1f0747440a3a249467", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNzA1NTk4OGI1MmU2MTA0MDEzMGExZjA3NDc0NDBhM2EyNDk0Njc=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-04-17T10:19:58Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-04-17T10:25:07Z"}, "message": "Resolve inconsistency in error messages between \"parameter\" and \"variable\".", "tree": {"sha": "ae4e8015fd50c2122f9cee8129a72e978dbd11b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae4e8015fd50c2122f9cee8129a72e978dbd11b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f7055988b52e61040130a1f0747440a3a249467", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f7055988b52e61040130a1f0747440a3a249467", "html_url": "https://github.com/rust-lang/rust/commit/5f7055988b52e61040130a1f0747440a3a249467", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f7055988b52e61040130a1f0747440a3a249467/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "258e3b3a75a0da006cd492307fc46ef605e774ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/258e3b3a75a0da006cd492307fc46ef605e774ad", "html_url": "https://github.com/rust-lang/rust/commit/258e3b3a75a0da006cd492307fc46ef605e774ad"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "83416eaa06274dab59c9066bbea191f8cc35968e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7055988b52e61040130a1f0747440a3a249467/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f7055988b52e61040130a1f0747440a3a249467/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5f7055988b52e61040130a1f0747440a3a249467", "patch": "@@ -234,12 +234,12 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver<'_>,\n                 },\n                 Def::TyParam(def_id) => {\n                     if let Some(span) = resolver.definitions.opt_span(def_id) {\n-                        err.span_label(span, \"type variable from outer function\");\n+                        err.span_label(span, \"type parameter from outer function\");\n                     }\n                 }\n                 Def::ConstParam(def_id) => {\n                     if let Some(span) = resolver.definitions.opt_span(def_id) {\n-                        err.span_label(span, \"const variable from outer function\");\n+                        err.span_label(span, \"const parameter from outer function\");\n                     }\n                 }\n                 _ => {"}, {"sha": "6f24c0d86997e3158fe54e2b24f33f484286ea70", "filename": "src/test/ui/bad/bad-type-env-capture.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-type-env-capture.stderr?ref=5f7055988b52e61040130a1f0747440a3a249467", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/bad-type-env-capture.rs:2:15\n    |\n LL | fn foo<T>() {\n-   |        - type variable from outer function\n+   |        - type parameter from outer function\n LL |     fn bar(b: T) { }\n    |        ---    ^ use of generic parameter from outer function\n    |        |"}, {"sha": "f0b7562f62196ac5ba974425d6b5c9b4bc9398cf", "filename": "src/test/ui/const-generics/const-param-from-outer-fn.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-from-outer-fn.stderr?ref=5f7055988b52e61040130a1f0747440a3a249467", "patch": "@@ -8,7 +8,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/const-param-from-outer-fn.rs:6:9\n    |\n LL | fn foo<const X: u32>() {\n-   |              - const variable from outer function\n+   |              - const parameter from outer function\n LL |     fn bar() -> u32 {\n    |        --- try adding a local generic parameter in this method instead\n LL |         X"}, {"sha": "1d9dfe46722ecf88bc3b09943e8cb93230eb2862", "filename": "src/test/ui/error-codes/E0401.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0401.stderr?ref=5f7055988b52e61040130a1f0747440a3a249467", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/E0401.rs:4:39\n    |\n LL | fn foo<T>(x: T) {\n-   |        - type variable from outer function\n+   |        - type parameter from outer function\n LL |     fn bfnr<U, V: Baz<U>, W: Fn()>(y: T) {\n    |        ---------------------------    ^ use of generic parameter from outer function\n    |        |\n@@ -12,7 +12,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/E0401.rs:9:16\n    |\n LL | fn foo<T>(x: T) {\n-   |        - type variable from outer function\n+   |        - type parameter from outer function\n ...\n LL |     fn baz<U,\n    |        --- try adding a local generic parameter in this method instead"}, {"sha": "09f79105f6a0e5e41852f252ae0c030c5fcdcae9", "filename": "src/test/ui/inner-static-type-parameter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finner-static-type-parameter.stderr?ref=5f7055988b52e61040130a1f0747440a3a249467", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/inner-static-type-parameter.rs:6:19\n    |\n LL | fn foo<T>() {\n-   |    --- - type variable from outer function\n+   |    --- - type parameter from outer function\n    |    |\n    |    try adding a local generic parameter in this method instead\n LL |     static a: Bar<T> = Bar::What;"}, {"sha": "8764ac8a8563c428af4f76e277c24f94ccaa002c", "filename": "src/test/ui/issues/issue-3021-c.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3021-c.stderr?ref=5f7055988b52e61040130a1f0747440a3a249467", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-3021-c.rs:4:24\n    |\n LL | fn siphash<T>() {\n-   |            - type variable from outer function\n+   |            - type parameter from outer function\n ...\n LL |         fn g(&self, x: T) -> T;\n    |            -           ^ use of generic parameter from outer function\n@@ -13,7 +13,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-3021-c.rs:4:30\n    |\n LL | fn siphash<T>() {\n-   |            - type variable from outer function\n+   |            - type parameter from outer function\n ...\n LL |         fn g(&self, x: T) -> T;\n    |            -                 ^ use of generic parameter from outer function"}, {"sha": "fa04ec12b741cdb122adafa36e0301bca8d24288", "filename": "src/test/ui/issues/issue-3214.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3214.stderr?ref=5f7055988b52e61040130a1f0747440a3a249467", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-3214.rs:3:12\n    |\n LL | fn foo<T>() {\n-   |    --- - type variable from outer function\n+   |    --- - type parameter from outer function\n    |    |\n    |    try adding a local generic parameter in this method instead\n LL |     struct Foo {"}, {"sha": "1c58b9c3911046c960c47424d140b12560f6b162", "filename": "src/test/ui/issues/issue-5997-enum.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5997-enum.stderr?ref=5f7055988b52e61040130a1f0747440a3a249467", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-5997-enum.rs:2:16\n    |\n LL | fn f<Z>() -> bool {\n-   |    - - type variable from outer function\n+   |    - - type parameter from outer function\n    |    |\n    |    try adding a local generic parameter in this method instead\n LL |     enum E { V(Z) }"}, {"sha": "5b388d16d75534865d6f29deb2c4dcdaee367c45", "filename": "src/test/ui/issues/issue-5997-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-5997-struct.stderr?ref=5f7055988b52e61040130a1f0747440a3a249467", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/issue-5997-struct.rs:2:14\n    |\n LL | fn f<T>() -> bool {\n-   |    - - type variable from outer function\n+   |    - - type parameter from outer function\n    |    |\n    |    try adding a local generic parameter in this method instead\n LL |     struct S(T);"}, {"sha": "f6741b5e5e82aca56ccd0bf026a30c3b2dbabe03", "filename": "src/test/ui/nested-ty-params.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fnested-ty-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fnested-ty-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnested-ty-params.stderr?ref=5f7055988b52e61040130a1f0747440a3a249467", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/nested-ty-params.rs:3:16\n    |\n LL | fn hd<U>(v: Vec<U> ) -> U {\n-   |       - type variable from outer function\n+   |       - type parameter from outer function\n LL |     fn hd1(w: [U]) -> U { return w[0]; }\n    |        ---     ^ use of generic parameter from outer function\n    |        |\n@@ -12,7 +12,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/nested-ty-params.rs:3:23\n    |\n LL | fn hd<U>(v: Vec<U> ) -> U {\n-   |       - type variable from outer function\n+   |       - type parameter from outer function\n LL |     fn hd1(w: [U]) -> U { return w[0]; }\n    |        ---            ^ use of generic parameter from outer function\n    |        |"}, {"sha": "10a703ee09351033cdb4babe56fe368fdf4bbeb8", "filename": "src/test/ui/resolve/resolve-type-param-in-item-in-trait.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-type-param-in-item-in-trait.stderr?ref=5f7055988b52e61040130a1f0747440a3a249467", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:8:22\n    |\n LL | trait TraitA<A> {\n-   |              - type variable from outer function\n+   |              - type parameter from outer function\n LL |     fn outer(&self) {\n    |        ----- try adding a local generic parameter in this method instead\n LL |         enum Foo<B> {\n@@ -13,7 +13,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:16:23\n    |\n LL | trait TraitB<A> {\n-   |              - type variable from outer function\n+   |              - type parameter from outer function\n LL |     fn outer(&self) {\n    |        ----- try adding a local generic parameter in this method instead\n LL |         struct Foo<B>(A);\n@@ -23,7 +23,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:23:28\n    |\n LL | trait TraitC<A> {\n-   |              - type variable from outer function\n+   |              - type parameter from outer function\n LL |     fn outer(&self) {\n    |        ----- try adding a local generic parameter in this method instead\n LL |         struct Foo<B> { a: A }\n@@ -33,7 +33,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/resolve-type-param-in-item-in-trait.rs:30:22\n    |\n LL | trait TraitD<A> {\n-   |              - type variable from outer function\n+   |              - type parameter from outer function\n LL |     fn outer(&self) {\n LL |         fn foo<B>(a: A) { }\n    |            ------    ^ use of generic parameter from outer function"}, {"sha": "ea991069c08ddc1925103d692090a3f3ad107ebd", "filename": "src/test/ui/type/type-arg-out-of-scope.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5f7055988b52e61040130a1f0747440a3a249467/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-arg-out-of-scope.stderr?ref=5f7055988b52e61040130a1f0747440a3a249467", "patch": "@@ -2,7 +2,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/type-arg-out-of-scope.rs:3:25\n    |\n LL | fn foo<T>(x: T) {\n-   |        - type variable from outer function\n+   |        - type parameter from outer function\n LL |     fn bar(f: Box<FnMut(T) -> T>) { }\n    |        ---              ^ use of generic parameter from outer function\n    |        |\n@@ -12,7 +12,7 @@ error[E0401]: can't use generic parameters from outer function\n   --> $DIR/type-arg-out-of-scope.rs:3:31\n    |\n LL | fn foo<T>(x: T) {\n-   |        - type variable from outer function\n+   |        - type parameter from outer function\n LL |     fn bar(f: Box<FnMut(T) -> T>) { }\n    |        ---                    ^ use of generic parameter from outer function\n    |        |"}]}