{"sha": "2bb6635a852aefe4f1151352f0b11e3a9e2f5b6d", "node_id": "C_kwDOAAsO6NoAKDJiYjY2MzVhODUyYWVmZTRmMTE1MTM1MmYwYjExZTNhOWUyZjViNmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-02T13:17:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-02T13:17:16Z"}, "message": "Auto merge of #13173 - Veykril:synthetic, r=Veykril\n\nDon't store SyntheticSyntax in the reverse maps in BodySourceMap\n\nThey are ZSTs which we can just create on missing access instead.", "tree": {"sha": "79a8e871281e5d28bb2ddfe6a9bb935da9836b80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79a8e871281e5d28bb2ddfe6a9bb935da9836b80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bb6635a852aefe4f1151352f0b11e3a9e2f5b6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bb6635a852aefe4f1151352f0b11e3a9e2f5b6d", "html_url": "https://github.com/rust-lang/rust/commit/2bb6635a852aefe4f1151352f0b11e3a9e2f5b6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bb6635a852aefe4f1151352f0b11e3a9e2f5b6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f8153e4a543d00126b402c24e9c119d8c76e74b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f8153e4a543d00126b402c24e9c119d8c76e74b", "html_url": "https://github.com/rust-lang/rust/commit/4f8153e4a543d00126b402c24e9c119d8c76e74b"}, {"sha": "fe0a10625633f5896bfe220e5ad75ec661a82007", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0a10625633f5896bfe220e5ad75ec661a82007", "html_url": "https://github.com/rust-lang/rust/commit/fe0a10625633f5896bfe220e5ad75ec661a82007"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "d572d46e8b01d61880d291423fb2544182a07e9d", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bb6635a852aefe4f1151352f0b11e3a9e2f5b6d/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb6635a852aefe4f1151352f0b11e3a9e2f5b6d/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=2bb6635a852aefe4f1151352f0b11e3a9e2f5b6d", "patch": "@@ -264,10 +264,10 @@ pub type LabelSource = InFile<LabelPtr>;\n #[derive(Default, Debug, Eq, PartialEq)]\n pub struct BodySourceMap {\n     expr_map: FxHashMap<ExprSource, ExprId>,\n-    expr_map_back: ArenaMap<ExprId, Result<ExprSource, SyntheticSyntax>>,\n+    expr_map_back: ArenaMap<ExprId, ExprSource>,\n \n     pat_map: FxHashMap<PatSource, PatId>,\n-    pat_map_back: ArenaMap<PatId, Result<PatSource, SyntheticSyntax>>,\n+    pat_map_back: ArenaMap<PatId, PatSource>,\n \n     label_map: FxHashMap<LabelSource, LabelId>,\n     label_map_back: ArenaMap<LabelId, LabelSource>,\n@@ -420,7 +420,7 @@ impl Index<LabelId> for Body {\n // Perhaps `expr_syntax` and `expr_id`?\n impl BodySourceMap {\n     pub fn expr_syntax(&self, expr: ExprId) -> Result<ExprSource, SyntheticSyntax> {\n-        self.expr_map_back[expr].clone()\n+        self.expr_map_back.get(expr).cloned().ok_or(SyntheticSyntax)\n     }\n \n     pub fn node_expr(&self, node: InFile<&ast::Expr>) -> Option<ExprId> {\n@@ -434,7 +434,7 @@ impl BodySourceMap {\n     }\n \n     pub fn pat_syntax(&self, pat: PatId) -> Result<PatSource, SyntheticSyntax> {\n-        self.pat_map_back[pat].clone()\n+        self.pat_map_back.get(pat).cloned().ok_or(SyntheticSyntax)\n     }\n \n     pub fn node_pat(&self, node: InFile<&ast::Pat>) -> Option<PatId> {"}, {"sha": "df536e09fde3485068d4e8deb759b307321fa029", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2bb6635a852aefe4f1151352f0b11e3a9e2f5b6d/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bb6635a852aefe4f1151352f0b11e3a9e2f5b6d/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=2bb6635a852aefe4f1151352f0b11e3a9e2f5b6d", "patch": "@@ -24,7 +24,7 @@ use syntax::{\n \n use crate::{\n     adt::StructKind,\n-    body::{Body, BodySourceMap, Expander, LabelSource, PatPtr, SyntheticSyntax},\n+    body::{Body, BodySourceMap, Expander, LabelSource, PatPtr},\n     body::{BodyDiagnostic, ExprSource, PatSource},\n     builtin_type::{BuiltinFloat, BuiltinInt, BuiltinUint},\n     db::DefDatabase,\n@@ -152,34 +152,34 @@ impl ExprCollector<'_> {\n \n     fn alloc_expr(&mut self, expr: Expr, ptr: AstPtr<ast::Expr>) -> ExprId {\n         let src = self.expander.to_source(ptr);\n-        let id = self.make_expr(expr, Ok(src.clone()));\n+        let id = self.make_expr(expr, src.clone());\n         self.source_map.expr_map.insert(src, id);\n         id\n     }\n     // desugared exprs don't have ptr, that's wrong and should be fixed\n     // somehow.\n     fn alloc_expr_desugared(&mut self, expr: Expr) -> ExprId {\n-        self.make_expr(expr, Err(SyntheticSyntax))\n+        self.body.exprs.alloc(expr)\n     }\n     fn missing_expr(&mut self) -> ExprId {\n         self.alloc_expr_desugared(Expr::Missing)\n     }\n-    fn make_expr(&mut self, expr: Expr, src: Result<ExprSource, SyntheticSyntax>) -> ExprId {\n+    fn make_expr(&mut self, expr: Expr, src: ExprSource) -> ExprId {\n         let id = self.body.exprs.alloc(expr);\n         self.source_map.expr_map_back.insert(id, src);\n         id\n     }\n \n     fn alloc_pat(&mut self, pat: Pat, ptr: PatPtr) -> PatId {\n         let src = self.expander.to_source(ptr);\n-        let id = self.make_pat(pat, Ok(src.clone()));\n+        let id = self.make_pat(pat, src.clone());\n         self.source_map.pat_map.insert(src, id);\n         id\n     }\n     fn missing_pat(&mut self) -> PatId {\n-        self.make_pat(Pat::Missing, Err(SyntheticSyntax))\n+        self.body.pats.alloc(Pat::Missing)\n     }\n-    fn make_pat(&mut self, pat: Pat, src: Result<PatSource, SyntheticSyntax>) -> PatId {\n+    fn make_pat(&mut self, pat: Pat, src: PatSource) -> PatId {\n         let id = self.body.pats.alloc(pat);\n         self.source_map.pat_map_back.insert(id, src);\n         id"}]}