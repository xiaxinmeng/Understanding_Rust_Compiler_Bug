{"sha": "3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZDRhZjg4YmVhMmU2ZWNkZDM0NTVlZDg5YjNlZjFmYzM1MDBhYTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-18T14:03:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-18T14:03:12Z"}, "message": "Auto merge of #47528 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 6 pull requests\n\n- Successful merges: #47250, #47313, #47398, #47468, #47471, #47520\n- Failed merges:", "tree": {"sha": "7932af7a8bee193a20ff42ba160c1297e4aedfb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7932af7a8bee193a20ff42ba160c1297e4aedfb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "html_url": "https://github.com/rust-lang/rust/commit/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44afd76788df1a63fcd3fe19815eb28dbe9c2bf7", "url": "https://api.github.com/repos/rust-lang/rust/commits/44afd76788df1a63fcd3fe19815eb28dbe9c2bf7", "html_url": "https://github.com/rust-lang/rust/commit/44afd76788df1a63fcd3fe19815eb28dbe9c2bf7"}, {"sha": "260653772a35d44ea474fc6d464432ac6f2a676f", "url": "https://api.github.com/repos/rust-lang/rust/commits/260653772a35d44ea474fc6d464432ac6f2a676f", "html_url": "https://github.com/rust-lang/rust/commit/260653772a35d44ea474fc6d464432ac6f2a676f"}], "stats": {"total": 936, "additions": 821, "deletions": 115}, "files": [{"sha": "7655097681ba2975e9ad5f4d558609e3ad84413d", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -254,7 +254,9 @@ impl<'a> Builder<'a> {\n             Kind::Test => describe!(check::Tidy, check::Bootstrap, check::DefaultCompiletest,\n                 check::HostCompiletest, check::Crate, check::CrateLibrustc, check::Rustdoc,\n                 check::Linkcheck, check::Cargotest, check::Cargo, check::Rls, check::Docs,\n-                check::ErrorIndex, check::Distcheck, check::Rustfmt, check::Miri, check::Clippy),\n+                check::ErrorIndex, check::Distcheck, check::Rustfmt, check::Miri, check::Clippy,\n+                check::RustdocJS),\n+\n             Kind::Bench => describe!(check::Crate, check::CrateLibrustc),\n             Kind::Doc => describe!(doc::UnstableBook, doc::UnstableBookGen, doc::TheBook,\n                 doc::Standalone, doc::Std, doc::Test, doc::Rustc, doc::ErrorIndex, doc::Nomicon,\n@@ -443,7 +445,8 @@ impl<'a> Builder<'a> {\n         let out_dir = self.stage_out(compiler, mode);\n         cargo.env(\"CARGO_TARGET_DIR\", out_dir)\n              .arg(cmd)\n-             .arg(\"--target\").arg(target);\n+             .arg(\"--target\")\n+             .arg(target);\n \n         // If we were invoked from `make` then that's already got a jobserver\n         // set up for us so no need to tell Cargo about jobs all over again."}, {"sha": "78ad71172a848dedda6af4a9ecc3b96b8ecec189", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -424,6 +424,43 @@ fn path_for_cargo(builder: &Builder, compiler: Compiler) -> OsString {\n     env::join_paths(iter::once(path).chain(env::split_paths(&old_path))).expect(\"\")\n }\n \n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+pub struct RustdocJS {\n+    pub host: Interned<String>,\n+    pub target: Interned<String>,\n+}\n+\n+impl Step for RustdocJS {\n+    type Output = ();\n+    const DEFAULT: bool = true;\n+    const ONLY_HOSTS: bool = true;\n+\n+    fn should_run(run: ShouldRun) -> ShouldRun {\n+        run.path(\"src/test/rustdoc-js\")\n+    }\n+\n+    fn make_run(run: RunConfig) {\n+        run.builder.ensure(RustdocJS {\n+            host: run.host,\n+            target: run.target,\n+        });\n+    }\n+\n+    fn run(self, builder: &Builder) {\n+        if let Some(ref nodejs) = builder.config.nodejs {\n+            let mut command = Command::new(nodejs);\n+            command.args(&[\"src/tools/rustdoc-js/tester.js\", &*self.host]);\n+            builder.ensure(::doc::Std {\n+                target: self.target,\n+                stage: builder.top_stage,\n+            });\n+            builder.run(&mut command);\n+        } else {\n+            println!(\"No nodejs found, skipping \\\"src/test/rustdoc-js\\\" tests\");\n+        }\n+    }\n+}\n+\n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Tidy {\n     host: Interned<String>,"}, {"sha": "9bf762a3b4bfda3b41648e0d4628bc64157873bf", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -419,8 +419,8 @@ impl Step for Standalone {\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Std {\n-    stage: u32,\n-    target: Interned<String>,\n+    pub stage: u32,\n+    pub target: Interned<String>,\n }\n \n impl Step for Std {"}, {"sha": "1aca687af2bf3e808bbff8cedaf4741ee28ef9e3", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -1241,7 +1241,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }\n             ObligationCauseCode::ItemObligation(item_def_id) => {\n                 let item_name = tcx.item_path_str(item_def_id);\n-                err.note(&format!(\"required by `{}`\", item_name));\n+                let msg = format!(\"required by `{}`\", item_name);\n+                if let Some(sp) = tcx.hir.span_if_local(item_def_id) {\n+                    let sp = tcx.sess.codemap().def_span(sp);\n+                    err.span_note(sp, &msg);\n+                } else {\n+                    err.note(&msg);\n+                }\n             }\n             ObligationCauseCode::ObjectCastObligation(object_ty) => {\n                 err.note(&format!(\"required for the cast to the object type `{}`\","}, {"sha": "d003ef74f054bcee711fc46734369623a65a8d54", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -842,10 +842,32 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                         if let mc::NoteClosureEnv(upvar_id) = err.cmt.note {\n                             let node_id = self.tcx.hir.hir_to_node_id(upvar_id.var_id);\n                             let sp = self.tcx.hir.span(node_id);\n-                            match self.tcx.sess.codemap().span_to_snippet(sp) {\n-                                Ok(snippet) => {\n+                            let fn_closure_msg = \"`Fn` closures cannot capture their enclosing \\\n+                                                  environment for modifications\";\n+                            match (self.tcx.sess.codemap().span_to_snippet(sp), &err.cmt.cat) {\n+                                (_, &Categorization::Upvar(mc::Upvar {\n+                                    kind: ty::ClosureKind::Fn, ..\n+                                })) => {\n+                                    db.note(fn_closure_msg);\n+                                    // we should point at the cause for this closure being\n+                                    // identified as `Fn` (like in signature of method this\n+                                    // closure was passed into)\n+                                }\n+                                (Ok(ref snippet), ref cat) => {\n                                     let msg = &format!(\"consider making `{}` mutable\", snippet);\n-                                    db.span_suggestion(sp, msg, format!(\"mut {}\", snippet));\n+                                    let suggestion = format!(\"mut {}\", snippet);\n+\n+                                    if let &Categorization::Deref(ref cmt, _) = cat {\n+                                        if let Categorization::Upvar(mc::Upvar {\n+                                            kind: ty::ClosureKind::Fn, ..\n+                                        }) = cmt.cat {\n+                                            db.note(fn_closure_msg);\n+                                        } else {\n+                                            db.span_suggestion(sp, msg, suggestion);\n+                                        }\n+                                    } else {\n+                                        db.span_suggestion(sp, msg, suggestion);\n+                                    }\n                                 }\n                                 _ => {\n                                     db.span_help(sp, \"consider making this binding mutable\");"}, {"sha": "b8c34d78d305ef8490f26cd5066150477551df2c", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -328,6 +328,9 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n     if trait_.def_id() == tcx.lang_items().deref_trait() {\n         super::build_deref_target_impls(cx, &trait_items, ret);\n     }\n+    if let Some(trait_did) = trait_.def_id() {\n+        record_extern_trait(cx, trait_did);\n+    }\n \n     let provided = trait_.def_id().map(|did| {\n         tcx.provided_trait_methods(did)\n@@ -483,3 +486,9 @@ fn separate_supertrait_bounds(mut g: clean::Generics)\n     });\n     (g, ty_bounds)\n }\n+\n+pub fn record_extern_trait(cx: &DocContext, did: DefId) {\n+    cx.external_traits.borrow_mut().entry(did).or_insert_with(|| {\n+        build_external_trait(cx, did)\n+    });\n+}"}, {"sha": "cc75664cacbcce66745e3a6a0f8e630974feb165", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -3163,8 +3163,7 @@ fn register_def(cx: &DocContext, def: Def) -> DefId {\n     if did.is_local() { return did }\n     inline::record_extern_fqn(cx, did, kind);\n     if let TypeKind::Trait = kind {\n-        let t = inline::build_external_trait(cx, did);\n-        cx.external_traits.borrow_mut().insert(did, t);\n+        inline::record_extern_trait(cx, did);\n     }\n     did\n }"}, {"sha": "cfa09ea30a8bed4ade5937c639383776767da02a", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -3277,8 +3277,7 @@ fn spotlight_decl(decl: &clean::FnDecl) -> Result<String, fmt::Error> {\n         if let Some(impls) = c.impls.get(&did) {\n             for i in impls {\n                 let impl_ = i.inner_impl();\n-                if impl_.trait_.def_id().and_then(|d| c.traits.get(&d))\n-                                        .map_or(false, |t| t.is_spotlight) {\n+                if impl_.trait_.def_id().map_or(false, |d| c.traits[&d].is_spotlight) {\n                     if out.is_empty() {\n                         out.push_str(\n                             &format!(\"<h3 class=\\\"important\\\">Important traits for {}</h3>\\\n@@ -3444,7 +3443,7 @@ fn render_impl(w: &mut fmt::Formatter, cx: &Context, i: &Impl, link: AssocItemLi\n     }\n \n     let traits = &cache().traits;\n-    let trait_ = i.trait_did().and_then(|did| traits.get(&did));\n+    let trait_ = i.trait_did().map(|did| &traits[&did]);\n \n     if !show_def_docs {\n         write!(w, \"<span class='docblock autohide'>\")?;"}, {"sha": "a9a5bd5de0552f6f4752917e0b4182d3356354ba", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 39, "deletions": 43, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -353,35 +353,33 @@\n      * This code is an unmodified version of the code written by Marco de Wit\n      * and was found at http://stackoverflow.com/a/18514751/745719\n      */\n-    var levenshtein = (function() {\n-        var row2 = [];\n-        return function(s1, s2) {\n-            if (s1 === s2) {\n-                return 0;\n+    var levenshtein_row2 = [];\n+    function levenshtein(s1, s2) {\n+        if (s1 === s2) {\n+            return 0;\n+        }\n+        var s1_len = s1.length, s2_len = s2.length;\n+        if (s1_len && s2_len) {\n+            var i1 = 0, i2 = 0, a, b, c, c2, row = levenshtein_row2;\n+            while (i1 < s1_len) {\n+                row[i1] = ++i1;\n             }\n-            var s1_len = s1.length, s2_len = s2.length;\n-            if (s1_len && s2_len) {\n-                var i1 = 0, i2 = 0, a, b, c, c2, row = row2;\n-                while (i1 < s1_len) {\n-                    row[i1] = ++i1;\n-                }\n-                while (i2 < s2_len) {\n-                    c2 = s2.charCodeAt(i2);\n-                    a = i2;\n-                    ++i2;\n-                    b = i2;\n-                    for (i1 = 0; i1 < s1_len; ++i1) {\n-                        c = a + (s1.charCodeAt(i1) !== c2 ? 1 : 0);\n-                        a = row[i1];\n-                        b = b < a ? (b < c ? b + 1 : c) : (a < c ? a + 1 : c);\n-                        row[i1] = b;\n-                    }\n+            while (i2 < s2_len) {\n+                c2 = s2.charCodeAt(i2);\n+                a = i2;\n+                ++i2;\n+                b = i2;\n+                for (i1 = 0; i1 < s1_len; ++i1) {\n+                    c = a + (s1.charCodeAt(i1) !== c2 ? 1 : 0);\n+                    a = row[i1];\n+                    b = b < a ? (b < c ? b + 1 : c) : (a < c ? a + 1 : c);\n+                    row[i1] = b;\n                 }\n-                return b;\n             }\n-            return s1_len + s2_len;\n-        };\n-    })();\n+            return b;\n+        }\n+        return s1_len + s2_len;\n+    }\n \n     function initSearch(rawSearchIndex) {\n         var currentResults, index, searchIndex;\n@@ -400,12 +398,20 @@\n         /**\n          * Executes the query and builds an index of results\n          * @param  {[Object]} query     [The user query]\n-         * @param  {[type]} max         [The maximum results returned]\n          * @param  {[type]} searchWords [The list of search words to query\n          *                               against]\n          * @return {[type]}             [A search index of results]\n          */\n-        function execQuery(query, max, searchWords) {\n+        function execQuery(query, searchWords) {\n+            function itemTypeFromName(typename) {\n+                for (var i = 0; i < itemTypes.length; ++i) {\n+                    if (itemTypes[i] === typename) {\n+                        return i;\n+                    }\n+                }\n+                return -1;\n+            }\n+\n             var valLower = query.query.toLowerCase(),\n                 val = valLower,\n                 typeFilter = itemTypeFromName(query.type),\n@@ -1021,9 +1027,8 @@\n             return true;\n         }\n \n-        function getQuery() {\n-            var matches, type, query, raw =\n-                document.getElementsByClassName('search-input')[0].value;\n+        function getQuery(raw) {\n+            var matches, type, query;\n             query = raw;\n \n             matches = query.match(/^(fn|mod|struct|enum|trait|type|const|macro)\\s*:\\s*/i);\n@@ -1227,7 +1232,7 @@\n         }\n \n         function showResults(results) {\n-            var output, query = getQuery();\n+            var output, query = getQuery(document.getElementsByClassName('search-input')[0].value);\n \n             currentResults = query.id;\n             output = '<h1>Results for ' + escape(query.query) +\n@@ -1271,7 +1276,7 @@\n                 resultIndex;\n             var params = getQueryStringParams();\n \n-            query = getQuery();\n+            query = getQuery(document.getElementsByClassName('search-input')[0].value);\n             if (e) {\n                 e.preventDefault();\n             }\n@@ -1293,19 +1298,10 @@\n                 }\n             }\n \n-            results = execQuery(query, 20000, index);\n+            results = execQuery(query, index);\n             showResults(results);\n         }\n \n-        function itemTypeFromName(typename) {\n-            for (var i = 0; i < itemTypes.length; ++i) {\n-                if (itemTypes[i] === typename) {\n-                    return i;\n-                }\n-            }\n-            return -1;\n-        }\n-\n         function buildIndex(rawSearchIndex) {\n             searchIndex = [];\n             var searchWords = [];"}, {"sha": "0b57d5d26cecf8d110ebe5d42c930cdb28e225fd", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -242,8 +242,8 @@ pub fn opts() -> Vec<RustcOptGroup> {\n                       or `#![doc(html_playground_url=...)]`\",\n                      \"URL\")\n         }),\n-        unstable(\"enable-commonmark\", |o| {\n-            o.optflag(\"\", \"enable-commonmark\", \"to enable commonmark doc rendering/testing\")\n+        unstable(\"disable-commonmark\", |o| {\n+            o.optflag(\"\", \"disable-commonmark\", \"to disable commonmark doc rendering/testing\")\n         }),\n         unstable(\"display-warnings\", |o| {\n             o.optflag(\"\", \"display-warnings\", \"to print code warnings when testing doc\")\n@@ -347,10 +347,10 @@ pub fn main_args(args: &[String]) -> isize {\n     let css_file_extension = matches.opt_str(\"e\").map(|s| PathBuf::from(&s));\n     let cfgs = matches.opt_strs(\"cfg\");\n \n-    let render_type = if matches.opt_present(\"enable-commonmark\") {\n-        RenderType::Pulldown\n-    } else {\n+    let render_type = if matches.opt_present(\"disable-commonmark\") {\n         RenderType::Hoedown\n+    } else {\n+        RenderType::Pulldown\n     };\n \n     if let Some(ref p) = css_file_extension {"}, {"sha": "d1f3ccbd2c6e041de5c08b02bea5ea52c9e4324c", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -211,12 +211,12 @@ pub struct DirBuilder {\n     recursive: bool,\n }\n \n-/// How large a buffer to pre-allocate before reading the entire file at `path`.\n-fn initial_buffer_size<P: AsRef<Path>>(path: P) -> usize {\n+/// How large a buffer to pre-allocate before reading the entire file.\n+fn initial_buffer_size(file: &File) -> usize {\n     // Allocate one extra byte so the buffer doesn't need to grow before the\n     // final `read` call at the end of the file.  Don't worry about `usize`\n     // overflow because reading will fail regardless in that case.\n-    metadata(path).map(|m| m.len() as usize + 1).unwrap_or(0)\n+    file.metadata().map(|m| m.len() as usize + 1).unwrap_or(0)\n }\n \n /// Read the entire contents of a file into a bytes vector.\n@@ -254,8 +254,9 @@ fn initial_buffer_size<P: AsRef<Path>>(path: P) -> usize {\n /// ```\n #[unstable(feature = \"fs_read_write\", issue = \"46588\")]\n pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n-    let mut bytes = Vec::with_capacity(initial_buffer_size(&path));\n-    File::open(path)?.read_to_end(&mut bytes)?;\n+    let mut file = File::open(path)?;\n+    let mut bytes = Vec::with_capacity(initial_buffer_size(&file));\n+    file.read_to_end(&mut bytes)?;\n     Ok(bytes)\n }\n \n@@ -295,8 +296,9 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n /// ```\n #[unstable(feature = \"fs_read_write\", issue = \"46588\")]\n pub fn read_string<P: AsRef<Path>>(path: P) -> io::Result<String> {\n-    let mut string = String::with_capacity(initial_buffer_size(&path));\n-    File::open(path)?.read_to_string(&mut string)?;\n+    let mut file = File::open(path)?;\n+    let mut string = String::with_capacity(initial_buffer_size(&file));\n+    file.read_to_string(&mut string)?;\n     Ok(string)\n }\n "}, {"sha": "863437cac91d46340f4b40a2acff9c4d804803be", "filename": "src/test/rustdoc-js/basic.js", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc-js%2Fbasic.js", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc-js%2Fbasic.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fbasic.js?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'String';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::string', 'name': 'String' },\n+        { 'path': 'std::ffi', 'name': 'OsString' },\n+        { 'path': 'std::ffi', 'name': 'CString' },\n+    ],\n+    'in_args': [\n+        { 'path': 'std::str', 'name': 'eq' },\n+    ],\n+    'returned': [\n+        { 'path': 'std::string::String', 'name': 'add' },\n+    ],\n+};"}, {"sha": "3dac983b11b0ef0a27725dcf12a1c01d17d8ba18", "filename": "src/test/rustdoc-js/enum-option.js", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc-js%2Fenum-option.js", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc-js%2Fenum-option.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fenum-option.js?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'enum:Option';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::option', 'name': 'Option' },\n+    ],\n+};"}, {"sha": "10310d5eaf7b929dd6da6b009b4e190d7b54ca7c", "filename": "src/test/rustdoc-js/fn-forget.js", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc-js%2Ffn-forget.js", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc-js%2Ffn-forget.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Ffn-forget.js?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'fn:forget';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::mem', 'name': 'forget' },\n+        { 'path': 'std::fmt', 'name': 'format' },\n+    ],\n+};"}, {"sha": "920620a9aeed57489d1a4fbeda8b5d3446ab8dab", "filename": "src/test/rustdoc-js/from_u.js", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc-js%2Ffrom_u.js", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc-js%2Ffrom_u.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Ffrom_u.js?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'from_u';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::char', 'name': 'from_u32' },\n+        { 'path': 'std::str', 'name': 'from_utf8' },\n+        { 'path': 'std::string::String', 'name': 'from_utf8' },\n+        { 'path': 'std::boxed::Box', 'name': 'from_unique' },\n+        { 'path': 'std::i32', 'name': 'from_unsigned' },\n+        { 'path': 'std::i128', 'name': 'from_unsigned' },\n+    ],\n+};"}, {"sha": "811ba3474afa0bc6b82c8afb11da2f544183860b", "filename": "src/test/rustdoc-js/macro-print.js", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc-js%2Fmacro-print.js", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc-js%2Fmacro-print.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fmacro-print.js?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'macro:print';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std', 'name': 'print' },\n+        { 'path': 'std', 'name': 'eprint' },\n+        { 'path': 'std', 'name': 'println' },\n+        { 'path': 'std', 'name': 'eprintln' },\n+    ],\n+};"}, {"sha": "3d08ee3736612a58e6b96a165cf2c206297db402", "filename": "src/test/rustdoc-js/string-from_ut.js", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc-js%2Fstring-from_ut.js", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc-js%2Fstring-from_ut.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fstring-from_ut.js?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'String::from_ut';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::string::String', 'name': 'from_utf8' },\n+        { 'path': 'std::string::String', 'name': 'from_utf8' },\n+        { 'path': 'std::string::String', 'name': 'from_utf8_lossy' },\n+        { 'path': 'std::string::String', 'name': 'from_utf16_lossy' },\n+        { 'path': 'std::string::String', 'name': 'from_utf8_unchecked' },\n+    ],\n+};"}, {"sha": "a91bc2d0da288e949fded9fdce7bcd34c68a3a2e", "filename": "src/test/rustdoc-js/struct-vec.js", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc-js%2Fstruct-vec.js", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc-js%2Fstruct-vec.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-js%2Fstruct-vec.js?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const QUERY = 'struct:Vec';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'std::vec', 'name': 'Vec' },\n+        { 'path': 'std::collections', 'name': 'VecDeque' },\n+        { 'path': 'alloc::raw_vec', 'name': 'RawVec' },\n+    ],\n+};"}, {"sha": "5d4adb28cd83a83a3587ee6d6282afb26332548e", "filename": "src/test/rustdoc/inline_cross/auxiliary/impl-inline-without-trait.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl-inline-without-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl-inline-without-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fimpl-inline-without-trait.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait MyTrait {\n+    /// docs for my_trait_method\n+    fn my_trait_method() {}\n+}\n+\n+pub struct MyStruct;\n+\n+impl MyTrait for MyStruct {}"}, {"sha": "ea97d9d6ac2c2577bae046e2cae55d4095371199", "filename": "src/test/rustdoc/inline_cross/impl-inline-without-trait.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl-inline-without-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl-inline-without-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fimpl-inline-without-trait.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:impl-inline-without-trait.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+#![crate_name = \"foo\"]\n+\n+extern crate impl_inline_without_trait;\n+\n+// @has 'foo/struct.MyStruct.html'\n+// @has - '//*[@id=\"method.my_trait_method\"]' 'fn my_trait_method()'\n+// @has - '//*[@class=\"docblock\"]' 'docs for my_trait_method'\n+pub use impl_inline_without_trait::MyStruct;"}, {"sha": "4bd3b684b7ba3cf62983be6aaf5399383bfde4ea", "filename": "src/test/ui/anonymous-higher-ranked-lifetime.stderr", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fanonymous-higher-ranked-lifetime.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -6,7 +6,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), &'s ()) -> _`\n    |\n-   = note: required by `f1`\n+note: required by `f1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:26:1\n+   |\n+26 | fn f1<F>(_: F) where F: Fn(&(), &()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:13:5\n@@ -16,7 +20,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'a, 'r> fn(&'a (), &'r ()) -> _`\n    |\n-   = note: required by `f2`\n+note: required by `f2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:27:1\n+   |\n+27 | fn f2<F>(_: F) where F: for<'a> Fn(&'a (), &()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:14:5\n@@ -26,7 +34,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&(), &'r ()) -> _`\n    |\n-   = note: required by `f3`\n+note: required by `f3`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:28:1\n+   |\n+28 | fn f3<'a, F>(_: F) where F: Fn(&'a (), &()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:15:5\n@@ -36,7 +48,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'s, 'r> fn(&'s (), &'r ()) -> _`\n    |\n-   = note: required by `f4`\n+note: required by `f4`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:29:1\n+   |\n+29 | fn f4<F>(_: F) where F: for<'r> Fn(&(), &'r ()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:16:5\n@@ -46,7 +62,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), &'r ()) -> _`\n    |\n-   = note: required by `f5`\n+note: required by `f5`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:30:1\n+   |\n+30 | fn f5<F>(_: F) where F: for<'r> Fn(&'r (), &'r ()) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:17:5\n@@ -56,7 +76,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>) -> _`\n    |\n-   = note: required by `g1`\n+note: required by `g1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:33:1\n+   |\n+33 | fn g1<F>(_: F) where F: Fn(&(), Box<Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:18:5\n@@ -66,7 +90,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r> fn(&'r (), for<'s> fn(&'s ())) -> _`\n    |\n-   = note: required by `g2`\n+note: required by `g2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:34:1\n+   |\n+34 | fn g2<F>(_: F) where F: Fn(&(), fn(&())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:19:5\n@@ -76,7 +104,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), std::boxed::Box<for<'r> std::ops::Fn(&'r ()) + 'static>) -> _`\n    |\n-   = note: required by `g3`\n+note: required by `g3`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:35:1\n+   |\n+35 | fn g3<F>(_: F) where F: for<'s> Fn(&'s (), Box<Fn(&())>) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:20:5\n@@ -86,7 +118,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'s> fn(&'s (), for<'r> fn(&'r ())) -> _`\n    |\n-   = note: required by `g4`\n+note: required by `g4`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:36:1\n+   |\n+36 | fn g4<F>(_: F) where F: Fn(&(), for<'r> fn(&'r ())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:21:5\n@@ -96,7 +132,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r, 's> fn(&'r (), std::boxed::Box<for<'t0> std::ops::Fn(&'t0 ()) + 'static>, &'s (), for<'t0, 't1> fn(&'t0 (), &'t1 ())) -> _`\n    |\n-   = note: required by `h1`\n+note: required by `h1`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:39:1\n+   |\n+39 | fn h1<F>(_: F) where F: Fn(&(), Box<Fn(&())>, &(), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/anonymous-higher-ranked-lifetime.rs:22:5\n@@ -106,7 +146,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `for<'r, 't0> fn(&'r (), std::boxed::Box<for<'s> std::ops::Fn(&'s ()) + 'static>, &'t0 (), for<'s, 't1> fn(&'s (), &'t1 ())) -> _`\n    |\n-   = note: required by `h2`\n+note: required by `h2`\n+  --> $DIR/anonymous-higher-ranked-lifetime.rs:40:1\n+   |\n+40 | fn h2<F>(_: F) where F: for<'t0> Fn(&(), Box<Fn(&())>, &'t0 (), fn(&(), &())) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 11 previous errors\n "}, {"sha": "7ca3e8728fd9c237cb1d84d2869adf25d70a16c7", "filename": "src/test/ui/did_you_mean/issue-39802-show-5-trait-impls.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-39802-show-5-trait-impls.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -10,7 +10,11 @@ error[E0277]: the trait bound `i8: Foo<i32>` is not satisfied\n              <i8 as Foo<u32>>\n              <i8 as Foo<u64>>\n              <i8 as Foo<bool>>\n-   = note: required by `Foo::bar`\n+note: required by `Foo::bar`\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n+   |\n+12 |     fn bar(&self){}\n+   |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:35:5\n@@ -23,7 +27,11 @@ error[E0277]: the trait bound `u8: Foo<i32>` is not satisfied\n              <u8 as Foo<u32>>\n              <u8 as Foo<u64>>\n              <u8 as Foo<bool>>\n-   = note: required by `Foo::bar`\n+note: required by `Foo::bar`\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n+   |\n+12 |     fn bar(&self){}\n+   |     ^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n   --> $DIR/issue-39802-show-5-trait-impls.rs:36:5\n@@ -37,7 +45,11 @@ error[E0277]: the trait bound `bool: Foo<i32>` is not satisfied\n              <bool as Foo<u32>>\n              <bool as Foo<u64>>\n            and 2 others\n-   = note: required by `Foo::bar`\n+note: required by `Foo::bar`\n+  --> $DIR/issue-39802-show-5-trait-impls.rs:12:5\n+   |\n+12 |     fn bar(&self){}\n+   |     ^^^^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "2bc7e9e46e7c53a7556914f1ec565906e3d5e4b8", "filename": "src/test/ui/did_you_mean/recursion_limit.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -15,7 +15,11 @@ error[E0275]: overflow evaluating the requirement `K: std::marker::Send`\n    = note: required because it appears within the type `C`\n    = note: required because it appears within the type `B`\n    = note: required because it appears within the type `A`\n-   = note: required by `is_send`\n+note: required by `is_send`\n+  --> $DIR/recursion_limit.rs:41:1\n+   |\n+41 | fn is_send<T:Send>() { }\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "4ec5c9ebd2712e3eee5af0c252531e4e1cf05877", "filename": "src/test/ui/fmt/send-sync.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fsend-sync.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -12,7 +12,11 @@ error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync`\n    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `std::fmt::Arguments<'_>`\n-   = note: required by `send`\n+note: required by `send`\n+  --> $DIR/send-sync.rs:11:1\n+   |\n+11 | fn send<T: Send>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync` is not satisfied in `std::fmt::Arguments<'_>`\n   --> $DIR/send-sync.rs:19:5\n@@ -28,7 +32,11 @@ error[E0277]: the trait bound `*mut std::ops::Fn() + 'static: std::marker::Sync`\n    = note: required because it appears within the type `[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `&[std::fmt::ArgumentV1<'_>]`\n    = note: required because it appears within the type `std::fmt::Arguments<'_>`\n-   = note: required by `sync`\n+note: required by `sync`\n+  --> $DIR/send-sync.rs:12:1\n+   |\n+12 | fn sync<T: Sync>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "d30255335a660628906619b92846ff0eb73f87cc", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -7,7 +7,11 @@ error[E0277]: the trait bound `std::cell::Cell<i32>: std::marker::Sync` is not s\n    = help: the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n    = note: required because of the requirements on the impl of `std::marker::Send` for `&std::cell::Cell<i32>`\n    = note: required because it appears within the type `[generator@$DIR/not-send-sync.rs:26:17: 30:6 a:&std::cell::Cell<i32> _]`\n-   = note: required by `main::assert_send`\n+note: required by `main::assert_send`\n+  --> $DIR/not-send-sync.rs:17:5\n+   |\n+17 |     fn assert_send<T: Send>(_: T) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::cell::Cell<i32>: std::marker::Sync` is not satisfied in `[generator@$DIR/not-send-sync.rs:19:17: 23:6 (std::cell::Cell<i32>, ())]`\n   --> $DIR/not-send-sync.rs:19:5\n@@ -18,7 +22,11 @@ error[E0277]: the trait bound `std::cell::Cell<i32>: std::marker::Sync` is not s\n    = help: within `[generator@$DIR/not-send-sync.rs:19:17: 23:6 (std::cell::Cell<i32>, ())]`, the trait `std::marker::Sync` is not implemented for `std::cell::Cell<i32>`\n    = note: required because it appears within the type `(std::cell::Cell<i32>, ())`\n    = note: required because it appears within the type `[generator@$DIR/not-send-sync.rs:19:17: 23:6 (std::cell::Cell<i32>, ())]`\n-   = note: required by `main::assert_sync`\n+note: required by `main::assert_sync`\n+  --> $DIR/not-send-sync.rs:16:5\n+   |\n+16 |     fn assert_sync<T: Sync>(_: T) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "838a3002e3aa7b9872d4c3efdb28e76d9b8f85b8", "filename": "src/test/ui/impl-trait/auto-trait-leak.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -7,7 +7,11 @@ error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::S\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:21:5: 21:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n-   = note: required by `send`\n+note: required by `send`\n+  --> $DIR/auto-trait-leak.rs:24:1\n+   |\n+24 | fn send<T: Send>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::Send` is not satisfied in `impl std::ops::Fn<(i32,)>`\n   --> $DIR/auto-trait-leak.rs:30:5\n@@ -18,7 +22,11 @@ error[E0277]: the trait bound `std::rc::Rc<std::cell::Cell<i32>>: std::marker::S\n    = help: within `impl std::ops::Fn<(i32,)>`, the trait `std::marker::Send` is not implemented for `std::rc::Rc<std::cell::Cell<i32>>`\n    = note: required because it appears within the type `[closure@$DIR/auto-trait-leak.rs:38:5: 38:22 p:std::rc::Rc<std::cell::Cell<i32>>]`\n    = note: required because it appears within the type `impl std::ops::Fn<(i32,)>`\n-   = note: required by `send`\n+note: required by `send`\n+  --> $DIR/auto-trait-leak.rs:24:1\n+   |\n+24 | fn send<T: Send>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0391]: unsupported cyclic reference between types/traits detected\n   --> $DIR/auto-trait-leak.rs:44:1"}, {"sha": "55af26dd91ea3d0dffc5b81501d02823d9c4828a", "filename": "src/test/ui/issue-24424.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-24424.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -4,7 +4,11 @@ error[E0283]: type annotations required: cannot resolve `T0: Trait0<'l0>`\n 14 | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: required by `Trait0`\n+note: required by `Trait0`\n+  --> $DIR/issue-24424.rs:12:1\n+   |\n+12 | trait Trait0<'l0>  {}\n+   | ^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "53f2f54325d57c834e71c426b799b35cb21ef44a", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -6,7 +6,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `fn(usize) -> _`\n    |\n-   = note: required by `foo`\n+note: required by `foo`\n+  --> $DIR/E0631.rs:13:1\n+   |\n+13 | fn foo<F: Fn(usize)>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/E0631.rs:18:5\n@@ -16,7 +20,11 @@ error[E0631]: type mismatch in closure arguments\n    |     |\n    |     expected signature of `fn(usize) -> _`\n    |\n-   = note: required by `bar`\n+note: required by `bar`\n+  --> $DIR/E0631.rs:14:1\n+   |\n+14 | fn bar<F: Fn<usize>>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:19:5\n@@ -27,7 +35,11 @@ error[E0631]: type mismatch in function arguments\n 19 |     foo(f); //~ ERROR type mismatch\n    |     ^^^ expected signature of `fn(usize) -> _`\n    |\n-   = note: required by `foo`\n+note: required by `foo`\n+  --> $DIR/E0631.rs:13:1\n+   |\n+13 | fn foo<F: Fn(usize)>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/E0631.rs:20:5\n@@ -38,7 +50,11 @@ error[E0631]: type mismatch in function arguments\n 20 |     bar(f); //~ ERROR type mismatch\n    |     ^^^ expected signature of `fn(usize) -> _`\n    |\n-   = note: required by `bar`\n+note: required by `bar`\n+  --> $DIR/E0631.rs:14:1\n+   |\n+14 | fn bar<F: Fn<usize>>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 4 previous errors\n "}, {"sha": "ba25d67d76ef2fc7fb0fff65e6caf7a04ff9fa05", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -30,7 +30,11 @@ error[E0593]: closure is expected to take 1 argument, but it takes 0 arguments\n    |     |\n    |     expected closure that takes 1 argument\n    |\n-   = note: required by `f`\n+note: required by `f`\n+  --> $DIR/closure-arg-count.rs:13:1\n+   |\n+13 | fn f<F: Fn<usize>>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0593]: closure is expected to take a single tuple as argument, but it takes 2 distinct arguments\n   --> $DIR/closure-arg-count.rs:24:53"}, {"sha": "dfd02fe23b686e03ceba9ada8e790021c46a0ce1", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -31,15 +31,23 @@ error[E0631]: type mismatch in function arguments\n    |     expected signature of `for<'r> fn(*mut &'r u32) -> _`\n    |     found signature of `fn(*mut &'a u32) -> _`\n    |\n-   = note: required by `baz`\n+note: required by `baz`\n+  --> $DIR/closure-arg-type-mismatch.rs:18:1\n+   |\n+18 | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::FnOnce<(*mut &'r u32,)>>::Output == ()`\n   --> $DIR/closure-arg-type-mismatch.rs:20:5\n    |\n 20 |     baz(f); //~ ERROR type mismatch\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime\n    |\n-   = note: required by `baz`\n+note: required by `baz`\n+  --> $DIR/closure-arg-type-mismatch.rs:18:1\n+   |\n+18 | fn baz<F: Fn(*mut &u32)>(_: F) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}, {"sha": "01de7e0749500ba17385bad3a0f0d5b2084f35bf", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -5,7 +5,11 @@ error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.r\n    |     ^^^ expected bound lifetime parameter, found concrete lifetime\n    |\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n-   = note: required by `baz`\n+note: required by `baz`\n+  --> $DIR/closure-mismatch.rs:15:1\n+   |\n+15 | fn baz<T: Foo>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-mismatch.rs:18:5\n@@ -16,7 +20,11 @@ error[E0631]: type mismatch in closure arguments\n    |     expected signature of `for<'r> fn(&'r ()) -> _`\n    |\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n-   = note: required by `baz`\n+note: required by `baz`\n+  --> $DIR/closure-mismatch.rs:15:1\n+   |\n+15 | fn baz<T: Foo>(_: T) {}\n+   | ^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "64c260c30ed49962815da7923df5bf3d5ed982f3", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -7,7 +7,11 @@ error[E0631]: type mismatch in function arguments\n 21 |     apply(&3, takes_mut);\n    |     ^^^^^ expected signature of `fn(&{integer}) -> _`\n    |\n-   = note: required by `apply`\n+note: required by `apply`\n+  --> $DIR/fn-variance-1.rs:15:1\n+   |\n+15 | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0631]: type mismatch in function arguments\n   --> $DIR/fn-variance-1.rs:25:5\n@@ -18,7 +22,11 @@ error[E0631]: type mismatch in function arguments\n 25 |     apply(&mut 3, takes_imm);\n    |     ^^^^^ expected signature of `fn(&mut {integer}) -> _`\n    |\n-   = note: required by `apply`\n+note: required by `apply`\n+  --> $DIR/fn-variance-1.rs:15:1\n+   |\n+15 | fn apply<T, F>(t: T, f: F) where F: FnOnce(T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f2237e495a00ce255a40c40929518b9ec21a4123", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -15,13 +15,15 @@ use std::ops::FnMut;\n fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n \n fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n+//~^ NOTE required by `call_it`\n     f(2, y)\n }\n \n pub fn main() {\n     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n+    //~^ NOTE found signature of `fn(usize, isize) -> _`\n     let z = call_it(3, f);\n     //~^ ERROR type mismatch\n-    //~| required by `call_it`\n+    //~| NOTE expected signature of `fn(isize, isize) -> _`\n     println!(\"{}\", z);\n }"}, {"sha": "9c9bbd19c7552250c112cd0422b9d2fd0610beee", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -1,12 +1,17 @@\n error[E0631]: type mismatch in closure arguments\n-  --> $DIR/unboxed-closures-vtable-mismatch.rs:23:13\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:25:13\n    |\n-22 |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n+23 |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n    |                       ----------------------------- found signature of `fn(usize, isize) -> _`\n-23 |     let z = call_it(3, f);\n+24 |     //~^ NOTE found signature of `fn(usize, isize) -> _`\n+25 |     let z = call_it(3, f);\n    |             ^^^^^^^ expected signature of `fn(isize, isize) -> _`\n    |\n-   = note: required by `call_it`\n+note: required by `call_it`\n+  --> $DIR/unboxed-closures-vtable-mismatch.rs:17:1\n+   |\n+17 | fn call_it<F:FnMut(isize,isize)->isize>(y: isize, mut f: F) -> isize {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "cfac3981be284fbd49069b6abaeaca7da77fc8af", "filename": "src/test/ui/on-unimplemented/multiple-impls.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fmultiple-impls.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -5,7 +5,11 @@ error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n    |     ^^^^^^^^^^^^ trait message\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = note: required by `Index::index`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls.rs:22:5\n+   |\n+22 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/multiple-impls.rs:43:5\n@@ -22,7 +26,11 @@ error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n    |     ^^^^^^^^^^^^ on impl for Foo\n    |\n    = help: the trait `Index<Foo<u32>>` is not implemented for `[i32]`\n-   = note: required by `Index::index`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls.rs:22:5\n+   |\n+22 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<Foo<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:46:5\n@@ -39,7 +47,11 @@ error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n    |     ^^^^^^^^^^^^ on impl for Bar\n    |\n    = help: the trait `Index<Bar<u32>>` is not implemented for `[i32]`\n-   = note: required by `Index::index`\n+note: required by `Index::index`\n+  --> $DIR/multiple-impls.rs:22:5\n+   |\n+22 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<Bar<u32>>` is not satisfied\n   --> $DIR/multiple-impls.rs:49:5"}, {"sha": "ed2da68f081675d10c98648b680908effa89bbc6", "filename": "src/test/ui/on-unimplemented/on-impl.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-impl.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -5,7 +5,11 @@ error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n    |     ^^^^^^^^^^^^^^^^^^^ a usize is required to index into a slice\n    |\n    = help: the trait `Index<u32>` is not implemented for `[i32]`\n-   = note: required by `Index::index`\n+note: required by `Index::index`\n+  --> $DIR/on-impl.rs:19:5\n+   |\n+19 |     fn index(&self, index: Idx) -> &Self::Output;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `[i32]: Index<u32>` is not satisfied\n   --> $DIR/on-impl.rs:32:5"}, {"sha": "028200a5558c88a51a482698004472cb8dfa4cda", "filename": "src/test/ui/on-unimplemented/on-trait.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fon-trait.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -5,7 +5,11 @@ error[E0277]: the trait bound `std::option::Option<std::vec::Vec<u8>>: MyFromIte\n    |                              ^^^^^^^ a collection of type `std::option::Option<std::vec::Vec<u8>>` cannot be built from an iterator over elements of type `&u8`\n    |\n    = help: the trait `MyFromIterator<&u8>` is not implemented for `std::option::Option<std::vec::Vec<u8>>`\n-   = note: required by `collect`\n+note: required by `collect`\n+  --> $DIR/on-trait.rs:31:1\n+   |\n+31 | fn collect<A, I: Iterator<Item=A>, B: MyFromIterator<A>>(it: I) -> B {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the trait bound `std::string::String: Bar::Foo<u8, _, u32>` is not satisfied\n   --> $DIR/on-trait.rs:40:21\n@@ -14,7 +18,11 @@ error[E0277]: the trait bound `std::string::String: Bar::Foo<u8, _, u32>` is not\n    |                     ^^^^^^ test error `std::string::String` with `u8` `_` `u32` in `Bar::Foo`\n    |\n    = help: the trait `Bar::Foo<u8, _, u32>` is not implemented for `std::string::String`\n-   = note: required by `foobar`\n+note: required by `foobar`\n+  --> $DIR/on-trait.rs:21:1\n+   |\n+21 | fn foobar<U: Clone, T: Foo<u8, U, u32>>() -> T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "9046b90f0e9c3333b7dd62766abf201e7c06c465", "filename": "src/test/ui/span/issue-29595.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-29595.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -4,7 +4,11 @@ error[E0277]: the trait bound `u8: Tr` is not satisfied\n 17 |     let a: u8 = Tr::C; //~ ERROR the trait bound `u8: Tr` is not satisfied\n    |                 ^^^^^ the trait `Tr` is not implemented for `u8`\n    |\n-   = note: required by `Tr::C`\n+note: required by `Tr::C`\n+  --> $DIR/issue-29595.rs:13:5\n+   |\n+13 |     const C: Self;\n+   |     ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "385efebd59008f86096495282595c6e2bd3f0941", "filename": "src/test/ui/suggestions/fn-closure-mutable-capture.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fsuggestions%2Ffn-closure-mutable-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fsuggestions%2Ffn-closure-mutable-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-closure-mutable-capture.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub fn bar<F: Fn()>(_f: F) {}\n+\n+pub fn foo() {\n+    let mut x = 0;\n+    bar(move || x = 1);\n+    //~^ ERROR cannot assign to captured outer variable in an `Fn` closure\n+    //~| NOTE `Fn` closures cannot capture their enclosing environment for modifications\n+}\n+\n+fn main() {}"}, {"sha": "6c79e447a3c391382d9b36363919f968ac3d56a4", "filename": "src/test/ui/suggestions/fn-closure-mutable-capture.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fsuggestions%2Ffn-closure-mutable-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fsuggestions%2Ffn-closure-mutable-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-closure-mutable-capture.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -0,0 +1,15 @@\n+error[E0594]: cannot assign to captured outer variable in an `Fn` closure\n+  --> $DIR/fn-closure-mutable-capture.rs:15:17\n+   |\n+15 |     bar(move || x = 1);\n+   |                 ^^^^^\n+   |\n+   = note: `Fn` closures cannot capture their enclosing environment for modifications\n+help: consider changing this closure to take self by mutable reference\n+  --> $DIR/fn-closure-mutable-capture.rs:15:9\n+   |\n+15 |     bar(move || x = 1);\n+   |         ^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3b32b4a9eb7ba44f016784de1a326775530c10f2", "filename": "src/test/ui/suggestions/try-operator-on-main.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftry-operator-on-main.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -28,7 +28,11 @@ error[E0277]: the trait bound `(): std::ops::Try` is not satisfied\n 25 |     try_trait_generic::<()>(); //~ ERROR the trait bound\n    |     ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::ops::Try` is not implemented for `()`\n    |\n-   = note: required by `try_trait_generic`\n+note: required by `try_trait_generic`\n+  --> $DIR/try-operator-on-main.rs:30:1\n+   |\n+30 | fn try_trait_generic<T: Try>() -> T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: the `?` operator can only be applied to values that implement `std::ops::Try`\n   --> $DIR/try-operator-on-main.rs:32:5"}, {"sha": "3ed6e5daf00613500f6af0ea98716db52de22d91", "filename": "src/test/ui/type-annotation-needed.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Ftype-annotation-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Ftype-annotation-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-annotation-needed.rs?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn foo<T: Into<String>>(x: i32) {}\n+//~^ NOTE required by\n+\n+fn main() {\n+    foo(42);\n+    //~^ ERROR type annotations required\n+}"}, {"sha": "7d49afbaff8af3431a5ca833b5a3d9c7b3907996", "filename": "src/test/ui/type-annotation-needed.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Ftype-annotation-needed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Ftype-annotation-needed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-annotation-needed.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -0,0 +1,14 @@\n+error[E0283]: type annotations required: cannot resolve `_: std::convert::Into<std::string::String>`\n+  --> $DIR/type-annotation-needed.rs:15:5\n+   |\n+15 |     foo(42);\n+   |     ^^^\n+   |\n+note: required by `foo`\n+  --> $DIR/type-annotation-needed.rs:11:1\n+   |\n+11 | fn foo<T: Into<String>>(x: i32) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "cf270afdeb173f5ce9cf0b4c30a428232c70213d", "filename": "src/test/ui/type-check/issue-40294.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check%2Fissue-40294.stderr?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -10,7 +10,11 @@ error[E0283]: type annotations required: cannot resolve `&'a T: Foo`\n 21 | | }\n    | |_^\n    |\n-   = note: required by `Foo`\n+note: required by `Foo`\n+  --> $DIR/issue-40294.rs:11:1\n+   |\n+11 | trait Foo: Sized {\n+   | ^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "7c9ee2a49430bee0e3d9eabf3976f743ac7a0295", "filename": "src/tools/rustdoc-js/tester.js", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftools%2Frustdoc-js%2Ftester.js", "raw_url": "https://github.com/rust-lang/rust/raw/3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4/src%2Ftools%2Frustdoc-js%2Ftester.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustdoc-js%2Ftester.js?ref=3bd4af88bea2e6ecdd3455ed89b3ef1fc3500aa4", "patch": "@@ -0,0 +1,210 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+const fs = require('fs');\n+\n+const TEST_FOLDER = 'src/test/rustdoc-js/';\n+\n+// Stupid function extractor based on indent.\n+function extractFunction(content, functionName) {\n+    var x = content.split('\\n');\n+    var in_func = false;\n+    var indent = 0;\n+    var lines = [];\n+\n+    for (var i = 0; i < x.length; ++i) {\n+        if (in_func === false) {\n+            var splitter = \"function \" + functionName + \"(\";\n+            if (x[i].trim().startsWith(splitter)) {\n+                in_func = true;\n+                indent = x[i].split(splitter)[0].length;\n+                lines.push(x[i]);\n+            }\n+        } else {\n+            lines.push(x[i]);\n+            if (x[i].trim() === \"}\" && x[i].split(\"}\")[0].length === indent) {\n+                return lines.join(\"\\n\");\n+            }\n+        }\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for array.\n+function extractArrayVariable(content, arrayName) {\n+    var x = content.split('\\n');\n+    var found_var = false;\n+    var lines = [];\n+\n+    for (var i = 0; i < x.length; ++i) {\n+        if (found_var === false) {\n+            var splitter = \"var \" + arrayName + \" = [\";\n+            if (x[i].trim().startsWith(splitter)) {\n+                found_var = true;\n+                i -= 1;\n+            }\n+        } else {\n+            lines.push(x[i]);\n+            if (x[i].endsWith('];')) {\n+                return lines.join(\"\\n\");\n+            }\n+        }\n+    }\n+    return null;\n+}\n+\n+// Stupid function extractor for variable.\n+function extractVariable(content, varName) {\n+    var x = content.split('\\n');\n+    var found_var = false;\n+    var lines = [];\n+\n+    for (var i = 0; i < x.length; ++i) {\n+        if (found_var === false) {\n+            var splitter = \"var \" + varName + \" = \";\n+            if (x[i].trim().startsWith(splitter)) {\n+                found_var = true;\n+                i -= 1;\n+            }\n+        } else {\n+            lines.push(x[i]);\n+            if (x[i].endsWith(';')) {\n+                return lines.join(\"\\n\");\n+            }\n+        }\n+    }\n+    return null;\n+}\n+\n+function loadContent(content) {\n+    var Module = module.constructor;\n+    var m = new Module();\n+    m._compile(content, \"tmp.js\");\n+    return m.exports;\n+}\n+\n+function readFile(filePath) {\n+    return fs.readFileSync(filePath, 'utf8');\n+}\n+\n+function loadThings(thingsToLoad, kindOfLoad, funcToCall, fileContent) {\n+    var content = '';\n+    for (var i = 0; i < thingsToLoad.length; ++i) {\n+        var tmp = funcToCall(fileContent, thingsToLoad[i]);\n+        if (tmp === null) {\n+            console.error('enable to find ' + kindOfLoad + ' \"' + thingsToLoad[i] + '\"');\n+            process.exit(1);\n+        }\n+        content += tmp;\n+        content += 'exports.' + thingsToLoad[i] + ' = ' + thingsToLoad[i] + ';';\n+    }\n+    return content;\n+}\n+\n+function lookForEntry(entry, data) {\n+    for (var i = 0; i < data.length; ++i) {\n+        var allGood = true;\n+        for (var key in entry) {\n+            if (!entry.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            var value = data[i][key];\n+            // To make our life easier, if there is a \"parent\" type, we add it to the path.\n+            if (key === 'path' && data[i]['parent'] !== undefined) {\n+                if (value.length > 0) {\n+                    value += '::' + data[i]['parent']['name'];\n+                } else {\n+                    value = data[i]['parent']['name'];\n+                }\n+            }\n+            if (value !== entry[key]) {\n+                allGood = false;\n+                break;\n+            }\n+        }\n+        if (allGood === true) {\n+            return true;\n+        }\n+    }\n+    return false;\n+}\n+\n+function main(argv) {\n+    if (argv.length !== 3) {\n+        console.error(\"Expected toolchain to check as argument (for example 'x86_64-apple-darwin'\");\n+        return 1;\n+    }\n+    var toolchain = argv[2];\n+\n+    var mainJs = readFile(\"build/\" + toolchain + \"/doc/main.js\");\n+    var searchIndex = readFile(\"build/\" + toolchain + \"/doc/search-index.js\").split(\"\\n\");\n+    if (searchIndex[searchIndex.length - 1].length === 0) {\n+        searchIndex.pop();\n+    }\n+    searchIndex.pop();\n+    searchIndex = loadContent(searchIndex.join(\"\\n\") + '\\nexports.searchIndex = searchIndex;');\n+    finalJS = \"\";\n+\n+    var arraysToLoad = [\"itemTypes\"];\n+    var variablesToLoad = [\"MAX_LEV_DISTANCE\", \"MAX_RESULTS\", \"TY_PRIMITIVE\", \"levenshtein_row2\"];\n+    // execQuery first parameter is built in getQuery (which takes in the search input).\n+    // execQuery last parameter is built in buildIndex.\n+    // buildIndex requires the hashmap from search-index.\n+    var functionsToLoad = [\"levenshtein\", \"validateResult\", \"getQuery\", \"buildIndex\", \"execQuery\"];\n+\n+    finalJS += 'window = { \"currentCrate\": \"std\" };\\n';\n+    finalJS += loadThings(arraysToLoad, 'array', extractArrayVariable, mainJs);\n+    finalJS += loadThings(variablesToLoad, 'variable', extractVariable, mainJs);\n+    finalJS += loadThings(functionsToLoad, 'function', extractFunction, mainJs);\n+\n+    var loaded = loadContent(finalJS);\n+    var index = loaded.buildIndex(searchIndex.searchIndex);\n+\n+    var errors = 0;\n+\n+    fs.readdirSync(TEST_FOLDER).forEach(function(file) {\n+        var loadedFile = loadContent(readFile(TEST_FOLDER + file) +\n+                               'exports.QUERY = QUERY;exports.EXPECTED = EXPECTED;');\n+        const expected = loadedFile.EXPECTED;\n+        const query = loadedFile.QUERY;\n+        var results = loaded.execQuery(loaded.getQuery(query), index);\n+        process.stdout.write('Checking \"' + file + '\" ... ');\n+        var error_text = [];\n+        for (var key in expected) {\n+            if (!expected.hasOwnProperty(key)) {\n+                continue;\n+            }\n+            if (!results.hasOwnProperty(key)) {\n+                error_text.push('==> Unknown key \"' + key + '\"');\n+                break;\n+            }\n+            var entry = expected[key];\n+            var found = false;\n+            for (var i = 0; i < entry.length; ++i) {\n+                if (lookForEntry(entry[i], results[key]) === true) {\n+                    found = true;\n+                } else {\n+                    error_text.push(\"==> Result not found in '\" + key + \"': '\" +\n+                                    JSON.stringify(entry[i]) + \"'\");\n+                }\n+            }\n+        }\n+        if (error_text.length !== 0) {\n+            errors += 1;\n+            console.error(\"FAILED\");\n+            console.error(error_text.join(\"\\n\"));\n+        } else {\n+            console.log(\"OK\");\n+        }\n+    });\n+    return errors;\n+}\n+\n+process.exit(main(process.argv));"}]}