{"sha": "921579cc3cdc57dbcfac48b275d92b7927234988", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMTU3OWNjM2NkYzU3ZGJjZmFjNDhiMjc1ZDkyYjc5MjcyMzQ5ODg=", "commit": {"author": {"name": "Chai T. Rex", "email": "ChaiTRex@users.noreply.github.com", "date": "2020-04-10T16:10:05Z"}, "committer": {"name": "Chai T. Rex", "email": "ChaiTRex@users.noreply.github.com", "date": "2020-04-10T16:54:09Z"}, "message": "Add or_insert_with_key to Entry of HashMap/BTreeMap\n\nGoing along with or_insert_with, or_insert_with_key provides the\nEntry's key to the lambda, avoiding the need to either clone the\nkey or the need to reimplement this body of this method from\nscratch each time.\n\nThis is useful when the initial value for a map entry is derived\nfrom the key. For example, the introductory Rust book has an\nexample Cacher struct that takes an expensive-to-compute lambda and\nthen can, given an argument to the lambda, produce either the\ncached result or execute the lambda.", "tree": {"sha": "51cc908210688838c34c306d2d955a0870088095", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51cc908210688838c34c306d2d955a0870088095"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/921579cc3cdc57dbcfac48b275d92b7927234988", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/921579cc3cdc57dbcfac48b275d92b7927234988", "html_url": "https://github.com/rust-lang/rust/commit/921579cc3cdc57dbcfac48b275d92b7927234988", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/921579cc3cdc57dbcfac48b275d92b7927234988/comments", "author": {"login": "ChaiTRex", "id": 23159282, "node_id": "MDQ6VXNlcjIzMTU5Mjgy", "avatar_url": "https://avatars.githubusercontent.com/u/23159282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChaiTRex", "html_url": "https://github.com/ChaiTRex", "followers_url": "https://api.github.com/users/ChaiTRex/followers", "following_url": "https://api.github.com/users/ChaiTRex/following{/other_user}", "gists_url": "https://api.github.com/users/ChaiTRex/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChaiTRex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChaiTRex/subscriptions", "organizations_url": "https://api.github.com/users/ChaiTRex/orgs", "repos_url": "https://api.github.com/users/ChaiTRex/repos", "events_url": "https://api.github.com/users/ChaiTRex/events{/privacy}", "received_events_url": "https://api.github.com/users/ChaiTRex/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChaiTRex", "id": 23159282, "node_id": "MDQ6VXNlcjIzMTU5Mjgy", "avatar_url": "https://avatars.githubusercontent.com/u/23159282?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChaiTRex", "html_url": "https://github.com/ChaiTRex", "followers_url": "https://api.github.com/users/ChaiTRex/followers", "following_url": "https://api.github.com/users/ChaiTRex/following{/other_user}", "gists_url": "https://api.github.com/users/ChaiTRex/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChaiTRex/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChaiTRex/subscriptions", "organizations_url": "https://api.github.com/users/ChaiTRex/orgs", "repos_url": "https://api.github.com/users/ChaiTRex/repos", "events_url": "https://api.github.com/users/ChaiTRex/events{/privacy}", "received_events_url": "https://api.github.com/users/ChaiTRex/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93dc97a85381cc52eb872d27e50e4d518926a27c", "url": "https://api.github.com/repos/rust-lang/rust/commits/93dc97a85381cc52eb872d27e50e4d518926a27c", "html_url": "https://github.com/rust-lang/rust/commit/93dc97a85381cc52eb872d27e50e4d518926a27c"}], "stats": {"total": 54, "additions": 54, "deletions": 0}, "files": [{"sha": "650582850ab964c6c9380f68448ce025469355d2", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/921579cc3cdc57dbcfac48b275d92b7927234988/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921579cc3cdc57dbcfac48b275d92b7927234988/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=921579cc3cdc57dbcfac48b275d92b7927234988", "patch": "@@ -2378,6 +2378,33 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n         }\n     }\n \n+    #[unstable(feature = \"or_insert_with_key\", issue = \"70996\")]\n+    /// Ensures a value is in the entry by inserting, if empty, the result of the default function,\n+    /// which takes the key as its argument, and returns a mutable reference to the value in the\n+    /// entry.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map: BTreeMap<&str, usize> = BTreeMap::new();\n+    ///\n+    /// map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());\n+    ///\n+    /// assert_eq!(map[\"poneyland\"], 9);\n+    /// ```\n+    #[inline]\n+    pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => {\n+                let value = default(entry.key());\n+                entry.insert(value)\n+            }\n+        }\n+    }\n+\n     /// Returns a reference to this entry's key.\n     ///\n     /// # Examples"}, {"sha": "277b37dd310436e2ce7ba481a0aaa587e49d54f2", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/921579cc3cdc57dbcfac48b275d92b7927234988/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/921579cc3cdc57dbcfac48b275d92b7927234988/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=921579cc3cdc57dbcfac48b275d92b7927234988", "patch": "@@ -1943,6 +1943,33 @@ impl<'a, K, V> Entry<'a, K, V> {\n         }\n     }\n \n+    #[unstable(feature = \"or_insert_with_key\", issue = \"70996\")]\n+    /// Ensures a value is in the entry by inserting, if empty, the result of the default function,\n+    /// which takes the key as its argument, and returns a mutable reference to the value in the\n+    /// entry.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map: HashMap<&str, usize> = HashMap::new();\n+    ///\n+    /// map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());\n+    ///\n+    /// assert_eq!(map[\"poneyland\"], 9);\n+    /// ```\n+    #[inline]\n+    pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => {\n+                let value = default(entry.key());\n+                entry.insert(value)\n+            }\n+        }\n+    }\n+\n     /// Returns a reference to this entry's key.\n     ///\n     /// # Examples"}]}