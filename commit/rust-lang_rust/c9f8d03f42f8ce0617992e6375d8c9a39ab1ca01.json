{"sha": "c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZjhkMDNmNDJmOGNlMDYxNzk5MmU2Mzc1ZDhjOWEzOWFiMWNhMDE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-19T12:14:47Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-19T12:14:47Z"}, "message": "Treat more strange pattern", "tree": {"sha": "3abb1dc26a9415f7ee9f8b22078787aef8dad760", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3abb1dc26a9415f7ee9f8b22078787aef8dad760"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01", "html_url": "https://github.com/rust-lang/rust/commit/c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e76a196649e1675e9c210f659074499e37fb353", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e76a196649e1675e9c210f659074499e37fb353", "html_url": "https://github.com/rust-lang/rust/commit/7e76a196649e1675e9c210f659074499e37fb353"}], "stats": {"total": 35, "additions": 14, "deletions": 21}, "files": [{"sha": "a9826d58633989018f90e79be14f8be2e9d5a21e", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 11, "deletions": 18, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01", "patch": "@@ -4,7 +4,6 @@ use rustc_errors::Applicability;\n use rustc_hir::*;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::BytePos;\n \n declare_clippy_lint! {\n     /// **What it does:*** Checks for unnecessary `ok()` in if let.\n@@ -46,33 +45,27 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for OkIfLet {\n             if let ExprKind::MethodCall(_, ok_span, ref result_types) = op.kind; //check is expr.ok() has type Result<T,E>.ok()\n             if let PatKind::TupleStruct(QPath::Resolved(_, ref x), ref y, _)  = body[0].pat.kind; //get operation\n             if method_chain_args(op, &[\"ok\"]).is_some(); //test to see if using ok() methoduse std::marker::Sized;\n+            let is_result_type = match_type(cx, cx.tables.expr_ty(&result_types[0]), &paths::RESULT);\n+            if print::to_string(print::NO_ANN, |s| s.print_path(x, false)) == \"Some\" && is_result_type;\n \n             then {\n-                let is_result_type = match_type(cx, cx.tables.expr_ty(&result_types[0]), &paths::RESULT);\n                 let mut applicability = Applicability::MachineApplicable;\n-                // ok_span = `ok`\n-                // op.span = `x.parse()   .   ok()`\n-                // op.span.until(op.span.with_lo(ok_span.lo() - BytePos(1))) = `x.parse()   .`\n-                // op.span.with_lo(ok_span.lo() - BytePos(1)) = ` ok()`\n-                // op.span.with_hi(ok_span.hi() - BytePos(1)) = `x.parse()   .   o`\n                 let some_expr_string = snippet_with_applicability(cx, y[0].span, \"\", &mut applicability);\n                 let trimmed_ok = snippet_with_applicability(cx, op.span.until(ok_span), \"\", &mut applicability);\n                 let sugg = format!(\n                     \"if let Ok({}) = {}\",\n                     some_expr_string,\n                     trimmed_ok.trim().trim_end_matches('.'),\n                 );\n-                if print::to_string(print::NO_ANN, |s| s.print_path(x, false)) == \"Some\" && is_result_type {\n-                    span_lint_and_sugg(\n-                        cx,\n-                        IF_LET_SOME_RESULT,\n-                        expr.span.with_hi(ok_span.hi() + BytePos(2)),\n-                        \"Matching on `Some` with `ok()` is redundant\",\n-                        &format!(\"Consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n-                        sugg,\n-                        applicability,\n-                    );\n-                }\n+                span_lint_and_sugg(\n+                    cx,\n+                    IF_LET_SOME_RESULT,\n+                    expr.span.with_hi(op.span.hi()),\n+                    \"Matching on `Some` with `ok()` is redundant\",\n+                    &format!(\"Consider matching on `Ok({})` and removing the call to `ok` instead\", some_expr_string),\n+                    sugg,\n+                    applicability,\n+                );\n             }\n         }\n     }"}, {"sha": "ecac13574456ca8cae735b742108eb9f1671d087", "filename": "tests/ui/if_let_some_result.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01/tests%2Fui%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01/tests%2Fui%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.rs?ref=c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01", "patch": "@@ -21,7 +21,7 @@ fn str_to_int_ok(x: &str) -> i32 {\n #[rustfmt::skip]\n fn strange_some_no_else(x: &str) -> i32 {\n     {\n-        if let Some(y) = x   .   parse()   .   ok()    {\n+        if let Some(y) = x   .   parse()   .   ok   ()    {\n             return y;\n         };\n         0"}, {"sha": "334ccb0101678c6c05cbb0c7418c75c8a17489b2", "filename": "tests/ui/if_let_some_result.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01/tests%2Fui%2Fif_let_some_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01/tests%2Fui%2Fif_let_some_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_some_result.stderr?ref=c9f8d03f42f8ce0617992e6375d8c9a39ab1ca01", "patch": "@@ -13,8 +13,8 @@ LL |     if let Ok(y) = x.parse() {\n error: Matching on `Some` with `ok()` is redundant\n   --> $DIR/if_let_some_result.rs:24:9\n    |\n-LL |         if let Some(y) = x   .   parse()   .   ok()    {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |         if let Some(y) = x   .   parse()   .   ok   ()    {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n help: Consider matching on `Ok(y)` and removing the call to `ok` instead\n    |"}]}