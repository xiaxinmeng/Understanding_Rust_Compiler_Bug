{"sha": "35979a92bf6dba402885a1488ecfd84046e4bd71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1OTc5YTkyYmY2ZGJhNDAyODg1YTE0ODhlY2ZkODQwNDZlNGJkNzE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-12-22T21:08:53Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-12-23T11:20:13Z"}, "message": "Add span information to `ExprKind::Assign`", "tree": {"sha": "7d58702befa5cd9f8ffffa0222f3615978503520", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d58702befa5cd9f8ffffa0222f3615978503520"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35979a92bf6dba402885a1488ecfd84046e4bd71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35979a92bf6dba402885a1488ecfd84046e4bd71", "html_url": "https://github.com/rust-lang/rust/commit/35979a92bf6dba402885a1488ecfd84046e4bd71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35979a92bf6dba402885a1488ecfd84046e4bd71/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ab4735559aeeece0b5811dad95fdf515b1bcfbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab4735559aeeece0b5811dad95fdf515b1bcfbd", "html_url": "https://github.com/rust-lang/rust/commit/5ab4735559aeeece0b5811dad95fdf515b1bcfbd"}], "stats": {"total": 131, "additions": 69, "deletions": 62}, "files": [{"sha": "a7a8673d49eb1d020796907592ea9ce0be2299c8", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -1043,9 +1043,9 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             walk_list!(visitor, visit_label, opt_label);\n             visitor.visit_block(block);\n         }\n-        ExprKind::Assign(ref left_hand_expression, ref right_hand_expression) => {\n-            visitor.visit_expr(right_hand_expression);\n-            visitor.visit_expr(left_hand_expression)\n+        ExprKind::Assign(ref lhs, ref rhs, _) => {\n+            visitor.visit_expr(rhs);\n+            visitor.visit_expr(lhs)\n         }\n         ExprKind::AssignOp(_, ref left_expression, ref right_expression) => {\n             visitor.visit_expr(right_expression);"}, {"sha": "8311b9168e4553b0c6ac84381c7903ac1599b469", "filename": "src/librustc/hir/lowering/expr.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fexpr.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -122,8 +122,8 @@ impl LoweringContext<'_, '_> {\n                 self.lower_block(blk, opt_label.is_some()),\n                 self.lower_label(opt_label),\n             ),\n-            ExprKind::Assign(ref el, ref er) => {\n-                hir::ExprKind::Assign(P(self.lower_expr(el)), P(self.lower_expr(er)))\n+            ExprKind::Assign(ref el, ref er, span) => {\n+                hir::ExprKind::Assign(P(self.lower_expr(el)), P(self.lower_expr(er)), span)\n             }\n             ExprKind::AssignOp(op, ref el, ref er) => hir::ExprKind::AssignOp(\n                 self.lower_binop(op),\n@@ -994,8 +994,11 @@ impl LoweringContext<'_, '_> {\n             let (val_pat, val_pat_hid) = self.pat_ident(pat.span, val_ident);\n             let val_expr = P(self.expr_ident(pat.span, val_ident, val_pat_hid));\n             let next_expr = P(self.expr_ident(pat.span, next_ident, next_pat_hid));\n-            let assign =\n-                P(self.expr(pat.span, hir::ExprKind::Assign(next_expr, val_expr), ThinVec::new()));\n+            let assign = P(self.expr(\n+                pat.span,\n+                hir::ExprKind::Assign(next_expr, val_expr, pat.span),\n+                ThinVec::new(),\n+            ));\n             let some_pat = self.pat_some(pat.span, val_pat);\n             self.arm(some_pat, assign)\n         };"}, {"sha": "457851bd7ecdd4d899229d5ac44ce367b4911a2d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -1628,7 +1628,7 @@ pub enum ExprKind {\n     Block(P<Block>, Option<Label>),\n \n     /// An assignment (e.g., `a = foo()`).\n-    Assign(P<Expr>, P<Expr>),\n+    Assign(P<Expr>, P<Expr>, Span),\n     /// An assignment with an operator.\n     ///\n     /// E.g., `a += 1`."}, {"sha": "2f3b6f82ee5ee206e22cf3b2a3453c26fefd7668", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -1289,7 +1289,7 @@ impl<'a> State<'a> {\n                 self.ibox(0);\n                 self.print_block(&blk);\n             }\n-            hir::ExprKind::Assign(ref lhs, ref rhs) => {\n+            hir::ExprKind::Assign(ref lhs, ref rhs, _) => {\n                 let prec = AssocOp::Assign.precedence() as i8;\n                 self.print_expr_maybe_paren(&lhs, prec + 1);\n                 self.s.space();\n@@ -2265,7 +2265,7 @@ fn contains_exterior_struct_lit(value: &hir::Expr) -> bool {\n     match value.kind {\n         hir::ExprKind::Struct(..) => true,\n \n-        hir::ExprKind::Assign(ref lhs, ref rhs)\n+        hir::ExprKind::Assign(ref lhs, ref rhs, _)\n         | hir::ExprKind::AssignOp(_, ref lhs, ref rhs)\n         | hir::ExprKind::Binary(_, ref lhs, ref rhs) => {\n             // `X { y: 1 } + X { y: 2 }`"}, {"sha": "5f57aabe8d426bc53e9ea28d88d44c2235d3a85a", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -490,7 +490,7 @@ impl EarlyLintPass for UnusedParens {\n                 (value, \"`return` value\", false, Some(left), None)\n             }\n \n-            Assign(_, ref value) => (value, \"assigned value\", false, None, None),\n+            Assign(_, ref value, _) => (value, \"assigned value\", false, None, None),\n             AssignOp(.., ref value) => (value, \"assigned value\", false, None, None),\n             // either function/method call, or something this lint doesn't care about\n             ref call_or_other => {"}, {"sha": "b5cd24bebc33ab2921f369fe710a0aa4deb122e5", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -227,7 +227,7 @@ fn make_mirror_unadjusted<'a, 'tcx>(cx: &mut Cx<'a, 'tcx>, expr: &'tcx hir::Expr\n \n         hir::ExprKind::Block(ref blk, _) => ExprKind::Block { body: &blk },\n \n-        hir::ExprKind::Assign(ref lhs, ref rhs) => {\n+        hir::ExprKind::Assign(ref lhs, ref rhs, _) => {\n             ExprKind::Assign { lhs: lhs.to_ref(), rhs: rhs.to_ref() }\n         }\n "}, {"sha": "e0eb841f2c0cfd17e99417446125d2fc05b956e0", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -281,7 +281,9 @@ impl<'a> Parser<'a> {\n                     let binary = self.mk_binary(source_map::respan(cur_op_span, ast_op), lhs, rhs);\n                     self.mk_expr(span, binary, AttrVec::new())\n                 }\n-                AssocOp::Assign => self.mk_expr(span, ExprKind::Assign(lhs, rhs), AttrVec::new()),\n+                AssocOp::Assign => {\n+                    self.mk_expr(span, ExprKind::Assign(lhs, rhs, cur_op_span), AttrVec::new())\n+                }\n                 AssocOp::AssignOp(k) => {\n                     let aop = match k {\n                         token::Plus => BinOpKind::Add,"}, {"sha": "1a8abeb7abcdc34a310ea7fee43380b423b45942", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -1079,7 +1079,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                     .unwrap_or_else(|| span_bug!(expr.span, \"continue to unknown label\"))\n             }\n \n-            hir::ExprKind::Assign(ref l, ref r) => {\n+            hir::ExprKind::Assign(ref l, ref r, _) => {\n                 // see comment on places in\n                 // propagate_through_place_components()\n                 let succ = self.write_place(&l, succ, ACC_WRITE);\n@@ -1373,7 +1373,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n \n fn check_expr<'tcx>(this: &mut Liveness<'_, 'tcx>, expr: &'tcx Expr) {\n     match expr.kind {\n-        hir::ExprKind::Assign(ref l, _) => {\n+        hir::ExprKind::Assign(ref l, ..) => {\n             this.check_place(&l);\n         }\n "}, {"sha": "cdfcb8090e65ee2318832935492e5031e7c84f56", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -1251,7 +1251,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             return;\n         }\n         match expr.kind {\n-            hir::ExprKind::Assign(.., ref rhs) | hir::ExprKind::Match(ref rhs, ..) => {\n+            hir::ExprKind::Assign(_, ref rhs, _) | hir::ExprKind::Match(ref rhs, ..) => {\n                 // Do not report duplicate errors for `x = y` and `match x { ... }`.\n                 if self.check_expr_pat_type(rhs.hir_id, rhs.span) {\n                     return;"}, {"sha": "d63d30b7b8d83c53af330254ad9370eb84822925", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -492,7 +492,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             String::new()\n                         };\n                         if let Some(hir::Node::Expr(hir::Expr {\n-                            kind: hir::ExprKind::Assign(left_expr, _),\n+                            kind: hir::ExprKind::Assign(left_expr, ..),\n                             ..\n                         })) = self.tcx.hir().find(self.tcx.hir().get_parent_node(expr.hir_id))\n                         {"}, {"sha": "1ff2ea19b7c144ec206236e9b181a96aeef07c5d", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -219,7 +219,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ExprKind::Box(ref subexpr) => self.check_expr_box(subexpr, expected),\n             ExprKind::Lit(ref lit) => self.check_lit(&lit, expected),\n             ExprKind::Binary(op, ref lhs, ref rhs) => self.check_binop(expr, op, lhs, rhs),\n-            ExprKind::AssignOp(op, ref lhs, ref rhs) => self.check_binop_assign(expr, op, lhs, rhs),\n+            ExprKind::Assign(ref lhs, ref rhs, ref span) => {\n+                self.check_binop_assign(expr, op, lhs, rhs)\n+            }\n             ExprKind::Unary(unop, ref oprnd) => {\n                 self.check_expr_unary(unop, oprnd, expected, needs, expr)\n             }\n@@ -245,7 +247,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n             ExprKind::Ret(ref expr_opt) => self.check_expr_return(expr_opt.as_deref(), expr),\n-            ExprKind::Assign(ref lhs, ref rhs) => self.check_expr_assign(expr, expected, lhs, rhs),\n             ExprKind::Loop(ref body, _, source) => {\n                 self.check_expr_loop(body, source, expected, expr)\n             }\n@@ -767,6 +768,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Expectation<'tcx>,\n         lhs: &'tcx hir::Expr,\n         rhs: &'tcx hir::Expr,\n+        span: &Span,\n     ) -> Ty<'tcx> {\n         let lhs_ty = self.check_expr_with_needs(&lhs, Needs::MutPlace);\n         let rhs_ty = self.check_expr_coercable_to_type(&rhs, lhs_ty);\n@@ -789,7 +791,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             err.emit();\n         } else {\n-            self.check_lhs_assignable(lhs, \"E0070\", &expr.span);\n+            self.check_lhs_assignable(lhs, \"E0070\", span);\n         }\n \n         self.require_type_is_sized(lhs_ty, lhs.span, traits::AssignmentLhsSized);"}, {"sha": "6c7e3658365a060e5989b8e0971826b5f3c3f017", "filename": "src/librustc_typeck/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fexpr_use_visitor.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -286,7 +286,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 }\n             }\n \n-            hir::ExprKind::Assign(ref lhs, ref rhs) => {\n+            hir::ExprKind::Assign(ref lhs, ref rhs, _) => {\n                 self.mutate_expr(lhs);\n                 self.consume_expr(rhs);\n             }"}, {"sha": "c00fc761a6a2599a9726f4233fff081952ca1314", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -1216,7 +1216,7 @@ pub enum ExprKind {\n     TryBlock(P<Block>),\n \n     /// An assignment (`a = foo()`).\n-    Assign(P<Expr>, P<Expr>),\n+    Assign(P<Expr>, P<Expr>, Span),\n     /// An assignment with an operator.\n     ///\n     /// E.g., `a += 1`."}, {"sha": "f6817c713a4a66f20bf4690a8db3d217436f3cb8", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -1168,7 +1168,7 @@ pub fn noop_visit_expr<T: MutVisitor>(Expr { kind, id, span, attrs }: &mut Expr,\n             vis.visit_block(body);\n         }\n         ExprKind::Await(expr) => vis.visit_expr(expr),\n-        ExprKind::Assign(el, er) => {\n+        ExprKind::Assign(el, er, _) => {\n             vis.visit_expr(el);\n             vis.visit_expr(er);\n         }"}, {"sha": "b1b667f03bee2be489ebc4628e5cd0481161edc0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -2041,7 +2041,7 @@ impl<'a> State<'a> {\n                 self.print_expr_maybe_paren(expr, parser::PREC_POSTFIX);\n                 self.s.word(\".await\");\n             }\n-            ast::ExprKind::Assign(ref lhs, ref rhs) => {\n+            ast::ExprKind::Assign(ref lhs, ref rhs, _) => {\n                 let prec = AssocOp::Assign.precedence() as i8;\n                 self.print_expr_maybe_paren(lhs, prec + 1);\n                 self.s.space();"}, {"sha": "98af382efb0838672460775b8cc2a5b4c0ffb913", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -378,7 +378,7 @@ pub fn contains_exterior_struct_lit(value: &ast::Expr) -> bool {\n     match value.kind {\n         ast::ExprKind::Struct(..) => true,\n \n-        ast::ExprKind::Assign(ref lhs, ref rhs)\n+        ast::ExprKind::Assign(ref lhs, ref rhs, _)\n         | ast::ExprKind::AssignOp(_, ref lhs, ref rhs)\n         | ast::ExprKind::Binary(_, ref lhs, ref rhs) => {\n             // X { y: 1 } + X { y: 2 }"}, {"sha": "fbc5d1332490fc8e70399201fe04bdb17341c84c", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -766,9 +766,9 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n             visitor.visit_block(body);\n         }\n         ExprKind::Await(ref expr) => visitor.visit_expr(expr),\n-        ExprKind::Assign(ref left_hand_expression, ref right_hand_expression) => {\n-            visitor.visit_expr(left_hand_expression);\n-            visitor.visit_expr(right_hand_expression);\n+        ExprKind::Assign(ref lhs, ref rhs, _) => {\n+            visitor.visit_expr(lhs);\n+            visitor.visit_expr(rhs);\n         }\n         ExprKind::AssignOp(_, ref left_expression, ref right_expression) => {\n             visitor.visit_expr(left_expression);"}, {"sha": "36d47cea13b07cd4d2ff1d3cad2d0d32a853f0eb", "filename": "src/test/ui-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fpprust-expr-roundtrip.rs?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -126,8 +126,8 @@ fn iter_exprs(depth: usize, f: &mut dyn FnMut(P<Expr>)) {\n                                           DUMMY_SP)));\n             },\n             12 => {\n-                iter_exprs(depth - 1, &mut |e| g(ExprKind::Assign(e, make_x())));\n-                iter_exprs(depth - 1, &mut |e| g(ExprKind::Assign(make_x(), e)));\n+                iter_exprs(depth - 1, &mut |e| g(ExprKind::Assign(e, make_x(), DUMMY_SP)));\n+                iter_exprs(depth - 1, &mut |e| g(ExprKind::Assign(make_x(), e, DUMMY_SP)));\n             },\n             13 => {\n                 iter_exprs(depth - 1, &mut |e| g(ExprKind::Field(e, Ident::from_str(\"f\"))));"}, {"sha": "ce793d8910b13a3aded22d5cfe881a97394eca8f", "filename": "src/test/ui/bad/bad-expr-lhs.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-expr-lhs.stderr?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -1,8 +1,8 @@\n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/bad-expr-lhs.rs:2:5\n+  --> $DIR/bad-expr-lhs.rs:2:7\n    |\n LL |     1 = 2;\n-   |     -^^^^\n+   |     - ^\n    |     |\n    |     cannot assign to this expression\n \n@@ -15,29 +15,29 @@ LL |     1 += 2;\n    |     cannot assign to this expression\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/bad-expr-lhs.rs:4:5\n+  --> $DIR/bad-expr-lhs.rs:4:12\n    |\n LL |     (1, 2) = (3, 4);\n-   |     ------^^^^^^^^^\n+   |     ------ ^\n    |     |\n    |     cannot assign to this expression\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/bad-expr-lhs.rs:7:5\n+  --> $DIR/bad-expr-lhs.rs:7:12\n    |\n LL |     (a, b) = (3, 4);\n-   |     ------^^^^^^^^^\n+   |     ------ ^\n    |     |\n    |     cannot assign to this expression\n    |\n    = note: destructuring assignments are not yet supported\n    = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/bad-expr-lhs.rs:9:5\n+  --> $DIR/bad-expr-lhs.rs:9:10\n    |\n LL |     None = Some(3);\n-   |     ----^^^^^^^^^^\n+   |     ---- ^\n    |     |\n    |     cannot assign to this expression\n "}, {"sha": "3e0925b565806569f9fdee27b0ba83d1390fa81b", "filename": "src/test/ui/bad/destructuring-assignment.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui%2Fbad%2Fdestructuring-assignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui%2Fbad%2Fdestructuring-assignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fdestructuring-assignment.stderr?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -1,8 +1,8 @@\n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/destructuring-assignment.rs:6:5\n+  --> $DIR/destructuring-assignment.rs:6:12\n    |\n LL |     (a, b) = (3, 4);\n-   |     ------^^^^^^^^^\n+   |     ------ ^\n    |     |\n    |     cannot assign to this expression\n    |\n@@ -31,10 +31,10 @@ LL |     (a, b) += (3, 4);\n    = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/destructuring-assignment.rs:10:5\n+  --> $DIR/destructuring-assignment.rs:10:12\n    |\n LL |     [a, b] = [3, 4];\n-   |     ------^^^^^^^^^\n+   |     ------ ^\n    |     |\n    |     cannot assign to this expression\n    |\n@@ -63,10 +63,10 @@ LL |     [a, b] += [3, 4];\n    = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/destructuring-assignment.rs:16:5\n+  --> $DIR/destructuring-assignment.rs:16:22\n    |\n LL |     S { x: a, y: b } = s;\n-   |     ----------------^^^^\n+   |     ---------------- ^\n    |     |\n    |     cannot assign to this expression\n    |\n@@ -95,21 +95,21 @@ LL |     S { x: a, y: b } += s;\n    = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/destructuring-assignment.rs:20:5\n+  --> $DIR/destructuring-assignment.rs:20:21\n    |\n LL |     S { x: a, ..s } = S { x: 3, y: 4 };\n-   |     ---------------^^^^^^^^^^^^^^^^^^^\n+   |     --------------- ^\n    |     |\n    |     cannot assign to this expression\n    |\n    = note: destructuring assignments are not yet supported\n    = note: for more information, see https://github.com/rust-lang/rfcs/issues/372\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/destructuring-assignment.rs:24:5\n+  --> $DIR/destructuring-assignment.rs:24:17\n    |\n LL |     ((a, b), c) = ((3, 4), 5);\n-   |     -----------^^^^^^^^^^^^^^\n+   |     ----------- ^\n    |     |\n    |     cannot assign to this expression\n    |"}, {"sha": "d809bb18dee16a0fc75d5fa86247711f6921eddb", "filename": "src/test/ui/error-codes/E0070.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0070.stderr?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -1,16 +1,16 @@\n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/E0070.rs:6:5\n+  --> $DIR/E0070.rs:6:16\n    |\n LL |     SOME_CONST = 14;\n-   |     ----------^^^^^\n+   |     ---------- ^\n    |     |\n    |     cannot assign to this expression\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/E0070.rs:7:5\n+  --> $DIR/E0070.rs:7:7\n    |\n LL |     1 = 3;\n-   |     -^^^^\n+   |     - ^\n    |     |\n    |     cannot assign to this expression\n \n@@ -21,10 +21,10 @@ LL |     some_other_func() = 4;\n    |                         ^ expected `()`, found integer\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/E0070.rs:8:5\n+  --> $DIR/E0070.rs:8:23\n    |\n LL |     some_other_func() = 4;\n-   |     -----------------^^^^\n+   |     ----------------- ^\n    |     |\n    |     cannot assign to this expression\n "}, {"sha": "b280de3158fede7567b64391c728f6464b685e13", "filename": "src/test/ui/issues/issue-13407.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13407.stderr?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -11,10 +11,10 @@ LL |     A::C = 1;\n    |            ^ expected struct `A::C`, found integer\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/issue-13407.rs:6:5\n+  --> $DIR/issue-13407.rs:6:10\n    |\n LL |     A::C = 1;\n-   |     ----^^^^\n+   |     ---- ^\n    |     |\n    |     cannot assign to this expression\n "}, {"sha": "c96228b518a853bf59eeebdeda607a447622ca04", "filename": "src/test/ui/issues/issue-26093.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26093.stderr?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -1,8 +1,8 @@\n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/issue-26093.rs:3:9\n+  --> $DIR/issue-26093.rs:3:16\n    |\n LL |         $thing = 42;\n-   |         ^^^^^^^^^^^\n+   |                ^\n ...\n LL |     not_a_place!(99);\n    |     -----------------"}, {"sha": "3055e316a082a381197317e563b7dc2601956aca", "filename": "src/test/ui/issues/issue-34334.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34334.stderr?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -36,10 +36,10 @@ LL |     let sr: Vec<(u32, _, _) = vec![];\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/issue-34334.rs:2:13\n+  --> $DIR/issue-34334.rs:2:29\n    |\n LL |     let sr: Vec<(u32, _, _) = vec![];\n-   |             ---------------^^^^^^^^^\n+   |             --------------- ^\n    |             |\n    |             cannot assign to this expression\n "}, {"sha": "3f1caddf728cbead005a00cd44e78c3b8d66ac54", "filename": "src/test/ui/type/type-check/assignment-expected-bool.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/35979a92bf6dba402885a1488ecfd84046e4bd71/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fassignment-expected-bool.stderr?ref=35979a92bf6dba402885a1488ecfd84046e4bd71", "patch": "@@ -98,10 +98,10 @@ LL |         || (0 = 0);\n    |            help: try comparing for equality: `0 == 0`\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/assignment-expected-bool.rs:31:20\n+  --> $DIR/assignment-expected-bool.rs:31:22\n    |\n LL |     let _: usize = 0 = 0;\n-   |                    -^^^^\n+   |                    - ^\n    |                    |\n    |                    cannot assign to this expression\n "}]}