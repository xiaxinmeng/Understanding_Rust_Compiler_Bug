{"sha": "3c782b742bb09d15ccc7bf52bf86091150ba4e5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNzgyYjc0MmJiMDlkMTVjY2M3YmY1MmJmODYwOTExNTBiYTRlNWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T01:46:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-24T21:27:22Z"}, "message": "Rework the `get_type_parameter_bounds` impl to use a trait object\nand act more generically.", "tree": {"sha": "47e29321c07c0253f10def481acc2a0baafe7030", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47e29321c07c0253f10def481acc2a0baafe7030"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c782b742bb09d15ccc7bf52bf86091150ba4e5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c782b742bb09d15ccc7bf52bf86091150ba4e5d", "html_url": "https://github.com/rust-lang/rust/commit/3c782b742bb09d15ccc7bf52bf86091150ba4e5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c782b742bb09d15ccc7bf52bf86091150ba4e5d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d9e473be9e07885d49a7e5699eebd53ccfcc2fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d9e473be9e07885d49a7e5699eebd53ccfcc2fb", "html_url": "https://github.com/rust-lang/rust/commit/0d9e473be9e07885d49a7e5699eebd53ccfcc2fb"}], "stats": {"total": 110, "additions": 79, "deletions": 31}, "files": [{"sha": "db5770e4a2528dea4e301fad86effc2300d776bc", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 79, "deletions": 31, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/3c782b742bb09d15ccc7bf52bf86091150ba4e5d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c782b742bb09d15ccc7bf52bf86091150ba4e5d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=3c782b742bb09d15ccc7bf52bf86091150ba4e5d", "patch": "@@ -150,9 +150,16 @@ struct CrateCtxt<'a,'tcx:'a> {\n     stack: RefCell<Vec<AstConvRequest>>,\n }\n \n+/// Context specific to some particular item. This is what implements\n+/// AstConv. It has information about the predicates that are defined\n+/// on the trait. Unfortunately, this predicate information is\n+/// available in various different forms at various points in the\n+/// process. So we can't just store a pointer to e.g. the AST or the\n+/// parsed ty form, we have to wind up keeping both (and making both\n+/// optional) and extracting what we need from what's available.\n struct ItemCtxt<'a,'tcx:'a> {\n     ccx: &'a CrateCtxt<'a,'tcx>,\n-    generics: &'a ty::Generics<'tcx>,\n+    param_bounds: &'a (GetTypeParameterBounds<'tcx>+'a),\n }\n \n #[derive(Copy, PartialEq, Eq)]\n@@ -216,8 +223,8 @@ impl<'a, 'tcx, 'v> visit::Visitor<'v> for CollectItemTypesVisitor<'a, 'tcx> {\n // Utility types and common code for the above passes.\n \n impl<'a,'tcx> CrateCtxt<'a,'tcx> {\n-    fn icx(&'a self, generics: &'a ty::Generics<'tcx>) -> ItemCtxt<'a,'tcx> {\n-        ItemCtxt { ccx: self, generics: generics }\n+    fn icx(&'a self, param_bounds: &'a GetTypeParameterBounds<'tcx>) -> ItemCtxt<'a,'tcx> {\n+        ItemCtxt { ccx: self, param_bounds: param_bounds }\n     }\n \n     fn method_ty(&self, method_id: ast::NodeId) -> Rc<ty::Method<'tcx>> {\n@@ -319,11 +326,7 @@ impl<'a,'tcx> CrateCtxt<'a,'tcx> {\n     }\n }\n \n-pub trait ToTy<'tcx> {\n-    fn to_ty<RS:RegionScope>(&self, rs: &RS, ast_ty: &ast::Ty) -> Ty<'tcx>;\n-}\n-\n-impl<'a,'tcx> ToTy<'tcx> for ItemCtxt<'a,'tcx> {\n+impl<'a,'tcx> ItemCtxt<'a,'tcx> {\n     fn to_ty<RS:RegionScope>(&self, rs: &RS, ast_ty: &ast::Ty) -> Ty<'tcx> {\n         ast_ty_to_ty(self, rs, ast_ty)\n     }\n@@ -354,14 +357,7 @@ impl<'a, 'tcx> AstConv<'tcx> for ItemCtxt<'a, 'tcx> {\n                                  -> Result<Vec<ty::PolyTraitRef<'tcx>>, ErrorReported>\n     {\n         self.ccx.cycle_check(span, AstConvRequest::GetTypeParameterBounds(node_id), || {\n-            let def = self.tcx().type_parameter_def(node_id);\n-\n-            // TODO out of range indices can occur when you have something\n-            // like fn foo<T:U::X,U>() { }\n-            match self.generics.types.opt_get(def.space, def.index as usize) {\n-                Some(def) => def.bounds.trait_bounds.clone(),\n-                None => Vec::new(),\n-            }\n+            self.param_bounds.get_type_parameter_bounds(self, span, node_id)\n         })\n     }\n \n@@ -381,6 +377,32 @@ impl<'a, 'tcx> AstConv<'tcx> for ItemCtxt<'a, 'tcx> {\n     }\n }\n \n+\n+trait GetTypeParameterBounds<'tcx> {\n+    fn get_type_parameter_bounds(&self,\n+                                 astconv: &AstConv<'tcx>,\n+                                 span: Span,\n+                                 node_id: ast::NodeId)\n+                                 -> Vec<ty::PolyTraitRef<'tcx>>;\n+}\n+impl<'tcx> GetTypeParameterBounds<'tcx> for ty::Generics<'tcx> {\n+    fn get_type_parameter_bounds(&self,\n+                                 astconv: &AstConv<'tcx>,\n+                                 _span: Span,\n+                                 node_id: ast::NodeId)\n+                                 -> Vec<ty::PolyTraitRef<'tcx>>\n+    {\n+        let def = astconv.tcx().type_parameter_def(node_id);\n+\n+        // TODO out of range indices can occur when you have something\n+        // like fn foo<T:U::X,U>() { }\n+        match self.types.opt_get(def.space, def.index as usize) {\n+            Some(def) => def.bounds.trait_bounds.clone(),\n+            None => Vec::new(),\n+        }\n+    }\n+}\n+\n fn get_enum_variant_types<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                     enum_scheme: ty::TypeScheme<'tcx>,\n                                     enum_predicates: ty::GenericPredicates<'tcx>,\n@@ -1646,13 +1668,10 @@ fn ty_generic_bounds<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                         &ast::TyParamBound::TraitTyParamBound(ref poly_trait_ref, _) => {\n                             let mut projections = Vec::new();\n \n-                            let trait_ref = astconv::instantiate_poly_trait_ref(\n-                                &ccx.icx(generics),\n-                                &ExplicitRscope,\n-                                poly_trait_ref,\n-                                Some(ty),\n-                                &mut projections,\n-                            );\n+                            let trait_ref = conv_poly_trait_ref(&ccx.icx(generics),\n+                                                                ty,\n+                                                                poly_trait_ref,\n+                                                                &mut projections);\n \n                             result.predicates.push(space, trait_ref.as_predicate());\n \n@@ -1934,6 +1953,38 @@ fn check_bounds_compatible<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n     }\n }\n \n+/// Converts a specific TyParamBound from the AST into the\n+/// appropriate poly-trait-reference.\n+fn poly_trait_ref_from_bound<'tcx>(astconv: &AstConv<'tcx>,\n+                                   param_ty: Ty<'tcx>,\n+                                   bound: &ast::TyParamBound,\n+                                   projections: &mut Vec<ty::PolyProjectionPredicate<'tcx>>)\n+                                   -> Option<ty::PolyTraitRef<'tcx>>\n+{\n+    match *bound {\n+        ast::TraitTyParamBound(ref tr, ast::TraitBoundModifier::None) => {\n+            Some(conv_poly_trait_ref(astconv, param_ty, tr, projections))\n+        }\n+        ast::TraitTyParamBound(_, ast::TraitBoundModifier::Maybe) |\n+        ast::RegionTyParamBound(_) => {\n+            None\n+        }\n+    }\n+}\n+\n+fn conv_poly_trait_ref<'tcx>(astconv: &AstConv<'tcx>,\n+                             param_ty: Ty<'tcx>,\n+                             trait_ref: &ast::PolyTraitRef,\n+                             projections: &mut Vec<ty::PolyProjectionPredicate<'tcx>>)\n+                             -> ty::PolyTraitRef<'tcx>\n+{\n+    astconv::instantiate_poly_trait_ref(astconv,\n+                                        &ExplicitRscope,\n+                                        trait_ref,\n+                                        Some(param_ty),\n+                                        projections)\n+}\n+\n fn conv_param_bounds<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                               generics: &ty::Generics<'tcx>,\n                               span: Span,\n@@ -1952,14 +2003,11 @@ fn conv_param_bounds<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n \n     let trait_bounds: Vec<ty::PolyTraitRef> =\n         trait_bounds.into_iter()\n-        .map(|bound| {\n-            astconv::instantiate_poly_trait_ref(&ccx.icx(generics),\n-                                                &ExplicitRscope,\n-                                                bound,\n-                                                Some(param_ty),\n-                                                &mut projection_bounds)\n-        })\n-    .collect();\n+                    .map(|bound| conv_poly_trait_ref(&ccx.icx(generics),\n+                                                     param_ty,\n+                                                     bound,\n+                                                     &mut projection_bounds))\n+                    .collect();\n \n     let region_bounds: Vec<ty::Region> =\n         region_bounds.into_iter()"}]}