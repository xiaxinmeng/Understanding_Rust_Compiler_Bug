{"sha": "bb5bf7c3e0f82328e5be5235a92d20bf01bc9915", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNWJmN2MzZTBmODIzMjhlNWJlNTIzNWE5MmQyMGJmMDFiYzk5MTU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-07-04T23:21:35Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-04T20:32:41Z"}, "message": "std: remove str::from_bytes_with_null", "tree": {"sha": "d3d65ad501225c39cc820a8bbfc2e290de79e74e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3d65ad501225c39cc820a8bbfc2e290de79e74e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb5bf7c3e0f82328e5be5235a92d20bf01bc9915", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb5bf7c3e0f82328e5be5235a92d20bf01bc9915", "html_url": "https://github.com/rust-lang/rust/commit/bb5bf7c3e0f82328e5be5235a92d20bf01bc9915", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb5bf7c3e0f82328e5be5235a92d20bf01bc9915/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5110854f76eac307e7a1729f3003e09d0277b60", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5110854f76eac307e7a1729f3003e09d0277b60", "html_url": "https://github.com/rust-lang/rust/commit/d5110854f76eac307e7a1729f3003e09d0277b60"}], "stats": {"total": 82, "additions": 0, "deletions": 82}, "files": [{"sha": "f75bbcf20ebcb321e4fad2835c94fbd405db362c", "filename": "src/libstd/str.rs", "status": "modified", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/bb5bf7c3e0f82328e5be5235a92d20bf01bc9915/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb5bf7c3e0f82328e5be5235a92d20bf01bc9915/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=bb5bf7c3e0f82328e5be5235a92d20bf01bc9915", "patch": "@@ -83,21 +83,6 @@ pub fn from_bytes_owned(vv: ~[u8]) -> ~str {\n     }\n }\n \n-/// Convert a vector of bytes to a UTF-8 string.\n-/// The vector needs to be one byte longer than the string, and end with a 0 byte.\n-///\n-/// Compared to `from_bytes()`, this fn doesn't need to allocate a new owned str.\n-///\n-/// # Failure\n-///\n-/// Fails if invalid UTF-8\n-/// Fails if not null terminated\n-pub fn from_bytes_with_null<'a>(vv: &'a [u8]) -> &'a str {\n-    assert_eq!(vv[vv.len() - 1], 0);\n-    assert!(is_utf8(vv));\n-    return unsafe { raw::from_bytes_with_null(vv) };\n-}\n-\n /// Converts a vector to a string slice without performing any allocations.\n ///\n /// Once the slice has been validated as utf-8, it is transmuted in-place and\n@@ -826,13 +811,6 @@ pub mod raw {\n         cast::transmute(v)\n     }\n \n-    /// Converts a vector of bytes to a string.\n-    /// The byte slice needs to contain valid utf8 and needs to be one byte longer than\n-    /// the string, if possible ending in a 0 byte.\n-    pub unsafe fn from_bytes_with_null<'a>(v: &'a [u8]) -> &'a str {\n-        cast::transmute(v)\n-    }\n-\n     /// Converts a byte to a string.\n     pub unsafe fn from_byte(u: u8) -> ~str { from_bytes([u]) }\n \n@@ -2867,66 +2845,6 @@ mod tests {\n         assert!(error_happened);\n     }\n \n-    #[test]\n-    fn test_unsafe_from_bytes_with_null() {\n-        let a = [65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n-        let b = unsafe { raw::from_bytes_with_null(a) };\n-        assert_eq!(b, \"AAAAAAA\");\n-    }\n-\n-    #[test]\n-    fn test_from_bytes_with_null() {\n-        let ss = \"\u0e28\u0e44\u0e17\u0e22\u4e2d\u534eVi\u1ec7t Nam\";\n-        let bb = [0xe0_u8, 0xb8_u8, 0xa8_u8,\n-                  0xe0_u8, 0xb9_u8, 0x84_u8,\n-                  0xe0_u8, 0xb8_u8, 0x97_u8,\n-                  0xe0_u8, 0xb8_u8, 0xa2_u8,\n-                  0xe4_u8, 0xb8_u8, 0xad_u8,\n-                  0xe5_u8, 0x8d_u8, 0x8e_u8,\n-                  0x56_u8, 0x69_u8, 0xe1_u8,\n-                  0xbb_u8, 0x87_u8, 0x74_u8,\n-                  0x20_u8, 0x4e_u8, 0x61_u8,\n-                  0x6d_u8, 0x0_u8];\n-\n-        assert_eq!(ss, from_bytes_with_null(bb));\n-    }\n-\n-    #[test]\n-    #[should_fail]\n-    #[ignore(cfg(windows))]\n-    fn test_from_bytes_with_null_fail() {\n-        let bb = [0xff_u8, 0xb8_u8, 0xa8_u8,\n-                  0xe0_u8, 0xb9_u8, 0x84_u8,\n-                  0xe0_u8, 0xb8_u8, 0x97_u8,\n-                  0xe0_u8, 0xb8_u8, 0xa2_u8,\n-                  0xe4_u8, 0xb8_u8, 0xad_u8,\n-                  0xe5_u8, 0x8d_u8, 0x8e_u8,\n-                  0x56_u8, 0x69_u8, 0xe1_u8,\n-                  0xbb_u8, 0x87_u8, 0x74_u8,\n-                  0x20_u8, 0x4e_u8, 0x61_u8,\n-                  0x6d_u8, 0x0_u8];\n-\n-         let _x = from_bytes_with_null(bb);\n-    }\n-\n-    #[test]\n-    #[should_fail]\n-    #[ignore(cfg(windows))]\n-    fn test_from_bytes_with_null_fail_2() {\n-        let bb = [0xff_u8, 0xb8_u8, 0xa8_u8,\n-                  0xe0_u8, 0xb9_u8, 0x84_u8,\n-                  0xe0_u8, 0xb8_u8, 0x97_u8,\n-                  0xe0_u8, 0xb8_u8, 0xa2_u8,\n-                  0xe4_u8, 0xb8_u8, 0xad_u8,\n-                  0xe5_u8, 0x8d_u8, 0x8e_u8,\n-                  0x56_u8, 0x69_u8, 0xe1_u8,\n-                  0xbb_u8, 0x87_u8, 0x74_u8,\n-                  0x20_u8, 0x4e_u8, 0x61_u8,\n-                  0x6d_u8, 0x60_u8];\n-\n-         let _x = from_bytes_with_null(bb);\n-    }\n-\n     #[test]\n     fn test_from_buf() {\n         unsafe {"}]}