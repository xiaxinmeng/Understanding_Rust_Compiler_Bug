{"sha": "275afd6e79f4e23d870a8017c805f786e400af72", "node_id": "C_kwDOAAsO6NoAKDI3NWFmZDZlNzlmNGUyM2Q4NzBhODAxN2M4MDVmNzg2ZTQwMGFmNzI", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-06-04T10:38:47Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-06-04T10:38:47Z"}, "message": "fix: consider outer binders when folding captured items' type", "tree": {"sha": "6041d9f66e388d52e21b21327d1c66b52b14f864", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6041d9f66e388d52e21b21327d1c66b52b14f864"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/275afd6e79f4e23d870a8017c805f786e400af72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmR8abwACgkQ4laYqTBY\nYXFfUBAAs1tA69E2nIMYn0ffOcEF0gn+E+sv8txuYCx/hqIg8mGIHh/tYx3ST0Sw\n8liZF4LdQNBnay2PSMXkPq7cd4eM3q5DD6AL+IUUYesXOXQUiCA+35i60UM7SDn+\nVfKRtWK63q9nWlUM/k5m0u1kHLKeFq5S4A9cdLDhXTfyuqTlXaRybkndkiQOhA+R\nx+kfTPJmTzdad6FqslOkE3TLIv4l96AAslr8eqG27uVpqbbJwOogPWPHQTR6Hqf/\ngCak7ULiFg6X1hjapK9OI0Fu+sE/fzunj/mdECNluBg64yu+GczgLaJllWec888x\nbKtb96l5MNZ6l5uoAkAt32+w5nxbxjIETCqx8J7o87Issd0v40RSLxqRAahupXLb\nAAiNDTOmFciaDR/avU1VOpWS8+803fKG/sYabrC2R+0VEgu4bsrxvlFSt96TYt65\nDywBhVg01kgQY0pq0qV28DajA29c0CH9rjrPPVpIk1U4t4VGf2TBYapx6THVUKjn\nod0FwDQ7NBDauw6olXIjae5WqSyFi379oSOpwcLxhrpkSvhbNNewA/FnJilcOmt0\nZK81Yw5Tnw+49Bwxry8jXURAtcxVrOHv+eGjQm56WtmjrscAkB1yWqtzeB3QRcVt\n6B5RsegOwSBApCSFJ7DnTvxzlnO80oFYM04f99bmm7cYa2zCnks=\n=eeQO\n-----END PGP SIGNATURE-----", "payload": "tree 6041d9f66e388d52e21b21327d1c66b52b14f864\nparent 4fb1df6b7a410ffbb2bfd7d5172d14435f059616\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1685875127 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1685875127 +0900\n\nfix: consider outer binders when folding captured items' type\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/275afd6e79f4e23d870a8017c805f786e400af72", "html_url": "https://github.com/rust-lang/rust/commit/275afd6e79f4e23d870a8017c805f786e400af72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/275afd6e79f4e23d870a8017c805f786e400af72/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fb1df6b7a410ffbb2bfd7d5172d14435f059616", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb1df6b7a410ffbb2bfd7d5172d14435f059616", "html_url": "https://github.com/rust-lang/rust/commit/4fb1df6b7a410ffbb2bfd7d5172d14435f059616"}], "stats": {"total": 51, "additions": 40, "deletions": 11}, "files": [{"sha": "e98905f4eee53429826fcd8c0f85e5f712d4218d", "filename": "crates/hir-ty/src/infer/closure.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/275afd6e79f4e23d870a8017c805f786e400af72/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275afd6e79f4e23d870a8017c805f786e400af72/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fclosure.rs?ref=275afd6e79f4e23d870a8017c805f786e400af72", "patch": "@@ -5,7 +5,7 @@ use std::{cmp, collections::HashMap, convert::Infallible, mem};\n use chalk_ir::{\n     cast::Cast,\n     fold::{FallibleTypeFolder, TypeFoldable},\n-    AliasEq, AliasTy, BoundVar, ConstData, DebruijnIndex, FnSubst, Mutability, TyKind, WhereClause,\n+    AliasEq, AliasTy, BoundVar, DebruijnIndex, FnSubst, Mutability, TyKind, WhereClause,\n };\n use hir_def::{\n     data::adt::VariantData,\n@@ -26,8 +26,8 @@ use crate::{\n     static_lifetime, to_chalk_trait_id,\n     traits::FnTrait,\n     utils::{self, generics, Generics},\n-    Adjust, Adjustment, Binders, BindingMode, ChalkTraitId, ClosureId, ConstValue, DynTy,\n-    FnPointer, FnSig, Interner, Substitution, Ty, TyExt,\n+    Adjust, Adjustment, Binders, BindingMode, ChalkTraitId, ClosureId, DynTy, FnPointer, FnSig,\n+    Interner, Substitution, Ty, TyExt,\n };\n \n use super::{Expectation, InferenceContext};\n@@ -266,24 +266,19 @@ impl CapturedItemWithoutTy {\n                     let Some(idx) = self.generics.param_idx(x) else {\n                         return Err(());\n                     };\n-                    Ok(ConstData {\n-                        ty,\n-                        value: ConstValue::BoundVar(BoundVar::new(outer_binder, idx)),\n-                    }\n-                    .intern(Interner))\n+                    Ok(BoundVar::new(outer_binder, idx).to_const(Interner, ty))\n                 }\n \n                 fn try_fold_free_placeholder_ty(\n                     &mut self,\n                     idx: chalk_ir::PlaceholderIndex,\n-                    _outer_binder: DebruijnIndex,\n+                    outer_binder: DebruijnIndex,\n                 ) -> std::result::Result<Ty, Self::Error> {\n                     let x = from_placeholder_idx(self.db, idx);\n                     let Some(idx) = self.generics.param_idx(x) else {\n                         return Err(());\n                     };\n-                    Ok(TyKind::BoundVar(BoundVar::new(DebruijnIndex::INNERMOST, idx))\n-                        .intern(Interner))\n+                    Ok(BoundVar::new(outer_binder, idx).to_ty(Interner))\n                 }\n             }\n             let g_def = match owner {"}, {"sha": "ca4268b8fb00c558dfc54d1652e51365e3a27b88", "filename": "crates/hir-ty/src/mir/eval/tests.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/275afd6e79f4e23d870a8017c805f786e400af72/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275afd6e79f4e23d870a8017c805f786e400af72/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fmir%2Feval%2Ftests.rs?ref=275afd6e79f4e23d870a8017c805f786e400af72", "patch": "@@ -640,3 +640,37 @@ fn main() {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn regression_14966() {\n+    check_pass(\n+        r#\"\n+//- minicore: fn, copy, coerce_unsized\n+trait A<T> {\n+    fn a(&self) {}\n+}\n+impl A<()> for () {}\n+\n+struct B;\n+impl B {\n+    pub fn b<T>(s: &dyn A<T>) -> Self {\n+        B\n+    }\n+}\n+struct C;\n+impl C {\n+    fn c<T>(a: &dyn A<T>) -> Self {\n+        let mut c = C;\n+        let b = B::b(a);\n+        c.d(|| a.a());\n+        c\n+    }\n+    fn d(&mut self, f: impl FnOnce()) {}\n+}\n+\n+fn main() {\n+    C::c(&());\n+}\n+\"#,\n+    );\n+}"}]}