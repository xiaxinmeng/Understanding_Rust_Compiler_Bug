{"sha": "cd4abf93e08fc68f3bf287ab556935da457dc391", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNGFiZjkzZTA4ZmM2OGYzYmYyODdhYjU1NjkzNWRhNDU3ZGMzOTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-25T13:53:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-25T13:53:37Z"}, "message": "Auto merge of #7268 - mbartlett21:update_semi, r=Manishearth\n\nMove `semicolon_if_nothing_returned` to `pedantic`\n\nThis moves the `semicolon_if_nothing_returned` lint to `pedantic` category.\nI had done #7148, but on the master branch, and Github doesn't seem to let me change that, so here's another PR\n\nchangelog: Move [`semicolon_if_nothing_returned`] lint into `pedantic` category.", "tree": {"sha": "f2ab31612ba2201ffa514f9a853635633f7b03ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2ab31612ba2201ffa514f9a853635633f7b03ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd4abf93e08fc68f3bf287ab556935da457dc391", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd4abf93e08fc68f3bf287ab556935da457dc391", "html_url": "https://github.com/rust-lang/rust/commit/cd4abf93e08fc68f3bf287ab556935da457dc391", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd4abf93e08fc68f3bf287ab556935da457dc391/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a248648862cabc05a5fefe320bd9fcaa9a0a8c7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a248648862cabc05a5fefe320bd9fcaa9a0a8c7b", "html_url": "https://github.com/rust-lang/rust/commit/a248648862cabc05a5fefe320bd9fcaa9a0a8c7b"}, {"sha": "bcebea65c1b4640113358dd2150ada3bf6bdd850", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcebea65c1b4640113358dd2150ada3bf6bdd850", "html_url": "https://github.com/rust-lang/rust/commit/bcebea65c1b4640113358dd2150ada3bf6bdd850"}], "stats": {"total": 307, "additions": 154, "deletions": 153}, "files": [{"sha": "6c9ceaa45c21b88fc95b51b61444559fa8f0af47", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -63,7 +63,7 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnConstants {\n                 &format!(\"`assert!(false, {})` should probably be replaced\", panic_message),\n                 None,\n                 &format!(\"use `panic!({})` or `unreachable!({})`\", panic_message, panic_message),\n-            )\n+            );\n         };\n \n         if let Some(debug_assert_span) = is_expn_of(e.span, \"debug_assert\") {"}, {"sha": "932cd58bf6259c5783ac210af6814232a746913b", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -273,7 +273,7 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         let attrs = cx.tcx.hir().attrs(item.hir_id());\n         if is_relevant_item(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, attrs)\n+            check_attrs(cx, item.span, item.ident.name, attrs);\n         }\n         match item.kind {\n             ItemKind::ExternCrate(..) | ItemKind::Use(..) => {\n@@ -343,13 +343,13 @@ impl<'tcx> LateLintPass<'tcx> for Attributes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if is_relevant_impl(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, cx.tcx.hir().attrs(item.hir_id()))\n+            check_attrs(cx, item.span, item.ident.name, cx.tcx.hir().attrs(item.hir_id()));\n         }\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx TraitItem<'_>) {\n         if is_relevant_trait(cx, item) {\n-            check_attrs(cx, item.span, item.ident.name, cx.tcx.hir().attrs(item.hir_id()))\n+            check_attrs(cx, item.span, item.ident.name, cx.tcx.hir().attrs(item.hir_id()));\n         }\n     }\n }"}, {"sha": "0ac6dc28e73dbd5a158cc0c3236fc4bcedc95820", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -115,9 +115,9 @@ impl<'tcx> LateLintPass<'tcx> for BitMask {\n         if let ExprKind::Binary(cmp, left, right) = &e.kind {\n             if cmp.node.is_comparison() {\n                 if let Some(cmp_opt) = fetch_int_literal(cx, right) {\n-                    check_compare(cx, left, cmp.node, cmp_opt, e.span)\n+                    check_compare(cx, left, cmp.node, cmp_opt, e.span);\n                 } else if let Some(cmp_val) = fetch_int_literal(cx, left) {\n-                    check_compare(cx, right, invert_cmp(cmp.node), cmp_val, e.span)\n+                    check_compare(cx, right, invert_cmp(cmp.node), cmp_val, e.span);\n                 }\n             }\n         }\n@@ -171,7 +171,7 @@ fn check_compare(cx: &LateContext<'_>, bit_op: &Expr<'_>, cmp_op: BinOpKind, cmp\n         }\n         fetch_int_literal(cx, right)\n             .or_else(|| fetch_int_literal(cx, left))\n-            .map_or((), |mask| check_bit_mask(cx, op.node, cmp_op, mask, cmp_value, span))\n+            .map_or((), |mask| check_bit_mask(cx, op.node, cmp_op, mask, cmp_value, span));\n     }\n }\n "}, {"sha": "e72399af232b5f399cfe283126ac528383626fc2", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for NonminimalBool {\n         _: Span,\n         _: HirId,\n     ) {\n-        NonminimalBoolVisitor { cx }.visit_body(body)\n+        NonminimalBoolVisitor { cx }.visit_body(body);\n     }\n }\n \n@@ -184,7 +184,7 @@ impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n                 Term(n) => {\n                     let terminal = self.terminals[n as usize];\n                     if let Some(str) = simplify_not(self.cx, terminal) {\n-                        self.output.push_str(&str)\n+                        self.output.push_str(&str);\n                     } else {\n                         self.output.push('!');\n                         let snip = snippet_opt(self.cx, terminal.span)?;\n@@ -452,7 +452,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n         }\n         match &e.kind {\n             ExprKind::Binary(binop, _, _) if binop.node == BinOpKind::Or || binop.node == BinOpKind::And => {\n-                self.bool_expr(e)\n+                self.bool_expr(e);\n             },\n             ExprKind::Unary(UnOp::Not, inner) => {\n                 if self.cx.typeck_results().node_types()[inner.hir_id].is_bool() {"}, {"sha": "6e9507382390893306eac97b90bf159286d93a52", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -92,7 +92,7 @@ declare_lint_pass!(CollapsibleIf => [COLLAPSIBLE_IF, COLLAPSIBLE_ELSE_IF]);\n impl EarlyLintPass for CollapsibleIf {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n         if !expr.span.from_expansion() {\n-            check_if(cx, expr)\n+            check_if(cx, expr);\n         }\n     }\n }"}, {"sha": "b6999bef6e72657f5c0a13a6799dc13864c3f469", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -120,7 +120,7 @@ impl<'tcx> LateLintPass<'tcx> for ComparisonChain {\n             \"`if` chain can be rewritten with `match`\",\n             None,\n             \"consider rewriting the `if` chain to use `cmp` and `match`\",\n-        )\n+        );\n     }\n }\n "}, {"sha": "376a14b8181ff6eb739fbb6f9040f377949246c1", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -476,7 +476,7 @@ fn emit_branches_sharing_code_lint(\n         }\n \n         suggestions.push((\"end\", span, suggestion.to_string()));\n-        add_expr_note = !cx.typeck_results().expr_ty(if_expr).is_unit()\n+        add_expr_note = !cx.typeck_results().expr_ty(if_expr).is_unit();\n     }\n \n     let add_optional_msgs = |diag: &mut DiagnosticBuilder<'_>| {"}, {"sha": "759f7d4062d448ba64e3218b6435c65841fb864a", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -181,9 +181,9 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n         match stmt.kind {\n             StmtKind::Local(local) => {\n                 if local.ty.is_some() {\n-                    self.ty_bounds.push(TyBound::Any)\n+                    self.ty_bounds.push(TyBound::Any);\n                 } else {\n-                    self.ty_bounds.push(TyBound::Nothing)\n+                    self.ty_bounds.push(TyBound::Nothing);\n                 }\n             },\n "}, {"sha": "4966638cb1b96b7353658f1a6636acf687c8fbc6", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -70,16 +70,16 @@ impl<'tcx> DoubleComparisons {\n         #[rustfmt::skip]\n         match (op, lkind, rkind) {\n             (BinOpKind::Or, BinOpKind::Eq, BinOpKind::Lt) | (BinOpKind::Or, BinOpKind::Lt, BinOpKind::Eq) => {\n-                lint_double_comparison!(<=)\n+                lint_double_comparison!(<=);\n             },\n             (BinOpKind::Or, BinOpKind::Eq, BinOpKind::Gt) | (BinOpKind::Or, BinOpKind::Gt, BinOpKind::Eq) => {\n-                lint_double_comparison!(>=)\n+                lint_double_comparison!(>=);\n             },\n             (BinOpKind::Or, BinOpKind::Lt, BinOpKind::Gt) | (BinOpKind::Or, BinOpKind::Gt, BinOpKind::Lt) => {\n-                lint_double_comparison!(!=)\n+                lint_double_comparison!(!=);\n             },\n             (BinOpKind::And, BinOpKind::Le, BinOpKind::Ge) | (BinOpKind::And, BinOpKind::Ge, BinOpKind::Le) => {\n-                lint_double_comparison!(==)\n+                lint_double_comparison!(==);\n             },\n             _ => (),\n         };"}, {"sha": "2eb8b1422ed8a4292091f41d526a5f7a21f2f963", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -469,7 +469,7 @@ impl<'tcx> Visitor<'tcx> for InsertSearcher<'_, 'tcx> {\n                     let mut is_map_used = self.is_map_used;\n                     for arm in arms {\n                         if let Some(Guard::If(guard) | Guard::IfLet(_, guard)) = arm.guard {\n-                            self.visit_non_tail_expr(guard)\n+                            self.visit_non_tail_expr(guard);\n                         }\n                         is_map_used |= self.visit_cond_arm(arm.body);\n                     }"}, {"sha": "a3a8e748d99a0f5a261f3bf8806c3063607cd50b", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -156,7 +156,7 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n                                         vec![(left.span, lsnip), (right.span, rsnip)],\n                                     );\n                                 },\n-                            )\n+                            );\n                         } else if lcpy\n                             && !rcpy\n                             && implements_trait(cx, lty, trait_id, &[cx.typeck_results().expr_ty(right).into()])\n@@ -175,7 +175,7 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n                                         Applicability::MaybeIncorrect, // FIXME #2597\n                                     );\n                                 },\n-                            )\n+                            );\n                         } else if !lcpy\n                             && rcpy\n                             && implements_trait(cx, cx.typeck_results().expr_ty(left), trait_id, &[rty.into()])\n@@ -194,7 +194,7 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n                                         Applicability::MaybeIncorrect, // FIXME #2597\n                                     );\n                                 },\n-                            )\n+                            );\n                         }\n                     },\n                     // &foo == bar\n@@ -218,7 +218,7 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n                                         Applicability::MaybeIncorrect, // FIXME #2597\n                                     );\n                                 },\n-                            )\n+                            );\n                         }\n                     },\n                     // foo == &bar\n@@ -236,7 +236,7 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n                                     rsnip,\n                                     Applicability::MaybeIncorrect, // FIXME #2597\n                                 );\n-                            })\n+                            });\n                         }\n                     },\n                     _ => {},"}, {"sha": "8d066f305ee85e44b8dab91d14b04516fe195f87", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> LateLintPass<'tcx> for EtaReduction {\n                 for arg in args {\n                     // skip `foo(macro!())`\n                     if arg.span.ctxt() == expr.span.ctxt() {\n-                        check_closure(cx, arg)\n+                        check_closure(cx, arg);\n                     }\n                 }\n             },\n@@ -190,9 +190,10 @@ fn get_ufcs_type_name(cx: &LateContext<'_>, method_def_id: def_id::DefId, self_a\n     cx.tcx.impl_of_method(method_def_id).and_then(|_| {\n         //a type may implicitly implement other type's methods (e.g. Deref)\n         if match_types(expected_type_of_self, actual_type_of_self) {\n-            return Some(get_type_name(cx, actual_type_of_self));\n+            Some(get_type_name(cx, actual_type_of_self))\n+        } else {\n+            None\n         }\n-        None\n     })\n }\n "}, {"sha": "5fdf5bc9e9d118d366f2a2ebaeafb8767a1fb40b", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> DivergenceVisitor<'a, 'tcx> {\n                 self.visit_expr(e);\n                 for arm in arms {\n                     if let Some(Guard::If(if_expr)) = arm.guard {\n-                        self.visit_expr(if_expr)\n+                        self.visit_expr(if_expr);\n                     }\n                     // make sure top level arm expressions aren't linted\n                     self.maybe_walk_expr(&*arm.body);"}, {"sha": "7f4fb68cf2f6f16be8c4725809ad3c8ad05ae3d9", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -240,7 +240,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                 }\n             },\n             Assign(target, ..) | AssignOp(_, target, _) | AddrOf(_, hir::Mutability::Mut, target) => {\n-                self.mutates_static |= is_mutated_static(target)\n+                self.mutates_static |= is_mutated_static(target);\n             },\n             _ => {},\n         }"}, {"sha": "c02c343dc58112807ce20f22fd4d9e3c3cfaa91c", "filename": "clippy_lints/src/functions/too_many_lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Ftoo_many_lines.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -63,6 +63,6 @@ pub(super) fn check_fn(cx: &LateContext<'_>, span: Span, body: &'tcx hir::Body<'\n                 \"this function has too many lines ({}/{})\",\n                 line_count, too_many_lines_threshold\n             ),\n-        )\n+        );\n     }\n }"}, {"sha": "515b8887453b92a0d49cebab5f245a4c3d8a4a4b", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -102,7 +102,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                                         ));\n                                     }\n                                 }\n-                            })\n+                            });\n                         },\n                     );\n                 }"}, {"sha": "f2f830ca5c09e51a6dec78fd166f515801d8c377", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -67,7 +67,7 @@ fn lint_break(cx: &LateContext<'_>, break_span: Span, expr_span: Span) {\n         \"change `break` to `return` as shown\",\n         format!(\"return {}\", snip),\n         app,\n-    )\n+    );\n }\n \n #[derive(Clone, Copy, PartialEq, Eq)]"}, {"sha": "6b887da263034267fd85ebe355b2c177dacc79f4", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for InfiniteIter {\n                 return;\n             },\n         };\n-        span_lint(cx, lint, expr.span, msg)\n+        span_lint(cx, lint, expr.span, msg);\n     }\n }\n "}, {"sha": "aafdebef2480dc19f22aa94ef6adf6069cae29fb", "filename": "clippy_lints/src/invalid_upcast_comparisons.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_upcast_comparisons.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -177,7 +177,7 @@ fn upcast_comparison_bounds_err<'tcx>(\n                 },\n                 Rel::Eq | Rel::Ne => unreachable!(),\n             } {\n-                err_upcast_comparison(cx, span, lhs, true)\n+                err_upcast_comparison(cx, span, lhs, true);\n             } else if match rel {\n                 Rel::Lt => {\n                     if invert {\n@@ -195,7 +195,7 @@ fn upcast_comparison_bounds_err<'tcx>(\n                 },\n                 Rel::Eq | Rel::Ne => unreachable!(),\n             } {\n-                err_upcast_comparison(cx, span, lhs, false)\n+                err_upcast_comparison(cx, span, lhs, false);\n             }\n         }\n     }"}, {"sha": "583514b22f9bf65a01897fa38618d25d910913be", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -380,9 +380,9 @@ fn check_cmp(cx: &LateContext<'_>, span: Span, method: &Expr<'_>, lit: &Expr<'_>\n             }\n         }\n \n-        check_len(cx, span, method_path.ident.name, args, &lit.node, op, compare_to)\n+        check_len(cx, span, method_path.ident.name, args, &lit.node, op, compare_to);\n     } else {\n-        check_empty_expr(cx, span, method, lit, op)\n+        check_empty_expr(cx, span, method, lit, op);\n     }\n }\n "}, {"sha": "e627b1385bc7dd4ebcb1bba97a9426db413334bd", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -135,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         None,\n                         \"consider using an underscore-prefixed named \\\n                             binding or dropping explicitly with `std::mem::drop`\"\n-                    )\n+                    );\n                 } else if init_ty.needs_drop(cx.tcx, cx.param_env) {\n                     span_lint_and_help(\n                         cx,\n@@ -145,7 +145,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         None,\n                         \"consider using an underscore-prefixed named \\\n                             binding or dropping explicitly with `std::mem::drop`\"\n-                    )\n+                    );\n                 } else if is_must_use_ty(cx, cx.typeck_results().expr_ty(init)) {\n                     span_lint_and_help(\n                         cx,\n@@ -154,7 +154,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         \"non-binding let on an expression with `#[must_use]` type\",\n                         None,\n                         \"consider explicitly using expression value\"\n-                    )\n+                    );\n                 } else if is_must_use_func_call(cx, init) {\n                     span_lint_and_help(\n                         cx,\n@@ -163,7 +163,7 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         \"non-binding let on a result of a `#[must_use]` function\",\n                         None,\n                         \"consider explicitly using function result\"\n-                    )\n+                    );\n                 }\n             }\n         }"}, {"sha": "cf54021202f13869d60ce5fd09aefaa770eb6345", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -1038,7 +1038,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(panic_unimplemented::UNIMPLEMENTED),\n         LintId::of(panic_unimplemented::UNREACHABLE),\n         LintId::of(pattern_type_mismatch::PATTERN_TYPE_MISMATCH),\n-        LintId::of(semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n         LintId::of(shadow::SHADOW_REUSE),\n         LintId::of(shadow::SHADOW_SAME),\n         LintId::of(strings::STRING_ADD),\n@@ -1129,6 +1128,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(ranges::RANGE_PLUS_ONE),\n         LintId::of(redundant_else::REDUNDANT_ELSE),\n         LintId::of(ref_option_ref::REF_OPTION_REF),\n+        LintId::of(semicolon_if_nothing_returned::SEMICOLON_IF_NOTHING_RETURNED),\n         LintId::of(shadow::SHADOW_UNRELATED),\n         LintId::of(strings::STRING_ADD_ASSIGN),\n         LintId::of(trait_bounds::TRAIT_DUPLICATION_IN_BOUNDS),"}, {"sha": "5ae68ba5b2fe76a8c6fe8f69ed5623fa58d69e3b", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -205,7 +205,7 @@ fn could_use_elision<'tcx>(\n         output_visitor.visit_ty(ty);\n     }\n     for lt in named_generics {\n-        input_visitor.visit_generic_param(lt)\n+        input_visitor.visit_generic_param(lt);\n     }\n \n     if input_visitor.abort() || output_visitor.abort() {\n@@ -463,7 +463,7 @@ impl<'tcx> Visitor<'tcx> for LifetimeChecker {\n         // `'b` in `'a: 'b` is useless unless used elsewhere in\n         // a non-lifetime bound\n         if let GenericParamKind::Type { .. } = param.kind {\n-            walk_generic_param(self, param)\n+            walk_generic_param(self, param);\n         }\n     }\n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "e0c5578bd603f5cb3c84c020929ddc31495e95ca", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -231,7 +231,7 @@ impl EarlyLintPass for LiteralDigitGrouping {\n         }\n \n         if let ExprKind::Lit(ref lit) = expr.kind {\n-            self.check_lit(cx, lit)\n+            self.check_lit(cx, lit);\n         }\n     }\n }\n@@ -294,7 +294,7 @@ impl LiteralDigitGrouping {\n                         }\n                     };\n                     if should_warn {\n-                        warning_type.display(num_lit.format(), cx, lit.span)\n+                        warning_type.display(num_lit.format(), cx, lit.span);\n                     }\n                 }\n             }\n@@ -424,7 +424,7 @@ impl EarlyLintPass for DecimalLiteralRepresentation {\n         }\n \n         if let ExprKind::Lit(ref lit) = expr.kind {\n-            self.check_lit(cx, lit)\n+            self.check_lit(cx, lit);\n         }\n     }\n }\n@@ -446,7 +446,7 @@ impl DecimalLiteralRepresentation {\n                 let hex = format!(\"{:#X}\", val);\n                 let num_lit = NumericLiteral::new(&hex, num_lit.suffix, false);\n                 let _ = Self::do_lint(num_lit.integer).map_err(|warning_type| {\n-                    warning_type.display(num_lit.format(), cx, lit.span)\n+                    warning_type.display(num_lit.format(), cx, lit.span);\n                 });\n             }\n         }"}, {"sha": "f0327b5d7777e13efccba67e78ea0266597bb83e", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -43,7 +43,7 @@ pub(super) fn check(cx: &LateContext<'_>, self_arg: &Expr<'_>, arg: &Expr<'_>, m\n         \"to write this more concisely, try\",\n         format!(\"&{}{}\", muta, object),\n         applicability,\n-    )\n+    );\n }\n \n /// Returns `true` if the type of expr is one that provides `IntoIterator` impls"}, {"sha": "d07b5a93b67c0505a6bda0238e287cda8a7ee4ca", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -88,10 +88,10 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n         if let ty::BorrowKind::MutBorrow = bk {\n             if let PlaceBase::Local(id) = cmt.place.base {\n                 if Some(id) == self.hir_id_low {\n-                    self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id))\n+                    self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id));\n                 }\n                 if Some(id) == self.hir_id_high {\n-                    self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id))\n+                    self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id));\n                 }\n             }\n         }\n@@ -100,10 +100,10 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n     fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>, diag_expr_id: HirId) {\n         if let PlaceBase::Local(id) = cmt.place.base {\n             if Some(id) == self.hir_id_low {\n-                self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id))\n+                self.span_low = Some(self.cx.tcx.hir().span(diag_expr_id));\n             }\n             if Some(id) == self.hir_id_high {\n-                self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id))\n+                self.span_high = Some(self.cx.tcx.hir().span(diag_expr_id));\n             }\n         }\n     }"}, {"sha": "0f6cd5de761f9d394402900b5079fa9ea8ee6ff6", "filename": "clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -35,7 +35,7 @@ pub(super) fn check<'tcx>(\n                 \"try using vec![{};SIZE] or {}.resize(NEW_SIZE, {})\",\n                 item_str, vec_str, item_str\n             ),\n-        )\n+        );\n     }\n \n     if !matches!(pat.kind, PatKind::Wild) {"}, {"sha": "2f7360210ba4de7918204c49434a6cf0a5ecd8f3", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -80,10 +80,10 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n                         }\n                     },\n                     ExprKind::Assign(lhs, _, _) if lhs.hir_id == expr.hir_id => {\n-                        *state = IncrementVisitorVarState::DontWarn\n+                        *state = IncrementVisitorVarState::DontWarn;\n                     },\n                     ExprKind::AddrOf(BorrowKind::Ref, mutability, _) if mutability == Mutability::Mut => {\n-                        *state = IncrementVisitorVarState::DontWarn\n+                        *state = IncrementVisitorVarState::DontWarn;\n                     },\n                     _ => (),\n                 }\n@@ -207,7 +207,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n                         }\n                     },\n                     ExprKind::AddrOf(BorrowKind::Ref, mutability, _) if mutability == Mutability::Mut => {\n-                        self.state = InitializeVisitorState::DontWarn\n+                        self.state = InitializeVisitorState::DontWarn;\n                     },\n                     _ => (),\n                 }\n@@ -292,7 +292,7 @@ impl<'tcx> Visitor<'tcx> for LoopNestVisitor {\n                 return;\n             }\n         }\n-        walk_pat(self, pat)\n+        walk_pat(self, pat);\n     }\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "66479ae264e4fe32a2fbe23e183cf3ca8d7ba41c", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -212,9 +212,9 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n         let mut suggestions = vec![];\n         for ((root, span), path) in used {\n             if path.len() == 1 {\n-                suggestions.push((span, format!(\"{}::{}\", root, path[0])))\n+                suggestions.push((span, format!(\"{}::{}\", root, path[0])));\n             } else {\n-                suggestions.push((span, format!(\"{}::{{{}}}\", root, path.join(\", \"))))\n+                suggestions.push((span, format!(\"{}::{{{}}}\", root, path.join(\", \"))));\n             }\n         }\n \n@@ -231,7 +231,7 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n                     \"remove the attribute and import the macro directly, try\",\n                     help,\n                     Applicability::MaybeIncorrect,\n-                )\n+                );\n             }\n         }\n     }"}, {"sha": "6a06090f6e29193ecb69dae66ecda6238a14f108", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -123,7 +123,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n                                           kind_word,\n                                           snippet(cx, pattern.span, \"..\")))]\n                             .into_iter().chain(strippings.into_iter().map(|span| (span, \"<stripped>\".into()))),\n-                        )\n+                        );\n                     });\n                 }\n             }"}, {"sha": "e1f80ab025c0a35ff447e2ca2ea7cd0500814186", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -125,7 +125,7 @@ fn lint_needless_cloning(cx: &LateContext<'_>, root: Span, receiver: Span) {\n         \"remove the `map` call\",\n         String::new(),\n         Applicability::MachineApplicable,\n-    )\n+    );\n }\n \n fn lint(cx: &LateContext<'_>, replace: Span, root: Span, copied: bool) {\n@@ -142,7 +142,7 @@ fn lint(cx: &LateContext<'_>, replace: Span, root: Span, copied: bool) {\n                 snippet_with_applicability(cx, root, \"..\", &mut applicability)\n             ),\n             applicability,\n-        )\n+        );\n     } else {\n         span_lint_and_sugg(\n             cx,\n@@ -155,6 +155,6 @@ fn lint(cx: &LateContext<'_>, replace: Span, root: Span, copied: bool) {\n                 snippet_with_applicability(cx, root, \"..\", &mut applicability)\n             ),\n             applicability,\n-        )\n+        );\n     }\n }"}, {"sha": "e07d8ea56e4fbd4fe70f0f1617ab461930d6197d", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -1144,7 +1144,7 @@ fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                 \"try this\",\n                 suggestions.join(\" | \"),\n                 Applicability::MaybeIncorrect,\n-            )\n+            );\n         },\n     };\n }\n@@ -1242,7 +1242,7 @@ fn check_match_as_ref(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>], exp\n                     cast,\n                 ),\n                 applicability,\n-            )\n+            );\n         }\n     }\n }\n@@ -1494,7 +1494,7 @@ fn check_match_single_binding<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[A\n                     \"consider using the scrutinee and body instead\",\n                     sugg,\n                     applicability,\n-                )\n+                );\n             } else {\n                 span_lint_and_sugg(\n                     cx,\n@@ -1747,7 +1747,7 @@ mod redundant_pattern_match {\n             match match_source {\n                 MatchSource::Normal => find_sugg_for_match(cx, expr, op, arms),\n                 MatchSource::IfLetDesugar { contains_else_clause } => {\n-                    find_sugg_for_if_let(cx, expr, op, &arms[0], \"if\", *contains_else_clause)\n+                    find_sugg_for_if_let(cx, expr, op, &arms[0], \"if\", *contains_else_clause);\n                 },\n                 MatchSource::WhileLetDesugar => find_sugg_for_if_let(cx, expr, op, &arms[0], \"while\", false),\n                 _ => {},\n@@ -1876,7 +1876,7 @@ mod redundant_pattern_match {\n                             {\n                                 self.res = true;\n                             } else {\n-                                self.visit_expr(self_arg)\n+                                self.visit_expr(self_arg);\n                             }\n                         }\n                         args.iter().for_each(|arg| self.visit_expr(arg));"}, {"sha": "da428a7b4879b955d4e6937a3dcf4039185f28a6", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -135,7 +135,7 @@ pub(crate) trait BindInsteadOfMap {\n                         .into_iter()\n                         .map(|(span1, span2)| (span1, snippet(cx, span2, \"_\").into())),\n                 ),\n-            )\n+            );\n         });\n         true\n     }"}, {"sha": "f5b4b6bf8ea2475e5e98b12d1dfe3b1c876e1fff", "filename": "clippy_lints/src/methods/cloned_instead_of_copied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -41,5 +41,5 @@ pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span,\n         \"try\",\n         \"copied\".into(),\n         Applicability::MachineApplicable,\n-    )\n+    );\n }"}, {"sha": "32d40d97bf419debd6b7ee1bc9f7728e835a79c2", "filename": "clippy_lints/src/methods/flat_map_option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_option.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -30,5 +30,5 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, arg\n         \"try\",\n         \"filter_map\".into(),\n         Applicability::MachineApplicable,\n-    )\n+    );\n }"}, {"sha": "cabfe8023ef0279b3b1a7266cae43ec587dccac1", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -1951,7 +1951,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n     if let Some((name, [recv, args @ ..], span)) = method_call!(expr) {\n         match (name, args) {\n             (\"add\" | \"offset\" | \"sub\" | \"wrapping_offset\" | \"wrapping_add\" | \"wrapping_sub\", [recv, _]) => {\n-                zst_offset::check(cx, expr, recv)\n+                zst_offset::check(cx, expr, recv);\n             },\n             (\"and_then\", [arg]) => {\n                 let biom_option_linted = bind_instead_of_map::OptionAndThenSome::check(cx, expr, recv, arg);\n@@ -2012,7 +2012,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                         (\"as_mut\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, true, msrv),\n                         (\"as_ref\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, false, msrv),\n                         (\"filter\", [f_arg]) => {\n-                            filter_map::check(cx, expr, recv2, f_arg, span2, recv, m_arg, span, false)\n+                            filter_map::check(cx, expr, recv2, f_arg, span2, recv, m_arg, span, false);\n                         },\n                         (\"find\", [f_arg]) => filter_map::check(cx, expr, recv2, f_arg, span2, recv, m_arg, span, true),\n                         _ => {},\n@@ -2058,7 +2058,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n                     manual_saturating_arithmetic::check(cx, expr, lhs, rhs, u_arg, &arith[\"checked_\".len()..]);\n                 },\n                 Some((\"map\", [m_recv, m_arg], span)) => {\n-                    option_map_unwrap_or::check(cx, expr, m_recv, m_arg, recv, u_arg, span)\n+                    option_map_unwrap_or::check(cx, expr, m_recv, m_arg, recv, u_arg, span);\n                 },\n                 _ => {},\n             },\n@@ -2073,7 +2073,7 @@ fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Optio\n \n fn check_is_some_is_none(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, is_some: bool) {\n     if let Some((name @ (\"find\" | \"position\" | \"rposition\"), [f_recv, arg], span)) = method_call!(recv) {\n-        search_is_some::check(cx, expr, name, is_some, f_recv, arg, recv, span)\n+        search_is_some::check(cx, expr, name, is_some, f_recv, arg, recv, span);\n     }\n }\n "}, {"sha": "4c4034437da51601337af3aec9c36ca57a237ab0", "filename": "clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -87,7 +87,7 @@ pub(super) fn check(\n             ast::LitKind::Bool(true) => check_fold_with_op(cx, expr, acc, fold_span, hir::BinOpKind::And, \"all\", true),\n             ast::LitKind::Int(0, _) => check_fold_with_op(cx, expr, acc, fold_span, hir::BinOpKind::Add, \"sum\", false),\n             ast::LitKind::Int(1, _) => {\n-                check_fold_with_op(cx, expr, acc, fold_span, hir::BinOpKind::Mul, \"product\", false)\n+                check_fold_with_op(cx, expr, acc, fold_span, hir::BinOpKind::Mul, \"product\", false);\n             },\n             _ => (),\n         }"}, {"sha": "050b6805b7c98ddacdfde159d89ffce30ac5d825", "filename": "clippy_lints/src/misc_early/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early%2Fmod.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -310,7 +310,7 @@ impl EarlyLintPass for MiscEarlyLints {\n         if in_external_macro(cx.sess(), expr.span) {\n             return;\n         }\n-        double_neg::check(cx, expr)\n+        double_neg::check(cx, expr);\n     }\n }\n \n@@ -334,15 +334,15 @@ impl MiscEarlyLints {\n             };\n             unseparated_literal_suffix::check(cx, lit, &lit_snip, suffix, \"integer\");\n             if lit_snip.starts_with(\"0x\") {\n-                mixed_case_hex_literals::check(cx, lit, suffix, &lit_snip)\n+                mixed_case_hex_literals::check(cx, lit, suffix, &lit_snip);\n             } else if lit_snip.starts_with(\"0b\") || lit_snip.starts_with(\"0o\") {\n-                /* nothing to do */\n+                // nothing to do\n             } else if value != 0 && lit_snip.starts_with('0') {\n-                zero_prefixed_literal::check(cx, lit, &lit_snip)\n+                zero_prefixed_literal::check(cx, lit, &lit_snip);\n             }\n         } else if let LitKind::Float(_, LitFloatType::Suffixed(float_ty)) = lit.kind {\n             let suffix = float_ty.name_str();\n-            unseparated_literal_suffix::check(cx, lit, &lit_snip, suffix, \"float\")\n+            unseparated_literal_suffix::check(cx, lit, &lit_snip, suffix, \"float\");\n         }\n     }\n }"}, {"sha": "6efe8ffcde03616bb11c2662ee0520e9ada8602a", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -48,7 +48,7 @@ impl<'tcx> LateLintPass<'tcx> for UnnecessaryMutPassed {\n                 let def_id = cx.typeck_results().type_dependent_def_id(e.hir_id).unwrap();\n                 let substs = cx.typeck_results().node_substs(e.hir_id);\n                 let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n-                check_arguments(cx, arguments, method_type, &path.ident.as_str(), \"method\")\n+                check_arguments(cx, arguments, method_type, &path.ident.as_str(), \"method\");\n             },\n             _ => (),\n         }"}, {"sha": "81bf853300fe5aa4014612ec533aa55e572ea1a9", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -103,7 +103,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MutArgVisitor<'a, 'tcx> {\n             _ if !self.found => self.expr_span = Some(expr.span),\n             _ => return,\n         }\n-        walk_expr(self, expr)\n+        walk_expr(self, expr);\n     }\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "fe3c4455be5e210821463f7628fdcb5dcc950279", "filename": "clippy_lints/src/needless_arbitrary_self_type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -121,15 +121,15 @@ impl EarlyLintPass for NeedlessArbitrarySelfType {\n         match &p.ty.kind {\n             TyKind::Path(None, path) => {\n                 if let PatKind::Ident(BindingMode::ByValue(mutbl), _, _) = p.pat.kind {\n-                    check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Value, mutbl)\n+                    check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Value, mutbl);\n                 }\n             },\n             TyKind::Rptr(lifetime, mut_ty) => {\n                 if_chain! {\n                 if let TyKind::Path(None, path) = &mut_ty.ty.kind;\n                 if let PatKind::Ident(BindingMode::ByValue(Mutability::Not), _, _) = p.pat.kind;\n                     then {\n-                        check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Ref(*lifetime), mut_ty.mutbl)\n+                        check_param_inner(cx, path, p.span.to(p.ty.span), &Mode::Ref(*lifetime), mut_ty.mutbl);\n                     }\n                 }\n             },"}, {"sha": "3b3736fd3a19114601421a34cd60e8cd0993f5b9", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -82,7 +82,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBool {\n                 }\n \n                 if is_else_clause(cx.tcx, e) {\n-                    snip = snip.blockify()\n+                    snip = snip.blockify();\n                 }\n \n                 span_lint_and_sugg(\n@@ -144,15 +144,15 @@ impl<'tcx> LateLintPass<'tcx> for BoolComparison {\n                         |h: Sugg<'_>| !h,\n                         \"equality checks against false can be replaced by a negation\",\n                     ));\n-                    check_comparison(cx, e, true_case, false_case, true_case, false_case, ignore_no_literal)\n+                    check_comparison(cx, e, true_case, false_case, true_case, false_case, ignore_no_literal);\n                 },\n                 BinOpKind::Ne => {\n                     let true_case = Some((\n                         |h: Sugg<'_>| !h,\n                         \"inequality checks against true can be replaced by a negation\",\n                     ));\n                     let false_case = Some((|h| h, \"inequality checks against false are unnecessary\"));\n-                    check_comparison(cx, e, true_case, false_case, true_case, false_case, ignore_no_literal)\n+                    check_comparison(cx, e, true_case, false_case, true_case, false_case, ignore_no_literal);\n                 },\n                 BinOpKind::Lt => check_comparison(\n                     cx,\n@@ -251,22 +251,22 @@ fn check_comparison<'a, 'tcx>(\n                             snippet_with_applicability(cx, expression_info.right_span, \"..\", &mut applicability)\n                         ),\n                         applicability,\n-                    )\n+                    );\n                 }\n             }\n \n             match (fetch_bool_expr(left_side), fetch_bool_expr(right_side)) {\n                 (Bool(true), Other) => left_true.map_or((), |(h, m)| {\n-                    suggest_bool_comparison(cx, e, right_side, applicability, m, h)\n+                    suggest_bool_comparison(cx, e, right_side, applicability, m, h);\n                 }),\n                 (Other, Bool(true)) => right_true.map_or((), |(h, m)| {\n-                    suggest_bool_comparison(cx, e, left_side, applicability, m, h)\n+                    suggest_bool_comparison(cx, e, left_side, applicability, m, h);\n                 }),\n                 (Bool(false), Other) => left_false.map_or((), |(h, m)| {\n-                    suggest_bool_comparison(cx, e, right_side, applicability, m, h)\n+                    suggest_bool_comparison(cx, e, right_side, applicability, m, h);\n                 }),\n                 (Other, Bool(false)) => right_false.map_or((), |(h, m)| {\n-                    suggest_bool_comparison(cx, e, left_side, applicability, m, h)\n+                    suggest_bool_comparison(cx, e, left_side, applicability, m, h);\n                 }),\n                 (Other, Other) => no_literal.map_or((), |(h, m)| {\n                     let left_side = Sugg::hir_with_applicability(cx, left_side, \"..\", &mut applicability);\n@@ -279,7 +279,7 @@ fn check_comparison<'a, 'tcx>(\n                         \"try simplifying it as shown\",\n                         h(left_side, right_side).to_string(),\n                         applicability,\n-                    )\n+                    );\n                 }),\n                 _ => (),\n             }"}, {"sha": "dd1dfa2bdfbcf6464e271653e98b2c57ebce99c9", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -199,7 +199,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n                     |diag| {\n                         diag.multipart_suggestion(\"try this\", replacements, app);\n                     },\n-                )\n+                );\n             }\n             self.current_body = None;\n         }"}, {"sha": "a723a472a25feabd9be2c0cacb534ddae36f8466", "filename": "clippy_lints/src/needless_for_each.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fneedless_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_for_each.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -142,10 +142,10 @@ impl<'tcx> Visitor<'tcx> for RetCollector {\n         match expr.kind {\n             ExprKind::Ret(..) => {\n                 if self.loop_depth > 0 && !self.ret_in_loop {\n-                    self.ret_in_loop = true\n+                    self.ret_in_loop = true;\n                 }\n \n-                self.spans.push(expr.span)\n+                self.spans.push(expr.span);\n             },\n \n             ExprKind::Loop(..) => {"}, {"sha": "c824f6f54b5cc08759a1de7cf9024de7f1925b2b", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -84,7 +84,7 @@ impl<'tcx> LateLintPass<'tcx> for NoNegCompOpForPartialOrd {\n                         types produces code that is hard to read and refactor, please \\\n                         consider using the `partial_cmp` method instead, to make it \\\n                         clear that the two values could be incomparable\"\n-                    )\n+                    );\n                 }\n             }\n         }"}, {"sha": "fded48038e39fb25a1eecf859bd77efa2d4e6c57", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -123,7 +123,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `create` is called more than once\",\n                     );\n                 } else {\n-                    create = true\n+                    create = true;\n                 }\n                 create_arg = create_arg || (arg == Argument::True);\n             },\n@@ -136,7 +136,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `append` is called more than once\",\n                     );\n                 } else {\n-                    append = true\n+                    append = true;\n                 }\n                 append_arg = append_arg || (arg == Argument::True);\n             },\n@@ -149,7 +149,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `truncate` is called more than once\",\n                     );\n                 } else {\n-                    truncate = true\n+                    truncate = true;\n                 }\n                 truncate_arg = truncate_arg || (arg == Argument::True);\n             },\n@@ -162,7 +162,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `read` is called more than once\",\n                     );\n                 } else {\n-                    read = true\n+                    read = true;\n                 }\n                 read_arg = read_arg || (arg == Argument::True);\n             },\n@@ -175,7 +175,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `write` is called more than once\",\n                     );\n                 } else {\n-                    write = true\n+                    write = true;\n                 }\n                 write_arg = write_arg || (arg == Argument::True);\n             },"}, {"sha": "d66bac5224360baea2acc2729d8717a42f9dc19b", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -88,7 +88,7 @@ impl QuestionMark {\n                         \"replace it with\",\n                         replacement_str,\n                         applicability,\n-                    )\n+                    );\n                 }\n             }\n         }\n@@ -129,7 +129,7 @@ impl QuestionMark {\n                     \"replace it with\",\n                     replacement,\n                     applicability,\n-                )\n+                );\n             }\n         }\n     }"}, {"sha": "8f56a21ac5b3d2a27b2da662c672fbd691f4d386", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -57,7 +57,7 @@ impl<'ast> ast_visit::Visitor<'ast> for ReturnVisitor {\n             self.found_return = true;\n         }\n \n-        ast_visit::walk_expr(self, ex)\n+        ast_visit::walk_expr(self, ex);\n     }\n }\n "}, {"sha": "05f9e01acb44b45154f9c103a07b4821bd830d76", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n                                 Applicability::MachineApplicable,\n                             );\n                         },\n-                    )\n+                    );\n                 }\n             }\n         }"}, {"sha": "251d527c265221348e81548b6d4e7062bda4a8cf", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -139,7 +139,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n                 } else {\n                     RetReplacement::Empty\n                 };\n-                check_final_expr(cx, &body.value, Some(body.value.span), replacement)\n+                check_final_expr(cx, &body.value, Some(body.value.span), replacement);\n             },\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n                 if let ExprKind::Block(block, _) = body.value.kind {\n@@ -241,7 +241,7 @@ fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, inner_span: Option<Spa\n                 if let Some(snippet) = snippet_opt(cx, inner_span) {\n                     diag.span_suggestion(ret_span, \"remove `return`\", snippet, Applicability::MachineApplicable);\n                 }\n-            })\n+            });\n         },\n         None => match replacement {\n             RetReplacement::Empty => {"}, {"sha": "16e4d73851fb4e89b67cb68ff184880254d4cee1", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -8,11 +8,11 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n declare_clippy_lint! {\n-    /// **What it does:** Looks for blocks of expressions and fires if the last expression returns `()`\n-    /// but is not followed by a semicolon.\n+    /// **What it does:** Looks for blocks of expressions and fires if the last expression returns\n+    /// `()` but is not followed by a semicolon.\n     ///\n-    /// **Why is this bad?** The semicolon might be optional but when\n-    /// extending the block with new code, it doesn't require a change in previous last line.\n+    /// **Why is this bad?** The semicolon might be optional but when extending the block with new\n+    /// code, it doesn't require a change in previous last line.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -30,7 +30,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     pub SEMICOLON_IF_NOTHING_RETURNED,\n-    restriction,\n+    pedantic,\n     \"add a semicolon if nothing is returned\"\n }\n "}, {"sha": "ac3f7ebd14bd83be17cf7c374dcbdd8916b3b46a", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -120,7 +120,7 @@ fn check_fn<'tcx>(cx: &LateContext<'tcx>, decl: &'tcx FnDecl<'_>, body: &'tcx Bo\n     let mut bindings = Vec::with_capacity(decl.inputs.len());\n     for arg in iter_input_pats(decl, body) {\n         if let PatKind::Binding(.., ident, _) = arg.pat.kind {\n-            bindings.push((ident.name, ident.span))\n+            bindings.push((ident.name, ident.span));\n         }\n     }\n     check_expr(cx, &body.value, &mut bindings);\n@@ -156,7 +156,7 @@ fn check_local<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>, bindings: &\n         ..\n     } = *local;\n     if let Some(t) = *ty {\n-        check_ty(cx, t, bindings)\n+        check_ty(cx, t, bindings);\n     }\n     if let Some(o) = *init {\n         check_expr(cx, o, bindings);\n@@ -324,14 +324,14 @@ fn check_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, bindings: &mut\n     }\n     match expr.kind {\n         ExprKind::Unary(_, e) | ExprKind::Field(e, _) | ExprKind::AddrOf(_, _, e) | ExprKind::Box(e) => {\n-            check_expr(cx, e, bindings)\n+            check_expr(cx, e, bindings);\n         },\n         ExprKind::Block(block, _) | ExprKind::Loop(block, ..) => check_block(cx, block, bindings),\n         // ExprKind::Call\n         // ExprKind::MethodCall\n         ExprKind::Array(v) | ExprKind::Tup(v) => {\n             for e in v {\n-                check_expr(cx, e, bindings)\n+                check_expr(cx, e, bindings);\n             }\n         },\n         ExprKind::If(cond, then, ref otherwise) => {\n@@ -374,7 +374,7 @@ fn check_ty<'tcx>(cx: &LateContext<'tcx>, ty: &'tcx Ty<'_>, bindings: &mut Vec<(\n         TyKind::Ptr(MutTy { ty: mty, .. }) | TyKind::Rptr(_, MutTy { ty: mty, .. }) => check_ty(cx, mty, bindings),\n         TyKind::Tup(tup) => {\n             for t in tup {\n-                check_ty(cx, t, bindings)\n+                check_ty(cx, t, bindings);\n             }\n         },\n         TyKind::Typeof(ref anon_const) => check_expr(cx, &cx.tcx.hir().body(anon_const.body).value, bindings),"}, {"sha": "e5c58d70b603e60318b90fb45bc65a20add965bf", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -158,7 +158,7 @@ impl SlowVectorInit {\n     ) {\n         match initialization {\n             InitializationType::Extend(e) | InitializationType::Resize(e) => {\n-                Self::emit_lint(cx, e, vec_alloc, \"slow zero-filling initialization\")\n+                Self::emit_lint(cx, e, vec_alloc, \"slow zero-filling initialization\");\n             },\n         };\n     }\n@@ -290,7 +290,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VectorInitializationVisitor<'a, 'tcx> {\n     fn visit_block(&mut self, block: &'tcx Block<'_>) {\n         if self.initialization_found {\n             if let Some(s) = block.stmts.get(0) {\n-                self.visit_stmt(s)\n+                self.visit_stmt(s);\n             }\n \n             self.initialization_found = false;"}, {"sha": "bb707f78fccd843f000ff582ba70348e50cde58d", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -266,7 +266,7 @@ fn emit_suggestion(cx: &EarlyContext<'_>, span: Span, sugg: String, applicabilit\n         \"did you mean\",\n         sugg,\n         applicability,\n-    )\n+    );\n }\n \n fn ident_swap_sugg(\n@@ -475,7 +475,7 @@ impl Add for IdentLocation {\n \n impl AddAssign for IdentLocation {\n     fn add_assign(&mut self, other: Self) {\n-        *self = *self + other\n+        *self = *self + other;\n     }\n }\n \n@@ -506,7 +506,7 @@ impl Add for IdentDifference {\n \n impl AddAssign for IdentDifference {\n     fn add_assign(&mut self, other: Self) {\n-        *self = *self + other\n+        *self = *self + other;\n     }\n }\n "}, {"sha": "70b9e8adef884e56cf34f215cd9d7e442c21455b", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -306,7 +306,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_trait_item(&mut self, cx: &LateContext<'_>, item: &TraitItem<'_>) {\n         match item.kind {\n             TraitItemKind::Const(ty, _) | TraitItemKind::Type(_, Some(ty)) => {\n-                self.check_ty(cx, ty, CheckTyContext::default())\n+                self.check_ty(cx, ty, CheckTyContext::default());\n             },\n             TraitItemKind::Fn(ref sig, _) => self.check_fn_decl(cx, sig.decl, CheckTyContext::default()),\n             TraitItemKind::Type(..) => (),\n@@ -433,7 +433,7 @@ impl Types {\n             },\n             TyKind::Slice(ty) | TyKind::Array(ty, _) | TyKind::Ptr(MutTy { ty, .. }) => {\n                 context.is_nested_call = true;\n-                self.check_ty(cx, ty, context)\n+                self.check_ty(cx, ty, context);\n             },\n             TyKind::Tup(tys) => {\n                 context.is_nested_call = true;"}, {"sha": "45291a120ed59b51df71bb3f28fc57ab0438d8b7", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -71,7 +71,7 @@ impl LateLintPass<'_> for Unicode {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n         if let ExprKind::Lit(ref lit) = expr.kind {\n             if let LitKind::Str(_, _) = lit.node {\n-                check_str(cx, lit.span, expr.hir_id)\n+                check_str(cx, lit.span, expr.hir_id);\n             }\n         }\n     }\n@@ -82,7 +82,7 @@ fn escape<T: Iterator<Item = char>>(s: T) -> String {\n     for c in s {\n         if c as u32 > 0x7F {\n             for d in c.escape_unicode() {\n-                result.push(d)\n+                result.push(d);\n             }\n         } else {\n             result.push(c);"}, {"sha": "debbd86a59e4fba224c6113842d95e710add7a07", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -92,7 +92,7 @@ fn check_ident(cx: &EarlyContext<'_>, ident: &Ident, be_aggressive: bool) {\n             \"consider making the acronym lowercase, except the initial letter\",\n             corrected,\n             Applicability::MaybeIncorrect,\n-        )\n+        );\n     }\n }\n "}, {"sha": "254b104bdefb10ef088732d2fbf20c3f4ecefeb8", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -356,7 +356,7 @@ impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n     fn visit_ty(&mut self, hir_ty: &hir::Ty<'_>) {\n         self.types_to_skip.push(hir_ty.hir_id);\n \n-        walk_ty(self, hir_ty)\n+        walk_ty(self, hir_ty);\n     }\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -385,7 +385,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LintTyCollector<'a, 'tcx> {\n             }\n         }\n \n-        walk_ty(self, hir_ty)\n+        walk_ty(self, hir_ty);\n     }\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "39ef170ae36d5d007d7792ad449db6364736fc18", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -292,7 +292,7 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                     LitKind::Str(ref text, _) => {\n                         let str_pat = self.next(\"s\");\n                         println!(\"    if let LitKind::Str(ref {}, _) = {}.node;\", str_pat, lit_pat);\n-                        println!(\"    if {}.as_str() == {:?}\", str_pat, &*text.as_str())\n+                        println!(\"    if {}.as_str() == {:?}\", str_pat, &*text.as_str());\n                     },\n                 }\n             },"}, {"sha": "2c73c3d929b14a82d2805d4df416b67b8962cea4", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -1100,7 +1100,7 @@ impl<'tcx> LateLintPass<'tcx> for IfChainStyle {\n                 IF_CHAIN_STYLE,\n                 if_chain_local_span(cx, local, if_chain_span),\n                 \"`let` expression should be inside `then { .. }`\",\n-            )\n+            );\n         }\n     }\n \n@@ -1141,7 +1141,7 @@ impl<'tcx> LateLintPass<'tcx> for IfChainStyle {\n         if is_first_if_chain_expr(cx, expr.hir_id, if_chain_span)\n             && is_if_chain_then(then_block.stmts, then_block.expr, if_chain_span)\n         {\n-            span_lint(cx, IF_CHAIN_STYLE, expr.span, \"`if_chain!` only has one `if`\")\n+            span_lint(cx, IF_CHAIN_STYLE, expr.span, \"`if_chain!` only has one `if`\");\n         }\n     }\n }"}, {"sha": "46af03663b86be540a341d0a00c3111a3b6d2efc", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -818,7 +818,7 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for IsMultiSpanScanner<'a, 'hir> {\n                     .any(|func_path| match_function_call(self.cx, fn_expr, func_path).is_some());\n                 if found_function {\n                     // These functions are all multi part suggestions\n-                    self.add_single_span_suggestion()\n+                    self.add_single_span_suggestion();\n                 }\n             },\n             ExprKind::MethodCall(path, _path_span, arg, _arg_span) => {"}, {"sha": "3ab68df2b6d7cb1bf42c9fc13d172929bd747080", "filename": "clippy_lints/src/verbose_file_reads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fverbose_file_reads.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for VerboseFileReads {\n                 \"use of `File::read_to_string`\",\n                 None,\n                 \"consider using `fs::read_to_string` instead\",\n-            )\n+            );\n         }\n     }\n }"}, {"sha": "5229a7058659c201ad361bbb112c4cd58ba379d3", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -300,7 +300,7 @@ impl EarlyLintPass for Write {\n                                 Applicability::MachineApplicable,\n                             );\n                         },\n-                    )\n+                    );\n                 }\n             }\n         } else if mac.path == sym!(writeln) {"}, {"sha": "0318c483959f2182a47f996dba7f88f6d584fc04", "filename": "clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fattrs.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -115,7 +115,7 @@ fn parse_attrs<F: FnMut(u64)>(sess: &Session, attrs: &[ast::Attribute], name: &'\n     for attr in get_attr(sess, attrs, name) {\n         if let Some(ref value) = attr.value_str() {\n             if let Ok(value) = FromStr::from_str(&value.as_str()) {\n-                f(value)\n+                f(value);\n             } else {\n                 sess.span_err(attr.span, \"not a number\");\n             }"}, {"sha": "a1f5f5f333821e448d77bfd261535693cacc4286", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -223,7 +223,7 @@ pub fn multispan_sugg<I>(diag: &mut DiagnosticBuilder<'_>, help_msg: &str, sugg:\n where\n     I: IntoIterator<Item = (Span, String)>,\n {\n-    multispan_sugg_with_applicability(diag, help_msg, Applicability::Unspecified, sugg)\n+    multispan_sugg_with_applicability(diag, help_msg, Applicability::Unspecified, sugg);\n }\n \n /// Create a suggestion made from several `span \u2192 replacement`."}, {"sha": "a21ad42c0617edcee3dc1b615bcc8317a85efe12", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -810,7 +810,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                     self.hash_name(f.ident.name);\n                     self.hash_pat(f.pat);\n                 }\n-                e.hash(&mut self.s)\n+                e.hash(&mut self.s);\n             },\n             PatKind::Tuple(pats, e) => {\n                 for pat in pats {"}, {"sha": "769836aaf18ed6c54c3773c5c4e052e8528f96c5", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -667,7 +667,7 @@ pub fn method_chain_args<'a>(expr: &'a Expr<'_>, methods: &[&str]) -> Option<Vec\n                     return None;\n                 }\n                 matched.push(args); // build up `matched` backwards\n-                current = &args[0] // go to parent expression\n+                current = &args[0]; // go to parent expression\n             } else {\n                 return None;\n             }\n@@ -1094,9 +1094,9 @@ pub fn is_refutable(cx: &LateContext<'_>, pat: &Pat<'_>) -> bool {\n /// the function once on the given pattern.\n pub fn recurse_or_patterns<'tcx, F: FnMut(&'tcx Pat<'tcx>)>(pat: &'tcx Pat<'tcx>, mut f: F) {\n     if let PatKind::Or(pats) = pat.kind {\n-        pats.iter().copied().for_each(f)\n+        pats.iter().copied().for_each(f);\n     } else {\n-        f(pat)\n+        f(pat);\n     }\n }\n "}, {"sha": "e5a70f0beac4b770fb8c0f0b27dac19515c608f0", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -684,7 +684,7 @@ impl<T: LintContext> DiagnosticBuilderExt<T> for rustc_errors::DiagnosticBuilder\n \n             if let Some(non_whitespace_offset) = non_whitespace_offset {\n                 remove_span = remove_span\n-                    .with_hi(remove_span.hi() + BytePos(non_whitespace_offset.try_into().expect(\"offset too large\")))\n+                    .with_hi(remove_span.hi() + BytePos(non_whitespace_offset.try_into().expect(\"offset too large\")));\n             }\n         }\n "}, {"sha": "2c55021ac88374f0c8fe450e8d8d3bbd75127b6d", "filename": "clippy_utils/src/usage.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fusage.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> MutVarsDelegate {\n                 //FIXME: This causes false negatives. We can't get the `NodeId` from\n                 //`Categorization::Upvar(_)`. So we search for any `Upvar`s in the\n                 //`while`-body, not just the ones in the condition.\n-                self.skip = true\n+                self.skip = true;\n             },\n             _ => {},\n         }\n@@ -71,12 +71,12 @@ impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {\n-            self.update(cmt)\n+            self.update(cmt);\n         }\n     }\n \n     fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId) {\n-        self.update(cmt)\n+        self.update(cmt);\n     }\n \n     fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}"}, {"sha": "ce00106dd4d8087afc501f234cfd442ca73c1047", "filename": "clippy_utils/src/visitors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd4abf93e08fc68f3bf287ab556935da457dc391/clippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fvisitors.rs?ref=cd4abf93e08fc68f3bf287ab556935da457dc391", "patch": "@@ -87,7 +87,7 @@ where\n         }\n \n         fn visit_stmt(&mut self, stmt: &'hir hir::Stmt<'_>) {\n-            intravisit::walk_stmt(&mut *self.inside_stmt(true), stmt)\n+            intravisit::walk_stmt(&mut *self.inside_stmt(true), stmt);\n         }\n \n         fn visit_expr(&mut self, expr: &'hir hir::Expr<'_>) {\n@@ -219,7 +219,7 @@ pub fn visit_break_exprs<'tcx>(\n \n         fn visit_expr(&mut self, e: &'tcx Expr<'_>) {\n             if let ExprKind::Break(dest, sub_expr) = e.kind {\n-                self.0(e, dest, sub_expr)\n+                self.0(e, dest, sub_expr);\n             }\n             walk_expr(self, e);\n         }\n@@ -251,7 +251,7 @@ pub fn is_res_used(cx: &LateContext<'_>, res: Res, body: BodyId) -> bool {\n                     self.found = true;\n                 }\n             } else {\n-                walk_expr(self, e)\n+                walk_expr(self, e);\n             }\n         }\n     }"}]}