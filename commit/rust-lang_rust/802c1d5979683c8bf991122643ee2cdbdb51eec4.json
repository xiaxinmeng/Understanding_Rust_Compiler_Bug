{"sha": "802c1d5979683c8bf991122643ee2cdbdb51eec4", "node_id": "C_kwDOAAsO6NoAKDgwMmMxZDU5Nzk2ODNjOGJmOTkxMTIyNjQzZWUyY2RiZGI1MWVlYzQ", "commit": {"author": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2023-06-11T09:59:15Z"}, "committer": {"name": "Wim Looman", "email": "git@nemo157.com", "date": "2023-06-13T13:48:57Z"}, "message": "Add test cases for suggestions with unsafe operations contained inside macros", "tree": {"sha": "752b1cde26a038e9379ce9de7bf5a06d22f21c1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/752b1cde26a038e9379ce9de7bf5a06d22f21c1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/802c1d5979683c8bf991122643ee2cdbdb51eec4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIYEABYIAC4WIQSil6aeYAADwGp0ncHG9XSMbdFgewUCZIhzyRAcZ2l0QG5lbW8x\nNTcuY29tAAoJEMb1dIxt0WB7wG4A+wY3jQUC6NlU35Hp+eGlA0NO1hFshz0XHEPL\nvcL5cPajAP4781Vp8vJfY0zZO9yFbFLN6KzekT6JpjGeSFCHrxj7Dw==\n=yfEv\n-----END PGP SIGNATURE-----", "payload": "tree 752b1cde26a038e9379ce9de7bf5a06d22f21c1b\nparent 8f3e876e522f9ecc8f855485bb4857163c0f86e4\nauthor Wim Looman <git@nemo157.com> 1686477555 +0200\ncommitter Wim Looman <git@nemo157.com> 1686664137 +0200\n\nAdd test cases for suggestions with unsafe operations contained inside macros\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/802c1d5979683c8bf991122643ee2cdbdb51eec4", "html_url": "https://github.com/rust-lang/rust/commit/802c1d5979683c8bf991122643ee2cdbdb51eec4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/802c1d5979683c8bf991122643ee2cdbdb51eec4/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f3e876e522f9ecc8f855485bb4857163c0f86e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3e876e522f9ecc8f855485bb4857163c0f86e4", "html_url": "https://github.com/rust-lang/rust/commit/8f3e876e522f9ecc8f855485bb4857163c0f86e4"}], "stats": {"total": 111, "additions": 100, "deletions": 11}, "files": [{"sha": "b3837338b331e85a4347e6b33df1b102cd7c41d0", "filename": "tests/ui/unsafe/auxiliary/external_unsafe_macro.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/802c1d5979683c8bf991122643ee2cdbdb51eec4/tests%2Fui%2Funsafe%2Fauxiliary%2Fexternal_unsafe_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802c1d5979683c8bf991122643ee2cdbdb51eec4/tests%2Fui%2Funsafe%2Fauxiliary%2Fexternal_unsafe_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Fauxiliary%2Fexternal_unsafe_macro.rs?ref=802c1d5979683c8bf991122643ee2cdbdb51eec4", "patch": "@@ -0,0 +1,4 @@\n+pub unsafe fn unsf() {}\n+\n+#[macro_export]\n+macro_rules! unsafe_macro { () => ($crate::unsf()) }"}, {"sha": "db1c102210e3b009c44cacbc04160f1f0103bb26", "filename": "tests/ui/unsafe/wrapping-unsafe-block-sugg.fixed", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/802c1d5979683c8bf991122643ee2cdbdb51eec4/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/802c1d5979683c8bf991122643ee2cdbdb51eec4/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.fixed?ref=802c1d5979683c8bf991122643ee2cdbdb51eec4", "patch": "@@ -1,7 +1,10 @@\n // run-rustfix\n+// aux-build:external_unsafe_macro.rs\n \n #![deny(unsafe_op_in_unsafe_fn)] //~ NOTE\n \n+extern crate external_unsafe_macro;\n+\n unsafe fn unsf() {}\n \n pub unsafe fn foo() { unsafe {\n@@ -35,4 +38,29 @@ pub unsafe fn baz() -> i32 { unsafe {\n     //~| NOTE\n }}\n \n+macro_rules! unsafe_macro { () => (unsf()) }\n+//~^ ERROR call to unsafe function is unsafe\n+//~| NOTE\n+//~| NOTE\n+//~| ERROR call to unsafe function is unsafe\n+//~| NOTE\n+//~| NOTE\n+\n+pub unsafe fn unsafe_in_macro() { unsafe {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n+    unsafe_macro!();\n+    //~^ NOTE\n+    //~| NOTE\n+    unsafe_macro!();\n+    //~^ NOTE\n+    //~| NOTE\n+}}\n+\n+pub unsafe fn unsafe_in_external_macro() {\n+    // FIXME: https://github.com/rust-lang/rust/issues/112504\n+    // FIXME: ~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n+    external_unsafe_macro::unsafe_macro!();\n+    external_unsafe_macro::unsafe_macro!();\n+}\n+\n fn main() {}"}, {"sha": "9c6be45896e25e8022d4b952c28511f2cd5665f6", "filename": "tests/ui/unsafe/wrapping-unsafe-block-sugg.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/802c1d5979683c8bf991122643ee2cdbdb51eec4/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/802c1d5979683c8bf991122643ee2cdbdb51eec4/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.rs?ref=802c1d5979683c8bf991122643ee2cdbdb51eec4", "patch": "@@ -1,7 +1,10 @@\n // run-rustfix\n+// aux-build:external_unsafe_macro.rs\n \n #![deny(unsafe_op_in_unsafe_fn)] //~ NOTE\n \n+extern crate external_unsafe_macro;\n+\n unsafe fn unsf() {}\n \n pub unsafe fn foo() {\n@@ -35,4 +38,29 @@ pub unsafe fn baz() -> i32 {\n     //~| NOTE\n }\n \n+macro_rules! unsafe_macro { () => (unsf()) }\n+//~^ ERROR call to unsafe function is unsafe\n+//~| NOTE\n+//~| NOTE\n+//~| ERROR call to unsafe function is unsafe\n+//~| NOTE\n+//~| NOTE\n+\n+pub unsafe fn unsafe_in_macro() {\n+    //~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n+    unsafe_macro!();\n+    //~^ NOTE\n+    //~| NOTE\n+    unsafe_macro!();\n+    //~^ NOTE\n+    //~| NOTE\n+}\n+\n+pub unsafe fn unsafe_in_external_macro() {\n+    // FIXME: https://github.com/rust-lang/rust/issues/112504\n+    // FIXME: ~^ NOTE an unsafe function restricts its caller, but its body is safe by default\n+    external_unsafe_macro::unsafe_macro!();\n+    external_unsafe_macro::unsafe_macro!();\n+}\n+\n fn main() {}"}, {"sha": "43f619c27d274bfb69b84ebf4fc9ece3d3724051", "filename": "tests/ui/unsafe/wrapping-unsafe-block-sugg.stderr", "status": "modified", "additions": 40, "deletions": 11, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/802c1d5979683c8bf991122643ee2cdbdb51eec4/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/802c1d5979683c8bf991122643ee2cdbdb51eec4/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsafe%2Fwrapping-unsafe-block-sugg.stderr?ref=802c1d5979683c8bf991122643ee2cdbdb51eec4", "patch": "@@ -1,70 +1,99 @@\n error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:9:5\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:12:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n note: an unsafe function restricts its caller, but its body is safe by default\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:7:1\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:10:1\n    |\n LL | pub unsafe fn foo() {\n    | ^^^^^^^^^^^^^^^^^^^\n note: the lint level is defined here\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:3:9\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:4:9\n    |\n LL | #![deny(unsafe_op_in_unsafe_fn)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n \n error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:12:5\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:15:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:19:13\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:22:13\n    |\n LL |     let y = *x;\n    |             ^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n note: an unsafe function restricts its caller, but its body is safe by default\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:17:1\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:20:1\n    |\n LL | pub unsafe fn bar(x: *const i32) -> i32 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:22:9\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:25:9\n    |\n LL |     y + *x\n    |         ^^ dereference of raw pointer\n    |\n    = note: raw pointers may be null, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:30:13\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:33:13\n    |\n LL |     let y = BAZ;\n    |             ^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n note: an unsafe function restricts its caller, but its body is safe by default\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:28:1\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:31:1\n    |\n LL | pub unsafe fn baz() -> i32 {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/wrapping-unsafe-block-sugg.rs:33:9\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:36:9\n    |\n LL |     y + BAZ\n    |         ^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n-error: aborting due to 6 previous errors\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:41:36\n+   |\n+LL | macro_rules! unsafe_macro { () => (unsf()) }\n+   |                                    ^^^^^^ call to unsafe function\n+...\n+LL |     unsafe_macro!();\n+   |     --------------- in this macro invocation\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+note: an unsafe function restricts its caller, but its body is safe by default\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:49:1\n+   |\n+LL | pub unsafe fn unsafe_in_macro() {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the macro `unsafe_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n+  --> $DIR/wrapping-unsafe-block-sugg.rs:41:36\n+   |\n+LL | macro_rules! unsafe_macro { () => (unsf()) }\n+   |                                    ^^^^^^ call to unsafe function\n+...\n+LL |     unsafe_macro!();\n+   |     --------------- in this macro invocation\n+   |\n+   = note: consult the function's documentation for information on how to avoid undefined behavior\n+   = note: this error originates in the macro `unsafe_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 8 previous errors\n "}]}