{"sha": "d1b1867af7b603f15dc299399c5e2a56dca58df6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxYjE4NjdhZjdiNjAzZjE1ZGMyOTkzOTljNWUyYTU2ZGNhNThkZjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-05-31T15:34:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-31T15:34:04Z"}, "message": "Merge #9083\n\n9083: internal: Simplify proc_macro_srv tests r=jonas-schievink a=jonas-schievink\n\nRemoves `serde_derive`, instead using `proc_macro_test` macros.\r\n\r\nShould fix https://github.com/rust-analyzer/rust-analyzer/issues/9067\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "65fdc84b5cb70a59b67ce7464f62dfe9c5da8eec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65fdc84b5cb70a59b67ce7464f62dfe9c5da8eec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1b1867af7b603f15dc299399c5e2a56dca58df6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgtQHsCRBK7hj4Ov3rIwAAGDwIAC0qVplQmKBREkxDk2Pxhr2E\n1gYHIgV/Vy4++n2/YTYe3Nz3FivOnMwdRqpFywRMc0qNNVwpSVZrYFII2CUUR77N\nr5+1Q28UX4ftqHp/nL/0Zaud2j3E7p9uNjLbGYuqZgQQVeRFTgihm4TiNP8+W26A\nu+jOaRgxhvVMITHz0l6mcCWtAi8uivYwUZGbekToxg69GXKhDrZZEj6NcM+TXJC6\nuMcRAo1oLxZLMxRi1Fmwsbb1T0BzAAr6Zy6s4Wk2+k9mg/t9ixRarMgtVECFdsIL\nEDEzeY7QO15949BxC1FoQLwmckD0CPoMG+Git/DJlbh9yvg+69Beef1++fplse4=\n=vFv/\n-----END PGP SIGNATURE-----\n", "payload": "tree 65fdc84b5cb70a59b67ce7464f62dfe9c5da8eec\nparent 70e347332d8b37c374db949bd966ff0bec8b32ab\nparent cfcadcb2959d2dbaf7d95e8b9a33c48b75480e9f\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622475244 +0000\ncommitter GitHub <noreply@github.com> 1622475244 +0000\n\nMerge #9083\n\n9083: internal: Simplify proc_macro_srv tests r=jonas-schievink a=jonas-schievink\n\nRemoves `serde_derive`, instead using `proc_macro_test` macros.\r\n\r\nShould fix https://github.com/rust-analyzer/rust-analyzer/issues/9067\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b1867af7b603f15dc299399c5e2a56dca58df6", "html_url": "https://github.com/rust-lang/rust/commit/d1b1867af7b603f15dc299399c5e2a56dca58df6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1b1867af7b603f15dc299399c5e2a56dca58df6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e347332d8b37c374db949bd966ff0bec8b32ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e347332d8b37c374db949bd966ff0bec8b32ab", "html_url": "https://github.com/rust-lang/rust/commit/70e347332d8b37c374db949bd966ff0bec8b32ab"}, {"sha": "cfcadcb2959d2dbaf7d95e8b9a33c48b75480e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfcadcb2959d2dbaf7d95e8b9a33c48b75480e9f", "html_url": "https://github.com/rust-lang/rust/commit/cfcadcb2959d2dbaf7d95e8b9a33c48b75480e9f"}], "stats": {"total": 359, "additions": 117, "deletions": 242}, "files": [{"sha": "505263c6458561a01c2e7c650a44ead33c698523", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d1b1867af7b603f15dc299399c5e2a56dca58df6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d1b1867af7b603f15dc299399c5e2a56dca58df6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d1b1867af7b603f15dc299399c5e2a56dca58df6", "patch": "@@ -1143,13 +1143,13 @@ name = \"proc_macro_srv\"\n version = \"0.0.0\"\n dependencies = [\n  \"cargo_metadata\",\n+ \"expect-test\",\n  \"libloading\",\n  \"mbe\",\n  \"memmap2\",\n  \"object\",\n  \"proc_macro_api\",\n  \"proc_macro_test\",\n- \"serde_derive\",\n  \"test_utils\",\n  \"toolchain\",\n  \"tt\","}, {"sha": "c15cb882144a8d76009a3c8652993fab80ee4b85", "filename": "crates/proc_macro_srv/Cargo.toml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d1b1867af7b603f15dc299399c5e2a56dca58df6/crates%2Fproc_macro_srv%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d1b1867af7b603f15dc299399c5e2a56dca58df6/crates%2Fproc_macro_srv%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2FCargo.toml?ref=d1b1867af7b603f15dc299399c5e2a56dca58df6", "patch": "@@ -20,10 +20,9 @@ proc_macro_api = { path = \"../proc_macro_api\", version = \"0.0.0\" }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n+toolchain = { path = \"../toolchain\" }\n cargo_metadata = \"0.13\"\n+expect-test = \"1.1.0\"\n \n # used as proc macro test targets\n-serde_derive = \"1.0.106\"\n proc_macro_test = { path = \"../proc_macro_test\" }\n-\n-toolchain = { path = \"../toolchain\" }"}, {"sha": "eb67c713480231a0c4f6959dac574062d217bea6", "filename": "crates/proc_macro_srv/src/tests/fixtures/test_serialize_proc_macro.txt", "status": "removed", "additions": 0, "deletions": 181, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/70e347332d8b37c374db949bd966ff0bec8b32ab/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt", "raw_url": "https://github.com/rust-lang/rust/raw/70e347332d8b37c374db949bd966ff0bec8b32ab/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Ffixtures%2Ftest_serialize_proc_macro.txt?ref=70e347332d8b37c374db949bd966ff0bec8b32ab", "patch": "@@ -1,181 +0,0 @@\n-SUBTREE $\n-  PUNCH   # [alone] 4294967295\n-  SUBTREE [] 4294967295\n-    IDENT   doc 4294967295\n-    SUBTREE () 4294967295\n-      IDENT   hidden 4294967295\n-  PUNCH   # [alone] 4294967295\n-  SUBTREE [] 4294967295\n-    IDENT   allow 4294967295\n-    SUBTREE () 4294967295\n-      IDENT   non_upper_case_globals 4294967295\n-      PUNCH   , [alone] 4294967295\n-      IDENT   unused_attributes 4294967295\n-      PUNCH   , [alone] 4294967295\n-      IDENT   unused_qualifications 4294967295\n-  IDENT   const 4294967295\n-  IDENT   _ 4294967295\n-  PUNCH   : [alone] 4294967295\n-  SUBTREE () 4294967295\n-  PUNCH   = [alone] 4294967295\n-  SUBTREE {} 4294967295\n-    PUNCH   # [alone] 4294967295\n-    SUBTREE [] 4294967295\n-      IDENT   allow 4294967295\n-      SUBTREE () 4294967295\n-        IDENT   unused_extern_crates 4294967295\n-        PUNCH   , [alone] 4294967295\n-        IDENT   clippy 4294967295\n-        PUNCH   : [joint] 4294967295\n-        PUNCH   : [alone] 4294967295\n-        IDENT   useless_attribute 4294967295\n-    IDENT   extern 4294967295\n-    IDENT   crate 4294967295\n-    IDENT   serde 4294967295\n-    IDENT   as 4294967295\n-    IDENT   _serde 4294967295\n-    PUNCH   ; [alone] 4294967295\n-    PUNCH   # [alone] 4294967295\n-    SUBTREE [] 4294967295\n-      IDENT   allow 4294967295\n-      SUBTREE () 4294967295\n-        IDENT   unused_macros 4294967295\n-    IDENT   macro_rules 4294967295\n-    PUNCH   ! [alone] 4294967295\n-    IDENT   try 4294967295\n-    SUBTREE {} 4294967295\n-      SUBTREE () 4294967295\n-        PUNCH   $ [alone] 4294967295\n-        IDENT   __expr 4294967295\n-        PUNCH   : [alone] 4294967295\n-        IDENT   expr 4294967295\n-      PUNCH   = [joint] 4294967295\n-      PUNCH   > [alone] 4294967295\n-      SUBTREE {} 4294967295\n-        IDENT   match 4294967295\n-        PUNCH   $ [alone] 4294967295\n-        IDENT   __expr 4294967295\n-        SUBTREE {} 4294967295\n-          IDENT   _serde 4294967295\n-          PUNCH   : [joint] 4294967295\n-          PUNCH   : [alone] 4294967295\n-          IDENT   __private 4294967295\n-          PUNCH   : [joint] 4294967295\n-          PUNCH   : [alone] 4294967295\n-          IDENT   Ok 4294967295\n-          SUBTREE () 4294967295\n-            IDENT   __val 4294967295\n-          PUNCH   = [joint] 4294967295\n-          PUNCH   > [alone] 4294967295\n-          IDENT   __val 4294967295\n-          PUNCH   , [alone] 4294967295\n-          IDENT   _serde 4294967295\n-          PUNCH   : [joint] 4294967295\n-          PUNCH   : [alone] 4294967295\n-          IDENT   __private 4294967295\n-          PUNCH   : [joint] 4294967295\n-          PUNCH   : [alone] 4294967295\n-          IDENT   Err 4294967295\n-          SUBTREE () 4294967295\n-            IDENT   __err 4294967295\n-          PUNCH   = [joint] 4294967295\n-          PUNCH   > [alone] 4294967295\n-          SUBTREE {} 4294967295\n-            IDENT   return 4294967295\n-            IDENT   _serde 4294967295\n-            PUNCH   : [joint] 4294967295\n-            PUNCH   : [alone] 4294967295\n-            IDENT   __private 4294967295\n-            PUNCH   : [joint] 4294967295\n-            PUNCH   : [alone] 4294967295\n-            IDENT   Err 4294967295\n-            SUBTREE () 4294967295\n-              IDENT   __err 4294967295\n-            PUNCH   ; [alone] 4294967295\n-    PUNCH   # [alone] 4294967295\n-    SUBTREE [] 4294967295\n-      IDENT   automatically_derived 4294967295\n-    IDENT   impl 4294967295\n-    IDENT   _serde 4294967295\n-    PUNCH   : [joint] 4294967295\n-    PUNCH   : [alone] 4294967295\n-    IDENT   Serialize 4294967295\n-    IDENT   for 4294967295\n-    IDENT   Foo 4294967295\n-    SUBTREE {} 4294967295\n-      IDENT   fn 4294967295\n-      IDENT   serialize 4294967295\n-      PUNCH   < [alone] 4294967295\n-      IDENT   __S 4294967295\n-      PUNCH   > [alone] 4294967295\n-      SUBTREE () 4294967295\n-        PUNCH   & [alone] 4294967295\n-        IDENT   self 4294967295\n-        PUNCH   , [alone] 4294967295\n-        IDENT   __serializer 4294967295\n-        PUNCH   : [alone] 4294967295\n-        IDENT   __S 4294967295\n-      PUNCH   - [joint] 4294967295\n-      PUNCH   > [alone] 4294967295\n-      IDENT   _serde 4294967295\n-      PUNCH   : [joint] 4294967295\n-      PUNCH   : [alone] 4294967295\n-      IDENT   __private 4294967295\n-      PUNCH   : [joint] 4294967295\n-      PUNCH   : [alone] 4294967295\n-      IDENT   Result 4294967295\n-      PUNCH   < [alone] 4294967295\n-      IDENT   __S 4294967295\n-      PUNCH   : [joint] 4294967295\n-      PUNCH   : [alone] 4294967295\n-      IDENT   Ok 4294967295\n-      PUNCH   , [alone] 4294967295\n-      IDENT   __S 4294967295\n-      PUNCH   : [joint] 4294967295\n-      PUNCH   : [alone] 4294967295\n-      IDENT   Error 4294967295\n-      PUNCH   > [alone] 4294967295\n-      IDENT   where 4294967295\n-      IDENT   __S 4294967295\n-      PUNCH   : [alone] 4294967295\n-      IDENT   _serde 4294967295\n-      PUNCH   : [joint] 4294967295\n-      PUNCH   : [alone] 4294967295\n-      IDENT   Serializer 4294967295\n-      PUNCH   , [alone] 4294967295\n-      SUBTREE {} 4294967295\n-        IDENT   let 4294967295\n-        IDENT   __serde_state 4294967295\n-        PUNCH   = [alone] 4294967295\n-        IDENT   try 4294967295\n-        PUNCH   ! [alone] 4294967295\n-        SUBTREE () 4294967295\n-          IDENT   _serde 4294967295\n-          PUNCH   : [joint] 4294967295\n-          PUNCH   : [alone] 4294967295\n-          IDENT   Serializer 4294967295\n-          PUNCH   : [joint] 4294967295\n-          PUNCH   : [alone] 4294967295\n-          IDENT   serialize_struct 4294967295\n-          SUBTREE () 4294967295\n-            IDENT   __serializer 4294967295\n-            PUNCH   , [alone] 4294967295\n-            LITERAL \"Foo\" 4294967295\n-            PUNCH   , [alone] 4294967295\n-            IDENT   false 4294967295\n-            IDENT   as 4294967295\n-            IDENT   usize 4294967295\n-        PUNCH   ; [alone] 4294967295\n-        IDENT   _serde 4294967295\n-        PUNCH   : [joint] 4294967295\n-        PUNCH   : [alone] 4294967295\n-        IDENT   ser 4294967295\n-        PUNCH   : [joint] 4294967295\n-        PUNCH   : [alone] 4294967295\n-        IDENT   SerializeStruct 4294967295\n-        PUNCH   : [joint] 4294967295\n-        PUNCH   : [alone] 4294967295\n-        IDENT   end 4294967295\n-        SUBTREE () 4294967295\n-          IDENT   __serde_state 4294967295\n-  PUNCH   ; [alone] 4294967295"}, {"sha": "5ca2b8a7505d33427f4f625feb3a5440d31dd357", "filename": "crates/proc_macro_srv/src/tests/mod.rs", "status": "modified", "additions": 57, "deletions": 35, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/d1b1867af7b603f15dc299399c5e2a56dca58df6/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b1867af7b603f15dc299399c5e2a56dca58df6/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Fmod.rs?ref=d1b1867af7b603f15dc299399c5e2a56dca58df6", "patch": "@@ -2,64 +2,86 @@\n \n #[macro_use]\n mod utils;\n-use test_utils::assert_eq_text;\n+use expect_test::expect;\n use utils::*;\n \n #[test]\n-fn test_derive_serialize_proc_macro() {\n+fn test_derive_empty() {\n+    assert_expand(\"DeriveEmpty\", r#\"struct S;\"#, expect![[r#\"SUBTREE $\"#]]);\n+}\n+\n+#[test]\n+fn test_derive_error() {\n     assert_expand(\n-        \"serde_derive\",\n-        \"Serialize\",\n-        \"1.0\",\n-        r\"struct Foo {}\",\n-        include_str!(\"fixtures/test_serialize_proc_macro.txt\"),\n+        \"DeriveError\",\n+        r#\"struct S;\"#,\n+        expect![[r##\"\n+            SUBTREE $\n+              IDENT   compile_error 4294967295\n+              PUNCH   ! [alone] 4294967295\n+              SUBTREE () 4294967295\n+                LITERAL \"#[derive(DeriveError)] struct S ;\" 4294967295\n+              PUNCH   ; [alone] 4294967295\"##]],\n     );\n }\n \n #[test]\n-fn test_derive_serialize_proc_macro_failed() {\n+fn test_fn_like_macro() {\n     assert_expand(\n-        \"serde_derive\",\n-        \"Serialize\",\n-        \"1.0\",\n-        r\"struct {}\",\n-        r##\"\n-SUBTREE $\n-  IDENT   compile_error 4294967295\n-  PUNCH   ! [alone] 4294967295\n-  SUBTREE {} 4294967295\n-    LITERAL \"expected identifier\" 4294967295\n-\"##,\n+        \"fn_like_noop\",\n+        r#\"ident, 0, 1, []\"#,\n+        expect![[r#\"\n+            SUBTREE $\n+              IDENT   ident 4294967295\n+              PUNCH   , [alone] 4294967295\n+              LITERAL 0 4294967295\n+              PUNCH   , [alone] 4294967295\n+              LITERAL 1 4294967295\n+              PUNCH   , [alone] 4294967295\n+              SUBTREE [] 4294967295\"#]],\n     );\n }\n \n #[test]\n-fn test_derive_proc_macro_list() {\n-    let res = list(\"serde_derive\", \"1\").join(\"\\n\");\n-\n-    assert_eq_text!(\n-        r#\"Serialize [CustomDerive]\n-Deserialize [CustomDerive]\"#,\n-        &res\n+fn test_attr_macro() {\n+    // Corresponds to\n+    //    #[proc_macro_test::attr_error(some arguments)]\n+    //    mod m {}\n+    assert_expand_attr(\n+        \"attr_error\",\n+        r#\"mod m {}\"#,\n+        r#\"some arguments\"#,\n+        expect![[r##\"\n+            SUBTREE $\n+              IDENT   compile_error 4294967295\n+              PUNCH   ! [alone] 4294967295\n+              SUBTREE () 4294967295\n+                LITERAL \"#[attr_error(some arguments)] mod m {}\" 4294967295\n+              PUNCH   ; [alone] 4294967295\"##]],\n     );\n }\n \n-/// Tests that we find and classify non-derive macros correctly.\n+/// Tests that we find and classify all proc macros correctly.\n #[test]\n fn list_test_macros() {\n-    let res = list(\"proc_macro_test\", \"0.0.0\").join(\"\\n\");\n+    let res = list().join(\"\\n\");\n \n-    assert_eq_text!(\n-        r#\"function_like_macro [FuncLike]\n-attribute_macro [Attr]\n-DummyTrait [CustomDerive]\"#,\n-        &res\n-    );\n+    expect![[r#\"\n+        fn_like_noop [FuncLike]\n+        fn_like_panic [FuncLike]\n+        fn_like_error [FuncLike]\n+        attr_noop [Attr]\n+        attr_panic [Attr]\n+        attr_error [Attr]\n+        DeriveEmpty [CustomDerive]\n+        DerivePanic [CustomDerive]\n+        DeriveError [CustomDerive]\"#]]\n+    .assert_eq(&res);\n }\n \n #[test]\n fn test_version_check() {\n-    let path = fixtures::dylib_path(\"proc_macro_test\", \"0.0.0\");\n+    let path = fixtures::proc_macro_test_dylib_path();\n     let info = proc_macro_api::read_dylib_info(&path).unwrap();\n     assert!(info.version.1 >= 50);\n }"}, {"sha": "f0a514b325c3355cb6ce741c38cbd349cd255976", "filename": "crates/proc_macro_srv/src/tests/utils.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d1b1867af7b603f15dc299399c5e2a56dca58df6/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b1867af7b603f15dc299399c5e2a56dca58df6/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_srv%2Fsrc%2Ftests%2Futils.rs?ref=d1b1867af7b603f15dc299399c5e2a56dca58df6", "patch": "@@ -2,19 +2,21 @@\n \n use crate::dylib;\n use crate::ProcMacroSrv;\n+use expect_test::Expect;\n use proc_macro_api::ListMacrosTask;\n use std::str::FromStr;\n-use test_utils::assert_eq_text;\n \n pub mod fixtures {\n     use cargo_metadata::Message;\n     use std::path::PathBuf;\n     use std::process::Command;\n \n     // Use current project metadata to get the proc-macro dylib path\n-    pub fn dylib_path(crate_name: &str, version: &str) -> std::path::PathBuf {\n+    pub fn proc_macro_test_dylib_path() -> std::path::PathBuf {\n+        let name = \"proc_macro_test\";\n+        let version = \"0.0.0\";\n         let command = Command::new(toolchain::cargo())\n-            .args(&[\"check\", \"--tests\", \"--message-format\", \"json\"])\n+            .args(&[\"build\", \"-p\", name, \"--message-format\", \"json\"])\n             .output()\n             .unwrap()\n             .stdout;\n@@ -23,7 +25,7 @@ pub mod fixtures {\n             match message.unwrap() {\n                 Message::CompilerArtifact(artifact) => {\n                     if artifact.target.kind.contains(&\"proc-macro\".to_string()) {\n-                        let repr = format!(\"{} {}\", crate_name, version);\n+                        let repr = format!(\"{} {}\", name, version);\n                         if artifact.package_id.repr.starts_with(&repr) {\n                             return PathBuf::from(&artifact.filenames[0]);\n                         }\n@@ -33,31 +35,34 @@ pub mod fixtures {\n             }\n         }\n \n-        panic!(\"No proc-macro dylib for {} found!\", crate_name);\n+        panic!(\"No proc-macro dylib for {} found!\", name);\n     }\n }\n \n fn parse_string(code: &str) -> Option<crate::rustc_server::TokenStream> {\n     Some(crate::rustc_server::TokenStream::from_str(code).unwrap())\n }\n \n-pub fn assert_expand(\n-    crate_name: &str,\n-    macro_name: &str,\n-    version: &str,\n-    ra_fixture: &str,\n-    expect: &str,\n-) {\n-    let path = fixtures::dylib_path(crate_name, version);\n+pub fn assert_expand(macro_name: &str, ra_fixture: &str, expect: Expect) {\n+    assert_expand_impl(macro_name, ra_fixture, None, expect);\n+}\n+\n+pub fn assert_expand_attr(macro_name: &str, ra_fixture: &str, attr_args: &str, expect: Expect) {\n+    assert_expand_impl(macro_name, ra_fixture, Some(attr_args), expect);\n+}\n+\n+fn assert_expand_impl(macro_name: &str, input: &str, attr: Option<&str>, expect: Expect) {\n+    let path = fixtures::proc_macro_test_dylib_path();\n     let expander = dylib::Expander::new(&path).unwrap();\n-    let fixture = parse_string(ra_fixture).unwrap();\n+    let fixture = parse_string(input).unwrap();\n+    let attr = attr.map(|attr| parse_string(attr).unwrap().into_subtree());\n \n-    let res = expander.expand(macro_name, &fixture.into_subtree(), None).unwrap();\n-    assert_eq_text!(&expect.trim(), &format!(\"{:?}\", res));\n+    let res = expander.expand(macro_name, &fixture.into_subtree(), attr.as_ref()).unwrap();\n+    expect.assert_eq(&format!(\"{:?}\", res));\n }\n \n-pub fn list(crate_name: &str, version: &str) -> Vec<String> {\n-    let path = fixtures::dylib_path(crate_name, version);\n+pub fn list() -> Vec<String> {\n+    let path = fixtures::proc_macro_test_dylib_path();\n     let task = ListMacrosTask { lib: path };\n     let mut srv = ProcMacroSrv::default();\n     let res = srv.list_macros(&task).unwrap();"}, {"sha": "4b26d2472116cc2bbdb2d93d790fc90796113f8f", "filename": "crates/proc_macro_test/src/lib.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/d1b1867af7b603f15dc299399c5e2a56dca58df6/crates%2Fproc_macro_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1b1867af7b603f15dc299399c5e2a56dca58df6/crates%2Fproc_macro_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc_macro_test%2Fsrc%2Flib.rs?ref=d1b1867af7b603f15dc299399c5e2a56dca58df6", "patch": "@@ -3,16 +3,46 @@\n use proc_macro::TokenStream;\n \n #[proc_macro]\n-pub fn function_like_macro(args: TokenStream) -> TokenStream {\n+pub fn fn_like_noop(args: TokenStream) -> TokenStream {\n     args\n }\n \n+#[proc_macro]\n+pub fn fn_like_panic(args: TokenStream) -> TokenStream {\n+    panic!(\"fn_like_panic!({})\", args);\n+}\n+\n+#[proc_macro]\n+pub fn fn_like_error(args: TokenStream) -> TokenStream {\n+    format!(\"compile_error!(\\\"fn_like_error!({})\\\");\", args).parse().unwrap()\n+}\n+\n #[proc_macro_attribute]\n-pub fn attribute_macro(_args: TokenStream, item: TokenStream) -> TokenStream {\n+pub fn attr_noop(_args: TokenStream, item: TokenStream) -> TokenStream {\n     item\n }\n \n-#[proc_macro_derive(DummyTrait)]\n-pub fn derive_macro(_item: TokenStream) -> TokenStream {\n+#[proc_macro_attribute]\n+pub fn attr_panic(args: TokenStream, item: TokenStream) -> TokenStream {\n+    panic!(\"#[attr_panic {}] {}\", args, item);\n+}\n+\n+#[proc_macro_attribute]\n+pub fn attr_error(args: TokenStream, item: TokenStream) -> TokenStream {\n+    format!(\"compile_error!(\\\"#[attr_error({})] {}\\\");\", args, item).parse().unwrap()\n+}\n+\n+#[proc_macro_derive(DeriveEmpty)]\n+pub fn derive_empty(_item: TokenStream) -> TokenStream {\n     TokenStream::new()\n }\n+\n+#[proc_macro_derive(DerivePanic)]\n+pub fn derive_panic(item: TokenStream) -> TokenStream {\n+    panic!(\"#[derive(DerivePanic)] {}\", item);\n+}\n+\n+#[proc_macro_derive(DeriveError)]\n+pub fn derive_error(item: TokenStream) -> TokenStream {\n+    format!(\"compile_error!(\\\"#[derive(DeriveError)] {}\\\");\", item).parse().unwrap()\n+}"}]}