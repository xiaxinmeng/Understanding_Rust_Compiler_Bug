{"sha": "c01e4ce74e96737f99492a185e2d170964f11556", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwMWU0Y2U3NGU5NjczN2Y5OTQ5MmExODVlMmQxNzA5NjRmMTE1NTY=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2018-09-11T14:39:07Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2018-09-27T23:53:59Z"}, "message": "Emit used rustc invocation in the save-analysis file", "tree": {"sha": "3ef1abc8b427b9d0219d332a63c70caf0acb8ac7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ef1abc8b427b9d0219d332a63c70caf0acb8ac7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c01e4ce74e96737f99492a185e2d170964f11556", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c01e4ce74e96737f99492a185e2d170964f11556", "html_url": "https://github.com/rust-lang/rust/commit/c01e4ce74e96737f99492a185e2d170964f11556", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c01e4ce74e96737f99492a185e2d170964f11556/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8876906867b2db3c7177d69dd020c40d89177f86", "url": "https://api.github.com/repos/rust-lang/rust/commits/8876906867b2db3c7177d69dd020c40d89177f86", "html_url": "https://github.com/rust-lang/rust/commit/8876906867b2db3c7177d69dd020c40d89177f86"}], "stats": {"total": 115, "additions": 101, "deletions": 14}, "files": [{"sha": "b4ef8754b81b174206b6f57752d40848a14c5c8e", "filename": "src/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c01e4ce74e96737f99492a185e2d170964f11556/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c01e4ce74e96737f99492a185e2d170964f11556/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=c01e4ce74e96737f99492a185e2d170964f11556", "patch": "@@ -57,6 +57,7 @@ cargo = { path = \"tools/cargo\" }\n # that we're shipping as well (to ensure that the rustfmt in RLS and the\n # `rustfmt` executable are the same exact version).\n rustfmt-nightly = { path = \"tools/rustfmt\" }\n+rls-data = { git = \"https://github.com/Xanewok/rls-data\", branch = \"compilation-options\" }\n \n # See comments in `tools/rustc-workspace-hack/README.md` for what's going on\n # here"}, {"sha": "b044210c092e4d8754869bf8cd5c2a72a3870b53", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 61, "deletions": 3, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c01e4ce74e96737f99492a185e2d170964f11556/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01e4ce74e96737f99492a185e2d170964f11556/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=c01e4ce74e96737f99492a185e2d170964f11556", "patch": "@@ -28,7 +28,8 @@ use rustc::hir::def_id::DefId;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n \n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n+use std::env;\n \n use syntax::ast::{self, Attribute, NodeId, PatKind, CRATE_NODE_ID};\n use syntax::parse::token;\n@@ -49,8 +50,10 @@ use json_dumper::{Access, DumpOutput, JsonDumper};\n use span_utils::SpanUtils;\n use sig;\n \n-use rls_data::{CratePreludeData, Def, DefKind, GlobalCrateId, Import, ImportKind, Ref, RefKind,\n-               Relation, RelationKind, SpanData};\n+use rls_data::{\n+    CompilationOptions, CratePreludeData, Def, DefKind, GlobalCrateId, Import, ImportKind, Ref,\n+    RefKind, Relation, RelationKind, SpanData,\n+};\n \n macro_rules! down_cast_data {\n     ($id:ident, $kind:ident, $sp:expr) => {\n@@ -169,6 +172,61 @@ impl<'l, 'tcx: 'l, 'll, O: DumpOutput + 'll> DumpVisitor<'l, 'tcx, 'll, O> {\n         self.dumper.crate_prelude(data);\n     }\n \n+    pub fn dump_compilation_options(&mut self) {\n+        // Apply possible `remap-path-prefix` remapping to the raw invocation\n+        let invocation = {\n+            let remap_arg_indices = {\n+                let mut indices = FxHashSet();\n+                for (i, e) in env::args().enumerate() {\n+                    if e.starts_with(\"--remap-path-prefix=\") {\n+                        indices.insert(i);\n+                    } else if e == \"--remap-path-prefix\" {\n+                        indices.insert(i);\n+                        indices.insert(i + 1);\n+                    }\n+                }\n+                indices\n+            };\n+\n+            let args_without_remap_args = env::args()\n+                .enumerate()\n+                .filter(|(i, _)| !remap_arg_indices.contains(i))\n+                .map(|(_, e)| e);\n+\n+            let mapping = self.tcx.sess.source_map().path_mapping();\n+            let remap_arg = |x: &str| -> String {\n+                mapping.map_prefix(PathBuf::from(x)).0.to_str().unwrap().to_owned()\n+            };\n+\n+            // Naively attempt to remap every argument\n+            let args = args_without_remap_args\n+                .map(|elem| {\n+                    let mut arg = elem.splitn(2, '=');\n+                    match (arg.next(), arg.next()) {\n+                        // Apart from `--remap...`, in `a=b` args usually only\n+                        // `b` is a path (e.g. `--extern some_crate=/path/to..`)\n+                        (Some(a), Some(b)) => format!(\"{}={}\", a, remap_arg(b)),\n+                        (Some(a), _) => remap_arg(a),\n+                        _ => unreachable!(),\n+                    }\n+                }).collect::<Vec<_>>();\n+\n+            args.as_slice().join(\" \")\n+        };\n+\n+        let opts = &self.tcx.sess.opts;\n+\n+        let data = CompilationOptions {\n+            invocation,\n+            crate_name: opts.crate_name.clone(),\n+            test: opts.test,\n+            sysroot: opts.maybe_sysroot.clone(),\n+            target_triple: opts.target_triple.to_string(),\n+        };\n+\n+        self.dumper.compilation_opts(data);\n+    }\n+\n     // Return all non-empty prefixes of a path.\n     // For each prefix, we return the span for the last segment in the prefix and\n     // a str representation of the entire prefix."}, {"sha": "bfd3a01ca422135bfa994015f7297679bb71552e", "filename": "src/librustc_save_analysis/json_dumper.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c01e4ce74e96737f99492a185e2d170964f11556/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01e4ce74e96737f99492a185e2d170964f11556/src%2Flibrustc_save_analysis%2Fjson_dumper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fjson_dumper.rs?ref=c01e4ce74e96737f99492a185e2d170964f11556", "patch": "@@ -12,9 +12,11 @@ use std::io::Write;\n \n use rustc_serialize::json::as_json;\n \n-use rls_data::{self, Analysis, CratePreludeData, Def, DefKind, Import, MacroRef, Ref, RefKind,\n-               Relation, Impl};\n use rls_data::config::Config;\n+use rls_data::{\n+    self, Analysis, CompilationOptions, CratePreludeData, Def, DefKind, Impl, Import, MacroRef,\n+    Ref, RefKind, Relation,\n+};\n use rls_span::{Column, Row};\n \n #[derive(Debug)]\n@@ -89,6 +91,10 @@ impl<'b, O: DumpOutput + 'b> JsonDumper<O> {\n         self.result.prelude = Some(data)\n     }\n \n+    pub fn compilation_opts(&mut self, data: CompilationOptions) {\n+        self.result.compilation = Some(data);\n+    }\n+\n     pub fn macro_use(&mut self, data: MacroRef) {\n         if self.config.pub_only || self.config.reachable_only {\n             return;"}, {"sha": "06496db527452a763cab1af93090c83eb952e652", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c01e4ce74e96737f99492a185e2d170964f11556/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01e4ce74e96737f99492a185e2d170964f11556/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=c01e4ce74e96737f99492a185e2d170964f11556", "patch": "@@ -70,10 +70,11 @@ use json_dumper::JsonDumper;\n use dump_visitor::DumpVisitor;\n use span_utils::SpanUtils;\n \n-use rls_data::{Def, DefKind, ExternalCrateData, GlobalCrateId, MacroRef, Ref, RefKind, Relation,\n-               RelationKind, SpanData, Impl, ImplKind};\n use rls_data::config::Config;\n-\n+use rls_data::{\n+    CrateSource, Def, DefKind, ExternalCrateData, GlobalCrateId, Impl, ImplKind, MacroRef, Ref,\n+    RefKind, Relation, RelationKind, SpanData,\n+};\n \n pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n@@ -122,16 +123,32 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     continue;\n                 }\n             };\n+            let src = self.tcx.used_crate_source(n);\n             let lo_loc = self.span_utils.sess.source_map().lookup_char_pos(span.lo());\n+            let map_prefix = |path: &PathBuf| -> PathBuf {\n+                self.tcx.sess.source_map().path_mapping().map_prefix(path.to_owned()).0\n+            };\n+\n             result.push(ExternalCrateData {\n                 // FIXME: change file_name field to PathBuf in rls-data\n                 // https://github.com/nrc/rls-data/issues/7\n-                file_name: self.span_utils.make_path_string(&lo_loc.file.name),\n+                file_name: self.span_utils.make_filename_string(&lo_loc.file),\n                 num: n.as_u32(),\n                 id: GlobalCrateId {\n                     name: self.tcx.crate_name(n).to_string(),\n                     disambiguator: self.tcx.crate_disambiguator(n).to_fingerprint().as_value(),\n                 },\n+                source: CrateSource {\n+                    dylib: src.dylib.as_ref().map(|(ref path, _)|\n+                        map_prefix(path).display().to_string()\n+                    ),\n+                    rlib: src.rlib.as_ref().map(|(ref path, _)|\n+                        map_prefix(path).display().to_string()\n+                    ),\n+                    rmeta: src.rmeta.as_ref().map(|(ref path, _)|\n+                        map_prefix(path).display().to_string()\n+                    ),\n+                }\n             });\n         }\n \n@@ -1086,6 +1103,7 @@ impl<'a> SaveHandler for DumpHandler<'a> {\n         let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n         visitor.dump_crate_info(cratename, krate);\n+        visitor.dump_compilation_options();\n         visit::walk_crate(&mut visitor, krate);\n     }\n }\n@@ -1111,6 +1129,7 @@ impl<'b> SaveHandler for CallbackHandler<'b> {\n         let mut visitor = DumpVisitor::new(save_ctxt, &mut dumper);\n \n         visitor.dump_crate_info(cratename, krate);\n+        visitor.dump_compilation_options();\n         visit::walk_crate(&mut visitor, krate);\n     }\n }"}, {"sha": "56728aed76921bcddd4614d7ad4c14c9dcb0faa7", "filename": "src/librustc_save_analysis/span_utils.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c01e4ce74e96737f99492a185e2d170964f11556/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c01e4ce74e96737f99492a185e2d170964f11556/src%2Flibrustc_save_analysis%2Fspan_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fspan_utils.rs?ref=c01e4ce74e96737f99492a185e2d170964f11556", "patch": "@@ -35,14 +35,17 @@ impl<'a> SpanUtils<'a> {\n         }\n     }\n \n-    pub fn make_path_string(&self, path: &FileName) -> String {\n-        match *path {\n-            FileName::Real(ref path) if !path.is_absolute() =>\n+    pub fn make_filename_string(&self, file: &SourceFile) -> String {\n+        match &file.name {\n+            FileName::Real(path) if !path.is_absolute() && !file.name_was_remapped => {\n                 self.sess.working_dir.0\n                     .join(&path)\n                     .display()\n-                    .to_string(),\n-            _ => path.to_string(),\n+                    .to_string()\n+            },\n+            // If the file name is already remapped, we assume the user\n+            // configured it the way they wanted to, so use that directly\n+            filename => filename.to_string()\n         }\n     }\n "}]}