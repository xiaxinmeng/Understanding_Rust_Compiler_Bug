{"sha": "8de5d66e25d256ff4949118ef6de56a166408806", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkZTVkNjZlMjVkMjU2ZmY0OTQ5MTE4ZWY2ZGU1NmExNjY0MDg4MDY=", "commit": {"author": {"name": "Teddy_Wang", "email": "wangtheo662@gmail.com", "date": "2021-09-14T00:19:30Z"}, "committer": {"name": "Teddy_Wang", "email": "wangtheo662@gmail.com", "date": "2021-09-14T00:19:30Z"}, "message": "Improve hover over derference message", "tree": {"sha": "eaa0e94a87594b2a86ac633525cd822bd29119ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaa0e94a87594b2a86ac633525cd822bd29119ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8de5d66e25d256ff4949118ef6de56a166408806", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8de5d66e25d256ff4949118ef6de56a166408806", "html_url": "https://github.com/rust-lang/rust/commit/8de5d66e25d256ff4949118ef6de56a166408806", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8de5d66e25d256ff4949118ef6de56a166408806/comments", "author": {"login": "theo-lw", "id": 28904678, "node_id": "MDQ6VXNlcjI4OTA0Njc4", "avatar_url": "https://avatars.githubusercontent.com/u/28904678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theo-lw", "html_url": "https://github.com/theo-lw", "followers_url": "https://api.github.com/users/theo-lw/followers", "following_url": "https://api.github.com/users/theo-lw/following{/other_user}", "gists_url": "https://api.github.com/users/theo-lw/gists{/gist_id}", "starred_url": "https://api.github.com/users/theo-lw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theo-lw/subscriptions", "organizations_url": "https://api.github.com/users/theo-lw/orgs", "repos_url": "https://api.github.com/users/theo-lw/repos", "events_url": "https://api.github.com/users/theo-lw/events{/privacy}", "received_events_url": "https://api.github.com/users/theo-lw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "theo-lw", "id": 28904678, "node_id": "MDQ6VXNlcjI4OTA0Njc4", "avatar_url": "https://avatars.githubusercontent.com/u/28904678?v=4", "gravatar_id": "", "url": "https://api.github.com/users/theo-lw", "html_url": "https://github.com/theo-lw", "followers_url": "https://api.github.com/users/theo-lw/followers", "following_url": "https://api.github.com/users/theo-lw/following{/other_user}", "gists_url": "https://api.github.com/users/theo-lw/gists{/gist_id}", "starred_url": "https://api.github.com/users/theo-lw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/theo-lw/subscriptions", "organizations_url": "https://api.github.com/users/theo-lw/orgs", "repos_url": "https://api.github.com/users/theo-lw/repos", "events_url": "https://api.github.com/users/theo-lw/events{/privacy}", "received_events_url": "https://api.github.com/users/theo-lw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d9728ccb2d207c4cb6a2f200cc1d1f0bb919c28", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d9728ccb2d207c4cb6a2f200cc1d1f0bb919c28", "html_url": "https://github.com/rust-lang/rust/commit/4d9728ccb2d207c4cb6a2f200cc1d1f0bb919c28"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "13c5fc1aec8e937374abfae855cfd4ec2cd6955a", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8de5d66e25d256ff4949118ef6de56a166408806/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8de5d66e25d256ff4949118ef6de56a166408806/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=8de5d66e25d256ff4949118ef6de56a166408806", "patch": "@@ -375,36 +375,36 @@ fn hover_deref_expr(\n         let original = original.display(sema.db).to_string();\n         let adjusted = adjusted_ty.display(sema.db).to_string();\n         let inner = inner_ty.display(sema.db).to_string();\n-        let type_len = \"Type: \".len();\n+        let type_len = \"To type: \".len();\n         let coerced_len = \"Coerced to: \".len();\n         let deref_len = \"Dereferenced from: \".len();\n         let max_len = (original.len() + type_len)\n             .max(adjusted.len() + coerced_len)\n             .max(inner.len() + deref_len);\n         format!(\n-            \"{bt_start}Type: {:>apad$}\\nCoerced to: {:>opad$}\\nDereferenced from: {:>ipad$}\\n{bt_end}\",\n+            \"{bt_start}Dereferenced from: {:>ipad$}\\nTo type: {:>apad$}\\nCoerced to: {:>opad$}\\n{bt_end}\",\n+            inner,\n             original,\n             adjusted,\n-            inner,\n+            ipad = max_len - deref_len,\n             apad = max_len - type_len,\n             opad = max_len - coerced_len,\n-            ipad = max_len - deref_len,\n             bt_start = if config.markdown() { \"```text\\n\" } else { \"\" },\n             bt_end = if config.markdown() { \"```\\n\" } else { \"\" }\n         )\n         .into()\n     } else {\n         let original = original.display(sema.db).to_string();\n         let inner = inner_ty.display(sema.db).to_string();\n-        let type_len = \"Type: \".len();\n+        let type_len = \"To type: \".len();\n         let deref_len = \"Dereferenced from: \".len();\n         let max_len = (original.len() + type_len).max(inner.len() + deref_len);\n         format!(\n-            \"{bt_start}Type: {:>apad$}\\nDereferenced from: {:>ipad$}\\n{bt_end}\",\n-            original,\n+            \"{bt_start}Dereferenced from: {:>ipad$}\\nTo type: {:>apad$}\\n{bt_end}\",\n             inner,\n-            apad = max_len - type_len,\n+            original,\n             ipad = max_len - deref_len,\n+            apad = max_len - type_len,\n             bt_start = if config.markdown() { \"```text\\n\" } else { \"\" },\n             bt_end = if config.markdown() { \"```\\n\" } else { \"\" }\n         )\n@@ -4542,8 +4542,8 @@ fn foo() {\n \"#,\n             expect![[r#\"\n                 ```text\n-                Type:                            i32\n                 Dereferenced from: DerefExample<i32>\n+                To type:                         i32\n                 ```\n             \"#]],\n         );\n@@ -4575,9 +4575,9 @@ fn foo() {\n \"#,\n             expect![[r#\"\n                 ```text\n-                Type:                            &&&&&i32\n-                Coerced to:                          &i32\n                 Dereferenced from: DerefExample<&&&&&i32>\n+                To type:                         &&&&&i32\n+                Coerced to:                          &i32\n                 ```\n             \"#]],\n         );"}]}