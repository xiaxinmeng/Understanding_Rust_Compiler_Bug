{"sha": "5e9cf62b894a1df015d8601d8a5ffb5f04b44827", "node_id": "C_kwDOAAsO6NoAKDVlOWNmNjJiODk0YTFkZjAxNWQ4NjAxZDhhNWZmYjVmMDRiNDQ4Mjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-30T16:45:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-30T16:45:05Z"}, "message": "Auto merge of #1929 - RalfJung:rustup, r=RalfJung\n\nrustup\n\nWith https://github.com/rust-lang/rust/pull/91323 landed, we can remove these intrinsics from Miri.", "tree": {"sha": "302aa5984178a38461831ddaa2c0b4ee4911667d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/302aa5984178a38461831ddaa2c0b4ee4911667d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e9cf62b894a1df015d8601d8a5ffb5f04b44827", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9cf62b894a1df015d8601d8a5ffb5f04b44827", "html_url": "https://github.com/rust-lang/rust/commit/5e9cf62b894a1df015d8601d8a5ffb5f04b44827", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e9cf62b894a1df015d8601d8a5ffb5f04b44827/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9983e0fc634e11717eb457a73fe84cfc9409ba8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9983e0fc634e11717eb457a73fe84cfc9409ba8f", "html_url": "https://github.com/rust-lang/rust/commit/9983e0fc634e11717eb457a73fe84cfc9409ba8f"}, {"sha": "70dd979a44c5a2c79400285821f7ac0a06eaee55", "url": "https://api.github.com/repos/rust-lang/rust/commits/70dd979a44c5a2c79400285821f7ac0a06eaee55", "html_url": "https://github.com/rust-lang/rust/commit/70dd979a44c5a2c79400285821f7ac0a06eaee55"}], "stats": {"total": 33, "additions": 1, "deletions": 32}, "files": [{"sha": "6de6fe762036c977367159a9dad2066daa1d5a57", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5e9cf62b894a1df015d8601d8a5ffb5f04b44827/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/5e9cf62b894a1df015d8601d8a5ffb5f04b44827/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=5e9cf62b894a1df015d8601d8a5ffb5f04b44827", "patch": "@@ -1 +1 @@\n-58f9efd36de5669ab731ec7ebf565999ff17b159\n+1c0287830e0fb3c4007afea2819ba03766da6e9c"}, {"sha": "39ed5ada0aa9989bf2a36743856cd6617d7ecd4c", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5e9cf62b894a1df015d8601d8a5ffb5f04b44827/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e9cf62b894a1df015d8601d8a5ffb5f04b44827/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=5e9cf62b894a1df015d8601d8a5ffb5f04b44827", "patch": "@@ -550,37 +550,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"atomic_umax_relaxed\" =>\n                 this.atomic_op(args, dest, AtomicOp::Max, AtomicRwOp::Relaxed)?,\n \n-            // Query type information\n-            \"assert_zero_valid\" | \"assert_uninit_valid\" => {\n-                let &[] = check_arg_count(args)?;\n-                let ty = instance.substs.type_at(0);\n-                let layout = this.layout_of(ty)?;\n-                // Abort here because the caller might not be panic safe.\n-                if layout.abi.is_uninhabited() {\n-                    // Use this message even for the other intrinsics, as that's what codegen does\n-                    throw_machine_stop!(TerminationInfo::Abort(format!(\n-                        \"aborted execution: attempted to instantiate uninhabited type `{}`\",\n-                        ty\n-                    )))\n-                }\n-                if intrinsic_name == \"assert_zero_valid\"\n-                    && !layout.might_permit_raw_init(this, /*zero:*/ true)\n-                {\n-                    throw_machine_stop!(TerminationInfo::Abort(format!(\n-                        \"aborted execution: attempted to zero-initialize type `{}`, which is invalid\",\n-                        ty\n-                    )))\n-                }\n-                if intrinsic_name == \"assert_uninit_valid\"\n-                    && !layout.might_permit_raw_init(this, /*zero:*/ false)\n-                {\n-                    throw_machine_stop!(TerminationInfo::Abort(format!(\n-                        \"aborted execution: attempted to leave type `{}` uninitialized, which is invalid\",\n-                        ty\n-                    )))\n-                }\n-            }\n-\n             // Other\n             \"exact_div\" => {\n                 let &[ref num, ref denom] = check_arg_count(args)?;"}]}