{"sha": "ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7", "node_id": "C_kwDOAAsO6NoAKGVjMmZkOGEzNWZjZDI3MTQ1OGRjNWZhNDYyZWY3NGJjYjM3MmY2Yzc", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-02-09T05:12:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-09T05:12:17Z"}, "message": "Rollup merge of #93445 - yaahc:exitcode-constructor, r=dtolnay\n\nAdd From<u8> for ExitCode\n\nThis should cover a mostly cross-platform subset of supported exit codes.\n\nWe decided to stick with `u8` initially since its the common subset between all platforms that we support (excluding wasm which I think only works with `true` or `false`). Posix is supposed to take i32s, but in practice many unix platforms mask out all but the low 8 bits or in some cases the 8-15th bits. Windows takes a u32 instead of an i32. Bourne-compatible shells also report signals as exitcode 128 + `signal_no`, so there's some ambiguity there when returning exit codes > 127, but it is possible to disambiguate them on the other side so we decided against restricting the possible codes further than to `u8`.\n\n## Related\n\n- Detailed analysis of exit code support on various platforms: https://internals.rust-lang.org/t/mini-pre-rfc-redesigning-process-exitstatus/5426\n- https://github.com/rust-lang/rust/issues/48711\n- https://github.com/rust-lang/rust/issues/43301\n- https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization", "tree": {"sha": "d1517ec0ba8ac5e9c8ce873cb63d7c0e75d6c437", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1517ec0ba8ac5e9c8ce873cb63d7c0e75d6c437"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiA00yCRBK7hj4Ov3rIwAAMxcIADkq3+jcUZABHueTLG2j+Tkp\nNPkPMiqC1r72exDVzxD1DvfrBZ74YlRXV6M8aANycQWAKvq4pf7xxOgcGw/dN54b\nG4gTbNxP/jxMWsC8+NqC8n00zZLzbkHbBgehZMtKakArQb2LJbTx/Tef/eQaIVYk\nb0BiKTErqnq+F+2REBQyYxZQn6Gjsqq7OHxQJjRog9PEt2uPC4u5Lf+8pqiQtGVc\nQNcUr32ZUOxUaYt73hOnfUaCKrM1FLtCLR6R8FWfOYgR255GBThye3Xt2k6W7jDb\nfXqKb1r0mJIRWsbVEJL3N0rfey84Uss6EMgY5prDvh4uYeCjMtjQIxP3dYm93Qc=\n=xEdU\n-----END PGP SIGNATURE-----\n", "payload": "tree d1517ec0ba8ac5e9c8ce873cb63d7c0e75d6c437\nparent 9a5a961be97f405e751dd2cf966e1cdb80a612c2\nparent 4c5a36e2d1ac0c5d86ba0a75426d601e7c9202b0\nauthor Yuki Okushi <jtitor@2k36.org> 1644383537 +0900\ncommitter GitHub <noreply@github.com> 1644383537 +0900\n\nRollup merge of #93445 - yaahc:exitcode-constructor, r=dtolnay\n\nAdd From<u8> for ExitCode\n\nThis should cover a mostly cross-platform subset of supported exit codes.\n\nWe decided to stick with `u8` initially since its the common subset between all platforms that we support (excluding wasm which I think only works with `true` or `false`). Posix is supposed to take i32s, but in practice many unix platforms mask out all but the low 8 bits or in some cases the 8-15th bits. Windows takes a u32 instead of an i32. Bourne-compatible shells also report signals as exitcode 128 + `signal_no`, so there's some ambiguity there when returning exit codes > 127, but it is possible to disambiguate them on the other side so we decided against restricting the possible codes further than to `u8`.\n\n## Related\n\n- Detailed analysis of exit code support on various platforms: https://internals.rust-lang.org/t/mini-pre-rfc-redesigning-process-exitstatus/5426\n- https://github.com/rust-lang/rust/issues/48711\n- https://github.com/rust-lang/rust/issues/43301\n- https://rust-lang.zulipchat.com/#narrow/stream/219381-t-libs/topic/Termination.2FExit.20Status.20Stabilization\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7", "html_url": "https://github.com/rust-lang/rust/commit/ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a5a961be97f405e751dd2cf966e1cdb80a612c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a5a961be97f405e751dd2cf966e1cdb80a612c2", "html_url": "https://github.com/rust-lang/rust/commit/9a5a961be97f405e751dd2cf966e1cdb80a612c2"}, {"sha": "4c5a36e2d1ac0c5d86ba0a75426d601e7c9202b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5a36e2d1ac0c5d86ba0a75426d601e7c9202b0", "html_url": "https://github.com/rust-lang/rust/commit/4c5a36e2d1ac0c5d86ba0a75426d601e7c9202b0"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "1f04890539604e98d04e4cf8b60f0ae68a65f38d", "filename": "library/std/src/process.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7", "patch": "@@ -1691,6 +1691,14 @@ impl ExitCode {\n     }\n }\n \n+#[unstable(feature = \"process_exitcode_placeholder\", issue = \"48711\")]\n+impl From<u8> for ExitCode {\n+    /// Construct an exit code from an arbitrary u8 value.\n+    fn from(code: u8) -> Self {\n+        ExitCode(imp::ExitCode::from(code))\n+    }\n+}\n+\n impl Child {\n     /// Forces the child process to exit. If the child has already exited, an [`InvalidInput`]\n     /// error is returned."}, {"sha": "97985ddd3316b0e8a40e21bc2355c0a6f12ac1e8", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7", "patch": "@@ -476,6 +476,12 @@ impl ExitCode {\n     }\n }\n \n+impl From<u8> for ExitCode {\n+    fn from(code: u8) -> Self {\n+        Self(code)\n+    }\n+}\n+\n pub struct CommandArgs<'a> {\n     iter: crate::slice::Iter<'a, CString>,\n }"}, {"sha": "42a1ff730e37997ca3b6c0362e513cdea51b9d0e", "filename": "library/std/src/sys/unsupported/process.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs?ref=ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7", "patch": "@@ -162,6 +162,15 @@ impl ExitCode {\n     }\n }\n \n+impl From<u8> for ExitCode {\n+    fn from(code: u8) -> Self {\n+        match code {\n+            0 => Self::SUCCESS,\n+            1..=255 => Self::FAILURE,\n+        }\n+    }\n+}\n+\n pub struct Process(!);\n \n impl Process {"}, {"sha": "7bfcac8de1715bef749c5d74a716edc491b62195", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=ec2fd8a35fcd271458dc5fa462ef74bcb372f6c7", "patch": "@@ -666,6 +666,12 @@ impl ExitCode {\n     }\n }\n \n+impl From<u8> for ExitCode {\n+    fn from(code: u8) -> Self {\n+        ExitCode(c::DWORD::from(code))\n+    }\n+}\n+\n fn zeroed_startupinfo() -> c::STARTUPINFO {\n     c::STARTUPINFO {\n         cb: 0,"}]}