{"sha": "eb53cca768ea98f36d26abd3960de26d3f1af385", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNTNjY2E3NjhlYTk4ZjM2ZDI2YWJkMzk2MGRlMjZkM2YxYWYzODU=", "commit": {"author": {"name": "Lukas Stevens", "email": "mail@lukas-stevens.de", "date": "2017-10-10T10:06:01Z"}, "committer": {"name": "Lukas Stevens", "email": "mail@lukas-stevens.de", "date": "2017-10-10T11:37:45Z"}, "message": "Add lint for opt.map_or(None, f)\n\nChange to Warn and add multiline support\n\nFix typo\n\nUpdate reference", "tree": {"sha": "2377e972b4dad795340f17d420f97c6f41d61aff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2377e972b4dad795340f17d420f97c6f41d61aff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb53cca768ea98f36d26abd3960de26d3f1af385", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb53cca768ea98f36d26abd3960de26d3f1af385", "html_url": "https://github.com/rust-lang/rust/commit/eb53cca768ea98f36d26abd3960de26d3f1af385", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb53cca768ea98f36d26abd3960de26d3f1af385/comments", "author": {"login": "lukasstevens", "id": 11629114, "node_id": "MDQ6VXNlcjExNjI5MTE0", "avatar_url": "https://avatars.githubusercontent.com/u/11629114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukasstevens", "html_url": "https://github.com/lukasstevens", "followers_url": "https://api.github.com/users/lukasstevens/followers", "following_url": "https://api.github.com/users/lukasstevens/following{/other_user}", "gists_url": "https://api.github.com/users/lukasstevens/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukasstevens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukasstevens/subscriptions", "organizations_url": "https://api.github.com/users/lukasstevens/orgs", "repos_url": "https://api.github.com/users/lukasstevens/repos", "events_url": "https://api.github.com/users/lukasstevens/events{/privacy}", "received_events_url": "https://api.github.com/users/lukasstevens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lukasstevens", "id": 11629114, "node_id": "MDQ6VXNlcjExNjI5MTE0", "avatar_url": "https://avatars.githubusercontent.com/u/11629114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lukasstevens", "html_url": "https://github.com/lukasstevens", "followers_url": "https://api.github.com/users/lukasstevens/followers", "following_url": "https://api.github.com/users/lukasstevens/following{/other_user}", "gists_url": "https://api.github.com/users/lukasstevens/gists{/gist_id}", "starred_url": "https://api.github.com/users/lukasstevens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lukasstevens/subscriptions", "organizations_url": "https://api.github.com/users/lukasstevens/orgs", "repos_url": "https://api.github.com/users/lukasstevens/repos", "events_url": "https://api.github.com/users/lukasstevens/events{/privacy}", "received_events_url": "https://api.github.com/users/lukasstevens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b62b1b68edcdf23a70cb12f31403c80e97f13634", "url": "https://api.github.com/repos/rust-lang/rust/commits/b62b1b68edcdf23a70cb12f31403c80e97f13634", "html_url": "https://github.com/rust-lang/rust/commit/b62b1b68edcdf23a70cb12f31403c80e97f13634"}], "stats": {"total": 327, "additions": 204, "deletions": 123}, "files": [{"sha": "20f07e0df878ac187e548e4f7f64757cc0a20e0f", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/eb53cca768ea98f36d26abd3960de26d3f1af385/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb53cca768ea98f36d26abd3960de26d3f1af385/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=eb53cca768ea98f36d26abd3960de26d3f1af385", "patch": "@@ -193,6 +193,24 @@ declare_lint! {\n      `map_or_else(g, f)`\"\n }\n \n+/// **What it does:** Checks for usage of `_.map_or(None, _)`.\n+///\n+/// **Why is this bad?** Readability, this can be written more concisely as\n+/// `_.and_then(_)`.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// opt.map_or(None, |a| a + 1)\n+/// ```\n+declare_lint! {\n+    pub OPTION_MAP_OR_NONE,\n+    Warn,\n+    \"using `Option.map_or(None, f)`, which is more succinctly expressed as \\\n+     `map_or_else(g, f)`\"\n+}\n+\n /// **What it does:** Checks for usage of `_.filter(_).next()`.\n ///\n /// **Why is this bad?** Readability, this can be written more concisely as\n@@ -574,6 +592,7 @@ impl LintPass for Pass {\n             OK_EXPECT,\n             OPTION_MAP_UNWRAP_OR,\n             OPTION_MAP_UNWRAP_OR_ELSE,\n+            OPTION_MAP_OR_NONE,\n             OR_FUN_CALL,\n             CHARS_NEXT_CMP,\n             CHARS_LAST_CMP,\n@@ -620,6 +639,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     lint_map_unwrap_or(cx, expr, arglists[0], arglists[1]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"map\", \"unwrap_or_else\"]) {\n                     lint_map_unwrap_or_else(cx, expr, arglists[0], arglists[1]);\n+                } else if let Some(arglists) = method_chain_args(expr, &[\"map_or\"]) {\n+                    lint_map_or_none(cx, expr, arglists[0]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"filter\", \"next\"]) {\n                     lint_filter_next(cx, expr, arglists[0]);\n                 } else if let Some(arglists) = method_chain_args(expr, &[\"filter\", \"map\"]) {\n@@ -1220,6 +1241,37 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir\n     }\n }\n \n+/// lint use of `_.map_or(None, _)` for `Option`s\n+fn lint_map_or_none<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, map_or_args: &'tcx [hir::Expr]) {\n+    // check if the first non-self argument to map_or() is None\n+    let map_or_arg_is_none = if let hir::Expr_::ExprPath(ref qpath) = map_or_args[1].node {\n+        match_qpath(&qpath, &paths::OPTION_NONE)\n+    } else {\n+        false\n+    };\n+\n+    if match_type(cx, cx.tables.expr_ty(&map_or_args[0]), &paths::OPTION) && map_or_arg_is_none {\n+        // lint message\n+        let msg = \"called `map_or(None, f)` on an Option value. This can be done more directly by calling \\\n+                   `and_then(f)` instead\";\n+        let map_or_none_snippet = snippet(cx, map_or_args[1].span, \"..\");\n+        let map_or_func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n+        let multiline = map_or_func_snippet.lines().count() > 1 || map_or_none_snippet.lines().count() > 1;\n+        if multiline {\n+            span_lint(cx, OPTION_MAP_OR_NONE, expr.span, msg);\n+        } else {\n+            span_note_and_lint(\n+                cx,\n+                OPTION_MAP_OR_NONE,\n+                expr.span,\n+                msg,\n+                expr.span,\n+                &format!(\"replace `map_or({0}, {1})` with `and_then({1})`\", map_or_none_snippet, map_or_func_snippet)\n+            );\n+        }\n+    }\n+}\n+\n /// lint use of `filter().next()` for `Iterators`\n fn lint_filter_next<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr, filter_args: &'tcx [hir::Expr]) {\n     // lint if caller of `.filter().next()` is an Iterator"}, {"sha": "24adbe943e157f293bdccf987759762eff7a8626", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eb53cca768ea98f36d26abd3960de26d3f1af385/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb53cca768ea98f36d26abd3960de26d3f1af385/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=eb53cca768ea98f36d26abd3960de26d3f1af385", "patch": "@@ -91,6 +91,7 @@ macro_rules! opt_map {\n /// Checks implementation of the following lints:\n /// * `OPTION_MAP_UNWRAP_OR`\n /// * `OPTION_MAP_UNWRAP_OR_ELSE`\n+/// * `OPTION_MAP_OR_NONE`\n fn option_methods() {\n     let opt = Some(1);\n \n@@ -137,6 +138,15 @@ fn option_methods() {\n                 );\n     // macro case\n     let _ = opt_map!(opt, |x| x + 1).unwrap_or_else(|| 0); // should not lint\n+\n+    // Check OPTION_MAP_OR_NONE\n+    // single line case\n+    let _ = opt.map_or(None, |x| Some(x + 1));\n+    // multi line case\n+    let _ = opt.map_or(None, |x| {\n+                        Some(x + 1)\n+                       }\n+                );\n }\n \n /// Struct to generate false positives for things with .iter()"}, {"sha": "a2f310037f534c6d9af58431de4b01a707e8d2fa", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 142, "deletions": 123, "changes": 265, "blob_url": "https://github.com/rust-lang/rust/blob/eb53cca768ea98f36d26abd3960de26d3f1af385/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb53cca768ea98f36d26abd3960de26d3f1af385/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=eb53cca768ea98f36d26abd3960de26d3f1af385", "patch": "@@ -103,344 +103,363 @@ error: unnecessary structure name repetition\n    |                               ^ help: use the applicable keyword: `Self`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-   --> $DIR/methods.rs:99:13\n+   --> $DIR/methods.rs:100:13\n     |\n-99  |       let _ = opt.map(|x| x + 1)\n+100 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-100 | |\n-101 | |                .unwrap_or(0); // should lint even though this call is on a separate line\n+101 | |\n+102 | |                .unwrap_or(0); // should lint even though this call is on a separate line\n     | |____________________________^\n     |\n     = note: `-D option-map-unwrap-or` implied by `-D warnings`\n     = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-   --> $DIR/methods.rs:103:13\n+   --> $DIR/methods.rs:104:13\n     |\n-103 |       let _ = opt.map(|x| {\n+104 |       let _ = opt.map(|x| {\n     |  _____________^\n-104 | |                         x + 1\n-105 | |                     }\n-106 | |               ).unwrap_or(0);\n+105 | |                         x + 1\n+106 | |                     }\n+107 | |               ).unwrap_or(0);\n     | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-   --> $DIR/methods.rs:107:13\n+   --> $DIR/methods.rs:108:13\n     |\n-107 |       let _ = opt.map(|x| x + 1)\n+108 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-108 | |                .unwrap_or({\n-109 | |                     0\n-110 | |                 });\n+109 | |                .unwrap_or({\n+110 | |                     0\n+111 | |                 });\n     | |__________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-   --> $DIR/methods.rs:112:13\n+   --> $DIR/methods.rs:113:13\n     |\n-112 |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n+113 |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-   --> $DIR/methods.rs:114:13\n+   --> $DIR/methods.rs:115:13\n     |\n-114 |       let _ = opt.map(|x| {\n+115 |       let _ = opt.map(|x| {\n     |  _____________^\n-115 | |         Some(x + 1)\n-116 | |     }\n-117 | |     ).unwrap_or(None);\n+116 | |         Some(x + 1)\n+117 | |     }\n+118 | |     ).unwrap_or(None);\n     | |_____________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-   --> $DIR/methods.rs:118:13\n+   --> $DIR/methods.rs:119:13\n     |\n-118 |       let _ = opt\n+119 |       let _ = opt\n     |  _____________^\n-119 | |         .map(|x| Some(x + 1))\n-120 | |         .unwrap_or(None);\n+120 | |         .map(|x| Some(x + 1))\n+121 | |         .unwrap_or(None);\n     | |________________________^\n     |\n     = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:126:13\n+   --> $DIR/methods.rs:127:13\n     |\n-126 |       let _ = opt.map(|x| x + 1)\n+127 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-127 | |\n-128 | |                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n+128 | |\n+129 | |                .unwrap_or_else(|| 0); // should lint even though this call is on a separate line\n     | |____________________________________^\n     |\n     = note: `-D option-map-unwrap-or-else` implied by `-D warnings`\n     = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:130:13\n+   --> $DIR/methods.rs:131:13\n     |\n-130 |       let _ = opt.map(|x| {\n+131 |       let _ = opt.map(|x| {\n     |  _____________^\n-131 | |                         x + 1\n-132 | |                     }\n-133 | |               ).unwrap_or_else(|| 0);\n+132 | |                         x + 1\n+133 | |                     }\n+134 | |               ).unwrap_or_else(|| 0);\n     | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:134:13\n+   --> $DIR/methods.rs:135:13\n     |\n-134 |       let _ = opt.map(|x| x + 1)\n+135 |       let _ = opt.map(|x| x + 1)\n     |  _____________^\n-135 | |                .unwrap_or_else(||\n-136 | |                     0\n-137 | |                 );\n+136 | |                .unwrap_or_else(||\n+137 | |                     0\n+138 | |                 );\n+    | |_________________^\n+\n+error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n+   --> $DIR/methods.rs:144:13\n+    |\n+144 |     let _ = opt.map_or(None, |x| Some(x + 1));\n+    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+    |\n+    = note: `-D option-map-or-none` implied by `-D warnings`\n+    = note: replace `map_or(None, |x| Some(x + 1))` with `and_then(|x| Some(x + 1))`\n+\n+error: called `map_or(None, f)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n+   --> $DIR/methods.rs:146:13\n+    |\n+146 |       let _ = opt.map_or(None, |x| {\n+    |  _____________^\n+147 | |                         Some(x + 1)\n+148 | |                        }\n+149 | |                 );\n     | |_________________^\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:163:24\n+   --> $DIR/methods.rs:173:24\n     |\n-163 |     fn filter(self) -> IteratorFalsePositives {\n+173 |     fn filter(self) -> IteratorFalsePositives {\n     |                        ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:167:22\n+   --> $DIR/methods.rs:177:22\n     |\n-167 |     fn next(self) -> IteratorFalsePositives {\n+177 |     fn next(self) -> IteratorFalsePositives {\n     |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:187:32\n+   --> $DIR/methods.rs:197:32\n     |\n-187 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n+197 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n     |                                ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:197:13\n+   --> $DIR/methods.rs:207:13\n     |\n-197 |     let _ = v.iter().filter(|&x| *x < 0).next();\n+207 |     let _ = v.iter().filter(|&x| *x < 0).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D filter-next` implied by `-D warnings`\n     = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:200:13\n+   --> $DIR/methods.rs:210:13\n     |\n-200 |       let _ = v.iter().filter(|&x| {\n+210 |       let _ = v.iter().filter(|&x| {\n     |  _____________^\n-201 | |                                 *x < 0\n-202 | |                             }\n-203 | |                    ).next();\n+211 | |                                 *x < 0\n+212 | |                             }\n+213 | |                    ).next();\n     | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:215:13\n+   --> $DIR/methods.rs:225:13\n     |\n-215 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n+225 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D search-is-some` implied by `-D warnings`\n     = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:218:13\n+   --> $DIR/methods.rs:228:13\n     |\n-218 |       let _ = v.iter().find(|&x| {\n+228 |       let _ = v.iter().find(|&x| {\n     |  _____________^\n-219 | |                               *x < 0\n-220 | |                           }\n-221 | |                    ).is_some();\n+229 | |                               *x < 0\n+230 | |                           }\n+231 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:224:13\n+   --> $DIR/methods.rs:234:13\n     |\n-224 |     let _ = v.iter().position(|&x| x < 0).is_some();\n+234 |     let _ = v.iter().position(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:227:13\n+   --> $DIR/methods.rs:237:13\n     |\n-227 |       let _ = v.iter().position(|&x| {\n+237 |       let _ = v.iter().position(|&x| {\n     |  _____________^\n-228 | |                                   x < 0\n-229 | |                               }\n-230 | |                    ).is_some();\n+238 | |                                   x < 0\n+239 | |                               }\n+240 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:233:13\n+   --> $DIR/methods.rs:243:13\n     |\n-233 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n+243 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:236:13\n+   --> $DIR/methods.rs:246:13\n     |\n-236 |       let _ = v.iter().rposition(|&x| {\n+246 |       let _ = v.iter().rposition(|&x| {\n     |  _____________^\n-237 | |                                    x < 0\n-238 | |                                }\n-239 | |                    ).is_some();\n+247 | |                                    x < 0\n+248 | |                                }\n+249 | |                    ).is_some();\n     | |______________________________^\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:253:21\n+   --> $DIR/methods.rs:263:21\n     |\n-253 |         fn new() -> Foo { Foo }\n+263 |         fn new() -> Foo { Foo }\n     |                     ^^^ help: use the applicable keyword: `Self`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:271:5\n+   --> $DIR/methods.rs:281:5\n     |\n-271 |     with_constructor.unwrap_or(make());\n+281 |     with_constructor.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_constructor.unwrap_or_else(make)`\n     |\n     = note: `-D or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-   --> $DIR/methods.rs:274:5\n+   --> $DIR/methods.rs:284:5\n     |\n-274 |     with_new.unwrap_or(Vec::new());\n+284 |     with_new.unwrap_or(Vec::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:277:5\n+   --> $DIR/methods.rs:287:5\n     |\n-277 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n+287 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_const_args.unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:280:5\n+   --> $DIR/methods.rs:290:5\n     |\n-280 |     with_err.unwrap_or(make());\n+290 |     with_err.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err.unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:283:5\n+   --> $DIR/methods.rs:293:5\n     |\n-283 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n+293 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err_args.unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:286:5\n+   --> $DIR/methods.rs:296:5\n     |\n-286 |     with_default_trait.unwrap_or(Default::default());\n+296 |     with_default_trait.unwrap_or(Default::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:289:5\n+   --> $DIR/methods.rs:299:5\n     |\n-289 |     with_default_type.unwrap_or(u64::default());\n+299 |     with_default_type.unwrap_or(u64::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:292:5\n+   --> $DIR/methods.rs:302:5\n     |\n-292 |     with_vec.unwrap_or(vec![]);\n+302 |     with_vec.unwrap_or(vec![]);\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:297:5\n+   --> $DIR/methods.rs:307:5\n     |\n-297 |     without_default.unwrap_or(Foo::new());\n+307 |     without_default.unwrap_or(Foo::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `without_default.unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:300:5\n+   --> $DIR/methods.rs:310:5\n     |\n-300 |     map.entry(42).or_insert(String::new());\n+310 |     map.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `map.entry(42).or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:303:5\n+   --> $DIR/methods.rs:313:5\n     |\n-303 |     btree.entry(42).or_insert(String::new());\n+313 |     btree.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `btree.entry(42).or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:306:13\n+   --> $DIR/methods.rs:316:13\n     |\n-306 |     let _ = stringy.unwrap_or(\"\".to_owned());\n+316 |     let _ = stringy.unwrap_or(\"\".to_owned());\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `stringy.unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:317:23\n+   --> $DIR/methods.rs:327:23\n     |\n-317 |         let bad_vec = some_vec.iter().nth(3);\n+327 |         let bad_vec = some_vec.iter().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:318:26\n+   --> $DIR/methods.rs:328:26\n     |\n-318 |         let bad_slice = &some_vec[..].iter().nth(3);\n+328 |         let bad_slice = &some_vec[..].iter().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:319:31\n+   --> $DIR/methods.rs:329:31\n     |\n-319 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+329 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:320:29\n+   --> $DIR/methods.rs:330:29\n     |\n-320 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+330 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:325:23\n+   --> $DIR/methods.rs:335:23\n     |\n-325 |         let bad_vec = some_vec.iter_mut().nth(3);\n+335 |         let bad_vec = some_vec.iter_mut().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:328:26\n+   --> $DIR/methods.rs:338:26\n     |\n-328 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+338 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:331:29\n+   --> $DIR/methods.rs:341:29\n     |\n-331 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+341 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:343:13\n+   --> $DIR/methods.rs:353:13\n     |\n-343 |     let _ = some_vec.iter().skip(42).next();\n+353 |     let _ = some_vec.iter().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:344:13\n+   --> $DIR/methods.rs:354:13\n     |\n-344 |     let _ = some_vec.iter().cycle().skip(42).next();\n+354 |     let _ = some_vec.iter().cycle().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:345:13\n+   --> $DIR/methods.rs:355:13\n     |\n-345 |     let _ = (1..10).skip(10).next();\n+355 |     let _ = (1..10).skip(10).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:346:14\n+   --> $DIR/methods.rs:356:14\n     |\n-346 |     let _ = &some_vec[..].iter().skip(3).next();\n+356 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:355:13\n+   --> $DIR/methods.rs:365:13\n     |\n-355 |     let _ = opt.unwrap();\n+365 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`"}]}