{"sha": "c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0YTNiZTZiZDFiOWI0Njg0NzhjOTI1YzhlYWEwZTU0ZGY1NmE4ZmU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-20T20:08:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-26T16:42:06Z"}, "message": "Rote changes due to the fact that ast paths no longer carry this extraneous bounds.", "tree": {"sha": "2e69af33c184b637c259207e01c4eab71d994bd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e69af33c184b637c259207e01c4eab71d994bd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "html_url": "https://github.com/rust-lang/rust/commit/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517", "html_url": "https://github.com/rust-lang/rust/commit/f4e29e7e9aa1da4fc91a6074b0e4df44a2986517"}], "stats": {"total": 135, "additions": 60, "deletions": 75}, "files": [{"sha": "1dbd170a0d997f9242bf02bf7b8131b127fad100", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -421,7 +421,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n impl<'a, 'tcx, 'v> Visitor<'v> for ImproperCTypesVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: &ast::Ty) {\n         match ty.node {\n-            ast::TyPath(_, _, id) => self.check_def(ty.span, ty.id, id),\n+            ast::TyPath(_, id) => self.check_def(ty.span, ty.id, id),\n             _ => (),\n         }\n         visit::walk_ty(self, ty);"}, {"sha": "8c21e559ec1f80a1418bdc5d15a15c6e2ce0fccb", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -1230,10 +1230,9 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_name(rbml_w, item.ident.name);\n         encode_attributes(rbml_w, item.attrs.as_slice());\n         match ty.node {\n-            ast::TyPath(ref path, ref bounds, _) if path.segments\n+            ast::TyPath(ref path, _) if path.segments\n                                                         .len() == 1 => {\n                 let ident = path.segments.last().unwrap().identifier;\n-                assert!(bounds.is_none());\n                 encode_impl_type_basename(rbml_w, ident);\n             }\n             _ => {}"}, {"sha": "ec939d19b72409a96faf3a4435de89f90105a8db", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -243,7 +243,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             // * Private trait impls for private types can be completely ignored\n             ast::ItemImpl(_, _, ref ty, ref impl_items) => {\n                 let public_ty = match ty.node {\n-                    ast::TyPath(_, _, id) => {\n+                    ast::TyPath(_, id) => {\n                         match self.tcx.def_map.borrow()[id].clone() {\n                             def::DefPrimTy(..) => true,\n                             def => {\n@@ -311,7 +311,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n \n             ast::ItemTy(ref ty, _) if public_first => {\n                 match ty.node {\n-                    ast::TyPath(_, _, id) => {\n+                    ast::TyPath(_, id) => {\n                         match self.tcx.def_map.borrow()[id].clone() {\n                             def::DefPrimTy(..) | def::DefTyParam(..) => {},\n                             def => {\n@@ -616,7 +616,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n                     // was private.\n                     ast::ItemImpl(_, _, ref ty, _) => {\n                         let id = match ty.node {\n-                            ast::TyPath(_, _, id) => id,\n+                            ast::TyPath(_, id) => id,\n                             _ => return Some((err_span, err_msg, None)),\n                         };\n                         let def = self.tcx.def_map.borrow()[id].clone();\n@@ -1292,7 +1292,7 @@ impl<'a, 'tcx> VisiblePrivateTypesVisitor<'a, 'tcx> {\n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for CheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n     fn visit_ty(&mut self, ty: &ast::Ty) {\n         match ty.node {\n-            ast::TyPath(_, _, path_id) => {\n+            ast::TyPath(_, path_id) => {\n                 if self.inner.path_is_private_type(path_id) {\n                     self.contains_private = true;\n                     // found what we're looking for so let's stop\n@@ -1493,7 +1493,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n \n     fn visit_ty(&mut self, t: &ast::Ty) {\n         match t.node {\n-            ast::TyPath(ref p, _, path_id) => {\n+            ast::TyPath(ref p, path_id) => {\n                 if !self.tcx.sess.features.borrow().visible_private_types &&\n                         self.path_is_private_type(path_id) {\n                     self.tcx.sess.span_err(p.span,"}, {"sha": "bdb3edef6bdcc64967ebca9ae6e7d6d91413ab25", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -63,7 +63,7 @@ use syntax::ast::{PolyTraitRef, PrimTy, Public, SelfExplicit, SelfStatic};\n use syntax::ast::{RegionTyParamBound, StmtDecl, StructField};\n use syntax::ast::{StructVariantKind, TraitRef, TraitTyParamBound};\n use syntax::ast::{TupleVariantKind, Ty, TyBool, TyChar, TyClosure, TyF32};\n-use syntax::ast::{TyF64, TyFloat, TyI, TyI8, TyI16, TyI32, TyI64, TyInt};\n+use syntax::ast::{TyF64, TyFloat, TyI, TyI8, TyI16, TyI32, TyI64, TyInt, TyObjectSum};\n use syntax::ast::{TyParam, TyParamBound, TyPath, TyPtr, TyPolyTraitRef, TyProc, TyQPath};\n use syntax::ast::{TyRptr, TyStr, TyU, TyU8, TyU16, TyU32, TyU64, TyUint};\n use syntax::ast::{TypeImplItem, UnnamedField};\n@@ -4742,7 +4742,7 @@ impl<'a> Resolver<'a> {\n                 // type, the result will be that the type name resolves to a module but not\n                 // a type (shadowing any imported modules or types with this name), leading\n                 // to weird user-visible bugs. So we ward this off here. See #15060.\n-                TyPath(ref path, _, path_id) => {\n+                TyPath(ref path, path_id) => {\n                     match self.def_map.borrow().get(&path_id) {\n                         // FIXME: should we catch other options and give more precise errors?\n                         Some(&DefMod(_)) => {\n@@ -4908,7 +4908,7 @@ impl<'a> Resolver<'a> {\n             // Like path expressions, the interpretation of path types depends\n             // on whether the path has multiple elements in it or not.\n \n-            TyPath(ref path, ref bounds, path_id) => {\n+            TyPath(ref path, path_id) => {\n                 // This is a path in the type namespace. Walk through scopes\n                 // looking for it.\n                 let mut result_def = None;\n@@ -4978,11 +4978,12 @@ impl<'a> Resolver<'a> {\n                         self.resolve_error(ty.span, msg.as_slice());\n                     }\n                 }\n+            }\n \n-                bounds.as_ref().map(|bound_vec| {\n-                    self.resolve_type_parameter_bounds(ty.id, bound_vec,\n+            TyObjectSum(ref ty, ref bound_vec) => {\n+                self.resolve_type(&**ty);\n+                self.resolve_type_parameter_bounds(ty.id, bound_vec,\n                                                        TraitBoundingTypeParameter);\n-                });\n             }\n \n             TyQPath(ref qpath) => {\n@@ -5619,7 +5620,7 @@ impl<'a> Resolver<'a> {\n         fn extract_path_and_node_id(t: &Ty, allow: FallbackChecks)\n                                                     -> Option<(Path, NodeId, FallbackChecks)> {\n             match t.node {\n-                TyPath(ref path, _, node_id) => Some((path.clone(), node_id, allow)),\n+                TyPath(ref path, node_id) => Some((path.clone(), node_id, allow)),\n                 TyPtr(ref mut_ty) => extract_path_and_node_id(&*mut_ty.ty, OnlyTraitAndStatics),\n                 TyRptr(_, ref mut_ty) => extract_path_and_node_id(&*mut_ty.ty, allow),\n                 // This doesn't handle the remaining `Ty` variants as they are not"}, {"sha": "02e353d6b1fddbc14209f746334f6d6aae12c596", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -162,21 +162,14 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                     visit::walk_ty(this, ty);\n                 });\n             }\n-            ast::TyPath(ref path, ref opt_bounds, id) => {\n+            ast::TyPath(ref path, id) => {\n                 // if this path references a trait, then this will resolve to\n                 // a trait ref, which introduces a binding scope.\n                 match self.def_map.borrow().get(&id) {\n                     Some(&def::DefTrait(..)) => {\n                         self.with(LateScope(&Vec::new(), self.scope), |this| {\n                             this.visit_path(path, id);\n                         });\n-\n-                        match *opt_bounds {\n-                            Some(ref bounds) => {\n-                                visit::walk_ty_param_bounds_helper(self, bounds);\n-                            }\n-                            None => { }\n-                        }\n                     }\n                     _ => {\n                         visit::walk_ty(self, ty);"}, {"sha": "a78977d9fc7f6084c2077c706ee4ce4b54ac06ca", "filename": "src/librustc/middle/typeck/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ferror_reporting.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -1249,7 +1249,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                     }\n                     ty_queue.push(&*mut_ty.ty);\n                 }\n-                ast::TyPath(ref path, ref bounds, id) => {\n+                ast::TyPath(ref path, id) => {\n                     let a_def = match self.tcx.def_map.borrow().get(&id) {\n                         None => {\n                             self.tcx\n@@ -1296,7 +1296,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                             let new_path = self.rebuild_path(rebuild_info, lifetime);\n                             let to = ast::Ty {\n                                 id: cur_ty.id,\n-                                node: ast::TyPath(new_path, bounds.clone(), id),\n+                                node: ast::TyPath(new_path, id),\n                                 span: cur_ty.span\n                             };\n                             new_ty = self.rebuild_ty(new_ty, P(to));"}, {"sha": "f5c732d9adcf1e4e4b7db27de4a76c99af6abb0a", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -651,7 +651,7 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n                     typ: &ast::Ty,\n                     impl_items: &Vec<ast::ImplItem>) {\n         match typ.node {\n-            ast::TyPath(ref path, _, id) => {\n+            ast::TyPath(ref path, id) => {\n                 match self.lookup_type_ref(id) {\n                     Some(id) => {\n                         let sub_span = self.span.sub_span_for_type_name(path.span);\n@@ -1256,7 +1256,7 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n         }\n \n         match t.node {\n-            ast::TyPath(ref path, _, id) => {\n+            ast::TyPath(ref path, id) => {\n                 match self.lookup_type_ref(id) {\n                     Some(id) => {\n                         let sub_span = self.span.sub_span_for_type_name(t.span);"}, {"sha": "4d6ac4f343096aba6ea849900067c95f5055fa34", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -454,7 +454,7 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n     fn visit_ty(&mut self, typ: &Ty) {\n         self.operation.visit_id(typ.id);\n         match typ.node {\n-            TyPath(_, _, id) => self.operation.visit_id(id),\n+            TyPath(_, id) => self.operation.visit_id(id),\n             _ => {}\n         }\n         visit::walk_ty(self, typ)"}, {"sha": "bd01e5e643020315703951e5a97f888badfeffea", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -44,7 +44,8 @@ pub trait AstBuilder {\n     fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy;\n \n     fn ty(&self, span: Span, ty: ast::Ty_) -> P<ast::Ty>;\n-    fn ty_path(&self, ast::Path, Option<OwnedSlice<ast::TyParamBound>>) -> P<ast::Ty>;\n+    fn ty_path(&self, ast::Path) -> P<ast::Ty>;\n+    fn ty_sum(&self, ast::Path, OwnedSlice<ast::TyParamBound>) -> P<ast::Ty>;\n     fn ty_ident(&self, span: Span, idents: ast::Ident) -> P<ast::Ty>;\n \n     fn ty_rptr(&self, span: Span,\n@@ -344,17 +345,21 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         })\n     }\n \n-    fn ty_path(&self, path: ast::Path, bounds: Option<OwnedSlice<ast::TyParamBound>>)\n-              -> P<ast::Ty> {\n+    fn ty_path(&self, path: ast::Path) -> P<ast::Ty> {\n+        self.ty(path.span, ast::TyPath(path, ast::DUMMY_NODE_ID))\n+    }\n+\n+    fn ty_sum(&self, path: ast::Path, bounds: OwnedSlice<ast::TyParamBound>) -> P<ast::Ty> {\n         self.ty(path.span,\n-                ast::TyPath(path, bounds, ast::DUMMY_NODE_ID))\n+                ast::TyObjectSum(self.ty_path(path),\n+                                 bounds))\n     }\n \n     // Might need to take bounds as an argument in the future, if you ever want\n     // to generate a bounded existential trait type.\n     fn ty_ident(&self, span: Span, ident: ast::Ident)\n         -> P<ast::Ty> {\n-        self.ty_path(self.path_ident(span, ident), None)\n+        self.ty_path(self.path_ident(span, ident))\n     }\n \n     fn ty_rptr(&self,\n@@ -386,7 +391,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                               self.ident_of(\"Option\")\n                           ),\n                           Vec::new(),\n-                          vec!( ty )), None)\n+                          vec!( ty )))\n     }\n \n     fn ty_field_imm(&self, span: Span, name: Ident, ty: P<ast::Ty>) -> ast::TypeField {\n@@ -425,8 +430,10 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn ty_vars_global(&self, ty_params: &OwnedSlice<ast::TyParam>) -> Vec<P<ast::Ty>> {\n-        ty_params.iter().map(|p| self.ty_path(\n-                self.path_global(DUMMY_SP, vec!(p.ident)), None)).collect()\n+        ty_params\n+            .iter()\n+            .map(|p| self.ty_path(self.path_global(DUMMY_SP, vec!(p.ident))))\n+            .collect()\n     }\n \n     fn trait_ref(&self, path: ast::Path) -> ast::TraitRef {"}, {"sha": "d5f472bd827101db62d38149a374b17ff1b7ef87", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -444,7 +444,7 @@ impl<'a> TraitDef<'a> {\n         // Create the type of `self`.\n         let self_type = cx.ty_path(\n             cx.path_all(self.span, false, vec!( type_ident ), self_lifetimes,\n-                        self_ty_params.into_vec()), None);\n+                        self_ty_params.into_vec()));\n \n         let attr = cx.attribute(\n             self.span,"}, {"sha": "6614ab50f1e45a0d351df20a25c31b49acaf52cd", "filename": "src/libsyntax/ext/deriving/generic/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fty.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -70,7 +70,7 @@ impl<'a> Path<'a> {\n                  self_ty: Ident,\n                  self_generics: &Generics)\n                  -> P<ast::Ty> {\n-        cx.ty_path(self.to_path(cx, span, self_ty, self_generics), None)\n+        cx.ty_path(self.to_path(cx, span, self_ty, self_generics))\n     }\n     pub fn to_path(&self,\n                    cx: &ExtCtxt,\n@@ -152,7 +152,7 @@ impl<'a> Ty<'a> {\n             }\n             Literal(ref p) => { p.to_ty(cx, span, self_ty, self_generics) }\n             Self  => {\n-                cx.ty_path(self.to_path(cx, span, self_ty, self_generics), None)\n+                cx.ty_path(self.to_path(cx, span, self_ty, self_generics))\n             }\n             Tuple(ref fields) => {\n                 let ty = ast::TyTup(fields.iter()"}, {"sha": "6ec12b4d603c1c80d8df4c99b4705d7dbd73883d", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -531,7 +531,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                     true, Context::rtpath(self.ecx, \"Argument\"),\n                     vec![static_lifetime],\n                     vec![]\n-                ), None);\n+                ));\n             lets.push(Context::item_static_array(self.ecx,\n                                                  static_args_name,\n                                                  piece_ty,"}, {"sha": "4785fe37293c0bf3a9a365a5f53e8ba6d38fe4d8", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -514,7 +514,7 @@ pub fn parse_nt(p: &mut Parser, name: &str) -> Nonterminal {\n       \"stmt\" => token::NtStmt(p.parse_stmt(Vec::new())),\n       \"pat\" => token::NtPat(p.parse_pat()),\n       \"expr\" => token::NtExpr(p.parse_expr()),\n-      \"ty\" => token::NtTy(p.parse_ty(false /* no need to disambiguate*/)),\n+      \"ty\" => token::NtTy(p.parse_ty()),\n       // this could be handled like a token, since it is one\n       \"ident\" => match p.token {\n         token::Ident(sn,b) => { p.bump(); token::NtIdent(box sn,b) }\n@@ -525,7 +525,7 @@ pub fn parse_nt(p: &mut Parser, name: &str) -> Nonterminal {\n         }\n       },\n       \"path\" => {\n-        token::NtPath(box p.parse_path(LifetimeAndTypesWithoutColons).path)\n+        token::NtPath(box p.parse_path(LifetimeAndTypesWithoutColons))\n       }\n       \"meta\" => token::NtMeta(p.parse_meta_item()),\n       \"tt\" => {"}, {"sha": "122f99cabb3f6a1c67f5afa41ff8c6268babd635", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -433,11 +433,13 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n             }\n             TyTup(tys) => TyTup(tys.move_map(|ty| fld.fold_ty(ty))),\n             TyParen(ty) => TyParen(fld.fold_ty(ty)),\n-            TyPath(path, bounds, id) => {\n+            TyPath(path, id) => {\n                 let id = fld.new_id(id);\n-                TyPath(fld.fold_path(path),\n-                        fld.fold_opt_bounds(bounds),\n-                        id)\n+                TyPath(fld.fold_path(path), id)\n+            }\n+            TyObjectSum(ty, bounds) => {\n+                TyObjectSum(fld.fold_ty(ty),\n+                            fld.fold_bounds(bounds))\n             }\n             TyQPath(qpath) => {\n                 TyQPath(fld.fold_qpath(qpath))"}, {"sha": "ab78d5ecbfdce6e1f0d8c6fc058b8edf38100264", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -1916,11 +1916,11 @@ impl<'a> State<'a> {\n         self.print_expr(coll)\n     }\n \n-    fn print_path_(&mut self,\n-                   path: &ast::Path,\n-                   colons_before_params: bool,\n-                   opt_bounds: &Option<OwnedSlice<ast::TyParamBound>>)\n-        -> IoResult<()> {\n+    fn print_path(&mut self,\n+                  path: &ast::Path,\n+                  colons_before_params: bool)\n+                  -> IoResult<()>\n+    {\n         try!(self.maybe_print_comment(path.span.lo));\n         if path.global {\n             try!(word(&mut self.s, \"::\"));\n@@ -1939,10 +1939,7 @@ impl<'a> State<'a> {\n             try!(self.print_path_parameters(&segment.parameters, colons_before_params));\n         }\n \n-        match *opt_bounds {\n-            None => Ok(()),\n-            Some(ref bounds) => self.print_bounds(\"+\", bounds)\n-        }\n+        Ok(())\n     }\n \n     fn print_path_parameters(&mut self,\n@@ -2005,17 +2002,6 @@ impl<'a> State<'a> {\n         Ok(())\n     }\n \n-    fn print_path(&mut self, path: &ast::Path,\n-                  colons_before_params: bool) -> IoResult<()> {\n-        self.print_path_(path, colons_before_params, &None)\n-    }\n-\n-    fn print_bounded_path(&mut self, path: &ast::Path,\n-                          bounds: &Option<OwnedSlice<ast::TyParamBound>>)\n-        -> IoResult<()> {\n-        self.print_path_(path, false, bounds)\n-    }\n-\n     pub fn print_pat(&mut self, pat: &ast::Pat) -> IoResult<()> {\n         try!(self.maybe_print_comment(pat.span.lo));\n         try!(self.ann.pre(self, NodePat(pat)));"}, {"sha": "05828fc05f8c60358bb05ae27e83c2e520605094", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -482,8 +482,7 @@ fn mk_tests(cx: &TestCtxt) -> P<ast::Item> {\n     let ecx = &cx.ext_cx;\n     let struct_type = ecx.ty_path(ecx.path(sp, vec![ecx.ident_of(\"self\"),\n                                                     ecx.ident_of(\"test\"),\n-                                                    ecx.ident_of(\"TestDescAndFn\")]),\n-                                  None);\n+                                                    ecx.ident_of(\"TestDescAndFn\")]));\n     let static_lt = ecx.lifetime(sp, token::special_idents::static_lifetime.name);\n     // &'static [self::test::TestDescAndFn]\n     let static_type = ecx.ty_rptr(sp,"}, {"sha": "95679bc6bf0d1ea3f89146c53c06e1c637f9e5ae", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=c4a3be6bd1b9b468478c925c8eaa0e54df56a8fe", "patch": "@@ -404,14 +404,12 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             walk_fn_ret_ty(visitor, &function_declaration.decl.output);\n             walk_lifetime_decls_helper(visitor, &function_declaration.lifetimes);\n         }\n-        TyPath(ref path, ref opt_bounds, id) => {\n+        TyPath(ref path, id) => {\n             visitor.visit_path(path, id);\n-            match *opt_bounds {\n-                Some(ref bounds) => {\n-                    walk_ty_param_bounds_helper(visitor, bounds);\n-                }\n-                None => { }\n-            }\n+        }\n+        TyObjectSum(ref ty, ref bounds) => {\n+            visitor.visit_ty(&**ty);\n+            walk_ty_param_bounds_helper(visitor, bounds);\n         }\n         TyQPath(ref qpath) => {\n             visitor.visit_ty(&*qpath.self_type);"}]}