{"sha": "80b0b0ea03a36451210c6f1beec66aa1150f194f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYjBiMGVhMDNhMzY0NTEyMTBjNmYxYmVlYzY2YWExMTUwZjE5NGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-09-29T19:23:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-29T19:23:15Z"}, "message": "Merge #6095\n\n6095: Remove periodic gc stub r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c5a634e9836978c0fbb679c2529eea518add1196", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5a634e9836978c0fbb679c2529eea518add1196"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80b0b0ea03a36451210c6f1beec66aa1150f194f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfc4mjCRBK7hj4Ov3rIwAAdHIIAHi1BxIeQFVYu7sdCqFNfd8l\n3121R3DrSK3L9rupd+iUigwMnk2tnQHZ+vInX+13kK3dM2ghJJmHPJ80nvHCNuj4\nXg86T+gQ0xG30dQT5ywwWl0YqDKxCPAcSvtfMFqFMlyBTR6hWndhlYaQ53jxlRbl\nq3rE3efV/maOq2cLbUrS0Q+0v0fbEcW2j4GzjxSpNyZLRu0+4OWcT/OoZH35sKCH\nHW/zHFOpDBa2PRinxBwFqaJW/dsIKPCsyPjfK+jgMNRoU7jgo9Lt3T0eJO8Fxrsu\nP0NMVjcZlTF/xopaUz2JQz07EHka4bN/0xARycbmClcofDNnUBJ2Usk+W8NJ5Us=\n=C+ZU\n-----END PGP SIGNATURE-----\n", "payload": "tree c5a634e9836978c0fbb679c2529eea518add1196\nparent 7283783b98ed61ee4f94961b81ad06e2344098d2\nparent e7df0ad2fb48166937fdd061e1ae559c72a81990\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1601407395 +0000\ncommitter GitHub <noreply@github.com> 1601407395 +0000\n\nMerge #6095\n\n6095: Remove periodic gc stub r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80b0b0ea03a36451210c6f1beec66aa1150f194f", "html_url": "https://github.com/rust-lang/rust/commit/80b0b0ea03a36451210c6f1beec66aa1150f194f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80b0b0ea03a36451210c6f1beec66aa1150f194f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7283783b98ed61ee4f94961b81ad06e2344098d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7283783b98ed61ee4f94961b81ad06e2344098d2", "html_url": "https://github.com/rust-lang/rust/commit/7283783b98ed61ee4f94961b81ad06e2344098d2"}, {"sha": "e7df0ad2fb48166937fdd061e1ae559c72a81990", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7df0ad2fb48166937fdd061e1ae559c72a81990", "html_url": "https://github.com/rust-lang/rust/commit/e7df0ad2fb48166937fdd061e1ae559c72a81990"}], "stats": {"total": 77, "additions": 13, "deletions": 64}, "files": [{"sha": "96dae9ee0bcef001bb5e9abe94a72cc004ba991e", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/80b0b0ea03a36451210c6f1beec66aa1150f194f/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80b0b0ea03a36451210c6f1beec66aa1150f194f/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=80b0b0ea03a36451210c6f1beec66aa1150f194f", "patch": "@@ -144,10 +144,6 @@ impl AnalysisHost {\n         self.db.apply_change(change)\n     }\n \n-    pub fn maybe_collect_garbage(&mut self) {\n-        self.db.maybe_collect_garbage();\n-    }\n-\n     pub fn collect_garbage(&mut self) {\n         self.db.collect_garbage();\n     }"}, {"sha": "1427c50cf8e3ea88af7b9bf78715071c5db3be4a", "filename": "crates/ide/src/status.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/80b0b0ea03a36451210c6f1beec66aa1150f194f/crates%2Fide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80b0b0ea03a36451210c6f1beec66aa1150f194f/crates%2Fide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatus.rs?ref=80b0b0ea03a36451210c6f1beec66aa1150f194f", "patch": "@@ -37,13 +37,12 @@ pub(crate) fn status(db: &RootDatabase) -> String {\n     let macro_syntax_tree_stats = macro_syntax_tree_stats(db);\n     let symbols_stats = LibrarySymbolsQuery.in_db(db).entries::<LibrarySymbolsStats>();\n     format!(\n-        \"{}\\n{}\\n{}\\n{} (macros)\\n\\n\\nmemory:\\n{}\\ngc {:?} seconds ago\",\n+        \"{}\\n{}\\n{}\\n{} (macros)\\n{} total\\n\",\n         files_stats,\n         symbols_stats,\n         syntax_tree_stats,\n         macro_syntax_tree_stats,\n         memory_usage(),\n-        db.last_gc.elapsed().as_secs(),\n     )\n }\n \n@@ -121,7 +120,7 @@ struct LibrarySymbolsStats {\n \n impl fmt::Display for LibrarySymbolsStats {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        write!(fmt, \"{} ({}) symbols\", self.total, self.size)\n+        write!(fmt, \"{} ({}) index symbols\", self.total, self.size)\n     }\n }\n "}, {"sha": "7f98111c483a3e1c7f0feff700892c7e25e4425e", "filename": "crates/ide_db/src/change.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/80b0b0ea03a36451210c6f1beec66aa1150f194f/crates%2Fide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80b0b0ea03a36451210c6f1beec66aa1150f194f/crates%2Fide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fchange.rs?ref=80b0b0ea03a36451210c6f1beec66aa1150f194f", "patch": "@@ -1,7 +1,7 @@\n //! Defines a unit of change that can applied to a state of IDE to get the next\n //! state. Changes are transactional.\n \n-use std::{fmt, sync::Arc, time};\n+use std::{fmt, sync::Arc};\n \n use base_db::{\n     salsa::{Database, Durability, SweepStrategy},\n@@ -81,8 +81,6 @@ impl fmt::Debug for RootChange {\n     }\n }\n \n-const GC_COOLDOWN: time::Duration = time::Duration::from_millis(100);\n-\n impl RootDatabase {\n     pub fn request_cancellation(&mut self) {\n         let _p = profile::span(\"RootDatabase::request_cancellation\");\n@@ -126,23 +124,12 @@ impl RootDatabase {\n         }\n     }\n \n-    pub fn maybe_collect_garbage(&mut self) {\n-        if cfg!(feature = \"wasm\") {\n-            return;\n-        }\n-\n-        if self.last_gc_check.elapsed() > GC_COOLDOWN {\n-            self.last_gc_check = crate::wasm_shims::Instant::now();\n-        }\n-    }\n-\n     pub fn collect_garbage(&mut self) {\n         if cfg!(feature = \"wasm\") {\n             return;\n         }\n \n         let _p = profile::span(\"RootDatabase::collect_garbage\");\n-        self.last_gc = crate::wasm_shims::Instant::now();\n \n         let sweep = SweepStrategy::default().discard_values().sweep_all_revisions();\n "}, {"sha": "0d209c6ec05f83e60ddae0a7df8e48a9e7345583", "filename": "crates/ide_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/80b0b0ea03a36451210c6f1beec66aa1150f194f/crates%2Fide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80b0b0ea03a36451210c6f1beec66aa1150f194f/crates%2Fide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Flib.rs?ref=80b0b0ea03a36451210c6f1beec66aa1150f194f", "patch": "@@ -10,7 +10,6 @@ pub mod defs;\n pub mod search;\n pub mod imports_locator;\n pub mod source_change;\n-mod wasm_shims;\n \n use std::{fmt, sync::Arc};\n \n@@ -36,8 +35,6 @@ use crate::{line_index::LineIndex, symbol_index::SymbolsDatabase};\n )]\n pub struct RootDatabase {\n     storage: salsa::Storage<RootDatabase>,\n-    pub last_gc: crate::wasm_shims::Instant,\n-    pub last_gc_check: crate::wasm_shims::Instant,\n }\n \n impl fmt::Debug for RootDatabase {\n@@ -99,11 +96,7 @@ impl Default for RootDatabase {\n \n impl RootDatabase {\n     pub fn new(lru_capacity: Option<usize>) -> RootDatabase {\n-        let mut db = RootDatabase {\n-            storage: salsa::Storage::default(),\n-            last_gc: crate::wasm_shims::Instant::now(),\n-            last_gc_check: crate::wasm_shims::Instant::now(),\n-        };\n+        let mut db = RootDatabase { storage: salsa::Storage::default() };\n         db.set_crate_graph_with_durability(Default::default(), Durability::HIGH);\n         db.set_local_roots_with_durability(Default::default(), Durability::HIGH);\n         db.set_library_roots_with_durability(Default::default(), Durability::HIGH);\n@@ -121,11 +114,7 @@ impl RootDatabase {\n \n impl salsa::ParallelDatabase for RootDatabase {\n     fn snapshot(&self) -> salsa::Snapshot<RootDatabase> {\n-        salsa::Snapshot::new(RootDatabase {\n-            storage: self.storage.snapshot(),\n-            last_gc: self.last_gc,\n-            last_gc_check: self.last_gc_check,\n-        })\n+        salsa::Snapshot::new(RootDatabase { storage: self.storage.snapshot() })\n     }\n }\n "}, {"sha": "7af9f9d9bb7bdafcd852e474572a1aca06dcadd0", "filename": "crates/ide_db/src/wasm_shims.rs", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7283783b98ed61ee4f94961b81ad06e2344098d2/crates%2Fide_db%2Fsrc%2Fwasm_shims.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7283783b98ed61ee4f94961b81ad06e2344098d2/crates%2Fide_db%2Fsrc%2Fwasm_shims.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fwasm_shims.rs?ref=7283783b98ed61ee4f94961b81ad06e2344098d2", "patch": "@@ -1,19 +0,0 @@\n-//! A version of `std::time::Instant` that doesn't panic in WASM.\n-\n-#[cfg(not(feature = \"wasm\"))]\n-pub use std::time::Instant;\n-\n-#[cfg(feature = \"wasm\")]\n-#[derive(Clone, Copy, Debug)]\n-pub struct Instant;\n-\n-#[cfg(feature = \"wasm\")]\n-impl Instant {\n-    pub fn now() -> Self {\n-        Self\n-    }\n-\n-    pub fn elapsed(&self) -> std::time::Duration {\n-        std::time::Duration::new(0, 0)\n-    }\n-}"}, {"sha": "c2d0ac791bf6ec5dedf70318d909450398d8a4bc", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/80b0b0ea03a36451210c6f1beec66aa1150f194f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80b0b0ea03a36451210c6f1beec66aa1150f194f/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=80b0b0ea03a36451210c6f1beec66aa1150f194f", "patch": "@@ -189,19 +189,16 @@ impl GlobalState {\n                 }\n                 lsp_server::Message::Response(resp) => self.complete_request(resp),\n             },\n-            Event::Task(task) => {\n-                match task {\n-                    Task::Response(response) => self.respond(response),\n-                    Task::Diagnostics(diagnostics_per_file) => {\n-                        for (file_id, diagnostics) in diagnostics_per_file {\n-                            self.diagnostics.set_native_diagnostics(file_id, diagnostics)\n-                        }\n+            Event::Task(task) => match task {\n+                Task::Response(response) => self.respond(response),\n+                Task::Diagnostics(diagnostics_per_file) => {\n+                    for (file_id, diagnostics) in diagnostics_per_file {\n+                        self.diagnostics.set_native_diagnostics(file_id, diagnostics)\n                     }\n-                    Task::Workspaces(workspaces) => self.switch_workspaces(workspaces),\n-                    Task::Unit => (),\n                 }\n-                self.analysis_host.maybe_collect_garbage();\n-            }\n+                Task::Workspaces(workspaces) => self.switch_workspaces(workspaces),\n+                Task::Unit => (),\n+            },\n             Event::Vfs(mut task) => {\n                 let _p = profile::span(\"GlobalState::handle_event/vfs\");\n                 loop {"}]}