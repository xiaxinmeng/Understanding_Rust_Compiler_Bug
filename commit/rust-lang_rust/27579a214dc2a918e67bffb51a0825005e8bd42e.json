{"sha": "27579a214dc2a918e67bffb51a0825005e8bd42e", "node_id": "C_kwDOAAsO6NoAKDI3NTc5YTIxNGRjMmE5MThlNjdiZmZiNTFhMDgyNTAwNWU4YmQ0MmU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-06T00:00:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-06T00:00:29Z"}, "message": "Auto merge of #102573 - RalfJung:mirisync, r=oli-obk\n\nMiri sync\n\nThis is a Miri sync created with my experimental fork of josh. We should probably not merge this yet, but we can use this to check if the sync looks the way it should.\n\nr? `@oli-obk`", "tree": {"sha": "2f61e982831c65eaf3dc69ef001c8b94278664d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f61e982831c65eaf3dc69ef001c8b94278664d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27579a214dc2a918e67bffb51a0825005e8bd42e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27579a214dc2a918e67bffb51a0825005e8bd42e", "html_url": "https://github.com/rust-lang/rust/commit/27579a214dc2a918e67bffb51a0825005e8bd42e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27579a214dc2a918e67bffb51a0825005e8bd42e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "html_url": "https://github.com/rust-lang/rust/commit/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0"}, {"sha": "9cc11e262f1c8313ec11154a2d5440ff5664aec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cc11e262f1c8313ec11154a2d5440ff5664aec4", "html_url": "https://github.com/rust-lang/rust/commit/9cc11e262f1c8313ec11154a2d5440ff5664aec4"}], "stats": {"total": 1906, "additions": 980, "deletions": 926}, "files": [{"sha": "a5336477e0ed5351dcf945f4488c3277e0f1d6d6", "filename": "Cargo.lock", "status": "modified", "additions": 22, "deletions": 51, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -385,11 +385,12 @@ version = \"0.1.0\"\n dependencies = [\n  \"cargo_metadata 0.15.0\",\n  \"directories\",\n+ \"rustc-build-sysroot\",\n  \"rustc-workspace-hack\",\n+ \"rustc_tools_util 0.2.1\",\n  \"rustc_version\",\n  \"serde\",\n  \"serde_json\",\n- \"vergen\",\n ]\n \n [[package]]\n@@ -669,7 +670,7 @@ dependencies = [\n  \"regex\",\n  \"rustc-semver\",\n  \"rustc-workspace-hack\",\n- \"rustc_tools_util\",\n+ \"rustc_tools_util 0.2.0\",\n  \"semver\",\n  \"serde\",\n  \"syn\",\n@@ -1104,9 +1105,9 @@ dependencies = [\n \n [[package]]\n name = \"directories\"\n-version = \"3.0.2\"\n+version = \"4.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e69600ff1703123957937708eb27f7a564e48885c537782722ed0ba3189ce1d7\"\n+checksum = \"f51c5d4ddabd36886dd3e1438cb358cdcb0d7c499cb99cb4ac2e38e18b5cb210\"\n dependencies = [\n  \"dirs-sys\",\n ]\n@@ -1196,26 +1197,6 @@ dependencies = [\n  \"log\",\n ]\n \n-[[package]]\n-name = \"enum-iterator\"\n-version = \"0.6.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c79a6321a1197d7730510c7e3f6cb80432dfefecb32426de8cea0aa19b4bb8d7\"\n-dependencies = [\n- \"enum-iterator-derive\",\n-]\n-\n-[[package]]\n-name = \"enum-iterator-derive\"\n-version = \"0.6.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1e94aa31f7c0dc764f57896dc615ddd76fc13b0d5dca7eb6cc5e018a5a09ec06\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n [[package]]\n name = \"env_logger\"\n version = \"0.7.1\"\n@@ -1553,18 +1534,6 @@ dependencies = [\n  \"wasi 0.9.0+wasi-snapshot-preview1\",\n ]\n \n-[[package]]\n-name = \"getset\"\n-version = \"0.1.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"24b328c01a4d71d2d8173daa93562a73ab0fe85616876f02500f53d82948c504\"\n-dependencies = [\n- \"proc-macro-error\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n [[package]]\n name = \"gimli\"\n version = \"0.25.0\"\n@@ -3051,6 +3020,17 @@ dependencies = [\n  \"mdbook\",\n ]\n \n+[[package]]\n+name = \"rustc-build-sysroot\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ec5f3689b6c560d6a3a17fcbe54204cd870b4fcf46342d60de16715b660d2c92\"\n+dependencies = [\n+ \"anyhow\",\n+ \"rustc_version\",\n+ \"tempfile\",\n+]\n+\n [[package]]\n name = \"rustc-demangle\"\n version = \"0.1.21\"\n@@ -4186,6 +4166,12 @@ dependencies = [\n name = \"rustc_tools_util\"\n version = \"0.2.0\"\n \n+[[package]]\n+name = \"rustc_tools_util\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"598f48ce2a421542b3e64828aa742b687cc1b91d2f96591cfdb7ac5988cd6366\"\n+\n [[package]]\n name = \"rustc_trait_selection\"\n version = \"0.0.0\"\n@@ -5353,21 +5339,6 @@ version = \"0.2.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"6454029bf181f092ad1b853286f23e2c507d8e8194d01d92da4a55c274a5508c\"\n \n-[[package]]\n-name = \"vergen\"\n-version = \"5.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dfbc87f9a7a9d61b15d51d1d3547284f67b6b4f1494ce3fc5814c101f35a5183\"\n-dependencies = [\n- \"anyhow\",\n- \"chrono\",\n- \"enum-iterator\",\n- \"getset\",\n- \"git2\",\n- \"rustversion\",\n- \"thiserror\",\n-]\n-\n [[package]]\n name = \"version_check\"\n version = \"0.9.3\""}, {"sha": "43e2470e633d021c64a95e9f1779157e9d8eb5e7", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -494,16 +494,6 @@ impl Step for Miri {\n         // sysroot does not seem to populate it, so we do that first.\n         builder.ensure(compile::Std::new(compiler_std, host));\n         let sysroot = builder.sysroot(compiler_std);\n-        let mut cargo =\n-            builder.cargo(compiler, Mode::ToolRustc, SourceType::Submodule, host, \"install\");\n-        cargo.arg(\"xargo\");\n-        // Configure `cargo install` path. cargo adds a `bin/`.\n-        cargo.env(\"CARGO_INSTALL_ROOT\", &builder.out);\n-\n-        let mut cargo = Command::from(cargo);\n-        if !try_run(builder, &mut cargo) {\n-            return;\n-        }\n \n         // # Run `cargo miri setup`.\n         let mut cargo = tool::prepare_tool_cargo(\n@@ -525,8 +515,6 @@ impl Step for Miri {\n         cargo.env(\"MIRI\", &miri);\n         // Debug things.\n         cargo.env(\"RUST_BACKTRACE\", \"1\");\n-        // Let cargo-miri know where xargo ended up.\n-        cargo.env(\"XARGO_CHECK\", builder.out.join(\"bin\").join(\"xargo-check\"));\n \n         let mut cargo = Command::from(cargo);\n         builder.run(&mut cargo);"}, {"sha": "67ff00cc1dfe2774998c71fba7ed29682d77c421", "filename": "src/ci/scripts/should-skip-this.sh", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Fci%2Fscripts%2Fshould-skip-this.sh", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Fci%2Fscripts%2Fshould-skip-this.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fscripts%2Fshould-skip-this.sh?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -18,10 +18,11 @@ if [[ -n \"${CI_ONLY_WHEN_SUBMODULES_CHANGED-}\" ]]; then\n         # Submodules pseudo-files inside git have the 160000 permissions, so when\n         # those files are present in the diff a submodule was updated.\n         echo \"Submodules were updated\"\n-    elif ! git diff --quiet \"$BASE_COMMIT\" -- src/tools/clippy src/tools/rustfmt; then\n+    elif ! (git diff --quiet \"$BASE_COMMIT\" -- \\\n+             src/tools/clippy src/tools/rustfmt src/tools/miri); then\n         # There is not an easy blanket search for subtrees. For now, manually list\n         # the subtrees.\n-        echo \"Clippy or rustfmt subtrees were updated\"\n+        echo \"Tool subtrees were updated\"\n     elif ! (git diff --quiet \"$BASE_COMMIT\" -- \\\n              src/test/rustdoc-gui \\\n              src/librustdoc \\"}, {"sha": "923f83913662f2f323daa6155a71a23c9afe6142", "filename": "src/tools/miri/.github/workflows/ci.yml", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2F.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2F.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2F.github%2Fworkflows%2Fci.yml?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -12,6 +12,9 @@ on:\n   schedule:\n     - cron: '5 15 * * *' # At 15:05 UTC every day.\n \n+env:\n+  CARGO_UNSTABLE_SPARSE_REGISTRY: 'true'\n+\n jobs:\n   build:\n     runs-on: ${{ matrix.os }}\n@@ -38,14 +41,6 @@ jobs:\n         if: runner.os == 'Linux'\n         run: echo \"MIRIFLAGS=-Zmiri-tag-gc=1\" >> $GITHUB_ENV\n \n-      # We install gnu-tar because BSD tar is buggy on macOS builders of GHA.\n-      # See <https://github.com/actions/cache/issues/403>.\n-      - name: Install GNU tar\n-        if: runner.os == 'macOS'\n-        run: |\n-          brew install gnu-tar\n-          echo \"/usr/local/opt/gnu-tar/libexec/gnubin\" >> $GITHUB_PATH\n-\n       # Cache the global cargo directory, but NOT the local `target` directory which\n       # we cannot reuse anyway when the nightly changes (and it grows quite large\n       # over time).\n@@ -62,15 +57,14 @@ jobs:\n             # contains package information of crates installed via `cargo install`.\n             ~/.cargo/.crates.toml\n             ~/.cargo/.crates2.json\n-          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', 'cargo-miri/src/version.rs') }}\n+          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n           restore-keys: ${{ runner.os }}-cargo\n \n-      - name: Install rustup-toolchain-install-master and xargo\n-        if: ${{ steps.cache.outputs.cache-hit == 'false' }}\n+      - name: Install rustup-toolchain-install-master\n+        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}\n         shell: bash\n         run: |\n-          cargo install rustup-toolchain-install-master\n-          cargo install xargo\n+          cargo install -f rustup-toolchain-install-master\n \n       - name: Install \"master\" toolchain\n         shell: bash"}, {"sha": "a88e69115ba38728fd01ff650bff5e9d75fdf6ae", "filename": "src/tools/miri/CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2FCONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCONTRIBUTING.md?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -38,7 +38,7 @@ for you. If you don't want all of these to happen, you can add individual `.auto\n ## Building and testing Miri\n \n Invoking Miri requires getting a bunch of flags right and setting up a custom\n-sysroot with xargo. The `miri` script takes care of that for you. With the\n+sysroot. The `miri` script takes care of that for you. With the\n build environment prepared, compiling Miri is just one command away:\n \n ```"}, {"sha": "5a4bb654494706095dd47f8288cc0f976d4a2d75", "filename": "src/tools/miri/Cargo.lock", "status": "modified", "additions": 89, "deletions": 98, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.lock?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -19,9 +19,9 @@ checksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n \n [[package]]\n name = \"aho-corasick\"\n-version = \"0.7.18\"\n+version = \"0.7.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f\"\n+checksum = \"b4f55bd91a0978cbfd91c457a164bab8b4001c833b7f323132c0a4e1922dd44e\"\n dependencies = [\n  \"memchr\",\n ]\n@@ -45,9 +45,9 @@ checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.65\"\n+version = \"0.3.66\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"11a17d453482a265fd5f8479f2a3f405566e6ca627837aaddb85af8b1ab8ef61\"\n+checksum = \"cab84319d616cfb654d03394f38ab7e6f0919e181b1b57e1fd15e7fb4077d9a7\"\n dependencies = [\n  \"addr2line\",\n  \"cc\",\n@@ -66,9 +66,9 @@ checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n \n [[package]]\n name = \"camino\"\n-version = \"1.0.9\"\n+version = \"1.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"869119e97797867fd90f5e22af7d0bd274bd4635ebb9eb68c04f3f513ae6c412\"\n+checksum = \"88ad0e1e3e88dd237a156ab9f571021b8a158caa0ae44b1968a241efb5144c1e\"\n dependencies = [\n  \"serde\",\n ]\n@@ -109,9 +109,9 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"color-eyre\"\n-version = \"0.6.1\"\n+version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8ebf286c900a6d5867aeff75cfee3192857bb7f24b547d4f0df2ed6baa812c90\"\n+checksum = \"5a667583cca8c4f8436db8de46ea8233c42a7d9ae424a82d338f2e4675229204\"\n dependencies = [\n  \"backtrace\",\n  \"color-spantrace\",\n@@ -147,9 +147,9 @@ dependencies = [\n \n [[package]]\n name = \"crossbeam\"\n-version = \"0.8.1\"\n+version = \"0.8.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4ae5588f6b3c3cb05239e90bd110f257254aecd01e4635400391aeae07497845\"\n+checksum = \"2801af0d36612ae591caa9568261fddce32ce6e08a7275ea334a06a4ad021a2c\"\n dependencies = [\n  \"cfg-if\",\n  \"crossbeam-channel\",\n@@ -161,19 +161,19 @@ dependencies = [\n \n [[package]]\n name = \"crossbeam-channel\"\n-version = \"0.5.4\"\n+version = \"0.5.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5aaa7bd5fb665c6864b5f963dd9097905c54125909c7aa94c9e18507cdbe6c53\"\n+checksum = \"c2dd04ddaf88237dc3b8d8f9a3c1004b506b54b3313403944054d23c0870c521\"\n dependencies = [\n  \"cfg-if\",\n  \"crossbeam-utils\",\n ]\n \n [[package]]\n name = \"crossbeam-deque\"\n-version = \"0.8.1\"\n+version = \"0.8.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6455c0ca19f0d2fbf751b908d5c55c1f5cbc65e03c4225427254b46890bdde1e\"\n+checksum = \"715e8152b692bba2d374b53d4875445368fdf21a94751410af607a5ac677d1fc\"\n dependencies = [\n  \"cfg-if\",\n  \"crossbeam-epoch\",\n@@ -182,36 +182,36 @@ dependencies = [\n \n [[package]]\n name = \"crossbeam-epoch\"\n-version = \"0.9.8\"\n+version = \"0.9.10\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1145cf131a2c6ba0615079ab6a638f7e1973ac9c2634fcbeaaad6114246efe8c\"\n+checksum = \"045ebe27666471bb549370b4b0b3e51b07f56325befa4284db65fc89c02511b1\"\n dependencies = [\n  \"autocfg\",\n  \"cfg-if\",\n  \"crossbeam-utils\",\n- \"lazy_static\",\n  \"memoffset\",\n+ \"once_cell\",\n  \"scopeguard\",\n ]\n \n [[package]]\n name = \"crossbeam-queue\"\n-version = \"0.3.5\"\n+version = \"0.3.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1f25d8400f4a7a5778f0e4e52384a48cbd9b5c495d110786187fc750075277a2\"\n+checksum = \"1cd42583b04998a5363558e5f9291ee5a5ff6b49944332103f251e7479a82aa7\"\n dependencies = [\n  \"cfg-if\",\n  \"crossbeam-utils\",\n ]\n \n [[package]]\n name = \"crossbeam-utils\"\n-version = \"0.8.8\"\n+version = \"0.8.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0bf124c720b7686e3c2663cf54062ab0f68a88af2fb6a030e87e30bf721fcb38\"\n+checksum = \"51887d4adc7b564537b15adcfb307936f8075dfcd5f00dde9a9f1d29383682bc\"\n dependencies = [\n  \"cfg-if\",\n- \"lazy_static\",\n+ \"once_cell\",\n ]\n \n [[package]]\n@@ -222,9 +222,9 @@ checksum = \"56254986775e3233ffa9c4d7d3faaf6d36a2c09d30b20687e9f88bc8bafc16c8\"\n \n [[package]]\n name = \"env_logger\"\n-version = \"0.9.0\"\n+version = \"0.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0b2cf0344971ee6c64c31be0d530793fba457d322dfec2810c453d0ef228f9c3\"\n+checksum = \"c90bf5f19754d10198ccb95b70664fc925bd1fc090a0fd9a6ebc54acc8cd6272\"\n dependencies = [\n  \"atty\",\n  \"humantime\",\n@@ -245,9 +245,9 @@ dependencies = [\n \n [[package]]\n name = \"getrandom\"\n-version = \"0.2.3\"\n+version = \"0.2.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7fcd999463524c52659517fe2cea98493cfe485d10565e7b0fb07dbba7ad2753\"\n+checksum = \"4eb1a864a501629691edf6c15a593b7a51eebaa1e8468e9ddc623de7c9b58ec6\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n@@ -256,9 +256,9 @@ dependencies = [\n \n [[package]]\n name = \"gimli\"\n-version = \"0.26.1\"\n+version = \"0.26.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"78cc372d058dcf6d5ecd98510e7fbc9e5aec4d21de70f65fea8fecebcd881bd4\"\n+checksum = \"22030e2c5a68ec659fde1e949a745124b48e6fa8b045b7ed5bd1fe4ccc5c4e5d\"\n \n [[package]]\n name = \"hermit-abi\"\n@@ -292,9 +292,9 @@ dependencies = [\n \n [[package]]\n name = \"itoa\"\n-version = \"1.0.2\"\n+version = \"1.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"112c678d4050afce233f4f2852bb2eb519230b3cf12f33585275537d7e41578d\"\n+checksum = \"6c8af84674fe1f223a982c933a0ee1086ac4d4052aa0fb8060c12c6ad838e754\"\n \n [[package]]\n name = \"lazy_static\"\n@@ -304,9 +304,9 @@ checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.112\"\n+version = \"0.2.133\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1b03d17f364a3a042d5e5d46b053bbbf82c92c9430c592dd4c064dc6ee997125\"\n+checksum = \"c0f80d65747a3e43d1596c7c5492d95d5edddaabd45a7fcdb02b95f644164966\"\n \n [[package]]\n name = \"libffi\"\n@@ -339,18 +339,19 @@ dependencies = [\n \n [[package]]\n name = \"lock_api\"\n-version = \"0.4.5\"\n+version = \"0.4.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"712a4d093c9976e24e7dbca41db895dabcbac38eb5f4045393d17a95bdfb1109\"\n+checksum = \"435011366fe56583b16cf956f9df0095b405b82d76425bc8981c0e22e60ec4df\"\n dependencies = [\n+ \"autocfg\",\n  \"scopeguard\",\n ]\n \n [[package]]\n name = \"log\"\n-version = \"0.4.14\"\n+version = \"0.4.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"51b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710\"\n+checksum = \"abb12e687cfb44aa40f41fc3978ef76448f9b6038cad6aef4259d3c095a2382e\"\n dependencies = [\n  \"cfg-if\",\n ]\n@@ -371,9 +372,9 @@ dependencies = [\n \n [[package]]\n name = \"memchr\"\n-version = \"2.4.1\"\n+version = \"2.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"308cc39be01b73d0d18f82a0e7b2a3df85245f84af96fdddc5d202d27e47b86a\"\n+checksum = \"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d\"\n \n [[package]]\n name = \"memmap2\"\n@@ -395,9 +396,9 @@ dependencies = [\n \n [[package]]\n name = \"miniz_oxide\"\n-version = \"0.5.3\"\n+version = \"0.5.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6f5c75688da582b8ffc1f1799e9db273f32133c49e048f614d22ec3256773ccc\"\n+checksum = \"96590ba8f175222643a85693f33d26e9c8a015f599c216509b1a6894af675d34\"\n dependencies = [\n  \"adler\",\n ]\n@@ -425,24 +426,24 @@ dependencies = [\n \n [[package]]\n name = \"object\"\n-version = \"0.28.4\"\n+version = \"0.29.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e42c982f2d955fac81dd7e1d0e1426a7d702acd9c98d19ab01083a6a0328c424\"\n+checksum = \"21158b2c33aa6d4561f1c0a6ea283ca92bc54802a93b263e910746d679a7eb53\"\n dependencies = [\n  \"memchr\",\n ]\n \n [[package]]\n name = \"once_cell\"\n-version = \"1.13.0\"\n+version = \"1.15.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"18a6dbe30758c9f83eb00cbea4ac95966305f5a7772f3f42ebfc7fc7eddbd8e1\"\n+checksum = \"e82dad04139b71a90c080c8463fe0dc7902db5192d939bd0950f074d014339e1\"\n \n [[package]]\n name = \"owo-colors\"\n-version = \"3.4.0\"\n+version = \"3.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"decf7381921fea4dcb2549c5667eda59b3ec297ab7e2b5fc33eac69d2e7da87b\"\n+checksum = \"c1b04fb49957986fdce4d6ee7a65027d55d4b6d2265e5848bbb507b58ccfdb6f\"\n \n [[package]]\n name = \"parking_lot\"\n@@ -486,38 +487,37 @@ checksum = \"e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116\"\n \n [[package]]\n name = \"ppv-lite86\"\n-version = \"0.2.15\"\n+version = \"0.2.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ed0cfbc8191465bed66e1718596ee0b0b35d5ee1f41c5df2189d0fe8bde535ba\"\n+checksum = \"eb9f9e6e233e5c4a35559a617bf40a4ec447db2e84c20b55a6f83167b7e57872\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.39\"\n+version = \"1.0.45\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c54b25569025b7fc9651de43004ae593a75ad88543b17178aa5e1b9c4f15f56f\"\n+checksum = \"3edcd08cf4fea98d1ae6c9ddd3b8ccb1acac7c3693d62625969a7daa04a2ae36\"\n dependencies = [\n  \"unicode-ident\",\n ]\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.18\"\n+version = \"1.0.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a1feb54ed693b93a84e14094943b84b7c4eae204c512b7ccb95ab0c66d278ad1\"\n+checksum = \"bbe448f377a7d6961e30f5955f9b8d106c3f5e449d493ee1b125c1d43c2b5179\"\n dependencies = [\n  \"proc-macro2\",\n ]\n \n [[package]]\n name = \"rand\"\n-version = \"0.8.4\"\n+version = \"0.8.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2e7573632e6454cf6b99d7aac4ccca54be06da05aca2ef7423d22d27d4d4bcd8\"\n+checksum = \"34af8d1a0e25924bc5b7c43c079c942339d8f0a8b57c39049bef581b46327404\"\n dependencies = [\n  \"libc\",\n  \"rand_chacha\",\n  \"rand_core\",\n- \"rand_hc\",\n ]\n \n [[package]]\n@@ -532,36 +532,27 @@ dependencies = [\n \n [[package]]\n name = \"rand_core\"\n-version = \"0.6.3\"\n+version = \"0.6.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7\"\n+checksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\n dependencies = [\n  \"getrandom\",\n ]\n \n-[[package]]\n-name = \"rand_hc\"\n-version = \"0.3.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d51e9f596de227fda2ea6c84607f5558e196eeaf43c986b724ba4fb8fdf497e7\"\n-dependencies = [\n- \"rand_core\",\n-]\n-\n [[package]]\n name = \"redox_syscall\"\n-version = \"0.2.10\"\n+version = \"0.2.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8383f39639269cde97d255a32bdb68c047337295414940c68bdd30c2e13203ff\"\n+checksum = \"fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a\"\n dependencies = [\n  \"bitflags\",\n ]\n \n [[package]]\n name = \"regex\"\n-version = \"1.5.5\"\n+version = \"1.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1a11647b6b25ff05a515cb92c365cec08801e83423a235b51e231e1808747286\"\n+checksum = \"4c4eb3267174b8c6c2f654116623910a0fef09c4753f8dd83db29c48a0df988b\"\n dependencies = [\n  \"aho-corasick\",\n  \"memchr\",\n@@ -570,9 +561,9 @@ dependencies = [\n \n [[package]]\n name = \"regex-syntax\"\n-version = \"0.6.25\"\n+version = \"0.6.27\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b\"\n+checksum = \"a3f87b73ce11b1619a3c6332f45341e0047173771e8b8b73f87bfeefb7b56244\"\n \n [[package]]\n name = \"rustc-demangle\"\n@@ -603,9 +594,9 @@ dependencies = [\n \n [[package]]\n name = \"ryu\"\n-version = \"1.0.10\"\n+version = \"1.0.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f3f6f92acf49d1b98f7a81226834412ada05458b7364277387724a237f062695\"\n+checksum = \"4501abdff3ae82a1c1b477a17252eb69cee9e66eb915c1abaa4f44d873df9f09\"\n \n [[package]]\n name = \"scopeguard\"\n@@ -615,27 +606,27 @@ checksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n \n [[package]]\n name = \"semver\"\n-version = \"1.0.9\"\n+version = \"1.0.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8cb243bdfdb5936c8dc3c45762a19d12ab4550cdc753bc247637d4ec35a040fd\"\n+checksum = \"e25dfac463d778e353db5be2449d1cce89bd6fd23c9f1ea21310ce6e5a1b29c4\"\n dependencies = [\n  \"serde\",\n ]\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.137\"\n+version = \"1.0.145\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"61ea8d54c77f8315140a05f4c7237403bf38b72704d031543aa1d16abbf517d1\"\n+checksum = \"728eb6351430bccb993660dfffc5a72f91ccc1295abaa8ce19b27ebe4f75568b\"\n dependencies = [\n  \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.137\"\n+version = \"1.0.145\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1f26faba0c3959972377d3b2d306ee9f71faee9714294e41bb777f83f88578be\"\n+checksum = \"81fa1584d3d1bcacd84c277a0dfe21f5b0f6accf4a23d04d4c6d61f1af522b4c\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -644,9 +635,9 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.81\"\n+version = \"1.0.85\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9b7ce2b32a1aed03c558dc61a5cd328f15aff2dbc17daad8fb8af04d2100e15c\"\n+checksum = \"e55a28e3aaef9d5ce0506d0a14dbba8054ddc7e499ef522dd8b26859ec9d4a44\"\n dependencies = [\n  \"itoa\",\n  \"ryu\",\n@@ -670,15 +661,15 @@ checksum = \"45bb67a18fa91266cc7807181f62f9178a6873bfad7dc788c42e6430db40184f\"\n \n [[package]]\n name = \"smallvec\"\n-version = \"1.7.0\"\n+version = \"1.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1ecab6c735a6bb4139c0caafd0cc3635748bbb3acf4550e8138122099251f309\"\n+checksum = \"2fd0db749597d91ff862fd1d55ea87f7855a744a8425a64695b6fca237d1dad1\"\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.95\"\n+version = \"1.0.101\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fbaf6116ab8924f39d52792136fb74fd60a80194cf1b1c6ffa6453eef1c3f942\"\n+checksum = \"e90cde112c4b9690b8cbe810cba9ddd8bc1d7472e2cae317b69e9438c1cba7d2\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -687,9 +678,9 @@ dependencies = [\n \n [[package]]\n name = \"termcolor\"\n-version = \"1.1.2\"\n+version = \"1.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2dfed899f0eb03f32ee8c6a0aabdb8a7949659e3466561fc0adf54e26d88c5f4\"\n+checksum = \"bab24d30b911b2376f3a13cc2cd443142f0c81dda04c118693e35b3835757755\"\n dependencies = [\n  \"winapi-util\",\n ]\n@@ -705,9 +696,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing\"\n-version = \"0.1.35\"\n+version = \"0.1.36\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a400e31aa60b9d44a52a8ee0343b5b18566b03a8321e0d321f695cf56e940160\"\n+checksum = \"2fce9567bd60a67d08a16488756721ba392f24f29006402881e43b19aac64307\"\n dependencies = [\n  \"cfg-if\",\n  \"pin-project-lite\",\n@@ -716,9 +707,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing-core\"\n-version = \"0.1.28\"\n+version = \"0.1.29\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7b7358be39f2f274f322d2aaed611acc57f382e8eb1e5b48cb9ae30933495ce7\"\n+checksum = \"5aeea4303076558a00714b823f9ad67d58a3bbda1df83d8827d21193156e22f7\"\n dependencies = [\n  \"once_cell\",\n  \"valuable\",\n@@ -736,9 +727,9 @@ dependencies = [\n \n [[package]]\n name = \"tracing-subscriber\"\n-version = \"0.3.14\"\n+version = \"0.3.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3a713421342a5a666b7577783721d3117f1b69a393df803ee17bb73b1e122a59\"\n+checksum = \"60db860322da191b40952ad9affe65ea23e7dd6a5c442c2c42865810c6ab8e6b\"\n dependencies = [\n  \"sharded-slab\",\n  \"thread_local\",\n@@ -765,9 +756,9 @@ dependencies = [\n \n [[package]]\n name = \"unicode-ident\"\n-version = \"1.0.0\"\n+version = \"1.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d22af068fba1eb5edcb4aea19d382b2a3deb4c8f9d475c589b6ada9e0fd493ee\"\n+checksum = \"dcc811dc4066ac62f84f11307873c4850cb653bfa9b1719cee2bd2204a4bc5dd\"\n \n [[package]]\n name = \"valuable\"\n@@ -777,9 +768,9 @@ checksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n \n [[package]]\n name = \"wasi\"\n-version = \"0.10.2+wasi-snapshot-preview1\"\n+version = \"0.11.0+wasi-snapshot-preview1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6\"\n+checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n \n [[package]]\n name = \"winapi\""}, {"sha": "d75f0cc1e80d4d4daaa7528fa8b12d78f103de1c", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -293,6 +293,9 @@ environment variable. We first document the most relevant and most commonly used\n   value of forwarded variables stays the same. Has no effect if `-Zmiri-disable-isolation` is set.\n * `-Zmiri-ignore-leaks` disables the memory leak checker, and also allows some\n   remaining threads to exist when the main thread exits.\n+* `-Zmiri-num-cpus` states the number of available CPUs to be reported by miri. By default, the\n+  number of available CPUs is `1`. Note that this flag does not affect how miri handles threads in\n+  any way.\n * `-Zmiri-permissive-provenance` disables the warning for integer-to-pointer casts and\n   [`ptr::from_exposed_addr`](https://doc.rust-lang.org/nightly/std/ptr/fn.from_exposed_addr.html).\n   This will necessarily miss some bugs as those operations are not efficiently and accurately\n@@ -324,10 +327,6 @@ environment variable. We first document the most relevant and most commonly used\n   ensure alignment.  (The standard library `align_to` method works fine in both modes; under\n   symbolic alignment it only fills the middle slice when the allocation guarantees sufficient\n   alignment.)\n-* `-Zmiri-tag-gc=<blocks>` configures how often the pointer tag garbage collector runs. The default\n-  is to search for and remove unreachable tags once every `10,000` basic blocks. Setting this to\n-  `0` disables the garbage collector, which causes some programs to have explosive memory usage\n-  and/or super-linear runtime.\n \n The remaining flags are for advanced use only, and more likely to change or be removed.\n Some of these are **unsound**, which means they can lead\n@@ -361,7 +360,7 @@ to Miri failing to detect cases of undefined behavior in a program.\n   This is **work in progress**; currently, only integer arguments and return values are\n   supported (and no, pointer/integer casts to work around this limitation will not work;\n   they will fail horribly). It also only works on unix hosts for now.\n-  Follow [the discussion on supporting other types](https://github.com/rust-lang/miri/issues/2365). \n+  Follow [the discussion on supporting other types](https://github.com/rust-lang/miri/issues/2365).\n * `-Zmiri-measureme=<name>` enables `measureme` profiling for the interpreted program.\n    This can be used to find which parts of your program are executing slowly under Miri.\n    The profile is written out to a file with the prefix `<name>`, and can be processed\n@@ -378,6 +377,10 @@ to Miri failing to detect cases of undefined behavior in a program.\n * `-Zmiri-retag-fields` changes Stacked Borrows retagging to recurse into fields.\n   This means that references in fields of structs/enums/tuples/arrays/... are retagged,\n   and in particular, they are protected when passed as function arguments.\n+* `-Zmiri-tag-gc=<blocks>` configures how often the pointer tag garbage collector runs. The default\n+  is to search for and remove unreachable tags once every `10000` basic blocks. Setting this to\n+  `0` disables the garbage collector, which causes some programs to have explosive memory usage\n+  and/or super-linear runtime.\n * `-Zmiri-track-alloc-id=<id1>,<id2>,...` shows a backtrace when the given allocations are\n   being allocated or freed.  This helps in debugging memory leaks and\n   use after free bugs. Specifying this argument multiple times does not overwrite the previous\n@@ -387,7 +390,7 @@ to Miri failing to detect cases of undefined behavior in a program.\n   Borrows \"protectors\". Specifying this argument multiple times does not overwrite the previous\n   values, instead it appends its values to the list. Listing an id multiple times has no effect.\n * `-Zmiri-track-pointer-tag=<tag1>,<tag2>,...` shows a backtrace when a given pointer tag\n-  is created and when (if ever) it is popped from a borrow stack (which is where the tag becomes invalid \n+  is created and when (if ever) it is popped from a borrow stack (which is where the tag becomes invalid\n   and any future use of it will error).  This helps you in finding out why UB is\n   happening and where in your code would be a good place to look for it.\n   Specifying this argument multiple times does not overwrite the previous\n@@ -447,7 +450,7 @@ binaries, and as such worth documenting:\n   some compiler flags to prepare the code for interpretation; with `host`, this is not done.\n   This environment variable is useful to be sure that the compiled `rlib`s are compatible\n   with Miri.\n-* `MIRI_CALLED_FROM_XARGO` is set during the Miri-induced `xargo` sysroot build,\n+* `MIRI_CALLED_FROM_SETUP` is set during the Miri sysroot build,\n   which will re-invoke `cargo-miri` as the `rustc` to use for this build.\n * `MIRI_CALLED_FROM_RUSTDOC` when set to any value tells `cargo-miri` that it is\n   running as a child process of `rustdoc`, which invokes it twice for each doc-test"}, {"sha": "2beb6e1f1a463c826607644780f8f07c01a0489c", "filename": "src/tools/miri/cargo-miri/Cargo.lock", "status": "modified", "additions": 91, "deletions": 314, "changes": 405, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.lock?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -4,15 +4,9 @@ version = 3\n \n [[package]]\n name = \"anyhow\"\n-version = \"1.0.51\"\n+version = \"1.0.65\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8b26702f315f53b6071259e15dd9d64528213b44d61de1ec926eca7715d62203\"\n-\n-[[package]]\n-name = \"autocfg\"\n-version = \"1.0.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\n+checksum = \"98161a4e3e2184da77bb14f02184cdd111e83bbbcc9979dfee3c44b9a85f5602\"\n \n [[package]]\n name = \"bitflags\"\n@@ -22,9 +16,9 @@ checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n \n [[package]]\n name = \"camino\"\n-version = \"1.0.9\"\n+version = \"1.1.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"869119e97797867fd90f5e22af7d0bd274bd4635ebb9eb68c04f3f513ae6c412\"\n+checksum = \"88ad0e1e3e88dd237a156ab9f571021b8a158caa0ae44b1968a241efb5144c1e\"\n dependencies = [\n  \"serde\",\n ]\n@@ -35,11 +29,12 @@ version = \"0.1.0\"\n dependencies = [\n  \"cargo_metadata\",\n  \"directories\",\n+ \"rustc-build-sysroot\",\n  \"rustc-workspace-hack\",\n+ \"rustc_tools_util\",\n  \"rustc_version\",\n  \"serde\",\n  \"serde_json\",\n- \"vergen\",\n ]\n \n [[package]]\n@@ -64,281 +59,129 @@ dependencies = [\n  \"serde_json\",\n ]\n \n-[[package]]\n-name = \"cc\"\n-version = \"1.0.72\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"22a9137b95ea06864e018375b72adfb7db6e6f68cfc8df5a04d00288050485ee\"\n-dependencies = [\n- \"jobserver\",\n-]\n-\n [[package]]\n name = \"cfg-if\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n-[[package]]\n-name = \"chrono\"\n-version = \"0.4.19\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"670ad68c9088c2a963aaa298cb369688cf3f9465ce5e2d4ca10e6e0098a1ce73\"\n-dependencies = [\n- \"libc\",\n- \"num-integer\",\n- \"num-traits\",\n- \"time\",\n- \"winapi\",\n-]\n-\n [[package]]\n name = \"directories\"\n-version = \"3.0.2\"\n+version = \"4.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e69600ff1703123957937708eb27f7a564e48885c537782722ed0ba3189ce1d7\"\n+checksum = \"f51c5d4ddabd36886dd3e1438cb358cdcb0d7c499cb99cb4ac2e38e18b5cb210\"\n dependencies = [\n  \"dirs-sys\",\n ]\n \n [[package]]\n name = \"dirs-sys\"\n-version = \"0.3.6\"\n+version = \"0.3.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"03d86534ed367a67548dc68113a0f5db55432fdfbb6e6f9d77704397d95d5780\"\n+checksum = \"1b1d1d91c932ef41c0f2663aa8b0ca0342d444d842c06914aa0a7e352d0bada6\"\n dependencies = [\n  \"libc\",\n  \"redox_users\",\n  \"winapi\",\n ]\n \n [[package]]\n-name = \"enum-iterator\"\n-version = \"0.7.0\"\n+name = \"fastrand\"\n+version = \"1.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4eeac5c5edb79e4e39fe8439ef35207780a11f69c52cbe424ce3dfad4cb78de6\"\n+checksum = \"a7a407cfaa3385c4ae6b23e84623d48c2798d06e3e6a1878f7f59f17b3f86499\"\n dependencies = [\n- \"enum-iterator-derive\",\n-]\n-\n-[[package]]\n-name = \"enum-iterator-derive\"\n-version = \"0.7.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c134c37760b27a871ba422106eedbb8247da973a09e82558bf26d619c882b159\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"form_urlencoded\"\n-version = \"1.0.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5fc25a87fa4fd2094bffb06925852034d90a17f0d1e05197d4956d3555752191\"\n-dependencies = [\n- \"matches\",\n- \"percent-encoding\",\n+ \"instant\",\n ]\n \n [[package]]\n name = \"getrandom\"\n-version = \"0.2.3\"\n+version = \"0.2.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7fcd999463524c52659517fe2cea98493cfe485d10565e7b0fb07dbba7ad2753\"\n+checksum = \"4eb1a864a501629691edf6c15a593b7a51eebaa1e8468e9ddc623de7c9b58ec6\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n  \"wasi\",\n ]\n \n [[package]]\n-name = \"getset\"\n-version = \"0.1.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e45727250e75cc04ff2846a66397da8ef2b3db8e40e0cef4df67950a07621eb9\"\n-dependencies = [\n- \"proc-macro-error\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"git2\"\n-version = \"0.13.25\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f29229cc1b24c0e6062f6e742aa3e256492a5323365e5ed3413599f8a5eff7d6\"\n-dependencies = [\n- \"bitflags\",\n- \"libc\",\n- \"libgit2-sys\",\n- \"log\",\n- \"url\",\n-]\n-\n-[[package]]\n-name = \"idna\"\n-version = \"0.2.3\"\n+name = \"instant\"\n+version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"418a0a6fab821475f634efe3ccc45c013f742efe03d853e8d3355d5cb850ecf8\"\n+checksum = \"7a5bbe824c507c5da5956355e86a746d82e0e1464f65d862cc5e71da70e94b2c\"\n dependencies = [\n- \"matches\",\n- \"unicode-bidi\",\n- \"unicode-normalization\",\n+ \"cfg-if\",\n ]\n \n [[package]]\n name = \"itoa\"\n-version = \"1.0.1\"\n+version = \"1.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1aab8fc367588b89dcee83ab0fd66b72b50b72fa1904d7095045ace2b0c81c35\"\n-\n-[[package]]\n-name = \"jobserver\"\n-version = \"0.1.24\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"af25a77299a7f711a01975c35a6a424eb6862092cc2d6c72c4ed6cbc56dfc1fa\"\n-dependencies = [\n- \"libc\",\n-]\n+checksum = \"6c8af84674fe1f223a982c933a0ee1086ac4d4052aa0fb8060c12c6ad838e754\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.112\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1b03d17f364a3a042d5e5d46b053bbbf82c92c9430c592dd4c064dc6ee997125\"\n-\n-[[package]]\n-name = \"libgit2-sys\"\n-version = \"0.12.26+1.3.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"19e1c899248e606fbfe68dcb31d8b0176ebab833b103824af31bddf4b7457494\"\n-dependencies = [\n- \"cc\",\n- \"libc\",\n- \"libz-sys\",\n- \"pkg-config\",\n-]\n-\n-[[package]]\n-name = \"libz-sys\"\n-version = \"1.1.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"de5435b8549c16d423ed0c03dbaafe57cf6c3344744f1242520d59c9d8ecec66\"\n-dependencies = [\n- \"cc\",\n- \"libc\",\n- \"pkg-config\",\n- \"vcpkg\",\n-]\n-\n-[[package]]\n-name = \"log\"\n-version = \"0.4.14\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"51b9bbe6c47d51fc3e1a9b945965946b4c44142ab8792c50835a980d362c2710\"\n-dependencies = [\n- \"cfg-if\",\n-]\n-\n-[[package]]\n-name = \"matches\"\n-version = \"0.1.9\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a3e378b66a060d48947b590737b30a1be76706c8dd7b8ba0f2fe3989c68a853f\"\n-\n-[[package]]\n-name = \"num-integer\"\n-version = \"0.1.44\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d2cc698a63b549a70bc047073d2949cce27cd1c7b0a4a862d08a8031bc2801db\"\n-dependencies = [\n- \"autocfg\",\n- \"num-traits\",\n-]\n-\n-[[package]]\n-name = \"num-traits\"\n-version = \"0.2.14\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9a64b1ec5cda2586e284722486d802acf1f7dbdc623e2bfc57e65ca1cd099290\"\n-dependencies = [\n- \"autocfg\",\n-]\n-\n-[[package]]\n-name = \"percent-encoding\"\n-version = \"2.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n-\n-[[package]]\n-name = \"pkg-config\"\n-version = \"0.3.24\"\n+version = \"0.2.133\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"58893f751c9b0412871a09abd62ecd2a00298c6c83befa223ef98c52aef40cbe\"\n+checksum = \"c0f80d65747a3e43d1596c7c5492d95d5edddaabd45a7fcdb02b95f644164966\"\n \n [[package]]\n-name = \"proc-macro-error\"\n-version = \"1.0.4\"\n+name = \"proc-macro2\"\n+version = \"1.0.45\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"da25490ff9892aab3fcf7c36f08cfb902dd3e71ca0f9f9517bea02a73a5ce38c\"\n+checksum = \"3edcd08cf4fea98d1ae6c9ddd3b8ccb1acac7c3693d62625969a7daa04a2ae36\"\n dependencies = [\n- \"proc-macro-error-attr\",\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n- \"version_check\",\n+ \"unicode-ident\",\n ]\n \n [[package]]\n-name = \"proc-macro-error-attr\"\n-version = \"1.0.4\"\n+name = \"quote\"\n+version = \"1.0.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a1be40180e52ecc98ad80b184934baf3d0d29f979574e439af5a55274b35f869\"\n+checksum = \"bbe448f377a7d6961e30f5955f9b8d106c3f5e449d493ee1b125c1d43c2b5179\"\n dependencies = [\n  \"proc-macro2\",\n- \"quote\",\n- \"version_check\",\n ]\n \n [[package]]\n-name = \"proc-macro2\"\n-version = \"1.0.42\"\n+name = \"redox_syscall\"\n+version = \"0.2.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c278e965f1d8cf32d6e0e96de3d3e79712178ae67986d9cf9151f51e95aac89b\"\n+checksum = \"fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a\"\n dependencies = [\n- \"unicode-ident\",\n+ \"bitflags\",\n ]\n \n [[package]]\n-name = \"quote\"\n-version = \"1.0.10\"\n+name = \"redox_users\"\n+version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"38bc8cc6a5f2e3655e0899c1b848643b2562f853f114bfec7be120678e3ace05\"\n+checksum = \"b033d837a7cf162d7993aded9304e30a83213c648b6e389db233191f891e5c2b\"\n dependencies = [\n- \"proc-macro2\",\n+ \"getrandom\",\n+ \"redox_syscall\",\n+ \"thiserror\",\n ]\n \n [[package]]\n-name = \"redox_syscall\"\n-version = \"0.2.10\"\n+name = \"remove_dir_all\"\n+version = \"0.5.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8383f39639269cde97d255a32bdb68c047337295414940c68bdd30c2e13203ff\"\n+checksum = \"3acd125665422973a33ac9d3dd2df85edad0f4ae9b00dafb1a05e43a9f5ef8e7\"\n dependencies = [\n- \"bitflags\",\n+ \"winapi\",\n ]\n \n [[package]]\n-name = \"redox_users\"\n-version = \"0.4.0\"\n+name = \"rustc-build-sysroot\"\n+version = \"0.3.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"528532f3d801c87aec9def2add9ca802fe569e44a544afe633765267840abe64\"\n+checksum = \"ec5f3689b6c560d6a3a17fcbe54204cd870b4fcf46342d60de16715b660d2c92\"\n dependencies = [\n- \"getrandom\",\n- \"redox_syscall\",\n+ \"anyhow\",\n+ \"rustc_version\",\n+ \"tempfile\",\n ]\n \n [[package]]\n@@ -347,6 +190,12 @@ version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"fc71d2faa173b74b232dedc235e3ee1696581bb132fc116fa3626d6151a1a8fb\"\n \n+[[package]]\n+name = \"rustc_tools_util\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"598f48ce2a421542b3e64828aa742b687cc1b91d2f96591cfdb7ac5988cd6366\"\n+\n [[package]]\n name = \"rustc_version\"\n version = \"0.4.0\"\n@@ -356,41 +205,35 @@ dependencies = [\n  \"semver\",\n ]\n \n-[[package]]\n-name = \"rustversion\"\n-version = \"1.0.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f2cc38e8fa666e2de3c4aba7edeb5ffc5246c1c2ed0e3d17e560aeeba736b23f\"\n-\n [[package]]\n name = \"ryu\"\n-version = \"1.0.9\"\n+version = \"1.0.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"73b4b750c782965c211b42f022f59af1fbceabdd026623714f104152f1ec149f\"\n+checksum = \"4501abdff3ae82a1c1b477a17252eb69cee9e66eb915c1abaa4f44d873df9f09\"\n \n [[package]]\n name = \"semver\"\n-version = \"1.0.12\"\n+version = \"1.0.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a2333e6df6d6598f2b1974829f853c2b4c5f4a6e503c10af918081aa6f8564e1\"\n+checksum = \"e25dfac463d778e353db5be2449d1cce89bd6fd23c9f1ea21310ce6e5a1b29c4\"\n dependencies = [\n  \"serde\",\n ]\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.140\"\n+version = \"1.0.145\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fc855a42c7967b7c369eb5860f7164ef1f6f81c20c7cc1141f2a604e18723b03\"\n+checksum = \"728eb6351430bccb993660dfffc5a72f91ccc1295abaa8ce19b27ebe4f75568b\"\n dependencies = [\n  \"serde_derive\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.140\"\n+version = \"1.0.145\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6f2122636b9fe3b81f1cb25099fcf2d3f542cdb1d45940d56c713158884a05da\"\n+checksum = \"81fa1584d3d1bcacd84c277a0dfe21f5b0f6accf4a23d04d4c6d61f1af522b4c\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -399,9 +242,9 @@ dependencies = [\n \n [[package]]\n name = \"serde_json\"\n-version = \"1.0.82\"\n+version = \"1.0.85\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"82c2c1fdcd807d1098552c5b9a36e425e42e9fbd7c6a37a8425f390f781f7fa7\"\n+checksum = \"e55a28e3aaef9d5ce0506d0a14dbba8054ddc7e499ef522dd8b26859ec9d4a44\"\n dependencies = [\n  \"itoa\",\n  \"ryu\",\n@@ -410,126 +253,60 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.98\"\n+version = \"1.0.101\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c50aef8a904de4c23c788f104b7dddc7d6f79c647c7c8ce4cc8f73eb0ca773dd\"\n+checksum = \"e90cde112c4b9690b8cbe810cba9ddd8bc1d7472e2cae317b69e9438c1cba7d2\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n  \"unicode-ident\",\n ]\n \n [[package]]\n-name = \"thiserror\"\n-version = \"1.0.30\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"854babe52e4df1653706b98fcfc05843010039b406875930a70e4d9644e5c417\"\n-dependencies = [\n- \"thiserror-impl\",\n-]\n-\n-[[package]]\n-name = \"thiserror-impl\"\n-version = \"1.0.30\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aa32fd3f627f367fe16f893e2597ae3c05020f8bba2666a4e6ea73d377e5714b\"\n-dependencies = [\n- \"proc-macro2\",\n- \"quote\",\n- \"syn\",\n-]\n-\n-[[package]]\n-name = \"time\"\n-version = \"0.1.43\"\n+name = \"tempfile\"\n+version = \"3.3.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ca8a50ef2360fbd1eeb0ecd46795a87a19024eb4b53c5dc916ca1fd95fe62438\"\n+checksum = \"5cdb1ef4eaeeaddc8fbd371e5017057064af0911902ef36b39801f67cc6d79e4\"\n dependencies = [\n+ \"cfg-if\",\n+ \"fastrand\",\n  \"libc\",\n+ \"redox_syscall\",\n+ \"remove_dir_all\",\n  \"winapi\",\n ]\n \n [[package]]\n-name = \"tinyvec\"\n-version = \"1.5.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2c1c1d5a42b6245520c249549ec267180beaffcc0615401ac8e31853d4b6d8d2\"\n-dependencies = [\n- \"tinyvec_macros\",\n-]\n-\n-[[package]]\n-name = \"tinyvec_macros\"\n-version = \"0.1.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cda74da7e1a664f795bb1f8a87ec406fb89a02522cf6e50620d016add6dbbf5c\"\n-\n-[[package]]\n-name = \"unicode-bidi\"\n-version = \"0.3.7\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1a01404663e3db436ed2746d9fefef640d868edae3cceb81c3b8d5732fda678f\"\n-\n-[[package]]\n-name = \"unicode-ident\"\n-version = \"1.0.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"15c61ba63f9235225a22310255a29b806b907c9b8c964bcbd0a2c70f3f2deea7\"\n-\n-[[package]]\n-name = \"unicode-normalization\"\n-version = \"0.1.19\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d54590932941a9e9266f0832deed84ebe1bf2e4c9e4a3554d393d18f5e854bf9\"\n-dependencies = [\n- \"tinyvec\",\n-]\n-\n-[[package]]\n-name = \"url\"\n-version = \"2.2.2\"\n+name = \"thiserror\"\n+version = \"1.0.37\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a507c383b2d33b5fc35d1861e77e6b383d158b2da5e14fe51b83dfedf6fd578c\"\n+checksum = \"10deb33631e3c9018b9baf9dcbbc4f737320d2b576bac10f6aefa048fa407e3e\"\n dependencies = [\n- \"form_urlencoded\",\n- \"idna\",\n- \"matches\",\n- \"percent-encoding\",\n+ \"thiserror-impl\",\n ]\n \n [[package]]\n-name = \"vcpkg\"\n-version = \"0.2.15\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"accd4ea62f7bb7a82fe23066fb0957d48ef677f6eeb8215f372f52e48bb32426\"\n-\n-[[package]]\n-name = \"vergen\"\n-version = \"5.1.17\"\n+name = \"thiserror-impl\"\n+version = \"1.0.37\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"6cf88d94e969e7956d924ba70741316796177fa0c79a2c9f4ab04998d96e966e\"\n+checksum = \"982d17546b47146b28f7c22e3d08465f6b8903d0ea13c1660d9d84a6e7adcdbb\"\n dependencies = [\n- \"anyhow\",\n- \"cfg-if\",\n- \"chrono\",\n- \"enum-iterator\",\n- \"getset\",\n- \"git2\",\n- \"rustversion\",\n- \"thiserror\",\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"syn\",\n ]\n \n [[package]]\n-name = \"version_check\"\n-version = \"0.9.3\"\n+name = \"unicode-ident\"\n+version = \"1.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5fecdca9a5291cc2b8dcf7dc02453fee791a280f3743cb0905f8822ae463b3fe\"\n+checksum = \"dcc811dc4066ac62f84f11307873c4850cb653bfa9b1719cee2bd2204a4bc5dd\"\n \n [[package]]\n name = \"wasi\"\n-version = \"0.10.2+wasi-snapshot-preview1\"\n+version = \"0.11.0+wasi-snapshot-preview1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fd6fbd9a79829dd1ad0cc20627bf1ed606756a7f77edff7b66b7064f9cb327c6\"\n+checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n \n [[package]]\n name = \"winapi\""}, {"sha": "fcdd122747da57a25b1ccc856c428155221e22b3", "filename": "src/tools/miri/cargo-miri/Cargo.toml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2FCargo.toml?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -14,10 +14,11 @@ test = false # we have no unit tests\n doctest = false # and no doc tests\n \n [dependencies]\n-directories = \"3\"\n+directories = \"4\"\n rustc_version = \"0.4\"\n serde_json = \"1.0.40\"\n cargo_metadata = \"0.15.0\"\n+rustc-build-sysroot = \"0.3.3\"\n \n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`\n@@ -29,4 +30,4 @@ rustc-workspace-hack = \"1.0.0\"\n serde = { version = \"*\", features = [\"derive\"] }\n \n [build-dependencies]\n-vergen = { version = \"5\", default_features = false, features = [\"git\"] }\n+rustc_tools_util = \"0.2\""}, {"sha": "c1110115455904e04d71665a9cfe89351bf72934", "filename": "src/tools/miri/cargo-miri/build.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fcargo-miri%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fcargo-miri%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fbuild.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -1,11 +1,13 @@\n-use vergen::vergen;\n-\n fn main() {\n     // Don't rebuild miri when nothing changed.\n     println!(\"cargo:rerun-if-changed=build.rs\");\n-    // vergen\n-    let mut gen_config = vergen::Config::default();\n-    *gen_config.git_mut().sha_kind_mut() = vergen::ShaKind::Short;\n-    *gen_config.git_mut().commit_timestamp_kind_mut() = vergen::TimestampKind::DateOnly;\n-    vergen(gen_config).ok(); // Ignore failure (in case we are built outside a git repo)\n+    // gather version info\n+    println!(\n+        \"cargo:rustc-env=GIT_HASH={}\",\n+        rustc_tools_util::get_commit_hash().unwrap_or_default()\n+    );\n+    println!(\n+        \"cargo:rustc-env=COMMIT_DATE={}\",\n+        rustc_tools_util::get_commit_date().unwrap_or_default()\n+    );\n }"}, {"sha": "c43bf0bfab11b101b76c721f851759301ffbfcea", "filename": "src/tools/miri/cargo-miri/src/main.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fmain.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -7,7 +7,6 @@ mod util;\n mod arg;\n mod phases;\n mod setup;\n-mod version;\n \n use std::{env, iter};\n \n@@ -23,8 +22,8 @@ fn main() {\n     // Dispatch to `cargo-miri` phase. Here is a rough idea of \"who calls who\".\n     //\n     // Initially, we are invoked as `cargo-miri miri run/test`. We first run the setup phase:\n-    // - We call `xargo`, and set `RUSTC` back to us, together with `MIRI_CALLED_FROM_XARGO`,\n-    //   so that xargo's rustc invocations end up in `phase_rustc` with `RustcPhase::Setup`.\n+    // - We use `rustc-build-sysroot`, and set `RUSTC` back to us, together with `MIRI_CALLED_FROM_SETUP`,\n+    //   so that the sysroot build rustc invocations end up in `phase_rustc` with `RustcPhase::Setup`.\n     //   There we then call the Miri driver with `MIRI_BE_RUSTC` to perform the actual build.\n     //\n     // Then we call `cargo run/test`, exactly forwarding all user flags, plus some configuration so\n@@ -53,7 +52,7 @@ fn main() {\n     //     the Miri driver for interpretation.\n \n     // Dispatch running as part of sysroot compilation.\n-    if env::var_os(\"MIRI_CALLED_FROM_XARGO\").is_some() {\n+    if env::var_os(\"MIRI_CALLED_FROM_SETUP\").is_some() {\n         phase_rustc(args, RustcPhase::Setup);\n         return;\n     }"}, {"sha": "0c1f039d6cc097541638d53a4eb7691774ec777a", "filename": "src/tools/miri/cargo-miri/src/phases.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fphases.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -1,12 +1,13 @@\n //! Implements the various phases of `cargo miri run/test`.\n \n use std::env;\n-use std::fmt::Write as _;\n use std::fs::{self, File};\n use std::io::BufReader;\n use std::path::PathBuf;\n use std::process::Command;\n \n+use rustc_version::VersionMeta;\n+\n use crate::{setup::*, util::*};\n \n const CARGO_MIRI_HELP: &str = r#\"Runs binary crates and tests in Miri\n@@ -37,17 +38,13 @@ fn show_help() {\n }\n \n fn show_version() {\n-    let mut version = format!(\"miri {}\", env!(\"CARGO_PKG_VERSION\"));\n-    // Only use `option_env` on vergen variables to ensure the build succeeds\n-    // when vergen failed to find the git info.\n-    if let Some(sha) = option_env!(\"VERGEN_GIT_SHA_SHORT\") {\n-        // This `unwrap` can never fail because if VERGEN_GIT_SHA_SHORT exists, then so does\n-        // VERGEN_GIT_COMMIT_DATE.\n-        #[allow(clippy::option_env_unwrap)]\n-        write!(&mut version, \" ({} {})\", sha, option_env!(\"VERGEN_GIT_COMMIT_DATE\").unwrap())\n-            .unwrap();\n+    print!(\"miri {}\", env!(\"CARGO_PKG_VERSION\"));\n+    let version = format!(\"{} {}\", env!(\"GIT_HASH\"), env!(\"COMMIT_DATE\"));\n+    if version.len() > 1 {\n+        // If there is actually something here, print it.\n+        print!(\" ({version})\");\n     }\n-    println!(\"{}\", version);\n+    println!();\n }\n \n fn forward_patched_extern_arg(args: &mut impl Iterator<Item = String>, cmd: &mut Command) {\n@@ -90,12 +87,14 @@ pub fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n     let verbose = num_arg_flag(\"-v\");\n \n     // Determine the involved architectures.\n-    let host = version_info().host;\n+    let rustc_version = VersionMeta::for_command(miri_for_host())\n+        .expect(\"failed to determine underlying rustc version of Miri\");\n+    let host = &rustc_version.host;\n     let target = get_arg_flag_value(\"--target\");\n-    let target = target.as_ref().unwrap_or(&host);\n+    let target = target.as_ref().unwrap_or(host);\n \n     // We always setup.\n-    setup(&subcommand, &host, target);\n+    setup(&subcommand, target, &rustc_version);\n \n     // Invoke actual cargo for the job, but with different flags.\n     // We re-use `cargo test` and `cargo run`, which makes target and binary handling very easy but\n@@ -146,7 +145,7 @@ pub fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n     if get_arg_flag_value(\"--target\").is_none() {\n         // No target given. Explicitly pick the host.\n         cmd.arg(\"--target\");\n-        cmd.arg(&host);\n+        cmd.arg(host);\n     }\n \n     // Set ourselves as runner for al binaries invoked by cargo.\n@@ -204,7 +203,7 @@ pub fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n \n #[derive(Debug, Copy, Clone, PartialEq)]\n pub enum RustcPhase {\n-    /// `rustc` called via `xargo` for sysroot build.\n+    /// `rustc` called during sysroot build.\n     Setup,\n     /// `rustc` called by `cargo` for regular build.\n     Build,\n@@ -264,7 +263,7 @@ pub fn phase_rustc(mut args: impl Iterator<Item = String>, phase: RustcPhase) {\n     let verbose = std::env::var(\"MIRI_VERBOSE\")\n         .map_or(0, |verbose| verbose.parse().expect(\"verbosity flag must be an integer\"));\n     let target_crate = is_target_crate();\n-    // Determine whether this is cargo/xargo invoking rustc to get some infos.\n+    // Determine whether this is cargo invoking rustc to get some infos.\n     let info_query = get_arg_flag_value(\"--print\").is_some() || has_arg_flag(\"-vV\");\n \n     let store_json = |info: CrateRunInfo| {"}, {"sha": "72d8ef2f752248d0cd7a7187b40957768e61ebf7", "filename": "src/tools/miri/cargo-miri/src/setup.rs", "status": "modified", "additions": 73, "deletions": 174, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fsetup.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -1,64 +1,19 @@\n-//! Implements `cargo miri setup` via xargo\n+//! Implements `cargo miri setup`.\n \n use std::env;\n use std::ffi::OsStr;\n-use std::fs::{self};\n-use std::io::BufRead;\n-use std::ops::Not;\n-use std::path::{Path, PathBuf};\n+use std::path::PathBuf;\n use std::process::{self, Command};\n \n-use crate::{util::*, version::*};\n+use rustc_build_sysroot::{BuildMode, Sysroot, SysrootConfig};\n+use rustc_version::VersionMeta;\n \n-fn xargo_version() -> Option<(u32, u32, u32)> {\n-    let out = xargo_check().arg(\"--version\").output().ok()?;\n-    if !out.status.success() {\n-        return None;\n-    }\n-    // Parse output. The first line looks like \"xargo 0.3.12 (b004f1c 2018-12-13)\".\n-    let line = out\n-        .stderr\n-        .lines()\n-        .next()\n-        .expect(\"malformed `xargo --version` output: not at least one line\")\n-        .expect(\"malformed `xargo --version` output: error reading first line\");\n-    let (name, version) = {\n-        let mut split = line.split(' ');\n-        (\n-            split.next().expect(\"malformed `xargo --version` output: empty\"),\n-            split.next().expect(\"malformed `xargo --version` output: not at least two words\"),\n-        )\n-    };\n-    if name != \"xargo\" {\n-        // This is some fork of xargo\n-        return None;\n-    }\n-    let mut version_pieces = version.split('.');\n-    let major = version_pieces\n-        .next()\n-        .expect(\"malformed `xargo --version` output: not a major version piece\")\n-        .parse()\n-        .expect(\"malformed `xargo --version` output: major version is not an integer\");\n-    let minor = version_pieces\n-        .next()\n-        .expect(\"malformed `xargo --version` output: not a minor version piece\")\n-        .parse()\n-        .expect(\"malformed `xargo --version` output: minor version is not an integer\");\n-    let patch = version_pieces\n-        .next()\n-        .expect(\"malformed `xargo --version` output: not a patch version piece\")\n-        .parse()\n-        .expect(\"malformed `xargo --version` output: patch version is not an integer\");\n-    if version_pieces.next().is_some() {\n-        panic!(\"malformed `xargo --version` output: more than three pieces in version\");\n-    }\n-    Some((major, minor, patch))\n-}\n+use crate::util::*;\n \n /// Performs the setup required to make `cargo miri` work: Getting a custom-built libstd. Then sets\n /// `MIRI_SYSROOT`. Skipped if `MIRI_SYSROOT` is already set, in which case we expect the user has\n /// done all this already.\n-pub fn setup(subcommand: &MiriCommand, host: &str, target: &str) {\n+pub fn setup(subcommand: &MiriCommand, target: &str, rustc_version: &VersionMeta) {\n     let only_setup = matches!(subcommand, MiriCommand::Setup);\n     let ask_user = !only_setup;\n     let print_sysroot = only_setup && has_arg_flag(\"--print-sysroot\"); // whether we just print the sysroot path\n@@ -69,21 +24,8 @@ pub fn setup(subcommand: &MiriCommand, host: &str, target: &str) {\n         return;\n     }\n \n-    // First, we need xargo.\n-    if xargo_version().map_or(true, |v| v < XARGO_MIN_VERSION) {\n-        if std::env::var_os(\"XARGO_CHECK\").is_some() {\n-            // The user manually gave us a xargo binary; don't do anything automatically.\n-            show_error!(\"xargo is too old; please upgrade to the latest version\")\n-        }\n-        let mut cmd = cargo();\n-        cmd.args([\"install\", \"xargo\"]);\n-        ask_to_run(cmd, ask_user, \"install a recent enough xargo\");\n-    }\n-\n-    // Determine where the rust sources are located.  The env vars manually setting the source\n-    // (`MIRI_LIB_SRC`, `XARGO_RUST_SRC`) trump auto-detection.\n-    let rust_src_env_var =\n-        std::env::var_os(\"MIRI_LIB_SRC\").or_else(|| std::env::var_os(\"XARGO_RUST_SRC\"));\n+    // Determine where the rust sources are located.  The env var trumps auto-detection.\n+    let rust_src_env_var = std::env::var_os(\"MIRI_LIB_SRC\");\n     let rust_src = match rust_src_env_var {\n         Some(path) => {\n             let path = PathBuf::from(path);\n@@ -92,22 +34,9 @@ pub fn setup(subcommand: &MiriCommand, host: &str, target: &str) {\n         }\n         None => {\n             // Check for `rust-src` rustup component.\n-            let output = miri_for_host()\n-                .args([\"--print\", \"sysroot\"])\n-                .output()\n-                .expect(\"failed to determine sysroot\");\n-            if !output.status.success() {\n-                show_error!(\n-                    \"Failed to determine sysroot; Miri said:\\n{}\",\n-                    String::from_utf8_lossy(&output.stderr).trim_end()\n-                );\n-            }\n-            let sysroot = std::str::from_utf8(&output.stdout).unwrap();\n-            let sysroot = Path::new(sysroot.trim_end_matches('\\n'));\n-            // Check for `$SYSROOT/lib/rustlib/src/rust/library`; test if that contains `std/Cargo.toml`.\n-            let rustup_src =\n-                sysroot.join(\"lib\").join(\"rustlib\").join(\"src\").join(\"rust\").join(\"library\");\n-            if !rustup_src.join(\"std\").join(\"Cargo.toml\").exists() {\n+            let rustup_src = rustc_build_sysroot::rustc_sysroot_src(miri_for_host())\n+                .expect(\"could not determine sysroot source directory\");\n+            if !rustup_src.exists() {\n                 // Ask the user to install the `rust-src` component, and use that.\n                 let mut cmd = Command::new(\"rustup\");\n                 cmd.args([\"component\", \"add\", \"rust-src\"]);\n@@ -131,115 +60,85 @@ pub fn setup(subcommand: &MiriCommand, host: &str, target: &str) {\n         );\n     }\n \n-    // Next, we need our own libstd. Prepare a xargo project for that purpose.\n-    // We will do this work in whatever is a good cache dir for this platform.\n-    let dirs = directories::ProjectDirs::from(\"org\", \"rust-lang\", \"miri\").unwrap();\n-    let dir = dirs.cache_dir();\n-    if !dir.exists() {\n-        fs::create_dir_all(dir).unwrap();\n-    }\n-    // The interesting bit: Xargo.toml (only needs content if we actually need std)\n-    let xargo_toml = if std::env::var_os(\"MIRI_NO_STD\").is_some() {\n-        \"\"\n+    // Determine where to put the sysroot.\n+    let user_dirs = directories::ProjectDirs::from(\"org\", \"rust-lang\", \"miri\").unwrap();\n+    let sysroot_dir = user_dirs.cache_dir();\n+    // Sysroot configuration and build details.\n+    let sysroot_config = if std::env::var_os(\"MIRI_NO_STD\").is_some() {\n+        SysrootConfig::NoStd\n     } else {\n-        r#\"\n-[dependencies.std]\n-default_features = false\n-# We support unwinding, so enable that panic runtime.\n-features = [\"panic_unwind\", \"backtrace\"]\n-\n-[dependencies.test]\n-\"#\n+        SysrootConfig::WithStd { std_features: &[\"panic_unwind\", \"backtrace\"] }\n     };\n-    write_to_file(&dir.join(\"Xargo.toml\"), xargo_toml);\n-    // The boring bits: a dummy project for xargo.\n-    // FIXME: With xargo-check, can we avoid doing this?\n-    write_to_file(\n-        &dir.join(\"Cargo.toml\"),\n-        r#\"\n-[package]\n-name = \"miri-xargo\"\n-description = \"A dummy project for building libstd with xargo.\"\n-version = \"0.0.0\"\n-\n-[lib]\n-path = \"lib.rs\"\n-\"#,\n-    );\n-    write_to_file(&dir.join(\"lib.rs\"), \"#![no_std]\");\n+    let cargo_cmd = || {\n+        let mut command = cargo();\n+        // Use Miri as rustc to build a libstd compatible with us (and use the right flags).\n+        // However, when we are running in bootstrap, we cannot just overwrite `RUSTC`,\n+        // because we still need bootstrap to distinguish between host and target crates.\n+        // In that case we overwrite `RUSTC_REAL` instead which determines the rustc used\n+        // for target crates.\n+        // We set ourselves (`cargo-miri`) instead of Miri directly to be able to patch the flags\n+        // for `libpanic_abort` (usually this is done by bootstrap but we have to do it ourselves).\n+        // The `MIRI_CALLED_FROM_SETUP` will mean we dispatch to `phase_setup_rustc`.\n+        let cargo_miri_path = std::env::current_exe().expect(\"current executable path invalid\");\n+        if env::var_os(\"RUSTC_STAGE\").is_some() {\n+            assert!(env::var_os(\"RUSTC\").is_some());\n+            command.env(\"RUSTC_REAL\", &cargo_miri_path);\n+        } else {\n+            command.env(\"RUSTC\", &cargo_miri_path);\n+        }\n+        command.env(\"MIRI_CALLED_FROM_SETUP\", \"1\");\n+        // Make sure there are no other wrappers getting in our way (Cc\n+        // https://github.com/rust-lang/miri/issues/1421,\n+        // https://github.com/rust-lang/miri/issues/2429). Looks like setting\n+        // `RUSTC_WRAPPER` to the empty string overwrites `build.rustc-wrapper` set via\n+        // `config.toml`.\n+        command.env(\"RUSTC_WRAPPER\", \"\");\n \n-    // Figure out where xargo will build its stuff.\n-    // Unfortunately, it puts things into a different directory when the\n-    // architecture matches the host.\n-    let sysroot = if target == host { dir.join(\"HOST\") } else { PathBuf::from(dir) };\n+        if only_setup {\n+            if print_sysroot {\n+                // Be extra sure there is no noise on stdout.\n+                command.stdout(process::Stdio::null());\n+            }\n+        } else {\n+            command.stdout(process::Stdio::null());\n+            command.stderr(process::Stdio::null());\n+        }\n+        // Disable debug assertions in the standard library -- Miri is already slow enough.\n+        // But keep the overflow checks, they are cheap. This completely overwrites flags\n+        // the user might have set, which is consistent with normal `cargo build` that does\n+        // not apply `RUSTFLAGS` to the sysroot either.\n+        let rustflags = vec![\"-Cdebug-assertions=off\".into(), \"-Coverflow-checks=on\".into()];\n+        (command, rustflags)\n+    };\n     // Make sure all target-level Miri invocations know their sysroot.\n-    std::env::set_var(\"MIRI_SYSROOT\", &sysroot);\n+    std::env::set_var(\"MIRI_SYSROOT\", sysroot_dir);\n \n-    // Now invoke xargo.\n-    let mut command = xargo_check();\n-    command.arg(\"check\").arg(\"-q\");\n-    command.current_dir(dir);\n-    command.env(\"XARGO_HOME\", dir);\n-    command.env(\"XARGO_RUST_SRC\", &rust_src);\n-    // We always need to set a target so rustc bootstrap can tell apart host from target crates.\n-    command.arg(\"--target\").arg(target);\n-    // Use Miri as rustc to build a libstd compatible with us (and use the right flags).\n-    // However, when we are running in bootstrap, we cannot just overwrite `RUSTC`,\n-    // because we still need bootstrap to distinguish between host and target crates.\n-    // In that case we overwrite `RUSTC_REAL` instead which determines the rustc used\n-    // for target crates.\n-    // We set ourselves (`cargo-miri`) instead of Miri directly to be able to patch the flags\n-    // for `libpanic_abort` (usually this is done by bootstrap but we have to do it ourselves).\n-    // The `MIRI_CALLED_FROM_XARGO` will mean we dispatch to `phase_setup_rustc`.\n-    let cargo_miri_path = std::env::current_exe().expect(\"current executable path invalid\");\n-    if env::var_os(\"RUSTC_STAGE\").is_some() {\n-        assert!(env::var_os(\"RUSTC\").is_some());\n-        command.env(\"RUSTC_REAL\", &cargo_miri_path);\n-    } else {\n-        command.env(\"RUSTC\", &cargo_miri_path);\n-    }\n-    command.env(\"MIRI_CALLED_FROM_XARGO\", \"1\");\n-    // Make sure there are no other wrappers getting in our way\n-    // (Cc https://github.com/rust-lang/miri/issues/1421, https://github.com/rust-lang/miri/issues/2429).\n-    // Looks like setting `RUSTC_WRAPPER` to the empty string overwrites `build.rustc-wrapper` set via `config.toml`.\n-    command.env(\"RUSTC_WRAPPER\", \"\");\n-    // Disable debug assertions in the standard library -- Miri is already slow enough. But keep the\n-    // overflow checks, they are cheap. This completely overwrites flags the user might have set,\n-    // which is consistent with normal `cargo build` that does not apply `RUSTFLAGS` to the sysroot\n-    // either.\n-    command.env(\"RUSTFLAGS\", \"-Cdebug-assertions=off -Coverflow-checks=on\");\n-    // Manage the output the user sees.\n+    // Do the build.\n     if only_setup {\n         // We want to be explicit.\n         eprintln!(\"Preparing a sysroot for Miri (target: {target})...\");\n-        if print_sysroot {\n-            // Be extra sure there is no noise on stdout.\n-            command.stdout(process::Stdio::null());\n-        }\n     } else {\n         // We want to be quiet, but still let the user know that something is happening.\n         eprint!(\"Preparing a sysroot for Miri (target: {target})... \");\n-        command.stdout(process::Stdio::null());\n-        command.stderr(process::Stdio::null());\n     }\n-\n-    // Finally run it!\n-    if command.status().expect(\"failed to run xargo\").success().not() {\n-        if only_setup {\n-            show_error!(\"failed to run xargo, see error details above\")\n-        } else {\n-            show_error!(\"failed to run xargo; run `cargo miri setup` to see the error details\")\n-        }\n-    }\n-\n-    // Figure out what to print.\n+    Sysroot::new(sysroot_dir, target)\n+        .build_from_source(&rust_src, BuildMode::Check, sysroot_config, rustc_version, cargo_cmd)\n+        .unwrap_or_else(|_| {\n+            if only_setup {\n+                show_error!(\"failed to build sysroot, see error details above\")\n+            } else {\n+                show_error!(\n+                    \"failed to build sysroot; run `cargo miri setup` to see the error details\"\n+                )\n+            }\n+        });\n     if only_setup {\n-        eprintln!(\"A sysroot for Miri is now available in `{}`.\", sysroot.display());\n+        eprintln!(\"A sysroot for Miri is now available in `{}`.\", sysroot_dir.display());\n     } else {\n         eprintln!(\"done\");\n     }\n     if print_sysroot {\n         // Print just the sysroot and nothing else to stdout; this way we do not need any escaping.\n-        println!(\"{}\", sysroot.display());\n+        println!(\"{}\", sysroot_dir.display());\n     }\n }"}, {"sha": "aabe5547e5c9a9e26caf73aa7e3ae56e1bbb02d5", "filename": "src/tools/miri/cargo-miri/src/util.rs", "status": "modified", "additions": 1, "deletions": 28, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Futil.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -2,14 +2,13 @@ use std::collections::HashMap;\n use std::env;\n use std::ffi::OsString;\n use std::fmt::Write as _;\n-use std::fs::{self, File};\n+use std::fs::File;\n use std::io::{self, BufWriter, Read, Write};\n use std::ops::Not;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n use cargo_metadata::{Metadata, MetadataCommand};\n-use rustc_version::VersionMeta;\n use serde::{Deserialize, Serialize};\n \n pub use crate::arg::*;\n@@ -111,19 +110,10 @@ pub fn miri_for_host() -> Command {\n     cmd\n }\n \n-pub fn version_info() -> VersionMeta {\n-    VersionMeta::for_command(miri_for_host())\n-        .expect(\"failed to determine underlying rustc version of Miri\")\n-}\n-\n pub fn cargo() -> Command {\n     Command::new(env::var_os(\"CARGO\").unwrap_or_else(|| OsString::from(\"cargo\")))\n }\n \n-pub fn xargo_check() -> Command {\n-    Command::new(env::var_os(\"XARGO_CHECK\").unwrap_or_else(|| OsString::from(\"xargo-check\")))\n-}\n-\n /// Execute the `Command`, where possible by replacing the current process with a new process\n /// described by the `Command`. Then exit this process with the exit code of the new process.\n pub fn exec(mut cmd: Command) -> ! {\n@@ -203,23 +193,6 @@ pub fn ask_to_run(mut cmd: Command, ask: bool, text: &str) {\n     }\n }\n \n-/// Writes the given content to the given file *cross-process atomically*, in the sense that another\n-/// process concurrently reading that file will see either the old content or the new content, but\n-/// not some intermediate (e.g., empty) state.\n-///\n-/// We assume no other parts of this same process are trying to read or write that file.\n-pub fn write_to_file(filename: &Path, content: &str) {\n-    // Create a temporary file with the desired contents.\n-    let mut temp_filename = filename.as_os_str().to_os_string();\n-    temp_filename.push(&format!(\".{}\", std::process::id()));\n-    let mut temp_file = File::create(&temp_filename).unwrap();\n-    temp_file.write_all(content.as_bytes()).unwrap();\n-    drop(temp_file);\n-\n-    // Move file to the desired location.\n-    fs::rename(temp_filename, filename).unwrap();\n-}\n-\n // Computes the extra flags that need to be passed to cargo to make it behave like the current\n // cargo invocation.\n fn cargo_extra_flags() -> Vec<String> {"}, {"sha": "366e90df179835ed89d6dffc5932e724a7d4a136", "filename": "src/tools/miri/cargo-miri/src/version.rs", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fcargo-miri%2Fsrc%2Fversion.rs?ref=c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "patch": "@@ -1,2 +0,0 @@\n-// We put this in a separate file so that it can be hashed for GHA caching.\n-pub const XARGO_MIN_VERSION: (u32, u32, u32) = (0, 3, 26);"}, {"sha": "e492308a62eb5f9930c4aafe708f2d9ae6ef18f6", "filename": "src/tools/miri/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fmiri", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fmiri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fmiri?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -138,7 +138,7 @@ export RUSTFLAGS=\"-C link-args=-Wl,-rpath,$LIBDIR $RUSTFLAGS\"\n \n # Build a sysroot and set MIRI_SYSROOT to use it. Arguments are passed to `cargo miri setup`.\n build_sysroot() {\n-    if ! MIRI_SYSROOT=\"$($CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -q -- miri setup --print-sysroot \"$@\")\"; then\n+    if ! MIRI_SYSROOT=\"$($CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/cargo-miri/Cargo.toml -- miri setup --print-sysroot \"$@\")\"; then\n         echo \"'cargo miri setup' failed\"\n         exit 1\n     fi"}, {"sha": "5b16fc2948cbbb0be35e220a9e835f0785f83419", "filename": "src/tools/miri/src/bin/miri.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fbin%2Fmiri.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -550,6 +550,13 @@ fn main() {\n             } else {\n                 show_error!(\"-Zmiri-extern-so-file `{}` does not exist\", filename);\n             }\n+        } else if let Some(param) = arg.strip_prefix(\"-Zmiri-num-cpus=\") {\n+            let num_cpus = match param.parse::<u32>() {\n+                Ok(i) => i,\n+                Err(err) => show_error!(\"-Zmiri-num-cpus requires a `u32`: {}\", err),\n+            };\n+\n+            miri_config.num_cpus = num_cpus;\n         } else {\n             // Forward to rustc.\n             rustc_args.push(arg);"}, {"sha": "d0fc349f1acc3a011d087dc335e3b875b0f198c0", "filename": "src/tools/miri/src/concurrency/data_race.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fdata_race.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -696,6 +696,12 @@ pub struct VClockAlloc {\n     alloc_ranges: RefCell<RangeMap<MemoryCellClocks>>,\n }\n \n+impl VisitTags for VClockAlloc {\n+    fn visit_tags(&self, _visit: &mut dyn FnMut(SbTag)) {\n+        // No tags here.\n+    }\n+}\n+\n impl VClockAlloc {\n     /// Create a new data-race detector for newly allocated memory.\n     pub fn new_allocation(\n@@ -1239,6 +1245,12 @@ pub struct GlobalState {\n     pub track_outdated_loads: bool,\n }\n \n+impl VisitTags for GlobalState {\n+    fn visit_tags(&self, _visit: &mut dyn FnMut(SbTag)) {\n+        // We don't have any tags.\n+    }\n+}\n+\n impl GlobalState {\n     /// Create a new global state, setup with just thread-id=0\n     /// advanced to timestamp = 1."}, {"sha": "dfe2e9f05dafd6d2bee87bb2b3506b7ad58f6b80", "filename": "src/tools/miri/src/concurrency/range_object_map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Frange_object_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Frange_object_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Frange_object_map.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -132,6 +132,10 @@ impl<T> RangeObjectMap<T> {\n     pub fn remove_from_pos(&mut self, pos: Position) {\n         self.v.remove(pos);\n     }\n+\n+    pub fn iter(&self) -> impl Iterator<Item = &T> {\n+        self.v.iter().map(|e| &e.data)\n+    }\n }\n \n impl<T> Index<Position> for RangeObjectMap<T> {"}, {"sha": "ec1da4138d448c392155a2adcad3df7ad46c7dbe", "filename": "src/tools/miri/src/concurrency/thread.rs", "status": "modified", "additions": 70, "deletions": 8, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fthread.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -32,9 +32,11 @@ pub enum SchedulingAction {\n \n /// Timeout callbacks can be created by synchronization primitives to tell the\n /// scheduler that they should be called once some period of time passes.\n-type TimeoutCallback<'mir, 'tcx> = Box<\n-    dyn FnOnce(&mut InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>) -> InterpResult<'tcx> + 'tcx,\n->;\n+pub trait MachineCallback<'mir, 'tcx>: VisitTags {\n+    fn call(&self, ecx: &mut InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>) -> InterpResult<'tcx>;\n+}\n+\n+type TimeoutCallback<'mir, 'tcx> = Box<dyn MachineCallback<'mir, 'tcx> + 'tcx>;\n \n /// A thread identifier.\n #[derive(Clone, Copy, Debug, PartialOrd, Ord, PartialEq, Eq, Hash)]\n@@ -181,6 +183,46 @@ impl<'mir, 'tcx> Thread<'mir, 'tcx> {\n     }\n }\n \n+impl VisitTags for Thread<'_, '_> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        let Thread { panic_payload, last_error, stack, state: _, thread_name: _, join_status: _ } =\n+            self;\n+\n+        panic_payload.visit_tags(visit);\n+        last_error.visit_tags(visit);\n+        for frame in stack {\n+            frame.visit_tags(visit)\n+        }\n+    }\n+}\n+\n+impl VisitTags for Frame<'_, '_, Provenance, FrameData<'_>> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        let Frame {\n+            return_place,\n+            locals,\n+            extra,\n+            body: _,\n+            instance: _,\n+            return_to_block: _,\n+            loc: _,\n+            // There are some private fields we cannot access; they contain no tags.\n+            ..\n+        } = self;\n+\n+        // Return place.\n+        return_place.visit_tags(visit);\n+        // Locals.\n+        for local in locals.iter() {\n+            if let LocalValue::Live(value) = &local.value {\n+                value.visit_tags(visit);\n+            }\n+        }\n+\n+        extra.visit_tags(visit);\n+    }\n+}\n+\n /// A specific moment in time.\n #[derive(Debug)]\n pub enum Time {\n@@ -253,6 +295,29 @@ impl<'mir, 'tcx> Default for ThreadManager<'mir, 'tcx> {\n     }\n }\n \n+impl VisitTags for ThreadManager<'_, '_> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        let ThreadManager {\n+            threads,\n+            thread_local_alloc_ids,\n+            timeout_callbacks,\n+            active_thread: _,\n+            yield_active_thread: _,\n+            sync: _,\n+        } = self;\n+\n+        for thread in threads {\n+            thread.visit_tags(visit);\n+        }\n+        for ptr in thread_local_alloc_ids.borrow().values() {\n+            ptr.visit_tags(visit);\n+        }\n+        for callback in timeout_callbacks.values() {\n+            callback.callback.visit_tags(visit);\n+        }\n+    }\n+}\n+\n impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n     pub(crate) fn init(ecx: &mut MiriInterpCx<'mir, 'tcx>) {\n         if ecx.tcx.sess.target.os.as_ref() != \"windows\" {\n@@ -290,10 +355,6 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         &mut self.threads[self.active_thread].stack\n     }\n \n-    pub fn iter(&self) -> impl Iterator<Item = &Thread<'mir, 'tcx>> {\n-        self.threads.iter()\n-    }\n-\n     pub fn all_stacks(\n         &self,\n     ) -> impl Iterator<Item = &[Frame<'mir, 'tcx, Provenance, FrameData<'tcx>>]> {\n@@ -390,6 +451,7 @@ impl<'mir, 'tcx: 'mir> ThreadManager<'mir, 'tcx> {\n         data_race: Option<&mut data_race::GlobalState>,\n     ) -> InterpResult<'tcx> {\n         if self.threads[joined_thread_id].join_status == ThreadJoinStatus::Detached {\n+            // On Windows this corresponds to joining on a closed handle.\n             throw_ub_format!(\"trying to join a detached thread\");\n         }\n \n@@ -906,7 +968,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         // 2. Make the scheduler the only place that can change the active\n         //    thread.\n         let old_thread = this.set_active_thread(thread);\n-        callback(this)?;\n+        callback.call(this)?;\n         this.set_active_thread(old_thread);\n         Ok(())\n     }"}, {"sha": "9d7a49c0b4301b3260c3080ca024e40fda3a005f", "filename": "src/tools/miri/src/concurrency/weak_memory.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fconcurrency%2Fweak_memory.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -108,6 +108,19 @@ pub struct StoreBufferAlloc {\n     store_buffers: RefCell<RangeObjectMap<StoreBuffer>>,\n }\n \n+impl VisitTags for StoreBufferAlloc {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        let Self { store_buffers } = self;\n+        for val in store_buffers\n+            .borrow()\n+            .iter()\n+            .flat_map(|buf| buf.buffer.iter().map(|element| &element.val))\n+        {\n+            val.visit_tags(visit);\n+        }\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub(super) struct StoreBuffer {\n     // Stores to this location in modification order"}, {"sha": "ecfe0cd3f8a65d7205cc0084834b56538a15b333", "filename": "src/tools/miri/src/diagnostics.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fdiagnostics.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -60,7 +60,10 @@ impl MachineStopType for TerminationInfo {}\n \n /// Miri specific diagnostics\n pub enum NonHaltingDiagnostic {\n-    CreatedPointerTag(NonZeroU64, Option<(AllocId, AllocRange)>),\n+    /// (new_tag, new_kind, (alloc_id, base_offset, orig_tag))\n+    ///\n+    /// new_kind is `None` for base tags.\n+    CreatedPointerTag(NonZeroU64, Option<String>, Option<(AllocId, AllocRange, ProvenanceExtra)>),\n     /// This `Item` was popped from the borrow stack, either due to an access with the given tag or\n     /// a deallocation when the second argument is `None`.\n     PoppedPointerTag(Item, Option<(ProvenanceExtra, AccessKind)>),\n@@ -376,7 +379,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n             MiriInterpCx::generate_stacktrace_from_stack(self.threads.active_thread_stack());\n         let (stacktrace, _was_pruned) = prune_stacktrace(stacktrace, self);\n \n-        let (title, diag_level) = match e {\n+        let (title, diag_level) = match &e {\n             RejectedIsolatedOp(_) => (\"operation rejected by isolation\", DiagLevel::Warning),\n             Int2Ptr { .. } => (\"integer-to-pointer cast\", DiagLevel::Warning),\n             CreatedPointerTag(..)\n@@ -388,10 +391,13 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n             | WeakMemoryOutdatedLoad => (\"tracking was triggered\", DiagLevel::Note),\n         };\n \n-        let msg = match e {\n-            CreatedPointerTag(tag, None) => format!(\"created tag {tag:?}\"),\n-            CreatedPointerTag(tag, Some((alloc_id, range))) =>\n-                format!(\"created tag {tag:?} at {alloc_id:?}{range:?}\"),\n+        let msg = match &e {\n+            CreatedPointerTag(tag, None, _) => format!(\"created base tag {tag:?}\"),\n+            CreatedPointerTag(tag, Some(kind), None) => format!(\"created {tag:?} for {kind}\"),\n+            CreatedPointerTag(tag, Some(kind), Some((alloc_id, range, orig_tag))) =>\n+                format!(\n+                    \"created tag {tag:?} for {kind} at {alloc_id:?}{range:?} derived from {orig_tag:?}\"\n+                ),\n             PoppedPointerTag(item, tag) =>\n                 match tag {\n                     None => format!(\"popped tracked tag for item {item:?} due to deallocation\",),\n@@ -418,7 +424,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n                 format!(\"weak memory emulation: outdated value returned from load\"),\n         };\n \n-        let notes = match e {\n+        let notes = match &e {\n             ProgressReport { block_count } => {\n                 // It is important that each progress report is slightly different, since\n                 // identical diagnostics are being deduplicated.\n@@ -427,7 +433,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n             _ => vec![],\n         };\n \n-        let helps = match e {\n+        let helps = match &e {\n             Int2Ptr { details: true } =>\n                 vec![\n                     ("}, {"sha": "b211f3c5f7133f43402ce956994810cae8d954bf", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -132,6 +132,8 @@ pub struct MiriConfig {\n     pub external_so_file: Option<PathBuf>,\n     /// Run a garbage collector for SbTags every N basic blocks.\n     pub gc_interval: u32,\n+    /// The number of CPUs to be reported by miri.\n+    pub num_cpus: u32,\n }\n \n impl Default for MiriConfig {\n@@ -164,6 +166,7 @@ impl Default for MiriConfig {\n             retag_fields: false,\n             external_so_file: None,\n             gc_interval: 10_000,\n+            num_cpus: 1,\n         }\n     }\n }"}, {"sha": "15833fe42adc9b66baa3df938f8a2c94c4b56095", "filename": "src/tools/miri/src/helpers.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fhelpers.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -1,5 +1,6 @@\n pub mod convert;\n \n+use std::cmp;\n use std::mem;\n use std::num::NonZeroUsize;\n use std::time::Duration;\n@@ -908,24 +909,25 @@ impl<'a, 'mir: 'a, 'tcx: 'a + 'mir> CurrentSpan<'a, 'mir, 'tcx> {\n     /// This function is backed by a cache, and can be assumed to be very fast.\n     pub fn get(&mut self) -> Span {\n         let idx = self.current_frame_idx();\n-        Self::frame_span(self.machine, idx)\n+        self.stack().get(idx).map(Frame::current_span).unwrap_or(rustc_span::DUMMY_SP)\n     }\n \n-    /// Similar to `CurrentSpan::get`, but retrieves the parent frame of the first non-local frame.\n+    /// Returns the span of the *caller* of the current operation, again\n+    /// walking down the stack to find the closest frame in a local crate, if the caller of the\n+    /// current operation is not in a local crate.\n     /// This is useful when we are processing something which occurs on function-entry and we want\n     /// to point at the call to the function, not the function definition generally.\n-    pub fn get_parent(&mut self) -> Span {\n-        let idx = self.current_frame_idx();\n-        Self::frame_span(self.machine, idx.wrapping_sub(1))\n+    pub fn get_caller(&mut self) -> Span {\n+        // We need to go down at least to the caller (len - 2), or however\n+        // far we have to go to find a frame in a local crate.\n+        let local_frame_idx = self.current_frame_idx();\n+        let stack = self.stack();\n+        let idx = cmp::min(local_frame_idx, stack.len().saturating_sub(2));\n+        stack.get(idx).map(Frame::current_span).unwrap_or(rustc_span::DUMMY_SP)\n     }\n \n-    fn frame_span(machine: &MiriMachine<'_, '_>, idx: usize) -> Span {\n-        machine\n-            .threads\n-            .active_thread_stack()\n-            .get(idx)\n-            .map(Frame::current_span)\n-            .unwrap_or(rustc_span::DUMMY_SP)\n+    fn stack(&self) -> &[Frame<'mir, 'tcx, Provenance, machine::FrameData<'tcx>>] {\n+        self.machine.threads.active_thread_stack()\n     }\n \n     fn current_frame_idx(&mut self) -> usize {"}, {"sha": "9722b7643e426cea90324dc1f7258816a29d7104", "filename": "src/tools/miri/src/intptrcast.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fintptrcast.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -44,6 +44,12 @@ pub struct GlobalStateInner {\n     provenance_mode: ProvenanceMode,\n }\n \n+impl VisitTags for GlobalStateInner {\n+    fn visit_tags(&self, _visit: &mut dyn FnMut(SbTag)) {\n+        // Nothing to visit here.\n+    }\n+}\n+\n impl GlobalStateInner {\n     pub fn new(config: &MiriConfig) -> Self {\n         GlobalStateInner {"}, {"sha": "461f6e4c0f6a0a45a7c28ef1c0339d5cb1af9cf6", "filename": "src/tools/miri/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Flib.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -105,15 +105,15 @@ pub use crate::helpers::{CurrentSpan, EvalContextExt as HelpersEvalContextExt};\n pub use crate::intptrcast::ProvenanceMode;\n pub use crate::machine::{\n     AllocExtra, FrameData, MiriInterpCx, MiriInterpCxExt, MiriMachine, MiriMemoryKind, Provenance,\n-    ProvenanceExtra, NUM_CPUS, PAGE_SIZE, STACK_ADDR, STACK_SIZE,\n+    ProvenanceExtra, PAGE_SIZE, STACK_ADDR, STACK_SIZE,\n };\n pub use crate::mono_hash_map::MonoHashMap;\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n pub use crate::range_map::RangeMap;\n pub use crate::stacked_borrows::{\n     CallId, EvalContextExt as StackedBorEvalContextExt, Item, Permission, SbTag, Stack, Stacks,\n };\n-pub use crate::tag_gc::EvalContextExt as _;\n+pub use crate::tag_gc::{EvalContextExt as _, VisitTags};\n \n /// Insert rustc arguments at the beginning of the argument list that Miri wants to be\n /// set per default, for maximal validation power."}, {"sha": "20ae908fce87c7db5eb5f5cf34b2a12a7548826f", "filename": "src/tools/miri/src/machine.rs", "status": "modified", "additions": 87, "deletions": 1, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fmachine.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -35,7 +35,6 @@ use crate::{\n pub const PAGE_SIZE: u64 = 4 * 1024; // FIXME: adjust to target architecture\n pub const STACK_ADDR: u64 = 32 * PAGE_SIZE; // not really about the \"stack\", but where we start assigning integer addresses to allocations\n pub const STACK_SIZE: u64 = 16 * PAGE_SIZE; // whatever\n-pub const NUM_CPUS: u64 = 1;\n \n /// Extra data stored with each stack frame\n pub struct FrameData<'tcx> {\n@@ -64,6 +63,15 @@ impl<'tcx> std::fmt::Debug for FrameData<'tcx> {\n     }\n }\n \n+impl VisitTags for FrameData<'_> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        let FrameData { catch_unwind, stacked_borrows, timing: _ } = self;\n+\n+        catch_unwind.visit_tags(visit);\n+        stacked_borrows.visit_tags(visit);\n+    }\n+}\n+\n /// Extra memory kinds\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n pub enum MiriMemoryKind {\n@@ -252,6 +260,16 @@ pub struct AllocExtra {\n     pub weak_memory: Option<weak_memory::AllocExtra>,\n }\n \n+impl VisitTags for AllocExtra {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        let AllocExtra { stacked_borrows, data_race, weak_memory } = self;\n+\n+        stacked_borrows.visit_tags(visit);\n+        data_race.visit_tags(visit);\n+        weak_memory.visit_tags(visit);\n+    }\n+}\n+\n /// Precomputed layouts of primitive types\n pub struct PrimitiveLayouts<'tcx> {\n     pub unit: TyAndLayout<'tcx>,\n@@ -291,6 +309,9 @@ impl<'mir, 'tcx: 'mir> PrimitiveLayouts<'tcx> {\n }\n \n /// The machine itself.\n+///\n+/// If you add anything here that stores machine values, remember to update\n+/// `visit_all_machine_values`!\n pub struct MiriMachine<'mir, 'tcx> {\n     // We carry a copy of the global `TyCtxt` for convenience, so methods taking just `&Evaluator` have `tcx` access.\n     pub tcx: TyCtxt<'tcx>,\n@@ -407,6 +428,8 @@ pub struct MiriMachine<'mir, 'tcx> {\n     pub(crate) gc_interval: u32,\n     /// The number of blocks that passed since the last SbTag GC pass.\n     pub(crate) since_gc: u32,\n+    /// The number of CPUs to be reported by miri.\n+    pub(crate) num_cpus: u32,\n }\n \n impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n@@ -486,6 +509,7 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n             }),\n             gc_interval: config.gc_interval,\n             since_gc: 0,\n+            num_cpus: config.num_cpus,\n         }\n     }\n \n@@ -586,6 +610,68 @@ impl<'mir, 'tcx> MiriMachine<'mir, 'tcx> {\n     }\n }\n \n+impl VisitTags for MiriMachine<'_, '_> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        #[rustfmt::skip]\n+        let MiriMachine {\n+            threads,\n+            tls,\n+            env_vars,\n+            argc,\n+            argv,\n+            cmd_line,\n+            extern_statics,\n+            dir_handler,\n+            stacked_borrows,\n+            data_race,\n+            intptrcast,\n+            file_handler,\n+            tcx: _,\n+            isolated_op: _,\n+            validate: _,\n+            enforce_abi: _,\n+            clock: _,\n+            layouts: _,\n+            static_roots: _,\n+            profiler: _,\n+            string_cache: _,\n+            exported_symbols_cache: _,\n+            panic_on_unsupported: _,\n+            backtrace_style: _,\n+            local_crates: _,\n+            rng: _,\n+            tracked_alloc_ids: _,\n+            check_alignment: _,\n+            cmpxchg_weak_failure_rate: _,\n+            mute_stdout_stderr: _,\n+            weak_memory: _,\n+            preemption_rate: _,\n+            report_progress: _,\n+            basic_block_count: _,\n+            #[cfg(unix)]\n+            external_so_lib: _,\n+            gc_interval: _,\n+            since_gc: _,\n+            num_cpus: _,\n+        } = self;\n+\n+        threads.visit_tags(visit);\n+        tls.visit_tags(visit);\n+        env_vars.visit_tags(visit);\n+        dir_handler.visit_tags(visit);\n+        file_handler.visit_tags(visit);\n+        data_race.visit_tags(visit);\n+        stacked_borrows.visit_tags(visit);\n+        intptrcast.visit_tags(visit);\n+        argc.visit_tags(visit);\n+        argv.visit_tags(visit);\n+        cmd_line.visit_tags(visit);\n+        for ptr in extern_statics.values() {\n+            ptr.visit_tags(visit);\n+        }\n+    }\n+}\n+\n /// A rustc InterpCx for Miri.\n pub type MiriInterpCx<'mir, 'tcx> = InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>;\n "}, {"sha": "076d3878de2ac6b0f3e3fa8c922a40f88d25a102", "filename": "src/tools/miri/src/shims/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fenv.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -36,6 +36,17 @@ pub struct EnvVars<'tcx> {\n     pub(crate) environ: Option<MPlaceTy<'tcx, Provenance>>,\n }\n \n+impl VisitTags for EnvVars<'_> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        let EnvVars { map, environ } = self;\n+\n+        environ.visit_tags(visit);\n+        for ptr in map.values() {\n+            ptr.visit_tags(visit);\n+        }\n+    }\n+}\n+\n impl<'tcx> EnvVars<'tcx> {\n     pub(crate) fn init<'mir>(\n         ecx: &mut InterpCx<'mir, 'tcx, MiriMachine<'mir, 'tcx>>,"}, {"sha": "698e025961da83c174affcb58a6572a4a325e8d2", "filename": "src/tools/miri/src/shims/panic.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fpanic.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -35,6 +35,15 @@ pub struct CatchUnwindData<'tcx> {\n     ret: mir::BasicBlock,\n }\n \n+impl VisitTags for CatchUnwindData<'_> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        let CatchUnwindData { catch_fn, data, dest, ret: _ } = self;\n+        catch_fn.visit_tags(visit);\n+        data.visit_tags(visit);\n+        dest.visit_tags(visit);\n+    }\n+}\n+\n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n     /// Handles the special `miri_start_panic` intrinsic, which is called"}, {"sha": "9f04034e1a12d9265e3af4b2dbadba8b63b53ab9", "filename": "src/tools/miri/src/shims/time.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftime.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -1,5 +1,6 @@\n use std::time::{Duration, SystemTime};\n \n+use crate::concurrency::thread::MachineCallback;\n use crate::*;\n \n /// Returns the time elapsed between the provided time and the unix epoch as a `Duration`.\n@@ -218,10 +219,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         this.register_timeout_callback(\n             active_thread,\n             Time::Monotonic(timeout_time),\n-            Box::new(move |ecx| {\n-                ecx.unblock_thread(active_thread);\n-                Ok(())\n-            }),\n+            Box::new(UnblockCallback { thread_to_unblock: active_thread }),\n         );\n \n         Ok(0)\n@@ -244,12 +242,24 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         this.register_timeout_callback(\n             active_thread,\n             Time::Monotonic(timeout_time),\n-            Box::new(move |ecx| {\n-                ecx.unblock_thread(active_thread);\n-                Ok(())\n-            }),\n+            Box::new(UnblockCallback { thread_to_unblock: active_thread }),\n         );\n \n         Ok(())\n     }\n }\n+\n+struct UnblockCallback {\n+    thread_to_unblock: ThreadId,\n+}\n+\n+impl VisitTags for UnblockCallback {\n+    fn visit_tags(&self, _visit: &mut dyn FnMut(SbTag)) {}\n+}\n+\n+impl<'mir, 'tcx: 'mir> MachineCallback<'mir, 'tcx> for UnblockCallback {\n+    fn call(&self, ecx: &mut MiriInterpCx<'mir, 'tcx>) -> InterpResult<'tcx> {\n+        ecx.unblock_thread(self.thread_to_unblock);\n+        Ok(())\n+    }\n+}"}, {"sha": "430dedbc1700c978dfb048d7c61bdaeb04b06c91", "filename": "src/tools/miri/src/shims/tls.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Ftls.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -233,10 +233,17 @@ impl<'tcx> TlsData<'tcx> {\n             data.remove(&thread_id);\n         }\n     }\n+}\n+\n+impl VisitTags for TlsData<'_> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        let TlsData { keys, macos_thread_dtors, next_key: _, dtors_running: _ } = self;\n \n-    pub fn iter(&self, mut visitor: impl FnMut(&Scalar<Provenance>)) {\n-        for scalar in self.keys.values().flat_map(|v| v.data.values()) {\n-            visitor(scalar);\n+        for scalar in keys.values().flat_map(|v| v.data.values()) {\n+            scalar.visit_tags(visit);\n+        }\n+        for (_, scalar) in macos_thread_dtors.values() {\n+            scalar.visit_tags(visit);\n         }\n     }\n }"}, {"sha": "c21e0441cacf4da56c0c8ed093fb135067806d4d", "filename": "src/tools/miri/src/shims/unix/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fforeign_items.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -225,13 +225,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n             \"sysconf\" => {\n                 let [name] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let name = this.read_scalar(name)?.to_i32()?;\n-\n                 // FIXME: Which of these are POSIX, and which are GNU/Linux?\n                 // At least the names seem to all also exist on macOS.\n                 let sysconfs: &[(&str, fn(&MiriInterpCx<'_, '_>) -> Scalar<Provenance>)] = &[\n                     (\"_SC_PAGESIZE\", |this| Scalar::from_int(PAGE_SIZE, this.pointer_size())),\n-                    (\"_SC_NPROCESSORS_CONF\", |this| Scalar::from_int(NUM_CPUS, this.pointer_size())),\n-                    (\"_SC_NPROCESSORS_ONLN\", |this| Scalar::from_int(NUM_CPUS, this.pointer_size())),\n+                    (\"_SC_NPROCESSORS_CONF\", |this| Scalar::from_int(this.machine.num_cpus, this.pointer_size())),\n+                    (\"_SC_NPROCESSORS_ONLN\", |this| Scalar::from_int(this.machine.num_cpus, this.pointer_size())),\n                     // 512 seems to be a reasonable default. The value is not critical, in\n                     // the sense that getpwuid_r takes and checks the buffer length.\n                     (\"_SC_GETPW_R_SIZE_MAX\", |this| Scalar::from_int(512, this.pointer_size()))"}, {"sha": "9713cd9265e55e86e55d9013d910d9a24d49a1ca", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -256,6 +256,12 @@ pub struct FileHandler {\n     handles: BTreeMap<i32, Box<dyn FileDescriptor>>,\n }\n \n+impl VisitTags for FileHandler {\n+    fn visit_tags(&self, _visit: &mut dyn FnMut(SbTag)) {\n+        // All our FileDescriptor do not have any tags.\n+    }\n+}\n+\n impl FileHandler {\n     pub(crate) fn new(mute_stdout_stderr: bool) -> FileHandler {\n         let mut handles: BTreeMap<_, Box<dyn FileDescriptor>> = BTreeMap::new();\n@@ -462,6 +468,16 @@ impl Default for DirHandler {\n     }\n }\n \n+impl VisitTags for DirHandler {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        let DirHandler { streams, next_id: _ } = self;\n+\n+        for dir in streams.values() {\n+            dir.entry.visit_tags(visit);\n+        }\n+    }\n+}\n+\n fn maybe_sync_file(\n     file: &File,\n     writable: bool,"}, {"sha": "5762ee27b84af89b69f5d902bcf29ad77fa5ef47", "filename": "src/tools/miri/src/shims/unix/linux/sync.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Flinux%2Fsync.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -1,4 +1,4 @@\n-use crate::concurrency::thread::Time;\n+use crate::concurrency::thread::{MachineCallback, Time};\n use crate::*;\n use rustc_target::abi::{Align, Size};\n use std::time::SystemTime;\n@@ -189,18 +189,36 @@ pub fn futex<'tcx>(\n                 // Register a timeout callback if a timeout was specified.\n                 // This callback will override the return value when the timeout triggers.\n                 if let Some(timeout_time) = timeout_time {\n+                    struct Callback<'tcx> {\n+                        thread: ThreadId,\n+                        addr_usize: u64,\n+                        dest: PlaceTy<'tcx, Provenance>,\n+                    }\n+\n+                    impl<'tcx> VisitTags for Callback<'tcx> {\n+                        fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+                            let Callback { thread: _, addr_usize: _, dest } = self;\n+                            dest.visit_tags(visit);\n+                        }\n+                    }\n+\n+                    impl<'mir, 'tcx: 'mir> MachineCallback<'mir, 'tcx> for Callback<'tcx> {\n+                        fn call(&self, this: &mut MiriInterpCx<'mir, 'tcx>) -> InterpResult<'tcx> {\n+                            this.unblock_thread(self.thread);\n+                            this.futex_remove_waiter(self.addr_usize, self.thread);\n+                            let etimedout = this.eval_libc(\"ETIMEDOUT\")?;\n+                            this.set_last_error(etimedout)?;\n+                            this.write_scalar(Scalar::from_machine_isize(-1, this), &self.dest)?;\n+\n+                            Ok(())\n+                        }\n+                    }\n+\n                     let dest = dest.clone();\n                     this.register_timeout_callback(\n                         thread,\n                         timeout_time,\n-                        Box::new(move |this| {\n-                            this.unblock_thread(thread);\n-                            this.futex_remove_waiter(addr_usize, thread);\n-                            let etimedout = this.eval_libc(\"ETIMEDOUT\")?;\n-                            this.set_last_error(etimedout)?;\n-                            this.write_scalar(Scalar::from_machine_isize(-1, this), &dest)?;\n-                            Ok(())\n-                        }),\n+                        Box::new(Callback { thread, addr_usize, dest }),\n                     );\n                 }\n             } else {"}, {"sha": "5aafe76ade1d44ffd933af47385a3c132d8878ab", "filename": "src/tools/miri/src/shims/unix/sync.rs", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Fsync.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -3,7 +3,7 @@ use std::time::SystemTime;\n use rustc_hir::LangItem;\n use rustc_middle::ty::{layout::TyAndLayout, query::TyCtxtAt, Ty};\n \n-use crate::concurrency::thread::Time;\n+use crate::concurrency::thread::{MachineCallback, Time};\n use crate::*;\n \n // pthread_mutexattr_t is either 4 or 8 bytes, depending on the platform.\n@@ -851,25 +851,43 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         // We return success for now and override it in the timeout callback.\n         this.write_scalar(Scalar::from_i32(0), dest)?;\n \n-        // Register the timeout callback.\n-        let dest = dest.clone();\n-        this.register_timeout_callback(\n-            active_thread,\n-            timeout_time,\n-            Box::new(move |ecx| {\n+        struct Callback<'tcx> {\n+            active_thread: ThreadId,\n+            mutex_id: MutexId,\n+            id: CondvarId,\n+            dest: PlaceTy<'tcx, Provenance>,\n+        }\n+\n+        impl<'tcx> VisitTags for Callback<'tcx> {\n+            fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+                let Callback { active_thread: _, mutex_id: _, id: _, dest } = self;\n+                dest.visit_tags(visit);\n+            }\n+        }\n+\n+        impl<'mir, 'tcx: 'mir> MachineCallback<'mir, 'tcx> for Callback<'tcx> {\n+            fn call(&self, ecx: &mut MiriInterpCx<'mir, 'tcx>) -> InterpResult<'tcx> {\n                 // We are not waiting for the condvar any more, wait for the\n                 // mutex instead.\n-                reacquire_cond_mutex(ecx, active_thread, mutex_id)?;\n+                reacquire_cond_mutex(ecx, self.active_thread, self.mutex_id)?;\n \n                 // Remove the thread from the conditional variable.\n-                ecx.condvar_remove_waiter(id, active_thread);\n+                ecx.condvar_remove_waiter(self.id, self.active_thread);\n \n                 // Set the return value: we timed out.\n                 let etimedout = ecx.eval_libc(\"ETIMEDOUT\")?;\n-                ecx.write_scalar(etimedout, &dest)?;\n+                ecx.write_scalar(etimedout, &self.dest)?;\n \n                 Ok(())\n-            }),\n+            }\n+        }\n+\n+        // Register the timeout callback.\n+        let dest = dest.clone();\n+        this.register_timeout_callback(\n+            active_thread,\n+            timeout_time,\n+            Box::new(Callback { active_thread, mutex_id, id, dest }),\n         );\n \n         Ok(())"}, {"sha": "c5f0de4307c3a56709c9681af7585fdb427a1d0b", "filename": "src/tools/miri/src/shims/windows/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fwindows%2Fforeign_items.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -163,7 +163,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 )?;\n                 // Set number of processors.\n                 let num_cpus = system_info.offset(field_offsets[6], dword_layout, &this.tcx)?;\n-                this.write_scalar(Scalar::from_int(NUM_CPUS, dword_layout.size), &num_cpus.into())?;\n+                this.write_scalar(\n+                    Scalar::from_int(this.machine.num_cpus, dword_layout.size),\n+                    &num_cpus.into(),\n+                )?;\n             }\n \n             // Thread-local storage"}, {"sha": "2cc7a88704ea39497adb6ef9811cf0419f14e28e", "filename": "src/tools/miri/src/stacked_borrows/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fdiagnostics.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -66,13 +66,20 @@ enum InvalidationCause {\n \n impl Invalidation {\n     fn generate_diagnostic(&self) -> (String, SpanData) {\n-        (\n+        let message = if let InvalidationCause::Retag(_, RetagCause::FnEntry) = self.cause {\n+            // For a FnEntry retag, our Span points at the caller.\n+            // See `DiagnosticCx::log_invalidation`.\n+            format!(\n+                \"{:?} was later invalidated at offsets {:?} by a {} inside this call\",\n+                self.tag, self.range, self.cause\n+            )\n+        } else {\n             format!(\n                 \"{:?} was later invalidated at offsets {:?} by a {}\",\n                 self.tag, self.range, self.cause\n-            ),\n-            self.span.data(),\n-        )\n+            )\n+        };\n+        (message, self.span.data())\n     }\n }\n \n@@ -275,7 +282,7 @@ impl<'span, 'history, 'ecx, 'mir, 'tcx> DiagnosticCx<'span, 'history, 'ecx, 'mir\n         let (range, cause) = match &self.operation {\n             Operation::Retag(RetagOp { cause, range, permission, .. }) => {\n                 if *cause == RetagCause::FnEntry {\n-                    span = self.current_span.get_parent();\n+                    span = self.current_span.get_caller();\n                 }\n                 (*range, InvalidationCause::Retag(permission.unwrap(), *cause))\n             }"}, {"sha": "2888f8e81fb51765f17001b9a3012fb3662b3e22", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -5,6 +5,7 @@ use log::trace;\n use std::cell::RefCell;\n use std::cmp;\n use std::fmt;\n+use std::fmt::Write;\n use std::num::NonZeroU64;\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -71,6 +72,12 @@ pub struct FrameExtra {\n     protected_tags: SmallVec<[SbTag; 2]>,\n }\n \n+impl VisitTags for FrameExtra {\n+    fn visit_tags(&self, _visit: &mut dyn FnMut(SbTag)) {\n+        // `protected_tags` are fine to GC.\n+    }\n+}\n+\n /// Extra per-allocation state.\n #[derive(Clone, Debug)]\n pub struct Stacks {\n@@ -109,6 +116,13 @@ pub struct GlobalStateInner {\n     retag_fields: bool,\n }\n \n+impl VisitTags for GlobalStateInner {\n+    fn visit_tags(&self, _visit: &mut dyn FnMut(SbTag)) {\n+        // The only candidate is base_ptr_tags, and that does not need visiting since we don't ever\n+        // GC the bottommost tag.\n+    }\n+}\n+\n /// We need interior mutable access to the global state.\n pub type GlobalState = RefCell<GlobalStateInner>;\n \n@@ -203,7 +217,7 @@ impl GlobalStateInner {\n         self.base_ptr_tags.get(&id).copied().unwrap_or_else(|| {\n             let tag = self.new_ptr();\n             if self.tracked_pointer_tags.contains(&tag) {\n-                machine.emit_diagnostic(NonHaltingDiagnostic::CreatedPointerTag(tag.0, None));\n+                machine.emit_diagnostic(NonHaltingDiagnostic::CreatedPointerTag(tag.0, None, None));\n             }\n             trace!(\"New allocation {:?} has base tag {:?}\", id, tag);\n             self.base_ptr_tags.try_insert(id, tag).unwrap();\n@@ -513,6 +527,14 @@ impl Stacks {\n     }\n }\n \n+impl VisitTags for Stacks {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        for tag in self.exposed_tags.iter().copied() {\n+            visit(tag);\n+        }\n+    }\n+}\n+\n /// Map per-stack operations to higher-level per-location-range operations.\n impl<'tcx> Stacks {\n     /// Creates a new stack with an initial tag. For diagnostic purposes, we also need to know\n@@ -674,10 +696,26 @@ trait EvalContextPrivExt<'mir: 'ecx, 'tcx: 'mir, 'ecx>: crate::MiriInterpCxExt<'\n                             loc: Option<(AllocId, Size, ProvenanceExtra)>| // alloc_id, base_offset, orig_tag\n          -> InterpResult<'tcx> {\n             let global = this.machine.stacked_borrows.as_ref().unwrap().borrow();\n+            let ty = place.layout.ty;\n             if global.tracked_pointer_tags.contains(&new_tag) {\n+                let mut kind_str = format!(\"{kind}\");\n+                match kind {\n+                    RefKind::Unique { two_phase: false }\n+                        if !ty.is_unpin(this.tcx.at(DUMMY_SP), this.param_env()) =>\n+                    {\n+                        write!(kind_str, \" (!Unpin pointee type {ty})\").unwrap()\n+                    },\n+                    RefKind::Shared\n+                        if !ty.is_freeze(this.tcx.at(DUMMY_SP), this.param_env()) =>\n+                    {\n+                        write!(kind_str, \" (!Freeze pointee type {ty})\").unwrap()\n+                    },\n+                    _ => write!(kind_str, \" (pointee type {ty})\").unwrap(),\n+                };\n                 this.emit_diagnostic(NonHaltingDiagnostic::CreatedPointerTag(\n                     new_tag.0,\n-                    loc.map(|(alloc_id, base_offset, _)| (alloc_id, alloc_range(base_offset, size))),\n+                    Some(kind_str),\n+                    loc.map(|(alloc_id, base_offset, orig_tag)| (alloc_id, alloc_range(base_offset, size), orig_tag)),\n                 ));\n             }\n             drop(global); // don't hold that reference any longer than we have to"}, {"sha": "07c211512f8711938fea153d7758bad49070e82a", "filename": "src/tools/miri/src/stacked_borrows/stack.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fstack.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -43,8 +43,11 @@ impl Stack {\n     pub fn retain(&mut self, tags: &FxHashSet<SbTag>) {\n         let mut first_removed = None;\n \n-        let mut read_idx = 1;\n-        let mut write_idx = 1;\n+        // For stacks with a known bottom, we never consider removing the bottom-most tag, because\n+        // that is the base tag which exists whether or not there are any pointers to the\n+        // allocation.\n+        let mut read_idx = if self.unknown_bottom.is_some() { 0 } else { 1 };\n+        let mut write_idx = read_idx;\n         while read_idx < self.borrows.len() {\n             let left = self.borrows[read_idx - 1];\n             let this = self.borrows[read_idx];"}, {"sha": "5aa653632f395818dc69ca5b13e34436fec63dbf", "filename": "src/tools/miri/src/tag_gc.rs", "status": "modified", "additions": 143, "deletions": 76, "changes": 219, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Ftag_gc.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -1,102 +1,169 @@\n-use crate::*;\n use rustc_data_structures::fx::FxHashSet;\n \n-impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n-pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n-    fn garbage_collect_tags(&mut self) -> InterpResult<'tcx> {\n-        let this = self.eval_context_mut();\n-        // No reason to do anything at all if stacked borrows is off.\n-        if this.machine.stacked_borrows.is_none() {\n-            return Ok(());\n+use crate::*;\n+\n+pub trait VisitTags {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag));\n+}\n+\n+impl<T: VisitTags> VisitTags for Option<T> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        if let Some(x) = self {\n+            x.visit_tags(visit);\n         }\n+    }\n+}\n \n-        let mut tags = FxHashSet::default();\n+impl<T: VisitTags> VisitTags for std::cell::RefCell<T> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        self.borrow().visit_tags(visit)\n+    }\n+}\n+\n+impl VisitTags for SbTag {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        visit(*self)\n+    }\n+}\n \n-        for thread in this.machine.threads.iter() {\n-            if let Some(Scalar::Ptr(\n-                Pointer { provenance: Provenance::Concrete { sb, .. }, .. },\n-                _,\n-            )) = thread.panic_payload\n-            {\n-                tags.insert(sb);\n+impl VisitTags for Provenance {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        if let Provenance::Concrete { sb, .. } = self {\n+            visit(*sb);\n+        }\n+    }\n+}\n+\n+impl VisitTags for Pointer<Provenance> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        let (prov, _offset) = self.into_parts();\n+        prov.visit_tags(visit);\n+    }\n+}\n+\n+impl VisitTags for Pointer<Option<Provenance>> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        let (prov, _offset) = self.into_parts();\n+        prov.visit_tags(visit);\n+    }\n+}\n+\n+impl VisitTags for Scalar<Provenance> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        match self {\n+            Scalar::Ptr(ptr, _) => ptr.visit_tags(visit),\n+            Scalar::Int(_) => (),\n+        }\n+    }\n+}\n+\n+impl VisitTags for Immediate<Provenance> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        match self {\n+            Immediate::Scalar(s) => {\n+                s.visit_tags(visit);\n+            }\n+            Immediate::ScalarPair(s1, s2) => {\n+                s1.visit_tags(visit);\n+                s2.visit_tags(visit);\n             }\n+            Immediate::Uninit => {}\n         }\n+    }\n+}\n+\n+impl VisitTags for MemPlaceMeta<Provenance> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        match self {\n+            MemPlaceMeta::Meta(m) => m.visit_tags(visit),\n+            MemPlaceMeta::None => {}\n+        }\n+    }\n+}\n \n-        self.find_tags_in_tls(&mut tags);\n-        self.find_tags_in_memory(&mut tags);\n-        self.find_tags_in_locals(&mut tags)?;\n+impl VisitTags for MemPlace<Provenance> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        let MemPlace { ptr, meta } = self;\n+        ptr.visit_tags(visit);\n+        meta.visit_tags(visit);\n+    }\n+}\n \n-        self.remove_unreachable_tags(tags);\n+impl VisitTags for MPlaceTy<'_, Provenance> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        (**self).visit_tags(visit)\n+    }\n+}\n \n-        Ok(())\n+impl VisitTags for Place<Provenance> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        match self {\n+            Place::Ptr(p) => p.visit_tags(visit),\n+            Place::Local { .. } => {\n+                // Will be visited as part of the stack frame.\n+            }\n+        }\n+    }\n+}\n+\n+impl VisitTags for PlaceTy<'_, Provenance> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        (**self).visit_tags(visit)\n     }\n+}\n \n-    fn find_tags_in_tls(&mut self, tags: &mut FxHashSet<SbTag>) {\n-        let this = self.eval_context_mut();\n-        this.machine.tls.iter(|scalar| {\n-            if let Scalar::Ptr(Pointer { provenance: Provenance::Concrete { sb, .. }, .. }, _) =\n-                scalar\n-            {\n-                tags.insert(*sb);\n+impl VisitTags for Operand<Provenance> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        match self {\n+            Operand::Immediate(imm) => {\n+                imm.visit_tags(visit);\n             }\n-        });\n+            Operand::Indirect(p) => {\n+                p.visit_tags(visit);\n+            }\n+        }\n     }\n+}\n \n-    fn find_tags_in_memory(&mut self, tags: &mut FxHashSet<SbTag>) {\n-        let this = self.eval_context_mut();\n-        this.memory.alloc_map().iter(|it| {\n+impl VisitTags for Allocation<Provenance, AllocExtra> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        for (_size, prov) in self.provenance().iter() {\n+            prov.visit_tags(visit);\n+        }\n+\n+        self.extra.visit_tags(visit);\n+    }\n+}\n+\n+impl VisitTags for crate::MiriInterpCx<'_, '_> {\n+    fn visit_tags(&self, visit: &mut dyn FnMut(SbTag)) {\n+        // Memory.\n+        self.memory.alloc_map().iter(|it| {\n             for (_id, (_kind, alloc)) in it {\n-                for (_size, prov) in alloc.provenance().iter() {\n-                    if let Provenance::Concrete { sb, .. } = prov {\n-                        tags.insert(*sb);\n-                    }\n-                }\n+                alloc.visit_tags(visit);\n             }\n         });\n+\n+        // And all the other machine values.\n+        self.machine.visit_tags(visit);\n     }\n+}\n \n-    fn find_tags_in_locals(&mut self, tags: &mut FxHashSet<SbTag>) -> InterpResult<'tcx> {\n+impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriInterpCx<'mir, 'tcx> {}\n+pub trait EvalContextExt<'mir, 'tcx: 'mir>: MiriInterpCxExt<'mir, 'tcx> {\n+    fn garbage_collect_tags(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        for frame in this.machine.threads.all_stacks().flatten() {\n-            // Handle the return place of each frame\n-            if let Ok(return_place) = frame.return_place.try_as_mplace() {\n-                if let Some(Provenance::Concrete { sb, .. }) = return_place.ptr.provenance {\n-                    tags.insert(sb);\n-                }\n-            }\n-\n-            for local in frame.locals.iter() {\n-                let LocalValue::Live(value) = local.value else {\n-                continue;\n-            };\n-                match value {\n-                    Operand::Immediate(Immediate::Scalar(Scalar::Ptr(ptr, _))) =>\n-                        if let Provenance::Concrete { sb, .. } = ptr.provenance {\n-                            tags.insert(sb);\n-                        },\n-                    Operand::Immediate(Immediate::ScalarPair(s1, s2)) => {\n-                        if let Scalar::Ptr(ptr, _) = s1 {\n-                            if let Provenance::Concrete { sb, .. } = ptr.provenance {\n-                                tags.insert(sb);\n-                            }\n-                        }\n-                        if let Scalar::Ptr(ptr, _) = s2 {\n-                            if let Provenance::Concrete { sb, .. } = ptr.provenance {\n-                                tags.insert(sb);\n-                            }\n-                        }\n-                    }\n-                    Operand::Indirect(MemPlace { ptr, .. }) => {\n-                        if let Some(Provenance::Concrete { sb, .. }) = ptr.provenance {\n-                            tags.insert(sb);\n-                        }\n-                    }\n-                    Operand::Immediate(Immediate::Uninit)\n-                    | Operand::Immediate(Immediate::Scalar(Scalar::Int(_))) => {}\n-                }\n-            }\n+        // No reason to do anything at all if stacked borrows is off.\n+        if this.machine.stacked_borrows.is_none() {\n+            return Ok(());\n         }\n \n+        let mut tags = FxHashSet::default();\n+        this.visit_tags(&mut |tag| {\n+            tags.insert(tag);\n+        });\n+        self.remove_unreachable_tags(tags);\n+\n         Ok(())\n     }\n "}, {"sha": "2c53c482bf9aaee3aa0a4c8eefbab86517a1ebb1", "filename": "src/tools/miri/test-cargo-miri/Cargo.lock", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest-cargo-miri%2FCargo.lock?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -83,27 +83,27 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.40\"\n+version = \"1.0.44\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dd96a1e8ed2596c337f8eae5f24924ec83f5ad5ab21ea8e455d3566c69fbcaf7\"\n+checksum = \"7bd7356a8122b6c4a24a82b278680c73357984ca2fc79a0f9fa6dea7dced7c58\"\n dependencies = [\n  \"unicode-ident\",\n ]\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.20\"\n+version = \"1.0.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3bcdf212e9776fbcb2d23ab029360416bb1706b1aea2d1a5ba002727cbcab804\"\n+checksum = \"bbe448f377a7d6961e30f5955f9b8d106c3f5e449d493ee1b125c1d43c2b5179\"\n dependencies = [\n  \"proc-macro2\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.137\"\n+version = \"1.0.145\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"1f26faba0c3959972377d3b2d306ee9f71faee9714294e41bb777f83f88578be\"\n+checksum = \"81fa1584d3d1bcacd84c277a0dfe21f5b0f6accf4a23d04d4c6d61f1af522b4c\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -119,9 +119,9 @@ dependencies = [\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.98\"\n+version = \"1.0.101\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c50aef8a904de4c23c788f104b7dddc7d6f79c647c7c8ce4cc8f73eb0ca773dd\"\n+checksum = \"e90cde112c4b9690b8cbe810cba9ddd8bc1d7472e2cae317b69e9438c1cba7d2\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -130,6 +130,6 @@ dependencies = [\n \n [[package]]\n name = \"unicode-ident\"\n-version = \"1.0.1\"\n+version = \"1.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5bd2fe26506023ed7b5e1e315add59d6f584c621d037f9368fea9cfb988f368c\"\n+checksum = \"dcc811dc4066ac62f84f11307873c4850cb653bfa9b1719cee2bd2204a4bc5dd\""}, {"sha": "78cf9a8d51bcb2475504ca27e3a8ffcd0d5e37f5", "filename": "src/tools/miri/test_dependencies/Cargo.lock", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftest_dependencies%2FCargo.lock?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -16,9 +16,9 @@ checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n \n [[package]]\n name = \"bytes\"\n-version = \"1.1.0\"\n+version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c4872d67bab6358e59559027aa3b9157c53d9358c51423c17554809a8858e0f8\"\n+checksum = \"ec8a7b6a70fde80372154c65702f00a0f56f3e1c36abbc6c440484be248856db\"\n \n [[package]]\n name = \"cfg-if\"\n@@ -59,15 +59,15 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.126\"\n+version = \"0.2.133\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"349d5a591cd28b49e1d1037471617a32ddcda5731b99419008085f72d5a53836\"\n+checksum = \"c0f80d65747a3e43d1596c7c5492d95d5edddaabd45a7fcdb02b95f644164966\"\n \n [[package]]\n name = \"lock_api\"\n-version = \"0.4.7\"\n+version = \"0.4.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"327fa5b6a6940e4699ec49a9beae1ea4845c6bab9314e4f84ac68742139d8c53\"\n+checksum = \"435011366fe56583b16cf956f9df0095b405b82d76425bc8981c0e22e60ec4df\"\n dependencies = [\n  \"autocfg\",\n  \"scopeguard\",\n@@ -123,12 +123,6 @@ dependencies = [\n  \"libc\",\n ]\n \n-[[package]]\n-name = \"once_cell\"\n-version = \"1.13.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"18a6dbe30758c9f83eb00cbea4ac95966305f5a7772f3f42ebfc7fc7eddbd8e1\"\n-\n [[package]]\n name = \"page_size\"\n version = \"0.4.2\"\n@@ -176,18 +170,18 @@ checksum = \"eb9f9e6e233e5c4a35559a617bf40a4ec447db2e84c20b55a6f83167b7e57872\"\n \n [[package]]\n name = \"proc-macro2\"\n-version = \"1.0.40\"\n+version = \"1.0.45\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dd96a1e8ed2596c337f8eae5f24924ec83f5ad5ab21ea8e455d3566c69fbcaf7\"\n+checksum = \"3edcd08cf4fea98d1ae6c9ddd3b8ccb1acac7c3693d62625969a7daa04a2ae36\"\n dependencies = [\n  \"unicode-ident\",\n ]\n \n [[package]]\n name = \"quote\"\n-version = \"1.0.20\"\n+version = \"1.0.21\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3bcdf212e9776fbcb2d23ab029360416bb1706b1aea2d1a5ba002727cbcab804\"\n+checksum = \"bbe448f377a7d6961e30f5955f9b8d106c3f5e449d493ee1b125c1d43c2b5179\"\n dependencies = [\n  \"proc-macro2\",\n ]\n@@ -215,18 +209,18 @@ dependencies = [\n \n [[package]]\n name = \"rand_core\"\n-version = \"0.6.3\"\n+version = \"0.6.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d34f1408f55294453790c48b2f1ebbb1c5b4b7563eb1f418bcfcfdbb06ebb4e7\"\n+checksum = \"ec0be4795e2f6a28069bec0b5ff3e2ac9bafc99e6a9a7dc3547996c5c816922c\"\n dependencies = [\n  \"getrandom 0.2.7\",\n ]\n \n [[package]]\n name = \"redox_syscall\"\n-version = \"0.2.13\"\n+version = \"0.2.16\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"62f25bc4c7e55e0b0b7a1d43fb893f4fa1361d0abe38b9ce4f323c2adfe6ef42\"\n+checksum = \"fb5a58c1855b4b6819d59012155603f0b22ad30cad752600aadfcb695265519a\"\n dependencies = [\n  \"bitflags\",\n ]\n@@ -254,19 +248,19 @@ checksum = \"2fd0db749597d91ff862fd1d55ea87f7855a744a8425a64695b6fca237d1dad1\"\n \n [[package]]\n name = \"socket2\"\n-version = \"0.4.4\"\n+version = \"0.4.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"66d72b759436ae32898a2af0a14218dbf55efde3feeb170eb623637db85ee1e0\"\n+checksum = \"02e2d2db9033d13a1567121ddd7a095ee144db4e1ca1b1bda3419bc0da294ebd\"\n dependencies = [\n  \"libc\",\n  \"winapi\",\n ]\n \n [[package]]\n name = \"syn\"\n-version = \"1.0.98\"\n+version = \"1.0.101\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c50aef8a904de4c23c788f104b7dddc7d6f79c647c7c8ce4cc8f73eb0ca773dd\"\n+checksum = \"e90cde112c4b9690b8cbe810cba9ddd8bc1d7472e2cae317b69e9438c1cba7d2\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n@@ -275,16 +269,16 @@ dependencies = [\n \n [[package]]\n name = \"tokio\"\n-version = \"1.19.2\"\n+version = \"1.21.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c51a52ed6686dd62c320f9b89299e9dfb46f730c7a48e635c19f21d116cb1439\"\n+checksum = \"a9e03c497dc955702ba729190dc4aac6f2a0ce97f913e5b1b5912fc5039d9099\"\n dependencies = [\n+ \"autocfg\",\n  \"bytes\",\n  \"libc\",\n  \"memchr\",\n  \"mio\",\n  \"num_cpus\",\n- \"once_cell\",\n  \"parking_lot\",\n  \"pin-project-lite\",\n  \"signal-hook-registry\",\n@@ -306,9 +300,9 @@ dependencies = [\n \n [[package]]\n name = \"unicode-ident\"\n-version = \"1.0.1\"\n+version = \"1.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5bd2fe26506023ed7b5e1e315add59d6f584c621d037f9368fea9cfb988f368c\"\n+checksum = \"dcc811dc4066ac62f84f11307873c4850cb653bfa9b1719cee2bd2204a4bc5dd\"\n \n [[package]]\n name = \"wasi\""}, {"sha": "4789d22eb4f962ac1ef625f7b6b1e41c89c536bc", "filename": "src/tools/miri/tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -213,7 +213,7 @@ fn main() -> Result<()> {\n     ui(Mode::Fail { require_patterns: true }, \"tests/fail\", WithDependencies)?;\n     if cfg!(target_os = \"linux\") {\n         ui(Mode::Pass, \"tests/extern-so/pass\", WithoutDependencies)?;\n-        ui(Mode::Fail { require_patterns: true }, \"tests/extern-so/fail\", WithDependencies)?;\n+        ui(Mode::Fail { require_patterns: true }, \"tests/extern-so/fail\", WithoutDependencies)?;\n     }\n \n     Ok(())"}, {"sha": "eb6b01fc6b12bfa02690ee435ce24717923aecd6", "filename": "src/tools/miri/tests/fail/stacked_borrows/aliasing_mut3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Faliasing_mut3.stderr?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x4]\n    |\n LL |     safe_raw(xraw, xshr);\n    |                    ^^^^\n-help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry retag\n+help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry retag inside this call\n   --> $DIR/aliasing_mut3.rs:LL:CC\n    |\n LL |     safe_raw(xraw, xshr);"}, {"sha": "e81411bbdd86cf86122907b831d9bf7fa4bedfff", "filename": "src/tools/miri/tests/fail/stacked_borrows/fnentry_invalidation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation.stderr?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -14,7 +14,7 @@ help: <TAG> was created by a SharedReadWrite retag at offsets [0x0..0x4]\n    |\n LL |     let z = &mut x as *mut i32;\n    |             ^^^^^^\n-help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry retag\n+help: <TAG> was later invalidated at offsets [0x0..0x4] by a Unique FnEntry retag inside this call\n   --> $DIR/fnentry_invalidation.rs:LL:CC\n    |\n LL |     x.do_bad();"}, {"sha": "dc51a8a8ac6c70d4ad0bd82ac65c05fe61b2bbb9", "filename": "src/tools/miri/tests/fail/stacked_borrows/fnentry_invalidation2.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for https://github.com/rust-lang/miri/issues/2536\n+// This tests that we don't try to back too far up the stack when selecting a span to report.\n+// We should display the as_mut_ptr() call as the location of the invalidation, not the call to\n+// inner\n+\n+struct Thing<'a> {\n+    sli: &'a mut [i32],\n+}\n+\n+fn main() {\n+    let mut t = Thing { sli: &mut [0, 1, 2] };\n+    let ptr = t.sli.as_ptr();\n+    inner(&mut t);\n+    unsafe {\n+        let _oof = *ptr; //~ ERROR: /read access .* tag does not exist in the borrow stack/\n+    }\n+}\n+\n+fn inner(t: &mut Thing) {\n+    let _ = t.sli.as_mut_ptr();\n+}"}, {"sha": "d6d0084fa2a77cf49dd6dad50fa703b9fa7aebb8", "filename": "src/tools/miri/tests/fail/stacked_borrows/fnentry_invalidation2.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Ffnentry_invalidation2.stderr?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -0,0 +1,28 @@\n+error: Undefined Behavior: attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+  --> $DIR/fnentry_invalidation2.rs:LL:CC\n+   |\n+LL |         let _oof = *ptr;\n+   |                    ^^^^\n+   |                    |\n+   |                    attempting a read access using <TAG> at ALLOC[0x0], but that tag does not exist in the borrow stack for this location\n+   |                    this error occurs as part of an access at ALLOC[0x0..0x4]\n+   |\n+   = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n+   = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information\n+help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0xc]\n+  --> $DIR/fnentry_invalidation2.rs:LL:CC\n+   |\n+LL |     let ptr = t.sli.as_ptr();\n+   |               ^^^^^^^^^^^^^^\n+help: <TAG> was later invalidated at offsets [0x0..0xc] by a Unique FnEntry retag inside this call\n+  --> $DIR/fnentry_invalidation2.rs:LL:CC\n+   |\n+LL |     let _ = t.sli.as_mut_ptr();\n+   |             ^^^^^^^^^^^^^^^^^^\n+   = note: BACKTRACE:\n+   = note: inside `main` at $DIR/fnentry_invalidation2.rs:LL:CC\n+\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+\n+error: aborting due to previous error\n+"}, {"sha": "137fa510249755ee922f3c11323b64f154957ac4", "filename": "src/tools/miri/tests/pass/available-parallelism-miri-num-cpus.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Favailable-parallelism-miri-num-cpus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27579a214dc2a918e67bffb51a0825005e8bd42e/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Favailable-parallelism-miri-num-cpus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Favailable-parallelism-miri-num-cpus.rs?ref=27579a214dc2a918e67bffb51a0825005e8bd42e", "patch": "@@ -0,0 +1,8 @@\n+//@compile-flags: -Zmiri-num-cpus=1024\n+\n+use std::num::NonZeroUsize;\n+use std::thread::available_parallelism;\n+\n+fn main() {\n+    assert_eq!(available_parallelism().unwrap(), NonZeroUsize::new(1024).unwrap());\n+}"}]}