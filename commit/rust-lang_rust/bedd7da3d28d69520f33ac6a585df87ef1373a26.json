{"sha": "bedd7da3d28d69520f33ac6a585df87ef1373a26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlZGQ3ZGEzZDI4ZDY5NTIwZjMzYWM2YTU4NWRmODdlZjEzNzNhMjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-09T03:36:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-09T03:36:12Z"}, "message": "Auto merge of #41846 - frewsxcv:rollup, r=frewsxcv\n\nRollup of 8 pull requests\n\n- Successful merges: #41293, #41520, #41827, #41828, #41833, #41836, #41838, #41842\n- Failed merges:", "tree": {"sha": "78b0129c76c87b9ef98d7b7f83a77083a073720a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78b0129c76c87b9ef98d7b7f83a77083a073720a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bedd7da3d28d69520f33ac6a585df87ef1373a26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bedd7da3d28d69520f33ac6a585df87ef1373a26", "html_url": "https://github.com/rust-lang/rust/commit/bedd7da3d28d69520f33ac6a585df87ef1373a26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bedd7da3d28d69520f33ac6a585df87ef1373a26/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf", "html_url": "https://github.com/rust-lang/rust/commit/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf"}, {"sha": "f21209f442ef29f2d77464d2ba37dcec154fbfe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f21209f442ef29f2d77464d2ba37dcec154fbfe2", "html_url": "https://github.com/rust-lang/rust/commit/f21209f442ef29f2d77464d2ba37dcec154fbfe2"}], "stats": {"total": 440, "additions": 381, "deletions": 59}, "files": [{"sha": "3dd8231a49f69acb68ec78dc5bbaccf25b18e49e", "filename": "src/Cargo.lock", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -411,16 +411,16 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"rls-data\"\n-version = \"0.1.0\"\n+version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rls-span 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rls-span\"\n-version = \"0.1.0\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -719,8 +719,8 @@ name = \"rustc_save_analysis\"\n version = \"0.0.0\"\n dependencies = [\n  \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-data 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rls-span 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-data 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n  \"rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_typeck 0.0.0\",\n@@ -1021,8 +1021,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum quick-error 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0aad603e8d7fb67da22dbdf1f4b826ce8829e406124109e73cf1b2454b93a71c\"\n \"checksum regex 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4278c17d0f6d62dfef0ab00028feb45bd7d2102843f80763474eeb1be8a10c01\"\n \"checksum regex-syntax 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2f9191b1f57603095f105d317e375d19b1c9c5c3185ea9633a99a6dcbed04457\"\n-\"checksum rls-data 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"af1dfff00189fd7b78edb9af131b0de703676c04fa8126aed77fd2c586775a4d\"\n-\"checksum rls-span 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8656f7b850ac85fb204ef94318c641bbb15a32766e12f9a589a23e4c0fbc38db\"\n+\"checksum rls-data 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc4277ce3c57f456b11fe3145b181a844a25201bab5cbaa1978457e6e2f27d47\"\n+\"checksum rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d7c7046dc6a92f2ae02ed302746db4382e75131b9ce20ce967259f6b5867a6a\"\n \"checksum rustc-serialize 0.3.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"684ce48436d6465300c9ea783b6b14c4361d6b8dcbb1375b486a69cc19e2dfb0\"\n \"checksum serde 0.9.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a702319c807c016e51f672e5c77d6f0b46afddd744b5e437d6b8436b888b458f\"\n \"checksum serde_json 0.9.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dbc45439552eb8fb86907a2c41c1fd0ef97458efb87ff7f878db466eb581824e\""}, {"sha": "323d49e46912001c9610ddf3357e1acb80a057e3", "filename": "src/doc/rustc-ux-guidelines.md", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Fdoc%2Frustc-ux-guidelines.md", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Fdoc%2Frustc-ux-guidelines.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-ux-guidelines.md?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -1,14 +1,14 @@\n % Rustc UX guidelines\n \n Don't forget the user. Whether human or another program, such as an IDE, a\n-good user experience with the compiler goes a long way into making developer\n-lives better. We don't want users to be baffled by compiler output or\n+good user experience with the compiler goes a long way toward making developers'\n+lives better. We do not want users to be baffled by compiler output or\n learn arcane patterns to compile their program.\n \n ## Error, Warning, Help, Note Messages\n \n-When the compiler detects a problem, it can emit either an error, warning,\n-note, or help message.\n+When the compiler detects a problem, it can emit one of the following: an error, a warning,\n+a note, or a help message.\n \n An `error` is emitted when the compiler detects a problem that makes it unable\n  to compile the program, either because the program is invalid or the\n@@ -17,11 +17,11 @@ An `error` is emitted when the compiler detects a problem that makes it unable\n A `warning` is emitted when the compiler detects something odd about a\n program. For instance, dead code and unused `Result` values.\n \n-A `help` is emitted following either an `error` or `warning` giving extra\n+A `help` message is emitted following an `error` or `warning` to give additional\n information to the user about how to solve their problem.\n \n-A `note` is for identifying additional circumstances and parts of the code\n-that lead to a warning or error. For example, the borrow checker will note any\n+A `note` is emitted to identify additional circumstances and parts of the code\n+that caused the warning or error. For example, the borrow checker will note any\n previous conflicting borrows.\n \n * Write in plain simple English. If your message, when shown on a \u2013 possibly"}, {"sha": "e23003bf772f2d284b33ad59ca63db7d16ddcd9d", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -102,7 +102,7 @@ impl<'tcx> fmt::Debug for Kind<'tcx> {\n         } else if let Some(r) = self.as_region() {\n             write!(f, \"{:?}\", r)\n         } else {\n-            write!(f, \"<unknwon @ {:p}>\", self.ptr.get() as *const ())\n+            write!(f, \"<unknown @ {:p}>\", self.ptr.get() as *const ())\n         }\n     }\n }"}, {"sha": "db8c9ac306bba718ff4ff9c6a64050289bdda97b", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -388,6 +388,14 @@ impl Handler {\n     pub fn span_note_without_error<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Note);\n     }\n+    pub fn span_note_diag<'a>(&'a self,\n+                              sp: Span,\n+                              msg: &str)\n+                              -> DiagnosticBuilder<'a> {\n+        let mut db = DiagnosticBuilder::new(self, Note, msg);\n+        db.set_span(sp);\n+        db\n+    }\n     pub fn span_unimpl<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n         self.span_bug(sp, &format!(\"unimplemented {}\", msg));\n     }"}, {"sha": "715a769158bc3fb832b0613d52f996068cb6eda6", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -692,6 +692,82 @@ impl EarlyLintPass for DeprecatedAttr {\n     }\n }\n \n+declare_lint! {\n+    pub ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n+    Warn,\n+    \"floating-point literals cannot be used in patterns\"\n+}\n+\n+/// Checks for floating point literals in patterns.\n+#[derive(Clone)]\n+pub struct IllegalFloatLiteralPattern;\n+\n+impl LintPass for IllegalFloatLiteralPattern {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN)\n+    }\n+}\n+\n+fn fl_lit_check_expr(cx: &EarlyContext, expr: &ast::Expr) {\n+    use self::ast::{ExprKind, LitKind};\n+    match expr.node {\n+        ExprKind::Lit(ref l) => {\n+            match l.node {\n+                LitKind::FloatUnsuffixed(..) |\n+                LitKind::Float(..) => {\n+                    cx.span_lint(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN,\n+                                 l.span,\n+                                 \"floating-point literals cannot be used in patterns\");\n+                    error!(\"span mc spanspam\");\n+                    },\n+                _ => (),\n+            }\n+        }\n+        // These may occur in patterns\n+        // and can maybe contain float literals\n+        ExprKind::Unary(_, ref f) => fl_lit_check_expr(cx, f),\n+        // These may occur in patterns\n+        // and can't contain float literals\n+        ExprKind::Path(..) => (),\n+        // If something unhandled is encountered, we need to expand the\n+        // search or ignore more ExprKinds.\n+        _ => span_bug!(expr.span, \"Unhandled expression {:?} in float lit pattern lint\",\n+                       expr.node),\n+    }\n+}\n+\n+impl EarlyLintPass for IllegalFloatLiteralPattern {\n+    fn check_pat(&mut self, cx: &EarlyContext, pat: &ast::Pat) {\n+        use self::ast::PatKind;\n+        pat.walk(&mut |p| {\n+            match p.node {\n+                // Wildcard patterns and paths are uninteresting for the lint\n+                PatKind::Wild |\n+                PatKind::Path(..) => (),\n+\n+                // The walk logic recurses inside these\n+                PatKind::Ident(..) |\n+                PatKind::Struct(..) |\n+                PatKind::Tuple(..) |\n+                PatKind::TupleStruct(..) |\n+                PatKind::Ref(..) |\n+                PatKind::Box(..) |\n+                PatKind::Slice(..) => (),\n+\n+                // Extract the expressions and check them\n+                PatKind::Lit(ref e) => fl_lit_check_expr(cx, e),\n+                PatKind::Range(ref st, ref en, _) => {\n+                    fl_lit_check_expr(cx, st);\n+                    fl_lit_check_expr(cx, en);\n+                },\n+\n+                PatKind::Mac(_) => bug!(\"lint must run post-expansion\"),\n+            }\n+            true\n+        });\n+    }\n+}\n+\n declare_lint! {\n     pub UNCONDITIONAL_RECURSION,\n     Warn,"}, {"sha": "53ea3a8333f2d761c8027d1d9295ac87829d7d1d", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -113,6 +113,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        UnusedParens,\n                        UnusedImportBraces,\n                        AnonymousParameters,\n+                       IllegalFloatLiteralPattern,\n                        );\n \n     add_early_builtin_with_new!(sess,\n@@ -201,6 +202,10 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             id: LintId::of(ILLEGAL_FLOATING_POINT_CONSTANT_PATTERN),\n             reference: \"issue #36890 <https://github.com/rust-lang/rust/issues/36890>\",\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(ILLEGAL_FLOATING_POINT_LITERAL_PATTERN),\n+            reference: \"issue #41620 <https://github.com/rust-lang/rust/issues/41620>\",\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(ILLEGAL_STRUCT_OR_ENUM_CONSTANT_PATTERN),\n             reference: \"issue #36891 <https://github.com/rust-lang/rust/issues/36891>\","}, {"sha": "6d04bff82829ae7c763822c1cc6219ccef2c43ac", "filename": "src/librustc_save_analysis/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibrustc_save_analysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibrustc_save_analysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2FCargo.toml?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -14,7 +14,7 @@ rustc = { path = \"../librustc\" }\n rustc_typeck = { path = \"../librustc_typeck\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-rls-data = \"0.1\"\n-rls-span = \"0.1\"\n+rls-data = \"0.3\"\n+rls-span = \"0.4\"\n # FIXME(#40527) should move rustc serialize out of tree\n rustc-serialize = \"0.3\""}, {"sha": "fb3be849319929e8b38813e3d3fa60900ff654a1", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -126,6 +126,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 (sig, kind)\n             }\n             ty::TyInfer(ty::TyVar(vid)) => self.deduce_expectations_from_obligations(vid),\n+            ty::TyFnPtr(sig) => (Some(sig.skip_binder().clone()), Some(ty::ClosureKind::Fn)),\n             _ => (None, None),\n         }\n     }"}, {"sha": "a9e82a0601feeafe8784bba5458cb49e51271399", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -433,22 +433,11 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         for (i, &expr) in exprs.iter().rev().enumerate() {\n             debug!(\"convert_lvalue_derefs_to_mutable: i={} expr={:?}\", i, expr);\n \n-            // Fix up the adjustment.\n-            let autoderefs = match self.tables.borrow_mut().adjustments.get_mut(&expr.id) {\n-                Some(&mut Adjustment {\n-                    kind: Adjust::DerefRef { autoderefs, ref mut autoref, .. }, ref mut target\n-                }) => {\n-                    if let &mut Some(AutoBorrow::Ref(_, ref mut mutbl)) = autoref {\n-                        *mutbl = hir::Mutability::MutMutable;\n-                        *target = match target.sty {\n-                            ty::TyRef(r, ty::TypeAndMut { ty, .. }) =>\n-                                self.tcx.mk_ref(r, ty::TypeAndMut { ty, mutbl: *mutbl }),\n-                            _ => span_bug!(expr.span, \"AutoBorrow::Ref resulted in non-ref {:?}\",\n-                                           target)\n-                        };\n-                    }\n-                    autoderefs\n-                }\n+            // Fix up the autoderefs. Autorefs can only occur immediately preceding\n+            // overloaded lvalue ops, and will be fixed by them in order to get\n+            // the correct region.\n+            let autoderefs = match self.tables.borrow().adjustments.get(&expr.id) {\n+                Some(&Adjustment { kind: Adjust::DerefRef { autoderefs, .. }, .. }) => autoderefs,\n                 Some(_) | None => 0\n             };\n \n@@ -502,10 +491,35 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n \n         let method = self.try_overloaded_lvalue_op(\n             expr.span, None, base_ty, arg_tys, PreferMutLvalue, op);\n-        let ok = method.expect(\"re-trying op failed\");\n+        let ok = match method {\n+            Some(method) => method,\n+            None => return self.tcx.sess.delay_span_bug(expr.span, \"re-trying op failed\")\n+        };\n         let method = self.register_infer_ok_obligations(ok);\n         debug!(\"convert_lvalue_op_to_mutable: method={:?}\", method);\n         self.tables.borrow_mut().method_map.insert(method_call, method);\n+\n+        // Convert the autoref in the base expr to mutable with the correct\n+        // region and mutability.\n+        if let Some(&mut Adjustment {\n+            ref mut target, kind: Adjust::DerefRef {\n+                autoref: Some(AutoBorrow::Ref(ref mut r, ref mut mutbl)), ..\n+            }\n+        }) = self.tables.borrow_mut().adjustments.get_mut(&base_expr.id) {\n+            debug!(\"convert_lvalue_op_to_mutable: converting autoref of {:?}\", target);\n+\n+            // extract method return type, which will be &mut T;\n+            // all LB regions should have been instantiated during method lookup\n+            let method_sig = self.tcx.no_late_bound_regions(&method.ty.fn_sig()).unwrap();\n+\n+            *target = method_sig.inputs()[0];\n+            if let ty::TyRef(r_, mt) = target.sty {\n+                *r = r_;\n+                *mutbl = mt.mutbl;\n+            } else {\n+                span_bug!(expr.span, \"input to lvalue op is not a ref?\");\n+            }\n+        }\n     }\n \n     ///////////////////////////////////////////////////////////////////////////"}, {"sha": "f731c5abdd6a1f7e0ad275f45460e047e1f5779f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -24,6 +24,7 @@ use ptr::P;\n use symbol::Symbol;\n use util::small_vector::SmallVector;\n \n+use std::collections::HashMap;\n use std::path::PathBuf;\n use std::rc::Rc;\n use std::default::Default;\n@@ -643,6 +644,7 @@ pub struct ExtCtxt<'a> {\n     pub resolver: &'a mut Resolver,\n     pub resolve_err_count: usize,\n     pub current_expansion: ExpansionData,\n+    pub expansions: HashMap<Span, Vec<String>>,\n }\n \n impl<'a> ExtCtxt<'a> {\n@@ -662,6 +664,7 @@ impl<'a> ExtCtxt<'a> {\n                 module: Rc::new(ModuleData { mod_path: Vec::new(), directory: PathBuf::new() }),\n                 directory_ownership: DirectoryOwnership::Owned,\n             },\n+            expansions: HashMap::new(),\n         }\n     }\n \n@@ -765,6 +768,15 @@ impl<'a> ExtCtxt<'a> {\n     pub fn span_bug(&self, sp: Span, msg: &str) -> ! {\n         self.parse_sess.span_diagnostic.span_bug(sp, msg);\n     }\n+    pub fn trace_macros_diag(&self) {\n+        for (sp, notes) in self.expansions.iter() {\n+            let mut db = self.parse_sess.span_diagnostic.span_note_diag(*sp, &\"trace_macro\");\n+            for note in notes {\n+                db.note(&note);\n+            }\n+            db.emit();\n+        }\n+    }\n     pub fn bug(&self, msg: &str) -> ! {\n         self.parse_sess.span_diagnostic.bug(msg);\n     }"}, {"sha": "a8aa103f80a8e4a7c0f150d59ebfd2a427cd7517", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -231,7 +231,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             },\n             _ => unreachable!(),\n         };\n-\n+        self.cx.trace_macros_diag();\n         krate\n     }\n "}, {"sha": "f959ccc989e2e9e9d55643966f0fe4648b8bd17b", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -27,8 +27,8 @@ use symbol::Symbol;\n use tokenstream::{TokenStream, TokenTree};\n \n use std::cell::RefCell;\n-use std::collections::{HashMap};\n-use std::collections::hash_map::{Entry};\n+use std::collections::HashMap;\n+use std::collections::hash_map::Entry;\n use std::rc::Rc;\n \n pub struct ParserAnyMacro<'a> {\n@@ -85,15 +85,17 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n }\n \n /// Given `lhses` and `rhses`, this is the new macro we create\n-fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n+fn generic_extension<'cx>(cx: &'cx mut ExtCtxt,\n                           sp: Span,\n                           name: ast::Ident,\n                           arg: TokenStream,\n                           lhses: &[quoted::TokenTree],\n                           rhses: &[quoted::TokenTree])\n                           -> Box<MacResult+'cx> {\n     if cx.trace_macros() {\n-        println!(\"{}! {{ {} }}\", name, arg);\n+        let sp = sp.macro_backtrace().last().map(|trace| trace.call_site).unwrap_or(sp);\n+        let mut values: &mut Vec<String> = cx.expansions.entry(sp).or_insert(vec![]);\n+        values.push(format!(\"expands to `{}! {{ {} }}`\", name, arg));\n     }\n \n     // Which arm's failure should we report? (the one furthest along)"}, {"sha": "ded1f0b599a61d6ba5bd6ae274f15d625d0979a6", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -504,7 +504,7 @@ impl<'a> StringReader<'a> {\n                     self.bump();\n \n                     // line comments starting with \"///\" or \"//!\" are doc-comments\n-                    let doc_comment = self.ch_is('/') || self.ch_is('!');\n+                    let doc_comment = (self.ch_is('/') && !self.nextch_is('/')) || self.ch_is('!');\n                     let start_bpos = self.pos - BytePos(2);\n \n                     while !self.is_eof() {"}, {"sha": "10c99703a97ff8dac71a52a61c3d8853a80c2acc", "filename": "src/test/compile-fail/closure-no-fn-1.rs", "status": "renamed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-1.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -15,10 +15,4 @@ fn main() {\n     let mut a = 0u8;\n     let foo: fn(u8) -> u8 = |v: u8| { a += v; a };\n     //~^ ERROR mismatched types\n-    let b = 0u8;\n-    let bar: fn() -> u8 = || { b };\n-    //~^ ERROR mismatched types\n-    let baz: fn() -> u8 = || { b } as fn() -> u8;\n-    //~^ ERROR mismatched types\n-    //~^^ ERROR non-scalar cast\n }", "previous_filename": "src/test/compile-fail/closure-no-fn.rs"}, {"sha": "a6438bb5f241847845d31fffc4a120f28a415858", "filename": "src/test/compile-fail/closure-no-fn-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-2.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ensure that capturing closures are never coerced to fns\n+// Especially interesting as non-capturing closures can be.\n+\n+fn main() {\n+    let b = 0u8;\n+    let bar: fn() -> u8 = || { b };\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "85dbc899208f6f95e7b3c8096a4122d0982355f8", "filename": "src/test/compile-fail/closure-no-fn-3.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-no-fn-3.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Ensure that capturing closures are never coerced to fns\n+// Especially interesting as non-capturing closures can be.\n+\n+fn main() {\n+    let b = 0u8;\n+    let baz: fn() -> u8 = (|| { b }) as fn() -> u8;\n+    //~^ ERROR non-scalar cast\n+}"}, {"sha": "3ccee0f12becb63e1f84cf4bd89be3109253a3c5", "filename": "src/test/compile-fail/issue-40000.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fissue-40000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fissue-40000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-40000.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -11,8 +11,7 @@\n #![feature(closure_to_fn_coercion)]\n \n fn main() {\n-    let bar: fn(&mut u32) = |_| {}; //~ ERROR mismatched types\n-    //~| expected concrete lifetime, found bound lifetime parameter\n+    let bar: fn(&mut u32) = |_| {};\n \n     fn foo(x: Box<Fn(&i32)>) {}\n     let bar = Box::new(|x: &i32| {}) as Box<Fn(_)>;"}, {"sha": "a4585f7bac7da535adaa7729a3f1a1c25b8d89a0", "filename": "src/test/compile-fail/issue-41255.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fissue-41255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fissue-41255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41255.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Matching against float literals should result in a linter error\n+\n+#![feature(slice_patterns)]\n+#![feature(exclusive_range_pattern)]\n+#![allow(unused)]\n+#![forbid(illegal_floating_point_literal_pattern)]\n+\n+fn main() {\n+    let x = 42.0;\n+    match x {\n+        5.0 => {}, //~ ERROR floating-point literals cannot be used\n+                   //~| WARNING hard error\n+        5.0f32 => {}, //~ ERROR floating-point literals cannot be used\n+                      //~| WARNING hard error\n+        -5.0 => {}, //~ ERROR floating-point literals cannot be used\n+                    //~| WARNING hard error\n+        1.0 .. 33.0 => {}, //~ ERROR floating-point literals cannot be used\n+                           //~| WARNING hard error\n+                           //~| ERROR floating-point literals cannot be used\n+                           //~| WARNING hard error\n+        39.0 ... 70.0 => {}, //~ ERROR floating-point literals cannot be used\n+                             //~| WARNING hard error\n+                             //~| ERROR floating-point literals cannot be used\n+                             //~| WARNING hard error\n+        _ => {},\n+    };\n+    let y = 5.0;\n+    // Same for tuples\n+    match (x, 5) {\n+        (3.14, 1) => {}, //~ ERROR floating-point literals cannot be used\n+                         //~| WARNING hard error\n+                         //~| ERROR floating-point literals cannot be used\n+                         //~| WARNING hard error\n+        _ => {},\n+    }\n+    // Or structs\n+    struct Foo { x: f32 };\n+    match (Foo { x }) {\n+        Foo { x: 2.0 } => {}, //~ ERROR floating-point literals cannot be used\n+                              //~| WARNING hard error\n+                              //~| ERROR floating-point literals cannot be used\n+                              //~| WARNING hard error\n+        _ => {},\n+    }\n+}"}, {"sha": "c8cd9209bceb4ef6ddc7e60189becf5b61c6073a", "filename": "src/test/compile-fail/issue-41726.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fissue-41726.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fissue-41726.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41726.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::collections::HashMap;\n+fn main() {\n+    let things: HashMap<String, Vec<String>> = HashMap::new();\n+    for src in things.keys() {\n+        things[src.as_str()].sort(); //~ ERROR cannot borrow immutable\n+    }\n+}"}, {"sha": "067531e036ad810f0f23a1c5a9e5235e9a6302b2", "filename": "src/test/compile-fail/issue-41742.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fissue-41742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fissue-41742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41742.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::{Index, IndexMut};\n+\n+struct S;\n+struct H;\n+\n+impl S {\n+    fn f(&mut self) {}\n+}\n+\n+impl Index<u32> for H {\n+    type Output = S;\n+    fn index(&self, index: u32) -> &S {\n+        unimplemented!()\n+    }\n+}\n+\n+impl IndexMut<u32> for H {\n+    fn index_mut(&mut self, index: u32) -> &mut S {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {\n+    H[\"?\"].f(); //~ ERROR mismatched types\n+}"}, {"sha": "13b62429f46930d3c67a17cc9d1bf63022ee9dd0", "filename": "src/test/compile-fail/non-exhaustive-match.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-match.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(slice_patterns)]\n+#![allow(illegal_floating_point_literal_pattern)]\n \n enum t { a, b, }\n "}, {"sha": "167c8630707528d1ca5c5d0dbe922a3a615648e8", "filename": "src/test/compile-fail/regions-adjusted-lvalue-op.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fregions-adjusted-lvalue-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fcompile-fail%2Fregions-adjusted-lvalue-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-adjusted-lvalue-op.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// check that we link regions in mutable lvalue ops correctly - issue #41774\n+\n+struct Data(i32);\n+\n+trait OhNo {\n+    fn oh_no(&mut self, other: &Vec<Data>) { loop {} }\n+}\n+\n+impl OhNo for Data {}\n+impl OhNo for [Data] {}\n+\n+fn main() {\n+    let mut v = vec![Data(0)];\n+    v[0].oh_no(&v); //~ ERROR cannot borrow `v` as immutable because\n+    (*v).oh_no(&v); //~ ERROR cannot borrow `v` as immutable because\n+}"}, {"sha": "ac085d475114e6b4e08233ed03fc8a0c34b04c5a", "filename": "src/test/parse-fail/lex-bare-cr-string-literal-doc-comment.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fparse-fail%2Flex-bare-cr-string-literal-doc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fparse-fail%2Flex-bare-cr-string-literal-doc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Flex-bare-cr-string-literal-doc-comment.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -21,6 +21,12 @@ pub fn bar() {}\n //~^^ ERROR: bare CR not allowed in block doc-comment\n \n fn main() {\n+    //! doc comment with bare CR: '\r'\n+    //~^ ERROR: bare CR not allowed in doc-comment\n+\n+    /*! block doc comment with bare CR: '\r' */\n+    //~^ ERROR: bare CR not allowed in block doc-comment\n+\n     // the following string literal has a bare CR in it\n     let _s = \"foo\rbar\"; //~ ERROR: bare CR not allowed in string\n "}, {"sha": "3338e394e0ef9005687b3a785cb9b0c95077dfd8", "filename": "src/test/run-make/trace-macros-flag/Makefile", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2FMakefile?ref=f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf", "patch": "@@ -1,9 +0,0 @@\n-# This test verifies that \"-Z trace-macros\"  works as it should. The traditional\n-# \"hello world\" program provides a small example of this as not only println! is\n-# listed, but also print! (since println! expands to this)\n-\n--include ../tools.mk\n-\n-all:\n-\t$(RUSTC) -Z trace-macros hello.rs > $(TMPDIR)/hello.out\n-\tdiff -u $(TMPDIR)/hello.out hello.trace"}, {"sha": "cf733339eadf63ace80afc5d60b768188bf265ed", "filename": "src/test/run-make/trace-macros-flag/hello.trace", "status": "removed", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2Fhello.trace", "raw_url": "https://github.com/rust-lang/rust/raw/f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2Fhello.trace", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftrace-macros-flag%2Fhello.trace?ref=f1140a33176a5fb2e91e26ea3ae42a834dd9bfdf", "patch": "@@ -1,2 +0,0 @@\n-println! { \"Hello, World!\" }\n-print! { concat ! ( \"Hello, World!\" , \"\\n\" ) }"}, {"sha": "7214ebfaf07033b67648876e7b82dddca2c6799f", "filename": "src/test/run-pass/closure_to_fn_coercion-expected-types.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Frun-pass%2Fclosure_to_fn_coercion-expected-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Frun-pass%2Fclosure_to_fn_coercion-expected-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure_to_fn_coercion-expected-types.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+// Ensure that we deduce expected argument types when a `fn()` type is expected (#41755)\n+\n+#![feature(closure_to_fn_coercion)]\n+fn foo(f: fn(Vec<u32>) -> usize) { }\n+\n+fn main() {\n+    foo(|x| x.len())\n+}"}, {"sha": "ba949ca88814d1f86ff295d9f5d2ec48c8d555d4", "filename": "src/test/run-pass/lex-bare-cr-nondoc-comment.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Frun-pass%2Flex-bare-cr-nondoc-comment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Frun-pass%2Flex-bare-cr-nondoc-comment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flex-bare-cr-nondoc-comment.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-cr\n+\n+// nondoc comment with bare CR: '\r'\n+//// nondoc comment with bare CR: '\r'\n+/* block nondoc comment with bare CR: '\r' */\n+\n+fn main() {\n+}"}, {"sha": "34f674ae016a589b7f3eec6a00aafb11c032af0c", "filename": "src/test/ui/macros/trace-macro.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.rs?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// compile-flags: -Z trace-macros\n+\n fn main() {\n     println!(\"Hello, World!\");\n }", "previous_filename": "src/test/run-make/trace-macros-flag/hello.rs"}, {"sha": "09117a4ca740452e0870a1adbd7c369f545e1ec0", "filename": "src/test/ui/macros/trace-macro.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bedd7da3d28d69520f33ac6a585df87ef1373a26/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace-macro.stderr?ref=bedd7da3d28d69520f33ac6a585df87ef1373a26", "patch": "@@ -0,0 +1,9 @@\n+note: trace_macro\n+  --> $DIR/trace-macro.rs:14:5\n+   |\n+14 |     println!(\"Hello, World!\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expands to `println! { \"Hello, World!\" }`\n+   = note: expands to `print! { concat ! ( \"Hello, World!\" , \"/n\" ) }`\n+"}]}