{"sha": "978dc3d66f5e9a3bea733aca664e25b845fa0f27", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OGRjM2Q2NmY1ZTlhM2JlYTczM2FjYTY2NGUyNWI4NDVmYTBmMjc=", "commit": {"author": {"name": "Pramod Bisht", "email": "pramodpsb@outlook.com", "date": "2018-10-19T10:33:49Z"}, "committer": {"name": "Pramod Bisht", "email": "pramodpsb@outlook.com", "date": "2018-10-19T10:33:49Z"}, "message": "Fixed: Multiple errors on single typo in match pattern\n\nHere we have fixed the case where we were throwing two diagnostic\nmessages `E0026` and `E0027` for same case like this\n\nExample\nerror[E0026]: variant `A::A` does not have a field named `fob`\n  --> src/test/ui/issue-52717.rs:20:12\n   |\n20 |     A::A { fob } => { println!(\"{}\", fob); }\n   |            ^^^ variant `A::A` does not have this field\n\nerror[E0027]: pattern does not mention field `foo`\n  --> src/test/ui/issue-52717.rs:20:5\n   |\n20 |     A::A { fob } => { println!(\"{}\", fob); }\n   |     ^^^^^^^^^^^^ missing field `foo`\n\nerror: aborting due to 2 previous errors\n\nHere above we can see that both `E0026` and `E0027` are depicting\nsame thing.\n\nSo, to fix this issue, we are simply checking element of\n`inexistent_fields` is there any value lies in\n`unmentioned_fields` using Levenshtein algorithm, if does\nthen for that case we are simply deleting element from\n`unmentioned_fields`. More or less now instead of showing\nseparate message in `E0027` we are giving extra hint on `E0026`\n\nAddress: #52717", "tree": {"sha": "ecd0f1c5af295781cd55a5aaf2f2222cc53e1a01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ecd0f1c5af295781cd55a5aaf2f2222cc53e1a01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/978dc3d66f5e9a3bea733aca664e25b845fa0f27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/978dc3d66f5e9a3bea733aca664e25b845fa0f27", "html_url": "https://github.com/rust-lang/rust/commit/978dc3d66f5e9a3bea733aca664e25b845fa0f27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/978dc3d66f5e9a3bea733aca664e25b845fa0f27/comments", "author": {"login": "PramodBisht", "id": 2766842, "node_id": "MDQ6VXNlcjI3NjY4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2766842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PramodBisht", "html_url": "https://github.com/PramodBisht", "followers_url": "https://api.github.com/users/PramodBisht/followers", "following_url": "https://api.github.com/users/PramodBisht/following{/other_user}", "gists_url": "https://api.github.com/users/PramodBisht/gists{/gist_id}", "starred_url": "https://api.github.com/users/PramodBisht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PramodBisht/subscriptions", "organizations_url": "https://api.github.com/users/PramodBisht/orgs", "repos_url": "https://api.github.com/users/PramodBisht/repos", "events_url": "https://api.github.com/users/PramodBisht/events{/privacy}", "received_events_url": "https://api.github.com/users/PramodBisht/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PramodBisht", "id": 2766842, "node_id": "MDQ6VXNlcjI3NjY4NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2766842?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PramodBisht", "html_url": "https://github.com/PramodBisht", "followers_url": "https://api.github.com/users/PramodBisht/followers", "following_url": "https://api.github.com/users/PramodBisht/following{/other_user}", "gists_url": "https://api.github.com/users/PramodBisht/gists{/gist_id}", "starred_url": "https://api.github.com/users/PramodBisht/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PramodBisht/subscriptions", "organizations_url": "https://api.github.com/users/PramodBisht/orgs", "repos_url": "https://api.github.com/users/PramodBisht/repos", "events_url": "https://api.github.com/users/PramodBisht/events{/privacy}", "received_events_url": "https://api.github.com/users/PramodBisht/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbbd70d4f25bc255d80b6b9ba0a65f6c5957f2b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbbd70d4f25bc255d80b6b9ba0a65f6c5957f2b7", "html_url": "https://github.com/rust-lang/rust/commit/cbbd70d4f25bc255d80b6b9ba0a65f6c5957f2b7"}], "stats": {"total": 76, "additions": 56, "deletions": 20}, "files": [{"sha": "d623d3662e8b41e5e7a07d2239161b55c9bccf2a", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/978dc3d66f5e9a3bea733aca664e25b845fa0f27/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978dc3d66f5e9a3bea733aca664e25b845fa0f27/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=978dc3d66f5e9a3bea733aca664e25b845fa0f27", "patch": "@@ -24,6 +24,7 @@ use std::cmp;\n use syntax::ast;\n use syntax::source_map::Spanned;\n use syntax::ptr::P;\n+use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::Span;\n \n impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n@@ -925,7 +926,11 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n \n             self.check_pat_walk(&field.pat, field_ty, def_bm, true);\n         }\n-\n+        let mut unmentioned_fields = variant.fields\n+                .iter()\n+                .map(|field| field.ident.modern())\n+                .filter(|ident| !used_fields.contains_key(&ident))\n+                .collect::<Vec<_>>();\n         if inexistent_fields.len() > 0 {\n             let (field_names, t, plural) = if inexistent_fields.len() == 1 {\n                 (format!(\"a field named `{}`\", inexistent_fields[0].1), \"this\", \"\")\n@@ -944,13 +949,23 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                                            kind_name,\n                                            tcx.item_path_str(variant.did),\n                                            field_names);\n-            if let Some((span, _)) = inexistent_fields.last() {\n+            if let Some((span, ident)) = inexistent_fields.last() {\n                 err.span_label(*span,\n                                format!(\"{} `{}` does not have {} field{}\",\n                                        kind_name,\n                                        tcx.item_path_str(variant.did),\n                                        t,\n                                        plural));\n+                if plural == \"\" {\n+                    let input = unmentioned_fields.iter().map(|field| &field.name);\n+                    let suggested_name =\n+                        find_best_match_for_name(input, &ident.name.as_str(), None);\n+                    if let Some(suggested_name) = suggested_name {\n+                        err.span_suggestion(*span, \"did you mean\", suggested_name.to_string());\n+                        // we don't want to throw `E0027` in case we have thrown `E0026` for them\n+                        unmentioned_fields.retain(|&x| x.as_str() != suggested_name.as_str());\n+                    }\n+                }\n             }\n             if tcx.sess.teach(&err.get_code().unwrap()) {\n                 err.note(\n@@ -983,11 +998,6 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n                 tcx.sess.span_err(span, \"`..` cannot be used in union patterns\");\n             }\n         } else if !etc {\n-            let unmentioned_fields = variant.fields\n-                .iter()\n-                .map(|field| field.ident.modern())\n-                .filter(|ident| !used_fields.contains_key(&ident))\n-                .collect::<Vec<_>>();\n             if unmentioned_fields.len() > 0 {\n                 let field_names = if unmentioned_fields.len() == 1 {\n                     format!(\"field `{}`\", unmentioned_fields[0])"}, {"sha": "d40e2bd3d530cb27460b2b52f877fd4f4d3fd65c", "filename": "src/test/ui/issue-52717.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/978dc3d66f5e9a3bea733aca664e25b845fa0f27/src%2Ftest%2Fui%2Fissue-52717.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978dc3d66f5e9a3bea733aca664e25b845fa0f27/src%2Ftest%2Fui%2Fissue-52717.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52717.rs?ref=978dc3d66f5e9a3bea733aca664e25b845fa0f27", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+enum A {\n+  A {\n+    foo: usize,\n+  }\n+}\n+\n+fn main() {\n+  let x = A::A { foo: 3 };\n+  match x {\n+    A::A { fob } => { println!(\"{}\", fob); }\n+  }\n+}"}, {"sha": "0ef5a84671d8de20277659c321200082c8ba81ae", "filename": "src/test/ui/issue-52717.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/978dc3d66f5e9a3bea733aca664e25b845fa0f27/src%2Ftest%2Fui%2Fissue-52717.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978dc3d66f5e9a3bea733aca664e25b845fa0f27/src%2Ftest%2Fui%2Fissue-52717.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52717.stderr?ref=978dc3d66f5e9a3bea733aca664e25b845fa0f27", "patch": "@@ -0,0 +1,12 @@\n+error[E0026]: variant `A::A` does not have a field named `fob`\n+  --> $DIR/issue-52717.rs:19:12\n+   |\n+LL |     A::A { fob } => { println!(\"{}\", fob); }\n+   |            ^^^\n+   |            |\n+   |            variant `A::A` does not have this field\n+   |            help: did you mean: `foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0026`."}, {"sha": "8ccf34f2456f43c9c6646318de8c03f293ab5e8e", "filename": "src/test/ui/issues/issue-17800.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/978dc3d66f5e9a3bea733aca664e25b845fa0f27/src%2Ftest%2Fui%2Fissues%2Fissue-17800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978dc3d66f5e9a3bea733aca664e25b845fa0f27/src%2Ftest%2Fui%2Fissues%2Fissue-17800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17800.rs?ref=978dc3d66f5e9a3bea733aca664e25b845fa0f27", "patch": "@@ -17,7 +17,6 @@ fn main() {\n     match MyOption::MySome(42) {\n         MyOption::MySome { x: 42 } => (),\n         //~^ ERROR variant `MyOption::MySome` does not have a field named `x`\n-        //~| ERROR pattern does not mention field `0`\n         _ => (),\n     }\n }"}, {"sha": "e1c48e8a0e8ef4e1301cc4dbb6d745aae78619d8", "filename": "src/test/ui/issues/issue-17800.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/978dc3d66f5e9a3bea733aca664e25b845fa0f27/src%2Ftest%2Fui%2Fissues%2Fissue-17800.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/978dc3d66f5e9a3bea733aca664e25b845fa0f27/src%2Ftest%2Fui%2Fissues%2Fissue-17800.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17800.stderr?ref=978dc3d66f5e9a3bea733aca664e25b845fa0f27", "patch": "@@ -2,17 +2,11 @@ error[E0026]: variant `MyOption::MySome` does not have a field named `x`\n   --> $DIR/issue-17800.rs:18:28\n    |\n LL |         MyOption::MySome { x: 42 } => (),\n-   |                            ^^^^^ variant `MyOption::MySome` does not have this field\n+   |                            ^^^^^\n+   |                            |\n+   |                            variant `MyOption::MySome` does not have this field\n+   |                            help: did you mean: `0`\n \n-error[E0027]: pattern does not mention field `0`\n-  --> $DIR/issue-17800.rs:18:9\n-   |\n-LL |         MyOption::MySome { x: 42 } => (),\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ missing field `0`\n-   |\n-   = note: trying to match a tuple variant with a struct variant pattern\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors occurred: E0026, E0027.\n-For more information about an error, try `rustc --explain E0026`.\n+For more information about this error, try `rustc --explain E0026`."}]}