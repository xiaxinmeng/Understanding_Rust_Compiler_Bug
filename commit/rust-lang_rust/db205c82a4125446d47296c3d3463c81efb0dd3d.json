{"sha": "db205c82a4125446d47296c3d3463c81efb0dd3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiMjA1YzgyYTQxMjU0NDZkNDcyOTZjM2QzNDYzYzgxZWZiMGRkM2Q=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-02T21:35:01Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-02-02T21:35:01Z"}, "message": "Add a lint about using `clone` on `Copy` types", "tree": {"sha": "888a859f4642bdda2111f33da3177ac707c7dc09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/888a859f4642bdda2111f33da3177ac707c7dc09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db205c82a4125446d47296c3d3463c81efb0dd3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db205c82a4125446d47296c3d3463c81efb0dd3d", "html_url": "https://github.com/rust-lang/rust/commit/db205c82a4125446d47296c3d3463c81efb0dd3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db205c82a4125446d47296c3d3463c81efb0dd3d/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47e26ab287447c7321214f6b9451a5238d47e9cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/47e26ab287447c7321214f6b9451a5238d47e9cb", "html_url": "https://github.com/rust-lang/rust/commit/47e26ab287447c7321214f6b9451a5238d47e9cb"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "d7086a6dac83a701bdd773b76a7e0bd03091aff7", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db205c82a4125446d47296c3d3463c81efb0dd3d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/db205c82a4125446d47296c3d3463c81efb0dd3d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=db205c82a4125446d47296c3d3463c81efb0dd3d", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 107 lints included in this crate:\n+There are 108 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -22,6 +22,7 @@ name\n [cast_sign_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss)                               | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n [char_lit_as_u8](https://github.com/Manishearth/rust-clippy/wiki#char_lit_as_u8)                               | warn    | Casting a character literal to u8\n [chars_next_cmp](https://github.com/Manishearth/rust-clippy/wiki#chars_next_cmp)                               | warn    | using `.chars().next()` to check if a string starts with a char\n+[clone_on_copy](https://github.com/Manishearth/rust-clippy/wiki#clone_on_copy)                                 | warn    | using `clone` on a `Copy` type\n [cmp_nan](https://github.com/Manishearth/rust-clippy/wiki#cmp_nan)                                             | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n [cmp_owned](https://github.com/Manishearth/rust-clippy/wiki#cmp_owned)                                         | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n [collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                               | warn    | two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }` and an `else { if .. } expression can be collapsed to `else if`"}, {"sha": "369542841846f6a8b91bab947119de2d4f46b209", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db205c82a4125446d47296c3d3463c81efb0dd3d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db205c82a4125446d47296c3d3463c81efb0dd3d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=db205c82a4125446d47296c3d3463c81efb0dd3d", "patch": "@@ -214,6 +214,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         matches::MATCH_REF_PATS,\n         matches::SINGLE_MATCH,\n         methods::CHARS_NEXT_CMP,\n+        methods::CLONE_ON_COPY,\n         methods::EXTEND_FROM_SLICE,\n         methods::FILTER_NEXT,\n         methods::OK_EXPECT,"}, {"sha": "49e073aacd0a057d9e071b8b6d127e289e901ed0", "filename": "src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db205c82a4125446d47296c3d3463c81efb0dd3d/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db205c82a4125446d47296c3d3463c81efb0dd3d/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=db205c82a4125446d47296c3d3463c81efb0dd3d", "patch": "@@ -475,7 +475,7 @@ fn check_for_loop_explicit_counter(cx: &LateContext, arg: &Expr, body: &Expr, ex\n                 let mut visitor2 = InitializeVisitor {\n                     cx: cx,\n                     end_expr: expr,\n-                    var_id: id.clone(),\n+                    var_id: *id,\n                     state: VarState::IncrOnce,\n                     name: None,\n                     depth: 0,"}, {"sha": "0584d39330dd533004299cf03a005f8d7efc92f1", "filename": "src/methods.rs", "status": "modified", "additions": 31, "deletions": 5, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/db205c82a4125446d47296c3d3463c81efb0dd3d/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db205c82a4125446d47296c3d3463c81efb0dd3d/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=db205c82a4125446d47296c3d3463c81efb0dd3d", "patch": "@@ -219,6 +219,17 @@ declare_lint!(pub OR_FUN_CALL, Warn,\n declare_lint!(pub EXTEND_FROM_SLICE, Warn,\n               \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\");\n \n+/// **What it does:** This lint warns on using `.clone()` on a `Copy` type.\n+///\n+/// **Why is this bad?** The only reason `Copy` types implement `Clone` is for generics, not for\n+/// using the `clone` method on a concrete type.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:** `42u64.clone()`\n+declare_lint!(pub CLONE_ON_COPY, Warn,\n+              \"using `clone` on a `Copy` type\");\n+\n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(EXTEND_FROM_SLICE,\n@@ -233,7 +244,8 @@ impl LintPass for MethodsPass {\n                     OPTION_MAP_UNWRAP_OR,\n                     OPTION_MAP_UNWRAP_OR_ELSE,\n                     OR_FUN_CALL,\n-                    CHARS_NEXT_CMP)\n+                    CHARS_NEXT_CMP,\n+                    CLONE_ON_COPY)\n     }\n }\n \n@@ -269,6 +281,7 @@ impl LateLintPass for MethodsPass {\n                 }\n \n                 lint_or_fun_call(cx, expr, &name.node.as_str(), &args);\n+                lint_clone_on_copy(cx, expr, &name.node.as_str(), &args);\n             }\n             ExprBinary(op, ref lhs, ref rhs) if op.node == BiEq || op.node == BiNe => {\n                 if !lint_chars_next(cx, expr, lhs, rhs, op.node == BiEq) {\n@@ -439,6 +452,19 @@ fn lint_or_fun_call(cx: &LateContext, expr: &Expr, name: &str, args: &[P<Expr>])\n     }\n }\n \n+/// Checks for the `CLONE_ON_COPY` lint.\n+fn lint_clone_on_copy(cx: &LateContext, expr: &Expr, name: &str, args: &[P<Expr>]) {\n+    if args.len() == 1 && name == \"clone\" {\n+        let ty = cx.tcx.expr_ty(expr);\n+        let parent = cx.tcx.map.get_parent(expr.id);\n+        let parameter_environment = ty::ParameterEnvironment::for_item(cx.tcx, parent);\n+\n+        if !ty.moves_by_default(&parameter_environment, expr.span) {\n+            span_lint(cx, CLONE_ON_COPY, expr.span, \"using `clone` on a `Copy` type\");\n+        }\n+    }\n+}\n+\n fn lint_extend(cx: &LateContext, expr: &Expr, args: &MethodArgs) {\n     let (obj_ty, _) = walk_ptrs_ty_depth(cx.tcx.expr_ty(&args[0]));\n     if !match_type(cx, obj_ty, &VEC_PATH) {\n@@ -701,7 +727,7 @@ fn lint_chars_next(cx: &LateContext, expr: &Expr, chain: &Expr, other: &Expr, eq\n     false\n }\n \n-// Given a `Result<T, E>` type, return its error type (`E`)\n+/// Given a `Result<T, E>` type, return its error type (`E`).\n fn get_error_type<'a>(cx: &LateContext, ty: ty::Ty<'a>) -> Option<ty::Ty<'a>> {\n     if !match_type(cx, ty, &RESULT_PATH) {\n         return None;\n@@ -714,9 +740,9 @@ fn get_error_type<'a>(cx: &LateContext, ty: ty::Ty<'a>) -> Option<ty::Ty<'a>> {\n     None\n }\n \n-// This checks whether a given type is known to implement Debug. It's\n-// conservative, i.e. it should not return false positives, but will return\n-// false negatives.\n+/// This checks whether a given type is known to implement Debug. It's\n+/// conservative, i.e. it should not return false positives, but will return\n+/// false negatives.\n fn has_debug_impl<'a, 'b>(ty: ty::Ty<'a>, cx: &LateContext<'b, 'a>) -> bool {\n     let no_ref_ty = walk_ptrs_ty(ty);\n     let debug = match cx.tcx.lang_items.debug_trait() {"}, {"sha": "1573aff2a4da88438da2de7a58b679b64c8419a2", "filename": "src/misc_early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db205c82a4125446d47296c3d3463c81efb0dd3d/src%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db205c82a4125446d47296c3d3463c81efb0dd3d/src%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc_early.rs?ref=db205c82a4125446d47296c3d3463c81efb0dd3d", "patch": "@@ -110,7 +110,7 @@ impl EarlyLintPass for MiscEarly {\n                                            arg_name[1..].to_owned()));\n                     }\n                 } else {\n-                    registered_names.insert(arg_name, arg.pat.span.clone());\n+                    registered_names.insert(arg_name, arg.pat.span);\n                 }\n             }\n         }"}, {"sha": "bd630211f19fb0fcda7eecd94ad8ea8e22b3c464", "filename": "tests/compile-fail/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db205c82a4125446d47296c3d3463c81efb0dd3d/tests%2Fcompile-fail%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db205c82a4125446d47296c3d3463c81efb0dd3d/tests%2Fcompile-fail%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmap_clone.rs?ref=db205c82a4125446d47296c3d3463c81efb0dd3d", "patch": "@@ -3,7 +3,7 @@\n #![plugin(clippy)]\n #![deny(map_clone)]\n \n-#![allow(unused)]\n+#![allow(clone_on_copy, unused)]\n \n use std::ops::Deref;\n "}, {"sha": "f998a83e83158fe3bd55d92e10f859d975585e9a", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db205c82a4125446d47296c3d3463c81efb0dd3d/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db205c82a4125446d47296c3d3463c81efb0dd3d/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=db205c82a4125446d47296c3d3463c81efb0dd3d", "patch": "@@ -312,14 +312,25 @@ fn use_extend_from_slice() {\n     //~^ERROR use of `extend`\n     //~| HELP try this\n     //~| SUGGESTION v.extend_from_slice(&vec![\"Some\", \"more\"]);\n-    \n+\n     v.extend(vec![\"And\", \"even\", \"more\"].iter()); //~ERROR use of `extend`\n     let o : Option<&'static str> = None;\n     v.extend(o);\n     v.extend(Some(\"Bye\"));\n     v.extend(vec![\"Not\", \"like\", \"this\"]);\n-    v.extend([\"But\", \"this\"].iter()); \n+    v.extend([\"But\", \"this\"].iter());\n     //~^ERROR use of `extend\n     //~| HELP try this\n     //~| SUGGESTION v.extend_from_slice(&[\"But\", \"this\"]);\n }\n+\n+fn clone_on_copy() {\n+    42.clone(); //~ERROR using `clone` on a `Copy` type\n+    vec![1].clone(); // ok, not a Copy type\n+    Some(vec![1]).clone(); // ok, not a Copy type\n+}\n+\n+fn clone_on_copy_generic<T: Copy>(t: T) {\n+    t.clone(); //~ERROR using `clone` on a `Copy` type\n+    Some(t).clone(); //~ERROR using `clone` on a `Copy` type\n+}"}]}