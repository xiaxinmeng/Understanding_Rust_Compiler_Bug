{"sha": "e8173a654db41b5b3615cab052a60edb1ac63f08", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MTczYTY1NGRiNDFiNWIzNjE1Y2FiMDUyYTYwZWRiMWFjNjNmMDg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-31T01:10:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-31T01:10:44Z"}, "message": "Rollup merge of #57934 - dwijnand:from-Arc/Rc-to-NonNull, r=alexcrichton\n\nIntroduce into_raw_non_null on Rc and Arc\n\nNone", "tree": {"sha": "0c2a5f784ef94bf628ee538e3e139ce7d44709d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c2a5f784ef94bf628ee538e3e139ce7d44709d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8173a654db41b5b3615cab052a60edb1ac63f08", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcUksUCRBK7hj4Ov3rIwAAdHIIAEb4UkAksN5RvP8wx/tKjtTO\njsxMuX78ceeCaOcwG1j9bkLZD9T92U4nDheOggwn7XawQL2HUkfQ3bmKvo9xd1wp\nOjY/zseX4Iqxoqn96bGwCu0pi7TR5r4v6ke1RAgFsHLeVn/FciSHlhp0dszc2nda\nQZruXeiUfTtsdknso+QJgGU4ENB8AdE8ibCFCl66gLtbib4pNn4DtXVIx0kHG737\nhIRkPE3KGVkYNJzF/C2Rx7X/PMQj5TG3RpOEy3LN5FVNinh2QbJZf4Zt6x2UwGIy\n4Cto05L9oiG2Du04+hOWb831NXZetnDvse7GFB2cQvL3cofD6u2kJiqtHm0mrq8=\n=jL3B\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c2a5f784ef94bf628ee538e3e139ce7d44709d9\nparent 01346563c1d64f666920abc79389d0db5531989e\nparent 1e577269da046b5e2b862830b72210c855fca123\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548897044 +0100\ncommitter GitHub <noreply@github.com> 1548897044 +0100\n\nRollup merge of #57934 - dwijnand:from-Arc/Rc-to-NonNull, r=alexcrichton\n\nIntroduce into_raw_non_null on Rc and Arc\n\nNone\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8173a654db41b5b3615cab052a60edb1ac63f08", "html_url": "https://github.com/rust-lang/rust/commit/e8173a654db41b5b3615cab052a60edb1ac63f08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8173a654db41b5b3615cab052a60edb1ac63f08/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01346563c1d64f666920abc79389d0db5531989e", "url": "https://api.github.com/repos/rust-lang/rust/commits/01346563c1d64f666920abc79389d0db5531989e", "html_url": "https://github.com/rust-lang/rust/commit/01346563c1d64f666920abc79389d0db5531989e"}, {"sha": "1e577269da046b5e2b862830b72210c855fca123", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e577269da046b5e2b862830b72210c855fca123", "html_url": "https://github.com/rust-lang/rust/commit/1e577269da046b5e2b862830b72210c855fca123"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "5efb74bc12080af2825eea1eea873e6c8e89d47b", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e8173a654db41b5b3615cab052a60edb1ac63f08/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8173a654db41b5b3615cab052a60edb1ac63f08/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=e8173a654db41b5b3615cab052a60edb1ac63f08", "patch": "@@ -433,6 +433,27 @@ impl<T: ?Sized> Rc<T> {\n         }\n     }\n \n+    /// Consumes the `Rc`, returning the wrapped pointer as `NonNull<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(rc_into_raw_non_null)]\n+    ///\n+    /// use std::rc::Rc;\n+    ///\n+    /// let x = Rc::new(10);\n+    /// let ptr = Rc::into_raw_non_null(x);\n+    /// let deref = unsafe { *ptr.as_ref() };\n+    /// assert_eq!(deref, 10);\n+    /// ```\n+    #[unstable(feature = \"rc_into_raw_non_null\", issue = \"47336\")]\n+    #[inline]\n+    pub fn into_raw_non_null(this: Self) -> NonNull<T> {\n+        // safe because Rc guarantees its pointer is non-null\n+        unsafe { NonNull::new_unchecked(Rc::into_raw(this) as *mut _) }\n+    }\n+\n     /// Creates a new [`Weak`][weak] pointer to this value.\n     ///\n     /// [weak]: struct.Weak.html"}, {"sha": "5cffa93db11d4780f4c9edfc4b0643a527f82ed5", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e8173a654db41b5b3615cab052a60edb1ac63f08/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8173a654db41b5b3615cab052a60edb1ac63f08/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=e8173a654db41b5b3615cab052a60edb1ac63f08", "patch": "@@ -413,6 +413,27 @@ impl<T: ?Sized> Arc<T> {\n         }\n     }\n \n+    /// Consumes the `Arc`, returning the wrapped pointer as `NonNull<T>`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(rc_into_raw_non_null)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let x = Arc::new(10);\n+    /// let ptr = Arc::into_raw_non_null(x);\n+    /// let deref = unsafe { *ptr.as_ref() };\n+    /// assert_eq!(deref, 10);\n+    /// ```\n+    #[unstable(feature = \"rc_into_raw_non_null\", issue = \"47336\")]\n+    #[inline]\n+    pub fn into_raw_non_null(this: Self) -> NonNull<T> {\n+        // safe because Arc guarantees its pointer is non-null\n+        unsafe { NonNull::new_unchecked(Arc::into_raw(this) as *mut _) }\n+    }\n+\n     /// Creates a new [`Weak`][weak] pointer to this value.\n     ///\n     /// [weak]: struct.Weak.html"}]}