{"sha": "b178553e555bd3634005878bcd90e2f8295289f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxNzg1NTNlNTU1YmQzNjM0MDA1ODc4YmNkOTBlMmY4Mjk1Mjg5ZjY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-21T14:16:23Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-21T14:16:23Z"}, "message": "Address review comments", "tree": {"sha": "175a1e5656d9f70bb5aae5ffa0db498d7d29fff1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/175a1e5656d9f70bb5aae5ffa0db498d7d29fff1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b178553e555bd3634005878bcd90e2f8295289f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b178553e555bd3634005878bcd90e2f8295289f6", "html_url": "https://github.com/rust-lang/rust/commit/b178553e555bd3634005878bcd90e2f8295289f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b178553e555bd3634005878bcd90e2f8295289f6/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c32cf25689d7b8f2498a875716f855ee5cdcf16c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c32cf25689d7b8f2498a875716f855ee5cdcf16c", "html_url": "https://github.com/rust-lang/rust/commit/c32cf25689d7b8f2498a875716f855ee5cdcf16c"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "71b2f4b53a60c4df84a82e78d6a752862a2b6dcc", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b178553e555bd3634005878bcd90e2f8295289f6/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b178553e555bd3634005878bcd90e2f8295289f6/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=b178553e555bd3634005878bcd90e2f8295289f6", "patch": "@@ -572,12 +572,15 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n     }\n \n     /// This is used by [priroda](https://github.com/oli-obk/priroda) to get an OpTy from a local\n+    ///\n+    /// When you know the layout of the local in advance, you can pass it as last argument\n     pub fn access_local(\n         &self,\n         frame: &super::Frame<'mir, 'tcx, M::PointerTag>,\n         local: mir::Local,\n         layout: Option<TyLayout<'tcx>>,\n     ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n+        assert_ne!(local, mir::RETURN_PLACE);\n         let op = *frame.locals[local].access()?;\n         let layout = from_known_layout(layout,\n                     || self.layout_of_local(frame, local))?;"}]}