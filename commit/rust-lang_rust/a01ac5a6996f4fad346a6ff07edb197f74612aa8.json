{"sha": "a01ac5a6996f4fad346a6ff07edb197f74612aa8", "node_id": "C_kwDOAAsO6NoAKGEwMWFjNWE2OTk2ZjRmYWQzNDZhNmZmMDdlZGIxOTdmNzQ2MTJhYTg", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-08-22T10:36:02Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-08-22T10:36:02Z"}, "message": "re-base and use `OutlivesEnvironment::with_bounds`", "tree": {"sha": "47e25f6c9fc7575402981115faad53021226eb09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47e25f6c9fc7575402981115faad53021226eb09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a01ac5a6996f4fad346a6ff07edb197f74612aa8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a01ac5a6996f4fad346a6ff07edb197f74612aa8", "html_url": "https://github.com/rust-lang/rust/commit/a01ac5a6996f4fad346a6ff07edb197f74612aa8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a01ac5a6996f4fad346a6ff07edb197f74612aa8/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d39fefdd694b02c7e7b4a64ccbb38d9f8be16df0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d39fefdd694b02c7e7b4a64ccbb38d9f8be16df0", "html_url": "https://github.com/rust-lang/rust/commit/d39fefdd694b02c7e7b4a64ccbb38d9f8be16df0"}], "stats": {"total": 42, "additions": 13, "deletions": 29}, "files": [{"sha": "872886da3626108ca370bfb942d650bced1a1775", "filename": "compiler/rustc_infer/src/infer/outlives/env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a01ac5a6996f4fad346a6ff07edb197f74612aa8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01ac5a6996f4fad346a6ff07edb197f74612aa8/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fenv.rs?ref=a01ac5a6996f4fad346a6ff07edb197f74612aa8", "patch": "@@ -109,7 +109,7 @@ impl<'tcx> OutlivesEnvironment<'tcx> {\n \n impl<'a, 'tcx> OutlivesEnvironmentBuilder<'tcx> {\n     #[inline]\n-    pub fn build(self) -> OutlivesEnvironment<'tcx> {\n+    fn build(self) -> OutlivesEnvironment<'tcx> {\n         OutlivesEnvironment {\n             param_env: self.param_env,\n             free_region_map: FreeRegionMap { relation: self.region_relation.freeze() },"}, {"sha": "dfef924f6993a568478d3ce864ac609a8da0f3b9", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a01ac5a6996f4fad346a6ff07edb197f74612aa8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01ac5a6996f4fad346a6ff07edb197f74612aa8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=a01ac5a6996f4fad346a6ff07edb197f74612aa8", "patch": "@@ -1516,9 +1516,9 @@ pub fn check_type_bounds<'tcx>(\n \n         // Finally, resolve all regions. This catches wily misuses of\n         // lifetime parameters.\n-        let mut outlives_environment = OutlivesEnvironment::builder(param_env);\n-        outlives_environment.add_implied_bounds(&infcx, assumed_wf_types, impl_ty_hir_id);\n-        let outlives_environment = outlives_environment.build();\n+        let implied_bounds = infcx.implied_bounds_tys(param_env, impl_ty_hir_id, assumed_wf_types);\n+        let outlives_environment =\n+            OutlivesEnvironment::with_bounds(param_env, Some(&infcx), implied_bounds);\n \n         infcx.check_region_obligations_and_report_errors(\n             impl_ty.def_id.expect_local(),"}, {"sha": "b4b6fe8eeada3bd569e502b1efec9b91b20ab118", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a01ac5a6996f4fad346a6ff07edb197f74612aa8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01ac5a6996f4fad346a6ff07edb197f74612aa8/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=a01ac5a6996f4fad346a6ff07edb197f74612aa8", "patch": "@@ -104,9 +104,9 @@ pub(super) fn enter_wf_checking_ctxt<'tcx, F>(\n             return;\n         }\n \n-        let mut outlives_environment = OutlivesEnvironment::builder(param_env);\n-        outlives_environment.add_implied_bounds(infcx, assumed_wf_types, body_id);\n-        let outlives_environment = outlives_environment.build();\n+        let implied_bounds = infcx.implied_bounds_tys(param_env, body_id, assumed_wf_types);\n+        let outlives_environment =\n+            OutlivesEnvironment::with_bounds(param_env, Some(infcx), implied_bounds);\n \n         infcx.check_region_obligations_and_report_errors(body_def_id, &outlives_environment);\n     })"}, {"sha": "6240024d49c74eb47c2eae2952f37a23eb667c18", "filename": "compiler/rustc_typeck/src/impl_wf_check/min_specialization.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a01ac5a6996f4fad346a6ff07edb197f74612aa8/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a01ac5a6996f4fad346a6ff07edb197f74612aa8/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check%2Fmin_specialization.rs?ref=a01ac5a6996f4fad346a6ff07edb197f74612aa8", "patch": "@@ -67,7 +67,7 @@\n \n use crate::constrained_generic_params as cgp;\n use crate::errors::SubstsOnOverriddenImpl;\n-use crate::outlives::outlives_bounds::InferCtxtExt;\n+use crate::outlives::outlives_bounds::InferCtxtExt as _;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -147,43 +147,27 @@ fn get_impl_substs<'tcx>(\n         let assumed_wf_types =\n             ocx.assumed_wf_types(param_env, tcx.def_span(impl1_def_id), impl1_def_id);\n \n-      let impl1_substs = InternalSubsts::identity_for_item(tcx, impl1_def_id.to_def_id());\n+        let impl1_substs = InternalSubsts::identity_for_item(tcx, impl1_def_id.to_def_id());\n         let impl2_substs =\n             translate_substs(infcx, param_env, impl1_def_id.to_def_id(), impl1_substs, impl2_node);\n \n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n-\n         let errors = ocx.select_all_or_error();\n         if !errors.is_empty() {\n             ocx.infcx.report_fulfillment_errors(&errors, None, false);\n             return None;\n         }\n \n-        let mut outlives_env = OutlivesEnvironment::new(param_env);\n-        outlives_env.add_implied_bounds(infcx, assumed_wf_types, impl1_hir_id);\n+        let implied_bounds = infcx.implied_bounds_tys(param_env, impl1_hir_id, assumed_wf_types);\n+        let outlives_env = OutlivesEnvironment::with_bounds(param_env, Some(infcx), implied_bounds);\n         infcx.check_region_obligations_and_report_errors(impl1_def_id, &outlives_env);\n         let Ok(impl2_substs) = infcx.fully_resolve(impl2_substs) else {\n             let span = tcx.def_span(impl1_def_id);\n             tcx.sess.emit_err(SubstsOnOverriddenImpl { span });\n             return None;\n         };\n         Some((impl1_substs, impl2_substs))\n-    })}\n+    })\n+}\n \n /// Returns a list of all of the unconstrained subst of the given impl.\n ///"}]}