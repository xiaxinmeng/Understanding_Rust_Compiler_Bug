{"sha": "12dff54a6acf271e367a8fb0c3d149d6554d9d90", "node_id": "C_kwDOAAsO6NoAKDEyZGZmNTRhNmFjZjI3MWUzNjdhOGZiMGMzZDE0OWQ2NTU0ZDlkOTA", "commit": {"author": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2023-04-05T07:54:46Z"}, "committer": {"name": "Thom Chiovoloni", "email": "thom@shift.click", "date": "2023-04-05T07:54:46Z"}, "message": "Fix same issue in bootstrap", "tree": {"sha": "6bb9b4f795c28dbc6690faa90b866861269d08bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bb9b4f795c28dbc6690faa90b866861269d08bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12dff54a6acf271e367a8fb0c3d149d6554d9d90", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN SSH SIGNATURE-----\nU1NIU0lHAAAAAQAAADMAAAALc3NoLWVkMjU1MTkAAAAgMrDyZKNSLq6TEmWvPtNWv4vJNv\nay7sfrM7c6iOWHdh8AAAADZ2l0AAAAAAAAAAZzaGE1MTIAAABTAAAAC3NzaC1lZDI1NTE5\nAAAAQB58qksWJTi//Rj3vBm5l6xrp7aax7U8YDFFlLkIBKE9i5uaGLnVgzUg64oO95Rosc\nVNYl53TWXj7yM8+sdWqgg=\n-----END SSH SIGNATURE-----", "payload": "tree 6bb9b4f795c28dbc6690faa90b866861269d08bf\nparent 6861750e663dbbf8c347e90a35e056d8d2e8c5b1\nauthor Thom Chiovoloni <thom@shift.click> 1680681286 -0700\ncommitter Thom Chiovoloni <thom@shift.click> 1680681286 -0700\n\nFix same issue in bootstrap\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12dff54a6acf271e367a8fb0c3d149d6554d9d90", "html_url": "https://github.com/rust-lang/rust/commit/12dff54a6acf271e367a8fb0c3d149d6554d9d90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12dff54a6acf271e367a8fb0c3d149d6554d9d90/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6861750e663dbbf8c347e90a35e056d8d2e8c5b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6861750e663dbbf8c347e90a35e056d8d2e8c5b1", "html_url": "https://github.com/rust-lang/rust/commit/6861750e663dbbf8c347e90a35e056d8d2e8c5b1"}], "stats": {"total": 35, "additions": 26, "deletions": 9}, "files": [{"sha": "8cea8c974077a0f49022a5dcef4a5ab706808a34", "filename": "src/bootstrap/util.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/12dff54a6acf271e367a8fb0c3d149d6554d9d90/src%2Fbootstrap%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12dff54a6acf271e367a8fb0c3d149d6554d9d90/src%2Fbootstrap%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Futil.rs?ref=12dff54a6acf271e367a8fb0c3d149d6554d9d90", "patch": "@@ -212,18 +212,35 @@ pub fn symlink_dir(config: &Config, src: &Path, dest: &Path) -> io::Result<()> {\n             struct Align8<T>(T);\n             let mut data = Align8([0u8; MAXIMUM_REPARSE_DATA_BUFFER_SIZE as usize]);\n             let db = data.0.as_mut_ptr() as *mut REPARSE_MOUNTPOINT_DATA_BUFFER;\n-            let buf = core::ptr::addr_of_mut!((*db).ReparseTarget) as *mut u16;\n-            let mut i = 0;\n+            let end = db.cast::<u8>().add(MAXIMUM_REPARSE_DATA_BUFFER_SIZE as usize);\n+            let reparse_target_slice = {\n+                let buf_start = core::ptr::addr_of_mut!((*db).ReparseTarget).cast::<u16>();\n+                // Compute offset in bytes and then divide so that we round down\n+                // rather than hit any UB (admittedly this arithmetic should work\n+                // out so that this isn't necessary)\n+                let buf_len_bytes =\n+                    usize::try_from(end.offset_from(buf_start.cast::<u8>())).unwrap();\n+                let buf_len_wchars = buf_len_bytes / core::mem::size_of::<u16>();\n+                core::slice::from_raw_parts_mut(buf_start, buf_len_wchars)\n+            };\n+\n             // FIXME: this conversion is very hacky\n-            let v = br\"\\??\\\";\n-            let v = v.iter().map(|x| *x as u16);\n-            for c in v.chain(target.as_os_str().encode_wide().skip(4)) {\n-                *buf.offset(i) = c;\n+            let iter = br\"\\??\\\"\n+                .iter()\n+                .map(|x| *x as u16)\n+                .chain(path.iter().copied())\n+                .chain(core::iter::once(0));\n+            let mut i = 0;\n+            for c in iter {\n+                if i >= reparse_target_slice.len() {\n+                    return Err(io::Error::new(\n+                        io::ErrorKind::Other,\n+                        format!(\"path too long for reparse target: {target:?}\"),\n+                    ));\n+                }\n+                reparse_target_slice[i] = c;\n                 i += 1;\n             }\n-            *buf.offset(i) = 0;\n-            i += 1;\n-\n             (*db).ReparseTag = IO_REPARSE_TAG_MOUNT_POINT;\n             (*db).ReparseTargetMaximumLength = (i * 2) as u16;\n             (*db).ReparseTargetLength = ((i - 1) * 2) as u16;"}]}