{"sha": "8307d27522b49f0972c2fae9007ef9212f2cf0cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMDdkMjc1MjJiNDlmMDk3MmMyZmFlOTAwN2VmOTIxMmYyY2YwY2I=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-09T10:15:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-09-09T10:15:34Z"}, "message": "Merge pull request #332 from solson/rustup\n\nrustup", "tree": {"sha": "812d768f5c05ffe8249687c1ea2dc12f29076cf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/812d768f5c05ffe8249687c1ea2dc12f29076cf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8307d27522b49f0972c2fae9007ef9212f2cf0cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8307d27522b49f0972c2fae9007ef9212f2cf0cb", "html_url": "https://github.com/rust-lang/rust/commit/8307d27522b49f0972c2fae9007ef9212f2cf0cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8307d27522b49f0972c2fae9007ef9212f2cf0cb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c4fcd8d12a0adb4278856377e03180c6c0b7edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4fcd8d12a0adb4278856377e03180c6c0b7edc", "html_url": "https://github.com/rust-lang/rust/commit/2c4fcd8d12a0adb4278856377e03180c6c0b7edc"}, {"sha": "a1f71af5b222140acaffbf49a28a47c4cf93e610", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f71af5b222140acaffbf49a28a47c4cf93e610", "html_url": "https://github.com/rust-lang/rust/commit/a1f71af5b222140acaffbf49a28a47c4cf93e610"}], "stats": {"total": 138, "additions": 60, "deletions": 78}, "files": [{"sha": "d42ef2287af3c1f56649129b99f76edb364fc8b8", "filename": ".travis.yml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -36,6 +36,9 @@ script:\n notifications:\n   email:\n     on_success: never\n+branches:\n+  only:\n+  - master\n env:\n   global:\n   - RUST_TEST_NOCAPTURE=1"}, {"sha": "9b8790379d8e6e3cffd3f65ef4127d08e437b7be", "filename": "miri/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/miri%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/miri%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fbin%2Fmiri.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -131,7 +131,7 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n         );\n     } else if let Some((entry_node_id, _)) = *state.session.entry_fn.borrow() {\n         let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n-        let start_wrapper = tcx.lang_items.start_fn().and_then(|start_fn| {\n+        let start_wrapper = tcx.lang_items().start_fn().and_then(|start_fn| {\n             if tcx.is_mir_available(start_fn) {\n                 Some(start_fn)\n             } else {"}, {"sha": "d64b254e7ebb83e15895ea039c070a6380794982", "filename": "miri/fn_call.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/miri%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/miri%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Ffn_call.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -96,11 +96,11 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n         dest_ty: Ty<'tcx>,\n         dest_block: mir::BasicBlock,\n     ) -> EvalResult<'tcx> {\n-        let name = self.tcx.item_name(def_id);\n         let attrs = self.tcx.get_attrs(def_id);\n-        let link_name = attr::first_attr_value_str_by_name(&attrs, \"link_name\")\n-            .unwrap_or(name)\n-            .as_str();\n+        let link_name = match attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n+            Some(name) => name.as_str(),\n+            None => self.tcx.item_name(def_id),\n+        };\n \n         match &link_name[..] {\n             \"malloc\" => {\n@@ -477,28 +477,26 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n \n     /// Get an instance for a path.\n     fn resolve_path(&self, path: &[&str]) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n-        let cstore = &self.tcx.sess.cstore;\n-\n-        let crates = cstore.crates();\n-        crates\n+        self.tcx\n+            .crates()\n             .iter()\n-            .find(|&&krate| cstore.crate_name(krate) == path[0])\n+            .find(|&&krate| self.tcx.original_crate_name(krate) == path[0])\n             .and_then(|krate| {\n                 let krate = DefId {\n                     krate: *krate,\n                     index: CRATE_DEF_INDEX,\n                 };\n-                let mut items = cstore.item_children(krate, self.tcx.sess);\n+                let mut items = self.tcx.item_children(krate);\n                 let mut path_it = path.iter().skip(1).peekable();\n \n                 while let Some(segment) = path_it.next() {\n-                    for item in &mem::replace(&mut items, vec![]) {\n+                    for item in mem::replace(&mut items, Default::default()).iter() {\n                         if item.ident.name == *segment {\n                             if path_it.peek().is_none() {\n                                 return Some(ty::Instance::mono(self.tcx, item.def.def_id()));\n                             }\n \n-                            items = cstore.item_children(item.def.def_id(), self.tcx.sess);\n+                            items = self.tcx.item_children(item.def.def_id());\n                             break;\n                         }\n                     }"}, {"sha": "bcff3b4aa99191c9f450f08c1c66e434fb602190", "filename": "miri/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/miri%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/miri%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Fintrinsic.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n     ) -> EvalResult<'tcx> {\n         let substs = instance.substs;\n \n-        let intrinsic_name = &self.tcx.item_name(instance.def_id()).as_str()[..];\n+        let intrinsic_name = &self.tcx.item_name(instance.def_id())[..];\n         match intrinsic_name {\n             \"align_offset\" => {\n                 // FIXME: return a real value in case the target allocation has an"}, {"sha": "d1f2f07aaaa66b887a9f6ed9107ec37a3b4eac2b", "filename": "rustc_tests/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/rustc_tests%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/rustc_tests%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustc_tests%2Fsrc%2Fmain.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -100,7 +100,7 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n         state.hir_crate.unwrap().visit_all_item_likes(&mut Visitor(limits, tcx, state));\n     } else if let Some((entry_node_id, _)) = *state.session.entry_fn.borrow() {\n         let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n-        let start_wrapper = tcx.lang_items.start_fn().and_then(|start_fn|\n+        let start_wrapper = tcx.lang_items().start_fn().and_then(|start_fn|\n                                 if tcx.is_mir_available(start_fn) { Some(start_fn) } else { None });\n         miri::eval_main(tcx, entry_def_id, start_wrapper, limits);\n "}, {"sha": "bd7a42cca1fe29dbaf3e8e235a874c867d3dac64", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -508,8 +508,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             stmt: 0,\n         });\n \n-        let cur_frame = self.cur_frame();\n-        self.memory.set_cur_frame(cur_frame);\n+        self.memory.cur_frame = self.cur_frame();\n \n         if self.stack.len() > self.stack_limit {\n             err!(StackFrameLimitReached)\n@@ -520,14 +519,13 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n \n     pub(super) fn pop_stack_frame(&mut self) -> EvalResult<'tcx> {\n         ::log_settings::settings().indentation -= 1;\n-        self.memory.locks_lifetime_ended(None);\n+        self.end_region(None)?;\n         let frame = self.stack.pop().expect(\n             \"tried to pop a stack frame, but there were none\",\n         );\n         if !self.stack.is_empty() {\n-            // TODO: IS this the correct time to start considering these accesses as originating from the returned-to stack frame?\n-            let cur_frame = self.cur_frame();\n-            self.memory.set_cur_frame(cur_frame);\n+            // TODO: Is this the correct time to start considering these accesses as originating from the returned-to stack frame?\n+            self.memory.cur_frame = self.cur_frame();\n         }\n         match frame.return_to_block {\n             StackPopCleanup::MarkStatic(mutable) => {\n@@ -2267,7 +2265,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n     substs: ty::ClosureSubsts<'tcx>,\n ) -> ty::Instance<'tcx> {\n     debug!(\"fn_once_adapter_shim({:?}, {:?})\", closure_did, substs);\n-    let fn_once = tcx.lang_items.fn_once_trait().unwrap();\n+    let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n     let call_once = tcx.associated_items(fn_once)\n         .find(|it| it.kind == ty::AssociatedKind::Method)\n         .unwrap()\n@@ -2346,7 +2344,7 @@ pub fn resolve<'a, 'tcx>(\n                 ty::InstanceDef::Intrinsic(def_id)\n             }\n             _ => {\n-                if Some(def_id) == tcx.lang_items.drop_in_place_fn() {\n+                if Some(def_id) == tcx.lang_items().drop_in_place_fn() {\n                     let ty = substs.type_at(0);\n                     if needs_drop_glue(tcx, ty) {\n                         debug!(\" => nontrivial drop glue\");\n@@ -2440,7 +2438,7 @@ fn resolve_associated_item<'a, 'tcx>(\n             }\n         }\n         ::rustc::traits::VtableClosure(closure_data) => {\n-            let trait_closure_kind = tcx.lang_items.fn_trait_kind(trait_id).unwrap();\n+            let trait_closure_kind = tcx.lang_items().fn_trait_kind(trait_id).unwrap();\n             resolve_closure(\n                 tcx,\n                 closure_data.closure_def_id,\n@@ -2461,7 +2459,7 @@ fn resolve_associated_item<'a, 'tcx>(\n                 substs: rcvr_substs,\n             }\n         }\n-        ::rustc::traits::VtableBuiltin(..) if Some(trait_id) == tcx.lang_items.clone_trait() => {\n+        ::rustc::traits::VtableBuiltin(..) if Some(trait_id) == tcx.lang_items().clone_trait() => {\n             ty::Instance {\n                 def: ty::InstanceDef::CloneShim(def_id, trait_ref.self_ty()),\n                 substs: rcvr_substs"}, {"sha": "9a99f50cdfad5e81d8eefdbdb96d585e20a45def", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -268,7 +268,7 @@ pub struct Memory<'a, 'tcx, M: Machine<'tcx>> {\n     writes_are_aligned: Cell<bool>,\n \n     /// The current stack frame.  Used to check accesses against locks.\n-    cur_frame: usize,\n+    pub(super) cur_frame: usize,\n }\n \n impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n@@ -530,10 +530,6 @@ impl<'a, 'tcx, M: Machine<'tcx>> Memory<'a, 'tcx, M> {\n         }\n         Ok(())\n     }\n-\n-    pub(crate) fn set_cur_frame(&mut self, cur_frame: usize) {\n-        self.cur_frame = cur_frame;\n-    }\n }\n \n /// Locking"}, {"sha": "3dc74368fe830ef9bf051819ddadfd3623a67b99", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 }\n             }\n             EndRegion(ce) => {\n-                self.end_region(ce)?;\n+                self.end_region(Some(ce))?;\n             }\n \n             // Defined to do nothing. These are added by optimization passes, to avoid changing the"}, {"sha": "9a16a4ec150955590c29c533cabc75868517d3d4", "filename": "src/librustc_mir/interpret/validation.rs", "status": "modified", "additions": 34, "deletions": 19, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidation.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -45,6 +45,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         if self.tcx.sess.opts.debugging_opts.mir_emit_validate == 0 {\n             return Ok(());\n         }\n+        debug_assert!(self.memory.cur_frame == self.cur_frame());\n \n         // HACK: Determine if this method is whitelisted and hence we do not perform any validation.\n         // We currently insta-UB on anything passing around uninitialized memory, so we have to whitelist\n@@ -55,17 +56,17 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             use regex::Regex;\n             lazy_static! {\n                 static ref RE: Regex = Regex::new(\"^(\\\n-                    std::mem::uninitialized::|\\\n-                    std::mem::forget::|\\\n+                    (std|alloc::heap::__core)::mem::uninitialized::|\\\n+                    (std|alloc::heap::__core)::mem::forget::|\\\n                     <(std|alloc)::heap::Heap as (std::heap|alloc::allocator)::Alloc>::|\\\n-                    <std::mem::ManuallyDrop<T>><.*>::new$|\\\n-                    <std::mem::ManuallyDrop<T> as std::ops::DerefMut><.*>::deref_mut$|\\\n-                    std::ptr::read::|\\\n+                    <(std|alloc::heap::__core)::mem::ManuallyDrop<T>><.*>::new$|\\\n+                    <(std|alloc::heap::__core)::mem::ManuallyDrop<T> as std::ops::DerefMut><.*>::deref_mut$|\\\n+                    (std|alloc::heap::__core)::ptr::read::|\\\n                     \\\n                     <std::sync::Arc<T>><.*>::inner$|\\\n                     <std::sync::Arc<T>><.*>::drop_slow$|\\\n                     (std::heap|alloc::allocator)::Layout::for_value::|\\\n-                    std::mem::(size|align)_of_val::\\\n+                    (std|alloc::heap::__core)::mem::(size|align)_of_val::\\\n                 )\").unwrap();\n             }\n             // Now test\n@@ -93,7 +94,8 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 if query.mutbl == MutMutable {\n                     let lft = DynamicLifetime {\n                         frame: self.cur_frame(),\n-                        region: Some(scope),\n+                        region: Some(scope), // Notably, we only ever suspend things for given regions.\n+                        // Suspending for the entire function does not make any sense.\n                     };\n                     trace!(\"Suspending {:?} until {:?}\", query, scope);\n                     self.suspended.entry(lft).or_insert_with(Vec::new).push(\n@@ -106,17 +108,30 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         self.validate(query, mode)\n     }\n \n-    pub(crate) fn end_region(&mut self, scope: region::Scope) -> EvalResult<'tcx> {\n-        self.memory.locks_lifetime_ended(Some(scope));\n-        // Recover suspended lvals\n-        let lft = DynamicLifetime {\n-            frame: self.cur_frame(),\n-            region: Some(scope),\n-        };\n-        if let Some(queries) = self.suspended.remove(&lft) {\n-            for query in queries {\n-                trace!(\"Recovering {:?} from suspension\", query);\n-                self.validate(query, ValidationMode::Recover(scope))?;\n+    /// Release locks and executes suspensions of the given region (or the entire fn, in case of None).\n+    pub(crate) fn end_region(&mut self, scope: Option<region::Scope>) -> EvalResult<'tcx> {\n+        debug_assert!(self.memory.cur_frame == self.cur_frame());\n+        self.memory.locks_lifetime_ended(scope);\n+        match scope {\n+            Some(scope) => {\n+                // Recover suspended lvals\n+                let lft = DynamicLifetime {\n+                    frame: self.cur_frame(),\n+                    region: Some(scope),\n+                };\n+                if let Some(queries) = self.suspended.remove(&lft) {\n+                    for query in queries {\n+                        trace!(\"Recovering {:?} from suspension\", query);\n+                        self.validate(query, ValidationMode::Recover(scope))?;\n+                    }\n+                }\n+            }\n+            None => {\n+                // Clean suspension table of current frame\n+                let cur_frame = self.cur_frame();\n+                self.suspended.retain(|lft, _| {\n+                    lft.frame != cur_frame // keep only what is in the other (lower) frames\n+                });\n             }\n         }\n         Ok(())\n@@ -543,7 +558,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 Ok(())\n             }\n             TyAdt(adt, subst) => {\n-                if Some(adt.did) == self.tcx.lang_items.unsafe_cell_type() &&\n+                if Some(adt.did) == self.tcx.lang_items().unsafe_cell_type() &&\n                     query.mutbl == MutImmutable\n                 {\n                     // No locks for shared unsafe cells.  Also no other validation, the only field is private anyway."}, {"sha": "c1ae7477c81a8adc22ff8a02eaef41c2dd04e19c", "filename": "tests/compile-fail/deallocate-bad-alignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-alignment.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -7,7 +7,6 @@ use alloc::allocator::*;\n \n // error-pattern: tried to deallocate or reallocate using incorrect alignment or size\n \n-use alloc::heap::*;\n fn main() {\n     unsafe {\n         let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();"}, {"sha": "5577f10736d2e39371df6848291140b809c57a34", "filename": "tests/compile-fail/deallocate-bad-size.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-bad-size.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -7,7 +7,6 @@ use alloc::allocator::*;\n \n // error-pattern: tried to deallocate or reallocate using incorrect alignment or size\n \n-use alloc::heap::*;\n fn main() {\n     unsafe {\n         let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();"}, {"sha": "e11df0eb4147d842a69617bf74405b4331b4fd77", "filename": "tests/compile-fail/deallocate-twice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Fcompile-fail%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdeallocate-twice.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -7,7 +7,6 @@ use alloc::allocator::*;\n \n // error-pattern: tried to deallocate dangling pointer\n \n-use alloc::heap::*;\n fn main() {\n     unsafe {\n         let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();"}, {"sha": "cd6214440ff262e572a6a1e6acaa25f896dca906", "filename": "tests/compile-fail/reallocate-bad-alignment-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Fcompile-fail%2Freallocate-bad-alignment-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Fcompile-fail%2Freallocate-bad-alignment-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-alignment-2.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -7,7 +7,6 @@ use alloc::allocator::*;\n \n // error-pattern: tried to deallocate or reallocate using incorrect alignment or size\n \n-use alloc::heap::*;\n fn main() {\n     unsafe {\n         let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();"}, {"sha": "da5fe1d81909d4cc36b758b65aa8a6420b0af612", "filename": "tests/compile-fail/reallocate-bad-alignment.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-alignment.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -7,7 +7,6 @@ use alloc::allocator::*;\n \n // error-pattern: tried to deallocate or reallocate using incorrect alignment or size\n \n-use alloc::heap::*;\n fn main() {\n     unsafe {\n         let x = Heap.alloc(Layout::from_size_align_unchecked(1, 2)).unwrap();"}, {"sha": "953178742c46fb03e14bca2bf74cd93ce647ce3e", "filename": "tests/compile-fail/reallocate-bad-size.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Fcompile-fail%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-bad-size.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -7,7 +7,6 @@ use alloc::allocator::*;\n \n // error-pattern: tried to deallocate or reallocate using incorrect alignment or size\n \n-use alloc::heap::*;\n fn main() {\n     unsafe {\n         let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();"}, {"sha": "6225879a5a2a0faff4d9cdc4280997f1c3c05844", "filename": "tests/compile-fail/reallocate-dangling.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Fcompile-fail%2Freallocate-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Fcompile-fail%2Freallocate-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freallocate-dangling.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -7,7 +7,6 @@ use alloc::allocator::*;\n \n // error-pattern: dangling pointer was dereferenced\n \n-use alloc::heap::*;\n fn main() {\n     unsafe {\n         let x = Heap.alloc(Layout::from_size_align_unchecked(1, 1)).unwrap();"}, {"sha": "a05308acbe6761623f5ca7250048bd4e9febaa2a", "filename": "tests/run-pass-fullmir/u128.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass-fullmir%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass-fullmir%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fu128.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Zmir-emit-validate=0\n-\n #![feature(i128_type)]\n \n fn b<T>(t: T) -> T { t }"}, {"sha": "ccb6883e8733a5b8d660c2b6e8f3fac2ceb22238", "filename": "tests/run-pass-fullmir/unsized-tuple-impls.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass-fullmir%2Funsized-tuple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass-fullmir%2Funsized-tuple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Funsized-tuple-impls.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -Zmir-emit-validate=0\n-\n #![feature(unsized_tuple_coercion)]\n use std::mem;\n "}, {"sha": "5631b65ed9d8a6dd60a0465fd9651e8965e7390d", "filename": "tests/run-pass/dst-field-align.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass%2Fdst-field-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass%2Fdst-field-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdst-field-align.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME: Broken by #296\n-// compile-flags: -Zmir-emit-validate=0\n-\n #![allow(dead_code)]\n \n struct Foo<T: ?Sized> {"}, {"sha": "36155297e32f0224f9d9ef637944b0b3497daf3c", "filename": "tests/run-pass/mir_coercions.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass%2Fmir_coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass%2Fmir_coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fmir_coercions.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME: investigate again once #296 is fixed\n-// compile-flags: -Zmir-emit-validate=0\n-\n #![feature(coerce_unsized, unsize)]\n \n use std::ops::CoerceUnsized;"}, {"sha": "c9daff9c9f46931c2fe3d718f0add767c0b5db84", "filename": "tests/run-pass/non_capture_closure_to_fn_ptr.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass%2Fnon_capture_closure_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass%2Fnon_capture_closure_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fnon_capture_closure_to_fn_ptr.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -1,6 +1,3 @@\n-// FIXME: investigate again once #296 is fixed\n-// compile-flags: -Zmir-emit-validate=0\n-\n // allow(const_err) to work around a bug in warnings\n #[allow(const_err)]\n static FOO: fn() = || { assert_ne!(42, 43) };"}, {"sha": "f3ae3ab913a36df74f639873103cb0784204e64a", "filename": "tests/run-pass/pointers.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpointers.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -1,5 +1,3 @@\n-// compile-flags: -Zmir-emit-validate=0\n-\n fn one_line_ref() -> i16 {\n     *&1\n }"}, {"sha": "468cc9f094169422b3e5a077d599133319be4d78", "filename": "tests/run-pass/subslice_array.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass%2Fsubslice_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass%2Fsubslice_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsubslice_array.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -1,6 +1,3 @@\n-// FIXME: investigate again once #296 is fixed\n-// compile-flags: -Zmir-emit-validate=0\n-\n #![feature(advanced_slice_patterns)]\n #![feature(slice_patterns)]\n "}, {"sha": "fb57d4f4c1652aa9782c0a713626f098cc11d23b", "filename": "tests/run-pass/tuple_like_enum_variant_constructor_pointer_opt.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor_pointer_opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8307d27522b49f0972c2fae9007ef9212f2cf0cb/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor_pointer_opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftuple_like_enum_variant_constructor_pointer_opt.rs?ref=8307d27522b49f0972c2fae9007ef9212f2cf0cb", "patch": "@@ -1,6 +1,3 @@\n-// FIXME: investigate again once #296 is fixed\n-// compile-flags: -Zmir-emit-validate=0\n-\n fn main() {\n     let x = 5;\n     assert_eq!(Some(&x).map(Some), Some(Some(&x)));"}]}