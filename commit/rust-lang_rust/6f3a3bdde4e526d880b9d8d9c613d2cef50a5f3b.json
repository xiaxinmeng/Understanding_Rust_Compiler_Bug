{"sha": "6f3a3bdde4e526d880b9d8d9c613d2cef50a5f3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmM2EzYmRkZTRlNTI2ZDg4MGI5ZDhkOWM2MTNkMmNlZjUwYTVmM2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-10T15:04:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-10T15:04:15Z"}, "message": "Merge #9551\n\n9551: fix: `replace_qualified_name_with_use` keeps qualifier for import r=Veykril a=Veykril\n\nFixes #9537, #9540\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "9de95d0a96a418dfb5b23806279f2a6301a9f14c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9de95d0a96a418dfb5b23806279f2a6301a9f14c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f3a3bdde4e526d880b9d8d9c613d2cef50a5f3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg6bbvCRBK7hj4Ov3rIwAA9wIIAIMxg0VW0neu3zzBzi7GmdQX\nBDil8zKGO0llPnC5wgPkB+FVO3T05roCR9dCRMD64WALkLptYx9EdIO5rOMLNcFo\nbFn6Qh5tPeM0fbnRuwOYjx9ovPZTwsbkl5TArz/79BQlGgmzlm/PLYPzU9/k7gvK\nwHWSyUSxjR1xf0xB48aJ1ZupSowBvhdkbc/4FKXgBKvb5ei+zECpJEvdaV7njrqm\n1B9jMgDtju/X82959vY8IAlsBQaoYyMkgFDHOze1/7ajvySwuiNqpmBkq16sQFBg\nlHbduNtyPrOYNPda3QVF/iEHoZfrQYPnlHY+rclzf9VP7tr+4hgrx8fnwKocxhQ=\n=eTV2\n-----END PGP SIGNATURE-----\n", "payload": "tree 9de95d0a96a418dfb5b23806279f2a6301a9f14c\nparent 637dbb26a72598dfe5649f29c80ff53d3fb6098d\nparent 0db599231109c13e0c870987cee318f9cd8310eb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1625929455 +0000\ncommitter GitHub <noreply@github.com> 1625929455 +0000\n\nMerge #9551\n\n9551: fix: `replace_qualified_name_with_use` keeps qualifier for import r=Veykril a=Veykril\n\nFixes #9537, #9540\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f3a3bdde4e526d880b9d8d9c613d2cef50a5f3b", "html_url": "https://github.com/rust-lang/rust/commit/6f3a3bdde4e526d880b9d8d9c613d2cef50a5f3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f3a3bdde4e526d880b9d8d9c613d2cef50a5f3b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "637dbb26a72598dfe5649f29c80ff53d3fb6098d", "url": "https://api.github.com/repos/rust-lang/rust/commits/637dbb26a72598dfe5649f29c80ff53d3fb6098d", "html_url": "https://github.com/rust-lang/rust/commit/637dbb26a72598dfe5649f29c80ff53d3fb6098d"}, {"sha": "0db599231109c13e0c870987cee318f9cd8310eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0db599231109c13e0c870987cee318f9cd8310eb", "html_url": "https://github.com/rust-lang/rust/commit/0db599231109c13e0c870987cee318f9cd8310eb"}], "stats": {"total": 66, "additions": 57, "deletions": 9}, "files": [{"sha": "4a30b83b5a3d0849c0ed6ee4744f2ea3327ff610", "filename": "crates/ide_assists/src/handlers/replace_qualified_name_with_use.rs", "status": "modified", "additions": 57, "deletions": 9, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6f3a3bdde4e526d880b9d8d9c613d2cef50a5f3b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f3a3bdde4e526d880b9d8d9c613d2cef50a5f3b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_qualified_name_with_use.rs?ref=6f3a3bdde4e526d880b9d8d9c613d2cef50a5f3b", "patch": "@@ -3,7 +3,10 @@ use ide_db::helpers::{\n     insert_use::{insert_use, ImportScope},\n     mod_path_to_ast,\n };\n-use syntax::{ast, match_ast, ted, AstNode, SyntaxNode};\n+use syntax::{\n+    ast::{self, make},\n+    match_ast, ted, AstNode, SyntaxNode,\n+};\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n@@ -38,20 +41,26 @@ pub(crate) fn replace_qualified_name_with_use(\n         return None;\n     }\n \n-    let res = ctx.sema.resolve_path(&path)?;\n-    let def: hir::ItemInNs = match res {\n-        hir::PathResolution::Def(def) if def.as_assoc_item(ctx.sema.db).is_none() => def.into(),\n-        hir::PathResolution::Macro(mac) => mac.into(),\n+    // only offer replacement for non assoc items\n+    match ctx.sema.resolve_path(&path)? {\n+        hir::PathResolution::Def(def) if def.as_assoc_item(ctx.sema.db).is_none() => (),\n+        hir::PathResolution::Macro(_) => (),\n+        _ => return None,\n+    }\n+    // then search for an import for the first path segment of what we want to replace\n+    // that way it is less likely that we import the item from a different location due re-exports\n+    let module = match ctx.sema.resolve_path(&path.first_qualifier_or_self())? {\n+        hir::PathResolution::Def(module @ hir::ModuleDef::Module(_)) => module,\n         _ => return None,\n     };\n \n-    let target = path.syntax().text_range();\n     let scope = ImportScope::find_insert_use_container_with_macros(path.syntax(), &ctx.sema)?;\n-    let mod_path = ctx.sema.scope(path.syntax()).module()?.find_use_path_prefixed(\n+    let path_to_qualifier = ctx.sema.scope(path.syntax()).module()?.find_use_path_prefixed(\n         ctx.sema.db,\n-        def,\n+        module,\n         ctx.config.insert_use.prefix_kind,\n     )?;\n+    let target = path.syntax().text_range();\n     acc.add(\n         AssistId(\"replace_qualified_name_with_use\", AssistKind::RefactorRewrite),\n         \"Replace qualified path with use\",\n@@ -64,7 +73,11 @@ pub(crate) fn replace_qualified_name_with_use(\n                 ImportScope::Module(it) => ImportScope::Module(builder.make_mut(it)),\n                 ImportScope::Block(it) => ImportScope::Block(builder.make_mut(it)),\n             };\n-            let path = mod_path_to_ast(&mod_path);\n+            // stick the found import in front of the to be replaced path\n+            let path = match mod_path_to_ast(&path_to_qualifier).qualifier() {\n+                Some(qualifier) => make::path_concat(qualifier, path),\n+                None => path,\n+            };\n             shorten_paths(scope.as_syntax_node(), &path.clone_for_update());\n             insert_use(&scope, path, &ctx.config.insert_use);\n         },\n@@ -300,6 +313,41 @@ impl Foo {\n fn main() {\n     Foo::foo$0();\n }\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn replace_reuses_path_qualifier() {\n+        check_assist(\n+            replace_qualified_name_with_use,\n+            r\"\n+pub mod foo {\n+    struct Foo;\n+}\n+\n+mod bar {\n+    pub use super::foo::Foo as Bar;\n+}\n+\n+fn main() {\n+    foo::Foo$0;\n+}\n+\",\n+            r\"\n+use foo::Foo;\n+\n+pub mod foo {\n+    struct Foo;\n+}\n+\n+mod bar {\n+    pub use super::foo::Foo as Bar;\n+}\n+\n+fn main() {\n+    Foo;\n+}\n \",\n         );\n     }"}]}