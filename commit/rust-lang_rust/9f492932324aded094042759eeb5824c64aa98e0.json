{"sha": "9f492932324aded094042759eeb5824c64aa98e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNDkyOTMyMzI0YWRlZDA5NDA0Mjc1OWVlYjU4MjRjNjRhYTk4ZTA=", "commit": {"author": {"name": "Chris Peterson", "email": "cpeterson@mozilla.com", "date": "2012-02-20T07:13:31Z"}, "committer": {"name": "Chris Peterson", "email": "cpeterson@mozilla.com", "date": "2012-02-20T07:13:31Z"}, "message": "rt: Initialize Windows CRITICAL_SECTION with non-zero spin count\n\nIf a CRITICAL_SECTION is not initialized with a spin count, it will\ndefault to 0, even on multi-processor systems. MSDN suggests using\n4000. On single-processor systems, the spin count parameter is ignored\nand the critical section's spin count defaults to 0.\n\nFor Windows >= Vista, extra debug info is allocated for\nCRITICAL_SECTIONs but not released in a timely manner. Consider using\nInitializeCriticalSectionEx(CRITICAL_SECTION_NO_DEBUG_INFO).", "tree": {"sha": "4c257365278c638d95dcf3b87f6a4c2670c05357", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c257365278c638d95dcf3b87f6a4c2670c05357"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f492932324aded094042759eeb5824c64aa98e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f492932324aded094042759eeb5824c64aa98e0", "html_url": "https://github.com/rust-lang/rust/commit/9f492932324aded094042759eeb5824c64aa98e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f492932324aded094042759eeb5824c64aa98e0/comments", "author": {"login": "cpeterso", "id": 629193, "node_id": "MDQ6VXNlcjYyOTE5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/629193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpeterso", "html_url": "https://github.com/cpeterso", "followers_url": "https://api.github.com/users/cpeterso/followers", "following_url": "https://api.github.com/users/cpeterso/following{/other_user}", "gists_url": "https://api.github.com/users/cpeterso/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpeterso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpeterso/subscriptions", "organizations_url": "https://api.github.com/users/cpeterso/orgs", "repos_url": "https://api.github.com/users/cpeterso/repos", "events_url": "https://api.github.com/users/cpeterso/events{/privacy}", "received_events_url": "https://api.github.com/users/cpeterso/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cpeterso", "id": 629193, "node_id": "MDQ6VXNlcjYyOTE5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/629193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpeterso", "html_url": "https://github.com/cpeterso", "followers_url": "https://api.github.com/users/cpeterso/followers", "following_url": "https://api.github.com/users/cpeterso/following{/other_user}", "gists_url": "https://api.github.com/users/cpeterso/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpeterso/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpeterso/subscriptions", "organizations_url": "https://api.github.com/users/cpeterso/orgs", "repos_url": "https://api.github.com/users/cpeterso/repos", "events_url": "https://api.github.com/users/cpeterso/events{/privacy}", "received_events_url": "https://api.github.com/users/cpeterso/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "159dfd7c3b9ea12a4d83c99c1eaa121f4be605c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/159dfd7c3b9ea12a4d83c99c1eaa121f4be605c3", "html_url": "https://github.com/rust-lang/rust/commit/159dfd7c3b9ea12a4d83c99c1eaa121f4be605c3"}], "stats": {"total": 13, "additions": 12, "deletions": 1}, "files": [{"sha": "99861ae427967699f00e513c2b7fec2467357244", "filename": "src/rt/sync/lock_and_signal.cpp", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f492932324aded094042759eeb5824c64aa98e0/src%2Frt%2Fsync%2Flock_and_signal.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/9f492932324aded094042759eeb5824c64aa98e0/src%2Frt%2Fsync%2Flock_and_signal.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Flock_and_signal.cpp?ref=9f492932324aded094042759eeb5824c64aa98e0", "patch": "@@ -19,7 +19,18 @@ lock_and_signal::lock_and_signal()\n     : _holding_thread(INVALID_THREAD)\n {\n     _event = CreateEvent(NULL, FALSE, FALSE, NULL);\n-    InitializeCriticalSection(&_cs);\n+\n+    // If a CRITICAL_SECTION is not initialized with a spin count, it will\n+    // default to 0, even on multi-processor systems. MSDN suggests using\n+    // 4000. On single-processor systems, the spin count parameter is ignored\n+    // and the critical section's spin count defaults to 0.\n+    const DWORD SPIN_COUNT = 4000;\n+    CHECKED(!InitializeCriticalSectionAndSpinCount(&_cs, SPIN_COUNT));\n+\n+    // TODO? Consider checking GetProcAddress(\"InitializeCriticalSectionEx\")\n+    // so Windows >= Vista we can use CRITICAL_SECTION_NO_DEBUG_INFO to avoid\n+    // allocating CRITICAL_SECTION debug info that is never released. See:\n+    // http://stackoverflow.com/questions/804848/critical-sections-leaking-memory-on-vista-win2008#889853\n }\n \n #else"}]}