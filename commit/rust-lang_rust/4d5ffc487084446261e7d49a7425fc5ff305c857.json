{"sha": "4d5ffc487084446261e7d49a7425fc5ff305c857", "node_id": "C_kwDOAAsO6NoAKDRkNWZmYzQ4NzA4NDQ0NjI2MWU3ZDQ5YTc0MjVmYzVmZjMwNWM4NTc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-19T09:45:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-19T09:45:51Z"}, "message": "Rollup merge of #91984 - Aaron1011:rustc-middle-lifetime, r=oli-obk\n\nRemove `in_band_lifetimes` from `rustc_middle`\n\nSee #91867\n\nThis was mostly straightforward. In several places, I take advantage\nof the fact that lifetimes are non-hygenic: a macro declares the\n'tcx' lifetime, which is then used in types passed in as macro\narguments.", "tree": {"sha": "3aa462b700469c2afc3c7e2a3484b3b5a000ce1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aa462b700469c2afc3c7e2a3484b3b5a000ce1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d5ffc487084446261e7d49a7425fc5ff305c857", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhvv9QCRBK7hj4Ov3rIwAAUcEIAJLyjdgQ2vubW+HwFQksUa+q\nGMoTGLtZ1bpKl1Yil64uerSbaligB3DTkhFWXdFRf5w+hwi14+LZdqW0Yu8hdK7B\nMAkx9EzV+a7gS4MaVs7DUXZrmpBpPnLWiCeyCxNuPhiQmJTm8YagJ7ibYjxSVFOR\n0MIbMcvSgCsxmUjH1iI2H9tR3/n3RXkL2scHZgrcFYWeSV5mhpPozQJN677U5k4c\nsmtW85VPZ6WRiF4eiHkPfkaS4s6VJjs3n5DND6VOLY8HfbsQ+6hkd3+9nh2Phb54\npydSzeySmTZV4m1OQ3/mrw2Dyqmak8xqWcvbl0xajqLKYRHUbXxDW2JJGaYI30Y=\n=Q0Kk\n-----END PGP SIGNATURE-----\n", "payload": "tree 3aa462b700469c2afc3c7e2a3484b3b5a000ce1d\nparent 6d2689526b168d0208af0930e46dc2ef360f07fc\nparent a5b3dfe45355969796747fd4167e837463ccf998\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1639907151 +0100\ncommitter GitHub <noreply@github.com> 1639907151 +0100\n\nRollup merge of #91984 - Aaron1011:rustc-middle-lifetime, r=oli-obk\n\nRemove `in_band_lifetimes` from `rustc_middle`\n\nSee #91867\n\nThis was mostly straightforward. In several places, I take advantage\nof the fact that lifetimes are non-hygenic: a macro declares the\n'tcx' lifetime, which is then used in types passed in as macro\narguments.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d5ffc487084446261e7d49a7425fc5ff305c857", "html_url": "https://github.com/rust-lang/rust/commit/4d5ffc487084446261e7d49a7425fc5ff305c857", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d5ffc487084446261e7d49a7425fc5ff305c857/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d2689526b168d0208af0930e46dc2ef360f07fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2689526b168d0208af0930e46dc2ef360f07fc", "html_url": "https://github.com/rust-lang/rust/commit/6d2689526b168d0208af0930e46dc2ef360f07fc"}, {"sha": "a5b3dfe45355969796747fd4167e837463ccf998", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5b3dfe45355969796747fd4167e837463ccf998", "html_url": "https://github.com/rust-lang/rust/commit/a5b3dfe45355969796747fd4167e837463ccf998"}], "stats": {"total": 233, "additions": 122, "deletions": 111}, "files": [{"sha": "bc8213a18eaccd3fbd1e2f9b3a94e5fb87105117", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -1,10 +1,15 @@\n use quote::quote;\n+use syn::parse_quote;\n \n pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n     if let syn::Data::Union(_) = s.ast().data {\n         panic!(\"cannot derive on union\")\n     }\n \n+    if !s.ast().generics.lifetimes().any(|lt| lt.lifetime.ident == \"tcx\") {\n+        s.add_impl_generic(parse_quote! { 'tcx });\n+    }\n+\n     s.add_bounds(synstructure::AddBounds::Generics);\n     let body_visit = s.each(|bind| {\n         quote! {"}, {"sha": "5c7cdbe4c2bdb3ce93d1b1242cab705721272d80", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -201,7 +201,7 @@ crate fn make_compile_codegen_unit(tcx: TyCtxt<'_>, name: Symbol) -> DepNode {\n \n // WARNING: `construct` is generic and does not know that `CompileMonoItem` takes `MonoItem`s as keys.\n // Be very careful changing this type signature!\n-crate fn make_compile_mono_item(tcx: TyCtxt<'tcx>, mono_item: &MonoItem<'tcx>) -> DepNode {\n+crate fn make_compile_mono_item<'tcx>(tcx: TyCtxt<'tcx>, mono_item: &MonoItem<'tcx>) -> DepNode {\n     DepNode::construct(tcx, DepKind::CompileMonoItem, mono_item)\n }\n \n@@ -264,7 +264,7 @@ impl DepNodeExt for DepNode {\n     /// DepNode. Condition (2) might not be fulfilled if a DepNode\n     /// refers to something from the previous compilation session that\n     /// has been removed.\n-    fn extract_def_id(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n+    fn extract_def_id<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Option<DefId> {\n         if self.kind.fingerprint_style(tcx) == FingerprintStyle::DefPathHash {\n             Some(tcx.def_path_hash_to_def_id(DefPathHash(self.hash.into())))\n         } else {"}, {"sha": "605fff671db06dfca12e5f931d0f9b69a11c3aa4", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -75,7 +75,7 @@ pub struct OriginalQueryValues<'tcx> {\n     pub var_values: SmallVec<[GenericArg<'tcx>; 8]>,\n }\n \n-impl Default for OriginalQueryValues<'tcx> {\n+impl<'tcx> Default for OriginalQueryValues<'tcx> {\n     fn default() -> Self {\n         let mut universe_map = SmallVec::default();\n         universe_map.push(ty::UniverseIndex::ROOT);"}, {"sha": "dcc49a5357248f6844e2c1f85ba45d09395ab2e7", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -164,7 +164,7 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n \n impl<'tcx> EqUnifyValue for &'tcx ty::Const<'tcx> {}\n \n-pub fn replace_if_possible<V, L>(\n+pub fn replace_if_possible<'tcx, V, L>(\n     table: &mut UnificationTable<InPlace<ty::ConstVid<'tcx>, V, L>>,\n     c: &'tcx ty::Const<'tcx>,\n ) -> &'tcx ty::Const<'tcx>"}, {"sha": "e6dd4e484cc9ce7ff7d28fb58f00948eb747ec8d", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -44,7 +44,6 @@\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(trusted_len)]\n-#![feature(in_band_lifetimes)]\n #![feature(crate_visibility_modifier)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]"}, {"sha": "0d6da8cdff23cf99256d897cb6854ab3b5e8d9cc", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -212,7 +212,7 @@ pub fn struct_lint_level<'s, 'd>(\n ) {\n     // Avoid codegen bloat from monomorphization by immediately doing dyn dispatch of `decorate` to\n     // the \"real\" work.\n-    fn struct_lint_level_impl(\n+    fn struct_lint_level_impl<'s, 'd>(\n         sess: &'s Session,\n         lint: &'static Lint,\n         level: Level,"}, {"sha": "1c6c1f69c6e5cec1a14cbbb00a3d76cb6525ce06", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -229,7 +229,7 @@ pub fn deprecation_message_and_lint(\n     )\n }\n \n-pub fn early_report_deprecation(\n+pub fn early_report_deprecation<'a>(\n     lint_buffer: &'a mut LintBuffer,\n     message: &str,\n     suggestion: Option<Symbol>,"}, {"sha": "37ec2006172b699a9dd5ead7141c2677bb119c67", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -63,7 +63,7 @@ impl fmt::Display for InterpErrorInfo<'_> {\n     }\n }\n \n-impl InterpErrorInfo<'tcx> {\n+impl<'tcx> InterpErrorInfo<'tcx> {\n     pub fn print_backtrace(&self) {\n         if let Some(backtrace) = self.0.backtrace.as_ref() {\n             print_backtrace(backtrace);"}, {"sha": "b762a10da847a529197825a80c4465d343a4ff55", "filename": "compiler/rustc_middle/src/mir/interpret/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fmod.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -145,7 +145,7 @@ pub struct GlobalId<'tcx> {\n     pub promoted: Option<mir::Promoted>,\n }\n \n-impl GlobalId<'tcx> {\n+impl<'tcx> GlobalId<'tcx> {\n     pub fn display(self, tcx: TyCtxt<'tcx>) -> String {\n         let instance_name = with_no_trimmed_paths(|| tcx.def_path_str(self.instance.def.def_id()));\n         if let Some(promoted) = self.promoted {\n@@ -273,7 +273,7 @@ pub struct AllocDecodingSession<'s> {\n \n impl<'s> AllocDecodingSession<'s> {\n     /// Decodes an `AllocId` in a thread-safe way.\n-    pub fn decode_alloc_id<D>(&self, decoder: &mut D) -> Result<AllocId, D::Error>\n+    pub fn decode_alloc_id<'tcx, D>(&self, decoder: &mut D) -> Result<AllocId, D::Error>\n     where\n         D: TyDecoder<'tcx>,\n     {\n@@ -390,7 +390,7 @@ pub enum GlobalAlloc<'tcx> {\n     Memory(&'tcx Allocation),\n }\n \n-impl GlobalAlloc<'tcx> {\n+impl<'tcx> GlobalAlloc<'tcx> {\n     /// Panics if the `GlobalAlloc` does not refer to an `GlobalAlloc::Memory`\n     #[track_caller]\n     #[inline]"}, {"sha": "2fe59f14674869f501fceedca3e09864837af484", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -2033,7 +2033,7 @@ impl SourceScope {\n     /// Finds the original HirId this MIR item came from.\n     /// This is necessary after MIR optimizations, as otherwise we get a HirId\n     /// from the function that was inlined instead of the function call site.\n-    pub fn lint_root(\n+    pub fn lint_root<'tcx>(\n         self,\n         source_scopes: &IndexVec<SourceScope, SourceScopeData<'tcx>>,\n     ) -> Option<HirId> {\n@@ -2543,7 +2543,7 @@ pub enum ConstantKind<'tcx> {\n     Val(interpret::ConstValue<'tcx>, Ty<'tcx>),\n }\n \n-impl Constant<'tcx> {\n+impl<'tcx> Constant<'tcx> {\n     pub fn check_static_ptr(&self, tcx: TyCtxt<'_>) -> Option<DefId> {\n         match self.literal.const_for_ty()?.val.try_to_scalar() {\n             Some(Scalar::Ptr(ptr, _size)) => match tcx.global_alloc(ptr.provenance) {\n@@ -2562,14 +2562,14 @@ impl Constant<'tcx> {\n     }\n }\n \n-impl From<&'tcx ty::Const<'tcx>> for ConstantKind<'tcx> {\n+impl<'tcx> From<&'tcx ty::Const<'tcx>> for ConstantKind<'tcx> {\n     #[inline]\n     fn from(ct: &'tcx ty::Const<'tcx>) -> Self {\n         Self::Ty(ct)\n     }\n }\n \n-impl ConstantKind<'tcx> {\n+impl<'tcx> ConstantKind<'tcx> {\n     /// Returns `None` if the constant is not trivially safe for use in the type system.\n     pub fn const_for_ty(&self) -> Option<&'tcx ty::Const<'tcx>> {\n         match self {\n@@ -2851,7 +2851,7 @@ impl<'tcx> Display for ConstantKind<'tcx> {\n     }\n }\n \n-fn pretty_print_const(\n+fn pretty_print_const<'tcx>(\n     c: &ty::Const<'tcx>,\n     fmt: &mut Formatter<'_>,\n     print_types: bool,\n@@ -2866,7 +2866,7 @@ fn pretty_print_const(\n     })\n }\n \n-fn pretty_print_const_value(\n+fn pretty_print_const_value<'tcx>(\n     val: interpret::ConstValue<'tcx>,\n     ty: Ty<'tcx>,\n     fmt: &mut Formatter<'_>,\n@@ -2913,12 +2913,12 @@ impl<'a, 'b> graph::GraphSuccessors<'b> for Body<'a> {\n     type Iter = iter::Cloned<Successors<'b>>;\n }\n \n-impl graph::GraphPredecessors<'graph> for Body<'tcx> {\n+impl<'tcx, 'graph> graph::GraphPredecessors<'graph> for Body<'tcx> {\n     type Item = BasicBlock;\n     type Iter = std::iter::Copied<std::slice::Iter<'graph, BasicBlock>>;\n }\n \n-impl graph::WithPredecessors for Body<'tcx> {\n+impl<'tcx> graph::WithPredecessors for Body<'tcx> {\n     #[inline]\n     fn predecessors(&self, node: Self::Node) -> <Self as graph::GraphPredecessors<'_>>::Iter {\n         self.predecessors()[node].iter().copied()"}, {"sha": "b2142b5b7c2c5aec2184c7ae4e05480d63393020", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -431,7 +431,7 @@ pub struct CodegenUnitNameBuilder<'tcx> {\n     cache: FxHashMap<CrateNum, String>,\n }\n \n-impl CodegenUnitNameBuilder<'tcx> {\n+impl<'tcx> CodegenUnitNameBuilder<'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>) -> Self {\n         CodegenUnitNameBuilder { tcx, cache: Default::default() }\n     }"}, {"sha": "8cc705384b03e7bb8bdabf0c826bc087cb0b7c9a", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -167,8 +167,8 @@ fn dump_matched_mir_node<'tcx, F>(\n \n /// Returns the file basename portion (without extension) of a filename path\n /// where we should dump a MIR representation output files.\n-fn dump_file_basename(\n-    tcx: TyCtxt<'_>,\n+fn dump_file_basename<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n     disambiguator: &dyn Display,\n@@ -251,8 +251,8 @@ fn create_dump_file_with_basename(\n /// bit of MIR-related data. Used by `mir-dump`, but also by other\n /// bits of code (e.g., NLL inference) that dump graphviz data or\n /// other things, and hence takes the extension as an argument.\n-pub fn create_dump_file(\n-    tcx: TyCtxt<'_>,\n+pub fn create_dump_file<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n     extension: &str,\n     pass_num: Option<&dyn Display>,\n     pass_name: &str,\n@@ -419,15 +419,15 @@ struct ExtraComments<'tcx> {\n     comments: Vec<String>,\n }\n \n-impl ExtraComments<'tcx> {\n+impl<'tcx> ExtraComments<'tcx> {\n     fn push(&mut self, lines: &str) {\n         for line in lines.split('\\n') {\n             self.comments.push(line.to_string());\n         }\n     }\n }\n \n-fn use_verbose(ty: &&TyS<'tcx>, fn_def: bool) -> bool {\n+fn use_verbose<'tcx>(ty: &&TyS<'tcx>, fn_def: bool) -> bool {\n     match ty.kind() {\n         ty::Int(_) | ty::Uint(_) | ty::Bool | ty::Char | ty::Float(_) => false,\n         // Unit type\n@@ -439,7 +439,7 @@ fn use_verbose(ty: &&TyS<'tcx>, fn_def: bool) -> bool {\n     }\n }\n \n-impl Visitor<'tcx> for ExtraComments<'tcx> {\n+impl<'tcx> Visitor<'tcx> for ExtraComments<'tcx> {\n     fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.super_constant(constant, location);\n         let Constant { span, user_ty, literal } = constant;\n@@ -762,7 +762,7 @@ pub fn write_allocations<'tcx>(\n /// After the hex dump, an ascii dump follows, replacing all unprintable characters (control\n /// characters or characters whose value is larger than 127) with a `.`\n /// This also prints relocations adequately.\n-pub fn display_allocation<Tag, Extra>(\n+pub fn display_allocation<'a, 'tcx, Tag, Extra>(\n     tcx: TyCtxt<'tcx>,\n     alloc: &'a Allocation<Tag, Extra>,\n ) -> RenderAllocation<'a, 'tcx, Tag, Extra> {\n@@ -775,7 +775,9 @@ pub struct RenderAllocation<'a, 'tcx, Tag, Extra> {\n     alloc: &'a Allocation<Tag, Extra>,\n }\n \n-impl<Tag: Provenance, Extra> std::fmt::Display for RenderAllocation<'a, 'tcx, Tag, Extra> {\n+impl<'a, 'tcx, Tag: Provenance, Extra> std::fmt::Display\n+    for RenderAllocation<'a, 'tcx, Tag, Extra>\n+{\n     fn fmt(&self, w: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         let RenderAllocation { tcx, alloc } = *self;\n         write!(w, \"size: {}, align: {})\", alloc.size().bytes(), alloc.align.bytes())?;\n@@ -818,7 +820,7 @@ fn write_allocation_newline(\n /// The `prefix` argument allows callers to add an arbitrary prefix before each line (even if there\n /// is only one line). Note that your prefix should contain a trailing space as the lines are\n /// printed directly after it.\n-fn write_allocation_bytes<Tag: Provenance, Extra>(\n+fn write_allocation_bytes<'tcx, Tag: Provenance, Extra>(\n     tcx: TyCtxt<'tcx>,\n     alloc: &Allocation<Tag, Extra>,\n     w: &mut dyn std::fmt::Write,"}, {"sha": "8c930fd161efbf4ce6e86e0779f69b2bc228da2d", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -300,7 +300,7 @@ pub fn reachable<'a, 'tcx>(\n }\n \n /// Returns a `BitSet` containing all basic blocks reachable from the `START_BLOCK`.\n-pub fn reachable_as_bitset(body: &Body<'tcx>) -> BitSet<BasicBlock> {\n+pub fn reachable_as_bitset<'tcx>(body: &Body<'tcx>) -> BitSet<BasicBlock> {\n     let mut iter = preorder(body);\n     (&mut iter).for_each(drop);\n     iter.visited"}, {"sha": "f301c68a7c091d4476139397a9189f85e7e2456b", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -965,7 +965,7 @@ macro_rules! visit_place_fns {\n             }\n         }\n \n-        fn process_projection(\n+        fn process_projection<'a>(\n             &mut self,\n             projection: &'a [PlaceElem<'tcx>],\n             location: Location,"}, {"sha": "3e6a6b3ba4222f699177b2288bdad0fccc3cc1e3", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> fmt::Debug for ObligationCause<'tcx> {\n     }\n }\n \n-impl Deref for ObligationCause<'tcx> {\n+impl<'tcx> Deref for ObligationCause<'tcx> {\n     type Target = ObligationCauseData<'tcx>;\n \n     #[inline(always)]"}, {"sha": "3e9cd6b46b211c4c207f848ec66f280d13875749", "filename": "compiler/rustc_middle/src/traits/specialization_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fspecialization_graph.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -216,7 +216,7 @@ impl<'tcx> Ancestors<'tcx> {\n ///\n /// Returns `Err` if an error was reported while building the specialization\n /// graph.\n-pub fn ancestors(\n+pub fn ancestors<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     trait_def_id: DefId,\n     start_from_impl: DefId,"}, {"sha": "aa2f37bd81ad8914341e79f6433dd987bdddc344", "filename": "compiler/rustc_middle/src/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fstructural_impls.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -74,7 +74,7 @@ impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceBuiltinData<N> {\n     }\n }\n \n-impl<N: fmt::Debug> fmt::Debug for traits::ImplSourceTraitUpcastingData<'tcx, N> {\n+impl<'tcx, N: fmt::Debug> fmt::Debug for traits::ImplSourceTraitUpcastingData<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,"}, {"sha": "e0e3febe6b3109b0c23cefe3b98f3cccffc95ca0", "filename": "compiler/rustc_middle/src/ty/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2F_match.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -23,13 +23,13 @@ pub struct Match<'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n-impl Match<'tcx> {\n+impl<'tcx> Match<'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Match<'tcx> {\n         Match { tcx, param_env }\n     }\n }\n \n-impl TypeRelation<'tcx> for Match<'tcx> {\n+impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n     fn tag(&self) -> &'static str {\n         \"Match\"\n     }"}, {"sha": "2676b7ab521d83bfb2bc9f87493e59d94d494c10", "filename": "compiler/rustc_middle/src/ty/adjustment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -83,7 +83,7 @@ pub struct Adjustment<'tcx> {\n     pub target: Ty<'tcx>,\n }\n \n-impl Adjustment<'tcx> {\n+impl<'tcx> Adjustment<'tcx> {\n     pub fn is_region_borrow(&self) -> bool {\n         matches!(self.kind, Adjust::Borrow(AutoBorrow::Ref(..)))\n     }"}, {"sha": "bf5a3e68250a02e4aec066c0fb8c4159af062b92", "filename": "compiler/rustc_middle/src/ty/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fassoc.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -139,7 +139,7 @@ impl<'tcx> AssocItems<'tcx> {\n     /// Multiple items may have the same name if they are in different `Namespace`s. For example,\n     /// an associated type can have the same name as a method. Use one of the `find_by_name_and_*`\n     /// methods below if you know which item you are looking for.\n-    pub fn filter_by_name(\n+    pub fn filter_by_name<'a>(\n         &'a self,\n         tcx: TyCtxt<'a>,\n         ident: Ident,"}, {"sha": "771acc29649139d0e03d7caf993796c3c60fa4a2", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -156,7 +156,7 @@ pub struct CapturedPlace<'tcx> {\n     pub mutability: hir::Mutability,\n }\n \n-impl CapturedPlace<'tcx> {\n+impl<'tcx> CapturedPlace<'tcx> {\n     pub fn to_string(&self, tcx: TyCtxt<'tcx>) -> String {\n         place_to_string_for_capture(tcx, &self.place)\n     }\n@@ -328,7 +328,7 @@ pub struct CaptureInfo<'tcx> {\n     pub capture_kind: UpvarCapture<'tcx>,\n }\n \n-pub fn place_to_string_for_capture(tcx: TyCtxt<'tcx>, place: &HirPlace<'tcx>) -> String {\n+pub fn place_to_string_for_capture<'tcx>(tcx: TyCtxt<'tcx>, place: &HirPlace<'tcx>) -> String {\n     let mut curr_string: String = match place.base {\n         HirPlaceBase::Upvar(upvar_id) => tcx.hir().name(upvar_id.var_path.hir_id).to_string(),\n         _ => bug!(\"Capture_information should only contain upvars\"),"}, {"sha": "f7601a18790b2f2c86b69608bfcc3ad6d463d414", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -76,7 +76,11 @@ pub trait RefDecodable<'tcx, D: TyDecoder<'tcx>> {\n }\n \n /// Encode the given value or a previously cached shorthand.\n-pub fn encode_with_shorthand<E, T, M>(encoder: &mut E, value: &T, cache: M) -> Result<(), E::Error>\n+pub fn encode_with_shorthand<'tcx, E, T, M>(\n+    encoder: &mut E,\n+    value: &T,\n+    cache: M,\n+) -> Result<(), E::Error>\n where\n     E: TyEncoder<'tcx>,\n     M: for<'b> Fn(&'b mut E) -> &'b mut FxHashMap<T, usize>,"}, {"sha": "1f4ebd036766f96869714f337d119b47d6368939", "filename": "compiler/rustc_middle/src/ty/consts/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fint.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -234,7 +234,7 @@ impl ScalarInt {\n     }\n \n     #[inline]\n-    pub fn try_to_machine_usize(&self, tcx: TyCtxt<'tcx>) -> Result<u64, Size> {\n+    pub fn try_to_machine_usize<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Result<u64, Size> {\n         Ok(self.to_bits(tcx.data_layout.pointer_size)? as u64)\n     }\n }"}, {"sha": "fae22c28628f86f35ba023fce19625a4caeb5b88", "filename": "compiler/rustc_middle/src/ty/consts/valtree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -27,7 +27,7 @@ pub enum ValTree<'tcx> {\n     Branch(&'tcx [ValTree<'tcx>]),\n }\n \n-impl ValTree<'tcx> {\n+impl<'tcx> ValTree<'tcx> {\n     pub fn zst() -> Self {\n         Self::Branch(&[])\n     }"}, {"sha": "14dd7b8ac31197bdba77ecfc1f34ada74d4f0414", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -824,7 +824,7 @@ pub struct CanonicalUserTypeAnnotation<'tcx> {\n /// Canonicalized user type annotation.\n pub type CanonicalUserType<'tcx> = Canonical<'tcx, UserType<'tcx>>;\n \n-impl CanonicalUserType<'tcx> {\n+impl<'tcx> CanonicalUserType<'tcx> {\n     /// Returns `true` if this represents a substitution of the form `[?0, ?1, ?2]`,\n     /// i.e., each thing is mapped to a canonical variable with the same index.\n     pub fn is_identity(&self) -> bool {\n@@ -1893,7 +1893,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn debug_stats(self) -> impl std::fmt::Debug + 'tcx {\n         struct DebugStats<'tcx>(TyCtxt<'tcx>);\n \n-        impl std::fmt::Debug for DebugStats<'tcx> {\n+        impl<'tcx> std::fmt::Debug for DebugStats<'tcx> {\n             fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n                 sty_debug_print!(\n                     fmt,\n@@ -2711,7 +2711,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n-impl TyCtxtAt<'tcx> {\n+impl<'tcx> TyCtxtAt<'tcx> {\n     /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.\n     #[track_caller]\n     pub fn ty_error(self) -> Ty<'tcx> {"}, {"sha": "0d290752e8fd81c130f4b06040ae3abbdd71800a", "filename": "compiler/rustc_middle/src/ty/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferase_regions.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -37,7 +37,7 @@ struct RegionEraserVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl TypeFolder<'tcx> for RegionEraserVisitor<'tcx> {\n+impl<'tcx> TypeFolder<'tcx> for RegionEraserVisitor<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "617c522ac81971e27be38caa66622e34a1e361cc", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -22,7 +22,7 @@ impl FlagComputation {\n         result\n     }\n \n-    pub fn for_predicate(binder: ty::Binder<'tcx, ty::PredicateKind<'_>>) -> FlagComputation {\n+    pub fn for_predicate<'tcx>(binder: ty::Binder<'tcx, ty::PredicateKind<'_>>) -> FlagComputation {\n         let mut result = FlagComputation::new();\n         result.add_predicate(binder);\n         result\n@@ -216,7 +216,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_predicate(&mut self, binder: ty::Binder<'tcx, ty::PredicateKind<'_>>) {\n+    fn add_predicate(&mut self, binder: ty::Binder<'_, ty::PredicateKind<'_>>) {\n         self.bound_computation(binder, |computation, atom| computation.add_predicate_atom(atom));\n     }\n \n@@ -310,7 +310,7 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_unevaluated_const<P>(&mut self, ct: ty::Unevaluated<'tcx, P>) {\n+    fn add_unevaluated_const<P>(&mut self, ct: ty::Unevaluated<'_, P>) {\n         // The generic arguments of unevaluated consts are a bit special,\n         // see the `rustc-dev-guide` for more information.\n         //"}, {"sha": "f5be8b21e8acae5b7103553d4bec742fccfc66a3", "filename": "compiler/rustc_middle/src/ty/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffold.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -199,7 +199,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n }\n \n-impl TypeFoldable<'tcx> for hir::Constness {\n+impl<'tcx> TypeFoldable<'tcx> for hir::Constness {\n     fn try_super_fold_with<F: TypeFolder<'tcx>>(self, _: &mut F) -> Result<Self, F::Error> {\n         Ok(self)\n     }\n@@ -1060,13 +1060,13 @@ struct Shifter<'tcx> {\n     amount: u32,\n }\n \n-impl Shifter<'tcx> {\n+impl<'tcx> Shifter<'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, amount: u32) -> Self {\n         Shifter { tcx, current_index: ty::INNERMOST, amount }\n     }\n }\n \n-impl TypeFolder<'tcx> for Shifter<'tcx> {\n+impl<'tcx> TypeFolder<'tcx> for Shifter<'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -1257,7 +1257,7 @@ struct HasTypeFlagsVisitor<'tcx> {\n     flags: ty::TypeFlags,\n }\n \n-impl std::fmt::Debug for HasTypeFlagsVisitor<'tcx> {\n+impl<'tcx> std::fmt::Debug for HasTypeFlagsVisitor<'tcx> {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         self.flags.fmt(fmt)\n     }\n@@ -1454,7 +1454,7 @@ struct LateBoundRegionsCollector<'tcx> {\n     just_constrained: bool,\n }\n \n-impl LateBoundRegionsCollector<'tcx> {\n+impl<'tcx> LateBoundRegionsCollector<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>, just_constrained: bool) -> Self {\n         LateBoundRegionsCollector {\n             tcx,"}, {"sha": "f31c7dd743d8290da2f303b89f894a815cfa7f01", "filename": "compiler/rustc_middle/src/ty/inhabitedness/def_id_forest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fdef_id_forest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finhabitedness%2Fdef_id_forest.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -30,7 +30,7 @@ pub enum DefIdForest {\n \n /// Tests whether a slice of roots contains a given DefId.\n #[inline]\n-fn slice_contains(tcx: TyCtxt<'tcx>, slice: &[DefId], id: DefId) -> bool {\n+fn slice_contains<'tcx>(tcx: TyCtxt<'tcx>, slice: &[DefId], id: DefId) -> bool {\n     slice.iter().any(|root_id| tcx.is_descendant_of(id, *root_id))\n }\n "}, {"sha": "eaa7ee84b7b8d994a791a263f0282bb2d9d3f1af", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -635,7 +635,7 @@ fn polymorphize<'tcx>(\n         tcx: TyCtxt<'tcx>,\n     }\n \n-    impl ty::TypeFolder<'tcx> for PolymorphizationFolder<'tcx> {\n+    impl<'tcx> ty::TypeFolder<'tcx> for PolymorphizationFolder<'tcx> {\n         fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n             self.tcx\n         }"}, {"sha": "7ec6d3f3b2b2db859017b289bc6c7ea3a154b541", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -168,7 +168,7 @@ impl PrimitiveExt for Primitive {\n     /// Return an *integer* type matching this primitive.\n     /// Useful in particular when dealing with enum discriminants.\n     #[inline]\n-    fn to_int_ty(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n+    fn to_int_ty<'tcx>(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match *self {\n             Int(i, signed) => i.to_ty(tcx, signed),\n             Pointer => tcx.types.usize,\n@@ -2195,9 +2195,9 @@ pub trait LayoutOf<'tcx>: LayoutOfHelpers<'tcx> {\n     }\n }\n \n-impl<C: LayoutOfHelpers<'tcx>> LayoutOf<'tcx> for C {}\n+impl<'tcx, C: LayoutOfHelpers<'tcx>> LayoutOf<'tcx> for C {}\n \n-impl LayoutOfHelpers<'tcx> for LayoutCx<'tcx, TyCtxt<'tcx>> {\n+impl<'tcx> LayoutOfHelpers<'tcx> for LayoutCx<'tcx, TyCtxt<'tcx>> {\n     type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n     #[inline]\n@@ -2206,7 +2206,7 @@ impl LayoutOfHelpers<'tcx> for LayoutCx<'tcx, TyCtxt<'tcx>> {\n     }\n }\n \n-impl LayoutOfHelpers<'tcx> for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n+impl<'tcx> LayoutOfHelpers<'tcx> for LayoutCx<'tcx, ty::query::TyCtxtAt<'tcx>> {\n     type LayoutOfResult = Result<TyAndLayout<'tcx>, LayoutError<'tcx>>;\n \n     #[inline]\n@@ -2282,7 +2282,7 @@ where\n             TyAndLayout(TyAndLayout<'tcx>),\n         }\n \n-        fn field_ty_or_layout(\n+        fn field_ty_or_layout<'tcx>(\n             this: TyAndLayout<'tcx>,\n             cx: &(impl HasTyCtxt<'tcx> + HasParamEnv<'tcx>),\n             i: usize,\n@@ -2724,7 +2724,7 @@ impl<'tcx> ty::Instance<'tcx> {\n /// with `-Cpanic=abort` will look like they can't unwind when in fact they\n /// might (from a foreign exception or similar).\n #[inline]\n-pub fn fn_can_unwind(\n+pub fn fn_can_unwind<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     codegen_fn_attr_flags: CodegenFnAttrFlags,\n     abi: SpecAbi,\n@@ -2842,7 +2842,7 @@ pub enum FnAbiError<'tcx> {\n     AdjustForForeignAbi(call::AdjustForForeignAbiError),\n }\n \n-impl From<LayoutError<'tcx>> for FnAbiError<'tcx> {\n+impl<'tcx> From<LayoutError<'tcx>> for FnAbiError<'tcx> {\n     fn from(err: LayoutError<'tcx>) -> Self {\n         Self::Layout(err)\n     }\n@@ -2942,7 +2942,7 @@ pub trait FnAbiOf<'tcx>: FnAbiOfHelpers<'tcx> {\n     }\n }\n \n-impl<C: FnAbiOfHelpers<'tcx>> FnAbiOf<'tcx> for C {}\n+impl<'tcx, C: FnAbiOfHelpers<'tcx>> FnAbiOf<'tcx> for C {}\n \n fn fn_abi_of_fn_ptr<'tcx>(\n     tcx: TyCtxt<'tcx>,"}, {"sha": "70203ff2fb4c2ae3fe1085e45742711e229dc601", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -852,7 +852,7 @@ pub trait ToPredicate<'tcx> {\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx>;\n }\n \n-impl ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {\n+impl<'tcx> ToPredicate<'tcx> for Binder<'tcx, PredicateKind<'tcx>> {\n     #[inline(always)]\n     fn to_predicate(self, tcx: TyCtxt<'tcx>) -> Predicate<'tcx> {\n         tcx.mk_predicate(self)\n@@ -1418,7 +1418,7 @@ impl<'tcx> ParamEnv<'tcx> {\n \n // FIXME(ecstaticmorse): Audit all occurrences of `without_const().to_predicate(tcx)` to ensure that\n // the constness of trait bounds is being propagated correctly.\n-impl PolyTraitRef<'tcx> {\n+impl<'tcx> PolyTraitRef<'tcx> {\n     #[inline]\n     pub fn with_constness(self, constness: BoundConstness) -> PolyTraitPredicate<'tcx> {\n         self.map_bound(|trait_ref| ty::TraitPredicate {"}, {"sha": "84ab42a760b933a785b9482949f539c9c7aa6c30", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -183,7 +183,7 @@ impl<'tcx> NormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n }\n \n-impl TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n+impl<'tcx> TypeFolder<'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -228,15 +228,15 @@ impl<'tcx> TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     }\n }\n \n-impl TypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+impl<'tcx> TypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     type Error = NormalizationError<'tcx>;\n \n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n }\n \n-impl FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n+impl<'tcx> FallibleTypeFolder<'tcx> for TryNormalizeAfterErasingRegionsFolder<'tcx> {\n     fn try_fold_ty(&mut self, ty: Ty<'tcx>) -> Result<Ty<'tcx>, Self::Error> {\n         match self.try_normalize_generic_arg_after_erasing_regions(ty.into()) {\n             Ok(t) => Ok(t.expect_ty()),"}, {"sha": "94127a144dfef5e55e3faf7a3597c744249b3169", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -37,7 +37,7 @@ pub trait Printer<'tcx>: Sized {\n     type DynExistential;\n     type Const;\n \n-    fn tcx(&'a self) -> TyCtxt<'tcx>;\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n \n     fn print_def_path(\n         self,"}, {"sha": "3cb899e92a52b674c4a68f036095de36d23483cb", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -1513,7 +1513,7 @@ pub struct FmtPrinterData<'a, 'tcx, F> {\n     pub name_resolver: Option<Box<&'a dyn Fn(ty::TyVid) -> Option<String>>>,\n }\n \n-impl<F> Deref for FmtPrinter<'a, 'tcx, F> {\n+impl<'a, 'tcx, F> Deref for FmtPrinter<'a, 'tcx, F> {\n     type Target = FmtPrinterData<'a, 'tcx, F>;\n     fn deref(&self) -> &Self::Target {\n         &self.0\n@@ -1526,7 +1526,7 @@ impl<F> DerefMut for FmtPrinter<'_, '_, F> {\n     }\n }\n \n-impl<F> FmtPrinter<'a, 'tcx, F> {\n+impl<'a, 'tcx, F> FmtPrinter<'a, 'tcx, F> {\n     pub fn new(tcx: TyCtxt<'tcx>, fmt: F, ns: Namespace) -> Self {\n         FmtPrinter(Box::new(FmtPrinterData {\n             tcx,\n@@ -1563,7 +1563,7 @@ fn guess_def_namespace(tcx: TyCtxt<'_>, def_id: DefId) -> Namespace {\n     }\n }\n \n-impl TyCtxt<'t> {\n+impl<'t> TyCtxt<'t> {\n     /// Returns a string identifying this `DefId`. This string is\n     /// suitable for user output.\n     pub fn def_path_str(self, def_id: DefId) -> String {\n@@ -1585,7 +1585,7 @@ impl<F: fmt::Write> fmt::Write for FmtPrinter<'_, '_, F> {\n     }\n }\n \n-impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n+impl<'tcx, F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     type Error = fmt::Error;\n \n     type Path = Self;\n@@ -1594,7 +1594,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     type DynExistential = Self;\n     type Const = Self;\n \n-    fn tcx(&'a self) -> TyCtxt<'tcx> {\n+    fn tcx<'a>(&'a self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n \n@@ -1792,7 +1792,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     }\n }\n \n-impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n+impl<'tcx, F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     fn infer_ty_name(&self, id: ty::TyVid) -> Option<String> {\n         self.0.name_resolver.as_ref().and_then(|func| func(id))\n     }\n@@ -2058,7 +2058,7 @@ impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n \n // HACK(eddyb) limited to `FmtPrinter` because of `binder_depth`,\n // `region_index` and `used_region_names`.\n-impl<F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n+impl<'tcx, F: fmt::Write> FmtPrinter<'_, 'tcx, F> {\n     pub fn name_all_regions<T>(\n         mut self,\n         value: &ty::Binder<'tcx, T>,\n@@ -2312,7 +2312,8 @@ where\n \n macro_rules! forward_display_to_print {\n     ($($ty:ty),+) => {\n-        $(impl fmt::Display for $ty {\n+        // Some of the $ty arguments may not actually use 'tcx\n+        $(#[allow(unused_lifetimes)] impl<'tcx> fmt::Display for $ty {\n             fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n                 ty::tls::with(|tcx| {\n                     tcx.lift(*self)\n@@ -2360,7 +2361,7 @@ impl fmt::Display for ty::RegionKind {\n #[derive(Copy, Clone, TypeFoldable, Lift)]\n pub struct TraitRefPrintOnlyTraitPath<'tcx>(ty::TraitRef<'tcx>);\n \n-impl fmt::Debug for TraitRefPrintOnlyTraitPath<'tcx> {\n+impl<'tcx> fmt::Debug for TraitRefPrintOnlyTraitPath<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self, f)\n     }\n@@ -2372,13 +2373,13 @@ impl fmt::Debug for TraitRefPrintOnlyTraitPath<'tcx> {\n #[derive(Copy, Clone, TypeFoldable, Lift)]\n pub struct TraitRefPrintOnlyTraitName<'tcx>(ty::TraitRef<'tcx>);\n \n-impl fmt::Debug for TraitRefPrintOnlyTraitName<'tcx> {\n+impl<'tcx> fmt::Debug for TraitRefPrintOnlyTraitName<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Display::fmt(self, f)\n     }\n }\n \n-impl ty::TraitRef<'tcx> {\n+impl<'tcx> ty::TraitRef<'tcx> {\n     pub fn print_only_trait_path(self) -> TraitRefPrintOnlyTraitPath<'tcx> {\n         TraitRefPrintOnlyTraitPath(self)\n     }\n@@ -2388,7 +2389,7 @@ impl ty::TraitRef<'tcx> {\n     }\n }\n \n-impl ty::Binder<'tcx, ty::TraitRef<'tcx>> {\n+impl<'tcx> ty::Binder<'tcx, ty::TraitRef<'tcx>> {\n     pub fn print_only_trait_path(self) -> ty::Binder<'tcx, TraitRefPrintOnlyTraitPath<'tcx>> {\n         self.map_bound(|tr| tr.print_only_trait_path())\n     }"}, {"sha": "2f91503afdfaf378ca4f84f5279136c7ef536ffe", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -69,7 +69,7 @@ pub struct TyCtxtAt<'tcx> {\n     pub span: Span,\n }\n \n-impl Deref for TyCtxtAt<'tcx> {\n+impl<'tcx> Deref for TyCtxtAt<'tcx> {\n     type Target = TyCtxt<'tcx>;\n     #[inline(always)]\n     fn deref(&self) -> &Self::Target {\n@@ -82,7 +82,7 @@ pub struct TyCtxtEnsure<'tcx> {\n     pub tcx: TyCtxt<'tcx>,\n }\n \n-impl TyCtxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     /// Returns a transparent wrapper for `TyCtxt`, which ensures queries\n     /// are executed instead of just returning their results.\n     #[inline(always)]\n@@ -207,7 +207,7 @@ macro_rules! define_callbacks {\n             $($(#[$attr])* pub $name: QueryCacheStore<query_storage::$name<$tcx>>,)*\n         }\n \n-        impl TyCtxtEnsure<$tcx> {\n+        impl<$tcx> TyCtxtEnsure<$tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) {\n@@ -225,7 +225,7 @@ macro_rules! define_callbacks {\n             })*\n         }\n \n-        impl TyCtxt<$tcx> {\n+        impl<$tcx> TyCtxt<$tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n             #[must_use]\n@@ -235,7 +235,7 @@ macro_rules! define_callbacks {\n             })*\n         }\n \n-        impl TyCtxtAt<$tcx> {\n+        impl<$tcx> TyCtxtAt<$tcx> {\n             $($(#[$attr])*\n             #[inline(always)]\n             pub fn $name(self, key: query_helper_param_ty!($($K)*)) -> query_stored::$name<$tcx>\n@@ -357,15 +357,15 @@ mod sealed {\n \n use sealed::IntoQueryParam;\n \n-impl TyCtxt<'tcx> {\n+impl<'tcx> TyCtxt<'tcx> {\n     pub fn def_kind(self, def_id: impl IntoQueryParam<DefId>) -> DefKind {\n         let def_id = def_id.into_query_param();\n         self.opt_def_kind(def_id)\n             .unwrap_or_else(|| bug!(\"def_kind: unsupported node: {:?}\", def_id))\n     }\n }\n \n-impl TyCtxtAt<'tcx> {\n+impl<'tcx> TyCtxtAt<'tcx> {\n     pub fn def_kind(self, def_id: impl IntoQueryParam<DefId>) -> DefKind {\n         let def_id = def_id.into_query_param();\n         self.opt_def_kind(def_id)"}, {"sha": "905a5c47d2b3d750f6e75f93045ac0179c6d2017", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -132,7 +132,7 @@ pub fn relate_type_and_mut<'tcx, R: TypeRelation<'tcx>>(\n     }\n }\n \n-pub fn relate_substs<R: TypeRelation<'tcx>>(\n+pub fn relate_substs<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     variances: Option<&[ty::Variance]>,\n     a_subst: SubstsRef<'tcx>,\n@@ -353,7 +353,7 @@ impl<'tcx> Relate<'tcx> for Ty<'tcx> {\n /// The main \"type relation\" routine. Note that this does not handle\n /// inference artifacts, so you should filter those out before calling\n /// it.\n-pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n+pub fn super_relate_tys<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     a: Ty<'tcx>,\n     b: Ty<'tcx>,\n@@ -526,7 +526,7 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n /// The main \"const relation\" routine. Note that this does not handle\n /// inference artifacts, so you should filter those out before calling\n /// it.\n-pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n+pub fn super_relate_consts<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     a: &'tcx ty::Const<'tcx>,\n     b: &'tcx ty::Const<'tcx>,\n@@ -599,7 +599,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n     if is_match { Ok(a) } else { Err(TypeError::ConstMismatch(expected_found(relation, a, b))) }\n }\n \n-fn check_const_value_eq<R: TypeRelation<'tcx>>(\n+fn check_const_value_eq<'tcx, R: TypeRelation<'tcx>>(\n     relation: &mut R,\n     a_val: ConstValue<'tcx>,\n     b_val: ConstValue<'tcx>,\n@@ -832,7 +832,7 @@ impl<'tcx> Relate<'tcx> for ty::ProjectionPredicate<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Error handling\n \n-pub fn expected_found<R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>\n+pub fn expected_found<'tcx, R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>\n where\n     R: TypeRelation<'tcx>,\n {"}, {"sha": "98b1a8b4d7631f84d22f8b5863280c456a314a51", "filename": "compiler/rustc_middle/src/ty/structural_impls.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fstructural_impls.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -47,19 +47,19 @@ impl fmt::Debug for ty::UpvarId {\n     }\n }\n \n-impl fmt::Debug for ty::UpvarBorrow<'tcx> {\n+impl<'tcx> fmt::Debug for ty::UpvarBorrow<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"UpvarBorrow({:?}, {:?})\", self.kind, self.region)\n     }\n }\n \n-impl fmt::Debug for ty::ExistentialTraitRef<'tcx> {\n+impl<'tcx> fmt::Debug for ty::ExistentialTraitRef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         with_no_trimmed_paths(|| fmt::Display::fmt(self, f))\n     }\n }\n \n-impl fmt::Debug for ty::adjustment::Adjustment<'tcx> {\n+impl<'tcx> fmt::Debug for ty::adjustment::Adjustment<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?} -> {}\", self.kind, self.target)\n     }\n@@ -111,7 +111,7 @@ impl fmt::Debug for ty::FreeRegion {\n     }\n }\n \n-impl fmt::Debug for ty::FnSig<'tcx> {\n+impl<'tcx> fmt::Debug for ty::FnSig<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"({:?}; c_variadic: {})->{:?}\", self.inputs(), self.c_variadic, self.output())\n     }\n@@ -129,13 +129,13 @@ impl fmt::Debug for ty::RegionVid {\n     }\n }\n \n-impl fmt::Debug for ty::TraitRef<'tcx> {\n+impl<'tcx> fmt::Debug for ty::TraitRef<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         with_no_trimmed_paths(|| fmt::Display::fmt(self, f))\n     }\n }\n \n-impl fmt::Debug for Ty<'tcx> {\n+impl<'tcx> fmt::Debug for Ty<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         with_no_trimmed_paths(|| fmt::Display::fmt(self, f))\n     }\n@@ -153,7 +153,7 @@ impl fmt::Debug for ty::ParamConst {\n     }\n }\n \n-impl fmt::Debug for ty::TraitPredicate<'tcx> {\n+impl<'tcx> fmt::Debug for ty::TraitPredicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         if let ty::BoundConstness::ConstIfConst = self.constness {\n             write!(f, \"~const \")?;\n@@ -162,19 +162,19 @@ impl fmt::Debug for ty::TraitPredicate<'tcx> {\n     }\n }\n \n-impl fmt::Debug for ty::ProjectionPredicate<'tcx> {\n+impl<'tcx> fmt::Debug for ty::ProjectionPredicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"ProjectionPredicate({:?}, {:?})\", self.projection_ty, self.ty)\n     }\n }\n \n-impl fmt::Debug for ty::Predicate<'tcx> {\n+impl<'tcx> fmt::Debug for ty::Predicate<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"{:?}\", self.kind())\n     }\n }\n \n-impl fmt::Debug for ty::PredicateKind<'tcx> {\n+impl<'tcx> fmt::Debug for ty::PredicateKind<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match *self {\n             ty::PredicateKind::Trait(ref a) => a.fmt(f),"}, {"sha": "8706661b25021221256d386d072b073a8354271e", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -198,7 +198,7 @@ pub enum TyKind<'tcx> {\n     Error(DelaySpanBugEmitted),\n }\n \n-impl TyKind<'tcx> {\n+impl<'tcx> TyKind<'tcx> {\n     #[inline]\n     pub fn is_primitive(&self) -> bool {\n         matches!(self, Bool | Char | Int(_) | Uint(_) | Float(_))"}, {"sha": "a71181149149d648b9a9bd45f95069d74aa62366", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -67,7 +67,7 @@ impl<'tcx> GenericArgKind<'tcx> {\n     }\n }\n \n-impl fmt::Debug for GenericArg<'tcx> {\n+impl<'tcx> fmt::Debug for GenericArg<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         match self.unpack() {\n             GenericArgKind::Lifetime(lt) => lt.fmt(f),"}, {"sha": "669065598f1498041fd6664b86d980203a9051c9", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -981,7 +981,7 @@ impl<'tcx> ExplicitSelf<'tcx> {\n /// Returns a list of types such that the given type needs drop if and only if\n /// *any* of the returned types need drop. Returns `Err(AlwaysRequiresDrop)` if\n /// this type always needs drop.\n-pub fn needs_drop_components(\n+pub fn needs_drop_components<'tcx>(\n     ty: Ty<'tcx>,\n     target_layout: &TargetDataLayout,\n ) -> Result<SmallVec<[Ty<'tcx>; 2]>, AlwaysRequiresDrop> {\n@@ -1083,7 +1083,7 @@ pub struct AlwaysRequiresDrop;\n \n /// Normalizes all opaque types in the given value, replacing them\n /// with their underlying types.\n-pub fn normalize_opaque_types(\n+pub fn normalize_opaque_types<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     val: &'tcx List<ty::Predicate<'tcx>>,\n ) -> &'tcx List<ty::Predicate<'tcx>> {"}, {"sha": "ba5775fd773762ebe87ba0f9aabdf22fc7291989", "filename": "compiler/rustc_middle/src/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d5ffc487084446261e7d49a7425fc5ff305c857/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fwalk.rs?ref=4d5ffc487084446261e7d49a7425fc5ff305c857", "patch": "@@ -69,7 +69,7 @@ impl<'tcx> Iterator for TypeWalker<'tcx> {\n     }\n }\n \n-impl GenericArg<'tcx> {\n+impl<'tcx> GenericArg<'tcx> {\n     /// Iterator that walks `self` and any types reachable from\n     /// `self`, in depth-first order. Note that just walks the types\n     /// that appear in `self`, it does not descend into the fields of"}]}