{"sha": "a6f80fccb19a52305ff88d960b4bb4e74df3d8b2", "node_id": "C_kwDOAAsO6NoAKGE2ZjgwZmNjYjE5YTUyMzA1ZmY4OGQ5NjBiNGJiNGU3NGRmM2Q4YjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-09T14:27:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-09T14:27:36Z"}, "message": "new lint: `single_char_lifetime_names`\n\nThis pull request adds a lint against single character lifetime names, as they might not divulge enough information about the purpose of the lifetime. This can make code harder to understand. I placed this in `restriction` rather than `pedantic` (as suggested in #8233) since most of the Rust ecosystem already uses single character lifetime names (to my knowledge, at least) and since single character lifetime names aren't incorrect. I'd be happy to change this upon request, however. Fixes #8233.\n\n- [x] Followed lint naming conventions\n- [x] Added passing UI tests (including committed `.stderr` file)\n- [x] `cargo test` passes locally\n- [x] Executed `cargo dev update_lints`\n- [x] Added lint documentation\n- [x] Run `cargo dev fmt`\n\nchangelog: new lint: [`single_char_lifetime_names`]", "tree": {"sha": "acbd33bc3cbddd3fe6fb18099c3e2a87dc83dbfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acbd33bc3cbddd3fe6fb18099c3e2a87dc83dbfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2", "html_url": "https://github.com/rust-lang/rust/commit/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92048f4826a445872eb50760a4f46a92837b243e", "url": "https://api.github.com/repos/rust-lang/rust/commits/92048f4826a445872eb50760a4f46a92837b243e", "html_url": "https://github.com/rust-lang/rust/commit/92048f4826a445872eb50760a4f46a92837b243e"}], "stats": {"total": 154, "additions": 154, "deletions": 0}, "files": [{"sha": "83fd8396bc72f2bf2c4263c6f2e95fcb4d7eee81", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=a6f80fccb19a52305ff88d960b4bb4e74df3d8b2", "patch": "@@ -3253,6 +3253,7 @@ Released 2018-09-13\n [`should_implement_trait`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait\n [`similar_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#similar_names\n [`single_char_add_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str\n+[`single_char_lifetime_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_lifetime_names\n [`single_char_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern\n [`single_component_path_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_component_path_imports\n [`single_element_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_element_loop"}, {"sha": "f9241d943b2cd69aa3a989921036a489607ce7a2", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=a6f80fccb19a52305ff88d960b4bb4e74df3d8b2", "patch": "@@ -435,6 +435,7 @@ store.register_lints(&[\n     shadow::SHADOW_REUSE,\n     shadow::SHADOW_SAME,\n     shadow::SHADOW_UNRELATED,\n+    single_char_lifetime_names::SINGLE_CHAR_LIFETIME_NAMES,\n     single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n     size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,\n     slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,"}, {"sha": "e7e2798da7da99785f7b46c6410ee615f00c4bcd", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=a6f80fccb19a52305ff88d960b4bb4e74df3d8b2", "patch": "@@ -54,6 +54,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(shadow::SHADOW_REUSE),\n     LintId::of(shadow::SHADOW_SAME),\n     LintId::of(shadow::SHADOW_UNRELATED),\n+    LintId::of(single_char_lifetime_names::SINGLE_CHAR_LIFETIME_NAMES),\n     LintId::of(strings::STRING_ADD),\n     LintId::of(strings::STRING_SLICE),\n     LintId::of(strings::STRING_TO_STRING),"}, {"sha": "c31acb5f4ef8433c3c17ef76c9432afb56f53162", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a6f80fccb19a52305ff88d960b4bb4e74df3d8b2", "patch": "@@ -351,6 +351,7 @@ mod self_named_constructors;\n mod semicolon_if_nothing_returned;\n mod serde_api;\n mod shadow;\n+mod single_char_lifetime_names;\n mod single_component_path_imports;\n mod size_of_in_element_count;\n mod slow_vector_initialization;\n@@ -858,6 +859,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(needless_late_init::NeedlessLateInit));\n     store.register_late_pass(|| Box::new(return_self_not_must_use::ReturnSelfNotMustUse));\n     store.register_late_pass(|| Box::new(init_numbered_fields::NumberedFields));\n+    store.register_early_pass(|| Box::new(single_char_lifetime_names::SingleCharLifetimeNames));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "ee82666b5affea88b54526cee4c203a405e25c9c", "filename": "clippy_lints/src/single_char_lifetime_names.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/clippy_lints%2Fsrc%2Fsingle_char_lifetime_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/clippy_lints%2Fsrc%2Fsingle_char_lifetime_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_char_lifetime_names.rs?ref=a6f80fccb19a52305ff88d960b4bb4e74df3d8b2", "patch": "@@ -0,0 +1,63 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_ast::ast::{GenericParam, GenericParamKind};\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for lifetimes with names which are one character\n+    /// long.\n+    ///\n+    /// ### Why is this bad?\n+    /// A single character is likely not enough to express the\n+    /// purpose of a lifetime. Using a longer name can make code\n+    /// easier to understand, especially for those who are new to\n+    /// Rust.\n+    ///\n+    /// ### Known problems\n+    /// Rust programmers and learning resources tend to use single\n+    /// character lifetimes, so this lint is at odds with the\n+    /// ecosystem at large. In addition, the lifetime's purpose may\n+    /// be obvious or, rarely, expressible in one character.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct DiagnosticCtx<'a> {\n+    ///     source: &'a str,\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct DiagnosticCtx<'src> {\n+    ///     source: &'src str,\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.59.0\"]\n+    pub SINGLE_CHAR_LIFETIME_NAMES,\n+    restriction,\n+    \"warns against single-character lifetime names\"\n+}\n+\n+declare_lint_pass!(SingleCharLifetimeNames => [SINGLE_CHAR_LIFETIME_NAMES]);\n+\n+impl EarlyLintPass for SingleCharLifetimeNames {\n+    fn check_generic_param(&mut self, ctx: &EarlyContext<'_>, param: &GenericParam) {\n+        if in_external_macro(ctx.sess, param.ident.span) {\n+            return;\n+        }\n+\n+        if let GenericParamKind::Lifetime = param.kind {\n+            if !param.is_placeholder && param.ident.as_str().len() <= 2 {\n+                span_lint_and_help(\n+                    ctx,\n+                    SINGLE_CHAR_LIFETIME_NAMES,\n+                    param.ident.span,\n+                    \"single-character lifetime names are likely uninformative\",\n+                    None,\n+                    \"use a more informative name\",\n+                );\n+            }\n+        }\n+    }\n+}"}, {"sha": "261d8bc7260ca5deab6ab1519d4d9387eebaac87", "filename": "tests/ui/single_char_lifetime_names.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/tests%2Fui%2Fsingle_char_lifetime_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/tests%2Fui%2Fsingle_char_lifetime_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_lifetime_names.rs?ref=a6f80fccb19a52305ff88d960b4bb4e74df3d8b2", "patch": "@@ -0,0 +1,43 @@\n+#![warn(clippy::single_char_lifetime_names)]\n+\n+// Lifetimes should only be linted when they're introduced\n+struct DiagnosticCtx<'a, 'b>\n+where\n+    'a: 'b,\n+{\n+    _source: &'a str,\n+    _unit: &'b (),\n+}\n+\n+// Only the lifetimes on the `impl`'s generics should be linted\n+impl<'a, 'b> DiagnosticCtx<'a, 'b> {\n+    fn new(source: &'a str, unit: &'b ()) -> DiagnosticCtx<'a, 'b> {\n+        Self {\n+            _source: source,\n+            _unit: unit,\n+        }\n+    }\n+}\n+\n+// No lifetimes should be linted here\n+impl<'src, 'unit> DiagnosticCtx<'src, 'unit> {\n+    fn new_pass(source: &'src str, unit: &'unit ()) -> DiagnosticCtx<'src, 'unit> {\n+        Self {\n+            _source: source,\n+            _unit: unit,\n+        }\n+    }\n+}\n+\n+// Only 'a should be linted here\n+fn split_once<'a>(base: &'a str, other: &'_ str) -> (&'a str, Option<&'a str>) {\n+    base.split_once(other)\n+        .map(|(left, right)| (left, Some(right)))\n+        .unwrap_or((base, None))\n+}\n+\n+fn main() {\n+    let src = \"loop {}\";\n+    let unit = ();\n+    DiagnosticCtx::new(src, &unit);\n+}"}, {"sha": "013b64f46a8ce1d2795a288c6864a8603dec0c6b", "filename": "tests/ui/single_char_lifetime_names.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/tests%2Fui%2Fsingle_char_lifetime_names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6f80fccb19a52305ff88d960b4bb4e74df3d8b2/tests%2Fui%2Fsingle_char_lifetime_names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsingle_char_lifetime_names.stderr?ref=a6f80fccb19a52305ff88d960b4bb4e74df3d8b2", "patch": "@@ -0,0 +1,43 @@\n+error: single-character lifetime names are likely uninformative\n+  --> $DIR/single_char_lifetime_names.rs:4:22\n+   |\n+LL | struct DiagnosticCtx<'a, 'b>\n+   |                      ^^\n+   |\n+   = note: `-D clippy::single-char-lifetime-names` implied by `-D warnings`\n+   = help: use a more informative name\n+\n+error: single-character lifetime names are likely uninformative\n+  --> $DIR/single_char_lifetime_names.rs:4:26\n+   |\n+LL | struct DiagnosticCtx<'a, 'b>\n+   |                          ^^\n+   |\n+   = help: use a more informative name\n+\n+error: single-character lifetime names are likely uninformative\n+  --> $DIR/single_char_lifetime_names.rs:13:6\n+   |\n+LL | impl<'a, 'b> DiagnosticCtx<'a, 'b> {\n+   |      ^^\n+   |\n+   = help: use a more informative name\n+\n+error: single-character lifetime names are likely uninformative\n+  --> $DIR/single_char_lifetime_names.rs:13:10\n+   |\n+LL | impl<'a, 'b> DiagnosticCtx<'a, 'b> {\n+   |          ^^\n+   |\n+   = help: use a more informative name\n+\n+error: single-character lifetime names are likely uninformative\n+  --> $DIR/single_char_lifetime_names.rs:33:15\n+   |\n+LL | fn split_once<'a>(base: &'a str, other: &'_ str) -> (&'a str, Option<&'a str>) {\n+   |               ^^\n+   |\n+   = help: use a more informative name\n+\n+error: aborting due to 5 previous errors\n+"}]}