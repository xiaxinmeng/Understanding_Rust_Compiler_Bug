{"sha": "91fd6283e658e2c7aab2d3f5206fc1891f486af2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZmQ2MjgzZTY1OGUyYzdhYWIyZDNmNTIwNmZjMTg5MWY0ODZhZjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-02T18:22:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-02T18:22:32Z"}, "message": "Auto merge of #65429 - Timmmm:withoptions, r=Mark-Simulacrum\n\nAdd File::with_options\n\nThis provides a more fluent API to create files with options, and also avoids the need to import OpenOptions.\n\nThis implements @aldanor's [suggestion](https://github.com/rust-lang/rfcs/pull/2615#issuecomment-448591304) which was popular.", "tree": {"sha": "1e71751ab28df6aa303cc676168175a8257e7dc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e71751ab28df6aa303cc676168175a8257e7dc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91fd6283e658e2c7aab2d3f5206fc1891f486af2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91fd6283e658e2c7aab2d3f5206fc1891f486af2", "html_url": "https://github.com/rust-lang/rust/commit/91fd6283e658e2c7aab2d3f5206fc1891f486af2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91fd6283e658e2c7aab2d3f5206fc1891f486af2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f39205b5d9825fcf35989b5a04d115d411175d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/f39205b5d9825fcf35989b5a04d115d411175d18", "html_url": "https://github.com/rust-lang/rust/commit/f39205b5d9825fcf35989b5a04d115d411175d18"}, {"sha": "c8150cb1594af7f3c2fe4b3968809637ca274260", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8150cb1594af7f3c2fe4b3968809637ca274260", "html_url": "https://github.com/rust-lang/rust/commit/c8150cb1594af7f3c2fe4b3968809637ca274260"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "30db6a58d40c2032422cd1d1c89b5b506555acf5", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/91fd6283e658e2c7aab2d3f5206fc1891f486af2/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91fd6283e658e2c7aab2d3f5206fc1891f486af2/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=91fd6283e658e2c7aab2d3f5206fc1891f486af2", "patch": "@@ -29,7 +29,7 @@ use crate::time::SystemTime;\n ///\n /// # Examples\n ///\n-/// Creates a new file and write bytes to it:\n+/// Creates a new file and write bytes to it (you can also use [`write`]):\n ///\n /// ```no_run\n /// use std::fs::File;\n@@ -42,7 +42,7 @@ use crate::time::SystemTime;\n /// }\n /// ```\n ///\n-/// Read the contents of a file into a [`String`]:\n+/// Read the contents of a file into a [`String`] (you can also use [`read`]):\n ///\n /// ```no_run\n /// use std::fs::File;\n@@ -89,6 +89,8 @@ use crate::time::SystemTime;\n /// [`Write`]: ../io/trait.Write.html\n /// [`BufReader<R>`]: ../io/struct.BufReader.html\n /// [`sync_all`]: struct.File.html#method.sync_all\n+/// [`read`]: fn.read.html\n+/// [`write`]: fn.write.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct File {\n     inner: fs_imp::File,\n@@ -397,6 +399,37 @@ impl File {\n         OpenOptions::new().write(true).create(true).truncate(true).open(path.as_ref())\n     }\n \n+    /// Returns a new OpenOptions object.\n+    ///\n+    /// This function returns a new OpenOptions object that you can use to\n+    /// open or create a file with specific options if `open()` or `create()`\n+    /// are not appropriate.\n+    ///\n+    /// It is equivalent to `OpenOptions::new()` but allows you to write more\n+    /// readable code. Instead of `OpenOptions::new().read(true).open(\"foo.txt\")`\n+    /// you can write `File::with_options().read(true).open(\"foo.txt\"). This\n+    /// also avoids the need to import `OpenOptions`.\n+    ///\n+    /// See the [`OpenOptions::new`] function for more details.\n+    ///\n+    /// [`OpenOptions::new`]: struct.OpenOptions.html#method.new\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// #![feature(with_options)]\n+    /// use std::fs::File;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut f = File::with_options().read(true).open(\"foo.txt\")?;\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"with_options\", issue = \"65439\")]\n+    pub fn with_options() -> OpenOptions {\n+        OpenOptions::new()\n+    }\n+\n     /// Attempts to sync all OS-internal metadata to disk.\n     ///\n     /// This function will attempt to ensure that all in-memory data reaches the"}]}