{"sha": "275497c35e00bcf6b7766c8d1cb6540caa8a4baf", "node_id": "C_kwDOAAsO6NoAKDI3NTQ5N2MzNWUwMGJjZjZiNzc2NmM4ZDFjYjY1NDBjYWE4YTRiYWY", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-07-06T23:13:49Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-07-13T16:22:49Z"}, "message": "merge visitors in queries\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "1ac3d5c52e998b77cb9671dea8e9556a6d088017", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ac3d5c52e998b77cb9671dea8e9556a6d088017"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/275497c35e00bcf6b7766c8d1cb6540caa8a4baf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/275497c35e00bcf6b7766c8d1cb6540caa8a4baf", "html_url": "https://github.com/rust-lang/rust/commit/275497c35e00bcf6b7766c8d1cb6540caa8a4baf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/275497c35e00bcf6b7766c8d1cb6540caa8a4baf/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b599cf45d6119164bf7adc740c0c81dad2b73c1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b599cf45d6119164bf7adc740c0c81dad2b73c1a", "html_url": "https://github.com/rust-lang/rust/commit/b599cf45d6119164bf7adc740c0c81dad2b73c1a"}], "stats": {"total": 210, "additions": 75, "deletions": 135}, "files": [{"sha": "1ce7668e7b76c79007fc7d9d0728c90063daf7a2", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 75, "deletions": 135, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/275497c35e00bcf6b7766c8d1cb6540caa8a4baf/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/275497c35e00bcf6b7766c8d1cb6540caa8a4baf/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=275497c35e00bcf6b7766c8d1cb6540caa8a4baf", "patch": "@@ -1211,20 +1211,12 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n }\n \n pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> ModuleItems {\n-    let mut collector = ModuleCollector {\n-        tcx,\n-        submodules: Vec::default(),\n-        items: Vec::default(),\n-        trait_items: Vec::default(),\n-        impl_items: Vec::default(),\n-        foreign_items: Vec::default(),\n-        body_owners: Vec::default(),\n-    };\n+    let mut collector = ItemCollector::new(tcx, false);\n \n     let (hir_mod, span, hir_id) = tcx.hir().get_module(module_id);\n     collector.visit_mod(hir_mod, span, hir_id);\n \n-    let ModuleCollector {\n+    let ItemCollector {\n         submodules,\n         items,\n         trait_items,\n@@ -1241,90 +1233,14 @@ pub(super) fn hir_module_items(tcx: TyCtxt<'_>, module_id: LocalDefId) -> Module\n         foreign_items: foreign_items.into_boxed_slice(),\n         body_owners: body_owners.into_boxed_slice(),\n     };\n-\n-    struct ModuleCollector<'tcx> {\n-        tcx: TyCtxt<'tcx>,\n-        submodules: Vec<LocalDefId>,\n-        items: Vec<ItemId>,\n-        trait_items: Vec<TraitItemId>,\n-        impl_items: Vec<ImplItemId>,\n-        foreign_items: Vec<ForeignItemId>,\n-        body_owners: Vec<LocalDefId>,\n-    }\n-\n-    impl<'hir> Visitor<'hir> for ModuleCollector<'hir> {\n-        type NestedFilter = nested_filter::All;\n-\n-        fn nested_visit_map(&mut self) -> Self::Map {\n-            self.tcx.hir()\n-        }\n-\n-        fn visit_item(&mut self, item: &'hir Item<'hir>) {\n-            if associated_body(Node::Item(item)).is_some() {\n-                self.body_owners.push(item.def_id);\n-            }\n-\n-            self.items.push(item.item_id());\n-\n-            if let ItemKind::Mod(..) = item.kind {\n-                // If this declares another module, do not recurse inside it.\n-                self.submodules.push(item.def_id);\n-            } else {\n-                intravisit::walk_item(self, item)\n-            }\n-        }\n-\n-        fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {\n-            if associated_body(Node::TraitItem(item)).is_some() {\n-                self.body_owners.push(item.def_id);\n-            }\n-\n-            self.trait_items.push(item.trait_item_id());\n-            intravisit::walk_trait_item(self, item)\n-        }\n-\n-        fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {\n-            if associated_body(Node::ImplItem(item)).is_some() {\n-                self.body_owners.push(item.def_id);\n-            }\n-\n-            self.impl_items.push(item.impl_item_id());\n-            intravisit::walk_impl_item(self, item)\n-        }\n-\n-        fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {\n-            self.foreign_items.push(item.foreign_item_id());\n-            intravisit::walk_foreign_item(self, item)\n-        }\n-\n-        fn visit_expr(&mut self, ex: &'hir Expr<'hir>) {\n-            if matches!(ex.kind, ExprKind::Closure { .. }) {\n-                self.body_owners.push(self.tcx.hir().local_def_id(ex.hir_id));\n-            }\n-            intravisit::walk_expr(self, ex)\n-        }\n-\n-        fn visit_anon_const(&mut self, c: &'hir AnonConst) {\n-            self.body_owners.push(self.tcx.hir().local_def_id(c.hir_id));\n-            intravisit::walk_anon_const(self, c)\n-        }\n-    }\n }\n \n pub(crate) fn hir_crate_items(tcx: TyCtxt<'_>, _: ()) -> ModuleItems {\n-    let mut collector = CrateCollector {\n-        tcx,\n-        submodules: Vec::default(),\n-        items: Vec::default(),\n-        trait_items: Vec::default(),\n-        impl_items: Vec::default(),\n-        foreign_items: Vec::default(),\n-        body_owners: Vec::default(),\n-    };\n+    let mut collector = ItemCollector::new(tcx, true);\n \n     tcx.hir().walk_toplevel_module(&mut collector);\n \n-    let CrateCollector {\n+    let ItemCollector {\n         submodules,\n         items,\n         trait_items,\n@@ -1342,71 +1258,95 @@ pub(crate) fn hir_crate_items(tcx: TyCtxt<'_>, _: ()) -> ModuleItems {\n         foreign_items: foreign_items.into_boxed_slice(),\n         body_owners: body_owners.into_boxed_slice(),\n     };\n+}\n \n-    struct CrateCollector<'tcx> {\n-        tcx: TyCtxt<'tcx>,\n-        submodules: Vec<LocalDefId>,\n-        items: Vec<ItemId>,\n-        trait_items: Vec<TraitItemId>,\n-        impl_items: Vec<ImplItemId>,\n-        foreign_items: Vec<ForeignItemId>,\n-        body_owners: Vec<LocalDefId>,\n+struct ItemCollector<'tcx> {\n+    // When true, it collects all items in the create,\n+    // otherwise it collects items in some module.\n+    crate_collector: bool,\n+    tcx: TyCtxt<'tcx>,\n+    submodules: Vec<LocalDefId>,\n+    items: Vec<ItemId>,\n+    trait_items: Vec<TraitItemId>,\n+    impl_items: Vec<ImplItemId>,\n+    foreign_items: Vec<ForeignItemId>,\n+    body_owners: Vec<LocalDefId>,\n+}\n+\n+impl<'tcx> ItemCollector<'tcx> {\n+    fn new(tcx: TyCtxt<'tcx>, crate_collector: bool) -> ItemCollector<'tcx> {\n+        ItemCollector {\n+            crate_collector,\n+            tcx,\n+            submodules: Vec::default(),\n+            items: Vec::default(),\n+            trait_items: Vec::default(),\n+            impl_items: Vec::default(),\n+            foreign_items: Vec::default(),\n+            body_owners: Vec::default(),\n+        }\n     }\n+}\n+\n+impl<'hir> Visitor<'hir> for ItemCollector<'hir> {\n+    type NestedFilter = nested_filter::All;\n \n-    impl<'hir> Visitor<'hir> for CrateCollector<'hir> {\n-        type NestedFilter = nested_filter::All;\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.tcx.hir()\n+    }\n \n-        fn nested_visit_map(&mut self) -> Self::Map {\n-            self.tcx.hir()\n+    fn visit_item(&mut self, item: &'hir Item<'hir>) {\n+        if associated_body(Node::Item(item)).is_some() {\n+            self.body_owners.push(item.def_id);\n         }\n \n-        fn visit_item(&mut self, item: &'hir Item<'hir>) {\n-            if associated_body(Node::Item(item)).is_some() {\n-                self.body_owners.push(item.def_id);\n-            }\n+        self.items.push(item.item_id());\n \n-            self.items.push(item.item_id());\n+        if !self.crate_collector && let ItemKind::Mod(..) = item.kind {\n+            // If this declares another module, do not recurse inside it.\n+            self.submodules.push(item.def_id);\n+        } else {\n             intravisit::walk_item(self, item)\n         }\n+    }\n \n-        fn visit_mod(&mut self, m: &'hir Mod<'hir>, _s: Span, n: HirId) {\n-            self.submodules.push(n.owner);\n-            intravisit::walk_mod(self, m, n);\n-        }\n+    fn visit_mod(&mut self, m: &'hir Mod<'hir>, _s: Span, n: HirId) {\n+        self.submodules.push(n.owner);\n+        intravisit::walk_mod(self, m, n);\n+    }\n \n-        fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {\n-            self.foreign_items.push(item.foreign_item_id());\n-            intravisit::walk_foreign_item(self, item)\n-        }\n+    fn visit_foreign_item(&mut self, item: &'hir ForeignItem<'hir>) {\n+        self.foreign_items.push(item.foreign_item_id());\n+        intravisit::walk_foreign_item(self, item)\n+    }\n \n-        fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {\n-            if associated_body(Node::TraitItem(item)).is_some() {\n-                self.body_owners.push(item.def_id);\n-            }\n+    fn visit_anon_const(&mut self, c: &'hir AnonConst) {\n+        self.body_owners.push(self.tcx.hir().local_def_id(c.hir_id));\n+        intravisit::walk_anon_const(self, c)\n+    }\n \n-            self.trait_items.push(item.trait_item_id());\n-            intravisit::walk_trait_item(self, item)\n+    fn visit_expr(&mut self, ex: &'hir Expr<'hir>) {\n+        if matches!(ex.kind, ExprKind::Closure { .. }) {\n+            self.body_owners.push(self.tcx.hir().local_def_id(ex.hir_id));\n         }\n+        intravisit::walk_expr(self, ex)\n+    }\n \n-        fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {\n-            if associated_body(Node::ImplItem(item)).is_some() {\n-                self.body_owners.push(item.def_id);\n-            }\n-\n-            self.impl_items.push(item.impl_item_id());\n-            intravisit::walk_impl_item(self, item)\n+    fn visit_trait_item(&mut self, item: &'hir TraitItem<'hir>) {\n+        if associated_body(Node::TraitItem(item)).is_some() {\n+            self.body_owners.push(item.def_id);\n         }\n \n-        fn visit_expr(&mut self, ex: &'hir Expr<'hir>) {\n-            if matches!(ex.kind, ExprKind::Closure { .. }) {\n-                self.body_owners.push(self.tcx.hir().local_def_id(ex.hir_id));\n-            }\n-            intravisit::walk_expr(self, ex)\n-        }\n+        self.trait_items.push(item.trait_item_id());\n+        intravisit::walk_trait_item(self, item)\n+    }\n \n-        fn visit_anon_const(&mut self, c: &'hir AnonConst) {\n-            self.body_owners.push(self.tcx.hir().local_def_id(c.hir_id));\n-            intravisit::walk_anon_const(self, c)\n+    fn visit_impl_item(&mut self, item: &'hir ImplItem<'hir>) {\n+        if associated_body(Node::ImplItem(item)).is_some() {\n+            self.body_owners.push(item.def_id);\n         }\n+\n+        self.impl_items.push(item.impl_item_id());\n+        intravisit::walk_impl_item(self, item)\n     }\n }"}]}