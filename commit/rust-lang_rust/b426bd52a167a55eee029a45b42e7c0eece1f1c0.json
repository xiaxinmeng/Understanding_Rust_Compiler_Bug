{"sha": "b426bd52a167a55eee029a45b42e7c0eece1f1c0", "node_id": "C_kwDOAAsO6NoAKGI0MjZiZDUyYTE2N2E1NWVlZTAyOWE0NWI0MmU3YzBlZWNlMWYxYzA", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-03T17:16:04Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-08-03T18:41:32Z"}, "message": "Don't lint `transmute_undefined_repr` when the the first field of a `repr(C)` type is compatible with the other type", "tree": {"sha": "c09f357ed0e9bdac7e327d6d0028800bd44e2c26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c09f357ed0e9bdac7e327d6d0028800bd44e2c26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b426bd52a167a55eee029a45b42e7c0eece1f1c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b426bd52a167a55eee029a45b42e7c0eece1f1c0", "html_url": "https://github.com/rust-lang/rust/commit/b426bd52a167a55eee029a45b42e7c0eece1f1c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b426bd52a167a55eee029a45b42e7c0eece1f1c0/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71777465cc71b365ca08db8afd5c25eb99bd3f08", "url": "https://api.github.com/repos/rust-lang/rust/commits/71777465cc71b365ca08db8afd5c25eb99bd3f08", "html_url": "https://github.com/rust-lang/rust/commit/71777465cc71b365ca08db8afd5c25eb99bd3f08"}], "stats": {"total": 59, "additions": 44, "deletions": 15}, "files": [{"sha": "bf1cfb859bc34b2dfefd7b729acbe05f78d01f99", "filename": "clippy_lints/src/transmute/transmute_undefined_repr.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b426bd52a167a55eee029a45b42e7c0eece1f1c0/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b426bd52a167a55eee029a45b42e7c0eece1f1c0/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_undefined_repr.rs?ref=b426bd52a167a55eee029a45b42e7c0eece1f1c0", "patch": "@@ -164,9 +164,18 @@ pub(super) fn check<'tcx>(\n                     );\n                     return true;\n                 },\n+                // `Repr(C)` <-> unordered type.\n+                // If the first field of the `Repr(C)` type matches then the transmute is ok\n+                (ReducedTy::OrderedFields(_, Some(from_sub_ty)), ReducedTy::UnorderedFields(to_sub_ty))\n+                | (ReducedTy::UnorderedFields(from_sub_ty), ReducedTy::OrderedFields(_, Some(to_sub_ty)))\n+                | (ReducedTy::Ref(from_sub_ty), ReducedTy::Ref(to_sub_ty)) => {\n+                    from_ty = from_sub_ty;\n+                    to_ty = to_sub_ty;\n+                    continue;\n+                },\n                 (\n                     ReducedTy::UnorderedFields(from_ty),\n-                    ReducedTy::Other(_) | ReducedTy::OrderedFields(_) | ReducedTy::Ref(_),\n+                    ReducedTy::Other(_) | ReducedTy::OrderedFields(..) | ReducedTy::Ref(_),\n                 ) => {\n                     span_lint_and_then(\n                         cx,\n@@ -182,7 +191,7 @@ pub(super) fn check<'tcx>(\n                     return true;\n                 },\n                 (\n-                    ReducedTy::Other(_) | ReducedTy::OrderedFields(_) | ReducedTy::Ref(_),\n+                    ReducedTy::Other(_) | ReducedTy::OrderedFields(..) | ReducedTy::Ref(_),\n                     ReducedTy::UnorderedFields(to_ty),\n                 ) => {\n                     span_lint_and_then(\n@@ -198,14 +207,9 @@ pub(super) fn check<'tcx>(\n                     );\n                     return true;\n                 },\n-                (ReducedTy::Ref(from_sub_ty), ReducedTy::Ref(to_sub_ty)) => {\n-                    from_ty = from_sub_ty;\n-                    to_ty = to_sub_ty;\n-                    continue;\n-                },\n                 (\n-                    ReducedTy::OrderedFields(_) | ReducedTy::Ref(_) | ReducedTy::Other(_) | ReducedTy::Param,\n-                    ReducedTy::OrderedFields(_) | ReducedTy::Ref(_) | ReducedTy::Other(_) | ReducedTy::Param,\n+                    ReducedTy::OrderedFields(..) | ReducedTy::Ref(_) | ReducedTy::Other(_) | ReducedTy::Param,\n+                    ReducedTy::OrderedFields(..) | ReducedTy::Ref(_) | ReducedTy::Other(_) | ReducedTy::Param,\n                 )\n                 | (\n                     ReducedTy::UnorderedFields(_) | ReducedTy::Param,\n@@ -269,7 +273,8 @@ enum ReducedTy<'tcx> {\n     TypeErasure,\n     /// The type is a struct containing either zero non-zero sized fields, or multiple non-zero\n     /// sized fields with a defined order.\n-    OrderedFields(Ty<'tcx>),\n+    /// The second value is the first non-zero sized type.\n+    OrderedFields(Ty<'tcx>, Option<Ty<'tcx>>),\n     /// The type is a struct containing multiple non-zero sized fields with no defined order.\n     UnorderedFields(Ty<'tcx>),\n     /// The type is a reference to the contained type.\n@@ -294,7 +299,7 @@ fn reduce_ty<'tcx>(cx: &LateContext<'tcx>, mut ty: Ty<'tcx>) -> ReducedTy<'tcx>\n             ty::Tuple(args) => {\n                 let mut iter = args.iter();\n                 let Some(sized_ty) = iter.find(|&ty| !is_zero_sized_ty(cx, ty)) else {\n-                    return ReducedTy::OrderedFields(ty);\n+                    return ReducedTy::OrderedFields(ty, None);\n                 };\n                 if iter.all(|ty| is_zero_sized_ty(cx, ty)) {\n                     ty = sized_ty;\n@@ -316,7 +321,7 @@ fn reduce_ty<'tcx>(cx: &LateContext<'tcx>, mut ty: Ty<'tcx>) -> ReducedTy<'tcx>\n                     continue;\n                 }\n                 if def.repr().inhibit_struct_field_reordering_opt() {\n-                    ReducedTy::OrderedFields(ty)\n+                    ReducedTy::OrderedFields(ty, Some(sized_ty))\n                 } else {\n                     ReducedTy::UnorderedFields(ty)\n                 }"}, {"sha": "6df8ed8feeac8472c68316e32145ae31112b217d", "filename": "tests/ui/transmute_undefined_repr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b426bd52a167a55eee029a45b42e7c0eece1f1c0/tests%2Fui%2Ftransmute_undefined_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b426bd52a167a55eee029a45b42e7c0eece1f1c0/tests%2Fui%2Ftransmute_undefined_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_undefined_repr.rs?ref=b426bd52a167a55eee029a45b42e7c0eece1f1c0", "patch": "@@ -109,6 +109,14 @@ fn main() {\n         let _: Ty2<u32, u32> = transmute(value::<MaybeUninit<Ty2<u32, u32>>>()); // Ok\n \n         let _: Ty<&[u32]> = transmute::<&[u32], _>(value::<&Vec<u32>>()); // Ok\n+\n+        let _: *const Ty2<u32, u32> = transmute(value::<*const Ty2C<Ty2<u32, u32>, u32>>()); // Ok\n+        let _: *const Ty2C<Ty2<u32, u32>, u32> = transmute(value::<*const Ty2<u32, u32>>()); // Ok\n+        let _: *const Ty2<u32, u32> = transmute(value::<*const Ty2C<(), Ty2<u32, u32>>>()); // Ok\n+        let _: *const Ty2C<(), Ty2<u32, u32>> = transmute(value::<*const Ty2<u32, u32>>()); // Ok\n+\n+        let _: *const Ty2<u32, u32> = transmute(value::<*const Ty2C<u32, Ty2<u32, u32>>>()); // Err\n+        let _: *const Ty2C<u32, Ty2<u32, u32>> = transmute(value::<*const Ty2<u32, u32>>()); // Err\n     }\n }\n "}, {"sha": "8319f71a83dcfd365b09044e4abc6043ba09f97f", "filename": "tests/ui/transmute_undefined_repr.stderr", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b426bd52a167a55eee029a45b42e7c0eece1f1c0/tests%2Fui%2Ftransmute_undefined_repr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b426bd52a167a55eee029a45b42e7c0eece1f1c0/tests%2Fui%2Ftransmute_undefined_repr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_undefined_repr.stderr?ref=b426bd52a167a55eee029a45b42e7c0eece1f1c0", "patch": "@@ -60,21 +60,37 @@ LL |         let _: Box<Ty2<u32, u32>> = transmute(value::<&'static mut Ty2<u32,\n    |\n    = note: two instances of the same generic type (`Ty2`) may have different layouts\n \n+error: transmute into `*const Ty2<u32, u32>` which has an undefined layout\n+  --> $DIR/transmute_undefined_repr.rs:118:39\n+   |\n+LL |         let _: *const Ty2<u32, u32> = transmute(value::<*const Ty2C<u32, Ty2<u32, u32>>>()); // Err\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the contained type `Ty2<u32, u32>` has an undefined layout\n+\n+error: transmute from `*const Ty2<u32, u32>` which has an undefined layout\n+  --> $DIR/transmute_undefined_repr.rs:119:50\n+   |\n+LL |         let _: *const Ty2C<u32, Ty2<u32, u32>> = transmute(value::<*const Ty2<u32, u32>>()); // Err\n+   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the contained type `Ty2<u32, u32>` has an undefined layout\n+\n error: transmute from `std::vec::Vec<Ty2<U, i32>>` to `std::vec::Vec<Ty2<T, u32>>`, both of which have an undefined layout\n-  --> $DIR/transmute_undefined_repr.rs:138:35\n+  --> $DIR/transmute_undefined_repr.rs:146:35\n    |\n LL |         let _: Vec<Ty2<T, u32>> = transmute(value::<Vec<Ty2<U, i32>>>()); // Err\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: two instances of the same generic type (`Vec`) may have different layouts\n \n error: transmute from `std::vec::Vec<Ty2<T, u32>>` to `std::vec::Vec<Ty2<U, i32>>`, both of which have an undefined layout\n-  --> $DIR/transmute_undefined_repr.rs:139:35\n+  --> $DIR/transmute_undefined_repr.rs:147:35\n    |\n LL |         let _: Vec<Ty2<U, i32>> = transmute(value::<Vec<Ty2<T, u32>>>()); // Err\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: two instances of the same generic type (`Vec`) may have different layouts\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 12 previous errors\n "}]}