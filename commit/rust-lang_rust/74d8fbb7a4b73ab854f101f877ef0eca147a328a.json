{"sha": "74d8fbb7a4b73ab854f101f877ef0eca147a328a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0ZDhmYmI3YTRiNzNhYjg1NGYxMDFmODc3ZWYwZWNhMTQ3YTMyOGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-30T10:40:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-30T10:40:44Z"}, "message": "Auto merge of #6200 - rail-rain:borrowed_box_invalid_sugg, r=phansch\n\nfix the error-causing suggestion of 'borrowed_box'\n\nFixes #3128\n\nFix the suggestion of 'borrowed_box', which causes a syntax error because it misses necessary parentheses.\n\n---\n\nchangelog: Fix the error-causing suggestion of 'borrowed_box'", "tree": {"sha": "9fb9b885ddda6c4fbce12044749463d63fea76dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fb9b885ddda6c4fbce12044749463d63fea76dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74d8fbb7a4b73ab854f101f877ef0eca147a328a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74d8fbb7a4b73ab854f101f877ef0eca147a328a", "html_url": "https://github.com/rust-lang/rust/commit/74d8fbb7a4b73ab854f101f877ef0eca147a328a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74d8fbb7a4b73ab854f101f877ef0eca147a328a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e01d4875e9d0eed1198836fffef5d39d751f5848", "url": "https://api.github.com/repos/rust-lang/rust/commits/e01d4875e9d0eed1198836fffef5d39d751f5848", "html_url": "https://github.com/rust-lang/rust/commit/e01d4875e9d0eed1198836fffef5d39d751f5848"}, {"sha": "e568a328f9eb528653351643b1482ccecada1480", "url": "https://api.github.com/repos/rust-lang/rust/commits/e568a328f9eb528653351643b1482ccecada1480", "html_url": "https://github.com/rust-lang/rust/commit/e568a328f9eb528653351643b1482ccecada1480"}], "stats": {"total": 110, "additions": 98, "deletions": 12}, "files": [{"sha": "45f3bc3ea858a8b277ca45ba28a9cade4ede467c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/74d8fbb7a4b73ab854f101f877ef0eca147a328a/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d8fbb7a4b73ab854f101f877ef0eca147a328a/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=74d8fbb7a4b73ab854f101f877ef0eca147a328a", "patch": "@@ -10,9 +10,9 @@ use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericParamKind, HirId, ImplItem,\n-    ImplItemKind, Item, ItemKind, Lifetime, Lit, Local, MatchSource, MutTy, Mutability, Node, QPath, Stmt, StmtKind,\n-    TraitFn, TraitItem, TraitItemKind, TyKind, UnOp,\n+    BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericBounds, GenericParamKind, HirId,\n+    ImplItem, ImplItemKind, Item, ItemKind, Lifetime, Lit, Local, MatchSource, MutTy, Mutability, Node, QPath, Stmt,\n+    StmtKind, SyntheticTyParamKind, TraitFn, TraitItem, TraitItemKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n@@ -678,17 +678,30 @@ impl Types {\n                             // details.\n                             return;\n                         }\n+\n+                        // When trait objects or opaque types have lifetime or auto-trait bounds,\n+                        // we need to add parentheses to avoid a syntax error due to its ambiguity.\n+                        // Originally reported as the issue #3128.\n+                        let inner_snippet = snippet(cx, inner.span, \"..\");\n+                        let suggestion = match &inner.kind {\n+                            TyKind::TraitObject(bounds, lt_bound) if bounds.len() > 1 || !lt_bound.is_elided() => {\n+                                format!(\"&{}({})\", ltopt, &inner_snippet)\n+                            },\n+                            TyKind::Path(qpath)\n+                                if get_bounds_if_impl_trait(cx, qpath, inner.hir_id)\n+                                    .map_or(false, |bounds| bounds.len() > 1) =>\n+                            {\n+                                format!(\"&{}({})\", ltopt, &inner_snippet)\n+                            },\n+                            _ => format!(\"&{}{}\", ltopt, &inner_snippet),\n+                        };\n                         span_lint_and_sugg(\n                             cx,\n                             BORROWED_BOX,\n                             hir_ty.span,\n                             \"you seem to be trying to use `&Box<T>`. Consider using just `&T`\",\n                             \"try\",\n-                            format!(\n-                                \"&{}{}\",\n-                                ltopt,\n-                                &snippet(cx, inner.span, \"..\")\n-                            ),\n+                            suggestion,\n                             // To make this `MachineApplicable`, at least one needs to check if it isn't a trait item\n                             // because the trait impls of it will break otherwise;\n                             // and there may be other cases that result in invalid code.\n@@ -721,6 +734,21 @@ fn is_any_trait(t: &hir::Ty<'_>) -> bool {\n     false\n }\n \n+fn get_bounds_if_impl_trait<'tcx>(cx: &LateContext<'tcx>, qpath: &QPath<'_>, id: HirId) -> Option<GenericBounds<'tcx>> {\n+    if_chain! {\n+        if let Some(did) = qpath_res(cx, qpath, id).opt_def_id();\n+        if let Some(node) = cx.tcx.hir().get_if_local(did);\n+        if let Node::GenericParam(generic_param) = node;\n+        if let GenericParamKind::Type { synthetic, .. } = generic_param.kind;\n+        if synthetic == Some(SyntheticTyParamKind::ImplTrait);\n+        then {\n+            Some(generic_param.bounds)\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for binding a unit value.\n     ///"}, {"sha": "b606f773cfbad1d603b31df22311e3745d02e515", "filename": "tests/ui/borrow_box.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74d8fbb7a4b73ab854f101f877ef0eca147a328a/tests%2Fui%2Fborrow_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74d8fbb7a4b73ab854f101f877ef0eca147a328a/tests%2Fui%2Fborrow_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.rs?ref=74d8fbb7a4b73ab854f101f877ef0eca147a328a", "patch": "@@ -3,6 +3,8 @@\n #![allow(unused_variables)]\n #![allow(dead_code)]\n \n+use std::fmt::Display;\n+\n pub fn test1(foo: &mut Box<bool>) {\n     // Although this function could be changed to \"&mut bool\",\n     // avoiding the Box, mutable references to boxes are not\n@@ -89,6 +91,20 @@ pub fn test13(boxed_slice: &mut Box<[i32]>) {\n     *boxed_slice = data.into_boxed_slice();\n }\n \n+// The suggestion should include proper parentheses to avoid a syntax error.\n+pub fn test14(_display: &Box<dyn Display>) {}\n+pub fn test15(_display: &Box<dyn Display + Send>) {}\n+pub fn test16<'a>(_display: &'a Box<dyn Display + 'a>) {}\n+\n+pub fn test17(_display: &Box<impl Display>) {}\n+pub fn test18(_display: &Box<impl Display + Send>) {}\n+pub fn test19<'a>(_display: &'a Box<impl Display + 'a>) {}\n+\n+// This exists only to check what happens when parentheses are already present.\n+// Even though the current implementation doesn't put extra parentheses,\n+// it's fine that unnecessary parentheses appear in the future for some reason.\n+pub fn test20(_display: &Box<(dyn Display + Send)>) {}\n+\n fn main() {\n     test1(&mut Box::new(false));\n     test2();"}, {"sha": "3eac32815be3fac2bb13dfa886623da7a91bb85f", "filename": "tests/ui/borrow_box.stderr", "status": "modified", "additions": 46, "deletions": 4, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/74d8fbb7a4b73ab854f101f877ef0eca147a328a/tests%2Fui%2Fborrow_box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74d8fbb7a4b73ab854f101f877ef0eca147a328a/tests%2Fui%2Fborrow_box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrow_box.stderr?ref=74d8fbb7a4b73ab854f101f877ef0eca147a328a", "patch": "@@ -1,5 +1,5 @@\n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:19:14\n+  --> $DIR/borrow_box.rs:21:14\n    |\n LL |     let foo: &Box<bool>;\n    |              ^^^^^^^^^^ help: try: `&bool`\n@@ -11,16 +11,58 @@ LL | #![deny(clippy::borrowed_box)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:23:10\n+  --> $DIR/borrow_box.rs:25:10\n    |\n LL |     foo: &'a Box<bool>,\n    |          ^^^^^^^^^^^^^ help: try: `&'a bool`\n \n error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n-  --> $DIR/borrow_box.rs:27:17\n+  --> $DIR/borrow_box.rs:29:17\n    |\n LL |     fn test4(a: &Box<bool>);\n    |                 ^^^^^^^^^^ help: try: `&bool`\n \n-error: aborting due to 3 previous errors\n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> $DIR/borrow_box.rs:95:25\n+   |\n+LL | pub fn test14(_display: &Box<dyn Display>) {}\n+   |                         ^^^^^^^^^^^^^^^^^ help: try: `&dyn Display`\n+\n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> $DIR/borrow_box.rs:96:25\n+   |\n+LL | pub fn test15(_display: &Box<dyn Display + Send>) {}\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&(dyn Display + Send)`\n+\n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> $DIR/borrow_box.rs:97:29\n+   |\n+LL | pub fn test16<'a>(_display: &'a Box<dyn Display + 'a>) {}\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a (dyn Display + 'a)`\n+\n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> $DIR/borrow_box.rs:99:25\n+   |\n+LL | pub fn test17(_display: &Box<impl Display>) {}\n+   |                         ^^^^^^^^^^^^^^^^^^ help: try: `&impl Display`\n+\n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> $DIR/borrow_box.rs:100:25\n+   |\n+LL | pub fn test18(_display: &Box<impl Display + Send>) {}\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&(impl Display + Send)`\n+\n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> $DIR/borrow_box.rs:101:29\n+   |\n+LL | pub fn test19<'a>(_display: &'a Box<impl Display + 'a>) {}\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&'a (impl Display + 'a)`\n+\n+error: you seem to be trying to use `&Box<T>`. Consider using just `&T`\n+  --> $DIR/borrow_box.rs:106:25\n+   |\n+LL | pub fn test20(_display: &Box<(dyn Display + Send)>) {}\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `&(dyn Display + Send)`\n+\n+error: aborting due to 10 previous errors\n "}]}