{"sha": "4f98e80db1179d63395d2a4ccd432b5590d12d61", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmOThlODBkYjExNzlkNjMzOTVkMmE0Y2NkNDMyYjU1OTBkMTJkNjE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-09T00:14:25Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-09T00:15:37Z"}, "message": "rustc: Do some plumbing work in preparation for common fields in enums", "tree": {"sha": "9ab92b85eccc0f7849141c530f10ed13fafe4557", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ab92b85eccc0f7849141c530f10ed13fafe4557"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f98e80db1179d63395d2a4ccd432b5590d12d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f98e80db1179d63395d2a4ccd432b5590d12d61", "html_url": "https://github.com/rust-lang/rust/commit/4f98e80db1179d63395d2a4ccd432b5590d12d61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f98e80db1179d63395d2a4ccd432b5590d12d61/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "35db5b7be16cedf12c1f32736b031a9f7438d6b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/35db5b7be16cedf12c1f32736b031a9f7438d6b3", "html_url": "https://github.com/rust-lang/rust/commit/35db5b7be16cedf12c1f32736b031a9f7438d6b3"}], "stats": {"total": 250, "additions": 134, "deletions": 116}, "files": [{"sha": "ee1e12b87b74b04e3f6f780c46ab4d941bdb37f6", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -637,9 +637,12 @@ type variant_arg = {ty: @ty, id: node_id};\n enum variant_kind {\n     tuple_variant_kind(~[variant_arg]),\n     struct_variant_kind(@struct_def),\n-    enum_variant_kind(~[variant])\n+    enum_variant_kind(enum_def)\n }\n \n+#[auto_serialize]\n+enum enum_def = { variants: ~[variant] };\n+\n #[auto_serialize]\n type variant_ = {name: ident, attrs: ~[attribute], kind: variant_kind,\n                  id: node_id, disr_expr: option<@expr>, vis: visibility};\n@@ -736,7 +739,7 @@ enum item_ {\n     item_mod(_mod),\n     item_foreign_mod(foreign_mod),\n     item_ty(@ty, ~[ty_param]),\n-    item_enum(~[variant], ~[ty_param]),\n+    item_enum(enum_def, ~[ty_param]),\n     item_class(@struct_def, ~[ty_param]),\n     item_trait(~[ty_param], ~[@trait_ref], ~[trait_method]),\n     item_impl(~[ty_param],"}, {"sha": "dfb87b7efbbfdb204f940902a7b7720856205073", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -197,8 +197,8 @@ fn map_item(i: @item, cx: ctx, v: vt) {\n                        cx);\n         }\n       }\n-      item_enum(vs, _) => {\n-        for vs.each |v| {\n+      item_enum(enum_definition, _) => {\n+        for enum_definition.variants.each |v| {\n             cx.map.insert(v.node.id, node_variant(\n                 /* FIXME (#2543) */ copy v, i,\n                 extend(cx, i.ident)));"}, {"sha": "6ff0bed8e10908f9613c64faa97962312209bc21", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -187,8 +187,8 @@ fn is_exported(i: ident, m: _mod) -> bool {\n     for m.items.each |it| {\n         if it.ident == i { local = true; }\n         match it.node {\n-          item_enum(variants, _) =>\n-            for variants.each |v| {\n+          item_enum(enum_definition, _) =>\n+            for enum_definition.variants.each |v| {\n                 if v.node.name == i {\n                     local = true;\n                     parent_enum = some(/* FIXME (#2543) */ copy it.ident);\n@@ -477,7 +477,8 @@ fn id_visitor(vfn: fn@(node_id)) -> visit::vt<()> {\n         visit_item: fn@(i: @item) {\n             vfn(i.id);\n             match i.node {\n-              item_enum(vs, _) => for vs.each |v| { vfn(v.node.id); },\n+              item_enum(enum_definition, _) =>\n+                for enum_definition.variants.each |v| { vfn(v.node.id); },\n               _ => ()\n             }\n         },"}, {"sha": "934a295dfb5c21a1d8358169f63721571e1c10ac", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -107,10 +107,10 @@ fn expand(cx: ext_ctxt,\n                         ty_fns(cx, in_item.ident, ty, tps))\n           }\n \n-          ast::item_enum(variants, tps) => {\n+          ast::item_enum(enum_definition, tps) => {\n             vec::append(~[filter_attrs(in_item)],\n                         enum_fns(cx, in_item.ident,\n-                                 in_item.span, variants, tps))\n+                                 in_item.span, enum_definition.variants, tps))\n           }\n \n           _ => {"}, {"sha": "716fe62a61f9702f9e0a8e5dedf3c7585fcb95a6", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -66,9 +66,9 @@ trait ext_ctxt_ast_builder {\n                output: @ast::ty,\n                +body: ast::blk) -> @ast::item;\n     fn item_enum_poly(name: ident,\n-                      +variants: ~[ast::variant],\n+                      +enum_definition: ast::enum_def,\n                       +ty_params: ~[ast::ty_param]) -> @ast::item;\n-    fn item_enum(name: ident, +variants: ~[ast::variant]) -> @ast::item;\n+    fn item_enum(name: ident, +enum_definition: ast::enum_def) -> @ast::item;\n     fn variant(name: ident, +tys: ~[@ast::ty]) -> ast::variant;\n     fn item_mod(name: ident, +items: ~[@ast::item]) -> @ast::item;\n     fn ty_path_ast_builder(path: @ast::path) -> @ast::ty;\n@@ -236,16 +236,13 @@ impl ast_builder of ext_ctxt_ast_builder for ext_ctxt {\n     }\n \n     fn item_enum_poly(name: ident,\n-                      +variants: ~[ast::variant],\n+                      +enum_definition: ast::enum_def,\n                       +ty_params: ~[ast::ty_param]) -> @ast::item {\n-        self.item(name,\n-                  ast::item_enum(variants,\n-                                 ty_params))\n+        self.item(name, ast::item_enum(enum_definition, ty_params))\n     }\n \n-    fn item_enum(name: ident,\n-                 +variants: ~[ast::variant]) -> @ast::item {\n-        self.item_enum_poly(name, variants, ~[])\n+    fn item_enum(name: ident, +enum_definition: ast::enum_def) -> @ast::item {\n+        self.item_enum_poly(name, enum_definition, ~[])\n     }\n \n     fn variant(name: ident,"}, {"sha": "b4db8a6a72aef217f8e0cc902e1cd1aae700ab38", "filename": "src/libsyntax/ext/pipes/pipec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fpipec.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -237,7 +237,8 @@ impl compile of to_type_decls for state {\n             vec::push(items_msg, v);\n         }\n \n-        ~[cx.item_enum_poly(name, items_msg, self.ty_params)]\n+        ~[cx.item_enum_poly(name, ast::enum_def({ variants: items_msg }),\n+                            self.ty_params)]\n     }\n \n     fn to_endpoint_decls(cx: ext_ctxt, dir: direction) -> ~[@ast::item] {"}, {"sha": "5954d70739eb9dffc2715311273d17b5d0f64b56", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -238,9 +238,11 @@ fn noop_fold_item_underscore(i: item_, fld: ast_fold) -> item_ {\n           item_foreign_mod(nm) => item_foreign_mod(fld.fold_foreign_mod(nm)),\n           item_ty(t, typms) => item_ty(fld.fold_ty(t),\n                                        fold_ty_params(typms, fld)),\n-          item_enum(variants, typms) => {\n-            item_enum(vec::map(variants, |x| fld.fold_variant(x)),\n-                      fold_ty_params(typms, fld))\n+          item_enum(enum_definition, typms) => {\n+            item_enum(ast::enum_def({\n+                variants: vec::map(enum_definition.variants,\n+                                   |x| fld.fold_variant(x)),\n+            }), fold_ty_params(typms, fld))\n           }\n           item_class(struct_def, typms) => {\n             let resulting_optional_constructor;\n@@ -565,9 +567,10 @@ fn noop_fold_variant(v: variant_, fld: ast_fold) -> variant_ {\n             })\n         }\n \n-        enum_variant_kind(variants) => {\n-            let variants = vec::map(variants, |x| fld.fold_variant(x));\n-            kind = enum_variant_kind(variants);\n+        enum_variant_kind(enum_definition) => {\n+            let variants = vec::map(enum_definition.variants,\n+                                    |x| fld.fold_variant(x));\n+            kind = enum_variant_kind(ast::enum_def({ variants: variants }));\n         }\n     }\n "}, {"sha": "c8a333bb6e1abaa41e1ceac8391a2cea5493420f", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -23,15 +23,15 @@ import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              capture_item, cdir_dir_mod, cdir_src_mod, cdir_view_item,\n              class_immutable, class_member, class_method, class_mutable,\n              crate, crate_cfg, crate_directive, decl, decl_item, decl_local,\n-             default_blk, deref, div, enum_variant_kind, expl, expr, expr_,\n-             expr_addr_of, expr_match, expr_again, expr_assert, expr_assign,\n-             expr_assign_op, expr_binary, expr_block, expr_break, expr_call,\n-             expr_cast, expr_copy, expr_do_body, expr_fail, expr_field,\n-             expr_fn, expr_fn_block, expr_if, expr_index, expr_lit, expr_log,\n-             expr_loop, expr_loop_body, expr_mac, expr_move, expr_path,\n-             expr_rec, expr_repeat, expr_ret, expr_swap, expr_struct,\n-             expr_tup, expr_unary, expr_unary_move, expr_vec, expr_vstore,\n-             expr_while, extern_fn, field, fn_decl, foreign_item,\n+             default_blk, deref, div, enum_def, enum_variant_kind, expl, expr,\n+             expr_, expr_addr_of, expr_match, expr_again, expr_assert,\n+             expr_assign, expr_assign_op, expr_binary, expr_block, expr_break,\n+             expr_call, expr_cast, expr_copy, expr_do_body, expr_fail,\n+             expr_field, expr_fn, expr_fn_block, expr_if, expr_index,\n+             expr_lit, expr_log, expr_loop, expr_loop_body, expr_mac,\n+             expr_move, expr_path, expr_rec, expr_repeat, expr_ret, expr_swap,\n+             expr_struct, expr_tup, expr_unary, expr_unary_move, expr_vec,\n+             expr_vstore, expr_while, extern_fn, field, fn_decl, foreign_item,\n              foreign_item_fn, foreign_mod, ident, impure_fn, infer, inherited,\n              init_assign, init_move, initializer, instance_var, item, item_,\n              item_class, item_const, item_enum, item_fn, item_foreign_mod,\n@@ -2841,7 +2841,7 @@ class parser {\n         }\n     }\n \n-    fn parse_enum_body(ty_params: ~[ast::ty_param]) -> ~[ast::variant] {\n+    fn parse_enum_def(ty_params: ~[ast::ty_param]) -> enum_def {\n         let mut variants: ~[variant] = ~[];\n         let mut all_nullary = true, have_disr = false;\n \n@@ -2932,7 +2932,7 @@ class parser {\n                         enum\");\n         }\n \n-        return variants;\n+        return enum_def({ variants: variants });\n     }\n \n     fn parse_item_enum() -> item_info {\n@@ -2954,12 +2954,13 @@ class parser {\n                          id: self.get_id(),\n                          disr_expr: none,\n                          vis: public});\n-            return (id, item_enum(~[variant], ty_params), none);\n+            return (id, item_enum(enum_def({ variants: ~[variant] }),\n+                                  ty_params), none);\n         }\n         self.expect(token::LBRACE);\n \n-        let variants = self.parse_enum_body(ty_params);\n-        (id, item_enum(variants, ty_params), none)\n+        let enum_definition = self.parse_enum_def(ty_params);\n+        (id, item_enum(enum_definition, ty_params), none)\n     }\n \n     fn parse_fn_ty_proto() -> proto {"}, {"sha": "4ade7618bcd429b9e42c06c843fc2fe2fe621434", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 39, "deletions": 33, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -487,37 +487,8 @@ fn print_item(s: ps, &&item: @ast::item) {\n         word(s.s, ~\";\");\n         end(s); // end the outer ibox\n       }\n-      ast::item_enum(variants, params) => {\n-        let mut newtype =\n-            vec::len(variants) == 1u &&\n-                str::eq(item.ident, variants[0].node.name);\n-        if newtype {\n-            match variants[0].node.kind {\n-                ast::tuple_variant_kind(args) if args.len() == 1 => {}\n-                _ => newtype = false\n-            }\n-        }\n-        if newtype {\n-            ibox(s, indent_unit);\n-            word_space(s, ~\"enum\");\n-        } else {\n-            head(s, ~\"enum\");\n-        }\n-\n-        word(s.s, *item.ident);\n-        print_type_params(s, params);\n-        space(s.s);\n-        if newtype {\n-            word_space(s, ~\"=\");\n-            match variants[0].node.kind {\n-                ast::tuple_variant_kind(args) => print_type(s, args[0].ty),\n-                _ => fail ~\"newtype syntax with struct?\"\n-            }\n-            word(s.s, ~\";\");\n-            end(s);\n-        } else {\n-            print_variants(s, variants, item.span);\n-        }\n+      ast::item_enum(enum_definition, params) => {\n+        print_enum_def(s, enum_definition, params, item.ident, item.span);\n       }\n       ast::item_class(struct_def, tps) => {\n           head(s, ~\"class\");\n@@ -571,6 +542,41 @@ fn print_item(s: ps, &&item: @ast::item) {\n     s.ann.post(ann_node);\n }\n \n+fn print_enum_def(s: ps, enum_definition: ast::enum_def,\n+                  params: ~[ast::ty_param], ident: ast::ident,\n+                  span: ast::span) {\n+    let mut newtype =\n+        vec::len(enum_definition.variants) == 1u &&\n+            str::eq(ident, enum_definition.variants[0].node.name);\n+    if newtype {\n+        match enum_definition.variants[0].node.kind {\n+            ast::tuple_variant_kind(args) if args.len() == 1 => {}\n+            _ => newtype = false\n+        }\n+    }\n+    if newtype {\n+        ibox(s, indent_unit);\n+        word_space(s, ~\"enum\");\n+    } else {\n+        head(s, ~\"enum\");\n+    }\n+\n+    word(s.s, *ident);\n+    print_type_params(s, params);\n+    space(s.s);\n+    if newtype {\n+        word_space(s, ~\"=\");\n+        match enum_definition.variants[0].node.kind {\n+            ast::tuple_variant_kind(args) => print_type(s, args[0].ty),\n+            _ => fail ~\"newtype syntax with struct?\"\n+        }\n+        word(s.s, ~\";\");\n+        end(s);\n+    } else {\n+        print_variants(s, enum_definition.variants, span);\n+    }\n+}\n+\n fn print_variants(s: ps, variants: ~[ast::variant], span: ast::span) {\n     bopen(s);\n     for variants.each |v| {\n@@ -714,8 +720,8 @@ fn print_variant(s: ps, v: ast::variant) {\n             head(s, ~\"\");\n             print_struct(s, struct_def, ~[], v.node.name, v.span);\n         }\n-        ast::enum_variant_kind(variants) => {\n-            print_variants(s, variants, v.span);\n+        ast::enum_variant_kind(enum_definition) => {\n+            print_variants(s, enum_definition.variants, v.span);\n         }\n     }\n     match v.node.disr_expr {"}, {"sha": "1903a688aea58cdf7948a3b5789f6d2c13be7477", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -136,9 +136,9 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n         v.visit_ty(t, e, v);\n         v.visit_ty_params(tps, e, v);\n       }\n-      item_enum(variants, tps) => {\n+      item_enum(enum_definition, tps) => {\n         v.visit_ty_params(tps, e, v);\n-        visit_variants(variants, tps, e, v);\n+        visit_enum_def(enum_definition, tps, e, v);\n       }\n       item_impl(tps, traits, ty, methods) => {\n         v.visit_ty_params(tps, e, v);\n@@ -165,9 +165,9 @@ fn visit_item<E>(i: @item, e: E, v: vt<E>) {\n     }\n }\n \n-fn visit_variants<E>(variants: ~[ast::variant], tps: ~[ast::ty_param], e: E,\n-                     v: vt<E>) {\n-    for variants.each |vr| {\n+fn visit_enum_def<E>(enum_definition: ast::enum_def, tps: ~[ast::ty_param],\n+                     e: E, v: vt<E>) {\n+    for enum_definition.variants.each |vr| {\n         match vr.node.kind {\n             tuple_variant_kind(variant_args) => {\n                 for variant_args.each |va| { v.visit_ty(va.ty, e, v); }\n@@ -176,8 +176,8 @@ fn visit_variants<E>(variants: ~[ast::variant], tps: ~[ast::ty_param], e: E,\n                 v.visit_struct_def(struct_def, vr.node.name, tps,\n                                    vr.node.id, e, v);\n             }\n-            enum_variant_kind(variants) => {\n-                visit_variants(variants, tps, e, v);\n+            enum_variant_kind(enum_definition) => {\n+                visit_enum_def(enum_definition, tps, e, v);\n             }\n         }\n     }"}, {"sha": "161f5d9c09cb9a61a7ee1d9bdd85f0bf49a49a88", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -223,11 +223,12 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n                 encode_struct_def(ebml_w, struct_def, path, it.ident, index);\n             }\n           }\n-          item_enum(variants, _) => {\n+          item_enum(enum_definition, _) => {\n             do ebml_w.wr_tag(tag_paths_data_item) {\n                   encode_name_and_def_id(ebml_w, it.ident, it.id);\n               }\n-              encode_enum_variant_paths(ebml_w, variants, path, index);\n+              encode_enum_variant_paths(ebml_w, enum_definition.variants,\n+                                        path, index);\n           }\n           item_trait(_, _, methods) => {\n             do ebml_w.wr_tag(tag_paths_data_item) {\n@@ -723,23 +724,23 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_region_param(ecx, ebml_w, item);\n         ebml_w.end_tag();\n       }\n-      item_enum(variants, tps) => {\n+      item_enum(enum_definition, tps) => {\n         add_to_index();\n         do ebml_w.wr_tag(tag_items_data_item) {\n             encode_def_id(ebml_w, local_def(item.id));\n             encode_family(ebml_w, 't');\n             encode_type_param_bounds(ebml_w, ecx, tps);\n             encode_type(ecx, ebml_w, node_id_to_type(tcx, item.id));\n             encode_name(ebml_w, item.ident);\n-            for variants.each |v| {\n+            for enum_definition.variants.each |v| {\n                 encode_variant_id(ebml_w, local_def(v.node.id));\n             }\n             ecx.encode_inlined_item(ecx, ebml_w, path, ii_item(item));\n             encode_path(ebml_w, path, ast_map::path_name(item.ident));\n             encode_region_param(ecx, ebml_w, item);\n         }\n-        encode_enum_variant_info(ecx, ebml_w, item.id, variants,\n-                                 path, index, tps);\n+        encode_enum_variant_info(ecx, ebml_w, item.id,\n+                                 enum_definition.variants, path, index, tps);\n       }\n       item_class(struct_def, tps) => {\n         /* First, encode the fields and methods"}, {"sha": "9ea88317176e4734a1912120a94d1e5ba631f7e5", "filename": "src/rustc/middle/check_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_const.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -25,8 +25,8 @@ fn check_item(sess: session, ast_map: ast_map::map,\n         v.visit_expr(ex, true, v);\n         check_item_recursion(sess, ast_map, def_map, it);\n       }\n-      item_enum(vs, _) => {\n-        for vs.each |var| {\n+      item_enum(enum_definition, _) => {\n+        for enum_definition.variants.each |var| {\n             do option::iter(var.node.disr_expr) |ex| {\n                 v.visit_expr(ex, true, v);\n             }"}, {"sha": "77998a0c8cf4c142416564517d38350a87ccae71", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -482,9 +482,9 @@ fn check_item_non_camel_case_types(cx: ty::ctxt, it: @ast::item) {\n       ast::item_trait(*) | ast::item_impl(*) => {\n         check_case(cx, it.ident, it.id, it.id, it.span)\n       }\n-      ast::item_enum(variants, _) => {\n+      ast::item_enum(enum_definition, _) => {\n         check_case(cx, it.ident, it.id, it.id, it.span);\n-        for variants.each |variant| {\n+        for enum_definition.variants.each |variant| {\n             check_case(cx, variant.node.name,\n                        variant.node.id, it.id, variant.span);\n         }"}, {"sha": "15c01c646572ef398fbc2249a6091662a9212069", "filename": "src/rustc/middle/resolve3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmiddle%2Fresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmiddle%2Fresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve3.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -973,13 +973,13 @@ class Resolver {\n             }\n \n             // These items live in both the type and value namespaces.\n-            item_enum(variants, _) => {\n+            item_enum(enum_definition, _) => {\n               let (name_bindings, new_parent) = self.add_child(atom, parent,\n                                                      ~[ValueNS, TypeNS], sp);\n \n                 (*name_bindings).define_type(def_ty(local_def(item.id)), sp);\n \n-                for variants.each |variant| {\n+                for enum_definition.variants.each |variant| {\n                     self.build_reduced_graph_for_variant(variant,\n                                                          local_def(item.id),\n                                                          new_parent,\n@@ -1146,10 +1146,10 @@ class Resolver {\n                                      variant.span);\n                 self.structs.insert(local_def(variant.node.id), false);\n             }\n-            enum_variant_kind(variants) => {\n+            enum_variant_kind(enum_definition) => {\n                 (*child).define_type(def_ty(local_def(variant.node.id)),\n                                      variant.span);\n-                for variants.each |variant| {\n+                for enum_definition.variants.each |variant| {\n                     self.build_reduced_graph_for_variant(variant, item_id,\n                                                          parent, visitor);\n                 }"}, {"sha": "fb671a277a87f0205ce7f75d7029e1455f747653", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -4912,11 +4912,11 @@ fn trans_class_dtor(ccx: @crate_ctxt, path: path,\n   lldecl\n }\n \n-fn trans_variants(ccx: @crate_ctxt, variants: ~[ast::variant],\n+fn trans_enum_def(ccx: @crate_ctxt, enum_definition: ast::enum_def,\n                   id: ast::node_id, tps: ~[ast::ty_param], degen: bool,\n                   path: @ast_map::path, vi: @~[ty::variant_info],\n                   i: &mut uint) {\n-    for vec::each(variants) |variant| {\n+    for vec::each(enum_definition.variants) |variant| {\n         let disr_val = vi[*i].disr_val;\n         *i += 1;\n \n@@ -4933,8 +4933,9 @@ fn trans_variants(ccx: @crate_ctxt, variants: ~[ast::variant],\n                 trans_struct_def(ccx, struct_def, tps, path,\n                                  variant.node.name, variant.node.id);\n             }\n-            ast::enum_variant_kind(variants) => {\n-                trans_variants(ccx, variants, id, tps, degen, path, vi, i);\n+            ast::enum_variant_kind(enum_definition) => {\n+                trans_enum_def(ccx, enum_definition, id, tps, degen, path, vi,\n+                               i);\n             }\n         }\n     }\n@@ -4976,13 +4977,13 @@ fn trans_item(ccx: @crate_ctxt, item: ast::item) {\n       ast::item_mod(m) => {\n         trans_mod(ccx, m);\n       }\n-      ast::item_enum(variants, tps) => {\n+      ast::item_enum(enum_definition, tps) => {\n         if tps.len() == 0u {\n-            let degen = variants.len() == 1u;\n+            let degen = enum_definition.variants.len() == 1u;\n             let vi = ty::enum_variants(ccx.tcx, local_def(item.id));\n             let mut i = 0;\n-            trans_variants(ccx, variants, item.id, tps, degen, path, vi,\n-                           &mut i);\n+            trans_enum_def(ccx, enum_definition, item.id, tps, degen, path,\n+                           vi, &mut i);\n         }\n       }\n       ast::item_const(_, expr) => consts::trans_const(ccx, expr, item.id),\n@@ -5317,12 +5318,12 @@ fn get_item_val(ccx: @crate_ctxt, id: ast::node_id) -> ValueRef {\n fn trans_constant(ccx: @crate_ctxt, it: @ast::item) {\n     let _icx = ccx.insn_ctxt(~\"trans_constant\");\n     match it.node {\n-      ast::item_enum(variants, _) => {\n+      ast::item_enum(enum_definition, _) => {\n         let vi = ty::enum_variants(ccx.tcx, {crate: ast::local_crate,\n                                              node: it.id});\n         let mut i = 0;\n         let path = item_path(ccx, it);\n-        for vec::each(variants) |variant| {\n+        for vec::each(enum_definition.variants) |variant| {\n             let p = vec::append(path, ~[path_name(variant.node.name),\n                                        path_name(@~\"discrim\")]);\n             let s = mangle_exported_name(ccx, p, ty::mk_int(ccx.tcx));"}, {"sha": "5af0cc4f435a33653fd822d2cd3c7b51f4b9335e", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -2837,7 +2837,9 @@ fn enum_variants(cx: ctxt, id: ast::def_id) -> @~[variant_info] {\n           expr, since check_enum_variants also updates the enum_var_cache\n          */\n         match cx.items.get(id.node) {\n-          ast_map::node_item(@{node: ast::item_enum(variants, _), _}, _) => {\n+          ast_map::node_item(@{node: ast::item_enum(enum_definition, _), _},\n+                             _) => {\n+            let variants = enum_definition.variants;\n             let mut disr_val = -1;\n             @vec::map(variants, |variant| {\n                 match variant.node.kind {"}, {"sha": "8a7ba85d141bf80b7bd20e64346fa31492f0370b", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -439,8 +439,8 @@ fn check_struct(ccx: @crate_ctxt, struct_def: @ast::struct_def,\n fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n     match it.node {\n       ast::item_const(_, e) => check_const(ccx, it.span, e, it.id),\n-      ast::item_enum(vs, _) => {\n-        check_enum_variants(ccx, it.span, vs, it.id);\n+      ast::item_enum(enum_definition, _) => {\n+        check_enum_variants(ccx, it.span, enum_definition.variants, it.id);\n       }\n       ast::item_fn(decl, tps, body) => {\n         check_bare_fn(ccx, decl, body, it.id, none);"}, {"sha": "c404103b77e2a59fc9bdda8119dffccd9750b79f", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -135,8 +135,9 @@ fn get_enum_variant_types(ccx: @crate_ctxt,\n             ast::tuple_variant_kind(_) | ast::struct_variant_kind(_) => {\n                 result_ty = some(enum_ty);\n             }\n-            ast::enum_variant_kind(variants) => {\n-                get_enum_variant_types(ccx, enum_ty, variants, ty_params, rp);\n+            ast::enum_variant_kind(enum_definition) => {\n+                get_enum_variant_types(ccx, enum_ty, enum_definition.variants,\n+                                       ty_params, rp);\n                 result_ty = none;\n             }\n         };\n@@ -404,10 +405,11 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n     match it.node {\n       // These don't define types.\n       ast::item_foreign_mod(_) | ast::item_mod(_) => {}\n-      ast::item_enum(variants, ty_params) => {\n+      ast::item_enum(enum_definition, ty_params) => {\n         let tpt = ty_of_item(ccx, it);\n         write_ty_to_tcx(tcx, it.id, tpt.ty);\n-        get_enum_variant_types(ccx, tpt.ty, variants, ty_params, rp);\n+        get_enum_variant_types(ccx, tpt.ty, enum_definition.variants,\n+                               ty_params, rp);\n       }\n       ast::item_impl(tps, trait_ref, selfty, ms) => {\n         let i_bounds = ty_param_bounds(ccx, tps);"}, {"sha": "85c1299531640295e48366287610103f3918d19f", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -146,10 +146,10 @@ fn fold_enum(\n             let desc = do astsrv::exec(srv) |ctxt| {\n                 match check ctxt.ast_map.get(doc_id) {\n                   ast_map::node_item(@{\n-                    node: ast::item_enum(ast_variants, _), _\n+                    node: ast::item_enum(enum_definition, _), _\n                   }, _) => {\n                     let ast_variant = option::get(\n-                        vec::find(ast_variants, |v| {\n+                        vec::find(enum_definition.variants, |v| {\n                             *v.node.name == variant.name\n                         }));\n "}, {"sha": "a94256460a2e1a267f8d7689e7f254456661c022", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -79,9 +79,9 @@ fn moddoc_from_mod(\n                     constdoc_from_const(itemdoc)\n                 ))\n               }\n-              ast::item_enum(variants, _) => {\n+              ast::item_enum(enum_definition, _) => {\n                 some(doc::enumtag(\n-                    enumdoc_from_enum(itemdoc, variants)\n+                    enumdoc_from_enum(itemdoc, enum_definition.variants)\n                 ))\n               }\n               ast::item_trait(_, _, methods) => {"}, {"sha": "83e95bcea48dad3114b579af37647e67de5bcb43", "filename": "src/rustdoc/tystr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f98e80db1179d63395d2a4ccd432b5590d12d61/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=4f98e80db1179d63395d2a4ccd432b5590d12d61", "patch": "@@ -111,10 +111,10 @@ fn fold_enum(\n             let sig = do astsrv::exec(srv) |ctxt| {\n                 match check ctxt.ast_map.get(doc_id) {\n                   ast_map::node_item(@{\n-                    node: ast::item_enum(ast_variants, _), _\n+                    node: ast::item_enum(enum_definition, _), _\n                   }, _) => {\n                     let ast_variant = option::get(\n-                        do vec::find(ast_variants) |v| {\n+                        do vec::find(enum_definition.variants) |v| {\n                             *v.node.name == variant.name\n                         });\n "}]}