{"sha": "5f324aaf203a9611e9c3ead934d64f92f136ee00", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMzI0YWFmMjAzYTk2MTFlOWMzZWFkOTM0ZDY0ZjkyZjEzNmVlMDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-20T13:46:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-20T13:46:48Z"}, "message": "auto merge of #12399 : michaelwoerister/rust/simd-fix, r=alexcrichton\n\nFixes  #12333.\r\nI also re-enabled the *function-arg-initialization* test case, so if it passes again, fixes #12021.", "tree": {"sha": "95f59b852bfe6cf805a8ed0abbd80be473d3eaed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95f59b852bfe6cf805a8ed0abbd80be473d3eaed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f324aaf203a9611e9c3ead934d64f92f136ee00", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f324aaf203a9611e9c3ead934d64f92f136ee00", "html_url": "https://github.com/rust-lang/rust/commit/5f324aaf203a9611e9c3ead934d64f92f136ee00", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f324aaf203a9611e9c3ead934d64f92f136ee00/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "882c25fa2ded21f02e26d00045ae72457b08724c", "url": "https://api.github.com/repos/rust-lang/rust/commits/882c25fa2ded21f02e26d00045ae72457b08724c", "html_url": "https://github.com/rust-lang/rust/commit/882c25fa2ded21f02e26d00045ae72457b08724c"}, {"sha": "a40b272faef45621548e61254a6e0ddb85fc0a38", "url": "https://api.github.com/repos/rust-lang/rust/commits/a40b272faef45621548e61254a6e0ddb85fc0a38", "html_url": "https://github.com/rust-lang/rust/commit/a40b272faef45621548e61254a6e0ddb85fc0a38"}], "stats": {"total": 106, "additions": 96, "deletions": 10}, "files": [{"sha": "ff978a308e62b040be19bc243d7689b075aa4efd", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5f324aaf203a9611e9c3ead934d64f92f136ee00/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f324aaf203a9611e9c3ead934d64f92f136ee00/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=5f324aaf203a9611e9c3ead934d64f92f136ee00", "patch": "@@ -258,15 +258,12 @@ actual:\\n\\\n }\n \n fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n-\n-    // do not optimize debuginfo tests\n-    let mut config = match config.target_rustcflags {\n-        Some(ref flags) => config {\n-            target_rustcflags: Some(flags.replace(\"-O\", \"\")),\n-            .. (*config).clone()\n-        },\n-        None => (*config).clone()\n+    let mut config = config {\n+        target_rustcflags: cleanup_debug_info_options(&config.target_rustcflags),\n+        host_rustcflags: cleanup_debug_info_options(&config.host_rustcflags),\n+        .. config.clone()\n     };\n+\n     let config = &mut config;\n     let check_lines = &props.check_lines;\n     let mut cmds = props.debugger_cmds.connect(\"\\n\");\n@@ -436,6 +433,20 @@ fn run_debuginfo_test(config: &config, props: &TestProps, testfile: &Path) {\n                                   check_lines[i]), &ProcRes);\n         }\n     }\n+\n+    fn cleanup_debug_info_options(options: &Option<~str>) -> Option<~str> {\n+        if options.is_none() {\n+            return None;\n+        }\n+\n+        // Remove options that are either unwanted (-O) or may lead to duplicates due to RUSTFLAGS.\n+        let options_to_remove = [~\"-O\", ~\"-g\", ~\"--debuginfo\"];\n+        let new_options = split_maybe_args(options).move_iter()\n+                                                   .filter(|x| !options_to_remove.contains(x))\n+                                                   .to_owned_vec()\n+                                                   .connect(\" \");\n+        Some(new_options)\n+    }\n }\n \n fn check_error_patterns(props: &TestProps,"}, {"sha": "6a9ee514f8fe7c1dc5d878c8154784bc9e067765", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5f324aaf203a9611e9c3ead934d64f92f136ee00/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f324aaf203a9611e9c3ead934d64f92f136ee00/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=5f324aaf203a9611e9c3ead934d64f92f136ee00", "patch": "@@ -2111,7 +2111,13 @@ fn type_metadata(cx: &CrateContext,\n             trait_metadata(cx, def_id, t, substs, trait_store, mutability, bounds)\n         },\n         ty::ty_struct(def_id, ref substs) => {\n-            prepare_struct_metadata(cx, t, def_id, substs, usage_site_span).finalize(cx)\n+            if ty::type_is_simd(cx.tcx, t) {\n+                let element_type = ty::simd_type(cx.tcx, t);\n+                let len = ty::simd_size(cx.tcx, t);\n+                fixed_vec_metadata(cx, element_type, len, usage_site_span)\n+            } else {\n+                prepare_struct_metadata(cx, t, def_id, substs, usage_site_span).finalize(cx)\n+            }\n         },\n         ty::ty_tup(ref elements) => {\n             prepare_tuple_metadata(cx, t, *elements, usage_site_span).finalize(cx)"}, {"sha": "9ceec631c00591a1894da94589b325d49150b709", "filename": "src/test/debug-info/function-arg-initialization.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f324aaf203a9611e9c3ead934d64f92f136ee00/src%2Ftest%2Fdebug-info%2Ffunction-arg-initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f324aaf203a9611e9c3ead934d64f92f136ee00/src%2Ftest%2Fdebug-info%2Ffunction-arg-initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ffunction-arg-initialization.rs?ref=5f324aaf203a9611e9c3ead934d64f92f136ee00", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // ignore-android: FIXME(#10381)\n-// ignore-test: FIXME(#12021)\n \n // This test case checks if function arguments already have the correct value when breaking at the\n // first line of the function, that is if the function prologue has already been executed at the"}, {"sha": "f91112416e372868d9997bf79af96db300b78011", "filename": "src/test/debug-info/issue7712.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5f324aaf203a9611e9c3ead934d64f92f136ee00/src%2Ftest%2Fdebug-info%2Fissue7712.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f324aaf203a9611e9c3ead934d64f92f136ee00/src%2Ftest%2Fdebug-info%2Fissue7712.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fissue7712.rs?ref=5f324aaf203a9611e9c3ead934d64f92f136ee00", "previous_filename": "src/test/run-pass/issue-7712.rs"}, {"sha": "454d05ec99e507dc788d45db66e275ac7a5c6d0d", "filename": "src/test/debug-info/simd.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/5f324aaf203a9611e9c3ead934d64f92f136ee00/src%2Ftest%2Fdebug-info%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f324aaf203a9611e9c3ead934d64f92f136ee00/src%2Ftest%2Fdebug-info%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fsimd.rs?ref=5f324aaf203a9611e9c3ead934d64f92f136ee00", "patch": "@@ -0,0 +1,70 @@\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-android: FIXME(#10381)\n+\n+// compile-flags:-g\n+// debugger:rbreak zzz\n+// debugger:run\n+\n+// debugger:finish\n+// debugger:print/d i8x16\n+// check:$1 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15}\n+// debugger:print/d i16x8\n+// check:$2 = {16, 17, 18, 19, 20, 21, 22, 23}\n+// debugger:print/d i32x4\n+// check:$3 = {24, 25, 26, 27}\n+// debugger:print/d i64x2\n+// check:$4 = {28, 29}\n+\n+// debugger:print/d u8x16\n+// check:$5 = {30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45}\n+// debugger:print/d u16x8\n+// check:$6 = {46, 47, 48, 49, 50, 51, 52, 53}\n+// debugger:print/d u32x4\n+// check:$7 = {54, 55, 56, 57}\n+// debugger:print/d u64x2\n+// check:$8 = {58, 59}\n+\n+// debugger:print f32x4\n+// check:$9 = {60.5, 61.5, 62.5, 63.5}\n+// debugger:print f64x2\n+// check:$10 = {64.5, 65.5}\n+\n+// debugger:continue\n+\n+#[allow(experimental)];\n+#[allow(unused_variable)];\n+\n+use std::unstable::simd::{i8x16, i16x8,i32x4,i64x2,u8x16,u16x8,u32x4,u64x2,f32x4,f64x2};\n+\n+fn main() {\n+\n+    let i8x16 = i8x16(0i8, 1i8, 2i8, 3i8, 4i8, 5i8, 6i8, 7i8,\n+                      8i8, 9i8, 10i8, 11i8, 12i8, 13i8, 14i8, 15i8);\n+\n+    let i16x8 = i16x8(16i16, 17i16, 18i16, 19i16, 20i16, 21i16, 22i16, 23i16);\n+    let i32x4 = i32x4(24i32, 25i32, 26i32, 27i32);\n+    let i64x2 = i64x2(28i64, 29i64);\n+\n+    let u8x16 = u8x16(30u8, 31u8, 32u8, 33u8, 34u8, 35u8, 36u8, 37u8,\n+                      38u8, 39u8, 40u8, 41u8, 42u8, 43u8, 44u8, 45u8);\n+    let u16x8 = u16x8(46u16, 47u16, 48u16, 49u16, 50u16, 51u16, 52u16, 53u16);\n+    let u32x4 = u32x4(54u32, 55u32, 56u32, 57u32);\n+    let u64x2 = u64x2(58u64, 59u64);\n+\n+    let f32x4 = f32x4(60.5f32, 61.5f32, 62.5f32, 63.5f32);\n+    let f64x2 = f64x2(64.5f64, 65.5f64);\n+\n+    zzz();\n+}\n+\n+#[inline(never)]\n+fn zzz() { () }\n\\ No newline at end of file"}]}