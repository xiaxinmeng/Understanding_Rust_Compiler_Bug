{"sha": "50f631ce80ac3d04d52e4d6b3b4c5126ac9c1009", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZjYzMWNlODBhYzNkMDRkNTJlNGQ2YjNiNGM1MTI2YWM5YzEwMDk=", "commit": {"author": {"name": "iirelu", "email": "anna@bawk.space", "date": "2018-09-26T14:52:47Z"}, "committer": {"name": "iirelu", "email": "anna@bawk.space", "date": "2018-09-26T14:52:47Z"}, "message": "Removed dead links to unwritten keyword docs\n\nMost of these will eventually be filled, but right now travis-ci enjoys\ncomplaining about the fact that there's links that lead nowhere, so\nthey're gone. Hopefully someone remembers to re-add them later.", "tree": {"sha": "59f55519b2c351446989c041ef908eb9f2d040c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59f55519b2c351446989c041ef908eb9f2d040c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50f631ce80ac3d04d52e4d6b3b4c5126ac9c1009", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50f631ce80ac3d04d52e4d6b3b4c5126ac9c1009", "html_url": "https://github.com/rust-lang/rust/commit/50f631ce80ac3d04d52e4d6b3b4c5126ac9c1009", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50f631ce80ac3d04d52e4d6b3b4c5126ac9c1009/comments", "author": {"login": "iirelu", "id": 3432543, "node_id": "MDQ6VXNlcjM0MzI1NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/3432543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iirelu", "html_url": "https://github.com/iirelu", "followers_url": "https://api.github.com/users/iirelu/followers", "following_url": "https://api.github.com/users/iirelu/following{/other_user}", "gists_url": "https://api.github.com/users/iirelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/iirelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iirelu/subscriptions", "organizations_url": "https://api.github.com/users/iirelu/orgs", "repos_url": "https://api.github.com/users/iirelu/repos", "events_url": "https://api.github.com/users/iirelu/events{/privacy}", "received_events_url": "https://api.github.com/users/iirelu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iirelu", "id": 3432543, "node_id": "MDQ6VXNlcjM0MzI1NDM=", "avatar_url": "https://avatars.githubusercontent.com/u/3432543?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iirelu", "html_url": "https://github.com/iirelu", "followers_url": "https://api.github.com/users/iirelu/followers", "following_url": "https://api.github.com/users/iirelu/following{/other_user}", "gists_url": "https://api.github.com/users/iirelu/gists{/gist_id}", "starred_url": "https://api.github.com/users/iirelu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iirelu/subscriptions", "organizations_url": "https://api.github.com/users/iirelu/orgs", "repos_url": "https://api.github.com/users/iirelu/repos", "events_url": "https://api.github.com/users/iirelu/events{/privacy}", "received_events_url": "https://api.github.com/users/iirelu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76a353b160cdb8551eac8affc8299df85da50558", "url": "https://api.github.com/repos/rust-lang/rust/commits/76a353b160cdb8551eac8affc8299df85da50558", "html_url": "https://github.com/rust-lang/rust/commit/76a353b160cdb8551eac8affc8299df85da50558"}], "stats": {"total": 27, "additions": 7, "deletions": 20}, "files": [{"sha": "cd7b38952891f4da3cad3438ee113aa584cb840d", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 7, "deletions": 20, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/50f631ce80ac3d04d52e4d6b3b4c5126ac9c1009/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50f631ce80ac3d04d52e4d6b3b4c5126ac9c1009/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=50f631ce80ac3d04d52e4d6b3b4c5126ac9c1009", "patch": "@@ -30,15 +30,14 @@\n /// explicitly using `as` allows a few more coercions that aren't allowed implicitly, such as\n /// changing the type of a raw pointer or turning closures into raw pointers.\n ///\n-/// Other places `as` is used include as extra syntax for [`crate`] and [`use`], to change the name\n+/// Other places `as` is used include as extra syntax for [`crate`] and `use`, to change the name\n /// something is imported as.\n ///\n /// For more information on what `as` is capable of, see the [Reference]\n ///\n /// [Reference]:\n /// https://doc.rust-lang.org/reference/expressions/operator-expr.html#type-cast-expressions\n /// [`crate`]: keyword.crate.html\n-/// [`use`]: keyword.use.html\n mod as_keyword { }\n \n #[doc(keyword = \"const\")]\n@@ -75,7 +74,7 @@ mod as_keyword { }\n /// const WORDS: &str = \"hello convenience!\";\n /// ```\n ///\n-/// `const` items looks remarkably similar to [`static`] items, which introduces some confusion as\n+/// `const` items looks remarkably similar to `static` items, which introduces some confusion as\n /// to which one should be used at which times. To put it simply, constants are inlined wherever\n /// they're used, making using them identical to simply replacing the name of the const with its\n /// value. Static variables on the other hand point to a single location in memory, which all\n@@ -89,7 +88,6 @@ mod as_keyword { }\n ///\n /// For more detail on `const`, see the [Rust Book] or the [Reference]\n ///\n-/// [`static`]: keyword.static.html\n /// [pointer]: primitive.pointer.html\n /// [Rust Book]:\n /// https://doc.rust-lang.org/stable/book/2018-edition/ch03-01-variables-and-mutability.html#differences-between-variables-and-constants\n@@ -114,7 +112,7 @@ mod const_keyword { }\n /// The `as` keyword can be used to change what the crate is referred to as in your project. If a\n /// crate name includes a dash, it is implicitly imported with the dashes replaced by underscores.\n ///\n-/// `crate` is also used as in conjunction with [`pub`] to signify that the item it's attached to\n+/// `crate` is also used as in conjunction with `pub` to signify that the item it's attached to\n /// is public only to other members of the same crate it's in.\n ///\n /// ```rust\n@@ -127,7 +125,6 @@ mod const_keyword { }\n /// ```\n ///\n /// [Reference]: https://doc.rust-lang.org/reference/items/extern-crates.html\n-/// [`pub`]: keyword.pub.html\n mod crate_keyword { }\n \n #[doc(keyword = \"enum\")]\n@@ -263,8 +260,6 @@ mod extern_keyword { }\n /// }\n /// ```\n ///\n-/// See docs on [`impl`] and [`self`] for relevant details on those.\n-///\n /// In addition to presenting fixed types in the form of `fn name(arg: type, ..) -> return_type`,\n /// functions can also declare a list of type parameters along with trait bounds that they fall\n /// into.\n@@ -281,20 +276,17 @@ mod extern_keyword { }\n /// }\n /// ```\n ///\n-/// Declaring trait bounds in the angle brackets is functionally identical to using a [`where`]\n+/// Declaring trait bounds in the angle brackets is functionally identical to using a `where`\n /// clause. It's up to the programmer to decide which works better in each situation, but `where`\n /// tends to be better when things get longer than one line.\n ///\n-/// Along with being made public via [`pub`], `fn` can also have an [`extern`] added for use in\n+/// Along with being made public via `pub`, `fn` can also have an [`extern`] added for use in\n /// FFI.\n ///\n /// For more information on the various types of functions and how they're used, consult the [Rust\n /// book] or the [Reference].\n ///\n /// [`impl`]: keyword.impl.html\n-/// [`self`]: keyword.self.html\n-/// [`where`]: keyword.where.html\n-/// [`pub`]: keyword.pub.html\n /// [`extern`]: keyword.extern.html\n /// [Rust book]: https://doc.rust-lang.org/book/second-edition/ch03-03-how-functions-work.html\n /// [Reference]: https://doc.rust-lang.org/reference/items/functions.html\n@@ -307,7 +299,7 @@ mod fn_keyword { }\n /// `for` is primarily used in for-in-loops, but it has a few other pieces of syntactic uses such as\n /// `impl Trait for Type` (see [`impl`] for more info on that). for-in-loops, or to be more\n /// precise, iterator loops, are a simple syntactic sugar over an exceedingly common practice\n-/// within Rust, which is to loop over an iterator until that iterator returns None (or [`break`]\n+/// within Rust, which is to loop over an iterator until that iterator returns None (or `break`\n /// is called).\n ///\n /// ```rust\n@@ -365,7 +357,6 @@ mod fn_keyword { }\n /// For more information on for-loops, see the [Rust book] or the [Reference].\n ///\n /// [`impl`]: keyword.impl.html\n-/// [`break`]: keyword.break.html\n /// [`IntoIterator`]: iter/trait.IntoIterator.html\n /// [Rust book]:\n /// https://doc.rust-lang.org/book/2018-edition/ch03-05-control-flow.html#looping-through-a-collection-with-for\n@@ -402,7 +393,7 @@ mod for_keyword { }\n /// thing you'd see in many languages, with an optional `else` block. Second uses `if` as an\n /// expression, which is only possible if all branches return the same type. An `if` expression can\n /// be used everywhere you'd expect. The third kind of `if` block is an `if let` block, which\n-/// behaves similarly to using a [`match`] expression:\n+/// behaves similarly to using a `match` expression:\n ///\n /// ```rust\n /// if let Some(x) = Some(123) {\n@@ -423,8 +414,6 @@ mod for_keyword { }\n /// }\n /// ```\n ///\n-/// See [`let`] for more information on pattern bindings.\n-///\n /// Each kind of `if` expression can be mixed and matched as needed.\n ///\n /// ```rust\n@@ -444,8 +433,6 @@ mod for_keyword { }\n ///\n /// For more information on `if` expressions, see the [Rust book] or the [Reference].\n ///\n-/// [`match`]: keyword.match.html\n-/// [`let`]: keyword.let.html\n /// [Rust book]:\n /// https://doc.rust-lang.org/stable/book/2018-edition/ch03-05-control-flow.html#if-expressions\n /// [Reference]: https://doc.rust-lang.org/reference/expressions/if-expr.html"}]}