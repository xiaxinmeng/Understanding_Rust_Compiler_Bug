{"sha": "9acc3331e187d329d29a70c788c44e25a79edf45", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhY2MzMzMxZTE4N2QzMjlkMjlhNzBjNzg4YzQ0ZTI1YTc5ZWRmNDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-04T06:59:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-04T06:59:29Z"}, "message": "Auto merge of #45755 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\n- Successful merges: #45548, #45610, #45639, #45669, #45681, #45718, #45722, #45739, #45746\n- Failed merges:", "tree": {"sha": "edc666d4c7ea78ab757aa096965f361a4ea1cbae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edc666d4c7ea78ab757aa096965f361a4ea1cbae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9acc3331e187d329d29a70c788c44e25a79edf45", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9acc3331e187d329d29a70c788c44e25a79edf45", "html_url": "https://github.com/rust-lang/rust/commit/9acc3331e187d329d29a70c788c44e25a79edf45", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9acc3331e187d329d29a70c788c44e25a79edf45/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4541525d5aa2cbf9c15e89cde513792e22a0318", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4541525d5aa2cbf9c15e89cde513792e22a0318", "html_url": "https://github.com/rust-lang/rust/commit/a4541525d5aa2cbf9c15e89cde513792e22a0318"}, {"sha": "e3b25a59421d471d3c198bdbed60c8ba60e62376", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3b25a59421d471d3c198bdbed60c8ba60e62376", "html_url": "https://github.com/rust-lang/rust/commit/e3b25a59421d471d3c198bdbed60c8ba60e62376"}], "stats": {"total": 108, "additions": 98, "deletions": 10}, "files": [{"sha": "7175fed5410bace13bc25fe55caa7d2e65106079", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=9acc3331e187d329d29a70c788c44e25a79edf45", "patch": "@@ -415,7 +415,8 @@ impl Step for Clippy {\n     const ONLY_HOSTS: bool = true;\n \n     fn should_run(run: ShouldRun) -> ShouldRun {\n-        run.path(\"src/tools/clippy\")\n+        let builder = run.builder;\n+        run.path(\"src/tools/clippy\").default_condition(builder.build.config.extended)\n     }\n \n     fn make_run(run: RunConfig) {"}, {"sha": "dbf1fb1367dda257ecb88aa7118f0be03f1b0f80", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=9acc3331e187d329d29a70c788c44e25a79edf45", "patch": "@@ -114,7 +114,7 @@ impl<T, A: Alloc> RawVec<T, A> {\n impl<T> RawVec<T, Heap> {\n     /// Creates the biggest possible RawVec (on the system heap)\n     /// without allocating. If T has positive size, then this makes a\n-    /// RawVec with capacity 0. If T has 0 size, then it it makes a\n+    /// RawVec with capacity 0. If T has 0 size, then it makes a\n     /// RawVec with capacity `usize::MAX`. Useful for implementing\n     /// delayed allocation.\n     pub fn new() -> Self {"}, {"sha": "80c48c7b28efd9dea8f25df881c2f699b7720497", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=9acc3331e187d329d29a70c788c44e25a79edf45", "patch": "@@ -18,7 +18,7 @@\n /// Implementing `Deref` for smart pointers makes accessing the data behind them\n /// convenient, which is why they implement `Deref`. On the other hand, the\n /// rules regarding `Deref` and [`DerefMut`] were designed specifically to\n-/// accomodate smart pointers. Because of this, **`Deref` should only be\n+/// accommodate smart pointers. Because of this, **`Deref` should only be\n /// implemented for smart pointers** to avoid confusion.\n ///\n /// For similar reasons, **this trait should never fail**. Failure during\n@@ -103,7 +103,7 @@ impl<'a, T: ?Sized> Deref for &'a mut T {\n /// Implementing `DerefMut` for smart pointers makes mutating the data behind\n /// them convenient, which is why they implement `DerefMut`. On the other hand,\n /// the rules regarding [`Deref`] and `DerefMut` were designed specifically to\n-/// accomodate smart pointers. Because of this, **`DerefMut` should only be\n+/// accommodate smart pointers. Because of this, **`DerefMut` should only be\n /// implemented for smart pointers** to avoid confusion.\n ///\n /// For similar reasons, **this trait should never fail**. Failure during"}, {"sha": "cd3dd9ce1399e2e2f604549b425f8be0df078a2e", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=9acc3331e187d329d29a70c788c44e25a79edf45", "patch": "@@ -927,6 +927,12 @@ impl<T> AtomicPtr<T> {\n     }\n }\n \n+#[stable(feature = \"atomic_from\", since = \"1.23.0\")]\n+impl<T> From<*mut T> for AtomicPtr<T> {\n+    #[inline]\n+    fn from(p: *mut T) -> Self { Self::new(p) }\n+}\n+\n #[cfg(target_has_atomic = \"ptr\")]\n macro_rules! atomic_int {\n     ($stable:meta, $const_unstable:meta,\n@@ -967,6 +973,12 @@ macro_rules! atomic_int {\n             }\n         }\n \n+        #[stable(feature = \"atomic_from\", since = \"1.23.0\")]\n+        impl From<$int_type> for $atomic_type {\n+            #[inline]\n+            fn from(v: $int_type) -> Self { Self::new(v) }\n+        }\n+\n         #[$stable_debug]\n         impl fmt::Debug for $atomic_type {\n             fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {"}, {"sha": "d239b79d4ba7a2d13a8df296ea7936ee8a1c2427", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=9acc3331e187d329d29a70c788c44e25a79edf45", "patch": "@@ -3,6 +3,9 @@ authors = [\"The Rust Project Developers\"]\n name = \"std\"\n version = \"0.0.0\"\n build = \"build.rs\"\n+license = \"MIT/Apache-2.0\"\n+repository = \"https://github.com/rust-lang/rust.git\"\n+description = \"The Rust Standard Library\"\n \n [lib]\n name = \"std\""}, {"sha": "6e0cccff0019317419d934cb9f450c6c796c8309", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=9acc3331e187d329d29a70c788c44e25a79edf45", "patch": "@@ -1228,7 +1228,7 @@ compat_fn! {\n     }\n }\n \n-#[cfg(target_env = \"gnu\")]\n+#[cfg(all(target_env = \"gnu\", feature = \"backtrace\"))]\n mod gnu {\n     use super::*;\n \n@@ -1256,5 +1256,5 @@ mod gnu {\n     }\n }\n \n-#[cfg(target_env = \"gnu\")]\n+#[cfg(all(target_env = \"gnu\", feature = \"backtrace\"))]\n pub use self::gnu::*;"}, {"sha": "424f46840ad14ec5717cea439e0932bc998ced42", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9acc3331e187d329d29a70c788c44e25a79edf45", "patch": "@@ -3154,7 +3154,13 @@ impl<'a> Parser<'a> {\n         // Parse: `for <src_pat> in <src_expr> <src_loop_block>`\n \n         let pat = self.parse_pat()?;\n-        self.expect_keyword(keywords::In)?;\n+        if !self.eat_keyword(keywords::In) {\n+            let in_span = self.prev_span.between(self.span);\n+            let mut err = self.sess.span_diagnostic\n+                .struct_span_err(in_span, \"missing `in` in `for` loop\");\n+            err.span_suggestion_short(in_span, \"try adding `in` here\", \" in \".into());\n+            err.emit();\n+        }\n         let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n         let (iattrs, loop_block) = self.parse_inner_attrs_and_block()?;\n         attrs.extend(iattrs);"}, {"sha": "b7112885e888ba0b694b9cca7e33d085c5c7d37c", "filename": "src/test/rustdoc/method-list.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Ftest%2Frustdoc%2Fmethod-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Ftest%2Frustdoc%2Fmethod-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmethod-list.rs?ref=9acc3331e187d329d29a70c788c44e25a79edf45", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/struct.Foo.html\n+// @has - '//*[@class=\"sidebar-links\"]/a' 'super_long_name'\n+// @has - '//*[@class=\"sidebar-links\"]/a' 'Disp'\n+pub struct Foo(usize);\n+\n+impl Foo {\n+    pub fn super_long_name() {}\n+}\n+\n+pub trait Disp {\n+    fn disp_trait_method();\n+}\n+\n+impl Disp for Foo {\n+    fn disp_trait_method() {}\n+}"}, {"sha": "56ee225105f8922793c92443d0421733d2372e44", "filename": "src/test/ui/issue-40782.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Ftest%2Fui%2Fissue-40782.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Ftest%2Fui%2Fissue-40782.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40782.rs?ref=9acc3331e187d329d29a70c788c44e25a79edf45", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    for i 0..2 {\n+    }\n+}\n+"}, {"sha": "0d49eebbdbfc94b130a664d4401355b1d59118cc", "filename": "src/test/ui/issue-40782.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Ftest%2Fui%2Fissue-40782.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Ftest%2Fui%2Fissue-40782.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-40782.stderr?ref=9acc3331e187d329d29a70c788c44e25a79edf45", "patch": "@@ -0,0 +1,8 @@\n+error: missing `in` in `for` loop\n+  --> $DIR/issue-40782.rs:12:10\n+   |\n+12 |     for i 0..2 {\n+   |          ^ help: try adding `in` here\n+\n+error: aborting due to previous error\n+"}, {"sha": "42e52ceea690362c8f755b5e8d601ae8519d57de", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9acc3331e187d329d29a70c788c44e25a79edf45/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=9acc3331e187d329d29a70c788c44e25a79edf45", "patch": "@@ -2286,6 +2286,10 @@ actual:\\n\\\n         output_file.push(test_name);\n         debug!(\"comparing the contests of: {:?}\", output_file);\n         debug!(\"with: {:?}\", expected_content);\n+        if !output_file.exists() {\n+            panic!(\"Output file `{}` from test does not exist\",\n+                   output_file.into_os_string().to_string_lossy());\n+        }\n         self.check_mir_test_timestamp(test_name, &output_file);\n \n         let mut dumped_file = fs::File::open(output_file.clone()).unwrap();\n@@ -2334,13 +2338,22 @@ actual:\\n\\\n \n         // We expect each non-empty line to appear consecutively, non-consecutive lines\n         // must be separated by at least one Elision\n+        let mut start_block_line = None;\n         while let Some(dumped_line) = dumped_lines.next() {\n             match expected_lines.next() {\n-                Some(&ExpectedLine::Text(expected_line)) =>\n+                Some(&ExpectedLine::Text(expected_line)) => {\n+                    let normalized_expected_line = normalize_mir_line(expected_line);\n+                    if normalized_expected_line.contains(\":{\") {\n+                        start_block_line = Some(expected_line);\n+                    }\n+\n                     if !compare(expected_line, dumped_line) {\n+                        error!(\"{:?}\", start_block_line);\n                         error(expected_line,\n-                              format!(\"Mismatch in lines\\nExpected Line: {:?}\", dumped_line));\n-                    },\n+                              format!(\"Mismatch in lines\\nCurrnt block: {}\\nExpected Line: {:?}\",\n+                                      start_block_line.unwrap_or(\"None\"), dumped_line));\n+                    }\n+                },\n                 Some(&ExpectedLine::Elision) => {\n                     // skip any number of elisions in a row.\n                     while let Some(&&ExpectedLine::Elision) = expected_lines.peek() {"}]}