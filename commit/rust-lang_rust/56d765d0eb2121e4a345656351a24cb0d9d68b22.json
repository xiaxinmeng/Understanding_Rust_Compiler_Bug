{"sha": "56d765d0eb2121e4a345656351a24cb0d9d68b22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2ZDc2NWQwZWIyMTIxZTRhMzQ1NjU2MzUxYTI0Y2IwZDlkNjhiMjI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-06-09T18:33:28Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "arielb1@mail.tau.ac.il", "date": "2015-06-18T17:51:43Z"}, "message": "Simplify and type_known_to_meet_builtin_bound and make it more correct when\nassociated types are involved.", "tree": {"sha": "608ebb6ae288a8b704a3c1df70d06432267f7b9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/608ebb6ae288a8b704a3c1df70d06432267f7b9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/56d765d0eb2121e4a345656351a24cb0d9d68b22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/56d765d0eb2121e4a345656351a24cb0d9d68b22", "html_url": "https://github.com/rust-lang/rust/commit/56d765d0eb2121e4a345656351a24cb0d9d68b22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/56d765d0eb2121e4a345656351a24cb0d9d68b22/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": null, "parents": [{"sha": "7a13b93b00af4e8f8b3baae2926e9877f5f6403d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a13b93b00af4e8f8b3baae2926e9877f5f6403d", "html_url": "https://github.com/rust-lang/rust/commit/7a13b93b00af4e8f8b3baae2926e9877f5f6403d"}], "stats": {"total": 121, "additions": 62, "deletions": 59}, "files": [{"sha": "fb6bac9ea06ae03d913d712a3d6d247d45e9fd82", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 16, "deletions": 59, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/56d765d0eb2121e4a345656351a24cb0d9d68b22/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d765d0eb2121e4a345656351a24cb0d9d68b22/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=56d765d0eb2121e4a345656351a24cb0d9d68b22", "patch": "@@ -304,12 +304,12 @@ pub fn predicates_for_generics<'tcx>(tcx: &ty::ctxt<'tcx>,\n /// `bound` or is not known to meet bound (note that this is\n /// conservative towards *no impl*, which is the opposite of the\n /// `evaluate` methods).\n-pub fn evaluate_builtin_bound<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n-                                       typer: &ty::ClosureTyper<'tcx>,\n-                                       ty: Ty<'tcx>,\n-                                       bound: ty::BuiltinBound,\n-                                       span: Span)\n-                                       -> SelectionResult<'tcx, ()>\n+pub fn type_known_to_meet_builtin_bound<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n+                                                 typer: &ty::ClosureTyper<'tcx>,\n+                                                 ty: Ty<'tcx>,\n+                                                 bound: ty::BuiltinBound,\n+                                                 span: Span)\n+                                                 -> bool\n {\n     debug!(\"type_known_to_meet_builtin_bound(ty={}, bound={:?})\",\n            ty.repr(infcx.tcx),\n@@ -327,61 +327,18 @@ pub fn evaluate_builtin_bound<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n     // Note: we only assume something is `Copy` if we can\n     // *definitively* show that it implements `Copy`. Otherwise,\n     // assume it is move; linear is always ok.\n-    let result = match fulfill_cx.select_all_or_error(infcx, typer) {\n-        Ok(()) => Ok(Some(())), // Success, we know it implements Copy.\n-        Err(errors) => {\n-            // If there were any hard errors, propagate an arbitrary\n-            // one of those. If no hard errors at all, report\n-            // ambiguity.\n-            let sel_error =\n-                errors.iter()\n-                      .filter_map(|err| {\n-                          match err.code {\n-                              CodeAmbiguity => None,\n-                              CodeSelectionError(ref e) => Some(e.clone()),\n-                              CodeProjectionError(_) => {\n-                                  infcx.tcx.sess.span_bug(\n-                                      span,\n-                                      \"projection error while selecting?\")\n-                              }\n-                          }\n-                      })\n-                      .next();\n-            match sel_error {\n-                None => { Ok(None) }\n-                Some(e) => { Err(e) }\n-            }\n-        }\n-    };\n-\n-    debug!(\"type_known_to_meet_builtin_bound: ty={} bound={:?} result={:?}\",\n-           ty.repr(infcx.tcx),\n-           bound,\n-           result);\n-\n-    result\n-}\n-\n-pub fn type_known_to_meet_builtin_bound<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n-                                                 typer: &ty::ClosureTyper<'tcx>,\n-                                                 ty: Ty<'tcx>,\n-                                                 bound: ty::BuiltinBound,\n-                                                 span: Span)\n-                                                 -> bool\n-{\n-    match evaluate_builtin_bound(infcx, typer, ty, bound, span) {\n-        Ok(Some(())) => {\n-            // definitely impl'd\n+    match fulfill_cx.select_all_or_error(infcx, typer) {\n+        Ok(()) => {\n+            debug!(\"type_known_to_meet_builtin_bound: ty={} bound={:?} success\",\n+                   ty.repr(infcx.tcx),\n+                   bound);\n             true\n         }\n-        Ok(None) => {\n-            // ambiguous: if coherence check was successful, shouldn't\n-            // happen, but we might have reported an error and been\n-            // soldering on, so just treat this like not implemented\n-            false\n-        }\n-        Err(_) => {\n-            // errors: not implemented.\n+        Err(e) => {\n+            debug!(\"type_known_to_meet_builtin_bound: ty={} bound={:?} errors={}\",\n+                   ty.repr(infcx.tcx),\n+                   bound,\n+                   e.repr(infcx.tcx));\n             false\n         }\n     }"}, {"sha": "477c3237f84eec9fdcea09463e39b2eb89b15464", "filename": "src/test/compile-fail/issue-25700.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/56d765d0eb2121e4a345656351a24cb0d9d68b22/src%2Ftest%2Fcompile-fail%2Fissue-25700.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d765d0eb2121e4a345656351a24cb0d9d68b22/src%2Ftest%2Fcompile-fail%2Fissue-25700.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-25700.rs?ref=56d765d0eb2121e4a345656351a24cb0d9d68b22", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S<T: 'static>(Option<&'static T>);\n+\n+trait Tr { type Out; }\n+impl<T> Tr for T { type Out = T; }\n+\n+impl<T: 'static> Copy for S<T> where S<T>: Tr<Out=T> {}\n+impl<T: 'static> Clone for S<T> where S<T>: Tr<Out=T> {\n+    fn clone(&self) -> Self { *self }\n+}\n+fn main() {\n+    let t = S::<()>(None);\n+    drop(t);\n+    drop(t); //~ ERROR use of moved value\n+}"}, {"sha": "57f5b84b28537f52e88bb8aa86542a17e71a9381", "filename": "src/test/run-pass/issue-25700-1.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/56d765d0eb2121e4a345656351a24cb0d9d68b22/src%2Ftest%2Frun-pass%2Fissue-25700-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/56d765d0eb2121e4a345656351a24cb0d9d68b22/src%2Ftest%2Frun-pass%2Fissue-25700-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-25700-1.rs?ref=56d765d0eb2121e4a345656351a24cb0d9d68b22", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct S<T: 'static>(Option<&'static T>);\n+\n+trait Tr { type Out; }\n+impl<T> Tr for T { type Out = T; }\n+\n+impl<T: 'static> Copy for S<T> where S<T>: Tr<Out=T> {}\n+impl<T: 'static> Clone for S<T> where S<T>: Tr<Out=T> {\n+    fn clone(&self) -> Self { *self }\n+}\n+fn main() {\n+    S::<()>(None);\n+}"}]}