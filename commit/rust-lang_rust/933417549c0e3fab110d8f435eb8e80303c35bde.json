{"sha": "933417549c0e3fab110d8f435eb8e80303c35bde", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMzQxNzU0OWMwZTNmYWIxMTBkOGY0MzVlYjhlODAzMDNjMzViZGU=", "commit": {"author": {"name": "Sebastian Humenda", "email": "shumenda@gmx.de", "date": "2018-03-10T14:00:26Z"}, "committer": {"name": "Sebastian Humenda", "email": "shumenda@gmx.de", "date": "2018-03-10T14:00:26Z"}, "message": "remove linker arguments from L4Re target\n\nThese change from release to release and are impossible to get right,\nsince they are generated by Make magic.", "tree": {"sha": "0a1032ee955f450ffccddf63d9d54563b419b47f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a1032ee955f450ffccddf63d9d54563b419b47f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/933417549c0e3fab110d8f435eb8e80303c35bde", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/933417549c0e3fab110d8f435eb8e80303c35bde", "html_url": "https://github.com/rust-lang/rust/commit/933417549c0e3fab110d8f435eb8e80303c35bde", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/933417549c0e3fab110d8f435eb8e80303c35bde/comments", "author": {"login": "humenda", "id": 4473821, "node_id": "MDQ6VXNlcjQ0NzM4MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4473821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humenda", "html_url": "https://github.com/humenda", "followers_url": "https://api.github.com/users/humenda/followers", "following_url": "https://api.github.com/users/humenda/following{/other_user}", "gists_url": "https://api.github.com/users/humenda/gists{/gist_id}", "starred_url": "https://api.github.com/users/humenda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humenda/subscriptions", "organizations_url": "https://api.github.com/users/humenda/orgs", "repos_url": "https://api.github.com/users/humenda/repos", "events_url": "https://api.github.com/users/humenda/events{/privacy}", "received_events_url": "https://api.github.com/users/humenda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "humenda", "id": 4473821, "node_id": "MDQ6VXNlcjQ0NzM4MjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4473821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/humenda", "html_url": "https://github.com/humenda", "followers_url": "https://api.github.com/users/humenda/followers", "following_url": "https://api.github.com/users/humenda/following{/other_user}", "gists_url": "https://api.github.com/users/humenda/gists{/gist_id}", "starred_url": "https://api.github.com/users/humenda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/humenda/subscriptions", "organizations_url": "https://api.github.com/users/humenda/orgs", "repos_url": "https://api.github.com/users/humenda/repos", "events_url": "https://api.github.com/users/humenda/events{/privacy}", "received_events_url": "https://api.github.com/users/humenda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87344aa59af2ebb868253228e2b558d701573dff", "url": "https://api.github.com/repos/rust-lang/rust/commits/87344aa59af2ebb868253228e2b558d701573dff", "html_url": "https://github.com/rust-lang/rust/commit/87344aa59af2ebb868253228e2b558d701573dff"}], "stats": {"total": 73, "additions": 17, "deletions": 56}, "files": [{"sha": "bff91e8f9952af30dd49839a90289c066286edc7", "filename": "src/librustc_back/target/l4re_base.rs", "status": "modified", "additions": 16, "deletions": 55, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/933417549c0e3fab110d8f435eb8e80303c35bde/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933417549c0e3fab110d8f435eb8e80303c35bde/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fl4re_base.rs?ref=933417549c0e3fab110d8f435eb8e80303c35bde", "patch": "@@ -8,74 +8,35 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use PanicStrategy;\n use LinkerFlavor;\n+use PanicStrategy;\n use target::{LinkArgs, TargetOptions};\n use std::default::Default;\n-use std::env;\n-use std::process::Command;\n+//use std::process::Command;\n \n // Use GCC to locate code for crt* libraries from the host, not from L4Re. Note\n // that a few files also come from L4Re, for these, the function shouldn't be\n // used. This uses GCC for the location of the file, but GCC is required for L4Re anyway.\n-fn get_path_or(filename: &str) -> String {\n-    let child = Command::new(\"gcc\")\n-        .arg(format!(\"-print-file-name={}\", filename)).output()\n-        .expect(\"Failed to execute GCC\");\n-    String::from_utf8(child.stdout)\n-        .expect(\"Couldn't read path from GCC\").trim().into()\n-}\n+//fn get_path_or(filename: &str) -> String {\n+//    let child = Command::new(\"gcc\")\n+//        .arg(format!(\"-print-file-name={}\", filename)).output()\n+//        .expect(\"Failed to execute GCC\");\n+//    String::from_utf8(child.stdout)\n+//        .expect(\"Couldn't read path from GCC\").trim().into()\n+//}\n \n-pub fn opts() -> Result<TargetOptions, String> {\n-    let l4re_lib_path = env::var_os(\"L4RE_LIBDIR\").ok_or(\"Unable to find L4Re \\\n-        library directory: L4RE_LIBDIR not set.\")?.into_string().unwrap();\n-    let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(LinkerFlavor::Ld, vec![\n-        format!(\"-T{}/main_stat.ld\", l4re_lib_path),\n-        \"--defsym=__executable_start=0x01000000\".to_string(),\n-        \"--defsym=__L4_KIP_ADDR__=0x6ffff000\".to_string(),\n-        format!(\"{}/crt1.o\", l4re_lib_path),\n-        format!(\"{}/crti.o\", l4re_lib_path),\n-        get_path_or(\"crtbeginT.o\"),\n-    ]);\n-    let mut post_link_args = LinkArgs::new();\n-    post_link_args.insert(LinkerFlavor::Ld, vec![\n-        format!(\"{}/l4f/libpthread.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_be_sig.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_be_sig_noop.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_be_socket_noop.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_be_fs_noop.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_be_sem_noop.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libl4re-vfs.o.a\", l4re_lib_path),\n-        format!(\"{}/l4f/lib4re.a\", l4re_lib_path),\n-        format!(\"{}/l4f/lib4re-util.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_support_misc.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libsupc++.a\", l4re_lib_path),\n-        format!(\"{}/l4f/lib4shmc.a\", l4re_lib_path),\n-        format!(\"{}/l4f/lib4re-c.a\", l4re_lib_path),\n-        format!(\"{}/l4f/lib4re-c-util.a\", l4re_lib_path),\n-        get_path_or(\"libgcc_eh.a\"),\n-        format!(\"{}/l4f/libdl.a\", l4re_lib_path),\n-        \"--start-group\".to_string(),\n-        format!(\"{}/l4f/libl4util.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_be_l4re.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libuc_c.a\", l4re_lib_path),\n-        format!(\"{}/l4f/libc_be_l4refile.a\", l4re_lib_path),\n-        \"--end-group\".to_string(),\n-        format!(\"{}/l4f/libl4sys.a\", l4re_lib_path),\n-        \"-gc-sections\".to_string(),\n-        get_path_or(\"crtend.o\"),\n-        format!(\"{}/crtn.o\", l4re_lib_path),\n-    ]);\n+pub fn opts() -> TargetOptions {\n+    let mut args = LinkArgs::new();\n+    args.insert(LinkerFlavor::Gcc, vec![]);\n \n-    Ok(TargetOptions {\n+    TargetOptions {\n         executables: true,\n         has_elf_tls: false,\n         exe_allocation_crate: None,\n         panic_strategy: PanicStrategy::Abort,\n-        pre_link_args,\n-        post_link_args,\n+        linker: \"ld\".to_string(),\n+        pre_link_args: args,\n         target_family: Some(\"unix\".to_string()),\n         .. Default::default()\n-    })\n+    }\n }"}, {"sha": "821a77f52f511b203fb6ead8cc2fb5586c47e949", "filename": "src/librustc_back/target/x86_64_unknown_l4re_uclibc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/933417549c0e3fab110d8f435eb8e80303c35bde/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_l4re_uclibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/933417549c0e3fab110d8f435eb8e80303c35bde/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_l4re_uclibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_l4re_uclibc.rs?ref=933417549c0e3fab110d8f435eb8e80303c35bde", "patch": "@@ -12,7 +12,7 @@ use LinkerFlavor;\n use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n-    let mut base = super::l4re_base::opts()?;\n+    let mut base = super::l4re_base::opts();\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n "}]}