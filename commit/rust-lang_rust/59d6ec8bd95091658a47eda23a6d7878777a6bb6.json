{"sha": "59d6ec8bd95091658a47eda23a6d7878777a6bb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ZDZlYzhiZDk1MDkxNjU4YTQ3ZWRhMjNhNmQ3ODc4Nzc3YTZiYjY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-27T06:38:35Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-27T06:43:08Z"}, "message": "rustdoc: Refactor some of the map code", "tree": {"sha": "f5dc58be889f28c7547b89adf51ac02df2d7e289", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5dc58be889f28c7547b89adf51ac02df2d7e289"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59d6ec8bd95091658a47eda23a6d7878777a6bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59d6ec8bd95091658a47eda23a6d7878777a6bb6", "html_url": "https://github.com/rust-lang/rust/commit/59d6ec8bd95091658a47eda23a6d7878777a6bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59d6ec8bd95091658a47eda23a6d7878777a6bb6/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4675f860849c5d064d1279b2eff324a271024254", "url": "https://api.github.com/repos/rust-lang/rust/commits/4675f860849c5d064d1279b2eff324a271024254", "html_url": "https://github.com/rust-lang/rust/commit/4675f860849c5d064d1279b2eff324a271024254"}], "stats": {"total": 61, "additions": 43, "deletions": 18}, "files": [{"sha": "fe1225ffa593c8ad2a23c39d387d07c1d9158d72", "filename": "src/rustdoc/fold.rs", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/59d6ec8bd95091658a47eda23a6d7878777a6bb6/src%2Frustdoc%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d6ec8bd95091658a47eda23a6d7878777a6bb6/src%2Frustdoc%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ffold.rs?ref=59d6ec8bd95091658a47eda23a6d7878777a6bb6", "patch": "@@ -79,6 +79,23 @@ fn mk_fold<T:copy>(\n     })\n }\n \n+fn default_any_fold<T:send>(ctxt: T) -> fold<T> {\n+    mk_fold(\n+        ctxt,\n+        {|f, d| default_seq_fold_crate(f, d)},\n+        {|f, d| default_seq_fold_item(f, d)},\n+        {|f, d| default_any_fold_mod(f, d)},\n+        {|f, d| default_seq_fold_nmod(f, d)},\n+        {|f, d| default_seq_fold_fn(f, d)},\n+        {|f, d| default_seq_fold_const(f, d)},\n+        {|f, d| default_seq_fold_enum(f, d)},\n+        {|f, d| default_seq_fold_res(f, d)},\n+        {|f, d| default_seq_fold_iface(f, d)},\n+        {|f, d| default_seq_fold_impl(f, d)},\n+        {|f, d| default_seq_fold_type(f, d)}\n+    )\n+}\n+\n fn default_seq_fold<T:copy>(ctxt: T) -> fold<T> {\n     mk_fold(\n         ctxt,\n@@ -113,12 +130,6 @@ fn default_par_fold<T:send>(ctxt: T) -> fold<T> {\n     )\n }\n \n-// Just a convenient wrapper to convert back and forth between\n-// parallel and sequential folds for perf testing\n-fn default_any_fold<T:send>(ctxt: T) -> fold<T> {\n-    default_seq_fold(ctxt)\n-}\n-\n fn default_seq_fold_crate<T>(\n     fold: fold<T>,\n     doc: doc::cratedoc\n@@ -135,27 +146,27 @@ fn default_seq_fold_item<T>(\n     doc\n }\n \n-fn default_seq_fold_mod<T>(\n+fn default_any_fold_mod<T:send>(\n     fold: fold<T>,\n     doc: doc::moddoc\n ) -> doc::moddoc {\n     {\n         item: fold.fold_item(fold, doc.item),\n-        items: vec::map(doc.items) {|itemtag|\n+        items: util::anymap(doc.items) {|itemtag|\n             fold_itemtag(fold, itemtag)\n         }\n         with doc\n     }\n }\n \n-fn default_seq_fold_nmod<T>(\n+fn default_seq_fold_mod<T>(\n     fold: fold<T>,\n-    doc: doc::nmoddoc\n-) -> doc::nmoddoc {\n+    doc: doc::moddoc\n+) -> doc::moddoc {\n     {\n         item: fold.fold_item(fold, doc.item),\n-        fns: vec::map(doc.fns) {|fndoc|\n-            fold.fold_fn(fold, fndoc)\n+        items: util::seqmap(doc.items) {|itemtag|\n+            fold_itemtag(fold, itemtag)\n         }\n         with doc\n     }\n@@ -174,11 +185,17 @@ fn default_par_fold_mod<T:send>(\n     }\n }\n \n-fn default_any_fold_mod<T:send>(\n+fn default_seq_fold_nmod<T>(\n     fold: fold<T>,\n-    doc: doc::moddoc\n-) -> doc::moddoc {\n-    default_seq_fold_mod(fold, doc)\n+    doc: doc::nmoddoc\n+) -> doc::nmoddoc {\n+    {\n+        item: fold.fold_item(fold, doc.item),\n+        fns: vec::map(doc.fns) {|fndoc|\n+            fold.fold_fn(fold, fndoc)\n+        }\n+        with doc\n+    }\n }\n \n fn fold_itemtag<T>(fold: fold<T>, doc: doc::itemtag) -> doc::itemtag {"}, {"sha": "861dea83bc6fe404e2aa0e0c2ba4426c752227e1", "filename": "src/rustdoc/util.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/59d6ec8bd95091658a47eda23a6d7878777a6bb6/src%2Frustdoc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59d6ec8bd95091658a47eda23a6d7878777a6bb6/src%2Frustdoc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Futil.rs?ref=59d6ec8bd95091658a47eda23a6d7878777a6bb6", "patch": "@@ -1,4 +1,12 @@\n-export parmap;\n+export anymap, seqmap, parmap;\n+\n+fn anymap<T:send, U:send>(v: [T], f: fn(T) -> U) -> [U] {\n+    seqmap(v, f)\n+}\n+\n+fn seqmap<T, U>(v: [T], f: fn(T) -> U) -> [U] {\n+    vec::map(v, f)\n+}\n \n fn parmap<T:send, U:send>(v: [T], f: fn~(T) -> U) -> [U] unsafe {\n     let futures = vec::map(v) {|elt|"}]}