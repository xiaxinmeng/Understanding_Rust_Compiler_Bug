{"sha": "99e1b9cfa6891077509d183975d96a923775a26c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZTFiOWNmYTY4OTEwNzc1MDlkMTgzOTc1ZDk2YTkyMzc3NWEyNmM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-09-25T22:05:58Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-09-25T22:05:58Z"}, "message": "Move in-pass-function structs and impls outside functions.\n\nNow that each pass has its own module, there's not much of a reason to\nkeep these structs within the functions.", "tree": {"sha": "61e02ecad9d811417140a265164f11a62e89789e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61e02ecad9d811417140a265164f11a62e89789e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99e1b9cfa6891077509d183975d96a923775a26c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99e1b9cfa6891077509d183975d96a923775a26c", "html_url": "https://github.com/rust-lang/rust/commit/99e1b9cfa6891077509d183975d96a923775a26c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99e1b9cfa6891077509d183975d96a923775a26c/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd62c4c83d4b149353acb19b0cb501b682e04fdf", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd62c4c83d4b149353acb19b0cb501b682e04fdf", "html_url": "https://github.com/rust-lang/rust/commit/bd62c4c83d4b149353acb19b0cb501b682e04fdf"}], "stats": {"total": 142, "additions": 74, "deletions": 68}, "files": [{"sha": "c034ef9326846c349b7761606918c72bd1fad35d", "filename": "src/librustdoc/passes/collapse_docs.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/99e1b9cfa6891077509d183975d96a923775a26c/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e1b9cfa6891077509d183975d96a923775a26c/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollapse_docs.rs?ref=99e1b9cfa6891077509d183975d96a923775a26c", "patch": "@@ -16,30 +16,32 @@ use fold;\n use fold::DocFolder;\n \n pub fn collapse_docs(krate: clean::Crate) -> plugins::PluginResult {\n-    struct Collapser;\n-    impl fold::DocFolder for Collapser {\n-        fn fold_item(&mut self, mut i: Item) -> Option<Item> {\n-            let mut docstr = String::new();\n-            for attr in &i.attrs {\n-                if let clean::NameValue(ref x, ref s) = *attr {\n-                    if \"doc\" == *x {\n-                        docstr.push_str(s);\n-                        docstr.push('\\n');\n-                    }\n+    let mut collapser = Collapser;\n+    let krate = collapser.fold_crate(krate);\n+    krate\n+}\n+\n+struct Collapser;\n+\n+impl fold::DocFolder for Collapser {\n+    fn fold_item(&mut self, mut i: Item) -> Option<Item> {\n+        let mut docstr = String::new();\n+        for attr in &i.attrs {\n+            if let clean::NameValue(ref x, ref s) = *attr {\n+                if \"doc\" == *x {\n+                    docstr.push_str(s);\n+                    docstr.push('\\n');\n                 }\n             }\n-            let mut a: Vec<clean::Attribute> = i.attrs.iter().filter(|&a| match a {\n-                &clean::NameValue(ref x, _) if \"doc\" == *x => false,\n-                _ => true\n-            }).cloned().collect();\n-            if !docstr.is_empty() {\n-                a.push(clean::NameValue(\"doc\".to_string(), docstr));\n-            }\n-            i.attrs = a;\n-            self.fold_item_recur(i)\n         }\n+        let mut a: Vec<clean::Attribute> = i.attrs.iter().filter(|&a| match a {\n+            &clean::NameValue(ref x, _) if \"doc\" == *x => false,\n+            _ => true\n+        }).cloned().collect();\n+        if !docstr.is_empty() {\n+            a.push(clean::NameValue(\"doc\".to_string(), docstr));\n+        }\n+        i.attrs = a;\n+        self.fold_item_recur(i)\n     }\n-    let mut collapser = Collapser;\n-    let krate = collapser.fold_crate(krate);\n-    krate\n }"}, {"sha": "927ccf917199978221c2488262aa97e838869e03", "filename": "src/librustdoc/passes/strip_hidden.rs", "status": "modified", "additions": 31, "deletions": 29, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/99e1b9cfa6891077509d183975d96a923775a26c/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e1b9cfa6891077509d183975d96a923775a26c/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstrip_hidden.rs?ref=99e1b9cfa6891077509d183975d96a923775a26c", "patch": "@@ -25,35 +25,6 @@ pub fn strip_hidden(krate: clean::Crate) -> plugins::PluginResult {\n \n     // strip all #[doc(hidden)] items\n     let krate = {\n-        struct Stripper<'a> {\n-            retained: &'a mut DefIdSet,\n-            update_retained: bool,\n-        }\n-        impl<'a> fold::DocFolder for Stripper<'a> {\n-            fn fold_item(&mut self, i: Item) -> Option<Item> {\n-                if i.attrs.list(\"doc\").has_word(\"hidden\") {\n-                    debug!(\"found one in strip_hidden; removing\");\n-                    // use a dedicated hidden item for given item type if any\n-                    match i.inner {\n-                        clean::StructFieldItem(..) | clean::ModuleItem(..) => {\n-                            // We need to recurse into stripped modules to\n-                            // strip things like impl methods but when doing so\n-                            // we must not add any items to the `retained` set.\n-                            let old = mem::replace(&mut self.update_retained, false);\n-                            let ret = Strip(self.fold_item_recur(i).unwrap()).fold();\n-                            self.update_retained = old;\n-                            return ret;\n-                        }\n-                        _ => return None,\n-                    }\n-                } else {\n-                    if self.update_retained {\n-                        self.retained.insert(i.def_id);\n-                    }\n-                }\n-                self.fold_item_recur(i)\n-            }\n-        }\n         let mut stripper = Stripper{ retained: &mut retained, update_retained: true };\n         stripper.fold_crate(krate)\n     };\n@@ -62,3 +33,34 @@ pub fn strip_hidden(krate: clean::Crate) -> plugins::PluginResult {\n     let mut stripper = ImplStripper { retained: &retained };\n     stripper.fold_crate(krate)\n }\n+\n+struct Stripper<'a> {\n+    retained: &'a mut DefIdSet,\n+    update_retained: bool,\n+}\n+\n+impl<'a> fold::DocFolder for Stripper<'a> {\n+    fn fold_item(&mut self, i: Item) -> Option<Item> {\n+        if i.attrs.list(\"doc\").has_word(\"hidden\") {\n+            debug!(\"found one in strip_hidden; removing\");\n+            // use a dedicated hidden item for given item type if any\n+            match i.inner {\n+                clean::StructFieldItem(..) | clean::ModuleItem(..) => {\n+                    // We need to recurse into stripped modules to\n+                    // strip things like impl methods but when doing so\n+                    // we must not add any items to the `retained` set.\n+                    let old = mem::replace(&mut self.update_retained, false);\n+                    let ret = Strip(self.fold_item_recur(i).unwrap()).fold();\n+                    self.update_retained = old;\n+                    return ret;\n+                }\n+                _ => return None,\n+            }\n+        } else {\n+            if self.update_retained {\n+                self.retained.insert(i.def_id);\n+            }\n+        }\n+        self.fold_item_recur(i)\n+    }\n+}"}, {"sha": "20640f3f88518f98d2c8f7269a9377a9f698559e", "filename": "src/librustdoc/passes/unindent_comments.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/99e1b9cfa6891077509d183975d96a923775a26c/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99e1b9cfa6891077509d183975d96a923775a26c/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments.rs?ref=99e1b9cfa6891077509d183975d96a923775a26c", "patch": "@@ -17,27 +17,29 @@ use plugins;\n use fold::{self, DocFolder};\n \n pub fn unindent_comments(krate: clean::Crate) -> plugins::PluginResult {\n-    struct CommentCleaner;\n-    impl fold::DocFolder for CommentCleaner {\n-        fn fold_item(&mut self, mut i: Item) -> Option<Item> {\n-            let mut avec: Vec<clean::Attribute> = Vec::new();\n-            for attr in &i.attrs {\n-                match attr {\n-                    &clean::NameValue(ref x, ref s)\n-                            if \"doc\" == *x => {\n-                        avec.push(clean::NameValue(\"doc\".to_string(),\n-                                                   unindent(s)))\n-                    }\n-                    x => avec.push(x.clone())\n+    let mut cleaner = CommentCleaner;\n+    let krate = cleaner.fold_crate(krate);\n+    krate\n+}\n+\n+struct CommentCleaner;\n+\n+impl fold::DocFolder for CommentCleaner {\n+    fn fold_item(&mut self, mut i: Item) -> Option<Item> {\n+        let mut avec: Vec<clean::Attribute> = Vec::new();\n+        for attr in &i.attrs {\n+            match attr {\n+                &clean::NameValue(ref x, ref s)\n+                        if \"doc\" == *x => {\n+                    avec.push(clean::NameValue(\"doc\".to_string(),\n+                                               unindent(s)))\n                 }\n+                x => avec.push(x.clone())\n             }\n-            i.attrs = avec;\n-            self.fold_item_recur(i)\n         }\n+        i.attrs = avec;\n+        self.fold_item_recur(i)\n     }\n-    let mut cleaner = CommentCleaner;\n-    let krate = cleaner.fold_crate(krate);\n-    krate\n }\n \n fn unindent(s: &str) -> String {"}]}