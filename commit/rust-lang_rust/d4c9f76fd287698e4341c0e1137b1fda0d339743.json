{"sha": "d4c9f76fd287698e4341c0e1137b1fda0d339743", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YzlmNzZmZDI4NzY5OGU0MzQxYzBlMTEzN2IxZmRhMGQzMzk3NDM=", "commit": {"author": {"name": "Michael Watzko", "email": "michael@watzko.de", "date": "2021-08-10T18:34:08Z"}, "committer": {"name": "Michael Watzko", "email": "michael@watzko.de", "date": "2021-08-10T18:34:08Z"}, "message": "Fix missed tests", "tree": {"sha": "399741049955d8ed62bc7f62557f537535231910", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/399741049955d8ed62bc7f62557f537535231910"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4c9f76fd287698e4341c0e1137b1fda0d339743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4c9f76fd287698e4341c0e1137b1fda0d339743", "html_url": "https://github.com/rust-lang/rust/commit/d4c9f76fd287698e4341c0e1137b1fda0d339743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4c9f76fd287698e4341c0e1137b1fda0d339743/comments", "author": {"login": "kellerkindt", "id": 1133787, "node_id": "MDQ6VXNlcjExMzM3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1133787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kellerkindt", "html_url": "https://github.com/kellerkindt", "followers_url": "https://api.github.com/users/kellerkindt/followers", "following_url": "https://api.github.com/users/kellerkindt/following{/other_user}", "gists_url": "https://api.github.com/users/kellerkindt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kellerkindt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kellerkindt/subscriptions", "organizations_url": "https://api.github.com/users/kellerkindt/orgs", "repos_url": "https://api.github.com/users/kellerkindt/repos", "events_url": "https://api.github.com/users/kellerkindt/events{/privacy}", "received_events_url": "https://api.github.com/users/kellerkindt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kellerkindt", "id": 1133787, "node_id": "MDQ6VXNlcjExMzM3ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1133787?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kellerkindt", "html_url": "https://github.com/kellerkindt", "followers_url": "https://api.github.com/users/kellerkindt/followers", "following_url": "https://api.github.com/users/kellerkindt/following{/other_user}", "gists_url": "https://api.github.com/users/kellerkindt/gists{/gist_id}", "starred_url": "https://api.github.com/users/kellerkindt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kellerkindt/subscriptions", "organizations_url": "https://api.github.com/users/kellerkindt/orgs", "repos_url": "https://api.github.com/users/kellerkindt/repos", "events_url": "https://api.github.com/users/kellerkindt/events{/privacy}", "received_events_url": "https://api.github.com/users/kellerkindt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdc90f9281251889156098f99ad9a42fc612fd77", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdc90f9281251889156098f99ad9a42fc612fd77", "html_url": "https://github.com/rust-lang/rust/commit/cdc90f9281251889156098f99ad9a42fc612fd77"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "6aaa5bf335a48ac489c679407f2532cdac39195f", "filename": "library/core/src/num/saturating.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d4c9f76fd287698e4341c0e1137b1fda0d339743/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4c9f76fd287698e4341c0e1137b1fda0d339743/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fsaturating.rs?ref=d4c9f76fd287698e4341c0e1137b1fda0d339743", "patch": "@@ -626,7 +626,7 @@ macro_rules! saturating_int_impl_signed {\n             /// #![feature(saturating_int_impl)]\n             /// use std::num::Saturating;\n             ///\n-            #[doc = concat!(\"let n = Saturating(\", stringify!($t), \"::MAX) / 4;\")]\n+            #[doc = concat!(\"let n = Saturating(\", stringify!($t), \"::MAX) / Saturating(4\", stringify!($t), \");\")]\n             ///\n             /// assert_eq!(n.leading_zeros(), 3);\n             /// ```\n@@ -636,12 +636,8 @@ macro_rules! saturating_int_impl_signed {\n                 self.0.leading_zeros()\n             }\n \n-            /// Computes the absolute value of `self`, saturating around at\n-            /// the boundary of the type.\n-            ///\n-            /// The only case where such saturating can occur is when one takes the absolute value of the negative\n-            /// minimal value for the type this is a positive value that is too large to represent in the type. In\n-            /// such a case, this function returns `MIN` itself.\n+            /// Saturating absolute value. Computes `self.abs()`, returning `MAX` if `self == MIN`\n+            /// instead of overflowing.\n             ///\n             /// # Examples\n             ///\n@@ -653,8 +649,9 @@ macro_rules! saturating_int_impl_signed {\n             ///\n             #[doc = concat!(\"assert_eq!(Saturating(100\", stringify!($t), \").abs(), Saturating(100));\")]\n             #[doc = concat!(\"assert_eq!(Saturating(-100\", stringify!($t), \").abs(), Saturating(100));\")]\n-            #[doc = concat!(\"assert_eq!(Saturating(\", stringify!($t), \"::MIN).abs(), Saturating(\", stringify!($t), \"::MIN));\")]\n-            /// assert_eq!(Saturating(-128i8).abs().0 as u8, 128u8);\n+            #[doc = concat!(\"assert_eq!(Saturating(\", stringify!($t), \"::MIN).abs(), Saturating((\", stringify!($t), \"::MIN + 1).abs()));\")]\n+            #[doc = concat!(\"assert_eq!(Saturating(\", stringify!($t), \"::MIN).abs(), Saturating(\", stringify!($t), \"::MIN.saturating_abs()));\")]\n+            /// assert_eq!(Saturating(-128i8).abs().0 as u8, i8::MAX as u8);\n             /// ```\n             #[inline]\n             #[unstable(feature = \"saturating_int_impl\", issue = \"87920\")]\n@@ -744,7 +741,7 @@ macro_rules! saturating_int_impl_unsigned {\n             /// #![feature(saturating_int_impl)]\n             /// use std::num::Saturating;\n             ///\n-            #[doc = concat!(\"let n = Saturating(\", stringify!($t), \"::MAX) / 4;\")]\n+            #[doc = concat!(\"let n = Saturating(\", stringify!($t), \"::MAX) / Saturating(4\", stringify!($t), \");\")]\n             ///\n             /// assert_eq!(n.leading_zeros(), 2);\n             /// ```"}]}