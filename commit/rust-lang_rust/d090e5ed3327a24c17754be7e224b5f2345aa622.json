{"sha": "d090e5ed3327a24c17754be7e224b5f2345aa622", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwOTBlNWVkMzMyN2EyNGMxNzc1NGJlN2UyMjRiNWYyMzQ1YWE2MjI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-23T23:25:39Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-07-23T23:25:39Z"}, "message": "Account for trailing closing angle brackets", "tree": {"sha": "c780c177db862f2b6395bcb496c0bc155cb79a91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c780c177db862f2b6395bcb496c0bc155cb79a91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d090e5ed3327a24c17754be7e224b5f2345aa622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d090e5ed3327a24c17754be7e224b5f2345aa622", "html_url": "https://github.com/rust-lang/rust/commit/d090e5ed3327a24c17754be7e224b5f2345aa622", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d090e5ed3327a24c17754be7e224b5f2345aa622/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20f4e5d9c24809031fd6631436f0a7a5b075fe40", "url": "https://api.github.com/repos/rust-lang/rust/commits/20f4e5d9c24809031fd6631436f0a7a5b075fe40", "html_url": "https://github.com/rust-lang/rust/commit/20f4e5d9c24809031fd6631436f0a7a5b075fe40"}], "stats": {"total": 98, "additions": 75, "deletions": 23}, "files": [{"sha": "609a0c961e97113b9fb09feec0dfccd113446c26", "filename": "src/librustc_parse/parser/diagnostics.rs", "status": "modified", "additions": 35, "deletions": 22, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/d090e5ed3327a24c17754be7e224b5f2345aa622/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d090e5ed3327a24c17754be7e224b5f2345aa622/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fdiagnostics.rs?ref=d090e5ed3327a24c17754be7e224b5f2345aa622", "patch": "@@ -1,9 +1,9 @@\n use super::ty::AllowPlus;\n use super::{BlockMode, Parser, PathStyle, SemiColonMode, SeqSep, TokenExpectType, TokenType};\n \n-use rustc_ast::ast::{self, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind, Item, Param};\n use rustc_ast::ast::{\n-    AngleBracketedArgs, AttrVec, ItemKind, Mutability, Pat, PatKind, PathSegment, QSelf, Ty, TyKind,\n+    self, AngleBracketedArgs, AttrVec, BinOpKind, BindingMode, BlockCheckMode, Expr, ExprKind,\n+    Item, ItemKind, Mutability, Param, Pat, PatKind, PathSegment, QSelf, Ty, TyKind,\n };\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Lit, LitKind, TokenKind};\n@@ -498,29 +498,42 @@ impl<'a> Parser<'a> {\n             self.bump();\n             let lo = self.token.span;\n             match self.parse_angle_args() {\n-                Ok(args) if self.token.kind == token::OpenDelim(token::Paren) => {\n-                    // Recover from bad turbofish: `foo.collect::Vec<_>()`.\n+                Ok(args) => {\n                     let span = lo.to(self.prev_token.span);\n-                    let args = AngleBracketedArgs { args, span }.into();\n-                    segment.args = args;\n-                    self.struct_span_err(\n-                        span,\n-                        \"generic parameters without surrounding angle brackets\",\n-                    )\n-                    .multipart_suggestion(\n-                        \"surround the type parameters with angle brackets\",\n-                        vec![\n-                            (span.shrink_to_lo(), \"<\".to_string()),\n-                            (span.shrink_to_hi(), \">\".to_string()),\n-                        ],\n-                        Applicability::MachineApplicable,\n-                    )\n-                    .emit();\n-                }\n-                Ok(_) => {\n-                    *self = snapshot;\n+                    // Detect trailing `>` like in `x.collect::Vec<_>>()`.\n+                    let mut trailing_span = self.prev_token.span.shrink_to_hi();\n+                    while self.token.kind == token::BinOp(token::Shr)\n+                        || self.token.kind == token::Gt\n+                    {\n+                        trailing_span = trailing_span.to(self.token.span);\n+                        self.bump();\n+                    }\n+                    if self.token.kind == token::OpenDelim(token::Paren) {\n+                        // Recover from bad turbofish: `foo.collect::Vec<_>()`.\n+                        let args = AngleBracketedArgs { args, span }.into();\n+                        segment.args = args;\n+\n+                        self.struct_span_err(\n+                            span,\n+                            \"generic parameters without surrounding angle brackets\",\n+                        )\n+                        .multipart_suggestion(\n+                            \"surround the type parameters with angle brackets\",\n+                            vec![\n+                                (span.shrink_to_lo(), \"<\".to_string()),\n+                                (trailing_span, \">\".to_string()),\n+                            ],\n+                            Applicability::MachineApplicable,\n+                        )\n+                        .emit();\n+                    } else {\n+                        // This doesn't look like an invalid turbofish, can't recover parse state.\n+                        *self = snapshot;\n+                    }\n                 }\n                 Err(mut err) => {\n+                    // We could't parse generic parameters, unlikely to be a turbofish. Rely on\n+                    // generic parse error instead.\n                     err.cancel();\n                     *self = snapshot;\n                 }"}, {"sha": "333dce390461c9359b2bd7a6cc83735dbc301be9", "filename": "src/test/ui/suggestions/recover-missing-turbofish-surrounding-angle-braket.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d090e5ed3327a24c17754be7e224b5f2345aa622/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d090e5ed3327a24c17754be7e224b5f2345aa622/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.rs?ref=d090e5ed3327a24c17754be7e224b5f2345aa622", "patch": "@@ -1,4 +1,10 @@\n fn main() {\n     let _ = vec![1, 2, 3].into_iter().collect::Vec<_>();\n     //~^ ERROR generic parameters without surrounding angle brackets\n+    let _ = vec![1, 2, 3].into_iter().collect::Vec<_>>>>();\n+    //~^ ERROR generic parameters without surrounding angle brackets\n+    let _ = vec![1, 2, 3].into_iter().collect::Vec<_>>>();\n+    //~^ ERROR generic parameters without surrounding angle brackets\n+    let _ = vec![1, 2, 3].into_iter().collect::Vec<_>>();\n+    //~^ ERROR generic parameters without surrounding angle brackets\n }"}, {"sha": "981f95749d3ba7c66ea45a91b6ef89a9a30fd037", "filename": "src/test/ui/suggestions/recover-missing-turbofish-surrounding-angle-braket.stderr", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d090e5ed3327a24c17754be7e224b5f2345aa622/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d090e5ed3327a24c17754be7e224b5f2345aa622/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frecover-missing-turbofish-surrounding-angle-braket.stderr?ref=d090e5ed3327a24c17754be7e224b5f2345aa622", "patch": "@@ -9,5 +9,38 @@ help: surround the type parameters with angle brackets\n LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<_>>();\n    |                                                ^      ^\n \n-error: aborting due to previous error\n+error: generic parameters without surrounding angle brackets\n+  --> $DIR/recover-missing-turbofish-surrounding-angle-braket.rs:4:48\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::Vec<_>>>>();\n+   |                                                ^^^^^^\n+   |\n+help: surround the type parameters with angle brackets\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<_>>();\n+   |                                                ^      ^\n+\n+error: generic parameters without surrounding angle brackets\n+  --> $DIR/recover-missing-turbofish-surrounding-angle-braket.rs:6:48\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::Vec<_>>>();\n+   |                                                ^^^^^^\n+   |\n+help: surround the type parameters with angle brackets\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<_>>();\n+   |                                                ^      ^\n+\n+error: generic parameters without surrounding angle brackets\n+  --> $DIR/recover-missing-turbofish-surrounding-angle-braket.rs:8:48\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::Vec<_>>();\n+   |                                                ^^^^^^\n+   |\n+help: surround the type parameters with angle brackets\n+   |\n+LL |     let _ = vec![1, 2, 3].into_iter().collect::<Vec<_>>();\n+   |                                                ^      ^\n+\n+error: aborting due to 4 previous errors\n "}]}