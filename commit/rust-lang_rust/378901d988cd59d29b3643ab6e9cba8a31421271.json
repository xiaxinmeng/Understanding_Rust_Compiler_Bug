{"sha": "378901d988cd59d29b3643ab6e9cba8a31421271", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3ODkwMWQ5ODhjZDU5ZDI5YjM2NDNhYjZlOWNiYThhMzE0MjEyNzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-11T21:19:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-11T21:19:28Z"}, "message": "Auto merge of #71031 - Dylan-DPC:rollup-zr8hh86, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #70644 (Clean up `ModuleConfig` initialization)\n - #70937 (Fix staticlib name for *-pc-windows-gnu targets)\n - #70996 (Add or_insert_with_key to Entry of HashMap/BTreeMap)\n - #71020 (Store UNICODE_VERSION as a tuple)\n - #71021 (Use write!-style syntax for MIR assert terminator)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "1ef481a1cc168d2430993446995091d970917210", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ef481a1cc168d2430993446995091d970917210"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/378901d988cd59d29b3643ab6e9cba8a31421271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/378901d988cd59d29b3643ab6e9cba8a31421271", "html_url": "https://github.com/rust-lang/rust/commit/378901d988cd59d29b3643ab6e9cba8a31421271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/378901d988cd59d29b3643ab6e9cba8a31421271/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e82734e56b2a50d38e0937d08f559d15dbe8e46b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e82734e56b2a50d38e0937d08f559d15dbe8e46b", "html_url": "https://github.com/rust-lang/rust/commit/e82734e56b2a50d38e0937d08f559d15dbe8e46b"}, {"sha": "d8dcdec2b8603cdb8059488a090b3b81223dcb22", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8dcdec2b8603cdb8059488a090b3b81223dcb22", "html_url": "https://github.com/rust-lang/rust/commit/d8dcdec2b8603cdb8059488a090b3b81223dcb22"}], "stats": {"total": 477, "additions": 254, "deletions": 223}, "files": [{"sha": "3fc1b5e16b37280de93745c45283262fe05f261d", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -2361,6 +2361,34 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n         }\n     }\n \n+    #[unstable(feature = \"or_insert_with_key\", issue = \"71024\")]\n+    /// Ensures a value is in the entry by inserting, if empty, the result of the default function,\n+    /// which takes the key as its argument, and returns a mutable reference to the value in the\n+    /// entry.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(or_insert_with_key)]\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map: BTreeMap<&str, usize> = BTreeMap::new();\n+    ///\n+    /// map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());\n+    ///\n+    /// assert_eq!(map[\"poneyland\"], 9);\n+    /// ```\n+    #[inline]\n+    pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => {\n+                let value = default(entry.key());\n+                entry.insert(value)\n+            }\n+        }\n+    }\n+\n     /// Returns a reference to this entry's key.\n     ///\n     /// # Examples"}, {"sha": "715ad8992ad6bde268f719425615a1aa5b4de70a", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -37,8 +37,6 @@ pub use self::decode::{decode_utf16, DecodeUtf16, DecodeUtf16Error};\n \n // unstable re-exports\n #[unstable(feature = \"unicode_version\", issue = \"49726\")]\n-pub use crate::unicode::version::UnicodeVersion;\n-#[unstable(feature = \"unicode_version\", issue = \"49726\")]\n pub use crate::unicode::UNICODE_VERSION;\n \n use crate::fmt::{self, Write};"}, {"sha": "3952ae4482e9f83e06f2512248e15dff3530bc47", "filename": "src/libcore/unicode/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Flibcore%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Flibcore%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fmod.rs?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -3,19 +3,14 @@\n \n pub(crate) mod printable;\n mod unicode_data;\n-pub(crate) mod version;\n-\n-use version::UnicodeVersion;\n \n /// The version of [Unicode](http://www.unicode.org/) that the Unicode parts of\n /// `char` and `str` methods are based on.\n+///\n+/// The version numbering scheme is explained in\n+/// [Unicode 11.0 or later, Section 3.1 Versions of the Unicode Standard](https://www.unicode.org/versions/Unicode11.0.0/ch03.pdf#page=4).\n #[unstable(feature = \"unicode_version\", issue = \"49726\")]\n-pub const UNICODE_VERSION: UnicodeVersion = UnicodeVersion {\n-    major: unicode_data::UNICODE_VERSION.0,\n-    minor: unicode_data::UNICODE_VERSION.1,\n-    micro: unicode_data::UNICODE_VERSION.2,\n-    _priv: (),\n-};\n+pub const UNICODE_VERSION: (u8, u8, u8) = unicode_data::UNICODE_VERSION;\n \n // For use in liballoc, not re-exported in libstd.\n pub mod derived_property {"}, {"sha": "9c92a8ba28ae4f707d3287d5c30d9d09d60d4dd6", "filename": "src/libcore/unicode/unicode_data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Flibcore%2Funicode%2Funicode_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Flibcore%2Funicode%2Funicode_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode_data.rs?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -94,7 +94,7 @@ fn skip_search<const SOR: usize, const OFFSETS: usize>(\n     offset_idx % 2 == 1\n }\n \n-pub const UNICODE_VERSION: (u32, u32, u32) = (13, 0, 0);\n+pub const UNICODE_VERSION: (u8, u8, u8) = (13, 0, 0);\n \n #[rustfmt::skip]\n pub mod alphabetic {"}, {"sha": "4d68d2e8c2ef784907507485c590292870c3e29f", "filename": "src/libcore/unicode/version.rs", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibcore%2Funicode%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82734e56b2a50d38e0937d08f559d15dbe8e46b/src%2Flibcore%2Funicode%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fversion.rs?ref=e82734e56b2a50d38e0937d08f559d15dbe8e46b", "patch": "@@ -1,18 +0,0 @@\n-/// Represents a Unicode Version.\n-///\n-/// See also: <http://www.unicode.org/versions/>\n-#[derive(Clone, Copy, Debug, Eq, Ord, PartialEq, PartialOrd)]\n-#[unstable(feature = \"unicode_version\", issue = \"49726\")]\n-pub struct UnicodeVersion {\n-    /// Major version.\n-    pub major: u32,\n-\n-    /// Minor version.\n-    pub minor: u32,\n-\n-    /// Micro (or Update) version.\n-    pub micro: u32,\n-\n-    // Private field to keep struct expandable.\n-    pub(crate) _priv: (),\n-}"}, {"sha": "b1fb1ef0e331cf0776ed93fd2f69ee3767654759", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 140, "deletions": 162, "changes": 302, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -104,6 +104,7 @@ pub struct ModuleConfig {\n     pub emit_ir: bool,\n     pub emit_asm: bool,\n     pub emit_obj: EmitObj,\n+\n     // Miscellaneous flags.  These are mostly copied from command-line\n     // options.\n     pub verify_llvm_ir: bool,\n@@ -118,77 +119,144 @@ pub struct ModuleConfig {\n }\n \n impl ModuleConfig {\n-    fn new(passes: Vec<String>) -> ModuleConfig {\n-        ModuleConfig {\n-            passes,\n-            opt_level: None,\n-            opt_size: None,\n-\n-            pgo_gen: SwitchWithOptPath::Disabled,\n-            pgo_use: None,\n-\n-            sanitizer: None,\n-            sanitizer_recover: Default::default(),\n-            sanitizer_memory_track_origins: 0,\n-\n-            emit_no_opt_bc: false,\n-            emit_pre_lto_bc: false,\n-            emit_bc: false,\n-            emit_bc_compressed: false,\n-            emit_ir: false,\n-            emit_asm: false,\n-            emit_obj: EmitObj::None,\n-\n-            verify_llvm_ir: false,\n-            no_prepopulate_passes: false,\n-            no_builtins: false,\n-            time_module: true,\n-            vectorize_loop: false,\n-            vectorize_slp: false,\n-            merge_functions: false,\n-            inline_threshold: None,\n-            new_llvm_pass_manager: None,\n+    fn new(kind: ModuleKind, sess: &Session, no_builtins: bool) -> ModuleConfig {\n+        // If it's a regular module, use `$regular`, otherwise use `$other`.\n+        // `$regular` and `$other` are evaluated lazily.\n+        macro_rules! if_regular {\n+            ($regular: expr, $other: expr) => {\n+                if let ModuleKind::Regular = kind { $regular } else { $other }\n+            };\n         }\n-    }\n \n-    fn set_flags(&mut self, sess: &Session, no_builtins: bool) {\n-        self.verify_llvm_ir = sess.verify_llvm_ir();\n-        self.no_prepopulate_passes = sess.opts.cg.no_prepopulate_passes;\n-        self.no_builtins = no_builtins || sess.target.target.options.no_builtins;\n-        self.inline_threshold = sess.opts.cg.inline_threshold;\n-        self.new_llvm_pass_manager = sess.opts.debugging_opts.new_llvm_pass_manager;\n-\n-        // Copy what clang does by turning on loop vectorization at O2 and\n-        // slp vectorization at O3. Otherwise configure other optimization aspects\n-        // of this pass manager builder.\n-        self.vectorize_loop = !sess.opts.cg.no_vectorize_loops\n-            && (sess.opts.optimize == config::OptLevel::Default\n-                || sess.opts.optimize == config::OptLevel::Aggressive);\n-\n-        self.vectorize_slp =\n-            !sess.opts.cg.no_vectorize_slp && sess.opts.optimize == config::OptLevel::Aggressive;\n-\n-        // Some targets (namely, NVPTX) interact badly with the MergeFunctions\n-        // pass. This is because MergeFunctions can generate new function calls\n-        // which may interfere with the target calling convention; e.g. for the\n-        // NVPTX target, PTX kernels should not call other PTX kernels.\n-        // MergeFunctions can also be configured to generate aliases instead,\n-        // but aliases are not supported by some backends (again, NVPTX).\n-        // Therefore, allow targets to opt out of the MergeFunctions pass,\n-        // but otherwise keep the pass enabled (at O2 and O3) since it can be\n-        // useful for reducing code size.\n-        self.merge_functions = match sess\n-            .opts\n-            .debugging_opts\n-            .merge_functions\n-            .unwrap_or(sess.target.target.options.merge_functions)\n+        let opt_level_and_size = if_regular!(Some(sess.opts.optimize), None);\n+\n+        let save_temps = sess.opts.cg.save_temps;\n+\n+        let should_emit_obj = sess.opts.output_types.contains_key(&OutputType::Exe)\n+            || match kind {\n+                ModuleKind::Regular => sess.opts.output_types.contains_key(&OutputType::Object),\n+                ModuleKind::Allocator => false,\n+                ModuleKind::Metadata => sess.opts.output_types.contains_key(&OutputType::Metadata),\n+            };\n+\n+        let emit_obj = if !should_emit_obj {\n+            EmitObj::None\n+        } else if sess.target.target.options.obj_is_bitcode\n+            || sess.opts.cg.linker_plugin_lto.enabled()\n         {\n-            MergeFunctions::Disabled => false,\n-            MergeFunctions::Trampolines | MergeFunctions::Aliases => {\n-                sess.opts.optimize == config::OptLevel::Default\n-                    || sess.opts.optimize == config::OptLevel::Aggressive\n+            EmitObj::Bitcode\n+        } else if sess.opts.debugging_opts.embed_bitcode {\n+            match sess.opts.optimize {\n+                config::OptLevel::No | config::OptLevel::Less => {\n+                    EmitObj::ObjectCode(BitcodeSection::Marker)\n+                }\n+                _ => EmitObj::ObjectCode(BitcodeSection::Full),\n             }\n+        } else {\n+            EmitObj::ObjectCode(BitcodeSection::None)\n         };\n+\n+        ModuleConfig {\n+            passes: if_regular!(\n+                {\n+                    let mut passes = sess.opts.cg.passes.clone();\n+                    if sess.opts.debugging_opts.profile {\n+                        passes.push(\"insert-gcov-profiling\".to_owned());\n+                    }\n+                    passes\n+                },\n+                vec![]\n+            ),\n+\n+            opt_level: opt_level_and_size,\n+            opt_size: opt_level_and_size,\n+\n+            pgo_gen: if_regular!(\n+                sess.opts.cg.profile_generate.clone(),\n+                SwitchWithOptPath::Disabled\n+            ),\n+            pgo_use: if_regular!(sess.opts.cg.profile_use.clone(), None),\n+\n+            sanitizer: if_regular!(sess.opts.debugging_opts.sanitizer.clone(), None),\n+            sanitizer_recover: if_regular!(\n+                sess.opts.debugging_opts.sanitizer_recover.clone(),\n+                vec![]\n+            ),\n+            sanitizer_memory_track_origins: if_regular!(\n+                sess.opts.debugging_opts.sanitizer_memory_track_origins,\n+                0\n+            ),\n+\n+            emit_pre_lto_bc: if_regular!(\n+                save_temps || need_pre_lto_bitcode_for_incr_comp(sess),\n+                false\n+            ),\n+            emit_no_opt_bc: if_regular!(save_temps, false),\n+            emit_bc: if_regular!(\n+                save_temps || sess.opts.output_types.contains_key(&OutputType::Bitcode),\n+                save_temps\n+            ),\n+            emit_bc_compressed: match kind {\n+                ModuleKind::Regular | ModuleKind::Allocator => {\n+                    // Emit compressed bitcode files for the crate if we're\n+                    // emitting an rlib. Whenever an rlib is created, the\n+                    // bitcode is inserted into the archive in order to allow\n+                    // LTO against it.\n+                    need_crate_bitcode_for_rlib(sess)\n+                }\n+                ModuleKind::Metadata => false,\n+            },\n+            emit_ir: if_regular!(\n+                sess.opts.output_types.contains_key(&OutputType::LlvmAssembly),\n+                false\n+            ),\n+            emit_asm: if_regular!(\n+                sess.opts.output_types.contains_key(&OutputType::Assembly),\n+                false\n+            ),\n+            emit_obj,\n+\n+            verify_llvm_ir: sess.verify_llvm_ir(),\n+            no_prepopulate_passes: sess.opts.cg.no_prepopulate_passes,\n+            no_builtins: no_builtins || sess.target.target.options.no_builtins,\n+\n+            // Exclude metadata and allocator modules from time_passes output,\n+            // since they throw off the \"LLVM passes\" measurement.\n+            time_module: if_regular!(true, false),\n+\n+            // Copy what clang does by turning on loop vectorization at O2 and\n+            // slp vectorization at O3.\n+            vectorize_loop: !sess.opts.cg.no_vectorize_loops\n+                && (sess.opts.optimize == config::OptLevel::Default\n+                    || sess.opts.optimize == config::OptLevel::Aggressive),\n+            vectorize_slp: !sess.opts.cg.no_vectorize_slp\n+                && sess.opts.optimize == config::OptLevel::Aggressive,\n+\n+            // Some targets (namely, NVPTX) interact badly with the\n+            // MergeFunctions pass. This is because MergeFunctions can generate\n+            // new function calls which may interfere with the target calling\n+            // convention; e.g. for the NVPTX target, PTX kernels should not\n+            // call other PTX kernels. MergeFunctions can also be configured to\n+            // generate aliases instead, but aliases are not supported by some\n+            // backends (again, NVPTX). Therefore, allow targets to opt out of\n+            // the MergeFunctions pass, but otherwise keep the pass enabled (at\n+            // O2 and O3) since it can be useful for reducing code size.\n+            merge_functions: match sess\n+                .opts\n+                .debugging_opts\n+                .merge_functions\n+                .unwrap_or(sess.target.target.options.merge_functions)\n+            {\n+                MergeFunctions::Disabled => false,\n+                MergeFunctions::Trampolines | MergeFunctions::Aliases => {\n+                    sess.opts.optimize == config::OptLevel::Default\n+                        || sess.opts.optimize == config::OptLevel::Aggressive\n+                }\n+            },\n+\n+            inline_threshold: sess.opts.cg.inline_threshold,\n+            new_llvm_pass_manager: sess.opts.debugging_opts.new_llvm_pass_manager,\n+        }\n     }\n \n     pub fn bitcode_needed(&self) -> bool {\n@@ -353,99 +421,9 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     let linker_info = LinkerInfo::new(tcx);\n     let crate_info = CrateInfo::new(tcx);\n \n-    // Figure out what we actually need to build.\n-    let mut modules_config = ModuleConfig::new(sess.opts.cg.passes.clone());\n-    let mut metadata_config = ModuleConfig::new(vec![]);\n-    let mut allocator_config = ModuleConfig::new(vec![]);\n-\n-    if sess.opts.debugging_opts.profile {\n-        modules_config.passes.push(\"insert-gcov-profiling\".to_owned())\n-    }\n-\n-    modules_config.pgo_gen = sess.opts.cg.profile_generate.clone();\n-    modules_config.pgo_use = sess.opts.cg.profile_use.clone();\n-    modules_config.sanitizer = sess.opts.debugging_opts.sanitizer.clone();\n-    modules_config.sanitizer_recover = sess.opts.debugging_opts.sanitizer_recover.clone();\n-    modules_config.sanitizer_memory_track_origins =\n-        sess.opts.debugging_opts.sanitizer_memory_track_origins;\n-    modules_config.opt_level = Some(sess.opts.optimize);\n-    modules_config.opt_size = Some(sess.opts.optimize);\n-\n-    // Save all versions of the bytecode if we're saving our temporaries.\n-    if sess.opts.cg.save_temps {\n-        modules_config.emit_no_opt_bc = true;\n-        modules_config.emit_pre_lto_bc = true;\n-        modules_config.emit_bc = true;\n-        metadata_config.emit_bc = true;\n-        allocator_config.emit_bc = true;\n-    }\n-\n-    // Emit compressed bitcode files for the crate if we're emitting an rlib.\n-    // Whenever an rlib is created, the bitcode is inserted into the archive in\n-    // order to allow LTO against it.\n-    if need_crate_bitcode_for_rlib(sess) {\n-        modules_config.emit_bc_compressed = true;\n-        allocator_config.emit_bc_compressed = true;\n-    }\n-\n-    let emit_obj =\n-        if sess.target.target.options.obj_is_bitcode || sess.opts.cg.linker_plugin_lto.enabled() {\n-            EmitObj::Bitcode\n-        } else if sess.opts.debugging_opts.embed_bitcode {\n-            match sess.opts.optimize {\n-                config::OptLevel::No | config::OptLevel::Less => {\n-                    EmitObj::ObjectCode(BitcodeSection::Marker)\n-                }\n-                _ => EmitObj::ObjectCode(BitcodeSection::Full),\n-            }\n-        } else {\n-            EmitObj::ObjectCode(BitcodeSection::None)\n-        };\n-\n-    modules_config.emit_pre_lto_bc = need_pre_lto_bitcode_for_incr_comp(sess);\n-\n-    for output_type in sess.opts.output_types.keys() {\n-        match *output_type {\n-            OutputType::Bitcode => {\n-                modules_config.emit_bc = true;\n-            }\n-            OutputType::LlvmAssembly => {\n-                modules_config.emit_ir = true;\n-            }\n-            OutputType::Assembly => {\n-                modules_config.emit_asm = true;\n-                // If we're not using the LLVM assembler, this function\n-                // could be invoked specially with output_type_assembly, so\n-                // in this case we still want the metadata object file.\n-                if !sess.opts.output_types.contains_key(&OutputType::Assembly) {\n-                    metadata_config.emit_obj = emit_obj;\n-                    allocator_config.emit_obj = emit_obj;\n-                }\n-            }\n-            OutputType::Object => {\n-                modules_config.emit_obj = emit_obj;\n-            }\n-            OutputType::Metadata => {\n-                metadata_config.emit_obj = emit_obj;\n-            }\n-            OutputType::Exe => {\n-                modules_config.emit_obj = emit_obj;\n-                metadata_config.emit_obj = emit_obj;\n-                allocator_config.emit_obj = emit_obj;\n-            }\n-            OutputType::Mir => {}\n-            OutputType::DepInfo => {}\n-        }\n-    }\n-\n-    modules_config.set_flags(sess, no_builtins);\n-    metadata_config.set_flags(sess, no_builtins);\n-    allocator_config.set_flags(sess, no_builtins);\n-\n-    // Exclude metadata and allocator modules from time_passes output, since\n-    // they throw off the \"LLVM passes\" measurement.\n-    metadata_config.time_module = false;\n-    allocator_config.time_module = false;\n+    let regular_config = ModuleConfig::new(ModuleKind::Regular, sess, no_builtins);\n+    let metadata_config = ModuleConfig::new(ModuleKind::Metadata, sess, no_builtins);\n+    let allocator_config = ModuleConfig::new(ModuleKind::Allocator, sess, no_builtins);\n \n     let (shared_emitter, shared_emitter_main) = SharedEmitter::new();\n     let (codegen_worker_send, codegen_worker_receive) = channel();\n@@ -459,7 +437,7 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n         coordinator_receive,\n         total_cgus,\n         sess.jobserver.clone(),\n-        Arc::new(modules_config),\n+        Arc::new(regular_config),\n         Arc::new(metadata_config),\n         Arc::new(allocator_config),\n         coordinator_send.clone(),\n@@ -959,7 +937,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n     coordinator_receive: Receiver<Box<dyn Any + Send>>,\n     total_cgus: usize,\n     jobserver: Client,\n-    modules_config: Arc<ModuleConfig>,\n+    regular_config: Arc<ModuleConfig>,\n     metadata_config: Arc<ModuleConfig>,\n     allocator_config: Arc<ModuleConfig>,\n     tx_to_llvm_workers: Sender<Box<dyn Any + Send>>,\n@@ -1042,7 +1020,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         coordinator_send,\n         diag_emitter: shared_emitter.clone(),\n         output_filenames: tcx.output_filenames(LOCAL_CRATE),\n-        regular_module_config: modules_config,\n+        regular_module_config: regular_config,\n         metadata_module_config: metadata_config,\n         allocator_module_config: allocator_config,\n         tm_factory: TargetMachineFactory(backend.target_machine_factory(tcx.sess, ol, false)),"}, {"sha": "212061cfd824f9c365b61e6feb59f54c4068140f", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -1403,6 +1403,21 @@ impl<O> AssertKind<O> {\n             BoundsCheck { .. } => bug!(\"Unexpected AssertKind\"),\n         }\n     }\n+\n+    /// Format the message arguments for the `assert(cond, msg..)` terminator in MIR printing.\n+    fn fmt_assert_args<W: Write>(&self, f: &mut W) -> fmt::Result\n+    where\n+        O: Debug,\n+    {\n+        match self {\n+            AssertKind::BoundsCheck { ref len, ref index } => write!(\n+                f,\n+                \"\\\"index out of bounds: the len is {{}} but the index is {{}}\\\", {:?}, {:?}\",\n+                len, index\n+            ),\n+            _ => write!(f, \"\\\"{}\\\"\", self.description()),\n+        }\n+    }\n }\n \n impl<O: fmt::Debug> fmt::Debug for AssertKind<O> {\n@@ -1480,7 +1495,9 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 if !expected {\n                     write!(fmt, \"!\")?;\n                 }\n-                write!(fmt, \"{:?}, \\\"{:?}\\\")\", cond, msg)\n+                write!(fmt, \"{:?}, \", cond)?;\n+                msg.fmt_assert_args(fmt)?;\n+                write!(fmt, \")\")\n             }\n             FalseEdges { .. } => write!(fmt, \"falseEdges\"),\n             FalseUnwind { .. } => write!(fmt, \"falseUnwind\"),"}, {"sha": "39350c1618ab06e7a8299ce85146c792b7c9bd37", "filename": "src/librustc_target/spec/windows_base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fwindows_base.rs?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -75,8 +75,8 @@ pub fn opts() -> TargetOptions {\n         dll_prefix: String::new(),\n         dll_suffix: \".dll\".to_string(),\n         exe_suffix: \".exe\".to_string(),\n-        staticlib_prefix: String::new(),\n-        staticlib_suffix: \".lib\".to_string(),\n+        staticlib_prefix: \"lib\".to_string(),\n+        staticlib_suffix: \".a\".to_string(),\n         target_family: Some(\"windows\".to_string()),\n         is_like_windows: true,\n         allows_weak_linkage: false,"}, {"sha": "706b388f7832331c3cf86813ad474dedf2fa3ad8", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -1943,6 +1943,34 @@ impl<'a, K, V> Entry<'a, K, V> {\n         }\n     }\n \n+    #[unstable(feature = \"or_insert_with_key\", issue = \"71024\")]\n+    /// Ensures a value is in the entry by inserting, if empty, the result of the default function,\n+    /// which takes the key as its argument, and returns a mutable reference to the value in the\n+    /// entry.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(or_insert_with_key)]\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map: HashMap<&str, usize> = HashMap::new();\n+    ///\n+    /// map.entry(\"poneyland\").or_insert_with_key(|key| key.chars().count());\n+    ///\n+    /// assert_eq!(map[\"poneyland\"], 9);\n+    /// ```\n+    #[inline]\n+    pub fn or_insert_with_key<F: FnOnce(&K) -> V>(self, default: F) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => {\n+                let value = default(entry.key());\n+                entry.insert(value)\n+            }\n+        }\n+    }\n+\n     /// Returns a reference to this entry's key.\n     ///\n     /// # Examples"}, {"sha": "0016cebbb4c064341ffe657d44a060d75ae864b7", "filename": "src/test/mir-opt/array-index-is-temporary/32bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F32bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -75,7 +75,7 @@ fn main() -> () {\n         _7 = _2;                         // bb1[2]: scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n         _8 = Len(_1);                    // bb1[3]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n         _9 = Lt(_7, _8);                 // bb1[4]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[5]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // bb1[5]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n     }\n \n     bb2: {"}, {"sha": "a004ab4a06aed524401b46f9b6869822892984e7", "filename": "src/test/mir-opt/array-index-is-temporary/64bit/rustc.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Farray-index-is-temporary%2F64bit%2Frustc.main.SimplifyCfg-elaborate-drops.after.mir?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -75,7 +75,7 @@ fn main() -> () {\n         _7 = _2;                         // bb1[2]: scope 3 at $DIR/array-index-is-temporary.rs:16:7: 16:8\n         _8 = Len(_1);                    // bb1[3]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n         _9 = Lt(_7, _8);                 // bb1[4]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n-        assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[5]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n+        assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // bb1[5]: scope 3 at $DIR/array-index-is-temporary.rs:16:5: 16:9\n     }\n \n     bb2: {"}, {"sha": "1deeee0f61239e5431d03f72d122b3be3bf4c872", "filename": "src/test/mir-opt/combine_array_len/32bit/rustc.norm2.InstCombine.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F32bit%2Frustc.norm2.InstCombine.diff?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -44,7 +44,7 @@\n +                                          // + span: $DIR/combine_array_len.rs:5:13: 5:17\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n           _5 = Lt(_3, _4);                 // bb0[4]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[5]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[5]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n       }\n   \n       bb1: {\n@@ -68,7 +68,7 @@\n +                                          // + span: $DIR/combine_array_len.rs:6:13: 6:17\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000002)) }\n           _9 = Lt(_7, _8);                 // bb1[6]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[7]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // bb1[7]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n       }\n   \n       bb2: {"}, {"sha": "7120829e2b54a0bf0db53a307947767ed40b98e9", "filename": "src/test/mir-opt/combine_array_len/64bit/rustc.norm2.InstCombine.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fcombine_array_len%2F64bit%2Frustc.norm2.InstCombine.diff?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -44,7 +44,7 @@\n +                                          // + span: $DIR/combine_array_len.rs:5:13: 5:17\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n           _5 = Lt(_3, _4);                 // bb0[4]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n-          assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[5]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n+          assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[5]: scope 0 at $DIR/combine_array_len.rs:5:13: 5:17\n       }\n   \n       bb1: {\n@@ -68,7 +68,7 @@\n +                                          // + span: $DIR/combine_array_len.rs:6:13: 6:17\n +                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n           _9 = Lt(_7, _8);                 // bb1[6]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n-          assert(move _9, \"index out of bounds: the len is move _8 but the index is _7\") -> bb2; // bb1[7]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n+          assert(move _9, \"index out of bounds: the len is {} but the index is {}\", move _8, _7) -> bb2; // bb1[7]: scope 1 at $DIR/combine_array_len.rs:6:13: 6:17\n       }\n   \n       bb2: {"}, {"sha": "99d79b23e9e60f438291fc623c2b5b0ba175f993", "filename": "src/test/mir-opt/const_prop/array_index/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F32bit%2Frustc.main.ConstProp.diff?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -56,15 +56,15 @@\n                                            // + span: $DIR/array_index.rs:5:18: 5:33\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000004)) }\n -         _5 = Lt(_3, _4);                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n--         assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +         _5 = const true;                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "629ca226f2ad60645af2ea66f06f3d0df4eab013", "filename": "src/test/mir-opt/const_prop/array_index/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Farray_index%2F64bit%2Frustc.main.ConstProp.diff?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -56,15 +56,15 @@\n                                            // + span: $DIR/array_index.rs:5:18: 5:33\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000004)) }\n -         _5 = Lt(_3, _4);                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n--         assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n+-         assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +         _5 = const true;                 // bb0[6]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/array_index.rs:5:18: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _4 but the index is _3\") -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> bb1; // bb0[7]: scope 0 at $DIR/array_index.rs:5:18: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "41ffedf06bc980c711526dbde6fa10a512855377", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F32bit%2Frustc.main.ConstProp.diff?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -119,15 +119,15 @@\n                                            // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000006)) }\n -         _7 = Lt(_5, _6);                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n--         assert(move _7, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         assert(move _7, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +         _7 = const true;                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "fd3281f527372a4e7cfa2d25a437d926aa87071e", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable%2F64bit%2Frustc.main.ConstProp.diff?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -119,15 +119,15 @@\n                                            // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000006)) }\n -         _7 = Lt(_5, _6);                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n--         assert(move _7, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n+-         assert(move _7, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +         _7 = const true;                 // bb1[7]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _6 but the index is _5\") -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _6, _5) -> bb2; // bb1[8]: scope 1 at $DIR/optimizes_into_variable.rs:13:13: 13:34\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "9d62fa31a4565d4b811edc0aea219b20a8489ed6", "filename": "src/test/mir-opt/const_prop/repeat/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F32bit%2Frustc.main.ConstProp.diff?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -40,15 +40,15 @@\n                                            // + span: $DIR/repeat.rs:6:18: 6:28\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000008)) }\n -         _6 = Lt(_4, _5);                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         assert(move _6, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         assert(move _6, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n +         _6 = const true;                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "cb84ee82cfea8bf92339b16e0d0c888e0841f21b", "filename": "src/test/mir-opt/const_prop/repeat/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Frepeat%2F64bit%2Frustc.main.ConstProp.diff?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -40,15 +40,15 @@\n                                            // + span: $DIR/repeat.rs:6:18: 6:28\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000008)) }\n -         _6 = Lt(_4, _5);                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n--         assert(move _6, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n+-         assert(move _6, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n +         _6 = const true;                 // bb0[7]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))\n +                                          // mir::Constant\n +                                          // + span: $DIR/repeat.rs:6:18: 6:28\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _5 but the index is _4\") -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _5, _4) -> bb1; // bb0[8]: scope 0 at $DIR/repeat.rs:6:18: 6:28\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "dbb4171e7f0ed90e255f3cdf099cac76c60799c4", "filename": "src/test/mir-opt/const_prop/slice_len/32bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F32bit%2Frustc.main.ConstProp.diff?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -39,7 +39,7 @@\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x00000001)) }\n -         _7 = Len((*_2));                 // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // bb0[12]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         assert(move _8, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _7 = const 3usize;               // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: usize\n@@ -54,7 +54,7 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "3c4415e05583867c16c5d1b08c620d36408f2357", "filename": "src/test/mir-opt/const_prop/slice_len/64bit/rustc.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len%2F64bit%2Frustc.main.ConstProp.diff?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -39,7 +39,7 @@\n                                            // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n -         _7 = Len((*_2));                 // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n -         _8 = Lt(_6, _7);                 // bb0[12]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n--         assert(move _8, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n+-         assert(move _8, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +         _7 = const 3usize;               // bb0[11]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: usize\n@@ -54,7 +54,7 @@\n +                                          // mir::Constant\n +                                          // + span: $DIR/slice_len.rs:5:5: 5:33\n +                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-+         assert(const true, \"index out of bounds: the len is move _7 but the index is _6\") -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n++         assert(const true, \"index out of bounds: the len is {} but the index is {}\", move _7, _6) -> bb1; // bb0[13]: scope 0 at $DIR/slice_len.rs:5:5: 5:33\n +                                          // ty::Const\n +                                          // + ty: bool\n +                                          // + val: Value(Scalar(0x01))"}, {"sha": "1f75658aa265ae7feb2f24da7e83c723c3a5f316", "filename": "src/test/mir-opt/nll/region-subtyping-basic/32bit/rustc.main.nll.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F32bit%2Frustc.main.nll.0.mir?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -75,7 +75,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x00000000)) }\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n-        assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n+        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n     }\n \n     bb1 (cleanup): {"}, {"sha": "8305c3fe7c493ecbf1aac45f831958be3614fa6f", "filename": "src/test/mir-opt/nll/region-subtyping-basic/64bit/rustc.main.nll.0.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -75,7 +75,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n         _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n         _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n-        assert(move _5, \"index out of bounds: the len is move _4 but the index is _3\") -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n+        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n     }\n \n     bb1 (cleanup): {"}, {"sha": "b6e0cbaf5ddc7557e9fb7fd8ac479dbb15791b7b", "filename": "src/test/run-make-fulldeps/output-type-permutations/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Frun-make-fulldeps%2Foutput-type-permutations%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Frun-make-fulldeps%2Foutput-type-permutations%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Foutput-type-permutations%2FMakefile?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -78,7 +78,7 @@ all:\n \trm $(TMPDIR)/$(call BIN,foo)\n \t$(RUSTC) foo.rs --crate-type=dylib --emit=link=$(TMPDIR)/$(call BIN,foo)\n \trm $(TMPDIR)/$(call BIN,foo)\n-\trm -f $(TMPDIR)/{lib,}foo.{dll.exp,dll.lib,pdb,dll.a,exe.lib}\n+\trm -f $(TMPDIR)/{lib,}foo.{dll.exp,dll.lib,pdb,dll.a,exe.a}\n \t[ \"$$(ls -1 $(TMPDIR) | wc -l)\" -eq \"0\" ] || (ls -1 $(TMPDIR) && exit 1)\n \n \t$(RUSTC) foo.rs --crate-type=staticlib -o $(TMPDIR)/foo"}, {"sha": "04bf78ed2105be91980aef74951edbe51036dd21", "filename": "src/test/run-make-fulldeps/tools.mk", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Ftools.mk?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -44,8 +44,13 @@ RUN = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(RUN_BINFILE)\n FAIL = PATH=\"$(PATH):$(TARGET_RPATH_DIR)\" $(RUN_BINFILE) && exit 1 || exit 0\n DYLIB_GLOB = $(1)*.dll\n DYLIB = $(TMPDIR)/$(1).dll\n+ifdef IS_MSVC\n STATICLIB = $(TMPDIR)/$(1).lib\n STATICLIB_GLOB = $(1)*.lib\n+else\n+STATICLIB = $(TMPDIR)/lib$(1).a\n+STATICLIB_GLOB = lib$(1)*.a\n+endif\n BIN = $(1).exe\n LLVM_FILECHECK := $(shell cygpath -u \"$(LLVM_FILECHECK)\")\n else"}, {"sha": "8d28f0080dd561e995d95f43e4219b9fcb51cbd5", "filename": "src/test/ui/char_unicode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fui%2Fchar_unicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftest%2Fui%2Fchar_unicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchar_unicode.rs?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -7,6 +7,6 @@ pub fn main() {\n     check(std::char::UNICODE_VERSION);\n }\n \n-pub fn check(unicode_version: std::char::UnicodeVersion) {\n-    assert!(unicode_version.major >= 10);\n+pub fn check(unicode_version: (u8, u8, u8)) {\n+    assert!(unicode_version.0 >= 10);\n }"}, {"sha": "6f73b172feae3fde619982f2dd80324b146473cb", "filename": "src/tools/unicode-table-generator/src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/378901d988cd59d29b3643ab6e9cba8a31421271/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fmain.rs?ref=378901d988cd59d29b3643ab6e9cba8a31421271", "patch": "@@ -295,7 +295,7 @@ fn main() {\n \n fn version() -> String {\n     let mut out = String::new();\n-    out.push_str(\"pub const UNICODE_VERSION: (u32, u32, u32) = \");\n+    out.push_str(\"pub const UNICODE_VERSION: (u8, u8, u8) = \");\n \n     let readme =\n         std::fs::read_to_string(std::path::Path::new(UNICODE_DIRECTORY).join(\"ReadMe.txt\"))"}]}