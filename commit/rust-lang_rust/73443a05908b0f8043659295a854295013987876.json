{"sha": "73443a05908b0f8043659295a854295013987876", "node_id": "C_kwDOAAsO6NoAKDczNDQzYTA1OTA4YjBmODA0MzY1OTI5NWE4NTQyOTUwMTM5ODc4NzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-09T10:45:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-09T10:45:30Z"}, "message": "Auto merge of #98328 - topjohnwu:fix_cross, r=jyn514\n\nFix several issues during cross compiling\n\n- When cross compiling LLVM on an arm64 macOS machine to x86_64, CMake will produce universal binaries by default, causing link errors. Explicitly set `CMAKE_OSX_ARCHITECTURES` to the one single target architecture so that the executables and libraries will be single architecture.\n- When cross compiling rustc with `llvm.clang = true`, `CLANG_TABLEGEN` has to be set to the host `clang-tblgen` executable to build clang.", "tree": {"sha": "d35ad3a029c3ca901f591b66380307f0a7c2b038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d35ad3a029c3ca901f591b66380307f0a7c2b038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73443a05908b0f8043659295a854295013987876", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73443a05908b0f8043659295a854295013987876", "html_url": "https://github.com/rust-lang/rust/commit/73443a05908b0f8043659295a854295013987876", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73443a05908b0f8043659295a854295013987876/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4693bc946729393c087fb120af566395915d19d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4693bc946729393c087fb120af566395915d19d", "html_url": "https://github.com/rust-lang/rust/commit/c4693bc946729393c087fb120af566395915d19d"}, {"sha": "600026ac9473e75729e67b38036e7deaffbe2a20", "url": "https://api.github.com/repos/rust-lang/rust/commits/600026ac9473e75729e67b38036e7deaffbe2a20", "html_url": "https://github.com/rust-lang/rust/commit/600026ac9473e75729e67b38036e7deaffbe2a20"}], "stats": {"total": 23, "additions": 22, "deletions": 1}, "files": [{"sha": "7ddd0ba5c3def5ecc5862a7eb25871b327d38f81", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/73443a05908b0f8043659295a854295013987876/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73443a05908b0f8043659295a854295013987876/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=73443a05908b0f8043659295a854295013987876", "patch": "@@ -429,13 +429,21 @@ impl Step for Llvm {\n             //        should use llvm-tblgen from there, also should verify that it\n             //        actually exists most of the time in normal installs of LLVM.\n             let host_bin = builder.llvm_out(builder.config.build).join(\"bin\");\n-            cfg.define(\"CMAKE_CROSSCOMPILING\", \"True\");\n             cfg.define(\"LLVM_TABLEGEN\", host_bin.join(\"llvm-tblgen\").with_extension(EXE_EXTENSION));\n+            // LLVM_NM is required for cross compiling using MSVC\n             cfg.define(\"LLVM_NM\", host_bin.join(\"llvm-nm\").with_extension(EXE_EXTENSION));\n             cfg.define(\n                 \"LLVM_CONFIG_PATH\",\n                 host_bin.join(\"llvm-config\").with_extension(EXE_EXTENSION),\n             );\n+            if builder.config.llvm_clang {\n+                let build_bin = builder.llvm_out(builder.config.build).join(\"build\").join(\"bin\");\n+                let clang_tblgen = build_bin.join(\"clang-tblgen\").with_extension(EXE_EXTENSION);\n+                if !builder.config.dry_run && !clang_tblgen.exists() {\n+                    panic!(\"unable to find {}\", clang_tblgen.display());\n+                }\n+                cfg.define(\"CLANG_TABLEGEN\", clang_tblgen);\n+            }\n         }\n \n         let llvm_version_suffix = if let Some(ref suffix) = builder.config.llvm_version_suffix {\n@@ -545,6 +553,8 @@ fn configure_cmake(\n     cfg.target(&target.triple).host(&builder.config.build.triple);\n \n     if target != builder.config.build {\n+        cfg.define(\"CMAKE_CROSSCOMPILING\", \"True\");\n+\n         if target.contains(\"netbsd\") {\n             cfg.define(\"CMAKE_SYSTEM_NAME\", \"NetBSD\");\n         } else if target.contains(\"freebsd\") {\n@@ -562,6 +572,17 @@ fn configure_cmake(\n         // Since, the LLVM itself makes rather limited use of version checks in\n         // CMakeFiles (and then only in tests), and so far no issues have been\n         // reported, the system version is currently left unset.\n+\n+        if target.contains(\"darwin\") {\n+            // Make sure that CMake does not build universal binaries on macOS.\n+            // Explicitly specifiy the one single target architecture.\n+            if target.starts_with(\"aarch64\") {\n+                // macOS uses a different name for building arm64\n+                cfg.define(\"CMAKE_OSX_ARCHITECTURES\", \"arm64\");\n+            } else {\n+                cfg.define(\"CMAKE_OSX_ARCHITECTURES\", target.triple.split('-').next().unwrap());\n+            }\n+        }\n     }\n \n     let sanitize_cc = |cc: &Path| {"}]}