{"sha": "e49b9581baba9d89519d17ac0d8400b6ae77e754", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0OWI5NTgxYmFiYTlkODk1MTlkMTdhYzBkODQwMGI2YWU3N2U3NTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-27T08:21:41Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-27T08:21:41Z"}, "message": "Simplify with Symbol/Token::is_book_lit.", "tree": {"sha": "bb80e7150da3b89be3c98b11a14a3ca3c13f4631", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb80e7150da3b89be3c98b11a14a3ca3c13f4631"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e49b9581baba9d89519d17ac0d8400b6ae77e754", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e49b9581baba9d89519d17ac0d8400b6ae77e754", "html_url": "https://github.com/rust-lang/rust/commit/e49b9581baba9d89519d17ac0d8400b6ae77e754", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e49b9581baba9d89519d17ac0d8400b6ae77e754/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5cc1559c600f34f534fa3e0328ca1c2659562229", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cc1559c600f34f534fa3e0328ca1c2659562229", "html_url": "https://github.com/rust-lang/rust/commit/5cc1559c600f34f534fa3e0328ca1c2659562229"}], "stats": {"total": 22, "additions": 15, "deletions": 7}, "files": [{"sha": "36233de3cfb576412c524e5ff5ec633f5efe7a6e", "filename": "src/libsyntax/parse/literal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e49b9581baba9d89519d17ac0d8400b6ae77e754/src%2Flibsyntax%2Fparse%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e49b9581baba9d89519d17ac0d8400b6ae77e754/src%2Flibsyntax%2Fparse%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fliteral.rs?ref=e49b9581baba9d89519d17ac0d8400b6ae77e754", "patch": "@@ -104,7 +104,7 @@ impl LitKind {\n \n         Ok(match kind {\n             token::Bool => {\n-                assert!(symbol == kw::True || symbol == kw::False);\n+                assert!(symbol.is_bool_lit());\n                 LitKind::Bool(symbol == kw::True)\n             }\n             token::Byte => return unescape_byte(&symbol.as_str())\n@@ -261,7 +261,7 @@ impl Lit {\n     /// Converts arbitrary token into an AST literal.\n     crate fn from_token(token: &Token) -> Result<Lit, LitError> {\n         let lit = match token.kind {\n-            token::Ident(name, false) if name == kw::True || name == kw::False =>\n+            token::Ident(name, false) if name.is_bool_lit() =>\n                 token::Lit::new(token::Bool, name, None),\n             token::Literal(lit) =>\n                 lit,"}, {"sha": "d4b13cc2e0121134676abc43554678bfac421024", "filename": "src/libsyntax/parse/parser/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e49b9581baba9d89519d17ac0d8400b6ae77e754/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e49b9581baba9d89519d17ac0d8400b6ae77e754/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpath.rs?ref=e49b9581baba9d89519d17ac0d8400b6ae77e754", "patch": "@@ -423,7 +423,7 @@ impl<'a> Parser<'a> {\n                     // FIXME(const_generics): to distinguish between idents for types and consts,\n                     // we should introduce a GenericArg::Ident in the AST and distinguish when\n                     // lowering to the HIR. For now, idents for const args are not permitted.\n-                    if self.token.is_keyword(kw::True) || self.token.is_keyword(kw::False) {\n+                    if self.token.is_bool_lit() {\n                         self.parse_literal_maybe_minus()?\n                     } else {\n                         return Err("}, {"sha": "fe3b51aa246b8cbddc326c9684ce76d07998184f", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e49b9581baba9d89519d17ac0d8400b6ae77e754/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e49b9581baba9d89519d17ac0d8400b6ae77e754/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=e49b9581baba9d89519d17ac0d8400b6ae77e754", "patch": "@@ -417,10 +417,8 @@ impl Token {\n     /// for example a '-42', or one of the boolean idents).\n     crate fn can_begin_literal_or_bool(&self) -> bool {\n         match self.kind {\n-            Literal(..)  => true,\n-            BinOp(Minus) => true,\n-            Ident(name, false) if name == kw::True => true,\n-            Ident(name, false) if name == kw::False => true,\n+            Literal(..) | BinOp(Minus) => true,\n+            Ident(name, false) if name.is_bool_lit() => true,\n             Interpolated(ref nt) => match **nt {\n                 NtLiteral(..) => true,\n                 _             => false,\n@@ -537,6 +535,11 @@ impl Token {\n         self.is_non_raw_ident_where(ast::Ident::is_reserved)\n     }\n \n+    /// Returns `true` if the token is the identifier `true` or `false`.\n+    crate fn is_bool_lit(&self) -> bool {\n+        self.is_non_raw_ident_where(|id| id.name.is_bool_lit())\n+    }\n+\n     /// Returns `true` if the token is a non-raw identifier for which `pred` holds.\n     fn is_non_raw_ident_where(&self, pred: impl FnOnce(ast::Ident) -> bool) -> bool {\n         match self.ident() {"}, {"sha": "856857f74e3528ac09f47803d23a160d7153a187", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e49b9581baba9d89519d17ac0d8400b6ae77e754/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e49b9581baba9d89519d17ac0d8400b6ae77e754/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=e49b9581baba9d89519d17ac0d8400b6ae77e754", "patch": "@@ -1063,6 +1063,11 @@ impl Symbol {\n         self == kw::DollarCrate\n     }\n \n+    /// Returns `true` if the symbol is `true` or `false`.\n+    pub fn is_bool_lit(self) -> bool {\n+        self == kw::True || self == kw::False\n+    }\n+\n     /// This symbol can be a raw identifier.\n     pub fn can_be_raw(self) -> bool {\n         self != kw::Invalid && self != kw::Underscore && !self.is_path_segment_keyword()"}]}