{"sha": "995ccc0d8217418ffbb621109297aa7e78ed33b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NWNjYzBkODIxNzQxOGZmYmI2MjExMDkyOTdhYTdlNzhlZDMzYjA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-23T18:56:08Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-23T18:56:08Z"}, "message": "Merge pull request #4596 from Trinick/tomutrename\n\ncore: Rename to_mut and from_mut to cast_to_mut and cast_from_mut", "tree": {"sha": "35a53ab0d50f50ba85f2903f6c3f6c54c18235ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35a53ab0d50f50ba85f2903f6c3f6c54c18235ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/995ccc0d8217418ffbb621109297aa7e78ed33b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/995ccc0d8217418ffbb621109297aa7e78ed33b0", "html_url": "https://github.com/rust-lang/rust/commit/995ccc0d8217418ffbb621109297aa7e78ed33b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/995ccc0d8217418ffbb621109297aa7e78ed33b0/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bca39a7a030ac21e3b0cc6a8da96b00f3465ebb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/bca39a7a030ac21e3b0cc6a8da96b00f3465ebb4", "html_url": "https://github.com/rust-lang/rust/commit/bca39a7a030ac21e3b0cc6a8da96b00f3465ebb4"}, {"sha": "9dc8e96c5fac7812039bf6ddf640dcbb77f1a2f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc8e96c5fac7812039bf6ddf640dcbb77f1a2f0", "html_url": "https://github.com/rust-lang/rust/commit/9dc8e96c5fac7812039bf6ddf640dcbb77f1a2f0"}], "stats": {"total": 127, "additions": 64, "deletions": 63}, "files": [{"sha": "f1af335eebf68d2879f8318af4dd91e107532caa", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -273,7 +273,7 @@ fn check_expected_errors(expected_errors: ~[errors::expected_error],\n                          procres: procres) {\n \n     // true if we found the error in question\n-    let found_flags = vec::to_mut(vec::from_elem(\n+    let found_flags = vec::cast_to_mut(vec::from_elem(\n         vec::len(expected_errors), false));\n \n     if procres.status == 0 {"}, {"sha": "34b058f6a3b3c9cae595c8e0311c2d195676dd13", "filename": "src/libcore/dvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibcore%2Fdvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibcore%2Fdvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdvec.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -145,7 +145,7 @@ impl<A> DVec<A> {\n     #[inline(always)]\n     fn swap_mut(f: &fn(v: ~[mut A]) -> ~[mut A]) {\n         do self.swap |v| {\n-            vec::from_mut(f(vec::to_mut(move v)))\n+            vec::cast_from_mut(f(vec::cast_to_mut(move v)))\n         }\n     }\n "}, {"sha": "d028b9a1347fed2607e5ada93e342cae316137da", "filename": "src/libcore/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -84,7 +84,7 @@ pub fn as_c_charp<T>(s: &str, f: fn(*c_char) -> T) -> T {\n \n pub fn fill_charp_buf(f: fn(*mut c_char, size_t) -> bool)\n     -> Option<~str> {\n-    let buf = vec::to_mut(vec::from_elem(tmpbuf_sz, 0u8 as c_char));\n+    let buf = vec::cast_to_mut(vec::from_elem(tmpbuf_sz, 0u8 as c_char));\n     do vec::as_mut_buf(buf) |b, sz| {\n         if f(b, sz as size_t) unsafe {\n             Some(str::raw::from_buf(b as *u8))\n@@ -111,7 +111,7 @@ pub mod win32 {\n             let mut res = None;\n             let mut done = false;\n             while !done {\n-                let buf = vec::to_mut(vec::from_elem(n as uint, 0u16));\n+                let buf = vec::cast_to_mut(vec::from_elem(n as uint, 0u16));\n                 do vec::as_mut_buf(buf) |b, _sz| {\n                     let k : DWORD = f(b, tmpbuf_sz as DWORD);\n                     if k == (0 as DWORD) {\n@@ -1269,7 +1269,7 @@ mod tests {\n           };\n           assert (ostream as uint != 0u);\n           let s = ~\"hello\";\n-          let mut buf = vec::to_mut(str::to_bytes(s) + ~[0 as u8]);\n+          let mut buf = vec::cast_to_mut(str::to_bytes(s) + ~[0 as u8]);\n           do vec::as_mut_buf(buf) |b, _len| {\n               assert (libc::fwrite(b as *c_void, 1u as size_t,\n                                    (str::len(s) + 1u) as size_t, ostream)"}, {"sha": "23dc2a4781acab84f359e495df86c54f40811981", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -209,12 +209,12 @@ pub pure fn build_sized_opt<A>(size: Option<uint>,\n }\n \n /// Produces a mut vector from an immutable vector.\n-pub pure fn to_mut<T>(v: ~[T]) -> ~[mut T] {\n+pub pure fn cast_to_mut<T>(v: ~[T]) -> ~[mut T] {\n     unsafe { ::cast::transmute(v) }\n }\n \n /// Produces an immutable vector from a mut vector.\n-pub pure fn from_mut<T>(v: ~[mut T]) -> ~[T] {\n+pub pure fn cast_from_mut<T>(v: ~[mut T]) -> ~[T] {\n     unsafe { ::cast::transmute(v) }\n }\n \n@@ -552,7 +552,7 @@ pub fn consume<T>(v: ~[T], f: fn(uint, v: T)) unsafe {\n }\n \n pub fn consume_mut<T>(v: ~[mut T], f: fn(uint, v: T)) {\n-    consume(vec::from_mut(v), f)\n+    consume(vec::cast_from_mut(v), f)\n }\n \n /// Remove the last element from a vector and return it\n@@ -718,7 +718,7 @@ pub pure fn append_one<T>(lhs: ~[T], x: T) -> ~[T] {\n \n #[inline(always)]\n pub pure fn append_mut<T: Copy>(lhs: ~[mut T], rhs: &[const T]) -> ~[mut T] {\n-    to_mut(append(from_mut(lhs), rhs))\n+    cast_to_mut(append(cast_from_mut(lhs), rhs))\n }\n \n /**\n@@ -3271,22 +3271,22 @@ mod tests {\n     }\n \n     #[test]\n-    fn to_mut_no_copy() {\n+    fn cast_to_mut_no_copy() {\n         unsafe {\n             let x = ~[1, 2, 3];\n             let addr = raw::to_ptr(x);\n-            let x_mut = to_mut(x);\n+            let x_mut = cast_to_mut(x);\n             let addr_mut = raw::to_ptr(x_mut);\n             assert addr == addr_mut;\n         }\n     }\n \n     #[test]\n-    fn from_mut_no_copy() {\n+    fn cast_from_mut_no_copy() {\n         unsafe {\n             let x = ~[mut 1, 2, 3];\n             let addr = raw::to_ptr(x);\n-            let x_imm = from_mut(x);\n+            let x_imm = cast_from_mut(x);\n             let addr_imm = raw::to_ptr(x_imm);\n             assert addr == addr_imm;\n         }"}, {"sha": "eb07e286f62899c9d05f12ba6fffafb0203b7f85", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -661,11 +661,11 @@ fn Liveness(ir: @IrMaps, specials: Specials) -> Liveness {\n         tcx: ir.tcx,\n         s: specials,\n         successors:\n-            vec::to_mut(\n+            vec::cast_to_mut(\n                 vec::from_elem(ir.num_live_nodes,\n                                invalid_node())),\n         users:\n-            vec::to_mut(\n+            vec::cast_to_mut(\n                 vec::from_elem(ir.num_live_nodes * ir.num_vars,\n                                invalid_users())),\n         loop_scope: DVec(),"}, {"sha": "db266464860c39e1fd7268946f76350588094d03", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -985,7 +985,7 @@ fn pick_col(m: &[@Match]) -> uint {\n           _ => 0u\n         }\n     }\n-    let scores = vec::to_mut(vec::from_elem(m[0].pats.len(), 0u));\n+    let scores = vec::cast_to_mut(vec::from_elem(m[0].pats.len(), 0u));\n     for vec::each(m) |br| {\n         let mut i = 0u;\n         for vec::each(br.pats) |p| { scores[i] += score(*p); i += 1u; }"}, {"sha": "b92950488d1975a0f47a708fcbf57a5c1668b6f2", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -297,14 +297,14 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n     }\n \n     let words = (ty_size(ty) + 7) / 8;\n-    let cls = vec::to_mut(vec::from_elem(words, no_class));\n+    let cls = vec::cast_to_mut(vec::from_elem(words, no_class));\n     if words > 4 {\n         all_mem(cls);\n-        return vec::from_mut(move cls);\n+        return vec::cast_from_mut(move cls);\n     }\n     classify(ty, cls, 0, 0);\n     fixup(ty, cls);\n-    return vec::from_mut(move cls);\n+    return vec::cast_from_mut(move cls);\n }\n \n fn llreg_ty(cls: &[x86_64_reg_class]) -> TypeRef {"}, {"sha": "ba1901f215c572d0a5ecc223feed4045e2dc5ff7", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -68,7 +68,7 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n     // Conservatively assume full use for recursive loops\n     ccx.type_use_cache.insert(fn_id, vec::from_elem(n_tps, 3u));\n \n-    let cx = {ccx: ccx, uses: vec::to_mut(vec::from_elem(n_tps, 0u))};\n+    let cx = {ccx: ccx, uses: vec::cast_to_mut(vec::from_elem(n_tps, 0u))};\n     match ty::get(ty::lookup_item_type(cx.ccx.tcx, fn_id).ty).sty {\n         ty::ty_fn(ref fn_ty) => {\n             for vec::each(fn_ty.sig.inputs) |arg| {\n@@ -84,7 +84,7 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n     }\n \n     if fn_id_loc.crate != local_crate {\n-        let uses = vec::from_mut(copy cx.uses);\n+        let uses = vec::cast_from_mut(copy cx.uses);\n         ccx.type_use_cache.insert(fn_id, copy uses);\n         return uses;\n     }\n@@ -167,7 +167,7 @@ fn type_uses_for(ccx: @crate_ctxt, fn_id: def_id, n_tps: uint)\n                                 ccx.tcx.sess.parse_sess.interner)));\n       }\n     }\n-    let uses = vec::from_mut(copy cx.uses);\n+    let uses = vec::cast_from_mut(copy cx.uses);\n     // XXX: Bad copy, use @vec instead?\n     ccx.type_use_cache.insert(fn_id, copy uses);\n     uses"}, {"sha": "6f2f56846c88c957fe7fbf21f03fe2c7301362f5", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -3024,7 +3024,7 @@ fn check_bounds_are_used(ccx: @crate_ctxt,\n \n     // make a vector of booleans initially false, set to true when used\n     if tps.len() == 0u { return; }\n-    let tps_used = vec::to_mut(vec::from_elem(tps.len(), false));\n+    let tps_used = vec::cast_to_mut(vec::from_elem(tps.len(), false));\n \n     ty::walk_regions_and_ty(\n         ccx.tcx, ty,"}, {"sha": "fc5040e0e317113487c7744339d2acdebb582bec", "filename": "src/libstd/bitv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitv.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -13,7 +13,7 @@\n use core::ops;\n use core::prelude::*;\n use core::uint;\n-use core::vec::{to_mut, from_elem};\n+use core::vec::{cast_to_mut, from_elem};\n use core::vec;\n \n struct SmallBitv {\n@@ -231,7 +231,7 @@ pub fn Bitv (nbits: uint, init: bool) -> Bitv {\n         let nelems = nbits/uint_bits +\n                      if nbits % uint_bits == 0 {0} else {1};\n         let elem = if init {!0} else {0};\n-        let s = to_mut(from_elem(nelems, elem));\n+        let s = cast_to_mut(from_elem(nelems, elem));\n         Big(~BigBitv(move s))\n     };\n     Bitv {rep: move rep, nbits: nbits}\n@@ -516,7 +516,7 @@ impl Bitv: Clone {\n             Bitv{nbits: self.nbits, rep: Small(~SmallBitv{bits: b.bits})}\n           }\n           Big(ref b) => {\n-            let st = to_mut(from_elem(self.nbits / uint_bits + 1, 0));\n+            let st = cast_to_mut(from_elem(self.nbits / uint_bits + 1, 0));\n             let len = st.len();\n             for uint::range(0, len) |i| { st[i] = b.storage[i]; };\n             Bitv{nbits: self.nbits, rep: Big(~BigBitv{storage: move st})}"}, {"sha": "2fcf3b68521dba0169d0ce32df6a5ec0aac4567c", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -222,7 +222,7 @@ pub type Result = result::Result<Matches, Fail_>;\n pub fn getopts(args: &[~str], opts: &[Opt]) -> Result unsafe {\n     let n_opts = opts.len();\n     fn f(_x: uint) -> ~[Optval] { return ~[]; }\n-    let vals = vec::to_mut(vec::from_fn(n_opts, f));\n+    let vals = vec::cast_to_mut(vec::from_fn(n_opts, f));\n     let mut free: ~[~str] = ~[];\n     let l = args.len();\n     let mut i = 0;\n@@ -337,7 +337,7 @@ pub fn getopts(args: &[~str], opts: &[Opt]) -> Result unsafe {\n         i += 1;\n     }\n     return Ok(Matches {opts: vec::from_slice(opts),\n-               vals: vec::from_mut(move vals),\n+               vals: vec::cast_from_mut(move vals),\n                free: free});\n }\n "}, {"sha": "47b75e901f1bfd15553b7d2a744cb68fa2ac51aa", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -450,7 +450,7 @@ pub mod chained {\n     }\n \n     fn chains<K,V>(nchains: uint) -> ~[mut Option<@Entry<K,V>>] {\n-        vec::to_mut(vec::from_elem(nchains, None))\n+        vec::cast_to_mut(vec::from_elem(nchains, None))\n     }\n \n     pub fn mk<K:Eq IterBytes Hash, V: Copy>() -> T<K,V> {"}, {"sha": "06b6aca6895d6b644ed58f41a260c1b3282a5f42", "filename": "src/libstd/md4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmd4.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -47,7 +47,7 @@ pub pure fn md4(msg: &[u8]) -> {a: u32, b: u32, c: u32, d: u32} {\n \n     let mut i = 0u;\n     let e = vec::len(msg);\n-    let x = vec::to_mut(vec::from_elem(16u, 0u32));\n+    let x = vec::cast_to_mut(vec::from_elem(16u, 0u32));\n     while i < e {\n         let aa = a, bb = b, cc = c, dd = d;\n "}, {"sha": "8b769cea2c92b3a28d59974627cb06b6bd168c87", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -176,7 +176,7 @@ pub fn concat(v: ~[Rope]) -> Rope {\n     //Copy `v` into a mut vector\n     let mut len = vec::len(v);\n     if len == 0u { return node::Empty; }\n-    let ropes = vec::to_mut(vec::from_elem(len, v[0]));\n+    let ropes = vec::cast_to_mut(vec::from_elem(len, v[0]));\n     for uint::range(1u, len) |i| {\n        ropes[i] = v[i];\n     }\n@@ -720,7 +720,7 @@ pub mod node {\n             //Firstly, split `str` in slices of hint_max_leaf_char_len\n             let mut leaves = uint::div_ceil(char_len, hint_max_leaf_char_len);\n             //Number of leaves\n-            let nodes  = vec::to_mut(vec::from_elem(leaves, candidate));\n+            let nodes  = vec::cast_to_mut(vec::from_elem(leaves, candidate));\n \n             let mut i = 0u;\n             let mut offset = byte_start;\n@@ -832,7 +832,7 @@ pub mod node {\n     }\n \n     pub fn serialize_node(node: @Node) -> ~str unsafe {\n-        let mut buf = vec::to_mut(vec::from_elem(byte_len(node), 0u8));\n+        let mut buf = vec::cast_to_mut(vec::from_elem(byte_len(node), 0u8));\n         let mut offset = 0u;//Current position in the buffer\n         let it = leaf_iterator::start(node);\n         loop {\n@@ -1158,7 +1158,8 @@ pub mod node {\n         }\n \n         pub fn start(node: @Node) -> T {\n-            let stack = vec::to_mut(vec::from_elem(height(node)+1u, node));\n+            let stack = vec::cast_to_mut(\n+                vec::from_elem(height(node)+1u, node));\n             return {\n                 stack:         move stack,\n                 mut stackpos:  0"}, {"sha": "56f490f7673a053d7862a3ef37ebdfdab82592b8", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -259,13 +259,13 @@ pub fn sha1() -> Sha1 {\n         }\n     }\n     let st = {\n-        h: vec::to_mut(vec::from_elem(digest_buf_len, 0u32)),\n+        h: vec::cast_to_mut(vec::from_elem(digest_buf_len, 0u32)),\n         mut len_low: 0u32,\n         mut len_high: 0u32,\n-        msg_block: vec::to_mut(vec::from_elem(msg_block_len, 0u8)),\n+        msg_block: vec::cast_to_mut(vec::from_elem(msg_block_len, 0u8)),\n         mut msg_block_idx: 0u,\n         mut computed: false,\n-        work_buf: @vec::to_mut(vec::from_elem(work_buf_len, 0u32))\n+        work_buf: @vec::cast_to_mut(vec::from_elem(work_buf_len, 0u32))\n     };\n     let sh = (move st) as Sha1;\n     sh.reset();"}, {"sha": "cce3dc725da77dc8b808bc3f9bd23b7251308198", "filename": "src/libstd/sort.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Fsort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Fsort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsort.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -457,7 +457,7 @@ impl<T: Copy Ord> MergeState<T> {\n                 base2: uint, len2: uint) {\n         assert len1 != 0 && len2 != 0 && base1+len1 == base2;\n \n-        let tmp = vec::to_mut(vec::slice(array, base1, base1+len1));\n+        let tmp = vec::cast_to_mut(vec::slice(array, base1, base1+len1));\n \n         let mut c1 = 0;\n         let mut c2 = base2;\n@@ -560,7 +560,7 @@ impl<T: Copy Ord> MergeState<T> {\n                 base2: uint, len2: uint) {\n         assert len1 != 1 && len2 != 0 && base1 + len1 == base2;\n \n-        let tmp = vec::to_mut(vec::slice(array, base2, base2+len2));\n+        let tmp = vec::cast_to_mut(vec::slice(array, base2, base2+len2));\n \n         let mut c1 = base1 + len1 - 1;\n         let mut c2 = len2 - 1;\n@@ -816,7 +816,7 @@ mod test_qsort {\n \n         do quick_sort(names) |x, y| { int::le(*x, *y) };\n \n-        let immut_names = vec::from_mut(move names);\n+        let immut_names = vec::cast_from_mut(move names);\n \n         let pairs = vec::zip_slice(expected, immut_names);\n         for vec::each(pairs) |p| {\n@@ -1025,7 +1025,7 @@ mod big_tests {\n         let res = do vec::from_fn(num) |i| {\n             arr[i % size]\n         };\n-        vec::to_mut(move res)\n+        vec::cast_to_mut(move res)\n     }\n \n     fn makeRange(n: uint) -> ~[uint] {\n@@ -1051,7 +1051,7 @@ mod big_tests {\n             let arr = do vec::from_fn(n) |_i| {\n                 rng.gen_float()\n             };\n-            let arr = vec::to_mut(move arr);\n+            let arr = vec::cast_to_mut(move arr);\n \n             tim_sort(arr); // *sort\n             isSorted(arr);\n@@ -1123,7 +1123,7 @@ mod big_tests {\n             let arr = do vec::from_fn(n) |_i| {\n                 @rng.gen_float()\n             };\n-            let arr = vec::to_mut(move arr);\n+            let arr = vec::cast_to_mut(move arr);\n \n             tim_sort(arr); // *sort\n             isSorted(arr);"}, {"sha": "03ef98d09c5c05c9d977a822a054acdae34a4b34", "filename": "src/libstd/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibstd%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -97,7 +97,7 @@ fn new_sem_and_signal(count: int, num_condvars: uint)\n     for num_condvars.times {\n         queues.push(new_waitqueue());\n     }\n-    new_sem(count, vec::to_mut(move queues))\n+    new_sem(count, vec::cast_to_mut(move queues))\n }\n \n #[doc(hidden)]"}, {"sha": "56fe46251e9d274f486cfc84f83b9dcae7ccbc33", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -304,9 +304,9 @@ fn sort_meta_items(+items: ~[@ast::meta_item]) -> ~[@ast::meta_item] {\n     }\n \n     // This is sort of stupid here, converting to a vec of mutables and back\n-    let v: ~[mut @ast::meta_item] = vec::to_mut(items);\n+    let v: ~[mut @ast::meta_item] = vec::cast_to_mut(items);\n     std::sort::quick_sort(v, lteq);\n-    vec::from_mut(move v)\n+    vec::cast_from_mut(move v)\n }\n \n fn remove_meta_items_by_name(items: ~[@ast::meta_item], name: ~str) ->"}, {"sha": "6bc23aa1271897bdb86373ccaddc0a4255282130", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -142,9 +142,9 @@ fn mk_printer(out: io::Writer, linewidth: uint) -> printer {\n     // fall behind.\n     let n: uint = 3 * linewidth;\n     debug!(\"mk_printer %u\", linewidth);\n-    let token: ~[mut token] = vec::to_mut(vec::from_elem(n, EOF));\n-    let size: ~[mut int] = vec::to_mut(vec::from_elem(n, 0));\n-    let scan_stack: ~[mut uint] = vec::to_mut(vec::from_elem(n, 0u));\n+    let token: ~[mut token] = vec::cast_to_mut(vec::from_elem(n, EOF));\n+    let size: ~[mut int] = vec::cast_to_mut(vec::from_elem(n, 0));\n+    let scan_stack: ~[mut uint] = vec::cast_to_mut(vec::from_elem(n, 0u));\n     printer_(@{out: out,\n                buf_len: n,\n                mut margin: linewidth as int,"}, {"sha": "58cc6a1513c5f7e793660bdbc3d700eb3c4b7b5d", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -122,7 +122,7 @@ fn gen_search_keys(graph: graph, n: uint) -> ~[node_id] {\n  */\n fn bfs(graph: graph, key: node_id) -> bfs_result {\n     let marks : ~[mut node_id] \n-        = vec::to_mut(vec::from_elem(vec::len(graph), -1i64));\n+        = vec::cast_to_mut(vec::from_elem(vec::len(graph), -1i64));\n \n     let Q = deque::create();\n \n@@ -141,7 +141,7 @@ fn bfs(graph: graph, key: node_id) -> bfs_result {\n         };\n     }\n \n-    vec::from_mut(move marks)\n+    vec::cast_from_mut(move marks)\n }\n \n /**"}, {"sha": "bb790a94ae47ba38359297abd3da7a92dbca2fc7", "filename": "src/test/bench/shootout-fannkuchredux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -14,9 +14,9 @@ extern mod std;\n fn fannkuch(n: int) -> int {\n     fn perm1init(i: uint) -> int { return i as int; }\n \n-    let perm = vec::to_mut(vec::from_elem(n as uint, 0));\n-    let perm1 = vec::to_mut(vec::from_fn(n as uint, |i| perm1init(i)));\n-    let count = vec::to_mut(vec::from_elem(n as uint, 0));\n+    let perm = vec::cast_to_mut(vec::from_elem(n as uint, 0));\n+    let perm1 = vec::cast_to_mut(vec::from_fn(n as uint, |i| perm1init(i)));\n+    let count = vec::cast_to_mut(vec::from_elem(n as uint, 0));\n     let mut f = 0;\n     let mut i = 0;\n     let mut k = 0;"}, {"sha": "a2f83e3f84f3479ff1bc752c85ab1348af05a777", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -151,7 +151,7 @@ fn main() {\n    // initialize each sequence sorter\n    let sizes = ~[1,2,3,4,6,12,18];\n     let streams = vec::map(sizes, |_sz| Some(stream()));\n-    let streams = vec::to_mut(move streams);\n+    let streams = vec::cast_to_mut(move streams);\n     let mut from_child = ~[];\n     let to_child   = vec::mapi(sizes, |ii, sz| {\n         let sz = *sz;"}, {"sha": "89827c8be775986d6dbd9f4d67df8a3fd6b6d34c", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -45,7 +45,7 @@ fn eval_At_times_u(u: &[const float], Au: &[mut float]) {\n }\n \n fn eval_AtA_times_u(u: &[const float], AtAu: &[mut float]) {\n-    let v = vec::to_mut(vec::from_elem(vec::len(u), 0.0));\n+    let v = vec::cast_to_mut(vec::from_elem(vec::len(u), 0.0));\n     eval_A_times_u(u, v);\n     eval_At_times_u(v, AtAu);\n }\n@@ -62,8 +62,8 @@ fn main() {\n \n     let N = uint::from_str(args[1]).get();\n \n-    let u = vec::to_mut(vec::from_elem(N, 1.0));\n-    let v = vec::to_mut(vec::from_elem(N, 0.0));\n+    let u = vec::cast_to_mut(vec::from_elem(N, 1.0));\n+    let v = vec::cast_to_mut(vec::from_elem(N, 0.0));\n     let mut i = 0u;\n     while i < 10u {\n         eval_AtA_times_u(u, v);"}, {"sha": "ffd169c7081c862c311da810892d00006ba1bcc7", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -42,7 +42,7 @@ fn read_grid(f: io::Reader) -> grid_t {\n     assert f.read_line() == ~\"9,9\"; /* assert first line is exactly \"9,9\" */\n \n     let g = vec::from_fn(10u, {|_i|\n-        vec::to_mut(vec::from_elem(10u, 0 as u8))\n+        vec::cast_to_mut(vec::from_elem(10u, 0 as u8))\n     });\n     while !f.eof() {\n         let comps = str::split_char(str::trim(f.read_line()), ',');\n@@ -142,7 +142,7 @@ fn main() {\n         // FIXME create sudoku inline since nested vec consts dont work yet\n         // (#3733)\n         let g = vec::from_fn(10u, |_i| {\n-            vec::to_mut(vec::from_elem(10u, 0 as u8))\n+            vec::cast_to_mut(vec::from_elem(10u, 0 as u8))\n         });\n         g[0][1] = 4u8;\n         g[0][3] = 6u8;"}, {"sha": "56756086a2603f9655afe42254471027b0144c35", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    use vec::to_mut;\n-    log(debug, vec::len(to_mut(~[1, 2])));\n+    use vec::cast_to_mut;\n+    log(debug, vec::len(cast_to_mut(~[1, 2])));\n     {\n         use vec::*;\n         log(debug, len(~[2]));"}, {"sha": "50ca15cbd1d6be8d249c077f68ff25e73f6eed6a", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/995ccc0d8217418ffbb621109297aa7e78ed33b0/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=995ccc0d8217418ffbb621109297aa7e78ed33b0", "patch": "@@ -72,7 +72,7 @@ fn AsciiArt(width: uint, height: uint, fill: char) -> AsciiArt\n             {\n                 let mut line = ~[];   \n                 vec::grow_set(&mut line, width-1, &'.', '.');\n-                push(vec::to_mut(line));\n+                push(vec::cast_to_mut(line));\n             }\n         };\n "}]}