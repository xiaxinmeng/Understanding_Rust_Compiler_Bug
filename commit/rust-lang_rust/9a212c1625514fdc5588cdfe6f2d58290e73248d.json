{"sha": "9a212c1625514fdc5588cdfe6f2d58290e73248d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMjEyYzE2MjU1MTRmZGM1NTg4Y2RmZTZmMmQ1ODI5MGU3MzI0OGQ=", "commit": {"author": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-05-01T13:59:09Z"}, "committer": {"name": "Donough Liu", "email": "ldm2993593805@163.com", "date": "2020-05-02T04:04:03Z"}, "message": "Replace convenient function `remove_prefix()` with `replace_prefix()`", "tree": {"sha": "cba26fd5bc34e9e3d06bb1cd50fddaaf5636ec59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cba26fd5bc34e9e3d06bb1cd50fddaaf5636ec59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a212c1625514fdc5588cdfe6f2d58290e73248d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a212c1625514fdc5588cdfe6f2d58290e73248d", "html_url": "https://github.com/rust-lang/rust/commit/9a212c1625514fdc5588cdfe6f2d58290e73248d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a212c1625514fdc5588cdfe6f2d58290e73248d/comments", "author": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ldm0", "id": 31354274, "node_id": "MDQ6VXNlcjMxMzU0Mjc0", "avatar_url": "https://avatars.githubusercontent.com/u/31354274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ldm0", "html_url": "https://github.com/ldm0", "followers_url": "https://api.github.com/users/ldm0/followers", "following_url": "https://api.github.com/users/ldm0/following{/other_user}", "gists_url": "https://api.github.com/users/ldm0/gists{/gist_id}", "starred_url": "https://api.github.com/users/ldm0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ldm0/subscriptions", "organizations_url": "https://api.github.com/users/ldm0/orgs", "repos_url": "https://api.github.com/users/ldm0/repos", "events_url": "https://api.github.com/users/ldm0/events{/privacy}", "received_events_url": "https://api.github.com/users/ldm0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "089d4bbfd79c4ae2e735154cff4448ecd5fc4afc", "url": "https://api.github.com/repos/rust-lang/rust/commits/089d4bbfd79c4ae2e735154cff4448ecd5fc4afc", "html_url": "https://github.com/rust-lang/rust/commit/089d4bbfd79c4ae2e735154cff4448ecd5fc4afc"}], "stats": {"total": 111, "additions": 60, "deletions": 51}, "files": [{"sha": "9e14efb67a94ca5df426bb0fb66bbbfad8662a7e", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 60, "deletions": 49, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/9a212c1625514fdc5588cdfe6f2d58290e73248d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a212c1625514fdc5588cdfe6f2d58290e73248d/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=9a212c1625514fdc5588cdfe6f2d58290e73248d", "patch": "@@ -353,6 +353,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n+    fn replace_prefix<A, B, C>(&self, s: A, old: B, new: C) -> Option<String>\n+    where\n+        A: AsRef<str>,\n+        B: AsRef<str>,\n+        C: AsRef<str>,\n+    {\n+        let s = s.as_ref();\n+        let old = old.as_ref();\n+        if s.starts_with(old) { Some(new.as_ref().to_owned() + &s[old.len()..]) } else { None }\n+    }\n+\n     /// This function is used to determine potential \"simple\" improvements or users' errors and\n     /// provide them useful help. For example:\n     ///\n@@ -393,20 +404,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // `ExprKind::DropTemps` is semantically irrelevant for these suggestions.\n         let expr = expr.peel_drop_temps();\n \n-        let remove_prefix = |s: String, prefix: &str| {\n-            if s.starts_with(prefix) { Some(s[prefix.len()..].to_string()) } else { None }\n-        };\n-\n         match (&expr.kind, &expected.kind, &checked_ty.kind) {\n             (_, &ty::Ref(_, exp, _), &ty::Ref(_, check, _)) => match (&exp.kind, &check.kind) {\n                 (&ty::Str, &ty::Array(arr, _) | &ty::Slice(arr)) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            if let Some(src) = remove_prefix(src, \"b\\\"\") {\n+                            if let Some(src) = self.replace_prefix(src, \"b\\\"\", \"\\\"\") {\n                                 return Some((\n                                     sp,\n                                     \"consider removing the leading `b`\",\n-                                    format!(\"\\\"{}\", src),\n+                                    src,\n                                     Applicability::MachineApplicable,\n                                 ));\n                             }\n@@ -416,11 +423,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (&ty::Array(arr, _) | &ty::Slice(arr), &ty::Str) if arr == self.tcx.types.u8 => {\n                     if let hir::ExprKind::Lit(_) = expr.kind {\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            if let Some(src) = remove_prefix(src, \"\\\"\") {\n+                            if let Some(src) = self.replace_prefix(src, \"\\\"\", \"b\\\"\") {\n                                 return Some((\n                                     sp,\n                                     \"consider adding a leading `b`\",\n-                                    format!(\"b\\\"{}\", src),\n+                                    src,\n                                     Applicability::MachineApplicable,\n                                 ));\n                             }\n@@ -539,7 +546,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // we may want to suggest removing a `&`.\n                 if sm.is_imported(expr.span) {\n                     if let Ok(src) = sm.span_to_snippet(sp) {\n-                        if let Some(src) = remove_prefix(src, \"&\") {\n+                        if let Some(src) = self.replace_prefix(src, \"&\", \"\") {\n                             return Some((\n                                 sp,\n                                 \"consider removing the borrow\",\n@@ -569,52 +576,56 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if steps > 0 {\n                         // The pointer type implements `Copy` trait so the suggestion is always valid.\n                         if let Ok(src) = sm.span_to_snippet(sp) {\n-                            let derefs = \"*\".repeat(steps);\n-                            match mutbl_b {\n-                                hir::Mutability::Mut => match mutbl_a {\n-                                    hir::Mutability::Mut => {\n-                                        if let Some(src) = remove_prefix(src, \"&mut \") {\n-                                            return Some((\n-                                                sp,\n-                                                \"consider dereferencing\",\n-                                                format!(\"&mut {}{}\", derefs, src),\n-                                                Applicability::MachineApplicable,\n-                                            ));\n+                            let derefs = &\"*\".repeat(steps);\n+                            if let Some((src, applicability)) = match mutbl_b {\n+                                hir::Mutability::Mut => {\n+                                    let new_prefix = \"&mut \".to_owned() + derefs;\n+                                    match mutbl_a {\n+                                        hir::Mutability::Mut => {\n+                                            if let Some(s) =\n+                                                self.replace_prefix(src, \"&mut \", new_prefix)\n+                                            {\n+                                                Some((s, Applicability::MachineApplicable))\n+                                            } else {\n+                                                None\n+                                            }\n                                         }\n-                                    }\n-                                    hir::Mutability::Not => {\n-                                        if let Some(src) = remove_prefix(src, \"&\") {\n-                                            return Some((\n-                                                sp,\n-                                                \"consider dereferencing\",\n-                                                format!(\"&mut {}{}\", derefs, src),\n-                                                Applicability::Unspecified,\n-                                            ));\n+                                        hir::Mutability::Not => {\n+                                            if let Some(s) =\n+                                                self.replace_prefix(src, \"&\", new_prefix)\n+                                            {\n+                                                Some((s, Applicability::Unspecified))\n+                                            } else {\n+                                                None\n+                                            }\n                                         }\n                                     }\n-                                },\n-                                hir::Mutability::Not => match mutbl_a {\n-                                    hir::Mutability::Mut => {\n-                                        if let Some(src) = remove_prefix(src, \"&mut \") {\n-                                            return Some((\n-                                                sp,\n-                                                \"consider dereferencing\",\n-                                                format!(\"&{}{}\", derefs, src),\n-                                                Applicability::MachineApplicable,\n-                                            ));\n+                                }\n+                                hir::Mutability::Not => {\n+                                    let new_prefix = \"&\".to_owned() + derefs;\n+                                    match mutbl_a {\n+                                        hir::Mutability::Mut => {\n+                                            if let Some(s) =\n+                                                self.replace_prefix(src, \"&mut \", new_prefix)\n+                                            {\n+                                                Some((s, Applicability::MachineApplicable))\n+                                            } else {\n+                                                None\n+                                            }\n                                         }\n-                                    }\n-                                    hir::Mutability::Not => {\n-                                        if let Some(src) = remove_prefix(src, \"&\") {\n-                                            return Some((\n-                                                sp,\n-                                                \"consider dereferencing\",\n-                                                format!(\"&{}{}\", derefs, src),\n-                                                Applicability::MachineApplicable,\n-                                            ));\n+                                        hir::Mutability::Not => {\n+                                            if let Some(s) =\n+                                                self.replace_prefix(src, \"&\", new_prefix)\n+                                            {\n+                                                Some((s, Applicability::MachineApplicable))\n+                                            } else {\n+                                                None\n+                                            }\n                                         }\n                                     }\n-                                },\n+                                }\n+                            } {\n+                                return Some((sp, \"consider dereferencing\", src, applicability));\n                             }\n                         }\n                     }"}, {"sha": "cbc0e8c061b820184dfa45ebe77b80383c465947", "filename": "src/test/ui/issues/issue-71676-1.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a212c1625514fdc5588cdfe6f2d58290e73248d/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9a212c1625514fdc5588cdfe6f2d58290e73248d/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.fixed?ref=9a212c1625514fdc5588cdfe6f2d58290e73248d", "patch": "@@ -50,5 +50,4 @@ fn main() {\n \n     let mut a = Emm(Foo(Bar(0)));\n     let _: *mut u8 = &mut ***a; //~ ERROR mismatched types\n-\n }"}, {"sha": "6e87c7174c6335f0b01acaced49609cf89a36ba2", "filename": "src/test/ui/issues/issue-71676-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a212c1625514fdc5588cdfe6f2d58290e73248d/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a212c1625514fdc5588cdfe6f2d58290e73248d/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71676-1.rs?ref=9a212c1625514fdc5588cdfe6f2d58290e73248d", "patch": "@@ -50,5 +50,4 @@ fn main() {\n \n     let mut a = Emm(Foo(Bar(0)));\n     let _: *mut u8 = &mut a; //~ ERROR mismatched types\n-\n }"}]}