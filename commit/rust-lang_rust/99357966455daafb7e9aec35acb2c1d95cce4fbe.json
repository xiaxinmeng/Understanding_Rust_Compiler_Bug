{"sha": "99357966455daafb7e9aec35acb2c1d95cce4fbe", "node_id": "C_kwDOAAsO6NoAKDk5MzU3OTY2NDU1ZGFhZmI3ZTlhZWMzNWFjYjJjMWQ5NWNjZTRmYmU", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-07-08T00:56:22Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-07-08T02:14:01Z"}, "message": "Add bound_const_param_default", "tree": {"sha": "d4cd103be024568e4d1e087fc55345479786575b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4cd103be024568e4d1e087fc55345479786575b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99357966455daafb7e9aec35acb2c1d95cce4fbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99357966455daafb7e9aec35acb2c1d95cce4fbe", "html_url": "https://github.com/rust-lang/rust/commit/99357966455daafb7e9aec35acb2c1d95cce4fbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99357966455daafb7e9aec35acb2c1d95cce4fbe/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f16584357dfa2a5e232548ea443af0fab02caa1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f16584357dfa2a5e232548ea443af0fab02caa1a", "html_url": "https://github.com/rust-lang/rust/commit/f16584357dfa2a5e232548ea443af0fab02caa1a"}], "stats": {"total": 25, "additions": 15, "deletions": 10}, "files": [{"sha": "add2df25884e3f1b7e1406b5e503f5dd9b0f0902", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99357966455daafb7e9aec35acb2c1d95cce4fbe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99357966455daafb7e9aec35acb2c1d95cce4fbe/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=99357966455daafb7e9aec35acb2c1d95cce4fbe", "patch": "@@ -85,10 +85,10 @@ impl GenericParamDef {\n     ) -> Option<EarlyBinder<ty::GenericArg<'tcx>>> {\n         match self.kind {\n             GenericParamDefKind::Type { has_default, .. } if has_default => {\n-                Some(EarlyBinder(tcx.type_of(self.def_id).into()))\n+                Some(tcx.bound_type_of(self.def_id).map_bound(|t| t.into()))\n             }\n             GenericParamDefKind::Const { has_default } if has_default => {\n-                Some(EarlyBinder(tcx.const_param_default(self.def_id).into()))\n+                Some(tcx.bound_const_param_default(self.def_id).map_bound(|c| c.into()))\n             }\n             _ => None,\n         }"}, {"sha": "923161bcfe9d385be17df12756104881b96394ad", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99357966455daafb7e9aec35acb2c1d95cce4fbe/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99357966455daafb7e9aec35acb2c1d95cce4fbe/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=99357966455daafb7e9aec35acb2c1d95cce4fbe", "patch": "@@ -676,6 +676,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> ty::EarlyBinder<&'tcx ty::List<ty::Predicate<'tcx>>> {\n         ty::EarlyBinder(self.item_bounds(def_id))\n     }\n+\n+    pub fn bound_const_param_default(self, def_id: DefId) -> ty::EarlyBinder<ty::Const<'tcx>> {\n+        ty::EarlyBinder(self.const_param_default(def_id))\n+    }\n }\n \n struct OpaqueTypeExpander<'tcx> {"}, {"sha": "1d4e64b6bfc303c747062128738b77ab0f989c76", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99357966455daafb7e9aec35acb2c1d95cce4fbe/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99357966455daafb7e9aec35acb2c1d95cce4fbe/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=99357966455daafb7e9aec35acb2c1d95cce4fbe", "patch": "@@ -550,7 +550,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     GenericParamDefKind::Const { has_default } => {\n                         let ty = tcx.at(self.span).type_of(param.def_id);\n                         if !infer_args && has_default {\n-                            EarlyBinder(tcx.const_param_default(param.def_id))\n+                            tcx.bound_const_param_default(param.def_id)\n                                 .subst(tcx, substs.unwrap())\n                                 .into()\n                         } else {"}, {"sha": "7d4c3f1e31bdf9a0a1452b13a1240525631ae7f4", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99357966455daafb7e9aec35acb2c1d95cce4fbe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99357966455daafb7e9aec35acb2c1d95cce4fbe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=99357966455daafb7e9aec35acb2c1d95cce4fbe", "patch": "@@ -1426,7 +1426,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                     GenericParamDefKind::Const { has_default } => {\n                         if !infer_args && has_default {\n-                            EarlyBinder(tcx.const_param_default(param.def_id))\n+                            tcx.bound_const_param_default(param.def_id)\n                                 .subst(tcx, substs.unwrap())\n                                 .into()\n                         } else {"}, {"sha": "a851fd63b5c83568f2eaee610ecfe329aca46e5d", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/99357966455daafb7e9aec35acb2c1d95cce4fbe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99357966455daafb7e9aec35acb2c1d95cce4fbe/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=99357966455daafb7e9aec35acb2c1d95cce4fbe", "patch": "@@ -21,9 +21,7 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n-use rustc_middle::ty::{\n-    self, EarlyBinder, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeVisitable,\n-};\n+use rustc_middle::ty::{self, ParamEnvAnd, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeVisitable};\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::lev_distance::{\n@@ -713,7 +711,7 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n             }\n \n             let (impl_ty, impl_substs) = self.impl_ty_and_substs(impl_def_id);\n-            let impl_ty = EarlyBinder(impl_ty).subst(self.tcx, impl_substs);\n+            let impl_ty = impl_ty.subst(self.tcx, impl_substs);\n \n             debug!(\"impl_ty: {:?}\", impl_ty);\n \n@@ -1812,8 +1810,11 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n     }\n \n     /// Gets the type of an impl and generate substitutions with placeholders.\n-    fn impl_ty_and_substs(&self, impl_def_id: DefId) -> (Ty<'tcx>, SubstsRef<'tcx>) {\n-        (self.tcx.type_of(impl_def_id), self.fresh_item_substs(impl_def_id))\n+    fn impl_ty_and_substs(\n+        &self,\n+        impl_def_id: DefId,\n+    ) -> (ty::EarlyBinder<Ty<'tcx>>, SubstsRef<'tcx>) {\n+        (self.tcx.bound_type_of(impl_def_id), self.fresh_item_substs(impl_def_id))\n     }\n \n     fn fresh_item_substs(&self, def_id: DefId) -> SubstsRef<'tcx> {"}]}