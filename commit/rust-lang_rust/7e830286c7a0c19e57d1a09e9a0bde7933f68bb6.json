{"sha": "7e830286c7a0c19e57d1a09e9a0bde7933f68bb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlODMwMjg2YzdhMGMxOWU1N2QxYTA5ZTlhMGJkZTc5MzNmNjhiYjY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-24T12:28:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-24T12:28:16Z"}, "message": "fix reoccurring typo", "tree": {"sha": "9d685a208bbd0a5f4283f6516ef4b164ce777ada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d685a208bbd0a5f4283f6516ef4b164ce777ada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e830286c7a0c19e57d1a09e9a0bde7933f68bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e830286c7a0c19e57d1a09e9a0bde7933f68bb6", "html_url": "https://github.com/rust-lang/rust/commit/7e830286c7a0c19e57d1a09e9a0bde7933f68bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e830286c7a0c19e57d1a09e9a0bde7933f68bb6/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38104abf63fe70b63fe9d26de8ed3a8cab56f7b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/38104abf63fe70b63fe9d26de8ed3a8cab56f7b7", "html_url": "https://github.com/rust-lang/rust/commit/38104abf63fe70b63fe9d26de8ed3a8cab56f7b7"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "c8bf250d02b36cc82f2c77794b52b94e935bae38", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7e830286c7a0c19e57d1a09e9a0bde7933f68bb6/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e830286c7a0c19e57d1a09e9a0bde7933f68bb6/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=7e830286c7a0c19e57d1a09e9a0bde7933f68bb6", "patch": "@@ -147,7 +147,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// even when new allocations are pushed to the `HashMap`. `copy_repeatedly` relies\n     /// on that.\n     ///\n-    /// It is the callers responsibility to check bounds and alignment beforehand.\n+    /// It is the caller's responsibility to check bounds and alignment beforehand.\n     fn get_bytes_internal(\n         &self,\n         cx: &impl HasDataLayout,\n@@ -174,7 +174,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// Check that these bytes are initialized and not pointer bytes, and then return them\n     /// as a slice.\n     ///\n-    /// It is the callers responsibility to check bounds and alignment beforehand.\n+    /// It is the caller's responsibility to check bounds and alignment beforehand.\n     #[inline]\n     pub fn get_bytes(\n         &self,\n@@ -189,7 +189,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// It is the caller's responsibility to handle undefined and pointer bytes.\n     /// However, this still checks that there are no relocations on the *edges*.\n     ///\n-    /// It is the callers responsibility to check bounds and alignment beforehand.\n+    /// It is the caller's responsibility to check bounds and alignment beforehand.\n     #[inline]\n     pub fn get_bytes_with_undef_and_ptr(\n         &self,\n@@ -204,7 +204,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// Just calling this already marks everything as defined and removes relocations,\n     /// so be sure to actually put data there!\n     ///\n-    /// It is the callers responsibility to check bounds and alignment beforehand.\n+    /// It is the caller's responsibility to check bounds and alignment beforehand.\n     pub fn get_bytes_mut(\n         &mut self,\n         cx: &impl HasDataLayout,\n@@ -271,7 +271,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n \n     /// Writes `src` to the memory starting at `ptr.offset`.\n     ///\n-    /// It is the callers responsibility to check bounds and alignment beforehand.\n+    /// It is the caller's responsibility to check bounds and alignment beforehand.\n     pub fn write_bytes(\n         &mut self,\n         cx: &impl HasDataLayout,\n@@ -286,7 +286,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n \n     /// Sets `count` bytes starting at `ptr.offset` with `val`. Basically `memset`.\n     ///\n-    /// It is the callers responsibility to check bounds and alignment beforehand.\n+    /// It is the caller's responsibility to check bounds and alignment beforehand.\n     pub fn write_repeat(\n         &mut self,\n         cx: &impl HasDataLayout,\n@@ -309,7 +309,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// * in oder to obtain a `Pointer` we need to check for ZSTness anyway due to integer pointers\n     ///   being valid for ZSTs\n     ///\n-    /// It is the callers responsibility to check bounds and alignment beforehand.\n+    /// It is the caller's responsibility to check bounds and alignment beforehand.\n     pub fn read_scalar(\n         &self,\n         cx: &impl HasDataLayout,\n@@ -347,7 +347,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n \n     /// Read a pointer-sized scalar.\n     ///\n-    /// It is the callers responsibility to check bounds and alignment beforehand.\n+    /// It is the caller's responsibility to check bounds and alignment beforehand.\n     pub fn read_ptr_sized(\n         &self,\n         cx: &impl HasDataLayout,\n@@ -364,7 +364,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n     /// * in oder to obtain a `Pointer` we need to check for ZSTness anyway due to integer pointers\n     ///   being valid for ZSTs\n     ///\n-    /// It is the callers responsibility to check bounds and alignment beforehand.\n+    /// It is the caller's responsibility to check bounds and alignment beforehand.\n     pub fn write_scalar(\n         &mut self,\n         cx: &impl HasDataLayout,\n@@ -406,7 +406,7 @@ impl<'tcx, Tag: Copy, Extra: AllocationExtra<Tag>> Allocation<Tag, Extra> {\n \n     /// Write a pointer-sized scalar.\n     ///\n-    /// It is the callers responsibility to check bounds and alignment beforehand.\n+    /// It is the caller's responsibility to check bounds and alignment beforehand.\n     pub fn write_ptr_sized(\n         &mut self,\n         cx: &impl HasDataLayout,"}]}