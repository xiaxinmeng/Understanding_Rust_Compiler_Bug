{"sha": "d034ae53c43352b06341455fb1394cb5d4069999", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwMzRhZTUzYzQzMzUyYjA2MzQxNDU1ZmIxMzk0Y2I1ZDQwNjk5OTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-22T18:55:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-22T18:55:54Z"}, "message": "Auto merge of #50969 - nikomatsakis:issue-50673-broken-migration-lint, r=alexcrichton\n\nfix suggestions with nested paths\n\nFixes #50673\n\ncc @Manishearth @petrochenkov\nr? @alexcrichton", "tree": {"sha": "2215f3ab4713afba2ec61bbc7dc13382d9989011", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2215f3ab4713afba2ec61bbc7dc13382d9989011"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d034ae53c43352b06341455fb1394cb5d4069999", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d034ae53c43352b06341455fb1394cb5d4069999", "html_url": "https://github.com/rust-lang/rust/commit/d034ae53c43352b06341455fb1394cb5d4069999", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d034ae53c43352b06341455fb1394cb5d4069999/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0635188ed30e083245482218a0de9237f14ce90", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0635188ed30e083245482218a0de9237f14ce90", "html_url": "https://github.com/rust-lang/rust/commit/e0635188ed30e083245482218a0de9237f14ce90"}, {"sha": "dfd2a138eb81556fe7fd2c2745c0e18d25911084", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd2a138eb81556fe7fd2c2745c0e18d25911084", "html_url": "https://github.com/rust-lang/rust/commit/dfd2a138eb81556fe7fd2c2745c0e18d25911084"}], "stats": {"total": 279, "additions": 236, "deletions": 43}, "files": [{"sha": "2683a9982ac04d71f1f43dd7b22b92e89d7ced07", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d034ae53c43352b06341455fb1394cb5d4069999/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d034ae53c43352b06341455fb1394cb5d4069999/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=d034ae53c43352b06341455fb1394cb5d4069999", "patch": "@@ -100,6 +100,8 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn build_reduced_graph_for_use_tree(&mut self,\n+                                        root_use_tree: &ast::UseTree,\n+                                        root_id: NodeId,\n                                         use_tree: &ast::UseTree,\n                                         id: NodeId,\n                                         vis: ty::Visibility,\n@@ -182,7 +184,14 @@ impl<'a> Resolver<'a> {\n                     type_ns_only,\n                 };\n                 self.add_import_directive(\n-                    module_path, subclass, use_tree.span, id, vis, expansion,\n+                    module_path,\n+                    subclass,\n+                    use_tree.span,\n+                    id,\n+                    root_use_tree.span,\n+                    root_id,\n+                    vis,\n+                    expansion,\n                 );\n             }\n             ast::UseTreeKind::Glob => {\n@@ -191,7 +200,14 @@ impl<'a> Resolver<'a> {\n                     max_vis: Cell::new(ty::Visibility::Invisible),\n                 };\n                 self.add_import_directive(\n-                    module_path, subclass, use_tree.span, id, vis, expansion,\n+                    module_path,\n+                    subclass,\n+                    use_tree.span,\n+                    id,\n+                    root_use_tree.span,\n+                    root_id,\n+                    vis,\n+                    expansion,\n                 );\n             }\n             ast::UseTreeKind::Nested(ref items) => {\n@@ -226,7 +242,7 @@ impl<'a> Resolver<'a> {\n \n                 for &(ref tree, id) in items {\n                     self.build_reduced_graph_for_use_tree(\n-                        tree, id, vis, &prefix, true, item, expansion\n+                        root_use_tree, root_id, tree, id, vis, &prefix, true, item, expansion\n                     );\n                 }\n             }\n@@ -249,7 +265,7 @@ impl<'a> Resolver<'a> {\n                 };\n \n                 self.build_reduced_graph_for_use_tree(\n-                    use_tree, item.id, vis, &prefix, false, item, expansion,\n+                    use_tree, item.id, use_tree, item.id, vis, &prefix, false, item, expansion,\n                 );\n             }\n \n@@ -266,10 +282,12 @@ impl<'a> Resolver<'a> {\n                 let binding =\n                     (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.arenas);\n                 let directive = self.arenas.alloc_import_directive(ImportDirective {\n+                    root_id: item.id,\n                     id: item.id,\n                     parent,\n                     imported_module: Cell::new(Some(module)),\n                     subclass: ImportDirectiveSubclass::ExternCrate(orig_name),\n+                    root_span: item.span,\n                     span: item.span,\n                     module_path: Vec::new(),\n                     vis: Cell::new(vis),\n@@ -640,10 +658,12 @@ impl<'a> Resolver<'a> {\n \n         let (graph_root, arenas) = (self.graph_root, self.arenas);\n         let macro_use_directive = |span| arenas.alloc_import_directive(ImportDirective {\n+            root_id: item.id,\n             id: item.id,\n             parent: graph_root,\n             imported_module: Cell::new(Some(module)),\n             subclass: ImportDirectiveSubclass::MacroUse,\n+            root_span: span,\n             span,\n             module_path: Vec::new(),\n             vis: Cell::new(ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX))),"}, {"sha": "5f277d03c52382ea2e63f8d34998e3a960768d1b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 69, "deletions": 27, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/d034ae53c43352b06341455fb1394cb5d4069999/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d034ae53c43352b06341455fb1394cb5d4069999/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d034ae53c43352b06341455fb1394cb5d4069999", "patch": "@@ -12,6 +12,7 @@\n       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n+#![feature(crate_visibility_modifier)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]\n \n@@ -1634,11 +1635,17 @@ impl<'a> Resolver<'a> {\n             .map(|seg| Ident::new(seg.name, span))\n             .collect();\n         // FIXME (Manishearth): Intra doc links won't get warned of epoch changes\n-        match self.resolve_path(&path, Some(namespace), true, span, None) {\n+        match self.resolve_path(&path, Some(namespace), true, span, CrateLint::No) {\n             PathResult::Module(module) => *def = module.def().unwrap(),\n             PathResult::NonModule(path_res) if path_res.unresolved_segments() == 0 =>\n                 *def = path_res.base_def(),\n-            PathResult::NonModule(..) => match self.resolve_path(&path, None, true, span, None) {\n+            PathResult::NonModule(..) => match self.resolve_path(\n+                &path,\n+                None,\n+                true,\n+                span,\n+                CrateLint::No,\n+            ) {\n                 PathResult::Failed(span, msg, _) => {\n                     error_callback(self, span, ResolutionError::FailedToResolve(&msg));\n                 }\n@@ -2352,8 +2359,13 @@ impl<'a> Resolver<'a> {\n             if def != Def::Err {\n                 new_id = Some(def.def_id());\n                 let span = trait_ref.path.span;\n-                if let PathResult::Module(module) = self.resolve_path(&path, None, false, span,\n-                                                                      Some(trait_ref.ref_id)) {\n+                if let PathResult::Module(module) = self.resolve_path(\n+                    &path,\n+                    None,\n+                    false,\n+                    span,\n+                    CrateLint::SimplePath(trait_ref.ref_id),\n+                ) {\n                     new_val = Some((module, trait_ref.clone()));\n                 }\n             }\n@@ -2813,7 +2825,7 @@ impl<'a> Resolver<'a> {\n                 } else {\n                     let mod_path = &path[..path.len() - 1];\n                     let mod_prefix = match this.resolve_path(mod_path, Some(TypeNS),\n-                                                             false, span, None) {\n+                                                             false, span, CrateLint::No) {\n                         PathResult::Module(module) => module.def(),\n                         _ => None,\n                     }.map_or(format!(\"\"), |def| format!(\"{} \", def.kind_name()));\n@@ -3143,7 +3155,13 @@ impl<'a> Resolver<'a> {\n             ));\n         }\n \n-        let result = match self.resolve_path(&path, Some(ns), true, span, Some(id)) {\n+        let result = match self.resolve_path(\n+            &path,\n+            Some(ns),\n+            true,\n+            span,\n+            CrateLint::SimplePath(id),\n+        ) {\n             PathResult::NonModule(path_res) => path_res,\n             PathResult::Module(module) if !module.is_normal() => {\n                 PathResolution::new(module.def().unwrap())\n@@ -3180,7 +3198,13 @@ impl<'a> Resolver<'a> {\n            path[0].name != keywords::CrateRoot.name() &&\n            path[0].name != keywords::DollarCrate.name() {\n             let unqualified_result = {\n-                match self.resolve_path(&[*path.last().unwrap()], Some(ns), false, span, None) {\n+                match self.resolve_path(\n+                    &[*path.last().unwrap()],\n+                    Some(ns),\n+                    false,\n+                    span,\n+                    CrateLint::No,\n+                ) {\n                     PathResult::NonModule(path_res) => path_res.base_def(),\n                     PathResult::Module(module) => module.def().unwrap(),\n                     _ => return Some(result),\n@@ -3195,14 +3219,14 @@ impl<'a> Resolver<'a> {\n         Some(result)\n     }\n \n-    fn resolve_path(&mut self,\n-                    path: &[Ident],\n-                    opt_ns: Option<Namespace>, // `None` indicates a module path\n-                    record_used: bool,\n-                    path_span: Span,\n-                    node_id: Option<NodeId>) // None indicates that we don't care about linting\n-                                             // `::module` paths\n-                    -> PathResult<'a> {\n+    fn resolve_path(\n+        &mut self,\n+        path: &[Ident],\n+        opt_ns: Option<Namespace>, // `None` indicates a module path\n+        record_used: bool,\n+        path_span: Span,\n+        crate_lint: CrateLint,\n+    ) -> PathResult<'a> {\n         let mut module = None;\n         let mut allow_super = true;\n         let mut second_binding = None;\n@@ -3321,7 +3345,7 @@ impl<'a> Resolver<'a> {\n                         return PathResult::NonModule(err_path_resolution());\n                     } else if opt_ns.is_some() && (is_last || maybe_assoc) {\n                         self.lint_if_path_starts_with_module(\n-                            node_id,\n+                            crate_lint,\n                             path,\n                             path_span,\n                             second_binding,\n@@ -3366,19 +3390,22 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        self.lint_if_path_starts_with_module(node_id, path, path_span, second_binding);\n+        self.lint_if_path_starts_with_module(crate_lint, path, path_span, second_binding);\n \n         PathResult::Module(module.unwrap_or(self.graph_root))\n     }\n \n-    fn lint_if_path_starts_with_module(&self,\n-                                       id: Option<NodeId>,\n-                                       path: &[Ident],\n-                                       path_span: Span,\n-                                       second_binding: Option<&NameBinding>) {\n-        let id = match id {\n-            Some(id) => id,\n-            None => return,\n+    fn lint_if_path_starts_with_module(\n+        &self,\n+        crate_lint: CrateLint,\n+        path: &[Ident],\n+        path_span: Span,\n+        second_binding: Option<&NameBinding>,\n+    ) {\n+        let (diag_id, diag_span) = match crate_lint {\n+            CrateLint::No => return,\n+            CrateLint::SimplePath(id) => (id, path_span),\n+            CrateLint::UsePath { root_id, root_span } => (root_id, root_span),\n         };\n \n         let first_name = match path.get(0) {\n@@ -3414,7 +3441,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        self.lint_path_starts_with_module(id, path_span);\n+        self.lint_path_starts_with_module(diag_id, diag_span);\n     }\n \n     fn lint_path_starts_with_module(&self, id: NodeId, span: Span) {\n@@ -3650,7 +3677,7 @@ impl<'a> Resolver<'a> {\n             // Search in module.\n             let mod_path = &path[..path.len() - 1];\n             if let PathResult::Module(module) = self.resolve_path(mod_path, Some(TypeNS),\n-                                                                  false, span, None) {\n+                                                                  false, span, CrateLint::No) {\n                 add_module_candidates(module, &mut names);\n             }\n         }\n@@ -4427,4 +4454,19 @@ pub enum MakeGlobMap {\n     No,\n }\n \n+enum CrateLint {\n+    /// Do not issue the lint\n+    No,\n+\n+    /// This lint applies to some random path like `impl ::foo::Bar`\n+    /// or whatever. In this case, we can take the span of that path.\n+    SimplePath(NodeId),\n+\n+    /// This lint comes from a `use` statement. In this case, what we\n+    /// care about really is the *root* `use` statement; e.g., if we\n+    /// have nested things like `use a::{b, c}`, we care about the\n+    /// `use a` part.\n+    UsePath { root_id: NodeId, root_span: Span },\n+}\n+\n __build_diagnostic_array! { librustc_resolve, DIAGNOSTICS }"}, {"sha": "d6d00b3183e1a3292aac536ac6feb9482ae31d84", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d034ae53c43352b06341455fb1394cb5d4069999/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d034ae53c43352b06341455fb1394cb5d4069999/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d034ae53c43352b06341455fb1394cb5d4069999", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use {AmbiguityError, Resolver, ResolutionError, resolve_error};\n+use {AmbiguityError, CrateLint, Resolver, ResolutionError, resolve_error};\n use {Module, ModuleKind, NameBinding, NameBindingKind, PathResult};\n use Namespace::{self, MacroNS};\n use build_reduced_graph::BuildReducedGraphVisitor;\n@@ -436,7 +436,7 @@ impl<'a> Resolver<'a> {\n                 return Err(Determinacy::Determined);\n             }\n \n-            let def = match self.resolve_path(&path, Some(MacroNS), false, span, None) {\n+            let def = match self.resolve_path(&path, Some(MacroNS), false, span, CrateLint::No) {\n                 PathResult::NonModule(path_res) => match path_res.base_def() {\n                     Def::Err => Err(Determinacy::Determined),\n                     def @ _ => {\n@@ -613,7 +613,7 @@ impl<'a> Resolver<'a> {\n     pub fn finalize_current_module_macro_resolutions(&mut self) {\n         let module = self.current_module;\n         for &(ref path, span) in module.macro_resolutions.borrow().iter() {\n-            match self.resolve_path(&path, Some(MacroNS), true, span, None) {\n+            match self.resolve_path(&path, Some(MacroNS), true, span, CrateLint::No) {\n                 PathResult::NonModule(_) => {},\n                 PathResult::Failed(span, msg, _) => {\n                     resolve_error(self, span, ResolutionError::FailedToResolve(&msg));"}, {"sha": "e87f594ac99ed0f7f07496d52f6315c00a9d8cd3", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d034ae53c43352b06341455fb1394cb5d4069999/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d034ae53c43352b06341455fb1394cb5d4069999/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d034ae53c43352b06341455fb1394cb5d4069999", "patch": "@@ -10,7 +10,7 @@\n \n use self::ImportDirectiveSubclass::*;\n \n-use {AmbiguityError, Module, PerNS};\n+use {AmbiguityError, CrateLint, Module, PerNS};\n use Namespace::{self, TypeNS, MacroNS};\n use {NameBinding, NameBindingKind, ToNameBinding, PathResult, PrivacyError};\n use Resolver;\n@@ -55,12 +55,36 @@ pub enum ImportDirectiveSubclass<'a> {\n /// One import directive.\n #[derive(Debug,Clone)]\n pub struct ImportDirective<'a> {\n+    /// The id of the `extern crate`, `UseTree` etc that imported this `ImportDirective`.\n+    ///\n+    /// In the case where the `ImportDirective` was expanded from a \"nested\" use tree,\n+    /// this id is the id of the leaf tree. For example:\n+    ///\n+    /// ```ignore (pacify the mercilous tidy)\n+    /// use foo::bar::{a, b}\n+    /// ```\n+    ///\n+    /// If this is the import directive for `foo::bar::a`, we would have the id of the `UseTree`\n+    /// for `a` in this field.\n     pub id: NodeId,\n+\n+    /// The `id` of the \"root\" use-kind -- this is always the same as\n+    /// `id` except in the case of \"nested\" use trees, in which case\n+    /// it will be the `id` of the root use tree. e.g., in the example\n+    /// from `id`, this would be the id of the `use foo::bar`\n+    /// `UseTree` node.\n+    pub root_id: NodeId,\n+\n+    /// Span of this use tree.\n+    pub span: Span,\n+\n+    /// Span of the *root* use tree (see `root_id`).\n+    pub root_span: Span,\n+\n     pub parent: Module<'a>,\n     pub module_path: Vec<Ident>,\n     pub imported_module: Cell<Option<Module<'a>>>, // the resolution of `module_path`\n     pub subclass: ImportDirectiveSubclass<'a>,\n-    pub span: Span,\n     pub vis: Cell<ty::Visibility>,\n     pub expansion: Mark,\n     pub used: Cell<bool>,\n@@ -70,6 +94,10 @@ impl<'a> ImportDirective<'a> {\n     pub fn is_glob(&self) -> bool {\n         match self.subclass { ImportDirectiveSubclass::GlobImport { .. } => true, _ => false }\n     }\n+\n+    crate fn crate_lint(&self) -> CrateLint {\n+        CrateLint::UsePath { root_id: self.root_id, root_span: self.root_span }\n+    }\n }\n \n #[derive(Clone, Default, Debug)]\n@@ -295,6 +323,8 @@ impl<'a> Resolver<'a> {\n                                 subclass: ImportDirectiveSubclass<'a>,\n                                 span: Span,\n                                 id: NodeId,\n+                                root_span: Span,\n+                                root_id: NodeId,\n                                 vis: ty::Visibility,\n                                 expansion: Mark) {\n         let current_module = self.current_module;\n@@ -305,6 +335,8 @@ impl<'a> Resolver<'a> {\n             subclass,\n             span,\n             id,\n+            root_span,\n+            root_id,\n             vis: Cell::new(vis),\n             expansion,\n             used: Cell::new(false),\n@@ -569,7 +601,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             // while resolving its module path.\n             directive.vis.set(ty::Visibility::Invisible);\n             let result = self.resolve_path(&directive.module_path[..], None, false,\n-                                           directive.span, Some(directive.id));\n+                                           directive.span, directive.crate_lint());\n             directive.vis.set(vis);\n \n             match result {\n@@ -702,7 +734,13 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             }\n         }\n \n-        let module_result = self.resolve_path(&module_path, None, true, span, Some(directive.id));\n+        let module_result = self.resolve_path(\n+            &module_path,\n+            None,\n+            true,\n+            span,\n+            directive.crate_lint(),\n+        );\n         let module = match module_result {\n             PathResult::Module(module) => module,\n             PathResult::Failed(span, msg, false) => {\n@@ -717,7 +755,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n                    !(self_path.len() > 1 && is_special(self_path[1])) {\n                     self_path[0].name = keywords::SelfValue.name();\n                     self_result = Some(self.resolve_path(&self_path, None, false,\n-                                                         span, None));\n+                                                         span, CrateLint::No));\n                 }\n                 return if let Some(PathResult::Module(..)) = self_result {\n                     Some((span, format!(\"Did you mean `{}`?\", names_to_string(&self_path[..]))))"}, {"sha": "cc17a9bd6618b2e47782c3819219f4215b7acf0d", "filename": "src/test/ui/rust-2018/auxiliary/edition-lint-paths.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/d034ae53c43352b06341455fb1394cb5d4069999/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Fedition-lint-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d034ae53c43352b06341455fb1394cb5d4069999/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Fedition-lint-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fauxiliary%2Fedition-lint-paths.rs?ref=d034ae53c43352b06341455fb1394cb5d4069999", "previous_filename": "src/test/ui/auxiliary/edition-lint-paths.rs"}, {"sha": "308f2ac406edfe8588d39512a52a13031f6bf812", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.fixed", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d034ae53c43352b06341455fb1394cb5d4069999/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d034ae53c43352b06341455fb1394cb5d4069999/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.fixed?ref=d034ae53c43352b06341455fb1394cb5d4069999", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![feature(rust_2018_preview)]\n+#![deny(absolute_path_not_starting_with_crate)]\n+\n+use crate::foo::{a, b};\n+//~^ ERROR absolute paths must start with\n+//~| this was previously accepted\n+\n+mod foo {\n+    crate fn a() {}\n+    crate fn b() {}\n+}\n+\n+fn main() {\n+    a();\n+    b();\n+}"}, {"sha": "df8b585ef6c394141fb1dc31fc8d1b4728c94cf1", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d034ae53c43352b06341455fb1394cb5d4069999/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d034ae53c43352b06341455fb1394cb5d4069999/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.rs?ref=d034ae53c43352b06341455fb1394cb5d4069999", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![feature(rust_2018_preview)]\n+#![deny(absolute_path_not_starting_with_crate)]\n+\n+use foo::{a, b};\n+//~^ ERROR absolute paths must start with\n+//~| this was previously accepted\n+\n+mod foo {\n+    crate fn a() {}\n+    crate fn b() {}\n+}\n+\n+fn main() {\n+    a();\n+    b();\n+}"}, {"sha": "40d8e4e90e673168e9e92ff9b359e06ad4e0e3b2", "filename": "src/test/ui/rust-2018/edition-lint-nested-paths.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d034ae53c43352b06341455fb1394cb5d4069999/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d034ae53c43352b06341455fb1394cb5d4069999/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-nested-paths.stderr?ref=d034ae53c43352b06341455fb1394cb5d4069999", "patch": "@@ -0,0 +1,16 @@\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-nested-paths.rs:16:5\n+   |\n+LL | use foo::{a, b};\n+   |     ^^^^^^^^^^^ help: use `crate`: `crate::foo::{a, b}`\n+   |\n+note: lint level defined here\n+  --> $DIR/edition-lint-nested-paths.rs:14:9\n+   |\n+LL | #![deny(absolute_path_not_starting_with_crate)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+error: aborting due to previous error\n+"}, {"sha": "80eb52a3e5d2f943203d62d92d16906ec2941bee", "filename": "src/test/ui/rust-2018/edition-lint-paths.fixed", "status": "renamed", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d034ae53c43352b06341455fb1394cb5d4069999/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d034ae53c43352b06341455fb1394cb5d4069999/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed?ref=d034ae53c43352b06341455fb1394cb5d4069999", "patch": "@@ -40,6 +40,8 @@ pub mod foo {\n \n     pub fn test() {\n     }\n+\n+    pub trait SomeTrait { }\n }\n \n use crate::bar::Bar;\n@@ -59,6 +61,10 @@ mod baz {\n     //~| WARN this was previously accepted\n }\n \n+impl crate::foo::SomeTrait for u32 { }\n+//~^ ERROR absolute\n+//~| WARN this was previously accepted\n+\n fn main() {\n     let x = crate::bar::Bar;\n     //~^ ERROR absolute", "previous_filename": "src/test/ui/edition-lint-paths.fixed"}, {"sha": "f2ca342635b6c4e9842abd06782a1123e0347823", "filename": "src/test/ui/rust-2018/edition-lint-paths.rs", "status": "renamed", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d034ae53c43352b06341455fb1394cb5d4069999/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d034ae53c43352b06341455fb1394cb5d4069999/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs?ref=d034ae53c43352b06341455fb1394cb5d4069999", "patch": "@@ -40,6 +40,8 @@ pub mod foo {\n \n     pub fn test() {\n     }\n+\n+    pub trait SomeTrait { }\n }\n \n use bar::Bar;\n@@ -59,6 +61,10 @@ mod baz {\n     //~| WARN this was previously accepted\n }\n \n+impl ::foo::SomeTrait for u32 { }\n+//~^ ERROR absolute\n+//~| WARN this was previously accepted\n+\n fn main() {\n     let x = ::bar::Bar;\n     //~^ ERROR absolute", "previous_filename": "src/test/ui/edition-lint-paths.rs"}, {"sha": "9f3bef062cac52e791a7ba302508ab5aa4c065a0", "filename": "src/test/ui/rust-2018/edition-lint-paths.stderr", "status": "renamed", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d034ae53c43352b06341455fb1394cb5d4069999/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d034ae53c43352b06341455fb1394cb5d4069999/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.stderr?ref=d034ae53c43352b06341455fb1394cb5d4069999", "patch": "@@ -40,7 +40,7 @@ LL |     use {Bar as SomethingElse, main};\n    = note: for more information, see issue TBD\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:45:5\n+  --> $DIR/edition-lint-paths.rs:47:5\n    |\n LL | use bar::Bar;\n    |     ^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n@@ -49,7 +49,7 @@ LL | use bar::Bar;\n    = note: for more information, see issue TBD\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:57:9\n+  --> $DIR/edition-lint-paths.rs:59:9\n    |\n LL |     use *;\n    |         ^ help: use `crate`: `crate::*`\n@@ -58,13 +58,22 @@ LL |     use *;\n    = note: for more information, see issue TBD\n \n error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n-  --> $DIR/edition-lint-paths.rs:63:13\n+  --> $DIR/edition-lint-paths.rs:64:6\n+   |\n+LL | impl ::foo::SomeTrait for u32 { }\n+   |      ^^^^^^^^^^^^^^^^ help: use `crate`: `crate::foo::SomeTrait`\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue TBD\n+\n+error: absolute paths must start with `self`, `super`, `crate`, or an external crate name in the 2018 edition\n+  --> $DIR/edition-lint-paths.rs:69:13\n    |\n LL |     let x = ::bar::Bar;\n    |             ^^^^^^^^^^ help: use `crate`: `crate::bar::Bar`\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n    = note: for more information, see issue TBD\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n ", "previous_filename": "src/test/ui/edition-lint-paths.stderr"}]}