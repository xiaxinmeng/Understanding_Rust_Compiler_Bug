{"sha": "6add378d6b77a727697f2920a9cc85a63766297e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZGQzNzhkNmI3N2E3Mjc2OTdmMjkyMGE5Y2M4NWE2Mzc2NjI5N2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-29T04:54:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-29T04:54:20Z"}, "message": "Auto merge of #75752 - jakoschiko:test-suite-time, r=m-ou-se\n\nlibtest: Print the total time taken to execute a test suite\n\nPrint the total time taken to execute a test suite by default, without any kind of flag.\n\nCloses #75660\n\n# Example\n```\nanon@anon:~/code/rust/example$ cargo test\n   Compiling example v0.1.0 (/home/anon/code/rust/example)\n    Finished test [unoptimized + debuginfo] target(s) in 0.18s\n     Running target/debug/deps/example-745b64d3885c3565\n\nrunning 3 tests\ntest tests::foo ... ok\ntest tests::bar ... ok\ntest tests::baz ... ok\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; 1.2s\n\n   Doc-tests example\n\nrunning 3 tests\ntest src/lib.rs - foo (line 3) ... ok\ntest src/lib.rs - bar (line 11) ... ok\ntest src/lib.rs - baz (line 19) ... ok\n\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; 1.3s\n```\n\n```\nanon@anon:~/code/rust/example$ cargo test -- --format terse\n    Finished test [unoptimized + debuginfo] target(s) in 0.08s\n     Running target/debug/deps/example-745b64d3885c3565\n\nrunning 3 tests\n...\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; 1.2s\n\n   Doc-tests example\n\nrunning 3 tests\n...\ntest result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; 1.3s\n```\n\n```\nanon@anon:~/code/rust/example$ cargo test -- --format json -Z unstable-options\n   Compiling example v0.1.0 (/home/anon/code/rust/example)\n    Finished test [unoptimized + debuginfo] target(s) in 0.25s\n     Running target/debug/deps/example-745b64d3885c3565\n{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": 3 }\n{ \"type\": \"test\", \"event\": \"started\", \"name\": \"tests::bar\" }\n{ \"type\": \"test\", \"event\": \"started\", \"name\": \"tests::baz\" }\n{ \"type\": \"test\", \"event\": \"started\", \"name\": \"tests::foo\" }\n{ \"type\": \"test\", \"name\": \"tests::foo\", \"event\": \"ok\" }\n{ \"type\": \"test\", \"name\": \"tests::bar\", \"event\": \"ok\" }\n{ \"type\": \"test\", \"name\": \"tests::baz\", \"event\": \"ok\" }\n{ \"type\": \"suite\", \"event\": \"ok\", \"passed\": 3, \"failed\": 0, \"allowed_fail\": 0, \"ignored\": 0, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": \"1.2s\" }\n   Doc-tests example\n{ \"type\": \"suite\", \"event\": \"started\", \"test_count\": 3 }\n{ \"type\": \"test\", \"event\": \"started\", \"name\": \"src/lib.rs - bar (line 11)\" }\n{ \"type\": \"test\", \"event\": \"started\", \"name\": \"src/lib.rs - baz (line 19)\" }\n{ \"type\": \"test\", \"event\": \"started\", \"name\": \"src/lib.rs - foo (line 3)\" }\n{ \"type\": \"test\", \"name\": \"src/lib.rs - foo (line 3)\", \"event\": \"ok\" }\n{ \"type\": \"test\", \"name\": \"src/lib.rs - bar (line 11)\", \"event\": \"ok\" }\n{ \"type\": \"test\", \"name\": \"src/lib.rs - baz (line 19)\", \"event\": \"ok\" }\n{ \"type\": \"suite\", \"event\": \"ok\", \"passed\": 3, \"failed\": 0, \"allowed_fail\": 0, \"ignored\": 0, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": \"1.3s\" }\n```", "tree": {"sha": "3e0961bf1c566673bc4600092b8c78daee4a2ddf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e0961bf1c566673bc4600092b8c78daee4a2ddf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6add378d6b77a727697f2920a9cc85a63766297e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6add378d6b77a727697f2920a9cc85a63766297e", "html_url": "https://github.com/rust-lang/rust/commit/6add378d6b77a727697f2920a9cc85a63766297e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6add378d6b77a727697f2920a9cc85a63766297e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40d7efad5e581c60a81171d96d78696b7ed65009", "url": "https://api.github.com/repos/rust-lang/rust/commits/40d7efad5e581c60a81171d96d78696b7ed65009", "html_url": "https://github.com/rust-lang/rust/commit/40d7efad5e581c60a81171d96d78696b7ed65009"}, {"sha": "322f53d8a8da14da5371ca040ade5497112178cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/322f53d8a8da14da5371ca040ade5497112178cf", "html_url": "https://github.com/rust-lang/rust/commit/322f53d8a8da14da5371ca040ade5497112178cf"}], "stats": {"total": 240, "additions": 176, "deletions": 64}, "files": [{"sha": "1721c3c14f9a9d634c76d386e8df00b4ab989f56", "filename": "library/test/src/console.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/library%2Ftest%2Fsrc%2Fconsole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/library%2Ftest%2Fsrc%2Fconsole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fconsole.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -3,6 +3,7 @@\n use std::fs::File;\n use std::io;\n use std::io::prelude::Write;\n+use std::time::Instant;\n \n use super::{\n     bench::fmt_bench_samples,\n@@ -14,7 +15,7 @@ use super::{\n     options::{Options, OutputFormat},\n     run_tests,\n     test_result::TestResult,\n-    time::TestExecTime,\n+    time::{TestExecTime, TestSuiteExecTime},\n     types::{NamePadding, TestDesc, TestDescAndFn},\n };\n \n@@ -49,6 +50,7 @@ pub struct ConsoleTestState {\n     pub allowed_fail: usize,\n     pub filtered_out: usize,\n     pub measured: usize,\n+    pub exec_time: Option<TestSuiteExecTime>,\n     pub metrics: MetricMap,\n     pub failures: Vec<(TestDesc, Vec<u8>)>,\n     pub not_failures: Vec<(TestDesc, Vec<u8>)>,\n@@ -72,6 +74,7 @@ impl ConsoleTestState {\n             allowed_fail: 0,\n             filtered_out: 0,\n             measured: 0,\n+            exec_time: None,\n             metrics: MetricMap::new(),\n             failures: Vec::new(),\n             not_failures: Vec::new(),\n@@ -277,7 +280,14 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n     };\n     let mut st = ConsoleTestState::new(opts)?;\n \n+    // Prevent the usage of `Instant` in some cases:\n+    // - It's currently not supported for wasm targets.\n+    // - We disable it for miri because it's not available when isolation is enabled.\n+    let is_instant_supported = !cfg!(target_arch = \"wasm32\") && !cfg!(miri);\n+\n+    let start_time = is_instant_supported.then(Instant::now);\n     run_tests(opts, tests, |x| on_test_event(&x, &mut st, &mut *out))?;\n+    st.exec_time = start_time.map(|t| TestSuiteExecTime(t.elapsed()));\n \n     assert!(st.current_test_count() == st.total);\n "}, {"sha": "57b6d1a02021fcede8492caf2bea175107edf625", "filename": "library/test/src/formatters/json.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjson.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -47,7 +47,7 @@ impl<T: Write> JsonFormatter<T> {\n             evt\n         ))?;\n         if let Some(exec_time) = exec_time {\n-            self.write_message(&*format!(r#\", \"exec_time\": \"{}\"\"#, exec_time))?;\n+            self.write_message(&*format!(r#\", \"exec_time\": {}\"#, exec_time.0.as_secs_f64()))?;\n         }\n         if let Some(stdout) = stdout {\n             self.write_message(&*format!(r#\", \"stdout\": \"{}\"\"#, EscapedString(stdout)))?;\n@@ -162,24 +162,31 @@ impl<T: Write> OutputFormatter for JsonFormatter<T> {\n     }\n \n     fn write_run_finish(&mut self, state: &ConsoleTestState) -> io::Result<bool> {\n-        self.writeln_message(&*format!(\n+        self.write_message(&*format!(\n             \"{{ \\\"type\\\": \\\"suite\\\", \\\n              \\\"event\\\": \\\"{}\\\", \\\n              \\\"passed\\\": {}, \\\n              \\\"failed\\\": {}, \\\n              \\\"allowed_fail\\\": {}, \\\n              \\\"ignored\\\": {}, \\\n              \\\"measured\\\": {}, \\\n-             \\\"filtered_out\\\": {} }}\",\n+             \\\"filtered_out\\\": {}\",\n             if state.failed == 0 { \"ok\" } else { \"failed\" },\n             state.passed,\n             state.failed + state.allowed_fail,\n             state.allowed_fail,\n             state.ignored,\n             state.measured,\n-            state.filtered_out\n+            state.filtered_out,\n         ))?;\n \n+        if let Some(ref exec_time) = state.exec_time {\n+            let time_str = format!(\", \\\"exec_time\\\": {}\", exec_time.0.as_secs_f64());\n+            self.write_message(&time_str)?;\n+        }\n+\n+        self.writeln_message(\" }\")?;\n+\n         Ok(state.failed == 0)\n     }\n }"}, {"sha": "6fa369298416b575d7febc1c6bfe5e882a4a8e1a", "filename": "library/test/src/formatters/pretty.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fpretty.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -259,7 +259,7 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n \n         let s = if state.allowed_fail > 0 {\n             format!(\n-                \". {} passed; {} failed ({} allowed); {} ignored; {} measured; {} filtered out\\n\\n\",\n+                \". {} passed; {} failed ({} allowed); {} ignored; {} measured; {} filtered out\",\n                 state.passed,\n                 state.failed + state.allowed_fail,\n                 state.allowed_fail,\n@@ -269,13 +269,20 @@ impl<T: Write> OutputFormatter for PrettyFormatter<T> {\n             )\n         } else {\n             format!(\n-                \". {} passed; {} failed; {} ignored; {} measured; {} filtered out\\n\\n\",\n+                \". {} passed; {} failed; {} ignored; {} measured; {} filtered out\",\n                 state.passed, state.failed, state.ignored, state.measured, state.filtered_out\n             )\n         };\n \n         self.write_plain(&s)?;\n \n+        if let Some(ref exec_time) = state.exec_time {\n+            let time_str = format!(\"; finished in {}\", exec_time);\n+            self.write_plain(&time_str)?;\n+        }\n+\n+        self.write_plain(\"\\n\\n\")?;\n+\n         Ok(success)\n     }\n }"}, {"sha": "6f46f7255a47ed3c17f9f0b681e158d6773853b9", "filename": "library/test/src/formatters/terse.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fterse.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -236,7 +236,7 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n \n         let s = if state.allowed_fail > 0 {\n             format!(\n-                \". {} passed; {} failed ({} allowed); {} ignored; {} measured; {} filtered out\\n\\n\",\n+                \". {} passed; {} failed ({} allowed); {} ignored; {} measured; {} filtered out\",\n                 state.passed,\n                 state.failed + state.allowed_fail,\n                 state.allowed_fail,\n@@ -246,13 +246,20 @@ impl<T: Write> OutputFormatter for TerseFormatter<T> {\n             )\n         } else {\n             format!(\n-                \". {} passed; {} failed; {} ignored; {} measured; {} filtered out\\n\\n\",\n+                \". {} passed; {} failed; {} ignored; {} measured; {} filtered out\",\n                 state.passed, state.failed, state.ignored, state.measured, state.filtered_out\n             )\n         };\n \n         self.write_plain(&s)?;\n \n+        if let Some(ref exec_time) = state.exec_time {\n+            let time_str = format!(\"; finished in {}\", exec_time);\n+            self.write_plain(&time_str)?;\n+        }\n+\n+        self.write_plain(\"\\n\\n\")?;\n+\n         Ok(success)\n     }\n }"}, {"sha": "74313cc4438edf61aca1fdc7ff07ad32eac98f42", "filename": "library/test/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/library%2Ftest%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/library%2Ftest%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftests.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -669,6 +669,7 @@ fn should_sort_failures_before_printing_them() {\n         allowed_fail: 0,\n         filtered_out: 0,\n         measured: 0,\n+        exec_time: None,\n         metrics: MetricMap::new(),\n         failures: vec![(test_b, Vec::new()), (test_a, Vec::new())],\n         options: Options::new(),"}, {"sha": "130792fa5d7e707bd077f0e48c942176d8e201f6", "filename": "library/test/src/time.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/library%2Ftest%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/library%2Ftest%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Ftime.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,8 +1,9 @@\n //! Module `time` contains everything related to the time measurement of unit tests\n //! execution.\n-//! Two main purposes of this module:\n+//! The purposes of this module:\n //! - Check whether test is timed out.\n //! - Provide helpers for `report-time` and `measure-time` options.\n+//! - Provide newtypes for executions times.\n \n use std::env;\n use std::fmt;\n@@ -60,7 +61,7 @@ pub fn get_default_test_timeout() -> Instant {\n     Instant::now() + Duration::from_secs(TEST_WARN_TIMEOUT_S)\n }\n \n-/// The meassured execution time of a unit test.\n+/// The measured execution time of a unit test.\n #[derive(Debug, Clone, PartialEq)]\n pub struct TestExecTime(pub Duration);\n \n@@ -70,6 +71,16 @@ impl fmt::Display for TestExecTime {\n     }\n }\n \n+/// The measured execution time of the whole test suite.\n+#[derive(Debug, Clone, Default, PartialEq)]\n+pub struct TestSuiteExecTime(pub Duration);\n+\n+impl fmt::Display for TestSuiteExecTime {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{:.2}s\", self.0.as_secs_f64())\n+    }\n+}\n+\n /// Structure denoting time limits for test execution.\n #[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]\n pub struct TimeThreshold {"}, {"sha": "f61a1aa84100f0c5959491e60c3238aa87ee96f5", "filename": "src/test/run-make-fulldeps/libtest-json/Makefile", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2FMakefile?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -13,6 +13,6 @@ all:\n \tcat $(OUTPUT_FILE_DEFAULT) | \"$(PYTHON)\" validate_json.py\n \tcat $(OUTPUT_FILE_STDOUT_SUCCESS) | \"$(PYTHON)\" validate_json.py\n \n-\t# Compare to output file\n-\tdiff output-default.json $(OUTPUT_FILE_DEFAULT)\n-\tdiff output-stdout-success.json $(OUTPUT_FILE_STDOUT_SUCCESS)\n+\t# Normalize the actual output and compare to expected output file\n+\tcat $(OUTPUT_FILE_DEFAULT) | sed 's/\"exec_time\": [0-9.]*/\"exec_time\": $$TIME/' | diff output-default.json -\n+\tcat $(OUTPUT_FILE_STDOUT_SUCCESS) | sed 's/\"exec_time\": [0-9.]*/\"exec_time\": $$TIME/' | diff output-stdout-success.json -"}, {"sha": "099b65a23cad6979e2be32d80a5a678c6a6de0d9", "filename": "src/test/run-make-fulldeps/libtest-json/output-default.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-default.json?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -7,4 +7,4 @@\n { \"type\": \"test\", \"name\": \"c\", \"event\": \"ok\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"d\" }\n { \"type\": \"test\", \"name\": \"d\", \"event\": \"ignored\" }\n-{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 2, \"failed\": 1, \"allowed_fail\": 0, \"ignored\": 1, \"measured\": 0, \"filtered_out\": 0 }\n+{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 2, \"failed\": 1, \"allowed_fail\": 0, \"ignored\": 1, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": $TIME }"}, {"sha": "fd676799a76649435e0b6aa030ac8c50f629c9e4", "filename": "src/test/run-make-fulldeps/libtest-json/output-stdout-success.json", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Flibtest-json%2Foutput-stdout-success.json?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -7,4 +7,4 @@\n { \"type\": \"test\", \"name\": \"c\", \"event\": \"ok\", \"stdout\": \"thread 'main' panicked at 'assertion failed: false', f.rs:15:5\\n\" }\n { \"type\": \"test\", \"event\": \"started\", \"name\": \"d\" }\n { \"type\": \"test\", \"name\": \"d\", \"event\": \"ignored\" }\n-{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 2, \"failed\": 1, \"allowed_fail\": 0, \"ignored\": 1, \"measured\": 0, \"filtered_out\": 0 }\n+{ \"type\": \"suite\", \"event\": \"failed\", \"passed\": 2, \"failed\": 1, \"allowed_fail\": 0, \"ignored\": 1, \"measured\": 0, \"filtered_out\": 0, \"exec_time\": $TIME }"}, {"sha": "d4ca925858714a1a37d23d3765fa5dbbaf7ca37b", "filename": "src/test/rustdoc-ui/cfg-test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fcfg-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fcfg-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcfg-test.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n // compile-flags:--test --test-args --test-threads=1\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n // Crates like core have doctests gated on `cfg(not(test))` so we need to make\n // sure `cfg(test)` is not active when running `rustdoc --test`."}, {"sha": "2960ff8d3b473882f8876b0da805ca5ec82d8ee8", "filename": "src/test/rustdoc-ui/cfg-test.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fcfg-test.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fcfg-test.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fcfg-test.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,7 +1,7 @@\n \n running 2 tests\n-test $DIR/cfg-test.rs - Bar (line 26) ... ok\n-test $DIR/cfg-test.rs - Foo (line 18) ... ok\n+test $DIR/cfg-test.rs - Bar (line 27) ... ok\n+test $DIR/cfg-test.rs - Foo (line 19) ... ok\n \n-test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "0b79aaece8a03e1653a2a9c40e7febe7b20a7649", "filename": "src/test/rustdoc-ui/doc-test-doctest-feature.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fdoc-test-doctest-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fdoc-test-doctest-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-test-doctest-feature.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n // compile-flags:--test\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n // Make sure `cfg(doctest)` is set when finding doctests but not inside\n // the doctests."}, {"sha": "d7de1f105228f47d73619062c223893d264ee35e", "filename": "src/test/rustdoc-ui/doc-test-doctest-feature.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fdoc-test-doctest-feature.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fdoc-test-doctest-feature.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-test-doctest-feature.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,6 +1,6 @@\n \n running 1 test\n-test $DIR/doc-test-doctest-feature.rs - Foo (line 8) ... ok\n+test $DIR/doc-test-doctest-feature.rs - Foo (line 9) ... ok\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "bf334c67ecab76077f79f33eebee1e4a9de2e957", "filename": "src/test/rustdoc-ui/doc-test-rustdoc-feature.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,6 +1,7 @@\n // check-pass\n // compile-flags:--test\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n #![feature(doc_cfg)]\n "}, {"sha": "5b07fc4c87af518a13275ccde27acce0643a82e6", "filename": "src/test/rustdoc-ui/doc-test-rustdoc-feature.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoc-test-rustdoc-feature.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,6 +1,6 @@\n \n running 1 test\n-test $DIR/doc-test-rustdoc-feature.rs - Foo (line 9) ... ok\n+test $DIR/doc-test-rustdoc-feature.rs - Foo (line 10) ... ok\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "2670fa572010da1188700959a3b2847ad281ca06", "filename": "src/test/rustdoc-ui/doctest-output.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fdoctest-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fdoctest-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoctest-output.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -2,6 +2,7 @@\n // aux-build:extern_macros.rs\n // compile-flags:--test --test-args=--test-threads=1\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // check-pass\n \n //! ```"}, {"sha": "35b0e366fb5cc3ce598c88415b85615bd8d84c40", "filename": "src/test/rustdoc-ui/doctest-output.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fdoctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Fdoctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fdoctest-output.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,8 +1,8 @@\n \n running 3 tests\n-test $DIR/doctest-output.rs - (line 7) ... ok\n-test $DIR/doctest-output.rs - ExpandedStruct (line 23) ... ok\n-test $DIR/doctest-output.rs - foo::bar (line 17) ... ok\n+test $DIR/doctest-output.rs - (line 8) ... ok\n+test $DIR/doctest-output.rs - ExpandedStruct (line 24) ... ok\n+test $DIR/doctest-output.rs - foo::bar (line 18) ... ok\n \n-test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: ok. 3 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "6f2ff5d703a11d6c20acab0d89a799e404295d69", "filename": "src/test/rustdoc-ui/failed-doctest-compile-fail.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -3,6 +3,7 @@\n \n // compile-flags:--test\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // failure-status: 101\n \n /// ```compile_fail"}, {"sha": "b8bb5ccb403299f428dbd931c1138b6d9c02792b", "filename": "src/test/rustdoc-ui/failed-doctest-compile-fail.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-compile-fail.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,14 +1,14 @@\n \n running 1 test\n-test $DIR/failed-doctest-compile-fail.rs - Foo (line 8) ... FAILED\n+test $DIR/failed-doctest-compile-fail.rs - Foo (line 9) ... FAILED\n \n failures:\n \n----- $DIR/failed-doctest-compile-fail.rs - Foo (line 8) stdout ----\n+---- $DIR/failed-doctest-compile-fail.rs - Foo (line 9) stdout ----\n Test compiled successfully, but it's marked `compile_fail`.\n \n failures:\n-    $DIR/failed-doctest-compile-fail.rs - Foo (line 8)\n+    $DIR/failed-doctest-compile-fail.rs - Foo (line 9)\n \n-test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "57b70b478e624aa3ffa6fc6d39aa550df907279a", "filename": "src/test/rustdoc-ui/failed-doctest-missing-codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -3,6 +3,7 @@\n \n // compile-flags:--test\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // failure-status: 101\n \n /// ```compile_fail,E0004"}, {"sha": "7367a7d651919e010b38b9f02bb234a1c6711b66", "filename": "src/test/rustdoc-ui/failed-doctest-missing-codes.stdout", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-missing-codes.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,12 +1,12 @@\n \n running 1 test\n-test $DIR/failed-doctest-missing-codes.rs - Foo (line 8) ... FAILED\n+test $DIR/failed-doctest-missing-codes.rs - Foo (line 9) ... FAILED\n \n failures:\n \n----- $DIR/failed-doctest-missing-codes.rs - Foo (line 8) stdout ----\n+---- $DIR/failed-doctest-missing-codes.rs - Foo (line 9) stdout ----\n error[E0308]: mismatched types\n-  --> $DIR/failed-doctest-missing-codes.rs:9:13\n+  --> $DIR/failed-doctest-missing-codes.rs:10:13\n    |\n LL | let x: () = 5i32;\n    |        --   ^^^^ expected `()`, found `i32`\n@@ -19,7 +19,7 @@ For more information about this error, try `rustc --explain E0308`.\n Some expected error codes were not found: [\"E0004\"]\n \n failures:\n-    $DIR/failed-doctest-missing-codes.rs - Foo (line 8)\n+    $DIR/failed-doctest-missing-codes.rs - Foo (line 9)\n \n-test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "92473b49e1483ef4e5a3009b2e922d3bd59a0721", "filename": "src/test/rustdoc-ui/failed-doctest-output.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -5,6 +5,7 @@\n // compile-flags:--test --test-args --test-threads=1\n // rustc-env:RUST_BACKTRACE=0\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // failure-status: 101\n \n // doctest fails at runtime"}, {"sha": "6dfe648f8549e0f5f545e89fb006eb223634040b", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,13 +1,13 @@\n \n running 2 tests\n-test $DIR/failed-doctest-output.rs - OtherStruct (line 21) ... FAILED\n-test $DIR/failed-doctest-output.rs - SomeStruct (line 11) ... FAILED\n+test $DIR/failed-doctest-output.rs - OtherStruct (line 22) ... FAILED\n+test $DIR/failed-doctest-output.rs - SomeStruct (line 12) ... FAILED\n \n failures:\n \n----- $DIR/failed-doctest-output.rs - OtherStruct (line 21) stdout ----\n+---- $DIR/failed-doctest-output.rs - OtherStruct (line 22) stdout ----\n error[E0425]: cannot find value `no` in this scope\n-  --> $DIR/failed-doctest-output.rs:22:1\n+  --> $DIR/failed-doctest-output.rs:23:1\n    |\n LL | no\n    | ^^ not found in this scope\n@@ -16,7 +16,7 @@ error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0425`.\n Couldn't compile the test.\n----- $DIR/failed-doctest-output.rs - SomeStruct (line 11) stdout ----\n+---- $DIR/failed-doctest-output.rs - SomeStruct (line 12) stdout ----\n Test executable failed (exit code 101).\n \n stdout:\n@@ -32,8 +32,8 @@ note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n \n failures:\n-    $DIR/failed-doctest-output.rs - OtherStruct (line 21)\n-    $DIR/failed-doctest-output.rs - SomeStruct (line 11)\n+    $DIR/failed-doctest-output.rs - OtherStruct (line 22)\n+    $DIR/failed-doctest-output.rs - SomeStruct (line 12)\n \n-test result: FAILED. 0 passed; 2 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: FAILED. 0 passed; 2 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "2b8bb31686f2e89be9fc91a4c99dc219dbd5b7e8", "filename": "src/test/rustdoc-ui/failed-doctest-should-panic.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-should-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-should-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-should-panic.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -3,6 +3,7 @@\n \n // compile-flags:--test\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // failure-status: 101\n \n /// ```should_panic"}, {"sha": "57a20092a5d6c588825aa978cf2325ebe1740603", "filename": "src/test/rustdoc-ui/failed-doctest-should-panic.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-should-panic.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-should-panic.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-should-panic.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,14 +1,14 @@\n \n running 1 test\n-test $DIR/failed-doctest-should-panic.rs - Foo (line 8) ... FAILED\n+test $DIR/failed-doctest-should-panic.rs - Foo (line 9) ... FAILED\n \n failures:\n \n----- $DIR/failed-doctest-should-panic.rs - Foo (line 8) stdout ----\n+---- $DIR/failed-doctest-should-panic.rs - Foo (line 9) stdout ----\n Test executable succeeded, but it's marked `should_panic`.\n \n failures:\n-    $DIR/failed-doctest-should-panic.rs - Foo (line 8)\n+    $DIR/failed-doctest-should-panic.rs - Foo (line 9)\n \n-test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "ee919985e7a915d70b627e8bae270b5780258106", "filename": "src/test/rustdoc-ui/test-no_std.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ftest-no_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ftest-no_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftest-no_std.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,5 +1,6 @@\n // compile-flags:--test\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // check-pass\n \n #![no_std]"}, {"sha": "8d5a30804c1e22e097e8a045f293f595e390b619", "filename": "src/test/rustdoc-ui/test-no_std.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ftest-no_std.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Ftest-no_std.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ftest-no_std.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,6 +1,6 @@\n \n running 1 test\n-test $DIR/test-no_std.rs - f (line 9) ... ok\n+test $DIR/test-no_std.rs - f (line 10) ... ok\n \n-test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "0cff8cd9a33a82062e554b6751b332c3b41608ad", "filename": "src/test/rustdoc-ui/unparseable-doc-test.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,5 +1,6 @@\n // compile-flags: --test\n // normalize-stdout-test: \"src/test/rustdoc-ui\" -> \"$$DIR\"\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // failure-status: 101\n // rustc-env: RUST_BACKTRACE=0\n "}, {"sha": "2641c66f25e7703433bc668058a770aad458c7d9", "filename": "src/test/rustdoc-ui/unparseable-doc-test.stdout", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,12 +1,12 @@\n \n running 1 test\n-test $DIR/unparseable-doc-test.rs - foo (line 6) ... FAILED\n+test $DIR/unparseable-doc-test.rs - foo (line 7) ... FAILED\n \n failures:\n \n----- $DIR/unparseable-doc-test.rs - foo (line 6) stdout ----\n+---- $DIR/unparseable-doc-test.rs - foo (line 7) stdout ----\n error[E0765]: unterminated double quote string\n-  --> $DIR/unparseable-doc-test.rs:8:1\n+  --> $DIR/unparseable-doc-test.rs:9:1\n    |\n LL | \"unterminated\n    | ^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ For more information about this error, try `rustc --explain E0765`.\n Couldn't compile the test.\n \n failures:\n-    $DIR/unparseable-doc-test.rs - foo (line 6)\n+    $DIR/unparseable-doc-test.rs - foo (line 7)\n \n-test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "af530cc1a0b8f9907e6d312b7fe1bc2a6145ad86", "filename": "src/test/ui/test-panic-abort-nocapture.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -4,6 +4,7 @@\n // run-fail\n // check-run-results\n // exec-env:RUST_BACKTRACE=0\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n // ignore-wasm no panic or subprocess support\n // ignore-emscripten no panic or subprocess support"}, {"sha": "727e9691c53a1cdbcd3f48ac9fbb1c29bf581249", "filename": "src/test/ui/test-panic-abort-nocapture.run.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.run.stderr?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,9 +1,9 @@\n thread 'main' panicked at 'assertion failed: `(left == right)`\n   left: `2`,\n- right: `4`', $DIR/test-panic-abort-nocapture.rs:32:5\n+ right: `4`', $DIR/test-panic-abort-nocapture.rs:33:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n thread 'main' panicked at 'assertion failed: `(left == right)`\n   left: `2`,\n- right: `4`', $DIR/test-panic-abort-nocapture.rs:26:5\n+ right: `4`', $DIR/test-panic-abort-nocapture.rs:27:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n testing321"}, {"sha": "15b19676a7c2d21846fbda6f1dc164578e40213c", "filename": "src/test/ui/test-panic-abort-nocapture.run.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort-nocapture.run.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -19,5 +19,5 @@ failures:\n failures:\n     it_fails\n \n-test result: FAILED. 3 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: FAILED. 3 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "931b7993c8144a0032c805ab0deb9b17010168eb", "filename": "src/test/ui/test-panic-abort.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-panic-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-panic-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -4,6 +4,7 @@\n // run-fail\n // check-run-results\n // exec-env:RUST_BACKTRACE=0\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n \n // ignore-wasm no panic or subprocess support\n // ignore-emscripten no panic or subprocess support"}, {"sha": "467f834afecbf81fd361fec6c5ccd32af2dd4ecd", "filename": "src/test/ui/test-panic-abort.run.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-panic-abort.run.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -18,13 +18,13 @@ testing123\n testing321\n thread 'main' panicked at 'assertion failed: `(left == right)`\n   left: `2`,\n- right: `5`', $DIR/test-panic-abort.rs:33:5\n+ right: `5`', $DIR/test-panic-abort.rs:34:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n \n failures:\n     it_exits\n     it_fails\n \n-test result: FAILED. 3 passed; 2 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: FAILED. 3 passed; 2 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "578aa4b1760c4a716ee5aa130c99fa9148202d19", "filename": "src/test/ui/test-passed-wasm.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-passed-wasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-passed-wasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-passed-wasm.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -0,0 +1,20 @@\n+// no-prefer-dynamic\n+// compile-flags: --test\n+// run-flags: --test-threads=1\n+// run-pass\n+// check-run-results\n+// only-wasm32\n+\n+// Tests the output of the test harness with only passed tests.\n+\n+#![cfg(test)]\n+\n+#[test]\n+fn it_works() {\n+    assert_eq!(1 + 1, 2);\n+}\n+\n+#[test]\n+fn it_works_too() {\n+    assert_eq!(1 * 0, 0);\n+}"}, {"sha": "c3005a77983e34b8db5723d7680b28e32c8ac865", "filename": "src/test/ui/test-passed-wasm.run.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-passed-wasm.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-passed-wasm.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-passed-wasm.run.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -0,0 +1,7 @@\n+\n+running 2 tests\n+test it_works ... ok\n+test it_works_too ... ok\n+\n+test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out\n+"}, {"sha": "f65f0003022a1a36e6819ab0195286164bd0c48f", "filename": "src/test/ui/test-passed.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-passed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-passed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-passed.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -0,0 +1,21 @@\n+// no-prefer-dynamic\n+// compile-flags: --test\n+// run-flags: --test-threads=1\n+// run-pass\n+// check-run-results\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n+// ignore-wasm32 no support for `Instant`\n+\n+// Tests the output of the test harness with only passed tests.\n+\n+#![cfg(test)]\n+\n+#[test]\n+fn it_works() {\n+    assert_eq!(1 + 1, 2);\n+}\n+\n+#[test]\n+fn it_works_too() {\n+    assert_eq!(1 * 0, 0);\n+}"}, {"sha": "17f70d607494eb0a4d5c2b65470aee009072718f", "filename": "src/test/ui/test-passed.run.stdout", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-passed.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-passed.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-passed.run.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -0,0 +1,7 @@\n+\n+running 2 tests\n+test it_works ... ok\n+test it_works_too ... ok\n+\n+test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n+"}, {"sha": "edc972837a3f7c8446ca02f697d0e5e2295cd244", "filename": "src/test/ui/test-thread-capture.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-thread-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-thread-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-thread-capture.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -3,6 +3,7 @@\n // run-flags: --test-threads=1\n // check-run-results\n // exec-env:RUST_BACKTRACE=0\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // ignore-emscripten no threads support\n \n #[test]"}, {"sha": "487cfb55eb47324947b0fbd594b72d4bdaab197e", "filename": "src/test/ui/test-thread-capture.run.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-thread-capture.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-thread-capture.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-thread-capture.run.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -10,12 +10,12 @@ fee\n fie\n foe\n fum\n-thread 'main' panicked at 'explicit panic', $DIR/test-thread-capture.rs:30:5\n+thread 'main' panicked at 'explicit panic', $DIR/test-thread-capture.rs:31:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n \n \n failures:\n     thready_fail\n \n-test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}, {"sha": "8e8e9bbfdf0ed8b8376143b39cff046828cc8eb2", "filename": "src/test/ui/test-thread-nocapture.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-thread-nocapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-thread-nocapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-thread-nocapture.rs?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -3,6 +3,7 @@\n // run-flags: --test-threads=1 --nocapture\n // check-run-results\n // exec-env:RUST_BACKTRACE=0\n+// normalize-stdout-test \"finished in \\d+\\.\\d+s\" -> \"finished in $$TIME\"\n // ignore-emscripten no threads support\n \n #[test]"}, {"sha": "06495681b3eb2a0bbe1bcd4e9b9b73e3ebdf09b8", "filename": "src/test/ui/test-thread-nocapture.run.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-thread-nocapture.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-thread-nocapture.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-thread-nocapture.run.stderr?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -1,2 +1,2 @@\n-thread 'main' panicked at 'explicit panic', $DIR/test-thread-nocapture.rs:30:5\n+thread 'main' panicked at 'explicit panic', $DIR/test-thread-nocapture.rs:31:5\n note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}, {"sha": "9d2da50826c25ca431c9de857d8ce441c485c882", "filename": "src/test/ui/test-thread-nocapture.run.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-thread-nocapture.run.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/6add378d6b77a727697f2920a9cc85a63766297e/src%2Ftest%2Fui%2Ftest-thread-nocapture.run.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftest-thread-nocapture.run.stdout?ref=6add378d6b77a727697f2920a9cc85a63766297e", "patch": "@@ -16,5 +16,5 @@ failures:\n failures:\n     thready_fail\n \n-test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out\n+test result: FAILED. 1 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out; finished in $TIME\n "}]}