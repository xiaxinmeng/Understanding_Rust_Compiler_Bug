{"sha": "c1166697a74bca690443525ced8cd8bc08894779", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxMTY2Njk3YTc0YmNhNjkwNDQzNTI1Y2VkOGNkOGJjMDg4OTQ3Nzk=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-20T21:16:29Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-12-20T21:16:29Z"}, "message": "Add a limit for protect against infinite recursion", "tree": {"sha": "f52268eab95b7fe133b43bfd69dc0f13af0a0ebb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f52268eab95b7fe133b43bfd69dc0f13af0a0ebb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1166697a74bca690443525ced8cd8bc08894779", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1166697a74bca690443525ced8cd8bc08894779", "html_url": "https://github.com/rust-lang/rust/commit/c1166697a74bca690443525ced8cd8bc08894779", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1166697a74bca690443525ced8cd8bc08894779/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "360de5ba71a631a118a088dba7c975e9ae592452", "url": "https://api.github.com/repos/rust-lang/rust/commits/360de5ba71a631a118a088dba7c975e9ae592452", "html_url": "https://github.com/rust-lang/rust/commit/360de5ba71a631a118a088dba7c975e9ae592452"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "1aa9a9b7d7df474e08d5291d9b1d443edd624499", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1166697a74bca690443525ced8cd8bc08894779/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1166697a74bca690443525ced8cd8bc08894779/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=c1166697a74bca690443525ced8cd8bc08894779", "patch": "@@ -225,8 +225,11 @@ fn collect_impl_items_in_macros(\n     let mut expander = Expander::new(db, impl_block.file_id, module_id);\n     let mut res = Vec::new();\n \n+    // We set a limit to protect against infinite recursion\n+    let limit = 100;\n+\n     for m in impl_block.value.syntax().children().filter_map(ast::MacroCall::cast) {\n-        res.extend(collect_impl_items_in_macro(db, &mut expander, m, id))\n+        res.extend(collect_impl_items_in_macro(db, &mut expander, m, id, limit))\n     }\n \n     res\n@@ -237,7 +240,12 @@ fn collect_impl_items_in_macro(\n     expander: &mut Expander,\n     m: ast::MacroCall,\n     id: ImplId,\n+    limit: usize,\n ) -> Vec<AssocItemId> {\n+    if limit == 0 {\n+        return Vec::new();\n+    }\n+\n     if let Some((mark, items)) = expander.enter_expand(db, m) {\n         let items: InFile<ast::MacroItems> = expander.to_source(items);\n         let mut res = collect_impl_items(\n@@ -250,7 +258,7 @@ fn collect_impl_items_in_macro(\n         // Note that ast::ModuleItem do not include ast::MacroCall\n         // We cannot use ModuleItemOwner::items here\n         for it in items.value.syntax().children().filter_map(ast::MacroCall::cast) {\n-            res.extend(collect_impl_items_in_macro(db, expander, it, id))\n+            res.extend(collect_impl_items_in_macro(db, expander, it, id, limit - 1))\n         }\n         expander.exit(db, mark);\n         res"}]}