{"sha": "a7016ade65b4870e6b270dee3affa640b72c8a29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MDE2YWRlNjViNDg3MGU2YjI3MGRlZTNhZmZhNjQwYjcyYzhhMjk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-01T17:44:27Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-01T17:44:27Z"}, "message": "Implement STMT_init_box in trans, clean up some of the semant table-accessors.", "tree": {"sha": "89dc8ffe497e300ff7f9c74ed0db638ac09c1451", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89dc8ffe497e300ff7f9c74ed0db638ac09c1451"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7016ade65b4870e6b270dee3affa640b72c8a29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7016ade65b4870e6b270dee3affa640b72c8a29", "html_url": "https://github.com/rust-lang/rust/commit/a7016ade65b4870e6b270dee3affa640b72c8a29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7016ade65b4870e6b270dee3affa640b72c8a29/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8acb2cf47d4b4c55186d17e15560a8835ad21813", "url": "https://api.github.com/repos/rust-lang/rust/commits/8acb2cf47d4b4c55186d17e15560a8835ad21813", "html_url": "https://github.com/rust-lang/rust/commit/8acb2cf47d4b4c55186d17e15560a8835ad21813"}], "stats": {"total": 90, "additions": 39, "deletions": 51}, "files": [{"sha": "7b54de257d385600560ad2adf9b94d1c7fd04c60", "filename": "src/boot/me/dwarf.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7016ade65b4870e6b270dee3affa640b72c8a29/src%2Fboot%2Fme%2Fdwarf.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a7016ade65b4870e6b270dee3affa640b72c8a29/src%2Fboot%2Fme%2Fdwarf.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fdwarf.ml?ref=a7016ade65b4870e6b270dee3affa640b72c8a29", "patch": "@@ -2463,7 +2463,7 @@ let dwarf_visitor\n                 then get_abbrev_code abbrev_formal\n                 else get_abbrev_code abbrev_variable\n               in\n-              let resolved_slot = referent_to_slot cx s.id in\n+              let resolved_slot = get_slot cx s.id in\n               let emit_var_die slot_loc =\n                 let var_die =\n                   SEQ [|"}, {"sha": "365acbf941cba3268da04a3459cec98b1d8cc9e9", "filename": "src/boot/me/layout.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7016ade65b4870e6b270dee3affa640b72c8a29/src%2Fboot%2Fme%2Flayout.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a7016ade65b4870e6b270dee3affa640b72c8a29/src%2Fboot%2Fme%2Flayout.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Flayout.ml?ref=a7016ade65b4870e6b270dee3affa640b72c8a29", "patch": "@@ -140,7 +140,7 @@ let layout_visitor\n       (slots:node_id array)\n       : unit =\n     let accum (off,align) id : (size * size) =\n-      let slot = referent_to_slot cx id in\n+      let slot = get_slot cx id in\n       let rt = slot_referent_type cx.ctxt_abi slot in\n       let (elt_size, elt_align) = rty_layout rt in\n         if vregs_ok"}, {"sha": "182c68115de3242d6b603c50b886fce9aadf9b21", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 23, "deletions": 39, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a7016ade65b4870e6b270dee3affa640b72c8a29/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a7016ade65b4870e6b270dee3affa640b72c8a29/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=a7016ade65b4870e6b270dee3affa640b72c8a29", "patch": "@@ -306,18 +306,32 @@ let referent_is_item (cx:ctxt) (id:node_id) : bool =\n     | _ -> false\n ;;\n \n-(* coerce an lval definition id to a slot *)\n-let referent_to_slot (cx:ctxt) (id:node_id) : Ast.slot =\n-  match Hashtbl.find cx.ctxt_all_defns id with\n-      DEFN_slot slot -> slot\n-    | _ -> bugi cx id \"unknown slot\"\n+let rec lval_base_id (lv:Ast.lval) : node_id =\n+  match lv with\n+      Ast.LVAL_base nbi -> nbi.id\n+    | Ast.LVAL_ext (lv, _) -> lval_base_id lv\n+;;\n+\n+let get_item (cx:ctxt) (node:node_id) : Ast.mod_item_decl =\n+  match htab_search cx.ctxt_all_defns node with\n+      Some (DEFN_item item) -> item\n+    | Some _ -> bugi cx node \"defn is not an item\"\n+    | None -> bugi cx node \"missing defn\"\n+;;\n+\n+let get_slot (cx:ctxt) (node:node_id) : Ast.slot =\n+  match htab_search cx.ctxt_all_defns node with\n+      Some (DEFN_slot slot) -> slot\n+    | Some _ -> bugi cx node \"defn is not a slot\"\n+    | None -> bugi cx node \"missing defn\"\n ;;\n \n (* coerce an lval reference id to its definition slot *)\n-let lval_to_slot (cx:ctxt) (id:node_id) : Ast.slot =\n-  match resolve_lval_id cx id with\n-      DEFN_slot slot -> slot\n-    | _ -> bugi cx id \"unknown slot\"\n+let lval_base_to_slot (cx:ctxt) (lval:Ast.lval) : Ast.slot identified =\n+  let lid = lval_base_id lval in\n+  let rid = lval_to_referent cx lid in\n+  let slot = get_slot cx rid in\n+    { node = slot; id = rid }\n ;;\n \n let get_stmt_depth (cx:ctxt) (id:node_id) : int =\n@@ -534,22 +548,6 @@ let rec lval_to_name (lv:Ast.lval) : Ast.name =\n           Ast.NAME_ext (lval_to_name lv, comp)\n ;;\n \n-let rec lval_base_id (lv:Ast.lval) : node_id =\n-  match lv with\n-      Ast.LVAL_base nbi -> nbi.id\n-    | Ast.LVAL_ext (lv, _) -> lval_base_id lv\n-;;\n-\n-let rec lval_base_slot (cx:ctxt) (lv:Ast.lval) : node_id option =\n-  match lv with\n-      Ast.LVAL_base nbi ->\n-        let referent = lval_to_referent cx nbi.id in\n-          if referent_is_slot cx referent\n-          then Some referent\n-          else None\n-    | Ast.LVAL_ext (lv, _) -> lval_base_slot cx lv\n-;;\n-\n let rec lval_slots (cx:ctxt) (lv:Ast.lval) : node_id array =\n   match lv with\n       Ast.LVAL_base nbi ->\n@@ -1193,20 +1191,6 @@ let lval_is_direct_mod (cx:ctxt) (lval:Ast.lval) : bool =\n         | _ -> false\n ;;\n \n-let get_item (cx:ctxt) (node:node_id) : Ast.mod_item_decl =\n-  match htab_search cx.ctxt_all_defns node with\n-      Some (DEFN_item item) -> item\n-    | Some _ -> bugi cx node \"defn is not an item\"\n-    | None -> bugi cx node \"missing defn\"\n-;;\n-\n-let get_slot (cx:ctxt) (node:node_id) : Ast.slot =\n-  match htab_search cx.ctxt_all_defns node with\n-      Some (DEFN_slot slot) -> slot\n-    | Some _ -> bugi cx node \"defn is not a slot\"\n-    | None -> bugi cx node \"missing defn\"\n-;;\n-\n let lval_ty (cx:ctxt) (lval:Ast.lval) : Ast.ty =\n   (*\n     FIXME: The correct definition of this function is just: "}, {"sha": "9e8cfb14e719912da28c9ededea5bfa3b973a0ad", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a7016ade65b4870e6b270dee3affa640b72c8a29/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a7016ade65b4870e6b270dee3affa640b72c8a29/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=a7016ade65b4870e6b270dee3affa640b72c8a29", "patch": "@@ -446,7 +446,7 @@ let trans_visitor\n   in\n \n   let slot_id_referent_type (slot_id:node_id) : Il.referent_ty =\n-    slot_referent_type abi (referent_to_slot cx slot_id)\n+    slot_referent_type abi (get_slot cx slot_id)\n   in\n \n   let caller_args_cell (args_rty:Il.referent_ty) : Il.cell =\n@@ -959,12 +959,11 @@ let trans_visitor\n               in\n                 trans_slot_lval_ext base_ty base_cell comp\n \n-          | Ast.LVAL_base nb ->\n-              let slot = lval_to_slot cx nb.id in\n-              let referent = lval_to_referent cx nb.id in\n-              let cell = cell_of_block_slot referent in\n-              let ty = slot_ty slot in\n-              let cell = deref_slot initializing cell slot in\n+          | Ast.LVAL_base _ ->\n+              let sloti = lval_base_to_slot cx lv in\n+              let cell = cell_of_block_slot sloti.id in\n+              let ty = slot_ty sloti.node in\n+              let cell = deref_slot initializing cell sloti.node in\n                 deref_ty initializing cell ty\n       in\n         iflog\n@@ -4173,6 +4172,11 @@ let trans_visitor\n                   trans_init_chan dst p\n           end\n \n+      | Ast.STMT_init_box (dst, src) ->\n+          let sloti = lval_base_to_slot cx dst in\n+          let cell = cell_of_block_slot sloti.id in\n+            trans_init_slot_from_atom CLONE_none cell sloti.node src\n+\n       | Ast.STMT_block block ->\n           trans_block block\n "}, {"sha": "9daccd404451c27911148f1bf92641a2e8360ff5", "filename": "src/boot/me/transutil.ml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a7016ade65b4870e6b270dee3affa640b72c8a29/src%2Fboot%2Fme%2Ftransutil.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a7016ade65b4870e6b270dee3affa640b72c8a29/src%2Fboot%2Fme%2Ftransutil.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftransutil.ml?ref=a7016ade65b4870e6b270dee3affa640b72c8a29", "patch": "@@ -153,7 +153,7 @@ let iter_block_slots\n     Hashtbl.iter\n       begin\n         fun key slot_id ->\n-          let slot = referent_to_slot cx slot_id in\n+          let slot = get_slot cx slot_id in\n             fn key slot_id slot\n       end\n       block_slots\n@@ -180,7 +180,7 @@ let iter_arg_slots\n           begin\n             fun slot_id ->\n               let key = Hashtbl.find cx.ctxt_slot_keys slot_id in\n-              let slot = referent_to_slot cx slot_id in\n+              let slot = get_slot cx slot_id in\n                 fn key slot_id slot\n           end\n           ls"}, {"sha": "764fdc961542eee118fed21002fa85491f609cd2", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7016ade65b4870e6b270dee3affa640b72c8a29/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/a7016ade65b4870e6b270dee3affa640b72c8a29/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=a7016ade65b4870e6b270dee3affa640b72c8a29", "patch": "@@ -68,7 +68,7 @@ let determine_constr_key\n                           if referent_is_slot cx aid\n                           then\n                             if type_has_state\n-                              (slot_ty (referent_to_slot cx aid))\n+                              (slot_ty (get_slot cx aid))\n                             then err (Some aid)\n                               \"predicate applied to slot of mutable type\"\n                             else aid"}]}