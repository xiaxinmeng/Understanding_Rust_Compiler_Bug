{"sha": "44bd81da681f1920099cb4481acf1a96c25318f7", "node_id": "C_kwDOAAsO6NoAKDQ0YmQ4MWRhNjgxZjE5MjAwOTljYjQ0ODFhY2YxYTk2YzI1MzE4Zjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-06T17:50:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-06T17:50:41Z"}, "message": "Auto merge of #99524 - cuviper:relnotes-1.63.0, r=Mark-Simulacrum\n\nAdd release notes for Rust 1.63.0", "tree": {"sha": "744688e9815edd647953669794051066433656a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/744688e9815edd647953669794051066433656a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44bd81da681f1920099cb4481acf1a96c25318f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44bd81da681f1920099cb4481acf1a96c25318f7", "html_url": "https://github.com/rust-lang/rust/commit/44bd81da681f1920099cb4481acf1a96c25318f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44bd81da681f1920099cb4481acf1a96c25318f7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c54be35c63a883d5114cdbc50e07194e5cece0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c54be35c63a883d5114cdbc50e07194e5cece0f", "html_url": "https://github.com/rust-lang/rust/commit/5c54be35c63a883d5114cdbc50e07194e5cece0f"}, {"sha": "99793d97e1e0c90e8094488e8470a11f85811191", "url": "https://api.github.com/repos/rust-lang/rust/commits/99793d97e1e0c90e8094488e8470a11f85811191", "html_url": "https://github.com/rust-lang/rust/commit/99793d97e1e0c90e8094488e8470a11f85811191"}], "stats": {"total": 204, "additions": 204, "deletions": 0}, "files": [{"sha": "e66bf60b7f781d665679169f17a76692f9933482", "filename": "RELEASES.md", "status": "modified", "additions": 204, "deletions": 0, "changes": 204, "blob_url": "https://github.com/rust-lang/rust/blob/44bd81da681f1920099cb4481acf1a96c25318f7/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/44bd81da681f1920099cb4481acf1a96c25318f7/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=44bd81da681f1920099cb4481acf1a96c25318f7", "patch": "@@ -1,3 +1,207 @@\n+Version 1.63.0 (2022-08-11)\n+==========================\n+\n+Language\n+--------\n+- [Remove migrate borrowck mode for pre-NLL errors.][95565]\n+- [Modify MIR building to drop repeat expressions with length zero.][95953]\n+- [Remove label/lifetime shadowing warnings.][96296]\n+- [Allow explicit generic arguments in the presence of `impl Trait` args.][96868]\n+- [Make `cenum_impl_drop_cast` warnings deny-by-default.][97652]\n+- [Prevent unwinding when `-C panic=abort` is used regardless of declared ABI.][96959]\n+- [lub: don't bail out due to empty binders.][97867]\n+\n+Compiler\n+--------\n+- [Stabilize the `bundle` native library modifier,][95818] also removing the\n+  deprecated `static-nobundle` linking kind.\n+- [Add Apple WatchOS compile targets\\*.][95243]\n+- [Add a Windows application manifest to rustc-main.][96737]\n+\n+\\* Refer to Rust's [platform support page][platform-support-doc] for more\n+   information on Rust's tiered platform support.\n+\n+Libraries\n+---------\n+- [Implement `Copy`, `Clone`, `PartialEq` and `Eq` for `core::fmt::Alignment`.][94530]\n+- [Extend `ptr::null` and `null_mut` to all thin (including extern) types.][94954]\n+- [`impl Read and Write for VecDeque<u8>`.][95632]\n+- [STD support for the Nintendo 3DS.][95897]\n+- [Make write/print macros eagerly drop temporaries.][96455]\n+- [Implement internal traits that enable `[OsStr]::join`.][96881]\n+- [Implement `Hash` for `core::alloc::Layout`.][97034]\n+- [Add capacity documentation for `OsString`.][97202]\n+- [Put a bound on collection misbehavior.][97316]\n+- [Make `std::mem::needs_drop` accept `?Sized`.][97675]\n+- [`impl Termination for Infallible` and then make the `Result` impls of `Termination` more generic.][97803]\n+- [Document Rust's stance on `/proc/self/mem`.][97837]\n+\n+Stabilized APIs\n+---------------\n+\n+- [`array::from_fn`]\n+- [`Box::into_pin`]\n+- [`BinaryHeap::try_reserve`]\n+- [`BinaryHeap::try_reserve_exact`]\n+- [`OsString::try_reserve`]\n+- [`OsString::try_reserve_exact`]\n+- [`PathBuf::try_reserve`]\n+- [`PathBuf::try_reserve_exact`]\n+- [`Path::try_exists`]\n+- [`Ref::filter_map`]\n+- [`RefMut::filter_map`]\n+- [`NonNull::<[T]>::len`][`NonNull::<slice>::len`]\n+- [`ToOwned::clone_into`]\n+- [`Ipv6Addr::to_ipv4_mapped`]\n+- [`unix::io::AsFd`]\n+- [`unix::io::BorrowedFd<'fd>`]\n+- [`unix::io::OwnedFd`]\n+- [`windows::io::AsHandle`]\n+- [`windows::io::BorrowedHandle<'handle>`]\n+- [`windows::io::OwnedHandle`]\n+- [`windows::io::HandleOrInvalid`]\n+- [`windows::io::HandleOrNull`]\n+- [`windows::io::InvalidHandleError`]\n+- [`windows::io::NullHandleError`]\n+- [`windows::io::AsSocket`]\n+- [`windows::io::BorrowedSocket<'handle>`]\n+- [`windows::io::OwnedSocket`]\n+- [`thread::scope`]\n+- [`thread::Scope`]\n+- [`thread::ScopedJoinHandle`]\n+\n+These APIs are now usable in const contexts:\n+\n+- [`array::from_ref`]\n+- [`slice::from_ref`]\n+- [`intrinsics::copy`]\n+- [`intrinsics::copy_nonoverlapping`]\n+- [`<*const T>::copy_to`]\n+- [`<*const T>::copy_to_nonoverlapping`]\n+- [`<*mut T>::copy_to`]\n+- [`<*mut T>::copy_to_nonoverlapping`]\n+- [`<*mut T>::copy_from`]\n+- [`<*mut T>::copy_from_nonoverlapping`]\n+- [`str::from_utf8`]\n+- [`Utf8Error::error_len`]\n+- [`Utf8Error::valid_up_to`]\n+- [`Condvar::new`]\n+- [`Mutex::new`]\n+- [`RwLock::new`]\n+\n+Cargo\n+-----\n+- [Stabilize the `--config path` command-line argument.][cargo/10755]\n+- [Expose rust-version in the environment as `CARGO_PKG_RUST_VERSION`.][cargo/10713]\n+\n+Compatibility Notes\n+-------------------\n+\n+- [`#[link]` attributes are now checked more strictly,][96885] which may introduce\n+  errors for invalid attribute arguments that were previously ignored.\n+\n+Internal Changes\n+----------------\n+\n+These changes provide no direct user facing benefits, but represent significant\n+improvements to the internals and overall performance of rustc\n+and related tools.\n+\n+- [Prepare Rust for LLVM opaque pointers.][94214]\n+\n+[94214]: https://github.com/rust-lang/rust/pull/94214/\n+[94530]: https://github.com/rust-lang/rust/pull/94530/\n+[94954]: https://github.com/rust-lang/rust/pull/94954/\n+[95243]: https://github.com/rust-lang/rust/pull/95243/\n+[95565]: https://github.com/rust-lang/rust/pull/95565/\n+[95632]: https://github.com/rust-lang/rust/pull/95632/\n+[95818]: https://github.com/rust-lang/rust/pull/95818/\n+[95897]: https://github.com/rust-lang/rust/pull/95897/\n+[95953]: https://github.com/rust-lang/rust/pull/95953/\n+[96296]: https://github.com/rust-lang/rust/pull/96296/\n+[96455]: https://github.com/rust-lang/rust/pull/96455/\n+[96737]: https://github.com/rust-lang/rust/pull/96737/\n+[96868]: https://github.com/rust-lang/rust/pull/96868/\n+[96881]: https://github.com/rust-lang/rust/pull/96881/\n+[96885]: https://github.com/rust-lang/rust/pull/96885/\n+[96959]: https://github.com/rust-lang/rust/pull/96959/\n+[97034]: https://github.com/rust-lang/rust/pull/97034/\n+[97202]: https://github.com/rust-lang/rust/pull/97202/\n+[97316]: https://github.com/rust-lang/rust/pull/97316/\n+[97652]: https://github.com/rust-lang/rust/pull/97652/\n+[97675]: https://github.com/rust-lang/rust/pull/97675/\n+[97803]: https://github.com/rust-lang/rust/pull/97803/\n+[97837]: https://github.com/rust-lang/rust/pull/97837/\n+[97867]: https://github.com/rust-lang/rust/pull/97867/\n+[cargo/10713]: https://github.com/rust-lang/cargo/pull/10713/\n+[cargo/10755]: https://github.com/rust-lang/cargo/pull/10755/\n+\n+[`array::from_fn`]: https://doc.rust-lang.org/stable/std/array/fn.from_fn.html\n+[`Box::into_pin`]: https://doc.rust-lang.org/stable/std/boxed/struct.Box.html#method.into_pin\n+[`BinaryHeap::try_reserve_exact`]: https://doc.rust-lang.org/stable/alloc/collections/binary_heap/struct.BinaryHeap.html#method.try_reserve_exact\n+[`BinaryHeap::try_reserve`]: https://doc.rust-lang.org/stable/std/collections/struct.BinaryHeap.html#method.try_reserve\n+[`OsString::try_reserve`]: https://doc.rust-lang.org/stable/std/ffi/struct.OsString.html#method.try_reserve\n+[`OsString::try_reserve_exact`]: https://doc.rust-lang.org/stable/std/ffi/struct.OsString.html#method.try_reserve_exact\n+[`PathBuf::try_reserve`]: https://doc.rust-lang.org/stable/std/path/struct.PathBuf.html#method.try_reserve\n+[`PathBuf::try_reserve_exact`]: https://doc.rust-lang.org/stable/std/path/struct.PathBuf.html#method.try_reserve_exact\n+[`Path::try_exists`]: https://doc.rust-lang.org/stable/std/path/struct.Path.html#method.try_exists\n+[`Ref::filter_map`]: https://doc.rust-lang.org/stable/std/cell/struct.Ref.html#method.filter_map\n+[`RefMut::filter_map`]: https://doc.rust-lang.org/stable/std/cell/struct.RefMut.html#method.filter_map\n+[`NonNull::<slice>::len`]: https://doc.rust-lang.org/stable/std/ptr/struct.NonNull.html#method.len\n+[`ToOwned::clone_into`]: https://doc.rust-lang.org/stable/std/borrow/trait.ToOwned.html#method.clone_into\n+[`Ipv6Addr::to_ipv4_mapped`]: https://doc.rust-lang.org/stable/std/net/struct.Ipv6Addr.html#method.to_ipv4_mapped\n+[`unix::io::AsFd`]: https://doc.rust-lang.org/stable/std/os/unix/io/trait.AsFd.html\n+[`unix::io::BorrowedFd<'fd>`]: https://doc.rust-lang.org/stable/std/os/unix/io/struct.BorrowedFd.html\n+[`unix::io::OwnedFd`]: https://doc.rust-lang.org/stable/std/os/unix/io/struct.OwnedFd.html\n+[`windows::io::AsHandle`]: https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsHandle.html\n+[`windows::io::BorrowedHandle<'handle>`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.BorrowedHandle.html\n+[`windows::io::OwnedHandle`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.OwnedHandle.html\n+[`windows::io::HandleOrInvalid`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.HandleOrInvalid.html\n+[`windows::io::HandleOrNull`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.HandleOrNull.html\n+[`windows::io::InvalidHandleError`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.InvalidHandleError.html\n+[`windows::io::NullHandleError`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.NullHandleError.html\n+[`windows::io::AsSocket`]: https://doc.rust-lang.org/stable/std/os/windows/io/trait.AsSocket.html\n+[`windows::io::BorrowedSocket<'handle>`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.BorrowedSocket.html\n+[`windows::io::OwnedSocket`]: https://doc.rust-lang.org/stable/std/os/windows/io/struct.OwnedSocket.html\n+[`thread::scope`]: https://doc.rust-lang.org/stable/std/thread/fn.scope.html\n+[`thread::Scope`]: https://doc.rust-lang.org/stable/std/thread/struct.Scope.html\n+[`thread::ScopedJoinHandle`]: https://doc.rust-lang.org/stable/std/thread/struct.ScopedJoinHandle.html\n+\n+[`array::from_ref`]: https://doc.rust-lang.org/stable/std/array/fn.from_ref.html\n+[`slice::from_ref`]: https://doc.rust-lang.org/stable/std/slice/fn.from_ref.html\n+[`intrinsics::copy`]: https://doc.rust-lang.org/stable/std/intrinsics/fn.copy.html\n+[`intrinsics::copy_nonoverlapping`]: https://doc.rust-lang.org/stable/std/intrinsics/fn.copy_nonoverlapping.html\n+[`<*const T>::copy_to`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.copy_to\n+[`<*const T>::copy_to_nonoverlapping`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.copy_to_nonoverlapping\n+[`<*mut T>::copy_to`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.copy_to-1\n+[`<*mut T>::copy_to_nonoverlapping`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.copy_to_nonoverlapping-1\n+[`<*mut T>::copy_from`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.copy_from\n+[`<*mut T>::copy_from_nonoverlapping`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.copy_from_nonoverlapping\n+[`str::from_utf8`]: https://doc.rust-lang.org/stable/std/str/fn.from_utf8.html\n+[`Utf8Error::error_len`]: https://doc.rust-lang.org/stable/std/str/struct.Utf8Error.html#method.error_len\n+[`Utf8Error::valid_up_to`]: https://doc.rust-lang.org/stable/std/str/struct.Utf8Error.html#method.valid_up_to\n+[`Condvar::new`]: https://doc.rust-lang.org/stable/std/sync/struct.Condvar.html#method.new\n+[`Mutex::new`]: https://doc.rust-lang.org/stable/std/sync/struct.Mutex.html#method.new\n+[`RwLock::new`]: https://doc.rust-lang.org/stable/std/sync/struct.RwLock.html#method.new\n+\n+Version 1.62.1 (2022-07-19)\n+==========================\n+\n+Rust 1.62.1 addresses a few recent regressions in the compiler and standard\n+library, and also mitigates a CPU vulnerability on Intel SGX.\n+\n+* [The compiler fixed unsound function coercions involving `impl Trait` return types.][98608]\n+* [The compiler fixed an incremental compilation bug with `async fn` lifetimes.][98890]\n+* [Windows added a fallback for overlapped I/O in synchronous reads and writes.][98950]\n+* [The `x86_64-fortanix-unknown-sgx` target added a mitigation for the\n+  MMIO stale data vulnerability][98126], advisory [INTEL-SA-00615].\n+\n+[98608]: https://github.com/rust-lang/rust/issues/98608\n+[98890]: https://github.com/rust-lang/rust/issues/98890\n+[98950]: https://github.com/rust-lang/rust/pull/98950\n+[98126]: https://github.com/rust-lang/rust/pull/98126\n+[INTEL-SA-00615]: https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00615.html\n+\n Version 1.62.0 (2022-06-30)\n ==========================\n "}]}