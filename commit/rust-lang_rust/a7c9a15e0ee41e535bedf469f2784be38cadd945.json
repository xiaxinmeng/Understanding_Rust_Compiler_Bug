{"sha": "a7c9a15e0ee41e535bedf469f2784be38cadd945", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YzlhMTVlMGVlNDFlNTM1YmVkZjQ2OWYyNzg0YmUzOGNhZGQ5NDU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-11T15:33:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-12T21:58:58Z"}, "message": "outlives.rs: remove use of ty.walk and replace with recursive of\nty.walk_shallow, add add'l comments.", "tree": {"sha": "237ce55bbb9a6463b72f8d9d1b7fb892a239fb8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/237ce55bbb9a6463b72f8d9d1b7fb892a239fb8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7c9a15e0ee41e535bedf469f2784be38cadd945", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c9a15e0ee41e535bedf469f2784be38cadd945", "html_url": "https://github.com/rust-lang/rust/commit/a7c9a15e0ee41e535bedf469f2784be38cadd945", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7c9a15e0ee41e535bedf469f2784be38cadd945/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a264440ab0f498e1ab77b17d24c3d6988c721c27", "url": "https://api.github.com/repos/rust-lang/rust/commits/a264440ab0f498e1ab77b17d24c3d6988c721c27", "html_url": "https://github.com/rust-lang/rust/commit/a264440ab0f498e1ab77b17d24c3d6988c721c27"}], "stats": {"total": 232, "additions": 125, "deletions": 107}, "files": [{"sha": "9e40910b8a66e256e4b1e7bb709b88030133ed6b", "filename": "src/librustc/middle/outlives.rs", "status": "modified", "additions": 125, "deletions": 107, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/a7c9a15e0ee41e535bedf469f2784be38cadd945/src%2Flibrustc%2Fmiddle%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c9a15e0ee41e535bedf469f2784be38cadd945/src%2Flibrustc%2Fmiddle%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Foutlives.rs?ref=a7c9a15e0ee41e535bedf469f2784be38cadd945", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// The outlines relation `T: 'a` or `'a: 'b`.\n+// The outlines relation `T: 'a` or `'a: 'b`. This code frequently\n+// refers to rules defined in RFC 1214 (`OutlivesFooBar`), so see that\n+// RFC for reference.\n \n use middle::infer::InferCtxt;\n use middle::ty::{self, RegionEscape, Ty};\n@@ -67,123 +69,139 @@ pub fn components<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n }\n \n fn compute_components<'a,'tcx>(infcx: &InferCtxt<'a,'tcx>,\n-                               ty0: Ty<'tcx>,\n+                               ty: Ty<'tcx>,\n                                out: &mut Vec<Component<'tcx>>) {\n     // Descend through the types, looking for the various \"base\"\n     // components and collecting them into `out`. This is not written\n     // with `collect()` because of the need to sometimes skip subtrees\n     // in the `subtys` iterator (e.g., when encountering a\n     // projection).\n-    let mut subtys = ty0.walk();\n-    while let Some(ty) = subtys.next() {\n-        match ty.sty {\n-            ty::TyClosure(_, ref substs) => {\n-                // FIXME(#27086). We do not accumulate from substs, since they\n-                // don't represent reachable data. This means that, in\n-                // practice, some of the lifetime parameters might not\n-                // be in scope when the body runs, so long as there is\n-                // no reachable data with that lifetime. For better or\n-                // worse, this is consistent with fn types, however,\n-                // which can also encapsulate data in this fashion\n-                // (though it's somewhat harder, and typically\n-                // requires virtual dispatch).\n-                //\n-                // Note that changing this (in a naive way, at least)\n-                // causes regressions for what appears to be perfectly\n-                // reasonable code like this:\n-                //\n-                // ```\n-                // fn foo<'a>(p: &Data<'a>) {\n-                //    bar(|q: &mut Parser| q.read_addr())\n-                // }\n-                // fn bar(p: Box<FnMut(&mut Parser)+'static>) {\n-                // }\n-                // ```\n-                //\n-                // Note that `p` (and `'a`) are not used in the\n-                // closure at all, but to meet the requirement that\n-                // the closure type `C: 'static` (so it can be coerced\n-                // to the object type), we get the requirement that\n-                // `'a: 'static` since `'a` appears in the closure\n-                // type `C`.\n-                //\n-                // A smarter fix might \"prune\" unused `func_substs` --\n-                // this would avoid breaking simple examples like\n-                // this, but would still break others (which might\n-                // indeed be invalid, depending on your POV). Pruning\n-                // would be a subtle process, since we have to see\n-                // what func/type parameters are used and unused,\n-                // taking into consideration UFCS and so forth.\n-\n-                for &upvar_ty in &substs.upvar_tys {\n-                    compute_components(infcx, upvar_ty, out);\n-                }\n-                subtys.skip_current_subtree();\n+    match ty.sty {\n+        ty::TyClosure(_, ref substs) => {\n+            // FIXME(#27086). We do not accumulate from substs, since they\n+            // don't represent reachable data. This means that, in\n+            // practice, some of the lifetime parameters might not\n+            // be in scope when the body runs, so long as there is\n+            // no reachable data with that lifetime. For better or\n+            // worse, this is consistent with fn types, however,\n+            // which can also encapsulate data in this fashion\n+            // (though it's somewhat harder, and typically\n+            // requires virtual dispatch).\n+            //\n+            // Note that changing this (in a naive way, at least)\n+            // causes regressions for what appears to be perfectly\n+            // reasonable code like this:\n+            //\n+            // ```\n+            // fn foo<'a>(p: &Data<'a>) {\n+            //    bar(|q: &mut Parser| q.read_addr())\n+            // }\n+            // fn bar(p: Box<FnMut(&mut Parser)+'static>) {\n+            // }\n+            // ```\n+            //\n+            // Note that `p` (and `'a`) are not used in the\n+            // closure at all, but to meet the requirement that\n+            // the closure type `C: 'static` (so it can be coerced\n+            // to the object type), we get the requirement that\n+            // `'a: 'static` since `'a` appears in the closure\n+            // type `C`.\n+            //\n+            // A smarter fix might \"prune\" unused `func_substs` --\n+            // this would avoid breaking simple examples like\n+            // this, but would still break others (which might\n+            // indeed be invalid, depending on your POV). Pruning\n+            // would be a subtle process, since we have to see\n+            // what func/type parameters are used and unused,\n+            // taking into consideration UFCS and so forth.\n+\n+            for &upvar_ty in &substs.upvar_tys {\n+                compute_components(infcx, upvar_ty, out);\n             }\n-            ty::TyBareFn(..) | ty::TyTrait(..) => {\n-                subtys.skip_current_subtree();\n+        }\n+\n+        // Bare functions and traits are both binders. In the RFC,\n+        // this means we would add the bound regions to the \"bound\n+        // regions list\".  In our representation, no such list is\n+        // maintained explicitly, because bound regions themselves can\n+        // be readily identified. However, because the outlives\n+        // relation did not used to be applied to fn/trait-object\n+        // arguments, we due wrap the resulting components in an\n+        // RFC1214 wrapper so we can issue warnings.\n+        ty::TyBareFn(..) | ty::TyTrait(..) => {\n+            // OutlivesFunction, OutlivesObject, OutlivesFragment\n+            let subcomponents = capture_components(infcx, ty);\n+            out.push(Component::RFC1214(subcomponents));\n+        }\n+\n+        // OutlivesTypeParameterEnv -- the actual checking that `X:'a`\n+        // is implied by the environment is done in regionck.\n+        ty::TyParam(p) => {\n+            out.push(Component::Param(p));\n+        }\n+\n+        // For projections, we prefer to generate an obligation like\n+        // `<P0 as Trait<P1...Pn>>::Foo: 'a`, because this gives the\n+        // regionck more ways to prove that it holds. However,\n+        // regionck is not (at least currently) prepared to deal with\n+        // higher-ranked regions that may appear in the\n+        // trait-ref. Therefore, if we see any higher-ranke regions,\n+        // we simply fallback to the most restrictive rule, which\n+        // requires that `Pi: 'a` for all `i`.\n+        ty::TyProjection(ref data) => {\n+            if !data.has_escaping_regions() {\n+                // best case: no escaping regions, so push the\n+                // projection and skip the subtree (thus generating no\n+                // constraints for Pi). This defers the choice between\n+                // the rules OutlivesProjectionEnv,\n+                // OutlivesProjectionTraitDef, and\n+                // OutlivesProjectionComponents to regionck.\n+                out.push(Component::Projection(*data));\n+            } else {\n+                // fallback case: hard code\n+                // OutlivesProjectionComponents.  Continue walking\n+                // through and constrain Pi.\n                 let subcomponents = capture_components(infcx, ty);\n-                out.push(Component::RFC1214(subcomponents));\n-            }\n-            ty::TyParam(p) => {\n-                out.push(Component::Param(p));\n-                subtys.skip_current_subtree();\n-            }\n-            ty::TyProjection(ref data) => {\n-                // For projections, we prefer to generate an\n-                // obligation like `<P0 as Trait<P1...Pn>>::Foo: 'a`,\n-                // because this gives the regionck more ways to prove\n-                // that it holds. However, regionck is not (at least\n-                // currently) prepared to deal with higher-ranked\n-                // regions that may appear in the\n-                // trait-ref. Therefore, if we see any higher-ranke\n-                // regions, we simply fallback to the most restrictive\n-                // rule, which requires that `Pi: 'a` for all `i`.\n-\n-                if !data.has_escaping_regions() {\n-                    // best case: no escaping regions, so push the\n-                    // projection and skip the subtree (thus\n-                    // generating no constraints for Pi).\n-                    out.push(Component::Projection(*data));\n-                } else {\n-                    // fallback case: continue walking through and\n-                    // constrain Pi.\n-                    let subcomponents = capture_components(infcx, ty);\n-                    out.push(Component::EscapingProjection(subcomponents));\n-                }\n-                subtys.skip_current_subtree();\n+                out.push(Component::EscapingProjection(subcomponents));\n             }\n-            ty::TyInfer(_) => {\n-                let ty = infcx.resolve_type_vars_if_possible(&ty);\n-                if let ty::TyInfer(infer_ty) = ty.sty {\n-                    out.push(Component::UnresolvedInferenceVariable(infer_ty));\n-                } else {\n-                    compute_components(infcx, ty, out);\n-                }\n+        }\n+\n+        // If we encounter an inference variable, try to resolve it\n+        // and proceed with resolved version. If we cannot resolve it,\n+        // then record the unresolved variable as a component.\n+        ty::TyInfer(_) => {\n+            let ty = infcx.resolve_type_vars_if_possible(&ty);\n+            if let ty::TyInfer(infer_ty) = ty.sty {\n+                out.push(Component::UnresolvedInferenceVariable(infer_ty));\n+            } else {\n+                compute_components(infcx, ty, out);\n             }\n+        }\n \n-            // Most types do not introduce any region binders, nor\n-            // involve any other subtle cases, and so the WF relation\n-            // simply constraints any regions referenced directly by\n-            // the type and then visits the types that are lexically\n-            // contained within. (The comments refer to relevant rules\n-            // from RFC1214.)\n-            ty::TyBool(..) |        // OutlivesScalar\n-            ty::TyChar(..) |        // OutlivesScalar\n-            ty::TyInt(..) |         // OutlivesScalar\n-            ty::TyUint(..) |        // OutlivesScalar\n-            ty::TyFloat(..) |       // OutlivesScalar\n-            ty::TyEnum(..) |        // OutlivesNominalType\n-            ty::TyStruct(..) |      // OutlivesNominalType\n-            ty::TyBox(..) |         // OutlivesNominalType (ish)\n-            ty::TyStr(..) |         // OutlivesScalar (ish)\n-            ty::TyArray(..) |       // ...\n-            ty::TySlice(..) |       // ...\n-            ty::TyRawPtr(..) |      // ...\n-            ty::TyRef(..) |         // OutlivesReference\n-            ty::TyTuple(..) |       // ...\n-            ty::TyError(..) => {\n-                push_region_constraints(out, ty.regions());\n+        // Most types do not introduce any region binders, nor\n+        // involve any other subtle cases, and so the WF relation\n+        // simply constraints any regions referenced directly by\n+        // the type and then visits the types that are lexically\n+        // contained within. (The comments refer to relevant rules\n+        // from RFC1214.)\n+        ty::TyBool(..) |        // OutlivesScalar\n+        ty::TyChar(..) |        // OutlivesScalar\n+        ty::TyInt(..) |         // OutlivesScalar\n+        ty::TyUint(..) |        // OutlivesScalar\n+        ty::TyFloat(..) |       // OutlivesScalar\n+        ty::TyEnum(..) |        // OutlivesNominalType\n+        ty::TyStruct(..) |      // OutlivesNominalType\n+        ty::TyBox(..) |         // OutlivesNominalType (ish)\n+        ty::TyStr(..) |         // OutlivesScalar (ish)\n+        ty::TyArray(..) |       // ...\n+        ty::TySlice(..) |       // ...\n+        ty::TyRawPtr(..) |      // ...\n+        ty::TyRef(..) |         // OutlivesReference\n+        ty::TyTuple(..) |       // ...\n+        ty::TyError(..) => {\n+            push_region_constraints(out, ty.regions());\n+            for subty in ty.walk_shallow() {\n+                compute_components(infcx, subty, out);\n             }\n         }\n     }"}]}