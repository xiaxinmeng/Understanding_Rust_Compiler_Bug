{"sha": "96b299e1f08e2b6bbb8c03dfaa2881898dc6a0cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YjI5OWUxZjA4ZTJiNmJiYjhjMDNkZmFhMjg4MTg5OGRjNmEwY2I=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-02-17T04:16:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-02-23T09:47:05Z"}, "message": "std: Remove unstable::lang\n\nPut the lonely lang items here closer to the code they are calling.", "tree": {"sha": "836bd4e6e477f86e60765aa6be467947c667c356", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/836bd4e6e477f86e60765aa6be467947c667c356"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96b299e1f08e2b6bbb8c03dfaa2881898dc6a0cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96b299e1f08e2b6bbb8c03dfaa2881898dc6a0cb", "html_url": "https://github.com/rust-lang/rust/commit/96b299e1f08e2b6bbb8c03dfaa2881898dc6a0cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96b299e1f08e2b6bbb8c03dfaa2881898dc6a0cb/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e57808a01407be24a35f69148d20b76341b162f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e57808a01407be24a35f69148d20b76341b162f", "html_url": "https://github.com/rust-lang/rust/commit/3e57808a01407be24a35f69148d20b76341b162f"}], "stats": {"total": 91, "additions": 36, "deletions": 55}, "files": [{"sha": "29b3dcaa4f29a693e41c44d42e97a001bdb5ed8d", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/96b299e1f08e2b6bbb8c03dfaa2881898dc6a0cb/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b299e1f08e2b6bbb8c03dfaa2881898dc6a0cb/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=96b299e1f08e2b6bbb8c03dfaa2881898dc6a0cb", "patch": "@@ -276,6 +276,14 @@ impl Drop for MemoryRegion {\n     }\n }\n \n+\n+#[cfg(not(test))]\n+#[lang=\"malloc\"]\n+#[inline]\n+pub unsafe fn local_malloc_(drop_glue: fn(*mut u8), size: uint, align: uint) -> *u8 {\n+    local_malloc(drop_glue, size, align)\n+}\n+\n #[inline]\n pub unsafe fn local_malloc(drop_glue: fn(*mut u8), size: uint, align: uint) -> *u8 {\n     // FIXME: Unsafe borrow for speed. Lame.\n@@ -288,7 +296,16 @@ pub unsafe fn local_malloc(drop_glue: fn(*mut u8), size: uint, align: uint) -> *\n     }\n }\n \n-// A little compatibility function\n+#[cfg(not(test))]\n+#[lang=\"free\"]\n+#[inline]\n+pub unsafe fn local_free_(ptr: *u8) {\n+    local_free(ptr)\n+}\n+\n+// NB: Calls to free CANNOT be allowed to fail, as throwing an exception from\n+// inside a landing pad may corrupt the state of the exception handler. If a\n+// problem occurs, call exit instead.\n #[inline]\n pub unsafe fn local_free(ptr: *u8) {\n     // FIXME: Unsafe borrow for speed. Lame."}, {"sha": "b9459aed582ae9c42136f64f5ba24eb7684ec970", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/96b299e1f08e2b6bbb8c03dfaa2881898dc6a0cb/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b299e1f08e2b6bbb8c03dfaa2881898dc6a0cb/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=96b299e1f08e2b6bbb8c03dfaa2881898dc6a0cb", "patch": "@@ -376,6 +376,24 @@ pub mod eabi {\n     }\n }\n \n+#[cold]\n+#[lang=\"fail_\"]\n+#[cfg(not(test))]\n+pub fn fail_(expr: *u8, file: *u8, line: uint) -> ! {\n+    begin_unwind_raw(expr, file, line);\n+}\n+\n+#[cold]\n+#[lang=\"fail_bounds_check\"]\n+#[cfg(not(test))]\n+pub fn fail_bounds_check(file: *u8, line: uint, index: uint, len: uint) -> ! {\n+    use c_str::ToCStr;\n+\n+    let msg = format!(\"index out of bounds: the len is {} but the index is {}\",\n+                      len as uint, index as uint);\n+    msg.with_c_str(|buf| fail_(buf as *u8, file, line))\n+}\n+\n /// This is the entry point of unwinding for things like lang items and such.\n /// The arguments are normally generated by the compiler, and need to\n /// have static lifetimes."}, {"sha": "8818cb0d270b6cc2c4bbfbe3e4f339a7240b5747", "filename": "src/libstd/unstable/lang.rs", "status": "removed", "additions": 0, "deletions": 52, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3e57808a01407be24a35f69148d20b76341b162f/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e57808a01407be24a35f69148d20b76341b162f/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=3e57808a01407be24a35f69148d20b76341b162f", "patch": "@@ -1,52 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Runtime calls emitted by the compiler.\n-\n-use c_str::CString;\n-use libc::c_char;\n-use cast;\n-use option::Some;\n-\n-#[cold]\n-#[lang=\"fail_\"]\n-pub fn fail_(expr: *u8, file: *u8, line: uint) -> ! {\n-    ::rt::begin_unwind_raw(expr, file, line);\n-}\n-\n-#[cold]\n-#[lang=\"fail_bounds_check\"]\n-pub fn fail_bounds_check(file: *u8, line: uint, index: uint, len: uint) -> ! {\n-    let msg = format!(\"index out of bounds: the len is {} but the index is {}\",\n-                      len as uint, index as uint);\n-\n-    let file_str = match unsafe { CString::new(file as *c_char, false) }.as_str() {\n-        // This transmute is safe because `file` is always stored in rodata.\n-        Some(s) => unsafe { cast::transmute::<&str, &'static str>(s) },\n-        None    => \"file wasn't UTF-8 safe\"\n-    };\n-\n-    ::rt::begin_unwind(msg, file_str, line)\n-}\n-\n-#[lang=\"malloc\"]\n-#[inline]\n-pub unsafe fn local_malloc(drop_glue: fn(*mut u8), size: uint, align: uint) -> *u8 {\n-    ::rt::local_heap::local_malloc(drop_glue, size, align)\n-}\n-\n-// NB: Calls to free CANNOT be allowed to fail, as throwing an exception from\n-// inside a landing pad may corrupt the state of the exception handler. If a\n-// problem occurs, call exit instead.\n-#[lang=\"free\"]\n-#[inline]\n-pub unsafe fn local_free(ptr: *u8) {\n-    ::rt::local_heap::local_free(ptr);\n-}"}, {"sha": "1a4862fd733993d2eafeddf2037b894d0b202479", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96b299e1f08e2b6bbb8c03dfaa2881898dc6a0cb/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b299e1f08e2b6bbb8c03dfaa2881898dc6a0cb/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=96b299e1f08e2b6bbb8c03dfaa2881898dc6a0cb", "patch": "@@ -17,8 +17,6 @@ pub mod dynamic_lib;\n \n pub mod finally;\n pub mod simd;\n-#[cfg(not(test))]\n-pub mod lang;\n pub mod sync;\n pub mod mutex;\n pub mod stack;"}]}