{"sha": "8a13871b69924b74cfa1d737f2894068b37ea7ea", "node_id": "C_kwDOAAsO6NoAKDhhMTM4NzFiNjk5MjRiNzRjZmExZDczN2YyODk0MDY4YjM3ZWE3ZWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-26T10:00:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-26T10:00:27Z"}, "message": "Auto merge of #100944 - nnethercote:shrink-thir-Expr, r=cjgillot\n\nShrink `thir::Expr`\n\nr? `@cjgillot`", "tree": {"sha": "005775f17a3b5454f4686d5a6fd87a9d3fbc414b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/005775f17a3b5454f4686d5a6fd87a9d3fbc414b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a13871b69924b74cfa1d737f2894068b37ea7ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a13871b69924b74cfa1d737f2894068b37ea7ea", "html_url": "https://github.com/rust-lang/rust/commit/8a13871b69924b74cfa1d737f2894068b37ea7ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a13871b69924b74cfa1d737f2894068b37ea7ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "983f4daddf238d114c4adc4751c5528fc6695a5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/983f4daddf238d114c4adc4751c5528fc6695a5a", "html_url": "https://github.com/rust-lang/rust/commit/983f4daddf238d114c4adc4751c5528fc6695a5a"}, {"sha": "5a41eb81cabaa074072eb5f76a3ba771c7e68899", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a41eb81cabaa074072eb5f76a3ba771c7e68899", "html_url": "https://github.com/rust-lang/rust/commit/5a41eb81cabaa074072eb5f76a3ba771c7e68899"}], "stats": {"total": 341, "additions": 191, "deletions": 150}, "files": [{"sha": "0f2504e3d9afee0386b1240cee087a78851e92eb", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 53, "deletions": 58, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -15,50 +15,33 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::RangeEnd;\n use rustc_index::newtype_index;\n use rustc_index::vec::IndexVec;\n-use rustc_middle::infer::canonical::Canonical;\n use rustc_middle::middle::region;\n use rustc_middle::mir::interpret::AllocId;\n use rustc_middle::mir::{self, BinOp, BorrowKind, FakeReadCause, Field, Mutability, UnOp};\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::CanonicalUserTypeAnnotation;\n-use rustc_middle::ty::{self, AdtDef, Ty, UpvarSubsts, UserType};\n+use rustc_middle::ty::{self, AdtDef, Ty, UpvarSubsts};\n+use rustc_middle::ty::{CanonicalUserType, CanonicalUserTypeAnnotation};\n+use rustc_span::def_id::LocalDefId;\n use rustc_span::{Span, Symbol, DUMMY_SP};\n use rustc_target::abi::VariantIdx;\n use rustc_target::asm::InlineAsmRegOrRegClass;\n-\n-use rustc_span::def_id::LocalDefId;\n use std::fmt;\n use std::ops::Index;\n \n pub mod visit;\n \n-newtype_index! {\n-    /// An index to an [`Arm`] stored in [`Thir::arms`]\n-    #[derive(HashStable)]\n-    pub struct ArmId {\n-        DEBUG_FORMAT = \"a{}\"\n-    }\n-}\n-\n-newtype_index! {\n-    /// An index to an [`Expr`] stored in [`Thir::exprs`]\n-    #[derive(HashStable)]\n-    pub struct ExprId {\n-        DEBUG_FORMAT = \"e{}\"\n-    }\n-}\n-\n-newtype_index! {\n-    #[derive(HashStable)]\n-    /// An index to a [`Stmt`] stored in [`Thir::stmts`]\n-    pub struct StmtId {\n-        DEBUG_FORMAT = \"s{}\"\n-    }\n-}\n-\n macro_rules! thir_with_elements {\n-    ($($name:ident: $id:ty => $value:ty,)*) => {\n+    ($($name:ident: $id:ty => $value:ty => $format:literal,)*) => {\n+        $(\n+            newtype_index! {\n+                #[derive(HashStable)]\n+                pub struct $id {\n+                    DEBUG_FORMAT = $format\n+                }\n+            }\n+        )*\n+\n         /// A container for a THIR body.\n         ///\n         /// This can be indexed directly by any THIR index (e.g. [`ExprId`]).\n@@ -91,9 +74,10 @@ macro_rules! thir_with_elements {\n }\n \n thir_with_elements! {\n-    arms: ArmId => Arm<'tcx>,\n-    exprs: ExprId => Expr<'tcx>,\n-    stmts: StmtId => Stmt<'tcx>,\n+    arms: ArmId => Arm<'tcx> => \"a{}\",\n+    blocks: BlockId => Block => \"b{}\",\n+    exprs: ExprId => Expr<'tcx> => \"e{}\",\n+    stmts: StmtId => Stmt<'tcx> => \"s{}\",\n }\n \n #[derive(Copy, Clone, Debug, HashStable)]\n@@ -121,8 +105,10 @@ pub struct Block {\n     pub safety_mode: BlockSafety,\n }\n \n+type UserTy<'tcx> = Option<Box<CanonicalUserType<'tcx>>>;\n+\n #[derive(Clone, Debug, HashStable)]\n-pub struct Adt<'tcx> {\n+pub struct AdtExpr<'tcx> {\n     /// The ADT we're constructing.\n     pub adt_def: AdtDef<'tcx>,\n     /// The variant of the ADT.\n@@ -131,13 +117,30 @@ pub struct Adt<'tcx> {\n \n     /// Optional user-given substs: for something like `let x =\n     /// Bar::<T> { ... }`.\n-    pub user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+    pub user_ty: UserTy<'tcx>,\n \n     pub fields: Box<[FieldExpr]>,\n     /// The base, e.g. `Foo {x: 1, .. base}`.\n     pub base: Option<FruInfo<'tcx>>,\n }\n \n+#[derive(Clone, Debug, HashStable)]\n+pub struct ClosureExpr<'tcx> {\n+    pub closure_id: LocalDefId,\n+    pub substs: UpvarSubsts<'tcx>,\n+    pub upvars: Box<[ExprId]>,\n+    pub movability: Option<hir::Movability>,\n+    pub fake_reads: Vec<(ExprId, FakeReadCause, hir::HirId)>,\n+}\n+\n+#[derive(Clone, Debug, HashStable)]\n+pub struct InlineAsmExpr<'tcx> {\n+    pub template: &'tcx [InlineAsmTemplatePiece],\n+    pub operands: Box<[InlineAsmOperand<'tcx>]>,\n+    pub options: InlineAsmOptions,\n+    pub line_spans: &'tcx [Span],\n+}\n+\n #[derive(Copy, Clone, Debug, HashStable)]\n pub enum BlockSafety {\n     Safe,\n@@ -183,7 +186,7 @@ pub enum StmtKind<'tcx> {\n         initializer: Option<ExprId>,\n \n         /// `let pat: ty = <INIT> else { <ELSE> }\n-        else_block: Option<Block>,\n+        else_block: Option<BlockId>,\n \n         /// The lint level for this `let` statement.\n         lint_level: LintLevel,\n@@ -307,7 +310,7 @@ pub enum ExprKind<'tcx> {\n     },\n     /// A block.\n     Block {\n-        body: Block,\n+        block: BlockId,\n     },\n     /// An assignment: `lhs = rhs`.\n     Assign {\n@@ -387,27 +390,21 @@ pub enum ExprKind<'tcx> {\n         fields: Box<[ExprId]>,\n     },\n     /// An ADT constructor, e.g. `Foo {x: 1, y: 2}`.\n-    Adt(Box<Adt<'tcx>>),\n+    Adt(Box<AdtExpr<'tcx>>),\n     /// A type ascription on a place.\n     PlaceTypeAscription {\n         source: ExprId,\n         /// Type that the user gave to this expression\n-        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+        user_ty: UserTy<'tcx>,\n     },\n     /// A type ascription on a value, e.g. `42: i32`.\n     ValueTypeAscription {\n         source: ExprId,\n         /// Type that the user gave to this expression\n-        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+        user_ty: UserTy<'tcx>,\n     },\n     /// A closure definition.\n-    Closure {\n-        closure_id: LocalDefId,\n-        substs: UpvarSubsts<'tcx>,\n-        upvars: Box<[ExprId]>,\n-        movability: Option<hir::Movability>,\n-        fake_reads: Vec<(ExprId, FakeReadCause, hir::HirId)>,\n-    },\n+    Closure(Box<ClosureExpr<'tcx>>),\n     /// A literal.\n     Literal {\n         lit: &'tcx hir::Lit,\n@@ -416,17 +413,17 @@ pub enum ExprKind<'tcx> {\n     /// For literals that don't correspond to anything in the HIR\n     NonHirLiteral {\n         lit: ty::ScalarInt,\n-        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+        user_ty: UserTy<'tcx>,\n     },\n     /// A literal of a ZST type.\n     ZstLiteral {\n-        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+        user_ty: UserTy<'tcx>,\n     },\n     /// Associated constants and named constants\n     NamedConst {\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n-        user_ty: Option<Canonical<'tcx, UserType<'tcx>>>,\n+        user_ty: UserTy<'tcx>,\n     },\n     ConstParam {\n         param: ty::ParamConst,\n@@ -443,12 +440,7 @@ pub enum ExprKind<'tcx> {\n         def_id: DefId,\n     },\n     /// Inline assembly, i.e. `asm!()`.\n-    InlineAsm {\n-        template: &'tcx [InlineAsmTemplatePiece],\n-        operands: Box<[InlineAsmOperand<'tcx>]>,\n-        options: InlineAsmOptions,\n-        line_spans: &'tcx [Span],\n-    },\n+    InlineAsm(Box<InlineAsmExpr<'tcx>>),\n     /// An expression taking a reference to a thread local.\n     ThreadLocalRef(DefId),\n     /// A `yield` expression.\n@@ -815,7 +807,10 @@ mod size_asserts {\n     use super::*;\n     // These are in alphabetical order, which is easy to maintain.\n     static_assert_size!(Block, 56);\n-    static_assert_size!(Expr<'_>, 104);\n+    static_assert_size!(Expr<'_>, 64);\n+    static_assert_size!(ExprKind<'_>, 40);\n     static_assert_size!(Pat<'_>, 24);\n-    static_assert_size!(Stmt<'_>, 120);\n+    static_assert_size!(PatKind<'_>, 112);\n+    static_assert_size!(Stmt<'_>, 72);\n+    static_assert_size!(StmtKind<'_>, 64);\n }"}, {"sha": "c5c48a6360925a151a3c50ca3ef457059c6bad8e", "filename": "compiler/rustc_middle/src/thir/visit.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir%2Fvisit.rs?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -1,5 +1,6 @@\n use super::{\n-    Arm, Block, Expr, ExprKind, Guard, InlineAsmOperand, Pat, PatKind, Stmt, StmtKind, Thir,\n+    AdtExpr, Arm, Block, ClosureExpr, Expr, ExprKind, Guard, InlineAsmExpr, InlineAsmOperand, Pat,\n+    PatKind, Stmt, StmtKind, Thir,\n };\n \n pub trait Visitor<'a, 'tcx: 'a>: Sized {\n@@ -75,7 +76,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n                 visitor.visit_arm(&visitor.thir()[arm]);\n             }\n         }\n-        Block { ref body } => visitor.visit_block(body),\n+        Block { block } => visitor.visit_block(&visitor.thir()[block]),\n         Assign { lhs, rhs } | AssignOp { lhs, rhs, op: _ } => {\n             visitor.visit_expr(&visitor.thir()[lhs]);\n             visitor.visit_expr(&visitor.thir()[rhs]);\n@@ -108,7 +109,7 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n                 visitor.visit_expr(&visitor.thir()[field]);\n             }\n         }\n-        Adt(box crate::thir::Adt {\n+        Adt(box AdtExpr {\n             ref fields,\n             ref base,\n             adt_def: _,\n@@ -126,14 +127,20 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n         PlaceTypeAscription { source, user_ty: _ } | ValueTypeAscription { source, user_ty: _ } => {\n             visitor.visit_expr(&visitor.thir()[source])\n         }\n-        Closure { closure_id: _, substs: _, upvars: _, movability: _, fake_reads: _ } => {}\n+        Closure(box ClosureExpr {\n+            closure_id: _,\n+            substs: _,\n+            upvars: _,\n+            movability: _,\n+            fake_reads: _,\n+        }) => {}\n         Literal { lit: _, neg: _ } => {}\n         NonHirLiteral { lit: _, user_ty: _ } => {}\n         ZstLiteral { user_ty: _ } => {}\n         NamedConst { def_id: _, substs: _, user_ty: _ } => {}\n         ConstParam { param: _, def_id: _ } => {}\n         StaticRef { alloc_id: _, ty: _, def_id: _ } => {}\n-        InlineAsm { ref operands, template: _, options: _, line_spans: _ } => {\n+        InlineAsm(box InlineAsmExpr { ref operands, template: _, options: _, line_spans: _ }) => {\n             for op in &**operands {\n                 use InlineAsmOperand::*;\n                 match op {\n@@ -174,7 +181,7 @@ pub fn walk_stmt<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, stmt: &Stm\n             }\n             visitor.visit_pat(pattern);\n             if let Some(block) = else_block {\n-                visitor.visit_block(block)\n+                visitor.visit_block(&visitor.thir()[*block])\n             }\n         }\n     }"}, {"sha": "d5213dc0e0467869d797370d41ef0d564ccd0957", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -11,7 +11,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         destination: Place<'tcx>,\n         block: BasicBlock,\n-        ast_block: &Block,\n+        ast_block: BlockId,\n         source_info: SourceInfo,\n     ) -> BlockAnd<()> {\n         let Block {\n@@ -22,7 +22,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             expr,\n             targeted_by_break,\n             safety_mode,\n-        } = *ast_block;\n+        } = self.thir[ast_block];\n         let expr = expr.map(|expr| &self.thir[expr]);\n         self.in_opt_scope(opt_destruction_scope.map(|de| (de, source_info)), move |this| {\n             this.in_scope((region_scope, source_info), LintLevel::Inherited, move |this| {\n@@ -146,7 +146,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                                 block,\n                                                 init,\n                                                 initializer_span,\n-                                                else_block,\n+                                                *else_block,\n                                                 visibility_scope,\n                                                 last_remainder_scope,\n                                                 remainder_span,"}, {"sha": "b316a6eeac1ca7e6bee507b919fd342af7edd4e1", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -41,35 +41,35 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 Constant { span, user_ty: None, literal }\n             }\n-            ExprKind::NonHirLiteral { lit, user_ty } => {\n-                let user_ty = user_ty.map(|user_ty| {\n+            ExprKind::NonHirLiteral { lit, ref user_ty } => {\n+                let user_ty = user_ty.as_ref().map(|box user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span,\n-                        user_ty,\n+                        user_ty: *user_ty,\n                         inferred_ty: ty,\n                     })\n                 });\n                 let literal = ConstantKind::Val(ConstValue::Scalar(Scalar::Int(lit)), ty);\n \n                 Constant { span, user_ty: user_ty, literal }\n             }\n-            ExprKind::ZstLiteral { user_ty } => {\n-                let user_ty = user_ty.map(|user_ty| {\n+            ExprKind::ZstLiteral { ref user_ty } => {\n+                let user_ty = user_ty.as_ref().map(|box user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span,\n-                        user_ty,\n+                        user_ty: *user_ty,\n                         inferred_ty: ty,\n                     })\n                 });\n                 let literal = ConstantKind::Val(ConstValue::ZeroSized, ty);\n \n                 Constant { span, user_ty: user_ty, literal }\n             }\n-            ExprKind::NamedConst { def_id, substs, user_ty } => {\n-                let user_ty = user_ty.map(|user_ty| {\n+            ExprKind::NamedConst { def_id, substs, ref user_ty } => {\n+                let user_ty = user_ty.as_ref().map(|box user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span,\n-                        user_ty,\n+                        user_ty: *user_ty,\n                         inferred_ty: ty,\n                     })\n                 });"}, {"sha": "b8277f28cdc4300200b49dab6f758454996ad23a", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -513,7 +513,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 block.and(place_builder)\n             }\n \n-            ExprKind::PlaceTypeAscription { source, user_ty } => {\n+            ExprKind::PlaceTypeAscription { source, ref user_ty } => {\n                 let place_builder = unpack!(\n                     block = this.expr_as_place(\n                         block,\n@@ -522,11 +522,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         fake_borrow_temps,\n                     )\n                 );\n-                if let Some(user_ty) = user_ty {\n+                if let Some(box user_ty) = user_ty {\n                     let annotation_index =\n                         this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                             span: source_info.span,\n-                            user_ty,\n+                            user_ty: *user_ty,\n                             inferred_ty: expr.ty,\n                         });\n \n@@ -547,15 +547,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n                 block.and(place_builder)\n             }\n-            ExprKind::ValueTypeAscription { source, user_ty } => {\n+            ExprKind::ValueTypeAscription { source, ref user_ty } => {\n                 let source = &this.thir[source];\n                 let temp =\n                     unpack!(block = this.as_temp(block, source.temp_lifetime, source, mutability));\n-                if let Some(user_ty) = user_ty {\n+                if let Some(box user_ty) = user_ty {\n                     let annotation_index =\n                         this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                             span: source_info.span,\n-                            user_ty,\n+                            user_ty: *user_ty,\n                             inferred_ty: expr.ty,\n                         });\n                     this.cfg.push("}, {"sha": "4b232a1b515302fa1317dba9d2cc921d4026a501", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -302,7 +302,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 block.and(Rvalue::Aggregate(Box::new(AggregateKind::Tuple), fields))\n             }\n-            ExprKind::Closure { closure_id, substs, ref upvars, movability, ref fake_reads } => {\n+            ExprKind::Closure(box ClosureExpr {\n+                closure_id,\n+                substs,\n+                ref upvars,\n+                movability,\n+                ref fake_reads,\n+            }) => {\n                 // Convert the closure fake reads, if any, from `ExprRef` to mir `Place`\n                 // and push the fake reads.\n                 // This must come before creating the operands. This is required in case"}, {"sha": "e5dafb820bf8dad745f0c2227b732a468a5d45fb", "filename": "compiler/rustc_mir_build/src/build/expr/as_temp.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_temp.rs?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -83,8 +83,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // Don't bother with StorageLive and Dead for these temporaries,\n             // they are never assigned.\n             ExprKind::Break { .. } | ExprKind::Continue { .. } | ExprKind::Return { .. } => (),\n-            ExprKind::Block { body: Block { expr: None, targeted_by_break: false, .. } }\n-                if expr_ty.is_never() => {}\n+            ExprKind::Block { block }\n+                if let Block { expr: None, targeted_by_break: false, .. } = this.thir[block]\n+                    && expr_ty.is_never() => {}\n             _ => {\n                 this.cfg\n                     .push(block, Statement { source_info, kind: StatementKind::StorageLive(temp) });"}, {"sha": "48ec7a06724a11d0c11081d2da602d590681fe4c", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -46,7 +46,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     })\n                 })\n             }\n-            ExprKind::Block { body: ref ast_block } => {\n+            ExprKind::Block { block: ast_block } => {\n                 this.ast_block(destination, block, ast_block, source_info)\n             }\n             ExprKind::Match { scrutinee, ref arms } => {\n@@ -314,11 +314,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 this.cfg.push_assign(block, source_info, destination, address_of);\n                 block.unit()\n             }\n-            ExprKind::Adt(box Adt {\n+            ExprKind::Adt(box AdtExpr {\n                 adt_def,\n                 variant_index,\n                 substs,\n-                user_ty,\n+                ref user_ty,\n                 ref fields,\n                 ref base,\n             }) => {\n@@ -378,10 +378,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 };\n \n                 let inferred_ty = expr.ty;\n-                let user_ty = user_ty.map(|ty| {\n+                let user_ty = user_ty.as_ref().map(|box user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span: source_info.span,\n-                        user_ty: ty,\n+                        user_ty: *user_ty,\n                         inferred_ty,\n                     })\n                 });\n@@ -400,7 +400,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 );\n                 block.unit()\n             }\n-            ExprKind::InlineAsm { template, ref operands, options, line_spans } => {\n+            ExprKind::InlineAsm(box InlineAsmExpr {\n+                template,\n+                ref operands,\n+                options,\n+                line_spans,\n+            }) => {\n                 use rustc_middle::{mir, thir};\n                 let operands = operands\n                     .into_iter()"}, {"sha": "00dbcaeb0c96f98866bdfc7a466d90785340d5df", "filename": "compiler/rustc_mir_build/src/build/expr/stmt.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fstmt.rs?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -116,14 +116,22 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // it is usually better to focus on `the_value` rather\n                 // than the entirety of block(s) surrounding it.\n                 let adjusted_span = (|| {\n-                    if let ExprKind::Block { body } = &expr.kind && let Some(tail_ex) = body.expr {\n+                    if let ExprKind::Block { block } = expr.kind\n+                        && let Some(tail_ex) = this.thir[block].expr\n+                    {\n                         let mut expr = &this.thir[tail_ex];\n-                        while let ExprKind::Block {\n-                            body: Block { expr: Some(nested_expr), .. },\n-                        }\n-                        | ExprKind::Scope { value: nested_expr, .. } = expr.kind\n-                        {\n-                            expr = &this.thir[nested_expr];\n+                        loop {\n+                            match expr.kind {\n+                                ExprKind::Block { block }\n+                                    if let Some(nested_expr) = this.thir[block].expr =>\n+                                {\n+                                    expr = &this.thir[nested_expr];\n+                                }\n+                                ExprKind::Scope { value: nested_expr, .. } => {\n+                                    expr = &this.thir[nested_expr];\n+                                }\n+                                _ => break,\n+                            }\n                         }\n                         this.block_context.push(BlockFrame::TailExpr {\n                             tail_result_is_ignored: true,"}, {"sha": "080dab0303166ea9747f5fce80ab106f5e43d134", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -2280,15 +2280,16 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         mut block: BasicBlock,\n         init: &Expr<'tcx>,\n         initializer_span: Span,\n-        else_block: &Block,\n+        else_block: BlockId,\n         visibility_scope: Option<SourceScope>,\n         remainder_scope: region::Scope,\n         remainder_span: Span,\n         pattern: &Pat<'tcx>,\n     ) -> BlockAnd<()> {\n+        let else_block_span = self.thir[else_block].span;\n         let (matching, failure) = self.in_if_then_scope(remainder_scope, |this| {\n             let scrutinee = unpack!(block = this.lower_scrutinee(block, init, initializer_span));\n-            let pat = Pat { ty: init.ty, span: else_block.span, kind: Box::new(PatKind::Wild) };\n+            let pat = Pat { ty: init.ty, span: else_block_span, kind: Box::new(PatKind::Wild) };\n             let mut wildcard = Candidate::new(scrutinee.clone(), &pat, false);\n             this.declare_bindings(\n                 visibility_scope,\n@@ -2318,7 +2319,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             );\n             // This block is for the failure case\n             let failure = this.bind_pattern(\n-                this.source_info(else_block.span),\n+                this.source_info(else_block_span),\n                 wildcard,\n                 None,\n                 &fake_borrow_temps,\n@@ -2334,19 +2335,19 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // This place is not really used because this destination place\n         // should never be used to take values at the end of the failure\n         // block.\n-        let dummy_place = self.temp(self.tcx.types.never, else_block.span);\n+        let dummy_place = self.temp(self.tcx.types.never, else_block_span);\n         let failure_block;\n         unpack!(\n             failure_block = self.ast_block(\n                 dummy_place,\n                 failure,\n                 else_block,\n-                self.source_info(else_block.span),\n+                self.source_info(else_block_span),\n             )\n         );\n         self.cfg.terminate(\n             failure_block,\n-            self.source_info(else_block.span),\n+            self.source_info(else_block_span),\n             TerminatorKind::Unreachable,\n         );\n         matching.unit()"}, {"sha": "bf5a2e7c73fabf8a36ac3e9a01bd0fc8f83cdbdb", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -391,7 +391,7 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n             ExprKind::InlineAsm { .. } => {\n                 self.requires_unsafe(expr.span, UseOfInlineAssembly);\n             }\n-            ExprKind::Adt(box Adt {\n+            ExprKind::Adt(box AdtExpr {\n                 adt_def,\n                 variant_index: _,\n                 substs: _,\n@@ -402,13 +402,13 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                 (Bound::Unbounded, Bound::Unbounded) => {}\n                 _ => self.requires_unsafe(expr.span, InitializingTypeWith),\n             },\n-            ExprKind::Closure {\n+            ExprKind::Closure(box ClosureExpr {\n                 closure_id,\n                 substs: _,\n                 upvars: _,\n                 movability: _,\n                 fake_reads: _,\n-            } => {\n+            }) => {\n                 let closure_def = if let Some((did, const_param_id)) =\n                     ty::WithOptConstParam::try_lookup(closure_id, self.tcx)\n                 {"}, {"sha": "54c4b9eda70dc16a8115c1a0a9ff8334ed383466", "filename": "compiler/rustc_mir_build/src/thir/cx/block.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -9,13 +9,13 @@ use rustc_index::vec::Idx;\n use rustc_middle::ty::CanonicalUserTypeAnnotation;\n \n impl<'tcx> Cx<'tcx> {\n-    pub(crate) fn mirror_block(&mut self, block: &'tcx hir::Block<'tcx>) -> Block {\n+    pub(crate) fn mirror_block(&mut self, block: &'tcx hir::Block<'tcx>) -> BlockId {\n         // We have to eagerly lower the \"spine\" of the statements\n         // in order to get the lexical scoping correctly.\n         let stmts = self.mirror_stmts(block.hir_id.local_id, block.stmts);\n         let opt_destruction_scope =\n             self.region_scope_tree.opt_destruction_scope(block.hir_id.local_id);\n-        Block {\n+        let block = Block {\n             targeted_by_break: block.targeted_by_break,\n             region_scope: region::Scope {\n                 id: block.hir_id.local_id,\n@@ -34,7 +34,9 @@ impl<'tcx> Cx<'tcx> {\n                     BlockSafety::ExplicitUnsafe(block.hir_id)\n                 }\n             },\n-        }\n+        };\n+\n+        self.thir.blocks.push(block)\n     }\n \n     fn mirror_stmts("}, {"sha": "0c2b117453fe9ed5785a444d4ee0deff4186f34b", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 35, "deletions": 25, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -108,8 +108,8 @@ impl<'tcx> Cx<'tcx> {\n         //   // ^ error message points at this expression.\n         // }\n         let mut adjust_span = |expr: &mut Expr<'tcx>| {\n-            if let ExprKind::Block { body } = &expr.kind {\n-                if let Some(last_expr) = body.expr {\n+            if let ExprKind::Block { block } = expr.kind {\n+                if let Some(last_expr) = self.thir[block].expr {\n                     span = self.thir[last_expr].span;\n                     expr.span = span;\n                 }\n@@ -329,7 +329,7 @@ impl<'tcx> Cx<'tcx> {\n                                 if let UserType::TypeOf(ref mut did, _) = &mut u_ty.value {\n                                     *did = adt_def.did();\n                                 }\n-                                u_ty\n+                                Box::new(u_ty)\n                             });\n                         debug!(\"make_mirror_unadjusted: (call) user_ty={:?}\", user_ty);\n \n@@ -341,7 +341,7 @@ impl<'tcx> Cx<'tcx> {\n                                 expr: self.mirror_expr(e),\n                             })\n                             .collect();\n-                        ExprKind::Adt(Box::new(Adt {\n+                        ExprKind::Adt(Box::new(AdtExpr {\n                             adt_def,\n                             substs,\n                             variant_index: index,\n@@ -369,7 +369,7 @@ impl<'tcx> Cx<'tcx> {\n                 ExprKind::AddressOf { mutability, arg: self.mirror_expr(arg) }\n             }\n \n-            hir::ExprKind::Block(ref blk, _) => ExprKind::Block { body: self.mirror_block(blk) },\n+            hir::ExprKind::Block(ref blk, _) => ExprKind::Block { block: self.mirror_block(blk) },\n \n             hir::ExprKind::Assign(ref lhs, ref rhs, _) => {\n                 ExprKind::Assign { lhs: self.mirror_expr(lhs), rhs: self.mirror_expr(rhs) }\n@@ -464,9 +464,9 @@ impl<'tcx> Cx<'tcx> {\n                 ty::Adt(adt, substs) => match adt.adt_kind() {\n                     AdtKind::Struct | AdtKind::Union => {\n                         let user_provided_types = self.typeck_results().user_provided_types();\n-                        let user_ty = user_provided_types.get(expr.hir_id).copied();\n+                        let user_ty = user_provided_types.get(expr.hir_id).copied().map(Box::new);\n                         debug!(\"make_mirror_unadjusted: (struct/union) user_ty={:?}\", user_ty);\n-                        ExprKind::Adt(Box::new(Adt {\n+                        ExprKind::Adt(Box::new(AdtExpr {\n                             adt_def: *adt,\n                             variant_index: VariantIdx::new(0),\n                             substs,\n@@ -490,9 +490,10 @@ impl<'tcx> Cx<'tcx> {\n                                 let index = adt.variant_index_with_id(variant_id);\n                                 let user_provided_types =\n                                     self.typeck_results().user_provided_types();\n-                                let user_ty = user_provided_types.get(expr.hir_id).copied();\n+                                let user_ty =\n+                                    user_provided_types.get(expr.hir_id).copied().map(Box::new);\n                                 debug!(\"make_mirror_unadjusted: (variant) user_ty={:?}\", user_ty);\n-                                ExprKind::Adt(Box::new(Adt {\n+                                ExprKind::Adt(Box::new(AdtExpr {\n                                     adt_def: *adt,\n                                     variant_index: index,\n                                     substs,\n@@ -547,15 +548,21 @@ impl<'tcx> Cx<'tcx> {\n                     None => Vec::new(),\n                 };\n \n-                ExprKind::Closure { closure_id: def_id, substs, upvars, movability, fake_reads }\n+                ExprKind::Closure(Box::new(ClosureExpr {\n+                    closure_id: def_id,\n+                    substs,\n+                    upvars,\n+                    movability,\n+                    fake_reads,\n+                }))\n             }\n \n             hir::ExprKind::Path(ref qpath) => {\n                 let res = self.typeck_results().qpath_res(qpath, expr.hir_id);\n                 self.convert_path_expr(expr, res)\n             }\n \n-            hir::ExprKind::InlineAsm(ref asm) => ExprKind::InlineAsm {\n+            hir::ExprKind::InlineAsm(ref asm) => ExprKind::InlineAsm(Box::new(InlineAsmExpr {\n                 template: asm.template,\n                 operands: asm\n                     .operands\n@@ -614,7 +621,7 @@ impl<'tcx> Cx<'tcx> {\n                     .collect(),\n                 options: asm.options,\n                 line_spans: asm.line_spans,\n-            },\n+            })),\n \n             hir::ExprKind::ConstBlock(ref anon_const) => {\n                 let ty = self.typeck_results().node_type(anon_const.hir_id);\n@@ -679,8 +686,8 @@ impl<'tcx> Cx<'tcx> {\n                 let body = self.thir.exprs.push(Expr {\n                     ty: block_ty,\n                     temp_lifetime,\n-                    span: block.span,\n-                    kind: ExprKind::Block { body: block },\n+                    span: self.thir[block].span,\n+                    kind: ExprKind::Block { block },\n                 });\n                 ExprKind::Loop { body }\n             }\n@@ -712,14 +719,17 @@ impl<'tcx> Cx<'tcx> {\n                     });\n                     debug!(\"make_mirror_unadjusted: (cast) user_ty={:?}\", user_ty);\n \n-                    ExprKind::ValueTypeAscription { source: cast_expr, user_ty: Some(*user_ty) }\n+                    ExprKind::ValueTypeAscription {\n+                        source: cast_expr,\n+                        user_ty: Some(Box::new(*user_ty)),\n+                    }\n                 } else {\n                     cast\n                 }\n             }\n             hir::ExprKind::Type(ref source, ref ty) => {\n                 let user_provided_types = self.typeck_results.user_provided_types();\n-                let user_ty = user_provided_types.get(ty.hir_id).copied();\n+                let user_ty = user_provided_types.get(ty.hir_id).copied().map(Box::new);\n                 debug!(\"make_mirror_unadjusted: (type) user_ty={:?}\", user_ty);\n                 let mirrored = self.mirror_expr(source);\n                 if source.is_syntactic_place_expr() {\n@@ -748,7 +758,7 @@ impl<'tcx> Cx<'tcx> {\n         &mut self,\n         hir_id: hir::HirId,\n         res: Res,\n-    ) -> Option<ty::CanonicalUserType<'tcx>> {\n+    ) -> Option<Box<ty::CanonicalUserType<'tcx>>> {\n         debug!(\"user_substs_applied_to_res: res={:?}\", res);\n         let user_provided_type = match res {\n             // A reference to something callable -- e.g., a fn, method, or\n@@ -759,19 +769,19 @@ impl<'tcx> Cx<'tcx> {\n             | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)\n             | Res::Def(DefKind::Const, _)\n             | Res::Def(DefKind::AssocConst, _) => {\n-                self.typeck_results().user_provided_types().get(hir_id).copied()\n+                self.typeck_results().user_provided_types().get(hir_id).copied().map(Box::new)\n             }\n \n             // A unit struct/variant which is used as a value (e.g.,\n             // `None`). This has the type of the enum/struct that defines\n             // this variant -- but with the substitutions given by the\n             // user.\n             Res::Def(DefKind::Ctor(_, CtorKind::Const), _) => {\n-                self.user_substs_applied_to_ty_of_hir_id(hir_id)\n+                self.user_substs_applied_to_ty_of_hir_id(hir_id).map(Box::new)\n             }\n \n             // `Self` is used in expression as a tuple struct constructor or a unit struct constructor\n-            Res::SelfCtor(_) => self.user_substs_applied_to_ty_of_hir_id(hir_id),\n+            Res::SelfCtor(_) => self.user_substs_applied_to_ty_of_hir_id(hir_id).map(Box::new),\n \n             _ => bug!(\"user_substs_applied_to_res: unexpected res {:?} at {:?}\", res, hir_id),\n         };\n@@ -846,22 +856,22 @@ impl<'tcx> Cx<'tcx> {\n \n             Res::Def(DefKind::Const, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n                 let user_ty = self.user_substs_applied_to_res(expr.hir_id, res);\n-                ExprKind::NamedConst { def_id, substs, user_ty: user_ty }\n+                ExprKind::NamedConst { def_id, substs, user_ty }\n             }\n \n             Res::Def(DefKind::Ctor(_, CtorKind::Const), def_id) => {\n                 let user_provided_types = self.typeck_results.user_provided_types();\n-                let user_provided_type = user_provided_types.get(expr.hir_id).copied();\n-                debug!(\"convert_path_expr: user_provided_type={:?}\", user_provided_type);\n+                let user_ty = user_provided_types.get(expr.hir_id).copied().map(Box::new);\n+                debug!(\"convert_path_expr: user_ty={:?}\", user_ty);\n                 let ty = self.typeck_results().node_type(expr.hir_id);\n                 match ty.kind() {\n                     // A unit struct/variant which is used as a value.\n                     // We return a completely different ExprKind here to account for this special case.\n-                    ty::Adt(adt_def, substs) => ExprKind::Adt(Box::new(Adt {\n+                    ty::Adt(adt_def, substs) => ExprKind::Adt(Box::new(AdtExpr {\n                         adt_def: *adt_def,\n                         variant_index: adt_def.variant_index_with_ctor_id(def_id),\n                         substs,\n-                        user_ty: user_provided_type,\n+                        user_ty,\n                         fields: Box::new([]),\n                         base: None,\n                     })),"}, {"sha": "e8ce8e6f23ec9eb608eb24c76c386b7b445dfb47", "filename": "compiler/rustc_ty_utils/src/consts.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fconsts.rs?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -311,8 +311,15 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n             //     bar::<{ N + 1 }>();\n             // }\n             // ```\n-            ExprKind::Block { body: thir::Block { stmts: box [], expr: Some(e), .. } } => {\n-                self.recurse_build(*e)?\n+            ExprKind::Block { block } => {\n+                if let thir::Block { stmts: box [], expr: Some(e), .. } = &self.body.blocks[*block] {\n+                    self.recurse_build(*e)?\n+                } else {\n+                    self.maybe_supported_error(\n+                        node.span,\n+                        \"blocks are not supported in generic constant\",\n+                    )?\n+                }\n             }\n             // `ExprKind::Use` happens when a `hir::ExprKind::Cast` is a\n             // \"coercion cast\" i.e. using a coercion or is a no-op.\n@@ -349,10 +356,6 @@ impl<'a, 'tcx> AbstractConstBuilder<'a, 'tcx> {\n                 node.span,\n                 \"array construction is not supported in generic constants\",\n             )?,\n-            ExprKind::Block { .. } => self.maybe_supported_error(\n-                node.span,\n-                \"blocks are not supported in generic constant\",\n-            )?,\n             ExprKind::NeverToAny { .. } => self.maybe_supported_error(\n                 node.span,\n                 \"converting nevers to any is not supported in generic constant\","}, {"sha": "960b7f7f4ddea5739f9b6918f0011c96912995f9", "filename": "src/test/ui/thir-tree.stdout", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8a13871b69924b74cfa1d737f2894068b37ea7ea/src%2Ftest%2Fui%2Fthir-tree.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/8a13871b69924b74cfa1d737f2894068b37ea7ea/src%2Ftest%2Fui%2Fthir-tree.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthir-tree.stdout?ref=8a13871b69924b74cfa1d737f2894068b37ea7ea", "patch": "@@ -1,6 +1,17 @@\n DefId(0:3 ~ thir_tree[8f1d]::main):\n Thir {\n     arms: [],\n+    blocks: [\n+        Block {\n+            targeted_by_break: false,\n+            region_scope: Node(1),\n+            opt_destruction_scope: None,\n+            span: $DIR/thir-tree.rs:4:15: 4:17 (#0),\n+            stmts: [],\n+            expr: None,\n+            safety_mode: Safe,\n+        },\n+    ],\n     exprs: [\n         Expr {\n             ty: (),\n@@ -9,15 +20,7 @@ Thir {\n             ),\n             span: $DIR/thir-tree.rs:4:15: 4:17 (#0),\n             kind: Block {\n-                body: Block {\n-                    targeted_by_break: false,\n-                    region_scope: Node(1),\n-                    opt_destruction_scope: None,\n-                    span: $DIR/thir-tree.rs:4:15: 4:17 (#0),\n-                    stmts: [],\n-                    expr: None,\n-                    safety_mode: Safe,\n-                },\n+                block: b0,\n             },\n         },\n         Expr {"}]}