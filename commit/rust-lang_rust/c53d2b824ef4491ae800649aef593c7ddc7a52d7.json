{"sha": "c53d2b824ef4491ae800649aef593c7ddc7a52d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1M2QyYjgyNGVmNDQ5MWFlODAwNjQ5YWVmNTkzYzdkZGM3YTUyZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-10T07:32:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-10T07:32:11Z"}, "message": "Auto merge of #4525 - mikerite:use-self-constructor, r=phansch\n\nExtend `use_self` to check constructor\n\nRust did not allow this before.\n\nchangelog: Extend `use_self` to check constructor", "tree": {"sha": "d23449e3aa4fb69f82fae098a4734c261202e3a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d23449e3aa4fb69f82fae098a4734c261202e3a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c53d2b824ef4491ae800649aef593c7ddc7a52d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c53d2b824ef4491ae800649aef593c7ddc7a52d7", "html_url": "https://github.com/rust-lang/rust/commit/c53d2b824ef4491ae800649aef593c7ddc7a52d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c53d2b824ef4491ae800649aef593c7ddc7a52d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09ed605df86752dd692b528dcac84a82b5749093", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ed605df86752dd692b528dcac84a82b5749093", "html_url": "https://github.com/rust-lang/rust/commit/09ed605df86752dd692b528dcac84a82b5749093"}, {"sha": "31fbff2a36e7cf9db0b1e1f32440f1003fea2ff2", "url": "https://api.github.com/repos/rust-lang/rust/commits/31fbff2a36e7cf9db0b1e1f32440f1003fea2ff2", "html_url": "https://github.com/rust-lang/rust/commit/31fbff2a36e7cf9db0b1e1f32440f1003fea2ff2"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "f428c2892aee72cf55e093c0662e26492f1a069d", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c53d2b824ef4491ae800649aef593c7ddc7a52d7/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53d2b824ef4491ae800649aef593c7ddc7a52d7/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=c53d2b824ef4491ae800649aef593c7ddc7a52d7", "patch": "@@ -1,6 +1,6 @@\n use if_chain::if_chain;\n use rustc::hir;\n-use rustc::hir::def::{CtorKind, DefKind, Res};\n+use rustc::hir::def::{DefKind, Res};\n use rustc::hir::intravisit::{walk_item, walk_path, walk_ty, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};\n@@ -239,7 +239,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UseSelfVisitor<'a, 'tcx> {\n         if path.segments.last().expect(SEGMENTS_MSG).ident.name != kw::SelfUpper {\n             if self.item_path.res == path.res {\n                 span_use_self_lint(self.cx, path, None);\n-            } else if let Res::Def(DefKind::Ctor(def::CtorOf::Struct, CtorKind::Fn), ctor_def_id) = path.res {\n+            } else if let Res::Def(DefKind::Ctor(def::CtorOf::Struct, _), ctor_def_id) = path.res {\n                 if self.item_path.res.opt_def_id() == self.cx.tcx.parent(ctor_def_id) {\n                     span_use_self_lint(self.cx, path, None);\n                 }"}, {"sha": "73666f2faae8ed1480626706a1a21c8004eef2c9", "filename": "tests/ui/use_self.fixed", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c53d2b824ef4491ae800649aef593c7ddc7a52d7/tests%2Fui%2Fuse_self.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c53d2b824ef4491ae800649aef593c7ddc7a52d7/tests%2Fui%2Fuse_self.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.fixed?ref=c53d2b824ef4491ae800649aef593c7ddc7a52d7", "patch": "@@ -112,6 +112,12 @@ mod traits {\n         }\n     }\n \n+    impl Clone for Bad {\n+        fn clone(&self) -> Self {\n+            Self\n+        }\n+    }\n+\n     #[derive(Default)]\n     struct Good;\n \n@@ -171,15 +177,6 @@ mod traits {\n             Self::default()\n         }\n     }\n-\n-    // Check that self arg isn't linted\n-    impl Clone for Good {\n-        fn clone(&self) -> Self {\n-            // Note: Not linted and it wouldn't be valid\n-            // because \"can't use `Self` as a constructor`\"\n-            Good\n-        }\n-    }\n }\n \n mod issue2894 {"}, {"sha": "2e2b4f8b9d80ae5069dab2594353ac2a6836482e", "filename": "tests/ui/use_self.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c53d2b824ef4491ae800649aef593c7ddc7a52d7/tests%2Fui%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c53d2b824ef4491ae800649aef593c7ddc7a52d7/tests%2Fui%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.rs?ref=c53d2b824ef4491ae800649aef593c7ddc7a52d7", "patch": "@@ -112,6 +112,12 @@ mod traits {\n         }\n     }\n \n+    impl Clone for Bad {\n+        fn clone(&self) -> Self {\n+            Bad\n+        }\n+    }\n+\n     #[derive(Default)]\n     struct Good;\n \n@@ -171,15 +177,6 @@ mod traits {\n             Self::default()\n         }\n     }\n-\n-    // Check that self arg isn't linted\n-    impl Clone for Good {\n-        fn clone(&self) -> Self {\n-            // Note: Not linted and it wouldn't be valid\n-            // because \"can't use `Self` as a constructor`\"\n-            Good\n-        }\n-    }\n }\n \n mod issue2894 {"}, {"sha": "699e735137f07f60197b7deb144bf58a382700b4", "filename": "tests/ui/use_self.stderr", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c53d2b824ef4491ae800649aef593c7ddc7a52d7/tests%2Fui%2Fuse_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c53d2b824ef4491ae800649aef593c7ddc7a52d7/tests%2Fui%2Fuse_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuse_self.stderr?ref=c53d2b824ef4491ae800649aef593c7ddc7a52d7", "patch": "@@ -121,19 +121,25 @@ LL |         fn mul(self, rhs: Bad) -> Bad {\n    |                                   ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:202:56\n+  --> $DIR/use_self.rs:117:13\n+   |\n+LL |             Bad\n+   |             ^^^ help: use the applicable keyword: `Self`\n+\n+error: unnecessary structure name repetition\n+  --> $DIR/use_self.rs:199:56\n    |\n LL |         fn bad(foos: &[Self]) -> impl Iterator<Item = &Foo> {\n    |                                                        ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:217:13\n+  --> $DIR/use_self.rs:214:13\n    |\n LL |             TS(0)\n    |             ^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:225:25\n+  --> $DIR/use_self.rs:222:25\n    |\n LL |             fn new() -> Foo {\n    |                         ^^^ help: use the applicable keyword: `Self`\n@@ -142,7 +148,7 @@ LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:226:17\n+  --> $DIR/use_self.rs:223:17\n    |\n LL |                 Foo {}\n    |                 ^^^ help: use the applicable keyword: `Self`\n@@ -151,64 +157,64 @@ LL |         use_self_expand!(); // Should lint in local macros\n    |         ------------------- in this macro invocation\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:261:21\n+  --> $DIR/use_self.rs:258:21\n    |\n LL |         fn baz() -> Foo {\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:262:13\n+  --> $DIR/use_self.rs:259:13\n    |\n LL |             Foo {}\n    |             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:249:29\n+  --> $DIR/use_self.rs:246:29\n    |\n LL |                 fn bar() -> Bar {\n    |                             ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:250:21\n+  --> $DIR/use_self.rs:247:21\n    |\n LL |                     Bar { foo: Foo {} }\n    |                     ^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:279:21\n+  --> $DIR/use_self.rs:276:21\n    |\n LL |             let _ = Enum::B(42);\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:280:21\n+  --> $DIR/use_self.rs:277:21\n    |\n LL |             let _ = Enum::C { field: true };\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:281:21\n+  --> $DIR/use_self.rs:278:21\n    |\n LL |             let _ = Enum::A;\n    |                     ^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:312:13\n+  --> $DIR/use_self.rs:309:13\n    |\n LL |             nested::A::fun_1();\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:313:13\n+  --> $DIR/use_self.rs:310:13\n    |\n LL |             nested::A::A;\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-  --> $DIR/use_self.rs:315:13\n+  --> $DIR/use_self.rs:312:13\n    |\n LL |             nested::A {};\n    |             ^^^^^^^^^ help: use the applicable keyword: `Self`\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 35 previous errors\n "}]}