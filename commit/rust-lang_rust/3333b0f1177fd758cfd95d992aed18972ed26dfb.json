{"sha": "3333b0f1177fd758cfd95d992aed18972ed26dfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMzNiMGYxMTc3ZmQ3NThjZmQ5NWQ5OTJhZWQxODk3MmVkMjZkZmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-29T20:02:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-04-05T09:36:02Z"}, "message": "Add a (currently unused) \"transformed self type\" pointer into ty::method", "tree": {"sha": "7e813be45397c5a4fc06e15d44aa0a60ea70d531", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e813be45397c5a4fc06e15d44aa0a60ea70d531"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3333b0f1177fd758cfd95d992aed18972ed26dfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3333b0f1177fd758cfd95d992aed18972ed26dfb", "html_url": "https://github.com/rust-lang/rust/commit/3333b0f1177fd758cfd95d992aed18972ed26dfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3333b0f1177fd758cfd95d992aed18972ed26dfb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a0525e3664dfb659aae06c146a4336a878e2b05", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0525e3664dfb659aae06c146a4336a878e2b05", "html_url": "https://github.com/rust-lang/rust/commit/0a0525e3664dfb659aae06c146a4336a878e2b05"}], "stats": {"total": 175, "additions": 144, "deletions": 31}, "files": [{"sha": "5df7b0373341ad8e72a0b2abe95004d996380f41", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3333b0f1177fd758cfd95d992aed18972ed26dfb/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333b0f1177fd758cfd95d992aed18972ed26dfb/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=3333b0f1177fd758cfd95d992aed18972ed26dfb", "patch": "@@ -162,6 +162,7 @@ pub static tag_link_args_arg: uint = 0x7a;\n \n pub static tag_item_method_tps: uint = 0x7b;\n pub static tag_item_method_fty: uint = 0x7c;\n+pub static tag_item_method_transformed_self_ty: uint = 0x7d;\n \n pub struct LinkMeta {\n     name: @str,"}, {"sha": "32a912d010185c930a94b78560b3d8418929f07b", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3333b0f1177fd758cfd95d992aed18972ed26dfb/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333b0f1177fd758cfd95d992aed18972ed26dfb/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=3333b0f1177fd758cfd95d992aed18972ed26dfb", "patch": "@@ -236,6 +236,16 @@ fn doc_method_fty(doc: ebml::Doc, tcx: ty::ctxt, cdata: cmd) -> ty::BareFnTy {\n                           |_, did| translate_def_id(cdata, did))\n }\n \n+fn doc_transformed_self_ty(doc: ebml::Doc,\n+                           tcx: ty::ctxt,\n+                           cdata: cmd) -> Option<ty::t>\n+{\n+    do reader::maybe_get_doc(doc, tag_item_method_transformed_self_ty).map |tp| {\n+        parse_ty_data(tp.data, cdata.cnum, tp.start, tcx,\n+                      |_, did| translate_def_id(cdata, did))\n+    }\n+}\n+\n pub fn item_type(item_id: ast::def_id, item: ebml::Doc,\n                  tcx: ty::ctxt, cdata: cmd) -> ty::t {\n     let t = doc_type(item, tcx, cdata);\n@@ -716,14 +726,17 @@ pub fn get_method(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n     let method_doc = lookup_item(id, cdata.data);\n     let def_id = item_def_id(method_doc, cdata);\n     let name = item_name(intr, method_doc);\n-    let bounds = item_ty_param_bounds(method_doc, tcx, cdata,\n-                                      tag_item_method_tps);\n+    let bounds =\n+        item_ty_param_bounds(method_doc, tcx, cdata,\n+                             tag_item_method_tps);\n+    let transformed_self_ty = doc_transformed_self_ty(method_doc, tcx, cdata);\n     let fty = doc_method_fty(method_doc, tcx, cdata);\n     let vis = item_visibility(method_doc);\n     let self_ty = get_self_ty(method_doc);\n     ty::method {\n         ident: name,\n         tps: bounds,\n+        transformed_self_ty: transformed_self_ty,\n         fty: fty,\n         self_ty: self_ty,\n         vis: vis,\n@@ -767,10 +780,12 @@ pub fn get_provided_trait_methods(intr: @ident_interner, cdata: cmd,\n             }\n         };\n \n+        let transformed_self_ty = doc_transformed_self_ty(mth, tcx, cdata);\n         let self_ty = get_self_ty(mth);\n         let ty_method = ty::method {\n             ident: name,\n             tps: bounds,\n+            transformed_self_ty: transformed_self_ty,\n             fty: fty,\n             self_ty: self_ty,\n             vis: ast::public,"}, {"sha": "e8fc4c44fea621a16c04efa0d5a4df83ec922665", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3333b0f1177fd758cfd95d992aed18972ed26dfb/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333b0f1177fd758cfd95d992aed18972ed26dfb/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=3333b0f1177fd758cfd95d992aed18972ed26dfb", "patch": "@@ -230,6 +230,17 @@ fn encode_type(ecx: @EncodeContext, ebml_w: writer::Encoder, typ: ty::t) {\n     ebml_w.end_tag();\n }\n \n+fn encode_transformed_self_ty(ecx: @EncodeContext,\n+                              ebml_w: writer::Encoder,\n+                              opt_typ: Option<ty::t>)\n+{\n+    for opt_typ.each |&typ| {\n+        ebml_w.start_tag(tag_item_method_transformed_self_ty);\n+        write_type(ecx, ebml_w, typ);\n+        ebml_w.end_tag();\n+    }\n+}\n+\n fn encode_method_fty(ecx: @EncodeContext,\n                      ebml_w: writer::Encoder,\n                      typ: &ty::BareFnTy)\n@@ -570,6 +581,7 @@ fn encode_method_ty_fields(ecx: @EncodeContext,\n     encode_name(ecx, ebml_w, method_ty.ident);\n     encode_ty_type_param_bounds(ebml_w, ecx, method_ty.tps,\n                                 tag_item_method_tps);\n+    encode_transformed_self_ty(ecx, ebml_w, method_ty.transformed_self_ty);\n     encode_method_fty(ecx, ebml_w, &method_ty.fty);\n     encode_visibility(ebml_w, method_ty.vis);\n     encode_self_type(ebml_w, method_ty.self_ty);"}, {"sha": "eb9eec25c0480191605021e255899eeea893da3d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3333b0f1177fd758cfd95d992aed18972ed26dfb/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333b0f1177fd758cfd95d992aed18972ed26dfb/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=3333b0f1177fd758cfd95d992aed18972ed26dfb", "patch": "@@ -71,6 +71,7 @@ pub type param_bounds = @~[param_bound];\n pub struct method {\n     ident: ast::ident,\n     tps: @~[param_bounds],\n+    transformed_self_ty: Option<ty::t>,\n     fty: BareFnTy,\n     self_ty: ast::self_ty_,\n     vis: ast::visibility,"}, {"sha": "05a5e926f279d49ab22033165d8ce88a5e1dfe47", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 81, "deletions": 6, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/3333b0f1177fd758cfd95d992aed18972ed26dfb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333b0f1177fd758cfd95d992aed18972ed26dfb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=3333b0f1177fd758cfd95d992aed18972ed26dfb", "patch": "@@ -544,13 +544,50 @@ pub fn bound_lifetimes<AC:AstConv>(\n     bound_lifetime_names\n }\n \n+struct SelfInfo {\n+    untransformed_self_ty: ty::t,\n+    self_transform: ast::self_ty\n+}\n+\n+pub fn ty_of_method<AC:AstConv,RS:region_scope + Copy + Durable>(\n+    self: &AC,\n+    rscope: &RS,\n+    purity: ast::purity,\n+    lifetimes: &OptVec<ast::Lifetime>,\n+    untransformed_self_ty: ty::t,\n+    self_transform: ast::self_ty,\n+    decl: &ast::fn_decl) -> (Option<ty::t>, ty::BareFnTy)\n+{\n+    let self_info = SelfInfo {\n+        untransformed_self_ty: untransformed_self_ty,\n+        self_transform: self_transform\n+    };\n+    let (a, b) = ty_of_method_or_bare_fn(\n+        self, rscope, purity, AbiSet::Rust(), lifetimes, Some(&self_info), decl);\n+    (a.get(), b)\n+}\n+\n pub fn ty_of_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n     self: &AC,\n     rscope: &RS,\n     purity: ast::purity,\n     abi: AbiSet,\n     lifetimes: &OptVec<ast::Lifetime>,\n     decl: &ast::fn_decl) -> ty::BareFnTy\n+{\n+    let (_, b) = ty_of_method_or_bare_fn(\n+        self, rscope, purity, abi, lifetimes, None, decl);\n+    b\n+}\n+\n+fn ty_of_method_or_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n+    self: &AC,\n+    rscope: &RS,\n+    purity: ast::purity,\n+    abi: AbiSet,\n+    lifetimes: &OptVec<ast::Lifetime>,\n+    opt_self_info: Option<&SelfInfo>,\n+    decl: &ast::fn_decl) -> (Option<Option<ty::t>>, ty::BareFnTy)\n {\n     debug!(\"ty_of_bare_fn\");\n \n@@ -559,18 +596,56 @@ pub fn ty_of_bare_fn<AC:AstConv,RS:region_scope + Copy + Durable>(\n     let bound_lifetime_names = bound_lifetimes(self, lifetimes);\n     let rb = in_binding_rscope(rscope, RegionParamNames(copy bound_lifetime_names));\n \n+    let opt_transformed_self_ty = opt_self_info.map(|&self_info| {\n+        transform_self_ty(self, &rb, self_info)\n+    });\n+\n     let input_tys = decl.inputs.map(|a| ty_of_arg(self, &rb, *a, None));\n+\n     let output_ty = match decl.output.node {\n         ast::ty_infer => self.ty_infer(decl.output.span),\n         _ => ast_ty_to_ty(self, &rb, decl.output)\n     };\n \n-    ty::BareFnTy {\n-        purity: purity,\n-        abis: abi,\n-        sig: ty::FnSig {bound_lifetime_names: bound_lifetime_names,\n-                        inputs: input_tys,\n-                        output: output_ty}\n+    return (opt_transformed_self_ty,\n+            ty::BareFnTy {\n+                purity: purity,\n+                abis: abi,\n+                sig: ty::FnSig {bound_lifetime_names: bound_lifetime_names,\n+                                inputs: input_tys,\n+                                output: output_ty}\n+            });\n+\n+    fn transform_self_ty<AC:AstConv,RS:region_scope + Copy + Durable>(\n+        self: &AC,\n+        rscope: &RS,\n+        self_info: &SelfInfo) -> Option<ty::t>\n+    {\n+        match self_info.self_transform.node {\n+            ast::sty_static => None,\n+            ast::sty_value => {\n+                Some(self_info.untransformed_self_ty)\n+            }\n+            ast::sty_region(lifetime, mutability) => {\n+                let region =\n+                    ast_region_to_region(self, rscope,\n+                                         self_info.self_transform.span,\n+                                         lifetime);\n+                Some(ty::mk_rptr(self.tcx(), region,\n+                                 ty::mt {ty: self_info.untransformed_self_ty,\n+                                         mutbl: mutability}))\n+            }\n+            ast::sty_box(mutability) => {\n+                Some(ty::mk_box(self.tcx(),\n+                                ty::mt {ty: self_info.untransformed_self_ty,\n+                                        mutbl: mutability}))\n+            }\n+            ast::sty_uniq(mutability) => {\n+                Some(ty::mk_uniq(self.tcx(),\n+                                 ty::mt {ty: self_info.untransformed_self_ty,\n+                                         mutbl: mutability}))\n+            }\n+        }\n     }\n }\n "}, {"sha": "81acae1d3a99b056411b70c554c49a92d684410d", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 31, "deletions": 22, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/3333b0f1177fd758cfd95d992aed18972ed26dfb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333b0f1177fd758cfd95d992aed18972ed26dfb/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=3333b0f1177fd758cfd95d992aed18972ed26dfb", "patch": "@@ -237,15 +237,17 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n             for ms.each |m| {\n                 let ty_method = @match m {\n                     &ast::required(ref m) => {\n-                        ty_method_of_trait_method(ccx, region_paramd, generics,\n-                                                  &m.id, &m.ident, &m.self_ty,\n-                                                  &m.generics, &m.purity, &m.decl)\n+                        ty_method_of_trait_method(\n+                            ccx, trait_id, region_paramd, generics,\n+                            &m.id, &m.ident, &m.self_ty,\n+                            &m.generics, &m.purity, &m.decl)\n                     }\n \n                     &ast::provided(ref m) => {\n-                        ty_method_of_trait_method(ccx, region_paramd, generics,\n-                                                  &m.id, &m.ident, &m.self_ty,\n-                                                  &m.generics, &m.purity, &m.decl)\n+                        ty_method_of_trait_method(\n+                            ccx, trait_id, region_paramd, generics,\n+                            &m.id, &m.ident, &m.self_ty,\n+                            &m.generics, &m.purity, &m.decl)\n                     }\n                 };\n \n@@ -316,6 +318,7 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n     }\n \n     fn ty_method_of_trait_method(self: &CrateCtxt,\n+                                 trait_id: ast::node_id,\n                                  trait_rp: Option<ty::region_variance>,\n                                  trait_generics: &ast::Generics,\n                                  m_id: &ast::node_id,\n@@ -325,16 +328,16 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n                                  m_purity: &ast::purity,\n                                  m_decl: &ast::fn_decl) -> ty::method\n     {\n+        let trait_self_ty = ty::mk_self(self.tcx, local_def(trait_id));\n         let rscope = MethodRscope::new(m_self_ty.node, trait_rp, trait_generics);\n+        let (transformed_self_ty, fty) =\n+            astconv::ty_of_method(self, &rscope, *m_purity, &m_generics.lifetimes,\n+                                  trait_self_ty, *m_self_ty, m_decl);\n         ty::method {\n             ident: *m_ident,\n             tps: ty_param_bounds(self, m_generics),\n-            fty: astconv::ty_of_bare_fn(self,\n-                                        &rscope,\n-                                        *m_purity,\n-                                        AbiSet::Rust(),\n-                                        &m_generics.lifetimes,\n-                                        m_decl),\n+            transformed_self_ty: transformed_self_ty,\n+            fty: fty,\n             self_ty: m_self_ty.node,\n             // assume public, because this is only invoked on trait methods\n             vis: ast::public,\n@@ -607,6 +610,7 @@ pub struct ConvertedMethod {\n pub fn convert_methods(ccx: &CrateCtxt,\n                        ms: &[@ast::method],\n                        rp: Option<ty::region_variance>,\n+                       untransformed_rcvr_ty: ty::t,\n                        rcvr_bounds: @~[ty::param_bounds],\n                        rcvr_generics: &ast::Generics,\n                        rcvr_visibility: ast::visibility)\n@@ -615,8 +619,9 @@ pub fn convert_methods(ccx: &CrateCtxt,\n     let tcx = ccx.tcx;\n     return vec::map(ms, |m| {\n         let bounds = ty_param_bounds(ccx, &m.generics);\n-        let mty = @ty_of_method(ccx, *m, rp, rcvr_generics,\n-                                rcvr_visibility, &m.generics);\n+        let mty = @ty_of_method(\n+            ccx, *m, rp, untransformed_rcvr_ty,\n+            rcvr_generics, rcvr_visibility, &m.generics);\n         let fty = ty::mk_bare_fn(tcx, copy mty.fty);\n         tcx.tcache.insert(\n             local_def(m.id),\n@@ -637,22 +642,24 @@ pub fn convert_methods(ccx: &CrateCtxt,\n     fn ty_of_method(ccx: &CrateCtxt,\n                     m: @ast::method,\n                     rp: Option<ty::region_variance>,\n+                    untransformed_rcvr_ty: ty::t,\n                     rcvr_generics: &ast::Generics,\n                     rcvr_visibility: ast::visibility,\n                     method_generics: &ast::Generics) -> ty::method\n     {\n         let rscope = MethodRscope::new(m.self_ty.node,\n                                        rp,\n                                        rcvr_generics);\n+        let (transformed_self_ty, fty) =\n+            astconv::ty_of_method(ccx, &rscope, m.purity,\n+                                  &method_generics.lifetimes,\n+                                  untransformed_rcvr_ty,\n+                                  m.self_ty, &m.decl);\n         ty::method {\n             ident: m.ident,\n             tps: ty_param_bounds(ccx, &m.generics),\n-            fty: astconv::ty_of_bare_fn(ccx,\n-                                        &rscope,\n-                                        m.purity,\n-                                        ast::RustAbi,\n-                                        &method_generics.lifetimes,\n-                                        &m.decl),\n+            transformed_self_ty: transformed_self_ty,\n+            fty: fty,\n             self_ty: m.self_ty.node,\n             vis: m.vis.inherit_from(rcvr_visibility),\n             def_id: local_def(m.id)\n@@ -715,7 +722,7 @@ pub fn convert(ccx: &CrateCtxt, it: @ast::item) {\n             it.vis\n         };\n \n-        let cms = convert_methods(ccx, *ms, rp, i_bounds, generics,\n+        let cms = convert_methods(ccx, *ms, rp, selfty, i_bounds, generics,\n                                   parent_visibility);\n         for opt_trait_ref.each |t| {\n             check_methods_against_trait(ccx, generics, rp, selfty, *t, cms);\n@@ -732,7 +739,9 @@ pub fn convert(ccx: &CrateCtxt, it: @ast::item) {\n         let (_, provided_methods) =\n             split_trait_methods(*trait_methods);\n         let (bounds, _) = mk_substs(ccx, generics, rp);\n-        let _ = convert_methods(ccx, provided_methods, rp, bounds, generics,\n+        let untransformed_rcvr_ty = ty::mk_self(tcx, local_def(it.id));\n+        let _ = convert_methods(ccx, provided_methods, rp,\n+                                untransformed_rcvr_ty, bounds, generics,\n                                 it.vis);\n       }\n       ast::item_struct(struct_def, ref generics) => {"}, {"sha": "174b9a206ccdf2488382c42e3917166661972f2f", "filename": "src/test/run-pass/regions-expl-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3333b0f1177fd758cfd95d992aed18972ed26dfb/src%2Ftest%2Frun-pass%2Fregions-expl-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3333b0f1177fd758cfd95d992aed18972ed26dfb/src%2Ftest%2Frun-pass%2Fregions-expl-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-expl-self.rs?ref=3333b0f1177fd758cfd95d992aed18972ed26dfb", "patch": "@@ -15,7 +15,7 @@ struct Foo {\n }\n \n pub impl Foo {\n-    fn foo(&'a self) {}\n+    fn foo<'a>(&'a self) {}\n }\n \n pub fn main() {}\n\\ No newline at end of file"}]}