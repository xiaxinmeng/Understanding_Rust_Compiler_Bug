{"sha": "13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZDA3YWQwYTYyM2E4Y2VhYWVlNGM1YWYyMGRlMWQxZDhhZmRkZjc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-20T18:46:06Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-20T19:58:19Z"}, "message": "add a Set trait and implement it for TreeSet", "tree": {"sha": "5d2dbdd7f33f0f4ca1bca6d603ad759b4c118057", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d2dbdd7f33f0f4ca1bca6d603ad759b4c118057"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7", "html_url": "https://github.com/rust-lang/rust/commit/13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d07a70fb3227793cbb582f54ec98a7837cbc780", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d07a70fb3227793cbb582f54ec98a7837cbc780", "html_url": "https://github.com/rust-lang/rust/commit/5d07a70fb3227793cbb582f54ec98a7837cbc780"}], "stats": {"total": 54, "additions": 41, "deletions": 13}, "files": [{"sha": "619622ceb95112d6381d03460b3ed78ce0eb5839", "filename": "src/libcore/container.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7/src%2Flibcore%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7/src%2Flibcore%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcontainer.rs?ref=13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Container traits\n+\n+pub trait Set<T> {\n+    /// Return true if the set contains a value\n+    pure fn contains(&self, value: &T) -> bool;\n+\n+    /// Add a value to the set. Return true if the value was not already\n+    /// present in the set.\n+    fn insert(&mut self, value: T) -> bool;\n+\n+    /// Remove a value from the set. Return true if the value was\n+    /// present in the set.\n+    fn remove(&mut self, value: &T) -> bool;\n+}"}, {"sha": "24623f20c80c1d5a2027729633cf0be4d2836478", "filename": "src/libcore/core.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7", "patch": "@@ -122,6 +122,7 @@ pub mod to_bytes;\n pub mod clone;\n pub mod io;\n pub mod hash;\n+pub mod container;\n \n \n /* Common data structures */"}, {"sha": "1b20b35bda1fbf7fe68612c021a42e7a47b62128", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=13d07ad0a623a8ceaaee4c5af20de1d1d8afddf7", "patch": "@@ -14,6 +14,7 @@\n \n #[forbid(deprecated_mode)];\n \n+use core::container::Set;\n use core::cmp::{Eq, Ord};\n use core::option::{Option, Some, None};\n use core::prelude::*;\n@@ -197,6 +198,21 @@ impl <T: Eq Ord> TreeSet<T>: Eq {\n     pure fn ne(&self, other: &TreeSet<T>) -> bool { self.map != other.map }\n }\n \n+impl <T: Ord> TreeSet<T>: Set<T> {\n+    /// Return true if the set contains a value\n+    pure fn contains(&self, value: &T) -> bool {\n+        self.map.contains_key(value)\n+    }\n+\n+    /// Add a value to the set. Return true if the value was not already\n+    /// present in the set.\n+    fn insert(&mut self, value: T) -> bool { self.map.insert(value, ()) }\n+\n+    /// Remove a value from the set. Return true if the value was\n+    /// present in the set.\n+    fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n+}\n+\n impl <T: Ord> TreeSet<T> {\n     /// Create an empty TreeSet\n     static pure fn new() -> TreeSet<T> { TreeSet{map: TreeMap::new()} }\n@@ -215,19 +231,6 @@ impl <T: Ord> TreeSet<T> {\n         self.map.each_key_reverse(f)\n     }\n \n-    /// Return true if the set contains a value\n-    pure fn contains(&self, value: &T) -> bool {\n-        self.map.contains_key(value)\n-    }\n-\n-    /// Add a value to the set. Return true if the value was not\n-    /// already present in the set.\n-    fn insert(&mut self, value: T) -> bool { self.map.insert(value, ()) }\n-\n-    /// Remove a value from the set. Return true if the value was\n-    /// present in the set.\n-    fn remove(&mut self, value: &T) -> bool { self.map.remove(value) }\n-\n     /// Get a lazy iterator over the values in the set.\n     /// Requires that it be frozen (immutable).\n     pure fn iter(&self) -> TreeSetIterator/&self<T> {"}]}