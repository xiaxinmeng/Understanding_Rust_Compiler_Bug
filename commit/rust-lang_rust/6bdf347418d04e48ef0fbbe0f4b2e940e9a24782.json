{"sha": "6bdf347418d04e48ef0fbbe0f4b2e940e9a24782", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZGYzNDc0MThkMDRlNDhlZjBmYmJlMGY0YjJlOTQwZTlhMjQ3ODI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-22T02:52:12Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-23T02:02:10Z"}, "message": "rt: Make __morestack (without unwinding) work on 32-bit linux", "tree": {"sha": "9e3977e8dbf8d31415edba20a38904d7dfcf0247", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e3977e8dbf8d31415edba20a38904d7dfcf0247"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782", "html_url": "https://github.com/rust-lang/rust/commit/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a69c5617f02ff80dd7d39949004b386f9808b7d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/a69c5617f02ff80dd7d39949004b386f9808b7d6", "html_url": "https://github.com/rust-lang/rust/commit/a69c5617f02ff80dd7d39949004b386f9808b7d6"}], "stats": {"total": 143, "additions": 112, "deletions": 31}, "files": [{"sha": "1d6634557d08b815a5544c4c9c0982bc4076bba0", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=6bdf347418d04e48ef0fbbe0f4b2e940e9a24782", "patch": "@@ -67,7 +67,8 @@ RUNTIME_CS_$(1) := \\\n \n RUNTIME_S_$(1) := rt/arch/$$(HOST_$(1))/_context.S \\\n                   rt/arch/$$(HOST_$(1))/ccall.S \\\n-                  rt/arch/$$(HOST_$(1))/morestack.S\n+                  rt/arch/$$(HOST_$(1))/morestack.S \\\n+                  rt/arch/$$(HOST_$(1))/record_sp.S\n \n RUNTIME_HDR_$(1) := rt/globals.h \\\n                rt/rust.h \\"}, {"sha": "d3e9d81248db945fc75d91b925b1fe1c1bc6ba74", "filename": "src/rt/arch/i386/morestack.S", "status": "modified", "additions": 25, "deletions": 19, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "raw_url": "https://github.com/rust-lang/rust/raw/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Frt%2Farch%2Fi386%2Fmorestack.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Fmorestack.S?ref=6bdf347418d04e48ef0fbbe0f4b2e940e9a24782", "patch": "@@ -29,6 +29,14 @@\n #define ALIGNMENT               8\n #endif\n \n+#if defined (__APPLE__) || defined(_WIN32)\n+#define NEW_STACK_ADDR          rust_new_stack_sym-.L$pic_ref_pt_0(%eax)\n+#define DEL_STACK_ADDR          rust_del_stack_sym-.L$pic_ref_pt_1(%edx)\n+#else\n+#define NEW_STACK_ADDR          $rust_new_stack\n+#define DEL_STACK_ADDR          $rust_del_stack\n+#endif\n+\n #define RETURN_OFFSET   7\n \n .globl RUST_NEW_STACK\n@@ -39,6 +47,10 @@\n .globl UPCALL_CALL_C_STACK\n .globl MORESTACK\n \n+#ifdef __ELF__\n+\t.type MORESTACK,@function\n+#endif\n+\n MORESTACK:\n \n     // Sanity check to make sure that there is a currently-running task.\n@@ -47,34 +59,33 @@ MORESTACK:\n     testl %eax,%eax\n     jz L$bail\n \n-    subl $12,%esp\n-    pushl $12\n+    movl $12, (%esp)\n     calll UPCALL_ALLOC_C_STACK\n     movl %eax,%edx\n \n+    movl %esp, 12(%edx)\n                             // C stack              | esp+12\n                             // ---------------------+-------------------------\n     movl 20(%esp),%eax      //                      | ra stksz argsz x ra args\n     movl %eax,8(%edx)       //              argsz > | ra stksz argsz x ra args\n-    leal 32(%esp),%eax      //                argsz | ra stksz argsz x ra args\n+    leal 28+ALIGNMENT(%esp),%eax //           argsz | ra stksz argsz x ra args\n     movl %eax,4(%edx)       //         argp > argsz | ra stksz argsz x ra args\n     movl 16(%esp),%eax      //           argp argsz | ra stksz argsz x ra args\n     movl %eax,(%edx)        //   stksz > argp argsz | ra stksz argsz x ra args\n \n-    calll L$pic_ref_pt_0\n-L$pic_ref_pt_0:\n+    calll .L$pic_ref_pt_0\n+.L$pic_ref_pt_0:\n     popl %eax\n \n-    movl rust_new_stack_sym-L$pic_ref_pt_0(%eax),%eax\n+    movl NEW_STACK_ADDR,%eax\n     movl %eax,(%esp)\n     movl %edx,4(%esp)\n     calll UPCALL_CALL_C_STACK\n \n-    movl 16(%esp),%edx          // Grab the return pointer.\n+    movl 12(%esp),%edx          // Grab the return pointer.\n     addl $RETURN_OFFSET,%edx    // Skip past the `add esp,4` and the `ret`.\n \n     movl %eax,%esp          // Switch stacks.\n-    subl $12,%esp           // Align the stack.\n     calll *%edx             // Re-enter the function that called us.\n \n     // Now the function that called us has returned, so we need to delete the\n@@ -86,22 +97,22 @@ L$pic_ref_pt_0:\n     movl $0,(%esp)\n     calll UPCALL_ALLOC_C_STACK\n \n-    calll L$pic_ref_pt_1\n-L$pic_ref_pt_1:\n+    calll .L$pic_ref_pt_1\n+.L$pic_ref_pt_1:\n     popl %edx\n \n-    movl rust_del_stack_sym-L$pic_ref_pt_1(%edx),%edx\n+    movl DEL_STACK_ADDR,%edx\n     movl %edx,(%esp)\n     movl %eax,4(%esp)\n     calll UPCALL_CALL_C_STACK\n \n-    addl $16,%esp\n-    retl $16 + ALIGNMENT    //                      ra stksz argsz x ra args\n+    addl $12,%esp\n+    retl $8    //                      ra stksz argsz x ra args\n \n L$bail:\n     movl 12(%esp),%edx\n     addl $RETURN_OFFSET,%edx\n-    addl $12+16,%esp\n+    addl $12+4+8+ALIGNMENT,%esp\n     jmpl *%edx\n \n #ifdef __APPLE__\n@@ -114,10 +125,5 @@ rust_del_stack_sym:\n     .indirect_symbol RUST_DEL_STACK\n     .long 0\n \n-#else\n-\n-rust_new_stack_sym:\n-rust_del_stack_sym:\n-\n #endif\n "}, {"sha": "78c77b9859d2c946a0213f34214079bf032829f4", "filename": "src/rt/arch/i386/record_sp.S", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Frt%2Farch%2Fi386%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Frt%2Farch%2Fi386%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Fi386%2Frecord_sp.S?ref=6bdf347418d04e48ef0fbbe0f4b2e940e9a24782", "patch": "@@ -0,0 +1,19 @@\n+.text\n+\n+#if defined(__APPLE__) || defined(_WIN32)\n+#define RECORD_SP          _record_sp\n+#else\n+#define RECORD_SP          record_sp\n+#endif\n+\n+.globl RECORD_SP\n+\n+#if defined(__linux__)\n+RECORD_SP:\n+\tmovl 4(%esp), %eax\n+\tmovl %eax, %gs:48\n+\tret\n+#else\n+RECORD_SP:\n+\tret\n+#endif\n\\ No newline at end of file"}, {"sha": "734b4de79ad0165e91d37b1160d68c81f2fc3e42", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=6bdf347418d04e48ef0fbbe0f4b2e940e9a24782", "patch": "@@ -94,6 +94,9 @@ static size_t const BUF_BYTES = 2048;\n // The error status to use when the process fails\n #define PROC_FAIL_CODE 101;\n \n+// FIXME: We want this to be 128 but need to slim the red zone calls down\n+#define RED_ZONE_SIZE   256\n+\n // Every reference counted object should use this macro and initialize\n // ref_count.\n "}, {"sha": "d12f37107a4ba8e5d41c4db88e85c3a4db9bab88", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=6bdf347418d04e48ef0fbbe0f4b2e940e9a24782", "patch": "@@ -367,10 +367,14 @@ rust_scheduler::init_tls() {\n     tls_initialized = true;\n }\n \n+extern \"C\" CDECL void\n+record_sp(void *limit);\n+\n void\n rust_scheduler::place_task_in_tls(rust_task *task) {\n     int result = pthread_setspecific(task_key, task);\n     assert(!result && \"Couldn't place the task in TLS!\");\n+    record_sp(task->stk->data + RED_ZONE_SIZE);\n }\n \n rust_task *"}, {"sha": "30489b1d66926ad4a2eb286dc4ca1f6b12908c93", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=6bdf347418d04e48ef0fbbe0f4b2e940e9a24782", "patch": "@@ -14,7 +14,6 @@\n \n #include \"globals.h\"\n \n-#define RED_ZONE_SIZE   128\n \n // Stack size\n size_t g_custom_min_stack_size = 0;\n@@ -63,30 +62,41 @@ del_stk(rust_task *task, stk_seg *stk)\n     task->free(stk);\n }\n \n+extern \"C\" CDECL void\n+record_sp(void *limit);\n+\n // Entry points for `__morestack` (see arch/*/morestack.S).\n extern \"C\" void *\n-rust_new_stack(size_t stk_sz, void *args_addr, size_t args_sz) {\n-    std::cerr << \"*** New stack!\\n\";\n-\n+rust_new_stack(size_t stk_sz, void *args_addr, size_t args_sz,\n+               uintptr_t current_sp) {\n     rust_task *task = rust_scheduler::get_task();\n-    if (!task)\n-        return NULL;\n \n-    stk_seg *stk_seg = new_stk(task->sched, task, stk_sz);\n-    memcpy(stk_seg->data, args_addr, args_sz);\n-    return stk_seg->data;\n+    stk_seg *stk_seg = new_stk(task->sched, task, stk_sz + args_sz);\n+\n+    // Save the previous stack pointer so it can be restored later\n+    stk_seg->return_sp = current_sp;\n+    uint8_t *new_sp = (uint8_t*)stk_seg->limit;\n+    size_t sizeof_retaddr = sizeof(void*);\n+    // Make enough room on the new stack to hold the old stack pointer\n+    // in addition to the function arguments\n+    new_sp = align_down(new_sp - (args_sz + sizeof_retaddr));\n+    new_sp += sizeof_retaddr;\n+    memcpy(new_sp, args_addr, args_sz);\n+    record_sp(stk_seg->data + RED_ZONE_SIZE);\n+    return new_sp;\n }\n \n extern \"C\" void\n rust_del_stack() {\n     rust_task *task = rust_scheduler::get_task();\n     del_stk(task, task->stk);\n+    record_sp(task->stk->data + RED_ZONE_SIZE);\n }\n \n-extern \"C\" void *\n+extern \"C\" uintptr_t\n rust_get_prev_stack() {\n     rust_task *task = rust_scheduler::get_task();\n-    return task->stk->next;\n+    return task->stk->return_sp;\n }\n \n extern \"C\" rust_task *"}, {"sha": "bda51937ce1ec27a48467ab4eca15997de1d6bcb", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=6bdf347418d04e48ef0fbbe0f4b2e940e9a24782", "patch": "@@ -26,6 +26,7 @@ struct rust_box;\n struct stk_seg {\n     stk_seg *next;\n     uintptr_t limit;\n+    uintptr_t return_sp;\n     unsigned int valgrind_id;\n #ifndef _LP64\n     uint32_t pad;"}, {"sha": "e3165fb9c0d79ba30241235ae345161e464d2377", "filename": "src/test/run-fail/morestack1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Ftest%2Frun-fail%2Fmorestack1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Ftest%2Frun-fail%2Fmorestack1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fmorestack1.rs?ref=6bdf347418d04e48ef0fbbe0f4b2e940e9a24782", "patch": "@@ -0,0 +1,12 @@\n+// xfail-test\n+fn getbig(i: int) {\n+    if i != 0 {\n+        getbig(i - 1);\n+    } else {\n+        fail;\n+    }\n+}\n+\n+fn main() {\n+    getbig(10000000);\n+}\n\\ No newline at end of file"}, {"sha": "f37debc32811587003adbd15eb55fcaa8234a23f", "filename": "src/test/run-pass/morestack1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Ftest%2Frun-pass%2Fmorestack1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Ftest%2Frun-pass%2Fmorestack1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack1.rs?ref=6bdf347418d04e48ef0fbbe0f4b2e940e9a24782", "patch": "@@ -0,0 +1,10 @@\n+// xfail-test\n+fn getbig(i: int) {\n+    if i != 0 {\n+        getbig(i - 1);\n+    }\n+}\n+\n+fn main() {\n+    getbig(10000000);\n+}\n\\ No newline at end of file"}, {"sha": "2f9cca7c7d94c935369bdc6b9a93a8aa75a2d115", "filename": "src/test/run-pass/morestack2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Ftest%2Frun-pass%2Fmorestack2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bdf347418d04e48ef0fbbe0f4b2e940e9a24782/src%2Ftest%2Frun-pass%2Fmorestack2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack2.rs?ref=6bdf347418d04e48ef0fbbe0f4b2e940e9a24782", "patch": "@@ -0,0 +1,15 @@\n+// xfail-test\n+fn getbig(i: int) -> int {\n+    let m = if i >= 0 {\n+        let j = getbig(i - 1);\n+        let k = getbig(j - 1);\n+        k\n+    } else {\n+        0\n+    };\n+    m\n+}\n+\n+fn main() {\n+    getbig(10000000);\n+}\n\\ No newline at end of file"}]}