{"sha": "1a2689117013d7137f207dc85da7df57df5e0af9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMjY4OTExNzAxM2Q3MTM3ZjIwN2RjODVkYTdkZjU3ZGY1ZTBhZjk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-28T07:54:57Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-07-29T09:03:55Z"}, "message": "Replace llvm intrinsics with runtime trap", "tree": {"sha": "216077084d58afa6efc1f45ec2c6112f1a7aeea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/216077084d58afa6efc1f45ec2c6112f1a7aeea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a2689117013d7137f207dc85da7df57df5e0af9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a2689117013d7137f207dc85da7df57df5e0af9", "html_url": "https://github.com/rust-lang/rust/commit/1a2689117013d7137f207dc85da7df57df5e0af9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a2689117013d7137f207dc85da7df57df5e0af9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90f2b12d473e51ba16267178aeb576edda11123a", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f2b12d473e51ba16267178aeb576edda11123a", "html_url": "https://github.com/rust-lang/rust/commit/90f2b12d473e51ba16267178aeb576edda11123a"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "0fa546f50e538d3832356ee649abdcb8ecbb6a31", "filename": "src/abi.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a2689117013d7137f207dc85da7df57df5e0af9/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2689117013d7137f207dc85da7df57df5e0af9/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=1a2689117013d7137f207dc85da7df57df5e0af9", "patch": "@@ -643,6 +643,11 @@ pub fn codegen_terminator_call<'a, 'tcx: 'a>(\n         let instance =\n             ty::Instance::resolve(fx.tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap();\n \n+        if fx.tcx.symbol_name(instance).as_str().starts_with(\"llvm.\") {\n+            crate::llvm_intrinsics::codegen_llvm_intrinsic_call(fx, &fx.tcx.symbol_name(instance).as_str(), substs, args, destination);\n+            return;\n+        }\n+\n         match instance.def {\n             InstanceDef::Intrinsic(_) => {\n                 crate::intrinsics::codegen_intrinsic_call(fx, def_id, substs, args, destination);"}, {"sha": "cdaabcf9a390326cc28b3f690ce7ca4855323d97", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a2689117013d7137f207dc85da7df57df5e0af9/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2689117013d7137f207dc85da7df57df5e0af9/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1a2689117013d7137f207dc85da7df57df5e0af9", "patch": "@@ -40,6 +40,7 @@ mod debuginfo;\n mod driver;\n mod intrinsics;\n mod linkage;\n+mod llvm_intrinsics;\n mod main_shim;\n mod metadata;\n mod pretty_clif;"}, {"sha": "63627c41a2c97ab16dd7a85093019ed57dadb699", "filename": "src/llvm_intrinsics.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a2689117013d7137f207dc85da7df57df5e0af9/src%2Fllvm_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a2689117013d7137f207dc85da7df57df5e0af9/src%2Fllvm_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm_intrinsics.rs?ref=1a2689117013d7137f207dc85da7df57df5e0af9", "patch": "@@ -0,0 +1,21 @@\n+use crate::prelude::*;\n+\n+use rustc::ty::subst::SubstsRef;\n+\n+pub fn codegen_llvm_intrinsic_call<'a, 'tcx: 'a>(\n+    fx: &mut FunctionCx<'a, 'tcx, impl Backend>,\n+    intrinsic: &str,\n+    substs: SubstsRef<'tcx>,\n+    args: Vec<CValue<'tcx>>,\n+    destination: Option<(CPlace<'tcx>, BasicBlock)>,\n+) {\n+    fx.tcx.sess.warn(&format!(\"unsupported llvm intrinsic {}; replacing with trap\", intrinsic));\n+    crate::trap::trap_unimplemented(fx, intrinsic);\n+\n+    if let Some((_, dest)) = destination {\n+        let ret_ebb = fx.get_ebb(dest);\n+        fx.bcx.ins().jump(ret_ebb, &[]);\n+    } else {\n+        trap_unreachable(fx, \"[corruption] Diverging intrinsic returned.\");\n+    }\n+}"}]}