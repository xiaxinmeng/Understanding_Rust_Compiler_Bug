{"sha": "ac8b11810f4a0def3596ee401feb9ef00015b555", "node_id": "C_kwDOAAsO6NoAKGFjOGIxMTgxMGY0YTBkZWYzNTk2ZWU0MDFmZWI5ZWYwMDAxNWI1NTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-17T05:26:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-17T05:26:08Z"}, "message": "Auto merge of #96010 - eduardosm:Unique-on-top-of-NonNull, r=m-ou-se,tmiasko\n\nImplement `core::ptr::Unique` on top of `NonNull`\n\nRemoves the use `rustc_layout_scalar_valid_range_start` and some `unsafe` blocks.", "tree": {"sha": "6c4fdcae11a51229f2107b5327160c7a7e04504e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c4fdcae11a51229f2107b5327160c7a7e04504e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac8b11810f4a0def3596ee401feb9ef00015b555", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac8b11810f4a0def3596ee401feb9ef00015b555", "html_url": "https://github.com/rust-lang/rust/commit/ac8b11810f4a0def3596ee401feb9ef00015b555", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac8b11810f4a0def3596ee401feb9ef00015b555/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43a71dc732af0f7cc5895cca8d001184c252426a", "url": "https://api.github.com/repos/rust-lang/rust/commits/43a71dc732af0f7cc5895cca8d001184c252426a", "html_url": "https://github.com/rust-lang/rust/commit/43a71dc732af0f7cc5895cca8d001184c252426a"}, {"sha": "7ba0292c4507bc2c825a986b833ab76acbc6c5f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba0292c4507bc2c825a986b833ab76acbc6c5f4", "html_url": "https://github.com/rust-lang/rust/commit/7ba0292c4507bc2c825a986b833ab76acbc6c5f4"}], "stats": {"total": 107, "additions": 56, "deletions": 51}, "files": [{"sha": "b6a7bcae9328450d1c38dcc4c5cf4032ab7951a0", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b11810f4a0def3596ee401feb9ef00015b555/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b11810f4a0def3596ee401feb9ef00015b555/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=ac8b11810f4a0def3596ee401feb9ef00015b555", "patch": "@@ -448,7 +448,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n                     // a box with a non-zst allocator should not be directly dereferenced\n                     if cg_base.layout.ty.is_box() && !cg_base.layout.field(cx, 1).is_zst() {\n-                        let ptr = cg_base.extract_field(bx, 0).extract_field(bx, 0);\n+                        // Extract `Box<T>` -> `Unique<T>` -> `NonNull<T>` -> `*const T`\n+                        let ptr =\n+                            cg_base.extract_field(bx, 0).extract_field(bx, 0).extract_field(bx, 0);\n \n                         ptr.deref(bx.cx())\n                     } else {\n@@ -464,7 +466,9 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 mir::ProjectionElem::Deref => {\n                     // a box with a non-zst allocator should not be directly dereferenced\n                     if cg_base.layout.ty.is_box() && !cg_base.layout.field(cx, 1).is_zst() {\n-                        let ptr = cg_base.project_field(bx, 0).project_field(bx, 0);\n+                        // Project `Box<T>` -> `Unique<T>` -> `NonNull<T>` -> `*const T`\n+                        let ptr =\n+                            cg_base.project_field(bx, 0).project_field(bx, 0).project_field(bx, 0);\n \n                         bx.load_operand(ptr).deref(bx.cx())\n                     } else {"}, {"sha": "1612aa582ad17a39de7ded0ccb7579c977a895f5", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b11810f4a0def3596ee401feb9ef00015b555/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b11810f4a0def3596ee401feb9ef00015b555/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=ac8b11810f4a0def3596ee401feb9ef00015b555", "patch": "@@ -120,12 +120,14 @@\n #![feature(const_maybe_uninit_uninit_array)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n+#![feature(const_nonnull_new)]\n #![feature(const_num_from_num)]\n #![feature(const_ops)]\n #![feature(const_option)]\n #![feature(const_option_ext)]\n #![feature(const_pin)]\n #![feature(const_replace)]\n+#![feature(const_ptr_as_ref)]\n #![feature(const_ptr_is_null)]\n #![feature(const_ptr_offset_from)]\n #![feature(const_ptr_read)]"}, {"sha": "64616142b4188442863eab4ad527f4f9452cfcc3", "filename": "library/core/src/ptr/unique.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b11810f4a0def3596ee401feb9ef00015b555/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b11810f4a0def3596ee401feb9ef00015b555/library%2Fcore%2Fsrc%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Funique.rs?ref=ac8b11810f4a0def3596ee401feb9ef00015b555", "patch": "@@ -1,8 +1,8 @@\n use crate::convert::From;\n use crate::fmt;\n use crate::marker::{PhantomData, Unsize};\n-use crate::mem;\n use crate::ops::{CoerceUnsized, DispatchFromDyn};\n+use crate::ptr::NonNull;\n \n /// A wrapper around a raw non-null `*mut T` that indicates that the possessor\n /// of this wrapper owns the referent. Useful for building abstractions like\n@@ -32,9 +32,8 @@ use crate::ops::{CoerceUnsized, DispatchFromDyn};\n )]\n #[doc(hidden)]\n #[repr(transparent)]\n-#[rustc_layout_scalar_valid_range_start(1)]\n pub struct Unique<T: ?Sized> {\n-    pointer: *const T,\n+    pointer: NonNull<T>,\n     // NOTE: this marker has no consequences for variance, but is necessary\n     // for dropck to understand that we logically own a `T`.\n     //\n@@ -71,9 +70,7 @@ impl<T: Sized> Unique<T> {\n     #[must_use]\n     #[inline]\n     pub const fn dangling() -> Self {\n-        // SAFETY: mem::align_of() returns a valid, non-null pointer. The\n-        // conditions to call new_unchecked() are thus respected.\n-        unsafe { Unique::new_unchecked(crate::ptr::invalid_mut::<T>(mem::align_of::<T>())) }\n+        Self::from(NonNull::dangling())\n     }\n }\n \n@@ -87,15 +84,14 @@ impl<T: ?Sized> Unique<T> {\n     #[inline]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n         // SAFETY: the caller must guarantee that `ptr` is non-null.\n-        unsafe { Unique { pointer: ptr as _, _marker: PhantomData } }\n+        unsafe { Unique { pointer: NonNull::new_unchecked(ptr), _marker: PhantomData } }\n     }\n \n     /// Creates a new `Unique` if `ptr` is non-null.\n     #[inline]\n     pub const fn new(ptr: *mut T) -> Option<Self> {\n-        if !ptr.is_null() {\n-            // SAFETY: The pointer has already been checked and is not null.\n-            Some(unsafe { Unique { pointer: ptr as _, _marker: PhantomData } })\n+        if let Some(pointer) = NonNull::new(ptr) {\n+            Some(Unique { pointer, _marker: PhantomData })\n         } else {\n             None\n         }\n@@ -105,7 +101,7 @@ impl<T: ?Sized> Unique<T> {\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub const fn as_ptr(self) -> *mut T {\n-        self.pointer as *mut T\n+        self.pointer.as_ptr()\n     }\n \n     /// Dereferences the content.\n@@ -118,7 +114,7 @@ impl<T: ?Sized> Unique<T> {\n     pub const unsafe fn as_ref(&self) -> &T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a reference.\n-        unsafe { &*self.as_ptr() }\n+        unsafe { self.pointer.as_ref() }\n     }\n \n     /// Mutably dereferences the content.\n@@ -131,17 +127,14 @@ impl<T: ?Sized> Unique<T> {\n     pub const unsafe fn as_mut(&mut self) -> &mut T {\n         // SAFETY: the caller must guarantee that `self` meets all the\n         // requirements for a mutable reference.\n-        unsafe { &mut *self.as_ptr() }\n+        unsafe { self.pointer.as_mut() }\n     }\n \n     /// Casts to a pointer of another type.\n     #[must_use = \"`self` will be dropped if the result is not used\"]\n     #[inline]\n     pub const fn cast<U>(self) -> Unique<U> {\n-        // SAFETY: Unique::new_unchecked() creates a new unique and needs\n-        // the given pointer to not be null.\n-        // Since we are passing self as a pointer, it cannot be null.\n-        unsafe { Unique::new_unchecked(self.as_ptr() as *mut U) }\n+        Unique::from(self.pointer.cast())\n     }\n }\n \n@@ -184,7 +177,17 @@ impl<T: ?Sized> const From<&mut T> for Unique<T> {\n     /// This conversion is infallible since references cannot be null.\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n-        // SAFETY: A mutable reference cannot be null\n-        unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }\n+        Self::from(NonNull::from(reference))\n+    }\n+}\n+\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n+impl<T: ?Sized> const From<NonNull<T>> for Unique<T> {\n+    /// Converts a `NonNull<T>` to a `Unique<T>`.\n+    ///\n+    /// This conversion is infallible since `NonNull` cannot be null.\n+    #[inline]\n+    fn from(pointer: NonNull<T>) -> Self {\n+        Unique { pointer, _marker: PhantomData }\n     }\n }"}, {"sha": "0a52b8c976f6ad87bb0c0482b36736ad6e813b55", "filename": "src/etc/gdb_providers.py", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Fetc%2Fgdb_providers.py", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Fetc%2Fgdb_providers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgdb_providers.py?ref=ac8b11810f4a0def3596ee401feb9ef00015b555", "patch": "@@ -12,8 +12,10 @@\n def unwrap_unique_or_non_null(unique_or_nonnull):\n     # BACKCOMPAT: rust 1.32\n     # https://github.com/rust-lang/rust/commit/7a0911528058e87d22ea305695f4047572c5e067\n+    # BACKCOMPAT: rust 1.60\n+    # https://github.com/rust-lang/rust/commit/2a91eeac1a2d27dd3de1bf55515d765da20fd86f\n     ptr = unique_or_nonnull[\"pointer\"]\n-    return ptr if ptr.type.code == gdb.TYPE_CODE_PTR else ptr[ZERO_FIELD]\n+    return ptr if ptr.type.code == gdb.TYPE_CODE_PTR else ptr[ptr.type.fields()[0]]\n \n \n class EnumProvider:"}, {"sha": "35ac07f0db763c860c0d19eb276508ee5c74a699", "filename": "src/etc/lldb_providers.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Fetc%2Flldb_providers.py", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Fetc%2Flldb_providers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flldb_providers.py?ref=ac8b11810f4a0def3596ee401feb9ef00015b555", "patch": "@@ -63,6 +63,8 @@ def from_uint(self, name, value):\n def unwrap_unique_or_non_null(unique_or_nonnull):\n     # BACKCOMPAT: rust 1.32\n     # https://github.com/rust-lang/rust/commit/7a0911528058e87d22ea305695f4047572c5e067\n+    # BACKCOMPAT: rust 1.60\n+    # https://github.com/rust-lang/rust/commit/2a91eeac1a2d27dd3de1bf55515d765da20fd86f\n     ptr = unique_or_nonnull.GetChildMemberWithName(\"pointer\")\n     return ptr if ptr.TypeIsPointerType() else ptr.GetChildAtIndex(0)\n \n@@ -268,7 +270,9 @@ class StdVecSyntheticProvider:\n     struct RawVec<T> { ptr: Unique<T>, cap: usize, ... }\n     rust 1.31.1: struct Unique<T: ?Sized> { pointer: NonZero<*const T>, ... }\n     rust 1.33.0: struct Unique<T: ?Sized> { pointer: *const T, ... }\n+    rust 1.62.0: struct Unique<T: ?Sized> { pointer: NonNull<T>, ... }\n     struct NonZero<T>(T)\n+    struct NonNull<T> { pointer: *const T }\n     \"\"\"\n \n     def __init__(self, valobj, dict):"}, {"sha": "83ca8ed932e46bc7045cd082f0d981d25f648664", "filename": "src/etc/natvis/liballoc.natvis", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Fetc%2Fnatvis%2Fliballoc.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Fliballoc.natvis?ref=ac8b11810f4a0def3596ee401feb9ef00015b555", "patch": "@@ -7,7 +7,7 @@\n       <Item Name=\"[capacity]\" ExcludeView=\"simple\">buf.cap</Item>\n       <ArrayItems>\n         <Size>len</Size>\n-        <ValuePointer>buf.ptr.pointer</ValuePointer>\n+        <ValuePointer>buf.ptr.pointer.pointer</ValuePointer>\n       </ArrayItems>\n     </Expand>\n   </Type>\n@@ -24,7 +24,7 @@\n           <If Condition=\"i == head\">\n             <Break/>\n           </If>\n-          <Item>buf.ptr.pointer[i]</Item>\n+          <Item>buf.ptr.pointer.pointer[i]</Item>\n           <Exec>i = (i + 1 == buf.cap ? 0 : i + 1)</Exec>\n         </Loop>\n       </CustomListItems>\n@@ -42,17 +42,17 @@\n     </Expand>\n   </Type>\n   <Type Name=\"alloc::string::String\">\n-    <DisplayString>{(char*)vec.buf.ptr.pointer,[vec.len]s8}</DisplayString>\n-    <StringView>(char*)vec.buf.ptr.pointer,[vec.len]s8</StringView>\n+    <DisplayString>{(char*)vec.buf.ptr.pointer.pointer,[vec.len]s8}</DisplayString>\n+    <StringView>(char*)vec.buf.ptr.pointer.pointer,[vec.len]s8</StringView>\n     <Expand>\n       <Item Name=\"[len]\" ExcludeView=\"simple\">vec.len</Item>\n       <Item Name=\"[capacity]\" ExcludeView=\"simple\">vec.buf.cap</Item>\n       <Synthetic Name=\"[chars]\">\n-        <DisplayString>{(char*)vec.buf.ptr.pointer,[vec.len]s8}</DisplayString>\n+        <DisplayString>{(char*)vec.buf.ptr.pointer.pointer,[vec.len]s8}</DisplayString>\n         <Expand>\n           <ArrayItems>\n             <Size>vec.len</Size>\n-            <ValuePointer>(char*)vec.buf.ptr.pointer</ValuePointer>\n+            <ValuePointer>(char*)vec.buf.ptr.pointer.pointer</ValuePointer>\n           </ArrayItems>\n         </Expand>\n       </Synthetic>"}, {"sha": "643590fc977870f1c89f83ccff373dc0f1f128bd", "filename": "src/etc/natvis/libcore.natvis", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Fetc%2Fnatvis%2Flibcore.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Fetc%2Fnatvis%2Flibcore.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibcore.natvis?ref=ac8b11810f4a0def3596ee401feb9ef00015b555", "patch": "@@ -113,7 +113,7 @@\n   </Type>\n \n   <Type Name=\"core::ptr::unique::Unique&lt;*&gt;\">\n-    <DisplayString>Unique({(void*)pointer}: {pointer})</DisplayString>\n+    <DisplayString>Unique({(void*)pointer.pointer}: {pointer.pointer})</DisplayString>\n     <Expand>\n       <ExpandedItem>pointer</ExpandedItem>\n     </Expand>"}, {"sha": "4371b9953181779ef464e5839af6ea13b2b720f1", "filename": "src/etc/natvis/libstd.natvis", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Fetc%2Fnatvis%2Flibstd.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Fetc%2Fnatvis%2Flibstd.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fnatvis%2Flibstd.natvis?ref=ac8b11810f4a0def3596ee401feb9ef00015b555", "patch": "@@ -104,14 +104,14 @@\n   </Type>\n \n   <Type Name=\"std::ffi::os_str::OsString\">\n-    <DisplayString>{(char*)inner.inner.bytes.buf.ptr.pointer,[inner.inner.bytes.len]}</DisplayString>\n+    <DisplayString>{(char*)inner.inner.bytes.buf.ptr.pointer.pointer,[inner.inner.bytes.len]}</DisplayString>\n     <Expand>\n       <Synthetic Name=\"[chars]\">\n-        <DisplayString>{(char*)inner.inner.bytes.buf.ptr.pointer,[inner.inner.bytes.len]}</DisplayString>\n+        <DisplayString>{(char*)inner.inner.bytes.buf.ptr.pointer.pointer,[inner.inner.bytes.len]}</DisplayString>\n         <Expand>\n           <ArrayItems>\n             <Size>inner.inner.bytes.len</Size>\n-            <ValuePointer>(char*)inner.inner.bytes.buf.ptr.pointer</ValuePointer>\n+            <ValuePointer>(char*)inner.inner.bytes.buf.ptr.pointer.pointer</ValuePointer>\n           </ArrayItems>\n         </Expand>\n       </Synthetic>"}, {"sha": "074ad067ff899b3da47374188d4d82d4200df912", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=ac8b11810f4a0def3596ee401feb9ef00015b555", "patch": "@@ -35,7 +35,7 @@\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         Deinit((*_7));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: NonNull::<u32> { pointer: {0x4 as *const u32} }, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)"}, {"sha": "a055ae9864f5fa2193ed50e11f6449660b224511", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=ac8b11810f4a0def3596ee401feb9ef00015b555", "patch": "@@ -35,7 +35,7 @@\n +         StorageLive(_7);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         _7 = &mut (*_5);                 // scope 0 at $DIR/inline-into-box-place.rs:8:33: 8:43\n +         Deinit((*_7));                   // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n-+         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: {0x4 as *const u32}, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n++         ((*_7).0: alloc::raw_vec::RawVec<u32>) = const alloc::raw_vec::RawVec::<u32> { ptr: Unique::<u32> { pointer: NonNull::<u32> { pointer: {0x4 as *const u32} }, _marker: PhantomData::<u32> }, cap: 0_usize, alloc: std::alloc::Global }; // scope 3 at $SRC_DIR/alloc/src/vec/mod.rs:LL:COL\n                                            // mir::Constant\n -                                          // + span: $DIR/inline-into-box-place.rs:8:33: 8:41\n -                                          // + user_ty: UserType(1)"}, {"sha": "7c20608059398d6c3477476b7b41ccd895ab2a9d", "filename": "src/test/ui/lint/lint-ctypes-enum.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.rs?ref=ac8b11810f4a0def3596ee401feb9ef00015b555", "patch": "@@ -67,7 +67,6 @@ extern \"C\" {\n    fn option_fn(x: Option<extern \"C\" fn()>);\n    fn nonnull(x: Option<std::ptr::NonNull<u8>>);\n    fn unique(x: Option<std::ptr::Unique<u8>>);\n-   //~^ ERROR `extern` block uses type `Option<Unique<u8>>`\n    fn nonzero_u8(x: Option<num::NonZeroU8>);\n    fn nonzero_u16(x: Option<num::NonZeroU16>);\n    fn nonzero_u32(x: Option<num::NonZeroU32>);"}, {"sha": "1601bd9d62927f4fe9fa202d8c8247f43bd43115", "filename": "src/test/ui/lint/lint-ctypes-enum.stderr", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-enum.stderr?ref=ac8b11810f4a0def3596ee401feb9ef00015b555", "patch": "@@ -54,33 +54,24 @@ LL | |     G,\n LL | | }\n    | |_^\n \n-error: `extern` block uses type `Option<Unique<u8>>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:69:17\n-   |\n-LL |    fn unique(x: Option<std::ptr::Unique<u8>>);\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n-   |\n-   = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n-   = note: enum has no representation hint\n-\n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:75:23\n+  --> $DIR/lint-ctypes-enum.rs:74:23\n    |\n LL |    fn nonzero_u128(x: Option<num::NonZeroU128>);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:82:23\n+  --> $DIR/lint-ctypes-enum.rs:81:23\n    |\n LL |    fn nonzero_i128(x: Option<num::NonZeroI128>);\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `Option<TransparentUnion<NonZeroU8>>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:87:28\n+  --> $DIR/lint-ctypes-enum.rs:86:28\n    |\n LL |    fn transparent_union(x: Option<TransparentUnion<num::NonZeroU8>>);\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -89,7 +80,7 @@ LL |    fn transparent_union(x: Option<TransparentUnion<num::NonZeroU8>>);\n    = note: enum has no representation hint\n \n error: `extern` block uses type `Option<Rust<NonZeroU8>>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:89:20\n+  --> $DIR/lint-ctypes-enum.rs:88:20\n    |\n LL |    fn repr_rust(x: Option<Rust<num::NonZeroU8>>);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -98,13 +89,13 @@ LL |    fn repr_rust(x: Option<Rust<num::NonZeroU8>>);\n    = note: enum has no representation hint\n \n error: `extern` block uses type `Result<(), NonZeroI32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-enum.rs:90:20\n+  --> $DIR/lint-ctypes-enum.rs:89:20\n    |\n LL |    fn no_result(x: Result<(), num::NonZeroI32>);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum\n    = note: enum has no representation hint\n \n-error: aborting due to 9 previous errors\n+error: aborting due to 8 previous errors\n "}, {"sha": "859403f202f5167552c8272af20651d7aabca665", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac8b11810f4a0def3596ee401feb9ef00015b555/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=ac8b11810f4a0def3596ee401feb9ef00015b555", "patch": "@@ -4,7 +4,7 @@ error[E0275]: overflow evaluating the requirement `SalsaStorage: RefUnwindSafe`\n LL |     _parse: <ParseQuery as Query<RootDatabase>>::Data,\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: required because it appears within the type `*const SalsaStorage`\n+   = note: required because it appears within the type `PhantomData<SalsaStorage>`\n    = note: required because it appears within the type `Unique<SalsaStorage>`\n    = note: required because it appears within the type `Box<SalsaStorage>`\n note: required because it appears within the type `Runtime<RootDatabase>`"}]}