{"sha": "41090346d844b625ac58004066184d34a9d24f99", "node_id": "C_kwDOAAsO6NoAKDQxMDkwMzQ2ZDg0NGI2MjVhYzU4MDA0MDY2MTg0ZDM0YTlkMjRmOTk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-06T09:45:34Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-24T17:48:42Z"}, "message": "Change how suggested lifetime args are computed.", "tree": {"sha": "9d26579f7e57a694984e5fc44b60e2487be994b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d26579f7e57a694984e5fc44b60e2487be994b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/41090346d844b625ac58004066184d34a9d24f99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/41090346d844b625ac58004066184d34a9d24f99", "html_url": "https://github.com/rust-lang/rust/commit/41090346d844b625ac58004066184d34a9d24f99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/41090346d844b625ac58004066184d34a9d24f99/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f5e7a8eec4b69708005014ec322ba71caecdad1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f5e7a8eec4b69708005014ec322ba71caecdad1", "html_url": "https://github.com/rust-lang/rust/commit/5f5e7a8eec4b69708005014ec322ba71caecdad1"}], "stats": {"total": 138, "additions": 83, "deletions": 55}, "files": [{"sha": "4451db19f5c1e16be69603c89b1821fe7e2e1632", "filename": "compiler/rustc_hir_analysis/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 48, "deletions": 20, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/41090346d844b625ac58004066184d34a9d24f99/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/41090346d844b625ac58004066184d34a9d24f99/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=41090346d844b625ac58004066184d34a9d24f99", "patch": "@@ -296,25 +296,35 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n     ) -> String {\n         debug!(?path_hir_id);\n \n+        // If there was already a lifetime among the arguments, just replicate that one.\n+        if let Some(lt) = self.gen_args.args.iter().find_map(|arg| match arg {\n+            hir::GenericArg::Lifetime(lt) => Some(lt),\n+            _ => None,\n+        }) {\n+            return std::iter::repeat(lt.to_string())\n+                .take(num_params_to_take)\n+                .collect::<Vec<_>>()\n+                .join(\", \");\n+        }\n+\n         let mut ret = Vec::new();\n+        let mut ty_id = None;\n         for (id, node) in self.tcx.hir().parent_iter(path_hir_id) {\n             debug!(?id);\n-            let params = if let Some(generics) = node.generics() {\n-                generics.params\n-            } else if let hir::Node::Ty(ty) = node\n-                && let hir::TyKind::BareFn(bare_fn) = ty.kind\n-            {\n-                bare_fn.generic_params\n-            } else {\n-                &[]\n-            };\n-            ret.extend(params.iter().filter_map(|p| {\n-                let hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Explicit }\n-                    = p.kind\n-                else { return None };\n-                let hir::ParamName::Plain(name) = p.name else { return None };\n-                Some(name.to_string())\n-            }));\n+            if let hir::Node::Ty(_) = node {\n+                ty_id = Some(id);\n+            }\n+\n+            // Suggest `'_` when in function parameter or elided function return.\n+            if let Some(fn_decl) = node.fn_decl() && let Some(ty_id) = ty_id {\n+                let in_arg = fn_decl.inputs.iter().any(|t| t.hir_id == ty_id);\n+                let in_ret = matches!(fn_decl.output, hir::FnRetTy::Return(ty) if ty.hir_id == ty_id);\n+\n+                if in_arg || (in_ret && fn_decl.lifetime_elision_allowed) {\n+                    return std::iter::repeat(\"'_\".to_owned()).take(num_params_to_take).collect::<Vec<_>>().join(\", \");\n+                }\n+            }\n+\n             // Suggest `'static` when in const/static item-like.\n             if let hir::Node::Item(hir::Item {\n                 kind: hir::ItemKind::Static { .. } | hir::ItemKind::Const { .. },\n@@ -334,11 +344,29 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n             })\n             | hir::Node::AnonConst(..) = node\n             {\n-                ret.extend(\n-                    std::iter::repeat(\"'static\".to_owned())\n-                        .take(num_params_to_take.saturating_sub(ret.len())),\n-                );\n+                return std::iter::repeat(\"'static\".to_owned())\n+                    .take(num_params_to_take.saturating_sub(ret.len()))\n+                    .collect::<Vec<_>>()\n+                    .join(\", \");\n             }\n+\n+            let params = if let Some(generics) = node.generics() {\n+                generics.params\n+            } else if let hir::Node::Ty(ty) = node\n+                && let hir::TyKind::BareFn(bare_fn) = ty.kind\n+            {\n+                bare_fn.generic_params\n+            } else {\n+                &[]\n+            };\n+            ret.extend(params.iter().filter_map(|p| {\n+                let hir::GenericParamKind::Lifetime { kind: hir::LifetimeParamKind::Explicit }\n+                    = p.kind\n+                else { return None };\n+                let hir::ParamName::Plain(name) = p.name else { return None };\n+                Some(name.to_string())\n+            }));\n+\n             if ret.len() >= num_params_to_take {\n                 return ret[..num_params_to_take].join(\", \");\n             }"}, {"sha": "8278edabe3a0655afb666ce49c9eb02aea147c15", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-102768.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102768.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102768.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-102768.stderr?ref=41090346d844b625ac58004066184d34a9d24f99", "patch": "@@ -11,7 +11,7 @@ LL |     type Y<'a>;\n    |          ^ --\n help: add missing lifetime argument\n    |\n-LL |     fn f2<'a>(arg: Box<dyn X<Y<'a, 1> = &'a ()>>) {}\n+LL |     fn f2<'a>(arg: Box<dyn X<Y<'_, 1> = &'a ()>>) {}\n    |                                +++\n \n error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied"}, {"sha": "bc1141b16c55d40380a91268a9592e8da0f3e706", "filename": "src/test/ui/constructor-lifetime-args.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconstructor-lifetime-args.stderr?ref=41090346d844b625ac58004066184d34a9d24f99", "patch": "@@ -13,8 +13,8 @@ LL | struct S<'a, 'b>(&'a u8, &'b u8);\n    |        ^ --  --\n help: add missing lifetime argument\n    |\n-LL |     S::<'static, 'b>(&0, &0);\n-   |                ++++\n+LL |     S::<'static, 'static>(&0, &0);\n+   |                +++++++++\n \n error[E0107]: this struct takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/constructor-lifetime-args.rs:19:5\n@@ -45,8 +45,8 @@ LL | enum E<'a, 'b> {\n    |      ^ --  --\n help: add missing lifetime argument\n    |\n-LL |     E::V::<'static, 'b>(&0);\n-   |                   ++++\n+LL |     E::V::<'static, 'static>(&0);\n+   |                   +++++++++\n \n error[E0107]: this enum takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/constructor-lifetime-args.rs:24:8"}, {"sha": "a9996123f23437a6d3da97441051332a44836bcd", "filename": "src/test/ui/generic-associated-types/elided-in-expr-position.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Felided-in-expr-position.stderr?ref=41090346d844b625ac58004066184d34a9d24f99", "patch": "@@ -11,7 +11,7 @@ LL |     type Assoc<'a> where Self: 'a;\n    |          ^^^^^ --\n help: add missing lifetime argument\n    |\n-LL |     fn g(&self) -> Self::Assoc<'a>;\n+LL |     fn g(&self) -> Self::Assoc<'_>;\n    |                          ~~~~~~~~~\n \n error[E0107]: missing generics for associated type `Trait::Assoc`\n@@ -27,7 +27,7 @@ LL |     type Assoc<'a> where Self: 'a;\n    |          ^^^^^ --\n help: add missing lifetime argument\n    |\n-LL |     fn g(&self) -> Self::Assoc<'a> {\n+LL |     fn g(&self) -> Self::Assoc<'_> {\n    |                          ~~~~~~~~~\n \n error: aborting due to 2 previous errors"}, {"sha": "165779796e0bc4325a57d018b177e209a620bf66", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=41090346d844b625ac58004066184d34a9d24f99", "patch": "@@ -36,7 +36,7 @@ LL |   type Y<'a>;\n    |        ^ --\n help: add missing lifetime argument\n    |\n-LL | fn foo<'a>(arg: Box<dyn X<Y('a, 'a) = &'a ()>>) {}\n+LL | fn foo<'a>(arg: Box<dyn X<Y('_, 'a) = &'a ()>>) {}\n    |                             +++\n \n error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied\n@@ -66,7 +66,7 @@ LL |   type Y<'a>;\n    |        ^ --\n help: add missing lifetime argument\n    |\n-LL | fn bar<'a>(arg: Box<dyn X<Y('a) = ()>>) {}\n+LL | fn bar<'a>(arg: Box<dyn X<Y('_) = ()>>) {}\n    |                             ++\n \n error: aborting due to 6 previous errors"}, {"sha": "9e21c567c73c52798a8442e35e4c4f4adac32937", "filename": "src/test/ui/generic-associated-types/issue-81862.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-81862.stderr?ref=41090346d844b625ac58004066184d34a9d24f99", "patch": "@@ -11,7 +11,7 @@ LL |     type Item<'a>;\n    |          ^^^^ --\n help: add missing lifetime argument\n    |\n-LL |     fn next(&mut self) -> Option<Self::Item<'a>>;\n+LL |     fn next(&mut self) -> Option<Self::Item<'_>>;\n    |                                        ~~~~~~~~\n \n error: aborting due to previous error"}, {"sha": "752587c25a7335b589adbbae711671a9199f942f", "filename": "src/test/ui/generic-associated-types/missing_lifetime_args.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fmissing_lifetime_args.stderr?ref=41090346d844b625ac58004066184d34a9d24f99", "patch": "@@ -11,7 +11,7 @@ LL |     type Y<'a, 'b>;\n    |          ^ --  --\n help: add missing lifetime arguments\n    |\n-LL | fn foo<'c, 'd>(_arg: Box<dyn X<Y<'c, 'd> = (&'c u32, &'d u32)>>) {}\n+LL | fn foo<'c, 'd>(_arg: Box<dyn X<Y<'_, '_> = (&'c u32, &'d u32)>>) {}\n    |                                ~~~~~~~~~\n \n error[E0107]: this struct takes 3 lifetime arguments but 2 lifetime arguments were supplied\n@@ -47,7 +47,7 @@ LL | struct Foo<'a, 'b, 'c> {\n    |        ^^^ --  --  --\n help: add missing lifetime arguments\n    |\n-LL | fn f<'a>(_arg: Foo<'a, 'b, 'c>) {}\n+LL | fn f<'a>(_arg: Foo<'a, 'a, 'a>) {}\n    |                      ++++++++\n \n error: aborting due to 3 previous errors"}, {"sha": "0a09ec5dc4935ba42b762e5a45a6ce3efb6b6a30", "filename": "src/test/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr?ref=41090346d844b625ac58004066184d34a9d24f99", "patch": "@@ -11,7 +11,7 @@ LL |     type Y<'a>;\n    |          ^ --\n help: add missing lifetime argument\n    |\n-LL |   fn f2<'a>(arg : Box<dyn X<Y<'a, 1> = &'a ()>>) {}\n+LL |   fn f2<'a>(arg : Box<dyn X<Y<'_, 1> = &'a ()>>) {}\n    |                               +++\n \n error[E0107]: this associated type takes 0 generic arguments but 1 generic argument was supplied"}, {"sha": "0475eb908a779d0e1174b6be53bd444937013ddf", "filename": "src/test/ui/generics/wrong-number-of-args.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerics%2Fwrong-number-of-args.stderr?ref=41090346d844b625ac58004066184d34a9d24f99", "patch": "@@ -812,8 +812,8 @@ LL |         trait GenericLifetimeLifetimeAT<'a, 'b> {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |         type B = Box<dyn GenericLifetimeLifetimeAT<'static, 'b, AssocTy=()>>;\n-   |                                                           ++++\n+LL |         type B = Box<dyn GenericLifetimeLifetimeAT<'static, 'static, AssocTy=()>>;\n+   |                                                           +++++++++\n \n error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:287:26\n@@ -846,8 +846,8 @@ LL |         trait GenericLifetimeLifetimeTypeAT<'a, 'b, A> {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, 'b, AssocTy=()>>;\n-   |                                                               ++++\n+LL |         type B = Box<dyn GenericLifetimeLifetimeTypeAT<'static, 'static, AssocTy=()>>;\n+   |                                                               +++++++++\n \n error[E0107]: this trait takes 1 generic argument but 0 generic arguments were supplied\n   --> $DIR/wrong-number-of-args.rs:294:26\n@@ -880,8 +880,8 @@ LL |         trait GenericLifetimeLifetimeTypeAT<'a, 'b, A> {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |         type C = Box<dyn GenericLifetimeLifetimeTypeAT<'static, 'b, (), AssocTy=()>>;\n-   |                                                               ++++\n+LL |         type C = Box<dyn GenericLifetimeLifetimeTypeAT<'static, 'static, (), AssocTy=()>>;\n+   |                                                               +++++++++\n \n error[E0107]: missing generics for struct `HashMap`\n   --> $DIR/wrong-number-of-args.rs:310:18"}, {"sha": "249b48ab1945b08c03bba45852182320069b4b73", "filename": "src/test/ui/methods/method-call-lifetime-args-fail.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-call-lifetime-args-fail.stderr?ref=41090346d844b625ac58004066184d34a9d24f99", "patch": "@@ -13,8 +13,8 @@ LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n    |        ^^^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     S.early::<'static, 'b>();\n-   |                      ++++\n+LL |     S.early::<'static, 'static>();\n+   |                      +++++++++\n \n error[E0107]: this associated function takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/method-call-lifetime-args-fail.rs:18:7\n@@ -213,8 +213,8 @@ LL |     fn early<'a, 'b>(self) -> (&'a u8, &'b u8) { loop {} }\n    |        ^^^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     S::early::<'static, 'b>(S);\n-   |                       ++++\n+LL |     S::early::<'static, 'static>(S);\n+   |                       +++++++++\n \n error[E0107]: this associated function takes 2 lifetime arguments but 3 lifetime arguments were supplied\n   --> $DIR/method-call-lifetime-args-fail.rs:65:8"}, {"sha": "997bbb5e9b5af141095796077910fd8e2ebe9656", "filename": "src/test/ui/suggestions/missing-lifetime-specifier.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/41090346d844b625ac58004066184d34a9d24f99/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-lifetime-specifier.stderr?ref=41090346d844b625ac58004066184d34a9d24f99", "patch": "@@ -166,8 +166,8 @@ LL | pub union Qux<'t, 'k, I> {\n    |           ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                       ++++\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                       +++++++++\n \n error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:39:44\n@@ -184,8 +184,8 @@ LL | pub union Qux<'t, 'k, I> {\n    |           ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                       ++++\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                       +++++++++\n \n error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:39:44\n@@ -202,8 +202,8 @@ LL | pub union Qux<'t, 'k, I> {\n    |           ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                       ++++\n+LL |     static e: RefCell<HashMap<i32, Vec<Vec<Qux<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                       +++++++++\n \n error[E0107]: this union takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:39:44\n@@ -256,8 +256,8 @@ LL | trait Tar<'t, 'k, I> {}\n    |       ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                        ++++\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                        +++++++++\n \n error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:47:45\n@@ -274,8 +274,8 @@ LL | trait Tar<'t, 'k, I> {}\n    |       ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                        ++++\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                        +++++++++\n \n error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:47:45\n@@ -292,8 +292,8 @@ LL | trait Tar<'t, 'k, I> {}\n    |       ^^^ --  --\n help: add missing lifetime argument\n    |\n-LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'k, i32>>>>> = RefCell::new(HashMap::new());\n-   |                                                        ++++\n+LL |     static f: RefCell<HashMap<i32, Vec<Vec<&Tar<'static, 'static, i32>>>>> = RefCell::new(HashMap::new());\n+   |                                                        +++++++++\n \n error[E0107]: this trait takes 2 lifetime arguments but 1 lifetime argument was supplied\n   --> $DIR/missing-lifetime-specifier.rs:47:45"}]}