{"sha": "222503a354d263ee13ee160506443036b799a2ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyMjUwM2EzNTRkMjYzZWUxM2VlMTYwNTA2NDQzMDM2Yjc5OWEyZWE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-17T18:26:13Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-10-24T17:51:33Z"}, "message": "rustc: Add a convenience alias for `dyn MetadataLoader + Sync`", "tree": {"sha": "60696eee327e7865b1926b3dcd2879f81a093ce2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60696eee327e7865b1926b3dcd2879f81a093ce2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/222503a354d263ee13ee160506443036b799a2ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/222503a354d263ee13ee160506443036b799a2ea", "html_url": "https://github.com/rust-lang/rust/commit/222503a354d263ee13ee160506443036b799a2ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/222503a354d263ee13ee160506443036b799a2ea/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "175d325ccbaccf40907a8bb8184ee65a5f62ca8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/175d325ccbaccf40907a8bb8184ee65a5f62ca8a", "html_url": "https://github.com/rust-lang/rust/commit/175d325ccbaccf40907a8bb8184ee65a5f62ca8a"}], "stats": {"total": 22, "additions": 12, "deletions": 10}, "files": [{"sha": "8205383da9892038ddd3594bf47af96da69c3954", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/222503a354d263ee13ee160506443036b799a2ea/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/222503a354d263ee13ee160506443036b799a2ea/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=222503a354d263ee13ee160506443036b799a2ea", "patch": "@@ -191,6 +191,8 @@ pub trait MetadataLoader {\n                           -> Result<MetadataRef, String>;\n }\n \n+pub type MetadataLoaderDyn = dyn MetadataLoader + Sync;\n+\n /// A store of Rust crates, through which their metadata can be accessed.\n ///\n /// Note that this trait should probably not be expanding today. All new"}, {"sha": "e09b600afd4e5a4955bc76e0ef6a78f5f2de877d", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/222503a354d263ee13ee160506443036b799a2ea/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/222503a354d263ee13ee160506443036b799a2ea/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=222503a354d263ee13ee160506443036b799a2ea", "patch": "@@ -56,7 +56,7 @@ use std::sync::Arc;\n use std::ffi::CStr;\n \n use rustc::dep_graph::DepGraph;\n-use rustc::middle::cstore::{EncodedMetadata, MetadataLoader};\n+use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n use rustc::session::Session;\n use rustc::session::config::{OutputFilenames, OutputType, PrintRequest, OptLevel};\n use rustc::ty::{self, TyCtxt};\n@@ -260,7 +260,7 @@ impl CodegenBackend for LlvmCodegenBackend {\n         target_features(sess)\n     }\n \n-    fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync> {\n+    fn metadata_loader(&self) -> Box<MetadataLoaderDyn> {\n         box metadata::LlvmMetadataLoader\n     }\n "}, {"sha": "0e2c3731eae6d23b10751fc51a08779eb63c5960", "filename": "src/librustc_codegen_utils/codegen_backend.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/222503a354d263ee13ee160506443036b799a2ea/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/222503a354d263ee13ee160506443036b799a2ea/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fcodegen_backend.rs?ref=222503a354d263ee13ee160506443036b799a2ea", "patch": "@@ -14,7 +14,7 @@ use rustc::util::common::ErrorReported;\n use rustc::session::config::{OutputFilenames, PrintRequest};\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n-use rustc::middle::cstore::{EncodedMetadata, MetadataLoader};\n+use rustc::middle::cstore::{EncodedMetadata, MetadataLoaderDyn};\n use rustc::dep_graph::DepGraph;\n \n pub use rustc_data_structures::sync::MetadataRef;\n@@ -26,7 +26,7 @@ pub trait CodegenBackend {\n     fn print_passes(&self) {}\n     fn print_version(&self) {}\n \n-    fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync>;\n+    fn metadata_loader(&self) -> Box<MetadataLoaderDyn>;\n     fn provide(&self, _providers: &mut Providers<'_>);\n     fn provide_extern(&self, _providers: &mut Providers<'_>);\n     fn codegen_crate<'tcx>("}, {"sha": "a2920884409cac238c7dfa4a5671e369ea35e4f3", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/222503a354d263ee13ee160506443036b799a2ea/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/222503a354d263ee13ee160506443036b799a2ea/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=222503a354d263ee13ee160506443036b799a2ea", "patch": "@@ -5,7 +5,7 @@ use crate::schema;\n use rustc::dep_graph::DepNodeIndex;\n use rustc::hir::def_id::{CrateNum, DefIndex};\n use rustc::hir::map::definitions::DefPathTable;\n-use rustc::middle::cstore::{CrateSource, DepKind, ExternCrate, MetadataLoader};\n+use rustc::middle::cstore::{CrateSource, DepKind, ExternCrate, MetadataLoaderDyn};\n use rustc::mir::interpret::AllocDecodingState;\n use rustc_index::vec::IndexVec;\n use rustc::util::nodemap::FxHashMap;\n@@ -96,7 +96,7 @@ pub struct CrateMetadata {\n \n pub struct CStore {\n     metas: RwLock<IndexVec<CrateNum, Option<Lrc<CrateMetadata>>>>,\n-    crate metadata_loader: Box<dyn MetadataLoader + Sync>,\n+    crate metadata_loader: Box<MetadataLoaderDyn>,\n }\n \n pub enum LoadedMacro {\n@@ -105,7 +105,7 @@ pub enum LoadedMacro {\n }\n \n impl CStore {\n-    pub fn new(metadata_loader: Box<dyn MetadataLoader + Sync>) -> CStore {\n+    pub fn new(metadata_loader: Box<MetadataLoaderDyn>) -> CStore {\n         CStore {\n             // We add an empty entry for LOCAL_CRATE (which maps to zero) in\n             // order to make array indices in `metas` match with the"}, {"sha": "eb96c61060b391d1baa4597258aa3bd75161a9d0", "filename": "src/test/run-make-fulldeps/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/222503a354d263ee13ee160506443036b799a2ea/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/222503a354d263ee13ee160506443036b799a2ea/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=222503a354d263ee13ee160506443036b799a2ea", "patch": "@@ -9,14 +9,14 @@ extern crate rustc_target;\n extern crate rustc_driver;\n \n use std::any::Any;\n-use std::sync::{Arc, mpsc};\n+use std::sync::Arc;\n use std::path::Path;\n use syntax::symbol::Symbol;\n use rustc::session::Session;\n use rustc::session::config::OutputFilenames;\n use rustc::ty::TyCtxt;\n use rustc::ty::query::Providers;\n-use rustc::middle::cstore::{EncodedMetadata, MetadataLoader};\n+use rustc::middle::cstore::{EncodedMetadata, MetadataLoader, MetadataLoaderDyn};\n use rustc::dep_graph::DepGraph;\n use rustc::util::common::ErrorReported;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n@@ -41,7 +41,7 @@ impl MetadataLoader for NoLlvmMetadataLoader {\n struct TheBackend;\n \n impl CodegenBackend for TheBackend {\n-    fn metadata_loader(&self) -> Box<dyn MetadataLoader + Sync> {\n+    fn metadata_loader(&self) -> Box<MetadataLoaderDyn> {\n         Box::new(NoLlvmMetadataLoader)\n     }\n "}]}