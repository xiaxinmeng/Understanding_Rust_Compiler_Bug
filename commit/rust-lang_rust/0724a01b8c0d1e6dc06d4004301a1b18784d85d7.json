{"sha": "0724a01b8c0d1e6dc06d4004301a1b18784d85d7", "node_id": "C_kwDOAAsO6NoAKDA3MjRhMDFiOGMwZDFlNmRjMDZkNDAwNDMwMWExYjE4Nzg0ZDg1ZDc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-12-02T20:22:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-02T20:22:47Z"}, "message": "Rollup merge of #105033 - durin42:llvm-16-dont-tail-call-me-bro, r=tmandry\n\nsparc-struct-abi: work around new tail-call optimization\n\nUpstream LLVM change https://reviews.llvm.org/D138741 introduced some new tail-call smarts for SPARC which broke some of the checks in this test. Rather than adjust the test expectations, we add an extra no-args function that can get tail-called or not without hurting the needs of the test.\n\nr? ``@nikic``", "tree": {"sha": "891b5650a5131e9dbd6ae47cd93ee2110e041935", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/891b5650a5131e9dbd6ae47cd93ee2110e041935"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0724a01b8c0d1e6dc06d4004301a1b18784d85d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjil6XCRBK7hj4Ov3rIwAACZkIABtdg6iRJQS4Vr3U40kmKj5K\n1HMfuwFBrenoPXtvFbOXaKEegytUHQm8r4L6hoPHVA48EsQ0AMFLR33CVzdKvGfp\njXlNa2G37hAeNceskEKX8ItPC6pJcEhFJdkNlDtze49yPAK2PUuOUOflfvEECTfw\nfOapst/hXGN3L5Ys8+NlSkz14zoM5mJopr7SFQ2FdxSQpu6twIE7w4z3O2dterVI\n3paSl+imYVTb6bPPrCBLbsLGUFQ6rFOEfIXmX/ySk2s0nISJx5vhdLRo9Ci80jPE\nAb6bJSRr0rAUyW/Hrdc37TwnskTk3Z3LBg/WNHX4epZbjG8UCq0NKZYsfwk9ezE=\n=FLIh\n-----END PGP SIGNATURE-----\n", "payload": "tree 891b5650a5131e9dbd6ae47cd93ee2110e041935\nparent dab14348e981a9e660cf8c8d13f7547dbf04c1eb\nparent ef54e653c2fa6870b9830700aa8ec69330f50e78\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1670012567 +0100\ncommitter GitHub <noreply@github.com> 1670012567 +0100\n\nRollup merge of #105033 - durin42:llvm-16-dont-tail-call-me-bro, r=tmandry\n\nsparc-struct-abi: work around new tail-call optimization\n\nUpstream LLVM change https://reviews.llvm.org/D138741 introduced some new tail-call smarts for SPARC which broke some of the checks in this test. Rather than adjust the test expectations, we add an extra no-args function that can get tail-called or not without hurting the needs of the test.\n\nr? ``@nikic``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0724a01b8c0d1e6dc06d4004301a1b18784d85d7", "html_url": "https://github.com/rust-lang/rust/commit/0724a01b8c0d1e6dc06d4004301a1b18784d85d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0724a01b8c0d1e6dc06d4004301a1b18784d85d7/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dab14348e981a9e660cf8c8d13f7547dbf04c1eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/dab14348e981a9e660cf8c8d13f7547dbf04c1eb", "html_url": "https://github.com/rust-lang/rust/commit/dab14348e981a9e660cf8c8d13f7547dbf04c1eb"}, {"sha": "ef54e653c2fa6870b9830700aa8ec69330f50e78", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef54e653c2fa6870b9830700aa8ec69330f50e78", "html_url": "https://github.com/rust-lang/rust/commit/ef54e653c2fa6870b9830700aa8ec69330f50e78"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "6309dd420ffa4d5c8c42915fdbfd6a9e86b43924", "filename": "src/test/assembly/sparc-struct-abi.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0724a01b8c0d1e6dc06d4004301a1b18784d85d7/src%2Ftest%2Fassembly%2Fsparc-struct-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0724a01b8c0d1e6dc06d4004301a1b18784d85d7/src%2Ftest%2Fassembly%2Fsparc-struct-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fsparc-struct-abi.rs?ref=0724a01b8c0d1e6dc06d4004301a1b18784d85d7", "patch": "@@ -44,12 +44,16 @@ pub unsafe extern \"C\" fn callee(arg: Franta) {\n     tst_use(arg.b);\n     tst_use(arg.c);\n     tst_use(arg.d);\n+    tail_call_avoidance_fn();\n }\n \n extern \"C\" {\n     fn opaque_callee(arg: Franta, intarg: i32);\n     fn tst_use(arg: f32);\n     fn clobber();\n+    // This exists so that post-https://reviews.llvm.org/D138741 LLVM doesn't\n+    // tail-call away some of our assertions.\n+    fn tail_call_avoidance_fn();\n }\n \n #[no_mangle]\n@@ -62,4 +66,5 @@ pub unsafe extern \"C\" fn caller() {\n     // CHECK: call opaque_callee\n     // CHECK: mov     3, %o2\n     opaque_callee(Franta { a: 1.0, b: 2.0, c: 3.0, d: 4.0 }, 3);\n+    tail_call_avoidance_fn();\n }"}]}