{"sha": "ca7d389e1db3ef9a94467e0c05b92acea06e7f1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhN2QzODllMWRiM2VmOWE5NDQ2N2UwYzA1YjkyYWNlYTA2ZTdmMWY=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-30T01:30:43Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-30T01:30:43Z"}, "message": "Of course there were overlong lines.", "tree": {"sha": "dfbbf3de3c028c39058237a3c87a22fb1d2a5a80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dfbbf3de3c028c39058237a3c87a22fb1d2a5a80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca7d389e1db3ef9a94467e0c05b92acea06e7f1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca7d389e1db3ef9a94467e0c05b92acea06e7f1f", "html_url": "https://github.com/rust-lang/rust/commit/ca7d389e1db3ef9a94467e0c05b92acea06e7f1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca7d389e1db3ef9a94467e0c05b92acea06e7f1f/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cd132eef0ab9fb001f787fc3ee697878d4db3e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cd132eef0ab9fb001f787fc3ee697878d4db3e2", "html_url": "https://github.com/rust-lang/rust/commit/1cd132eef0ab9fb001f787fc3ee697878d4db3e2"}], "stats": {"total": 10, "additions": 6, "deletions": 4}, "files": [{"sha": "ff9f75e996e22257438cb870f57f693a83a529a0", "filename": "src/etc/unicode.py", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca7d389e1db3ef9a94467e0c05b92acea06e7f1f/src%2Fetc%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/ca7d389e1db3ef9a94467e0c05b92acea06e7f1f/src%2Fetc%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Funicode.py?ref=ca7d389e1db3ef9a94467e0c05b92acea06e7f1f", "patch": "@@ -143,8 +143,10 @@ def emit_decomp_module(f, canon, compat):\n     compat_keys.sort()\n     f.write(\"mod decompose {\\n\\n\");\n     f.write(\"    export canonical, compatibility;\\n\\n\")\n-    f.write(\"    fn canonical(c: char, i: block(char)) { d(c, i, false); }\\n\\n\")\n-    f.write(\"    fn compatibility(c: char, i: block(char)) { d(c, i, true); }\\n\\n\")\n+    f.write(\"    fn canonical(c: char, i: block(char)) \"\n+            + \"{ d(c, i, false); }\\n\\n\")\n+    f.write(\"    fn compatibility(c: char, i: block(char)) \"\n+            +\"{ d(c, i, true); }\\n\\n\")\n     f.write(\"    fn d(c: char, i: block(char), k: bool) {\\n\")\n \n     f.write(\"        if c <= '\\\\x7f' { i(c); ret; }\\n\")\n@@ -193,5 +195,5 @@ def emit_decomp_module(f, canon, compat):\n emit_decomp_module(rf, canon_decomp, compat_decomp)\n emit_property_module(rf, \"general_category\", gencats)\n \n-emit_property_module(rf, \"derived_property\",\n-                     load_derived_core_properties(\"DerivedCoreProperties.txt\"))\n+derived = load_derived_core_properties(\"DerivedCoreProperties.txt\")\n+emit_property_module(rf, \"derived_property\", derived)"}]}