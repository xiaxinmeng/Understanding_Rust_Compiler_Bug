{"sha": "9599066dcbff6b78c97fed816cf183e1577acff2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1OTkwNjZkY2JmZjZiNzhjOTdmZWQ4MTZjZjE4M2UxNTc3YWNmZjI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-01-04T00:14:53Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-01-04T00:32:39Z"}, "message": "rustc: remove misleading `Ty::is_uint` method.", "tree": {"sha": "55d59e4d6645c21fc33d10cb7da0d6a54b10c1d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55d59e4d6645c21fc33d10cb7da0d6a54b10c1d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9599066dcbff6b78c97fed816cf183e1577acff2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9599066dcbff6b78c97fed816cf183e1577acff2", "html_url": "https://github.com/rust-lang/rust/commit/9599066dcbff6b78c97fed816cf183e1577acff2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9599066dcbff6b78c97fed816cf183e1577acff2/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a3761e63e5961ddd6ae5b9923e7a3c0725541f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3761e63e5961ddd6ae5b9923e7a3c0725541f8", "html_url": "https://github.com/rust-lang/rust/commit/0a3761e63e5961ddd6ae5b9923e7a3c0725541f8"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "e7e1a349bd8739a1be841cfbf80670f61e4879ab", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9599066dcbff6b78c97fed816cf183e1577acff2/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9599066dcbff6b78c97fed816cf183e1577acff2/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=9599066dcbff6b78c97fed816cf183e1577acff2", "patch": "@@ -1478,13 +1478,6 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n         }\n     }\n \n-    pub fn is_uint(&self) -> bool {\n-        match self.sty {\n-            TyInfer(IntVar(_)) | TyUint(ast::UintTy::Us) => true,\n-            _ => false\n-        }\n-    }\n-\n     pub fn is_char(&self) -> bool {\n         match self.sty {\n             TyChar => true,"}, {"sha": "201997a74b73f3b6e4561645d2dfc84630137678", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9599066dcbff6b78c97fed816cf183e1577acff2/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9599066dcbff6b78c97fed816cf183e1577acff2/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=9599066dcbff6b78c97fed816cf183e1577acff2", "patch": "@@ -233,7 +233,7 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n             CastError::NeedViaPtr => {\n                 let mut err = make_invalid_casting_error(fcx.tcx.sess, self.span, self.expr_ty,\n                                                          self.cast_ty, fcx);\n-                if self.cast_ty.is_uint() {\n+                if self.cast_ty.is_integral() {\n                     err.help(&format!(\"cast through {} first\",\n                                       match e {\n                                           CastError::NeedViaPtr => \"a raw pointer\","}, {"sha": "b3c2b23cd3272fdca6b4a38c14f1523fa1bc2869", "filename": "src/test/ui/fat-ptr-cast.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9599066dcbff6b78c97fed816cf183e1577acff2/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9599066dcbff6b78c97fed816cf183e1577acff2/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffat-ptr-cast.stderr?ref=9599066dcbff6b78c97fed816cf183e1577acff2", "patch": "@@ -11,18 +11,24 @@ error[E0606]: casting `&[i32]` as `isize` is invalid\n    |\n 21 |     a as isize; //~ ERROR casting\n    |     ^^^^^^^^^^\n+   |\n+   = help: cast through a raw pointer first\n \n error[E0606]: casting `&[i32]` as `i16` is invalid\n   --> $DIR/fat-ptr-cast.rs:22:5\n    |\n 22 |     a as i16; //~ ERROR casting `&[i32]` as `i16` is invalid\n    |     ^^^^^^^^\n+   |\n+   = help: cast through a raw pointer first\n \n error[E0606]: casting `&[i32]` as `u32` is invalid\n   --> $DIR/fat-ptr-cast.rs:23:5\n    |\n 23 |     a as u32; //~ ERROR casting `&[i32]` as `u32` is invalid\n    |     ^^^^^^^^\n+   |\n+   = help: cast through a raw pointer first\n \n error[E0605]: non-primitive cast: `std::boxed::Box<[i32]>` as `usize`\n   --> $DIR/fat-ptr-cast.rs:24:5"}]}