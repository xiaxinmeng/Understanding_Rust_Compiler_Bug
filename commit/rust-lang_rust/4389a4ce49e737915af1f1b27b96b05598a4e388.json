{"sha": "4389a4ce49e737915af1f1b27b96b05598a4e388", "node_id": "C_kwDOAAsO6NoAKDQzODlhNGNlNDllNzM3OTE1YWYxZjFiMjdiOTZiMDU1OThhNGUzODg", "commit": {"author": {"name": "Dom", "email": "dom@itsallbroken.com", "date": "2021-11-19T19:15:33Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-11-23T22:17:52Z"}, "message": "fix: do not wrap reference-style doc links\n\nPrevents wrap_comments from incorrectly wrapping reference-style doc\nlinks.", "tree": {"sha": "82a17a3c2372eba451074bf790cb99863b6e1aa8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82a17a3c2372eba451074bf790cb99863b6e1aa8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4389a4ce49e737915af1f1b27b96b05598a4e388", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4389a4ce49e737915af1f1b27b96b05598a4e388", "html_url": "https://github.com/rust-lang/rust/commit/4389a4ce49e737915af1f1b27b96b05598a4e388", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4389a4ce49e737915af1f1b27b96b05598a4e388/comments", "author": {"login": "domodwyer", "id": 9275968, "node_id": "MDQ6VXNlcjkyNzU5Njg=", "avatar_url": "https://avatars.githubusercontent.com/u/9275968?v=4", "gravatar_id": "", "url": "https://api.github.com/users/domodwyer", "html_url": "https://github.com/domodwyer", "followers_url": "https://api.github.com/users/domodwyer/followers", "following_url": "https://api.github.com/users/domodwyer/following{/other_user}", "gists_url": "https://api.github.com/users/domodwyer/gists{/gist_id}", "starred_url": "https://api.github.com/users/domodwyer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/domodwyer/subscriptions", "organizations_url": "https://api.github.com/users/domodwyer/orgs", "repos_url": "https://api.github.com/users/domodwyer/repos", "events_url": "https://api.github.com/users/domodwyer/events{/privacy}", "received_events_url": "https://api.github.com/users/domodwyer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "826eba8984690b7c23aab8604b6a85587bb93edb", "url": "https://api.github.com/repos/rust-lang/rust/commits/826eba8984690b7c23aab8604b6a85587bb93edb", "html_url": "https://github.com/rust-lang/rust/commit/826eba8984690b7c23aab8604b6a85587bb93edb"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "830d2b50aad82f9f6958253f24ec7c75cf199e9d", "filename": "src/comment.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4389a4ce49e737915af1f1b27b96b05598a4e388/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4389a4ce49e737915af1f1b27b96b05598a4e388/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=4389a4ce49e737915af1f1b27b96b05598a4e388", "patch": "@@ -3,6 +3,8 @@\n use std::{self, borrow::Cow, iter};\n \n use itertools::{multipeek, MultiPeek};\n+use lazy_static::lazy_static;\n+use regex::Regex;\n use rustc_span::Span;\n \n use crate::config::Config;\n@@ -15,6 +17,17 @@ use crate::utils::{\n };\n use crate::{ErrorKind, FormattingError};\n \n+lazy_static! {\n+    /// A regex matching reference doc links.\n+    ///\n+    /// ```markdown\n+    /// /// An [example].\n+    /// ///\n+    /// /// [example]: this::is::a::link\n+    /// ```\n+    static ref REFERENCE_LINK_URL: Regex = Regex::new(r\"^\\[.+\\]\\s?:\").unwrap();\n+}\n+\n fn is_custom_comment(comment: &str) -> bool {\n     if !comment.starts_with(\"//\") {\n         false\n@@ -842,7 +855,11 @@ fn trim_custom_comment_prefix(s: &str) -> String {\n /// Returns `true` if the given string MAY include URLs or alike.\n fn has_url(s: &str) -> bool {\n     // This function may return false positive, but should get its job done in most cases.\n-    s.contains(\"https://\") || s.contains(\"http://\") || s.contains(\"ftp://\") || s.contains(\"file://\")\n+    s.contains(\"https://\")\n+        || s.contains(\"http://\")\n+        || s.contains(\"ftp://\")\n+        || s.contains(\"file://\")\n+        || REFERENCE_LINK_URL.is_match(s)\n }\n \n /// Given the span, rewrite the missing comment inside it if available."}, {"sha": "6981a65808c900ab1ca33ba66c518cf6047f09f2", "filename": "tests/target/issue-5095.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4389a4ce49e737915af1f1b27b96b05598a4e388/tests%2Ftarget%2Fissue-5095.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4389a4ce49e737915af1f1b27b96b05598a4e388/tests%2Ftarget%2Fissue-5095.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-5095.rs?ref=4389a4ce49e737915af1f1b27b96b05598a4e388", "patch": "@@ -0,0 +1,27 @@\n+// rustfmt-wrap_comments: true\n+\n+pub mod a_long_name {\n+    pub mod b_long_name {\n+        pub mod c_long_name {\n+            pub mod d_long_name {\n+                pub mod e_long_name {\n+                    pub struct Bananas;\n+                    impl Bananas {\n+                        pub fn fantastic() {}\n+                    }\n+\n+                    pub mod f_long_name {\n+                        pub struct Apples;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+/// Check out [my other struct] ([`Bananas`]) and [the method it has].\n+///\n+/// [my other struct]: a_long_name::b_long_name::c_long_name::d_long_name::e_long_name::f_long_name::Apples\n+/// [`Bananas`]: a_long_name::b_long_name::c_long_name::d_long_name::e_long_name::Bananas::fantastic()\n+/// [the method it has]: a_long_name::b_long_name::c_long_name::d_long_name::e_long_name::Bananas::fantastic()\n+pub struct A;"}]}