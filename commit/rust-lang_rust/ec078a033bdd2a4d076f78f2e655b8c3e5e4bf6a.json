{"sha": "ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMDc4YTAzM2JkZDJhNGQwNzZmNzhmMmU2NTViOGMzZTVlNGJmNmE=", "commit": {"author": {"name": "Oliver 'ker' Schneider", "email": "rust19446194516@oli-obk.de", "date": "2015-06-07T17:50:13Z"}, "committer": {"name": "Oliver 'ker' Schneider", "email": "rust19446194516@oli-obk.de", "date": "2015-06-07T17:50:13Z"}, "message": "change some statics to constants", "tree": {"sha": "1ec3554c23443ccc25e44eb90efa4f176fe33df9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec3554c23443ccc25e44eb90efa4f176fe33df9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "html_url": "https://github.com/rust-lang/rust/commit/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/comments", "author": null, "committer": null, "parents": [{"sha": "2c8d75d655b7d0bf84178f464c47a79569a35f3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c8d75d655b7d0bf84178f464c47a79569a35f3c", "html_url": "https://github.com/rust-lang/rust/commit/2c8d75d655b7d0bf84178f464c47a79569a35f3c"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "4ee500faa22c49ed5ec31321db7e2c0e4507df7c", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "patch": "@@ -81,7 +81,7 @@ use core::raw::{TraitObject};\n #[lang = \"exchange_heap\"]\n #[unstable(feature = \"alloc\",\n            reason = \"may be renamed; uncertain about custom allocator design\")]\n-pub static HEAP: () = ();\n+pub const HEAP: () = ();\n \n /// A pointer type for heap allocation.\n ///"}, {"sha": "afcdb3efe8ea0152a4ab8ab1f1e86f960b5adf87", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "patch": "@@ -125,8 +125,8 @@ fn match_words <'a,'b>(a: &'a BitVec, b: &'b BitVec) -> (MatchWords<'a>, MatchWo\n     }\n }\n \n-static TRUE: bool = true;\n-static FALSE: bool = false;\n+const TRUE: &'static bool = &true;\n+const FALSE: &'static bool = &false;\n \n /// The bitvector type.\n ///\n@@ -172,9 +172,9 @@ impl Index<usize> for BitVec {\n     #[inline]\n     fn index(&self, i: usize) -> &bool {\n         if self.get(i).expect(\"index out of bounds\") {\n-            &TRUE\n+            TRUE\n         } else {\n-            &FALSE\n+            FALSE\n         }\n     }\n }"}, {"sha": "d4fecbfec9c717e6ef46d207a17ef19167da9f95", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "patch": "@@ -83,7 +83,7 @@ use borrow::{Cow, IntoCow};\n use super::range::RangeArgument;\n \n // FIXME- fix places which assume the max vector allowed has memory usize::MAX.\n-static MAX_MEMORY_SIZE: usize = isize::MAX as usize;\n+const MAX_MEMORY_SIZE: usize = isize::MAX as usize;\n \n /// A growable list type, written `Vec<T>` but pronounced 'vector.'\n ///"}, {"sha": "a11377893713d02a0610645beee045bbd4d0c1a3", "filename": "src/libcore/num/flt2dec/strategy/dragon.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fdragon.rs?ref=ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "patch": "@@ -24,7 +24,6 @@ use num::flt2dec::estimator::estimate_scaling_factor;\n use num::flt2dec::bignum::Digit32 as Digit;\n use num::flt2dec::bignum::Big32x36 as Big;\n \n-// FIXME(#22540) const ref to static array seems to ICE\n static POW10: [Digit; 10] = [1, 10, 100, 1000, 10000, 100000,\n                              1000000, 10000000, 100000000, 1000000000];\n static TWOPOW10: [Digit; 10] = [2, 20, 200, 2000, 20000, 200000,\n@@ -328,4 +327,3 @@ pub fn format_exact(d: &Decoded, buf: &mut [u8], limit: i16) -> (/*#digits*/ usi\n \n     (len, k)\n }\n-"}, {"sha": "54d3c92eca4666cd6334f4fffcc3a148266e80bf", "filename": "src/libcore/num/flt2dec/strategy/grisu.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fstrategy%2Fgrisu.rs?ref=ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "patch": "@@ -87,7 +87,7 @@ for i in xrange(-308, 333, 8):\n     f = ((f << 64 >> (l-1)) + 1) >> 1; e += l - 64\n     print '    (%#018x, %5d, %4d),' % (f, e, i)\n */\n-// FIXME(#22540) const ref to static array seems to ICE\n+\n #[doc(hidden)]\n pub static CACHED_POW10: [(u64, i16, i16); 81] = [ // (f, e, k)\n     (0xe61acf033d1a45df, -1087, -308),\n@@ -746,4 +746,3 @@ pub fn format_exact(d: &Decoded, buf: &mut [u8], limit: i16) -> (/*#digits*/ usi\n         None => fallback(d, buf, limit),\n     }\n }\n-"}, {"sha": "5d38a381e6b7e878dbc464ae3acd8e265599c86c", "filename": "src/liblog/directive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Fliblog%2Fdirective.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Fliblog%2Fdirective.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fdirective.rs?ref=ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "patch": "@@ -17,7 +17,7 @@ pub struct LogDirective {\n     pub level: u32,\n }\n \n-pub static LOG_LEVEL_NAMES: [&'static str; 4] = [\"ERROR\", \"WARN\", \"INFO\",\n+pub const LOG_LEVEL_NAMES: [&'static str; 4] = [\"ERROR\", \"WARN\", \"INFO\",\n                                                \"DEBUG\"];\n \n /// Parse an individual log level that is either a number or a symbolic log level"}, {"sha": "b6de4bf892cdfb658def734e365de8eaf9aa0bea", "filename": "src/librand/distributions/ziggurat_tables.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Fziggurat_tables.rs?ref=ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "patch": "@@ -12,7 +12,7 @@\n // algorithm. Autogenerated by `ziggurat_tables.py`.\n \n pub type ZigTable = &'static [f64; 257];\n-pub static ZIG_NORM_R: f64 = 3.654152885361008796;\n+pub const ZIG_NORM_R: f64 = 3.654152885361008796;\n pub static ZIG_NORM_X: [f64; 257] =\n     [3.910757959537090045, 3.654152885361008796, 3.449278298560964462, 3.320244733839166074,\n      3.224575052047029100, 3.147889289517149969, 3.083526132001233044, 3.027837791768635434,\n@@ -145,7 +145,7 @@ pub static ZIG_NORM_F: [f64; 257] =\n      0.887984660763399880, 0.898095921906304051, 0.908726440060562912, 0.919991505048360247,\n      0.932060075968990209, 0.945198953453078028, 0.959879091812415930, 0.977101701282731328,\n      1.000000000000000000];\n-pub static ZIG_EXP_R: f64 = 7.697117470131050077;\n+pub const ZIG_EXP_R: f64 = 7.697117470131050077;\n pub static ZIG_EXP_X: [f64; 257] =\n     [8.697117470131052741, 7.697117470131050077, 6.941033629377212577, 6.478378493832569696,\n      6.144164665772472667, 5.882144315795399869, 5.666410167454033697, 5.482890627526062488,"}, {"sha": "62dc8f77693987d17e10c0961129b281a8f04388", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "patch": "@@ -101,9 +101,8 @@ macro_rules! declare_lint {\n #[macro_export]\n macro_rules! lint_array { ($( $lint:expr ),*) => (\n     {\n-        #[allow(non_upper_case_globals)]\n-        static array: LintArray = &[ $( &$lint ),* ];\n-        array\n+        static ARRAY: LintArray = &[ $( &$lint ),* ];\n+        ARRAY\n     }\n ) }\n "}, {"sha": "b6ef9c88e156fc189373e65619fdc5410416a276", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "patch": "@@ -55,7 +55,7 @@ use visit_ast;\n \n /// A stable identifier to the particular version of JSON output.\n /// Increment this when the `Crate` and related structures change.\n-pub static SCHEMA_VERSION: &'static str = \"0.8.3\";\n+pub const SCHEMA_VERSION: &'static str = \"0.8.3\";\n \n mod inline;\n mod simplify;"}, {"sha": "36854db63a303ca21b28081e9816a69ecd5c8498", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "patch": "@@ -483,7 +483,7 @@ mod tests {\n \n     #[test]\n     fn multiple_connect_interleaved_greedy_schedule() {\n-        static MAX: usize = 10;\n+        const MAX: usize = 10;\n         each_ip(&mut |addr| {\n             let acceptor = t!(TcpListener::bind(&addr));\n \n@@ -890,7 +890,7 @@ mod tests {\n                               socket_addr, name, listener_inner);\n         assert_eq!(format!(\"{:?}\", listener), compare);\n \n-        let mut stream = t!(TcpStream::connect(&(\"localhost\",\n+        let stream = t!(TcpStream::connect(&(\"localhost\",\n                                                  socket_addr.port())));\n         let stream_inner = stream.0.socket().as_inner();\n         let compare = format!(\"TcpStream {{ addr: {:?}, \\"}, {"sha": "8f41646417367632637c6fa9798b39968ebee271", "filename": "src/libstd/sys/common/remutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fremutex.rs?ref=ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "patch": "@@ -187,7 +187,7 @@ mod tests {\n             assert_eq!(*lock.borrow(), 4950);\n         });\n         for i in 0..100 {\n-            let mut lock = m.lock().unwrap();\n+            let lock = m.lock().unwrap();\n             *lock.borrow_mut() += i;\n         }\n         drop(lock);"}, {"sha": "54b09d863a33aad15265b72a190f28bce7ff973d", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "patch": "@@ -200,9 +200,8 @@ pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt,\n             ident: name.clone(),\n             attrs: Vec::new(),\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::ItemStatic(\n+            node: ast::ItemConst(\n                 ty,\n-                ast::MutImmutable,\n                 expr,\n             ),\n             vis: ast::Public,"}, {"sha": "86e72d4ef03de4350d46ac4f95e49a01fcf65aaf", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=ec078a033bdd2a4d076f78f2e655b8c3e5e4bf6a", "patch": "@@ -452,6 +452,7 @@ impl<'a, 'b> Context<'a, 'b> {\n             Some(ecx.lifetime(sp, special_idents::static_lifetime.name)),\n             ast::MutImmutable);\n         let slice = ecx.expr_vec_slice(sp, pieces);\n+        // static instead of const to speed up codegen by not requiring this to be inlined\n         let st = ast::ItemStatic(ty, ast::MutImmutable, slice);\n \n         let name = ecx.ident_of(name);"}]}