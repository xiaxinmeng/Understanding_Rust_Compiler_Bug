{"sha": "8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2", "node_id": "C_kwDOAAsO6NoAKDhhM2FkNDk0MmNlYjAyYjdjNzE4MmZiNDViOGQwNjNiN2RiMjBhZTI", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-25T15:37:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-25T15:37:21Z"}, "message": "Rollup merge of #97351 - b-naber:adt-const-params-structural-match-violation, r=michaelwoerister\n\nOutput correct type responsible for structural match violation\n\nPreviously we included the outermost type that caused a structural match violation in the error message and stated that that type must be annotated with `#[derive(Eq, PartialEq)]` even if it already had that annotation. This PR outputs the correct type in the error message.\n\nFixes https://github.com/rust-lang/rust/issues/97278", "tree": {"sha": "473f7d746cc9dac8c0df0d782e7b3b37239a3f53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/473f7d746cc9dac8c0df0d782e7b3b37239a3f53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJijk0xCRBK7hj4Ov3rIwAAmwgIAAXevZPGmamVsB0x7KmSyOBt\nNyjEq3RUYHqrGQM79cny0ptDXwRQYQTEHQFByq5Pk8+8SBilAvSAyVEue6B0u5+a\nj1ptzn8N2/L+3qlNeleuI9knkxMcQJV6ZsYTEd6uenlXjj4RGe1THCpJqJR93Vsp\nQ4hKXZWOECnzRoyXUpg2/0sVsn46ROHcntwv9g2BvKseivb+xAJCjqt89B5C5IlL\nYBEtqPcv+hwU0PTDlO00crpfwi6gb6y45Nhzjhv9xzKeAaiUIxKtjo/T6KbVZGYN\n0uZK05f10X6RGUXip6WajNHudVl/lW8mfx/b+q4JtS3fzRQIfIA8PFbVDvKgFi8=\n=JsjL\n-----END PGP SIGNATURE-----\n", "payload": "tree 473f7d746cc9dac8c0df0d782e7b3b37239a3f53\nparent 006707834fc1001631a1c3851f70e4793a9bb370\nparent 86e8bbe4fdf547ad6bbc664282ba29f3ff4be5a6\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653493041 +0200\ncommitter GitHub <noreply@github.com> 1653493041 +0200\n\nRollup merge of #97351 - b-naber:adt-const-params-structural-match-violation, r=michaelwoerister\n\nOutput correct type responsible for structural match violation\n\nPreviously we included the outermost type that caused a structural match violation in the error message and stated that that type must be annotated with `#[derive(Eq, PartialEq)]` even if it already had that annotation. This PR outputs the correct type in the error message.\n\nFixes https://github.com/rust-lang/rust/issues/97278\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2", "html_url": "https://github.com/rust-lang/rust/commit/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "006707834fc1001631a1c3851f70e4793a9bb370", "url": "https://api.github.com/repos/rust-lang/rust/commits/006707834fc1001631a1c3851f70e4793a9bb370", "html_url": "https://github.com/rust-lang/rust/commit/006707834fc1001631a1c3851f70e4793a9bb370"}, {"sha": "86e8bbe4fdf547ad6bbc664282ba29f3ff4be5a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/86e8bbe4fdf547ad6bbc664282ba29f3ff4be5a6", "html_url": "https://github.com/rust-lang/rust/commit/86e8bbe4fdf547ad6bbc664282ba29f3ff4be5a6"}], "stats": {"total": 103, "additions": 73, "deletions": 30}, "files": [{"sha": "f694e009ab957c1ad8730734835d87891b9e07e6", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2", "patch": "@@ -121,27 +121,27 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n \n     fn search_for_structural_match_violation(&self, ty: Ty<'tcx>) -> Option<String> {\n         traits::search_for_structural_match_violation(self.span, self.tcx(), ty).map(|non_sm_ty| {\n-            with_no_trimmed_paths!(match non_sm_ty {\n-                traits::NonStructuralMatchTy::Adt(adt) => self.adt_derive_msg(adt),\n-                traits::NonStructuralMatchTy::Dynamic => {\n+            with_no_trimmed_paths!(match non_sm_ty.kind {\n+                traits::NonStructuralMatchTyKind::Adt(adt) => self.adt_derive_msg(adt),\n+                traits::NonStructuralMatchTyKind::Dynamic => {\n                     \"trait objects cannot be used in patterns\".to_string()\n                 }\n-                traits::NonStructuralMatchTy::Opaque => {\n+                traits::NonStructuralMatchTyKind::Opaque => {\n                     \"opaque types cannot be used in patterns\".to_string()\n                 }\n-                traits::NonStructuralMatchTy::Closure => {\n+                traits::NonStructuralMatchTyKind::Closure => {\n                     \"closures cannot be used in patterns\".to_string()\n                 }\n-                traits::NonStructuralMatchTy::Generator => {\n+                traits::NonStructuralMatchTyKind::Generator => {\n                     \"generators cannot be used in patterns\".to_string()\n                 }\n-                traits::NonStructuralMatchTy::Param => {\n+                traits::NonStructuralMatchTyKind::Param => {\n                     bug!(\"use of a constant whose type is a parameter inside a pattern\")\n                 }\n-                traits::NonStructuralMatchTy::Projection => {\n+                traits::NonStructuralMatchTyKind::Projection => {\n                     bug!(\"use of a constant whose type is a projection inside a pattern\")\n                 }\n-                traits::NonStructuralMatchTy::Foreign => {\n+                traits::NonStructuralMatchTyKind::Foreign => {\n                     bug!(\"use of a value of a foreign type inside a pattern\")\n                 }\n             })"}, {"sha": "dcfdff68640dd08d5f69b14b23c3929bdeaa6a02", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2", "patch": "@@ -62,7 +62,7 @@ pub use self::specialize::specialization_graph::FutureCompatOverlapError;\n pub use self::specialize::specialization_graph::FutureCompatOverlapErrorKind;\n pub use self::specialize::{specialization_graph, translate_substs, OverlapError};\n pub use self::structural_match::search_for_structural_match_violation;\n-pub use self::structural_match::NonStructuralMatchTy;\n+pub use self::structural_match::{NonStructuralMatchTy, NonStructuralMatchTyKind};\n pub use self::util::{\n     elaborate_obligations, elaborate_predicates, elaborate_predicates_with_span,\n     elaborate_trait_ref, elaborate_trait_refs,"}, {"sha": "5465395768c6bad831576e9d2d8a3562a185df6a", "filename": "compiler/rustc_trait_selection/src/traits/structural_match.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fstructural_match.rs?ref=8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2", "patch": "@@ -11,7 +11,13 @@ use rustc_span::Span;\n use std::ops::ControlFlow;\n \n #[derive(Debug)]\n-pub enum NonStructuralMatchTy<'tcx> {\n+pub struct NonStructuralMatchTy<'tcx> {\n+    pub ty: Ty<'tcx>,\n+    pub kind: NonStructuralMatchTyKind<'tcx>,\n+}\n+\n+#[derive(Debug)]\n+pub enum NonStructuralMatchTyKind<'tcx> {\n     Adt(AdtDef<'tcx>),\n     Param,\n     Dynamic,\n@@ -137,25 +143,32 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n         let (adt_def, substs) = match *ty.kind() {\n             ty::Adt(adt_def, substs) => (adt_def, substs),\n             ty::Param(_) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Param);\n+                let kind = NonStructuralMatchTyKind::Param;\n+                return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n             ty::Dynamic(..) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Dynamic);\n+                let kind = NonStructuralMatchTyKind::Dynamic;\n+                return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n             ty::Foreign(_) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Foreign);\n+                let kind = NonStructuralMatchTyKind::Foreign;\n+                return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n             ty::Opaque(..) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Opaque);\n+                let kind = NonStructuralMatchTyKind::Opaque;\n+                return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n             ty::Projection(..) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Projection);\n+                let kind = NonStructuralMatchTyKind::Projection;\n+                return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n             ty::Closure(..) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Closure);\n+                let kind = NonStructuralMatchTyKind::Closure;\n+                return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n             ty::Generator(..) | ty::GeneratorWitness(..) => {\n-                return ControlFlow::Break(NonStructuralMatchTy::Generator);\n+                let kind = NonStructuralMatchTyKind::Generator;\n+                return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n             }\n             ty::RawPtr(..) => {\n                 // structural-match ignores substructure of\n@@ -215,7 +228,8 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n \n         if !self.type_marked_structural(ty) {\n             debug!(\"Search found ty: {:?}\", ty);\n-            return ControlFlow::Break(NonStructuralMatchTy::Adt(adt_def));\n+            let kind = NonStructuralMatchTyKind::Adt(adt_def);\n+            return ControlFlow::Break(NonStructuralMatchTy { ty, kind });\n         }\n \n         // structural-match does not care about the"}, {"sha": "5c0c5b24ecd996398a548da82d7e9fd3b2d7cdbf", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2", "patch": "@@ -827,7 +827,9 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                     );\n                 }\n \n-                if traits::search_for_structural_match_violation(param.span, tcx, ty).is_some() {\n+                if let Some(non_structural_match_ty) =\n+                    traits::search_for_structural_match_violation(param.span, tcx, ty)\n+                {\n                     // We use the same error code in both branches, because this is really the same\n                     // issue: we just special-case the message for type parameters to make it\n                     // clearer.\n@@ -853,19 +855,23 @@ fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n                         )\n                         .emit();\n                     } else {\n-                        struct_span_err!(\n+                        let mut diag = struct_span_err!(\n                             tcx.sess,\n                             hir_ty.span,\n                             E0741,\n                             \"`{}` must be annotated with `#[derive(PartialEq, Eq)]` to be used as \\\n                             the type of a const parameter\",\n-                            ty,\n-                        )\n-                        .span_label(\n-                            hir_ty.span,\n-                            format!(\"`{ty}` doesn't derive both `PartialEq` and `Eq`\"),\n-                        )\n-                        .emit();\n+                            non_structural_match_ty.ty,\n+                        );\n+\n+                        if ty == non_structural_match_ty.ty {\n+                            diag.span_label(\n+                                hir_ty.span,\n+                                format!(\"`{ty}` doesn't derive both `PartialEq` and `Eq`\"),\n+                            );\n+                        }\n+\n+                        diag.emit();\n                     }\n                 }\n             } else {"}, {"sha": "16fabd1e88fd0848a5c744c1b22ab390d691b69c", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.full.stderr?ref=8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2", "patch": "@@ -1,8 +1,8 @@\n-error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+error[E0741]: `(dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n   --> $DIR/issue-63322-forbid-dyn.rs:9:18\n    |\n LL | fn test<const T: &'static dyn A>() {\n-   |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`\n+   |                  ^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "da0a9776fd40f976c87a823519a619a363a7aa4a", "filename": "src/test/ui/const-generics/issues/issue-97278.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.rs?ref=8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2", "patch": "@@ -0,0 +1,14 @@\n+#![feature(adt_const_params)]\n+#![allow(incomplete_features)]\n+\n+use std::sync::Arc;\n+\n+#[derive(PartialEq, Eq)]\n+enum Bar {\n+    Bar(Arc<i32>)\n+}\n+\n+fn test<const BAR: Bar>() {}\n+//~^ ERROR `Arc<i32>` must be annotated with `#[derive(PartialEq, Eq)]`\n+\n+fn main() {}"}, {"sha": "ff13cb505ab9b302892096d5d5e27b20a5d1d105", "filename": "src/test/ui/const-generics/issues/issue-97278.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-97278.stderr?ref=8a3ad4942ceb02b7c7182fb45b8d063b7db20ae2", "patch": "@@ -0,0 +1,9 @@\n+error[E0741]: `Arc<i32>` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+  --> $DIR/issue-97278.rs:11:20\n+   |\n+LL | fn test<const BAR: Bar>() {}\n+   |                    ^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0741`."}]}