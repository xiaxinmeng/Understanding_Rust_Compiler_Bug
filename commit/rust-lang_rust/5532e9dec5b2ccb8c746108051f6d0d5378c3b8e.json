{"sha": "5532e9dec5b2ccb8c746108051f6d0d5378c3b8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MzJlOWRlYzViMmNjYjhjNzQ2MTA4MDUxZjZkMGQ1Mzc4YzNiOGU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-08-07T17:50:19Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-08-14T16:38:57Z"}, "message": "Improved how upvars are detected when presenting errors using prefixes.", "tree": {"sha": "eec3d05bfa15ec665994ace8bb56b25263e2ca58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eec3d05bfa15ec665994ace8bb56b25263e2ca58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAltzBaEACgkQAXYLT59T\n8VSY0BAAt3ia4ifvf3/FUdE7XpHZ3cOpaltZ8Z7FyvWsIIGGsxyGRfnnYMZyhJMr\n8tdhOvwLWCgPDUw1X2Eb7MLWZntM9wQ5S2vC2a6e5IfLGP5+McmWSc8Vy5Y8gRPR\nOJSOvVixyUZnFwI9aHfnBu5Op0/znNjH4grlcSB0lS8SU1hK6SQZ/HJyv/u+urPf\nyeerXJgqT2Tx82gD8b0f7roVMMasU0ns22bWiLHC+PBJWWA7FkCZggnLeMTvOa5O\no94Zyf62nVwsiATp9qabb85iVOQFkml7PNh07sRNAMcuDIYIgGunjLPvzIrkM3mh\nzlsPf6N3N7f5X6MfU/fGaH58XhlNUtW7papNiVfrfgC8TAhFaO0Tk1iur8Dp9rlW\ndzvvxJp5KB6nbKi9Yhmg1LUQz1dLmI+3cQFyqMFOMkbgAWsefMUnVjKKkQSh5D0N\n1nbfAZFqCUrOtdQ1UO3rsCbhBqxbRxSd5SoCTMErVVgxGcgzc+t8WXplo+Ti6MBy\nL3bFokvmKLsMesu0zAOP29LsI0VNIAuo2fE8/XDvFX8k6P/qx6XxuS1G5/655Dy1\nraKBy1iaJX371WWBXh2t6LtNoU5INfoncLX8fkUAIFyRmB9vqSUVRliyk4l6YfFE\n35pMd3iJ0DJuUBh5tX0iMLFke2ADXroLZSmc2ggPcx2WbGGmiNM=\n=wzaB\n-----END PGP SIGNATURE-----", "payload": "tree eec3d05bfa15ec665994ace8bb56b25263e2ca58\nparent 2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b\nauthor David Wood <david@davidtw.co> 1533664219 +0200\ncommitter David Wood <david@davidtw.co> 1534264737 +0200\n\nImproved how upvars are detected when presenting errors using prefixes.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e", "html_url": "https://github.com/rust-lang/rust/commit/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b", "html_url": "https://github.com/rust-lang/rust/commit/2c6b0e5cf7d07cee4b26732c162b5835ab5aa53b"}], "stats": {"total": 95, "additions": 68, "deletions": 27}, "files": [{"sha": "5991845d265b24a8ce86842d5f10d6d0e34a7dab", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=5532e9dec5b2ccb8c746108051f6d0d5378c3b8e", "patch": "@@ -151,25 +151,10 @@ impl<'tcx> Place<'tcx> {\n                     }\n                 },\n                 _ => None,\n-            },\n+            }\f\n             _ => None,\n         }\n     }\n-\n-    /// Strip the deref projections from a `Place`. For example, given `(*(*((*_1).0: &&T)))`, this\n-    /// will return `((*_1).0)`. Once stripped of any deref projections, places can then be\n-    /// checked as upvar field projections using `is_upvar_field_projection`.\n-    pub fn strip_deref_projections(&self) -> &Place<'tcx> {\n-        let mut current = self;\n-        while let Place::Projection(ref proj) = current {\n-            if let ProjectionElem::Deref = proj.elem {\n-                current = &proj.base;\n-            } else {\n-                break;\n-            }\n-        }\n-        current\n-    }\n }\n \n pub enum RvalueInitializationState {"}, {"sha": "d3524e841b223d93d3b927a149ce006a84d5efdb", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=5532e9dec5b2ccb8c746108051f6d0d5378c3b8e", "patch": "@@ -16,6 +16,7 @@ use rustc_data_structures::indexed_vec::Idx;\n use syntax_pos::Span;\n \n use borrow_check::MirBorrowckCtxt;\n+use borrow_check::prefixes::PrefixSet;\n use dataflow::move_paths::{IllegalMoveOrigin, IllegalMoveOriginKind};\n use dataflow::move_paths::{LookupResult, MoveError, MovePathIndex};\n use util::borrowck_errors::{BorrowckErrors, Origin};\n@@ -254,15 +255,16 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                         // borrow to provide feedback about why this\n                         // was a move rather than a copy.\n                         let ty = place.ty(self.mir, self.tcx).to_ty(self.tcx);\n+                        let is_upvar_field_projection =\n+                            self.prefixes(&original_path, PrefixSet::All)\n+                            .any(|p| p.is_upvar_field_projection(self.mir, &self.tcx)\n+                                 .is_some());\n                         match ty.sty {\n                             ty::TyArray(..) | ty::TySlice(..) => self\n                                 .tcx\n                                 .cannot_move_out_of_interior_noncopy(span, ty, None, origin),\n                             ty::TyClosure(def_id, closure_substs)\n-                                if !self.mir.upvar_decls.is_empty() &&\n-                                    original_path.strip_deref_projections()\n-                                        .is_upvar_field_projection(self.mir, &self.tcx)\n-                                        .is_some()\n+                                if !self.mir.upvar_decls.is_empty() && is_upvar_field_projection\n                             => {\n                                 let closure_kind_ty =\n                                     closure_substs.closure_kind_ty(def_id, self.tcx);\n@@ -286,13 +288,18 @@ impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n                                 let mut diag = self.tcx.cannot_move_out_of(\n                                     span, place_description, origin);\n \n-                                if let Some(field) = original_path.is_upvar_field_projection(\n-                                        self.mir, &self.tcx) {\n-                                    let upvar_decl = &self.mir.upvar_decls[field.index()];\n-                                    let upvar_hir_id = upvar_decl.var_hir_id.assert_crate_local();\n-                                    let upvar_node_id = self.tcx.hir.hir_to_node_id(upvar_hir_id);\n-                                    let upvar_span = self.tcx.hir.span(upvar_node_id);\n-                                    diag.span_label(upvar_span, \"captured outer variable\");\n+                                for prefix in self.prefixes(&original_path, PrefixSet::All) {\n+                                    if let Some(field) = prefix.is_upvar_field_projection(\n+                                            self.mir, &self.tcx) {\n+                                        let upvar_decl = &self.mir.upvar_decls[field.index()];\n+                                        let upvar_hir_id =\n+                                            upvar_decl.var_hir_id.assert_crate_local();\n+                                        let upvar_node_id =\n+                                            self.tcx.hir.hir_to_node_id(upvar_hir_id);\n+                                        let upvar_span = self.tcx.hir.span(upvar_node_id);\n+                                        diag.span_label(upvar_span, \"captured outer variable\");\n+                                        break;\n+                                    }\n                                 }\n \n                                 diag"}, {"sha": "9f56b26648b2ac9de625c77df93d3b03f0610ff5", "filename": "src/test/ui/borrowck/borrowck-move-by-capture.nll.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-by-capture.nll.stderr?ref=5532e9dec5b2ccb8c746108051f6d0d5378c3b8e", "patch": "@@ -1,6 +1,9 @@\n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/borrowck-move-by-capture.rs:19:29\n    |\n+LL |     let bar: Box<_> = box 3;\n+   |         --- captured outer variable\n+LL |     let _g = to_fn_mut(|| {\n LL |         let _h = to_fn_once(move || -> isize { *bar }); //~ ERROR cannot move out of\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of captured variable in an `FnMut` closure\n "}, {"sha": "a9345e86f724817652892986419e26b313268195", "filename": "src/test/ui/issues/issue-4335.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Ftest%2Fui%2Fissues%2Fissue-4335.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Ftest%2Fui%2Fissues%2Fissue-4335.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4335.nll.stderr?ref=5532e9dec5b2ccb8c746108051f6d0d5378c3b8e", "patch": "@@ -1,6 +1,8 @@\n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/issue-4335.rs:16:20\n    |\n+LL | fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n+   |             - captured outer variable\n LL |     id(Box::new(|| *v))\n    |                    ^^ cannot move out of captured variable in an `FnMut` closure\n "}, {"sha": "13a6fc15ce3185b7ebbbd5093d018c515fad9293", "filename": "src/test/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr?ref=5532e9dec5b2ccb8c746108051f6d0d5378c3b8e", "patch": "@@ -1,6 +1,8 @@\n error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/moves-based-on-type-move-out-of-closure-env-issue-1965.rs:21:28\n    |\n+LL |     let i = box 3;\n+   |         - captured outer variable\n LL |     let _f = to_fn(|| test(i)); //~ ERROR cannot move out\n    |                            ^ cannot move out of captured variable in an `Fn` closure\n "}, {"sha": "dc40b0c44fd02b34b164916cf4031dcd70d06630", "filename": "src/test/ui/nll/issue-52663-span-decl-captured-variable.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.rs?ref=5532e9dec5b2ccb8c746108051f6d0d5378c3b8e", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+fn expect_fn<F>(f: F) where F : Fn() {\n+    f();\n+}\n+\n+fn main() {\n+   {\n+       let x = (vec![22], vec![44]);\n+       expect_fn(|| drop(x.0));\n+       //~^ ERROR cannot move out of captured variable in an `Fn` closure [E0507]\n+   }\n+}"}, {"sha": "51f19565855a7364022bdbad5e659faa15d4fd33", "filename": "src/test/ui/nll/issue-52663-span-decl-captured-variable.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52663-span-decl-captured-variable.stderr?ref=5532e9dec5b2ccb8c746108051f6d0d5378c3b8e", "patch": "@@ -0,0 +1,11 @@\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n+  --> $DIR/issue-52663-span-decl-captured-variable.rs:20:26\n+   |\n+LL |        let x = (vec![22], vec![44]);\n+   |            - captured outer variable\n+LL |        expect_fn(|| drop(x.0));\n+   |                          ^^^ cannot move out of captured variable in an `Fn` closure\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "4baa54e34c75532750ffba07c939ae627e9639c8", "filename": "src/test/ui/unboxed-closures/unboxed-closure-illegal-move.nll.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5532e9dec5b2ccb8c746108051f6d0d5378c3b8e/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.nll.stderr?ref=5532e9dec5b2ccb8c746108051f6d0d5378c3b8e", "patch": "@@ -1,24 +1,32 @@\n error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:25:31\n    |\n+LL |         let x = Box::new(0);\n+   |             - captured outer variable\n LL |         let f = to_fn(|| drop(x)); //~ ERROR cannot move\n    |                               ^ cannot move out of captured variable in an `Fn` closure\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:29:35\n    |\n+LL |         let x = Box::new(0);\n+   |             - captured outer variable\n LL |         let f = to_fn_mut(|| drop(x)); //~ ERROR cannot move\n    |                                   ^ cannot move out of captured variable in an `FnMut` closure\n \n error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:38:36\n    |\n+LL |         let x = Box::new(0);\n+   |             - captured outer variable\n LL |         let f = to_fn(move || drop(x)); //~ ERROR cannot move\n    |                                    ^ cannot move out of captured variable in an `Fn` closure\n \n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:42:40\n    |\n+LL |         let x = Box::new(0);\n+   |             - captured outer variable\n LL |         let f = to_fn_mut(move || drop(x)); //~ ERROR cannot move\n    |                                        ^ cannot move out of captured variable in an `FnMut` closure\n "}]}