{"sha": "e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYzRmZmQ0YWE5YTRlYzM5NTQ3YzRhNWE5NzE1MTczZDRhNWY0M2Q=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-09-07T10:21:52Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2019-09-09T03:43:39Z"}, "message": "Use diagnostic item for", "tree": {"sha": "b7ac6acbf5100759700583541fe949e6cc4db466", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7ac6acbf5100759700583541fe949e6cc4db466"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d", "html_url": "https://github.com/rust-lang/rust/commit/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4a48edbebd088ac9ca9c4cb51bbc5a5d745b9ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4a48edbebd088ac9ca9c4cb51bbc5a5d745b9ca", "html_url": "https://github.com/rust-lang/rust/commit/d4a48edbebd088ac9ca9c4cb51bbc5a5d745b9ca"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "faf6a55fbb05f0c1505ee009ed757e61d98de619", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d", "patch": "@@ -11,7 +11,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n // use rustc::middle::region::CodeExtent;\n use crate::consts::{constant, Constant};\n use crate::utils::usage::mutated_variables;\n-use crate::utils::{sext, sugg};\n+use crate::utils::{sext, sugg, is_type_diagnostic_item};\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::cmt_;\n use rustc::middle::mem_categorization::Categorization;\n@@ -23,7 +23,7 @@ use std::iter::{once, Iterator};\n use std::mem;\n use syntax::ast;\n use syntax::source_map::Span;\n-use syntax_pos::BytePos;\n+use syntax_pos::{BytePos, Symbol};\n \n use crate::utils::paths;\n use crate::utils::{\n@@ -795,7 +795,7 @@ fn is_slice_like<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'_>) -> bool {\n         _ => false,\n     };\n \n-    is_slice || match_type(cx, ty, &paths::VEC) || match_type(cx, ty, &paths::VEC_DEQUE)\n+    is_slice || is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) || match_type(cx, ty, &paths::VEC_DEQUE)\n }\n \n fn get_fixed_offset_var<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &Expr, var: HirId) -> Option<FixedOffsetVar> {\n@@ -1950,7 +1950,7 @@ fn is_ref_iterable_type(cx: &LateContext<'_, '_>, e: &Expr) -> bool {\n     // will allow further borrows afterwards\n     let ty = cx.tables.expr_ty(e);\n     is_iterable_array(ty, cx) ||\n-    match_type(cx, ty, &paths::VEC) ||\n+    is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) ||\n     match_type(cx, ty, &paths::LINKED_LIST) ||\n     match_type(cx, ty, &paths::HASHMAP) ||\n     match_type(cx, ty, &paths::HASHSET) ||"}, {"sha": "a4904483c24e9ff7adc1ed3df6d614f8ece29eff", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d", "patch": "@@ -16,18 +16,17 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast;\n use syntax::source_map::Span;\n-use syntax::symbol::{sym, LocalInternedString};\n+use syntax::symbol::{sym, Symbol, LocalInternedString};\n \n-use crate::utils::sugg;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{\n     get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, in_macro, is_copy,\n-    is_ctor_function, is_expn_of, iter_input_pats, last_path_segment, match_def_path, match_qpath, match_trait_method,\n-    match_type, match_var, method_calls, method_chain_args, remove_blocks, return_ty, same_tys, single_segment_path,\n-    snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n+    is_ctor_function, is_expn_of, is_type_diagnostic_item, iter_input_pats, last_path_segment, match_def_path,\n+    match_qpath, match_trait_method, match_type, match_var, method_calls, method_chain_args, remove_blocks,\n+    return_ty, same_tys, single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite,\n+    span_lint, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth,\n+    SpanlessEq, sugg, paths, span_help_and_lint\n };\n-use crate::utils::{paths, span_help_and_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `.unwrap()` calls on `Option`s.\n@@ -1765,7 +1764,7 @@ fn lint_cstring_as_ptr(cx: &LateContext<'_, '_>, expr: &hir::Expr, source: &hir:\n \n fn lint_iter_cloned_collect<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Expr, iter_args: &'tcx [hir::Expr]) {\n     if_chain! {\n-        if match_type(cx, cx.tables.expr_ty(expr), &paths::VEC);\n+        if is_type_diagnostic_item(cx, cx.tables.expr_ty(expr), Symbol::intern(\"vec_type\"));\n         if let Some(slice) = derefs_to_slice(cx, &iter_args[0], cx.tables.expr_ty(&iter_args[0]));\n         if let Some(to_replace) = expr.span.trim_start(slice.span.source_callsite());\n \n@@ -1875,7 +1874,7 @@ fn lint_iter_nth<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Expr, iter_ar\n     let mut_str = if is_mut { \"_mut\" } else { \"\" };\n     let caller_type = if derefs_to_slice(cx, &iter_args[0], cx.tables.expr_ty(&iter_args[0])).is_some() {\n         \"slice\"\n-    } else if match_type(cx, cx.tables.expr_ty(&iter_args[0]), &paths::VEC) {\n+    } else if is_type_diagnostic_item(cx, cx.tables.expr_ty(&iter_args[0]), Symbol::intern(\"vec_type\")) {\n         \"Vec\"\n     } else if match_type(cx, cx.tables.expr_ty(&iter_args[0]), &paths::VEC_DEQUE) {\n         \"VecDeque\"\n@@ -1908,7 +1907,7 @@ fn lint_get_unwrap<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &hir::Expr, get_a\n     let caller_type = if derefs_to_slice(cx, &get_args[0], expr_ty).is_some() {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"slice\"\n-    } else if match_type(cx, expr_ty, &paths::VEC) {\n+    } else if is_type_diagnostic_item(cx, expr_ty, Symbol::intern(\"vec_type\")) {\n         needs_ref = get_args_str.parse::<usize>().is_ok();\n         \"Vec\"\n     } else if match_type(cx, expr_ty, &paths::VEC_DEQUE) {"}, {"sha": "5fa160e2cd41be408e35750c58cf90dad128e79a", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d", "patch": "@@ -1,7 +1,7 @@\n use crate::utils::ptr::get_spans;\n use crate::utils::{\n     get_trait_def_id, implements_trait, is_copy, is_self, match_type, multispan_sugg, paths, snippet, snippet_opt,\n-    span_lint_and_then,\n+    span_lint_and_then, is_type_diagnostic_item,\n };\n use if_chain::if_chain;\n use matches::matches;\n@@ -19,7 +19,7 @@ use rustc_target::spec::abi::Abi;\n use std::borrow::Cow;\n use syntax::ast::Attribute;\n use syntax::errors::DiagnosticBuilder;\n-use syntax_pos::Span;\n+use syntax_pos::{Span, Symbol};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for functions taking arguments by value, but not\n@@ -221,7 +221,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n \n                         let deref_span = spans_need_deref.get(&canonical_id);\n                         if_chain! {\n-                            if match_type(cx, ty, &paths::VEC);\n+                            if is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\"));\n                             if let Some(clone_spans) =\n                                 get_spans(cx, Some(body.id()), idx, &[(\"clone\", \".to_owned()\")]);\n                             if let TyKind::Path(QPath::Resolved(_, ref path)) = input.node;"}, {"sha": "1d60460b5a9fa1044d9a70916f9dff8aafa02283", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d", "patch": "@@ -1,7 +1,8 @@\n //! Checks for usage of  `&Vec[_]` and `&String`.\n \n use crate::utils::ptr::get_spans;\n-use crate::utils::{match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_then, walk_ptrs_hir_ty};\n+use crate::utils::{match_qpath, is_type_diagnostic_item, match_type, paths, snippet_opt, \n+                   span_lint, span_lint_and_then, walk_ptrs_hir_ty};\n use if_chain::if_chain;\n use rustc::hir::QPath;\n use rustc::hir::*;\n@@ -11,7 +12,7 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use std::borrow::Cow;\n use syntax::source_map::Span;\n-use syntax_pos::MultiSpan;\n+use syntax_pos::{MultiSpan, Symbol};\n \n declare_clippy_lint! {\n     /// **What it does:** This lint checks for function arguments of type `&String`\n@@ -148,7 +149,7 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: HirId, opt_body_id:\n \n     for (idx, (arg, ty)) in decl.inputs.iter().zip(fn_ty.inputs()).enumerate() {\n         if let ty::Ref(_, ty, MutImmutable) = ty.sty {\n-            if match_type(cx, ty, &paths::VEC) {\n+            if is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) {\n                 let mut ty_snippet = None;\n                 if_chain! {\n                     if let TyKind::Path(QPath::Resolved(_, ref path)) = walk_ptrs_hir_ty(arg).node;"}, {"sha": "a2c2a1c11860f35b8d8a81f2c261330fe1ac1e69", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d", "patch": "@@ -1,6 +1,7 @@\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n-    differing_macro_contexts, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty, SpanlessEq,\n+    differing_macro_contexts, match_type, is_type_diagnostic_item, paths, snippet,\n+    span_lint_and_then, walk_ptrs_ty, SpanlessEq,\n };\n use if_chain::if_chain;\n use matches::matches;\n@@ -9,6 +10,7 @@ use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty;\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n+use syntax_pos::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for manual swapping.\n@@ -107,7 +109,7 @@ fn check_manual_swap(cx: &LateContext<'_, '_>, block: &Block) {\n \n                                 if matches!(ty.sty, ty::Slice(_)) ||\n                                     matches!(ty.sty, ty::Array(_, _)) ||\n-                                    match_type(cx, ty, &paths::VEC) ||\n+                                    is_type_diagnostic_item(cx, ty, Symbol::intern(\"vec_type\")) ||\n                                     match_type(cx, ty, &paths::VEC_DEQUE) {\n                                         return Some((lhs1, idx1, idx2));\n                                 }"}, {"sha": "2e4128ccca632fed2e8d93cbbbc050007bd36161", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d", "patch": "@@ -18,7 +18,7 @@ use rustc_typeck::hir_ty_to_ty;\n use syntax::ast::{FloatTy, IntTy, LitIntType, LitKind, UintTy};\n use syntax::errors::DiagnosticBuilder;\n use syntax::source_map::Span;\n-use syntax::symbol::sym;\n+use syntax::symbol::{sym, Symbol};\n \n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n@@ -253,7 +253,7 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty, is_local: bool) {\n                         );\n                         return; // don't recurse into the type\n                     }\n-                } else if match_def_path(cx, def_id, &paths::VEC) {\n+                } else if cx.tcx.is_diagnostic_item(Symbol::intern(\"vec_type\"), def_id) {\n                     if_chain! {\n                         // Get the _ part of Vec<_>\n                         if let Some(ref last) = last_path_segment(qpath).args;"}, {"sha": "bcb443158397e2b36e7bc9b5f66c0a4e70541b33", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=e3c4ffd4aa9a4ec39547c4a5a9715173d4a5f43d", "patch": "@@ -130,6 +130,14 @@ pub fn match_type(cx: &LateContext<'_, '_>, ty: Ty<'_>, path: &[&str]) -> bool {\n     }\n }\n \n+/// Checks if the type is equal to a diagnostic item\n+pub fn is_type_diagnostic_item(cx: &LateContext<'_, '_>, ty: Ty<'_>, diag_item: Symbol) -> bool {\n+    match ty.sty {\n+        ty::Adt(adt, _) => cx.tcx.is_diagnostic_item(diag_item, adt.did),\n+        _ => false,\n+    }\n+}\n+\n /// Checks if the method call given in `expr` belongs to the given trait.\n pub fn match_trait_method(cx: &LateContext<'_, '_>, expr: &Expr, path: &[&str]) -> bool {\n     let def_id = cx.tables.type_dependent_def_id(expr.hir_id).unwrap();"}]}