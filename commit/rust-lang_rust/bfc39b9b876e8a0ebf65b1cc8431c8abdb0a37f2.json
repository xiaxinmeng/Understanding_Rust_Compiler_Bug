{"sha": "bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYzM5YjliODc2ZThhMGViZjY1YjFjYzg0MzFjOGFiZGIwYTM3ZjI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-08T01:19:13Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-05-01T22:10:57Z"}, "message": "Implement TypeRelation::consts\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "565459a7f59a5584ba5f88e676b114886bbf12b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/565459a7f59a5584ba5f88e676b114886bbf12b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2", "html_url": "https://github.com/rust-lang/rust/commit/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d71a1c8a4ac424a1d77fa94746ca3d7aa72335e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d71a1c8a4ac424a1d77fa94746ca3d7aa72335e", "html_url": "https://github.com/rust-lang/rust/commit/7d71a1c8a4ac424a1d77fa94746ca3d7aa72335e"}], "stats": {"total": 333, "additions": 315, "deletions": 18}, "files": [{"sha": "0fc13bdaee65ff137af229a3a2ea5c58db9a2a86", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2", "patch": "@@ -10,10 +10,11 @@ use crate::infer::canonical::{\n     OriginalQueryValues,\n };\n use crate::infer::InferCtxt;\n+use crate::mir::interpret::ConstValue;\n use std::sync::atomic::Ordering;\n use crate::ty::fold::{TypeFoldable, TypeFolder};\n use crate::ty::subst::Kind;\n-use crate::ty::{self, BoundVar, Lift, List, Ty, TyCtxt, TypeFlags};\n+use crate::ty::{self, BoundVar, InferConst, Lift, List, Ty, TyCtxt, TypeFlags};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -432,6 +433,54 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n             }\n         }\n     }\n+\n+    fn fold_const(&mut self, c: &'tcx ty::LazyConst<'tcx>) -> &'tcx ty::LazyConst<'tcx> {\n+        if let ty::LazyConst::Evaluated(ct) = c {\n+            match ct.val {\n+                ConstValue::Infer(InferConst::Var(vid)) => {\n+                    debug!(\"canonical: const var found with vid {:?}\", vid);\n+                    match self.infcx.unwrap().probe_const_var(vid) {\n+                        Ok(c) => {\n+                            debug!(\"(resolved to {:?})\", c);\n+                            return self.fold_const(c);\n+                        }\n+\n+                        // `ConstVar(vid)` is unresolved, track its universe index in the\n+                        // canonicalized result\n+                        Err(mut ui) => {\n+                            if !self.infcx.unwrap().tcx.sess.opts.debugging_opts.chalk {\n+                                // FIXME: perf problem described in #55921.\n+                                ui = ty::UniverseIndex::ROOT;\n+                            }\n+                            return self.canonicalize_const_var(\n+                                CanonicalVarInfo {\n+                                    kind: CanonicalVarKind::Const(ui)\n+                                },\n+                                c\n+                            );\n+                        }\n+                    }\n+                }\n+                ConstValue::Infer(InferConst::Fresh(_)) => {\n+                    bug!(\"encountered a fresh const during canonicalization\")\n+                }\n+                ConstValue::Infer(InferConst::Canonical(debruijn, _)) => {\n+                    if debruijn >= self.binder_index {\n+                        bug!(\"escaping bound type during canonicalization\")\n+                    } else {\n+                        return c;\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n+\n+        if c.type_flags().intersects(self.needs_canonical_flags) {\n+            c.super_fold_with(self)\n+        } else {\n+            c\n+        }\n+    }\n }\n \n impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n@@ -625,7 +674,7 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n     /// `ty_var`.\n     fn canonicalize_ty_var(&mut self, info: CanonicalVarInfo, ty_var: Ty<'tcx>) -> Ty<'tcx> {\n         let infcx = self.infcx.expect(\"encountered ty-var without infcx\");\n-        let bound_to = infcx.shallow_resolve(ty_var);\n+        let bound_to = infcx.shallow_resolve_type(ty_var);\n         if bound_to != ty_var {\n             self.fold_ty(bound_to)\n         } else {"}, {"sha": "203fd25c84280ae1b60e4ba2542fe0d7ad7391f3", "filename": "src/librustc/infer/combine.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcombine.rs?ref=bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2", "patch": "@@ -464,7 +464,7 @@ impl<'cx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx> for Generalizer<'cx, 'gcx, '\n \n         debug!(\"generalize: t={:?}\", t);\n \n-        // Check to see whether the type we are genealizing references\n+        // Check to see whether the type we are generalizing references\n         // any other type variable related to `vid` via\n         // subtyping. This is basically our \"occurs check\", preventing\n         // us from creating infinitely sized types.\n@@ -576,6 +576,32 @@ impl<'cx, 'gcx, 'tcx> TypeRelation<'cx, 'gcx, 'tcx> for Generalizer<'cx, 'gcx, '\n         // very descriptive origin for this region variable.\n         Ok(self.infcx.next_region_var_in_universe(MiscVariable(self.span), self.for_universe))\n     }\n+\n+    fn consts(\n+        &mut self,\n+        c: &'tcx ty::LazyConst<'tcx>,\n+        c2: &'tcx ty::LazyConst<'tcx>\n+    ) -> RelateResult<'tcx, &'tcx ty::LazyConst<'tcx>> {\n+        assert_eq!(c, c2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==\n+\n+        match c {\n+            LazyConst::Evaluated(ty::Const {\n+                val: ConstValue::Infer(InferConst::Var(vid)),\n+                ..\n+            }) => {\n+                let mut variable_table = self.infcx.const_unification_table.borrow_mut();\n+                match variable_table.probe(*vid).known() {\n+                    Some(u) => {\n+                        self.relate(&u, &u)\n+                    }\n+                    None => Ok(c),\n+                }\n+            }\n+            _ => {\n+                relate::super_relate_consts(self, c, c)\n+            }\n+        }\n+    }\n }\n \n pub trait RelateResultCompare<'tcx, T> {"}, {"sha": "e94996a0b99a3cd0976527f0d00d7eefc1efc588", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 45, "deletions": 3, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2", "patch": "@@ -1,12 +1,13 @@\n-use super::combine::{CombineFields, RelationDir};\n-use super::{Subtype};\n+use super::combine::{CombineFields, RelationDir, const_unification_error};\n+use super::Subtype;\n \n use crate::hir::def_id::DefId;\n \n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt, InferConst};\n use crate::ty::TyVar;\n use crate::ty::subst::SubstsRef;\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n+use crate::mir::interpret::ConstValue;\n \n /// Ensures `a` is made equal to `b`. Returns `a` on success.\n pub struct Equate<'combine, 'infcx: 'combine, 'gcx: 'infcx+'tcx, 'tcx: 'infcx> {\n@@ -100,6 +101,47 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         Ok(a)\n     }\n \n+    fn consts(\n+        &mut self,\n+        a: &'tcx ty::LazyConst<'tcx>,\n+        b: &'tcx ty::LazyConst<'tcx>,\n+    ) -> RelateResult<'tcx, &'tcx ty::LazyConst<'tcx>> {\n+        debug!(\"{}.consts({:?}, {:?})\", self.tag(), a, b);\n+        if a == b { return Ok(a); }\n+\n+        let infcx = self.fields.infcx;\n+        let a = infcx.const_unification_table.borrow_mut().replace_if_possible(a);\n+        let b = infcx.const_unification_table.borrow_mut().replace_if_possible(b);\n+        let a_is_expected = self.a_is_expected();\n+        if let (&ty::LazyConst::Evaluated(a_eval), &ty::LazyConst::Evaluated(b_eval)) = (a, b) {\n+            match (a_eval.val, b_eval.val) {\n+                (ConstValue::Infer(InferConst::Var(a_vid)),\n+                 ConstValue::Infer(InferConst::Var(b_vid))) => {\n+                    infcx.const_unification_table\n+                        .borrow_mut()\n+                        .unify_var_var(a_vid, b_vid)\n+                        .map_err(|e| const_unification_error(a_is_expected, e))?;\n+                    return Ok(a);\n+                }\n+\n+                (ConstValue::Infer(InferConst::Var(a_id)), _) => {\n+                    self.fields.infcx.unify_const_variable(a_is_expected, a_id, b)?;\n+                    return Ok(a);\n+                }\n+\n+                (_, ConstValue::Infer(InferConst::Var(b_id))) => {\n+                    self.fields.infcx.unify_const_variable(!a_is_expected, b_id, a)?;\n+                    return Ok(a);\n+                }\n+\n+                _ => {}\n+            }\n+        }\n+\n+        self.fields.infcx.super_combine_consts(self, a, b)?;\n+        Ok(a)\n+    }\n+\n     fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)\n                   -> RelateResult<'tcx, ty::Binder<T>>\n         where T: Relate<'tcx>"}, {"sha": "dde43d2072271ead492654ea2a31d062dc70d0ff", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2", "patch": "@@ -60,6 +60,19 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         Ok(self.fields.infcx.borrow_region_constraints().glb_regions(self.tcx(), origin, a, b))\n     }\n \n+    fn consts(\n+        &mut self,\n+        a: &'tcx ty::LazyConst<'tcx>,\n+        b: &'tcx ty::LazyConst<'tcx>,\n+    ) -> RelateResult<'tcx, &'tcx ty::LazyConst<'tcx>> {\n+        debug!(\"{}.consts({:?}, {:?})\", self.tag(), a, b);\n+        if a == b {\n+            return Ok(a);\n+        }\n+\n+        self.fields.infcx.super_combine_consts(self, a, b)\n+    }\n+\n     fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)\n                   -> RelateResult<'tcx, ty::Binder<T>>\n         where T: Relate<'tcx>"}, {"sha": "2a06886d94b68c3161ea29030bdce0dff677c35a", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2", "patch": "@@ -60,6 +60,19 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         Ok(self.fields.infcx.borrow_region_constraints().lub_regions(self.tcx(), origin, a, b))\n     }\n \n+    fn consts(\n+        &mut self,\n+        a: &'tcx ty::LazyConst<'tcx>,\n+        b: &'tcx ty::LazyConst<'tcx>,\n+    ) -> RelateResult<'tcx, &'tcx ty::LazyConst<'tcx>> {\n+        debug!(\"{}.consts({:?}, {:?})\", self.tag(), a, b);\n+        if a == b {\n+            return Ok(a);\n+        }\n+\n+        self.fields.infcx.super_combine_consts(self, a, b)\n+    }\n+\n     fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)\n                   -> RelateResult<'tcx, ty::Binder<T>>\n         where T: Relate<'tcx>"}, {"sha": "91a1e0a13bc2f125b1a2be926a5233cc3b30c14e", "filename": "src/librustc/infer/nll_relate/mod.rs", "status": "modified", "additions": 44, "deletions": 6, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fnll_relate%2Fmod.rs?ref=bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2", "patch": "@@ -27,7 +27,7 @@ use crate::ty::error::TypeError;\n use crate::ty::fold::{TypeFoldable, TypeVisitor};\n use crate::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use crate::ty::subst::Kind;\n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt, InferConst};\n use rustc_data_structures::fx::FxHashMap;\n use std::fmt::Debug;\n \n@@ -537,10 +537,10 @@ where\n     }\n \n     fn tys(&mut self, a: Ty<'tcx>, mut b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n-        let a = self.infcx.shallow_resolve(a);\n+        let a = self.infcx.shallow_resolve_type(a);\n \n         if !D::forbid_inference_vars() {\n-            b = self.infcx.shallow_resolve(b);\n+            b = self.infcx.shallow_resolve_type(b);\n         }\n \n         match (&a.sty, &b.sty) {\n@@ -608,6 +608,24 @@ where\n         Ok(a)\n     }\n \n+    fn consts(\n+        &mut self,\n+        a: &'tcx ty::LazyConst<'tcx>,\n+        b: &'tcx ty::LazyConst<'tcx>,\n+    ) -> RelateResult<'tcx, &'tcx ty::LazyConst<'tcx>> {\n+        if let ty::LazyConst::Evaluated(ty::Const {\n+            val: ConstValue::Infer(InferConst::Canonical(_, _)),\n+            ..\n+        }) = a {\n+            // FIXME(const_generics): I'm unsure how this branch should actually be handled,\n+            // so this is probably not correct.\n+            self.infcx.super_combine_consts(self, a, b)\n+        } else {\n+            debug!(\"consts(a={:?}, b={:?}, variance={:?})\", a, b, self.ambient_variance);\n+            relate::super_relate_consts(self, a, b)\n+        }\n+    }\n+\n     fn binders<T>(\n         &mut self,\n         a: &ty::Binder<T>,\n@@ -853,7 +871,7 @@ where\n     fn tys(&mut self, a: Ty<'tcx>, _: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n         use crate::infer::type_variable::TypeVariableValue;\n \n-        debug!(\"TypeGeneralizer::tys(a={:?})\", a,);\n+        debug!(\"TypeGeneralizer::tys(a={:?})\", a);\n \n         match a.sty {\n             ty::Infer(ty::TyVar(_)) | ty::Infer(ty::IntVar(_)) | ty::Infer(ty::FloatVar(_))\n@@ -934,7 +952,7 @@ where\n         a: ty::Region<'tcx>,\n         _: ty::Region<'tcx>,\n     ) -> RelateResult<'tcx, ty::Region<'tcx>> {\n-        debug!(\"TypeGeneralizer::regions(a={:?})\", a,);\n+        debug!(\"TypeGeneralizer::regions(a={:?})\", a);\n \n         if let ty::ReLateBound(debruijn, _) = a {\n             if *debruijn < self.first_free_index {\n@@ -963,6 +981,26 @@ where\n         Ok(replacement_region_vid)\n     }\n \n+    fn consts(\n+        &mut self,\n+        a: &'tcx ty::LazyConst<'tcx>,\n+        _: &'tcx ty::LazyConst<'tcx>,\n+    ) -> RelateResult<'tcx, &'tcx ty::LazyConst<'tcx>> {\n+        debug!(\"TypeGeneralizer::consts(a={:?})\", a);\n+\n+        if let ty::LazyConst::Evaluated(ty::Const {\n+            val: ConstValue::Infer(InferConst::Canonical(_, _)),\n+            ..\n+        }) = a {\n+            bug!(\n+                \"unexpected inference variable encountered in NLL generalization: {:?}\",\n+                a\n+            );\n+        } else {\n+            relate::super_relate_consts(self, a, a)\n+        }\n+    }\n+\n     fn binders<T>(\n         &mut self,\n         a: &ty::Binder<T>,\n@@ -971,7 +1009,7 @@ where\n     where\n         T: Relate<'tcx>,\n     {\n-        debug!(\"TypeGeneralizer::binders(a={:?})\", a,);\n+        debug!(\"TypeGeneralizer::binders(a={:?})\", a);\n \n         self.first_free_index.shift_in(1);\n         let result = self.relate(a.skip_binder(), a.skip_binder())?;"}, {"sha": "b285d59729110706964e151360e6e126a67a1a3b", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2", "patch": "@@ -1,11 +1,12 @@\n use super::SubregionOrigin;\n-use super::combine::{CombineFields, RelationDir};\n+use super::combine::{CombineFields, RelationDir, const_unification_error};\n \n use crate::traits::Obligation;\n-use crate::ty::{self, Ty, TyCtxt};\n+use crate::ty::{self, Ty, TyCtxt, InferConst};\n use crate::ty::TyVar;\n use crate::ty::fold::TypeFoldable;\n use crate::ty::relate::{Cause, Relate, RelateResult, TypeRelation};\n+use crate::mir::interpret::ConstValue;\n use std::mem;\n \n /// Ensures `a` is made a subtype of `b`. Returns `a` on success.\n@@ -133,6 +134,50 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         Ok(a)\n     }\n \n+    fn consts(\n+        &mut self,\n+        a: &'tcx ty::LazyConst<'tcx>,\n+        b: &'tcx ty::LazyConst<'tcx>,\n+    ) -> RelateResult<'tcx, &'tcx ty::LazyConst<'tcx>> {\n+        debug!(\"{}.consts({:?}, {:?})\", self.tag(), a, b);\n+        if a == b { return Ok(a); }\n+\n+        let infcx = self.fields.infcx;\n+        let a = infcx.const_unification_table.borrow_mut().replace_if_possible(a);\n+        let b = infcx.const_unification_table.borrow_mut().replace_if_possible(b);\n+\n+        // Consts can only be equal or unequal to each other: there's no subtyping\n+        // relation, so we're just going to perform equating here instead.\n+        let a_is_expected = self.a_is_expected();\n+        if let (&ty::LazyConst::Evaluated(a_eval), &ty::LazyConst::Evaluated(b_eval)) = (a, b) {\n+            match (a_eval.val, b_eval.val) {\n+                (ConstValue::Infer(InferConst::Var(a_vid)),\n+                 ConstValue::Infer(InferConst::Var(b_vid))) => {\n+                    infcx.const_unification_table\n+                        .borrow_mut()\n+                        .unify_var_var(a_vid, b_vid)\n+                        .map_err(|e| const_unification_error(a_is_expected, e))?;\n+                    return Ok(a);\n+                }\n+\n+                (ConstValue::Infer(InferConst::Var(a_id)), _) => {\n+                    self.fields.infcx.unify_const_variable(a_is_expected, a_id, b)?;\n+                    return Ok(a);\n+                }\n+\n+                (_, ConstValue::Infer(InferConst::Var(b_id))) => {\n+                    self.fields.infcx.unify_const_variable(!a_is_expected, b_id, a)?;\n+                    return Ok(a);\n+                }\n+\n+                _ => {}\n+            }\n+        }\n+\n+        self.fields.infcx.super_combine_consts(self, a, b)?;\n+        Ok(a)\n+    }\n+\n     fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)\n                   -> RelateResult<'tcx, ty::Binder<T>>\n         where T: Relate<'tcx>"}, {"sha": "fdc695610141009539e369452e7113a551ab8148", "filename": "src/librustc/ty/_match.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Fty%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc%2Fty%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2F_match.rs?ref=bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2", "patch": "@@ -1,6 +1,7 @@\n-use crate::ty::{self, Ty, TyCtxt};\n-use crate::ty::error::TypeError;\n+use crate::ty::{self, Ty, TyCtxt, InferConst};\n+use crate::ty::error::{TypeError, ConstError};\n use crate::ty::relate::{self, Relate, TypeRelation, RelateResult};\n+use crate::mir::interpret::ConstValue;\n \n /// A type \"A\" *matches* \"B\" if the fresh types in B could be\n /// substituted with values so as to make it equal to A. Matching is\n@@ -78,6 +79,35 @@ impl<'a, 'gcx, 'tcx> TypeRelation<'a, 'gcx, 'tcx> for Match<'a, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn consts(\n+        &mut self,\n+        a: &'tcx ty::LazyConst<'tcx>,\n+        b: &'tcx ty::LazyConst<'tcx>,\n+    ) -> RelateResult<'tcx, &'tcx ty::LazyConst<'tcx>> {\n+        debug!(\"{}.consts({:?}, {:?})\", self.tag(), a, b);\n+        if a == b {\n+            return Ok(a);\n+        }\n+\n+        if let (&ty::LazyConst::Evaluated(a_eval), &ty::LazyConst::Evaluated(b_eval)) = (a, b) {\n+            match (a_eval.val, b_eval.val) {\n+                (_, ConstValue::Infer(InferConst::Fresh(_))) => {\n+                    return Ok(a);\n+                }\n+\n+                (ConstValue::Infer(_), _) | (_, ConstValue::Infer(_)) => {\n+                    return Err(TypeError::ConstError(\n+                        ConstError::Mismatch(relate::expected_found(self, &a, &b))\n+                    ));\n+                }\n+\n+                _ => {}\n+            }\n+        }\n+\n+        relate::super_relate_consts(self, a, b)\n+    }\n+\n     fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)\n                   -> RelateResult<'tcx, ty::Binder<T>>\n         where T: Relate<'tcx>"}, {"sha": "7fc05308754065e8abfcb60c00e53df4a54fe2f6", "filename": "src/librustc_traits/chalk_context/resolvent_ops.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fresolvent_ops.rs?ref=bfc39b9b876e8a0ebf65b1cc8431c8abdb0a37f2", "patch": "@@ -16,9 +16,10 @@ use rustc::traits::{\n     Environment,\n     InEnvironment,\n };\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt, InferConst};\n use rustc::ty::subst::Kind;\n use rustc::ty::relate::{Relate, RelateResult, TypeRelation};\n+use rustc::mir::interpret::ConstValue;\n use syntax_pos::DUMMY_SP;\n \n use super::{ChalkInferenceContext, ChalkArenas, ChalkExClause, ConstrainedSubst};\n@@ -203,7 +204,7 @@ impl TypeRelation<'cx, 'gcx, 'tcx> for AnswerSubstitutor<'cx, 'gcx, 'tcx> {\n     }\n \n     fn tys(&mut self, a: Ty<'tcx>, b: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n-        let b = self.infcx.shallow_resolve(b);\n+        let b = self.infcx.shallow_resolve_type(b);\n         debug!(\"AnswerSubstitutor::tys(a = {:?}, b = {:?})\", a, b);\n \n         if let &ty::Bound(debruijn, bound_ty) = &a.sty {\n@@ -275,4 +276,44 @@ impl TypeRelation<'cx, 'gcx, 'tcx> for AnswerSubstitutor<'cx, 'gcx, 'tcx> {\n \n         Ok(a)\n     }\n+\n+    fn consts(\n+        &mut self,\n+        a: &'tcx ty::LazyConst<'tcx>,\n+        b: &'tcx ty::LazyConst<'tcx>,\n+    ) -> RelateResult<'tcx, &'tcx ty::LazyConst<'tcx>> {\n+        if let ty::LazyConst::Evaluated(ty::Const {\n+            val: ConstValue::Infer(InferConst::Canonical(debruijn, bound_ct)),\n+            ..\n+        }) = a {\n+            if *debruijn == self.binder_index {\n+                self.unify_free_answer_var(*bound_ct, b.into())?;\n+                return Ok(b);\n+            }\n+        }\n+\n+        match (a, b) {\n+            (\n+                ty::LazyConst::Evaluated(ty::Const {\n+                    val: ConstValue::Infer(InferConst::Canonical(a_debruijn, a_bound)),\n+                    ..\n+                }),\n+                ty::LazyConst::Evaluated(ty::Const {\n+                    val: ConstValue::Infer(InferConst::Canonical(b_debruijn, b_bound)),\n+                    ..\n+                }),\n+            ) => {\n+                assert_eq!(a_debruijn, b_debruijn);\n+                assert_eq!(a_bound, b_bound);\n+                Ok(a)\n+            }\n+\n+            // Everything else should just be a perfect match as well,\n+            // and we forbid inference variables.\n+            _ => match ty::relate::super_relate_consts(self, a, b) {\n+                Ok(ct) => Ok(ct),\n+                Err(err) => bug!(\"const mismatch in `AnswerSubstitutor`: {}\", err),\n+            }\n+        }\n+    }\n }"}]}