{"sha": "19c2286d5c0fe45765cb6bd182b32722173b0942", "node_id": "C_kwDOAAsO6NoAKDE5YzIyODZkNWMwZmU0NTc2NWNiNmJkMTgyYjMyNzIyMTczYjA5NDI", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-12-20T16:15:55Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2023-01-12T02:28:37Z"}, "message": "parse const closures", "tree": {"sha": "66beef1dd859028434f90f2dd3e210c9aca106e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66beef1dd859028434f90f2dd3e210c9aca106e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19c2286d5c0fe45765cb6bd182b32722173b0942", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19c2286d5c0fe45765cb6bd182b32722173b0942", "html_url": "https://github.com/rust-lang/rust/commit/19c2286d5c0fe45765cb6bd182b32722173b0942", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19c2286d5c0fe45765cb6bd182b32722173b0942/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c8aa3873f1c7177d532a6093da5e9836611ed4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c8aa3873f1c7177d532a6093da5e9836611ed4c", "html_url": "https://github.com/rust-lang/rust/commit/8c8aa3873f1c7177d532a6093da5e9836611ed4c"}], "stats": {"total": 20, "additions": 17, "deletions": 3}, "files": [{"sha": "8fd0fcf8f5c2c83ca8668700b0ec121e38d7953f", "filename": "src/closures.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/19c2286d5c0fe45765cb6bd182b32722173b0942/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c2286d5c0fe45765cb6bd182b32722173b0942/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=19c2286d5c0fe45765cb6bd182b32722173b0942", "patch": "@@ -26,6 +26,7 @@ use crate::utils::{last_line_width, left_most_sub_expr, stmt_expr, NodeIdExt};\n \n pub(crate) fn rewrite_closure(\n     binder: &ast::ClosureBinder,\n+    constness: ast::Const,\n     capture: ast::CaptureBy,\n     is_async: &ast::Async,\n     movability: ast::Movability,\n@@ -38,7 +39,7 @@ pub(crate) fn rewrite_closure(\n     debug!(\"rewrite_closure {:?}\", body);\n \n     let (prefix, extra_offset) = rewrite_closure_fn_decl(\n-        binder, capture, is_async, movability, fn_decl, body, span, context, shape,\n+        binder, constness, capture, is_async, movability, fn_decl, body, span, context, shape,\n     )?;\n     // 1 = space between `|...|` and body.\n     let body_shape = shape.offset_left(extra_offset)?;\n@@ -230,6 +231,7 @@ fn rewrite_closure_block(\n // Return type is (prefix, extra_offset)\n fn rewrite_closure_fn_decl(\n     binder: &ast::ClosureBinder,\n+    constness: ast::Const,\n     capture: ast::CaptureBy,\n     asyncness: &ast::Async,\n     movability: ast::Movability,\n@@ -250,6 +252,12 @@ fn rewrite_closure_fn_decl(\n         ast::ClosureBinder::NotPresent => \"\".to_owned(),\n     };\n \n+    let const_ = if matches!(constness, ast::Const::Yes(_)) {\n+        \"const \"\n+    } else {\n+        \"\"\n+    };\n+\n     let immovable = if movability == ast::Movability::Static {\n         \"static \"\n     } else {\n@@ -264,7 +272,7 @@ fn rewrite_closure_fn_decl(\n     // 4 = \"|| {\".len(), which is overconservative when the closure consists of\n     // a single expression.\n     let nested_shape = shape\n-        .shrink_left(binder.len() + immovable.len() + is_async.len() + mover.len())?\n+        .shrink_left(binder.len() + const_.len() + immovable.len() + is_async.len() + mover.len())?\n         .sub_width(4)?;\n \n     // 1 = |\n@@ -302,7 +310,10 @@ fn rewrite_closure_fn_decl(\n         .tactic(tactic)\n         .preserve_newline(true);\n     let list_str = write_list(&item_vec, &fmt)?;\n-    let mut prefix = format!(\"{}{}{}{}|{}|\", binder, immovable, is_async, mover, list_str);\n+    let mut prefix = format!(\n+        \"{}{}{}{}{}|{}|\",\n+        binder, const_, immovable, is_async, mover, list_str\n+    );\n \n     if !ret_str.is_empty() {\n         if prefix.contains('\\n') {\n@@ -329,6 +340,7 @@ pub(crate) fn rewrite_last_closure(\n     if let ast::ExprKind::Closure(ref closure) = expr.kind {\n         let ast::Closure {\n             ref binder,\n+            constness,\n             capture_clause,\n             ref asyncness,\n             movability,\n@@ -349,6 +361,7 @@ pub(crate) fn rewrite_last_closure(\n         };\n         let (prefix, extra_offset) = rewrite_closure_fn_decl(\n             binder,\n+            constness,\n             capture_clause,\n             asyncness,\n             movability,"}, {"sha": "868ff045ab78b2a5705100947217e26c693938e2", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19c2286d5c0fe45765cb6bd182b32722173b0942/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19c2286d5c0fe45765cb6bd182b32722173b0942/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=19c2286d5c0fe45765cb6bd182b32722173b0942", "patch": "@@ -205,6 +205,7 @@ pub(crate) fn format_expr(\n         }\n         ast::ExprKind::Closure(ref cl) => closures::rewrite_closure(\n             &cl.binder,\n+            cl.constness,\n             cl.capture_clause,\n             &cl.asyncness,\n             cl.movability,"}]}