{"sha": "7107b4eff51e58aa1ae5e30b073b4d788b13a2cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMDdiNGVmZjUxZTU4YWExYWU1ZTMwYjA3M2I0ZDc4OGIxM2EyY2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-14T22:20:09Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-09-14T22:22:15Z"}, "message": "Have parser recognize static, self region.\n\nFixes a bug in methods that &self couldn't be referenced in the\nbody. Also fixes #2479.", "tree": {"sha": "c2a529a20d4ba0986ce75ac1e4234be46e77c820", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2a529a20d4ba0986ce75ac1e4234be46e77c820"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb", "html_url": "https://github.com/rust-lang/rust/commit/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34cece99cce373546d62aed06a7ec55d04aaa124", "url": "https://api.github.com/repos/rust-lang/rust/commits/34cece99cce373546d62aed06a7ec55d04aaa124", "html_url": "https://github.com/rust-lang/rust/commit/34cece99cce373546d62aed06a7ec55d04aaa124"}], "stats": {"total": 151, "additions": 92, "deletions": 59}, "files": [{"sha": "54c8acf7626599caee9a7d293bfd9ada2a7fab20", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=7107b4eff51e58aa1ae5e30b073b4d788b13a2cb", "patch": "@@ -1047,7 +1047,12 @@ impl prim_ty : cmp::Eq {\n type region = {id: node_id, node: region_};\n \n #[auto_serialize]\n-enum region_ { re_anon, re_named(ident) }\n+enum region_ {\n+    re_anon,\n+    re_static,\n+    re_self,\n+    re_named(ident)\n+}\n \n #[auto_serialize]\n enum ty_ {"}, {"sha": "fa506a062b4a020c2df87aaaa126d818a06747b3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7107b4eff51e58aa1ae5e30b073b4d788b13a2cb", "patch": "@@ -4,7 +4,7 @@ use result::Result;\n use either::{Either, Left, Right};\n use std::map::{HashMap, str_hash};\n use token::{can_begin_expr, is_ident, is_ident_or_path, is_plain_ident,\n-               INTERPOLATED};\n+            INTERPOLATED, special_idents};\n use codemap::{span,fss_none};\n use util::interner::interner;\n use ast_util::{spanned, respan, mk_sp, ident_to_path, operator_prec};\n@@ -51,7 +51,8 @@ use ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              pat_ident, pat_lit, pat_range, pat_rec, pat_region, pat_struct,\n              pat_tup, pat_uniq, pat_wild, path, private, proto, proto_bare,\n              proto_block, proto_box, proto_uniq, provided, public, pure_fn,\n-             purity, re_anon, re_named, region, rem, required, ret_style,\n+             purity, re_static, re_self, re_anon, re_named, region,\n+             rem, required, ret_style,\n              return_val, self_ty, shl, shr, stmt, stmt_decl, stmt_expr,\n              stmt_semi, struct_def, struct_field, struct_variant_kind,\n              subtract, sty_box, sty_by_ref, sty_region, sty_static, sty_uniq,\n@@ -432,8 +433,10 @@ impl parser {\n \n     fn region_from_name(s: Option<ident>) -> @region {\n         let r = match s {\n-          Some (id) => re_named(id),\n-          None => re_anon\n+            Some(id) if id == special_idents::static => ast::re_static,\n+            Some(id) if id == special_idents::self_ => re_self,\n+            Some(id) => re_named(id),\n+            None => re_anon\n         };\n \n         @{id: self.get_id(), node: r}\n@@ -614,7 +617,7 @@ impl parser {\n                 let name = self.parse_value_ident();\n                 self.bump();\n                 name\n-            } else { token::special_idents::invalid }\n+            } else { special_idents::invalid }\n         };\n \n         let t = self.parse_ty(false);\n@@ -2388,7 +2391,7 @@ impl parser {\n \n     fn is_self_ident() -> bool {\n         match self.token {\n-          token::IDENT(id, false) if id == token::special_idents::self_\n+          token::IDENT(id, false) if id == special_idents::self_\n             => true,\n           _ => false\n         }\n@@ -2603,7 +2606,7 @@ impl parser {\n \n         // This is a new-style impl declaration.\n         // XXX: clownshoes\n-        let ident = token::special_idents::clownshoes_extensions;\n+        let ident = special_idents::clownshoes_extensions;\n \n         // Parse the type.\n         let ty = self.parse_ty(false);\n@@ -3019,7 +3022,7 @@ impl parser {\n                 }\n \n                 (ast::anonymous,\n-                 token::special_idents::clownshoes_foreign_mod)\n+                 special_idents::clownshoes_foreign_mod)\n             }\n         };\n "}, {"sha": "a4e7d12bd21bc7a769e4beec41db274eed346543", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=7107b4eff51e58aa1ae5e30b073b4d788b13a2cb", "patch": "@@ -328,14 +328,24 @@ fn print_foreign_mod(s: ps, nmod: ast::foreign_mod,\n     for nmod.items.each |item| { print_foreign_item(s, item); }\n }\n \n-fn print_region(s: ps, region: @ast::region) {\n+fn print_region(s: ps, region: @ast::region, sep: ~str) {\n     match region.node {\n-      ast::re_anon => word_space(s, ~\"&\"),\n-      ast::re_named(name) => {\n-        word(s.s, ~\"&\");\n-        print_ident(s, name);\n-      }\n+        ast::re_anon => {\n+            word_space(s, ~\"&\");\n+            return;\n+        }\n+        ast::re_static => {\n+            word_space(s, ~\"&static\")\n+        }\n+        ast::re_self => {\n+            word_space(s, ~\"&self\")\n+        }\n+        ast::re_named(name) => {\n+            word(s.s, ~\"&\");\n+            print_ident(s, name);\n+        }\n     }\n+    word(s.s, sep);\n }\n \n fn print_type(s: ps, &&ty: @ast::ty) {\n@@ -362,11 +372,8 @@ fn print_type_ex(s: ps, &&ty: @ast::ty, print_colons: bool) {\n       }\n       ast::ty_ptr(mt) => { word(s.s, ~\"*\"); print_mt(s, mt); }\n       ast::ty_rptr(region, mt) => {\n-        match region.node {\n-          ast::re_anon => word(s.s, ~\"&\"),\n-          _ => { print_region(s, region); word(s.s, ~\"/\"); }\n-        }\n-        print_mt(s, mt);\n+          print_region(s, region, ~\"/\");\n+          print_mt(s, mt);\n       }\n       ast::ty_rec(fields) => {\n         word(s.s, ~\"{\");\n@@ -961,18 +968,11 @@ fn print_mac(s: ps, m: ast::mac) {\n \n fn print_vstore(s: ps, t: ast::vstore) {\n     match t {\n-      ast::vstore_fixed(Some(i)) => word(s.s, fmt!(\"%u\", i)),\n-      ast::vstore_fixed(None) => word(s.s, ~\"_\"),\n-      ast::vstore_uniq => word(s.s, ~\"~\"),\n-      ast::vstore_box => word(s.s, ~\"@\"),\n-      ast::vstore_slice(r) => match r.node {\n-        ast::re_anon => word(s.s, ~\"&\"),\n-        ast::re_named(name) => {\n-            word(s.s, ~\"&\");\n-            print_ident(s, name);\n-            word(s.s, ~\".\");\n-        }\n-      }\n+        ast::vstore_fixed(Some(i)) => word(s.s, fmt!(\"%u\", i)),\n+        ast::vstore_fixed(None) => word(s.s, ~\"_\"),\n+        ast::vstore_uniq => word(s.s, ~\"~\"),\n+        ast::vstore_box => word(s.s, ~\"@\"),\n+        ast::vstore_slice(r) => print_region(s, r, ~\"/\")\n     }\n }\n \n@@ -1455,7 +1455,7 @@ fn print_path(s: ps, &&path: @ast::path, colons_before_params: bool) {\n           None => { /* ok */ }\n           Some(r) => {\n             word(s.s, ~\"/\");\n-            print_region(s, r);\n+            print_region(s, r, ~\"\");\n           }\n         }\n "}, {"sha": "4e1e0decdefee95a0833bba92f54ab0cabb4fc49", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=7107b4eff51e58aa1ae5e30b073b4d788b13a2cb", "patch": "@@ -522,10 +522,10 @@ impl determine_rp_ctxt {\n     // that flag to false when we enter a method.\n     fn region_is_relevant(r: @ast::region) -> bool {\n         match r.node {\n+            ast::re_static => false,\n             ast::re_anon => self.anon_implies_rp,\n-            ast::re_named(id) => {\n-                id == syntax::parse::token::special_idents::self_\n-            }\n+            ast::re_self => true,\n+            ast::re_named(_) => false\n         }\n     }\n "}, {"sha": "620f3cad570fb8321527bc7a8fa57fa285f4c645", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=7107b4eff51e58aa1ae5e30b073b4d788b13a2cb", "patch": "@@ -73,8 +73,10 @@ fn ast_region_to_region<AC: ast_conv, RS: region_scope Copy Owned>(\n     self: AC, rscope: RS, span: span, a_r: @ast::region) -> ty::region {\n \n     let res = match a_r.node {\n-      ast::re_anon => rscope.anon_region(span),\n-      ast::re_named(id) => rscope.named_region(span, id)\n+        ast::re_static => Ok(ty::re_static),\n+        ast::re_anon => rscope.anon_region(span),\n+        ast::re_self => rscope.self_region(span),\n+        ast::re_named(id) => rscope.named_region(span, id)\n     };\n \n     get_region_reporting_err(self.tcx(), span, res)"}, {"sha": "48410cde449f52dc300f9728ac9da02a5c0ce4f5", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 25, "deletions": 12, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=7107b4eff51e58aa1ae5e30b073b4d788b13a2cb", "patch": "@@ -77,6 +77,7 @@ use syntax::ast::ty_i;\n use typeck::infer::{resolve_type, force_tvar};\n use result::{Result, Ok, Err};\n use syntax::print::pprust;\n+use syntax::parse::token::special_idents;\n \n use std::map::{str_hash, uint_hash};\n \n@@ -567,22 +568,34 @@ impl @fn_ctxt: ast_conv {\n     }\n }\n \n+impl @fn_ctxt {\n+    fn search_in_scope_regions(br: ty::bound_region)\n+        -> Result<ty::region, ~str>\n+    {\n+        match self.in_scope_regions.find(br) {\n+            Some(r) => result::Ok(r),\n+            None => {\n+                let blk_br = ty::br_named(special_idents::blk);\n+                if br == blk_br {\n+                    result::Ok(self.block_region())\n+                } else {\n+                    result::Err(fmt!(\"named region `%s` not in scope here\",\n+                                     bound_region_to_str(self.tcx(), br)))\n+                }\n+            }\n+        }\n+    }\n+}\n+\n impl @fn_ctxt: region_scope {\n     fn anon_region(span: span) -> Result<ty::region, ~str> {\n         result::Ok(self.infcx().next_region_var_nb(span))\n     }\n-    fn named_region(span: span, id: ast::ident) -> Result<ty::region, ~str> {\n-        do empty_rscope.named_region(span, id).chain_err |_e| {\n-            match self.in_scope_regions.find(ty::br_named(id)) {\n-              Some(r) => result::Ok(r),\n-              None if id == syntax::parse::token::special_idents::blk\n-                  => result::Ok(self.block_region()),\n-              None => {\n-                result::Err(fmt!(\"named region `%s` not in scope here\",\n-                                 self.ccx.tcx.sess.str_of(id)))\n-              }\n-            }\n-        }\n+    fn self_region(_span: span) -> Result<ty::region, ~str> {\n+        self.search_in_scope_regions(ty::br_self)\n+    }\n+    fn named_region(_span: span, id: ast::ident) -> Result<ty::region, ~str> {\n+        self.search_in_scope_regions(ty::br_named(id))\n     }\n }\n "}, {"sha": "9b9695088f3796e984c836ec83d2fe175afc088d", "filename": "src/rustc/middle/typeck/rscope.rs", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7107b4eff51e58aa1ae5e30b073b4d788b13a2cb/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=7107b4eff51e58aa1ae5e30b073b4d788b13a2cb", "patch": "@@ -3,6 +3,7 @@ use syntax::parse::token::special_idents;\n \n trait region_scope {\n     fn anon_region(span: span) -> Result<ty::region, ~str>;\n+    fn self_region(span: span) -> Result<ty::region, ~str>;\n     fn named_region(span: span, id: ast::ident) -> Result<ty::region, ~str>;\n }\n \n@@ -11,9 +12,13 @@ impl empty_rscope: region_scope {\n     fn anon_region(_span: span) -> Result<ty::region, ~str> {\n         result::Ok(ty::re_static)\n     }\n-    fn named_region(_span: span, id: ast::ident) -> Result<ty::region, ~str> {\n-        if id == special_idents::static { result::Ok(ty::re_static) }\n-        else { result::Err(~\"only the static region is allowed here\") }\n+    fn self_region(_span: span) -> Result<ty::region, ~str> {\n+        result::Err(~\"only the static region is allowed here\")\n+    }\n+    fn named_region(_span: span, _id: ast::ident)\n+        -> Result<ty::region, ~str>\n+    {\n+        result::Err(~\"only the static region is allowed here\")\n     }\n }\n \n@@ -26,14 +31,13 @@ impl type_rscope: region_scope {\n                                 type must be declared with a region bound\")\n         }\n     }\n+    fn self_region(span: span) -> Result<ty::region, ~str> {\n+        self.anon_region(span)\n+    }\n     fn named_region(span: span, id: ast::ident) -> Result<ty::region, ~str> {\n         do empty_rscope.named_region(span, id).chain_err |_e| {\n-            if id == special_idents::self_ {\n-                self.anon_region(span)\n-            } else {\n-                result::Err(~\"named regions other than `self` are not \\\n-                             allowed as part of a type declaration\")\n-            }\n+            result::Err(~\"named regions other than `self` are not \\\n+                          allowed as part of a type declaration\")\n         }\n     }\n }\n@@ -54,6 +58,9 @@ impl @anon_rscope: region_scope {\n     fn anon_region(_span: span) -> Result<ty::region, ~str> {\n         result::Ok(self.anon)\n     }\n+    fn self_region(span: span) -> Result<ty::region, ~str> {\n+        self.base.self_region(span)\n+    }\n     fn named_region(span: span, id: ast::ident) -> Result<ty::region, ~str> {\n         self.base.named_region(span, id)\n     }\n@@ -74,6 +81,9 @@ impl @binding_rscope: region_scope {\n         self.anon_bindings += 1;\n         result::Ok(ty::re_bound(ty::br_anon(idx)))\n     }\n+    fn self_region(span: span) -> Result<ty::region, ~str> {\n+        self.base.self_region(span)\n+    }\n     fn named_region(span: span, id: ast::ident) -> Result<ty::region, ~str> {\n         do self.base.named_region(span, id).chain_err |_e| {\n             result::Ok(ty::re_bound(ty::br_named(id)))"}]}