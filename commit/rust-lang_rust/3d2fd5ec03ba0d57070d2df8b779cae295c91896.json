{"sha": "3d2fd5ec03ba0d57070d2df8b779cae295c91896", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMmZkNWVjMDNiYTBkNTcwNzBkMmRmOGI3NzljYWUyOTVjOTE4OTY=", "commit": {"author": {"name": "Kevin Walter", "email": "kevin.walter.private@googlemail.com", "date": "2014-07-11T19:51:29Z"}, "committer": {"name": "Kevin Walter", "email": "kevin.walter.private@googlemail.com", "date": "2014-07-11T20:28:52Z"}, "message": "rustdoc: render 1-tuples as (T,) instead of (T)", "tree": {"sha": "3ca5401c2bb6f3a1806eb814f2937a45623b44f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ca5401c2bb6f3a1806eb814f2937a45623b44f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d2fd5ec03ba0d57070d2df8b779cae295c91896", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d2fd5ec03ba0d57070d2df8b779cae295c91896", "html_url": "https://github.com/rust-lang/rust/commit/3d2fd5ec03ba0d57070d2df8b779cae295c91896", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d2fd5ec03ba0d57070d2df8b779cae295c91896/comments", "author": {"login": "lucidd", "id": 688888, "node_id": "MDQ6VXNlcjY4ODg4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/688888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucidd", "html_url": "https://github.com/lucidd", "followers_url": "https://api.github.com/users/lucidd/followers", "following_url": "https://api.github.com/users/lucidd/following{/other_user}", "gists_url": "https://api.github.com/users/lucidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucidd/subscriptions", "organizations_url": "https://api.github.com/users/lucidd/orgs", "repos_url": "https://api.github.com/users/lucidd/repos", "events_url": "https://api.github.com/users/lucidd/events{/privacy}", "received_events_url": "https://api.github.com/users/lucidd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lucidd", "id": 688888, "node_id": "MDQ6VXNlcjY4ODg4OA==", "avatar_url": "https://avatars.githubusercontent.com/u/688888?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lucidd", "html_url": "https://github.com/lucidd", "followers_url": "https://api.github.com/users/lucidd/followers", "following_url": "https://api.github.com/users/lucidd/following{/other_user}", "gists_url": "https://api.github.com/users/lucidd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lucidd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lucidd/subscriptions", "organizations_url": "https://api.github.com/users/lucidd/orgs", "repos_url": "https://api.github.com/users/lucidd/repos", "events_url": "https://api.github.com/users/lucidd/events{/privacy}", "received_events_url": "https://api.github.com/users/lucidd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aeab2501d1b2dabba567ee3d48270049087ee603", "url": "https://api.github.com/repos/rust-lang/rust/commits/aeab2501d1b2dabba567ee3d48270049087ee603", "html_url": "https://github.com/rust-lang/rust/commit/aeab2501d1b2dabba567ee3d48270049087ee603"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "f9b2fb50521d3241d346ce7ac5cf8f23bfbb83d9", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3d2fd5ec03ba0d57070d2df8b779cae295c91896/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d2fd5ec03ba0d57070d2df8b779cae295c91896/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3d2fd5ec03ba0d57070d2df8b779cae295c91896", "patch": "@@ -428,7 +428,10 @@ impl fmt::Show for clean::Type {\n             }\n             clean::Tuple(ref typs) => {\n                 primitive_link(f, clean::PrimitiveTuple,\n-                               format!(\"({:#})\", typs).as_slice())\n+                               match typs.as_slice() {\n+                                    [ref one] => format!(\"({},)\", one),\n+                                    many => format!(\"({:#})\", many)\n+                               }.as_slice())\n             }\n             clean::Vector(ref t) => {\n                 primitive_link(f, clean::Slice, format!(\"[{}]\", **t).as_slice())"}]}