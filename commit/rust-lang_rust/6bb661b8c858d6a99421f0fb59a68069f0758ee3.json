{"sha": "6bb661b8c858d6a99421f0fb59a68069f0758ee3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYjY2MWI4Yzg1OGQ2YTk5NDIxZjBmYjU5YTY4MDY5ZjA3NThlZTM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-12-01T20:07:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-01T20:07:11Z"}, "message": "Merge pull request #2254 from LaurentMazare/master\n\nAvoid the MATCH_SAME_ARMS warning when two arms are separated by an arm with a guard", "tree": {"sha": "dbeb922eec5a4d4e48e40ba825bf5f3181e0c086", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbeb922eec5a4d4e48e40ba825bf5f3181e0c086"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bb661b8c858d6a99421f0fb59a68069f0758ee3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaIbZvCRBK7hj4Ov3rIwAAdHIIAABfmY2kWy2EADA4R02ldoMU\nFsMIRoLkUkgWD3ryh19RxOhF86qZCxQQ4XdQVmHnY7XaFAAaudl58m0AHRbtitKl\nGLeYScFEhxbjPUE86CLoBYEqvgSdVXK9sCgq/aq6ijydQn7+KS/WE/7aE2Q14yLU\nrXISpFEgD3+QioVr2+hEvyhAhtewrBJy+bOFJkS7I5qIPmgkhoCnIVmSMplaZdsG\nenB2yI3K5iM5CGjHV7JNG4DBjgIm5ixpEAAA2LveiUhkdegHvLJZP9MxB9o5OjWz\nRDj2dqhSAFUUEsV0Isd0j2XPzGIZSc8zuAoWBtUWGFG/QWEqs6diBvKlpaWOmX8=\n=xccS\n-----END PGP SIGNATURE-----\n", "payload": "tree dbeb922eec5a4d4e48e40ba825bf5f3181e0c086\nparent 876d6d8c43b675bfb7875d772ff247807524efec\nparent 6c18811764ab951f7c6599daf623ddd856fa1c3b\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1512158831 +0100\ncommitter GitHub <noreply@github.com> 1512158831 +0100\n\nMerge pull request #2254 from LaurentMazare/master\n\nAvoid the MATCH_SAME_ARMS warning when two arms are separated by an arm with a guard"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb661b8c858d6a99421f0fb59a68069f0758ee3", "html_url": "https://github.com/rust-lang/rust/commit/6bb661b8c858d6a99421f0fb59a68069f0758ee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bb661b8c858d6a99421f0fb59a68069f0758ee3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "876d6d8c43b675bfb7875d772ff247807524efec", "url": "https://api.github.com/repos/rust-lang/rust/commits/876d6d8c43b675bfb7875d772ff247807524efec", "html_url": "https://github.com/rust-lang/rust/commit/876d6d8c43b675bfb7875d772ff247807524efec"}, {"sha": "6c18811764ab951f7c6599daf623ddd856fa1c3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c18811764ab951f7c6599daf623ddd856fa1c3b", "html_url": "https://github.com/rust-lang/rust/commit/6c18811764ab951f7c6599daf623ddd856fa1c3b"}], "stats": {"total": 52, "additions": 19, "deletions": 33}, "files": [{"sha": "181158a5f175b9ae86839ff8e6b5626ff283a540", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6bb661b8c858d6a99421f0fb59a68069f0758ee3/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb661b8c858d6a99421f0fb59a68069f0758ee3/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=6bb661b8c858d6a99421f0fb59a68069f0758ee3", "patch": "@@ -178,22 +178,26 @@ fn lint_same_cond(cx: &LateContext, conds: &[&Expr]) {\n \n /// Implementation if `MATCH_SAME_ARMS`.\n fn lint_match_arms(cx: &LateContext, expr: &Expr) {\n-    let hash = |arm: &Arm| -> u64 {\n-        let mut h = SpanlessHash::new(cx);\n-        h.hash_expr(&arm.body);\n-        h.finish()\n-    };\n+    if let ExprMatch(_, ref arms, MatchSource::Normal) = expr.node {\n+        let hash = |&(_, arm): &(usize, &Arm)| -> u64 {\n+            let mut h = SpanlessHash::new(cx);\n+            h.hash_expr(&arm.body);\n+            h.finish()\n+        };\n \n-    let eq = |lhs: &Arm, rhs: &Arm| -> bool {\n-        // Arms with a guard are ignored, those can\u2019t always be merged together\n-        lhs.guard.is_none() && rhs.guard.is_none() &&\n-            SpanlessEq::new(cx).eq_expr(&lhs.body, &rhs.body) &&\n-            // all patterns should have the same bindings\n-            bindings(cx, &lhs.pats[0]) == bindings(cx, &rhs.pats[0])\n-    };\n+        let eq = |&(lindex, lhs): &(usize, &Arm), &(rindex, rhs): &(usize, &Arm)| -> bool {\n+            let min_index = usize::min(lindex, rindex);\n+            let max_index = usize::max(lindex, rindex);\n+            // Arms with a guard are ignored, those can\u2019t always be merged together\n+            // This is also the case for arms in-between each there is an arm with a guard\n+            (min_index..=max_index).all(|index| arms[index].guard.is_none()) &&\n+                SpanlessEq::new(cx).eq_expr(&lhs.body, &rhs.body) &&\n+                // all patterns should have the same bindings\n+                bindings(cx, &lhs.pats[0]) == bindings(cx, &rhs.pats[0])\n+        };\n \n-    if let ExprMatch(_, ref arms, MatchSource::Normal) = expr.node {\n-        if let Some((i, j)) = search_same(arms, hash, eq) {\n+        let indexed_arms: Vec<(usize, &Arm)> = arms.iter().enumerate().collect();\n+        if let Some((&(_, i), &(_, j))) = search_same(&indexed_arms, hash, eq) {\n             span_lint_and_then(\n                 cx,\n                 MATCH_SAME_ARMS,"}, {"sha": "8130436d485d9f2ccd72cd78404d69f266076af0", "filename": "tests/ui/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bb661b8c858d6a99421f0fb59a68069f0758ee3/tests%2Fui%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bb661b8c858d6a99421f0fb59a68069f0758ee3/tests%2Fui%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.rs?ref=6bb661b8c858d6a99421f0fb59a68069f0758ee3", "patch": "@@ -285,7 +285,7 @@ fn match_wild_err_arm() {\n         Err(_) => println!(\"err\")\n     }\n \n-    // this is a current false positive, see #1996\n+    // this used to be a false positive, see #1996\n     match x {\n         Ok(3) => println!(\"ok\"),\n         Ok(x) if x*x == 64 => println!(\"ok 64\"),"}, {"sha": "8c0ec49e626bce386ca905076754887dc108112c", "filename": "tests/ui/matches.stderr", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6bb661b8c858d6a99421f0fb59a68069f0758ee3/tests%2Fui%2Fmatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6bb661b8c858d6a99421f0fb59a68069f0758ee3/tests%2Fui%2Fmatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmatches.stderr?ref=6bb661b8c858d6a99421f0fb59a68069f0758ee3", "patch": "@@ -390,24 +390,6 @@ note: consider refactoring into `Ok(3) | Ok(_)`\n     |                  ^^^^^^^^^^^^^^\n     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: this `match` has identical arm bodies\n-   --> $DIR/matches.rs:292:18\n-    |\n-292 |         Ok(_) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-    |\n-note: same as this\n-   --> $DIR/matches.rs:290:18\n-    |\n-290 |         Ok(3) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-note: consider refactoring into `Ok(3) | Ok(_)`\n-   --> $DIR/matches.rs:290:18\n-    |\n-290 |         Ok(3) => println!(\"ok\"),\n-    |                  ^^^^^^^^^^^^^^\n-    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n-\n error: this `match` has identical arm bodies\n    --> $DIR/matches.rs:298:29\n     |"}]}