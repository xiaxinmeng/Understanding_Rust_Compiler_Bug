{"sha": "16350526d8d8b514327c62b904d26f74937a1b23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MzUwNTI2ZDhkOGI1MTQzMjdjNjJiOTA0ZDI2Zjc0OTM3YTFiMjM=", "commit": {"author": {"name": "Jimmy Brush", "email": "code@jimmah.com", "date": "2018-02-08T12:48:16Z"}, "committer": {"name": "Jimmy Brush", "email": "code@jimmah.com", "date": "2018-02-14T03:10:26Z"}, "message": "pass correct pie args to gcc linker\n\nWhen linking with gcc, run gcc -v to see if --enable-default-pie is\ncompiled in. If it is, pass -no-pie when necessary to disable pie.\nOtherwise, pass -pie when necessary to enable it.\n\nFixes #48032 and fixes #35061", "tree": {"sha": "eb6019009c9ebd0daf4b6c516bf046e20fcd9b8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb6019009c9ebd0daf4b6c516bf046e20fcd9b8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16350526d8d8b514327c62b904d26f74937a1b23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEA1EtiBaDzGKsVzCxjAopB5kfVmQFAlqDqKIACgkQjAopB5kf\nVmRJmw//d2xmDaSUl+XDKBYDw+cyeaCOpxqXsdWKUX5Dk6yOXZBM9J6iHx2jkK8V\noIPc87N1w7h/DP8kbZa4YrrQ9Ix4dlNAj1AvVubCXMUt5ggkZUKi+MLOo3kXU5bu\nIVF3lN7RLt7kTDApznzPtXPwN929VZa4J26plMgLtdiOOYmFQ6T/NpLHt8fmP1vk\nWPrhldc12fCdgYyaMIpOSEWqz7EKa3Nw2tNb+F08Kulor+WtnqMwgZLY9in6bzcB\nxLo+hqNbAaLLBatA9bp52skbeUe5/v5AAXqN7Z2BLhD3L55dvUyK8KsemrGg1dhe\n4WJe+iVxUIPRh+4XzHSBo+tu87oaKEsA3irKhzLlwTHbaFiQs6BDzgRsTqg2xN7S\nvADEBJ1SgfJ3JKbTjpDXxa17mE3/3cBka3saxERTxLvnvDSL4LzKLESzbaah+/S0\nQIemIE9Md8jhFyikWhhFf/g1ciY3tfgBpyvH6WP+dD2NSwnOZYzUw3k7DbgD3/+5\nHmLgRPQI36ixve2fyd4chYmIGQaXDdo9P6Q3aWEbYNHfCv+9Bu35pI9dM9sls5vn\nzL5PFc9vLYetcYOganTmthBputDV2zi6778Ds+m/7f04ZYSu2cYivs9t5p7RxNHQ\naJV7oHCrrFbKld7vpXW4YLgIKH+sjFl3qwQKdp53zCWIG9rpK/o=\n=GVNJ\n-----END PGP SIGNATURE-----", "payload": "tree eb6019009c9ebd0daf4b6c516bf046e20fcd9b8f\nparent 4d2d3fc5dadf894a8ad709a5860a549f2c0b1032\nauthor Jimmy Brush <code@jimmah.com> 1518094096 -0500\ncommitter Jimmy Brush <code@jimmah.com> 1518577826 -0500\n\npass correct pie args to gcc linker\n\nWhen linking with gcc, run gcc -v to see if --enable-default-pie is\ncompiled in. If it is, pass -no-pie when necessary to disable pie.\nOtherwise, pass -pie when necessary to enable it.\n\nFixes #48032 and fixes #35061\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16350526d8d8b514327c62b904d26f74937a1b23", "html_url": "https://github.com/rust-lang/rust/commit/16350526d8d8b514327c62b904d26f74937a1b23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16350526d8d8b514327c62b904d26f74937a1b23/comments", "author": {"login": "canarysnort01", "id": 24806352, "node_id": "MDQ6VXNlcjI0ODA2MzUy", "avatar_url": "https://avatars.githubusercontent.com/u/24806352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canarysnort01", "html_url": "https://github.com/canarysnort01", "followers_url": "https://api.github.com/users/canarysnort01/followers", "following_url": "https://api.github.com/users/canarysnort01/following{/other_user}", "gists_url": "https://api.github.com/users/canarysnort01/gists{/gist_id}", "starred_url": "https://api.github.com/users/canarysnort01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canarysnort01/subscriptions", "organizations_url": "https://api.github.com/users/canarysnort01/orgs", "repos_url": "https://api.github.com/users/canarysnort01/repos", "events_url": "https://api.github.com/users/canarysnort01/events{/privacy}", "received_events_url": "https://api.github.com/users/canarysnort01/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canarysnort01", "id": 24806352, "node_id": "MDQ6VXNlcjI0ODA2MzUy", "avatar_url": "https://avatars.githubusercontent.com/u/24806352?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canarysnort01", "html_url": "https://github.com/canarysnort01", "followers_url": "https://api.github.com/users/canarysnort01/followers", "following_url": "https://api.github.com/users/canarysnort01/following{/other_user}", "gists_url": "https://api.github.com/users/canarysnort01/gists{/gist_id}", "starred_url": "https://api.github.com/users/canarysnort01/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canarysnort01/subscriptions", "organizations_url": "https://api.github.com/users/canarysnort01/orgs", "repos_url": "https://api.github.com/users/canarysnort01/repos", "events_url": "https://api.github.com/users/canarysnort01/events{/privacy}", "received_events_url": "https://api.github.com/users/canarysnort01/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032", "html_url": "https://github.com/rust-lang/rust/commit/4d2d3fc5dadf894a8ad709a5860a549f2c0b1032"}], "stats": {"total": 76, "additions": 66, "deletions": 10}, "files": [{"sha": "a84ac5cb8bc2f37653aa946286f6537ad43ff50a", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 56, "deletions": 10, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/16350526d8d8b514327c62b904d26f74937a1b23/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16350526d8d8b514327c62b904d26f74937a1b23/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=16350526d8d8b514327c62b904d26f74937a1b23", "patch": "@@ -897,16 +897,33 @@ fn link_args(cmd: &mut Linker,\n \n     let used_link_args = &trans.crate_info.link_args;\n \n-    if crate_type == config::CrateTypeExecutable &&\n-       t.options.position_independent_executables {\n-        let empty_vec = Vec::new();\n-        let args = sess.opts.cg.link_args.as_ref().unwrap_or(&empty_vec);\n-        let more_args = &sess.opts.cg.link_arg;\n-        let mut args = args.iter().chain(more_args.iter()).chain(used_link_args.iter());\n-\n-        if get_reloc_model(sess) == llvm::RelocMode::PIC\n-            && !sess.crt_static() && !args.any(|x| *x == \"-static\") {\n-            cmd.position_independent_executable();\n+    if crate_type == config::CrateTypeExecutable {\n+        let mut position_independent_executable = false;\n+\n+        if t.options.position_independent_executables {\n+            let empty_vec = Vec::new();\n+            let args = sess.opts.cg.link_args.as_ref().unwrap_or(&empty_vec);\n+            let more_args = &sess.opts.cg.link_arg;\n+            let mut args = args.iter().chain(more_args.iter()).chain(used_link_args.iter());\n+\n+            if get_reloc_model(sess) == llvm::RelocMode::PIC\n+                && !sess.crt_static() && !args.any(|x| *x == \"-static\") {\n+                position_independent_executable = true;\n+            }\n+        }\n+\n+        // Check to see if gcc defaults to generating a position independent\n+        // executable. If so, tell it when to disable pie. Otherwise, tell it\n+        // when to enable it. We can't do both because older versions of gcc\n+        // don't understand -no-pie and will blow up.\n+        if is_pie_default(sess) {\n+            if !position_independent_executable {\n+                cmd.no_position_independent_executable();\n+            }\n+        } else {\n+            if position_independent_executable {\n+                cmd.position_independent_executable();\n+            }\n         }\n     }\n \n@@ -1421,3 +1438,32 @@ fn is_full_lto_enabled(sess: &Session) -> bool {\n         Lto::ThinLocal => false,\n     }\n }\n+\n+fn is_pie_default(sess: &Session) -> bool {\n+    match sess.linker_flavor() {\n+        LinkerFlavor::Gcc => {\n+            let (_, mut cmd, envs) = get_linker(sess);\n+            // This will set PATH on windows\n+            cmd.envs(envs);\n+            cmd.arg(\"-v\");\n+\n+            info!(\"{:?}\", &cmd);\n+\n+            let output = cmd.command()\n+                .stdout(Stdio::piped()).stderr(Stdio::piped())\n+                .spawn()\n+                .unwrap()\n+                .wait_with_output()\n+                .unwrap();\n+\n+            let ret = String::from_utf8_lossy(&output.stderr)\n+                .contains(\"--enable-default-pie\");\n+\n+            info!(\"gcc {} compiled with --enable-default-pie\",\n+                  if ret { \"IS\" } else { \"is NOT\" });\n+\n+            ret\n+        },\n+        _ => false,\n+    }\n+}"}, {"sha": "7e7811c56c74e39f1b9a476a235637920476cda2", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/16350526d8d8b514327c62b904d26f74937a1b23/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16350526d8d8b514327c62b904d26f74937a1b23/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=16350526d8d8b514327c62b904d26f74937a1b23", "patch": "@@ -105,6 +105,7 @@ pub trait Linker {\n     fn add_object(&mut self, path: &Path);\n     fn gc_sections(&mut self, keep_metadata: bool);\n     fn position_independent_executable(&mut self);\n+    fn no_position_independent_executable(&mut self);\n     fn partial_relro(&mut self);\n     fn full_relro(&mut self);\n     fn optimize(&mut self);\n@@ -179,6 +180,7 @@ impl<'a> Linker for GccLinker<'a> {\n     fn output_filename(&mut self, path: &Path) { self.cmd.arg(\"-o\").arg(path); }\n     fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }\n     fn position_independent_executable(&mut self) { self.cmd.arg(\"-pie\"); }\n+    fn no_position_independent_executable(&mut self) { self.cmd.arg(\"-no-pie\"); }\n     fn partial_relro(&mut self) { self.linker_arg(\"-z,relro\"); }\n     fn full_relro(&mut self) { self.linker_arg(\"-z,relro,-z,now\"); }\n     fn build_static_executable(&mut self) { self.cmd.arg(\"-static\"); }\n@@ -439,6 +441,10 @@ impl<'a> Linker for MsvcLinker<'a> {\n         // noop\n     }\n \n+    fn no_position_independent_executable(&mut self) {\n+        // noop\n+    }\n+\n     fn partial_relro(&mut self) {\n         // noop\n     }\n@@ -647,6 +653,10 @@ impl<'a> Linker for EmLinker<'a> {\n         // noop\n     }\n \n+    fn no_position_independent_executable(&mut self) {\n+        // noop\n+    }\n+\n     fn partial_relro(&mut self) {\n         // noop\n     }"}]}