{"sha": "2f278c57ff4a805941f1497f34b3ad20b6f8e13b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMjc4YzU3ZmY0YTgwNTk0MWYxNDk3ZjM0YjNhZDIwYjZmOGUxM2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-26T10:17:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-05-26T10:17:51Z"}, "message": "Auto merge of #42083 - petrochenkov:safeassign, r=nikomatsakis\n\nMake assignments to `Copy` union fields safe\n\nThis is an accompanying PR to PR https://github.com/rust-lang/rust/pull/42068 stabilizing FFI unions.\n\nThis was first proposed in https://github.com/rust-lang/rust/issues/32836#issuecomment-281296416, see subsequent comments as well.\nAssignments to `Copy` union fields do not read any data from the union and are [equivalent](https://github.com/rust-lang/rust/issues/32836#issuecomment-281660298) to whole union assignments, which are safe, so they should be safe as well. This removes a significant number of \"false positive\" unsafe blocks, in code dealing with FFI unions in particular.\n\nIt desirable to make this change now, together with stabilization of FFI unions, because now it affecfts only unstable code, but later it will cause warnings/errors caused by `unused_unsafe` lint in stable code.\n\ncc #32836\nr? @nikomatsakis", "tree": {"sha": "90848c8b6a5e27747289b2b20b21f7daaaf60bfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90848c8b6a5e27747289b2b20b21f7daaaf60bfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f278c57ff4a805941f1497f34b3ad20b6f8e13b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f278c57ff4a805941f1497f34b3ad20b6f8e13b", "html_url": "https://github.com/rust-lang/rust/commit/2f278c57ff4a805941f1497f34b3ad20b6f8e13b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f278c57ff4a805941f1497f34b3ad20b6f8e13b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2db17c86e33ab89f8003960de08e3f1a3d23df8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2db17c86e33ab89f8003960de08e3f1a3d23df8a", "html_url": "https://github.com/rust-lang/rust/commit/2db17c86e33ab89f8003960de08e3f1a3d23df8a"}, {"sha": "fa13cd3489c09d2de6ae4b2d0d455c1cf3db82fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa13cd3489c09d2de6ae4b2d0d455c1cf3db82fc", "html_url": "https://github.com/rust-lang/rust/commit/fa13cd3489c09d2de6ae4b2d0d455c1cf3db82fc"}], "stats": {"total": 69, "additions": 62, "deletions": 7}, "files": [{"sha": "2261f296454ef75470a7f648ff1e6c665cc644ab", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2f278c57ff4a805941f1497f34b3ad20b6f8e13b/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f278c57ff4a805941f1497f34b3ad20b6f8e13b/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=2f278c57ff4a805941f1497f34b3ad20b6f8e13b", "patch": "@@ -52,6 +52,7 @@ fn type_is_unsafe_function(ty: Ty) -> bool {\n struct EffectCheckVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     tables: &'a ty::TypeckTables<'tcx>,\n+    body_id: hir::BodyId,\n \n     /// Whether we're in an unsafe context.\n     unsafe_context: UnsafeContext,\n@@ -99,10 +100,13 @@ impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> {\n \n     fn visit_nested_body(&mut self, body: hir::BodyId) {\n         let old_tables = self.tables;\n+        let old_body_id = self.body_id;\n         self.tables = self.tcx.body_tables(body);\n+        self.body_id = body;\n         let body = self.tcx.hir.body(body);\n         self.visit_body(body);\n         self.tables = old_tables;\n+        self.body_id = old_body_id;\n     }\n \n     fn visit_fn(&mut self, fn_kind: FnKind<'tcx>, fn_decl: &'tcx hir::FnDecl,\n@@ -218,6 +222,25 @@ impl<'a, 'tcx> Visitor<'tcx> for EffectCheckVisitor<'a, 'tcx> {\n                     }\n                 }\n             }\n+            hir::ExprAssign(ref lhs, ref rhs) => {\n+                if let hir::ExprField(ref base_expr, field) = lhs.node {\n+                    if let ty::TyAdt(adt, ..) = self.tables.expr_ty_adjusted(base_expr).sty {\n+                        if adt.is_union() {\n+                            let field_ty = self.tables.expr_ty_adjusted(lhs);\n+                            let owner_def_id = self.tcx.hir.body_owner_def_id(self.body_id);\n+                            let param_env = self.tcx.param_env(owner_def_id);\n+                            if field_ty.moves_by_default(self.tcx, param_env, field.span) {\n+                                self.require_unsafe(field.span,\n+                                                    \"assignment to non-`Copy` union field\");\n+                            }\n+                            // Do not walk the field expr again.\n+                            intravisit::walk_expr(self, base_expr);\n+                            intravisit::walk_expr(self, rhs);\n+                            return\n+                        }\n+                    }\n+                }\n+            }\n             _ => {}\n         }\n \n@@ -243,6 +266,7 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     let mut visitor = EffectCheckVisitor {\n         tcx: tcx,\n         tables: &ty::TypeckTables::empty(),\n+        body_id: hir::BodyId { node_id: ast::CRATE_NODE_ID },\n         unsafe_context: UnsafeContext::new(SafeContext),\n     };\n "}, {"sha": "2e018e696a4155b6c53a6b3885cf06782cec8bb6", "filename": "src/test/compile-fail/union/union-unsafe.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2f278c57ff4a805941f1497f34b3ad20b6f8e13b/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f278c57ff4a805941f1497f34b3ad20b6f8e13b/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs?ref=2f278c57ff4a805941f1497f34b3ad20b6f8e13b", "patch": "@@ -10,15 +10,46 @@\n \n #![feature(untagged_unions)]\n \n-union U {\n+union U1 {\n     a: u8\n }\n \n+union U2 {\n+    a: String\n+}\n+\n+union U3<T> {\n+    a: T\n+}\n+\n+union U4<T: Copy> {\n+    a: T\n+}\n+\n+fn generic_noncopy<T: Default>() {\n+    let mut u3 = U3 { a: T::default() };\n+    u3.a = T::default(); //~ ERROR assignment to non-`Copy` union field requires unsafe\n+}\n+\n+fn generic_copy<T: Copy + Default>() {\n+    let mut u3 = U3 { a: T::default() };\n+    u3.a = T::default(); // OK\n+    let mut u4 = U4 { a: T::default() };\n+    u4.a = T::default(); // OK\n+}\n+\n fn main() {\n-    let mut u = U { a: 10 }; // OK\n-    let a = u.a; //~ ERROR access to union field requires unsafe function or block\n-    u.a = 11; //~ ERROR access to union field requires unsafe function or block\n-    let U { a } = u; //~ ERROR matching on union field requires unsafe function or block\n-    if let U { a: 12 } = u {} //~ ERROR matching on union field requires unsafe function or block\n-    // let U { .. } = u; // OK\n+    let mut u1 = U1 { a: 10 }; // OK\n+    let a = u1.a; //~ ERROR access to union field requires unsafe\n+    u1.a = 11; // OK\n+    let U1 { a } = u1; //~ ERROR matching on union field requires unsafe\n+    if let U1 { a: 12 } = u1 {} //~ ERROR matching on union field requires unsafe\n+    // let U1 { .. } = u1; // OK\n+\n+    let mut u2 = U2 { a: String::from(\"old\") }; // OK\n+    u2.a = String::from(\"new\"); //~ ERROR assignment to non-`Copy` union field requires unsafe\n+    let mut u3 = U3 { a: 0 }; // OK\n+    u3.a = 1; // OK\n+    let mut u3 = U3 { a: String::from(\"old\") }; // OK\n+    u3.a = String::from(\"new\"); //~ ERROR assignment to non-`Copy` union field requires unsafe\n }"}]}