{"sha": "0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZDRjMWU3YmQwMTc4Y2E5MWVhMTNkZmFkNmVmYzRjY2U3MjgzMDI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-22T17:40:07Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-22T18:54:14Z"}, "message": "Remove a slew of old deprecated functions", "tree": {"sha": "4f6d876f7b2804f5c47f71c0d436c8b0134fe924", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f6d876f7b2804f5c47f71c0d436c8b0134fe924"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "html_url": "https://github.com/rust-lang/rust/commit/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "257a73ce8273d026f2af1a5021ae2d1a4e7b95e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/257a73ce8273d026f2af1a5021ae2d1a4e7b95e5", "html_url": "https://github.com/rust-lang/rust/commit/257a73ce8273d026f2af1a5021ae2d1a4e7b95e5"}], "stats": {"total": 246, "additions": 9, "deletions": 237}, "files": [{"sha": "c330d44dd964ca499f0815cf2a389f5163584fd1", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "patch": "@@ -13,7 +13,7 @@\n \n use std::cmp;\n use std::iter::RandomAccessIterator;\n-use std::iter::{Rev, Enumerate, Repeat, Map, Zip};\n+use std::iter::{Enumerate, Repeat, Map, Zip};\n use std::ops;\n use std::slice;\n use std::strbuf::StrBuf;\n@@ -466,12 +466,6 @@ impl Bitv {\n         Bits {bitv: self, next_idx: 0, end_idx: self.nbits}\n     }\n \n-    #[inline]\n-    #[deprecated = \"replaced by .iter().rev()\"]\n-    pub fn rev_iter<'a>(&'a self) -> Rev<Bits<'a>> {\n-        self.iter().rev()\n-    }\n-\n     /// Returns `true` if all bits are 0\n     pub fn none(&self) -> bool {\n       match self.rep {"}, {"sha": "c5fa8286f7db3c1cffdd489bd45d02e9f32d12a6", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "patch": "@@ -21,7 +21,6 @@\n // Backlinks over DList::prev are raw pointers that form a full chain in\n // the reverse direction.\n \n-use std::iter::Rev;\n use std::iter;\n use std::mem;\n use std::ptr;\n@@ -369,12 +368,6 @@ impl<T> DList<T> {\n         Items{nelem: self.len(), head: &self.list_head, tail: self.list_tail}\n     }\n \n-    #[inline]\n-    #[deprecated = \"replaced by .iter().rev()\"]\n-    pub fn rev_iter<'a>(&'a self) -> Rev<Items<'a, T>> {\n-        self.iter().rev()\n-    }\n-\n     /// Provide a forward iterator with mutable references\n     #[inline]\n     pub fn mut_iter<'a>(&'a mut self) -> MutItems<'a, T> {\n@@ -390,24 +383,12 @@ impl<T> DList<T> {\n         }\n     }\n \n-    #[inline]\n-    #[deprecated = \"replaced by .mut_iter().rev()\"]\n-    pub fn mut_rev_iter<'a>(&'a mut self) -> Rev<MutItems<'a, T>> {\n-        self.mut_iter().rev()\n-    }\n-\n \n     /// Consume the list into an iterator yielding elements by value\n     #[inline]\n     pub fn move_iter(self) -> MoveItems<T> {\n         MoveItems{list: self}\n     }\n-\n-    #[inline]\n-    #[deprecated = \"replaced by .move_iter().rev()\"]\n-    pub fn move_rev_iter(self) -> Rev<MoveItems<T>> {\n-        self.move_iter().rev()\n-    }\n }\n \n impl<T: TotalOrd> DList<T> {"}, {"sha": "f45c9685be58b9c19fd746f9dfe81946440e1a77", "filename": "src/libcollections/ringbuf.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibcollections%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibcollections%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fringbuf.rs?ref=0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "patch": "@@ -14,7 +14,7 @@\n //! collections::deque::Deque`.\n \n use std::cmp;\n-use std::iter::{Rev, RandomAccessIterator};\n+use std::iter::RandomAccessIterator;\n \n use deque::Deque;\n \n@@ -190,11 +190,6 @@ impl<T> RingBuf<T> {\n         Items{index: 0, rindex: self.nelts, lo: self.lo, elts: self.elts.as_slice()}\n     }\n \n-    #[deprecated = \"replaced by .iter().rev()\"]\n-    pub fn rev_iter<'a>(&'a self) -> Rev<Items<'a, T>> {\n-        self.iter().rev()\n-    }\n-\n     /// Front-to-back iterator which returns mutable values.\n     pub fn mut_iter<'a>(&'a mut self) -> MutItems<'a, T> {\n         let start_index = raw_index(self.lo, self.elts.len(), 0);\n@@ -220,11 +215,6 @@ impl<T> RingBuf<T> {\n                                  nelts: self.nelts }\n         }\n     }\n-\n-    #[deprecated = \"replaced by .mut_iter().rev()\"]\n-    pub fn mut_rev_iter<'a>(&'a mut self) -> Rev<MutItems<'a, T>> {\n-        self.mut_iter().rev()\n-    }\n }\n \n /// RingBuf iterator"}, {"sha": "8e4e47405e71fe13134998d81ec69aafed448ac4", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "patch": "@@ -15,7 +15,7 @@\n \n #![allow(missing_doc)]\n \n-use std::iter::{Enumerate, FilterMap, Rev};\n+use std::iter::{Enumerate, FilterMap};\n use std::mem::replace;\n use std::{vec, slice};\n \n@@ -142,16 +142,6 @@ impl<V> SmallIntMap<V> {\n         }\n     }\n \n-    #[deprecated = \"replaced by .iter().rev()\"]\n-    pub fn rev_iter<'r>(&'r self) -> Rev<Entries<'r, V>> {\n-        self.iter().rev()\n-    }\n-\n-    #[deprecated = \"replaced by .mut_iter().rev()\"]\n-    pub fn mut_rev_iter<'r>(&'r mut self) -> Rev<MutEntries<'r, V>> {\n-        self.mut_iter().rev()\n-    }\n-\n     /// Empties the hash map, moving all values into the specified closure\n     pub fn move_iter(&mut self)\n         -> FilterMap<(uint, Option<V>), (uint, V),\n@@ -243,8 +233,6 @@ pub struct Entries<'a, T> {\n \n iterator!(impl Entries -> (uint, &'a T), get_ref)\n double_ended_iterator!(impl Entries -> (uint, &'a T), get_ref)\n-#[deprecated = \"replaced by Rev<Entries<'a, T>>\"]\n-pub type RevEntries<'a, T> = Rev<Entries<'a, T>>;\n \n pub struct MutEntries<'a, T> {\n     front: uint,\n@@ -254,8 +242,6 @@ pub struct MutEntries<'a, T> {\n \n iterator!(impl MutEntries -> (uint, &'a mut T), get_mut_ref)\n double_ended_iterator!(impl MutEntries -> (uint, &'a mut T), get_mut_ref)\n-#[deprecated = \"replaced by Rev<MutEntries<'a, T>\"]\n-pub type RevMutEntries<'a, T> = Rev<MutEntries<'a, T>>;\n \n #[cfg(test)]\n mod test_map {"}, {"sha": "3979a1ad8c8338795ad49eaf9f9672390696a529", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "patch": "@@ -386,9 +386,6 @@ pub trait ImmutableVector<'a, T> {\n     fn slice_to(&self, end: uint) -> &'a [T];\n     /// Returns an iterator over the vector\n     fn iter(self) -> Items<'a, T>;\n-    /// Returns a reversed iterator over a vector\n-    #[deprecated = \"replaced by .iter().rev()\"]\n-    fn rev_iter(self) -> Rev<Items<'a, T>>;\n     /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred`.  The matched element\n     /// is not contained in the subslices.\n@@ -399,12 +396,6 @@ pub trait ImmutableVector<'a, T> {\n     /// the subslices.\n     fn splitn(self, n: uint, pred: |&T|: 'a -> bool) -> SplitsN<'a, T>;\n     /// Returns an iterator over the subslices of the vector which are\n-    /// separated by elements that match `pred`. This starts at the\n-    /// end of the vector and works backwards.  The matched element is\n-    /// not contained in the subslices.\n-    #[deprecated = \"replaced by .split(pred).rev()\"]\n-    fn rsplit(self, pred: |&T|: 'a -> bool) -> Rev<Splits<'a, T>>;\n-    /// Returns an iterator over the subslices of the vector which are\n     /// separated by elements that match `pred` limited to splitting\n     /// at most `n` times. This starts at the end of the vector and\n     /// works backwards.  The matched element is not contained in the\n@@ -580,12 +571,6 @@ impl<'a,T> ImmutableVector<'a, T> for &'a [T] {\n         }\n     }\n \n-    #[inline]\n-    #[deprecated = \"replaced by .iter().rev()\"]\n-    fn rev_iter(self) -> Rev<Items<'a, T>> {\n-        self.iter().rev()\n-    }\n-\n     #[inline]\n     fn split(self, pred: |&T|: 'a -> bool) -> Splits<'a, T> {\n         Splits {\n@@ -604,12 +589,6 @@ impl<'a,T> ImmutableVector<'a, T> for &'a [T] {\n         }\n     }\n \n-    #[inline]\n-    #[deprecated = \"replaced by .split(pred).rev()\"]\n-    fn rsplit(self, pred: |&T|: 'a -> bool) -> Rev<Splits<'a, T>> {\n-        self.split(pred).rev()\n-    }\n-\n     #[inline]\n     fn rsplitn(self, n: uint, pred: |&T|: 'a -> bool) -> SplitsN<'a, T> {\n         SplitsN {\n@@ -806,10 +785,6 @@ pub trait MutableVector<'a, T> {\n     /// Returns a mutable pointer to the last item in the vector.\n     fn mut_last(self) -> Option<&'a mut T>;\n \n-    /// Returns a reversed iterator that allows modifying each value\n-    #[deprecated = \"replaced by .mut_iter().rev()\"]\n-    fn mut_rev_iter(self) -> Rev<MutItems<'a, T>>;\n-\n     /// Returns an iterator over the mutable subslices of the vector\n     /// which are separated by elements that match `pred`.  The\n     /// matched element is not contained in the subslices.\n@@ -1045,12 +1020,6 @@ impl<'a,T> MutableVector<'a, T> for &'a mut [T] {\n         Some(&mut self[len - 1])\n     }\n \n-    #[inline]\n-    #[deprecated = \"replaced by .mut_iter().rev()\"]\n-    fn mut_rev_iter(self) -> Rev<MutItems<'a, T>> {\n-        self.mut_iter().rev()\n-    }\n-\n     #[inline]\n     fn mut_split(self, pred: |&T|: 'a -> bool) -> MutSplits<'a, T> {\n         MutSplits { v: self, pred: pred, finished: false }\n@@ -1354,8 +1323,6 @@ impl<'a, T> RandomAccessIterator<&'a T> for Items<'a, T> {\n }\n \n iterator!{struct Items -> *T, &'a T}\n-#[deprecated = \"replaced by Rev<Items<'a, T>>\"]\n-pub type RevItems<'a, T> = Rev<Items<'a, T>>;\n \n impl<'a, T> ExactSize<&'a T> for Items<'a, T> {}\n impl<'a, T> ExactSize<&'a mut T> for MutItems<'a, T> {}\n@@ -1365,8 +1332,6 @@ impl<'a, T> Clone for Items<'a, T> {\n }\n \n iterator!{struct MutItems -> *mut T, &'a mut T}\n-#[deprecated = \"replaced by Rev<MutItems<'a, T>>\"]\n-pub type RevMutItems<'a, T> = Rev<MutItems<'a, T>>;\n \n /// An iterator over the subslices of the vector which are separated\n /// by elements that match `pred`."}, {"sha": "d6a9b42522c297dc2a28cb7b1b33e03b8fedfc1f", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 53, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "patch": "@@ -20,7 +20,7 @@ use cmp::{Eq, TotalEq};\n use container::Container;\n use default::Default;\n use iter::{Filter, Map, Iterator};\n-use iter::{Rev, DoubleEndedIterator, ExactSize};\n+use iter::{DoubleEndedIterator, ExactSize};\n use iter::range;\n use num::Saturating;\n use option::{None, Option, Some};\n@@ -174,20 +174,11 @@ impl<'a> DoubleEndedIterator<(uint, char)> for CharOffsets<'a> {\n     }\n }\n \n-#[deprecated = \"replaced by Rev<Chars<'a>>\"]\n-pub type RevChars<'a> = Rev<Chars<'a>>;\n-\n-#[deprecated = \"replaced by Rev<CharOffsets<'a>>\"]\n-pub type RevCharOffsets<'a> = Rev<CharOffsets<'a>>;\n-\n /// External iterator for a string's bytes.\n /// Use with the `std::iter` module.\n pub type Bytes<'a> =\n     Map<'a, &'a u8, u8, slice::Items<'a, u8>>;\n \n-#[deprecated = \"replaced by Rev<Bytes<'a>>\"]\n-pub type RevBytes<'a> = Rev<Bytes<'a>>;\n-\n /// An iterator over the substrings of a string, separated by `sep`.\n #[deriving(Clone)]\n pub struct CharSplits<'a, Sep> {\n@@ -200,9 +191,6 @@ pub struct CharSplits<'a, Sep> {\n     finished: bool,\n }\n \n-#[deprecated = \"replaced by Rev<CharSplits<'a, Sep>>\"]\n-pub type RevCharSplits<'a, Sep> = Rev<CharSplits<'a, Sep>>;\n-\n /// An iterator over the substrings of a string, separated by `sep`,\n /// splitting at most `count` times.\n #[deriving(Clone)]\n@@ -1080,24 +1068,12 @@ pub trait StrSlice<'a> {\n     /// ```\n     fn chars(&self) -> Chars<'a>;\n \n-    /// Do not use this - it is deprecated.\n-    #[deprecated = \"replaced by .chars().rev()\"]\n-    fn chars_rev(&self) -> Rev<Chars<'a>>;\n-\n     /// An iterator over the bytes of `self`\n     fn bytes(&self) -> Bytes<'a>;\n \n-    /// Do not use this - it is deprecated.\n-    #[deprecated = \"replaced by .bytes().rev()\"]\n-    fn bytes_rev(&self) -> Rev<Bytes<'a>>;\n-\n     /// An iterator over the characters of `self` and their byte offsets.\n     fn char_indices(&self) -> CharOffsets<'a>;\n \n-    /// Do not use this - it is deprecated.\n-    #[deprecated = \"replaced by .char_indices().rev()\"]\n-    fn char_indices_rev(&self) -> Rev<CharOffsets<'a>>;\n-\n     /// An iterator over substrings of `self`, separated by characters\n     /// matched by `sep`.\n     ///\n@@ -1159,10 +1135,6 @@ pub trait StrSlice<'a> {\n     /// ```\n     fn split_terminator<Sep: CharEq>(&self, sep: Sep) -> CharSplits<'a, Sep>;\n \n-    /// Do not use this - it is deprecated.\n-    #[deprecated = \"replaced by .split(sep).rev()\"]\n-    fn rsplit<Sep: CharEq>(&self, sep: Sep) -> Rev<CharSplits<'a, Sep>>;\n-\n     /// An iterator over substrings of `self`, separated by characters\n     /// matched by `sep`, starting from the end of the string.\n     /// Restricted to splitting at most `count` times.\n@@ -1681,34 +1653,16 @@ impl<'a> StrSlice<'a> for &'a str {\n         Chars{string: *self}\n     }\n \n-    #[inline]\n-    #[deprecated = \"replaced by .chars().rev()\"]\n-    fn chars_rev(&self) -> RevChars<'a> {\n-        self.chars().rev()\n-    }\n-\n     #[inline]\n     fn bytes(&self) -> Bytes<'a> {\n         self.as_bytes().iter().map(|&b| b)\n     }\n \n-    #[inline]\n-    #[deprecated = \"replaced by .bytes().rev()\"]\n-    fn bytes_rev(&self) -> RevBytes<'a> {\n-        self.bytes().rev()\n-    }\n-\n     #[inline]\n     fn char_indices(&self) -> CharOffsets<'a> {\n         CharOffsets{string: *self, iter: self.chars()}\n     }\n \n-    #[inline]\n-    #[deprecated = \"replaced by .char_indices().rev()\"]\n-    fn char_indices_rev(&self) -> RevCharOffsets<'a> {\n-        self.char_indices().rev()\n-    }\n-\n     #[inline]\n     fn split<Sep: CharEq>(&self, sep: Sep) -> CharSplits<'a, Sep> {\n         CharSplits {\n@@ -1739,12 +1693,6 @@ impl<'a> StrSlice<'a> for &'a str {\n         }\n     }\n \n-    #[inline]\n-    #[deprecated = \"replaced by .split(sep).rev()\"]\n-    fn rsplit<Sep: CharEq>(&self, sep: Sep) -> RevCharSplits<'a, Sep> {\n-        self.split(sep).rev()\n-    }\n-\n     #[inline]\n     fn rsplitn<Sep: CharEq>(&self, sep: Sep, count: uint)\n         -> CharSplitsN<'a, Sep> {"}, {"sha": "a2486b6e047f4d7ab1c0378c82ba121b88a32cd8", "filename": "src/librand/lib.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "patch": "@@ -323,12 +323,6 @@ pub trait Rng {\n         }\n     }\n \n-    /// Shuffle a mutable slice in place.\n-    #[deprecated=\"renamed to `.shuffle`\"]\n-    fn shuffle_mut<T>(&mut self, values: &mut [T]) {\n-        self.shuffle(values)\n-    }\n-\n     /// Randomly sample up to `n` elements from an iterator.\n     ///\n     /// # Example\n@@ -387,23 +381,6 @@ pub trait SeedableRng<Seed>: Rng {\n     fn from_seed(seed: Seed) -> Self;\n }\n \n-/// Create a random number generator with a default algorithm and seed.\n-///\n-/// It returns the strongest `Rng` algorithm currently implemented in\n-/// pure Rust. If you require a specifically seeded `Rng` for\n-/// consistency over time you should pick one algorithm and create the\n-/// `Rng` yourself.\n-///\n-/// This is a very expensive operation as it has to read randomness\n-/// from the operating system and use this in an expensive seeding\n-/// operation. If one does not require high performance generation of\n-/// random numbers, `task_rng` and/or `random` may be more\n-/// appropriate.\n-#[deprecated=\"use `task_rng` or `StdRng::new`\"]\n-pub fn rng() -> StdRng {\n-    StdRng::new().unwrap()\n-}\n-\n /// The standard RNG. This is designed to be efficient on the current\n /// platform.\n #[cfg(not(target_word_size=\"64\"))]"}, {"sha": "b6550a9d77bd6c34c518f6dd2e85b67f10e75e00", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "patch": "@@ -96,28 +96,16 @@ pub use Path = self::windows::Path;\n /// Typedef for the platform-native component iterator\n #[cfg(unix)]\n pub use Components = self::posix::Components;\n-/// Typedef for the platform-native reverse component iterator\n-#[cfg(unix)]\n-pub use RevComponents = self::posix::RevComponents;\n /// Typedef for the platform-native component iterator\n #[cfg(windows)]\n pub use Components = self::windows::Components;\n-/// Typedef for the platform-native reverse component iterator\n-#[cfg(windows)]\n-pub use RevComponents = self::windows::RevComponents;\n \n /// Typedef for the platform-native str component iterator\n #[cfg(unix)]\n pub use StrComponents = self::posix::StrComponents;\n-/// Typedef for the platform-native reverse str component iterator\n-#[cfg(unix)]\n-pub use RevStrComponents = self::posix::RevStrComponents;\n /// Typedef for the platform-native str component iterator\n #[cfg(windows)]\n pub use StrComponents = self::windows::StrComponents;\n-/// Typedef for the platform-native reverse str component iterator\n-#[cfg(windows)]\n-pub use RevStrComponents = self::windows::RevStrComponents;\n \n /// Alias for the platform-native separator character.\n #[cfg(unix)]"}, {"sha": "9517d6618a9b6c01686634412a5c39b35cb79a6f", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "patch": "@@ -16,7 +16,7 @@ use clone::Clone;\n use cmp::{Eq, TotalEq};\n use from_str::FromStr;\n use io::Writer;\n-use iter::{DoubleEndedIterator, Rev, AdditiveIterator, Extendable, Iterator, Map};\n+use iter::{DoubleEndedIterator, AdditiveIterator, Extendable, Iterator, Map};\n use option::{Option, None, Some};\n use str;\n use str::Str;\n@@ -28,16 +28,10 @@ use super::{BytesContainer, GenericPath, GenericPathUnsafe};\n \n /// Iterator that yields successive components of a Path as &[u8]\n pub type Components<'a> = Splits<'a, u8>;\n-/// Iterator that yields components of a Path in reverse as &[u8]\n-#[deprecated = \"replaced by Rev<Components<'a>>\"]\n-pub type RevComponents<'a> = Rev<Components<'a>>;\n \n /// Iterator that yields successive components of a Path as Option<&str>\n pub type StrComponents<'a> = Map<'a, &'a [u8], Option<&'a str>,\n                                        Components<'a>>;\n-/// Iterator that yields components of a Path in reverse as Option<&str>\n-#[deprecated = \"replaced by Rev<StrComponents<'a>>\"]\n-pub type RevStrComponents<'a> = Rev<StrComponents<'a>>;\n \n /// Represents a POSIX file path\n #[deriving(Clone)]\n@@ -414,25 +408,11 @@ impl Path {\n         ret\n     }\n \n-    /// Returns an iterator that yields each component of the path in reverse.\n-    /// See components() for details.\n-    #[deprecated = \"replaced by .components().rev()\"]\n-    pub fn rev_components<'a>(&'a self) -> Rev<Components<'a>> {\n-        self.components().rev()\n-    }\n-\n     /// Returns an iterator that yields each component of the path as Option<&str>.\n     /// See components() for details.\n     pub fn str_components<'a>(&'a self) -> StrComponents<'a> {\n         self.components().map(str::from_utf8)\n     }\n-\n-    /// Returns an iterator that yields each component of the path in reverse as Option<&str>.\n-    /// See components() for details.\n-    #[deprecated = \"replaced by .str_components().rev()\"]\n-    pub fn rev_str_components<'a>(&'a self) -> Rev<StrComponents<'a>> {\n-        self.str_components().rev()\n-    }\n }\n \n // None result means the byte vector didn't need normalizing"}, {"sha": "be9472338cdf0774b3ac9d9a11b1386701fa97e9", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "patch": "@@ -17,7 +17,7 @@ use cmp::{Eq, TotalEq};\n use container::Container;\n use from_str::FromStr;\n use io::Writer;\n-use iter::{AdditiveIterator, DoubleEndedIterator, Extendable, Rev, Iterator, Map};\n+use iter::{AdditiveIterator, DoubleEndedIterator, Extendable, Iterator, Map};\n use mem;\n use option::{Option, Some, None};\n use slice::{Vector, OwnedVector, ImmutableVector};\n@@ -33,19 +33,10 @@ use super::{contains_nul, BytesContainer, GenericPath, GenericPathUnsafe};\n /// every component in WindowsPath is guaranteed to be Some.\n pub type StrComponents<'a> = Map<'a, &'a str, Option<&'a str>,\n                                        CharSplits<'a, char>>;\n-/// Iterator that yields components of a Path in reverse as &str\n-///\n-/// Each component is yielded as Option<&str> for compatibility with PosixPath, but\n-/// every component in WindowsPath is guaranteed to be Some.\n-#[deprecated = \"replaced by Rev<StrComponents<'a>>\"]\n-pub type RevStrComponents<'a> = Rev<StrComponents<'a>>;\n \n /// Iterator that yields successive components of a Path as &[u8]\n pub type Components<'a> = Map<'a, Option<&'a str>, &'a [u8],\n                                     StrComponents<'a>>;\n-/// Iterator that yields components of a Path in reverse as &[u8]\n-#[deprecated = \"replaced by Rev<Components<'a>>\"]\n-pub type RevComponents<'a> = Rev<Components<'a>>;\n \n /// Represents a Windows path\n // Notes for Windows path impl:\n@@ -650,13 +641,6 @@ impl Path {\n         ret\n     }\n \n-    /// Returns an iterator that yields each component of the path in reverse as an Option<&str>\n-    /// See str_components() for details.\n-    #[deprecated = \"replaced by .str_components().rev()\"]\n-    pub fn rev_str_components<'a>(&'a self) -> Rev<StrComponents<'a>> {\n-        self.str_components().rev()\n-    }\n-\n     /// Returns an iterator that yields each component of the path in turn as a &[u8].\n     /// See str_components() for details.\n     pub fn components<'a>(&'a self) -> Components<'a> {\n@@ -667,13 +651,6 @@ impl Path {\n         self.str_components().map(convert)\n     }\n \n-    /// Returns an iterator that yields each component of the path in reverse as a &[u8].\n-    /// See str_components() for details.\n-    #[deprecated = \"replaced by .components().rev()\"]\n-    pub fn rev_components<'a>(&'a self) -> Rev<Components<'a>> {\n-        self.components().rev()\n-    }\n-\n     fn equiv_prefix(&self, other: &Path) -> bool {\n         let s_repr = self.repr.as_slice();\n         let o_repr = other.repr.as_slice();"}, {"sha": "4f7bb2aec087f4bb21dadfe0e309bed1ff1ceaa7", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "patch": "@@ -116,7 +116,7 @@ use vec::Vec;\n pub use core::slice::{ref_slice, mut_ref_slice, Splits, Windows};\n pub use core::slice::{Chunks, Vector, ImmutableVector, ImmutableEqVector};\n pub use core::slice::{ImmutableTotalOrdVector, MutableVector, Items, MutItems};\n-pub use core::slice::{RevItems, RevMutItems, MutSplits, MutChunks};\n+pub use core::slice::{MutSplits, MutChunks};\n pub use core::slice::{bytes, MutableCloneableVector};\n \n // Functional utilities\n@@ -403,10 +403,6 @@ pub trait OwnedVector<T> {\n     /// }\n     /// ```\n     fn move_iter(self) -> MoveItems<T>;\n-    /// Creates a consuming iterator that moves out of the vector in\n-    /// reverse order.\n-    #[deprecated = \"replaced by .move_iter().rev()\"]\n-    fn move_rev_iter(self) -> Rev<MoveItems<T>>;\n \n     /**\n      * Partitions the vector into two vectors `(A,B)`, where all\n@@ -425,12 +421,6 @@ impl<T> OwnedVector<T> for ~[T] {\n         }\n     }\n \n-    #[inline]\n-    #[deprecated = \"replaced by .move_iter().rev()\"]\n-    fn move_rev_iter(self) -> Rev<MoveItems<T>> {\n-        self.move_iter().rev()\n-    }\n-\n     #[inline]\n     fn partition(self, f: |&T| -> bool) -> (Vec<T>, Vec<T>) {\n         let mut lefts  = Vec::new();\n@@ -776,10 +766,6 @@ impl<T> Drop for MoveItems<T> {\n     }\n }\n \n-/// An iterator that moves out of a vector in reverse order.\n-#[deprecated = \"replaced by Rev<MoveItems<'a, T>>\"]\n-pub type RevMoveItems<T> = Rev<MoveItems<T>>;\n-\n #[cfg(test)]\n mod tests {\n     use prelude::*;"}, {"sha": "0c77830ee86fd9cbe8e22d27982173658b3a1b4d", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0dd4c1e7bd0178ca91ea13dfad6efc4cce728302/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=0dd4c1e7bd0178ca91ea13dfad6efc4cce728302", "patch": "@@ -93,8 +93,8 @@ use slice::{ImmutableVector, MutableVector, CloneableVector};\n use strbuf::StrBuf;\n use vec::Vec;\n \n-pub use core::str::{from_utf8, CharEq, Chars, CharOffsets, RevChars};\n-pub use core::str::{RevCharOffsets, Bytes, RevBytes, CharSplits, RevCharSplits};\n+pub use core::str::{from_utf8, CharEq, Chars, CharOffsets};\n+pub use core::str::{Bytes, CharSplits};\n pub use core::str::{CharSplitsN, Words, AnyLines, MatchIndices, StrSplits};\n pub use core::str::{eq_slice, eq, is_utf8, is_utf16, UTF16Items};\n pub use core::str::{UTF16Item, ScalarValue, LoneSurrogate, utf16_items};"}]}