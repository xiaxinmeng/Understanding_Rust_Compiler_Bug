{"sha": "fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291", "node_id": "C_kwDOAAsO6NoAKGZjNjI2MmZhMGMwY2Q5YmQzZTMyYjNkYjRmM2RmNWMyNjhhY2YyOTE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-16T22:00:08Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-28T01:14:28Z"}, "message": "Add `(..)` syntax for RTN", "tree": {"sha": "607e606d7c98a88e12f32ce6c3a4c39632fed90a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/607e606d7c98a88e12f32ce6c3a4c39632fed90a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291", "html_url": "https://github.com/rust-lang/rust/commit/fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "538e8bdcc8d4402c0c4bb95eb47162ca4e11f74d", "url": "https://api.github.com/repos/rust-lang/rust/commits/538e8bdcc8d4402c0c4bb95eb47162ca4e11f74d", "html_url": "https://github.com/rust-lang/rust/commit/538e8bdcc8d4402c0c4bb95eb47162ca4e11f74d"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "c984a8286eb88ab1bc7ab3bc0a766c8499a09b09", "filename": "clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291/clippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291/clippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fref_option_ref.rs?ref=fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::last_path_segment;\n use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n-use rustc_hir::{GenericArg, Mutability, Ty, TyKind};\n+use rustc_hir::{GenericArg, GenericArgsParentheses, Mutability, Ty, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n@@ -47,7 +47,7 @@ impl<'tcx> LateLintPass<'tcx> for RefOptionRef {\n \n             if cx.tcx.is_diagnostic_item(sym::Option, def_id);\n             if let Some(params) = last_path_segment(qpath).args ;\n-            if !params.parenthesized;\n+            if params.parenthesized == GenericArgsParentheses::No;\n             if let Some(inner_ty) = params.args.iter().find_map(|arg| match arg {\n                 GenericArg::Type(inner_ty) => Some(inner_ty),\n                 _ => None,"}, {"sha": "acdf54710691e5dbab98131cc679421f8ead050e", "filename": "clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291", "patch": "@@ -20,7 +20,7 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, m\n                 if let QPath::Resolved(None, path) = *qpath;\n                 if let [ref bx] = *path.segments;\n                 if let Some(params) = bx.args;\n-                if !params.parenthesized;\n+                if params.parenthesized == hir::GenericArgsParentheses::No;\n                 if let Some(inner) = params.args.iter().find_map(|arg| match arg {\n                     GenericArg::Type(ty) => Some(ty),\n                     _ => None,"}, {"sha": "a30748db88fc94cce03a884e1dff2e43821dcd98", "filename": "clippy_lints/src/types/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291/clippy_lints%2Fsrc%2Ftypes%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291/clippy_lints%2Fsrc%2Ftypes%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Futils.rs?ref=fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291", "patch": "@@ -1,14 +1,14 @@\n use clippy_utils::last_path_segment;\n use if_chain::if_chain;\n-use rustc_hir::{GenericArg, QPath, TyKind};\n+use rustc_hir::{GenericArg, GenericArgsParentheses, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n \n pub(super) fn match_borrows_parameter(_cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<Span> {\n     let last = last_path_segment(qpath);\n     if_chain! {\n         if let Some(params) = last.args;\n-        if !params.parenthesized;\n+        if params.parenthesized == GenericArgsParentheses::No;\n         if let Some(ty) = params.args.iter().find_map(|arg| match arg {\n             GenericArg::Type(ty) => Some(ty),\n             _ => None,"}, {"sha": "7dfb0956077e4e7b6b0152263023f48cf2eef3fd", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291", "patch": "@@ -10,7 +10,7 @@ use rustc_hir::{\n     def::{CtorOf, DefKind, Res},\n     def_id::LocalDefId,\n     intravisit::{walk_inf, walk_ty, Visitor},\n-    Expr, ExprKind, FnRetTy, FnSig, GenericArg, GenericParam, GenericParamKind, HirId, Impl, ImplItemKind, Item,\n+    Expr, ExprKind, FnRetTy, FnSig, GenericArg, GenericArgsParentheses, GenericParam, GenericParamKind, HirId, Impl, ImplItemKind, Item,\n     ItemKind, Pat, PatKind, Path, QPath, Ty, TyKind,\n };\n use rustc_hir_analysis::hir_ty_to_ty;\n@@ -100,7 +100,8 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n             if let TyKind::Path(QPath::Resolved(_, item_path)) = self_ty.kind;\n             let parameters = &item_path.segments.last().expect(SEGMENTS_MSG).args;\n             if parameters.as_ref().map_or(true, |params| {\n-                !params.parenthesized && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n+                params.parenthesized  == GenericArgsParentheses::No\n+                    && !params.args.iter().any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n             });\n             if !item.span.from_expansion();\n             if !is_from_proc_macro(cx, item); // expensive, should be last check"}, {"sha": "3ee7147828bd5f9010fc3056d92fc39a32987f4f", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=fc6262fa0c0cd9bd3e32b3db4f3df5c268acf291", "patch": "@@ -401,14 +401,9 @@ impl HirEqInterExpr<'_, '_, '_> {\n     }\n \n     fn eq_path_parameters(&mut self, left: &GenericArgs<'_>, right: &GenericArgs<'_>) -> bool {\n-        if !(left.parenthesized || right.parenthesized) {\n+        if left.parenthesized == right.parenthesized {\n             over(left.args, right.args, |l, r| self.eq_generic_arg(l, r)) // FIXME(flip1995): may not work\n                 && over(left.bindings, right.bindings, |l, r| self.eq_type_binding(l, r))\n-        } else if left.parenthesized && right.parenthesized {\n-            over(left.inputs(), right.inputs(), |l, r| self.eq_ty(l, r))\n-                && both(&Some(&left.bindings[0].ty()), &Some(&right.bindings[0].ty()), |l, r| {\n-                    self.eq_ty(l, r)\n-                })\n         } else {\n             false\n         }"}]}