{"sha": "764cdf60fafe3f8866c75935c381fbf8bcc7f485", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NGNkZjYwZmFmZTNmODg2NmM3NTkzNWMzODFmYmY4YmNjN2Y0ODU=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-04-24T17:54:37Z"}, "committer": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-04-24T19:01:09Z"}, "message": "Extract conversion to windows newlines into fn", "tree": {"sha": "e29b501bd05336bf2fd67aaebaecf29eacf202ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e29b501bd05336bf2fd67aaebaecf29eacf202ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/764cdf60fafe3f8866c75935c381fbf8bcc7f485", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEU0FXzFYkrmfOhhqxKTh7Wnqvhj8FAlzAsnUACgkQKTh7Wnqv\nhj+/YwgAmfEbeWQp+YBTSLaLL7CK34sRfmH1ocmnGMP62Wm49ffJKT3xFtdeVfQC\nw0dpx0vXFvt1BN/hr6gagRuMks2UK3N1co2BpTnO3osLjZDIWOtGxB9jTKly8txc\nuzUOqL13zCZa+OaIKFsvBoy1GUz+Y366QfXofjCVnciu2D09Fx355vvQ8VGaOrwI\nM0zfj9iYPdG0VrlVDwaz4JnBvfBIovXXE3hiQRQIm8/kTvvg7Itwh8jgIYBXwv2A\nsHWIEkHOhFSnvAmf39vInzeRLjyV3t9rwnTiNsbgkfpy0mOzrF5FH4FpGf57/OqE\nsRu3DaKctnCUO2Hc2Z9u/XTMDOkB0g==\n=RAaA\n-----END PGP SIGNATURE-----", "payload": "tree e29b501bd05336bf2fd67aaebaecf29eacf202ce\nparent 58d7b2cc66235198b1a08b001da699da42926494\nauthor Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1556128477 +0200\ncommitter Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1556132469 +0200\n\nExtract conversion to windows newlines into fn\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/764cdf60fafe3f8866c75935c381fbf8bcc7f485", "html_url": "https://github.com/rust-lang/rust/commit/764cdf60fafe3f8866c75935c381fbf8bcc7f485", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/764cdf60fafe3f8866c75935c381fbf8bcc7f485/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58d7b2cc66235198b1a08b001da699da42926494", "url": "https://api.github.com/repos/rust-lang/rust/commits/58d7b2cc66235198b1a08b001da699da42926494", "html_url": "https://github.com/rust-lang/rust/commit/58d7b2cc66235198b1a08b001da699da42926494"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "e86fbeb75fae707b687415d28d71784cef2fd965", "filename": "src/formatting/newline_style.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/764cdf60fafe3f8866c75935c381fbf8bcc7f485/src%2Fformatting%2Fnewline_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/764cdf60fafe3f8866c75935c381fbf8bcc7f485/src%2Fformatting%2Fnewline_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting%2Fnewline_style.rs?ref=764cdf60fafe3f8866c75935c381fbf8bcc7f485", "patch": "@@ -11,27 +11,14 @@ pub(crate) fn apply_newline_style(\n     formatted_text: &mut String,\n     raw_input_text: &str,\n ) {\n-    const WINDOWS_NEWLINE: &str = \"\\r\\n\";\n-\n     match effective_newline_style(newline_style, raw_input_text) {\n         EffectiveNewlineStyle::Windows => {\n-            let mut transformed = String::with_capacity(2 * formatted_text.capacity());\n-            for c in formatted_text.chars() {\n-                match c {\n-                    LINE_FEED => transformed.push_str(WINDOWS_NEWLINE),\n-                    CARRIAGE_RETURN => continue,\n-                    c => transformed.push(c),\n-                }\n-            }\n-            *formatted_text = transformed;\n+            *formatted_text = convert_to_windows_newlines(formatted_text);\n         }\n         EffectiveNewlineStyle::Unix => {}\n     }\n }\n \n-const LINE_FEED: char = '\\n';\n-const CARRIAGE_RETURN: char = '\\r';\n-\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n enum EffectiveNewlineStyle {\n     Windows,\n@@ -50,6 +37,9 @@ fn effective_newline_style(\n     }\n }\n \n+const LINE_FEED: char = '\\n';\n+const CARRIAGE_RETURN: char = '\\r';\n+\n fn auto_detect_newline_style(raw_input_text: &str) -> EffectiveNewlineStyle {\n     if let Some(pos) = raw_input_text.find(LINE_FEED) {\n         let pos = pos.saturating_sub(1);\n@@ -71,6 +61,19 @@ fn native_newline_style() -> EffectiveNewlineStyle {\n     }\n }\n \n+fn convert_to_windows_newlines(formatted_text: &String) -> String {\n+    let mut transformed = String::with_capacity(2 * formatted_text.capacity());\n+    for c in formatted_text.chars() {\n+        const WINDOWS_NEWLINE: &str = \"\\r\\n\";\n+        match c {\n+            LINE_FEED => transformed.push_str(WINDOWS_NEWLINE),\n+            CARRIAGE_RETURN => continue,\n+            c => transformed.push(c),\n+        }\n+    }\n+    transformed\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;"}]}