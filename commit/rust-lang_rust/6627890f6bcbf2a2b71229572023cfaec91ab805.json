{"sha": "6627890f6bcbf2a2b71229572023cfaec91ab805", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2Mjc4OTBmNmJjYmYyYTJiNzEyMjk1NzIwMjNjZmFlYzkxYWI4MDU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-15T08:35:11Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-15T10:53:32Z"}, "message": "Support 'alt check' syntax\n\nIt is only a way to flag an alt as intentionally non-exhaustive right now.\n\nIssue #1679", "tree": {"sha": "3671e2228ce7bc502f472f4e6d3f05e7804686f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3671e2228ce7bc502f472f4e6d3f05e7804686f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6627890f6bcbf2a2b71229572023cfaec91ab805", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6627890f6bcbf2a2b71229572023cfaec91ab805", "html_url": "https://github.com/rust-lang/rust/commit/6627890f6bcbf2a2b71229572023cfaec91ab805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6627890f6bcbf2a2b71229572023cfaec91ab805/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f95ccb4269f2bb795c56d0fa7692cb7705c608e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f95ccb4269f2bb795c56d0fa7692cb7705c608e", "html_url": "https://github.com/rust-lang/rust/commit/9f95ccb4269f2bb795c56d0fa7692cb7705c608e"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "167536907ece0d01cf2fa5492b8ff4bddca8fd16", "filename": "src/comp/metadata/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fastencode.rs?ref=6627890f6bcbf2a2b71229572023cfaec91ab805", "patch": "@@ -293,7 +293,7 @@ impl ast_output for ast_ctxt {\n             }\n           }\n \n-          ast::expr_alt(cond, arms) {\n+          ast::expr_alt(cond, arms, _) {\n             self.tag(at_expr_node_alt) {||\n                 self.blk(blk);\n                 self.expr(cond);"}, {"sha": "6782d06d9dedd335ce766d1be1c1394eaff84551", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=6627890f6bcbf2a2b71229572023cfaec91ab805", "patch": "@@ -110,7 +110,7 @@ fn visit_expr(cx: @ctx, ex: @ast::expr, sc: scope, v: vt<scope>) {\n         check_call(*cx, sc, f, args);\n         handled = false;\n       }\n-      ast::expr_alt(input, arms) { check_alt(*cx, input, arms, sc, v); }\n+      ast::expr_alt(input, arms, _) { check_alt(*cx, input, arms, sc, v); }\n       ast::expr_for(decl, seq, blk) {\n         v.visit_expr(seq, sc, v);\n         check_loop(*cx, sc) {|| check_for(*cx, decl, seq, blk, sc, v); }"}, {"sha": "5e377e332265972520a11da5b663d6525e3e083a", "filename": "src/comp/middle/check_alt.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_alt.rs?ref=6627890f6bcbf2a2b71229572023cfaec91ab805", "patch": "@@ -21,19 +21,21 @@ fn check_crate(tcx: ty::ctxt, crate: @crate) {\n fn check_expr(tcx: ty::ctxt, ex: @expr, &&s: (), v: visit::vt<()>) {\n     visit::visit_expr(ex, s, v);\n     alt ex.node {\n-        expr_alt(scrut, arms) {\n-            check_arms(tcx, ex.span, scrut,\n-                       pat_util::normalize_arms(tcx, arms));\n+      expr_alt(scrut, arms, mode) {\n+        let arms = pat_util::normalize_arms(tcx, arms);\n+        check_arms(tcx, arms);\n+        /* Check for exhaustiveness */\n+        if mode == alt_exhaustive {\n+            let arms = vec::concat(vec::filter_map(arms, unguarded_pat));\n+            check_exhaustive(tcx, ex.span, expr_ty(tcx, scrut), arms);\n         }\n-        _ { }\n+      }\n+      _ { }\n     }\n }\n \n-fn check_arms(tcx: ty::ctxt, sp:span, scrut: @expr, arms: [arm]) {\n+fn check_arms(tcx: ty::ctxt, arms: [arm]) {\n     let i = 0;\n-    let scrut_ty = expr_ty(tcx, scrut);\n-    /* (Could both checks be done in a single pass?) */\n-\n     /* Check for unreachable patterns */\n     for arm: arm in arms {\n         for arm_pat: @pat in arm.pats {\n@@ -55,11 +57,6 @@ fn check_arms(tcx: ty::ctxt, sp:span, scrut: @expr, arms: [arm]) {\n         }\n         i += 1;\n     }\n-\n-    /* Check for exhaustiveness */\n-\n-    check_exhaustive(tcx, sp, scrut_ty,\n-       vec::concat(vec::filter_map(arms, unguarded_pat)));\n }\n \n // Precondition: patterns have been normalized"}, {"sha": "a0e8388e8243886225cf8cefcb08551c8f8936ae", "filename": "src/comp/middle/last_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmiddle%2Flast_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmiddle%2Flast_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Flast_use.rs?ref=6627890f6bcbf2a2b71229572023cfaec91ab805", "patch": "@@ -88,7 +88,7 @@ fn visit_expr(ex: @expr, cx: ctx, v: visit::vt<ctx>) {\n         v.visit_expr(coll, cx, v);\n         visit_block(loop, cx) {|| visit::visit_block(blk, cx, v);}\n       }\n-      expr_alt(input, arms) {\n+      expr_alt(input, arms, _) {\n         v.visit_expr(input, cx, v);\n         let before = cx.current, sets = [];\n         for arm in arms {"}, {"sha": "618bfcdb89ec2486929ea194c1371e88464930b9", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=6627890f6bcbf2a2b71229572023cfaec91ab805", "patch": "@@ -3257,7 +3257,7 @@ fn trans_expr(bcx: @block_ctxt, e: @ast::expr, dest: dest) -> @block_ctxt {\n       ast::expr_if(cond, thn, els) | ast::expr_if_check(cond, thn, els) {\n         ret trans_if(bcx, cond, thn, els, dest);\n       }\n-      ast::expr_alt(expr, arms) {\n+      ast::expr_alt(expr, arms, _) {\n         ret alt::trans_alt(bcx, expr, arms, dest);\n       }\n       ast::expr_block(blk) {"}, {"sha": "a3fee3a5a75b0b1fe64916e905de95f5277102f3", "filename": "src/comp/middle/tstate/pre_post_conditions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fpre_post_conditions.rs?ref=6627890f6bcbf2a2b71229572023cfaec91ab805", "patch": "@@ -447,7 +447,7 @@ fn find_pre_post_expr(fcx: fn_ctxt, e: @expr) {\n         find_pre_post_loop(fcx, d, index, body, e.id);\n       }\n       expr_index(val, sub) { find_pre_post_exprs(fcx, [val, sub], e.id); }\n-      expr_alt(ex, alts) {\n+      expr_alt(ex, alts, _) {\n         find_pre_post_expr(fcx, ex);\n         fn do_an_alt(fcx: fn_ctxt, an_alt: arm) -> pre_and_post {\n             alt an_alt.guard {"}, {"sha": "7a7c1cd399ab34f022434bc3f6b5ffa8d29e40ab", "filename": "src/comp/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fstates.rs?ref=6627890f6bcbf2a2b71229572023cfaec91ab805", "patch": "@@ -552,7 +552,7 @@ fn find_pre_post_state_expr(fcx: fn_ctxt, pres: prestate, e: @expr) -> bool {\n       expr_index(val, sub) {\n         ret find_pre_post_state_two(fcx, pres, val, sub, e.id, oper_pure);\n       }\n-      expr_alt(val, alts) {\n+      expr_alt(val, alts, _) {\n         let changed =\n             set_prestate_ann(fcx.ccx, e.id, pres) |\n                 find_pre_post_state_expr(fcx, pres, val);"}, {"sha": "aa03940e60688c515baf761993eb632c21886979", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=6627890f6bcbf2a2b71229572023cfaec91ab805", "patch": "@@ -2231,7 +2231,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n               check_block_no_value(fcx, body);\n         write_ty(tcx, id, block_ty(tcx, body));\n       }\n-      ast::expr_alt(expr, arms) {\n+      ast::expr_alt(expr, arms, _) {\n         bot = check_expr(fcx, expr);\n \n         // Typecheck the patterns first, so that we get types for all the"}, {"sha": "deaf70c41fb01d8071fcd32cf0038c1116e875e7", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=6627890f6bcbf2a2b71229572023cfaec91ab805", "patch": "@@ -215,6 +215,8 @@ enum expr_check_mode { claimed_expr, checked_expr, }\n \n type expr = {id: node_id, node: expr_, span: span};\n \n+enum alt_mode { alt_check, alt_exhaustive, }\n+\n enum expr_ {\n     expr_vec([@expr], mutability),\n     expr_rec([field], option<@expr>),\n@@ -229,7 +231,7 @@ enum expr_ {\n     expr_while(@expr, blk),\n     expr_for(@local, @expr, blk),\n     expr_do_while(blk, @expr),\n-    expr_alt(@expr, [arm]),\n+    expr_alt(@expr, [arm], alt_mode),\n     expr_fn(proto, fn_decl, blk, @capture_clause),\n     expr_fn_block(fn_decl, blk),\n     expr_block(blk),"}, {"sha": "878b26fa84ce5c5c11bd914f463c08861350d9c4", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=6627890f6bcbf2a2b71229572023cfaec91ab805", "patch": "@@ -383,8 +383,8 @@ fn noop_fold_expr(e: expr_, fld: ast_fold) -> expr_ {\n           expr_do_while(blk, expr) {\n             expr_do_while(fld.fold_block(blk), fld.fold_expr(expr))\n           }\n-          expr_alt(expr, arms) {\n-            expr_alt(fld.fold_expr(expr), vec::map(arms, fld.fold_arm))\n+          expr_alt(expr, arms, mode) {\n+            expr_alt(fld.fold_expr(expr), vec::map(arms, fld.fold_arm), mode)\n           }\n           expr_fn(proto, decl, body, captures) {\n               expr_fn(proto, fold_fn_decl(decl, fld),"}, {"sha": "01f044339081ca2a640ac58fbb77b2e85eeb358d", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=6627890f6bcbf2a2b71229572023cfaec91ab805", "patch": "@@ -1372,6 +1372,8 @@ fn parse_do_while_expr(p: parser) -> @ast::expr {\n \n fn parse_alt_expr(p: parser) -> @ast::expr {\n     let lo = p.last_span.lo;\n+    let mode = if eat_word(p, \"check\") { ast::alt_check }\n+               else { ast::alt_exhaustive };\n     let discriminant = parse_expr(p);\n     expect(p, token::LBRACE);\n     let arms: [ast::arm] = [];\n@@ -1384,7 +1386,7 @@ fn parse_alt_expr(p: parser) -> @ast::expr {\n     }\n     let hi = p.span.hi;\n     p.bump();\n-    ret mk_expr(p, lo, hi, ast::expr_alt(discriminant, arms));\n+    ret mk_expr(p, lo, hi, ast::expr_alt(discriminant, arms, mode));\n }\n \n fn parse_expr(p: parser) -> @ast::expr {\n@@ -1653,7 +1655,7 @@ fn expr_is_complete(p: parser, e: pexpr) -> bool {\n fn expr_requires_semi_to_be_stmt(e: @ast::expr) -> bool {\n     alt e.node {\n       ast::expr_if(_, _, _) | ast::expr_if_check(_, _, _)\n-      | ast::expr_alt(_, _) | ast::expr_block(_)\n+      | ast::expr_alt(_, _, _) | ast::expr_block(_)\n       | ast::expr_do_while(_, _) | ast::expr_while(_, _)\n       | ast::expr_for(_, _, _)\n       | ast::expr_call(_, _, true) {"}, {"sha": "9cd9cd0503a4859387fa1403f22a25afb91d6e0e", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=6627890f6bcbf2a2b71229572023cfaec91ab805", "patch": "@@ -901,10 +901,11 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         word_space(s, \"while\");\n         print_expr(s, expr);\n       }\n-      ast::expr_alt(expr, arms) {\n+      ast::expr_alt(expr, arms, mode) {\n         cbox(s, alt_indent_unit);\n         ibox(s, 4u);\n         word_nbsp(s, \"alt\");\n+        if mode == ast::alt_check { word_nbsp(s, \"check\"); }\n         print_maybe_parens_discrim(s, expr);\n         space(s.s);\n         bopen(s);"}, {"sha": "5cf4773101e20c38ae6fd68bb9ec8e5cba4c4584", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=6627890f6bcbf2a2b71229572023cfaec91ab805", "patch": "@@ -339,7 +339,7 @@ fn visit_expr<E>(ex: @expr, e: E, v: vt<E>) {\n         v.visit_block(b, e, v);\n       }\n       expr_do_while(b, x) { v.visit_block(b, e, v); v.visit_expr(x, e, v); }\n-      expr_alt(x, arms) {\n+      expr_alt(x, arms, _) {\n         v.visit_expr(x, e, v);\n         for a: arm in arms { v.visit_arm(a, e, v); }\n       }"}, {"sha": "2eb20ed0e9d2c8c9c883ad212d1d2a0d9dbbec1d", "filename": "src/test/run-pass/bind-methods.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Ftest%2Frun-pass%2Fbind-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6627890f6bcbf2a2b71229572023cfaec91ab805/src%2Ftest%2Frun-pass%2Fbind-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-methods.rs?ref=6627890f6bcbf2a2b71229572023cfaec91ab805", "patch": "@@ -1,5 +1,3 @@\n-// xfail-test\n-\n iface foo {\n     fn foo() -> int;\n     fn bar(p: int) -> int;"}]}