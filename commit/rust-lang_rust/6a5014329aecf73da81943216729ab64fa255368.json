{"sha": "6a5014329aecf73da81943216729ab64fa255368", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNTAxNDMyOWFlY2Y3M2RhODE5NDMyMTY3MjlhYjY0ZmEyNTUzNjg=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-27T17:48:55Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-04-27T17:48:55Z"}, "message": "Use core instead of std for builtin derive macros", "tree": {"sha": "e3b13ad7e6416ab9fa82365fad96e1f08384ba05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3b13ad7e6416ab9fa82365fad96e1f08384ba05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a5014329aecf73da81943216729ab64fa255368", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5014329aecf73da81943216729ab64fa255368", "html_url": "https://github.com/rust-lang/rust/commit/6a5014329aecf73da81943216729ab64fa255368", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a5014329aecf73da81943216729ab64fa255368/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef67e0a497a3f0b65c11bf443e0d35c8e51bd26f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef67e0a497a3f0b65c11bf443e0d35c8e51bd26f", "html_url": "https://github.com/rust-lang/rust/commit/ef67e0a497a3f0b65c11bf443e0d35c8e51bd26f"}], "stats": {"total": 101, "additions": 65, "deletions": 36}, "files": [{"sha": "dae623dd0f481fb6413dd07793dc9d778c9e54cd", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 61, "deletions": 32, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/6a5014329aecf73da81943216729ab64fa255368/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5014329aecf73da81943216729ab64fa255368/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=6a5014329aecf73da81943216729ab64fa255368", "patch": "@@ -9,7 +9,7 @@ use ra_syntax::{\n };\n \n use crate::db::AstDatabase;\n-use crate::{name, quote, LazyMacroId, MacroDefId, MacroDefKind};\n+use crate::{name, quote, LazyMacroId, MacroCallId, MacroDefId, MacroDefKind};\n \n macro_rules! register_builtin {\n     ( $($trait:ident => $expand:ident),* ) => {\n@@ -153,76 +153,105 @@ fn expand_simple_derive(\n     Ok(expanded)\n }\n \n+fn find_builtin_crate(db: &dyn AstDatabase, id: LazyMacroId) -> tt::TokenTree {\n+    // FIXME: make hygiene works for builtin derive macro\n+    // such that $crate can be used here.\n+\n+    let m: MacroCallId = id.into();\n+    let file_id = m.as_file().original_file(db);\n+    let cg = db.crate_graph();\n+    let crates = db.relevant_crates(file_id);\n+    let mut crate_names =\n+        crates.iter().filter_map(|krate| cg[*krate].display_name.clone()).map(|it| it.to_string());\n+\n+    let tt = if crate_names.any(|name| name == \"std\" || name == \"core\") {\n+        quote! { krate }\n+    } else {\n+        quote! { core }\n+    };\n+\n+    tt.token_trees[0].clone()\n+}\n+\n fn copy_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::marker::Copy })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::marker::Copy })\n }\n \n fn clone_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::clone::Clone })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::clone::Clone })\n }\n \n fn default_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::default::Default })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::default::Default })\n }\n \n fn debug_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::fmt::Debug })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::fmt::Debug })\n }\n \n fn hash_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::hash::Hash })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::hash::Hash })\n }\n \n fn eq_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::cmp::Eq })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::cmp::Eq })\n }\n \n fn partial_eq_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::cmp::PartialEq })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::cmp::PartialEq })\n }\n \n fn ord_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::cmp::Ord })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::cmp::Ord })\n }\n \n fn partial_ord_expand(\n-    _db: &dyn AstDatabase,\n-    _id: LazyMacroId,\n+    db: &dyn AstDatabase,\n+    id: LazyMacroId,\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n-    expand_simple_derive(tt, quote! { std::cmp::PartialOrd })\n+    let krate = find_builtin_crate(db, id);\n+    expand_simple_derive(tt, quote! { #krate::cmp::PartialOrd })\n }\n \n #[cfg(test)]\n@@ -264,7 +293,7 @@ mod tests {\n             known::Copy,\n         );\n \n-        assert_eq!(expanded, \"impl< >std::marker::CopyforFoo< >{}\");\n+        assert_eq!(expanded, \"impl< >core::marker::CopyforFoo< >{}\");\n     }\n \n     #[test]\n@@ -279,7 +308,7 @@ mod tests {\n \n         assert_eq!(\n             expanded,\n-            \"impl<T0:std::marker::Copy,T1:std::marker::Copy>std::marker::CopyforFoo<T0,T1>{}\"\n+            \"impl<T0:core::marker::Copy,T1:core::marker::Copy>core::marker::CopyforFoo<T0,T1>{}\"\n         );\n     }\n \n@@ -297,7 +326,7 @@ mod tests {\n \n         assert_eq!(\n             expanded,\n-            \"impl<T0:std::marker::Copy,T1:std::marker::Copy>std::marker::CopyforFoo<T0,T1>{}\"\n+            \"impl<T0:core::marker::Copy,T1:core::marker::Copy>core::marker::CopyforFoo<T0,T1>{}\"\n         );\n     }\n \n@@ -313,7 +342,7 @@ mod tests {\n \n         assert_eq!(\n             expanded,\n-            \"impl<T0:std::clone::Clone,T1:std::clone::Clone>std::clone::CloneforFoo<T0,T1>{}\"\n+            \"impl<T0:core::clone::Clone,T1:core::clone::Clone>core::clone::CloneforFoo<T0,T1>{}\"\n         );\n     }\n }"}, {"sha": "4f82ff70233b5781264739e709e751bef0eed873", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a5014329aecf73da81943216729ab64fa255368/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5014329aecf73da81943216729ab64fa255368/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=6a5014329aecf73da81943216729ab64fa255368", "patch": "@@ -622,14 +622,14 @@ fn main() {\n fn infer_derive_clone_simple() {\n     let (db, pos) = TestDB::with_position(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- /main.rs crate:main deps:core\n #[derive(Clone)]\n struct S;\n fn test() {\n     S.clone()<|>;\n }\n \n-//- /lib.rs crate:std\n+//- /lib.rs crate:core\n #[prelude_import]\n use clone::*;\n mod clone {\n@@ -646,7 +646,7 @@ mod clone {\n fn infer_derive_clone_with_params() {\n     let (db, pos) = TestDB::with_position(\n         r#\"\n-//- /main.rs crate:main deps:std\n+//- /main.rs crate:main deps:core\n #[derive(Clone)]\n struct S;\n #[derive(Clone)]\n@@ -656,7 +656,7 @@ fn test() {\n     (Wrapper(S).clone(), Wrapper(NonClone).clone())<|>;\n }\n \n-//- /lib.rs crate:std\n+//- /lib.rs crate:core\n #[prelude_import]\n use clone::*;\n mod clone {"}]}