{"sha": "a3cc435f5755f5550d4235779de58b53a22f0f1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzY2M0MzVmNTc1NWY1NTUwZDQyMzU3NzlkZTU4YjUzYTIyZjBmMWU=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-11T01:46:13Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-11T22:39:08Z"}, "message": "Remove `RawVec::double_in_place`.\n\nIt's unused.", "tree": {"sha": "72f5bbb4ba857445f50ed48894fc0644e187d78e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72f5bbb4ba857445f50ed48894fc0644e187d78e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3cc435f5755f5550d4235779de58b53a22f0f1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3cc435f5755f5550d4235779de58b53a22f0f1e", "html_url": "https://github.com/rust-lang/rust/commit/a3cc435f5755f5550d4235779de58b53a22f0f1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3cc435f5755f5550d4235779de58b53a22f0f1e/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99cb9ccb9ca2067ad6e60508e3d52da77396b2f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/99cb9ccb9ca2067ad6e60508e3d52da77396b2f1", "html_url": "https://github.com/rust-lang/rust/commit/99cb9ccb9ca2067ad6e60508e3d52da77396b2f1"}], "stats": {"total": 18, "additions": 0, "deletions": 18}, "files": [{"sha": "ac5399acddb9b8b6614a23eb705569602652a24f", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a3cc435f5755f5550d4235779de58b53a22f0f1e/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3cc435f5755f5550d4235779de58b53a22f0f1e/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=a3cc435f5755f5550d4235779de58b53a22f0f1e", "patch": "@@ -269,24 +269,6 @@ impl<T, A: AllocRef> RawVec<T, A> {\n         }\n     }\n \n-    /// Attempts to double the size of the type's backing allocation in place. This is common\n-    /// enough to want to do that it's easiest to just have a dedicated method. Slightly\n-    /// more efficient logic can be provided for this than the general case.\n-    ///\n-    /// Returns `true` if the reallocation attempt has succeeded.\n-    ///\n-    /// # Panics\n-    ///\n-    /// * Panics if `T` is zero-sized on the assumption that you managed to exhaust\n-    ///   all `usize::MAX` slots in your imaginary buffer.\n-    /// * Panics on 32-bit platforms if the requested capacity exceeds\n-    ///   `isize::MAX` bytes.\n-    #[inline(never)]\n-    #[cold]\n-    pub fn double_in_place(&mut self) -> bool {\n-        self.grow(Double, InPlace, Uninitialized).is_ok()\n-    }\n-\n     /// Ensures that the buffer contains at least enough space to hold\n     /// `used_capacity + needed_extra_capacity` elements. If it doesn't already have\n     /// enough capacity, will reallocate enough space plus comfortable slack"}]}