{"sha": "356beb3084e2a76283a19218d7cef5954d7f79ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1NmJlYjMwODRlMmE3NjI4M2ExOTIxOGQ3Y2VmNTk1NGQ3Zjc5YWU=", "commit": {"author": {"name": "Nell Shamrell", "email": "nellshamrell@gmail.com", "date": "2021-02-15T22:27:36Z"}, "committer": {"name": "Nell Shamrell", "email": "nellshamrell@gmail.com", "date": "2021-02-25T02:46:54Z"}, "message": "clarifies error when finding mismatched returned types for async functions\n\nSigned-off-by: Nell Shamrell <nellshamrell@gmail.com>", "tree": {"sha": "f4d5a8314f1e8371122b3f7f606f981a008d6cdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4d5a8314f1e8371122b3f7f606f981a008d6cdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/356beb3084e2a76283a19218d7cef5954d7f79ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/356beb3084e2a76283a19218d7cef5954d7f79ae", "html_url": "https://github.com/rust-lang/rust/commit/356beb3084e2a76283a19218d7cef5954d7f79ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/356beb3084e2a76283a19218d7cef5954d7f79ae/comments", "author": {"login": "nellshamrell", "id": 813007, "node_id": "MDQ6VXNlcjgxMzAwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/813007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nellshamrell", "html_url": "https://github.com/nellshamrell", "followers_url": "https://api.github.com/users/nellshamrell/followers", "following_url": "https://api.github.com/users/nellshamrell/following{/other_user}", "gists_url": "https://api.github.com/users/nellshamrell/gists{/gist_id}", "starred_url": "https://api.github.com/users/nellshamrell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nellshamrell/subscriptions", "organizations_url": "https://api.github.com/users/nellshamrell/orgs", "repos_url": "https://api.github.com/users/nellshamrell/repos", "events_url": "https://api.github.com/users/nellshamrell/events{/privacy}", "received_events_url": "https://api.github.com/users/nellshamrell/received_events", "type": "User", "site_admin": true}, "committer": {"login": "nellshamrell", "id": 813007, "node_id": "MDQ6VXNlcjgxMzAwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/813007?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nellshamrell", "html_url": "https://github.com/nellshamrell", "followers_url": "https://api.github.com/users/nellshamrell/followers", "following_url": "https://api.github.com/users/nellshamrell/following{/other_user}", "gists_url": "https://api.github.com/users/nellshamrell/gists{/gist_id}", "starred_url": "https://api.github.com/users/nellshamrell/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nellshamrell/subscriptions", "organizations_url": "https://api.github.com/users/nellshamrell/orgs", "repos_url": "https://api.github.com/users/nellshamrell/repos", "events_url": "https://api.github.com/users/nellshamrell/events{/privacy}", "received_events_url": "https://api.github.com/users/nellshamrell/received_events", "type": "User", "site_admin": true}, "parents": [{"sha": "1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fdadbf13aecd190b277ea2aa1b125d2ed986d55", "html_url": "https://github.com/rust-lang/rust/commit/1fdadbf13aecd190b277ea2aa1b125d2ed986d55"}], "stats": {"total": 71, "additions": 49, "deletions": 22}, "files": [{"sha": "2d5f43e5890d0ab3681d47e4b83ccddeaf2f999d", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/356beb3084e2a76283a19218d7cef5954d7f79ae/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356beb3084e2a76283a19218d7cef5954d7f79ae/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=356beb3084e2a76283a19218d7cef5954d7f79ae", "patch": "@@ -1484,13 +1484,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 for (key, values) in types.iter() {\n                     let count = values.len();\n                     let kind = key.descr();\n+                    let mut returned_async_output_error = false;\n                     for sp in values {\n                         err.span_label(\n                             *sp,\n                             format!(\n                                 \"{}{}{} {}{}\",\n-                                if sp.is_desugaring(DesugaringKind::Async) {\n-                                    \"the `Output` of this `async fn`'s \"\n+                                if sp.is_desugaring(DesugaringKind::Async)\n+                                    && !returned_async_output_error\n+                                {\n+                                    \"checked the `Output` of this `async fn`, \"\n                                 } else if count == 1 {\n                                     \"the \"\n                                 } else {\n@@ -1502,6 +1505,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                                 pluralize!(count),\n                             ),\n                         );\n+                        if sp.is_desugaring(DesugaringKind::Async)\n+                            && returned_async_output_error == false\n+                        {\n+                            err.note(\"while checking the return type of the `async fn`\");\n+                            returned_async_output_error = true;\n+                        }\n                     }\n                 }\n             }"}, {"sha": "654a3bcc92dd83dc6b7b3eb387056c65aa52bbdd", "filename": "src/test/ui/async-await/dont-suggest-missing-await.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdont-suggest-missing-await.stderr?ref=356beb3084e2a76283a19218d7cef5954d7f79ae", "patch": "@@ -2,11 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/dont-suggest-missing-await.rs:14:18\n    |\n LL | async fn make_u32() -> u32 {\n-   |                        --- the `Output` of this `async fn`'s found opaque type\n+   |                        --- checked the `Output` of this `async fn`, found opaque type\n ...\n LL |         take_u32(x)\n    |                  ^ expected `u32`, found opaque type\n    |\n+   = note: while checking the return type of the `async fn`\n    = note:     expected type `u32`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`"}, {"sha": "04f191cc5e8cb4cd72d44f71d80e3d6c96a5797d", "filename": "src/test/ui/async-await/generator-desc.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fgenerator-desc.stderr?ref=356beb3084e2a76283a19218d7cef5954d7f79ae", "patch": "@@ -13,13 +13,15 @@ error[E0308]: mismatched types\n   --> $DIR/generator-desc.rs:12:16\n    |\n LL | async fn one() {}\n-   |                - the `Output` of this `async fn`'s expected opaque type\n+   |                - checked the `Output` of this `async fn`, expected opaque type\n LL | async fn two() {}\n-   |                - the `Output` of this `async fn`'s found opaque type\n+   |                - checked the `Output` of this `async fn`, found opaque type\n ...\n LL |     fun(one(), two());\n    |                ^^^^^ expected opaque type, found a different opaque type\n    |\n+   = note: while checking the return type of the `async fn`\n+   = note: while checking the return type of the `async fn`\n    = note: expected opaque type `impl Future` (opaque type at <$DIR/generator-desc.rs:5:16>)\n               found opaque type `impl Future` (opaque type at <$DIR/generator-desc.rs:6:16>)\n    = help: consider `await`ing on both `Future`s"}, {"sha": "4a8e841b33d49c5a32afbe6f7802afa11e4bce35", "filename": "src/test/ui/async-await/issue-61076.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.rs?ref=356beb3084e2a76283a19218d7cef5954d7f79ae", "patch": "@@ -56,7 +56,7 @@ async fn struct_() -> Struct {\n }\n \n async fn tuple() -> Tuple {\n-    //~^ NOTE the `Output` of this `async fn`'s expected opaque type\n+    //~^ NOTE checked the `Output` of this `async fn`, expected opaque type\n     Tuple(1i32)\n }\n \n@@ -92,6 +92,7 @@ async fn match_() {\n         Tuple(_) => {} //~ ERROR mismatched types\n         //~^ NOTE expected opaque type, found struct `Tuple`\n         //~| NOTE expected opaque type `impl Future`\n+        //~| NOTE while checking the return type of the `async fn`\n     }\n }\n "}, {"sha": "fd00522fac70317cabfe065c2a6c4c9d10362173", "filename": "src/test/ui/async-await/issue-61076.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61076.stderr?ref=356beb3084e2a76283a19218d7cef5954d7f79ae", "patch": "@@ -61,11 +61,12 @@ error[E0308]: mismatched types\n   --> $DIR/issue-61076.rs:92:9\n    |\n LL | async fn tuple() -> Tuple {\n-   |                     ----- the `Output` of this `async fn`'s expected opaque type\n+   |                     ----- checked the `Output` of this `async fn`, expected opaque type\n ...\n LL |         Tuple(_) => {}\n    |         ^^^^^^^^ expected opaque type, found struct `Tuple`\n    |\n+   = note: while checking the return type of the `async fn`\n    = note: expected opaque type `impl Future`\n                    found struct `Tuple`\n help: consider `await`ing on the `Future`"}, {"sha": "483e52536a1b4eb8ba6d785ed957a8be35a6e6be", "filename": "src/test/ui/async-await/suggest-missing-await-closure.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await-closure.stderr?ref=356beb3084e2a76283a19218d7cef5954d7f79ae", "patch": "@@ -2,11 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await-closure.rs:16:18\n    |\n LL | async fn make_u32() -> u32 {\n-   |                        --- the `Output` of this `async fn`'s found opaque type\n+   |                        --- checked the `Output` of this `async fn`, found opaque type\n ...\n LL |         take_u32(x)\n    |                  ^ expected `u32`, found opaque type\n    |\n+   = note: while checking the return type of the `async fn`\n    = note:     expected type `u32`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`"}, {"sha": "14b5ee95ee8ba6fa3df34fb88be34eadf9e23886", "filename": "src/test/ui/async-await/suggest-missing-await.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fsuggest-missing-await.stderr?ref=356beb3084e2a76283a19218d7cef5954d7f79ae", "patch": "@@ -2,11 +2,12 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:12:14\n    |\n LL | async fn make_u32() -> u32 {\n-   |                        --- the `Output` of this `async fn`'s found opaque type\n+   |                        --- checked the `Output` of this `async fn`, found opaque type\n ...\n LL |     take_u32(x)\n    |              ^ expected `u32`, found opaque type\n    |\n+   = note: while checking the return type of the `async fn`\n    = note:     expected type `u32`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`\n@@ -18,11 +19,12 @@ error[E0308]: mismatched types\n   --> $DIR/suggest-missing-await.rs:22:5\n    |\n LL | async fn dummy() {}\n-   |                  - the `Output` of this `async fn`'s found opaque type\n+   |                  - checked the `Output` of this `async fn`, found opaque type\n ...\n LL |     dummy()\n    |     ^^^^^^^ expected `()`, found opaque type\n    |\n+   = note: while checking the return type of the `async fn`\n    = note: expected unit type `()`\n             found opaque type `impl Future`\n help: consider `await`ing on the `Future`"}, {"sha": "2e513415e6c64fdbcf862e3fe1a333ba2781ccf2", "filename": "src/test/ui/parser/fn-header-semantic-fail.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffn-header-semantic-fail.stderr?ref=356beb3084e2a76283a19218d7cef5954d7f79ae", "patch": "@@ -189,9 +189,10 @@ LL |         async fn ft1();\n LL |         async fn ft1() {}\n    |                        ^\n    |                        |\n-   |                        the `Output` of this `async fn`'s found opaque type\n+   |                        checked the `Output` of this `async fn`, found opaque type\n    |                        expected `()`, found opaque type\n    |\n+   = note: while checking the return type of the `async fn`\n    = note: expected fn pointer `fn()`\n               found fn pointer `fn() -> impl Future`\n \n@@ -204,9 +205,10 @@ LL |         const async unsafe extern \"C\" fn ft5();\n LL |         const async unsafe extern \"C\" fn ft5() {}\n    |                                                ^\n    |                                                |\n-   |                                                the `Output` of this `async fn`'s found opaque type\n+   |                                                checked the `Output` of this `async fn`, found opaque type\n    |                                                expected `()`, found opaque type\n    |\n+   = note: while checking the return type of the `async fn`\n    = note: expected fn pointer `unsafe extern \"C\" fn()`\n               found fn pointer `unsafe extern \"C\" fn() -> impl Future`\n "}, {"sha": "4025b5030dc0fc8b49f6eb4ea7768a62e062da00", "filename": "src/test/ui/resolve/issue-70736-async-fn-no-body-def-collector.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-70736-async-fn-no-body-def-collector.stderr?ref=356beb3084e2a76283a19218d7cef5954d7f79ae", "patch": "@@ -53,9 +53,10 @@ LL |     async fn associated();\n LL |     async fn associated();\n    |                          ^\n    |                          |\n-   |                          the `Output` of this `async fn`'s found opaque type\n+   |                          checked the `Output` of this `async fn`, found opaque type\n    |                          expected `()`, found opaque type\n    |\n+   = note: while checking the return type of the `async fn`\n    = note: expected fn pointer `fn()`\n               found fn pointer `fn() -> impl Future`\n "}, {"sha": "f90765870873010b5d5562e90cb4e85ec9554ee8", "filename": "src/test/ui/suggestions/issue-81839.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-81839.stderr?ref=356beb3084e2a76283a19218d7cef5954d7f79ae", "patch": "@@ -17,8 +17,9 @@ LL | |     }\n   ::: $DIR/auxiliary/issue-81839.rs:6:49\n    |\n LL |       pub async fn answer_str(&self, _s: &str) -> Test {\n-   |                                                   ---- the `Output` of this `async fn`'s found opaque type\n+   |                                                   ---- checked the `Output` of this `async fn`, found opaque type\n    |\n+   = note: while checking the return type of the `async fn`\n    = note:     expected type `()`\n            found opaque type `impl Future`\n "}, {"sha": "3b2cff3140d639c45f64a85e52e71e92bfa8b944", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.rs?ref=356beb3084e2a76283a19218d7cef5954d7f79ae", "patch": "@@ -13,9 +13,9 @@ fn extra_semicolon() {\n     };\n }\n \n-async fn async_dummy() {} //~ NOTE the `Output` of this `async fn`'s found opaque type\n-async fn async_dummy2() {} //~ NOTE the `Output` of this `async fn`'s found opaque type\n-//~^ NOTE the `Output` of this `async fn`'s found opaque type\n+async fn async_dummy() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n+async fn async_dummy2() {} //~ NOTE checked the `Output` of this `async fn`, found opaque type\n+//~| NOTE checked the `Output` of this `async fn`, found opaque type\n \n async fn async_extra_semicolon_same() {\n     let _ = match true { //~ NOTE `match` arms have incompatible types\n@@ -26,6 +26,7 @@ async fn async_extra_semicolon_same() {\n         false => async_dummy(), //~ ERROR `match` arms have incompatible types\n         //~^ NOTE expected `()`, found opaque type\n         //~| NOTE expected type `()`\n+        //~| NOTE while checking the return type of the `async fn`\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -39,6 +40,7 @@ async fn async_extra_semicolon_different() {\n         false => async_dummy2(), //~ ERROR `match` arms have incompatible types\n         //~^ NOTE expected `()`, found opaque type\n         //~| NOTE expected type `()`\n+        //~| NOTE while checking the return type of the `async fn`\n         //~| HELP consider `await`ing on the `Future`\n     };\n }\n@@ -51,6 +53,7 @@ async fn async_different_futures() {\n         //~^ NOTE expected opaque type, found a different opaque type\n         //~| NOTE expected type `impl Future`\n         //~| NOTE distinct uses of `impl Trait` result in different opaque types\n+        //~| NOTE while checking the return type of the `async fn`\n     };\n }\n "}, {"sha": "e31ea9679b51dca13f6af09618a6050f4d6531cb", "filename": "src/test/ui/suggestions/match-prev-arm-needing-semi.stderr", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/356beb3084e2a76283a19218d7cef5954d7f79ae/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmatch-prev-arm-needing-semi.stderr?ref=356beb3084e2a76283a19218d7cef5954d7f79ae", "patch": "@@ -2,7 +2,7 @@ error[E0308]: `match` arms have incompatible types\n   --> $DIR/match-prev-arm-needing-semi.rs:26:18\n    |\n LL |   async fn async_dummy() {}\n-   |                          - the `Output` of this `async fn`'s found opaque type\n+   |                          - checked the `Output` of this `async fn`, found opaque type\n ...\n LL |       let _ = match true {\n    |  _____________-\n@@ -18,6 +18,7 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n+   = note: while checking the return type of the `async fn`\n    = note:     expected type `()`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`\n@@ -30,10 +31,10 @@ LL |             async_dummy()\n    |                         --\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:39:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:40:18\n    |\n LL |   async fn async_dummy2() {}\n-   |                           - the `Output` of this `async fn`'s found opaque type\n+   |                           - checked the `Output` of this `async fn`, found opaque type\n ...\n LL |       let _ = match true {\n    |  _____________-\n@@ -49,6 +50,7 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n+   = note: while checking the return type of the `async fn`\n    = note:     expected type `()`\n            found opaque type `impl Future`\n help: consider `await`ing on the `Future`\n@@ -64,10 +66,10 @@ LL |         false => Box::new(async_dummy2()),\n    |\n \n error[E0308]: `match` arms have incompatible types\n-  --> $DIR/match-prev-arm-needing-semi.rs:50:18\n+  --> $DIR/match-prev-arm-needing-semi.rs:52:18\n    |\n LL |   async fn async_dummy2() {}\n-   |                           - the `Output` of this `async fn`'s found opaque type\n+   |                           - checked the `Output` of this `async fn`, found opaque type\n ...\n LL |       let _ = match true {\n    |  _____________-\n@@ -81,6 +83,7 @@ LL | |\n LL | |     };\n    | |_____- `match` arms have incompatible types\n    |\n+   = note: while checking the return type of the `async fn`\n    = note:     expected type `impl Future` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:16:24>)\n            found opaque type `impl Future` (opaque type at <$DIR/match-prev-arm-needing-semi.rs:17:25>)\n    = note: distinct uses of `impl Trait` result in different opaque types"}]}