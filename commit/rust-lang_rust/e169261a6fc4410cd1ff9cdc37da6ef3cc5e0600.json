{"sha": "e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600", "node_id": "C_kwDOAAsO6NoAKGUxNjkyNjFhNmZjNDQxMGNkMWZmOWNkYzM3ZGE2ZWYzY2M1ZTA2MDA", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-03-24T09:59:28Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2022-03-24T10:12:41Z"}, "message": "debuginfo: Fix debuginfo for Box<T> where T is unsized.\n\nBefore this fix, the debuginfo for the fields was generated from the\nstruct defintion of Box<T>, but (at least at the moment) the compiler\npretends that Box<T> is just a (fat) pointer, so the fields need to be\n`pointer` and `vtable` instead of `__0: Unique<T>` and `__1: Allocator`.\n\nThis is meant as a temporary mitigation until we can make sure that\nsimply treating Box as a regular struct in debuginfo does not cause too\nmuch breakage in the ecosystem.", "tree": {"sha": "8ab3caaab85b2286ebcd229b292da008010e2d6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ab3caaab85b2286ebcd229b292da008010e2d6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600", "html_url": "https://github.com/rust-lang/rust/commit/e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "600a80dedf71ce02e778e59f4884866c3030c819", "url": "https://api.github.com/repos/rust-lang/rust/commits/600a80dedf71ce02e778e59f4884866c3030c819", "html_url": "https://github.com/rust-lang/rust/commit/600a80dedf71ce02e778e59f4884866c3030c819"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "74e194750faddffe269347358d223140586a3bfc", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600", "patch": "@@ -166,6 +166,13 @@ fn build_pointer_or_reference_di_node<'ll, 'tcx>(\n     pointee_type: Ty<'tcx>,\n     unique_type_id: UniqueTypeId<'tcx>,\n ) -> DINodeCreationResult<'ll> {\n+    // The debuginfo generated by this function is only valid if `ptr_type` is really just\n+    // a (fat) pointer. Make sure it is not called for e.g. `Box<T, NonZSTAllocator>`.\n+    debug_assert_eq!(\n+        cx.size_and_align_of(ptr_type),\n+        cx.size_and_align_of(cx.tcx.mk_mut_ptr(pointee_type))\n+    );\n+\n     let pointee_type_di_node = type_di_node(cx, pointee_type);\n \n     return_if_di_node_created_in_meantime!(cx, unique_type_id);\n@@ -212,7 +219,17 @@ fn build_pointer_or_reference_di_node<'ll, 'tcx>(\n                     DIFlags::FlagZero,\n                 ),\n                 |cx, owner| {\n-                    let layout = cx.layout_of(ptr_type);\n+                    // FIXME: If this fat pointer is a `Box` then we don't want to use its\n+                    //        type layout and instead use the layout of the raw pointer inside\n+                    //        of it.\n+                    //        The proper way to handle this is to not treat Box as a pointer\n+                    //        at all and instead emit regular struct debuginfo for it. We just\n+                    //        need to make sure that we don't break existing debuginfo consumers\n+                    //        by doing that (at least not without a warning period).\n+                    let layout_type =\n+                        if ptr_type.is_box() { cx.tcx.mk_mut_ptr(pointee_type) } else { ptr_type };\n+\n+                    let layout = cx.layout_of(layout_type);\n                     let addr_field = layout.field(cx, abi::FAT_PTR_ADDR);\n                     let extra_field = layout.field(cx, abi::FAT_PTR_EXTRA);\n "}, {"sha": "7cb0002ca512510020aa49d8f3a2a85af530490d", "filename": "src/test/debuginfo/unsized.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600/src%2Ftest%2Fdebuginfo%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600/src%2Ftest%2Fdebuginfo%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Funsized.rs?ref=e169261a6fc4410cd1ff9cdc37da6ef3cc5e0600", "patch": "@@ -16,13 +16,17 @@\n // gdbg-check:$3 = {pointer = [...], vtable = [...]}\n // gdbr-check:$3 = &unsized::Foo<dyn core::fmt::Debug> {pointer: [...], vtable: [...]}\n \n+// gdb-command:print _box\n+// gdbg-check:$4 = {pointer = [...], vtable = [...]}\n+// gdbr-check:$4 = alloc::boxed::Box<unsized::Foo<dyn core::fmt::Debug>, alloc::alloc::Global> {pointer: [...], vtable: [...]}\n+\n // gdb-command:print tuple_slice\n-// gdbg-check:$4 = {data_ptr = [...], length = 2}\n-// gdbr-check:$4 = &(i32, i32, [i32]) {data_ptr: [...], length: 2}\n+// gdbg-check:$5 = {data_ptr = [...], length = 2}\n+// gdbr-check:$5 = &(i32, i32, [i32]) {data_ptr: [...], length: 2}\n \n // gdb-command:print tuple_dyn\n-// gdbg-check:$5 = {pointer = [...], vtable = [...]}\n-// gdbr-check:$5 = &(i32, i32, dyn core::fmt::Debug) {pointer: [...], vtable: [...]}\n+// gdbg-check:$6 = {pointer = [...], vtable = [...]}\n+// gdbr-check:$6 = &(i32, i32, dyn core::fmt::Debug) {pointer: [...], vtable: [...]}\n \n // === CDB TESTS ===================================================================================\n \n@@ -42,6 +46,12 @@\n // cdb-check:    [+0x000] pointer          : 0x[...] [Type: unsized::Foo<dyn$<core::fmt::Debug> > *]\n // cdb-check:    [...] vtable           : 0x[...] [Type: unsigned [...]int[...] (*)[3]]\n \n+// cdb-command:dx _box\n+// cdb-check:\n+// cdb-check:_box             [Type: alloc::boxed::Box<unsized::Foo<dyn$<core::fmt::Debug> >,alloc::alloc::Global>]\n+// cdb-check:[+0x000] pointer          : 0x[...] [Type: unsized::Foo<dyn$<core::fmt::Debug> > *]\n+// cdb-check:[...] vtable           : 0x[...] [Type: unsigned [...]int[...] (*)[3]]\n+\n // cdb-command:dx tuple_slice\n // cdb-check:tuple_slice      [Type: ref$<tuple$<i32,i32,slice$<i32> > >]\n // cdb-check:    [+0x000] data_ptr         : 0x[...] [Type: tuple$<i32,i32,slice$<i32> > *]\n@@ -69,6 +79,7 @@ fn main() {\n     let a: &Foo<[u8]> = &foo.value;\n     let b: &Foo<Foo<[u8]>> = &foo;\n     let c: &Foo<dyn std::fmt::Debug> = &Foo { value: 7i32 };\n+    let _box: Box<Foo<dyn std::fmt::Debug>> = Box::new(Foo { value: 8i32 });\n \n     // Also check unsized tuples\n     let tuple_slice: &(i32, i32, [i32]) = &(0, 1, [2, 3]);"}]}