{"sha": "641bf083969ce1bd519d8270c1985c9a86f3a0af", "node_id": "C_kwDOAAsO6NoAKDY0MWJmMDgzOTY5Y2UxYmQ1MTlkODI3MGMxOTg1YzlhODZmM2EwYWY", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-10-25T14:27:21Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2022-10-25T21:24:39Z"}, "message": "Don't merge inline doc comments for impl blocks", "tree": {"sha": "7b7b21f3236c37261374e862c0ea784e4f4f30db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b7b21f3236c37261374e862c0ea784e4f4f30db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/641bf083969ce1bd519d8270c1985c9a86f3a0af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/641bf083969ce1bd519d8270c1985c9a86f3a0af", "html_url": "https://github.com/rust-lang/rust/commit/641bf083969ce1bd519d8270c1985c9a86f3a0af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/641bf083969ce1bd519d8270c1985c9a86f3a0af/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dff99f46c7698c4e7ca231572e4c3794b6b52b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dff99f46c7698c4e7ca231572e4c3794b6b52b5", "html_url": "https://github.com/rust-lang/rust/commit/1dff99f46c7698c4e7ca231572e4c3794b6b52b5"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "88592494493be71842957ba1c6d647f7cdb71680", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 35, "deletions": 8, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/641bf083969ce1bd519d8270c1985c9a86f3a0af/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/641bf083969ce1bd519d8270c1985c9a86f3a0af/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=641bf083969ce1bd519d8270c1985c9a86f3a0af", "patch": "@@ -55,12 +55,39 @@ pub(crate) fn try_inline(\n     let mut ret = Vec::new();\n \n     debug!(\"attrs={:?}\", attrs);\n-    let attrs_clone = attrs;\n+\n+    let attrs_without_docs = attrs.map(|attrs| {\n+        attrs.into_iter().filter(|a| a.doc_str().is_none()).cloned().collect::<Vec<_>>()\n+    });\n+    // We need this ugly code because:\n+    //\n+    // ```\n+    // attrs_without_docs.map(|a| a.as_slice())\n+    // ```\n+    //\n+    // will fail because it returns a temporary slice and:\n+    //\n+    // ```\n+    // attrs_without_docs.map(|s| {\n+    //     vec = s.as_slice();\n+    //     vec\n+    // })\n+    // ```\n+    //\n+    // will fail because we're moving an uninitialized variable into a closure.\n+    let vec;\n+    let attrs_without_docs = match attrs_without_docs {\n+        Some(s) => {\n+            vec = s;\n+            Some(vec.as_slice())\n+        }\n+        None => None,\n+    };\n \n     let kind = match res {\n         Res::Def(DefKind::Trait, did) => {\n             record_extern_fqn(cx, did, ItemType::Trait);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::TraitItem(Box::new(build_external_trait(cx, did)))\n         }\n         Res::Def(DefKind::Fn, did) => {\n@@ -69,27 +96,27 @@ pub(crate) fn try_inline(\n         }\n         Res::Def(DefKind::Struct, did) => {\n             record_extern_fqn(cx, did, ItemType::Struct);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::StructItem(build_struct(cx, did))\n         }\n         Res::Def(DefKind::Union, did) => {\n             record_extern_fqn(cx, did, ItemType::Union);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::UnionItem(build_union(cx, did))\n         }\n         Res::Def(DefKind::TyAlias, did) => {\n             record_extern_fqn(cx, did, ItemType::Typedef);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::TypedefItem(build_type_alias(cx, did))\n         }\n         Res::Def(DefKind::Enum, did) => {\n             record_extern_fqn(cx, did, ItemType::Enum);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::EnumItem(build_enum(cx, did))\n         }\n         Res::Def(DefKind::ForeignTy, did) => {\n             record_extern_fqn(cx, did, ItemType::ForeignType);\n-            build_impls(cx, Some(parent_module), did, attrs, &mut ret);\n+            build_impls(cx, Some(parent_module), did, attrs_without_docs, &mut ret);\n             clean::ForeignTypeItem\n         }\n         // Never inline enum variants but leave them shown as re-exports.\n@@ -123,7 +150,7 @@ pub(crate) fn try_inline(\n         _ => return None,\n     };\n \n-    let (attrs, cfg) = merge_attrs(cx, Some(parent_module), load_attrs(cx, did), attrs_clone);\n+    let (attrs, cfg) = merge_attrs(cx, Some(parent_module), load_attrs(cx, did), attrs);\n     cx.inlined.insert(did.into());\n     let mut item = clean::Item::from_def_id_and_attrs_and_parts(\n         did,"}]}