{"sha": "3cb0fcb803602994c374bbc556a40da4bc5199ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYjBmY2I4MDM2MDI5OTRjMzc0YmJjNTU2YTQwZGE0YmM1MTk5YWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-19T17:20:30Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-19T19:05:32Z"}, "message": "De-export core::comm", "tree": {"sha": "4633f8e246bb3b2b0103934d696610d000520a92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4633f8e246bb3b2b0103934d696610d000520a92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cb0fcb803602994c374bbc556a40da4bc5199ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb0fcb803602994c374bbc556a40da4bc5199ac", "html_url": "https://github.com/rust-lang/rust/commit/3cb0fcb803602994c374bbc556a40da4bc5199ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cb0fcb803602994c374bbc556a40da4bc5199ac/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29", "html_url": "https://github.com/rust-lang/rust/commit/0c82c00dc4f49aeb9b57c92c9a40ae35d8a1ee29"}], "stats": {"total": 29, "additions": 10, "deletions": 19}, "files": [{"sha": "9f272b504088a240267aace5c4e2476dc3c4f38b", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 10, "deletions": 19, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3cb0fcb803602994c374bbc556a40da4bc5199ac/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb0fcb803602994c374bbc556a40da4bc5199ac/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=3cb0fcb803602994c374bbc556a40da4bc5199ac", "patch": "@@ -30,15 +30,6 @@\n use either::Either;\n use libc::size_t;\n \n-export Port;\n-export Chan;\n-export send;\n-export recv;\n-export peek;\n-export recv_chan;\n-export select2;\n-export methods;\n-export listen;\n \n \n /**\n@@ -48,7 +39,7 @@ export listen;\n  * transmitted. If a port value is copied, both copies refer to the same\n  * port.  Ports may be associated with multiple `chan`s.\n  */\n-enum Port<T: Send> {\n+pub enum Port<T: Send> {\n     Port_(@PortPtr<T>)\n }\n \n@@ -64,12 +55,12 @@ enum Port<T: Send> {\n  * data will be silently dropped.  Channels may be duplicated and\n  * themselves transmitted over other channels.\n  */\n-enum Chan<T: Send> {\n+pub enum Chan<T: Send> {\n     Chan_(port_id)\n }\n \n /// Constructs a port\n-fn Port<T: Send>() -> Port<T> {\n+pub fn Port<T: Send>() -> Port<T> {\n     Port_(@PortPtr(rustrt::new_port(sys::size_of::<T>() as size_t)))\n }\n \n@@ -92,7 +83,7 @@ impl<T: Send> Chan<T> {\n }\n \n /// Open a new receiving channel for the duration of a function\n-fn listen<T: Send, U>(f: fn(Chan<T>) -> U) -> U {\n+pub fn listen<T: Send, U>(f: fn(Chan<T>) -> U) -> U {\n     let po = Port();\n     f(po.chan())\n }\n@@ -167,15 +158,15 @@ fn as_raw_port<T: Send, U>(ch: comm::Chan<T>, f: fn(*rust_port) -> U) -> U {\n  * Constructs a channel. The channel is bound to the port used to\n  * construct it.\n  */\n-fn Chan<T: Send>(p: Port<T>) -> Chan<T> {\n+pub fn Chan<T: Send>(p: Port<T>) -> Chan<T> {\n     Chan_(rustrt::get_port_id((**p).po))\n }\n \n /**\n  * Sends data over a channel. The sent data is moved into the channel,\n  * whereupon the caller loses access to it.\n  */\n-fn send<T: Send>(ch: Chan<T>, +data: T) {\n+pub fn send<T: Send>(ch: Chan<T>, +data: T) {\n     let Chan_(p) = ch;\n     let data_ptr = ptr::addr_of(data) as *();\n     let res = rustrt::rust_port_id_send(p, data_ptr);\n@@ -190,13 +181,13 @@ fn send<T: Send>(ch: Chan<T>, +data: T) {\n  * Receive from a port.  If no data is available on the port then the\n  * task will block until data becomes available.\n  */\n-fn recv<T: Send>(p: Port<T>) -> T { recv_((**p).po) }\n+pub fn recv<T: Send>(p: Port<T>) -> T { recv_((**p).po) }\n \n /// Returns true if there are messages available\n-fn peek<T: Send>(p: Port<T>) -> bool { peek_((**p).po) }\n+pub fn peek<T: Send>(p: Port<T>) -> bool { peek_((**p).po) }\n \n #[doc(hidden)]\n-fn recv_chan<T: Send>(ch: comm::Chan<T>) -> T {\n+pub fn recv_chan<T: Send>(ch: comm::Chan<T>) -> T {\n     as_raw_port(ch, |x|recv_(x))\n }\n \n@@ -231,7 +222,7 @@ fn peek_(p: *rust_port) -> bool {\n }\n \n /// Receive on one of two ports\n-fn select2<A: Send, B: Send>(p_a: Port<A>, p_b: Port<B>)\n+pub fn select2<A: Send, B: Send>(p_a: Port<A>, p_b: Port<B>)\n     -> Either<A, B> {\n     let ports = ~[(**p_a).po, (**p_b).po];\n     let yield = 0, yieldp = ptr::addr_of(yield);"}]}