{"sha": "157d0f03ab9f1a7d50fa00f4d2a26c816fca9200", "node_id": "C_kwDOAAsO6NoAKDE1N2QwZjAzYWI5ZjFhN2Q1MGZhMDBmNGQyYTI2YzgxNmZjYTkyMDA", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-06-06T20:00:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-06T20:00:19Z"}, "message": "Rollup merge of #112310 - loongarch-rs:bare-metal, r=WaffleLapkin\n\nAdd new Tier-3 targets: `loongarch64-unknown-none*`\n\nThis PR adds new Tier-3 targets `loongarch64-unknown-none*` that are introduced by MCP rust-lang/compiler-team#628", "tree": {"sha": "75f4373e763d396845804009fdad02ddb88018e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75f4373e763d396845804009fdad02ddb88018e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkf5BTCRBK7hj4Ov3rIwAAbAMIAGspgzoNKPI+dNvEM15gcn54\nzQ010gw+h4niHhHTXBbv17S9w3LWu5mRaGnSSSg7fsrpaSAEHoTeHuJCTAyHODuM\n5UF9S7l47jcZSul9EUllTUulpKytJagOSmeINPkIDYeSLKhAhhD8KXosYYdJal2i\nGZZdHLoWVwMOvH0IezMARnVLn5I+ooY6CWuUhmUpZI2Z0kB+ifFoR/ilMAgnuunl\nynDfPn70aK3xHtKayXkCRYCY9BY7dCgEO3Wq3fnTrkWTbY5yPKORNJinh4SxSVQS\nq+EuSQMlhFHKlSlXbhXjh+7tnN2AVxOUNI/39E8jvXYSAPEFWsakVCSWx4q0fLU=\n=qip7\n-----END PGP SIGNATURE-----\n", "payload": "tree 75f4373e763d396845804009fdad02ddb88018e1\nparent 1788d49789060ede846df1dbd8762e9cb40e0ae0\nparent bd32075934ca2825e6b51d246e19670941598240\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1686081619 +0200\ncommitter GitHub <noreply@github.com> 1686081619 +0200\n\nRollup merge of #112310 - loongarch-rs:bare-metal, r=WaffleLapkin\n\nAdd new Tier-3 targets: `loongarch64-unknown-none*`\n\nThis PR adds new Tier-3 targets `loongarch64-unknown-none*` that are introduced by MCP rust-lang/compiler-team#628\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200", "html_url": "https://github.com/rust-lang/rust/commit/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1788d49789060ede846df1dbd8762e9cb40e0ae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1788d49789060ede846df1dbd8762e9cb40e0ae0", "html_url": "https://github.com/rust-lang/rust/commit/1788d49789060ede846df1dbd8762e9cb40e0ae0"}, {"sha": "bd32075934ca2825e6b51d246e19670941598240", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd32075934ca2825e6b51d246e19670941598240", "html_url": "https://github.com/rust-lang/rust/commit/bd32075934ca2825e6b51d246e19670941598240"}], "stats": {"total": 132, "additions": 132, "deletions": 0}, "files": [{"sha": "618250591ad880d7bbdeaddd900c4bd6cfd6152f", "filename": "compiler/rustc_target/src/spec/loongarch64_unknown_none.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_none.rs?ref=157d0f03ab9f1a7d50fa00f4d2a26c816fca9200", "patch": "@@ -0,0 +1,23 @@\n+use super::{Cc, CodeModel, LinkerFlavor, Lld, PanicStrategy};\n+use super::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"loongarch64-unknown-none\".into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        arch: \"loongarch64\".into(),\n+        options: TargetOptions {\n+            cpu: \"generic\".into(),\n+            features: \"+f,+d\".into(),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::No),\n+            llvm_abiname: \"lp64d\".into(),\n+            max_atomic_width: Some(64),\n+            position_independent_executables: true,\n+            static_position_independent_executables: true,\n+            panic_strategy: PanicStrategy::Abort,\n+            code_model: Some(CodeModel::Small),\n+            ..Default::default()\n+        },\n+    }\n+}"}, {"sha": "23123d7630c8b16d63ff0f979739f140700bee1e", "filename": "compiler/rustc_target/src/spec/loongarch64_unknown_none_softfloat.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_none_softfloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_none_softfloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Floongarch64_unknown_none_softfloat.rs?ref=157d0f03ab9f1a7d50fa00f4d2a26c816fca9200", "patch": "@@ -0,0 +1,24 @@\n+use super::{Cc, CodeModel, LinkerFlavor, Lld, PanicStrategy};\n+use super::{Target, TargetOptions};\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"loongarch64-unknown-none-softfloat\".into(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p:64:64-i64:64-i128:128-n64-S128\".into(),\n+        arch: \"loongarch64\".into(),\n+        options: TargetOptions {\n+            cpu: \"generic\".into(),\n+            features: \"-f,-d\".into(),\n+            abi: \"softfloat\".into(),\n+            linker_flavor: LinkerFlavor::Gnu(Cc::No, Lld::No),\n+            llvm_abiname: \"lp64s\".into(),\n+            max_atomic_width: Some(64),\n+            position_independent_executables: true,\n+            static_position_independent_executables: true,\n+            panic_strategy: PanicStrategy::Abort,\n+            code_model: Some(CodeModel::Small),\n+            ..Default::default()\n+        },\n+    }\n+}"}, {"sha": "0a9a50652f52876fe05f9910dfe1bbc5de2231e0", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=157d0f03ab9f1a7d50fa00f4d2a26c816fca9200", "patch": "@@ -1293,6 +1293,9 @@ supported_targets! {\n     (\"riscv64gc-unknown-linux-gnu\", riscv64gc_unknown_linux_gnu),\n     (\"riscv64gc-unknown-linux-musl\", riscv64gc_unknown_linux_musl),\n \n+    (\"loongarch64-unknown-none\", loongarch64_unknown_none),\n+    (\"loongarch64-unknown-none-softfloat\", loongarch64_unknown_none_softfloat),\n+\n     (\"aarch64-unknown-none\", aarch64_unknown_none),\n     (\"aarch64-unknown-none-softfloat\", aarch64_unknown_none_softfloat),\n "}, {"sha": "2b0431a159b1bde70fe6389293377e9ccaad678e", "filename": "src/doc/rustc/src/SUMMARY.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2FSUMMARY.md?ref=157d0f03ab9f1a7d50fa00f4d2a26c816fca9200", "patch": "@@ -31,6 +31,7 @@\n     - [\\*-unknown-fuchsia](platform-support/fuchsia.md)\n     - [\\*-kmc-solid_\\*](platform-support/kmc-solid.md)\n     - [loongarch\\*-unknown-linux-\\*](platform-support/loongarch-linux.md)\n+    - [loongarch\\*-unknown-none\\*](platform-support/loongarch-none.md)\n     - [m68k-unknown-linux-gnu](platform-support/m68k-unknown-linux-gnu.md)\n     - [mips64-openwrt-linux-musl](platform-support/mips64-openwrt-linux-musl.md)\n     - [mipsel-sony-psx](platform-support/mipsel-sony-psx.md)"}, {"sha": "5a7da882af019359e049611b2816e8d099493292", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=157d0f03ab9f1a7d50fa00f4d2a26c816fca9200", "patch": "@@ -267,6 +267,8 @@ target | std | host | notes\n `i686-uwp-windows-gnu` | ? |  |\n `i686-uwp-windows-msvc` | ? |  |\n `i686-wrs-vxworks` | ? |  |\n+[`loongarch64-unknown-none`](platform-support/loongarch-none.md) | * | LoongArch64 Bare-metal (LP64D ABI)\n+[`loongarch64-unknown-none-softfloat`](platform-support/loongarch-none.md) | * | LoongArch64 Bare-metal (LP64S ABI)\n [`m68k-unknown-linux-gnu`](platform-support/m68k-unknown-linux-gnu.md) | ? |  | Motorola 680x0 Linux\n `mips-unknown-linux-uclibc` | \u2713 |  | MIPS Linux with uClibc\n [`mips64-openwrt-linux-musl`](platform-support/mips64-openwrt-linux-musl.md) | ? |  | MIPS64 for OpenWrt Linux MUSL"}, {"sha": "d0ae3425fa8eb8dfb39cc27c4ae12730e5281476", "filename": "src/doc/rustc/src/platform-support/loongarch-none.md", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-none.md", "raw_url": "https://github.com/rust-lang/rust/raw/157d0f03ab9f1a7d50fa00f4d2a26c816fca9200/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-none.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support%2Floongarch-none.md?ref=157d0f03ab9f1a7d50fa00f4d2a26c816fca9200", "patch": "@@ -0,0 +1,79 @@\n+# `loongarch*-unknown-none*`\n+\n+**Tier: 3**\n+\n+Freestanding/bare-metal LoongArch64 binaries in ELF format: firmware, kernels, etc.\n+\n+| Target                             | Descriptions                                          |\n+|------------------------------------|-------------------------------------------------------|\n+| loongarch64-unknown-none           | LoongArch 64-bit, LP64D ABI (freestanding, hardfloat) |\n+| loongarch64-unknown-none-softfloat | LoongArch 64-bit, LP64S ABI (freestanding, softfloat) |\n+\n+## Target maintainers\n+\n+- [WANG Rui](https://github.com/heiher) `wangrui@loongson.cn`\n+- [WANG Xuerui](https://github.com/xen0n) `git@xen0n.name`\n+\n+## Requirements\n+\n+This target is cross-compiled. There is no support for `std`. There is no\n+default allocator, but it's possible to use `alloc` by supplying an allocator.\n+\n+This allows the generated code to run in environments, such as kernels, which\n+may need to avoid the use of such registers or which may have special considerations\n+about the use of such registers (e.g. saving and restoring them to avoid breaking\n+userspace code using the same registers). You can change code generation to use\n+additional CPU features via the `-C target-feature=` codegen options to rustc, or\n+via the `#[target_feature]` mechanism within Rust code.\n+\n+By default, code generated with this target should run on any `loongarch`\n+hardware; enabling additional target features may raise this baseline.\n+\n+Code generated with this target will use the `small` code model by default.\n+You can change this using the `-C code-model=` option to rustc.\n+\n+On `loongarch64-unknown-none*`, `extern \"C\"` uses the [standard calling\n+convention](https://loongson.github.io/LoongArch-Documentation/LoongArch-ELF-ABI-EN.html).\n+\n+This target generates binaries in the ELF format. Any alternate formats or\n+special considerations for binary layout will require linker options or linker\n+scripts.\n+\n+## Building the target\n+\n+You can build Rust with support for the target by adding it to the `target`\n+list in `config.toml`:\n+\n+```toml\n+[build]\n+build-stage = 1\n+target = [\"loongarch64-unknown-none\"]\n+```\n+\n+## Building Rust programs\n+\n+```text\n+# target flag may be used with any cargo or rustc command\n+cargo build --target loongarch64-unknown-none\n+```\n+\n+## Testing\n+\n+As `loongarch64-unknown-none*` supports a variety of different environments and does\n+not support `std`, this target does not support running the Rust test suite.\n+\n+## Cross-compilation toolchains and C code\n+\n+If you want to compile C code along with Rust (such as for Rust crates with C\n+dependencies), you will need an appropriate `loongarch` toolchain.\n+\n+Rust *may* be able to use an `loongarch64-unknown-linux-gnu-` toolchain with\n+appropriate standalone flags to build for this toolchain (depending on the assumptions\n+of that toolchain, see below), or you may wish to use a separate\n+`loongarch64-unknown-none` toolchain.\n+\n+On some `loongarch` hosts that use ELF binaries, you *may* be able to use the host\n+C toolchain, if it does not introduce assumptions about the host environment\n+that don't match the expectations of a standalone environment. Otherwise, you\n+may need a separate toolchain for standalone/freestanding development, just as\n+when cross-compiling from a non-`loongarch` platform."}]}