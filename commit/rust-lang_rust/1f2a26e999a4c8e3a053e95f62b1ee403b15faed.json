{"sha": "1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "node_id": "C_kwDOAAsO6NoAKDFmMmEyNmU5OTlhNGM4ZTNhMDUzZTk1ZjYyYjFlZTQwM2IxNWZhZWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-04T23:37:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-04T23:37:58Z"}, "message": "Rollup merge of #90023 - b-naber:postpone_const_eval_infer_vars, r=nikomatsakis\n\nPostpone the evaluation of constant expressions that depend on inference variables\n\nPreviously `delay_span_bug` calls were triggered once an inference variable was included in the substs of a constant that was to be evaluated. Some of these would merely have resulted in trait candidates being rejected, hence no real error was ever encountered, but the triggering of the `delay_span_bug` then caused an ICE in later stages of the compiler due to no error ever occurring.\nWe now postpone the evaluation of these constants, so any trait obligation fulfillment will simply stall on this constant and the existing type inference machinery of the compiler handles any type errors if present.\n\nFixes https://github.com/rust-lang/rust/issues/89320\nFixes https://github.com/rust-lang/rust/issues/89146\nFixes https://github.com/rust-lang/rust/issues/87964\nFixes https://github.com/rust-lang/rust/issues/87470\nFixes https://github.com/rust-lang/rust/issues/83288\nFixes https://github.com/rust-lang/rust/issues/83249\nFixes https://github.com/rust-lang/rust/issues/90654\n\nI want to thank `@BoxyUwU` for cooperating on this and for providing some help.\n\nr? `@lcnr` maybe?", "tree": {"sha": "94c877d9923066b9f7e615547c4a4c7e529757e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94c877d9923066b9f7e615547c4a4c7e529757e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhq/vWCRBK7hj4Ov3rIwAAEt0IADGdxrFNjBmlX9Y1qDNb1JIy\n/d0T6qiQBCMDcdddUJlmzBKmBEdFvaldVuLPAfHsdAGl9i+/UQYXk8Fc2bKYNGjF\nZ0dr4cfeSlOdYnjmGXLwiP1UH5fmpFY9UFsVxs7wpFbly2h4ocW93ZlHZDj2WPDc\nDKFDD5E0I81Zs7tFhySIeFD2pABBNrlMQr25Eul2YBB611g2D/QA+fcuQSdWiFnD\nbHZvj+7T4+yjfhyeZTihpEFu4z9MbQJ7dPpVNKYovsTO+SX+5uVqNeOTUwM/w8MD\n3T2Vtc6Z9T8TpgzPrN6c9Xhe0JAblD3kFtMNXhr4cwMqBsyI8kIthZrDA5kE88Y=\n=I4Nk\n-----END PGP SIGNATURE-----\n", "payload": "tree 94c877d9923066b9f7e615547c4a4c7e529757e1\nparent 29fe57def2693a3f9b4fcfbb1072b4b655700260\nparent 37ed2db1e04e5b9dcdf833374d364b1f5e374fc3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638661078 +0100\ncommitter GitHub <noreply@github.com> 1638661078 +0100\n\nRollup merge of #90023 - b-naber:postpone_const_eval_infer_vars, r=nikomatsakis\n\nPostpone the evaluation of constant expressions that depend on inference variables\n\nPreviously `delay_span_bug` calls were triggered once an inference variable was included in the substs of a constant that was to be evaluated. Some of these would merely have resulted in trait candidates being rejected, hence no real error was ever encountered, but the triggering of the `delay_span_bug` then caused an ICE in later stages of the compiler due to no error ever occurring.\nWe now postpone the evaluation of these constants, so any trait obligation fulfillment will simply stall on this constant and the existing type inference machinery of the compiler handles any type errors if present.\n\nFixes https://github.com/rust-lang/rust/issues/89320\nFixes https://github.com/rust-lang/rust/issues/89146\nFixes https://github.com/rust-lang/rust/issues/87964\nFixes https://github.com/rust-lang/rust/issues/87470\nFixes https://github.com/rust-lang/rust/issues/83288\nFixes https://github.com/rust-lang/rust/issues/83249\nFixes https://github.com/rust-lang/rust/issues/90654\n\nI want to thank `@BoxyUwU` for cooperating on this and for providing some help.\n\nr? `@lcnr` maybe?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "html_url": "https://github.com/rust-lang/rust/commit/1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29fe57def2693a3f9b4fcfbb1072b4b655700260", "url": "https://api.github.com/repos/rust-lang/rust/commits/29fe57def2693a3f9b4fcfbb1072b4b655700260", "html_url": "https://github.com/rust-lang/rust/commit/29fe57def2693a3f9b4fcfbb1072b4b655700260"}, {"sha": "37ed2db1e04e5b9dcdf833374d364b1f5e374fc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ed2db1e04e5b9dcdf833374d364b1f5e374fc3", "html_url": "https://github.com/rust-lang/rust/commit/37ed2db1e04e5b9dcdf833374d364b1f5e374fc3"}], "stats": {"total": 357, "additions": 324, "deletions": 33}, "files": [{"sha": "32c02033dc9b93e4c1f77abbe944ce5d2774c5b5", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 66, "deletions": 26, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "patch": "@@ -1,5 +1,6 @@\n use crate::infer::type_variable::TypeVariableOriginKind;\n use crate::infer::InferCtxt;\n+use crate::rustc_middle::ty::TypeFoldable;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Namespace};\n@@ -400,36 +401,75 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n             GenericArgKind::Const(ct) => {\n-                if let ty::ConstKind::Infer(InferConst::Var(vid)) = ct.val {\n-                    let origin =\n-                        self.inner.borrow_mut().const_unification_table().probe_value(vid).origin;\n-                    if let ConstVariableOriginKind::ConstParameterDefinition(name, def_id) =\n-                        origin.kind\n-                    {\n-                        return InferenceDiagnosticsData {\n-                            name: name.to_string(),\n+                match ct.val {\n+                    ty::ConstKind::Infer(InferConst::Var(vid)) => {\n+                        let origin = self\n+                            .inner\n+                            .borrow_mut()\n+                            .const_unification_table()\n+                            .probe_value(vid)\n+                            .origin;\n+                        if let ConstVariableOriginKind::ConstParameterDefinition(name, def_id) =\n+                            origin.kind\n+                        {\n+                            return InferenceDiagnosticsData {\n+                                name: name.to_string(),\n+                                span: Some(origin.span),\n+                                kind: UnderspecifiedArgKind::Const { is_parameter: true },\n+                                parent: InferenceDiagnosticsParentData::for_def_id(\n+                                    self.tcx, def_id,\n+                                ),\n+                            };\n+                        }\n+\n+                        debug_assert!(!origin.span.is_dummy());\n+                        let mut s = String::new();\n+                        let mut printer =\n+                            ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::ValueNS);\n+                        if let Some(highlight) = highlight {\n+                            printer.region_highlight_mode = highlight;\n+                        }\n+                        let _ = ct.print(printer);\n+                        InferenceDiagnosticsData {\n+                            name: s,\n                             span: Some(origin.span),\n-                            kind: UnderspecifiedArgKind::Const { is_parameter: true },\n-                            parent: InferenceDiagnosticsParentData::for_def_id(self.tcx, def_id),\n-                        };\n+                            kind: UnderspecifiedArgKind::Const { is_parameter: false },\n+                            parent: None,\n+                        }\n                     }\n-\n-                    debug_assert!(!origin.span.is_dummy());\n-                    let mut s = String::new();\n-                    let mut printer =\n-                        ty::print::FmtPrinter::new(self.tcx, &mut s, Namespace::ValueNS);\n-                    if let Some(highlight) = highlight {\n-                        printer.region_highlight_mode = highlight;\n+                    ty::ConstKind::Unevaluated(ty::Unevaluated {\n+                        substs_: Some(substs), ..\n+                    }) => {\n+                        assert!(substs.has_infer_types_or_consts());\n+\n+                        // FIXME: We only use the first inference variable we encounter in\n+                        // `substs` here, this gives insufficiently informative diagnostics\n+                        // in case there are multiple inference variables\n+                        for s in substs.iter() {\n+                            match s.unpack() {\n+                                GenericArgKind::Type(t) => match t.kind() {\n+                                    ty::Infer(_) => {\n+                                        return self.extract_inference_diagnostics_data(s, None);\n+                                    }\n+                                    _ => {}\n+                                },\n+                                GenericArgKind::Const(c) => match c.val {\n+                                    ty::ConstKind::Infer(InferConst::Var(_)) => {\n+                                        return self.extract_inference_diagnostics_data(s, None);\n+                                    }\n+                                    _ => {}\n+                                },\n+                                _ => {}\n+                            }\n+                        }\n+                        bug!(\n+                            \"expected an inference variable in substs of unevaluated const {:?}\",\n+                            ct\n+                        );\n                     }\n-                    let _ = ct.print(printer);\n-                    InferenceDiagnosticsData {\n-                        name: s,\n-                        span: Some(origin.span),\n-                        kind: UnderspecifiedArgKind::Const { is_parameter: false },\n-                        parent: None,\n+                    _ => {\n+                        bug!(\"unexpect const: {:?}\", ct);\n                     }\n-                } else {\n-                    bug!(\"unexpect const: {:?}\", ct);\n                 }\n             }\n             GenericArgKind::Lifetime(_) => bug!(\"unexpected lifetime\"),"}, {"sha": "48dfa0b6342d9d90734943ba038904ba6039ffae", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "patch": "@@ -21,6 +21,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::infer::canonical::{Canonical, CanonicalVarValues};\n use rustc_middle::infer::unify_key::{ConstVarValue, ConstVariableValue};\n use rustc_middle::infer::unify_key::{ConstVariableOrigin, ConstVariableOriginKind, ToType};\n+use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::mir::interpret::EvalToConstValueResult;\n use rustc_middle::traits::select;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n@@ -1584,13 +1585,27 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         unevaluated: ty::Unevaluated<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n-        let mut original_values = OriginalQueryValues::default();\n-        let canonical = self.canonicalize_query((param_env, unevaluated), &mut original_values);\n+        let mut substs = unevaluated.substs(self.tcx);\n+        substs = self.resolve_vars_if_possible(substs);\n+\n+        // Postpone the evaluation of constants whose substs depend on inference\n+        // variables\n+        if substs.has_infer_types_or_consts() {\n+            return Err(ErrorHandled::TooGeneric);\n+        }\n+\n+        let param_env_erased = self.tcx.erase_regions(param_env);\n+        let substs_erased = self.tcx.erase_regions(substs);\n+\n+        let unevaluated = ty::Unevaluated {\n+            def: unevaluated.def,\n+            substs_: Some(substs_erased),\n+            promoted: unevaluated.promoted,\n+        };\n \n-        let (param_env, unevaluated) = canonical.value;\n         // The return value is the evaluated value which doesn't contain any reference to inference\n         // variables, thus we don't need to substitute back the original values.\n-        self.tcx.const_eval_resolve(param_env, unevaluated, span)\n+        self.tcx.const_eval_resolve(param_env_erased, unevaluated, span)\n     }\n \n     /// If `typ` is a type variable of some kind, resolve it one level"}, {"sha": "18f33acaabbba19fbcc73a699924d4c26b0cad2b", "filename": "src/test/ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.rs?ref=1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "patch": "@@ -1,4 +1,3 @@\n-// run-pass\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n \n@@ -22,8 +21,11 @@ where\n }\n \n fn main() {\n-    // Test that we can correctly infer `T` which requires evaluating\n-    // `{ N + 1 }` which has substs containing an inference var\n+    // FIXME(generic_const_exprs): We can't correctly infer `T` which requires\n+    // evaluating `{ N + 1 }` which has substs containing an inference var\n     let mut _q = Default::default();\n+    //~^ ERROR type annotations needed\n+\n     _q = foo::<_, 2>(_q);\n+    //~^ ERROR type annotations needed\n }"}, {"sha": "e59f1ac8027de3edde0a3324e2a32d848c99d57b", "filename": "src/test/ui/const-generics/generic_const_exprs/const_eval_resolve_canonical.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fconst_eval_resolve_canonical.stderr?ref=1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "patch": "@@ -0,0 +1,33 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/const_eval_resolve_canonical.rs:26:9\n+   |\n+LL |     let mut _q = Default::default();\n+   |         ^^^^^^ consider giving `_q` a type\n+\n+error[E0283]: type annotations needed\n+  --> $DIR/const_eval_resolve_canonical.rs:29:10\n+   |\n+LL |     _q = foo::<_, 2>(_q);\n+   |          ^^^^^^^^^^^ cannot infer type\n+   |\n+note: multiple `impl`s satisfying `(): Foo<{ N + 1 }>` found\n+  --> $DIR/const_eval_resolve_canonical.rs:8:1\n+   |\n+LL | impl Foo<0> for () {\n+   | ^^^^^^^^^^^^^^^^^^\n+...\n+LL | impl Foo<3> for () {\n+   | ^^^^^^^^^^^^^^^^^^\n+note: required by a bound in `foo`\n+  --> $DIR/const_eval_resolve_canonical.rs:18:9\n+   |\n+LL | fn foo<T, const N: usize>(_: T) -> <() as Foo<{ N + 1 }>>::Assoc\n+   |    --- required by a bound in this\n+LL | where\n+LL |     (): Foo<{ N + 1 }>,\n+   |         ^^^^^^^^^^^^^^ required by this bound in `foo`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0282, E0283.\n+For more information about an error, try `rustc --explain E0282`."}, {"sha": "65148c55ee54140bb40ae8ae550bd930898be274", "filename": "src/test/ui/const-generics/issues/issue-83249.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.rs?ref=1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "patch": "@@ -0,0 +1,23 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+trait Foo {\n+    const N: usize;\n+}\n+\n+impl Foo for u8 {\n+    const N: usize = 1;\n+}\n+\n+fn foo<T: Foo>(_: [u8; T::N]) -> T {\n+    todo!()\n+}\n+\n+pub fn bar() {\n+    let _: u8 = foo([0; 1]);\n+\n+    let _ = foo([0; 1]);\n+    //~^ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "402b3aa2d61dcfca63815196aa639c036f48fae0", "filename": "src/test/ui/const-generics/issues/issue-83249.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83249.stderr?ref=1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "patch": "@@ -0,0 +1,11 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/issue-83249.rs:19:13\n+   |\n+LL |     let _ = foo([0; 1]);\n+   |         -   ^^^ cannot infer type for type parameter `T` declared on the function `foo`\n+   |         |\n+   |         consider giving this pattern a type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "a24596d242e0d9ad67ec5f9b4771394f0c741968", "filename": "src/test/ui/const-generics/issues/issue-83288.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83288.rs?ref=1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "patch": "@@ -0,0 +1,69 @@\n+// build-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+use std::{marker::PhantomData, ops::Mul};\n+\n+pub enum Nil {}\n+pub struct Cons<T, L> {\n+    _phantom: PhantomData<(T, L)>,\n+}\n+\n+pub trait Indices<const N: usize> {\n+    const RANK: usize;\n+    const NUM_ELEMS: usize;\n+}\n+\n+impl<const N: usize> Indices<N> for Nil {\n+    const RANK: usize = 0;\n+    const NUM_ELEMS: usize = 1;\n+}\n+\n+impl<T, I: Indices<N>, const N: usize> Indices<N> for Cons<T, I> {\n+    const RANK: usize = I::RANK + 1;\n+    const NUM_ELEMS: usize = I::NUM_ELEMS * N;\n+}\n+\n+pub trait Concat<J> {\n+    type Output;\n+}\n+\n+impl<J> Concat<J> for Nil {\n+    type Output = J;\n+}\n+\n+impl<T, I, J> Concat<J> for Cons<T, I>\n+where\n+    I: Concat<J>,\n+{\n+    type Output = Cons<T, <I as Concat<J>>::Output>;\n+}\n+\n+pub struct Tensor<I: Indices<N>, const N: usize>\n+where\n+    [u8; I::NUM_ELEMS]: Sized,\n+{\n+    pub data: [u8; I::NUM_ELEMS],\n+    _phantom: PhantomData<I>,\n+}\n+\n+impl<I: Indices<N>, J: Indices<N>, const N: usize> Mul<Tensor<J, N>> for Tensor<I, N>\n+where\n+    I: Concat<J>,\n+    <I as Concat<J>>::Output: Indices<N>,\n+    [u8; I::NUM_ELEMS]: Sized,\n+    [u8; J::NUM_ELEMS]: Sized,\n+    [u8; <I as Concat<J>>::Output::NUM_ELEMS]: Sized,\n+{\n+    type Output = Tensor<<I as Concat<J>>::Output, N>;\n+\n+    fn mul(self, _rhs: Tensor<J, N>) -> Self::Output {\n+        Tensor {\n+            data: [0u8; <I as Concat<J>>::Output::NUM_ELEMS],\n+            _phantom: PhantomData,\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "d60181a418a157bcd59511b3d9fed427dee9ab0a", "filename": "src/test/ui/const-generics/issues/issue-87470.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87470.rs?ref=1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "patch": "@@ -0,0 +1,24 @@\n+// build-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait TraitWithConst {\n+    const SOME_CONST: usize;\n+}\n+\n+pub trait OtherTrait: TraitWithConst {\n+    fn some_fn(self) -> [u8 ; <Self as TraitWithConst>::SOME_CONST];\n+}\n+\n+impl TraitWithConst for f32 {\n+    const SOME_CONST: usize = 32;\n+}\n+\n+impl OtherTrait for f32 {\n+    fn some_fn(self) -> [u8 ; <Self as TraitWithConst>::SOME_CONST] {\n+        [0; 32]\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "116686abb9e3d93d8fdeafc432cfbeefd1caaeda", "filename": "src/test/ui/const-generics/issues/issue-87964.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87964.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87964.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-87964.rs?ref=1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "patch": "@@ -0,0 +1,29 @@\n+// build-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait Target {\n+    const LENGTH: usize;\n+}\n+\n+\n+pub struct Container<T: Target>\n+where\n+    [(); T::LENGTH]: Sized,\n+{\n+    _target: T,\n+}\n+\n+impl<T: Target> Container<T>\n+where\n+    [(); T::LENGTH]: Sized,\n+{\n+    pub fn start(\n+        _target: T,\n+    ) -> Container<T> {\n+        Container { _target }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e3540f46f1e81ef2d3a06419a1613d762efbfe8c", "filename": "src/test/ui/const-generics/issues/issue-89146.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89146.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89146.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89146.rs?ref=1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "patch": "@@ -0,0 +1,26 @@\n+// build-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+pub trait Foo {\n+    const SIZE: usize;\n+\n+    fn to_bytes(&self) -> [u8; Self::SIZE];\n+}\n+\n+pub fn bar<G: Foo>(a: &G) -> u8\n+where\n+    [(); G::SIZE]: Sized,\n+{\n+    deeper_bar(a)\n+}\n+\n+fn deeper_bar<G: Foo>(a: &G) -> u8\n+where\n+    [(); G::SIZE]: Sized,\n+{\n+    a.to_bytes()[0]\n+}\n+\n+fn main() {}"}, {"sha": "afa5c8fab74e8ed8b46759303023d1a307ff964f", "filename": "src/test/ui/const-generics/issues/issue-89320.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89320.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f2a26e999a4c8e3a053e95f62b1ee403b15faed/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89320.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-89320.rs?ref=1f2a26e999a4c8e3a053e95f62b1ee403b15faed", "patch": "@@ -0,0 +1,19 @@\n+// build-pass\n+\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]\n+\n+pub trait Enumerable {\n+    const N: usize;\n+}\n+\n+#[derive(Clone)]\n+pub struct SymmetricGroup<S>\n+where\n+    S: Enumerable,\n+    [(); S::N]: Sized,\n+{\n+    _phantom: std::marker::PhantomData<S>,\n+}\n+\n+fn main() {}"}]}