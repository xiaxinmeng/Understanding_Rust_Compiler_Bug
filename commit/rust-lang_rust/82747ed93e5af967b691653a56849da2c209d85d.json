{"sha": "82747ed93e5af967b691653a56849da2c209d85d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNzQ3ZWQ5M2U1YWY5NjdiNjkxNjUzYTU2ODQ5ZGEyYzIwOWQ4NWQ=", "commit": {"author": {"name": "Jag Talon", "email": "talon.jag@gmail.com", "date": "2014-02-25T06:17:31Z"}, "committer": {"name": "Jag Talon", "email": "talon.jag@gmail.com", "date": "2014-02-25T17:32:09Z"}, "message": "tutorial: clearer explanation of freezing.\n\n- \"Lending an immutable pointer\" might be confusing. It was not discussed why borrowed pointers are immutable in the first place.\n- Make it clear that the borrowed pointers are immutable even if the variable was declared with `mut`.\n- Make it clear that we cannot even assign anything to the variable while its value is being borrowed.\n\ntutorial: change \"--\" to an em-dash.\n\ntutorial: change instances of \"--\" to em-dash.", "tree": {"sha": "fa70094411cd81ebc185019d1f043162ba81ca93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa70094411cd81ebc185019d1f043162ba81ca93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82747ed93e5af967b691653a56849da2c209d85d", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82747ed93e5af967b691653a56849da2c209d85d", "html_url": "https://github.com/rust-lang/rust/commit/82747ed93e5af967b691653a56849da2c209d85d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82747ed93e5af967b691653a56849da2c209d85d/comments", "author": null, "committer": null, "parents": [{"sha": "043c9721791731bbf7b9d8be354a65ed25b9a6d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/043c9721791731bbf7b9d8be354a65ed25b9a6d9", "html_url": "https://github.com/rust-lang/rust/commit/043c9721791731bbf7b9d8be354a65ed25b9a6d9"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "3363f78ad0a09cae039c59eec4d38b08a6f323cc", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82747ed93e5af967b691653a56849da2c209d85d/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/82747ed93e5af967b691653a56849da2c209d85d/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=82747ed93e5af967b691653a56849da2c209d85d", "patch": "@@ -1468,14 +1468,14 @@ For a more in-depth explanation of references and lifetimes, read the\n \n ## Freezing\n \n-Lending an immutable pointer to an object freezes it and prevents mutation.\n+Lending an &-pointer to an object freezes it and prevents mutation\u2014even if the object was declared as `mut`.\n `Freeze` objects have freezing enforced statically at compile-time. An example\n of a non-`Freeze` type is [`RefCell<T>`][refcell].\n \n ~~~~\n let mut x = 5;\n {\n-    let y = &x; // `x` is now frozen, it cannot be modified\n+    let y = &x; // `x` is now frozen. It cannot be modified or re-assigned.\n }\n // `x` is now unfrozen again\n # x = 3;\n@@ -2021,8 +2021,8 @@ C++ templates.\n \n ## Traits\n \n-Within a generic function -- that is, a function parameterized by a\n-type parameter, say, `T` -- the operations we can do on arguments of\n+Within a generic function\u2014that is, a function parameterized by a\n+type parameter, say, `T`\u2014the operations we can do on arguments of\n type `T` are quite limited.  After all, since we don't know what type\n `T` will be instantiated with, we can't safely modify or query values\n of type `T`.  This is where _traits_ come into play. Traits are Rust's"}]}