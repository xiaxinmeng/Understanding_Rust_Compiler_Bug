{"sha": "f3eee0ebada8e67dbba6574567456a9f1a946d28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzZWVlMGViYWRhOGU2N2RiYmE2NTc0NTY3NDU2YTlmMWE5NDZkMjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-02T20:30:58Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-02T22:42:06Z"}, "message": "libsyntax: Fix test and merge fallout.", "tree": {"sha": "1eecb3b75809697167136ea1c451ba38ac2651fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eecb3b75809697167136ea1c451ba38ac2651fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3eee0ebada8e67dbba6574567456a9f1a946d28", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3eee0ebada8e67dbba6574567456a9f1a946d28", "html_url": "https://github.com/rust-lang/rust/commit/f3eee0ebada8e67dbba6574567456a9f1a946d28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3eee0ebada8e67dbba6574567456a9f1a946d28/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b088d493cdb38f47cd548469554e772d0331628", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b088d493cdb38f47cd548469554e772d0331628", "html_url": "https://github.com/rust-lang/rust/commit/8b088d493cdb38f47cd548469554e772d0331628"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "5a8444518aac9eb9479e1c7327236b2fdaa7ddae", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3eee0ebada8e67dbba6574567456a9f1a946d28/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3eee0ebada8e67dbba6574567456a9f1a946d28/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=f3eee0ebada8e67dbba6574567456a9f1a946d28", "patch": "@@ -635,7 +635,7 @@ mod test {\n     }\n \n     #[test] fn parse_ident_pat () {\n-        let parser = string_to_parser(@\"b\");\n+        let mut parser = string_to_parser(@\"b\");\n         assert_eq!(parser.parse_pat(),\n                    @ast::Pat{id: ast::DUMMY_NODE_ID,\n                              node: ast::PatIdent("}, {"sha": "2428710087fabb93de493e1ec8ab33ac706169e6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3eee0ebada8e67dbba6574567456a9f1a946d28/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3eee0ebada8e67dbba6574567456a9f1a946d28/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f3eee0ebada8e67dbba6574567456a9f1a946d28", "patch": "@@ -4442,12 +4442,12 @@ impl Parser {\n         }\n \n \n-        if *self.token == token::LPAREN {\n+        if self.token == token::LPAREN {\n             // `extern mod foo (name = \"bar\"[,vers = \"version\"]) is obsolete,\n             // `extern mod foo = \"bar#[version]\";` should be used.\n             // Parse obsolete options to avoid wired parser errors\n             self.parse_optional_meta();\n-            self.obsolete(*self.span, ObsoleteExternModAttributesInParens);\n+            self.obsolete(self.span, ObsoleteExternModAttributesInParens);\n         }\n         // extern mod foo;\n         self.expect(&token::SEMI);"}, {"sha": "01e050c1ffe4e4002fca404eddefaee2cf0fe52a", "filename": "src/libsyntax/util/parser_testing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3eee0ebada8e67dbba6574567456a9f1a946d28/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3eee0ebada8e67dbba6574567456a9f1a946d28/src%2Flibsyntax%2Futil%2Fparser_testing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser_testing.rs?ref=f3eee0ebada8e67dbba6574567456a9f1a946d28", "patch": "@@ -55,7 +55,7 @@ pub fn string_to_crate (source_str : @str) -> ast::Crate {\n \n // parse a string, return a crate and the ParseSess\n pub fn string_to_crate_and_sess (source_str : @str) -> (ast::Crate,@mut ParseSess) {\n-    let (p,ps) = string_to_parser_and_sess(source_str);\n+    let (mut p,ps) = string_to_parser_and_sess(source_str);\n     (p.parse_crate_mod(),ps)\n }\n "}]}