{"sha": "ea996556b93f3f322145fedb5a46fe97e8d0379a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhOTk2NTU2YjkzZjNmMzIyMTQ1ZmVkYjVhNDZmZTk3ZThkMDM3OWE=", "commit": {"author": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2012-10-30T01:08:36Z"}, "committer": {"name": "Zack Corr", "email": "zack@z0w0.me", "date": "2012-10-30T01:08:36Z"}, "message": "rusti: Remove linenoise module, add to rt, remove core::rl", "tree": {"sha": "bec65a4310ebe5a50cf093b7534b065ab80fb332", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bec65a4310ebe5a50cf093b7534b065ab80fb332"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea996556b93f3f322145fedb5a46fe97e8d0379a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea996556b93f3f322145fedb5a46fe97e8d0379a", "html_url": "https://github.com/rust-lang/rust/commit/ea996556b93f3f322145fedb5a46fe97e8d0379a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea996556b93f3f322145fedb5a46fe97e8d0379a/comments", "author": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "committer": {"login": "z0w0", "id": 676417, "node_id": "MDQ6VXNlcjY3NjQxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/676417?v=4", "gravatar_id": "", "url": "https://api.github.com/users/z0w0", "html_url": "https://github.com/z0w0", "followers_url": "https://api.github.com/users/z0w0/followers", "following_url": "https://api.github.com/users/z0w0/following{/other_user}", "gists_url": "https://api.github.com/users/z0w0/gists{/gist_id}", "starred_url": "https://api.github.com/users/z0w0/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/z0w0/subscriptions", "organizations_url": "https://api.github.com/users/z0w0/orgs", "repos_url": "https://api.github.com/users/z0w0/repos", "events_url": "https://api.github.com/users/z0w0/events{/privacy}", "received_events_url": "https://api.github.com/users/z0w0/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1afa29986fe62cf817e886412dfb6d42b2d5f7e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1afa29986fe62cf817e886412dfb6d42b2d5f7e5", "html_url": "https://github.com/rust-lang/rust/commit/1afa29986fe62cf817e886412dfb6d42b2d5f7e5"}], "stats": {"total": 888, "additions": 764, "deletions": 124}, "files": [{"sha": "d750f8eb5b7813df48138cbc7d5aeb04e772cba7", "filename": ".gitmodules", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -4,6 +4,3 @@\n [submodule \"src/libuv\"]\n \tpath = src/libuv\n \turl = git://github.com/graydon/libuv.git\n-[submodule \"src/linenoise\"]\n-\tpath = src/linenoise\n-\turl = git://github.com/antirez/linenoise.git"}, {"sha": "ffed7915d2bfced7d8781dbf1697b427de383ea1", "filename": "Makefile.in", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -74,7 +74,6 @@ endif\n \n CFG_RUSTC_FLAGS := $(RUSTFLAGS)\n CFG_GCCISH_CFLAGS :=\n-CFG_GCCISH_CXXFLAGS :=\n CFG_GCCISH_LINK_FLAGS :=\n \n ifdef CFG_DISABLE_OPTIMIZE\n@@ -337,8 +336,7 @@ HSREQ$(1)_H_$(3) = \\\n TSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(HSREQ$(1)_H_$(3)) \\\n \t$$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUNTIME) \\\n-\t$$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a \\\n-  $$(TLIB$(1)_T_$(2)_H_$(3))/liblinenoise.a\n+\t$$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n \n # Prerequisites for complete stageN targets\n SREQ$(1)_T_$(2)_H_$(3) = \\\n@@ -451,8 +449,8 @@ TSREQS :=\t\t\t\t\t\t\t\t\t\t\t\\\n \t\t$(SREQ3_T_$(target)_H_$(CFG_HOST_TRIPLE)))\n FUZZ := $(HBIN2_H_$(CFG_HOST_TRIPLE))/fuzzer$(X)\n CARGO := $(HBIN2_H_$(CFG_HOST_TRIPLE))/cargo$(X)\n-RUSTI := $(HBIN2_H_$(CFG_HOST_TRIPLE))/rusti$(X)\n RUSTDOC := $(HBIN2_H_$(CFG_HOST_TRIPLE))/rustdoc$(X)\n+RUSTI := $(HBIN2_H_$(CFG_HOST_TRIPLE))/rusti$(X)\n \n all: rustc $(GENERATED) docs $(FUZZ) $(CARGO) $(RUSTDOC) $(RUSTI)\n \n@@ -492,7 +490,6 @@ include $(CFG_SRC_DIR)mk/host.mk\n include $(CFG_SRC_DIR)mk/stage0.mk\n include $(CFG_SRC_DIR)mk/rt.mk\n include $(CFG_SRC_DIR)mk/rustllvm.mk\n-include $(CFG_SRC_DIR)mk/linenoise.mk\n include $(CFG_SRC_DIR)mk/tools.mk\n include $(CFG_SRC_DIR)mk/docs.mk\n include $(CFG_SRC_DIR)mk/llvm.mk"}, {"sha": "50eb9deeff3d421122515446586421f0f09f6577", "filename": "configure", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/configure", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -508,18 +508,12 @@ do\n     make_dir rustllvm/$t\n done\n \n-make_dir linenoise\n-for t in $CFG_TARGET_TRIPLES\n-do\n-    make_dir linenoise/$t\n-done\n-\n make_dir rt\n for t in $CFG_TARGET_TRIPLES\n do\n   make_dir rt/$t\n   for i in                                          \\\n-    isaac bigint sync test arch/i386 arch/x86_64    \\\n+    isaac linenoise bigint sync test arch/i386 arch/x86_64    \\\n     libuv libuv/src/ares libuv/src/eio libuv/src/ev\n   do\n     make_dir rt/$t/$i"}, {"sha": "d36cbaf7d0bf14ce613b02153fad666766a9be4a", "filename": "mk/clean.mk", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Fclean.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Fclean.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fclean.mk?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -23,20 +23,19 @@ clean: clean-misc $(CLEAN_STAGE_RULES)\n \n clean-misc:\n \t@$(call E, cleaning)\n-\t$(Q)find linenoise rustllvm rt $(CFG_HOST_TRIPLE)/test \\\n+\t$(Q)find rustllvm rt $(CFG_HOST_TRIPLE)/test \\\n          -name '*.[odasS]' -o \\\n          -name '*.so' -o      \\\n          -name '*.dylib' -o   \\\n          -name '*.dll' -o     \\\n          -name '*.def' -o     \\\n          -name '*.bc'         \\\n          | xargs rm -f\n-\t$(Q)find linenoise rustllvm rt $(CFG_HOST_TRIPLE)\\\n+\t$(Q)find rustllvm rt $(CFG_HOST_TRIPLE)\\\n          -name '*.dSYM'       \\\n          | xargs rm -Rf\n \t$(Q)rm -f $(RUNTIME_OBJS) $(RUNTIME_DEF)\n \t$(Q)rm -f $(RUSTLLVM_LIB_OBJS) $(RUSTLLVM_OBJS_OBJS) $(RUSTLLVM_DEF)\n-\t$(Q)rm -f $(LINENOISE_OBJS)\n \t$(Q)rm -Rf $(DOCS)\n \t$(Q)rm -Rf $(GENERATED)\n \t$(Q)rm -f tmp/*.log tmp/*.rc tmp/*.rs\n@@ -56,7 +55,6 @@ clean$(1)_H_$(2):\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustc$(X)\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/fuzzer$(X)\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/cargo$(X)\n-\t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rusti$(X)\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/serializer$(X)\n \t$(Q)rm -f $$(HBIN$(1)_H_$(2))/rustdoc$(X)\n \t$(Q)rm -f $$(HLIB$(1)_H_$(2))/$(CFG_RUNTIME)\n@@ -83,7 +81,6 @@ clean$(1)_T_$(2)_H_$(3):\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustc$(X)\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/fuzzer$(X)\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/cargo$(X)\n-\t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rusti$(X)\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/serializer$(X)\n \t$(Q)rm -f $$(TBIN$(1)_T_$(2)_H_$(3))/rustdoc$(X)\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUNTIME)\n@@ -98,7 +95,6 @@ clean$(1)_T_$(2)_H_$(3):\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/$(CFG_RUSTLLVM)\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libstd.rlib\n \t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a\n-\t$(Q)rm -f $$(TLIB$(1)_T_$(2)_H_$(3))/liblinenoise.a\n endef\n \n $(foreach host, $(CFG_TARGET_TRIPLES), \\"}, {"sha": "0bdf764c153e337fc2e186c9f4afbc0c7b255047", "filename": "mk/dist.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -30,7 +30,6 @@ PKG_FILES := \\\n       libcore                                  \\\n       libsyntax                                \\\n       libstd                                   \\\n-      linenoise                                \\\n       rt                                       \\\n       rustdoc                                  \\\n       rustllvm                                 \\"}, {"sha": "19a94a429b3c8a7a194e6ffc4accc35ab3ef2081", "filename": "mk/linenoise.mk", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1afa29986fe62cf817e886412dfb6d42b2d5f7e5/mk%2Flinenoise.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1afa29986fe62cf817e886412dfb6d42b2d5f7e5/mk%2Flinenoise.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Flinenoise.mk?ref=1afa29986fe62cf817e886412dfb6d42b2d5f7e5", "patch": "@@ -1,23 +0,0 @@\n-######################################################################\n-# linenoise - minimalistic readline alternative used by the REPL\n-######################################################################\n-\n-define DEF_LINENOISE_TARGETS\n-\n-LINENOISE_CS_$(1) := $$(addprefix linenoise/, linenoise.c)\n-LINENOISE_OBJS_$(1) := $(LINENOISE_CS_$(1):linenoise/%.c=linenoise/$(1)/%.o)\n-\n-ALL_OBJ_FILES += $$(LINENOISE_OBJS_$(1))\n-\n-linenoise/$(1)/liblinenoise.a: $$(LINENOISE_OBJS_$(1))\n-\t@$$(call E, link: $$@)\n-\t$$(Q)ar rcs $$@ $$<\n-\n-linenoise/$(1)/%.o: linenoise/%.c $$(MKFILE_DEPS)\n-\t@$$(call E, compile: $$@)\n-\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@,) $$<\n-endef\n-\n-# Instantiate template for all stages\n-$(foreach target,$(CFG_TARGET_TRIPLES), \\\n- $(eval $(call DEF_LINENOISE_TARGETS,$(target))))"}, {"sha": "ba0d076552422190250acffda6f88507b73e68f5", "filename": "mk/platform.mk", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -103,7 +103,7 @@ endif\n \n # Hack: not sure how to test if a file exists in make other than this\n OS_SUPP = $(patsubst %,--suppressions=%,\\\n-\t    $(wildcard $(CFG_SRC_DIR)src/etc/$(CFG_OSTYPE).supp*))\n+      $(wildcard $(CFG_SRC_DIR)src/etc/$(CFG_OSTYPE).supp*))\n \n ifneq ($(findstring mingw,$(CFG_OSTYPE)),)\n   CFG_WINDOWSY := 1\n@@ -231,18 +231,18 @@ ifeq ($(CFG_C_COMPILER),clang)\n     $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n         $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n       $$(call CFG_INSTALL_NAME,$$(4))\n-\tCFG_COMPILE_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n-\t\t$$(CFG_GCCISH_CFLAGS) $$(CFG_CLANG_CFLAGS)\t\t\\\n+  CFG_COMPILE_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)  \\\n+    $$(CFG_GCCISH_CFLAGS) $$(CFG_CLANG_CFLAGS)    \\\n     $$(CFG_GCCISH_CXXFLAGS)                       \\\n-\t\t$$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))\t\t\t\t\\\n-\t    $$(CFG_CLANG_CFLAGS_$$(HOST_$(1)))\t\t\t\t\\\n+    $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))       \\\n+      $$(CFG_CLANG_CFLAGS_$$(HOST_$(1)))        \\\n         $$(CFG_DEPEND_FLAGS)                            \\\n-\t\t-c -o $$(1) $$(2)\n-    CFG_LINK_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n-\t\t$$(CFG_GCCISH_LINK_FLAGS) -o $$(1)\t\t\t\\\n-\t\t$$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))\t\t\\\n-        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)\t\t\t\\\n-\t    $$(call CFG_INSTALL_NAME,$$(4))\n+    -c -o $$(1) $$(2)\n+    CFG_LINK_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX) \\\n+    $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)      \\\n+    $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n+        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n+      $$(call CFG_INSTALL_NAME,$$(4))\n   endef\n \n   $(foreach target,$(CFG_TARGET_TRIPLES), \\\n@@ -278,18 +278,18 @@ ifeq ($(CFG_C_COMPILER),gcc)\n     $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n         $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n         $$(call CFG_INSTALL_NAME,$$(4))\n-\tCFG_COMPILE_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n-        $$(CFG_GCCISH_CFLAGS)\t\t\t\t\t\t\t\\\n+  CFG_COMPILE_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)  \\\n+        $$(CFG_GCCISH_CFLAGS)             \\\n         $$(CFG_GCCISH_CXXFLAGS)           \\\n-\t    $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))\t\t\t\t\\\n-        $$(CFG_GCC_CFLAGS)\t\t\t\t\t\t\t\t\\\n-        $$(CFG_GCC_CFLAGS_$$(HOST_$(1)))\t\t\t\t\\\n+      $$(CFG_GCCISH_CFLAGS_$$(HOST_$(1)))       \\\n+        $$(CFG_GCC_CFLAGS)                \\\n+        $$(CFG_GCC_CFLAGS_$$(HOST_$(1)))        \\\n         $$(CFG_DEPEND_FLAGS)                            \\\n         -c -o $$(1) $$(2)\n-    CFG_LINK_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX)\t\\\n-        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)\t\t\t\\\n-\t\t$$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))\t\t\\\n-        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)\t\t\t\\\n+    CFG_LINK_CXX_$(1) = $$(CFG_GCCISH_CROSS)$$(CXX) \\\n+        $$(CFG_GCCISH_LINK_FLAGS) -o $$(1)      \\\n+    $$(CFG_GCCISH_LINK_FLAGS_$$(HOST_$(1)))   \\\n+        $$(CFG_GCCISH_DEF_FLAG)$$(3) $$(2)      \\\n         $$(call CFG_INSTALL_NAME,$$(4))\n   endef\n \n@@ -312,4 +312,4 @@ define CFG_MAKE_ASSEMBLER\n endef\n \n $(foreach target,$(CFG_TARGET_TRIPLES),\\\n-  $(eval $(call CFG_MAKE_ASSEMBLER,$(target))))\n+  $(eval $(call CFG_MAKE_ASSEMBLER,$(target))))\n\\ No newline at end of file"}, {"sha": "34ca47463fdda26080b3027271c45e5cfbc961dc", "filename": "mk/pp.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Fpp.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Fpp.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fpp.mk?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -8,7 +8,7 @@ else\n               $(wildcard $(S)src/test/*/*.rs    \\\n                          $(S)src/test/*/*/*.rs) \\\n               $(wildcard $(S)src/fuzzer/*.rs)   \\\n-              $(wildcard $(S)src/cargo/*.rs)\n+              $(wildcard $(S)src/cargo/*.rs) \\\n               $(wildcard $(S)src/rusti/*.rs)\n \n   PP_INPUTS_FILTERED = $(shell echo $(PP_INPUTS) | xargs grep -L \\"}, {"sha": "17f9b8b2f7bb85773a5f6dccf0e2c234b3dffcd3", "filename": "mk/rt.mk", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -42,7 +42,7 @@ define DEF_RUNTIME_TARGETS\n # Runtime (C++) library variables\n ######################################################################\n \n-RUNTIME_CS_$(1) := \\\n+RUNTIME_CXXS_$(1) := \\\n               rt/sync/timer.cpp \\\n               rt/sync/lock_and_signal.cpp \\\n               rt/sync/rust_thread.cpp \\\n@@ -78,6 +78,8 @@ RUNTIME_CS_$(1) := \\\n               rt/arch/$$(HOST_$(1))/context.cpp \\\n               rt/arch/$$(HOST_$(1))/gpr.cpp\n \n+RUNTIME_CS_$(1) := rt/linenoise/linenoise.c\n+\n RUNTIME_S_$(1) := rt/arch/$$(HOST_$(1))/_context.S \\\n                   rt/arch/$$(HOST_$(1))/ccall.S \\\n                   rt/arch/$$(HOST_$(1))/record_sp.S\n@@ -104,9 +106,11 @@ endif\n \n RUNTIME_DEF_$(1) := rt/rustrt$$(CFG_DEF_SUFFIX)\n RUNTIME_INCS_$(1) := -I $$(S)src/rt -I $$(S)src/rt/isaac -I $$(S)src/rt/uthash \\\n-                -I $$(S)src/rt/arch/$$(HOST_$(1)) \\\n-\t\t\t\t-I $$(S)src/libuv/include\n-RUNTIME_OBJS_$(1) := $$(RUNTIME_CS_$(1):rt/%.cpp=rt/$(1)/%.o) \\\n+                     -I $$(S)src/rt/arch/$$(HOST_$(1)) \\\n+                     -I $$(S)src/rt/linenoise \\\n+                     -I $$(S)src/libuv/include\n+RUNTIME_OBJS_$(1) := $$(RUNTIME_CXXS_$(1):rt/%.cpp=rt/$(1)/%.o) \\\n+                     $$(RUNTIME_CS_$(1):rt/%.c=rt/$(1)/%.o) \\\n                      $$(RUNTIME_S_$(1):rt/%.S=rt/$(1)/%.o)\n ALL_OBJ_FILES += $$(RUNTIME_OBJS_$(1))\n \n@@ -120,6 +124,11 @@ rt/$(1)/%.o: rt/%.cpp $$(MKFILE_DEPS)\n \t$$(Q)$$(call CFG_COMPILE_CXX_$(1), $$@, $$(RUNTIME_INCS_$(1)) \\\n                  $$(SNAP_DEFINES)) $$<\n \n+rt/$(1)/%.o: rt/%.c $$(MKFILE_DEPS)\n+\t@$$(call E, compile: $$@)\n+\t$$(Q)$$(call CFG_COMPILE_C_$(1), $$@, $$(RUNTIME_INCS_$(1)) \\\n+                 $$(SNAP_DEFINES)) $$<\n+\n rt/$(1)/%.o: rt/%.S  $$(MKFILE_DEPS) \\\n                      $$(LLVM_CONFIG_$$(CFG_HOST_TRIPLE))\n \t@$$(call E, compile: $$@)"}, {"sha": "967191ab745095878a44634bf4d986d566c82010", "filename": "mk/target.mk", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -19,11 +19,6 @@ $$(TLIB$(1)_T_$(2)_H_$(3))/libmorestack.a: \\\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TLIB$(1)_T_$(2)_H_$(3))/liblinenoise.a: \\\n-\t\tlinenoise/$(2)/liblinenoise.a\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n $$(TLIB$(1)_T_$(2)_H_$(3))/$$(CFG_RUSTLLVM): \\\n \t\trustllvm/$(2)/$$(CFG_RUSTLLVM)\n \t@$$(call E, cp: $$@)"}, {"sha": "bfb2b63c09a846dd552073d975d7f8f79b43845c", "filename": "mk/tests.mk", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -229,7 +229,7 @@ check-stage$(1)-T-$(2)-H-$(3):     \t\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-bench\t\t\t\\\n \tcheck-stage$(1)-T-$(2)-H-$(3)-pretty        \\\n     check-stage$(1)-T-$(2)-H-$(3)-rustdoc       \\\n-    check-stage$(1)-T-$(2)-H-$(3)-rusti         \\\n+    check-stage$(1)-T-$(2)-H-$(3)-rusti       \\\n     check-stage$(1)-T-$(2)-H-$(3)-cargo       \\\n     check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial  \\\n     check-stage$(1)-T-$(2)-H-$(3)-doc-tutorial-ffi  \\\n@@ -392,6 +392,7 @@ check-stage$(1)-T-$(2)-H-$(3)-rusti-dummy:\t\t\\\n \t$$(Q)$$(call CFG_RUN_TEST,$$<,$(2),$(3)) $$(TESTARGS)\t\\\n \t--logfile tmp/check-stage$(1)-T-$(2)-H-$(3)-rusti.log\n \n+\n # Rules for the cargo test runner\n \n $(3)/test/cargotest.stage$(1)-$(2)$$(X):\t\t\t\t\t\\\n@@ -870,9 +871,6 @@ check-stage$(1)-H-all-pretty-pretty: \\\n check-stage$(1)-H-all-rustdoc: \\\n \t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n \t check-stage$(1)-H-$$(target)-rustdoc)\n-check-stage$(1)-H-all-rusti: \\\n-\t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n-\t check-stage$(1)-H-$$(target)-rusti)\n check-stage$(1)-H-all-cargo: \\\n \t$$(foreach target,$$(CFG_TARGET_TRIPLES),\t\\\n \t check-stage$(1)-H-$$(target)-cargo)\n@@ -907,7 +905,6 @@ check-stage$(1)-pretty-rfail: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty-rfail\n check-stage$(1)-pretty-bench: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty-bench\n check-stage$(1)-pretty-pretty: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-pretty-pretty\n check-stage$(1)-rustdoc: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-rustdoc\n-check-stage$(1)-rusti: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-rusti\n check-stage$(1)-cargo: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-cargo\n check-stage$(1)-doc-tutorial: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-doc-tutorial\n check-stage$(1)-doc-tutorial-ffi: check-stage$(1)-H-$$(CFG_HOST_TRIPLE)-doc-tutorial-ffi"}, {"sha": "cdfad867126f62efe8117a3f135115f1dc541639", "filename": "mk/tools.mk", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/mk%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftools.mk?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -12,14 +12,14 @@ COMPILETEST_INPUTS := $(wildcard $(S)src/compiletest/*rs)\n CARGO_CRATE := $(S)src/cargo/cargo.rc\n CARGO_INPUTS := $(wildcard $(S)src/cargo/*rs)\n \n-# Rusti, the JIT REPL\n-RUSTI_CRATE := $(S)src/rusti/rusti.rc\n-RUSTI_INPUTS := $(wildcard $(S)src/rusti/*rs)\n-\n # Rustdoc, the documentation tool\n RUSTDOC_CRATE := $(S)src/rustdoc/rustdoc.rc\n RUSTDOC_INPUTS := $(wildcard $(S)src/rustdoc/*.rs)\n \n+# Rusti, the JIT REPL\n+RUSTI_CRATE := $(S)src/rusti/rusti.rc\n+RUSTI_INPUTS := $(wildcard $(S)src/rusti/*.rs)\n+\n # FIXME: These are only built for the host arch. Eventually we'll\n # have tools that need to built for other targets.\n define TOOLS_STAGE_N\n@@ -66,38 +66,38 @@ $$(TBIN$(1)_T_$(4)_H_$(3))/cargo$$(X):\t\t\t\t\\\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$<\n \n-$$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X):\t\t\t\t\\\n-\t\t$$(RUSTI_CRATE) $$(RUSTI_INPUTS)\t\t\t\\\n+$$(HBIN$(2)_H_$(4))/cargo$$(X):\t\t\t\t\t\\\n+\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/cargo$$(X)\t\\\n+\t\t$$(HSREQ$(2)_H_$(4))\n+\t@$$(call E, cp: $$@)\n+\t$$(Q)cp $$< $$@\n+\n+$$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X):\t\t\t\\\n+\t\t$$(RUSTDOC_CRATE) $$(RUSTDOC_INPUTS)\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)  \\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)   \\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$<\n \n-$$(HBIN$(2)_H_$(4))/cargo$$(X):\t\t\t\t\t\\\n-\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/cargo$$(X)\t\\\n-\t\t$$(HSREQ$(2)_H_$(4))\n-\t@$$(call E, cp: $$@)\n-\t$$(Q)cp $$< $$@\n-\n-$$(HBIN$(2)_H_$(4))/rusti$$(X):\t\t\t\t\t\\\n-\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X)\t\\\n+$$(HBIN$(2)_H_$(4))/rustdoc$$(X):\t\t\t\t\\\n+\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X)\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@\n \n-$$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X):\t\t\t\\\n-\t\t$$(RUSTDOC_CRATE) $$(RUSTDOC_INPUTS)\t\t\\\n+$$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X):\t\t\t\\\n+\t\t$$(RUSTI_CRATE) $$(RUSTI_INPUTS)\t\t\\\n \t\t$$(TSREQ$(1)_T_$(4)_H_$(3))\t\t\t\t\t\\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_CORELIB)  \\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_STDLIB)   \\\n \t\t$$(TLIB$(1)_T_$(4)_H_$(3))/$$(CFG_LIBRUSTC)\n \t@$$(call E, compile_and_link: $$@)\n \t$$(STAGE$(1)_T_$(4)_H_$(3)) -o $$@ $$<\n \n-$$(HBIN$(2)_H_$(4))/rustdoc$$(X):\t\t\t\t\\\n-\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rustdoc$$(X)\t\\\n+$$(HBIN$(2)_H_$(4))/rusti$$(X):\t\t\t\t\\\n+\t\t$$(TBIN$(1)_T_$(4)_H_$(3))/rusti$$(X)\t\\\n \t\t$$(HSREQ$(2)_H_$(4))\n \t@$$(call E, cp: $$@)\n \t$$(Q)cp $$< $$@"}, {"sha": "d32751cf576a50aa09bc31bfa5c4e9bebb76ccc4", "filename": "src/README.txt", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2FREADME.txt", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2FREADME.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.txt?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -30,7 +30,7 @@ compiletest/       The test runner\n \n cargo/             The package manager\n \n-rusti/\t\t\t   The JIT REPL\n+rusti/             The JIT REPL\n \n rustdoc/           The Rust API documentation tool\n \n@@ -40,8 +40,6 @@ libuv/             The libuv submodule\n \n rustllvm/          LLVM support code\n \n-linenoise\\\t\t   Minimalistic libreadline alternative\n-\n fuzzer/            A collection of fuzz testers\n \n etc/               Scripts, editor support, misc"}, {"sha": "94e6decc4ca8f9b2c39e5e8f1fa0baf4e0ce58ce", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -152,7 +152,6 @@ pub mod option_iter {\n     pub mod inst;\n }\n pub mod result;\n-pub mod rl;\n pub mod to_str;\n pub mod to_bytes;\n pub mod from_str;"}, {"sha": "8c9b481281ba401f6baf45bc9ca9fc940b59405f", "filename": "src/linenoise", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flinenoise?ref=1afa29986fe62cf817e886412dfb6d42b2d5f7e5", "patch": "@@ -1 +0,0 @@\n-Subproject commit 8c9b481281ba401f6baf45bc9ca9fc940b59405f"}, {"sha": "4632f7de81858a2ba40cb283b259535ff8e95576", "filename": "src/rt/linenoise/linenoise.c", "status": "added", "additions": 626, "deletions": 0, "changes": 626, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2Frt%2Flinenoise%2Flinenoise.c", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2Frt%2Flinenoise%2Flinenoise.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Flinenoise%2Flinenoise.c?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -0,0 +1,626 @@\n+/* linenoise.c -- guerrilla line editing library against the idea that a\n+ * line editing lib needs to be 20,000 lines of C code.\n+ *\n+ * You can find the latest source code at:\n+ * \n+ *   http://github.com/antirez/linenoise\n+ *\n+ * Does a number of crazy assumptions that happen to be true in 99.9999% of\n+ * the 2010 UNIX computers around.\n+ *\n+ * ------------------------------------------------------------------------\n+ *\n+ * Copyright (c) 2010, Salvatore Sanfilippo <antirez at gmail dot com>\n+ * Copyright (c) 2010, Pieter Noordhuis <pcnoordhuis at gmail dot com>\n+ *\n+ * All rights reserved.\n+ * \n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are\n+ * met:\n+ * \n+ *  *  Redistributions of source code must retain the above copyright\n+ *     notice, this list of conditions and the following disclaimer.\n+ *\n+ *  *  Redistributions in binary form must reproduce the above copyright\n+ *     notice, this list of conditions and the following disclaimer in the\n+ *     documentation and/or other materials provided with the distribution.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ * \n+ * ------------------------------------------------------------------------\n+ *\n+ * References:\n+ * - http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n+ * - http://www.3waylabs.com/nw/WWW/products/wizcon/vt220.html\n+ *\n+ * Todo list:\n+ * - Switch to gets() if $TERM is something we can't support.\n+ * - Filter bogus Ctrl+<char> combinations.\n+ * - Win32 support\n+ *\n+ * Bloat:\n+ * - Completion?\n+ * - History search like Ctrl+r in readline?\n+ *\n+ * List of escape sequences used by this program, we do everything just\n+ * with three sequences. In order to be so cheap we may have some\n+ * flickering effect with some slow terminal, but the lesser sequences\n+ * the more compatible.\n+ *\n+ * CHA (Cursor Horizontal Absolute)\n+ *    Sequence: ESC [ n G\n+ *    Effect: moves cursor to column n\n+ *\n+ * EL (Erase Line)\n+ *    Sequence: ESC [ n K\n+ *    Effect: if n is 0 or missing, clear from cursor to end of line\n+ *    Effect: if n is 1, clear from beginning of line to cursor\n+ *    Effect: if n is 2, clear entire line\n+ *\n+ * CUF (CUrsor Forward)\n+ *    Sequence: ESC [ n C\n+ *    Effect: moves cursor forward of n chars\n+ *\n+ * The following are used to clear the screen: ESC [ H ESC [ 2 J\n+ * This is actually composed of two sequences:\n+ *\n+ * cursorhome\n+ *    Sequence: ESC [ H\n+ *    Effect: moves the cursor to upper left corner\n+ *\n+ * ED2 (Clear entire screen)\n+ *    Sequence: ESC [ 2 J\n+ *    Effect: clear the whole screen\n+ * \n+ */\n+\n+#include <termios.h>\n+#include <unistd.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <errno.h>\n+#include <string.h>\n+#include <stdlib.h>\n+#include <sys/types.h>\n+#include <sys/ioctl.h>\n+#include <unistd.h>\n+#include \"linenoise.h\"\n+\n+#define LINENOISE_DEFAULT_HISTORY_MAX_LEN 100\n+#define LINENOISE_MAX_LINE 4096\n+static char *unsupported_term[] = {\"dumb\",\"cons25\",NULL};\n+static linenoiseCompletionCallback *completionCallback = NULL;\n+\n+static struct termios orig_termios; /* in order to restore at exit */\n+static int rawmode = 0; /* for atexit() function to check if restore is needed*/\n+static int atexit_registered = 0; /* register atexit just 1 time */\n+static int history_max_len = LINENOISE_DEFAULT_HISTORY_MAX_LEN;\n+static int history_len = 0;\n+char **history = NULL;\n+\n+static void linenoiseAtExit(void);\n+int linenoiseHistoryAdd(const char *line);\n+\n+static int isUnsupportedTerm(void) {\n+    char *term = getenv(\"TERM\");\n+    int j;\n+\n+    if (term == NULL) return 0;\n+    for (j = 0; unsupported_term[j]; j++)\n+        if (!strcasecmp(term,unsupported_term[j])) return 1;\n+    return 0;\n+}\n+\n+static void freeHistory(void) {\n+    if (history) {\n+        int j;\n+\n+        for (j = 0; j < history_len; j++)\n+            free(history[j]);\n+        free(history);\n+    }\n+}\n+\n+static int enableRawMode(int fd) {\n+    struct termios raw;\n+\n+    if (!isatty(STDIN_FILENO)) goto fatal;\n+    if (!atexit_registered) {\n+        atexit(linenoiseAtExit);\n+        atexit_registered = 1;\n+    }\n+    if (tcgetattr(fd,&orig_termios) == -1) goto fatal;\n+\n+    raw = orig_termios;  /* modify the original mode */\n+    /* input modes: no break, no CR to NL, no parity check, no strip char,\n+     * no start/stop output control. */\n+    raw.c_iflag &= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON);\n+    /* output modes - disable post processing */\n+    raw.c_oflag &= ~(OPOST);\n+    /* control modes - set 8 bit chars */\n+    raw.c_cflag |= (CS8);\n+    /* local modes - choing off, canonical off, no extended functions,\n+     * no signal chars (^Z,^C) */\n+    raw.c_lflag &= ~(ECHO | ICANON | IEXTEN | ISIG);\n+    /* control chars - set return condition: min number of bytes and timer.\n+     * We want read to return every single byte, without timeout. */\n+    raw.c_cc[VMIN] = 1; raw.c_cc[VTIME] = 0; /* 1 byte, no timer */\n+\n+    /* put terminal in raw mode after flushing */\n+    if (tcsetattr(fd,TCSAFLUSH,&raw) < 0) goto fatal;\n+    rawmode = 1;\n+    return 0;\n+\n+fatal:\n+    errno = ENOTTY;\n+    return -1;\n+}\n+\n+static void disableRawMode(int fd) {\n+    /* Don't even check the return value as it's too late. */\n+    if (rawmode && tcsetattr(fd,TCSAFLUSH,&orig_termios) != -1)\n+        rawmode = 0;\n+}\n+\n+/* At exit we'll try to fix the terminal to the initial conditions. */\n+static void linenoiseAtExit(void) {\n+    disableRawMode(STDIN_FILENO);\n+    freeHistory();\n+}\n+\n+static int getColumns(void) {\n+    struct winsize ws;\n+\n+    if (ioctl(1, TIOCGWINSZ, &ws) == -1) return 80;\n+    return ws.ws_col;\n+}\n+\n+static void refreshLine(int fd, const char *prompt, char *buf, size_t len, size_t pos, size_t cols) {\n+    char seq[64];\n+    size_t plen = strlen(prompt);\n+    \n+    while((plen+pos) >= cols) {\n+        buf++;\n+        len--;\n+        pos--;\n+    }\n+    while (plen+len > cols) {\n+        len--;\n+    }\n+\n+    /* Cursor to left edge */\n+    snprintf(seq,64,\"\\x1b[0G\");\n+    if (write(fd,seq,strlen(seq)) == -1) return;\n+    /* Write the prompt and the current buffer content */\n+    if (write(fd,prompt,strlen(prompt)) == -1) return;\n+    if (write(fd,buf,len) == -1) return;\n+    /* Erase to right */\n+    snprintf(seq,64,\"\\x1b[0K\");\n+    if (write(fd,seq,strlen(seq)) == -1) return;\n+    /* Move cursor to original position. */\n+    snprintf(seq,64,\"\\x1b[0G\\x1b[%dC\", (int)(pos+plen));\n+    if (write(fd,seq,strlen(seq)) == -1) return;\n+}\n+\n+static void beep() {\n+    fprintf(stderr, \"\\x7\");\n+    fflush(stderr);\n+}\n+\n+static void freeCompletions(linenoiseCompletions *lc) {\n+    size_t i;\n+    for (i = 0; i < lc->len; i++)\n+        free(lc->cvec[i]);\n+    if (lc->cvec != NULL)\n+        free(lc->cvec);\n+}\n+\n+static int completeLine(int fd, const char *prompt, char *buf, size_t buflen, size_t *len, size_t *pos, size_t cols) {\n+    linenoiseCompletions lc = { 0, NULL };\n+    int nread, nwritten;\n+    char c = 0;\n+\n+    completionCallback(buf,&lc);\n+    if (lc.len == 0) {\n+        beep();\n+    } else {\n+        size_t stop = 0, i = 0;\n+        size_t clen;\n+\n+        while(!stop) {\n+            /* Show completion or original buffer */\n+            if (i < lc.len) {\n+                clen = strlen(lc.cvec[i]);\n+                refreshLine(fd,prompt,lc.cvec[i],clen,clen,cols);\n+            } else {\n+                refreshLine(fd,prompt,buf,*len,*pos,cols);\n+            }\n+\n+            nread = read(fd,&c,1);\n+            if (nread <= 0) {\n+                freeCompletions(&lc);\n+                return -1;\n+            }\n+\n+            switch(c) {\n+                case 9: /* tab */\n+                    i = (i+1) % (lc.len+1);\n+                    if (i == lc.len) beep();\n+                    break;\n+                case 27: /* escape */\n+                    /* Re-show original buffer */\n+                    if (i < lc.len) {\n+                        refreshLine(fd,prompt,buf,*len,*pos,cols);\n+                    }\n+                    stop = 1;\n+                    break;\n+                default:\n+                    /* Update buffer and return */\n+                    if (i < lc.len) {\n+                        nwritten = snprintf(buf,buflen,\"%s\",lc.cvec[i]);\n+                        *len = *pos = nwritten;\n+                    }\n+                    stop = 1;\n+                    break;\n+            }\n+        }\n+    }\n+\n+    freeCompletions(&lc);\n+    return c; /* Return last read character */\n+}\n+\n+void linenoiseClearScreen(void) {\n+    if (write(STDIN_FILENO,\"\\x1b[H\\x1b[2J\",7) <= 0) {\n+        /* nothing to do, just to avoid warning. */\n+    }\n+}\n+\n+static int linenoisePrompt(int fd, char *buf, size_t buflen, const char *prompt) {\n+    size_t plen = strlen(prompt);\n+    size_t pos = 0;\n+    size_t len = 0;\n+    size_t cols = getColumns();\n+    int history_index = 0;\n+    size_t old_pos;\n+    size_t diff;\n+\n+    buf[0] = '\\0';\n+    buflen--; /* Make sure there is always space for the nulterm */\n+\n+    /* The latest history entry is always our current buffer, that\n+     * initially is just an empty string. */\n+    linenoiseHistoryAdd(\"\");\n+    \n+    if (write(fd,prompt,plen) == -1) return -1;\n+    while(1) {\n+        char c;\n+        int nread;\n+        char seq[2], seq2[2];\n+\n+        nread = read(fd,&c,1);\n+        if (nread <= 0) return len;\n+\n+        /* Only autocomplete when the callback is set. It returns < 0 when\n+         * there was an error reading from fd. Otherwise it will return the\n+         * character that should be handled next. */\n+        if (c == 9 && completionCallback != NULL) {\n+            c = completeLine(fd,prompt,buf,buflen,&len,&pos,cols);\n+            /* Return on errors */\n+            if (c < 0) return len;\n+            /* Read next character when 0 */\n+            if (c == 0) continue;\n+        }\n+\n+        switch(c) {\n+        case 13:    /* enter */\n+            history_len--;\n+            free(history[history_len]);\n+            return (int)len;\n+        case 3:     /* ctrl-c */\n+            errno = EAGAIN;\n+            return -1;\n+        case 127:   /* backspace */\n+        case 8:     /* ctrl-h */\n+            if (pos > 0 && len > 0) {\n+                memmove(buf+pos-1,buf+pos,len-pos);\n+                pos--;\n+                len--;\n+                buf[len] = '\\0';\n+                refreshLine(fd,prompt,buf,len,pos,cols);\n+            }\n+            break;\n+        case 4:     /* ctrl-d, remove char at right of cursor */\n+            if (len > 1 && pos < (len-1)) {\n+                memmove(buf+pos,buf+pos+1,len-pos);\n+                len--;\n+                buf[len] = '\\0';\n+                refreshLine(fd,prompt,buf,len,pos,cols);\n+            } else if (len == 0) {\n+                history_len--;\n+                free(history[history_len]);\n+                return -1;\n+            }\n+            break;\n+        case 20:    /* ctrl-t */\n+            if (pos > 0 && pos < len) {\n+                int aux = buf[pos-1];\n+                buf[pos-1] = buf[pos];\n+                buf[pos] = aux;\n+                if (pos != len-1) pos++;\n+                refreshLine(fd,prompt,buf,len,pos,cols);\n+            }\n+            break;\n+        case 2:     /* ctrl-b */\n+            goto left_arrow;\n+        case 6:     /* ctrl-f */\n+            goto right_arrow;\n+        case 16:    /* ctrl-p */\n+            seq[1] = 65;\n+            goto up_down_arrow;\n+        case 14:    /* ctrl-n */\n+            seq[1] = 66;\n+            goto up_down_arrow;\n+            break;\n+        case 27:    /* escape sequence */\n+            if (read(fd,seq,2) == -1) break;\n+            if (seq[0] == 91 && seq[1] == 68) {\n+left_arrow:\n+                /* left arrow */\n+                if (pos > 0) {\n+                    pos--;\n+                    refreshLine(fd,prompt,buf,len,pos,cols);\n+                }\n+            } else if (seq[0] == 91 && seq[1] == 67) {\n+right_arrow:\n+                /* right arrow */\n+                if (pos != len) {\n+                    pos++;\n+                    refreshLine(fd,prompt,buf,len,pos,cols);\n+                }\n+            } else if (seq[0] == 91 && (seq[1] == 65 || seq[1] == 66)) {\n+up_down_arrow:\n+                /* up and down arrow: history */\n+                if (history_len > 1) {\n+                    /* Update the current history entry before to\n+                     * overwrite it with tne next one. */\n+                    free(history[history_len-1-history_index]);\n+                    history[history_len-1-history_index] = strdup(buf);\n+                    /* Show the new entry */\n+                    history_index += (seq[1] == 65) ? 1 : -1;\n+                    if (history_index < 0) {\n+                        history_index = 0;\n+                        break;\n+                    } else if (history_index >= history_len) {\n+                        history_index = history_len-1;\n+                        break;\n+                    }\n+                    strncpy(buf,history[history_len-1-history_index],buflen);\n+                    buf[buflen] = '\\0';\n+                    len = pos = strlen(buf);\n+                    refreshLine(fd,prompt,buf,len,pos,cols);\n+                }\n+            } else if (seq[0] == 91 && seq[1] > 48 && seq[1] < 55) {\n+                /* extended escape */\n+                if (read(fd,seq2,2) == -1) break;\n+                if (seq[1] == 51 && seq2[0] == 126) {\n+                    /* delete */\n+                    if (len > 0 && pos < len) {\n+                        memmove(buf+pos,buf+pos+1,len-pos-1);\n+                        len--;\n+                        buf[len] = '\\0';\n+                        refreshLine(fd,prompt,buf,len,pos,cols);\n+                    }\n+                }\n+            }\n+            break;\n+        default:\n+            if (len < buflen) {\n+                if (len == pos) {\n+                    buf[pos] = c;\n+                    pos++;\n+                    len++;\n+                    buf[len] = '\\0';\n+                    if (plen+len < cols) {\n+                        /* Avoid a full update of the line in the\n+                         * trivial case. */\n+                        if (write(fd,&c,1) == -1) return -1;\n+                    } else {\n+                        refreshLine(fd,prompt,buf,len,pos,cols);\n+                    }\n+                } else {\n+                    memmove(buf+pos+1,buf+pos,len-pos);\n+                    buf[pos] = c;\n+                    len++;\n+                    pos++;\n+                    buf[len] = '\\0';\n+                    refreshLine(fd,prompt,buf,len,pos,cols);\n+                }\n+            }\n+            break;\n+        case 21: /* Ctrl+u, delete the whole line. */\n+            buf[0] = '\\0';\n+            pos = len = 0;\n+            refreshLine(fd,prompt,buf,len,pos,cols);\n+            break;\n+        case 11: /* Ctrl+k, delete from current to end of line. */\n+            buf[pos] = '\\0';\n+            len = pos;\n+            refreshLine(fd,prompt,buf,len,pos,cols);\n+            break;\n+        case 1: /* Ctrl+a, go to the start of the line */\n+            pos = 0;\n+            refreshLine(fd,prompt,buf,len,pos,cols);\n+            break;\n+        case 5: /* ctrl+e, go to the end of the line */\n+            pos = len;\n+            refreshLine(fd,prompt,buf,len,pos,cols);\n+            break;\n+        case 12: /* ctrl+l, clear screen */\n+            linenoiseClearScreen();\n+            refreshLine(fd,prompt,buf,len,pos,cols);\n+            break;\n+        case 23: /* ctrl+w, delete previous word */\n+            old_pos = pos;\n+            while (pos > 0 && buf[pos-1] == ' ')\n+                pos--;\n+            while (pos > 0 && buf[pos-1] != ' ')\n+                pos--;\n+            diff = old_pos - pos;\n+            memmove(&buf[pos], &buf[old_pos], len-old_pos+1);\n+            len -= diff;\n+            refreshLine(fd,prompt,buf,len,pos,cols);\n+            break;\n+        }\n+    }\n+    return len;\n+}\n+\n+static int linenoiseRaw(char *buf, size_t buflen, const char *prompt) {\n+    int fd = STDIN_FILENO;\n+    int count;\n+\n+    if (buflen == 0) {\n+        errno = EINVAL;\n+        return -1;\n+    }\n+    if (!isatty(STDIN_FILENO)) {\n+        if (fgets(buf, buflen, stdin) == NULL) return -1;\n+        count = strlen(buf);\n+        if (count && buf[count-1] == '\\n') {\n+            count--;\n+            buf[count] = '\\0';\n+        }\n+    } else {\n+        if (enableRawMode(fd) == -1) return -1;\n+        count = linenoisePrompt(fd, buf, buflen, prompt);\n+        disableRawMode(fd);\n+        printf(\"\\n\");\n+    }\n+    return count;\n+}\n+\n+char *linenoise(const char *prompt) {\n+    char buf[LINENOISE_MAX_LINE];\n+    int count;\n+\n+    if (isUnsupportedTerm()) {\n+        size_t len;\n+\n+        printf(\"%s\",prompt);\n+        fflush(stdout);\n+        if (fgets(buf,LINENOISE_MAX_LINE,stdin) == NULL) return NULL;\n+        len = strlen(buf);\n+        while(len && (buf[len-1] == '\\n' || buf[len-1] == '\\r')) {\n+            len--;\n+            buf[len] = '\\0';\n+        }\n+        return strdup(buf);\n+    } else {\n+        count = linenoiseRaw(buf,LINENOISE_MAX_LINE,prompt);\n+        if (count == -1) return NULL;\n+        return strdup(buf);\n+    }\n+}\n+\n+/* Register a callback function to be called for tab-completion. */\n+void linenoiseSetCompletionCallback(linenoiseCompletionCallback *fn) {\n+    completionCallback = fn;\n+}\n+\n+void linenoiseAddCompletion(linenoiseCompletions *lc, char *str) {\n+    size_t len = strlen(str);\n+    char *copy = malloc(len+1);\n+    memcpy(copy,str,len+1);\n+    lc->cvec = realloc(lc->cvec,sizeof(char*)*(lc->len+1));\n+    lc->cvec[lc->len++] = copy;\n+}\n+\n+/* Using a circular buffer is smarter, but a bit more complex to handle. */\n+int linenoiseHistoryAdd(const char *line) {\n+    char *linecopy;\n+\n+    if (history_max_len == 0) return 0;\n+    if (history == NULL) {\n+        history = malloc(sizeof(char*)*history_max_len);\n+        if (history == NULL) return 0;\n+        memset(history,0,(sizeof(char*)*history_max_len));\n+    }\n+    linecopy = strdup(line);\n+    if (!linecopy) return 0;\n+    if (history_len == history_max_len) {\n+        free(history[0]);\n+        memmove(history,history+1,sizeof(char*)*(history_max_len-1));\n+        history_len--;\n+    }\n+    history[history_len] = linecopy;\n+    history_len++;\n+    return 1;\n+}\n+\n+int linenoiseHistorySetMaxLen(int len) {\n+    char **new;\n+\n+    if (len < 1) return 0;\n+    if (history) {\n+        int tocopy = history_len;\n+\n+        new = malloc(sizeof(char*)*len);\n+        if (new == NULL) return 0;\n+        if (len < tocopy) tocopy = len;\n+        memcpy(new,history+(history_max_len-tocopy), sizeof(char*)*tocopy);\n+        free(history);\n+        history = new;\n+    }\n+    history_max_len = len;\n+    if (history_len > history_max_len)\n+        history_len = history_max_len;\n+    return 1;\n+}\n+\n+/* Save the history in the specified file. On success 0 is returned\n+ * otherwise -1 is returned. */\n+int linenoiseHistorySave(char *filename) {\n+    FILE *fp = fopen(filename,\"w\");\n+    int j;\n+    \n+    if (fp == NULL) return -1;\n+    for (j = 0; j < history_len; j++)\n+        fprintf(fp,\"%s\\n\",history[j]);\n+    fclose(fp);\n+    return 0;\n+}\n+\n+/* Load the history from the specified file. If the file does not exist\n+ * zero is returned and no operation is performed.\n+ *\n+ * If the file exists and the operation succeeded 0 is returned, otherwise\n+ * on error -1 is returned. */\n+int linenoiseHistoryLoad(char *filename) {\n+    FILE *fp = fopen(filename,\"r\");\n+    char buf[LINENOISE_MAX_LINE];\n+    \n+    if (fp == NULL) return -1;\n+\n+    while (fgets(buf,LINENOISE_MAX_LINE,fp) != NULL) {\n+        char *p;\n+        \n+        p = strchr(buf,'\\r');\n+        if (!p) p = strchr(buf,'\\n');\n+        if (p) *p = '\\0';\n+        linenoiseHistoryAdd(buf);\n+    }\n+    fclose(fp);\n+    return 0;\n+}"}, {"sha": "0b73014085668209ed03d01d8a338adbdba85f97", "filename": "src/rt/linenoise/linenoise.h", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2Frt%2Flinenoise%2Flinenoise.h", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2Frt%2Flinenoise%2Flinenoise.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Flinenoise%2Flinenoise.h?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -0,0 +1,56 @@\n+/* linenoise.h -- guerrilla line editing library against the idea that a\n+ * line editing lib needs to be 20,000 lines of C code.\n+ *\n+ * See linenoise.c for more information.\n+ *\n+ * ------------------------------------------------------------------------\n+ *\n+ * Copyright (c) 2010, Salvatore Sanfilippo <antirez at gmail dot com>\n+ * Copyright (c) 2010, Pieter Noordhuis <pcnoordhuis at gmail dot com>\n+ *\n+ * All rights reserved.\n+ * \n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are\n+ * met:\n+ * \n+ *  *  Redistributions of source code must retain the above copyright\n+ *     notice, this list of conditions and the following disclaimer.\n+ *\n+ *  *  Redistributions in binary form must reproduce the above copyright\n+ *     notice, this list of conditions and the following disclaimer in the\n+ *     documentation and/or other materials provided with the distribution.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n+ * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n+ * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+#ifndef __LINENOISE_H\n+#define __LINENOISE_H\n+\n+typedef struct linenoiseCompletions {\n+  size_t len;\n+  char **cvec;\n+} linenoiseCompletions;\n+\n+typedef void(linenoiseCompletionCallback)(const char *, linenoiseCompletions *);\n+void linenoiseSetCompletionCallback(linenoiseCompletionCallback *);\n+void linenoiseAddCompletion(linenoiseCompletions *, char *);\n+\n+char *linenoise(const char *prompt);\n+int linenoiseHistoryAdd(const char *line);\n+int linenoiseHistorySetMaxLen(int len);\n+int linenoiseHistorySave(char *filename);\n+int linenoiseHistoryLoad(char *filename);\n+void linenoiseClearScreen(void);\n+\n+#endif /* __LINENOISE_H */\n\\ No newline at end of file"}, {"sha": "fd91a83b51b035e0ad8455104fbb4845cf5b40d4", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -204,3 +204,11 @@ tdefl_compress_mem_to_heap\n tinfl_decompress_mem_to_heap\n rust_annihilate_box\n rust_gc_metadata\n+linenoise\n+linenoiseSetCompletionCallback\n+linenoiseAddCompletion\n+linenoiseHistoryAdd\n+linenoiseHistorySetMaxLen\n+linenoiseHistorySave\n+linenoiseHistoryLoad\n+linenoiseClearScreen"}, {"sha": "cbfa9777b2982a129891a16ceb0fea91208daaaf", "filename": "src/rusti/rl.rs", "status": "renamed", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2Frusti%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2Frusti%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frusti%2Frl.rs?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -1,9 +1,6 @@\n use libc::{c_char, c_int};\n \n-#[link_args = \"-Llinenoise\"]\n-#[link_name = \"linenoise\"]\n-#[abi = \"cdecl\"]\n-extern mod linenoise {\n+extern mod rustrt {\n     #[legacy_exports];\n     fn linenoise(prompt: *c_char) -> *c_char;\n     fn linenoiseHistoryAdd(line: *c_char) -> c_int;\n@@ -18,33 +15,33 @@ extern mod linenoise {\n /// Add a line to history\n pub fn add_history(line: ~str) -> bool {\n     do str::as_c_str(line) |buf| {\n-        linenoise::linenoiseHistoryAdd(buf) == 1 as c_int\n+        rustrt::linenoiseHistoryAdd(buf) == 1 as c_int\n     }\n }\n \n /// Set the maximum amount of lines stored\n pub fn set_history_max_len(len: int) -> bool {\n-    linenoise::linenoiseHistorySetMaxLen(len as c_int) == 1 as c_int\n+    rustrt::linenoiseHistorySetMaxLen(len as c_int) == 1 as c_int\n }\n \n /// Save line history to a file\n pub fn save_history(file: ~str) -> bool {\n     do str::as_c_str(file) |buf| {\n-        linenoise::linenoiseHistorySave(buf) == 1 as c_int\n+        rustrt::linenoiseHistorySave(buf) == 1 as c_int\n     }\n }\n \n /// Load line history from a file\n pub fn load_history(file: ~str) -> bool {\n     do str::as_c_str(file) |buf| {\n-        linenoise::linenoiseHistoryLoad(buf) == 1 as c_int\n+        rustrt::linenoiseHistoryLoad(buf) == 1 as c_int\n     }\n }\n \n /// Print out a prompt and then wait for input and return it\n pub fn read(prompt: ~str) -> Option<~str> {\n     do str::as_c_str(prompt) |buf| unsafe {\n-        let line = linenoise::linenoise(buf);\n+        let line = rustrt::linenoise(buf);\n \n         if line.is_null() { None }\n         else { Some(str::raw::from_c_str(line)) }\n@@ -53,7 +50,7 @@ pub fn read(prompt: ~str) -> Option<~str> {\n \n /// Clear the screen\n pub fn clear() {\n-    linenoise::linenoiseClearScreen();\n+    rustrt::linenoiseClearScreen();\n }\n \n pub type CompletionCb = fn~(~str, fn(~str));\n@@ -69,10 +66,10 @@ pub fn complete(cb: CompletionCb) unsafe {\n \n         do cb(str::raw::from_c_str(line)) |suggestion| {\n             do str::as_c_str(suggestion) |buf| {\n-                linenoise::linenoiseAddCompletion(completions, buf);\n+                rustrt::linenoiseAddCompletion(completions, buf);\n             }\n         }\n     }\n \n-    linenoise::linenoiseSetCompletionCallback(callback);\n-}\n+    rustrt::linenoiseSetCompletionCallback(callback);\n+}\n\\ No newline at end of file", "previous_filename": "src/libcore/rl.rs"}, {"sha": "9d31b02ae5ca39e45177261b7d378db1a3af1c61", "filename": "src/rusti/rusti.rc", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2Frusti%2Frusti.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2Frusti%2Frusti.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frusti%2Frusti.rc?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -11,9 +11,6 @@\n \n #[allow(vecs_implicitly_copyable,\n         non_implicitly_copyable_typarams)];\n-#[allow(non_camel_case_types)];\n-#[allow(deprecated_mode)];\n-#[allow(deprecated_pattern)];\n \n extern mod core(vers = \"0.4\");\n extern mod std(vers = \"0.4\");\n@@ -22,7 +19,6 @@ extern mod syntax(vers = \"0.4\");\n \n use core::*;\n use io::{ReaderUtil, WriterUtil};\n-use std::c_vec;\n use rustc::back;\n use rustc::driver::{driver, session};\n use rustc::front;\n@@ -34,3 +30,5 @@ use syntax::{ast, ast_util, codemap, diagnostic, fold, parse, print, visit};\n use syntax::ast_util::*;\n use parse::token;\n use print::{pp, pprust};\n+\n+mod rl;"}, {"sha": "fba8849e02c3742af9c096e8fb20a1ada6c44ff6", "filename": "src/rusti/wrapper.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2Frusti%2Fwrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea996556b93f3f322145fedb5a46fe97e8d0379a/src%2Frusti%2Fwrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frusti%2Fwrapper.rs?ref=ea996556b93f3f322145fedb5a46fe97e8d0379a", "patch": "@@ -2,8 +2,6 @@\n #[legacy_exports];\n \n #[allow(ctypes)];\n-#[allow(deprecated_mode)];\n-#[allow(deprecated_pattern)];\n #[allow(heap_memory)];\n #[allow(implicit_copies)];\n #[allow(managed_heap_memory)];\n@@ -19,6 +17,6 @@\n \n extern mod std;\n \n-fn print<T>(result: T) {\n+fn print<T>(+result: T) {\n     io::println(fmt!(\"%?\", result));\n }"}]}