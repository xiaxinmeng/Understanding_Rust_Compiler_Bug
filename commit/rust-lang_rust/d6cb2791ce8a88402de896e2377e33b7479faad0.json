{"sha": "d6cb2791ce8a88402de896e2377e33b7479faad0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2Y2IyNzkxY2U4YTg4NDAyZGU4OTZlMjM3N2UzM2I3NDc5ZmFhZDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-12T05:20:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-12T05:20:23Z"}, "message": "Auto merge of #30635 - nagisa:mir-rid-unit-temp, r=nikomatsakis\n\nGet rid of that nasty unit_ty temporary variable created just because it might be handy to have one around, when in reality it isn\u2019t really that useful at all.\n\nr? @nikomatsakis\n\nFixes https://github.com/rust-lang/rust/issues/30637", "tree": {"sha": "bc03209ce67755c783427498fca2ab6a160f23a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc03209ce67755c783427498fca2ab6a160f23a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6cb2791ce8a88402de896e2377e33b7479faad0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6cb2791ce8a88402de896e2377e33b7479faad0", "html_url": "https://github.com/rust-lang/rust/commit/d6cb2791ce8a88402de896e2377e33b7479faad0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6cb2791ce8a88402de896e2377e33b7479faad0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dedaebd5a16a053a8f2926d8b48de1a53ab08c4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dedaebd5a16a053a8f2926d8b48de1a53ab08c4c", "html_url": "https://github.com/rust-lang/rust/commit/dedaebd5a16a053a8f2926d8b48de1a53ab08c4c"}, {"sha": "3692ab673e45488ef0d276618a12982964e95c9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3692ab673e45488ef0d276618a12982964e95c9e", "html_url": "https://github.com/rust-lang/rust/commit/3692ab673e45488ef0d276618a12982964e95c9e"}], "stats": {"total": 102, "additions": 56, "deletions": 46}, "files": [{"sha": "12b9130b48c612c9081914e2af66f6597a819951", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d6cb2791ce8a88402de896e2377e33b7479faad0/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6cb2791ce8a88402de896e2377e33b7479faad0/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=d6cb2791ce8a88402de896e2377e33b7479faad0", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use build::{BlockAnd, Builder};\n+use build::{BlockAnd, BlockAndExtension, Builder};\n use hair::*;\n use rustc::mir::repr::*;\n use rustc_front::hir;\n@@ -19,11 +19,16 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                      mut block: BasicBlock,\n                      ast_block: &'tcx hir::Block)\n                      -> BlockAnd<()> {\n-        let this = self;\n-        let Block { extent, span: _, stmts, expr } = this.hir.mirror(ast_block);\n-        this.in_scope(extent, block, |this| {\n+        let Block { extent, span, stmts, expr } = self.hir.mirror(ast_block);\n+        self.in_scope(extent, block, move |this| {\n             unpack!(block = this.stmts(block, stmts));\n-            this.into(destination, block, expr)\n+            match expr {\n+                Some(expr) => this.into(destination, block, expr),\n+                None => {\n+                    this.cfg.push_assign_unit(block, span, destination);\n+                    block.unit()\n+                }\n+            }\n         })\n     }\n }"}, {"sha": "523ac85cdc5090414e3d93f812ec1669380d6fd3", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d6cb2791ce8a88402de896e2377e33b7479faad0/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6cb2791ce8a88402de896e2377e33b7479faad0/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=d6cb2791ce8a88402de896e2377e33b7479faad0", "patch": "@@ -37,14 +37,6 @@ impl<'tcx> CFG<'tcx> {\n         self.block_data_mut(block).statements.push(statement);\n     }\n \n-    pub fn push_assign_constant(&mut self,\n-                                block: BasicBlock,\n-                                span: Span,\n-                                temp: &Lvalue<'tcx>,\n-                                constant: Constant<'tcx>) {\n-        self.push_assign(block, span, temp, Rvalue::Use(Operand::Constant(constant)));\n-    }\n-\n     pub fn push_drop(&mut self, block: BasicBlock, span: Span,\n                      kind: DropKind, lvalue: &Lvalue<'tcx>) {\n         self.push(block, Statement {\n@@ -64,6 +56,23 @@ impl<'tcx> CFG<'tcx> {\n         });\n     }\n \n+    pub fn push_assign_constant(&mut self,\n+                                block: BasicBlock,\n+                                span: Span,\n+                                temp: &Lvalue<'tcx>,\n+                                constant: Constant<'tcx>) {\n+        self.push_assign(block, span, temp, Rvalue::Use(Operand::Constant(constant)));\n+    }\n+\n+    pub fn push_assign_unit(&mut self,\n+                            block: BasicBlock,\n+                            span: Span,\n+                            lvalue: &Lvalue<'tcx>) {\n+        self.push_assign(block, span, lvalue, Rvalue::Aggregate(\n+            AggregateKind::Tuple, vec![]\n+        ));\n+    }\n+\n     pub fn terminate(&mut self,\n                      block: BasicBlock,\n                      terminator: Terminator<'tcx>) {"}, {"sha": "63eb760720479a750d90779fa96a21c135332975", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d6cb2791ce8a88402de896e2377e33b7479faad0/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6cb2791ce8a88402de896e2377e33b7479faad0/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=d6cb2791ce8a88402de896e2377e33b7479faad0", "patch": "@@ -58,7 +58,14 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 });\n \n                 unpack!(then_block = this.into(destination, then_block, then_expr));\n-                unpack!(else_block = this.into(destination, else_block, else_expr));\n+                else_block = if let Some(else_expr) = else_expr {\n+                    unpack!(this.into(destination, else_block, else_expr))\n+                } else {\n+                    // Body of the `if` expression without an `else` clause must return `()`, thus\n+                    // we implicitly generate a `else {}` if it is not specified.\n+                    this.cfg.push_assign_unit(else_block, expr_span, &Lvalue::ReturnPointer);\n+                    else_block\n+                };\n \n                 let join_block = this.cfg.start_new_block();\n                 this.cfg.terminate(then_block, Terminator::Goto { target: join_block });\n@@ -157,11 +164,18 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                     }\n \n                     // execute the body, branching back to the test\n-                    let unit_temp = this.unit_temp.clone();\n-                    let body_block_end = unpack!(this.into(&unit_temp, body_block, body));\n+                    // We write body\u2019s \u201creturn value\u201d into the destination of loop. This is fine,\n+                    // because:\n+                    //\n+                    // * In Rust both loop expression and its body are required to have `()`\n+                    //   as the \u201creturn value\u201d;\n+                    // * The destination will be considered uninitialised (given it was\n+                    //   uninitialised before the loop) during the first iteration, thus\n+                    //   disallowing its use inside the body. Alternatively, if it was already\n+                    //   initialised, the `destination` can only possibly have a value of `()`,\n+                    //   therefore, \u201cmutating\u201d the destination during iteration is fine.\n+                    let body_block_end = unpack!(this.into(destination, body_block, body));\n                     this.cfg.terminate(body_block_end, Terminator::Goto { target: loop_block });\n-\n-                    // final point is exit_block\n                     exit_block.unit()\n                 })\n             }\n@@ -206,7 +220,13 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 this.break_or_continue(expr_span, label, block, |loop_scope| loop_scope.break_block)\n             }\n             ExprKind::Return { value } => {\n-                unpack!(block = this.into(&Lvalue::ReturnPointer, block, value));\n+                block = match value {\n+                    Some(value) => unpack!(this.into(&Lvalue::ReturnPointer, block, value)),\n+                    None => {\n+                        this.cfg.push_assign_unit(block, expr_span, &Lvalue::ReturnPointer);\n+                        block\n+                    }\n+                };\n                 let extent = this.extent_of_outermost_scope();\n                 this.exit_scope(expr_span, extent, block, END_BLOCK);\n                 this.cfg.start_new_block().unit()"}, {"sha": "77d9d926328fc5535bf26967ad79797c2d7a07b9", "filename": "src/librustc_mir/build/into.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d6cb2791ce8a88402de896e2377e33b7479faad0/src%2Flibrustc_mir%2Fbuild%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6cb2791ce8a88402de896e2377e33b7479faad0/src%2Flibrustc_mir%2Fbuild%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Finto.rs?ref=d6cb2791ce8a88402de896e2377e33b7479faad0", "patch": "@@ -14,7 +14,7 @@\n //! wrapped up as expressions (e.g. blocks). To make this ergonomic, we use this\n //! latter `EvalInto` trait.\n \n-use build::{BlockAnd, BlockAndExtension, Builder};\n+use build::{BlockAnd, Builder};\n use hair::*;\n use rustc::mir::repr::*;\n \n@@ -58,16 +58,3 @@ impl<'tcx> EvalInto<'tcx> for Expr<'tcx> {\n         builder.into_expr(destination, block, self)\n     }\n }\n-\n-impl<'tcx> EvalInto<'tcx> for Option<ExprRef<'tcx>> {\n-    fn eval_into<'a>(self,\n-                     builder: &mut Builder<'a, 'tcx>,\n-                     destination: &Lvalue<'tcx>,\n-                     block: BasicBlock)\n-                     -> BlockAnd<()> {\n-        match self {\n-            Some(expr) => builder.into(destination, block, expr),\n-            None => block.unit(),\n-        }\n-    }\n-}"}, {"sha": "d217eb066479364de370bdc536bb7d96c3d091f0", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d6cb2791ce8a88402de896e2377e33b7479faad0/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6cb2791ce8a88402de896e2377e33b7479faad0/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=d6cb2791ce8a88402de896e2377e33b7479faad0", "patch": "@@ -23,7 +23,6 @@ pub struct Builder<'a, 'tcx: 'a> {\n     cfg: CFG<'tcx>,\n     scopes: Vec<scope::Scope<'tcx>>,\n     loop_scopes: Vec<scope::LoopScope>,\n-    unit_temp: Lvalue<'tcx>,\n     var_decls: Vec<VarDecl<'tcx>>,\n     var_indices: FnvHashMap<ast::NodeId, u32>,\n     temp_decls: Vec<TempDecl<'tcx>>,\n@@ -79,7 +78,7 @@ macro_rules! unpack {\n ///////////////////////////////////////////////////////////////////////////\n // construct() -- the main entry point for building MIR for a function\n \n-pub fn construct<'a,'tcx>(mut hir: Cx<'a,'tcx>,\n+pub fn construct<'a,'tcx>(hir: Cx<'a,'tcx>,\n                           _span: Span,\n                           implicit_arguments: Vec<Ty<'tcx>>,\n                           explicit_arguments: Vec<(Ty<'tcx>, &'tcx hir::Pat)>,\n@@ -89,20 +88,14 @@ pub fn construct<'a,'tcx>(mut hir: Cx<'a,'tcx>,\n                           -> Mir<'tcx> {\n     let cfg = CFG { basic_blocks: vec![] };\n \n-    // it's handy to have a temporary of type `()` sometimes, so make\n-    // one from the start and keep it available\n-    let temp_decls = vec![TempDecl::<'tcx> { ty: hir.unit_ty() }];\n-    let unit_temp = Lvalue::Temp(0);\n-\n     let mut builder = Builder {\n         hir: hir,\n         cfg: cfg,\n         scopes: vec![],\n         loop_scopes: vec![],\n-        temp_decls: temp_decls,\n+        temp_decls: vec![],\n         var_decls: vec![],\n         var_indices: FnvHashMap(),\n-        unit_temp: unit_temp,\n     };\n \n     assert_eq!(builder.cfg.start_new_block(), START_BLOCK);"}, {"sha": "b49dc6d89624265d68b6f82c396acbc75065efbc", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d6cb2791ce8a88402de896e2377e33b7479faad0/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6cb2791ce8a88402de896e2377e33b7479faad0/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=d6cb2791ce8a88402de896e2377e33b7479faad0", "patch": "@@ -46,10 +46,6 @@ impl<'a,'tcx:'a> Cx<'a, 'tcx> {\n         ast.make_mirror(self)\n     }\n \n-    pub fn unit_ty(&mut self) -> Ty<'tcx> {\n-        self.tcx.mk_nil()\n-    }\n-\n     pub fn usize_ty(&mut self) -> Ty<'tcx> {\n         self.tcx.types.usize\n     }"}]}