{"sha": "82117289f2ac8623348725ae20e68b28331508a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMTE3Mjg5ZjJhYzg2MjMzNDg3MjVhZTIwZTY4YjI4MzMxNTA4YTE=", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-02T11:04:29Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2021-09-09T05:21:32Z"}, "message": "Remove the queries", "tree": {"sha": "7b5054c2c7a576676f2adb3c5e8ed6e1a03e9aac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b5054c2c7a576676f2adb3c5e8ed6e1a03e9aac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82117289f2ac8623348725ae20e68b28331508a1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEQ7Fl7qPq2YcWF1dqAn35M4hird0FAmE5mdwACgkQAn35M4hi\nrd1wKA/8DbWgDbLnXml7mvz+tn12wKofQh52kx0xfdN7G1sFDCodnU0hU3uqrXNP\n7XEPklM3M8NBTmwTrIqmghR5y52WfqeWID8Gm2zPZBxbBGiPzfrsLjy+K6VC/2Qe\nE4QuYJ4KCnzbYshA7vRcf0wcg6Sd96yNB0XpQfVInk2wyOzzVQLIxKm8Gx9UfAVO\nz7WT+YzirnAZNO0C/1Mk/Fuveeke1pNv9ZDnjlnujePocCgJHMnsob/U2hObGXli\n4mCIHV7OSaIdcT7xWC/3PPubudcBFyL8cukDPjkZTYBY3Yo3VkiPygHZYNPqz3yP\nP9EZrBzElJRNN6THblv0z0LIjcn5g1V04yNA517b+FEP2G7ef+UY+LBzQOMKwDJs\n+tn2ZWVvi33HTDZRVvjQMbZhuy+8P6i9l4tQiq0AGq8oFQmMD5+rpvq6yHMiFI8E\n1893/9IpOfgetLBHYsTwgtlnHtx4rxAJkqEpJipp5UIeM4YHvj0KSXtq1OEVNPWw\n2Vt5Bry28egsd9uCK2ZEXLdnbABQulyygQ7wAGFjzG08/uGeHUTEaox+kTlzaC4d\n50pul/A1oq7sCcS6zRoFk62tzq4BUctLwZXWIu1XlV6kRpLXTK1KuRuEEuKEgSQo\nytdTMb8PQaAicnaEfya1lUKh5hyGUvi4nVJBy3Tad64Q2t0aw80=\n=yczq\n-----END PGP SIGNATURE-----", "payload": "tree 7b5054c2c7a576676f2adb3c5e8ed6e1a03e9aac\nparent 1ca83c6451783aaa77aa69643b70b22ef9e9a01a\nauthor Deadbeef <ent3rm4n@gmail.com> 1630580669 +0000\ncommitter Deadbeef <ent3rm4n@gmail.com> 1631164892 +0000\n\nRemove the queries\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82117289f2ac8623348725ae20e68b28331508a1", "html_url": "https://github.com/rust-lang/rust/commit/82117289f2ac8623348725ae20e68b28331508a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82117289f2ac8623348725ae20e68b28331508a1/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ca83c6451783aaa77aa69643b70b22ef9e9a01a", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca83c6451783aaa77aa69643b70b22ef9e9a01a", "html_url": "https://github.com/rust-lang/rust/commit/1ca83c6451783aaa77aa69643b70b22ef9e9a01a"}], "stats": {"total": 129, "additions": 13, "deletions": 116}, "files": [{"sha": "dd5753e95d0770ef23102bb24c28887372ee9214", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82117289f2ac8623348725ae20e68b28331508a1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82117289f2ac8623348725ae20e68b28331508a1/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=82117289f2ac8623348725ae20e68b28331508a1", "patch": "@@ -1077,10 +1077,6 @@ rustc_queries! {\n     query needs_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` needs drop\", env.value }\n     }\n-    /// Query backing `Tys::needs_non_const_drop`.\n-    query needs_non_const_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n-        desc { \"computing whether `{}` needs non-const drop\", env.value }\n-    }\n     /// Query backing `TyS::has_significant_drop_raw`.\n     query has_significant_drop_raw(env: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n         desc { \"computing whether `{}` has a significant drop\", env.value }\n@@ -1105,14 +1101,6 @@ rustc_queries! {\n         cache_on_disk_if { true }\n     }\n \n-    /// A list of types where the ADT requires drop if and only if any of\n-    /// those types require non-const drop. If the ADT is known to always need\n-    /// non-const drop then `Err(AlwaysRequiresDrop)` is returned.\n-    query adt_drop_tys_non_const(def_id: DefId) -> Result<&'tcx ty::List<Ty<'tcx>>, AlwaysRequiresDrop> {\n-        desc { |tcx| \"computing when `{}` needs non-const drop\", tcx.def_path_str(def_id) }\n-        cache_on_disk_if { true }\n-    }\n-\n     /// A list of types where the ADT requires drop if and only if any of those types\n     /// has significant drop. A type marked with the attribute `rustc_insignificant_dtor`\n     /// is considered to not be significant. A drop is significant if it is implemented"}, {"sha": "808c93abc8ec208aeccf82a1016adcc19fdf789c", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/82117289f2ac8623348725ae20e68b28331508a1/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82117289f2ac8623348725ae20e68b28331508a1/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=82117289f2ac8623348725ae20e68b28331508a1", "patch": "@@ -792,35 +792,6 @@ impl<'tcx> ty::TyS<'tcx> {\n             }\n         }\n     }\n-    /// If `ty.needs_non_const_drop(...)` returns true, then `ty` is definitely\n-    /// non-copy and *might* have a non-const destructor attached; if it returns\n-    /// `false`, then `ty` definitely has a const destructor or no destructor at all.\n-    ///\n-    /// (Note that this implies that if `ty` has a non-const destructor attached,\n-    /// then `needs_non_const_drop` will definitely return `true` for `ty`.)\n-    pub fn needs_non_const_drop(\n-        &'tcx self,\n-        tcx: TyCtxt<'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-    ) -> bool {\n-        // Avoid querying in simple cases.\n-        match needs_drop_components(self, &tcx.data_layout) {\n-            Err(AlwaysRequiresDrop) => true,\n-            Ok(components) => {\n-                let query_ty = match *components {\n-                    [] => return false,\n-                    // if we've got a single component, call the query with that\n-                    // to increase the chance that we hit the query cache.\n-                    [component_ty] => component_ty,\n-                    _ => self,\n-                };\n-                // This doesn't depend on regions, so try to minimize distinct\n-                // query keys used.\n-                let erased = tcx.normalize_erasing_regions(param_env, query_ty);\n-                tcx.needs_non_const_drop_raw(param_env.and(erased))\n-            }\n-        }\n-    }\n \n     /// Checks if `ty` has has a significant drop.\n     ///"}, {"sha": "32d271d94c8ea2ac79984c2fc5b7562237191e12", "filename": "compiler/rustc_ty_utils/src/needs_drop.rs", "status": "modified", "additions": 13, "deletions": 75, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/82117289f2ac8623348725ae20e68b28331508a1/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82117289f2ac8623348725ae20e68b28331508a1/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fneeds_drop.rs?ref=82117289f2ac8623348725ae20e68b28331508a1", "patch": "@@ -1,40 +1,24 @@\n //! Check whether a type has (potentially) non-trivial drop glue.\n \n use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::util::{needs_drop_components, AlwaysRequiresDrop};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::Limit;\n use rustc_span::{sym, DUMMY_SP};\n-use rustc_trait_selection::traits::{Obligation, ObligationCause, SelectionContext};\n \n type NeedsDropResult<T> = Result<T, AlwaysRequiresDrop>;\n \n-fn needs_drop_raw<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n-    needs_non_const_drop: bool,\n-) -> bool {\n+fn needs_drop_raw<'tcx>(tcx: TyCtxt<'tcx>, query: ty::ParamEnvAnd<'tcx, Ty<'tcx>>) -> bool {\n+    let adt_components =\n+        move |adt_def: &ty::AdtDef| tcx.adt_drop_tys(adt_def.did).map(|tys| tys.iter());\n+\n     // If we don't know a type doesn't need drop, for example if it's a type\n     // parameter without a `Copy` bound, then we conservatively return that it\n     // needs drop.\n-    let res = if needs_non_const_drop {\n-        let adt_components = move |adt_def: &ty::AdtDef| {\n-            tcx.adt_drop_tys_non_const(adt_def.did).map(|tys| tys.iter())\n-        };\n-        NeedsDropTypes::new(tcx, query.param_env, query.value, adt_components, needs_non_const_drop)\n-            .next()\n-            .is_some()\n-    } else {\n-        let adt_components =\n-            move |adt_def: &ty::AdtDef| tcx.adt_drop_tys(adt_def.did).map(|tys| tys.iter());\n-        NeedsDropTypes::new(tcx, query.param_env, query.value, adt_components, needs_non_const_drop)\n-            .next()\n-            .is_some()\n-    };\n+    let res =\n+        NeedsDropTypes::new(tcx, query.param_env, query.value, adt_components).next().is_some();\n \n     debug!(\"needs_drop_raw({:?}) = {:?}\", query, res);\n     res\n@@ -46,10 +30,9 @@ fn has_significant_drop_raw<'tcx>(\n ) -> bool {\n     let significant_drop_fields =\n         move |adt_def: &ty::AdtDef| tcx.adt_significant_drop_tys(adt_def.did).map(|tys| tys.iter());\n-    let res =\n-        NeedsDropTypes::new(tcx, query.param_env, query.value, significant_drop_fields, false)\n-            .next()\n-            .is_some();\n+    let res = NeedsDropTypes::new(tcx, query.param_env, query.value, significant_drop_fields)\n+        .next()\n+        .is_some();\n     debug!(\"has_significant_drop_raw({:?}) = {:?}\", query, res);\n     res\n }\n@@ -66,7 +49,6 @@ struct NeedsDropTypes<'tcx, F> {\n     unchecked_tys: Vec<(Ty<'tcx>, usize)>,\n     recursion_limit: Limit,\n     adt_components: F,\n-    needs_non_const_drop: bool,\n }\n \n impl<'tcx, F> NeedsDropTypes<'tcx, F> {\n@@ -75,7 +57,6 @@ impl<'tcx, F> NeedsDropTypes<'tcx, F> {\n         param_env: ty::ParamEnv<'tcx>,\n         ty: Ty<'tcx>,\n         adt_components: F,\n-        needs_non_const_drop: bool,\n     ) -> Self {\n         let mut seen_tys = FxHashSet::default();\n         seen_tys.insert(ty);\n@@ -87,7 +68,6 @@ impl<'tcx, F> NeedsDropTypes<'tcx, F> {\n             unchecked_tys: vec![(ty, 0)],\n             recursion_limit: tcx.recursion_limit(),\n             adt_components,\n-            needs_non_const_drop,\n         }\n     }\n }\n@@ -170,35 +150,6 @@ where\n                             queue_type(self, subst_ty);\n                         }\n                     }\n-                    ty::Param(_)\n-                        if self.needs_non_const_drop && self.tcx.features().const_trait_impl =>\n-                    {\n-                        // Check if the param is bounded to have a `~const Drop` impl.\n-                        let drop_trait = self.tcx.require_lang_item(hir::LangItem::Drop, None);\n-                        let trait_ref = ty::TraitRef {\n-                            def_id: drop_trait,\n-                            substs: self.tcx.mk_substs_trait(component, &[]),\n-                        };\n-\n-                        let obligation = Obligation::new(\n-                            ObligationCause::dummy(),\n-                            self.param_env,\n-                            ty::Binder::dummy(ty::TraitPredicate {\n-                                trait_ref,\n-                                constness: ty::BoundConstness::ConstIfConst,\n-                            }),\n-                        );\n-\n-                        let implsrc = tcx.infer_ctxt().enter(|infcx| {\n-                            let mut selcx =\n-                                SelectionContext::with_constness(&infcx, hir::Constness::Const);\n-                            selcx.select(&obligation)\n-                        });\n-\n-                        if let Ok(Some(_)) = implsrc {\n-                            return None;\n-                        }\n-                    }\n                     ty::Array(..) | ty::Opaque(..) | ty::Projection(..) | ty::Param(_) => {\n                         if ty == component {\n                             // Return the type to the caller: they may be able\n@@ -228,7 +179,6 @@ fn adt_drop_tys_helper(\n     tcx: TyCtxt<'_>,\n     def_id: DefId,\n     adt_has_dtor: impl Fn(&ty::AdtDef) -> bool,\n-    needs_non_const_drop: bool,\n ) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n     let adt_components = move |adt_def: &ty::AdtDef| {\n         if adt_def.is_manually_drop() {\n@@ -247,25 +197,15 @@ fn adt_drop_tys_helper(\n     let adt_ty = tcx.type_of(def_id);\n     let param_env = tcx.param_env(def_id);\n     let res: Result<Vec<_>, _> =\n-        NeedsDropTypes::new(tcx, param_env, adt_ty, adt_components, needs_non_const_drop).collect();\n+        NeedsDropTypes::new(tcx, param_env, adt_ty, adt_components).collect();\n \n     debug!(\"adt_drop_tys(`{}`) = `{:?}`\", tcx.def_path_str(def_id), res);\n     res.map(|components| tcx.intern_type_list(&components))\n }\n \n fn adt_drop_tys(tcx: TyCtxt<'_>, def_id: DefId) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n     let adt_has_dtor = |adt_def: &ty::AdtDef| adt_def.destructor(tcx).is_some();\n-    adt_drop_tys_helper(tcx, def_id, adt_has_dtor, false)\n-}\n-\n-fn adt_drop_tys_non_const(\n-    tcx: TyCtxt<'_>,\n-    def_id: DefId,\n-) -> Result<&ty::List<Ty<'_>>, AlwaysRequiresDrop> {\n-    let adt_has_dtor = |adt_def: &ty::AdtDef| {\n-        adt_def.destructor(tcx).map(|d| d.constness) == Some(hir::Constness::NotConst)\n-    };\n-    adt_drop_tys_helper(tcx, def_id, adt_has_dtor, true)\n+    adt_drop_tys_helper(tcx, def_id, adt_has_dtor)\n }\n \n fn adt_significant_drop_tys(\n@@ -278,16 +218,14 @@ fn adt_significant_drop_tys(\n             .map(|dtor| !tcx.has_attr(dtor.did, sym::rustc_insignificant_dtor))\n             .unwrap_or(false)\n     };\n-    adt_drop_tys_helper(tcx, def_id, adt_has_dtor, false)\n+    adt_drop_tys_helper(tcx, def_id, adt_has_dtor)\n }\n \n pub(crate) fn provide(providers: &mut ty::query::Providers) {\n     *providers = ty::query::Providers {\n-        needs_drop_raw: |tcx, query| needs_drop_raw(tcx, query, false),\n-        needs_non_const_drop_raw: |tcx, query| needs_drop_raw(tcx, query, true),\n+        needs_drop_raw,\n         has_significant_drop_raw,\n         adt_drop_tys,\n-        adt_drop_tys_non_const,\n         adt_significant_drop_tys,\n         ..*providers\n     };"}]}