{"sha": "cd494c1f0915da00a63c03454a96d504afe764ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkNDk0YzFmMDkxNWRhMDBhNjNjMDM0NTRhOTZkNTA0YWZlNzY0ZmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-27T21:32:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-27T21:32:44Z"}, "message": "Auto merge of #51139 - vakaras:issue-50716, r=nikomatsakis\n\nFix NLL issue 50716 and add a regression test.\n\nFix for NLL issue #50716.\n\nr? @nikomatsakis", "tree": {"sha": "c4fb1400dad7cdb89cf479a9e41bfab37f57bf62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4fb1400dad7cdb89cf479a9e41bfab37f57bf62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd494c1f0915da00a63c03454a96d504afe764ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd494c1f0915da00a63c03454a96d504afe764ff", "html_url": "https://github.com/rust-lang/rust/commit/cd494c1f0915da00a63c03454a96d504afe764ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd494c1f0915da00a63c03454a96d504afe764ff/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23b55161ab4cb6d4bf868ac575bd174ca2de0ffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/23b55161ab4cb6d4bf868ac575bd174ca2de0ffa", "html_url": "https://github.com/rust-lang/rust/commit/23b55161ab4cb6d4bf868ac575bd174ca2de0ffa"}, {"sha": "03ecd982bf0b3d673dbe759dadfaff9eaaaa95d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/03ecd982bf0b3d673dbe759dadfaff9eaaaa95d3", "html_url": "https://github.com/rust-lang/rust/commit/03ecd982bf0b3d673dbe759dadfaff9eaaaa95d3"}], "stats": {"total": 124, "additions": 117, "deletions": 7}, "files": [{"sha": "4e281231a4105ef258fbf451b68856e5e6967bef", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=cd494c1f0915da00a63c03454a96d504afe764ff", "patch": "@@ -522,6 +522,12 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.def_key(def_id).disambiguated_data.data == DefPathData::ClosureExpr\n     }\n \n+    /// True if this def-id refers to the implicit constructor for\n+    /// a tuple struct like `struct Foo(u32)`.\n+    pub fn is_struct_constructor(self, def_id: DefId) -> bool {\n+        self.def_key(def_id).disambiguated_data.data == DefPathData::StructCtor\n+    }\n+\n     /// Given the `DefId` of a fn or closure, returns the `DefId` of\n     /// the innermost fn item that the closure is contained within.\n     /// This is a significant def-id because, when we do"}, {"sha": "ca0c259fb6772d2275de2de348945931cfb81039", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=cd494c1f0915da00a63c03454a96d504afe764ff", "patch": "@@ -76,7 +76,37 @@ fn mir_borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> BorrowC\n     let input_mir = tcx.mir_validated(def_id);\n     debug!(\"run query mir_borrowck: {}\", tcx.item_path_str(def_id));\n \n-    if !tcx.has_attr(def_id, \"rustc_mir_borrowck\") && !tcx.use_mir_borrowck() {\n+    let mut return_early;\n+\n+    // Return early if we are not supposed to use MIR borrow checker for this function.\n+    return_early = !tcx.has_attr(def_id, \"rustc_mir_borrowck\") && !tcx.use_mir_borrowck();\n+\n+    if tcx.is_struct_constructor(def_id) {\n+        // We are not borrow checking the automatically generated struct constructors\n+        // because we want to accept structs such as this (taken from the `linked-hash-map`\n+        // crate):\n+        // ```rust\n+        // struct Qey<Q: ?Sized>(Q);\n+        // ```\n+        // MIR of this struct constructor looks something like this:\n+        // ```rust\n+        // fn Qey(_1: Q) -> Qey<Q>{\n+        //     let mut _0: Qey<Q>;                  // return place\n+        //\n+        //     bb0: {\n+        //         (_0.0: Q) = move _1;             // bb0[0]: scope 0 at src/main.rs:1:1: 1:26\n+        //         return;                          // bb0[1]: scope 0 at src/main.rs:1:1: 1:26\n+        //     }\n+        // }\n+        // ```\n+        // The problem here is that `(_0.0: Q) = move _1;` is valid only if `Q` is\n+        // of statically known size, which is not known to be true because of the\n+        // `Q: ?Sized` constraint. However, it is true because the constructor can be\n+        // called only when `Q` is of statically known size.\n+        return_early = true;\n+    }\n+\n+    if return_early {\n         return BorrowCheckResult {\n             closure_requirements: None,\n             used_mut_upvars: SmallVec::new(),"}, {"sha": "0e5597b036ba28645c12331ee51727792b816a30", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=cd494c1f0915da00a63c03454a96d504afe764ff", "patch": "@@ -873,6 +873,11 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     );\n                 }\n                 self.check_rvalue(mir, rv, location);\n+                let trait_ref = ty::TraitRef {\n+                    def_id: tcx.lang_items().sized_trait().unwrap(),\n+                    substs: tcx.mk_substs_trait(place_ty, &[]),\n+                };\n+                self.prove_trait_ref(trait_ref, location);\n             }\n             StatementKind::SetDiscriminant {\n                 ref place,\n@@ -1720,6 +1725,14 @@ impl MirPass for TypeckMir {\n             // broken MIR, so try not to report duplicate errors.\n             return;\n         }\n+\n+        if tcx.is_struct_constructor(def_id) {\n+            // We just assume that the automatically generated struct constructors are\n+            // correct. See the comment in the `mir_borrowck` implementation for an\n+            // explanation why we need this.\n+            return;\n+        }\n+\n         let param_env = tcx.param_env(def_id);\n         tcx.infer_ctxt().enter(|infcx| {\n             let _ = type_check_internal("}, {"sha": "122e393f97a5367b7a4b34fba17bf5d361727373", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=cd494c1f0915da00a63c03454a96d504afe764ff", "patch": "@@ -24,15 +24,16 @@ LL | |     });\n    = note: where '_#1r: '_#0r\n \n error: free region `ReFree(DefId(0/0:6 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]), BrNamed(crate0:DefIndex(1:16), 'a))` does not outlive free region `ReStatic`\n-  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:5\n+  --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:47\n    |\n-LL | /     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+   |  _______________________________________________^\n LL | |         //~^ ERROR does not outlive free region\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to nll\n LL | |     });\n-   | |______^\n+   | |_____^\n \n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:44:1"}, {"sha": "8cdbc26458150140ee75b5e47e553d2b2c088b68", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=cd494c1f0915da00a63c03454a96d504afe764ff", "patch": "@@ -24,15 +24,16 @@ LL | |     });\n    = note: where '_#1r: '_#0r\n \n error: free region `ReFree(DefId(0/0:6 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]), BrNamed(crate0:DefIndex(1:16), 'a))` does not outlive free region `ReStatic`\n-  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:5\n+  --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:47\n    |\n-LL | /     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |  _______________________________________________^\n LL | |         //~^ ERROR does not outlive free region\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |         //~^ WARNING not reporting region error due to nll\n LL | |     });\n-   | |______^\n+   | |_____^\n \n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:47:1"}, {"sha": "ced9b1cde64834e3a59b777d0f035303d8f09e67", "filename": "src/test/ui/nll/issue-50716-1.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Ftest%2Fui%2Fnll%2Fissue-50716-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Ftest%2Fui%2Fnll%2Fissue-50716-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716-1.rs?ref=cd494c1f0915da00a63c03454a96d504afe764ff", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// An additional regression test for the issue #50716 \u201cNLL ignores lifetimes\n+// bounds derived from `Sized` requirements\u201d that checks that the fixed compiler\n+// accepts this code fragment with both AST and MIR borrow checkers.\n+//\n+// revisions: ast mir\n+//\n+// compile-pass\n+\n+#![cfg_attr(mir, feature(nll))]\n+\n+struct Qey<Q: ?Sized>(Q);\n+\n+fn main() {}"}, {"sha": "310600aaf9ac802458afa469d9c44f455eb4c51e", "filename": "src/test/ui/nll/issue-50716.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.rs?ref=cd494c1f0915da00a63c03454a96d504afe764ff", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// Regression test for the issue #50716: NLL ignores lifetimes bounds\n+// derived from `Sized` requirements\n+\n+#![feature(nll)]\n+\n+trait A {\n+    type X: ?Sized;\n+}\n+\n+fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n+where\n+    for<'b> &'b T: A,\n+    <&'static T as A>::X: Sized\n+{\n+    let _x = *s; //~ ERROR free region `'a` does not outlive free region `'static`\n+}\n+\n+fn main() {}"}, {"sha": "20b03d648d9b6e55b0d9fdd5a29a89cfd2d4e0fe", "filename": "src/test/ui/nll/issue-50716.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cd494c1f0915da00a63c03454a96d504afe764ff/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr?ref=cd494c1f0915da00a63c03454a96d504afe764ff", "patch": "@@ -0,0 +1,8 @@\n+error: free region `'a` does not outlive free region `'static`\n+  --> $DIR/issue-50716.rs:25:14\n+   |\n+LL |     let _x = *s; //~ ERROR free region `'a` does not outlive free region `'static`\n+   |              ^^\n+\n+error: aborting due to previous error\n+"}]}