{"sha": "adf1519941deb21bd12b5923a45fdd0c21f79140", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZjE1MTk5NDFkZWIyMWJkMTJiNTkyM2E0NWZkZDBjMjFmNzkxNDA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-05T12:22:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-11-16T10:57:43Z"}, "message": "make the `region_constraints` field an `Option`\n\nThis way, we can `take()` ownership of it when we are going to resolve regions.", "tree": {"sha": "f64e7d5ceb5a6c377537429757e3bb597eb9683f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f64e7d5ceb5a6c377537429757e3bb597eb9683f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adf1519941deb21bd12b5923a45fdd0c21f79140", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adf1519941deb21bd12b5923a45fdd0c21f79140", "html_url": "https://github.com/rust-lang/rust/commit/adf1519941deb21bd12b5923a45fdd0c21f79140", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adf1519941deb21bd12b5923a45fdd0c21f79140/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "326ec52eacf34a0a446ca1775e514cf7e6016de4", "url": "https://api.github.com/repos/rust-lang/rust/commits/326ec52eacf34a0a446ca1775e514cf7e6016de4", "html_url": "https://github.com/rust-lang/rust/commit/326ec52eacf34a0a446ca1775e514cf7e6016de4"}], "stats": {"total": 94, "additions": 54, "deletions": 40}, "files": [{"sha": "2ae8f8ae9335711f41a9d693f764b4bf30c82e86", "filename": "src/librustc/infer/equate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Fequate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Fequate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fequate.rs?ref=adf1519941deb21bd12b5923a45fdd0c21f79140", "patch": "@@ -104,7 +104,8 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n                a,\n                b);\n         let origin = Subtype(self.fields.trace.clone());\n-        self.fields.infcx.region_constraints.borrow_mut().make_eqregion(origin, a, b);\n+        self.fields.infcx.borrow_region_constraints()\n+                         .make_eqregion(origin, a, b);\n         Ok(a)\n     }\n "}, {"sha": "756a6947ee3f850d489f8f6f6f6f6a65f2cb8d96", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=adf1519941deb21bd12b5923a45fdd0c21f79140", "patch": "@@ -78,7 +78,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         self.type_variables.borrow_mut().types_created_since_snapshot(\n                             &snapshot.type_snapshot);\n                     let region_vars =\n-                        self.region_constraints.borrow().vars_created_since_snapshot(\n+                        self.borrow_region_constraints().vars_created_since_snapshot(\n                             &snapshot.region_constraints_snapshot);\n \n                     Ok((type_variables, region_vars, value))"}, {"sha": "8b42314ed97cf31f1c028b6662468b8626eeacc3", "filename": "src/librustc/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fglb.rs?ref=adf1519941deb21bd12b5923a45fdd0c21f79140", "patch": "@@ -67,7 +67,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n                b);\n \n         let origin = Subtype(self.fields.trace.clone());\n-        Ok(self.fields.infcx.region_constraints.borrow_mut().glb_regions(self.tcx(), origin, a, b))\n+        Ok(self.fields.infcx.borrow_region_constraints().glb_regions(self.tcx(), origin, a, b))\n     }\n \n     fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)"}, {"sha": "c49b3b4b9c87365ed039dedba95226cc81269ed1", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=adf1519941deb21bd12b5923a45fdd0c21f79140", "patch": "@@ -176,9 +176,10 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n                                      .filter(|&r| r != representative)\n                 {\n                     let origin = SubregionOrigin::Subtype(self.trace.clone());\n-                    self.infcx.region_constraints.borrow_mut().make_eqregion(origin,\n-                                                                      *representative,\n-                                                                      *region);\n+                    self.infcx.borrow_region_constraints()\n+                              .make_eqregion(origin,\n+                                             *representative,\n+                                             *region);\n                 }\n             }\n \n@@ -427,7 +428,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n         fn fresh_bound_variable<'a, 'gcx, 'tcx>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n                                                 debruijn: ty::DebruijnIndex)\n                                                 -> ty::Region<'tcx> {\n-            infcx.region_constraints.borrow_mut().new_bound(infcx.tcx, debruijn)\n+            infcx.borrow_region_constraints().new_bound(infcx.tcx, debruijn)\n         }\n     }\n }\n@@ -481,7 +482,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                        r: ty::Region<'tcx>,\n                        directions: TaintDirections)\n                        -> FxHashSet<ty::Region<'tcx>> {\n-        self.region_constraints.borrow().tainted(\n+        self.borrow_region_constraints().tainted(\n             self.tcx,\n             &snapshot.region_constraints_snapshot,\n             r,\n@@ -543,7 +544,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n          */\n \n         let mut region_vars =\n-            self.region_constraints.borrow().vars_created_since_snapshot(\n+            self.borrow_region_constraints().vars_created_since_snapshot(\n                 &snapshot.region_constraints_snapshot);\n \n         let escaping_types =\n@@ -586,9 +587,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         where T : TypeFoldable<'tcx>\n     {\n         let (result, map) = self.tcx.replace_late_bound_regions(binder, |br| {\n-            self.region_constraints.borrow_mut().push_skolemized(self.tcx,\n-                                                          br,\n-                                                          &snapshot.region_constraints_snapshot)\n+            self.borrow_region_constraints()\n+                .push_skolemized(self.tcx, br, &snapshot.region_constraints_snapshot)\n         });\n \n         debug!(\"skolemize_bound_regions(binder={:?}, result={:?}, map={:?})\",\n@@ -773,10 +773,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     {\n         debug!(\"pop_skolemized({:?})\", skol_map);\n         let skol_regions: FxHashSet<_> = skol_map.values().cloned().collect();\n-        self.region_constraints.borrow_mut().pop_skolemized(\n-            self.tcx,\n-            &skol_regions,\n-            &snapshot.region_constraints_snapshot);\n+        self.borrow_region_constraints()\n+            .pop_skolemized(self.tcx, &skol_regions, &snapshot.region_constraints_snapshot);\n         if !skol_map.is_empty() {\n             self.projection_cache.borrow_mut().rollback_skolemized(\n                 &snapshot.projection_cache_snapshot);"}, {"sha": "4a2a7a6bdfeca944388582197e2bd10f7ffed28e", "filename": "src/librustc/infer/lub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Flub.rs?ref=adf1519941deb21bd12b5923a45fdd0c21f79140", "patch": "@@ -67,7 +67,7 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n                b);\n \n         let origin = Subtype(self.fields.trace.clone());\n-        Ok(self.fields.infcx.region_constraints.borrow_mut().lub_regions(self.tcx(), origin, a, b))\n+        Ok(self.fields.infcx.borrow_region_constraints().lub_regions(self.tcx(), origin, a, b))\n     }\n \n     fn binders<T>(&mut self, a: &ty::Binder<T>, b: &ty::Binder<T>)"}, {"sha": "a5cae839aa70be86f3a6298fb583428486e81a9a", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=adf1519941deb21bd12b5923a45fdd0c21f79140", "patch": "@@ -31,7 +31,7 @@ use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use ty::relate::RelateResult;\n use traits::{self, ObligationCause, PredicateObligations, Reveal};\n use rustc_data_structures::unify::{self, UnificationTable};\n-use std::cell::{Cell, RefCell, Ref};\n+use std::cell::{Cell, RefCell, Ref, RefMut};\n use std::fmt;\n use syntax::ast;\n use errors::DiagnosticBuilder;\n@@ -103,8 +103,12 @@ pub struct InferCtxt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     // Map from floating variable to the kind of float it represents\n     float_unification_table: RefCell<UnificationTable<ty::FloatVid>>,\n \n-    // For region variables.\n-    region_constraints: RefCell<RegionConstraintCollector<'tcx>>,\n+    // Tracks the set of region variables and the constraints between\n+    // them.  This is initially `Some(_)` but when\n+    // `resolve_regions_and_report_errors` is invoked, this gets set\n+    // to `None` -- further attempts to perform unification etc may\n+    // fail if new region constraints would've been added.\n+    region_constraints: RefCell<Option<RegionConstraintCollector<'tcx>>>,\n \n     // Once region inference is done, the values for each variable.\n     lexical_region_resolutions: RefCell<Option<LexicalRegionResolutions<'tcx>>>,\n@@ -424,7 +428,7 @@ impl<'a, 'gcx, 'tcx> InferCtxtBuilder<'a, 'gcx, 'tcx> {\n             type_variables: RefCell::new(type_variable::TypeVariableTable::new()),\n             int_unification_table: RefCell::new(UnificationTable::new()),\n             float_unification_table: RefCell::new(UnificationTable::new()),\n-            region_constraints: RefCell::new(RegionConstraintCollector::new()),\n+            region_constraints: RefCell::new(Some(RegionConstraintCollector::new())),\n             lexical_region_resolutions: RefCell::new(None),\n             selection_cache: traits::SelectionCache::new(),\n             evaluation_cache: traits::EvaluationCache::new(),\n@@ -767,7 +771,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             type_snapshot: self.type_variables.borrow_mut().snapshot(),\n             int_snapshot: self.int_unification_table.borrow_mut().snapshot(),\n             float_snapshot: self.float_unification_table.borrow_mut().snapshot(),\n-            region_constraints_snapshot: self.region_constraints.borrow_mut().start_snapshot(),\n+            region_constraints_snapshot: self.borrow_region_constraints().start_snapshot(),\n             was_in_snapshot: in_snapshot,\n             // Borrow tables \"in progress\" (i.e. during typeck)\n             // to ban writes from within a snapshot to them.\n@@ -801,8 +805,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.float_unification_table\n             .borrow_mut()\n             .rollback_to(float_snapshot);\n-        self.region_constraints\n-            .borrow_mut()\n+        self.borrow_region_constraints()\n             .rollback_to(region_constraints_snapshot);\n     }\n \n@@ -830,8 +833,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.float_unification_table\n             .borrow_mut()\n             .commit(float_snapshot);\n-        self.region_constraints\n-            .borrow_mut()\n+        self.borrow_region_constraints()\n             .commit(region_constraints_snapshot);\n     }\n \n@@ -887,7 +889,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                      sub: ty::Region<'tcx>,\n                      sup: ty::RegionVid)\n     {\n-        self.region_constraints.borrow_mut().add_given(sub, sup);\n+        self.borrow_region_constraints().add_given(sub, sup);\n     }\n \n     pub fn can_sub<T>(&self,\n@@ -927,7 +929,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                        a: ty::Region<'tcx>,\n                        b: ty::Region<'tcx>) {\n         debug!(\"sub_regions({:?} <: {:?})\", a, b);\n-        self.region_constraints.borrow_mut().make_subregion(origin, a, b);\n+        self.borrow_region_constraints().make_subregion(origin, a, b);\n     }\n \n     pub fn equality_predicate(&self,\n@@ -1030,7 +1032,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn next_region_var(&self, origin: RegionVariableOrigin)\n                            -> ty::Region<'tcx> {\n-        self.tcx.mk_region(ty::ReVar(self.region_constraints.borrow_mut().new_region_var(origin)))\n+        self.tcx.mk_region(ty::ReVar(self.borrow_region_constraints().new_region_var(origin)))\n     }\n \n     /// Create a region inference variable for the given\n@@ -1114,6 +1116,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         self.tainted_by_errors_flag.set(true)\n     }\n \n+    /// Process the region constraints and report any errors that\n+    /// result. After this, no more unification operations should be\n+    /// done -- or the compiler will panic -- but it is legal to use\n+    /// `resolve_type_vars_if_possible` as well as `fully_resolve`.\n     pub fn resolve_regions_and_report_errors(&self,\n                                              region_context: DefId,\n                                              region_map: &region::ScopeTree,\n@@ -1126,8 +1132,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                                                region_context,\n                                                region_map,\n                                                free_regions);\n-        let (lexical_region_resolutions, errors) =\n-            self.region_constraints.borrow_mut().resolve_regions(&region_rels);\n+        let mut region_constraints = self.region_constraints.borrow_mut()\n+                                                            .take()\n+                                                            .expect(\"regions already resolved\");\n+        let (lexical_region_resolutions, errors) = region_constraints.resolve_regions(&region_rels);\n \n         let old_value = self.lexical_region_resolutions.replace(Some(lexical_region_resolutions));\n         assert!(old_value.is_none());\n@@ -1365,7 +1373,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                a,\n                bound);\n \n-        self.region_constraints.borrow_mut().verify_generic_bound(origin, kind, a, bound);\n+        self.borrow_region_constraints().verify_generic_bound(origin, kind, a, bound);\n     }\n \n     pub fn type_moves_by_default(&self,\n@@ -1446,11 +1454,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// Normalizes associated types in `value`, potentially returning\n     /// new obligations that must further be processed.\n     pub fn partially_normalize_associated_types_in<T>(&self,\n-                                                  span: Span,\n-                                                  body_id: ast::NodeId,\n-                                                  param_env: ty::ParamEnv<'tcx>,\n-                                                  value: &T)\n-                                                  -> InferOk<'tcx, T>\n+                                                      span: Span,\n+                                                      body_id: ast::NodeId,\n+                                                      param_env: ty::ParamEnv<'tcx>,\n+                                                      value: &T)\n+                                                      -> InferOk<'tcx, T>\n         where T : TypeFoldable<'tcx>\n     {\n         debug!(\"partially_normalize_associated_types_in(value={:?})\", value);\n@@ -1463,6 +1471,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             obligations);\n         InferOk { value, obligations }\n     }\n+\n+    fn borrow_region_constraints(&self) -> RefMut<'_, RegionConstraintCollector<'tcx>> {\n+        RefMut::map(\n+            self.region_constraints.borrow_mut(),\n+            |c| c.as_mut().expect(\"region constraints already solved\"))\n+    }\n }\n \n impl<'a, 'gcx, 'tcx> TypeTrace<'tcx> {"}, {"sha": "5e70c0ce368fc667c6d1915d9b06eccef0c56cea", "filename": "src/librustc/infer/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fresolve.rs?ref=adf1519941deb21bd12b5923a45fdd0c21f79140", "patch": "@@ -75,8 +75,8 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for OpportunisticTypeAndRegionResolv\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         match *r {\n             ty::ReVar(rid) =>\n-                self.infcx.region_constraints.borrow_mut()\n-                                             .opportunistic_resolve_var(self.tcx(), rid),\n+                self.infcx.borrow_region_constraints()\n+                          .opportunistic_resolve_var(self.tcx(), rid),\n             _ =>\n                 r,\n         }"}, {"sha": "f891f692c7d8208a356ef698eb5ec0f5d4b2a0dd", "filename": "src/librustc/infer/sub.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf1519941deb21bd12b5923a45fdd0c21f79140/src%2Flibrustc%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fsub.rs?ref=adf1519941deb21bd12b5923a45fdd0c21f79140", "patch": "@@ -137,7 +137,8 @@ impl<'combine, 'infcx, 'gcx, 'tcx> TypeRelation<'infcx, 'gcx, 'tcx>\n         // from the \"cause\" field, we could perhaps give more tailored\n         // error messages.\n         let origin = SubregionOrigin::Subtype(self.fields.trace.clone());\n-        self.fields.infcx.region_constraints.borrow_mut().make_subregion(origin, a, b);\n+        self.fields.infcx.borrow_region_constraints()\n+                         .make_subregion(origin, a, b);\n \n         Ok(a)\n     }"}]}