{"sha": "3d9c123104f7c614bb3bd1a864861ebac5af5b3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkOWMxMjMxMDRmN2M2MTRiYjNiZDFhODY0ODYxZWJhYzVhZjViM2E=", "commit": {"author": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-07-12T10:18:42Z"}, "committer": {"name": "Timo Freiberg", "email": "timo.freiberg@gmail.com", "date": "2020-07-21T16:58:00Z"}, "message": "Replace existing visibility modifier in fix_visibility", "tree": {"sha": "6bf48951bccac8c3b6dcc0768f2d4867cb84fe0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bf48951bccac8c3b6dcc0768f2d4867cb84fe0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d9c123104f7c614bb3bd1a864861ebac5af5b3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d9c123104f7c614bb3bd1a864861ebac5af5b3a", "html_url": "https://github.com/rust-lang/rust/commit/3d9c123104f7c614bb3bd1a864861ebac5af5b3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d9c123104f7c614bb3bd1a864861ebac5af5b3a/comments", "author": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimoFreiberg", "id": 5281645, "node_id": "MDQ6VXNlcjUyODE2NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/5281645?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimoFreiberg", "html_url": "https://github.com/TimoFreiberg", "followers_url": "https://api.github.com/users/TimoFreiberg/followers", "following_url": "https://api.github.com/users/TimoFreiberg/following{/other_user}", "gists_url": "https://api.github.com/users/TimoFreiberg/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimoFreiberg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimoFreiberg/subscriptions", "organizations_url": "https://api.github.com/users/TimoFreiberg/orgs", "repos_url": "https://api.github.com/users/TimoFreiberg/repos", "events_url": "https://api.github.com/users/TimoFreiberg/events{/privacy}", "received_events_url": "https://api.github.com/users/TimoFreiberg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3ff2751b4cf8625e2874a482fe4d58da3d02891", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3ff2751b4cf8625e2874a482fe4d58da3d02891", "html_url": "https://github.com/rust-lang/rust/commit/a3ff2751b4cf8625e2874a482fe4d58da3d02891"}], "stats": {"total": 90, "additions": 75, "deletions": 15}, "files": [{"sha": "1d3ed3c6aa36cd2baa85e6f23927f2efe3faaca5", "filename": "crates/ra_assists/src/handlers/fix_visibility.rs", "status": "modified", "additions": 75, "deletions": 15, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/3d9c123104f7c614bb3bd1a864861ebac5af5b3a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d9c123104f7c614bb3bd1a864861ebac5af5b3a/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Ffix_visibility.rs?ref=3d9c123104f7c614bb3bd1a864861ebac5af5b3a", "patch": "@@ -3,6 +3,7 @@ use ra_db::FileId;\n use ra_syntax::{ast, AstNode, TextRange, TextSize};\n \n use crate::{utils::vis_offset, AssistContext, AssistId, AssistKind, Assists};\n+use ast::VisibilityOwner;\n \n // FIXME: this really should be a fix for diagnostic, rather than an assist.\n \n@@ -48,7 +49,8 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n         return None;\n     };\n \n-    let (offset, target, target_file, target_name) = target_data_for_def(ctx.db(), def)?;\n+    let (offset, current_visibility, target, target_file, target_name) =\n+        target_data_for_def(ctx.db(), def)?;\n \n     let missing_visibility =\n         if current_module.krate() == target_module.krate() { \"pub(crate)\" } else { \"pub\" };\n@@ -61,8 +63,20 @@ fn add_vis_to_referenced_module_def(acc: &mut Assists, ctx: &AssistContext) -> O\n     acc.add(AssistId(\"fix_visibility\", AssistKind::QuickFix), assist_label, target, |builder| {\n         builder.edit_file(target_file);\n         match ctx.config.snippet_cap {\n-            Some(cap) => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),\n-            None => builder.insert(offset, format!(\"{} \", missing_visibility)),\n+            Some(cap) => match current_visibility {\n+                Some(current_visibility) => builder.replace_snippet(\n+                    cap,\n+                    current_visibility.syntax().text_range(),\n+                    format!(\"$0{}\", missing_visibility),\n+                ),\n+                None => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),\n+            },\n+            None => match current_visibility {\n+                Some(current_visibility) => {\n+                    builder.replace(current_visibility.syntax().text_range(), missing_visibility)\n+                }\n+                None => builder.insert(offset, format!(\"{} \", missing_visibility)),\n+            },\n         }\n     })\n }\n@@ -82,14 +96,14 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n     let target_module = parent.module(ctx.db());\n \n     let in_file_source = record_field_def.source(ctx.db());\n-    let (offset, target) = match in_file_source.value {\n+    let (offset, current_visibility, target) = match in_file_source.value {\n         hir::FieldSource::Named(it) => {\n             let s = it.syntax();\n-            (vis_offset(s), s.text_range())\n+            (vis_offset(s), it.visibility(), s.text_range())\n         }\n         hir::FieldSource::Pos(it) => {\n             let s = it.syntax();\n-            (vis_offset(s), s.text_range())\n+            (vis_offset(s), it.visibility(), s.text_range())\n         }\n     };\n \n@@ -104,33 +118,51 @@ fn add_vis_to_referenced_record_field(acc: &mut Assists, ctx: &AssistContext) ->\n     acc.add(AssistId(\"fix_visibility\", AssistKind::QuickFix), assist_label, target, |builder| {\n         builder.edit_file(target_file);\n         match ctx.config.snippet_cap {\n-            Some(cap) => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),\n-            None => builder.insert(offset, format!(\"{} \", missing_visibility)),\n+            Some(cap) => match current_visibility {\n+                Some(current_visibility) => builder.replace_snippet(\n+                    cap,\n+                    dbg!(current_visibility.syntax()).text_range(),\n+                    format!(\"$0{}\", missing_visibility),\n+                ),\n+                None => builder.insert_snippet(cap, offset, format!(\"$0{} \", missing_visibility)),\n+            },\n+            None => match current_visibility {\n+                Some(current_visibility) => {\n+                    builder.replace(current_visibility.syntax().text_range(), missing_visibility)\n+                }\n+                None => builder.insert(offset, format!(\"{} \", missing_visibility)),\n+            },\n         }\n     })\n }\n \n fn target_data_for_def(\n     db: &dyn HirDatabase,\n     def: hir::ModuleDef,\n-) -> Option<(TextSize, TextRange, FileId, Option<hir::Name>)> {\n+) -> Option<(TextSize, Option<ast::Visibility>, TextRange, FileId, Option<hir::Name>)> {\n     fn offset_target_and_file_id<S, Ast>(\n         db: &dyn HirDatabase,\n         x: S,\n-    ) -> (TextSize, TextRange, FileId)\n+    ) -> (TextSize, Option<ast::Visibility>, TextRange, FileId)\n     where\n         S: HasSource<Ast = Ast>,\n-        Ast: AstNode,\n+        Ast: AstNode + ast::VisibilityOwner,\n     {\n         let source = x.source(db);\n         let in_file_syntax = source.syntax();\n         let file_id = in_file_syntax.file_id;\n         let syntax = in_file_syntax.value;\n-        (vis_offset(syntax), syntax.text_range(), file_id.original_file(db.upcast()))\n+        let current_visibility = source.value.visibility();\n+        (\n+            vis_offset(syntax),\n+            current_visibility,\n+            syntax.text_range(),\n+            file_id.original_file(db.upcast()),\n+        )\n     }\n \n     let target_name;\n-    let (offset, target, target_file) = match def {\n+    let (offset, current_visibility, target, target_file) = match def {\n         hir::ModuleDef::Function(f) => {\n             target_name = Some(f.name(db));\n             offset_target_and_file_id(db, f)\n@@ -164,13 +196,13 @@ fn target_data_for_def(\n             let in_file_source = m.declaration_source(db)?;\n             let file_id = in_file_source.file_id.original_file(db.upcast());\n             let syntax = in_file_source.value.syntax();\n-            (vis_offset(syntax), syntax.text_range(), file_id)\n+            (vis_offset(syntax), in_file_source.value.visibility(), syntax.text_range(), file_id)\n         }\n         // Enum variants can't be private, we can't modify builtin types\n         hir::ModuleDef::EnumVariant(_) | hir::ModuleDef::BuiltinType(_) => return None,\n     };\n \n-    Some((offset, target, target_file, target_name))\n+    Some((offset, current_visibility, target, target_file, target_name))\n }\n \n #[cfg(test)]\n@@ -522,6 +554,34 @@ struct Bar;\n         )\n     }\n \n+    #[test]\n+    fn replaces_pub_crate_with_pub() {\n+        check_assist(\n+            fix_visibility,\n+            r\"\n+//- /main.rs crate:a deps:foo\n+foo::Bar<|>\n+//- /lib.rs crate:foo\n+pub(crate) struct Bar;\n+\",\n+            r\"$0pub struct Bar;\n+\",\n+        );\n+        check_assist(\n+            fix_visibility,\n+            r\"\n+//- /main.rs crate:a deps:foo\n+fn main() {\n+    foo::Foo { <|>bar: () };\n+}\n+//- /lib.rs crate:foo\n+pub struct Foo { pub(crate) bar: () }\n+\",\n+            r\"pub struct Foo { $0pub bar: () }\n+\",\n+        );\n+    }\n+\n     #[test]\n     #[ignore]\n     // FIXME handle reexports properly"}]}