{"sha": "6a1092056441652fe5fe5c5b422644951e6b99ce", "node_id": "C_kwDOAAsO6NoAKDZhMTA5MjA1NjQ0MTY1MmZlNWZlNWM1YjQyMjY0NDk1MWU2Yjk5Y2U", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T14:06:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T14:06:27Z"}, "message": "Auto merge of #97235 - nbdd0121:unwind, r=Amanieu\n\nFix FFI-unwind unsoundness with mixed panic mode\n\nUB maybe introduced when an FFI exception happens in a `C-unwind` foreign function and it propagates through a crate compiled with `-C panic=unwind` into a crate compiled with `-C panic=abort` (#96926).\n\nTo prevent this unsoundness from happening, we will disallow a crate compiled with `-C panic=unwind` to be linked into `panic-abort` *if* it contains a call to `C-unwind` foreign function or function pointer. If no such call exists, then we continue to allow such mixed panic mode linking because it's sound (and stable). In fact we still need the ability to do mixed panic mode linking for std, because we only compile std once with `-C panic=unwind` and link it regardless panic strategy.\n\nFor libraries that wish to remain compile-once-and-linkable-to-both-panic-runtimes, a `ffi_unwind_calls` lint is added (gated under `c_unwind` feature gate) to flag any FFI unwind calls that will cause the linkable panic runtime be restricted.\n\nIn summary:\n```rust\n#![warn(ffi_unwind_calls)]\n\nmod foo {\n    #[no_mangle]\n    pub extern \"C-unwind\" fn foo() {}\n}\n\nextern \"C-unwind\" {\n    fn foo();\n}\n\nfn main() {\n    // Call to Rust function is fine regardless ABI.\n    foo::foo();\n    // Call to foreign function, will cause the crate to be unlinkable to panic-abort if compiled with `-Cpanic=unwind`.\n    unsafe { foo(); }\n    //~^ WARNING call to foreign function with FFI-unwind ABI\n    let ptr: extern \"C-unwind\" fn() = foo::foo;\n    // Call to function pointer, will cause the crate to be unlinkable to panic-abort if compiled with `-Cpanic=unwind`.\n    ptr();\n    //~^ WARNING call to function pointer with FFI-unwind ABI\n}\n```\n\nFix #96926\n\n`@rustbot` label: T-compiler F-c_unwind", "tree": {"sha": "71a0aac9ad05bbf9c47458a93faabe813b34cd3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71a0aac9ad05bbf9c47458a93faabe813b34cd3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a1092056441652fe5fe5c5b422644951e6b99ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a1092056441652fe5fe5c5b422644951e6b99ce", "html_url": "https://github.com/rust-lang/rust/commit/6a1092056441652fe5fe5c5b422644951e6b99ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a1092056441652fe5fe5c5b422644951e6b99ce/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0075bb4fad68e64b6d1be06bf2db366c30bc75e1", "html_url": "https://github.com/rust-lang/rust/commit/0075bb4fad68e64b6d1be06bf2db366c30bc75e1"}, {"sha": "0cf28dc95d8396aa207bddd2d4424963b64d0c16", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf28dc95d8396aa207bddd2d4424963b64d0c16", "html_url": "https://github.com/rust-lang/rust/commit/0cf28dc95d8396aa207bddd2d4424963b64d0c16"}], "stats": {"total": 405, "additions": 366, "deletions": 39}, "files": [{"sha": "5b263aded9cdfe11b6e9b2c34a0a5c517d59efa8", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -972,6 +972,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n             if !tcx.sess.opts.debugging_opts.thir_unsafeck {\n                 rustc_mir_transform::check_unsafety::check_unsafety(tcx, def_id);\n             }\n+            tcx.ensure().has_ffi_unwind_calls(def_id);\n \n             if tcx.hir().body_const_context(def_id).is_some() {\n                 tcx.ensure()"}, {"sha": "40601bb5aad47c7562168a4b9c968e9f7fd83b5e", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -3231,6 +3231,7 @@ declare_lint_pass! {\n         UNEXPECTED_CFGS,\n         DEPRECATED_WHERE_CLAUSE_LOCATION,\n         TEST_UNSTABLE_LINT,\n+        FFI_UNWIND_CALLS,\n     ]\n }\n \n@@ -3896,3 +3897,42 @@ declare_lint! {\n     \"this unstable lint is only for testing\",\n     @feature_gate = sym::test_unstable_lint;\n }\n+\n+declare_lint! {\n+    /// The `ffi_unwind_calls` lint detects calls to foreign functions or function pointers with\n+    /// `C-unwind` or other FFI-unwind ABIs.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,ignore (need FFI)\n+    /// #![feature(ffi_unwind_calls)]\n+    /// #![feature(c_unwind)]\n+    ///\n+    /// # mod impl {\n+    /// #     #[no_mangle]\n+    /// #     pub fn \"C-unwind\" fn foo() {}\n+    /// # }\n+    ///\n+    /// extern \"C-unwind\" {\n+    ///     fn foo();\n+    /// }\n+    ///\n+    /// fn bar() {\n+    ///     unsafe { foo(); }\n+    ///     let ptr: unsafe extern \"C-unwind\" fn() = foo;\n+    ///     unsafe { ptr(); }\n+    /// }\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// For crates containing such calls, if they are compiled with `-C panic=unwind` then the\n+    /// produced library cannot be linked with crates compiled with `-C panic=abort`. For crates\n+    /// that desire this ability it is therefore necessary to avoid such calls.\n+    pub FFI_UNWIND_CALLS,\n+    Allow,\n+    \"call to foreign functions or function pointers with FFI-unwind ABI\",\n+    @feature_gate = sym::c_unwind;\n+}"}, {"sha": "cb50c0fb7385f6ad3e2a517b5c4cacb66b1143c3", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -748,7 +748,7 @@ impl<'a> CrateLoader<'a> {\n         if !data.is_panic_runtime() {\n             self.sess.err(&format!(\"the crate `{}` is not a panic runtime\", name));\n         }\n-        if data.panic_strategy() != desired_strategy {\n+        if data.required_panic_strategy() != Some(desired_strategy) {\n             self.sess.err(&format!(\n                 \"the crate `{}` does not have the panic \\\n                                     strategy `{}`\","}, {"sha": "770d164894a7329fe0ba0027020295939eff639d", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -60,7 +60,6 @@ use rustc_middle::ty::TyCtxt;\n use rustc_session::config::CrateType;\n use rustc_session::cstore::CrateDepKind;\n use rustc_session::cstore::LinkagePreference::{self, RequireDynamic, RequireStatic};\n-use rustc_target::spec::PanicStrategy;\n \n pub(crate) fn calculate(tcx: TyCtxt<'_>) -> Dependencies {\n     tcx.sess\n@@ -367,14 +366,19 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n                     prev_name, cur_name\n                 ));\n             }\n-            panic_runtime = Some((cnum, tcx.panic_strategy(cnum)));\n+            panic_runtime = Some((\n+                cnum,\n+                tcx.required_panic_strategy(cnum).unwrap_or_else(|| {\n+                    bug!(\"cannot determine panic strategy of a panic runtime\");\n+                }),\n+            ));\n         }\n     }\n \n     // If we found a panic runtime, then we know by this point that it's the\n     // only one, but we perform validation here that all the panic strategy\n     // compilation modes for the whole DAG are valid.\n-    if let Some((cnum, found_strategy)) = panic_runtime {\n+    if let Some((runtime_cnum, found_strategy)) = panic_runtime {\n         let desired_strategy = sess.panic_strategy();\n \n         // First up, validate that our selected panic runtime is indeed exactly\n@@ -384,7 +388,7 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n                 \"the linked panic runtime `{}` is \\\n                                not compiled with this crate's \\\n                                panic strategy `{}`\",\n-                tcx.crate_name(cnum),\n+                tcx.crate_name(runtime_cnum),\n                 desired_strategy.desc()\n             ));\n         }\n@@ -397,18 +401,14 @@ fn verify_ok(tcx: TyCtxt<'_>, list: &[Linkage]) {\n             if let Linkage::NotLinked = *linkage {\n                 continue;\n             }\n-            if desired_strategy == PanicStrategy::Abort {\n-                continue;\n-            }\n             let cnum = CrateNum::new(i + 1);\n-            if tcx.is_compiler_builtins(cnum) {\n+            if cnum == runtime_cnum || tcx.is_compiler_builtins(cnum) {\n                 continue;\n             }\n \n-            let found_strategy = tcx.panic_strategy(cnum);\n-            if desired_strategy != found_strategy {\n+            if let Some(found_strategy) = tcx.required_panic_strategy(cnum) && desired_strategy != found_strategy {\n                 sess.err(&format!(\n-                    \"the crate `{}` is compiled with the \\\n+                    \"the crate `{}` requires \\\n                                panic strategy `{}` which is \\\n                                incompatible with this crate's \\\n                                strategy of `{}`\","}, {"sha": "f0ccf02c9fa5fda1f57bf7c1aecc90b7c870d876", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -1758,8 +1758,8 @@ impl CrateMetadata {\n         self.dep_kind.with_lock(|dep_kind| *dep_kind = f(*dep_kind))\n     }\n \n-    pub(crate) fn panic_strategy(&self) -> PanicStrategy {\n-        self.root.panic_strategy\n+    pub(crate) fn required_panic_strategy(&self) -> Option<PanicStrategy> {\n+        self.root.required_panic_strategy\n     }\n \n     pub(crate) fn needs_panic_runtime(&self) -> bool {"}, {"sha": "565eec18ea9b8d39818c16f14f533fc413b82989", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -246,7 +246,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     has_global_allocator => { cdata.root.has_global_allocator }\n     has_panic_handler => { cdata.root.has_panic_handler }\n     is_profiler_runtime => { cdata.root.profiler_runtime }\n-    panic_strategy => { cdata.root.panic_strategy }\n+    required_panic_strategy => { cdata.root.required_panic_strategy }\n     panic_in_drop_strategy => { cdata.root.panic_in_drop_strategy }\n     extern_crate => {\n         let r = *cdata.extern_crate.lock();"}, {"sha": "bb4b502bded459fc90c7212d0b5bbfcd9a58ed90", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -665,7 +665,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             triple: tcx.sess.opts.target_triple.clone(),\n             hash: tcx.crate_hash(LOCAL_CRATE),\n             stable_crate_id: tcx.def_path_hash(LOCAL_CRATE.as_def_id()).stable_crate_id(),\n-            panic_strategy: tcx.sess.panic_strategy(),\n+            required_panic_strategy: tcx.required_panic_strategy(LOCAL_CRATE),\n             panic_in_drop_strategy: tcx.sess.opts.debugging_opts.panic_in_drop,\n             edition: tcx.sess.edition(),\n             has_global_allocator: tcx.has_global_allocator(LOCAL_CRATE),"}, {"sha": "a50eb2a71cf4af1ec158a3e8e19cfe132ef63aba", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -217,7 +217,7 @@ pub(crate) struct CrateRoot {\n     extra_filename: String,\n     hash: Svh,\n     stable_crate_id: StableCrateId,\n-    panic_strategy: PanicStrategy,\n+    required_panic_strategy: Option<PanicStrategy>,\n     panic_in_drop_strategy: PanicStrategy,\n     edition: Edition,\n     has_global_allocator: bool,"}, {"sha": "294f56d16b10f96d3f73a2aa15af78d6c8f579b8", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -1356,9 +1356,13 @@ rustc_queries! {\n         desc { \"query a crate is `#![profiler_runtime]`\" }\n         separate_provide_extern\n     }\n-    query panic_strategy(_: CrateNum) -> PanicStrategy {\n+    query has_ffi_unwind_calls(key: LocalDefId) -> bool {\n+        desc { |tcx| \"check if `{}` contains FFI-unwind calls\", tcx.def_path_str(key.to_def_id()) }\n+        cache_on_disk_if { true }\n+    }\n+    query required_panic_strategy(_: CrateNum) -> Option<PanicStrategy> {\n         fatal_cycle\n-        desc { \"query a crate's configured panic strategy\" }\n+        desc { \"query a crate's required panic strategy\" }\n         separate_provide_extern\n     }\n     query panic_in_drop_strategy(_: CrateNum) -> PanicStrategy {"}, {"sha": "2c8389e532dd7af077bd3b915524616320f88d79", "filename": "compiler/rustc_mir_transform/src/abort_unwinding_calls.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fabort_unwinding_calls.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -1,6 +1,5 @@\n use crate::MirPass;\n use rustc_ast::InlineAsmOptions;\n-use rustc_hir::def::DefKind;\n use rustc_middle::mir::*;\n use rustc_middle::ty::layout;\n use rustc_middle::ty::{self, TyCtxt};\n@@ -31,11 +30,7 @@ impl<'tcx> MirPass<'tcx> for AbortUnwindingCalls {\n \n         // We don't simplify the MIR of constants at this time because that\n         // namely results in a cyclic query when we call `tcx.type_of` below.\n-        let is_function = match kind {\n-            DefKind::Fn | DefKind::AssocFn | DefKind::Ctor(..) => true,\n-            _ => tcx.is_closure(def_id),\n-        };\n-        if !is_function {\n+        if !kind.is_fn_like() {\n             return;\n         }\n "}, {"sha": "7728fdaffb0dcb9307127222cc1744b126306525", "filename": "compiler/rustc_mir_transform/src/ffi_unwind_calls.rs", "status": "added", "additions": 170, "deletions": 0, "changes": 170, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fffi_unwind_calls.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -0,0 +1,170 @@\n+use rustc_hir::def_id::{CrateNum, LocalDefId, LOCAL_CRATE};\n+use rustc_middle::mir::*;\n+use rustc_middle::ty::layout;\n+use rustc_middle::ty::query::Providers;\n+use rustc_middle::ty::{self, TyCtxt};\n+use rustc_session::lint::builtin::FFI_UNWIND_CALLS;\n+use rustc_target::spec::abi::Abi;\n+use rustc_target::spec::PanicStrategy;\n+\n+fn abi_can_unwind(abi: Abi) -> bool {\n+    use Abi::*;\n+    match abi {\n+        C { unwind }\n+        | System { unwind }\n+        | Cdecl { unwind }\n+        | Stdcall { unwind }\n+        | Fastcall { unwind }\n+        | Vectorcall { unwind }\n+        | Thiscall { unwind }\n+        | Aapcs { unwind }\n+        | Win64 { unwind }\n+        | SysV64 { unwind } => unwind,\n+        PtxKernel\n+        | Msp430Interrupt\n+        | X86Interrupt\n+        | AmdGpuKernel\n+        | EfiApi\n+        | AvrInterrupt\n+        | AvrNonBlockingInterrupt\n+        | CCmseNonSecureCall\n+        | Wasm\n+        | RustIntrinsic\n+        | PlatformIntrinsic\n+        | Unadjusted => false,\n+        Rust | RustCall | RustCold => true,\n+    }\n+}\n+\n+// Check if the body of this def_id can possibly leak a foreign unwind into Rust code.\n+fn has_ffi_unwind_calls(tcx: TyCtxt<'_>, local_def_id: LocalDefId) -> bool {\n+    debug!(\"has_ffi_unwind_calls({local_def_id:?})\");\n+\n+    // Only perform check on functions because constants cannot call FFI functions.\n+    let def_id = local_def_id.to_def_id();\n+    let kind = tcx.def_kind(def_id);\n+    if !kind.is_fn_like() {\n+        return false;\n+    }\n+\n+    let body = &*tcx.mir_built(ty::WithOptConstParam::unknown(local_def_id)).borrow();\n+\n+    let body_ty = tcx.type_of(def_id);\n+    let body_abi = match body_ty.kind() {\n+        ty::FnDef(..) => body_ty.fn_sig(tcx).abi(),\n+        ty::Closure(..) => Abi::RustCall,\n+        ty::Generator(..) => Abi::Rust,\n+        _ => span_bug!(body.span, \"unexpected body ty: {:?}\", body_ty),\n+    };\n+    let body_can_unwind = layout::fn_can_unwind(tcx, Some(def_id), body_abi);\n+\n+    // Foreign unwinds cannot leak past functions that themselves cannot unwind.\n+    if !body_can_unwind {\n+        return false;\n+    }\n+\n+    let mut tainted = false;\n+\n+    for block in body.basic_blocks() {\n+        if block.is_cleanup {\n+            continue;\n+        }\n+        let Some(terminator) = &block.terminator else { continue };\n+        let TerminatorKind::Call { func, .. } = &terminator.kind else { continue };\n+\n+        let ty = func.ty(body, tcx);\n+        let sig = ty.fn_sig(tcx);\n+\n+        // Rust calls cannot themselves create foreign unwinds.\n+        if let Abi::Rust | Abi::RustCall | Abi::RustCold = sig.abi() {\n+            continue;\n+        };\n+\n+        let fn_def_id = match ty.kind() {\n+            ty::FnPtr(_) => None,\n+            &ty::FnDef(def_id, _) => {\n+                // Rust calls cannot themselves create foreign unwinds.\n+                if !tcx.is_foreign_item(def_id) {\n+                    continue;\n+                }\n+                Some(def_id)\n+            }\n+            _ => bug!(\"invalid callee of type {:?}\", ty),\n+        };\n+\n+        if layout::fn_can_unwind(tcx, fn_def_id, sig.abi()) && abi_can_unwind(sig.abi()) {\n+            // We have detected a call that can possibly leak foreign unwind.\n+            //\n+            // Because the function body itself can unwind, we are not aborting this function call\n+            // upon unwind, so this call can possibly leak foreign unwind into Rust code if the\n+            // panic runtime linked is panic-abort.\n+\n+            let lint_root = body.source_scopes[terminator.source_info.scope]\n+                .local_data\n+                .as_ref()\n+                .assert_crate_local()\n+                .lint_root;\n+            let span = terminator.source_info.span;\n+\n+            tcx.struct_span_lint_hir(FFI_UNWIND_CALLS, lint_root, span, |lint| {\n+                let msg = match fn_def_id {\n+                    Some(_) => \"call to foreign function with FFI-unwind ABI\",\n+                    None => \"call to function pointer with FFI-unwind ABI\",\n+                };\n+                let mut db = lint.build(msg);\n+                db.span_label(span, msg);\n+                db.emit();\n+            });\n+\n+            tainted = true;\n+        }\n+    }\n+\n+    tainted\n+}\n+\n+fn required_panic_strategy(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<PanicStrategy> {\n+    assert_eq!(cnum, LOCAL_CRATE);\n+\n+    if tcx.is_panic_runtime(LOCAL_CRATE) {\n+        return Some(tcx.sess.panic_strategy());\n+    }\n+\n+    if tcx.sess.panic_strategy() == PanicStrategy::Abort {\n+        return Some(PanicStrategy::Abort);\n+    }\n+\n+    for def_id in tcx.hir().body_owners() {\n+        if tcx.has_ffi_unwind_calls(def_id) {\n+            // Given that this crate is compiled in `-C panic=unwind`, the `AbortUnwindingCalls`\n+            // MIR pass will not be run on FFI-unwind call sites, therefore a foreign exception\n+            // can enter Rust through these sites.\n+            //\n+            // On the other hand, crates compiled with `-C panic=abort` expects that all Rust\n+            // functions cannot unwind (whether it's caused by Rust panic or foreign exception),\n+            // and this expectation mismatch can cause unsoundness (#96926).\n+            //\n+            // To address this issue, we enforce that if FFI-unwind calls are used in a crate\n+            // compiled with `panic=unwind`, then the final panic strategy must be `panic=unwind`.\n+            // This will ensure that no crates will have wrong unwindability assumption.\n+            //\n+            // It should be noted that it is okay to link `panic=unwind` into a `panic=abort`\n+            // program if it contains no FFI-unwind calls. In such case foreign exception can only\n+            // enter Rust in a `panic=abort` crate, which will lead to an abort. There will also\n+            // be no exceptions generated from Rust, so the assumption which `panic=abort` crates\n+            // make, that no Rust function can unwind, indeed holds for crates compiled with\n+            // `panic=unwind` as well. In such case this function returns `None`, indicating that\n+            // the crate does not require a particular final panic strategy, and can be freely\n+            // linked to crates with either strategy (we need such ability for libstd and its\n+            // dependencies).\n+            return Some(PanicStrategy::Unwind);\n+        }\n+    }\n+\n+    // This crate can be linked with either runtime.\n+    None\n+}\n+\n+pub(crate) fn provide(providers: &mut Providers) {\n+    *providers = Providers { has_ffi_unwind_calls, required_panic_strategy, ..*providers };\n+}"}, {"sha": "12fcb299ce3f4a6a7584b34eaa4bc735cf778ade", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -59,6 +59,7 @@ pub mod dump_mir;\n mod early_otherwise_branch;\n mod elaborate_box_derefs;\n mod elaborate_drops;\n+mod ffi_unwind_calls;\n mod function_item_references;\n mod generator;\n mod inline;\n@@ -98,6 +99,7 @@ pub fn provide(providers: &mut Providers) {\n     check_unsafety::provide(providers);\n     check_packed_ref::provide(providers);\n     coverage::query::provide(providers);\n+    ffi_unwind_calls::provide(providers);\n     shim::provide(providers);\n     *providers = Providers {\n         mir_keys,\n@@ -223,6 +225,9 @@ fn mir_const<'tcx>(\n         }\n     }\n \n+    // has_ffi_unwind_calls query uses the raw mir, so make sure it is run.\n+    tcx.ensure().has_ffi_unwind_calls(def.did);\n+\n     let mut body = tcx.mir_built(def).steal();\n \n     rustc_middle::mir::dump_mir(tcx, None, \"mir_map\", &0, &body, |_, _| Ok(()));"}, {"sha": "252b7545a993d06ee98d214a8496c82056e7635c", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -210,6 +210,8 @@\n #![allow(unused_lifetimes)]\n // Tell the compiler to link to either panic_abort or panic_unwind\n #![needs_panic_runtime]\n+// Ensure that std can be linked against panic_abort despite compiled with `-C panic=unwind`\n+#![cfg_attr(not(bootstrap), deny(ffi_unwind_calls))]\n // std may use features in a platform-specific way\n #![allow(unused_features)]\n #![cfg_attr(test, feature(internal_output_capture, print_internals, update_panic_count))]"}, {"sha": "8fad49b5e9d321aff8ae2684115360af979a296e", "filename": "src/test/ui/panic-runtime/auxiliary/needs-abort.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fneeds-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fneeds-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fneeds-abort.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -0,0 +1,5 @@\n+// compile-flags:-C panic=abort\n+// no-prefer-dynamic\n+\n+#![crate_type = \"rlib\"]\n+#![no_std]"}, {"sha": "d555b531986b0d28dd3e22d77cf8e3f9d00aa5ab", "filename": "src/test/ui/panic-runtime/auxiliary/needs-unwind.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fneeds-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fneeds-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fauxiliary%2Fneeds-unwind.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags:-C panic=unwind\n+// no-prefer-dynamic\n+\n+#![crate_type = \"rlib\"]\n+#![no_std]\n+#![feature(c_unwind)]\n+\n+extern \"C-unwind\" fn foo() {}\n+\n+fn bar() {\n+    let ptr: extern \"C-unwind\" fn() = foo;\n+    ptr();\n+}"}, {"sha": "c72fb96e357f0a33242e2d861a8deb1e9d53b080", "filename": "src/test/ui/panic-runtime/need-abort-got-unwind.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fneed-abort-got-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fneed-abort-got-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fneed-abort-got-unwind.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -0,0 +1,9 @@\n+// build-fail\n+// needs-unwind\n+// error-pattern:is incompatible with this crate's strategy of `unwind`\n+// aux-build:needs-abort.rs\n+// ignore-wasm32-bare compiled with panic=abort by default\n+\n+extern crate needs_abort;\n+\n+fn main() {}"}, {"sha": "d29c7875fd0ff391365f7c8fb540747757b9583b", "filename": "src/test/ui/panic-runtime/need-abort-got-unwind.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fneed-abort-got-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fneed-abort-got-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fneed-abort-got-unwind.stderr?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -0,0 +1,4 @@\n+error: the crate `needs_abort` requires panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n+\n+error: aborting due to previous error\n+"}, {"sha": "6752ecf90d2f7b170bff9c70db1e1ce67c518b83", "filename": "src/test/ui/panic-runtime/need-unwind-got-abort.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fneed-unwind-got-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fneed-unwind-got-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fneed-unwind-got-abort.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -0,0 +1,9 @@\n+// build-fail\n+// error-pattern:is incompatible with this crate's strategy of `abort`\n+// aux-build:needs-unwind.rs\n+// compile-flags:-C panic=abort\n+// no-prefer-dynamic\n+\n+extern crate needs_unwind;\n+\n+fn main() {}"}, {"sha": "4c71df3ebc1477bac07f16f6c3e6fa8c6726f738", "filename": "src/test/ui/panic-runtime/need-unwind-got-abort.stderr", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fneed-unwind-got-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fneed-unwind-got-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fneed-unwind-got-abort.stderr?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -0,0 +1,4 @@\n+error: the crate `needs_unwind` requires panic strategy `unwind` which is incompatible with this crate's strategy of `abort`\n+\n+error: aborting due to previous error\n+"}, {"sha": "7f4a8ed290ecf08c203d5d69e007f2e67f4c44c9", "filename": "src/test/ui/panic-runtime/transitive-link-a-bunch.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Ftransitive-link-a-bunch.stderr?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -2,9 +2,7 @@ error: cannot link together two panic runtimes: panic_runtime_unwind and panic_r\n \n error: the linked panic runtime `panic_runtime_abort` is not compiled with this crate's panic strategy `unwind`\n \n-error: the crate `wants_panic_runtime_abort` is compiled with the panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n+error: the crate `wants_panic_runtime_abort` requires panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n \n-error: the crate `panic_runtime_abort` is compiled with the panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "23bfea6af15c1c99d123c200df5178d204bb6083", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -1,6 +1,6 @@\n // build-fail\n // needs-unwind\n-// error-pattern:is incompatible with this crate's strategy of `unwind`\n+// error-pattern:is not compiled with this crate's panic strategy `unwind`\n // aux-build:panic-runtime-abort.rs\n // aux-build:panic-runtime-lang-items.rs\n // ignore-wasm32-bare compiled with panic=abort by default"}, {"sha": "d306ce6c5ea282c123eaa87ea49490a808015b7b", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort.stderr?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -1,6 +1,4 @@\n error: the linked panic runtime `panic_runtime_abort` is not compiled with this crate's panic strategy `unwind`\n \n-error: the crate `panic_runtime_abort` is compiled with the panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}, {"sha": "014437b7f1b661b535528d29bc674d5e035f6e92", "filename": "src/test/ui/panic-runtime/want-unwind-got-abort2.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanic-runtime%2Fwant-unwind-got-abort2.stderr?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -1,8 +1,6 @@\n error: the linked panic runtime `panic_runtime_abort` is not compiled with this crate's panic strategy `unwind`\n \n-error: the crate `wants_panic_runtime_abort` is compiled with the panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n+error: the crate `wants_panic_runtime_abort` requires panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n \n-error: the crate `panic_runtime_abort` is compiled with the panic strategy `abort` which is incompatible with this crate's strategy of `unwind`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "ba72f74f20ce65f402db7de3a0c300b60385d930", "filename": "src/test/ui/unwind-abis/feature-gate-c-unwind.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -1,6 +1,10 @@\n // Test that the \"C-unwind\" ABI is feature-gated, and cannot be used when the\n // `c_unwind` feature gate is not used.\n \n+#![allow(ffi_unwind_calls)]\n+//~^ WARNING unknown lint: `ffi_unwind_calls`\n+//~| WARNING unknown lint: `ffi_unwind_calls`\n+\n extern \"C-unwind\" fn f() {}\n //~^ ERROR C-unwind ABI is experimental and subject to change [E0658]\n "}, {"sha": "a67f46cd2e3b6ac9cedf0f45262997808e7ecce3", "filename": "src/test/ui/unwind-abis/feature-gate-c-unwind.stderr", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Ffeature-gate-c-unwind.stderr?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -1,12 +1,33 @@\n+warning: unknown lint: `ffi_unwind_calls`\n+  --> $DIR/feature-gate-c-unwind.rs:4:1\n+   |\n+LL | #![allow(ffi_unwind_calls)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unknown_lints)]` on by default\n+   = note: the `ffi_unwind_calls` lint is unstable\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n error[E0658]: C-unwind ABI is experimental and subject to change\n-  --> $DIR/feature-gate-c-unwind.rs:4:8\n+  --> $DIR/feature-gate-c-unwind.rs:8:8\n    |\n LL | extern \"C-unwind\" fn f() {}\n    |        ^^^^^^^^^^\n    |\n    = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n    = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+warning: unknown lint: `ffi_unwind_calls`\n+  --> $DIR/feature-gate-c-unwind.rs:4:1\n+   |\n+LL | #![allow(ffi_unwind_calls)]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the `ffi_unwind_calls` lint is unstable\n+   = note: see issue #74990 <https://github.com/rust-lang/rust/issues/74990> for more information\n+   = help: add `#![feature(c_unwind)]` to the crate attributes to enable\n+\n+error: aborting due to previous error; 2 warnings emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "dadf4b1218784bc04fd5fbe65a6a2d213954aa42", "filename": "src/test/ui/unwind-abis/ffi-unwind-calls-lint.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Funwind-abis%2Fffi-unwind-calls-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Funwind-abis%2Fffi-unwind-calls-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Fffi-unwind-calls-lint.rs?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -0,0 +1,27 @@\n+// build-pass\n+// needs-unwind\n+// ignore-wasm32-bare compiled with panic=abort by default\n+\n+#![feature(c_unwind)]\n+#![warn(ffi_unwind_calls)]\n+\n+mod foo {\n+    #[no_mangle]\n+    pub extern \"C-unwind\" fn foo() {}\n+}\n+\n+extern \"C-unwind\" {\n+    fn foo();\n+}\n+\n+fn main() {\n+    // Call to Rust function is fine.\n+    foo::foo();\n+    // Call to foreign function should warn.\n+    unsafe { foo(); }\n+    //~^ WARNING call to foreign function with FFI-unwind ABI\n+    let ptr: extern \"C-unwind\" fn() = foo::foo;\n+    // Call to function pointer should also warn.\n+    ptr();\n+    //~^ WARNING call to function pointer with FFI-unwind ABI\n+}"}, {"sha": "ed41cb74623cb441233ae990eb1a656b7e0198b2", "filename": "src/test/ui/unwind-abis/ffi-unwind-calls-lint.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Funwind-abis%2Fffi-unwind-calls-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6a1092056441652fe5fe5c5b422644951e6b99ce/src%2Ftest%2Fui%2Funwind-abis%2Fffi-unwind-calls-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funwind-abis%2Fffi-unwind-calls-lint.stderr?ref=6a1092056441652fe5fe5c5b422644951e6b99ce", "patch": "@@ -0,0 +1,20 @@\n+warning: call to foreign function with FFI-unwind ABI\n+  --> $DIR/ffi-unwind-calls-lint.rs:21:14\n+   |\n+LL |     unsafe { foo(); }\n+   |              ^^^^^ call to foreign function with FFI-unwind ABI\n+   |\n+note: the lint level is defined here\n+  --> $DIR/ffi-unwind-calls-lint.rs:6:9\n+   |\n+LL | #![warn(ffi_unwind_calls)]\n+   |         ^^^^^^^^^^^^^^^^\n+\n+warning: call to function pointer with FFI-unwind ABI\n+  --> $DIR/ffi-unwind-calls-lint.rs:25:5\n+   |\n+LL |     ptr();\n+   |     ^^^^^ call to function pointer with FFI-unwind ABI\n+\n+warning: 2 warnings emitted\n+"}]}