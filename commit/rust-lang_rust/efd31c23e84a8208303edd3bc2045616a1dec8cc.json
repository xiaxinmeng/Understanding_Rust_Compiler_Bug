{"sha": "efd31c23e84a8208303edd3bc2045616a1dec8cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZDMxYzIzZTg0YTgyMDgzMDNlZGQzYmMyMDQ1NjE2YTFkZWM4Y2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-20T11:17:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-20T11:17:25Z"}, "message": "Rollup merge of #67328 - rkruppe:simplify-u128-f32-cast, r=matthewjasper\n\nRemove now-redundant range check on u128 -> f32 casts\n\nThis code was added to avoid UB in LLVM 6 and earlier, but we no longer support those LLVM versions.\nSince https://reviews.llvm.org/D47807 (released in LLVM 7), uitofp does exactly what we need.\n\nCloses #51872", "tree": {"sha": "c66ab5a3e028bbd5001509f5e35650e0e5615272", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c66ab5a3e028bbd5001509f5e35650e0e5615272"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efd31c23e84a8208303edd3bc2045616a1dec8cc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/K3FCRBK7hj4Ov3rIwAAdHIIAIgIciz98CnnV+x8nWAidbaE\nHCefM4HtcxinAfTIY2ADIHEjLhDI2pmSXrOzkeQ9+74xCIpCrQvYP2ZiTITtMMwz\n/rDAPaXwh9Z9xyKdfNOq2jmXYcV0Of7wGgBxUSxpl4iY8m1NEinhBUK39OWIuMZd\n5Mn/HPPGwLOHmrsCycFkRPYcaAzsyG7Rwa22uKhv5igQhAXFqLKh6IuG/6xVdfiC\n0GGHxlreE74k/yzLmO9YKYtPlS85pWpxvGe6fhEWSAvsNOLUbY/oiOLqMJtg6mQW\nrN1BZJM4v2rOGeH2NDk2DS6BVwxrQyC4UYGGUlFr0E4gLFEvi33jA+C7/cM3ym8=\n=dRLe\n-----END PGP SIGNATURE-----\n", "payload": "tree c66ab5a3e028bbd5001509f5e35650e0e5615272\nparent 403bb097fce6f1d1fbb3b7b12d024f20ce845900\nparent 6ad0b55597d58f65b775cc32588d5cb396993c0c\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576840645 +0100\ncommitter GitHub <noreply@github.com> 1576840645 +0100\n\nRollup merge of #67328 - rkruppe:simplify-u128-f32-cast, r=matthewjasper\n\nRemove now-redundant range check on u128 -> f32 casts\n\nThis code was added to avoid UB in LLVM 6 and earlier, but we no longer support those LLVM versions.\nSince https://reviews.llvm.org/D47807 (released in LLVM 7), uitofp does exactly what we need.\n\nCloses #51872\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efd31c23e84a8208303edd3bc2045616a1dec8cc", "html_url": "https://github.com/rust-lang/rust/commit/efd31c23e84a8208303edd3bc2045616a1dec8cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efd31c23e84a8208303edd3bc2045616a1dec8cc/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "403bb097fce6f1d1fbb3b7b12d024f20ce845900", "url": "https://api.github.com/repos/rust-lang/rust/commits/403bb097fce6f1d1fbb3b7b12d024f20ce845900", "html_url": "https://github.com/rust-lang/rust/commit/403bb097fce6f1d1fbb3b7b12d024f20ce845900"}, {"sha": "6ad0b55597d58f65b775cc32588d5cb396993c0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ad0b55597d58f65b775cc32588d5cb396993c0c", "html_url": "https://github.com/rust-lang/rust/commit/6ad0b55597d58f65b775cc32588d5cb396993c0c"}], "stats": {"total": 43, "additions": 7, "deletions": 36}, "files": [{"sha": "55d63f18cd906a7711940d1005a1d581b40bdc91", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 7, "deletions": 36, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/efd31c23e84a8208303edd3bc2045616a1dec8cc/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efd31c23e84a8208303edd3bc2045616a1dec8cc/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=efd31c23e84a8208303edd3bc2045616a1dec8cc", "patch": "@@ -341,6 +341,13 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                     llval\n                                 }\n                             }\n+                            (CastTy::Int(_), CastTy::Float) => {\n+                                if signed {\n+                                    bx.sitofp(llval, ll_t_out)\n+                                } else {\n+                                    bx.uitofp(llval, ll_t_out)\n+                                }\n+                            }\n                             (CastTy::Ptr(_), CastTy::Ptr(_)) |\n                             (CastTy::FnPtr, CastTy::Ptr(_)) |\n                             (CastTy::RPtr(_), CastTy::Ptr(_)) =>\n@@ -352,8 +359,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 let usize_llval = bx.intcast(llval, bx.cx().type_isize(), signed);\n                                 bx.inttoptr(usize_llval, ll_t_out)\n                             }\n-                            (CastTy::Int(_), CastTy::Float) =>\n-                                cast_int_to_float(&mut bx, signed, llval, ll_t_in, ll_t_out),\n                             (CastTy::Float, CastTy::Int(IntTy::I)) =>\n                                 cast_float_to_int(&mut bx, true, llval, ll_t_in, ll_t_out),\n                             (CastTy::Float, CastTy::Int(_)) =>\n@@ -720,40 +725,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     }\n }\n \n-fn cast_int_to_float<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n-    bx: &mut Bx,\n-    signed: bool,\n-    x: Bx::Value,\n-    int_ty: Bx::Type,\n-    float_ty: Bx::Type\n-) -> Bx::Value {\n-    // Most integer types, even i128, fit into [-f32::MAX, f32::MAX] after rounding.\n-    // It's only u128 -> f32 that can cause overflows (i.e., should yield infinity).\n-    // LLVM's uitofp produces undef in those cases, so we manually check for that case.\n-    let is_u128_to_f32 = !signed &&\n-        bx.cx().int_width(int_ty) == 128 &&\n-        bx.cx().float_width(float_ty) == 32;\n-    if is_u128_to_f32 {\n-        // All inputs greater or equal to (f32::MAX + 0.5 ULP) are rounded to infinity,\n-        // and for everything else LLVM's uitofp works just fine.\n-        use rustc_apfloat::ieee::Single;\n-        const MAX_F32_PLUS_HALF_ULP: u128 = ((1 << (Single::PRECISION + 1)) - 1)\n-                                            << (Single::MAX_EXP - Single::PRECISION as i16);\n-        let max = bx.cx().const_uint_big(int_ty, MAX_F32_PLUS_HALF_ULP);\n-        let overflow = bx.icmp(IntPredicate::IntUGE, x, max);\n-        let infinity_bits = bx.cx().const_u32(ieee::Single::INFINITY.to_bits() as u32);\n-        let infinity = bx.bitcast(infinity_bits, float_ty);\n-        let fp = bx.uitofp(x, float_ty);\n-        bx.select(overflow, infinity, fp)\n-    } else {\n-        if signed {\n-            bx.sitofp(x, float_ty)\n-        } else {\n-            bx.uitofp(x, float_ty)\n-        }\n-    }\n-}\n-\n fn cast_float_to_int<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     bx: &mut Bx,\n     signed: bool,"}]}