{"sha": "46bc8675edd403ffcd8963e4f26447b283e9d09e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YmM4Njc1ZWRkNDAzZmZjZDg5NjNlNGYyNjQ0N2IyODNlOWQwOWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T14:13:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-06-11T15:28:51Z"}, "message": "use Source for statics and consts", "tree": {"sha": "a233cc8fe98da533444f90edf929c6ae1e343b22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a233cc8fe98da533444f90edf929c6ae1e343b22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46bc8675edd403ffcd8963e4f26447b283e9d09e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46bc8675edd403ffcd8963e4f26447b283e9d09e", "html_url": "https://github.com/rust-lang/rust/commit/46bc8675edd403ffcd8963e4f26447b283e9d09e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46bc8675edd403ffcd8963e4f26447b283e9d09e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b", "html_url": "https://github.com/rust-lang/rust/commit/4f94af3c4aaa57ebb4cb01f7e4edfb3a0821b09b"}], "stats": {"total": 97, "additions": 41, "deletions": 56}, "files": [{"sha": "a8a0875e03c105cbd48846acb3a1bdb00bd414c3", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/46bc8675edd403ffcd8963e4f26447b283e9d09e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bc8675edd403ffcd8963e4f26447b283e9d09e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=46bc8675edd403ffcd8963e4f26447b283e9d09e", "patch": "@@ -761,12 +761,17 @@ pub struct Const {\n     pub(crate) id: ConstId,\n }\n \n+impl HasSource for Const {\n+    type Ast = TreeArc<ast::ConstDef>;\n+\n+    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::ConstDef>> {\n+        self.id.source(db).into()\n+    }\n+}\n+\n impl Const {\n-    pub fn source(\n-        self,\n-        db: &(impl DefDatabase + AstDatabase),\n-    ) -> (HirFileId, TreeArc<ast::ConstDef>) {\n-        self.id.source(db)\n+    pub fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::ConstDef>> {\n+        self.id.source(db).into()\n     }\n \n     pub fn module(self, db: &impl DefDatabase) -> Module {\n@@ -819,15 +824,15 @@ impl ConstSignature {\n         db: &(impl DefDatabase + AstDatabase),\n         konst: Const,\n     ) -> Arc<ConstSignature> {\n-        let (_, node) = konst.source(db);\n+        let node = konst.source(db).ast;\n         const_signature_for(&*node)\n     }\n \n     pub(crate) fn static_signature_query(\n         db: &(impl DefDatabase + AstDatabase),\n         konst: Static,\n     ) -> Arc<ConstSignature> {\n-        let (_, node) = konst.source(db);\n+        let node = konst.source(db).ast;\n         const_signature_for(&*node)\n     }\n }\n@@ -844,12 +849,17 @@ pub struct Static {\n     pub(crate) id: StaticId,\n }\n \n+impl HasSource for Static {\n+    type Ast = TreeArc<ast::StaticDef>;\n+\n+    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::StaticDef>> {\n+        self.id.source(db).into()\n+    }\n+}\n+\n impl Static {\n-    pub fn source(\n-        self,\n-        db: &(impl DefDatabase + AstDatabase),\n-    ) -> (HirFileId, TreeArc<ast::StaticDef>) {\n-        self.id.source(db)\n+    pub fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<TreeArc<ast::StaticDef>> {\n+        self.id.source(db).into()\n     }\n \n     pub fn module(self, db: &impl DefDatabase) -> Module {"}, {"sha": "86ca981f466aaa9affae7b5ae2a875f7175e593d", "filename": "crates/ra_hir/src/docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/46bc8675edd403ffcd8963e4f26447b283e9d09e/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bc8675edd403ffcd8963e4f26447b283e9d09e/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdocs.rs?ref=46bc8675edd403ffcd8963e4f26447b283e9d09e", "patch": "@@ -79,8 +79,8 @@ pub(crate) fn documentation_query(\n         DocDef::Struct(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::Enum(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::EnumVariant(it) => docs_from_ast(&*it.source(db).ast),\n-        DocDef::Static(it) => docs_from_ast(&*it.source(db).1),\n-        DocDef::Const(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Static(it) => docs_from_ast(&*it.source(db).ast),\n+        DocDef::Const(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::Function(it) => docs_from_ast(&*it.source(db).ast),\n         DocDef::Union(it) => docs_from_ast(&*it.source(db).1),\n         DocDef::Trait(it) => docs_from_ast(&*it.source(db).1),"}, {"sha": "48e597519f75e6a6a547f6871aef4711b5bd4d76", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46bc8675edd403ffcd8963e4f26447b283e9d09e/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bc8675edd403ffcd8963e4f26447b283e9d09e/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=46bc8675edd403ffcd8963e4f26447b283e9d09e", "patch": "@@ -1018,19 +1018,19 @@ pub(crate) fn body_with_source_map_query(\n \n     match def {\n         DefWithBody::Const(ref c) => {\n-            let (file_id, src) = c.source(db);\n-            collector = ExprCollector::new(def, file_id, def.resolver(db), db);\n-            collector.collect_const_body(&src)\n+            let src = c.source(db);\n+            collector = ExprCollector::new(def, src.file_id, def.resolver(db), db);\n+            collector.collect_const_body(&src.ast)\n         }\n         DefWithBody::Function(ref f) => {\n             let src = f.source(db);\n             collector = ExprCollector::new(def, src.file_id, def.resolver(db), db);\n             collector.collect_fn_body(&src.ast)\n         }\n         DefWithBody::Static(ref s) => {\n-            let (file_id, src) = s.source(db);\n-            collector = ExprCollector::new(def, file_id, def.resolver(db), db);\n-            collector.collect_static_body(&src)\n+            let src = s.source(db);\n+            collector = ExprCollector::new(def, src.file_id, def.resolver(db), db);\n+            collector.collect_static_body(&src.ast)\n         }\n     }\n "}, {"sha": "8c4d7127b67a5eb45289cf3229c1b8348e195781", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46bc8675edd403ffcd8963e4f26447b283e9d09e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bc8675edd403ffcd8963e4f26447b283e9d09e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=46bc8675edd403ffcd8963e4f26447b283e9d09e", "patch": "@@ -126,12 +126,11 @@ impl Completions {\n     }\n \n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n-        let (_file_id, ast_node) = constant.source(ctx.db);\n+        let ast_node = constant.source(ctx.db).ast;\n         let name = match ast_node.name() {\n             Some(name) => name,\n             _ => return,\n         };\n-        let (_, ast_node) = constant.source(ctx.db);\n         let detail = const_label(&ast_node);\n \n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.text().to_string())"}, {"sha": "a036a3b361d5d275dba05398ac2f4c9aeb20ed16", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/46bc8675edd403ffcd8963e4f26447b283e9d09e/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bc8675edd403ffcd8963e4f26447b283e9d09e/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=46bc8675edd403ffcd8963e4f26447b283e9d09e", "patch": "@@ -212,24 +212,8 @@ impl NavigationTarget {\n             hir::ModuleDef::Struct(it) => NavigationTarget::from_adt_def(db, it.into()),\n             hir::ModuleDef::Enum(it) => NavigationTarget::from_adt_def(db, it.into()),\n             hir::ModuleDef::Union(it) => NavigationTarget::from_adt_def(db, it.into()),\n-            hir::ModuleDef::Const(s) => {\n-                let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                    node.doc_comment_text(),\n-                    node.short_label(),\n-                )\n-            }\n-            hir::ModuleDef::Static(s) => {\n-                let (file_id, node) = s.source(db);\n-                NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                    node.doc_comment_text(),\n-                    node.short_label(),\n-                )\n-            }\n+            hir::ModuleDef::Const(it) => NavigationTarget::from_def_source(db, it),\n+            hir::ModuleDef::Static(it) => NavigationTarget::from_def_source(db, it),\n             hir::ModuleDef::EnumVariant(var) => {\n                 let src = var.source(db);\n                 NavigationTarget::from_named(\n@@ -281,16 +265,8 @@ impl NavigationTarget {\n \n     pub(crate) fn from_impl_item(db: &RootDatabase, impl_item: hir::ImplItem) -> NavigationTarget {\n         match impl_item {\n-            ImplItem::Method(f) => NavigationTarget::from_function(db, f),\n-            ImplItem::Const(c) => {\n-                let (file_id, node) = c.source(db);\n-                NavigationTarget::from_named(\n-                    file_id.original_file(db),\n-                    &*node,\n-                    node.doc_comment_text(),\n-                    node.short_label(),\n-                )\n-            }\n+            ImplItem::Method(it) => NavigationTarget::from_function(db, it),\n+            ImplItem::Const(it) => NavigationTarget::from_def_source(db, it),\n             ImplItem::TypeAlias(a) => {\n                 let (file_id, node) = a.source(db);\n                 NavigationTarget::from_named("}, {"sha": "fe108a5898f1343436ffb01583689a282d43b113", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46bc8675edd403ffcd8963e4f26447b283e9d09e/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46bc8675edd403ffcd8963e4f26447b283e9d09e/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=46bc8675edd403ffcd8963e4f26447b283e9d09e", "patch": "@@ -115,8 +115,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                     res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n                 }\n                 hir::ImplItem::Const(it) => {\n-                    let it = it.source(db).1;\n-                    res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                    let src = it.source(db);\n+                    res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n                 }\n                 hir::ImplItem::TypeAlias(it) => {\n                     let it = it.source(db).1;\n@@ -152,12 +152,12 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                         res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n                     }\n                     hir::ModuleDef::Const(it) => {\n-                        let it = it.source(db).1;\n-                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                        let src = it.source(db);\n+                        res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n                     }\n                     hir::ModuleDef::Static(it) => {\n-                        let it = it.source(db).1;\n-                        res.extend(hover_text(it.doc_comment_text(), it.short_label()))\n+                        let src = it.source(db);\n+                        res.extend(hover_text(src.ast.doc_comment_text(), src.ast.short_label()))\n                     }\n                     hir::ModuleDef::Trait(it) => {\n                         let it = it.source(db).1;"}]}