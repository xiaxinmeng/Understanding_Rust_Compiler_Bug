{"sha": "70601b8da249c789883725950ddf046070909095", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNjAxYjhkYTI0OWM3ODk4ODM3MjU5NTBkZGYwNDYwNzA5MDkwOTU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-15T19:46:43Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-15T19:48:01Z"}, "message": "Rollup merge of #32926 - caipre:rustbuild-verify-download, r=alexcrichton\n\nrustbuild: Verify sha256 of downloaded tarballs\n\nHere's a quick first pass at this.\n\nI don't use Python often enough to claim that this is totally Pythonic. I've left off some (almost certainly unnecessary) error handling regarding opening and processing files. The whole tarball is read into memory to calculate the hash, but the file isn't *so* large so that should be fine. I don't care for the output from `raise RuntimeError`, but that's how `run()` does it so I'm following precedent.\n\nTested by manually changing the value of `expected`, and by modifying the tarball then forcing `rustc_out_of_date()`. Both cases tripped the error.\n\nCloses https://github.com/rust-lang/rust/issues/32902", "tree": {"sha": "6d5d2e6c8fdcac432daffab3ea7c71330e473f36", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d5d2e6c8fdcac432daffab3ea7c71330e473f36"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70601b8da249c789883725950ddf046070909095", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXEUVxAAoJEDu/TT4u95+YP5gP/2V0Mp+fTt4cfUXMTlRMD+n1\naQXmI1aj4jM2WXp6KzN2lCsHp+72f8CzNNCW5fEGP9y7LP/ZVYmOLnc5VbOBvIXo\nTDNPZGBPgQ8CEzRVfKLOlRpjdvxz3lKq4hBjcBYZl0AUVoNyC+Me6elg76Yq3vEk\nvbwXqxoZd6r2s49jgWe8SPBvuhC4yMyxME8ZkRD583y70mVcqeS2ECiAHMAyv1bz\nrwaZ9JcOp14PRSX8TRVDFFycfI756TpGCZ40p/M6V4yIB9CQUi5ETMkhZu3iPXMf\n14SrXTrv0YXfwYDEgPowY/L5VIx4vMkTuIzJPcAF2hADb/PeI13M91cX2ZDPIWVU\nV6CyW/CYn4vD7ya5y/ElPf2TzWoePYd9NDlu1g84dV9J6/jLGkh60VFqZ7pSOIBx\nzasOm48xVZM273Tq67sxppOFXCx3xeZuIOwdPSnGOfGwB3hAJTaTUuVngKEGbkiQ\nk9ayK5yC0dS7i5rpUIjfwB5/NZt5o/qFMB6Emz66gbAqpNqiCtYrADUgMpb6lIPn\nCMTmEq7AzDa0E4T4BrcmWRGP1lKczPz+fx0FTbQvcugfkuoK+cJhSatncxDCSwLU\nvUFKIkYU3WhkLqzRibIm7tPW3CzKqRTV58zZ2NWTo5ha8MwMKQOK4qWmJHGUQAv4\n85jgTzHR42ir6tWNTPOe\n=3PwZ\n-----END PGP SIGNATURE-----", "payload": "tree 6d5d2e6c8fdcac432daffab3ea7c71330e473f36\nparent 6a0cfbcac294faab2b8bcd95a04cda042101a2d8\nparent e0f997d3477fe28c2c5d99229bd1cd0de81604b4\nauthor Manish Goregaokar <manishsmail@gmail.com> 1460749603 +0530\ncommitter Manish Goregaokar <manishsmail@gmail.com> 1460749681 +0530\n\nRollup merge of #32926 - caipre:rustbuild-verify-download, r=alexcrichton\n\nrustbuild: Verify sha256 of downloaded tarballs\n\nHere's a quick first pass at this.\n\nI don't use Python often enough to claim that this is totally Pythonic. I've left off some (almost certainly unnecessary) error handling regarding opening and processing files. The whole tarball is read into memory to calculate the hash, but the file isn't *so* large so that should be fine. I don't care for the output from `raise RuntimeError`, but that's how `run()` does it so I'm following precedent.\n\nTested by manually changing the value of `expected`, and by modifying the tarball then forcing `rustc_out_of_date()`. Both cases tripped the error.\n\nCloses https://github.com/rust-lang/rust/issues/32902\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70601b8da249c789883725950ddf046070909095", "html_url": "https://github.com/rust-lang/rust/commit/70601b8da249c789883725950ddf046070909095", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70601b8da249c789883725950ddf046070909095/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a0cfbcac294faab2b8bcd95a04cda042101a2d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a0cfbcac294faab2b8bcd95a04cda042101a2d8", "html_url": "https://github.com/rust-lang/rust/commit/6a0cfbcac294faab2b8bcd95a04cda042101a2d8"}, {"sha": "e0f997d3477fe28c2c5d99229bd1cd0de81604b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f997d3477fe28c2c5d99229bd1cd0de81604b4", "html_url": "https://github.com/rust-lang/rust/commit/e0f997d3477fe28c2c5d99229bd1cd0de81604b4"}], "stats": {"total": 53, "additions": 40, "deletions": 13}, "files": [{"sha": "84b8ad333c17a0aec301e718ba433830a6ebadd3", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 40, "deletions": 13, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/70601b8da249c789883725950ddf046070909095/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/70601b8da249c789883725950ddf046070909095/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=70601b8da249c789883725950ddf046070909095", "patch": "@@ -10,6 +10,7 @@\n \n import argparse\n import contextlib\n+import hashlib\n import os\n import shutil\n import subprocess\n@@ -18,13 +19,29 @@\n \n def get(url, path, verbose=False):\n     print(\"downloading \" + url)\n-    # see http://serverfault.com/questions/301128/how-to-download\n-    if sys.platform == 'win32':\n-        run([\"PowerShell.exe\", \"/nologo\", \"-Command\",\n-             \"(New-Object System.Net.WebClient).DownloadFile('\" + url +\n-                \"', '\" + path + \"')\"], verbose=verbose)\n-    else:\n-        run([\"curl\", \"-o\", path, url], verbose=verbose)\n+    sha_url = url + \".sha256\"\n+    sha_path = path + \".sha256\"\n+    for _url, _path in ((url, path), (sha_url, sha_path)):\n+        # see http://serverfault.com/questions/301128/how-to-download\n+        if sys.platform == 'win32':\n+            run([\"PowerShell.exe\", \"/nologo\", \"-Command\",\n+                 \"(New-Object System.Net.WebClient)\"\n+                 \".DownloadFile('{}', '{}')\".format(_url, _path)],\n+                verbose=verbose)\n+        else:\n+            run([\"curl\", \"-o\", _path, _url], verbose=verbose)\n+    print(\"verifying \" + path)\n+    with open(path, \"rb\") as f:\n+        found = hashlib.sha256(f.read()).hexdigest()\n+    with open(sha_path, \"r\") as f:\n+        expected, _ = f.readline().split()\n+    if found != expected:\n+        err = (\"invalid checksum:\\n\"\n+               \"    found:    {}\\n\"\n+               \"    expected: {}\".format(found, expected))\n+        if verbose:\n+            raise RuntimeError(err)\n+        sys.exit(err)\n \n def unpack(tarball, dst, verbose=False, match=None):\n     print(\"extracting \" + tarball)\n@@ -57,9 +74,10 @@ def run(args, verbose=False):\n     ret = subprocess.Popen(args)\n     code = ret.wait()\n     if code != 0:\n-        if not verbose:\n-            print(\"failed to run: \" + ' '.join(args))\n-        raise RuntimeError(\"failed to run command\")\n+        err = \"failed to run: \" + ' '.join(args)\n+        if verbose:\n+            raise RuntimeError(err)\n+        sys.exit(err)\n \n class RustBuild:\n     def download_rust_nightly(self):\n@@ -210,7 +228,10 @@ def build_triple(self):\n             if sys.platform == 'win32':\n                 return 'x86_64-pc-windows-msvc'\n             else:\n-                raise\n+                err = \"uname not found\"\n+                if self.verbose:\n+                    raise Exception(err)\n+                sys.exit(err)\n \n         # Darwin's `uname -s` lies and always returns i386. We have to use\n         # sysctl instead.\n@@ -253,7 +274,10 @@ def build_triple(self):\n                 cputype = 'x86_64'\n             ostype = 'pc-windows-gnu'\n         else:\n-            raise ValueError(\"unknown OS type: \" + ostype)\n+            err = \"unknown OS type: \" + ostype\n+            if self.verbose:\n+                raise ValueError(err)\n+            sys.exit(err)\n \n         if cputype in {'i386', 'i486', 'i686', 'i786', 'x86'}:\n             cputype = 'i686'\n@@ -269,7 +293,10 @@ def build_triple(self):\n         elif cputype in {'amd64', 'x86_64', 'x86-64', 'x64'}:\n             cputype = 'x86_64'\n         else:\n-            raise ValueError(\"unknown cpu type: \" + cputype)\n+            err = \"unknown cpu type: \" + cputype\n+            if self.verbose:\n+                raise ValueError(err)\n+            sys.exit(err)\n \n         return cputype + '-' + ostype\n "}]}