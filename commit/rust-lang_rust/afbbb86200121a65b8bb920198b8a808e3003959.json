{"sha": "afbbb86200121a65b8bb920198b8a808e3003959", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYmJiODYyMDAxMjFhNjViOGJiOTIwMTk4YjhhODA4ZTMwMDM5NTk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-22T06:54:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-22T06:54:53Z"}, "message": "Rollup merge of #72309 - petrochenkov:linkunspec, r=matthewjasper\n\nSome renaming and minor refactoring for `NativeLibraryKind`", "tree": {"sha": "0f098e541cf18a60af7051185e67fd43ef206f13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f098e541cf18a60af7051185e67fd43ef206f13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afbbb86200121a65b8bb920198b8a808e3003959", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJex3c9CRBK7hj4Ov3rIwAAdHIIAIlG3cza1kAtqMrS2XYuhQU/\nFKj1K+2FU2q4qVvPUIbk+DsRsgwoP0SC/UetDxkii1/DELNEKFGmIsnACytY93nP\ne6Swy4Vbyz6OMRa4IEGMb50Orz6HHiPM9ZgjjPfvI9VFzwsri2QdJDgzw5ZsRD4D\nSHXgM/Dd9ErltsiWQeAvt5XggQw5sFf6jqDA6b/ySGKhfULWYRVFomGQQR0oF/ii\niUstvMmsjGnxU5d1/AWHAAnHna41wlQIu3gZUXuonuAxP7O3Tb5c4g/z2cmraRYa\nKFPFZ7gwzMTpk1sdI5JMdg3s7+H46ObSDaWbBJBeWNW2eXqmqKj5G5UJtJCXAes=\n=9cWS\n-----END PGP SIGNATURE-----\n", "payload": "tree 0f098e541cf18a60af7051185e67fd43ef206f13\nparent 0eba15220d339f91f9cb01fdfa68d7d7caf85d13\nparent 8dbe4d9ba4c5cd30e12179bc51c03fafd551914a\nauthor Ralf Jung <post@ralfj.de> 1590130493 +0200\ncommitter GitHub <noreply@github.com> 1590130493 +0200\n\nRollup merge of #72309 - petrochenkov:linkunspec, r=matthewjasper\n\nSome renaming and minor refactoring for `NativeLibraryKind`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afbbb86200121a65b8bb920198b8a808e3003959", "html_url": "https://github.com/rust-lang/rust/commit/afbbb86200121a65b8bb920198b8a808e3003959", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afbbb86200121a65b8bb920198b8a808e3003959/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0eba15220d339f91f9cb01fdfa68d7d7caf85d13", "url": "https://api.github.com/repos/rust-lang/rust/commits/0eba15220d339f91f9cb01fdfa68d7d7caf85d13", "html_url": "https://github.com/rust-lang/rust/commit/0eba15220d339f91f9cb01fdfa68d7d7caf85d13"}, {"sha": "8dbe4d9ba4c5cd30e12179bc51c03fafd551914a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dbe4d9ba4c5cd30e12179bc51c03fafd551914a", "html_url": "https://github.com/rust-lang/rust/commit/8dbe4d9ba4c5cd30e12179bc51c03fafd551914a"}], "stats": {"total": 252, "additions": 127, "deletions": 125}, "files": [{"sha": "a4e17a5f675be355115099f04ec98899bf38bb01", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -367,8 +367,8 @@ pub fn provide(providers: &mut Providers<'_>) {\n \n pub fn provide_extern(providers: &mut Providers<'_>) {\n     providers.wasm_import_module_map = |tcx, cnum| {\n-        // Build up a map from DefId to a `NativeLibrary` structure, where\n-        // `NativeLibrary` internally contains information about\n+        // Build up a map from DefId to a `NativeLib` structure, where\n+        // `NativeLib` internally contains information about\n         // `#[link(wasm_import_module = \"...\")]` for example.\n         let native_libs = tcx.native_libraries(cnum);\n "}, {"sha": "5de60b5b9c82611ce4481fc12b9d64b9476ccda0", "filename": "src/librustc_codegen_ssa/back/link.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Flink.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -1,12 +1,13 @@\n use rustc_data_structures::fx::FxHashSet;\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n use rustc_hir::def_id::CrateNum;\n-use rustc_middle::middle::cstore::{EncodedMetadata, LibSource, NativeLibrary, NativeLibraryKind};\n+use rustc_middle::middle::cstore::{EncodedMetadata, LibSource, NativeLib};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo};\n use rustc_session::config::{OutputFilenames, OutputType, PrintRequest, Sanitizer};\n use rustc_session::output::{check_file_is_writeable, invalid_output_for_target, out_filename};\n use rustc_session::search_paths::PathKind;\n+use rustc_session::utils::NativeLibKind;\n /// For all the linkers we support, and information they might\n /// need out of the shared crate context before we get rid of it.\n use rustc_session::{filesearch, Session};\n@@ -328,11 +329,12 @@ fn link_rlib<'a, B: ArchiveBuilder<'a>>(\n     // metadata of the rlib we're generating somehow.\n     for lib in codegen_results.crate_info.used_libraries.iter() {\n         match lib.kind {\n-            NativeLibraryKind::NativeStatic => {}\n-            NativeLibraryKind::NativeStaticNobundle\n-            | NativeLibraryKind::NativeFramework\n-            | NativeLibraryKind::NativeRawDylib\n-            | NativeLibraryKind::NativeUnknown => continue,\n+            NativeLibKind::StaticBundle => {}\n+            NativeLibKind::StaticNoBundle\n+            | NativeLibKind::Dylib\n+            | NativeLibKind::Framework\n+            | NativeLibKind::RawDylib\n+            | NativeLibKind::Unspecified => continue,\n         }\n         if let Some(name) = lib.name {\n             ab.add_native_library(name);\n@@ -431,7 +433,7 @@ fn link_staticlib<'a, B: ArchiveBuilder<'a>>(\n         // object files come from where and selectively skip them.\n         let skip_object_files = native_libs\n             .iter()\n-            .any(|lib| lib.kind == NativeLibraryKind::NativeStatic && !relevant_lib(sess, lib));\n+            .any(|lib| lib.kind == NativeLibKind::StaticBundle && !relevant_lib(sess, lib));\n         ab.add_rlib(\n             path,\n             &name.as_str(),\n@@ -908,26 +910,28 @@ enum RlibFlavor {\n     StaticlibBase,\n }\n \n-fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLibrary]) {\n+fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLib]) {\n     let lib_args: Vec<_> = all_native_libs\n         .iter()\n         .filter(|l| relevant_lib(sess, l))\n         .filter_map(|lib| {\n             let name = lib.name?;\n             match lib.kind {\n-                NativeLibraryKind::NativeStaticNobundle | NativeLibraryKind::NativeUnknown => {\n+                NativeLibKind::StaticNoBundle\n+                | NativeLibKind::Dylib\n+                | NativeLibKind::Unspecified => {\n                     if sess.target.target.options.is_like_msvc {\n                         Some(format!(\"{}.lib\", name))\n                     } else {\n                         Some(format!(\"-l{}\", name))\n                     }\n                 }\n-                NativeLibraryKind::NativeFramework => {\n+                NativeLibKind::Framework => {\n                     // ld-only syntax, since there are no frameworks in MSVC\n                     Some(format!(\"-framework {}\", name))\n                 }\n                 // These are included, no need to print them\n-                NativeLibraryKind::NativeStatic | NativeLibraryKind::NativeRawDylib => None,\n+                NativeLibKind::StaticBundle | NativeLibKind::RawDylib => None,\n             }\n         })\n         .collect();\n@@ -1697,11 +1701,11 @@ fn add_local_native_libraries(\n             None => continue,\n         };\n         match lib.kind {\n-            NativeLibraryKind::NativeUnknown => cmd.link_dylib(name),\n-            NativeLibraryKind::NativeFramework => cmd.link_framework(name),\n-            NativeLibraryKind::NativeStaticNobundle => cmd.link_staticlib(name),\n-            NativeLibraryKind::NativeStatic => cmd.link_whole_staticlib(name, &search_path),\n-            NativeLibraryKind::NativeRawDylib => {\n+            NativeLibKind::Dylib | NativeLibKind::Unspecified => cmd.link_dylib(name),\n+            NativeLibKind::Framework => cmd.link_framework(name),\n+            NativeLibKind::StaticNoBundle => cmd.link_staticlib(name),\n+            NativeLibKind::StaticBundle => cmd.link_whole_staticlib(name, &search_path),\n+            NativeLibKind::RawDylib => {\n                 // FIXME(#58713): Proper handling for raw dylibs.\n                 bug!(\"raw_dylib feature not yet implemented\");\n             }\n@@ -1891,7 +1895,7 @@ fn add_upstream_rust_crates<'a, B: ArchiveBuilder<'a>>(\n         let native_libs = &codegen_results.crate_info.native_libraries[&cnum];\n         let skip_native = native_libs\n             .iter()\n-            .any(|lib| lib.kind == NativeLibraryKind::NativeStatic && !relevant_lib(sess, lib));\n+            .any(|lib| lib.kind == NativeLibKind::StaticBundle && !relevant_lib(sess, lib));\n \n         if (!are_upstream_rust_objects_already_included(sess)\n             || ignored_for_lto(sess, &codegen_results.crate_info, cnum))\n@@ -2033,9 +2037,9 @@ fn add_upstream_native_libraries(\n                 continue;\n             }\n             match lib.kind {\n-                NativeLibraryKind::NativeUnknown => cmd.link_dylib(name),\n-                NativeLibraryKind::NativeFramework => cmd.link_framework(name),\n-                NativeLibraryKind::NativeStaticNobundle => {\n+                NativeLibKind::Dylib | NativeLibKind::Unspecified => cmd.link_dylib(name),\n+                NativeLibKind::Framework => cmd.link_framework(name),\n+                NativeLibKind::StaticNoBundle => {\n                     // Link \"static-nobundle\" native libs only if the crate they originate from\n                     // is being linked statically to the current crate.  If it's linked dynamically\n                     // or is an rlib already included via some other dylib crate, the symbols from\n@@ -2047,8 +2051,8 @@ fn add_upstream_native_libraries(\n                 // ignore statically included native libraries here as we've\n                 // already included them when we included the rust library\n                 // previously\n-                NativeLibraryKind::NativeStatic => {}\n-                NativeLibraryKind::NativeRawDylib => {\n+                NativeLibKind::StaticBundle => {}\n+                NativeLibKind::RawDylib => {\n                     // FIXME(#58713): Proper handling for raw dylibs.\n                     bug!(\"raw_dylib feature not yet implemented\");\n                 }\n@@ -2057,7 +2061,7 @@ fn add_upstream_native_libraries(\n     }\n }\n \n-fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool {\n+fn relevant_lib(sess: &Session, lib: &NativeLib) -> bool {\n     match lib.cfg {\n         Some(ref cfg) => rustc_attr::cfg_matches(cfg, &sess.parse_sess, None),\n         None => true,"}, {"sha": "ed5448ca8bac463d20173a6b694a4a4f8e5fbd3f", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -44,6 +44,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{self, EntryFnType};\n+use rustc_session::utils::NativeLibKind;\n use rustc_session::Session;\n use rustc_span::Span;\n use rustc_symbol_mangling::test as symbol_names_test;\n@@ -895,7 +896,7 @@ pub fn provide_both(providers: &mut Providers<'_>) {\n             .native_libraries(krate)\n             .iter()\n             .filter(|lib| {\n-                if lib.kind != cstore::NativeLibraryKind::NativeUnknown {\n+                if !matches!(lib.kind, NativeLibKind::Dylib | NativeLibKind::Unspecified) {\n                     return false;\n                 }\n                 let cfg = match lib.cfg {"}, {"sha": "bd3721850f35f995105dfc923d7a3323370bd22b", "filename": "src/librustc_codegen_ssa/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_codegen_ssa%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_codegen_ssa%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Flib.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -24,7 +24,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_hir::def_id::CrateNum;\n use rustc_hir::LangItem;\n use rustc_middle::dep_graph::WorkProduct;\n-use rustc_middle::middle::cstore::{CrateSource, LibSource, NativeLibrary};\n+use rustc_middle::middle::cstore::{CrateSource, LibSource, NativeLib};\n use rustc_middle::middle::dependency_format::Dependencies;\n use rustc_middle::ty::query::Providers;\n use rustc_session::config::{OutputFilenames, OutputType, RUST_CGU_EXT};\n@@ -112,9 +112,9 @@ pub struct CrateInfo {\n     pub compiler_builtins: Option<CrateNum>,\n     pub profiler_runtime: Option<CrateNum>,\n     pub is_no_builtins: FxHashSet<CrateNum>,\n-    pub native_libraries: FxHashMap<CrateNum, Lrc<Vec<NativeLibrary>>>,\n+    pub native_libraries: FxHashMap<CrateNum, Lrc<Vec<NativeLib>>>,\n     pub crate_name: FxHashMap<CrateNum, String>,\n-    pub used_libraries: Lrc<Vec<NativeLibrary>>,\n+    pub used_libraries: Lrc<Vec<NativeLib>>,\n     pub link_args: Lrc<Vec<String>>,\n     pub used_crate_source: FxHashMap<CrateNum, Lrc<CrateSource>>,\n     pub used_crates_static: Vec<(CrateNum, LibSource)>,"}, {"sha": "0394821d095696c84ff8a5942e9be3ca4d1413af", "filename": "src/librustc_interface/tests.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_interface%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_interface%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Ftests.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -2,7 +2,6 @@ use crate::interface::parse_cfgspecs;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n-use rustc_middle::middle::cstore;\n use rustc_session::config::Strip;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{rustc_optgroups, ErrorOutputType, ExternLocation, Options, Passes};\n@@ -11,6 +10,7 @@ use rustc_session::config::{Externs, OutputType, OutputTypes, Sanitizer, SymbolM\n use rustc_session::getopts;\n use rustc_session::lint::Level;\n use rustc_session::search_paths::SearchPath;\n+use rustc_session::utils::NativeLibKind;\n use rustc_session::{build_session, Session};\n use rustc_span::edition::{Edition, DEFAULT_EDITION};\n use rustc_span::symbol::sym;\n@@ -300,30 +300,30 @@ fn test_native_libs_tracking_hash_different_values() {\n \n     // Reference\n     v1.libs = vec![\n-        (String::from(\"a\"), None, Some(cstore::NativeStatic)),\n-        (String::from(\"b\"), None, Some(cstore::NativeFramework)),\n-        (String::from(\"c\"), None, Some(cstore::NativeUnknown)),\n+        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"b\"), None, NativeLibKind::Framework),\n+        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n     ];\n \n     // Change label\n     v2.libs = vec![\n-        (String::from(\"a\"), None, Some(cstore::NativeStatic)),\n-        (String::from(\"X\"), None, Some(cstore::NativeFramework)),\n-        (String::from(\"c\"), None, Some(cstore::NativeUnknown)),\n+        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"X\"), None, NativeLibKind::Framework),\n+        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n     ];\n \n     // Change kind\n     v3.libs = vec![\n-        (String::from(\"a\"), None, Some(cstore::NativeStatic)),\n-        (String::from(\"b\"), None, Some(cstore::NativeStatic)),\n-        (String::from(\"c\"), None, Some(cstore::NativeUnknown)),\n+        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"b\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n     ];\n \n     // Change new-name\n     v4.libs = vec![\n-        (String::from(\"a\"), None, Some(cstore::NativeStatic)),\n-        (String::from(\"b\"), Some(String::from(\"X\")), Some(cstore::NativeFramework)),\n-        (String::from(\"c\"), None, Some(cstore::NativeUnknown)),\n+        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"b\"), Some(String::from(\"X\")), NativeLibKind::Framework),\n+        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n     ];\n \n     assert!(v1.dep_tracking_hash() != v2.dep_tracking_hash());\n@@ -345,21 +345,21 @@ fn test_native_libs_tracking_hash_different_order() {\n \n     // Reference\n     v1.libs = vec![\n-        (String::from(\"a\"), None, Some(cstore::NativeStatic)),\n-        (String::from(\"b\"), None, Some(cstore::NativeFramework)),\n-        (String::from(\"c\"), None, Some(cstore::NativeUnknown)),\n+        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"b\"), None, NativeLibKind::Framework),\n+        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n     ];\n \n     v2.libs = vec![\n-        (String::from(\"b\"), None, Some(cstore::NativeFramework)),\n-        (String::from(\"a\"), None, Some(cstore::NativeStatic)),\n-        (String::from(\"c\"), None, Some(cstore::NativeUnknown)),\n+        (String::from(\"b\"), None, NativeLibKind::Framework),\n+        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n     ];\n \n     v3.libs = vec![\n-        (String::from(\"c\"), None, Some(cstore::NativeUnknown)),\n-        (String::from(\"a\"), None, Some(cstore::NativeStatic)),\n-        (String::from(\"b\"), None, Some(cstore::NativeFramework)),\n+        (String::from(\"c\"), None, NativeLibKind::Unspecified),\n+        (String::from(\"a\"), None, NativeLibKind::StaticBundle),\n+        (String::from(\"b\"), None, NativeLibKind::Framework),\n     ];\n \n     assert!(v1.dep_tracking_hash() == v2.dep_tracking_hash());"}, {"sha": "fc4235a3eda098c652ecf0b7764d1ef8d848b712", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -3,22 +3,23 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_middle::middle::cstore::{self, NativeLibrary};\n+use rustc_middle::middle::cstore::NativeLib;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::parse::feature_err;\n+use rustc_session::utils::NativeLibKind;\n use rustc_session::Session;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::spec::abi::Abi;\n \n-crate fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLibrary> {\n+crate fn collect(tcx: TyCtxt<'_>) -> Vec<NativeLib> {\n     let mut collector = Collector { tcx, libs: Vec::new() };\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n     collector.process_command_line();\n     collector.libs\n }\n \n-crate fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool {\n+crate fn relevant_lib(sess: &Session, lib: &NativeLib) -> bool {\n     match lib.cfg {\n         Some(ref cfg) => attr::cfg_matches(cfg, &sess.parse_sess, None),\n         None => true,\n@@ -27,7 +28,7 @@ crate fn relevant_lib(sess: &Session, lib: &NativeLibrary) -> bool {\n \n struct Collector<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    libs: Vec<NativeLibrary>,\n+    libs: Vec<NativeLib>,\n }\n \n impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n@@ -47,9 +48,9 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                 Some(item) => item,\n                 None => continue,\n             };\n-            let mut lib = NativeLibrary {\n+            let mut lib = NativeLib {\n                 name: None,\n-                kind: cstore::NativeUnknown,\n+                kind: NativeLibKind::Unspecified,\n                 cfg: None,\n                 foreign_module: Some(self.tcx.hir().local_def_id(it.hir_id).to_def_id()),\n                 wasm_import_module: None,\n@@ -64,11 +65,11 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                         None => continue, // skip like historical compilers\n                     };\n                     lib.kind = match &*kind.as_str() {\n-                        \"static\" => cstore::NativeStatic,\n-                        \"static-nobundle\" => cstore::NativeStaticNobundle,\n-                        \"dylib\" => cstore::NativeUnknown,\n-                        \"framework\" => cstore::NativeFramework,\n-                        \"raw-dylib\" => cstore::NativeRawDylib,\n+                        \"static\" => NativeLibKind::StaticBundle,\n+                        \"static-nobundle\" => NativeLibKind::StaticNoBundle,\n+                        \"dylib\" => NativeLibKind::Dylib,\n+                        \"framework\" => NativeLibKind::Framework,\n+                        \"raw-dylib\" => NativeLibKind::RawDylib,\n                         k => {\n                             struct_span_err!(\n                                 self.tcx.sess,\n@@ -80,7 +81,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n                             .span_label(item.span(), \"unknown kind\")\n                             .span_label(m.span, \"\")\n                             .emit();\n-                            cstore::NativeUnknown\n+                            NativeLibKind::Unspecified\n                         }\n                     };\n                 } else if item.check_name(sym::name) {\n@@ -134,7 +135,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n }\n \n impl Collector<'tcx> {\n-    fn register_native_lib(&mut self, span: Option<Span>, lib: NativeLibrary) {\n+    fn register_native_lib(&mut self, span: Option<Span>, lib: NativeLib) {\n         if lib.name.as_ref().map(|&s| s == kw::Invalid).unwrap_or(false) {\n             match span {\n                 Some(span) => {\n@@ -154,7 +155,7 @@ impl Collector<'tcx> {\n             return;\n         }\n         let is_osx = self.tcx.sess.target.target.options.is_like_osx;\n-        if lib.kind == cstore::NativeFramework && !is_osx {\n+        if lib.kind == NativeLibKind::Framework && !is_osx {\n             let msg = \"native frameworks are only available on macOS targets\";\n             match span {\n                 Some(span) => struct_span_err!(self.tcx.sess, span, E0455, \"{}\", msg).emit(),\n@@ -170,7 +171,7 @@ impl Collector<'tcx> {\n             )\n             .emit();\n         }\n-        if lib.kind == cstore::NativeStaticNobundle && !self.tcx.features().static_nobundle {\n+        if lib.kind == NativeLibKind::StaticNoBundle && !self.tcx.features().static_nobundle {\n             feature_err(\n                 &self.tcx.sess.parse_sess,\n                 sym::static_nobundle,\n@@ -179,7 +180,7 @@ impl Collector<'tcx> {\n             )\n             .emit();\n         }\n-        if lib.kind == cstore::NativeRawDylib && !self.tcx.features().raw_dylib {\n+        if lib.kind == NativeLibKind::RawDylib && !self.tcx.features().raw_dylib {\n             feature_err(\n                 &self.tcx.sess.parse_sess,\n                 sym::raw_dylib,\n@@ -240,8 +241,8 @@ impl Collector<'tcx> {\n                 .drain_filter(|lib| {\n                     if let Some(lib_name) = lib.name {\n                         if lib_name.as_str() == *name {\n-                            if let Some(k) = kind {\n-                                lib.kind = k;\n+                            if kind != NativeLibKind::Unspecified {\n+                                lib.kind = kind;\n                             }\n                             if let &Some(ref new_name) = new_name {\n                                 lib.name = Some(Symbol::intern(new_name));\n@@ -255,9 +256,9 @@ impl Collector<'tcx> {\n             if existing.is_empty() {\n                 // Add if not found\n                 let new_name = new_name.as_ref().map(|s| &**s); // &Option<String> -> Option<&str>\n-                let lib = NativeLibrary {\n+                let lib = NativeLib {\n                     name: Some(Symbol::intern(new_name.unwrap_or(name))),\n-                    kind: if let Some(k) = kind { k } else { cstore::NativeUnknown },\n+                    kind,\n                     cfg: None,\n                     foreign_module: None,\n                     wasm_import_module: None,"}, {"sha": "220d74960755fc45924773e4988648621c401792", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -23,7 +23,7 @@ use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::dep_graph::{self, DepNode, DepNodeExt, DepNodeIndex};\n use rustc_middle::hir::exports::Export;\n use rustc_middle::middle::cstore::{CrateSource, ExternCrate};\n-use rustc_middle::middle::cstore::{ForeignModule, LinkagePreference, NativeLibrary};\n+use rustc_middle::middle::cstore::{ForeignModule, LinkagePreference, NativeLib};\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir::interpret::{AllocDecodingSession, AllocDecodingState};\n use rustc_middle::mir::{self, interpret, Body, Promoted};\n@@ -1278,7 +1278,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         })\n     }\n \n-    fn get_native_libraries(&self, sess: &Session) -> Vec<NativeLibrary> {\n+    fn get_native_libraries(&self, sess: &Session) -> Vec<NativeLib> {\n         if self.root.is_proc_macro_crate() {\n             // Proc macro crates do not have any *target* native libraries.\n             vec![]"}, {"sha": "1b168bf01178c17c2c304b30641e1891fb878a36", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -13,12 +13,13 @@ use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE}\n use rustc_hir::definitions::DefPathTable;\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_middle::hir::exports::Export;\n-use rustc_middle::middle::cstore::{CrateSource, CrateStore, EncodedMetadata, NativeLibraryKind};\n+use rustc_middle::middle::cstore::{CrateSource, CrateStore, EncodedMetadata};\n use rustc_middle::middle::exported_symbols::ExportedSymbol;\n use rustc_middle::middle::stability::DeprecationEntry;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::query::QueryConfig;\n use rustc_middle::ty::{self, TyCtxt};\n+use rustc_session::utils::NativeLibKind;\n use rustc_session::{CrateDisambiguator, Session};\n use rustc_span::source_map::{self, Span, Spanned};\n use rustc_span::symbol::{Ident, Symbol};\n@@ -246,11 +247,13 @@ pub fn provide(providers: &mut Providers<'_>) {\n     // resolve! Does this work? Unsure! That's what the issue is about\n     *providers = Providers {\n         is_dllimport_foreign_item: |tcx, id| match tcx.native_library_kind(id) {\n-            Some(NativeLibraryKind::NativeUnknown | NativeLibraryKind::NativeRawDylib) => true,\n+            Some(NativeLibKind::Dylib | NativeLibKind::RawDylib | NativeLibKind::Unspecified) => {\n+                true\n+            }\n             _ => false,\n         },\n         is_statically_included_foreign_item: |tcx, id| match tcx.native_library_kind(id) {\n-            Some(NativeLibraryKind::NativeStatic | NativeLibraryKind::NativeStaticNobundle) => true,\n+            Some(NativeLibKind::StaticBundle | NativeLibKind::StaticNoBundle) => true,\n             _ => false,\n         },\n         native_library_kind: |tcx, id| {"}, {"sha": "ebe91d3cee2aaa97ac7b3c8d5721acc9d5561792", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -18,9 +18,7 @@ use rustc_hir::lang_items;\n use rustc_hir::{AnonConst, GenericParamKind};\n use rustc_index::vec::Idx;\n use rustc_middle::hir::map::Map;\n-use rustc_middle::middle::cstore::{\n-    EncodedMetadata, ForeignModule, LinkagePreference, NativeLibrary,\n-};\n+use rustc_middle::middle::cstore::{EncodedMetadata, ForeignModule, LinkagePreference, NativeLib};\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::{\n     metadata_symbol_name, ExportedSymbol, SymbolExportLevel,\n@@ -1355,7 +1353,7 @@ impl EncodeContext<'tcx> {\n         self.encode_promoted_mir(def_id);\n     }\n \n-    fn encode_native_libraries(&mut self) -> Lazy<[NativeLibrary]> {\n+    fn encode_native_libraries(&mut self) -> Lazy<[NativeLib]> {\n         let used_libraries = self.tcx.native_libraries(LOCAL_CRATE);\n         self.lazy(used_libraries.iter().cloned())\n     }"}, {"sha": "89d525eb80b8c4c2db5f243ebf7a7dac56922d8f", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -11,7 +11,7 @@ use rustc_hir::def_id::{DefId, DefIndex};\n use rustc_hir::lang_items;\n use rustc_index::vec::IndexVec;\n use rustc_middle::hir::exports::Export;\n-use rustc_middle::middle::cstore::{DepKind, ForeignModule, LinkagePreference, NativeLibrary};\n+use rustc_middle::middle::cstore::{DepKind, ForeignModule, LinkagePreference, NativeLib};\n use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use rustc_middle::mir;\n use rustc_middle::ty::{self, ReprOptions, Ty};\n@@ -190,7 +190,7 @@ crate struct CrateRoot<'tcx> {\n     lang_items: Lazy<[(DefIndex, usize)]>,\n     lang_items_missing: Lazy<[lang_items::LangItem]>,\n     diagnostic_items: Lazy<[(Symbol, DefIndex)]>,\n-    native_libraries: Lazy<[NativeLibrary]>,\n+    native_libraries: Lazy<[NativeLib]>,\n     foreign_modules: Lazy<[ForeignModule]>,\n     source_map: Lazy<[rustc_span::SourceFile]>,\n     def_path_table: Lazy<rustc_hir::definitions::DefPathTable>,"}, {"sha": "97e877df96663956e1db36d22c8c0e75672d9657", "filename": "src/librustc_middle/middle/cstore.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_middle%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_middle%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmiddle%2Fcstore.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -2,8 +2,6 @@\n //! are *mostly* used as a part of that interface, but these should\n //! probably get a better home if someone can find one.\n \n-pub use self::NativeLibraryKind::*;\n-\n use crate::ty::TyCtxt;\n \n use rustc_ast::ast;\n@@ -14,7 +12,7 @@ use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash, DefPathTable};\n use rustc_macros::HashStable;\n use rustc_session::search_paths::PathKind;\n-pub use rustc_session::utils::NativeLibraryKind;\n+use rustc_session::utils::NativeLibKind;\n use rustc_session::CrateDisambiguator;\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n@@ -89,8 +87,8 @@ pub enum LinkagePreference {\n }\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable)]\n-pub struct NativeLibrary {\n-    pub kind: NativeLibraryKind,\n+pub struct NativeLib {\n+    pub kind: NativeLibKind,\n     pub name: Option<Symbol>,\n     pub cfg: Option<ast::MetaItem>,\n     pub foreign_module: Option<DefId>,"}, {"sha": "f7f5c5df8d67bc176e9d9ba4c063f1895d7ed49d", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -131,7 +131,7 @@ rustc_queries! {\n             cache_on_disk_if { key.is_local() }\n         }\n \n-        query native_libraries(_: CrateNum) -> Lrc<Vec<NativeLibrary>> {\n+        query native_libraries(_: CrateNum) -> Lrc<Vec<NativeLib>> {\n             desc { \"looking up the native libraries of a linked crate\" }\n         }\n \n@@ -937,7 +937,7 @@ rustc_queries! {\n         query is_dllimport_foreign_item(_: DefId) -> bool {}\n         query is_statically_included_foreign_item(_: DefId) -> bool {}\n         query native_library_kind(_: DefId)\n-            -> Option<NativeLibraryKind> {}\n+            -> Option<NativeLibKind> {}\n     }\n \n     Linking {"}, {"sha": "f61fc65ce394c066374c90ef36c6840ac365d902", "filename": "src/librustc_middle/ty/query/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fquery%2Fmod.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -4,8 +4,8 @@ use crate::hir::map;\n use crate::infer::canonical::{self, Canonical};\n use crate::lint::LintLevelMap;\n use crate::middle::codegen_fn_attrs::CodegenFnAttrs;\n-use crate::middle::cstore::{CrateSource, DepKind, NativeLibraryKind};\n-use crate::middle::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLibrary};\n+use crate::middle::cstore::{CrateSource, DepKind};\n+use crate::middle::cstore::{ExternCrate, ForeignModule, LinkagePreference, NativeLib};\n use crate::middle::exported_symbols::{ExportedSymbol, SymbolExportLevel};\n use crate::middle::lib_features::LibFeatures;\n use crate::middle::privacy::AccessLevels;\n@@ -46,6 +46,7 @@ use rustc_hir::lang_items::{LangItem, LanguageItems};\n use rustc_hir::{Crate, HirIdSet, ItemLocalId, TraitCandidate};\n use rustc_index::vec::IndexVec;\n use rustc_session::config::{EntryFnType, OptLevel, OutputFilenames, SymbolManglingVersion};\n+use rustc_session::utils::NativeLibKind;\n use rustc_session::CrateDisambiguator;\n use rustc_target::spec::PanicStrategy;\n "}, {"sha": "5bdd7b67723b8d284cbc43070e37a5559a5287eb", "filename": "src/librustc_session/config.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_session%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_session%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Fconfig.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -5,7 +5,7 @@ pub use crate::options::*;\n \n use crate::lint;\n use crate::search_paths::SearchPath;\n-use crate::utils::NativeLibraryKind;\n+use crate::utils::NativeLibKind;\n use crate::{early_error, early_warn, Session};\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -1452,7 +1452,7 @@ fn select_debuginfo(\n fn parse_libs(\n     matches: &getopts::Matches,\n     error_format: ErrorOutputType,\n-) -> Vec<(String, Option<String>, Option<NativeLibraryKind>)> {\n+) -> Vec<(String, Option<String>, NativeLibKind)> {\n     matches\n         .opt_strs(\"l\")\n         .into_iter()\n@@ -1462,13 +1462,11 @@ fn parse_libs(\n             let mut parts = s.splitn(2, '=');\n             let kind = parts.next().unwrap();\n             let (name, kind) = match (parts.next(), kind) {\n-                (None, name) => (name, None),\n-                (Some(name), \"dylib\") => (name, Some(NativeLibraryKind::NativeUnknown)),\n-                (Some(name), \"framework\") => (name, Some(NativeLibraryKind::NativeFramework)),\n-                (Some(name), \"static\") => (name, Some(NativeLibraryKind::NativeStatic)),\n-                (Some(name), \"static-nobundle\") => {\n-                    (name, Some(NativeLibraryKind::NativeStaticNobundle))\n-                }\n+                (None, name) => (name, NativeLibKind::Unspecified),\n+                (Some(name), \"dylib\") => (name, NativeLibKind::Dylib),\n+                (Some(name), \"framework\") => (name, NativeLibKind::Framework),\n+                (Some(name), \"static\") => (name, NativeLibKind::StaticBundle),\n+                (Some(name), \"static-nobundle\") => (name, NativeLibKind::StaticNoBundle),\n                 (_, s) => {\n                     early_error(\n                         error_format,\n@@ -1480,9 +1478,7 @@ fn parse_libs(\n                     );\n                 }\n             };\n-            if kind == Some(NativeLibraryKind::NativeStaticNobundle)\n-                && !nightly_options::is_nightly_build()\n-            {\n+            if kind == NativeLibKind::StaticNoBundle && !nightly_options::is_nightly_build() {\n                 early_error(\n                     error_format,\n                     \"the library kind 'static-nobundle' is only \\\n@@ -2003,7 +1999,7 @@ crate mod dep_tracking {\n         SymbolManglingVersion,\n     };\n     use crate::lint;\n-    use crate::utils::NativeLibraryKind;\n+    use crate::utils::NativeLibKind;\n     use rustc_feature::UnstableFeatures;\n     use rustc_span::edition::Edition;\n     use rustc_target::spec::{CodeModel, MergeFunctions, PanicStrategy, RelocModel};\n@@ -2062,7 +2058,6 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Option<RelroLevel>);\n     impl_dep_tracking_hash_via_hash!(Option<lint::Level>);\n     impl_dep_tracking_hash_via_hash!(Option<PathBuf>);\n-    impl_dep_tracking_hash_via_hash!(Option<NativeLibraryKind>);\n     impl_dep_tracking_hash_via_hash!(CrateType);\n     impl_dep_tracking_hash_via_hash!(MergeFunctions);\n     impl_dep_tracking_hash_via_hash!(PanicStrategy);\n@@ -2073,7 +2068,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(DebugInfo);\n     impl_dep_tracking_hash_via_hash!(UnstableFeatures);\n     impl_dep_tracking_hash_via_hash!(OutputTypes);\n-    impl_dep_tracking_hash_via_hash!(NativeLibraryKind);\n+    impl_dep_tracking_hash_via_hash!(NativeLibKind);\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n     impl_dep_tracking_hash_via_hash!(CFGuard);\n@@ -2088,11 +2083,7 @@ crate mod dep_tracking {\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);\n     impl_dep_tracking_hash_for_sortable_vec_of!(CrateType);\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, lint::Level));\n-    impl_dep_tracking_hash_for_sortable_vec_of!((\n-        String,\n-        Option<String>,\n-        Option<NativeLibraryKind>\n-    ));\n+    impl_dep_tracking_hash_for_sortable_vec_of!((String, Option<String>, NativeLibKind));\n     impl_dep_tracking_hash_for_sortable_vec_of!((String, u64));\n     impl_dep_tracking_hash_for_sortable_vec_of!(Sanitizer);\n "}, {"sha": "3b6c21e7de0083e38b6310b495eb01f5c26d1322", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -3,7 +3,7 @@ use crate::config::*;\n use crate::early_error;\n use crate::lint;\n use crate::search_paths::SearchPath;\n-use crate::utils::NativeLibraryKind;\n+use crate::utils::NativeLibKind;\n \n use rustc_target::spec::{CodeModel, LinkerFlavor, MergeFunctions, PanicStrategy};\n use rustc_target::spec::{RelocModel, RelroLevel, TargetTriple, TlsModel};\n@@ -93,7 +93,7 @@ top_level_options!(\n         describe_lints: bool [UNTRACKED],\n         output_types: OutputTypes [TRACKED],\n         search_paths: Vec<SearchPath> [UNTRACKED],\n-        libs: Vec<(String, Option<String>, Option<NativeLibraryKind>)> [TRACKED],\n+        libs: Vec<(String, Option<String>, NativeLibKind)> [TRACKED],\n         maybe_sysroot: Option<PathBuf> [UNTRACKED],\n \n         target_triple: TargetTriple [TRACKED],"}, {"sha": "b97308c22cb7d0343cdc23e0efa03c360f5968fb", "filename": "src/librustc_session/utils.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_session%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afbbb86200121a65b8bb920198b8a808e3003959/src%2Flibrustc_session%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Futils.rs?ref=afbbb86200121a65b8bb920198b8a808e3003959", "patch": "@@ -11,17 +11,22 @@ impl Session {\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n-pub enum NativeLibraryKind {\n-    /// native static library (.a archive)\n-    NativeStatic,\n-    /// native static library, which doesn't get bundled into .rlibs\n-    NativeStaticNobundle,\n-    /// macOS-specific\n-    NativeFramework,\n-    /// Windows dynamic library without import library.\n-    NativeRawDylib,\n-    /// default way to specify a dynamic library\n-    NativeUnknown,\n+pub enum NativeLibKind {\n+    /// Static library (e.g. `libfoo.a` on Linux or `foo.lib` on Windows/MSVC) included\n+    /// when linking a final binary, but not when archiving an rlib.\n+    StaticNoBundle,\n+    /// Static library (e.g. `libfoo.a` on Linux or `foo.lib` on Windows/MSVC) included\n+    /// when linking a final binary, but also included when archiving an rlib.\n+    StaticBundle,\n+    /// Dynamic library (e.g. `libfoo.so` on Linux)\n+    /// or an import library corresponding to a dynamic library (e.g. `foo.lib` on Windows/MSVC).\n+    Dylib,\n+    /// Dynamic library (e.g. `foo.dll` on Windows) without a corresponding import library.\n+    RawDylib,\n+    /// A macOS-specific kind of dynamic libraries.\n+    Framework,\n+    /// The library kind wasn't specified, `Dylib` is currently used as a default.\n+    Unspecified,\n }\n \n-rustc_data_structures::impl_stable_hash_via_hash!(NativeLibraryKind);\n+rustc_data_structures::impl_stable_hash_via_hash!(NativeLibKind);"}]}