{"sha": "40d5c58a805f147a2e0cd6ed4097b167674f042d", "node_id": "C_kwDOAAsO6NoAKDQwZDVjNThhODA1ZjE0N2EyZTBjZDZlZDQwOTdiMTY3Njc0ZjA0MmQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-21T15:34:55Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-21T15:35:51Z"}, "message": "Fully render const item completions from hir", "tree": {"sha": "d436fb9ecaa09a8cf241ecc7dd71d6f04359b1b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d436fb9ecaa09a8cf241ecc7dd71d6f04359b1b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40d5c58a805f147a2e0cd6ed4097b167674f042d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40d5c58a805f147a2e0cd6ed4097b167674f042d", "html_url": "https://github.com/rust-lang/rust/commit/40d5c58a805f147a2e0cd6ed4097b167674f042d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40d5c58a805f147a2e0cd6ed4097b167674f042d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "929cae74b160a9a3567962d9f880bd60e0dc4e34", "url": "https://api.github.com/repos/rust-lang/rust/commits/929cae74b160a9a3567962d9f880bd60e0dc4e34", "html_url": "https://github.com/rust-lang/rust/commit/929cae74b160a9a3567962d9f880bd60e0dc4e34"}], "stats": {"total": 45, "additions": 11, "deletions": 34}, "files": [{"sha": "2b53d4a27bfac3fc5fd744eff76e0dd272d772b2", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40d5c58a805f147a2e0cd6ed4097b167674f042d/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d5c58a805f147a2e0cd6ed4097b167674f042d/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=40d5c58a805f147a2e0cd6ed4097b167674f042d", "patch": "@@ -420,7 +420,7 @@ where\n     E: Fn(&D) -> Option<V>,\n     V: Display,\n {\n-    let label = if let Some(value) = (value_extractor)(&def) {\n+    let label = if let Some(value) = value_extractor(&def) {\n         format!(\"{} = {}\", def.display(db), value)\n     } else {\n         def.display(db).to_string()"}, {"sha": "8628de413b5179c2dff31ff0e044e8b1297b91fa", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/40d5c58a805f147a2e0cd6ed4097b167674f042d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d5c58a805f147a2e0cd6ed4097b167674f042d/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=40d5c58a805f147a2e0cd6ed4097b167674f042d", "patch": "@@ -287,7 +287,7 @@ fn foo() { let _ = lib::S::$0 }\n \"#,\n             expect![[r#\"\n                 fn public_method() fn()\n-                ct PUBLIC_CONST    pub const PUBLIC_CONST: u32;\n+                ct PUBLIC_CONST    pub const PUBLIC_CONST: u32\n                 ta PublicType      pub type PublicType;\n             \"#]],\n         );\n@@ -379,10 +379,10 @@ fn foo<T: Sub>() { T::$0 }\n             expect![[r#\"\n                 ta SubTy (as Sub)        type SubTy;\n                 ta Ty (as Super)         type Ty;\n-                ct C2 (as Sub)           const C2: ();\n+                ct C2 (as Sub)           const C2: ()\n                 fn subfunc() (as Sub)    fn()\n                 me submethod(\u2026) (as Sub) fn(&self)\n-                ct CONST (as Super)      const CONST: u8;\n+                ct CONST (as Super)      const CONST: u8\n                 fn func() (as Super)     fn()\n                 me method(\u2026) (as Super)  fn(&self)\n             \"#]],\n@@ -419,10 +419,10 @@ impl<T> Sub for Wrap<T> {\n             expect![[r#\"\n                 ta SubTy (as Sub)        type SubTy;\n                 ta Ty (as Super)         type Ty;\n-                ct CONST (as Super)      const CONST: u8;\n+                ct CONST (as Super)      const CONST: u8\n                 fn func() (as Super)     fn()\n                 me method(\u2026) (as Super)  fn(&self)\n-                ct C2 (as Sub)           const C2: ();\n+                ct C2 (as Sub)           const C2: ()\n                 fn subfunc() (as Sub)    fn()\n                 me submethod(\u2026) (as Sub) fn(&self)\n             \"#]],\n@@ -653,7 +653,7 @@ impl u8 {\n }\n \"#,\n             expect![[r#\"\n-                ct MAX     pub const MAX: Self;\n+                ct MAX     pub const MAX: Self\n                 me func(\u2026) fn(self)\n             \"#]],\n         );"}, {"sha": "4c8258f12c23ff6df8dda3badccdae93c4633b90", "filename": "crates/ide_completion/src/render/const_.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40d5c58a805f147a2e0cd6ed4097b167674f042d/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d5c58a805f147a2e0cd6ed4097b167674f042d/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fconst_.rs?ref=40d5c58a805f147a2e0cd6ed4097b167674f042d", "patch": "@@ -1,8 +1,7 @@\n //! Renderer for `const` fields.\n \n-use hir::{AsAssocItem, HasSource};\n+use hir::{AsAssocItem, HirDisplay};\n use ide_db::SymbolKind;\n-use syntax::display::const_label;\n \n use crate::{item::CompletionItem, render::RenderContext};\n \n@@ -14,8 +13,7 @@ pub(crate) fn render_const(ctx: RenderContext<'_>, const_: hir::Const) -> Option\n fn render(ctx: RenderContext<'_>, const_: hir::Const) -> Option<CompletionItem> {\n     let db = ctx.db();\n     let name = const_.name(db)?.to_smol_str();\n-    // FIXME: This is parsing files!\n-    let detail = const_label(&const_.source(db)?.value);\n+    let detail = const_.display(db).to_string();\n \n     let mut item = CompletionItem::new(SymbolKind::Const, ctx.source_range(), name.clone());\n     item.set_documentation(ctx.docs(const_))"}, {"sha": "eb95bdcda95b0555953adfff86ae4d48d2050a9f", "filename": "crates/ide_completion/src/tests/expression.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40d5c58a805f147a2e0cd6ed4097b167674f042d/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d5c58a805f147a2e0cd6ed4097b167674f042d/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fexpression.rs?ref=40d5c58a805f147a2e0cd6ed4097b167674f042d", "patch": "@@ -546,7 +546,7 @@ fn func() {\n             ev TupleV(\u2026)   (u32)\n             ev RecordV     {field: u32}\n             ev UnitV       ()\n-            ct ASSOC_CONST const ASSOC_CONST: ();\n+            ct ASSOC_CONST const ASSOC_CONST: ()\n             fn assoc_fn()  fn()\n             ta AssocType   type AssocType;\n         \"#]],"}, {"sha": "0e2d4088274c236f7dfda06484e66973b2424133", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40d5c58a805f147a2e0cd6ed4097b167674f042d/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d5c58a805f147a2e0cd6ed4097b167674f042d/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=40d5c58a805f147a2e0cd6ed4097b167674f042d", "patch": "@@ -294,7 +294,7 @@ fn func() {\n             ev TupleV(\u2026)   (u32)\n             ev RecordV     {field: u32}\n             ev UnitV       ()\n-            ct ASSOC_CONST const ASSOC_CONST: ();\n+            ct ASSOC_CONST const ASSOC_CONST: ()\n             fn assoc_fn()  fn()\n             ta AssocType   type AssocType;\n         \"#]],"}, {"sha": "10f1c901387de41095131ad80cf763631770c7e5", "filename": "crates/syntax/src/display.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/40d5c58a805f147a2e0cd6ed4097b167674f042d/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40d5c58a805f147a2e0cd6ed4097b167674f042d/crates%2Fsyntax%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fdisplay.rs?ref=40d5c58a805f147a2e0cd6ed4097b167674f042d", "patch": "@@ -50,27 +50,6 @@ pub fn function_declaration(node: &ast::Fn) -> String {\n     buf\n }\n \n-pub fn const_label(node: &ast::Const) -> String {\n-    let mut s = String::new();\n-    if let Some(vis) = node.visibility() {\n-        format_to!(s, \"{} \", vis);\n-    }\n-    format_to!(s, \"const \");\n-    if let Some(name) = node.name() {\n-        format_to!(s, \"{}\", name);\n-    } else {\n-        format_to!(s, \"?\");\n-    }\n-    format_to!(s, \": \");\n-    if let Some(ty) = node.ty() {\n-        format_to!(s, \"{}\", ty);\n-    } else {\n-        format_to!(s, \"?\");\n-    }\n-    format_to!(s, \";\");\n-    s\n-}\n-\n pub fn type_label(node: &ast::TypeAlias) -> String {\n     let mut s = String::new();\n     if let Some(vis) = node.visibility() {"}]}