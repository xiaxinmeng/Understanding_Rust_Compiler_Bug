{"sha": "5e7fd65419384e5322fe18d3c6ea37e59860a9bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlN2ZkNjU0MTkzODRlNTMyMmZlMThkM2M2ZWEzN2U1OTg2MGE5YmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-28T13:24:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-28T13:24:47Z"}, "message": "Auto merge of #47794 - etaoins:fix-ice-on-const-eval-of-union-field, r=eddyb\n\nFix ICE on const eval of union field\n\nMIR's `Const::get_field()` attempts to retrieve the value for a given field in a constant. In the case of a union constant it was falling through to a generic `const_get_elt` based on the field index. As union fields don't have an index this caused an ICE in `llvm_field_index`.\n\nFix by simply returning the current value when accessing any field in a union. This works because all union fields start at byte offset 0.\n\nThe added test uses `const_fn` it ensure the field is extracted using MIR's const evaluation. The crash is reproducible without it, however.\n\nFixes #47788\n\nr? @eddyb", "tree": {"sha": "b408d493b9e6ff86c7b240e4b67557e056f4077f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b408d493b9e6ff86c7b240e4b67557e056f4077f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e7fd65419384e5322fe18d3c6ea37e59860a9bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7fd65419384e5322fe18d3c6ea37e59860a9bc", "html_url": "https://github.com/rust-lang/rust/commit/5e7fd65419384e5322fe18d3c6ea37e59860a9bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e7fd65419384e5322fe18d3c6ea37e59860a9bc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0119b44270243db7479ea946bb0cdd5522c351b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0119b44270243db7479ea946bb0cdd5522c351b6", "html_url": "https://github.com/rust-lang/rust/commit/0119b44270243db7479ea946bb0cdd5522c351b6"}, {"sha": "ed7e4e1e27d21d47b93f756e615b5cb750275c3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed7e4e1e27d21d47b93f756e615b5cb750275c3f", "html_url": "https://github.com/rust-lang/rust/commit/ed7e4e1e27d21d47b93f756e615b5cb750275c3f"}], "stats": {"total": 50, "additions": 49, "deletions": 1}, "files": [{"sha": "f519e27dce98528f1a978e596ab3343cd88f8ad1", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e7fd65419384e5322fe18d3c6ea37e59860a9bc/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7fd65419384e5322fe18d3c6ea37e59860a9bc/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=5e7fd65419384e5322fe18d3c6ea37e59860a9bc", "patch": "@@ -140,7 +140,10 @@ impl<'a, 'tcx> Const<'tcx> {\n                 }\n             }\n             _ => {\n-                const_get_elt(self.llval, layout.llvm_field_index(i))\n+                match layout.fields {\n+                    layout::FieldPlacement::Union(_) => self.llval,\n+                    _ => const_get_elt(self.llval, layout.llvm_field_index(i)),\n+                }\n             }\n         }\n     }"}, {"sha": "f83f49f298b901d2b86227cddffa4bbad821497a", "filename": "src/test/run-pass/union/union-const-eval-field.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5e7fd65419384e5322fe18d3c6ea37e59860a9bc/src%2Ftest%2Frun-pass%2Funion%2Funion-const-eval-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e7fd65419384e5322fe18d3c6ea37e59860a9bc/src%2Ftest%2Frun-pass%2Funion%2Funion-const-eval-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-const-eval-field.rs?ref=5e7fd65419384e5322fe18d3c6ea37e59860a9bc", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+\n+type Field1 = i32;\n+type Field2 = f32;\n+type Field3 = i64;\n+\n+union DummyUnion {\n+    field1: Field1,\n+    field2: Field2,\n+    field3: Field3,\n+}\n+\n+const FLOAT1_AS_I32: i32 = 1065353216;\n+const UNION: DummyUnion = DummyUnion { field1: FLOAT1_AS_I32 };\n+\n+const fn read_field1() -> Field1 {\n+    const FIELD1: Field1 = unsafe { UNION.field1 };\n+    FIELD1\n+}\n+\n+const fn read_field2() -> Field2 {\n+    const FIELD2: Field2 = unsafe { UNION.field2 };\n+    FIELD2\n+}\n+\n+const fn read_field3() -> Field3 {\n+    const FIELD3: Field3 = unsafe { UNION.field3 };\n+    FIELD3\n+}\n+\n+fn main() {\n+    assert_eq!(read_field1(), FLOAT1_AS_I32);\n+    assert_eq!(read_field2(), 1.0);\n+    assert_eq!(read_field3(), unsafe { UNION.field3 });\n+}"}]}