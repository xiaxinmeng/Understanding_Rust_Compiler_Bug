{"sha": "e8be3d238695145830a2c7a9045ca53c5b0c1a6e", "node_id": "C_kwDOAAsO6NoAKGU4YmUzZDIzODY5NTE0NTgzMGEyYzdhOTA0NWNhNTNjNWIwYzFhNmU", "commit": {"author": {"name": "Frank Steffahn", "email": "fdsteffahn@gmail.com", "date": "2023-03-14T16:09:54Z"}, "committer": {"name": "Frank Steffahn", "email": "fdsteffahn@gmail.com", "date": "2023-03-22T23:22:42Z"}, "message": "Stabilize `arc_into_inner` and `rc_into_inner`.\n\nIncludes resolving the FIXMEs in the documentation,\nand some very minor documentation improvements.", "tree": {"sha": "17ba2f2641d84aa27938af8c665b8b985c1f760e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17ba2f2641d84aa27938af8c665b8b985c1f760e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8be3d238695145830a2c7a9045ca53c5b0c1a6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8be3d238695145830a2c7a9045ca53c5b0c1a6e", "html_url": "https://github.com/rust-lang/rust/commit/e8be3d238695145830a2c7a9045ca53c5b0c1a6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8be3d238695145830a2c7a9045ca53c5b0c1a6e/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a266f11990d9544ee408e213e1eec8cc9eb032b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a266f11990d9544ee408e213e1eec8cc9eb032b7", "html_url": "https://github.com/rust-lang/rust/commit/a266f11990d9544ee408e213e1eec8cc9eb032b7"}], "stats": {"total": 29, "additions": 6, "deletions": 23}, "files": [{"sha": "1e9cf404f77ea10af86cfaeaff32fb2db1417d2f", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e8be3d238695145830a2c7a9045ca53c5b0c1a6e/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8be3d238695145830a2c7a9045ca53c5b0c1a6e/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=e8be3d238695145830a2c7a9045ca53c5b0c1a6e", "patch": "@@ -692,10 +692,10 @@ impl<T> Rc<T> {\n     /// it is guaranteed that exactly one of the calls returns the inner value.\n     /// This means in particular that the inner value is not dropped.\n     ///\n-    /// This is equivalent to `Rc::try_unwrap(...).ok()`. (Note that these are not equivalent for\n-    /// `Arc`, due to race conditions that do not apply to `Rc`.)\n+    /// This is equivalent to `Rc::try_unwrap(this).ok()`. (Note that these are not equivalent for\n+    /// [`Arc`](crate::sync::Arc), due to race conditions that do not apply to `Rc`.)\n     #[inline]\n-    #[unstable(feature = \"rc_into_inner\", issue = \"106894\")]\n+    #[stable(feature = \"rc_into_inner\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn into_inner(this: Self) -> Option<T> {\n         Rc::try_unwrap(this).ok()\n     }"}, {"sha": "150924851d21d9cbf63f670ef3d543bf0ca70fea", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e8be3d238695145830a2c7a9045ca53c5b0c1a6e/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8be3d238695145830a2c7a9045ca53c5b0c1a6e/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=e8be3d238695145830a2c7a9045ca53c5b0c1a6e", "patch": "@@ -662,20 +662,17 @@ impl<T> Arc<T> {\n     ///\n     /// This will succeed even if there are outstanding weak references.\n     ///\n-    // FIXME: when `Arc::into_inner` is stabilized, add this paragraph:\n-    /*\n     /// It is strongly recommended to use [`Arc::into_inner`] instead if you don't\n     /// want to keep the `Arc` in the [`Err`] case.\n     /// Immediately dropping the [`Err`] payload, like in the expression\n     /// `Arc::try_unwrap(this).ok()`, can still cause the strong count to\n     /// drop to zero and the inner value of the `Arc` to be dropped:\n-    /// For instance if two threads execute this expression in parallel, then\n+    /// For instance if two threads each execute this expression in parallel, then\n     /// there is a race condition. The threads could first both check whether they\n     /// have the last clone of their `Arc` via `Arc::try_unwrap`, and then\n     /// both drop their `Arc` in the call to [`ok`][`Result::ok`],\n     /// taking the strong count from two down to zero.\n     ///\n-     */\n     /// # Examples\n     ///\n     /// ```\n@@ -719,20 +716,13 @@ impl<T> Arc<T> {\n     /// This means in particular that the inner value is not dropped.\n     ///\n     /// The similar expression `Arc::try_unwrap(this).ok()` does not\n-    /// offer such a guarantee. See the last example below.\n-    //\n-    // FIXME: when `Arc::into_inner` is stabilized, add this to end\n-    // of the previous sentence:\n-    /*\n+    /// offer such a guarantee. See the last example below\n     /// and the documentation of [`Arc::try_unwrap`].\n-     */\n     ///\n     /// # Examples\n     ///\n     /// Minimal example demonstrating the guarantee that `Arc::into_inner` gives.\n     /// ```\n-    /// #![feature(arc_into_inner)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// let x = Arc::new(3);\n@@ -756,8 +746,6 @@ impl<T> Arc<T> {\n     ///\n     /// A more practical example demonstrating the need for `Arc::into_inner`:\n     /// ```\n-    /// #![feature(arc_into_inner)]\n-    ///\n     /// use std::sync::Arc;\n     ///\n     /// // Definition of a simple singly linked list using `Arc`:\n@@ -807,13 +795,8 @@ impl<T> Arc<T> {\n     /// x_thread.join().unwrap();\n     /// y_thread.join().unwrap();\n     /// ```\n-\n-    // FIXME: when `Arc::into_inner` is stabilized, adjust above documentation\n-    // and the documentation of `Arc::try_unwrap` according to the `FIXME`s. Also\n-    // open an issue on rust-lang/rust-clippy, asking for a lint against\n-    // `Arc::try_unwrap(...).ok()`.\n     #[inline]\n-    #[unstable(feature = \"arc_into_inner\", issue = \"106894\")]\n+    #[stable(feature = \"arc_into_inner\", since = \"CURRENT_RUSTC_VERSION\")]\n     pub fn into_inner(this: Self) -> Option<T> {\n         // Make sure that the ordinary `Drop` implementation isn\u2019t called as well\n         let mut this = mem::ManuallyDrop::new(this);"}]}