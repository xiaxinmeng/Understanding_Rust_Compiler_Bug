{"sha": "ed2b3a2f0b8e0737b38528aa7d64efb176c7e2a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkMmIzYTJmMGI4ZTA3MzdiMzg1MjhhYTdkNjRlZmIxNzZjN2UyYTg=", "commit": {"author": {"name": "Kiet Tran", "email": "ktt3ja@gmail.com", "date": "2014-03-11T04:53:23Z"}, "committer": {"name": "Kiet Tran", "email": "ktt3ja@gmail.com", "date": "2014-03-12T19:31:30Z"}, "message": "Add shift and remove methods for Vec", "tree": {"sha": "06a4fc8e54d301a8658ca6a4b9ce88e7a8dfde63", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06a4fc8e54d301a8658ca6a4b9ce88e7a8dfde63"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed2b3a2f0b8e0737b38528aa7d64efb176c7e2a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed2b3a2f0b8e0737b38528aa7d64efb176c7e2a8", "html_url": "https://github.com/rust-lang/rust/commit/ed2b3a2f0b8e0737b38528aa7d64efb176c7e2a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed2b3a2f0b8e0737b38528aa7d64efb176c7e2a8/comments", "author": {"login": "ktt3ja", "id": 1735399, "node_id": "MDQ6VXNlcjE3MzUzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1735399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktt3ja", "html_url": "https://github.com/ktt3ja", "followers_url": "https://api.github.com/users/ktt3ja/followers", "following_url": "https://api.github.com/users/ktt3ja/following{/other_user}", "gists_url": "https://api.github.com/users/ktt3ja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktt3ja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktt3ja/subscriptions", "organizations_url": "https://api.github.com/users/ktt3ja/orgs", "repos_url": "https://api.github.com/users/ktt3ja/repos", "events_url": "https://api.github.com/users/ktt3ja/events{/privacy}", "received_events_url": "https://api.github.com/users/ktt3ja/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ktt3ja", "id": 1735399, "node_id": "MDQ6VXNlcjE3MzUzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1735399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ktt3ja", "html_url": "https://github.com/ktt3ja", "followers_url": "https://api.github.com/users/ktt3ja/followers", "following_url": "https://api.github.com/users/ktt3ja/following{/other_user}", "gists_url": "https://api.github.com/users/ktt3ja/gists{/gist_id}", "starred_url": "https://api.github.com/users/ktt3ja/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ktt3ja/subscriptions", "organizations_url": "https://api.github.com/users/ktt3ja/orgs", "repos_url": "https://api.github.com/users/ktt3ja/repos", "events_url": "https://api.github.com/users/ktt3ja/events{/privacy}", "received_events_url": "https://api.github.com/users/ktt3ja/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18356675e51ca1d01493718df3f6feed52f096a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/18356675e51ca1d01493718df3f6feed52f096a9", "html_url": "https://github.com/rust-lang/rust/commit/18356675e51ca1d01493718df3f6feed52f096a9"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "eb73416c80167ae668d0cc806e641bee665a7116", "filename": "src/libstd/vec_ng.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ed2b3a2f0b8e0737b38528aa7d64efb176c7e2a8/src%2Flibstd%2Fvec_ng.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed2b3a2f0b8e0737b38528aa7d64efb176c7e2a8/src%2Flibstd%2Fvec_ng.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec_ng.rs?ref=ed2b3a2f0b8e0737b38528aa7d64efb176c7e2a8", "patch": "@@ -398,6 +398,11 @@ impl<T> Vec<T> {\n         self.insert(0, element)\n     }\n \n+    #[inline]\n+    pub fn shift(&mut self) -> Option<T> {\n+        self.remove(0)\n+    }\n+\n     pub fn insert(&mut self, index: uint, element: T) {\n         let len = self.len();\n         assert!(index <= len);\n@@ -420,6 +425,30 @@ impl<T> Vec<T> {\n         }\n     }\n \n+    fn remove(&mut self, index: uint) -> Option<T> {\n+        let len = self.len();\n+        if index < len {\n+            unsafe { // infallible\n+                let ret;\n+                {\n+                    let slice = self.as_mut_slice();\n+                    // the place we are taking from.\n+                    let ptr = slice.as_mut_ptr().offset(index as int);\n+                    // copy it out, unsafely having a copy of the value on\n+                    // the stack and in the vector at the same time.\n+                    ret = Some(ptr::read(ptr as *T));\n+\n+                    // Shift everything down to fill in that spot.\n+                    ptr::copy_memory(ptr, &*ptr.offset(1), len - index - 1);\n+                }\n+                self.set_len(len - 1);\n+                ret\n+            }\n+        } else {\n+            None\n+        }\n+    }\n+\n     #[inline]\n     pub fn rev_iter<'a>(&'a self) -> RevItems<'a,T> {\n         self.as_slice().rev_iter()"}]}