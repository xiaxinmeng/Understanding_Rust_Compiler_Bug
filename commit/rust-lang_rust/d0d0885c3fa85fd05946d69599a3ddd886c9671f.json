{"sha": "d0d0885c3fa85fd05946d69599a3ddd886c9671f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZDA4ODVjM2ZhODVmZDA1OTQ2ZDY5NTk5YTNkZGQ4ODZjOTY3MWY=", "commit": {"author": {"name": "Emerentius", "email": "emerentius@arcor.de", "date": "2018-05-23T05:20:37Z"}, "committer": {"name": "Emerentius", "email": "emerentius@arcor.de", "date": "2018-06-01T15:13:25Z"}, "message": "compacts join code", "tree": {"sha": "c6e7dc6144c440692cc4fe34ec2a606d6d5c15d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6e7dc6144c440692cc4fe34ec2a606d6d5c15d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0d0885c3fa85fd05946d69599a3ddd886c9671f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d0885c3fa85fd05946d69599a3ddd886c9671f", "html_url": "https://github.com/rust-lang/rust/commit/d0d0885c3fa85fd05946d69599a3ddd886c9671f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0d0885c3fa85fd05946d69599a3ddd886c9671f/comments", "author": {"login": "Emerentius", "id": 9992929, "node_id": "MDQ6VXNlcjk5OTI5Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/9992929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emerentius", "html_url": "https://github.com/Emerentius", "followers_url": "https://api.github.com/users/Emerentius/followers", "following_url": "https://api.github.com/users/Emerentius/following{/other_user}", "gists_url": "https://api.github.com/users/Emerentius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emerentius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emerentius/subscriptions", "organizations_url": "https://api.github.com/users/Emerentius/orgs", "repos_url": "https://api.github.com/users/Emerentius/repos", "events_url": "https://api.github.com/users/Emerentius/events{/privacy}", "received_events_url": "https://api.github.com/users/Emerentius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Emerentius", "id": 9992929, "node_id": "MDQ6VXNlcjk5OTI5Mjk=", "avatar_url": "https://avatars.githubusercontent.com/u/9992929?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Emerentius", "html_url": "https://github.com/Emerentius", "followers_url": "https://api.github.com/users/Emerentius/followers", "following_url": "https://api.github.com/users/Emerentius/following{/other_user}", "gists_url": "https://api.github.com/users/Emerentius/gists{/gist_id}", "starred_url": "https://api.github.com/users/Emerentius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Emerentius/subscriptions", "organizations_url": "https://api.github.com/users/Emerentius/orgs", "repos_url": "https://api.github.com/users/Emerentius/repos", "events_url": "https://api.github.com/users/Emerentius/events{/privacy}", "received_events_url": "https://api.github.com/users/Emerentius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2fd7da0cf0b835a540d333b4b72426b4735c586", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2fd7da0cf0b835a540d333b4b72426b4735c586", "html_url": "https://github.com/rust-lang/rust/commit/b2fd7da0cf0b835a540d333b4b72426b4735c586"}], "stats": {"total": 44, "additions": 14, "deletions": 30}, "files": [{"sha": "4db6d5d715cb1802408cbb6fafa6ab10628170d7", "filename": "src/liballoc/str.rs", "status": "modified", "additions": 14, "deletions": 30, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d0d0885c3fa85fd05946d69599a3ddd886c9671f/src%2Fliballoc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0d0885c3fa85fd05946d69599a3ddd886c9671f/src%2Fliballoc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstr.rs?ref=d0d0885c3fa85fd05946d69599a3ddd886c9671f", "patch": "@@ -104,54 +104,38 @@ macro_rules! spezialize_for_lengths {\n     ($separator:expr, $target:expr, $iter:expr; $($num:expr),*) => {\n         let mut target = $target;\n         let iter = $iter;\n-        let sep_len = $separator.len();\n         let sep_bytes = $separator;\n         match $separator.len() {\n             $(\n                 // loops with hardcoded sizes run much faster\n                 // specialize the cases with small separator lengths\n                 $num => {\n                     for s in iter {\n-                        target.get_unchecked_mut(..$num)\n-                            .copy_from_slice(sep_bytes);\n-\n-                        let s_bytes = s.borrow().as_ref();\n-                        let offset = s_bytes.len();\n-                        target = {target}.get_unchecked_mut($num..);\n-                        target.get_unchecked_mut(..offset)\n-                            .copy_from_slice(s_bytes);\n-                        target = {target}.get_unchecked_mut(offset..);\n+                        copy_slice_and_advance!(target, sep_bytes);\n+                        copy_slice_and_advance!(target, s.borrow().as_ref());\n                     }\n                 },\n             )*\n-            0 => {\n-                // concat, same principle without the separator\n-                for s in iter {\n-                    let s_bytes = s.borrow().as_ref();\n-                    let offset = s_bytes.len();\n-                    target.get_unchecked_mut(..offset)\n-                        .copy_from_slice(s_bytes);\n-                    target = {target}.get_unchecked_mut(offset..);\n-                }\n-            },\n             _ => {\n                 // arbitrary non-zero size fallback\n                 for s in iter {\n-                    target.get_unchecked_mut(..sep_len)\n-                        .copy_from_slice(sep_bytes);\n-\n-                    let s_bytes = s.borrow().as_ref();\n-                    let offset = s_bytes.len();\n-                    target = {target}.get_unchecked_mut(sep_len..);\n-                    target.get_unchecked_mut(..offset)\n-                        .copy_from_slice(s_bytes);\n-                    target = {target}.get_unchecked_mut(offset..);\n+                    copy_slice_and_advance!(target, sep_bytes);\n+                    copy_slice_and_advance!(target, s.borrow().as_ref());\n                 }\n             }\n         }\n     };\n }\n \n+macro_rules! copy_slice_and_advance {\n+    ($target:expr, $bytes:expr) => {\n+        let len = $bytes.len();\n+        $target.get_unchecked_mut(..len)\n+            .copy_from_slice($bytes);\n+        $target = {$target}.get_unchecked_mut(len..);\n+    }\n+}\n+\n // Optimized join implementation that works for both Vec<T> (T: Copy) and String's inner vec\n // Currently (2018-05-13) there is a bug with type inference and specialization (see issue #36262)\n // For this reason SliceConcatExt<T> is not specialized for T: Copy and SliceConcatExt<str> is the\n@@ -192,7 +176,7 @@ where\n                 // copy separator and strs over without bounds checks\n                 // generate loops with hardcoded offsets for small separators\n                 // massive improvements possible (~ x2)\n-                spezialize_for_lengths!(sep, target, iter; 1, 2, 3, 4);\n+                spezialize_for_lengths!(sep, target, iter; 0, 1, 2, 3, 4);\n             }\n             result.set_len(len);\n         }"}]}