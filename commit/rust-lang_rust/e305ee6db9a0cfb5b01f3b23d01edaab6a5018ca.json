{"sha": "e305ee6db9a0cfb5b01f3b23d01edaab6a5018ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMDVlZTZkYjlhMGNmYjViMDFmM2IyM2QwMWVkYWFiNmE1MDE4Y2E=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-19T02:01:22Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2016-01-19T02:02:56Z"}, "message": "manual fixups", "tree": {"sha": "b25608fb97988c04ffd7de872fa2dda280b31544", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b25608fb97988c04ffd7de872fa2dda280b31544"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e305ee6db9a0cfb5b01f3b23d01edaab6a5018ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e305ee6db9a0cfb5b01f3b23d01edaab6a5018ca", "html_url": "https://github.com/rust-lang/rust/commit/e305ee6db9a0cfb5b01f3b23d01edaab6a5018ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e305ee6db9a0cfb5b01f3b23d01edaab6a5018ca/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2acfa838a09d5d142dc691802d7f001195fea0ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/2acfa838a09d5d142dc691802d7f001195fea0ec", "html_url": "https://github.com/rust-lang/rust/commit/2acfa838a09d5d142dc691802d7f001195fea0ec"}], "stats": {"total": 33, "additions": 13, "deletions": 20}, "files": [{"sha": "ac5b235854a04cc54fb174cd94ea2fdc1f99026c", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 13, "deletions": 20, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e305ee6db9a0cfb5b01f3b23d01edaab6a5018ca/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e305ee6db9a0cfb5b01f3b23d01edaab6a5018ca/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=e305ee6db9a0cfb5b01f3b23d01edaab6a5018ca", "patch": "@@ -316,27 +316,20 @@ impl TestOpts {\n /// Result of parsing the options.\n pub type OptRes = Result<TestOpts, String>;\n \n+#[cfg_attr(rustfmt, rustfmt_skip)]\n fn optgroups() -> Vec<getopts::OptGroup> {\n-    vec![getopts::optflag(\"\", \"ignored\", \"Run ignored tests\"),\n-         getopts::optflag(\"\", \"test\", \"Run tests and not benchmarks\"),\n-         getopts::optflag(\"\", \"bench\", \"Run benchmarks instead of tests\"),\n-         getopts::optflag(\"h\", \"help\", \"Display this message (longer with --help)\"),\n-         getopts::optopt(\"\",\n-                         \"logfile\",\n-                         \"Write logs to the specified file instead of stdout\",\n-                         \"PATH\"),\n-         getopts::optflag(\"\",\n-                          \"nocapture\",\n-                          \"don't capture stdout/stderr of each task, allow printing directly\"),\n-         getopts::optopt(\"\",\n-                         \"color\",\n-                         \"Configure coloring of output:\n-            auto   = colorize if stdout \\\n-                          is a tty and tests are run on serially (default);\n-            always = \\\n-                          always colorize output;\n-            never  = never colorize output;\",\n-                         \"auto|always|never\")]\n+    vec!(getopts::optflag(\"\", \"ignored\", \"Run ignored tests\"),\n+      getopts::optflag(\"\", \"test\", \"Run tests and not benchmarks\"),\n+      getopts::optflag(\"\", \"bench\", \"Run benchmarks instead of tests\"),\n+      getopts::optflag(\"h\", \"help\", \"Display this message (longer with --help)\"),\n+      getopts::optopt(\"\", \"logfile\", \"Write logs to the specified file instead \\\n+                          of stdout\", \"PATH\"),\n+      getopts::optflag(\"\", \"nocapture\", \"don't capture stdout/stderr of each \\\n+                                         task, allow printing directly\"),\n+      getopts::optopt(\"\", \"color\", \"Configure coloring of output:\n+            auto   = colorize if stdout is a tty and tests are run on serially (default);\n+            always = always colorize output;\n+            never  = never colorize output;\", \"auto|always|never\"))\n }\n \n fn usage(binary: &str) {"}]}