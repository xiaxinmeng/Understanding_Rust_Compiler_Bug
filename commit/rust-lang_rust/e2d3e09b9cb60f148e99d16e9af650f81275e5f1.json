{"sha": "e2d3e09b9cb60f148e99d16e9af650f81275e5f1", "node_id": "C_kwDOAAsO6NoAKGUyZDNlMDliOWNiNjBmMTQ4ZTk5ZDE2ZTlhZjY1MGY4MTI3NWU1ZjE", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-30T14:45:51Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2021-10-02T17:00:19Z"}, "message": "Prevent macro ambiguity errors\n\nThe previous macro_rules! parsers failed when an additional modifier was added\nwith ambiguity errors. The error is pretty unclear as to what exactly the cause\nhere is, but this change simplifies the argument parsing code such that the\nerror is avoided.", "tree": {"sha": "de896a06331369f9f6544fc51a15139079f19336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de896a06331369f9f6544fc51a15139079f19336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e2d3e09b9cb60f148e99d16e9af650f81275e5f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e2d3e09b9cb60f148e99d16e9af650f81275e5f1", "html_url": "https://github.com/rust-lang/rust/commit/e2d3e09b9cb60f148e99d16e9af650f81275e5f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e2d3e09b9cb60f148e99d16e9af650f81275e5f1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e1211081239be62a5d0bb3bbcb29a9f14621c81", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e1211081239be62a5d0bb3bbcb29a9f14621c81", "html_url": "https://github.com/rust-lang/rust/commit/6e1211081239be62a5d0bb3bbcb29a9f14621c81"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "005017185c148458dd62271b689b4083209f35ba", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e2d3e09b9cb60f148e99d16e9af650f81275e5f1/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d3e09b9cb60f148e99d16e9af650f81275e5f1/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=e2d3e09b9cb60f148e99d16e9af650f81275e5f1", "patch": "@@ -455,28 +455,28 @@ pub fn rustc_queries(input: TokenStream) -> TokenStream {\n \n         // Pass on the fatal_cycle modifier\n         if let Some(fatal_cycle) = &modifiers.fatal_cycle {\n-            attributes.push(quote! { #fatal_cycle });\n+            attributes.push(quote! { (#fatal_cycle) });\n         };\n         // Pass on the storage modifier\n         if let Some(ref ty) = modifiers.storage {\n             let span = ty.span();\n-            attributes.push(quote_spanned! {span=> storage(#ty) });\n+            attributes.push(quote_spanned! {span=> (storage #ty) });\n         };\n         // Pass on the cycle_delay_bug modifier\n         if let Some(cycle_delay_bug) = &modifiers.cycle_delay_bug {\n-            attributes.push(quote! { #cycle_delay_bug });\n+            attributes.push(quote! { (#cycle_delay_bug) });\n         };\n         // Pass on the no_hash modifier\n         if let Some(no_hash) = &modifiers.no_hash {\n-            attributes.push(quote! { #no_hash });\n+            attributes.push(quote! { (#no_hash) });\n         };\n         // Pass on the anon modifier\n         if let Some(anon) = &modifiers.anon {\n-            attributes.push(quote! { #anon });\n+            attributes.push(quote! { (#anon) });\n         };\n         // Pass on the eval_always modifier\n         if let Some(eval_always) = &modifiers.eval_always {\n-            attributes.push(quote! { #eval_always });\n+            attributes.push(quote! { (#eval_always) });\n         };\n \n         // This uses the span of the query definition for the commas,"}, {"sha": "07d42902be5dd379803e95a051528df461895371", "filename": "compiler/rustc_middle/src/dep_graph/dep_node.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e2d3e09b9cb60f148e99d16e9af650f81275e5f1/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d3e09b9cb60f148e99d16e9af650f81275e5f1/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fdep_node.rs?ref=e2d3e09b9cb60f148e99d16e9af650f81275e5f1", "patch": "@@ -140,11 +140,11 @@ macro_rules! is_eval_always_attr {\n }\n \n macro_rules! contains_anon_attr {\n-    ($($attr:ident $(($($attr_args:tt)*))* ),*) => ({$(is_anon_attr!($attr) | )* false});\n+    ($(($attr:ident $($attr_args:tt)* )),*) => ({$(is_anon_attr!($attr) | )* false});\n }\n \n macro_rules! contains_eval_always_attr {\n-    ($($attr:ident $(($($attr_args:tt)*))* ),*) => ({$(is_eval_always_attr!($attr) | )* false});\n+    ($(($attr:ident $($attr_args:tt)* )),*) => ({$(is_eval_always_attr!($attr) | )* false});\n }\n \n #[allow(non_upper_case_globals)]"}, {"sha": "e5fd38252da53174b27516ae4d0931809e9626f4", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e2d3e09b9cb60f148e99d16e9af650f81275e5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d3e09b9cb60f148e99d16e9af650f81275e5f1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=e2d3e09b9cb60f148e99d16e9af650f81275e5f1", "patch": "@@ -111,11 +111,11 @@ macro_rules! query_storage {\n     ([][$K:ty, $V:ty]) => {\n         <DefaultCacheSelector as CacheSelector<$K, $V>>::Cache\n     };\n-    ([storage($ty:ty) $($rest:tt)*][$K:ty, $V:ty]) => {\n+    ([(storage $ty:ty) $($rest:tt)*][$K:ty, $V:ty]) => {\n         <$ty as CacheSelector<$K, $V>>::Cache\n     };\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n-        query_storage!([$($($modifiers)*)*][$($args)*])\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        query_storage!([$($modifiers)*][$($args)*])\n     };\n }\n "}, {"sha": "818b798ab55e730f3dd7eadc00425d8d0939eedd", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e2d3e09b9cb60f148e99d16e9af650f81275e5f1/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e2d3e09b9cb60f148e99d16e9af650f81275e5f1/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=e2d3e09b9cb60f148e99d16e9af650f81275e5f1", "patch": "@@ -253,53 +253,53 @@ macro_rules! handle_cycle_error {\n         $error.emit();\n         Value::from_cycle_error($tcx)\n     }};\n-    ([fatal_cycle $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n+    ([(fatal_cycle) $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n         $error.emit();\n         $tcx.sess.abort_if_errors();\n         unreachable!()\n     }};\n-    ([cycle_delay_bug $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n+    ([(cycle_delay_bug) $($rest:tt)*][$tcx:expr, $error:expr]) => {{\n         $error.delay_as_bug();\n         Value::from_cycle_error($tcx)\n     }};\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n-        handle_cycle_error!([$($($modifiers)*)*][$($args)*])\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        handle_cycle_error!([$($modifiers)*][$($args)*])\n     };\n }\n \n macro_rules! is_anon {\n     ([]) => {{\n         false\n     }};\n-    ([anon $($rest:tt)*]) => {{\n+    ([(anon) $($rest:tt)*]) => {{\n         true\n     }};\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*]) => {\n-        is_anon!([$($($modifiers)*)*])\n+    ([$other:tt $($modifiers:tt)*]) => {\n+        is_anon!([$($modifiers)*])\n     };\n }\n \n macro_rules! is_eval_always {\n     ([]) => {{\n         false\n     }};\n-    ([eval_always $($rest:tt)*]) => {{\n+    ([(eval_always) $($rest:tt)*]) => {{\n         true\n     }};\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*]) => {\n-        is_eval_always!([$($($modifiers)*)*])\n+    ([$other:tt $($modifiers:tt)*]) => {\n+        is_eval_always!([$($modifiers)*])\n     };\n }\n \n macro_rules! hash_result {\n     ([][$hcx:expr, $result:expr]) => {{\n         dep_graph::hash_result($hcx, &$result)\n     }};\n-    ([no_hash $($rest:tt)*][$hcx:expr, $result:expr]) => {{\n+    ([(no_hash) $($rest:tt)*][$hcx:expr, $result:expr]) => {{\n         None\n     }};\n-    ([$other:ident $(($($other_args:tt)*))* $(, $($modifiers:tt)*)*][$($args:tt)*]) => {\n-        hash_result!([$($($modifiers)*)*][$($args)*])\n+    ([$other:tt $($modifiers:tt)*][$($args:tt)*]) => {\n+        hash_result!([$($modifiers)*][$($args)*])\n     };\n }\n "}]}