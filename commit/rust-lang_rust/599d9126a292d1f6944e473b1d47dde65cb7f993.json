{"sha": "599d9126a292d1f6944e473b1d47dde65cb7f993", "node_id": "C_kwDOAAsO6NoAKDU5OWQ5MTI2YTI5MmQxZjY5NDRlNDczYjFkNDdkZGU2NWNiN2Y5OTM", "commit": {"author": {"name": "r00ster91", "email": "r00ster91@protonmail.com", "date": "2021-10-17T10:04:01Z"}, "committer": {"name": "r00ster91", "email": "r00ster91@protonmail.com", "date": "2021-10-17T10:04:01Z"}, "message": "Some \"parenthesis\" and \"parentheses\" fixes", "tree": {"sha": "8e8832be989cdb8084c7b23203f8b1f91dd6b3db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e8832be989cdb8084c7b23203f8b1f91dd6b3db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/599d9126a292d1f6944e473b1d47dde65cb7f993", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/599d9126a292d1f6944e473b1d47dde65cb7f993", "html_url": "https://github.com/rust-lang/rust/commit/599d9126a292d1f6944e473b1d47dde65cb7f993", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/599d9126a292d1f6944e473b1d47dde65cb7f993/comments", "author": {"login": "r00ster91", "id": 35064754, "node_id": "MDQ6VXNlcjM1MDY0NzU0", "avatar_url": "https://avatars.githubusercontent.com/u/35064754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r00ster91", "html_url": "https://github.com/r00ster91", "followers_url": "https://api.github.com/users/r00ster91/followers", "following_url": "https://api.github.com/users/r00ster91/following{/other_user}", "gists_url": "https://api.github.com/users/r00ster91/gists{/gist_id}", "starred_url": "https://api.github.com/users/r00ster91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r00ster91/subscriptions", "organizations_url": "https://api.github.com/users/r00ster91/orgs", "repos_url": "https://api.github.com/users/r00ster91/repos", "events_url": "https://api.github.com/users/r00ster91/events{/privacy}", "received_events_url": "https://api.github.com/users/r00ster91/received_events", "type": "User", "site_admin": false}, "committer": {"login": "r00ster91", "id": 35064754, "node_id": "MDQ6VXNlcjM1MDY0NzU0", "avatar_url": "https://avatars.githubusercontent.com/u/35064754?v=4", "gravatar_id": "", "url": "https://api.github.com/users/r00ster91", "html_url": "https://github.com/r00ster91", "followers_url": "https://api.github.com/users/r00ster91/followers", "following_url": "https://api.github.com/users/r00ster91/following{/other_user}", "gists_url": "https://api.github.com/users/r00ster91/gists{/gist_id}", "starred_url": "https://api.github.com/users/r00ster91/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/r00ster91/subscriptions", "organizations_url": "https://api.github.com/users/r00ster91/orgs", "repos_url": "https://api.github.com/users/r00ster91/repos", "events_url": "https://api.github.com/users/r00ster91/events{/privacy}", "received_events_url": "https://api.github.com/users/r00ster91/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "049ab82662d4f63bd88bdcba97b172421f906dd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/049ab82662d4f63bd88bdcba97b172421f906dd5", "html_url": "https://github.com/rust-lang/rust/commit/049ab82662d4f63bd88bdcba97b172421f906dd5"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "42478e3416ece7a2549529503c03943b25fbaadf", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/599d9126a292d1f6944e473b1d47dde65cb7f993/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599d9126a292d1f6944e473b1d47dde65cb7f993/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=599d9126a292d1f6944e473b1d47dde65cb7f993", "patch": "@@ -98,7 +98,7 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n                 reindent_multiline(or_body_snippet.into(), true, Some(indent));\n \n             let suggestion = if scrutinee.span.from_expansion() {\n-                    // we don't want parenthesis around macro, e.g. `(some_macro!()).unwrap_or(0)`\n+                    // we don't want parentheses around macro, e.g. `(some_macro!()).unwrap_or(0)`\n                     sugg::Sugg::hir_with_macro_callsite(cx, scrutinee, \"..\")\n                 }\n                 else {"}, {"sha": "01fb944cc36f64dcfd266726ce70bf4aa6ba5418", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/599d9126a292d1f6944e473b1d47dde65cb7f993/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599d9126a292d1f6944e473b1d47dde65cb7f993/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=599d9126a292d1f6944e473b1d47dde65cb7f993", "patch": "@@ -16,10 +16,10 @@ use std::convert::TryInto;\n use std::fmt::Display;\n use std::ops::{Add, Neg, Not, Sub};\n \n-/// A helper type to build suggestion correctly handling parenthesis.\n+/// A helper type to build suggestion correctly handling parentheses.\n #[derive(Clone, PartialEq)]\n pub enum Sugg<'a> {\n-    /// An expression that never needs parenthesis such as `1337` or `[0; 42]`.\n+    /// An expression that never needs parentheses such as `1337` or `[0; 42]`.\n     NonParen(Cow<'a, str>),\n     /// An expression that does not fit in other variants.\n     MaybeParen(Cow<'a, str>),\n@@ -283,7 +283,7 @@ impl<'a> Sugg<'a> {\n         }\n     }\n \n-    /// Adds parenthesis to any expression that might need them. Suitable to the\n+    /// Adds parentheses to any expression that might need them. Suitable to the\n     /// `self` argument of a method call\n     /// (e.g., to build `bar.foo()` or `(1 + 2).foo()`).\n     pub fn maybe_par(self) -> Self {"}, {"sha": "05d6c56f2aca0a5dd63a3d635468800d0431a5e3", "filename": "tests/ui/manual_unwrap_or.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/599d9126a292d1f6944e473b1d47dde65cb7f993/tests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/599d9126a292d1f6944e473b1d47dde65cb7f993/tests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.fixed?ref=599d9126a292d1f6944e473b1d47dde65cb7f993", "patch": "@@ -74,10 +74,10 @@ fn result_unwrap_or() {\n     let a = Ok::<i32, &str>(1);\n     a.unwrap_or(42);\n \n-    // int case, suggestion must surround Result expr with parenthesis\n+    // int case, suggestion must surround Result expr with parentheses\n     (Ok(1) as Result<i32, &str>).unwrap_or(42);\n \n-    // method call case, suggestion must not surround Result expr `s.method()` with parenthesis\n+    // method call case, suggestion must not surround Result expr `s.method()` with parentheses\n     struct S {}\n     impl S {\n         fn method(self) -> Option<i32> {"}, {"sha": "09f62c69b71de15b832c836a03c21829a78d501f", "filename": "tests/ui/manual_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/599d9126a292d1f6944e473b1d47dde65cb7f993/tests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599d9126a292d1f6944e473b1d47dde65cb7f993/tests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.rs?ref=599d9126a292d1f6944e473b1d47dde65cb7f993", "patch": "@@ -95,13 +95,13 @@ fn result_unwrap_or() {\n         Err(_) => 42,\n     };\n \n-    // int case, suggestion must surround Result expr with parenthesis\n+    // int case, suggestion must surround Result expr with parentheses\n     match Ok(1) as Result<i32, &str> {\n         Ok(i) => i,\n         Err(_) => 42,\n     };\n \n-    // method call case, suggestion must not surround Result expr `s.method()` with parenthesis\n+    // method call case, suggestion must not surround Result expr `s.method()` with parentheses\n     struct S {}\n     impl S {\n         fn method(self) -> Option<i32> {"}, {"sha": "70ff08f36551838743b29d059c5d207a6f1593cd", "filename": "tests/ui/useless_conversion.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/599d9126a292d1f6944e473b1d47dde65cb7f993/tests%2Fui%2Fuseless_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/599d9126a292d1f6944e473b1d47dde65cb7f993/tests%2Fui%2Fuseless_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.fixed?ref=599d9126a292d1f6944e473b1d47dde65cb7f993", "patch": "@@ -66,7 +66,7 @@ fn main() {\n     let _ = vec![1, 2, 3].into_iter();\n     let _: String = format!(\"Hello {}\", \"world\");\n \n-    // keep parenthesis around `a + b` for suggestion (see #4750)\n+    // keep parentheses around `a + b` for suggestion (see #4750)\n     let a: i32 = 1;\n     let b: i32 = 1;\n     let _ = (a + b) * 3;"}, {"sha": "f2444a8f436bf1a699e45cdee099846a261f9568", "filename": "tests/ui/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/599d9126a292d1f6944e473b1d47dde65cb7f993/tests%2Fui%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/599d9126a292d1f6944e473b1d47dde65cb7f993/tests%2Fui%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.rs?ref=599d9126a292d1f6944e473b1d47dde65cb7f993", "patch": "@@ -66,7 +66,7 @@ fn main() {\n     let _ = vec![1, 2, 3].into_iter().into_iter();\n     let _: String = format!(\"Hello {}\", \"world\").into();\n \n-    // keep parenthesis around `a + b` for suggestion (see #4750)\n+    // keep parentheses around `a + b` for suggestion (see #4750)\n     let a: i32 = 1;\n     let b: i32 = 1;\n     let _ = i32::from(a + b) * 3;"}]}