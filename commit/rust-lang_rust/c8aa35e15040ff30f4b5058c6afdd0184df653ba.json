{"sha": "c8aa35e15040ff30f4b5058c6afdd0184df653ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4YWEzNWUxNTA0MGZmMzBmNGI1MDU4YzZhZmRkMDE4NGRmNjUzYmE=", "commit": {"author": {"name": "Kit Freddura", "email": "kitfreddura@gmail.com", "date": "2016-10-02T21:38:31Z"}, "committer": {"name": "Kit Freddura", "email": "kitfreddura@gmail.com", "date": "2016-10-02T21:38:31Z"}, "message": "replaced snippet_opt with snippet for more terse code", "tree": {"sha": "c2fd34298e4a281b7742d5b2df5153e7c084d2b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2fd34298e4a281b7742d5b2df5153e7c084d2b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c8aa35e15040ff30f4b5058c6afdd0184df653ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c8aa35e15040ff30f4b5058c6afdd0184df653ba", "html_url": "https://github.com/rust-lang/rust/commit/c8aa35e15040ff30f4b5058c6afdd0184df653ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c8aa35e15040ff30f4b5058c6afdd0184df653ba/comments", "author": {"login": "kitfre", "id": 10645601, "node_id": "MDQ6VXNlcjEwNjQ1NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/10645601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kitfre", "html_url": "https://github.com/kitfre", "followers_url": "https://api.github.com/users/kitfre/followers", "following_url": "https://api.github.com/users/kitfre/following{/other_user}", "gists_url": "https://api.github.com/users/kitfre/gists{/gist_id}", "starred_url": "https://api.github.com/users/kitfre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kitfre/subscriptions", "organizations_url": "https://api.github.com/users/kitfre/orgs", "repos_url": "https://api.github.com/users/kitfre/repos", "events_url": "https://api.github.com/users/kitfre/events{/privacy}", "received_events_url": "https://api.github.com/users/kitfre/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kitfre", "id": 10645601, "node_id": "MDQ6VXNlcjEwNjQ1NjAx", "avatar_url": "https://avatars.githubusercontent.com/u/10645601?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kitfre", "html_url": "https://github.com/kitfre", "followers_url": "https://api.github.com/users/kitfre/followers", "following_url": "https://api.github.com/users/kitfre/following{/other_user}", "gists_url": "https://api.github.com/users/kitfre/gists{/gist_id}", "starred_url": "https://api.github.com/users/kitfre/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kitfre/subscriptions", "organizations_url": "https://api.github.com/users/kitfre/orgs", "repos_url": "https://api.github.com/users/kitfre/repos", "events_url": "https://api.github.com/users/kitfre/events{/privacy}", "received_events_url": "https://api.github.com/users/kitfre/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97e9299a1024fcce1875f90b872194dae55f1329", "url": "https://api.github.com/repos/rust-lang/rust/commits/97e9299a1024fcce1875f90b872194dae55f1329", "html_url": "https://github.com/rust-lang/rust/commit/97e9299a1024fcce1875f90b872194dae55f1329"}], "stats": {"total": 9, "additions": 2, "deletions": 7}, "files": [{"sha": "94e06a2b39da18e58cc6a64a4c0009504063dae5", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c8aa35e15040ff30f4b5058c6afdd0184df653ba/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c8aa35e15040ff30f4b5058c6afdd0184df653ba/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=c8aa35e15040ff30f4b5058c6afdd0184df653ba", "patch": "@@ -1,6 +1,6 @@\n use rustc::lint::*;\n use rustc::hir::*;\n-use utils::{paths, method_chain_args, span_help_and_lint, match_type, snippet_opt};\n+use utils::{paths, method_chain_args, span_help_and_lint, match_type, snippet};\n \n /// **What it does:*** Checks for unnecessary `ok()` in if let.\n ///\n@@ -42,12 +42,7 @@ impl LateLintPass for OkIfLetPass {\n \n         ], {\n             let is_result_type = match_type(cx, cx.tcx.expr_ty(&result_types[0]), &paths::RESULT);\n-            let mut some_expr_string = String::from(\"\");\n-            if y.len() > 0 {\n-                if let Some(x) = snippet_opt(cx, y[0].span) {\n-                    some_expr_string = x;\n-                }\n-            }\n+            let some_expr_string = snippet(cx, y[0].span, \"\");\n             if print::path_to_string(x) == \"Some\" && is_result_type {\n                 span_help_and_lint(cx, IF_LET_SOME_RESULT, expr.span,\n                 \"Matching on `Some` with `ok()` is redundant\","}]}