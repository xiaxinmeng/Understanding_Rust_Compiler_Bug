{"sha": "43cb37e152b04b0d8ce2d34a0a5d4561a118f844", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzY2IzN2UxNTJiMDRiMGQ4Y2UyZDM0YTBhNWQ0NTYxYTExOGY4NDQ=", "commit": {"author": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2019-12-25T10:54:55Z"}, "committer": {"name": "Konrad Borowski", "email": "konrad@borowski.pw", "date": "2019-12-25T10:54:55Z"}, "message": "Use issue = \"none\" instead of \"0\" in intrinsics", "tree": {"sha": "70cf60950641455d7a5682ad2990028e274bc1b8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70cf60950641455d7a5682ad2990028e274bc1b8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43cb37e152b04b0d8ce2d34a0a5d4561a118f844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43cb37e152b04b0d8ce2d34a0a5d4561a118f844", "html_url": "https://github.com/rust-lang/rust/commit/43cb37e152b04b0d8ce2d34a0a5d4561a118f844", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43cb37e152b04b0d8ce2d34a0a5d4561a118f844/comments", "author": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xfix", "id": 1297598, "node_id": "MDQ6VXNlcjEyOTc1OTg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xfix", "html_url": "https://github.com/xfix", "followers_url": "https://api.github.com/users/xfix/followers", "following_url": "https://api.github.com/users/xfix/following{/other_user}", "gists_url": "https://api.github.com/users/xfix/gists{/gist_id}", "starred_url": "https://api.github.com/users/xfix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xfix/subscriptions", "organizations_url": "https://api.github.com/users/xfix/orgs", "repos_url": "https://api.github.com/users/xfix/repos", "events_url": "https://api.github.com/users/xfix/events{/privacy}", "received_events_url": "https://api.github.com/users/xfix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bc1665730002a5368b4384613758c7ddc77db09", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bc1665730002a5368b4384613758c7ddc77db09", "html_url": "https://github.com/rust-lang/rust/commit/7bc1665730002a5368b4384613758c7ddc77db09"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "416c73f50bd89661bab7cfa0d0609563dbd91bd8", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/43cb37e152b04b0d8ce2d34a0a5d4561a118f844/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43cb37e152b04b0d8ce2d34a0a5d4561a118f844/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=43cb37e152b04b0d8ce2d34a0a5d4561a118f844", "patch": "@@ -697,7 +697,7 @@ extern \"rust-intrinsic\" {\n \n     #[rustc_const_stable(feature = \"const_min_align_of\", since = \"1.40.0\")]\n     pub fn min_align_of<T>() -> usize;\n-    #[rustc_const_unstable(feature = \"const_pref_align_of\", issue = \"0\")]\n+    #[rustc_const_unstable(feature = \"const_pref_align_of\", issue = \"none\")]\n     pub fn pref_align_of<T>() -> usize;\n \n     /// The size of the referenced value in bytes.\n@@ -708,13 +708,13 @@ extern \"rust-intrinsic\" {\n     pub fn min_align_of_val<T: ?Sized>(_: &T) -> usize;\n \n     /// Gets a static string slice containing the name of a type.\n-    #[rustc_const_unstable(feature = \"const_type_name\", issue = \"0\")]\n+    #[rustc_const_unstable(feature = \"const_type_name\", issue = \"none\")]\n     pub fn type_name<T: ?Sized>() -> &'static str;\n \n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n-    #[rustc_const_unstable(feature = \"const_type_id\", issue = \"0\")]\n+    #[rustc_const_unstable(feature = \"const_type_id\", issue = \"none\")]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n@@ -1222,7 +1222,7 @@ extern \"rust-intrinsic\" {\n     /// let num_leading = unsafe { ctlz_nonzero(x) };\n     /// assert_eq!(num_leading, 3);\n     /// ```\n-    #[rustc_const_unstable(feature = \"constctlz\", issue = \"0\")]\n+    #[rustc_const_unstable(feature = \"constctlz\", issue = \"none\")]\n     pub fn ctlz_nonzero<T>(x: T) -> T;\n \n     /// Returns the number of trailing unset bits (zeroes) in an integer type `T`.\n@@ -1267,7 +1267,7 @@ extern \"rust-intrinsic\" {\n     /// let num_trailing = unsafe { cttz_nonzero(x) };\n     /// assert_eq!(num_trailing, 3);\n     /// ```\n-    #[rustc_const_unstable(feature = \"const_cttz\", issue = \"0\")]\n+    #[rustc_const_unstable(feature = \"const_cttz\", issue = \"none\")]\n     pub fn cttz_nonzero<T>(x: T) -> T;\n \n     /// Reverses the bytes in an integer type `T`.\n@@ -1396,7 +1396,7 @@ extern \"rust-intrinsic\" {\n     pub fn nontemporal_store<T>(ptr: *mut T, val: T);\n \n     /// See documentation of `<*const T>::offset_from` for details.\n-    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"none\")]\n     pub fn ptr_offset_from<T>(ptr: *const T, base: *const T) -> isize;\n \n     /// Internal hook used by Miri to implement unwinding."}]}