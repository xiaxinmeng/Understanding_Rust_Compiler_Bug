{"sha": "ed3ead013f40c65e2972c794a71b756237a31b46", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkM2VhZDAxM2Y0MGM2NWUyOTcyYzc5NGE3MWI3NTYyMzdhMzFiNDY=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-27T13:32:07Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-09-27T14:04:25Z"}, "message": "Relax memory ordering of LOCAL_STREAMS and document it.", "tree": {"sha": "fb41a1e0d25cf184248617a5109cd35bd0e1915c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb41a1e0d25cf184248617a5109cd35bd0e1915c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed3ead013f40c65e2972c794a71b756237a31b46", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed3ead013f40c65e2972c794a71b756237a31b46", "html_url": "https://github.com/rust-lang/rust/commit/ed3ead013f40c65e2972c794a71b756237a31b46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed3ead013f40c65e2972c794a71b756237a31b46/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07fd17f7014de6dc209c7dc4de159a2a5acea173", "url": "https://api.github.com/repos/rust-lang/rust/commits/07fd17f7014de6dc209c7dc4de159a2a5acea173", "html_url": "https://github.com/rust-lang/rust/commit/07fd17f7014de6dc209c7dc4de159a2a5acea173"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "df83c32982914f487045643f855fd336b0610638", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ed3ead013f40c65e2972c794a71b756237a31b46/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed3ead013f40c65e2972c794a71b756237a31b46/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=ed3ead013f40c65e2972c794a71b756237a31b46", "patch": "@@ -16,8 +16,6 @@ use crate::sys_common;\n use crate::sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n use crate::thread::LocalKey;\n \n-static LOCAL_STREAMS: AtomicBool = AtomicBool::new(false);\n-\n thread_local! {\n     /// Used by the test crate to capture the output of the print! and println! macros.\n     static LOCAL_STDOUT: RefCell<Option<Box<dyn Write + Send>>> = {\n@@ -32,6 +30,20 @@ thread_local! {\n     }\n }\n \n+/// Flag to indicate LOCAL_STDOUT and/or LOCAL_STDERR is used.\n+///\n+/// If both are None and were never set on any thread, this flag is set to\n+/// false, and both LOCAL_STDOUT and LOCAL_STDOUT can be safely ignored on all\n+/// threads, saving some time and memory registering an unused thread local.\n+///\n+/// Note about memory ordering: This contains information about whether two\n+/// thread local variables might be in use. Although this is a global flag, the\n+/// memory ordering between threads does not matter: we only want this flag to\n+/// have a consistent order between set_print/set_panic and print_to *within\n+/// the same thread*. Within the same thread, things always have a perfectly\n+/// consistent order. So Ordering::Relaxed is fine.\n+static LOCAL_STREAMS: AtomicBool = AtomicBool::new(false);\n+\n /// A handle to a raw instance of the standard input stream of this process.\n ///\n /// This handle is not synchronized or buffered in any fashion. Constructed via\n@@ -899,7 +911,7 @@ pub fn set_panic(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write +\n             Some(s)\n         },\n     );\n-    LOCAL_STREAMS.store(true, Ordering::Release);\n+    LOCAL_STREAMS.store(true, Ordering::Relaxed);\n     s\n }\n \n@@ -926,7 +938,7 @@ pub fn set_print(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write +\n             Some(s)\n         },\n     );\n-    LOCAL_STREAMS.store(true, Ordering::Release);\n+    LOCAL_STREAMS.store(true, Ordering::Relaxed);\n     s\n }\n \n@@ -949,7 +961,7 @@ fn print_to<T>(\n     T: Write,\n {\n     let result = LOCAL_STREAMS\n-        .load(Ordering::Acquire)\n+        .load(Ordering::Relaxed)\n         .then(|| {\n             local_s\n                 .try_with(|s| {"}]}