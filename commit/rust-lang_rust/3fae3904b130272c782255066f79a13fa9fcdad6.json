{"sha": "3fae3904b130272c782255066f79a13fa9fcdad6", "node_id": "C_kwDOAAsO6NoAKDNmYWUzOTA0YjEzMDI3MmM3ODIyNTUwNjZmNzlhMTNmYTlmY2RhZDY", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-08-24T12:46:29Z"}, "committer": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-08-24T12:46:29Z"}, "message": "Use `IntoDiagnosticArg` where it makes sense", "tree": {"sha": "950327fad609a1dfa74440532098bf717147dded", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/950327fad609a1dfa74440532098bf717147dded"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fae3904b130272c782255066f79a13fa9fcdad6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEAWou4Gq79HasRseDspeR1Nh440UFAmMGHcwACgkQspeR1Nh4\n40WxSg/+OQ8+OubSHL/j/8MJS3qK53krcJ/p1zYZxrEwvLyWj2o2MHsmzuzUm7C5\n1oXWpa40EyLiccK9X+DRzAhI/uetkqd4qmzH9pbej+8RuYqIhJtFCSkccj9vIm2X\n4jT0E6IfjabssfZyTq3fBv91A7bcmaq9Gr/2Jy0TQQSgYYAIbDxdO+MfznwKoCBR\nQ83tTvCaVkV1X/VmxVf3BQW6o0RQNcypks85HE7oGMENtLVeL93KVgaOJe08LupA\n0NIV9u7e1C7vyIi4XevkwzsRXsPUBqTX+e4Fu5GxeUj0tONFBZ41+Zi6X7R65JGJ\nAFSH2E/es4MPUn4S9ayVJVvgGSaq2mcS9p9e8OUlRzOiNQ4kEh4IezbNFxhnXZAc\nbIzAjknZFlMCIJWw+O6OP53zkQFcE1sAA+uhYlNzDvm4saGWrTeL9PSWtCDKJrBC\ntFuViMaf9aIOfv/09qepN4b5TtJmRrCYKEqWgHKPaznLgXrtGmPpbd0RH99S9xR8\nzMfQDHIxo4DrgALWUeRfVW3ZMJfG+R2NfnRWAWqhMQ01snex0BTSgHye0qbIvi6g\nuwwZ+LuFm00lxC49+SlXRdG3J44RIJmtUXpEwqRVhoQ/dph6IPQr2LJmJNXhLBXt\nM6SbVybgeqQUp0I/F1DNOyiOvJEMX/yHPFbJ8PCoNqFvx1i7Kww=\n=rRwj\n-----END PGP SIGNATURE-----", "payload": "tree 950327fad609a1dfa74440532098bf717147dded\nparent 74f99738244fc9ba2f6ad93b8c891d44d638b0f8\nauthor Nikita Tomashevich <quant3234@gmail.com> 1661345189 +0300\ncommitter Nikita Tomashevich <quant3234@gmail.com> 1661345189 +0300\n\nUse `IntoDiagnosticArg` where it makes sense\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fae3904b130272c782255066f79a13fa9fcdad6", "html_url": "https://github.com/rust-lang/rust/commit/3fae3904b130272c782255066f79a13fa9fcdad6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fae3904b130272c782255066f79a13fa9fcdad6/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74f99738244fc9ba2f6ad93b8c891d44d638b0f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/74f99738244fc9ba2f6ad93b8c891d44d638b0f8", "html_url": "https://github.com/rust-lang/rust/commit/74f99738244fc9ba2f6ad93b8c891d44d638b0f8"}], "stats": {"total": 102, "additions": 61, "deletions": 41}, "files": [{"sha": "60086cd6e477f430bff9432081f32af0d7583b40", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fae3904b130272c782255066f79a13fa9fcdad6/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/3fae3904b130272c782255066f79a13fa9fcdad6/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=3fae3904b130272c782255066f79a13fa9fcdad6", "patch": "@@ -63,7 +63,12 @@ infer_source_kind_closure_return =\n \n # generator_kind  may need to be translated\n infer_need_type_info_in_generator =\n-    type inside {$generator_kind} must be known in this context\n+    type inside {$generator_kind ->\n+    [async_block] `async` block\n+    [async_closure] `async` closure\n+    [async_fn] `async fn` body\n+    *[generator] generator\n+    } must be known in this context\n \n \n infer_subtype = ...so that the {$requirement ->"}, {"sha": "938f8aa77a5b4589f6e5eb2f5ed5956fce22ee8b", "filename": "compiler/rustc_infer/src/errors.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3fae3904b130272c782255066f79a13fa9fcdad6/compiler%2Frustc_infer%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fae3904b130272c782255066f79a13fa9fcdad6/compiler%2Frustc_infer%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors.rs?ref=3fae3904b130272c782255066f79a13fa9fcdad6", "patch": "@@ -3,6 +3,11 @@ use rustc_hir::FnRetTy;\n use rustc_macros::SessionDiagnostic;\n use rustc_span::{BytePos, Span};\n \n+use crate::infer::error_reporting::{\n+    need_type_info::{GeneratorKindAsDiagArg, UnderspecifiedArgKind},\n+    ObligationCauseAsDiagArg,\n+};\n+\n #[derive(SessionDiagnostic)]\n #[diag(infer::opaque_hidden_type)]\n pub struct OpaqueHiddenTypeDiag {\n@@ -73,7 +78,7 @@ pub struct AmbigousReturn<'a> {\n pub struct NeedTypeInfoInGenerator<'a> {\n     #[primary_span]\n     pub span: Span,\n-    pub generator_kind: &'static str,\n+    pub generator_kind: GeneratorKindAsDiagArg,\n     #[subdiagnostic]\n     pub bad_label: InferenceBadError<'a>,\n }\n@@ -85,7 +90,7 @@ pub struct InferenceBadError<'a> {\n     #[primary_span]\n     pub span: Span,\n     pub bad_kind: &'static str,\n-    pub prefix_kind: &'static str,\n+    pub prefix_kind: UnderspecifiedArgKind,\n     pub has_parent: bool,\n     pub prefix: &'a str,\n     pub parent_prefix: &'a str,\n@@ -107,7 +112,7 @@ pub enum SourceKindSubdiag<'a> {\n         type_name: String,\n         kind: &'static str,\n         x_kind: &'static str,\n-        prefix_kind: &'static str,\n+        prefix_kind: UnderspecifiedArgKind,\n         prefix: &'a str,\n         arg_name: String,\n     },\n@@ -199,7 +204,7 @@ pub enum RegionOriginNote<'a> {\n     },\n     WithRequirement {\n         span: Span,\n-        requirement: &'static str,\n+        requirement: ObligationCauseAsDiagArg<'a>,\n         expected_found: Option<(DiagnosticStyledString, DiagnosticStyledString)>,\n     },\n }"}, {"sha": "c7e258578e4de8fb69bfeb8788520f0972814f23", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3fae3904b130272c782255066f79a13fa9fcdad6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fae3904b130272c782255066f79a13fa9fcdad6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=3fae3904b130272c782255066f79a13fa9fcdad6", "patch": "@@ -58,7 +58,7 @@ use crate::traits::{\n };\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed};\n+use rustc_errors::{pluralize, struct_span_err, Diagnostic, ErrorGuaranteed, IntoDiagnosticArg};\n use rustc_errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString, MultiSpan};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n@@ -78,7 +78,7 @@ use std::{cmp, fmt, iter};\n \n mod note;\n \n-mod need_type_info;\n+pub(crate) mod need_type_info;\n pub use need_type_info::TypeAnnotationNeeded;\n \n pub mod nice_region_error;\n@@ -2811,7 +2811,6 @@ pub enum FailureCode {\n pub trait ObligationCauseExt<'tcx> {\n     fn as_failure_code(&self, terr: TypeError<'tcx>) -> FailureCode;\n     fn as_requirement_str(&self) -> &'static str;\n-    fn as_requirement_localised(&self) -> &'static str;\n }\n \n impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n@@ -2880,10 +2879,15 @@ impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n             _ => \"types are compatible\",\n         }\n     }\n+}\n+\n+/// Newtype to allow implementing IntoDiagnosticArg\n+pub struct ObligationCauseAsDiagArg<'tcx>(pub ObligationCause<'tcx>);\n \n-    fn as_requirement_localised(&self) -> &'static str {\n+impl IntoDiagnosticArg for ObligationCauseAsDiagArg<'_> {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n         use crate::traits::ObligationCauseCode::*;\n-        match self.code() {\n+        let kind = match self.0.code() {\n             CompareImplItemObligation { kind: ty::AssocKind::Fn, .. } => \"method_compat\",\n             CompareImplItemObligation { kind: ty::AssocKind::Type, .. } => \"type_compat\",\n             CompareImplItemObligation { kind: ty::AssocKind::Const, .. } => \"const_compat\",\n@@ -2896,6 +2900,8 @@ impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n             MethodReceiver => \"method_correct_type\",\n             _ => \"other\",\n         }\n+        .into();\n+        rustc_errors::DiagnosticArgValue::Str(kind)\n     }\n }\n "}, {"sha": "e990fe7ecb50427edb13538bd0a4a0b985cf7fa0", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3fae3904b130272c782255066f79a13fa9fcdad6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fae3904b130272c782255066f79a13fa9fcdad6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=3fae3904b130272c782255066f79a13fa9fcdad6", "patch": "@@ -4,7 +4,7 @@ use crate::errors::{\n };\n use crate::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use crate::infer::InferCtxt;\n-use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{DiagnosticBuilder, ErrorGuaranteed, IntoDiagnosticArg};\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n use rustc_hir::def::{CtorOf, DefKind, Namespace};\n@@ -65,6 +65,7 @@ pub struct InferenceDiagnosticsParentData {\n     name: String,\n }\n \n+#[derive(Clone)]\n pub enum UnderspecifiedArgKind {\n     Type { prefix: Cow<'static, str> },\n     Const { is_parameter: bool },\n@@ -101,7 +102,7 @@ impl InferenceDiagnosticsData {\n         InferenceBadError {\n             span,\n             bad_kind,\n-            prefix_kind: self.kind.prefix_kind(),\n+            prefix_kind: self.kind.clone(),\n             prefix: self.kind.try_get_prefix().unwrap_or_default(),\n             name: self.name.clone(),\n             has_parent,\n@@ -130,14 +131,18 @@ impl InferenceDiagnosticsParentData {\n     }\n }\n \n-impl UnderspecifiedArgKind {\n-    fn prefix_kind(&self) -> &'static str {\n-        match self {\n+impl IntoDiagnosticArg for UnderspecifiedArgKind {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        let kind = match self {\n             Self::Type { .. } => \"type\",\n             Self::Const { is_parameter: true } => \"const_with_param\",\n             Self::Const { is_parameter: false } => \"const\",\n-        }\n+        };\n+        rustc_errors::DiagnosticArgValue::Str(kind.into())\n     }\n+}\n+\n+impl UnderspecifiedArgKind {\n     fn try_get_prefix(&self) -> Option<&str> {\n         match self {\n             Self::Type { prefix } => Some(prefix.as_ref()),\n@@ -405,7 +410,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     span: insert_span,\n                     name: pattern_name.map(|name| name.to_string()).unwrap_or_else(String::new),\n                     x_kind: arg_data.where_x_is_kind(ty),\n-                    prefix_kind: arg_data.kind.prefix_kind(),\n+                    prefix_kind: arg_data.kind.clone(),\n                     prefix: arg_data.kind.try_get_prefix().unwrap_or_default(),\n                     arg_name: arg_data.name,\n                     kind: if pattern_name.is_some() { \"with_pattern\" } else { \"other\" },\n@@ -417,7 +422,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     span: insert_span,\n                     name: String::new(),\n                     x_kind: arg_data.where_x_is_kind(ty),\n-                    prefix_kind: arg_data.kind.prefix_kind(),\n+                    prefix_kind: arg_data.kind.clone(),\n                     prefix: arg_data.kind.try_get_prefix().unwrap_or_default(),\n                     arg_name: arg_data.name,\n                     kind: \"closure\",\n@@ -568,12 +573,26 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         NeedTypeInfoInGenerator {\n             bad_label: data.make_bad_error(span),\n             span,\n-            generator_kind: kind.descr(),\n+            generator_kind: GeneratorKindAsDiagArg(kind),\n         }\n         .into_diagnostic(&self.tcx.sess.parse_sess)\n     }\n }\n \n+pub struct GeneratorKindAsDiagArg(pub hir::GeneratorKind);\n+\n+impl IntoDiagnosticArg for GeneratorKindAsDiagArg {\n+    fn into_diagnostic_arg(self) -> rustc_errors::DiagnosticArgValue<'static> {\n+        let kind = match self.0 {\n+            hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Block) => \"async_block\",\n+            hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Closure) => \"async_closure\",\n+            hir::GeneratorKind::Async(hir::AsyncGeneratorKind::Fn) => \"async_fn\",\n+            hir::GeneratorKind::Gen => \"generator\",\n+        };\n+        rustc_errors::DiagnosticArgValue::Str(kind.into())\n+    }\n+}\n+\n #[derive(Debug)]\n struct InferSource<'tcx> {\n     span: Span,"}, {"sha": "cffdf56bb6d48f78a28eb2856b4a9816e3386a39", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 7, "deletions": 22, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3fae3904b130272c782255066f79a13fa9fcdad6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fae3904b130272c782255066f79a13fa9fcdad6/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=3fae3904b130272c782255066f79a13fa9fcdad6", "patch": "@@ -1,40 +1,26 @@\n use crate::errors::RegionOriginNote;\n-use crate::infer::error_reporting::{note_and_explain_region, ObligationCauseExt};\n+use crate::infer::error_reporting::note_and_explain_region;\n use crate::infer::{self, InferCtxt, SubregionOrigin};\n use rustc_errors::{\n-    fluent, struct_span_err, AddSubdiagnostic, Diagnostic, DiagnosticBuilder, DiagnosticMessage,\n-    ErrorGuaranteed,\n+    fluent, struct_span_err, AddSubdiagnostic, Diagnostic, DiagnosticBuilder, ErrorGuaranteed,\n };\n use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{self, Region};\n \n+use super::ObligationCauseAsDiagArg;\n+\n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub(super) fn note_region_origin(&self, err: &mut Diagnostic, origin: &SubregionOrigin<'tcx>) {\n-        let mut label_or_note = |span, msg: DiagnosticMessage| {\n-            let sub_count = err.children.iter().filter(|d| d.span.is_dummy()).count();\n-            let expanded_sub_count = err.children.iter().filter(|d| !d.span.is_dummy()).count();\n-            let span_is_primary = err.span.primary_spans().iter().all(|&sp| sp == span);\n-            if span_is_primary && sub_count == 0 && expanded_sub_count == 0 {\n-                err.span_label(span, msg);\n-            } else if span_is_primary && expanded_sub_count == 0 {\n-                err.note(msg);\n-            } else {\n-                err.span_note(span, msg);\n-            }\n-        };\n         match *origin {\n             infer::Subtype(ref trace) => RegionOriginNote::WithRequirement {\n                 span: trace.cause.span,\n-                requirement: trace.cause.as_requirement_localised(),\n+                requirement: ObligationCauseAsDiagArg(trace.cause.clone()),\n                 expected_found: self.values_str(trace.values),\n             }\n             .add_to_diagnostic(err),\n-            infer::Reborrow(span) => {\n-                label_or_note(span, fluent::infer::reborrow);\n-                RegionOriginNote::Plain { span, msg: fluent::infer::reborrow }\n-                    .add_to_diagnostic(err)\n-            }\n+            infer::Reborrow(span) => RegionOriginNote::Plain { span, msg: fluent::infer::reborrow }\n+                .add_to_diagnostic(err),\n             infer::ReborrowUpvar(span, ref upvar_id) => {\n                 let var_name = self.tcx.hir().name(upvar_id.var_path.hir_id);\n                 RegionOriginNote::WithName {\n@@ -46,7 +32,6 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 .add_to_diagnostic(err);\n             }\n             infer::RelateObjectBound(span) => {\n-                label_or_note(span, fluent::infer::relate_object_bound);\n                 RegionOriginNote::Plain { span, msg: fluent::infer::relate_object_bound }\n                     .add_to_diagnostic(err);\n             }"}]}