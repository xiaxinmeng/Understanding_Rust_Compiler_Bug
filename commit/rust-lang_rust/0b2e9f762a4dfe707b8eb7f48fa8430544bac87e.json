{"sha": "0b2e9f762a4dfe707b8eb7f48fa8430544bac87e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiMmU5Zjc2MmE0ZGZlNzA3YjhlYjdmNDhmYTg0MzA1NDRiYWM4N2U=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-10T13:33:10Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2018-10-15T08:19:16Z"}, "message": "rustc/session: improve common patterns", "tree": {"sha": "3227eeedd9366b95c52d84a968f91f3c367194a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3227eeedd9366b95c52d84a968f91f3c367194a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b2e9f762a4dfe707b8eb7f48fa8430544bac87e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2e9f762a4dfe707b8eb7f48fa8430544bac87e", "html_url": "https://github.com/rust-lang/rust/commit/0b2e9f762a4dfe707b8eb7f48fa8430544bac87e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b2e9f762a4dfe707b8eb7f48fa8430544bac87e/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "675f00bfa864f792ab42d1ab33e9e2d0cf62057d", "url": "https://api.github.com/repos/rust-lang/rust/commits/675f00bfa864f792ab42d1ab33e9e2d0cf62057d", "html_url": "https://github.com/rust-lang/rust/commit/675f00bfa864f792ab42d1ab33e9e2d0cf62057d"}], "stats": {"total": 93, "additions": 35, "deletions": 58}, "files": [{"sha": "1498004e66caa423124808fa57bedb08f9262eb4", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 17, "deletions": 28, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0b2e9f762a4dfe707b8eb7f48fa8430544bac87e/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2e9f762a4dfe707b8eb7f48fa8430544bac87e/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=0b2e9f762a4dfe707b8eb7f48fa8430544bac87e", "patch": "@@ -1453,7 +1453,7 @@ pub fn default_configuration(sess: &Session) -> ast::CrateConfig {\n     if sess.opts.crate_types.contains(&CrateType::ProcMacro) {\n         ret.insert((Symbol::intern(\"proc_macro\"), None));\n     }\n-    return ret;\n+    ret\n }\n \n pub fn build_configuration(sess: &Session, mut user_cfg: ast::CrateConfig) -> ast::CrateConfig {\n@@ -1469,15 +1469,12 @@ pub fn build_configuration(sess: &Session, mut user_cfg: ast::CrateConfig) -> as\n }\n \n pub fn build_target_config(opts: &Options, sp: &Handler) -> Config {\n-    let target = match Target::search(&opts.target_triple) {\n-        Ok(t) => t,\n-        Err(e) => {\n-            sp.struct_fatal(&format!(\"Error loading target specification: {}\", e))\n-                .help(\"Use `--print target-list` for a list of built-in targets\")\n-                .emit();\n-            FatalError.raise();\n-        }\n-    };\n+    let target = Target::search(&opts.target_triple).unwrap_or_else(|e| {\n+        sp.struct_fatal(&format!(\"Error loading target specification: {}\", e))\n+          .help(\"Use `--print target-list` for a list of built-in targets\")\n+          .emit();\n+        FatalError.raise();\n+    });\n \n     let (isize_ty, usize_ty) = match &target.target_pointer_width[..] {\n         \"16\" => (ast::IntTy::I16, ast::UintTy::U16),\n@@ -1842,9 +1839,8 @@ pub fn build_session_options_and_crate_config(\n     };\n \n     let edition = match matches.opt_str(\"edition\") {\n-        Some(arg) => match Edition::from_str(&arg){\n-            Ok(edition) => edition,\n-            Err(_) => early_error(\n+        Some(arg) => Edition::from_str(&arg).unwrap_or_else(|_|\n+            early_error(\n                 ErrorOutputType::default(),\n                 &format!(\n                     \"argument for --edition must be one of: \\\n@@ -1853,7 +1849,7 @@ pub fn build_session_options_and_crate_config(\n                     arg\n                 ),\n             ),\n-        }\n+        ),\n         None => DEFAULT_EDITION,\n     };\n \n@@ -1922,17 +1918,16 @@ pub fn build_session_options_and_crate_config(\n             for output_type in list.split(',') {\n                 let mut parts = output_type.splitn(2, '=');\n                 let shorthand = parts.next().unwrap();\n-                let output_type = match OutputType::from_shorthand(shorthand) {\n-                    Some(output_type) => output_type,\n-                    None => early_error(\n+                let output_type = OutputType::from_shorthand(shorthand).unwrap_or_else(||\n+                    early_error(\n                         error_format,\n                         &format!(\n                             \"unknown emission type: `{}` - expected one of: {}\",\n                             shorthand,\n                             OutputType::shorthands_display(),\n                         ),\n                     ),\n-                };\n+                );\n                 let path = parts.next().map(PathBuf::from);\n                 output_types.insert(output_type, path);\n             }\n@@ -2060,12 +2055,8 @@ pub fn build_session_options_and_crate_config(\n     let target_triple = if let Some(target) = matches.opt_str(\"target\") {\n         if target.ends_with(\".json\") {\n             let path = Path::new(&target);\n-            match TargetTriple::from_path(&path) {\n-                Ok(triple) => triple,\n-                Err(_) => {\n-                    early_error(error_format, &format!(\"target file {:?} does not exist\", path))\n-                }\n-            }\n+            TargetTriple::from_path(&path).unwrap_or_else(|_|\n+                early_error(error_format, &format!(\"target file {:?} does not exist\", path)))\n         } else {\n             TargetTriple::TargetTriple(target)\n         }\n@@ -2220,10 +2211,8 @@ pub fn build_session_options_and_crate_config(\n     let mut externs: BTreeMap<_, BTreeSet<_>> = BTreeMap::new();\n     for arg in &matches.opt_strs(\"extern\") {\n         let mut parts = arg.splitn(2, '=');\n-        let name = match parts.next() {\n-            Some(s) => s,\n-            None => early_error(error_format, \"--extern value must not be empty\"),\n-        };\n+        let name = parts.next().unwrap_or_else(||\n+            early_error(error_format, \"--extern value must not be empty\"));\n         let location = parts.next().map(|s| s.to_string());\n         if location.is_none() && !is_unstable_enabled {\n             early_error("}, {"sha": "f7a2a2d1bf14b5cf4120f6297ab50d455a289d16", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b2e9f762a4dfe707b8eb7f48fa8430544bac87e/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2e9f762a4dfe707b8eb7f48fa8430544bac87e/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=0b2e9f762a4dfe707b8eb7f48fa8430544bac87e", "patch": "@@ -160,7 +160,7 @@ pub fn get_or_default_sysroot() -> PathBuf {\n     match env::current_exe() {\n         Ok(exe) => {\n             match canonicalize(Some(exe)) {\n-                Some(mut p) => { p.pop(); p.pop(); return p; },\n+                Some(mut p) => { p.pop(); p.pop(); p },\n                 None => bug!(\"can't determine value for sysroot\")\n             }\n         }"}, {"sha": "e983ddc3108d7e62a862c4d8edded6c9afd77b7a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0b2e9f762a4dfe707b8eb7f48fa8430544bac87e/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b2e9f762a4dfe707b8eb7f48fa8430544bac87e/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=0b2e9f762a4dfe707b8eb7f48fa8430544bac87e", "patch": "@@ -727,14 +727,8 @@ impl Session {\n     pub fn set_incr_session_load_dep_graph(&self, load: bool) {\n         let mut incr_comp_session = self.incr_comp_session.borrow_mut();\n \n-        match *incr_comp_session {\n-            IncrCompSession::Active {\n-                ref mut load_dep_graph,\n-                ..\n-            } => {\n-                *load_dep_graph = load;\n-            }\n-            _ => {}\n+        if let IncrCompSession::Active { ref mut load_dep_graph, .. } = *incr_comp_session {\n+            *load_dep_graph = load;\n         }\n     }\n \n@@ -872,9 +866,9 @@ impl Session {\n     /// This expends fuel if applicable, and records fuel if applicable.\n     pub fn consider_optimizing<T: Fn() -> String>(&self, crate_name: &str, msg: T) -> bool {\n         let mut ret = true;\n-        match self.optimization_fuel_crate {\n-            Some(ref c) if c == crate_name => {\n-                assert!(self.query_threads() == 1);\n+        if let Some(ref c) = self.optimization_fuel_crate {\n+            if c == crate_name {\n+                assert_eq!(self.query_threads(), 1);\n                 let fuel = self.optimization_fuel_limit.get();\n                 ret = fuel != 0;\n                 if fuel == 0 && !self.out_of_fuel.get() {\n@@ -884,14 +878,12 @@ impl Session {\n                     self.optimization_fuel_limit.set(fuel - 1);\n                 }\n             }\n-            _ => {}\n         }\n-        match self.print_fuel_crate {\n-            Some(ref c) if c == crate_name => {\n-                assert!(self.query_threads() == 1);\n+        if let Some(ref c) = self.print_fuel_crate {\n+            if c == crate_name {\n+                assert_eq!(self.query_threads(), 1);\n                 self.print_fuel.set(self.print_fuel.get() + 1);\n             }\n-            _ => {}\n         }\n         ret\n     }\n@@ -1108,14 +1100,11 @@ pub fn build_session_(\n     source_map: Lrc<source_map::SourceMap>,\n ) -> Session {\n     let host_triple = TargetTriple::from_triple(config::host_triple());\n-    let host = match Target::search(&host_triple) {\n-        Ok(t) => t,\n-        Err(e) => {\n-            span_diagnostic\n-                .fatal(&format!(\"Error loading host specification: {}\", e))\n-                .raise();\n-        }\n-    };\n+    let host = Target::search(&host_triple).unwrap_or_else(|e|\n+        span_diagnostic\n+            .fatal(&format!(\"Error loading host specification: {}\", e))\n+            .raise()\n+    );\n     let target_cfg = config::build_target_config(&sopts, &span_diagnostic);\n \n     let p_s = parse::ParseSess::with_span_handler(span_diagnostic, source_map);\n@@ -1135,12 +1124,11 @@ pub fn build_session_(\n     let print_fuel_crate = sopts.debugging_opts.print_fuel.clone();\n     let print_fuel = LockCell::new(0);\n \n-    let working_dir = match env::current_dir() {\n-        Ok(dir) => dir,\n-        Err(e) => p_s.span_diagnostic\n+    let working_dir = env::current_dir().unwrap_or_else(|e|\n+        p_s.span_diagnostic\n             .fatal(&format!(\"Current directory is invalid: {}\", e))\n-            .raise(),\n-    };\n+            .raise()\n+    );\n     let working_dir = file_path_mapping.map_prefix(working_dir);\n \n     let cgu_reuse_tracker = if sopts.debugging_opts.query_dep_graph {"}]}