{"sha": "2cab88a33eab887fec07e6f326d16753fcb74853", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjYWI4OGEzM2VhYjg4N2ZlYzA3ZTZmMzI2ZDE2NzUzZmNiNzQ4NTM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-06-07T13:33:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-07T13:33:32Z"}, "message": "Rollup merge of #72764 - jonas-schievink:mind-the-tyerr, r=estebank\n\nBe more careful around ty::Error in generators\n\ncc https://github.com/rust-lang/rust/issues/72685\n\n(doesn't close it because it's missing a reproduction to use as a test case)\n\nr? @estebank", "tree": {"sha": "2e57ce8b2bfde15f708186e526565d6cb0a863de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e57ce8b2bfde15f708186e526565d6cb0a863de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cab88a33eab887fec07e6f326d16753fcb74853", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe3OytCRBK7hj4Ov3rIwAAdHIIADSvaLEJtRk2j3wpHT1aL31b\nboPKQLlKS7CYopPtOdKh7emR/Mw6CE2hwg/JpT3lB1gHoVIKKbeunsLId2quvGJw\nDvIFMCQqZlishNpSjuOkpNtw+NFz5PMIUAItDvM/LucGUrlcVQbIYd8R+51cubHZ\nZEBO4KHg85CNGRA9E7dzCHbsMmCaBZGSSk/0S+9aLirjs6591PemcFqNDKDG8pZK\nyYvRBVduhiLnBdFaBWb/lTt92Wj3OL/MPylpQRdvr4c5axdYp4RyhsTcZUyk/Ryl\n5MYFFB9OJKd9y82c4IElA3XypDi+F5NJzCDA+ru1kjaciUbuAj0705y1MJUgS9c=\n=Dbbz\n-----END PGP SIGNATURE-----\n", "payload": "tree 2e57ce8b2bfde15f708186e526565d6cb0a863de\nparent a2fc33e0c87a258542cd12d6ffae52c43aa3785a\nparent 7242bda3dc6ad638392577fd43d1e30c3671ae74\nauthor Dylan DPC <dylan.dpc@gmail.com> 1591536812 +0200\ncommitter GitHub <noreply@github.com> 1591536812 +0200\n\nRollup merge of #72764 - jonas-schievink:mind-the-tyerr, r=estebank\n\nBe more careful around ty::Error in generators\n\ncc https://github.com/rust-lang/rust/issues/72685\n\n(doesn't close it because it's missing a reproduction to use as a test case)\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cab88a33eab887fec07e6f326d16753fcb74853", "html_url": "https://github.com/rust-lang/rust/commit/2cab88a33eab887fec07e6f326d16753fcb74853", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cab88a33eab887fec07e6f326d16753fcb74853/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2fc33e0c87a258542cd12d6ffae52c43aa3785a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2fc33e0c87a258542cd12d6ffae52c43aa3785a", "html_url": "https://github.com/rust-lang/rust/commit/a2fc33e0c87a258542cd12d6ffae52c43aa3785a"}, {"sha": "7242bda3dc6ad638392577fd43d1e30c3671ae74", "url": "https://api.github.com/repos/rust-lang/rust/commits/7242bda3dc6ad638392577fd43d1e30c3671ae74", "html_url": "https://github.com/rust-lang/rust/commit/7242bda3dc6ad638392577fd43d1e30c3671ae74"}], "stats": {"total": 79, "additions": 51, "deletions": 28}, "files": [{"sha": "60c040c25f97c832a82a07b49928b16b4001f770", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 43, "deletions": 26, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/2cab88a33eab887fec07e6f326d16753fcb74853/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cab88a33eab887fec07e6f326d16753fcb74853/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=2cab88a33eab887fec07e6f326d16753fcb74853", "patch": "@@ -669,40 +669,33 @@ fn compute_storage_conflicts(\n     storage_conflicts\n }\n \n-fn compute_layout<'tcx>(\n+/// Validates the typeck view of the generator against the actual set of types retained between\n+/// yield points.\n+fn sanitize_witness<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    source: MirSource<'tcx>,\n+    body: &Body<'tcx>,\n+    did: DefId,\n+    witness: Ty<'tcx>,\n     upvars: &Vec<Ty<'tcx>>,\n-    interior: Ty<'tcx>,\n-    always_live_locals: &storage::AlwaysLiveLocals,\n-    movable: bool,\n-    body: &mut Body<'tcx>,\n-) -> (\n-    FxHashMap<Local, (Ty<'tcx>, VariantIdx, usize)>,\n-    GeneratorLayout<'tcx>,\n-    IndexVec<BasicBlock, Option<BitSet<Local>>>,\n+    retained: &BitSet<Local>,\n ) {\n-    // Use a liveness analysis to compute locals which are live across a suspension point\n-    let LivenessInfo {\n-        live_locals,\n-        live_locals_at_suspension_points,\n-        storage_conflicts,\n-        storage_liveness,\n-    } = locals_live_across_suspend_points(tcx, body, source, always_live_locals, movable);\n-\n-    // Erase regions from the types passed in from typeck so we can compare them with\n-    // MIR types\n     let allowed_upvars = tcx.erase_regions(upvars);\n-    let allowed = match interior.kind {\n+    let allowed = match witness.kind {\n         ty::GeneratorWitness(s) => tcx.erase_late_bound_regions(&s),\n-        _ => bug!(),\n+        _ => {\n+            tcx.sess.delay_span_bug(\n+                body.span,\n+                &format!(\"unexpected generator witness type {:?}\", witness.kind),\n+            );\n+            return;\n+        }\n     };\n \n-    let param_env = tcx.param_env(source.def_id());\n+    let param_env = tcx.param_env(did);\n \n     for (local, decl) in body.local_decls.iter_enumerated() {\n-        // Ignore locals which are internal or not live\n-        if !live_locals.contains(local) || decl.internal {\n+        // Ignore locals which are internal or not retained between yields.\n+        if !retained.contains(local) || decl.internal {\n             continue;\n         }\n         let decl_ty = tcx.normalize_erasing_regions(param_env, decl.ty);\n@@ -715,10 +708,34 @@ fn compute_layout<'tcx>(\n                 \"Broken MIR: generator contains type {} in MIR, \\\n                        but typeck only knows about {}\",\n                 decl.ty,\n-                interior\n+                witness,\n             );\n         }\n     }\n+}\n+\n+fn compute_layout<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    source: MirSource<'tcx>,\n+    upvars: &Vec<Ty<'tcx>>,\n+    interior: Ty<'tcx>,\n+    always_live_locals: &storage::AlwaysLiveLocals,\n+    movable: bool,\n+    body: &mut Body<'tcx>,\n+) -> (\n+    FxHashMap<Local, (Ty<'tcx>, VariantIdx, usize)>,\n+    GeneratorLayout<'tcx>,\n+    IndexVec<BasicBlock, Option<BitSet<Local>>>,\n+) {\n+    // Use a liveness analysis to compute locals which are live across a suspension point\n+    let LivenessInfo {\n+        live_locals,\n+        live_locals_at_suspension_points,\n+        storage_conflicts,\n+        storage_liveness,\n+    } = locals_live_across_suspend_points(tcx, body, source, always_live_locals, movable);\n+\n+    sanitize_witness(tcx, body, source.def_id(), interior, upvars, &live_locals);\n \n     // Gather live local types and their indices.\n     let mut locals = IndexVec::<GeneratorSavedLocal, _>::new();"}, {"sha": "439bec1702eaed10e2d4dc133a8d5f281246d7cf", "filename": "src/librustc_ty/needs_drop.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2cab88a33eab887fec07e6f326d16753fcb74853/src%2Flibrustc_ty%2Fneeds_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cab88a33eab887fec07e6f326d16753fcb74853/src%2Flibrustc_ty%2Fneeds_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fneeds_drop.rs?ref=2cab88a33eab887fec07e6f326d16753fcb74853", "patch": "@@ -99,7 +99,7 @@ where\n                         }\n                     }\n \n-                    ty::Generator(_, substs, _) => {\n+                    ty::Generator(def_id, substs, _) => {\n                         let substs = substs.as_generator();\n                         for upvar_ty in substs.upvar_tys() {\n                             queue_type(self, upvar_ty);\n@@ -108,7 +108,13 @@ where\n                         let witness = substs.witness();\n                         let interior_tys = match &witness.kind {\n                             ty::GeneratorWitness(tys) => tcx.erase_late_bound_regions(tys),\n-                            _ => bug!(),\n+                            _ => {\n+                                tcx.sess.delay_span_bug(\n+                                    tcx.hir().span_if_local(def_id).unwrap_or(DUMMY_SP),\n+                                    &format!(\"unexpected generator witness type {:?}\", witness),\n+                                );\n+                                return Some(Err(AlwaysRequiresDrop));\n+                            }\n                         };\n \n                         for interior_ty in interior_tys {"}]}