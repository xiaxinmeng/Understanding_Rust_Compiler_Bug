{"sha": "96bcadc1813b069869219163f90f6b0299d63132", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2YmNhZGMxODEzYjA2OTg2OTIxOTE2M2Y5MGY2YjAyOTlkNjMxMzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-14T14:31:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-14T14:31:45Z"}, "message": "auto merge of #14192 : pongad/rust/walkcleanup, r=pcwalton\n\nFixes #14134", "tree": {"sha": "19f85a4b4cc68eef747e51a61fada539a01ccc51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19f85a4b4cc68eef747e51a61fada539a01ccc51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96bcadc1813b069869219163f90f6b0299d63132", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96bcadc1813b069869219163f90f6b0299d63132", "html_url": "https://github.com/rust-lang/rust/commit/96bcadc1813b069869219163f90f6b0299d63132", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96bcadc1813b069869219163f90f6b0299d63132/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d78718ad6317b21c58cfd6723501a9487378b0c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d78718ad6317b21c58cfd6723501a9487378b0c7", "html_url": "https://github.com/rust-lang/rust/commit/d78718ad6317b21c58cfd6723501a9487378b0c7"}, {"sha": "fdb30cd22cfc3db34874be13913a9c0720c64b3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdb30cd22cfc3db34874be13913a9c0720c64b3b", "html_url": "https://github.com/rust-lang/rust/commit/fdb30cd22cfc3db34874be13913a9c0720c64b3b"}], "stats": {"total": 67, "additions": 30, "deletions": 37}, "files": [{"sha": "0f67520d8d3bcaac07656f58960ce3e3e59d1874", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=96bcadc1813b069869219163f90f6b0299d63132", "patch": "@@ -144,7 +144,7 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n     check_loans::check_loans(this, &loan_dfcx, flowed_moves,\n                              all_loans.as_slice(), body);\n \n-    visit::walk_fn(this, fk, decl, body, sp, id, ());\n+    visit::walk_fn(this, fk, decl, body, sp, ());\n }\n \n // ----------------------------------------------------------------------\n@@ -830,4 +830,3 @@ impl Repr for LoanPath {\n         }\n     }\n }\n-"}, {"sha": "1017f4cfe2f0a7160f8e9f276c83b8bff6e32e10", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=96bcadc1813b069869219163f90f6b0299d63132", "patch": "@@ -37,8 +37,8 @@ impl<'a> Visitor<()> for MatchCheckCtxt<'a> {\n     fn visit_local(&mut self, l: &Local, _: ()) {\n         check_local(self, l);\n     }\n-    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block, s: Span, n: NodeId, _: ()) {\n-        check_fn(self, fk, fd, b, s, n);\n+    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block, s: Span, _: NodeId, _: ()) {\n+        check_fn(self, fk, fd, b, s);\n     }\n }\n \n@@ -866,9 +866,8 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n             kind: &FnKind,\n             decl: &FnDecl,\n             body: &Block,\n-            sp: Span,\n-            id: NodeId) {\n-    visit::walk_fn(cx, kind, decl, body, sp, id, ());\n+            sp: Span) {\n+    visit::walk_fn(cx, kind, decl, body, sp, ());\n     for input in decl.inputs.iter() {\n         if is_refutable(cx, input.pat) {\n             cx.tcx.sess.span_err(input.pat.span,"}, {"sha": "2819d7493a668deb2bf130fdb98c31f4b6925c75", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=96bcadc1813b069869219163f90f6b0299d63132", "patch": "@@ -86,7 +86,7 @@ impl<'a> EffectCheckVisitor<'a> {\n \n impl<'a> Visitor<()> for EffectCheckVisitor<'a> {\n     fn visit_fn(&mut self, fn_kind: &visit::FnKind, fn_decl: &ast::FnDecl,\n-                block: &ast::Block, span: Span, node_id: ast::NodeId, _:()) {\n+                block: &ast::Block, span: Span, _: ast::NodeId, _:()) {\n \n         let (is_item_fn, is_unsafe_fn) = match *fn_kind {\n             visit::FkItemFn(_, _, fn_style, _) =>\n@@ -103,7 +103,7 @@ impl<'a> Visitor<()> for EffectCheckVisitor<'a> {\n             self.unsafe_context = SafeContext\n         }\n \n-        visit::walk_fn(self, fn_kind, fn_decl, block, span, node_id, ());\n+        visit::walk_fn(self, fn_kind, fn_decl, block, span, ());\n \n         self.unsafe_context = old_unsafe_context\n     }"}, {"sha": "47523f4f750c11bf59308cc67e7c00fcb32069ef", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=96bcadc1813b069869219163f90f6b0299d63132", "patch": "@@ -115,7 +115,7 @@ impl<'a> Visitor<()> for AnnotateFreevarsVisitor<'a> {\n                 blk: &ast::Block, s: Span, nid: ast::NodeId, _: ()) {\n         let vars = collect_freevars(self.def_map, blk);\n         self.freevars.insert(nid, vars);\n-        visit::walk_fn(self, fk, fd, blk, s, nid, ());\n+        visit::walk_fn(self, fk, fd, blk, s, ());\n     }\n }\n "}, {"sha": "81d6fc87a919c674c5aa7a3ac6e90d049b957e3c", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=96bcadc1813b069869219163f90f6b0299d63132", "patch": "@@ -235,7 +235,7 @@ fn check_fn(\n         });\n     });\n \n-    visit::walk_fn(cx, fk, decl, body, sp, fn_id, ());\n+    visit::walk_fn(cx, fk, decl, body, sp, ());\n }\n \n pub fn check_expr(cx: &mut Context, e: &Expr) {"}, {"sha": "062a7418287e3e7da0b17daabb35d5aa8fbf8240", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=96bcadc1813b069869219163f90f6b0299d63132", "patch": "@@ -1775,7 +1775,7 @@ impl<'a> Visitor<()> for Context<'a> {\n     fn visit_fn(&mut self, fk: &visit::FnKind, decl: &ast::FnDecl,\n                 body: &ast::Block, span: Span, id: ast::NodeId, _: ()) {\n         let recurse = |this: &mut Context| {\n-            visit::walk_fn(this, fk, decl, body, span, id, ());\n+            visit::walk_fn(this, fk, decl, body, span, ());\n         };\n \n         for a in decl.inputs.iter(){\n@@ -1810,15 +1810,15 @@ impl<'a> Visitor<()> for Context<'a> {\n \n     fn visit_struct_def(&mut self,\n                         s: &ast::StructDef,\n-                        i: ast::Ident,\n-                        g: &ast::Generics,\n+                        _: ast::Ident,\n+                        _: &ast::Generics,\n                         id: ast::NodeId,\n                         _: ()) {\n         check_struct_uppercase_variable(self, s);\n \n         let old_id = self.cur_struct_def_id;\n         self.cur_struct_def_id = id;\n-        visit::walk_struct_def(self, s, i, g, id, ());\n+        visit::walk_struct_def(self, s, ());\n         self.cur_struct_def_id = old_id;\n     }\n "}, {"sha": "02599d7a368c165287b739fcf972cacc1ef833b4", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=96bcadc1813b069869219163f90f6b0299d63132", "patch": "@@ -383,7 +383,7 @@ fn visit_fn(ir: &mut IrMaps,\n \n     // gather up the various local variables, significant expressions,\n     // and so forth:\n-    visit::walk_fn(&mut fn_maps, fk, decl, body, sp, id, ());\n+    visit::walk_fn(&mut fn_maps, fk, decl, body, sp, ());\n \n     // Special nodes and variables:\n     // - exit_ln represents the end of the fn, either by return or fail"}, {"sha": "d7aba4208640a905ff0ae0b292efc706f1d67eac", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=96bcadc1813b069869219163f90f6b0299d63132", "patch": "@@ -107,11 +107,11 @@ impl Visitor<()> for ParentVisitor {\n         if !self.parents.contains_key(&id) {\n             self.parents.insert(id, self.curparent);\n         }\n-        visit::walk_fn(self, a, b, c, d, id, ());\n+        visit::walk_fn(self, a, b, c, d, ());\n     }\n \n-    fn visit_struct_def(&mut self, s: &ast::StructDef, i: ast::Ident,\n-                        g: &ast::Generics, n: ast::NodeId, _: ()) {\n+    fn visit_struct_def(&mut self, s: &ast::StructDef, _: ast::Ident,\n+                        _: &ast::Generics, n: ast::NodeId, _: ()) {\n         // Struct constructors are parented to their struct definitions because\n         // they essentially are the struct definitions.\n         match s.ctor_id {\n@@ -124,7 +124,7 @@ impl Visitor<()> for ParentVisitor {\n         for field in s.fields.iter() {\n             self.parents.insert(field.node.id, self.curparent);\n         }\n-        visit::walk_struct_def(self, s, i, g, n, ())\n+        visit::walk_struct_def(self, s, ())\n     }\n }\n \n@@ -1006,10 +1006,10 @@ impl<'a> Visitor<()> for SanePrivacyVisitor<'a> {\n     }\n \n     fn visit_fn(&mut self, fk: &visit::FnKind, fd: &ast::FnDecl,\n-                b: &ast::Block, s: Span, n: ast::NodeId, _: ()) {\n+                b: &ast::Block, s: Span, _: ast::NodeId, _: ()) {\n         // This catches both functions and methods\n         let orig_in_fn = replace(&mut self.in_fn, true);\n-        visit::walk_fn(self, fk, fd, b, s, n, ());\n+        visit::walk_fn(self, fk, fd, b, s, ());\n         self.in_fn = orig_in_fn;\n     }\n \n@@ -1363,7 +1363,7 @@ impl<'a> Visitor<()> for VisiblePrivateTypesVisitor<'a> {\n                 _: ()) {\n         // needs special handling for methods.\n         if self.exported_items.contains(&id) {\n-            visit::walk_fn(self, fk, fd, b, s, id, ());\n+            visit::walk_fn(self, fk, fd, b, s, ());\n         }\n     }\n "}, {"sha": "048bbb7d4cd0daf44aa350accde0945359304269", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=96bcadc1813b069869219163f90f6b0299d63132", "patch": "@@ -102,10 +102,10 @@ impl<'a, 'b> Visitor<Scope<'a>> for LifetimeContext<'b> {\n             visit::FkMethod(_, generics, _) => {\n                 self.visit_fn_decl(\n                     n, generics, scope,\n-                    |this, scope1| visit::walk_fn(this, fk, fd, b, s, n, scope1))\n+                    |this, scope1| visit::walk_fn(this, fk, fd, b, s, scope1))\n             }\n             visit::FkFnBlock(..) => {\n-                visit::walk_fn(self, fk, fd, b, s, n, scope)\n+                visit::walk_fn(self, fk, fd, b, s, scope)\n             }\n         }\n     }"}, {"sha": "ffb18e17bdaeb7f865754d537d921a88b9c85b7f", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=96bcadc1813b069869219163f90f6b0299d63132", "patch": "@@ -546,7 +546,6 @@ impl<'a, O: IdVisitingOperation> Visitor<()> for IdVisitor<'a, O> {\n                         function_declaration,\n                         block,\n                         span,\n-                        node_id,\n                         env);\n \n         if !self.pass_through_items {\n@@ -564,13 +563,13 @@ impl<'a, O: IdVisitingOperation> Visitor<()> for IdVisitor<'a, O> {\n \n     fn visit_struct_def(&mut self,\n                         struct_def: &StructDef,\n-                        ident: ast::Ident,\n-                        generics: &ast::Generics,\n+                        _: ast::Ident,\n+                        _: &ast::Generics,\n                         id: NodeId,\n                         _: ()) {\n         self.operation.visit_id(id);\n         struct_def.ctor_id.map(|ctor_id| self.operation.visit_id(ctor_id));\n-        visit::walk_struct_def(self, struct_def, ident, generics, id, ());\n+        visit::walk_struct_def(self, struct_def, ());\n     }\n \n     fn visit_trait_method(&mut self, tm: &ast::TraitMethod, _: ()) {"}, {"sha": "f820fbd784a2c282ceea0949c5668e792432be90", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96bcadc1813b069869219163f90f6b0299d63132/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=96bcadc1813b069869219163f90f6b0299d63132", "patch": "@@ -79,13 +79,13 @@ pub trait Visitor<E: Clone> {\n     fn visit_expr_post(&mut self, _ex: &Expr, _e: E) { }\n     fn visit_ty(&mut self, t: &Ty, e: E) { walk_ty(self, t, e) }\n     fn visit_generics(&mut self, g: &Generics, e: E) { walk_generics(self, g, e) }\n-    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block, s: Span, n: NodeId, e: E) {\n-        walk_fn(self, fk, fd, b, s, n , e)\n+    fn visit_fn(&mut self, fk: &FnKind, fd: &FnDecl, b: &Block, s: Span, _: NodeId, e: E) {\n+        walk_fn(self, fk, fd, b, s, e)\n     }\n     fn visit_ty_method(&mut self, t: &TypeMethod, e: E) { walk_ty_method(self, t, e) }\n     fn visit_trait_method(&mut self, t: &TraitMethod, e: E) { walk_trait_method(self, t, e) }\n-    fn visit_struct_def(&mut self, s: &StructDef, i: Ident, g: &Generics, n: NodeId, e: E) {\n-        walk_struct_def(self, s, i, g, n, e)\n+    fn visit_struct_def(&mut self, s: &StructDef, _: Ident, _: &Generics, _: NodeId, e: E) {\n+        walk_struct_def(self, s, e)\n     }\n     fn visit_struct_field(&mut self, s: &StructField, e: E) { walk_struct_field(self, s, e) }\n     fn visit_variant(&mut self, v: &Variant, g: &Generics, e: E) { walk_variant(self, v, g, e) }\n@@ -522,7 +522,6 @@ pub fn walk_fn<E: Clone, V: Visitor<E>>(visitor: &mut V,\n                                         function_declaration: &FnDecl,\n                                         function_body: &Block,\n                                         _span: Span,\n-                                        _: NodeId,\n                                         env: E) {\n     walk_fn_decl(visitor, function_declaration, env.clone());\n \n@@ -566,9 +565,6 @@ pub fn walk_trait_method<E: Clone, V: Visitor<E>>(visitor: &mut V,\n \n pub fn walk_struct_def<E: Clone, V: Visitor<E>>(visitor: &mut V,\n                                                 struct_definition: &StructDef,\n-                                                _: Ident,\n-                                                _: &Generics,\n-                                                _: NodeId,\n                                                 env: E) {\n     match struct_definition.super_struct {\n         Some(t) => visitor.visit_ty(t, env.clone()),"}]}