{"sha": "aeca042f8464a98e1821756849f062eeede71e28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlY2EwNDJmODQ2NGE5OGUxODIxNzU2ODQ5ZjA2MmVlZWRlNzFlMjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-22T08:52:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-07-22T08:52:05Z"}, "message": "Auto merge of #52359 - matthewjasper:combine-move-error-reporting, r=pnkfelix\n\n[NLL] Small move error reporting improvements\n\n* Use a MirBorrowckContext when reporting errors to be more uniform with other error reporting\n* Add a special message for the case of trying to move from capture variables in `Fn` and `FnMut` closures.\n\npart of #51028", "tree": {"sha": "023bb82b2459eb4e0918e577e450c82667efcd15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/023bb82b2459eb4e0918e577e450c82667efcd15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aeca042f8464a98e1821756849f062eeede71e28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aeca042f8464a98e1821756849f062eeede71e28", "html_url": "https://github.com/rust-lang/rust/commit/aeca042f8464a98e1821756849f062eeede71e28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aeca042f8464a98e1821756849f062eeede71e28/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d5108630371932b05d4e650d20536910434c947", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5108630371932b05d4e650d20536910434c947", "html_url": "https://github.com/rust-lang/rust/commit/3d5108630371932b05d4e650d20536910434c947"}, {"sha": "d34924d8247e992cde5ac356440d1c9ccb4c5cdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d34924d8247e992cde5ac356440d1c9ccb4c5cdd", "html_url": "https://github.com/rust-lang/rust/commit/d34924d8247e992cde5ac356440d1c9ccb4c5cdd"}], "stats": {"total": 189, "additions": 101, "deletions": 88}, "files": [{"sha": "2e0ab522e3a4bdb1278d2f3b20f76667ccfbfc6d", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/aeca042f8464a98e1821756849f062eeede71e28/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeca042f8464a98e1821756849f062eeede71e28/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=aeca042f8464a98e1821756849f062eeede71e28", "patch": "@@ -34,7 +34,7 @@ use std::rc::Rc;\n use syntax_pos::Span;\n \n use dataflow::indexes::BorrowIndex;\n-use dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MovePathIndex};\n+use dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MoveError, MovePathIndex};\n use dataflow::Borrows;\n use dataflow::DataflowResultsConsumer;\n use dataflow::FlowAtLocation;\n@@ -148,13 +148,11 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     let mir = &mir; // no further changes\n     let location_table = &LocationTable::new(mir);\n \n-    let move_data: MoveData<'tcx> = match MoveData::gather_moves(mir, tcx) {\n-        Ok(move_data) => move_data,\n-        Err((move_data, move_errors)) => {\n-            move_errors::report_move_errors(&mir, tcx, move_errors, &move_data);\n-            move_data\n-        }\n-    };\n+    let (move_data, move_errors): (MoveData<'tcx>, Option<Vec<MoveError<'tcx>>>) =\n+        match MoveData::gather_moves(mir, tcx) {\n+            Ok(move_data) => (move_data, None),\n+            Err((move_data, move_errors)) => (move_data, Some(move_errors)),\n+        };\n \n     let mdpe = MoveDataParamEnv {\n         move_data: move_data,\n@@ -271,6 +269,9 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n         polonius_output,\n     );\n \n+    if let Some(errors) = move_errors {\n+        mbcx.report_move_errors(errors);\n+    }\n     mbcx.analyze_results(&mut state); // entry point for DataflowResultsConsumer\n \n     // For each non-user used mutable variable, check if it's been assigned from\n@@ -1975,7 +1976,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 ProjectionElem::Field(field, _ty) => {\n                     let base_ty = proj.base.ty(self.mir, self.tcx).to_ty(self.tcx);\n \n-                    if  base_ty.is_closure() || base_ty.is_generator() {\n+                    if base_ty.is_closure() || base_ty.is_generator() {\n                         Some(field)\n                     } else {\n                         None"}, {"sha": "b7ba5c855b9961eec62e2ee177eac1cf2aeb887f", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 50, "deletions": 39, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/aeca042f8464a98e1821756849f062eeede71e28/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeca042f8464a98e1821756849f062eeede71e28/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=aeca042f8464a98e1821756849f062eeede71e28", "patch": "@@ -10,34 +10,16 @@\n \n use rustc::hir;\n use rustc::mir::*;\n-use rustc::ty::{self, TyCtxt};\n+use rustc::ty;\n+use rustc_data_structures::indexed_vec::Idx;\n use rustc_errors::DiagnosticBuilder;\n use syntax_pos::Span;\n \n-use dataflow::move_paths::{IllegalMoveOrigin, IllegalMoveOriginKind, MoveData};\n+use borrow_check::MirBorrowckCtxt;\n+use dataflow::move_paths::{IllegalMoveOrigin, IllegalMoveOriginKind};\n use dataflow::move_paths::{LookupResult, MoveError, MovePathIndex};\n use util::borrowck_errors::{BorrowckErrors, Origin};\n \n-pub(crate) fn report_move_errors<'gcx, 'tcx>(\n-    mir: &Mir<'tcx>,\n-    tcx: TyCtxt<'_, 'gcx, 'tcx>,\n-    move_errors: Vec<MoveError<'tcx>>,\n-    move_data: &MoveData<'tcx>,\n-) {\n-    MoveErrorCtxt {\n-        mir,\n-        tcx,\n-        move_data,\n-    }.report_errors(move_errors);\n-}\n-\n-#[derive(Copy, Clone)]\n-struct MoveErrorCtxt<'a, 'gcx: 'tcx, 'tcx: 'a> {\n-    mir: &'a Mir<'tcx>,\n-    tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    move_data: &'a MoveData<'tcx>,\n-}\n-\n // Often when desugaring a pattern match we may have many individual moves in\n // MIR that are all part of one operation from the user's point-of-view. For\n // example:\n@@ -76,15 +58,15 @@ enum GroupedMoveError<'tcx> {\n     },\n }\n \n-impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n-    fn report_errors(self, move_errors: Vec<MoveError<'tcx>>) {\n+impl<'a, 'gcx, 'tcx> MirBorrowckCtxt<'a, 'gcx, 'tcx> {\n+    pub(crate) fn report_move_errors(&self, move_errors: Vec<MoveError<'tcx>>) {\n         let grouped_errors = self.group_move_errors(move_errors);\n         for error in grouped_errors {\n             self.report(error);\n         }\n     }\n \n-    fn group_move_errors(self, errors: Vec<MoveError<'tcx>>) -> Vec<GroupedMoveError<'tcx>> {\n+    fn group_move_errors(&self, errors: Vec<MoveError<'tcx>>) -> Vec<GroupedMoveError<'tcx>> {\n         let mut grouped_errors = Vec::new();\n         for error in errors {\n             self.append_to_grouped_errors(&mut grouped_errors, error);\n@@ -93,7 +75,7 @@ impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn append_to_grouped_errors(\n-        self,\n+        &self,\n         grouped_errors: &mut Vec<GroupedMoveError<'tcx>>,\n         error: MoveError<'tcx>,\n     ) {\n@@ -114,19 +96,19 @@ impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n                     .map(|stmt| &stmt.kind)\n                 {\n                     let local_decl = &self.mir.local_decls[*local];\n+                    // opt_match_place is the\n+                    // match_span is the span of the expression being matched on\n+                    // match *x.y { ... }        match_place is Some(*x.y)\n+                    //       ^^^^                match_span is the span of *x.y\n+                    //\n+                    // opt_match_place is None for let [mut] x = ... statements,\n+                    // whether or not the right-hand side is a place expression\n                     if let Some(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n                         opt_match_place: Some((ref opt_match_place, match_span)),\n                         binding_mode: _,\n                         opt_ty_info: _,\n                     }))) = local_decl.is_user_variable\n                     {\n-                        // opt_match_place is the\n-                        // match_span is the span of the expression being matched on\n-                        // match *x.y { ... }        match_place is Some(*x.y)\n-                        //       ^^^^                match_span is the span of *x.y\n-                        // opt_match_place is None for let [mut] x = ... statements,\n-                        // whether or not the right-hand side is a place expression\n-\n                         // HACK use scopes to determine if this assignment is\n                         // the initialization of a variable.\n                         // FIXME(matthewjasper) This would probably be more\n@@ -145,8 +127,8 @@ impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n                                 opt_match_place,\n                                 match_span,\n                             );\n+                            return;\n                         }\n-                        return;\n                     }\n                 }\n                 grouped_errors.push(GroupedMoveError::OtherIllegalMove {\n@@ -158,7 +140,7 @@ impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn append_binding_error(\n-        self,\n+        &self,\n         grouped_errors: &mut Vec<GroupedMoveError<'tcx>>,\n         kind: IllegalMoveOriginKind<'tcx>,\n         move_from: &Place<'tcx>,\n@@ -236,7 +218,7 @@ impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n         };\n     }\n \n-    fn report(self, error: GroupedMoveError<'tcx>) {\n+    fn report(&self, error: GroupedMoveError<'tcx>) {\n         let (mut err, err_span) = {\n             let (span, kind): (Span, &IllegalMoveOriginKind) = match error {\n                 GroupedMoveError::MovesFromMatchPlace { span, ref kind, .. }\n@@ -249,14 +231,43 @@ impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n                     IllegalMoveOriginKind::Static => {\n                         self.tcx.cannot_move_out_of(span, \"static item\", origin)\n                     }\n-                    IllegalMoveOriginKind::BorrowedContent { target_ty: ty } => {\n+                    IllegalMoveOriginKind::BorrowedContent { target_place: place } => {\n                         // Inspect the type of the content behind the\n                         // borrow to provide feedback about why this\n                         // was a move rather than a copy.\n+                        let ty = place.ty(self.mir, self.tcx).to_ty(self.tcx);\n                         match ty.sty {\n                             ty::TyArray(..) | ty::TySlice(..) => self\n                                 .tcx\n                                 .cannot_move_out_of_interior_noncopy(span, ty, None, origin),\n+                            ty::TyClosure(def_id, closure_substs)\n+                                if !self.mir.upvar_decls.is_empty()\n+                                    && {\n+                                        match place {\n+                                            Place::Projection(ref proj) => {\n+                                                proj.base == Place::Local(Local::new(1))\n+                                            }\n+                                            Place::Local(_) | Place::Static(_) => unreachable!(),\n+                                        }\n+                                    } =>\n+                            {\n+                                let closure_kind_ty =\n+                                    closure_substs.closure_kind_ty(def_id, self.tcx);\n+                                let closure_kind = closure_kind_ty.to_opt_closure_kind();\n+                                let place_description = match closure_kind {\n+                                    Some(ty::ClosureKind::Fn) => {\n+                                        \"captured variable in an `Fn` closure\"\n+                                    }\n+                                    Some(ty::ClosureKind::FnMut) => {\n+                                        \"captured variable in an `FnMut` closure\"\n+                                    }\n+                                    Some(ty::ClosureKind::FnOnce) => {\n+                                        bug!(\"closure kind does not match first argument type\")\n+                                    }\n+                                    None => bug!(\"closure kind not inferred by borrowck\"),\n+                                };\n+                                self.tcx.cannot_move_out_of(span, place_description, origin)\n+                            }\n                             _ => self\n                                 .tcx\n                                 .cannot_move_out_of(span, \"borrowed content\", origin),\n@@ -279,7 +290,7 @@ impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn add_move_hints(\n-        self,\n+        &self,\n         error: GroupedMoveError<'tcx>,\n         err: &mut DiagnosticBuilder<'a>,\n         span: Span,\n@@ -365,7 +376,7 @@ impl<'a, 'gcx, 'tcx> MoveErrorCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    fn suitable_to_remove_deref(self, proj: &PlaceProjection<'tcx>, snippet: &str) -> bool {\n+    fn suitable_to_remove_deref(&self, proj: &PlaceProjection<'tcx>, snippet: &str) -> bool {\n         let is_shared_ref = |ty: ty::Ty| match ty.sty {\n             ty::TypeVariants::TyRef(.., hir::Mutability::MutImmutable) => true,\n             _ => false,"}, {"sha": "48236e5fdd145e4fd1174f74dd2a7afcde66b5be", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aeca042f8464a98e1821756849f062eeede71e28/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeca042f8464a98e1821756849f062eeede71e28/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=aeca042f8464a98e1821756849f062eeede71e28", "patch": "@@ -132,11 +132,11 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n         let mir = self.builder.mir;\n         let tcx = self.builder.tcx;\n         let place_ty = proj.base.ty(mir, tcx).to_ty(tcx);\n- match place_ty.sty {\n+        match place_ty.sty {\n             ty::TyRef(..) | ty::TyRawPtr(..) =>\n                 return Err(MoveError::cannot_move_out_of(\n                     self.loc,\n-                    BorrowedContent { target_ty: place.ty(mir, tcx).to_ty(tcx) })),\n+                    BorrowedContent { target_place: place.clone() })),\n             ty::TyAdt(adt, _) if adt.has_dtor(tcx) && !adt.is_box() =>\n                 return Err(MoveError::cannot_move_out_of(self.loc,\n                                                          InteriorOfTypeWithDestructor {"}, {"sha": "54609674a47d4fe06c30563b6b4c65acdeed2667", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aeca042f8464a98e1821756849f062eeede71e28/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeca042f8464a98e1821756849f062eeede71e28/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=aeca042f8464a98e1821756849f062eeede71e28", "patch": "@@ -282,9 +282,9 @@ pub(crate) enum IllegalMoveOriginKind<'tcx> {\n \n     /// Illegal move due to attempt to move from behind a reference.\n     BorrowedContent {\n-        /// The content's type: if erroneous code was trying to move\n-        /// from `*x` where `x: &T`, then this will be `T`.\n-        target_ty: ty::Ty<'tcx>,\n+        /// The place the reference refers to: if erroneous code was trying to\n+        /// move from `(*x).f` this will be `*x`.\n+        target_place: Place<'tcx>,\n     },\n \n     /// Illegal move due to attempt to move from field of an ADT that"}, {"sha": "05a022a726cd977b8013c8bfb45b07db329944cd", "filename": "src/test/ui/borrowck/borrowck-in-static.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aeca042f8464a98e1821756849f062eeede71e28/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aeca042f8464a98e1821756849f062eeede71e28/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr?ref=aeca042f8464a98e1821756849f062eeede71e28", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/borrowck-in-static.rs:15:17\n    |\n LL |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n-   |                 ^ cannot move out of borrowed content\n+   |                 ^ cannot move out of captured variable in an `Fn` closure\n \n error: aborting due to previous error\n "}, {"sha": "07a9f374b2c3935fd2368bd4bdee6ab7c960082d", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aeca042f8464a98e1821756849f062eeede71e28/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aeca042f8464a98e1821756849f062eeede71e28/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr?ref=aeca042f8464a98e1821756849f062eeede71e28", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of captured variable in an `Fn` closure\n   --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:21:9\n    |\n LL |         y.into_iter();\n-   |         ^ cannot move out of borrowed content\n+   |         ^ cannot move out of captured variable in an `Fn` closure\n \n error: aborting due to previous error\n "}, {"sha": "6aaff7433830d7a0fb510212570d3ef5fa976e03", "filename": "src/test/ui/error-codes/E0161.nll.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d5108630371932b05d4e650d20536910434c947/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0161.nll.stderr?ref=3d5108630371932b05d4e650d20536910434c947", "patch": "@@ -1,16 +0,0 @@\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/E0161.rs:14:28\n-   |\n-LL |     let _x: Box<str> = box *\"hello\"; //~ ERROR E0161\n-   |                            ^^^^^^^^ cannot move out of borrowed content\n-\n-error[E0161]: cannot move a value of type str: the size of str cannot be statically determined\n-  --> $DIR/E0161.rs:14:28\n-   |\n-LL |     let _x: Box<str> = box *\"hello\"; //~ ERROR E0161\n-   |                            ^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors occurred: E0161, E0507.\n-For more information about an error, try `rustc --explain E0161`."}, {"sha": "0394309a6e2bb1aa1b3f7a441a104832f1074653", "filename": "src/test/ui/issue-20801.nll.stderr", "status": "modified", "additions": 22, "deletions": 3, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/aeca042f8464a98e1821756849f062eeede71e28/src%2Ftest%2Fui%2Fissue-20801.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aeca042f8464a98e1821756849f062eeede71e28/src%2Ftest%2Fui%2Fissue-20801.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20801.nll.stderr?ref=aeca042f8464a98e1821756849f062eeede71e28", "patch": "@@ -1,8 +1,27 @@\n-error: internal compiler error: Accessing `(*_8)` with the kind `Write(Move)` shouldn't be possible\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/issue-20801.rs:36:22\n+   |\n+LL |     let a = unsafe { *mut_ref() };\n+   |                      ^^^^^^^^^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/issue-20801.rs:39:22\n+   |\n+LL |     let b = unsafe { *imm_ref() };\n+   |                      ^^^^^^^^^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/issue-20801.rs:42:22\n+   |\n+LL |     let c = unsafe { *mut_ptr() };\n+   |                      ^^^^^^^^^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-20801.rs:45:22\n    |\n LL |     let d = unsafe { *const_ptr() };\n-   |                      ^^^^^^^^^^^^\n+   |                      ^^^^^^^^^^^^ cannot move out of borrowed content\n \n-error: aborting due to previous error\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "d3b97a9c058633a45fd9f15717e0c2717c4856ff", "filename": "src/test/ui/issue-20801.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aeca042f8464a98e1821756849f062eeede71e28/src%2Ftest%2Fui%2Fissue-20801.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aeca042f8464a98e1821756849f062eeede71e28/src%2Ftest%2Fui%2Fissue-20801.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-20801.rs?ref=aeca042f8464a98e1821756849f062eeede71e28", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test currently ICEs when using NLL (#52416)\n-\n // We used to ICE when moving out of a `*mut T` or `*const T`.\n \n struct T(u8);"}, {"sha": "fdf8157dcf833918233aacc1107973455570d2df", "filename": "src/test/ui/issue-30355.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/aeca042f8464a98e1821756849f062eeede71e28/src%2Ftest%2Fui%2Fissue-30355.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aeca042f8464a98e1821756849f062eeede71e28/src%2Ftest%2Fui%2Fissue-30355.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-30355.nll.stderr?ref=aeca042f8464a98e1821756849f062eeede71e28", "patch": "@@ -1,9 +1,3 @@\n-error[E0508]: cannot move out of type `[u8]`, a non-copy slice\n-  --> $DIR/issue-30355.rs:15:8\n-   |\n-LL |     &X(*Y)\n-   |        ^^ cannot move out of here\n-\n error[E0161]: cannot move a value of type X: the size of X cannot be statically determined\n   --> $DIR/issue-30355.rs:15:6\n    |\n@@ -16,6 +10,12 @@ error[E0161]: cannot move a value of type [u8]: the size of [u8] cannot be stati\n LL |     &X(*Y)\n    |        ^^\n \n+error[E0508]: cannot move out of type `[u8]`, a non-copy slice\n+  --> $DIR/issue-30355.rs:15:8\n+   |\n+LL |     &X(*Y)\n+   |        ^^ cannot move out of here\n+\n error: aborting due to 3 previous errors\n \n Some errors occurred: E0161, E0508."}, {"sha": "eacd8b5e58047878ddf102835b172c4edb859809", "filename": "src/test/ui/issue-4335.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aeca042f8464a98e1821756849f062eeede71e28/src%2Ftest%2Fui%2Fissue-4335.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aeca042f8464a98e1821756849f062eeede71e28/src%2Ftest%2Fui%2Fissue-4335.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4335.nll.stderr?ref=aeca042f8464a98e1821756849f062eeede71e28", "patch": "@@ -1,8 +1,8 @@\n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/issue-4335.rs:16:20\n    |\n LL |     id(Box::new(|| *v))\n-   |                    ^^ cannot move out of borrowed content\n+   |                    ^^ cannot move out of captured variable in an `FnMut` closure\n \n error[E0597]: `v` does not live long enough\n   --> $DIR/issue-4335.rs:16:17"}, {"sha": "b3563f1b6203cfa0ef91b900b6f4ef3a261abcc7", "filename": "src/test/ui/span/borrowck-call-is-borrow-issue-12224.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aeca042f8464a98e1821756849f062eeede71e28/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aeca042f8464a98e1821756849f062eeede71e28/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fborrowck-call-is-borrow-issue-12224.nll.stderr?ref=aeca042f8464a98e1821756849f062eeede71e28", "patch": "@@ -28,11 +28,11 @@ LL | fn test4(f: &Test) {\n LL |     f.f.call_mut(())\n    |     ^^^ `f` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n \n-error[E0507]: cannot move out of borrowed content\n+error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:66:13\n    |\n LL |         foo(f);\n-   |             ^ cannot move out of borrowed content\n+   |             ^ cannot move out of captured variable in an `FnMut` closure\n \n error[E0505]: cannot move out of `f` because it is borrowed\n   --> $DIR/borrowck-call-is-borrow-issue-12224.rs:65:16"}]}