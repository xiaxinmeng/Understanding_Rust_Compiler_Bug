{"sha": "ee0384901784b2cbe8d62f259f8598cc0fc7d306", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMDM4NDkwMTc4NGIyY2JlOGQ2MmYyNTlmODU5OGNjMGZjN2QzMDY=", "commit": {"author": {"name": "Graeme Coupar", "email": "grambo@grambo.me.uk", "date": "2021-04-02T13:00:56Z"}, "committer": {"name": "Graeme Coupar", "email": "grambo@grambo.me.uk", "date": "2021-04-03T14:48:35Z"}, "message": "Convert Into to From assist\n\nThis adds a \"Convert Into to From\" assist, useful since clippy has\nrecently started adding lints on every `Into`.\n\nIt covers converting the signature, and converting any `self`/`Self`\nreferences within the body to the correct types.\n\nIt does assume that every instance of `Into` can be converted to a\n`From`, which I _think_ is the case now.  Let me know if there's\nsomething I'm not thinking of and I can try and make it smarter.", "tree": {"sha": "cd03b30c585b44eedd9e12b90617a4969bae5d81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd03b30c585b44eedd9e12b90617a4969bae5d81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee0384901784b2cbe8d62f259f8598cc0fc7d306", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee0384901784b2cbe8d62f259f8598cc0fc7d306", "html_url": "https://github.com/rust-lang/rust/commit/ee0384901784b2cbe8d62f259f8598cc0fc7d306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee0384901784b2cbe8d62f259f8598cc0fc7d306/comments", "author": {"login": "obmarg", "id": 556490, "node_id": "MDQ6VXNlcjU1NjQ5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/556490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obmarg", "html_url": "https://github.com/obmarg", "followers_url": "https://api.github.com/users/obmarg/followers", "following_url": "https://api.github.com/users/obmarg/following{/other_user}", "gists_url": "https://api.github.com/users/obmarg/gists{/gist_id}", "starred_url": "https://api.github.com/users/obmarg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obmarg/subscriptions", "organizations_url": "https://api.github.com/users/obmarg/orgs", "repos_url": "https://api.github.com/users/obmarg/repos", "events_url": "https://api.github.com/users/obmarg/events{/privacy}", "received_events_url": "https://api.github.com/users/obmarg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "obmarg", "id": 556490, "node_id": "MDQ6VXNlcjU1NjQ5MA==", "avatar_url": "https://avatars.githubusercontent.com/u/556490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/obmarg", "html_url": "https://github.com/obmarg", "followers_url": "https://api.github.com/users/obmarg/followers", "following_url": "https://api.github.com/users/obmarg/following{/other_user}", "gists_url": "https://api.github.com/users/obmarg/gists{/gist_id}", "starred_url": "https://api.github.com/users/obmarg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/obmarg/subscriptions", "organizations_url": "https://api.github.com/users/obmarg/orgs", "repos_url": "https://api.github.com/users/obmarg/repos", "events_url": "https://api.github.com/users/obmarg/events{/privacy}", "received_events_url": "https://api.github.com/users/obmarg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71ef64b673595807ccb4b3f5b7ad6ea55e63645b", "url": "https://api.github.com/repos/rust-lang/rust/commits/71ef64b673595807ccb4b3f5b7ad6ea55e63645b", "html_url": "https://github.com/rust-lang/rust/commit/71ef64b673595807ccb4b3f5b7ad6ea55e63645b"}], "stats": {"total": 399, "additions": 398, "deletions": 1}, "files": [{"sha": "199e1ad5c549ccf6416aa16b793c520addd63813", "filename": "crates/ide_assists/src/handlers/convert_into_to_from.rs", "status": "added", "additions": 355, "deletions": 0, "changes": 355, "blob_url": "https://github.com/rust-lang/rust/blob/ee0384901784b2cbe8d62f259f8598cc0fc7d306/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0384901784b2cbe8d62f259f8598cc0fc7d306/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fconvert_into_to_from.rs?ref=ee0384901784b2cbe8d62f259f8598cc0fc7d306", "patch": "@@ -0,0 +1,355 @@\n+use ide_db::{\n+    helpers::{mod_path_to_ast, FamousDefs},\n+    traits::resolve_target_trait,\n+};\n+use syntax::ast::{self, AstNode, NameOwner};\n+\n+use crate::{AssistContext, AssistId, AssistKind, Assists};\n+\n+// Assist: convert_into_to_from\n+//\n+// Converts an Into impl to an equivalent From impl.\n+//\n+// ```\n+// # //- /lib.rs crate:core\n+// # pub mod convert { pub trait Into<T> { pub fn into(self) -> T; } }\n+// # //- /lib.rs crate:main deps:core\n+// # use core::convert::Into;\n+// impl $0Into<Thing> for usize {\n+//     fn into(self) -> Thing {\n+//         Thing {\n+//             b: self.to_string(),\n+//             a: self\n+//         }\n+//     }\n+// }\n+// ```\n+// ->\n+// ```\n+// # use core::convert::Into;\n+// impl From<usize> for Thing {\n+//     fn from(val: usize) -> Self {\n+//         Thing {\n+//             b: val.to_string(),\n+//             a: val\n+//         }\n+//     }\n+// }\n+// ```\n+pub(crate) fn convert_into_to_from(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let impl_ = ctx.find_node_at_offset::<ast::Impl>()?;\n+    let src_type = impl_.self_ty()?;\n+    let ast_trait = impl_.trait_()?;\n+\n+    let module = ctx.sema.scope(impl_.syntax()).module()?;\n+\n+    let trait_ = resolve_target_trait(&ctx.sema, &impl_)?;\n+    if trait_ != FamousDefs(&ctx.sema, Some(module.krate())).core_convert_Into()? {\n+        return None;\n+    }\n+\n+    let src_type_path = {\n+        let src_type_path = src_type.syntax().descendants().find_map(ast::Path::cast)?;\n+        let src_type_def = match ctx.sema.resolve_path(&src_type_path) {\n+            Some(hir::PathResolution::Def(module_def)) => module_def,\n+            _ => return None,\n+        };\n+\n+        mod_path_to_ast(&module.find_use_path(ctx.db(), src_type_def)?)\n+    };\n+\n+    let dest_type = match &ast_trait {\n+        ast::Type::PathType(path) => {\n+            path.path()?.segment()?.generic_arg_list()?.generic_args().next()?\n+        }\n+        _ => return None,\n+    };\n+\n+    let into_fn = impl_.assoc_item_list()?.assoc_items().find_map(|item| {\n+        if let ast::AssocItem::Fn(f) = item {\n+            if f.name()?.text() == \"into\" {\n+                return Some(f);\n+            }\n+        };\n+        None\n+    })?;\n+\n+    let into_fn_name = into_fn.name()?;\n+    let into_fn_params = into_fn.param_list()?;\n+    let into_fn_return = into_fn.ret_type()?;\n+\n+    let selfs = into_fn\n+        .body()?\n+        .syntax()\n+        .descendants()\n+        .filter_map(ast::NameRef::cast)\n+        .filter(|name| name.text() == \"self\" || name.text() == \"Self\");\n+\n+    acc.add(\n+        AssistId(\"convert_into_to_from\", AssistKind::RefactorRewrite),\n+        \"Convert Into to From\",\n+        impl_.syntax().text_range(),\n+        |builder| {\n+            builder.replace(src_type.syntax().text_range(), dest_type.to_string());\n+            builder.replace(ast_trait.syntax().text_range(), format!(\"From<{}>\", src_type));\n+            builder.replace(into_fn_return.syntax().text_range(), \"-> Self\");\n+            builder.replace(\n+                into_fn_params.syntax().text_range(),\n+                format!(\"(val: {})\", src_type.to_string()),\n+            );\n+            builder.replace(into_fn_name.syntax().text_range(), \"from\");\n+\n+            for s in selfs {\n+                match s.text().as_ref() {\n+                    \"self\" => builder.replace(s.syntax().text_range(), \"val\"),\n+                    \"Self\" => builder.replace(s.syntax().text_range(), src_type_path.to_string()),\n+                    _ => {}\n+                }\n+            }\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::tests::check_assist;\n+\n+    #[test]\n+    fn convert_into_to_from_converts_a_struct() {\n+        check_convert_into_to_from(\n+            r#\"\n+struct Thing {\n+    a: String,\n+    b: usize\n+}\n+\n+impl $0core::convert::Into<Thing> for usize {\n+    fn into(self) -> Thing {\n+        Thing {\n+            b: self.to_string(),\n+            a: self\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Thing {\n+    a: String,\n+    b: usize\n+}\n+\n+impl From<usize> for Thing {\n+    fn from(val: usize) -> Self {\n+        Thing {\n+            b: val.to_string(),\n+            a: val\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn convert_into_to_from_converts_enums() {\n+        check_convert_into_to_from(\n+            r#\"\n+enum Thing {\n+    Foo(String),\n+    Bar(String)\n+}\n+\n+impl $0core::convert::Into<String> for Thing {\n+    fn into(self) -> String {\n+        match self {\n+            Self::Foo(s) => s,\n+            Self::Bar(s) => s\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+enum Thing {\n+    Foo(String),\n+    Bar(String)\n+}\n+\n+impl From<Thing> for String {\n+    fn from(val: Thing) -> Self {\n+        match val {\n+            Thing::Foo(s) => s,\n+            Thing::Bar(s) => s\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn convert_into_to_from_on_enum_with_lifetimes() {\n+        check_convert_into_to_from(\n+            r#\"\n+enum Thing<'a> {\n+    Foo(&'a str),\n+    Bar(&'a str)\n+}\n+\n+impl<'a> $0core::convert::Into<&'a str> for Thing<'a> {\n+    fn into(self) -> &'a str {\n+        match self {\n+            Self::Foo(s) => s,\n+            Self::Bar(s) => s\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+enum Thing<'a> {\n+    Foo(&'a str),\n+    Bar(&'a str)\n+}\n+\n+impl<'a> From<Thing<'a>> for &'a str {\n+    fn from(val: Thing<'a>) -> Self {\n+        match val {\n+            Thing::Foo(s) => s,\n+            Thing::Bar(s) => s\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn convert_into_to_from_works_on_references() {\n+        check_convert_into_to_from(\n+            r#\"\n+struct Thing(String);\n+\n+impl $0core::convert::Into<String> for &Thing {\n+    fn into(self) -> Thing {\n+        self.0.clone()\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Thing(String);\n+\n+impl From<&Thing> for String {\n+    fn from(val: &Thing) -> Self {\n+        val.0.clone()\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn convert_into_to_from_works_on_qualified_structs() {\n+        check_convert_into_to_from(\n+            r#\"\n+mod things {\n+    pub struct Thing(String);\n+    pub struct BetterThing(String);\n+}\n+\n+impl $0core::convert::Into<things::BetterThing> for &things::Thing {\n+    fn into(self) -> Thing {\n+        things::BetterThing(self.0.clone())\n+    }\n+}\n+\"#,\n+            r#\"\n+mod things {\n+    pub struct Thing(String);\n+    pub struct BetterThing(String);\n+}\n+\n+impl From<&things::Thing> for things::BetterThing {\n+    fn from(val: &things::Thing) -> Self {\n+        things::BetterThing(val.0.clone())\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn convert_into_to_from_works_on_qualified_enums() {\n+        check_convert_into_to_from(\n+            r#\"\n+mod things {\n+    pub enum Thing {\n+        A(String)\n+    }\n+    pub struct BetterThing {\n+        B(String)\n+    }\n+}\n+\n+impl $0core::convert::Into<things::BetterThing> for &things::Thing {\n+    fn into(self) -> Thing {\n+        match self {\n+            Self::A(s) => things::BetterThing::B(s)\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+mod things {\n+    pub enum Thing {\n+        A(String)\n+    }\n+    pub struct BetterThing {\n+        B(String)\n+    }\n+}\n+\n+impl From<&things::Thing> for things::BetterThing {\n+    fn from(val: &things::Thing) -> Self {\n+        match val {\n+            things::Thing::A(s) => things::BetterThing::B(s)\n+        }\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn convert_into_to_from_not_applicable_on_any_trait_named_into() {\n+        check_assist_not_applicable(\n+            r#\"\n+pub trait Into<T> {{\n+    pub fn into(self) -> T;\n+}}\n+\n+struct Thing {\n+    a: String,\n+}\n+\n+impl $0Into<Thing> for String {\n+    fn into(self) -> Thing {\n+        Thing {\n+            a: self\n+        }\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n+    fn check_convert_into_to_from(before: &str, after: &str) {\n+        let before = &format!(\"//- /main.rs crate:main deps:core{}{}\", before, FamousDefs::FIXTURE);\n+        check_assist(convert_into_to_from, before, after);\n+    }\n+\n+    fn check_assist_not_applicable(before: &str) {\n+        let before = &format!(\"//- /main.rs crate:main deps:core{}{}\", before, FamousDefs::FIXTURE);\n+        crate::tests::check_assist_not_applicable(convert_into_to_from, before);\n+    }\n+}"}, {"sha": "3e2c82dace0a718347afd4317a799a9966bc9d6f", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee0384901784b2cbe8d62f259f8598cc0fc7d306/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0384901784b2cbe8d62f259f8598cc0fc7d306/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=ee0384901784b2cbe8d62f259f8598cc0fc7d306", "patch": "@@ -117,6 +117,7 @@ mod handlers {\n     mod convert_integer_literal;\n     mod convert_comment_block;\n     mod convert_iter_for_each_to_for;\n+    mod convert_into_to_from;\n     mod early_return;\n     mod expand_glob_import;\n     mod extract_function;\n@@ -185,6 +186,7 @@ mod handlers {\n             convert_integer_literal::convert_integer_literal,\n             convert_comment_block::convert_comment_block,\n             convert_iter_for_each_to_for::convert_iter_for_each_to_for,\n+            convert_into_to_from::convert_into_to_from,\n             early_return::convert_to_guarded_return,\n             expand_glob_import::expand_glob_import,\n             extract_struct_from_enum_variant::extract_struct_from_enum_variant,"}, {"sha": "27a22ca10c18566f7908f8163f77521762df693d", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ee0384901784b2cbe8d62f259f8598cc0fc7d306/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0384901784b2cbe8d62f259f8598cc0fc7d306/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=ee0384901784b2cbe8d62f259f8598cc0fc7d306", "patch": "@@ -205,6 +205,38 @@ const _: i32 = 0b1010;\n     )\n }\n \n+#[test]\n+fn doctest_convert_into_to_from() {\n+    check_doc_test(\n+        \"convert_into_to_from\",\n+        r#####\"\n+//- /lib.rs crate:core\n+pub mod convert { pub trait Into<T> { pub fn into(self) -> T; } }\n+//- /lib.rs crate:main deps:core\n+use core::convert::Into;\n+impl $0Into<Thing> for usize {\n+    fn into(self) -> Thing {\n+        Thing {\n+            b: self.to_string(),\n+            a: self\n+        }\n+    }\n+}\n+\"#####,\n+        r#####\"\n+use core::convert::Into;\n+impl From<usize> for Thing {\n+    fn from(val: usize) -> Self {\n+        Thing {\n+            b: val.to_string(),\n+            a: val\n+        }\n+    }\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_convert_iter_for_each_to_for() {\n     check_doc_test("}, {"sha": "66798ea3a69aa310d50d50d4d5f9a187457da640", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee0384901784b2cbe8d62f259f8598cc0fc7d306/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0384901784b2cbe8d62f259f8598cc0fc7d306/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=ee0384901784b2cbe8d62f259f8598cc0fc7d306", "patch": "@@ -93,6 +93,10 @@ impl FamousDefs<'_, '_> {\n         self.find_trait(\"core:convert:From\")\n     }\n \n+    pub fn core_convert_Into(&self) -> Option<Trait> {\n+        self.find_trait(\"core:convert:Into\")\n+    }\n+\n     pub fn core_option_Option(&self) -> Option<Enum> {\n         self.find_enum(\"core:option:Option\")\n     }"}, {"sha": "4d79e064e081dae76900cbbc4249762a5e42b3da", "filename": "crates/ide_db/src/helpers/famous_defs_fixture.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee0384901784b2cbe8d62f259f8598cc0fc7d306/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee0384901784b2cbe8d62f259f8598cc0fc7d306/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs?ref=ee0384901784b2cbe8d62f259f8598cc0fc7d306", "patch": "@@ -14,6 +14,10 @@ pub mod convert {\n     pub trait From<T> {\n         fn from(t: T) -> Self;\n     }\n+\n+    pub trait Into<T> {\n+        pub fn into(self) -> T;\n+    }\n }\n \n pub mod default {\n@@ -120,7 +124,7 @@ pub mod option {\n pub mod prelude {\n     pub use crate::{\n         cmp::Ord,\n-        convert::From,\n+        convert::{From, Into},\n         default::Default,\n         iter::{IntoIterator, Iterator},\n         ops::{Fn, FnMut, FnOnce},"}]}