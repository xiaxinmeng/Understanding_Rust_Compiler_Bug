{"sha": "0e1e3a9e1e9cb14f35f821e78c8e5626ff9f07b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMWUzYTllMWU5Y2IxNGYzNWY4MjFlNzhjOGU1NjI2ZmY5ZjA3YjQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-24T23:49:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-24T23:49:39Z"}, "message": "Do better at parsing expr_paths with type arguments.", "tree": {"sha": "7bbe4e1da93ff54a5c57309ac0b674297d5b3b2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7bbe4e1da93ff54a5c57309ac0b674297d5b3b2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e1e3a9e1e9cb14f35f821e78c8e5626ff9f07b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e1e3a9e1e9cb14f35f821e78c8e5626ff9f07b4", "html_url": "https://github.com/rust-lang/rust/commit/0e1e3a9e1e9cb14f35f821e78c8e5626ff9f07b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e1e3a9e1e9cb14f35f821e78c8e5626ff9f07b4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d7c2acf0937a6eee58e053fd2babe7b30062c61", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d7c2acf0937a6eee58e053fd2babe7b30062c61", "html_url": "https://github.com/rust-lang/rust/commit/2d7c2acf0937a6eee58e053fd2babe7b30062c61"}], "stats": {"total": 42, "additions": 23, "deletions": 19}, "files": [{"sha": "5a67efa6b71c8ec7a7ea71f4457374e5237183d1", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 23, "deletions": 19, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0e1e3a9e1e9cb14f35f821e78c8e5626ff9f07b4/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e1e3a9e1e9cb14f35f821e78c8e5626ff9f07b4/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=0e1e3a9e1e9cb14f35f821e78c8e5626ff9f07b4", "patch": "@@ -390,6 +390,20 @@ tag greed {\n     MINIMAL;\n }\n \n+impure fn parse_ty_args(parser p, span hi) ->\n+    util.common.spanned[vec[@ast.ty]] {\n+\n+    if (p.peek() == token.LBRACKET) {\n+        auto pf = parse_ty;\n+        ret parse_seq[@ast.ty](token.LBRACKET,\n+                               token.RBRACKET,\n+                               some(token.COMMA),\n+                               pf, p);\n+    }\n+    let vec[@ast.ty] v = vec();\n+    ret spanned(hi, hi, v);\n+}\n+\n impure fn parse_path(parser p, greed g) -> ast.path {\n \n     auto lo = p.get_span();\n@@ -420,20 +434,7 @@ impure fn parse_path(parser p, greed g) -> ast.path {\n         }\n     }\n \n-    let vec[@ast.ty] v = vec();\n-    let util.common.spanned[vec[@ast.ty]] tys = rec(node=v, span=hi);\n-\n-    alt (p.peek()) {\n-        case (token.LBRACKET) {\n-            auto pf = parse_ty;\n-            tys = parse_seq[@ast.ty](token.LBRACKET,\n-                                     token.RBRACKET,\n-                                     some(token.COMMA),\n-                                     pf, p);\n-        }\n-        case (_) {\n-        }\n-    }\n+    auto tys = parse_ty_args(p, hi);\n     ret spanned(lo, tys.span, rec(idents=ids, types=tys.node));\n }\n \n@@ -569,17 +570,20 @@ impure fn parse_bottom_expr(parser p) -> @ast.expr {\n     ret @spanned(lo, hi, ex);\n }\n \n-fn append_dot_ident_to_expr(span lo, span hi,\n-                            @ast.expr e, ast.ident i) -> @ast.expr {\n+impure fn extend_expr_by_ident(parser p, span lo, span hi,\n+                               @ast.expr e, ast.ident i) -> @ast.expr {\n     auto e_ = e.node;\n     alt (e.node) {\n         case (ast.expr_path(?pth, ?def, ?ann)) {\n             if (_vec.len[@ast.ty](pth.node.types) == 0u) {\n                 auto idents_ = pth.node.idents;\n                 idents_ += i;\n-                auto pth_ = rec(node=rec(idents=idents_ with pth.node)\n-                                with pth);\n+                auto tys = parse_ty_args(p, hi);\n+                auto pth_ = spanned(pth.span, tys.span,\n+                                    rec(idents=idents_,\n+                                        types=tys.node));\n                 e_ = ast.expr_path(pth_, def, ann);\n+                ret @spanned(pth_.span, pth_.span, e_);\n             } else {\n                 e_ = ast.expr_field(e, i, ann);\n             }\n@@ -621,7 +625,7 @@ impure fn parse_dot_or_call_expr(parser p) -> @ast.expr {\n                     case (token.IDENT(?i)) {\n                         hi = p.get_span();\n                         p.bump();\n-                        e = append_dot_ident_to_expr(lo, hi, e, i);\n+                        e = extend_expr_by_ident(p, lo, hi, e, i);\n                     }\n \n                     case (token.LPAREN) {"}]}