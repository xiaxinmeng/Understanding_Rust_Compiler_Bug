{"sha": "c724b67e1b474262917a5154d74e7072267593fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MjRiNjdlMWI0NzQyNjI5MTdhNTE1NGQ3NGU3MDcyMjY3NTkzZmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-14T08:56:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-14T08:56:06Z"}, "message": "Auto merge of #73490 - CAD97:range-unchecked-stepping, r=Amanieu\n\nUse step_unchecked more liberally in range iter impls\n\nWithout these `_unchecked`, these operations on iterators of `char` fail to optimize out the unreachable panicking condition on overflow.\n\ncc @cuviper https://github.com/rayon-rs/rayon/pull/771 where this was discovered.", "tree": {"sha": "41a041b6e60f64d3eb8cf2d58534c5cb5ebfbd1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41a041b6e60f64d3eb8cf2d58534c5cb5ebfbd1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c724b67e1b474262917a5154d74e7072267593fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c724b67e1b474262917a5154d74e7072267593fe", "html_url": "https://github.com/rust-lang/rust/commit/c724b67e1b474262917a5154d74e7072267593fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c724b67e1b474262917a5154d74e7072267593fe/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a689da944977496fb758cc2d700984cc6a10b7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a689da944977496fb758cc2d700984cc6a10b7f", "html_url": "https://github.com/rust-lang/rust/commit/4a689da944977496fb758cc2d700984cc6a10b7f"}, {"sha": "7779a11448927e208ed6eb9bb609dd23595f77ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/7779a11448927e208ed6eb9bb609dd23595f77ce", "html_url": "https://github.com/rust-lang/rust/commit/7779a11448927e208ed6eb9bb609dd23595f77ce"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "9f55f378a5cc1dde508a23c2c3ed8f8ec9b6c9f7", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c724b67e1b474262917a5154d74e7072267593fe/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c724b67e1b474262917a5154d74e7072267593fe/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=c724b67e1b474262917a5154d74e7072267593fe", "patch": "@@ -504,9 +504,6 @@ impl<A: Step> Iterator for ops::Range<A> {\n     fn next(&mut self) -> Option<A> {\n         if self.start < self.end {\n             // SAFETY: just checked precondition\n-            // We use the unchecked version here, because\n-            // this helps LLVM vectorize loops for some ranges\n-            // that don't get vectorized otherwise.\n             let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };\n             Some(mem::replace(&mut self.start, n))\n         } else {\n@@ -528,7 +525,8 @@ impl<A: Step> Iterator for ops::Range<A> {\n     fn nth(&mut self, n: usize) -> Option<A> {\n         if let Some(plus_n) = Step::forward_checked(self.start.clone(), n) {\n             if plus_n < self.end {\n-                self.start = Step::forward(plus_n.clone(), 1);\n+                // SAFETY: just checked precondition\n+                self.start = unsafe { Step::forward_unchecked(plus_n.clone(), 1) };\n                 return Some(plus_n);\n             }\n         }\n@@ -589,7 +587,8 @@ impl<A: Step> DoubleEndedIterator for ops::Range<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n         if self.start < self.end {\n-            self.end = Step::backward(self.end.clone(), 1);\n+            // SAFETY: just checked precondition\n+            self.end = unsafe { Step::backward_unchecked(self.end.clone(), 1) };\n             Some(self.end.clone())\n         } else {\n             None\n@@ -600,7 +599,8 @@ impl<A: Step> DoubleEndedIterator for ops::Range<A> {\n     fn nth_back(&mut self, n: usize) -> Option<A> {\n         if let Some(minus_n) = Step::backward_checked(self.end.clone(), n) {\n             if minus_n > self.start {\n-                self.end = Step::backward(minus_n, 1);\n+                // SAFETY: just checked precondition\n+                self.end = unsafe { Step::backward_unchecked(minus_n, 1) };\n                 return Some(self.end.clone());\n             }\n         }\n@@ -657,9 +657,6 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n         let is_iterating = self.start < self.end;\n         Some(if is_iterating {\n             // SAFETY: just checked precondition\n-            // We use the unchecked version here, because\n-            // otherwise `for _ in '\\0'..=char::MAX`\n-            // does not successfully remove panicking code.\n             let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };\n             mem::replace(&mut self.start, n)\n         } else {\n@@ -722,7 +719,8 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n         let mut accum = init;\n \n         while self.start < self.end {\n-            let n = Step::forward(self.start.clone(), 1);\n+            // SAFETY: just checked precondition\n+            let n = unsafe { Step::forward_unchecked(self.start.clone(), 1) };\n             let n = mem::replace(&mut self.start, n);\n             accum = f(accum, n)?;\n         }\n@@ -775,7 +773,8 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n         }\n         let is_iterating = self.start < self.end;\n         Some(if is_iterating {\n-            let n = Step::backward(self.end.clone(), 1);\n+            // SAFETY: just checked precondition\n+            let n = unsafe { Step::backward_unchecked(self.end.clone(), 1) };\n             mem::replace(&mut self.end, n)\n         } else {\n             self.exhausted = true;\n@@ -825,7 +824,8 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n         let mut accum = init;\n \n         while self.start < self.end {\n-            let n = Step::backward(self.end.clone(), 1);\n+            // SAFETY: just checked precondition\n+            let n = unsafe { Step::backward_unchecked(self.end.clone(), 1) };\n             let n = mem::replace(&mut self.end, n);\n             accum = f(accum, n)?;\n         }"}]}