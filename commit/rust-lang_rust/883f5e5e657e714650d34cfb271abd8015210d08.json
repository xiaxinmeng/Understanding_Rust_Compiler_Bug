{"sha": "883f5e5e657e714650d34cfb271abd8015210d08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4M2Y1ZTVlNjU3ZTcxNDY1MGQzNGNmYjI3MWFiZDgwMTUyMTBkMDg=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-11-24T18:26:42Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2017-12-10T00:33:32Z"}, "message": "one-time diagnostics: span_suggestion, generalize methods for non-lints\n\n304c8b1edabcd made the Session's one-time-diagnostics set take a\nspecial-purpose `DiagnosticMessageId` enum rather than a LintID so that\nit could support more than just lints, but the `diag_span_note_once` and\n`diag_note_once` methods continued to take references to lints: for API\nconsistency, we now make these methods take a `DiagnosticMessageId`\nwhile we add support for one-time span-suggestions.", "tree": {"sha": "0cb7a4bc852809787b3c31b13ed579295868f718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cb7a4bc852809787b3c31b13ed579295868f718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/883f5e5e657e714650d34cfb271abd8015210d08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/883f5e5e657e714650d34cfb271abd8015210d08", "html_url": "https://github.com/rust-lang/rust/commit/883f5e5e657e714650d34cfb271abd8015210d08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/883f5e5e657e714650d34cfb271abd8015210d08/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fa53b00e7450060a3af9b1ef63169db37e589c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fa53b00e7450060a3af9b1ef63169db37e589c2", "html_url": "https://github.com/rust-lang/rust/commit/6fa53b00e7450060a3af9b1ef63169db37e589c2"}], "stats": {"total": 53, "additions": 39, "deletions": 14}, "files": [{"sha": "f0761ce61786551380ecc3abea6be57be09521ea", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/883f5e5e657e714650d34cfb271abd8015210d08/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883f5e5e657e714650d34cfb271abd8015210d08/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=883f5e5e657e714650d34cfb271abd8015210d08", "patch": "@@ -37,7 +37,7 @@ use errors::{DiagnosticBuilder, DiagnosticId};\n use hir::def_id::{CrateNum, LOCAL_CRATE};\n use hir::intravisit::{self, FnKind};\n use hir;\n-use session::Session;\n+use session::{Session, DiagnosticMessageId};\n use std::hash;\n use syntax::ast;\n use syntax::codemap::MultiSpan;\n@@ -423,7 +423,7 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n         LintSource::Default => {\n             sess.diag_note_once(\n                 &mut err,\n-                lint,\n+                DiagnosticMessageId::from(lint),\n                 &format!(\"#[{}({})] on by default\", level.as_str(), name));\n         }\n         LintSource::CommandLine(lint_flag_val) => {\n@@ -437,24 +437,25 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n             if lint_flag_val.as_str() == name {\n                 sess.diag_note_once(\n                     &mut err,\n-                    lint,\n+                    DiagnosticMessageId::from(lint),\n                     &format!(\"requested on the command line with `{} {}`\",\n                              flag, hyphen_case_lint_name));\n             } else {\n                 let hyphen_case_flag_val = lint_flag_val.as_str().replace(\"_\", \"-\");\n                 sess.diag_note_once(\n                     &mut err,\n-                    lint,\n+                    DiagnosticMessageId::from(lint),\n                     &format!(\"`{} {}` implied by `{} {}`\",\n                              flag, hyphen_case_lint_name, flag,\n                              hyphen_case_flag_val));\n             }\n         }\n         LintSource::Node(lint_attr_name, src) => {\n-            sess.diag_span_note_once(&mut err, lint, src, \"lint level defined here\");\n+            sess.diag_span_note_once(&mut err, DiagnosticMessageId::from(lint),\n+                                     src, \"lint level defined here\");\n             if lint_attr_name.as_str() != name {\n                 let level_str = level.as_str();\n-                sess.diag_note_once(&mut err, lint,\n+                sess.diag_note_once(&mut err, DiagnosticMessageId::from(lint),\n                                     &format!(\"#[{}({})] implied by #[{}({})]\",\n                                              level_str, name, level_str, lint_attr_name));\n             }"}, {"sha": "36c1966bdc8348442b270216d1e71ddfe8f46a08", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/883f5e5e657e714650d34cfb271abd8015210d08/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883f5e5e657e714650d34cfb271abd8015210d08/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=883f5e5e657e714650d34cfb271abd8015210d08", "patch": "@@ -161,6 +161,7 @@ pub struct PerfStats {\n enum DiagnosticBuilderMethod {\n     Note,\n     SpanNote,\n+    SpanSuggestion(String), // suggestion\n     // add more variants as needed to support one-time diagnostics\n }\n \n@@ -173,6 +174,12 @@ pub enum DiagnosticMessageId {\n     StabilityId(u32) // issue number\n }\n \n+impl From<&'static lint::Lint> for DiagnosticMessageId {\n+    fn from(lint: &'static lint::Lint) -> Self {\n+        DiagnosticMessageId::LintId(lint::LintId::of(lint))\n+    }\n+}\n+\n impl Session {\n     pub fn local_crate_disambiguator(&self) -> CrateDisambiguator {\n         match *self.crate_disambiguator.borrow() {\n@@ -358,33 +365,50 @@ impl Session {\n     fn diag_once<'a, 'b>(&'a self,\n                          diag_builder: &'b mut DiagnosticBuilder<'a>,\n                          method: DiagnosticBuilderMethod,\n-                         lint: &'static lint::Lint, message: &str, span: Option<Span>) {\n+                         msg_id: DiagnosticMessageId,\n+                         message: &str,\n+                         span_maybe: Option<Span>) {\n \n-        let lint_id = DiagnosticMessageId::LintId(lint::LintId::of(lint));\n-        let id_span_message = (lint_id, span, message.to_owned());\n+        let id_span_message = (msg_id, span_maybe, message.to_owned());\n         let fresh = self.one_time_diagnostics.borrow_mut().insert(id_span_message);\n         if fresh {\n             match method {\n                 DiagnosticBuilderMethod::Note => {\n                     diag_builder.note(message);\n                 },\n                 DiagnosticBuilderMethod::SpanNote => {\n-                    diag_builder.span_note(span.expect(\"span_note expects a span\"), message);\n+                    let span = span_maybe.expect(\"span_note needs a span\");\n+                    diag_builder.span_note(span, message);\n+                },\n+                DiagnosticBuilderMethod::SpanSuggestion(suggestion) => {\n+                    let span = span_maybe.expect(\"span_suggestion needs a span\");\n+                    diag_builder.span_suggestion(span, message, suggestion);\n                 }\n             }\n         }\n     }\n \n     pub fn diag_span_note_once<'a, 'b>(&'a self,\n                                        diag_builder: &'b mut DiagnosticBuilder<'a>,\n-                                       lint: &'static lint::Lint, span: Span, message: &str) {\n-        self.diag_once(diag_builder, DiagnosticBuilderMethod::SpanNote, lint, message, Some(span));\n+                                       msg_id: DiagnosticMessageId, span: Span, message: &str) {\n+        self.diag_once(diag_builder, DiagnosticBuilderMethod::SpanNote,\n+                       msg_id, message, Some(span));\n     }\n \n     pub fn diag_note_once<'a, 'b>(&'a self,\n                                   diag_builder: &'b mut DiagnosticBuilder<'a>,\n-                                  lint: &'static lint::Lint, message: &str) {\n-        self.diag_once(diag_builder, DiagnosticBuilderMethod::Note, lint, message, None);\n+                                  msg_id: DiagnosticMessageId, message: &str) {\n+        self.diag_once(diag_builder, DiagnosticBuilderMethod::Note, msg_id, message, None);\n+    }\n+\n+    pub fn diag_span_suggestion_once<'a, 'b>(&'a self,\n+                                             diag_builder: &'b mut DiagnosticBuilder<'a>,\n+                                             msg_id: DiagnosticMessageId,\n+                                             span: Span,\n+                                             message: &str,\n+                                             suggestion: String) {\n+        self.diag_once(diag_builder, DiagnosticBuilderMethod::SpanSuggestion(suggestion),\n+                       msg_id, message, Some(span));\n     }\n \n     pub fn codemap<'a>(&'a self) -> &'a codemap::CodeMap {"}]}