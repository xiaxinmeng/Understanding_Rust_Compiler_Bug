{"sha": "55fe6d8d5875f1378747ea1681deac64536ef9dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZmU2ZDhkNTg3NWYxMzc4NzQ3ZWExNjgxZGVhYzY0NTM2ZWY5ZGM=", "commit": {"author": {"name": "leo60228", "email": "iakornfeld@gmail.com", "date": "2019-11-21T18:34:31Z"}, "committer": {"name": "leo60228", "email": "iakornfeld@gmail.com", "date": "2019-11-22T17:27:07Z"}, "message": "Add documentation to `std::env::args[_os]`", "tree": {"sha": "7b1ebd3d8f9291ad7cc03df999f33ef2fa408e56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b1ebd3d8f9291ad7cc03df999f33ef2fa408e56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55fe6d8d5875f1378747ea1681deac64536ef9dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55fe6d8d5875f1378747ea1681deac64536ef9dc", "html_url": "https://github.com/rust-lang/rust/commit/55fe6d8d5875f1378747ea1681deac64536ef9dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55fe6d8d5875f1378747ea1681deac64536ef9dc/comments", "author": {"login": "leo60228", "id": 8355305, "node_id": "MDQ6VXNlcjgzNTUzMDU=", "avatar_url": "https://avatars.githubusercontent.com/u/8355305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leo60228", "html_url": "https://github.com/leo60228", "followers_url": "https://api.github.com/users/leo60228/followers", "following_url": "https://api.github.com/users/leo60228/following{/other_user}", "gists_url": "https://api.github.com/users/leo60228/gists{/gist_id}", "starred_url": "https://api.github.com/users/leo60228/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leo60228/subscriptions", "organizations_url": "https://api.github.com/users/leo60228/orgs", "repos_url": "https://api.github.com/users/leo60228/repos", "events_url": "https://api.github.com/users/leo60228/events{/privacy}", "received_events_url": "https://api.github.com/users/leo60228/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leo60228", "id": 8355305, "node_id": "MDQ6VXNlcjgzNTUzMDU=", "avatar_url": "https://avatars.githubusercontent.com/u/8355305?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leo60228", "html_url": "https://github.com/leo60228", "followers_url": "https://api.github.com/users/leo60228/followers", "following_url": "https://api.github.com/users/leo60228/following{/other_user}", "gists_url": "https://api.github.com/users/leo60228/gists{/gist_id}", "starred_url": "https://api.github.com/users/leo60228/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leo60228/subscriptions", "organizations_url": "https://api.github.com/users/leo60228/orgs", "repos_url": "https://api.github.com/users/leo60228/repos", "events_url": "https://api.github.com/users/leo60228/events{/privacy}", "received_events_url": "https://api.github.com/users/leo60228/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e282b2227f4dac70bf805c59fc4c90e5a4e2c0ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/e282b2227f4dac70bf805c59fc4c90e5a4e2c0ef", "html_url": "https://github.com/rust-lang/rust/commit/e282b2227f4dac70bf805c59fc4c90e5a4e2c0ef"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "651010d136611895921a3dea1200a461d58ce831", "filename": "src/libstd/env.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55fe6d8d5875f1378747ea1681deac64536ef9dc/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fe6d8d5875f1378747ea1681deac64536ef9dc/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=55fe6d8d5875f1378747ea1681deac64536ef9dc", "patch": "@@ -702,6 +702,11 @@ pub struct ArgsOs { inner: sys::args::Args }\n /// (such as `*` and `?`). On Windows this is not done, and such arguments are\n /// passed as-is.\n ///\n+/// On glibc Linux, arguments are retrieved by placing a function in .init_array.\n+/// glibc passes argc, argv, and envp to functions in .init_array, as a non-standard extension.\n+/// This allows `std::env::args` to work even in a `cdylib` or `staticlib`, as it does on macOS\n+/// and Windows.\n+///\n /// # Panics\n ///\n /// The returned iterator will panic during iteration if any argument to the\n@@ -732,6 +737,11 @@ pub fn args() -> Args {\n /// set to arbitrary text, and it may not even exist, so this property should\n /// not be relied upon for security purposes.\n ///\n+/// On glibc Linux, arguments are retrieved by placing a function in .init_array.\n+/// glibc passes argc, argv, and envp to functions in .init_array, as a non-standard extension.\n+/// This allows `std::env::args` to work even in a `cdylib` or `staticlib`, as it does on macOS\n+/// and Windows.\n+///\n /// # Examples\n ///\n /// ```"}]}