{"sha": "0ce88fe401e272f072a18e01bddabdea93abec51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZTg4ZmU0MDFlMjcyZjA3MmExOGUwMWJkZGFiZGVhOTNhYmVjNTE=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-06T23:19:34Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-06T23:19:34Z"}, "message": "Update docs to not refer to the `of` clause in an impl\n\nCloses #3375", "tree": {"sha": "f76df64a00e95e69b10c498e4475f041c29b89af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f76df64a00e95e69b10c498e4475f041c29b89af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ce88fe401e272f072a18e01bddabdea93abec51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce88fe401e272f072a18e01bddabdea93abec51", "html_url": "https://github.com/rust-lang/rust/commit/0ce88fe401e272f072a18e01bddabdea93abec51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ce88fe401e272f072a18e01bddabdea93abec51/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46990ad1116024ed7e6de00b3678dcd1733df967", "url": "https://api.github.com/repos/rust-lang/rust/commits/46990ad1116024ed7e6de00b3678dcd1733df967", "html_url": "https://github.com/rust-lang/rust/commit/46990ad1116024ed7e6de00b3678dcd1733df967"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "d16c2a6c07296d70bfccd525e7cb5e338d63e0bf", "filename": "doc/rust.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ce88fe401e272f072a18e01bddabdea93abec51/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/0ce88fe401e272f072a18e01bddabdea93abec51/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=0ce88fe401e272f072a18e01bddabdea93abec51", "patch": "@@ -1309,8 +1309,8 @@ the same time.\n It is possible to define an implementation without referring to a\n trait.  The methods in such an implementation can only be used\n statically (as direct calls on the values of the type that the\n-implementation targets). In such an implementation, the `of` clause is\n-not given, and the name is mandatory.  Such implementations are\n+implementation targets). In such an implementation, the type after the colon is omitted,\n+and the name is mandatory.  Such implementations are\n limited to nominal types (enums, structs) and the implementation must\n appear in the same module or a sub-module as the receiver type.\n "}, {"sha": "cdd6f56ead0365a6f3f4ba9110c363987189d8d6", "filename": "doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0ce88fe401e272f072a18e01bddabdea93abec51/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/0ce88fe401e272f072a18e01bddabdea93abec51/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=0ce88fe401e272f072a18e01bddabdea93abec51", "patch": "@@ -1951,8 +1951,8 @@ whose element type does not have a `to_str` implementation in scope.\n \n ## Polymorphic traits\n \n-Traits may contain type parameters. This defines a trait for\n-generalized sequence types:\n+Traits may contain type parameters. A trait for\n+generalized sequence types is:\n \n ~~~~\n trait seq<T> {\n@@ -1967,11 +1967,8 @@ impl<T> ~[T]: seq<T> {\n }\n ~~~~\n \n-Note that the implementation has to explicitly declare the type\n-parameter that it binds, `T`, before using it to specify its trait type. This is\n-needed because it could also, for example, specify an implementation\n-of `seq<int>`\u2014the `of` clause *refers* to a type, rather than defining\n-one.\n+The implementation has to explicitly declare the type\n+parameter that it binds, `T`, before using it to specify its trait type. Rust requires this declaration because the `impl` could also, for example, specify an implementation of `seq<int>`. The trait type -- appearing after the colon in the `impl` -- *refers* to a type, rather than defining one.\n \n The type parameters bound by a trait are in scope in each of the\n method declarations. So, re-declaring the type parameter\n@@ -2066,7 +2063,7 @@ more expensive than statically resolved method calls.\n \n If you only intend to use an implementation for static overloading,\n and there is no trait available that it conforms to, you are free\n-to leave off the `of` clause.  However, this is only possible when you\n+to leave off the type after the colon.  However, this is only possible when you\n are defining an implementation in the same module as the receiver\n type, and the receiver type is a named type (i.e., an enum or a\n class); [single-variant enums](#single_variant_enum) are a common"}]}