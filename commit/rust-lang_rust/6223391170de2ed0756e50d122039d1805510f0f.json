{"sha": "6223391170de2ed0756e50d122039d1805510f0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMjMzOTExNzBkZTJlZDA3NTZlNTBkMTIyMDM5ZDE4MDU1MTBmMGY=", "commit": {"author": {"name": "mgr-inz-rafal", "email": "rchabowski@gmail.com", "date": "2019-12-26T12:34:55Z"}, "committer": {"name": "mgr-inz-rafal", "email": "rchabowski@gmail.com", "date": "2019-12-28T15:46:08Z"}, "message": "Add tests for new lint (modulo_arithmetic)", "tree": {"sha": "7aa8a120b47015d1d322b793f1d1a07ff9b2a3e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aa8a120b47015d1d322b793f1d1a07ff9b2a3e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6223391170de2ed0756e50d122039d1805510f0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6223391170de2ed0756e50d122039d1805510f0f", "html_url": "https://github.com/rust-lang/rust/commit/6223391170de2ed0756e50d122039d1805510f0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6223391170de2ed0756e50d122039d1805510f0f/comments", "author": {"login": "mgr-inz-rafal", "id": 22395284, "node_id": "MDQ6VXNlcjIyMzk1Mjg0", "avatar_url": "https://avatars.githubusercontent.com/u/22395284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgr-inz-rafal", "html_url": "https://github.com/mgr-inz-rafal", "followers_url": "https://api.github.com/users/mgr-inz-rafal/followers", "following_url": "https://api.github.com/users/mgr-inz-rafal/following{/other_user}", "gists_url": "https://api.github.com/users/mgr-inz-rafal/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgr-inz-rafal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgr-inz-rafal/subscriptions", "organizations_url": "https://api.github.com/users/mgr-inz-rafal/orgs", "repos_url": "https://api.github.com/users/mgr-inz-rafal/repos", "events_url": "https://api.github.com/users/mgr-inz-rafal/events{/privacy}", "received_events_url": "https://api.github.com/users/mgr-inz-rafal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mgr-inz-rafal", "id": 22395284, "node_id": "MDQ6VXNlcjIyMzk1Mjg0", "avatar_url": "https://avatars.githubusercontent.com/u/22395284?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mgr-inz-rafal", "html_url": "https://github.com/mgr-inz-rafal", "followers_url": "https://api.github.com/users/mgr-inz-rafal/followers", "following_url": "https://api.github.com/users/mgr-inz-rafal/following{/other_user}", "gists_url": "https://api.github.com/users/mgr-inz-rafal/gists{/gist_id}", "starred_url": "https://api.github.com/users/mgr-inz-rafal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mgr-inz-rafal/subscriptions", "organizations_url": "https://api.github.com/users/mgr-inz-rafal/orgs", "repos_url": "https://api.github.com/users/mgr-inz-rafal/repos", "events_url": "https://api.github.com/users/mgr-inz-rafal/events{/privacy}", "received_events_url": "https://api.github.com/users/mgr-inz-rafal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f191e916bdbb98ef91a35b3c82376b3c517654fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f191e916bdbb98ef91a35b3c82376b3c517654fb", "html_url": "https://github.com/rust-lang/rust/commit/f191e916bdbb98ef91a35b3c82376b3c517654fb"}], "stats": {"total": 565, "additions": 565, "deletions": 0}, "files": [{"sha": "b010b0dbdfa69e5c241745a70ddf6eaef7a1d42a", "filename": "tests/ui/modulo_arithmetic_float.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6223391170de2ed0756e50d122039d1805510f0f/tests%2Fui%2Fmodulo_arithmetic_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6223391170de2ed0756e50d122039d1805510f0f/tests%2Fui%2Fmodulo_arithmetic_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_float.rs?ref=6223391170de2ed0756e50d122039d1805510f0f", "patch": "@@ -0,0 +1,36 @@\n+#![warn(clippy::modulo_arithmetic)]\n+#![allow(\n+    unused,\n+    clippy::shadow_reuse,\n+    clippy::shadow_unrelated,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::modulo_one\n+)]\n+\n+fn main() {\n+    // Lint when both sides are const and of the opposite sign\n+    -1.6 % 2.1;\n+    1.6 % -2.1;\n+    (1.1 - 2.3) % (1.1 + 2.3);\n+    (1.1 + 2.3) % (1.1 - 2.3);\n+\n+    // Lint on floating point numbers\n+    let a_f32: f32 = -1.6;\n+    let mut b_f32: f32 = 2.1;\n+    a_f32 % b_f32;\n+    b_f32 % a_f32;\n+    b_f32 %= a_f32;\n+\n+    let a_f64: f64 = -1.6;\n+    let mut b_f64: f64 = 2.1;\n+    a_f64 % b_f64;\n+    b_f64 % a_f64;\n+    b_f64 %= a_f64;\n+\n+    // No lint when both sides are const and of the same sign\n+    1.6 % 2.1;\n+    -1.6 % -2.1;\n+    (1.1 + 2.3) % (-1.1 + 2.3);\n+    (-1.1 - 2.3) % (1.1 - 2.3);\n+}"}, {"sha": "7bfdb0bde60706bc3765f87bd98a02211cde1265", "filename": "tests/ui/modulo_arithmetic_float.stderr", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/6223391170de2ed0756e50d122039d1805510f0f/tests%2Fui%2Fmodulo_arithmetic_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6223391170de2ed0756e50d122039d1805510f0f/tests%2Fui%2Fmodulo_arithmetic_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_float.stderr?ref=6223391170de2ed0756e50d122039d1805510f0f", "patch": "@@ -0,0 +1,83 @@\n+error: you are using modulo operator on constants with different signs: `-1.600 % 2.100`\n+  --> $DIR/modulo_arithmetic_float.rs:13:5\n+   |\n+LL |     -1.6 % 2.1;\n+   |     ^^^^^^^^^^\n+   |\n+   = note: `-D clippy::modulo-arithmetic` implied by `-D warnings`\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on constants with different signs: `1.600 % -2.100`\n+  --> $DIR/modulo_arithmetic_float.rs:14:5\n+   |\n+LL |     1.6 % -2.1;\n+   |     ^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on constants with different signs: `-1.200 % 3.400`\n+  --> $DIR/modulo_arithmetic_float.rs:15:5\n+   |\n+LL |     (1.1 - 2.3) % (1.1 + 2.3);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on constants with different signs: `3.400 % -1.200`\n+  --> $DIR/modulo_arithmetic_float.rs:16:5\n+   |\n+LL |     (1.1 + 2.3) % (1.1 - 2.3);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_float.rs:21:5\n+   |\n+LL |     a_f32 % b_f32;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_float.rs:22:5\n+   |\n+LL |     b_f32 % a_f32;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_float.rs:23:5\n+   |\n+LL |     b_f32 %= a_f32;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_float.rs:27:5\n+   |\n+LL |     a_f64 % b_f64;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_float.rs:28:5\n+   |\n+LL |     b_f64 % a_f64;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_float.rs:29:5\n+   |\n+LL |     b_f64 %= a_f64;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "779d035c5f8a28850939afd1000a494b2fb737cc", "filename": "tests/ui/modulo_arithmetic_integral.rs", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/6223391170de2ed0756e50d122039d1805510f0f/tests%2Fui%2Fmodulo_arithmetic_integral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6223391170de2ed0756e50d122039d1805510f0f/tests%2Fui%2Fmodulo_arithmetic_integral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_integral.rs?ref=6223391170de2ed0756e50d122039d1805510f0f", "patch": "@@ -0,0 +1,90 @@\n+#![warn(clippy::modulo_arithmetic)]\n+#![allow(\n+    unused,\n+    clippy::shadow_reuse,\n+    clippy::shadow_unrelated,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::modulo_one\n+)]\n+\n+fn main() {\n+    // Lint on signed integral numbers\n+    let a = -1;\n+    let mut b = 2;\n+    a % b;\n+    b % a;\n+    b %= a;\n+\n+    let a_i8: i8 = 1;\n+    let mut b_i8: i8 = 2;\n+    a_i8 % b_i8;\n+    b_i8 %= a_i8;\n+\n+    let a_i16: i16 = 1;\n+    let mut b_i16: i16 = 2;\n+    a_i16 % b_i16;\n+    b_i16 %= a_i16;\n+\n+    let a_i32: i32 = 1;\n+    let mut b_i32: i32 = 2;\n+    a_i32 % b_i32;\n+    b_i32 %= a_i32;\n+\n+    let a_i64: i64 = 1;\n+    let mut b_i64: i64 = 2;\n+    a_i64 % b_i64;\n+    b_i64 %= a_i64;\n+\n+    let a_i128: i128 = 1;\n+    let mut b_i128: i128 = 2;\n+    a_i128 % b_i128;\n+    b_i128 %= a_i128;\n+\n+    let a_isize: isize = 1;\n+    let mut b_isize: isize = 2;\n+    a_isize % b_isize;\n+    b_isize %= a_isize;\n+\n+    let a = 1;\n+    let mut b = 2;\n+    a % b;\n+    b %= a;\n+\n+    // No lint on unsigned integral value\n+    let a_u8: u8 = 17;\n+    let b_u8: u8 = 3;\n+    a_u8 % b_u8;\n+    let mut a_u8: u8 = 1;\n+    a_u8 %= 2;\n+\n+    let a_u16: u16 = 17;\n+    let b_u16: u16 = 3;\n+    a_u16 % b_u16;\n+    let mut a_u16: u16 = 1;\n+    a_u16 %= 2;\n+\n+    let a_u32: u32 = 17;\n+    let b_u32: u32 = 3;\n+    a_u32 % b_u32;\n+    let mut a_u32: u32 = 1;\n+    a_u32 %= 2;\n+\n+    let a_u64: u64 = 17;\n+    let b_u64: u64 = 3;\n+    a_u64 % b_u64;\n+    let mut a_u64: u64 = 1;\n+    a_u64 %= 2;\n+\n+    let a_u128: u128 = 17;\n+    let b_u128: u128 = 3;\n+    a_u128 % b_u128;\n+    let mut a_u128: u128 = 1;\n+    a_u128 %= 2;\n+\n+    let a_usize: usize = 17;\n+    let b_usize: usize = 3;\n+    a_usize % b_usize;\n+    let mut a_usize: usize = 1;\n+    a_usize %= 2;\n+}"}, {"sha": "e863b838699e9dc5a3a61a97490ddd162de16944", "filename": "tests/ui/modulo_arithmetic_integral.stderr", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/6223391170de2ed0756e50d122039d1805510f0f/tests%2Fui%2Fmodulo_arithmetic_integral.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6223391170de2ed0756e50d122039d1805510f0f/tests%2Fui%2Fmodulo_arithmetic_integral.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_integral.stderr?ref=6223391170de2ed0756e50d122039d1805510f0f", "patch": "@@ -0,0 +1,156 @@\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:15:5\n+   |\n+LL |     a % b;\n+   |     ^^^^^\n+   |\n+   = note: `-D clippy::modulo-arithmetic` implied by `-D warnings`\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:16:5\n+   |\n+LL |     b % a;\n+   |     ^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:17:5\n+   |\n+LL |     b %= a;\n+   |     ^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:21:5\n+   |\n+LL |     a_i8 % b_i8;\n+   |     ^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:22:5\n+   |\n+LL |     b_i8 %= a_i8;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:26:5\n+   |\n+LL |     a_i16 % b_i16;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:27:5\n+   |\n+LL |     b_i16 %= a_i16;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:31:5\n+   |\n+LL |     a_i32 % b_i32;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:32:5\n+   |\n+LL |     b_i32 %= a_i32;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:36:5\n+   |\n+LL |     a_i64 % b_i64;\n+   |     ^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:37:5\n+   |\n+LL |     b_i64 %= a_i64;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:41:5\n+   |\n+LL |     a_i128 % b_i128;\n+   |     ^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:42:5\n+   |\n+LL |     b_i128 %= a_i128;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:46:5\n+   |\n+LL |     a_isize % b_isize;\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:47:5\n+   |\n+LL |     b_isize %= a_isize;\n+   |     ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:51:5\n+   |\n+LL |     a % b;\n+   |     ^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on types that might have different signs\n+  --> $DIR/modulo_arithmetic_integral.rs:52:5\n+   |\n+LL |     b %= a;\n+   |     ^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: aborting due to 17 previous errors\n+"}, {"sha": "57a96692c0097fb26d32857cf53ba75a412ed72e", "filename": "tests/ui/modulo_arithmetic_integral_const.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6223391170de2ed0756e50d122039d1805510f0f/tests%2Fui%2Fmodulo_arithmetic_integral_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6223391170de2ed0756e50d122039d1805510f0f/tests%2Fui%2Fmodulo_arithmetic_integral_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_integral_const.rs?ref=6223391170de2ed0756e50d122039d1805510f0f", "patch": "@@ -0,0 +1,44 @@\n+#![warn(clippy::modulo_arithmetic)]\n+#![allow(\n+    unused,\n+    clippy::shadow_reuse,\n+    clippy::shadow_unrelated,\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::modulo_one\n+)]\n+\n+fn main() {\n+    // Lint when both sides are const and of the opposite sign\n+    -1 % 2;\n+    1 % -2;\n+    (1 - 2) % (1 + 2);\n+    (1 + 2) % (1 - 2);\n+    35 * (7 - 4 * 2) % (-500 * -600);\n+\n+    -1i8 % 2i8;\n+    1i8 % -2i8;\n+    -1i16 % 2i16;\n+    1i16 % -2i16;\n+    -1i32 % 2i32;\n+    1i32 % -2i32;\n+    -1i64 % 2i64;\n+    1i64 % -2i64;\n+    -1i128 % 2i128;\n+    1i128 % -2i128;\n+    -1isize % 2isize;\n+    1isize % -2isize;\n+\n+    // No lint when both sides are const and of the same sign\n+    1 % 2;\n+    -1 % -2;\n+    (1 + 2) % (-1 + 2);\n+    (-1 - 2) % (1 - 2);\n+\n+    1u8 % 2u8;\n+    1u16 % 2u16;\n+    1u32 % 2u32;\n+    1u64 % 2u64;\n+    1u128 % 2u128;\n+    1usize % 2usize;\n+}"}, {"sha": "de328bb75fe9160e7811f6f2f26a72e9333297c9", "filename": "tests/ui/modulo_arithmetic_integral_const.stderr", "status": "added", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/6223391170de2ed0756e50d122039d1805510f0f/tests%2Fui%2Fmodulo_arithmetic_integral_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6223391170de2ed0756e50d122039d1805510f0f/tests%2Fui%2Fmodulo_arithmetic_integral_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodulo_arithmetic_integral_const.stderr?ref=6223391170de2ed0756e50d122039d1805510f0f", "patch": "@@ -0,0 +1,156 @@\n+error: you are using modulo operator on constants with different signs: `-1 % 2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:13:5\n+   |\n+LL |     -1 % 2;\n+   |     ^^^^^^\n+   |\n+   = note: `-D clippy::modulo-arithmetic` implied by `-D warnings`\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `1 % -2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:14:5\n+   |\n+LL |     1 % -2;\n+   |     ^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-1 % 3`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:15:5\n+   |\n+LL |     (1 - 2) % (1 + 2);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `3 % -1`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:16:5\n+   |\n+LL |     (1 + 2) % (1 - 2);\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-35 % 300000`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:17:5\n+   |\n+LL |     35 * (7 - 4 * 2) % (-500 * -600);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-1 % 2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:19:5\n+   |\n+LL |     -1i8 % 2i8;\n+   |     ^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `1 % -2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:20:5\n+   |\n+LL |     1i8 % -2i8;\n+   |     ^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-1 % 2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:21:5\n+   |\n+LL |     -1i16 % 2i16;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `1 % -2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:22:5\n+   |\n+LL |     1i16 % -2i16;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-1 % 2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:23:5\n+   |\n+LL |     -1i32 % 2i32;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `1 % -2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:24:5\n+   |\n+LL |     1i32 % -2i32;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-1 % 2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:25:5\n+   |\n+LL |     -1i64 % 2i64;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `1 % -2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:26:5\n+   |\n+LL |     1i64 % -2i64;\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-1 % 2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:27:5\n+   |\n+LL |     -1i128 % 2i128;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `1 % -2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:28:5\n+   |\n+LL |     1i128 % -2i128;\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `-1 % 2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:29:5\n+   |\n+LL |     -1isize % 2isize;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: you are using modulo operator on constants with different signs: `1 % -2`\n+  --> $DIR/modulo_arithmetic_integral_const.rs:30:5\n+   |\n+LL |     1isize % -2isize;\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: double check for expected result especially when interoperating with different languages\n+   = note: or consider using `rem_euclid` or similar function\n+\n+error: aborting due to 17 previous errors\n+"}]}