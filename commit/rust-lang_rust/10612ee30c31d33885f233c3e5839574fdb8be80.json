{"sha": "10612ee30c31d33885f233c3e5839574fdb8be80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwNjEyZWUzMGMzMWQzMzg4NWYyMzNjM2U1ODM5NTc0ZmRiOGJlODA=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-19T18:37:00Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-19T18:38:28Z"}, "message": "Remove superfluous by-ref in option::get, option::get_default, option::expect\n\nSuperficial change, no review.", "tree": {"sha": "cc25d2361e27749bdc9cb17453cae82b9b9519a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc25d2361e27749bdc9cb17453cae82b9b9519a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10612ee30c31d33885f233c3e5839574fdb8be80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10612ee30c31d33885f233c3e5839574fdb8be80", "html_url": "https://github.com/rust-lang/rust/commit/10612ee30c31d33885f233c3e5839574fdb8be80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10612ee30c31d33885f233c3e5839574fdb8be80/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c97944fbf810720c2bcb0ccbe1c3149a3d9be4c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c97944fbf810720c2bcb0ccbe1c3149a3d9be4c0", "html_url": "https://github.com/rust-lang/rust/commit/c97944fbf810720c2bcb0ccbe1c3149a3d9be4c0"}], "stats": {"total": 70, "additions": 35, "deletions": 35}, "files": [{"sha": "a4968382cf478f4ef1f45b6596d0131e03c81643", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=10612ee30c31d33885f233c3e5839574fdb8be80", "patch": "@@ -296,7 +296,7 @@ fn check_variants_T<T: Copy>(\n }\n \n fn last_part(filename: ~str) -> ~str {\n-  let ix = option::get(&str::rfind_char(filename, '/'));\n+  let ix = option::get(str::rfind_char(filename, '/'));\n   str::slice(filename, ix + 1u, str::len(filename) - 3u)\n }\n "}, {"sha": "35399878e2614945816080d3ea6bd7d2b370f4d3", "filename": "src/libcore/dlist.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Flibcore%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Flibcore%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fdlist.rs?ref=10612ee30c31d33885f233c3e5839574fdb8be80", "patch": "@@ -208,7 +208,7 @@ impl<T> DList<T> {\n     fn push_head_n(data: T) -> DListNode<T> {\n         let mut nobe = self.new_link(move data);\n         self.add_head(nobe);\n-        option::get(&nobe)\n+        option::get(nobe)\n     }\n     /// Add data to the tail of the list. O(1).\n     fn push(data: T) {\n@@ -221,7 +221,7 @@ impl<T> DList<T> {\n     fn push_n(data: T) -> DListNode<T> {\n         let mut nobe = self.new_link(move data);\n         self.add_tail(nobe);\n-        option::get(&nobe)\n+        option::get(nobe)\n     }\n     /**\n      * Insert data into the middle of the list, left of the given node.\n@@ -245,7 +245,7 @@ impl<T> DList<T> {\n     fn insert_before_n(data: T, neighbour: DListNode<T>) -> DListNode<T> {\n         let mut nobe = self.new_link(move data);\n         self.insert_left(nobe, neighbour);\n-        option::get(&nobe)\n+        option::get(nobe)\n     }\n     /**\n      * Insert data into the middle of the list, right of the given node.\n@@ -269,7 +269,7 @@ impl<T> DList<T> {\n     fn insert_after_n(data: T, neighbour: DListNode<T>) -> DListNode<T> {\n         let mut nobe = self.new_link(move data);\n         self.insert_right(neighbour, nobe);\n-        option::get(&nobe)\n+        option::get(nobe)\n     }\n \n     /// Remove a node from the head of the list. O(1).\n@@ -385,17 +385,17 @@ impl<T> DList<T> {\n         let mut link = self.peek_n();\n         let mut rabbit = link;\n         while option::is_some(&link) {\n-            let nobe = option::get(&link);\n+            let nobe = option::get(link);\n             assert nobe.linked;\n             // check cycle\n             if option::is_some(&rabbit) {\n-                rabbit = option::get(&rabbit).next;\n+                rabbit = option::get(rabbit).next;\n             }\n             if option::is_some(&rabbit) {\n-                rabbit = option::get(&rabbit).next;\n+                rabbit = option::get(rabbit).next;\n             }\n             if option::is_some(&rabbit) {\n-                assert !box::ptr_eq(*option::get(&rabbit), *nobe);\n+                assert !box::ptr_eq(*option::get(rabbit), *nobe);\n             }\n             // advance\n             link = nobe.next_link();\n@@ -406,17 +406,17 @@ impl<T> DList<T> {\n         link = self.peek_tail_n();\n         rabbit = link;\n         while option::is_some(&link) {\n-            let nobe = option::get(&link);\n+            let nobe = option::get(link);\n             assert nobe.linked;\n             // check cycle\n             if option::is_some(&rabbit) {\n-                rabbit = option::get(&rabbit).prev;\n+                rabbit = option::get(rabbit).prev;\n             }\n             if option::is_some(&rabbit) {\n-                rabbit = option::get(&rabbit).prev;\n+                rabbit = option::get(rabbit).prev;\n             }\n             if option::is_some(&rabbit) {\n-                assert !box::ptr_eq(*option::get(&rabbit), *nobe);\n+                assert !box::ptr_eq(*option::get(rabbit), *nobe);\n             }\n             // advance\n             link = nobe.prev_link();"}, {"sha": "1b5f11569c37d825d292308ed4b9c75dd5241b16", "filename": "src/libcore/iter-trait/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Flibcore%2Fiter-trait%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter-trait%2Fdlist.rs?ref=10612ee30c31d33885f233c3e5839574fdb8be80", "patch": "@@ -11,7 +11,7 @@ pub type IMPL_T<A> = dlist::DList<A>;\n pub pure fn EACH<A>(self: &IMPL_T<A>, f: fn(v: &A) -> bool) {\n     let mut link = self.peek_n();\n     while option::is_some(&link) {\n-        let nobe = option::get(&link);\n+        let nobe = option::get(link);\n         assert nobe.linked;\n         if !f(&nobe.data) { break; }\n         // Check (weakly) that the user didn't do a remove."}, {"sha": "baabc35b428c2c1fc92fb6cb597438a1c0f5426b", "filename": "src/libcore/option.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=10612ee30c31d33885f233c3e5839574fdb8be80", "patch": "@@ -42,7 +42,7 @@ pub enum Option<T> {\n     Some(T),\n }\n \n-pub pure fn get<T: Copy>(opt: &Option<T>) -> T {\n+pub pure fn get<T: Copy>(opt: Option<T>) -> T {\n     /*!\n     Gets the value out of an option\n \n@@ -58,7 +58,7 @@ pub pure fn get<T: Copy>(opt: &Option<T>) -> T {\n     case explicitly.\n     */\n \n-    match *opt {\n+    match opt {\n       Some(copy x) => return x,\n       None => fail ~\"option::get none\"\n     }\n@@ -85,7 +85,7 @@ pub pure fn get_ref<T>(opt: &r/Option<T>) -> &r/T {\n     }\n }\n \n-pub pure fn expect<T: Copy>(opt: &Option<T>, reason: ~str) -> T {\n+pub pure fn expect<T: Copy>(opt: Option<T>, reason: ~str) -> T {\n     /*!\n      * Gets the value out of an option, printing a specified message on\n      * failure\n@@ -94,7 +94,7 @@ pub pure fn expect<T: Copy>(opt: &Option<T>, reason: ~str) -> T {\n      *\n      * Fails if the value equals `none`\n      */\n-    match *opt { Some(copy x) => x, None => fail reason }\n+    match opt { Some(copy x) => x, None => fail reason }\n }\n \n pub pure fn map<T, U>(opt: &Option<T>, f: fn(x: &T) -> U) -> Option<U> {\n@@ -167,10 +167,10 @@ pub pure fn is_some<T>(opt: &Option<T>) -> bool {\n     !is_none(opt)\n }\n \n-pub pure fn get_default<T: Copy>(opt: &Option<T>, def: T) -> T {\n+pub pure fn get_default<T: Copy>(opt: Option<T>, def: T) -> T {\n     //! Returns the contained value or a default\n \n-    match *opt { Some(copy x) => x, None => def }\n+    match opt { Some(copy x) => x, None => def }\n }\n \n pub pure fn map_default<T, U>(opt: &Option<T>, def: U,\n@@ -284,8 +284,8 @@ impl<T: Copy> Option<T> {\n     Instead, prefer to use pattern matching and handle the `None`\n     case explicitly.\n     */\n-    pure fn get() -> T { get(&self) }\n-    pure fn get_default(def: T) -> T { get_default(&self, def) }\n+    pure fn get() -> T { get(self) }\n+    pure fn get_default(def: T) -> T { get_default(self, def) }\n     /**\n      * Gets the value out of an option, printing a specified message on\n      * failure\n@@ -294,7 +294,7 @@ impl<T: Copy> Option<T> {\n      *\n      * Fails if the value equals `none`\n      */\n-    pure fn expect(reason: ~str) -> T { expect(&self, move reason) }\n+    pure fn expect(reason: ~str) -> T { expect(self, move reason) }\n     /// Applies a function zero or more times until the result is none.\n     pure fn while_some(blk: fn(v: T) -> Option<T>) { while_some(self, blk) }\n }"}, {"sha": "d201761d86be3a1fd13d1145265ab3a0d59ed702", "filename": "src/libcore/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=10612ee30c31d33885f233c3e5839574fdb8be80", "patch": "@@ -473,7 +473,7 @@ pub fn tmpdir() -> Path {\n     #[cfg(unix)]\n     #[allow(non_implicitly_copyable_typarams)]\n     fn lookup() -> Path {\n-        option::get_default(&getenv_nonempty(\"TMPDIR\"),\n+        option::get_default(getenv_nonempty(\"TMPDIR\"),\n                             Path(\"/tmp\"))\n     }\n "}, {"sha": "e49f1abd02b4d599cd04a72260df938aa705cc6f", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=10612ee30c31d33885f233c3e5839574fdb8be80", "patch": "@@ -723,7 +723,7 @@ mod tests {\n         let map = map::HashMap::<~str, ~str>();\n         assert (option::is_none(&map.find(key)));\n         map.insert(key, ~\"val\");\n-        assert (option::get(&map.find(key)) == ~\"val\");\n+        assert (option::get(map.find(key)) == ~\"val\");\n     }\n \n     #[test]"}, {"sha": "6de9ad977c9fbdde78ed08cde2fa117f32249c5d", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=10612ee30c31d33885f233c3e5839574fdb8be80", "patch": "@@ -353,7 +353,7 @@ fn enter_opt(bcx: block, m: &[@Match/&r], opt: &Opt, col: uint,\n         match p.node {\n             ast::pat_enum(_, subpats) => {\n                 if opt_eq(tcx, &variant_opt(tcx, p.id), opt) {\n-                    Some(option::get_default(&subpats,\n+                    Some(option::get_default(subpats,\n                                              vec::from_elem(variant_size,\n                                                             dummy)))\n                 } else {"}, {"sha": "fadde08b9f89a3ed384526e53f80e3cf6d004f2f", "filename": "src/rustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=10612ee30c31d33885f233c3e5839574fdb8be80", "patch": "@@ -299,7 +299,7 @@ fn trans_static_method_callee(bcx: block,\n \n fn method_from_methods(ms: ~[@ast::method], name: ast::ident)\n     -> ast::def_id {\n-  local_def(option::get(&vec::find(ms, |m| m.ident == name)).id)\n+  local_def(option::get(vec::find(ms, |m| m.ident == name)).id)\n }\n \n fn method_with_name(ccx: @crate_ctxt, impl_id: ast::def_id,"}, {"sha": "aadd6fc7957ab2c2b0cfaa833e0f907abc64b65a", "filename": "src/rustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=10612ee30c31d33885f233c3e5839574fdb8be80", "patch": "@@ -113,7 +113,7 @@ fn monomorphic_fn(ccx: @crate_ctxt,\n \n     ccx.stats.n_monos += 1;\n \n-    let depth = option::get_default(&ccx.monomorphizing.find(fn_id), 0u);\n+    let depth = option::get_default(ccx.monomorphizing.find(fn_id), 0u);\n     // Random cut-off -- code that needs to instantiate the same function\n     // recursively more than ten times can probably safely be assumed to be\n     // causing an infinite expansion.\n@@ -158,7 +158,7 @@ fn monomorphic_fn(ccx: @crate_ctxt,\n       }\n       ast_map::node_variant(v, enum_item, _) => {\n         let tvs = ty::enum_variants(ccx.tcx, local_def(enum_item.id));\n-        let this_tv = option::get(&vec::find(*tvs, |tv| {\n+        let this_tv = option::get(vec::find(*tvs, |tv| {\n             tv.id.node == fn_id.node}));\n         let d = mk_lldecl();\n         set_inline_hint(d);"}, {"sha": "c52b653d536c1408e7d9da6b7944415f1eeb75c1", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=10612ee30c31d33885f233c3e5839574fdb8be80", "patch": "@@ -57,7 +57,7 @@ impl reflector {\n \n     fn visit(ty_name: ~str, args: ~[ValueRef]) {\n         let tcx = self.bcx.tcx();\n-        let mth_idx = option::get(&ty::method_idx(\n+        let mth_idx = option::get(ty::method_idx(\n             tcx.sess.ident_of(~\"visit_\" + ty_name),\n             *self.visitor_methods));\n         let mth_ty = ty::mk_fn(tcx, self.visitor_methods[mth_idx].fty);"}, {"sha": "0748f603580b57d8cb2b0a4e56505ec82c8905f4", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=10612ee30c31d33885f233c3e5839574fdb8be80", "patch": "@@ -52,7 +52,7 @@ fn fold_crate(\n     {\n         topmod: doc::ModDoc_({\n             item: {\n-                name: option::get_default(&attrs.name, doc.topmod.name()),\n+                name: option::get_default(attrs.name, doc.topmod.name()),\n                 .. doc.topmod.item\n             },\n             .. *doc.topmod\n@@ -151,7 +151,7 @@ fn fold_enum(\n                     node: ast::item_enum(enum_definition, _), _\n                   }, _) => {\n                     let ast_variant = option::get(\n-                        &vec::find(enum_definition.variants, |v| {\n+                        vec::find(enum_definition.variants, |v| {\n                             to_str(v.node.name) == variant.name\n                         }));\n "}, {"sha": "2d5bf5fc3c6935fa8eeb9b00cf29155502119c1a", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=10612ee30c31d33885f233c3e5839574fdb8be80", "patch": "@@ -377,7 +377,7 @@ impl IndexEntry : cmp::Eq {\n \n impl Doc {\n     fn CrateDoc() -> CrateDoc {\n-        option::get(&vec::foldl(None, self.pages, |_m, page| {\n+        option::get(vec::foldl(None, self.pages, |_m, page| {\n             match *page {\n               doc::CratePage(doc) => Some(doc),\n               _ => None"}, {"sha": "0baabecb0ab9179bb09d5efffbc7902a6a7f1b87", "filename": "src/test/run-pass/test-ignore-cfg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Ftest%2Frun-pass%2Ftest-ignore-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10612ee30c31d33885f233c3e5839574fdb8be80/src%2Ftest%2Frun-pass%2Ftest-ignore-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-ignore-cfg.rs?ref=10612ee30c31d33885f233c3e5839574fdb8be80", "patch": "@@ -20,10 +20,10 @@ fn checktests() {\n     let tests = __test::tests();\n \n     let shouldignore = option::get(\n-        &vec::find(tests, |t| t.name == ~\"shouldignore\" ));\n+        vec::find(tests, |t| t.name == ~\"shouldignore\" ));\n     assert shouldignore.ignore == true;\n \n     let shouldnotignore = option::get(\n-        &vec::find(tests, |t| t.name == ~\"shouldnotignore\" ));\n+        vec::find(tests, |t| t.name == ~\"shouldnotignore\" ));\n     assert shouldnotignore.ignore == false;\n }\n\\ No newline at end of file"}]}