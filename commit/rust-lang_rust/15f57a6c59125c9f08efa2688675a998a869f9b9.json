{"sha": "15f57a6c59125c9f08efa2688675a998a869f9b9", "node_id": "C_kwDOAAsO6NoAKDE1ZjU3YTZjNTkxMjVjOWYwOGVmYTI2ODg2NzVhOTk4YTg2OWY5Yjk", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:25:42Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2021-12-30T18:25:42Z"}, "message": "Move Result::expect and Result::unwrap", "tree": {"sha": "175f9c663f1c9abd1a87ebf3111fb3e93a319400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/175f9c663f1c9abd1a87ebf3111fb3e93a319400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15f57a6c59125c9f08efa2688675a998a869f9b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHN+aYACgkQ+boUO5X/\nbYJuxg//eOdwjrEZVo6s/kCP3Rw2QWQdMno8yWWDFHBL+FpsZpudoY8FCMS6KUWb\norTJ92M2MwAQH1ZZMV3OEivSHOsXDhAcUsLyq5t6it4nBpAw9r/asch12vBavEm+\nKnfSwnau+o2e/ONDhNc13/dwPd1ulgwD0MebyTaCsgIZrfFYeJr2MfYz4041Hkmj\nLHaPwR7DjKOL2GyCfcQrzUECPsJlPWQmucdD7EFOSC2ykvpe/c7Tctav+JjiotPx\npLZD5fzZilH8z1ZvX1MIVsZbqWzS46ZKP1vrvvIeEoWV3o3mKV2xsa4i69ApamIt\nLGMtvKLfl06jldcFlAyMeDUB5Hi7As1TYOlCFqSy0agFa7bEVBKlhLsHZvCzPYhz\ncV+sHcxpD07qdA37HBDihEvC7HJVz2EOdIqEAHTVNR/qO2JGeyn2tYNR5XIfx/6/\nQgERy90HV9lal0CssKlwpCaXqW72UKloQlwuIotFpnFXWI/MaQRszz54BL1wFFJ2\n5u0EyggdmW651/J/77FMcgOqeofqDplmTQT4tL0idCMglHHa6ntNaRTw4xVIlgnT\nxu5G9y8Osi+nC9FBYG1vNlczcvYCU3tXoNv62utUPOyp+t/3vP3kUnSz6rxoNJBA\n7atZrqXrYAtIxJOsrCeOYdqT3PqacDXGHI6Eo/BMM3M6ufgAZe0=\n=zqiY\n-----END PGP SIGNATURE-----", "payload": "tree 175f9c663f1c9abd1a87ebf3111fb3e93a319400\nparent 5aa8f91ff0d376eb25ea52a10d7c4cdadf4407ac\nauthor David Tolnay <dtolnay@gmail.com> 1640888742 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1640888742 -0800\n\nMove Result::expect and Result::unwrap\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15f57a6c59125c9f08efa2688675a998a869f9b9", "html_url": "https://github.com/rust-lang/rust/commit/15f57a6c59125c9f08efa2688675a998a869f9b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15f57a6c59125c9f08efa2688675a998a869f9b9/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5aa8f91ff0d376eb25ea52a10d7c4cdadf4407ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/5aa8f91ff0d376eb25ea52a10d7c4cdadf4407ac", "html_url": "https://github.com/rust-lang/rust/commit/5aa8f91ff0d376eb25ea52a10d7c4cdadf4407ac"}], "stats": {"total": 144, "additions": 76, "deletions": 68}, "files": [{"sha": "7265f03adbae20a91f5987fcd684d3e612ed1eca", "filename": "library/core/src/result.rs", "status": "modified", "additions": 76, "deletions": 68, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/15f57a6c59125c9f08efa2688675a998a869f9b9/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f57a6c59125c9f08efa2688675a998a869f9b9/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=15f57a6c59125c9f08efa2688675a998a869f9b9", "patch": "@@ -1001,6 +1001,82 @@ impl<T, E> Result<T, E> {\n         IterMut { inner: self.as_mut().ok() }\n     }\n \n+    /////////////////////////////////////////////////////////////////////////\n+    // Extract a value\n+    /////////////////////////////////////////////////////////////////////////\n+\n+    /// Returns the contained [`Ok`] value, consuming the `self` value.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the value is an [`Err`], with a panic message including the\n+    /// passed message, and the content of the [`Err`].\n+    ///\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```should_panic\n+    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n+    /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n+    /// ```\n+    #[inline]\n+    #[track_caller]\n+    #[stable(feature = \"result_expect\", since = \"1.4.0\")]\n+    pub fn expect(self, msg: &str) -> T\n+    where\n+        E: fmt::Debug,\n+    {\n+        match self {\n+            Ok(t) => t,\n+            Err(e) => unwrap_failed(msg, &e),\n+        }\n+    }\n+\n+    /// Returns the contained [`Ok`] value, consuming the `self` value.\n+    ///\n+    /// Because this function may panic, its use is generally discouraged.\n+    /// Instead, prefer to use pattern matching and handle the [`Err`]\n+    /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n+    /// [`unwrap_or_default`].\n+    ///\n+    /// [`unwrap_or`]: Result::unwrap_or\n+    /// [`unwrap_or_else`]: Result::unwrap_or_else\n+    /// [`unwrap_or_default`]: Result::unwrap_or_default\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if the value is an [`Err`], with a panic message provided by the\n+    /// [`Err`]'s value.\n+    ///\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// let x: Result<u32, &str> = Ok(2);\n+    /// assert_eq!(x.unwrap(), 2);\n+    /// ```\n+    ///\n+    /// ```should_panic\n+    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n+    /// x.unwrap(); // panics with `emergency failure`\n+    /// ```\n+    #[inline]\n+    #[track_caller]\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    pub fn unwrap(self) -> T\n+    where\n+        E: fmt::Debug,\n+    {\n+        match self {\n+            Ok(t) => t,\n+            Err(e) => unwrap_failed(\"called `Result::unwrap()` on an `Err` value\", &e),\n+        }\n+    }\n+\n     ////////////////////////////////////////////////////////////////////////\n     // Boolean operations on the values, eager and lazy\n     /////////////////////////////////////////////////////////////////////////\n@@ -1326,74 +1402,6 @@ impl<T: Clone, E> Result<&mut T, E> {\n     }\n }\n \n-impl<T, E: fmt::Debug> Result<T, E> {\n-    /// Returns the contained [`Ok`] value, consuming the `self` value.\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if the value is an [`Err`], with a panic message including the\n-    /// passed message, and the content of the [`Err`].\n-    ///\n-    ///\n-    /// # Examples\n-    ///\n-    /// Basic usage:\n-    ///\n-    /// ```should_panic\n-    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n-    /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n-    /// ```\n-    #[inline]\n-    #[track_caller]\n-    #[stable(feature = \"result_expect\", since = \"1.4.0\")]\n-    pub fn expect(self, msg: &str) -> T {\n-        match self {\n-            Ok(t) => t,\n-            Err(e) => unwrap_failed(msg, &e),\n-        }\n-    }\n-\n-    /// Returns the contained [`Ok`] value, consuming the `self` value.\n-    ///\n-    /// Because this function may panic, its use is generally discouraged.\n-    /// Instead, prefer to use pattern matching and handle the [`Err`]\n-    /// case explicitly, or call [`unwrap_or`], [`unwrap_or_else`], or\n-    /// [`unwrap_or_default`].\n-    ///\n-    /// [`unwrap_or`]: Result::unwrap_or\n-    /// [`unwrap_or_else`]: Result::unwrap_or_else\n-    /// [`unwrap_or_default`]: Result::unwrap_or_default\n-    ///\n-    /// # Panics\n-    ///\n-    /// Panics if the value is an [`Err`], with a panic message provided by the\n-    /// [`Err`]'s value.\n-    ///\n-    ///\n-    /// # Examples\n-    ///\n-    /// Basic usage:\n-    ///\n-    /// ```\n-    /// let x: Result<u32, &str> = Ok(2);\n-    /// assert_eq!(x.unwrap(), 2);\n-    /// ```\n-    ///\n-    /// ```should_panic\n-    /// let x: Result<u32, &str> = Err(\"emergency failure\");\n-    /// x.unwrap(); // panics with `emergency failure`\n-    /// ```\n-    #[inline]\n-    #[track_caller]\n-    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn unwrap(self) -> T {\n-        match self {\n-            Ok(t) => t,\n-            Err(e) => unwrap_failed(\"called `Result::unwrap()` on an `Err` value\", &e),\n-        }\n-    }\n-}\n-\n impl<T: fmt::Debug, E> Result<T, E> {\n     /// Returns the contained [`Err`] value, consuming the `self` value.\n     ///"}]}