{"sha": "fba49a7ee2da30a34a1cb05efa249e4267879d7e", "node_id": "C_kwDOAAsO6NoAKGZiYTQ5YTdlZTJkYTMwYTM0YTFjYjA1ZWZhMjQ5ZTQyNjc4NzlkN2U", "commit": {"author": {"name": "fee1-dead", "email": "ent3rm4n@gmail.com", "date": "2023-04-16T11:36:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-16T11:36:02Z"}, "message": "Rollup merge of #110398 - matthiaskrgr:clippy_match, r=Nilstrieb,fee1-dead\n\nuse matches! macro in more places\n\nr? `@Nilstrieb`", "tree": {"sha": "032e996eba0783cea9763d3002a7bb461cc6a9dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/032e996eba0783cea9763d3002a7bb461cc6a9dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fba49a7ee2da30a34a1cb05efa249e4267879d7e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkO92iCRBK7hj4Ov3rIwAATwMIACaw0utzVbsHuYf24svseEaj\niY/8+AdTQ2DlG3toAx6x0l6PJ2SJ9oPH2ozGitcde6yXw81WFpy9f6XPbLGp1EB2\nCHOzxlyoahn7o4z/VjCPxx+z1GKEADFSvjkrRpya7OYtuiqnpQTt/GQlioQ8Lmtt\nnO+FiEI4xyeXi19NA5d+f4zNvMQxz08ooXXOGS7cZ7Qkc7A6UMJTz16U8IO0IwMc\nuq2f3muZNYNwNqW184K+8jeEX8dWX2WwbvwXuJLZeVC+FCkSZ4Ljsm2LCYsD3+bh\n1cZ9QtXgwCGW8nz3GN4T8e1Vo2Z9rbrG1JK5AwNsLfbFUeIU4L2lhwni3nKqlSY=\n=Yffi\n-----END PGP SIGNATURE-----\n", "payload": "tree 032e996eba0783cea9763d3002a7bb461cc6a9dd\nparent 508d661105507f40aebf957aa5bdc59095f8f8f4\nparent bcc15bba953dcb749d88950539b5e206a8bd86bb\nauthor fee1-dead <ent3rm4n@gmail.com> 1681644962 +0800\ncommitter GitHub <noreply@github.com> 1681644962 +0800\n\nRollup merge of #110398 - matthiaskrgr:clippy_match, r=Nilstrieb,fee1-dead\n\nuse matches! macro in more places\n\nr? `@Nilstrieb`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fba49a7ee2da30a34a1cb05efa249e4267879d7e", "html_url": "https://github.com/rust-lang/rust/commit/fba49a7ee2da30a34a1cb05efa249e4267879d7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fba49a7ee2da30a34a1cb05efa249e4267879d7e/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "508d661105507f40aebf957aa5bdc59095f8f8f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/508d661105507f40aebf957aa5bdc59095f8f8f4", "html_url": "https://github.com/rust-lang/rust/commit/508d661105507f40aebf957aa5bdc59095f8f8f4"}, {"sha": "bcc15bba953dcb749d88950539b5e206a8bd86bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc15bba953dcb749d88950539b5e206a8bd86bb", "html_url": "https://github.com/rust-lang/rust/commit/bcc15bba953dcb749d88950539b5e206a8bd86bb"}], "stats": {"total": 127, "additions": 52, "deletions": 75}, "files": [{"sha": "ab0409efb3b296eff4ab293f6163a94ffab68a50", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=fba49a7ee2da30a34a1cb05efa249e4267879d7e", "patch": "@@ -1298,17 +1298,17 @@ impl Expr {\n \n     /// To a first-order approximation, is this a pattern?\n     pub fn is_approximately_pattern(&self) -> bool {\n-        match &self.peel_parens().kind {\n+        matches!(\n+            &self.peel_parens().kind,\n             ExprKind::Array(_)\n-            | ExprKind::Call(_, _)\n-            | ExprKind::Tup(_)\n-            | ExprKind::Lit(_)\n-            | ExprKind::Range(_, _, _)\n-            | ExprKind::Underscore\n-            | ExprKind::Path(_, _)\n-            | ExprKind::Struct(_) => true,\n-            _ => false,\n-        }\n+                | ExprKind::Call(_, _)\n+                | ExprKind::Tup(_)\n+                | ExprKind::Lit(_)\n+                | ExprKind::Range(_, _, _)\n+                | ExprKind::Underscore\n+                | ExprKind::Path(_, _)\n+                | ExprKind::Struct(_)\n+        )\n     }\n }\n "}, {"sha": "2af47e11637c588a47dc22ab9c8a061cd3c39432", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=fba49a7ee2da30a34a1cb05efa249e4267879d7e", "patch": "@@ -332,10 +332,7 @@ enum FnDeclKind {\n \n impl FnDeclKind {\n     fn param_impl_trait_allowed(&self) -> bool {\n-        match self {\n-            FnDeclKind::Fn | FnDeclKind::Inherent | FnDeclKind::Impl | FnDeclKind::Trait => true,\n-            _ => false,\n-        }\n+        matches!(self, FnDeclKind::Fn | FnDeclKind::Inherent | FnDeclKind::Impl | FnDeclKind::Trait)\n     }\n \n     fn return_impl_trait_allowed(&self, tcx: TyCtxt<'_>) -> bool {"}, {"sha": "30bf8c2ad104bb03e6d01b019d83bf7b27eb38f3", "filename": "compiler/rustc_hir/src/def.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_hir%2Fsrc%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdef.rs?ref=fba49a7ee2da30a34a1cb05efa249e4267879d7e", "patch": "@@ -234,10 +234,7 @@ impl DefKind {\n \n     #[inline]\n     pub fn is_fn_like(self) -> bool {\n-        match self {\n-            DefKind::Fn | DefKind::AssocFn | DefKind::Closure | DefKind::Generator => true,\n-            _ => false,\n-        }\n+        matches!(self, DefKind::Fn | DefKind::AssocFn | DefKind::Closure | DefKind::Generator)\n     }\n \n     /// Whether `query get_codegen_attrs` should be used with this definition."}, {"sha": "7c07a1ebaec079e58eba9133906b1197ecb44896", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=fba49a7ee2da30a34a1cb05efa249e4267879d7e", "patch": "@@ -1457,10 +1457,7 @@ fn compute_sig_of_foreign_fn_decl<'tcx>(\n }\n \n fn is_foreign_item(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n-    match tcx.hir().get_by_def_id(def_id) {\n-        Node::ForeignItem(..) => true,\n-        _ => false,\n-    }\n+    matches!(tcx.hir().get_by_def_id(def_id), Node::ForeignItem(..))\n }\n \n fn generator_kind(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Option<hir::GeneratorKind> {"}, {"sha": "ffc73d64fc04b26b47e8f417b12ce4ec11114063", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=fba49a7ee2da30a34a1cb05efa249e4267879d7e", "patch": "@@ -1735,10 +1735,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             } else {\n                 self.check_expr_has_type_or_error(base_expr, adt_ty, |_| {\n                     let base_ty = self.typeck_results.borrow().expr_ty(*base_expr);\n-                    let same_adt = match (adt_ty.kind(), base_ty.kind()) {\n-                        (ty::Adt(adt, _), ty::Adt(base_adt, _)) if adt == base_adt => true,\n-                        _ => false,\n-                    };\n+                    let same_adt = matches!((adt_ty.kind(), base_ty.kind()),\n+                        (ty::Adt(adt, _), ty::Adt(base_adt, _)) if adt == base_adt);\n                     if self.tcx.sess.is_nightly_build() && same_adt {\n                         feature_err(\n                             &self.tcx.sess.parse_sess,"}, {"sha": "27c3b796d14e53947450e6697ce69eb6ab25febe", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=fba49a7ee2da30a34a1cb05efa249e4267879d7e", "patch": "@@ -312,13 +312,10 @@ pub fn suggest_new_region_bound(\n                             Applicability::MaybeIncorrect,\n                         );\n                     }\n-                } else if opaque.bounds.iter().any(|arg| match arg {\n-                    GenericBound::Outlives(Lifetime { ident, .. })\n-                        if ident.name.to_string() == lifetime_name =>\n-                    {\n-                        true\n-                    }\n-                    _ => false,\n+                } else if opaque.bounds.iter().any(|arg| {\n+                    matches!(arg,\n+                        GenericBound::Outlives(Lifetime { ident, .. })\n+                        if ident.name.to_string() == lifetime_name )\n                 }) {\n                 } else {\n                     // get a lifetime name of existing named lifetimes if any"}, {"sha": "f263a0773e4e17b55a06d878ed2b54efb674bd53", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=fba49a7ee2da30a34a1cb05efa249e4267879d7e", "patch": "@@ -1577,10 +1577,10 @@ impl<'tcx> InferCtxt<'tcx> {\n             (TyOrConstInferVar::Ty(ty_var), Ok(inner)) => {\n                 use self::type_variable::TypeVariableValue;\n \n-                match inner.try_type_variables_probe_ref(ty_var) {\n-                    Some(TypeVariableValue::Unknown { .. }) => true,\n-                    _ => false,\n-                }\n+                matches!(\n+                    inner.try_type_variables_probe_ref(ty_var),\n+                    Some(TypeVariableValue::Unknown { .. })\n+                )\n             }\n             _ => false,\n         };"}, {"sha": "9dd4f0a8e4cece6daffbc17f017f659f42d642d7", "filename": "compiler/rustc_infer/src/traits/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fmod.rs?ref=fba49a7ee2da30a34a1cb05efa249e4267879d7e", "patch": "@@ -89,10 +89,10 @@ impl<'tcx> PredicateObligation<'tcx> {\n impl<'tcx> TraitObligation<'tcx> {\n     /// Returns `true` if the trait predicate is considered `const` in its ParamEnv.\n     pub fn is_const(&self) -> bool {\n-        match (self.predicate.skip_binder().constness, self.param_env.constness()) {\n-            (ty::BoundConstness::ConstIfConst, hir::Constness::Const) => true,\n-            _ => false,\n-        }\n+        matches!(\n+            (self.predicate.skip_binder().constness, self.param_env.constness()),\n+            (ty::BoundConstness::ConstIfConst, hir::Constness::Const)\n+        )\n     }\n \n     pub fn derived_cause("}, {"sha": "dcdeaf008d671d3cea28dabf1a184771f6fcc3bf", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=fba49a7ee2da30a34a1cb05efa249e4267879d7e", "patch": "@@ -384,13 +384,8 @@ impl<'a> IntoDiagnostic<'a> for NonExhaustivePatternsTypeNotEmpty<'_, '_, '_> {\n             diag.span_note(span, fluent::mir_build_def_note);\n         }\n \n-        let is_variant_list_non_exhaustive = match self.ty.kind() {\n-            ty::Adt(def, _) if def.is_variant_list_non_exhaustive() && !def.did().is_local() => {\n-                true\n-            }\n-            _ => false,\n-        };\n-\n+        let is_variant_list_non_exhaustive = matches!(self.ty.kind(),\n+            ty::Adt(def, _) if def.is_variant_list_non_exhaustive() && !def.did().is_local());\n         if is_variant_list_non_exhaustive {\n             diag.note(fluent::mir_build_non_exhaustive_type_note);\n         } else {"}, {"sha": "0ef48c42f875761853c2a337f99a9b81959d15b5", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=fba49a7ee2da30a34a1cb05efa249e4267879d7e", "patch": "@@ -671,10 +671,8 @@ fn non_exhaustive_match<'p, 'tcx>(\n         };\n     };\n \n-    let is_variant_list_non_exhaustive = match scrut_ty.kind() {\n-        ty::Adt(def, _) if def.is_variant_list_non_exhaustive() && !def.did().is_local() => true,\n-        _ => false,\n-    };\n+    let is_variant_list_non_exhaustive = matches!(scrut_ty.kind(),\n+        ty::Adt(def, _) if def.is_variant_list_non_exhaustive() && !def.did().is_local());\n \n     adt_defined_here(cx, &mut err, scrut_ty, &witnesses);\n     err.note(&format!("}, {"sha": "f5fef6ad019ebd39e76441ea8b28e2d32dba0c97", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=fba49a7ee2da30a34a1cb05efa249e4267879d7e", "patch": "@@ -2577,14 +2577,12 @@ impl<'a> Parser<'a> {\n     }\n \n     fn recover_self_param(&mut self) -> bool {\n-        match self\n-            .parse_outer_attributes()\n-            .and_then(|_| self.parse_self_param())\n-            .map_err(|e| e.cancel())\n-        {\n-            Ok(Some(_)) => true,\n-            _ => false,\n-        }\n+        matches!(\n+            self.parse_outer_attributes()\n+                .and_then(|_| self.parse_self_param())\n+                .map_err(|e| e.cancel()),\n+            Ok(Some(_))\n+        )\n     }\n }\n "}, {"sha": "adb0d372a40dffe13c9af5c8e40a39a0f6678d9d", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=fba49a7ee2da30a34a1cb05efa249e4267879d7e", "patch": "@@ -20,12 +20,10 @@ impl<'a> Parser<'a> {\n     pub fn nonterminal_may_begin_with(kind: NonterminalKind, token: &Token) -> bool {\n         /// Checks whether the non-terminal may contain a single (non-keyword) identifier.\n         fn may_be_ident(nt: &token::Nonterminal) -> bool {\n-            match *nt {\n-                token::NtItem(_) | token::NtBlock(_) | token::NtVis(_) | token::NtLifetime(_) => {\n-                    false\n-                }\n-                _ => true,\n-            }\n+            !matches!(\n+                *nt,\n+                token::NtItem(_) | token::NtBlock(_) | token::NtVis(_) | token::NtLifetime(_)\n+            )\n         }\n \n         match kind {"}, {"sha": "c5ec19732be0d959a5528829e7ed356586368592", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fba49a7ee2da30a34a1cb05efa249e4267879d7e/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=fba49a7ee2da30a34a1cb05efa249e4267879d7e", "patch": "@@ -663,15 +663,17 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         Ident::with_dummy_span(name),\n                         Namespace::ValueNS,\n                         &parent_scope,\n-                        &|res: Res| match res {\n-                            Res::Def(\n-                                DefKind::Ctor(CtorOf::Variant, CtorKind::Const)\n-                                | DefKind::Ctor(CtorOf::Struct, CtorKind::Const)\n-                                | DefKind::Const\n-                                | DefKind::AssocConst,\n-                                _,\n-                            ) => true,\n-                            _ => false,\n+                        &|res: Res| {\n+                            matches!(\n+                                res,\n+                                Res::Def(\n+                                    DefKind::Ctor(CtorOf::Variant, CtorKind::Const)\n+                                        | DefKind::Ctor(CtorOf::Struct, CtorKind::Const)\n+                                        | DefKind::Const\n+                                        | DefKind::AssocConst,\n+                                    _,\n+                                )\n+                            )\n                         },\n                     );\n "}]}