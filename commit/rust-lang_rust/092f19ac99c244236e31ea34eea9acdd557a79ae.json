{"sha": "092f19ac99c244236e31ea34eea9acdd557a79ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MmYxOWFjOTljMjQ0MjM2ZTMxZWEzNGVlYTlhY2RkNTU3YTc5YWU=", "commit": {"author": {"name": "Tim Neumann", "email": "mail@timnn.me", "date": "2017-04-12T12:45:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-12T12:45:46Z"}, "message": "Rollup merge of #41206 - eddyb:avoid-illegal-vectors, r=nagisa\n\nFix pairs of doubles using an illegal <8 x i8> vector.\n\nAccidentally introduced in #40658 and discovered in some Objective-C bindings (returning `NSPoint`).\nTurns out LLVM will widen element types of illegal vectors instead of increasing element count, i.e. it will zero-extend `<8 x i8>` to `<8 x i16>`, interleaving the bytes, instead of using the first 8 of `<16 x i8>`.", "tree": {"sha": "f5b5291cbb0b932606b14b898cb3f5d6d1e07516", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5b5291cbb0b932606b14b898cb3f5d6d1e07516"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/092f19ac99c244236e31ea34eea9acdd557a79ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/092f19ac99c244236e31ea34eea9acdd557a79ae", "html_url": "https://github.com/rust-lang/rust/commit/092f19ac99c244236e31ea34eea9acdd557a79ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/092f19ac99c244236e31ea34eea9acdd557a79ae/comments", "author": {"login": "TimNN", "id": 1178249, "node_id": "MDQ6VXNlcjExNzgyNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/1178249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimNN", "html_url": "https://github.com/TimNN", "followers_url": "https://api.github.com/users/TimNN/followers", "following_url": "https://api.github.com/users/TimNN/following{/other_user}", "gists_url": "https://api.github.com/users/TimNN/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimNN/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimNN/subscriptions", "organizations_url": "https://api.github.com/users/TimNN/orgs", "repos_url": "https://api.github.com/users/TimNN/repos", "events_url": "https://api.github.com/users/TimNN/events{/privacy}", "received_events_url": "https://api.github.com/users/TimNN/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afb300d831408d9ba8024ee25ab0ccb5656d94a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/afb300d831408d9ba8024ee25ab0ccb5656d94a4", "html_url": "https://github.com/rust-lang/rust/commit/afb300d831408d9ba8024ee25ab0ccb5656d94a4"}, {"sha": "0303a3364b68e412539634617c734192760a7df4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0303a3364b68e412539634617c734192760a7df4", "html_url": "https://github.com/rust-lang/rust/commit/0303a3364b68e412539634617c734192760a7df4"}], "stats": {"total": 49, "additions": 40, "deletions": 9}, "files": [{"sha": "c4fdc46d030c9e163d2b0a9d8d2f4637f8f5ef58", "filename": "src/librustc_trans/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092f19ac99c244236e31ea34eea9acdd557a79ae/src%2Flibrustc_trans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092f19ac99c244236e31ea34eea9acdd557a79ae/src%2Flibrustc_trans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fabi.rs?ref=092f19ac99c244236e31ea34eea9acdd557a79ae", "patch": "@@ -283,7 +283,7 @@ impl<'tcx> LayoutExt<'tcx> for TyLayout<'tcx> {\n \n             Layout::Vector { .. } => {\n                 Some(Reg {\n-                    kind: RegKind::Integer,\n+                    kind: RegKind::Vector,\n                     size: self.size(ccx)\n                 })\n             }"}, {"sha": "2daebf5cf3d6b191efeca18907acf854eb359aff", "filename": "src/librustc_trans/cabi_x86_64.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/092f19ac99c244236e31ea34eea9acdd557a79ae/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092f19ac99c244236e31ea34eea9acdd557a79ae/src%2Flibrustc_trans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcabi_x86_64.rs?ref=092f19ac99c244236e31ea34eea9acdd557a79ae", "patch": "@@ -173,14 +173,15 @@ fn reg_component(cls: &[Class], i: &mut usize, size: u64) -> Option<Reg> {\n         Class::Sse => {\n             let vec_len = 1 + cls[*i+1..].iter().take_while(|&&c| c == Class::SseUp).count();\n             *i += vec_len;\n-            Some(match size {\n-                4 => Reg::f32(),\n-                8 => Reg::f64(),\n-                _ => {\n-                    Reg {\n-                        kind: RegKind::Vector,\n-                        size: Size::from_bytes(vec_len as u64 * 8)\n-                    }\n+            Some(if vec_len == 1 {\n+                match size {\n+                    4 => Reg::f32(),\n+                    _ => Reg::f64()\n+                }\n+            } else {\n+                Reg {\n+                    kind: RegKind::Vector,\n+                    size: Size::from_bytes(vec_len as u64 * 8)\n                 }\n             })\n         }"}, {"sha": "4e09928edc6d1c7972fd6629f69b1a4fd982b159", "filename": "src/test/run-make/extern-fn-struct-passing-abi/test.c", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/092f19ac99c244236e31ea34eea9acdd557a79ae/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.c", "raw_url": "https://github.com/rust-lang/rust/raw/092f19ac99c244236e31ea34eea9acdd557a79ae/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.c?ref=092f19ac99c244236e31ea34eea9acdd557a79ae", "patch": "@@ -38,6 +38,11 @@ struct Huge {\n     int32_t e;\n };\n \n+struct FloatPoint {\n+    double x;\n+    double y;\n+};\n+\n // System V x86_64 ABI:\n // a, b, c, d, e should be in registers\n // s should be byval pointer\n@@ -258,3 +263,17 @@ struct Huge huge_struct(struct Huge s) {\n \n     return s;\n }\n+\n+// System V x86_64 ABI:\n+// p should be in registers\n+// return should be in registers\n+//\n+// Win64 ABI:\n+// p should be a byval pointer\n+// return should be in a hidden sret pointer\n+struct FloatPoint float_point(struct FloatPoint p) {\n+    assert(p.x == 5.);\n+    assert(p.y == -3.);\n+\n+    return p;\n+}"}, {"sha": "ff845a644b11441beedabbac2666a078d891385b", "filename": "src/test/run-make/extern-fn-struct-passing-abi/test.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/092f19ac99c244236e31ea34eea9acdd557a79ae/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092f19ac99c244236e31ea34eea9acdd557a79ae/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-struct-passing-abi%2Ftest.rs?ref=092f19ac99c244236e31ea34eea9acdd557a79ae", "patch": "@@ -46,6 +46,13 @@ struct Huge {\n     e: i32\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq)]\n+#[repr(C)]\n+struct FloatPoint {\n+    x: f64,\n+    y: f64\n+}\n+\n #[link(name = \"test\", kind = \"static\")]\n extern {\n     fn byval_rect(a: i32, b: i32, c: i32, d: i32, e: i32, s: Rect);\n@@ -72,13 +79,16 @@ extern {\n     fn sret_split_struct(a: i32, b: i32, s: Rect) -> BiggerRect;\n \n     fn huge_struct(s: Huge) -> Huge;\n+\n+    fn float_point(p: FloatPoint) -> FloatPoint;\n }\n \n fn main() {\n     let s = Rect { a: 553, b: 554, c: 555, d: 556 };\n     let t = BiggerRect { s: s, a: 27834, b: 7657 };\n     let u = FloatRect { a: 3489, b: 3490, c: 8. };\n     let v = Huge { a: 5647, b: 5648, c: 5649, d: 5650, e: 5651 };\n+    let p = FloatPoint { x: 5., y: -3. };\n \n     unsafe {\n         byval_rect(1, 2, 3, 4, 5, s);\n@@ -94,5 +104,6 @@ fn main() {\n         assert_eq!(split_ret_byval_struct(1, 2, s), s);\n         assert_eq!(sret_byval_struct(1, 2, 3, 4, s), t);\n         assert_eq!(sret_split_struct(1, 2, s), t);\n+        assert_eq!(float_point(p), p);\n     }\n }"}]}