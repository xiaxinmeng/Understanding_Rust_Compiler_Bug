{"sha": "d837c00d1008c2ab13bf80117b81f5e482fc9edb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MzdjMDBkMTAwOGMyYWIxM2JmODAxMTdiODFmNWU0ODJmYzllZGI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-06-14T12:56:49Z"}, "committer": {"name": "lrh2000", "email": "lrh2000@pku.edu.cn", "date": "2021-06-26T15:11:04Z"}, "message": "Add migration lint for reserved prefixes.", "tree": {"sha": "f17ee6f36f349b76ad8b54e360812a392604b01d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f17ee6f36f349b76ad8b54e360812a392604b01d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d837c00d1008c2ab13bf80117b81f5e482fc9edb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d837c00d1008c2ab13bf80117b81f5e482fc9edb", "html_url": "https://github.com/rust-lang/rust/commit/d837c00d1008c2ab13bf80117b81f5e482fc9edb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d837c00d1008c2ab13bf80117b81f5e482fc9edb/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lrh2000", "id": 41988959, "node_id": "MDQ6VXNlcjQxOTg4OTU5", "avatar_url": "https://avatars.githubusercontent.com/u/41988959?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lrh2000", "html_url": "https://github.com/lrh2000", "followers_url": "https://api.github.com/users/lrh2000/followers", "following_url": "https://api.github.com/users/lrh2000/following{/other_user}", "gists_url": "https://api.github.com/users/lrh2000/gists{/gist_id}", "starred_url": "https://api.github.com/users/lrh2000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lrh2000/subscriptions", "organizations_url": "https://api.github.com/users/lrh2000/orgs", "repos_url": "https://api.github.com/users/lrh2000/repos", "events_url": "https://api.github.com/users/lrh2000/events{/privacy}", "received_events_url": "https://api.github.com/users/lrh2000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40fb2e97053e2655016688264ff19160741c1dbb", "url": "https://api.github.com/repos/rust-lang/rust/commits/40fb2e97053e2655016688264ff19160741c1dbb", "html_url": "https://github.com/rust-lang/rust/commit/40fb2e97053e2655016688264ff19160741c1dbb"}], "stats": {"total": 70, "additions": 63, "deletions": 7}, "files": [{"sha": "933f7e47c3e9d1b36c75235ad791843f7051fee3", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d837c00d1008c2ab13bf80117b81f5e482fc9edb/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d837c00d1008c2ab13bf80117b81f5e482fc9edb/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=d837c00d1008c2ab13bf80117b81f5e482fc9edb", "patch": "@@ -723,6 +723,15 @@ pub trait LintContext: Sized {\n                 BuiltinLintDiagnostics::OrPatternsBackCompat(span,suggestion) => {\n                     db.span_suggestion(span, \"use pat_param to preserve semantics\", suggestion, Applicability::MachineApplicable);\n                 }\n+                BuiltinLintDiagnostics::ReservedPrefix(span) => {\n+                    db.span_label(span, \"unknown prefix\");\n+                    db.span_suggestion_verbose(\n+                        span.shrink_to_hi(),\n+                        \"insert whitespace here to avoid this being parsed as a prefix in Rust 2021\",\n+                        \" \".into(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "ba8a8c3d8c993cc036270771d061417c0045d0de", "filename": "compiler/rustc_lint_defs/src/builtin.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d837c00d1008c2ab13bf80117b81f5e482fc9edb/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d837c00d1008c2ab13bf80117b81f5e482fc9edb/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Fbuiltin.rs?ref=d837c00d1008c2ab13bf80117b81f5e482fc9edb", "patch": "@@ -2973,6 +2973,7 @@ declare_lint_pass! {\n         OR_PATTERNS_BACK_COMPAT,\n         LARGE_ASSIGNMENTS,\n         FUTURE_PRELUDE_COLLISION,\n+        RESERVED_PREFIX,\n     ]\n }\n \n@@ -3263,3 +3264,39 @@ declare_lint! {\n         reason: FutureIncompatibilityReason::EditionError(Edition::Edition2021),\n     };\n }\n+\n+declare_lint! {\n+    /// The `reserved_prefix` lint detects identifiers that will be parsed as a\n+    /// prefix instead in Rust 2021.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(reserved_prefix)]\n+    ///\n+    /// macro_rules! m {\n+    ///     (z $x:expr) => ();\n+    /// }\n+    ///\n+    /// m!(z\"hey\");\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// In Rust 2015 and 2018, `z\"hey\"` is two tokens: the identifier `z`\n+    /// followed by the string literal `\"hey\"`. In Rust 2021, the `z` is\n+    /// considered a prefix for `\"hey\"`.\n+    ///\n+    /// This lint suggests to add whitespace between the `z` and `\"hey\"` tokens\n+    /// to keep them separated in Rust 2021.\n+    pub RESERVED_PREFIX,\n+    Allow,\n+    \"identifiers that will be parsed as a prefix in Rust 2021\",\n+    @future_incompatible = FutureIncompatibleInfo {\n+        reference: \"issue #84978 <https://github.com/rust-lang/rust/issues/84978>\",\n+        edition: Some(Edition::Edition2021),\n+    };\n+    crate_level_only\n+}"}, {"sha": "3372bc716d28ce150b9c7fb1a948c51c27231cb7", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d837c00d1008c2ab13bf80117b81f5e482fc9edb/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d837c00d1008c2ab13bf80117b81f5e482fc9edb/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=d837c00d1008c2ab13bf80117b81f5e482fc9edb", "patch": "@@ -300,6 +300,7 @@ pub enum BuiltinLintDiagnostics {\n     ExternDepSpec(String, ExternDepSpec),\n     ProcMacroBackCompat(String),\n     OrPatternsBackCompat(Span, String),\n+    ReservedPrefix(Span),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "f50e8a8db0193161fd078a692901da10689005d9", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d837c00d1008c2ab13bf80117b81f5e482fc9edb/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d837c00d1008c2ab13bf80117b81f5e482fc9edb/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=d837c00d1008c2ab13bf80117b81f5e482fc9edb", "patch": "@@ -1,9 +1,11 @@\n-use rustc_ast::ast::AttrStyle;\n+use rustc_ast::ast::{self, AttrStyle};\n use rustc_ast::token::{self, CommentKind, Token, TokenKind};\n use rustc_ast::tokenstream::{Spacing, TokenStream};\n use rustc_errors::{error_code, Applicability, DiagnosticBuilder, FatalError, PResult};\n use rustc_lexer::unescape::{self, Mode};\n use rustc_lexer::{Base, DocStyle, RawStrError};\n+use rustc_session::lint::builtin::RESERVED_PREFIX;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::ParseSess;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::{sym, Symbol};\n@@ -498,17 +500,24 @@ impl<'a> StringReader<'a> {\n         FatalError.raise()\n     }\n \n+    // See RFC 3101.\n     fn report_reserved_prefix(&self, start: BytePos) {\n-        // See RFC 3101.\n+        let prefix_span = self.mk_sp(start, self.pos);\n+        let msg = format!(\"prefix `{}` is unknown\", self.str_from_to(start, self.pos));\n+\n         if self.sess.edition < Edition::Edition2021 {\n+            self.sess.buffer_lint_with_diagnostic(\n+                &RESERVED_PREFIX,\n+                prefix_span,\n+                ast::CRATE_NODE_ID,\n+                &msg,\n+                BuiltinLintDiagnostics::ReservedPrefix(prefix_span),\n+            );\n             return;\n         }\n \n-        let mut err = self.sess.span_diagnostic.struct_span_err(\n-            self.mk_sp(start, self.pos),\n-            &format!(\"prefix `{}` is unknown\", self.str_from_to(start, self.pos)),\n-        );\n-        err.span_label(self.mk_sp(start, self.pos), \"unknown prefix\");\n+        let mut err = self.sess.span_diagnostic.struct_span_err(prefix_span, &msg);\n+        err.span_label(prefix_span, \"unknown prefix\");\n         err.span_suggestion_verbose(\n             self.mk_sp(self.pos, self.pos),\n             \"consider inserting whitespace here\","}]}