{"sha": "a0cdbd1aa61e47fed13e84cbbda9460ea88b7100", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwY2RiZDFhYTYxZTQ3ZmVkMTNlODRjYmJkYTk0NjBlYTg4YjcxMDA=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-05T16:44:37Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-05T16:44:37Z"}, "message": "Rustfmt", "tree": {"sha": "40358af210dea9249a898e060458512e022a763b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40358af210dea9249a898e060458512e022a763b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100", "html_url": "https://github.com/rust-lang/rust/commit/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38585b3f01a3e11d47bb61d83d915c0c6f302ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/38585b3f01a3e11d47bb61d83d915c0c6f302ded", "html_url": "https://github.com/rust-lang/rust/commit/38585b3f01a3e11d47bb61d83d915c0c6f302ded"}], "stats": {"total": 54, "additions": 26, "deletions": 28}, "files": [{"sha": "a044b43b86470a3c3e83f99ea5eb0cec9d4ea92e", "filename": "src/bin/cg_clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100/src%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100/src%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif.rs?ref=a0cdbd1aa61e47fed13e84cbbda9460ea88b7100", "patch": "@@ -6,8 +6,8 @@ extern crate rustc_interface;\n extern crate rustc_session;\n extern crate rustc_target;\n \n-use std::panic;\n use std::lazy::SyncLazy;\n+use std::panic;\n \n use rustc_data_structures::profiling::{get_resident_set_size, print_time_passes_entry};\n use rustc_interface::interface;"}, {"sha": "74cb665d061e7d3946405b467bdc09fcdeb9d960", "filename": "src/driver/aot.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=a0cdbd1aa61e47fed13e84cbbda9460ea88b7100", "patch": "@@ -291,7 +291,8 @@ pub(crate) fn run_aot(\n     };\n \n     // FIXME handle `-Ctarget-cpu=native`\n-    let target_cpu = tcx.sess.opts.cg.target_cpu.as_ref().unwrap_or(&tcx.sess.target.cpu).to_owned();\n+    let target_cpu =\n+        tcx.sess.opts.cg.target_cpu.as_ref().unwrap_or(&tcx.sess.target.cpu).to_owned();\n     Box::new((\n         CodegenResults {\n             modules,"}, {"sha": "8ab9433643242d5c2c17829ecab15413e12ed98e", "filename": "src/driver/jit.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=a0cdbd1aa61e47fed13e84cbbda9460ea88b7100", "patch": "@@ -26,7 +26,8 @@ thread_local! {\n }\n \n /// The Sender owned by the rustc thread\n-static GLOBAL_MESSAGE_SENDER: SyncOnceCell<Mutex<mpsc::Sender<UnsafeMessage>>> = SyncOnceCell::new();\n+static GLOBAL_MESSAGE_SENDER: SyncOnceCell<Mutex<mpsc::Sender<UnsafeMessage>>> =\n+    SyncOnceCell::new();\n \n /// A message that is sent from the jitted runtime to the rustc thread.\n /// Senders are responsible for upholding `Send` semantics.\n@@ -195,23 +196,25 @@ pub(crate) fn run_jit(tcx: TyCtxt<'_>, backend_config: BackendConfig) -> ! {\n             // lazy JIT compilation request - compile requested instance and return pointer to result\n             UnsafeMessage::JitFn { instance_ptr, trampoline_ptr, tx } => {\n                 tx.send(jit_fn(instance_ptr, trampoline_ptr))\n-                  .expect(\"jitted runtime hung up before response to lazy JIT request was sent\");\n+                    .expect(\"jitted runtime hung up before response to lazy JIT request was sent\");\n             }\n         }\n     }\n }\n \n #[no_mangle]\n-extern \"C\" fn __clif_jit_fn(instance_ptr: *const Instance<'static>, trampoline_ptr: *const u8) -> *const u8 {\n+extern \"C\" fn __clif_jit_fn(\n+    instance_ptr: *const Instance<'static>,\n+    trampoline_ptr: *const u8,\n+) -> *const u8 {\n     // send the JIT request to the rustc thread, with a channel for the response\n     let (tx, rx) = mpsc::channel();\n     UnsafeMessage::JitFn { instance_ptr, trampoline_ptr, tx }\n         .send()\n         .expect(\"rustc thread hung up before lazy JIT request was sent\");\n \n     // block on JIT compilation result\n-    rx.recv()\n-      .expect(\"rustc thread hung up before responding to sent lazy JIT request\")\n+    rx.recv().expect(\"rustc thread hung up before responding to sent lazy JIT request\")\n }\n \n fn jit_fn(instance_ptr: *const Instance<'static>, trampoline_ptr: *const u8) -> *const u8 {"}, {"sha": "be3704ca2768e0377a579c8206adf25c8d499fa6", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=a0cdbd1aa61e47fed13e84cbbda9460ea88b7100", "patch": "@@ -148,30 +148,28 @@ fn llvm_add_sub<'tcx>(\n     ret: CPlace<'tcx>,\n     cb_in: Value,\n     a: CValue<'tcx>,\n-    b: CValue<'tcx>\n+    b: CValue<'tcx>,\n ) {\n-    assert_eq!(a.layout().ty, fx.tcx.types.u64, \"llvm.x86.addcarry.64/llvm.x86.subborrow.64 second operand must be u64\");\n-    assert_eq!(b.layout().ty, fx.tcx.types.u64, \"llvm.x86.addcarry.64/llvm.x86.subborrow.64 third operand must be u64\");\n+    assert_eq!(\n+        a.layout().ty,\n+        fx.tcx.types.u64,\n+        \"llvm.x86.addcarry.64/llvm.x86.subborrow.64 second operand must be u64\"\n+    );\n+    assert_eq!(\n+        b.layout().ty,\n+        fx.tcx.types.u64,\n+        \"llvm.x86.addcarry.64/llvm.x86.subborrow.64 third operand must be u64\"\n+    );\n \n     // c + carry -> c + first intermediate carry or borrow respectively\n-    let int0 = crate::num::codegen_checked_int_binop(\n-        fx,\n-        bin_op,\n-        a,\n-        b,\n-    );\n+    let int0 = crate::num::codegen_checked_int_binop(fx, bin_op, a, b);\n     let c = int0.value_field(fx, mir::Field::new(0));\n     let cb0 = int0.value_field(fx, mir::Field::new(1)).load_scalar(fx);\n \n     // c + carry -> c + second intermediate carry or borrow respectively\n     let cb_in_as_u64 = fx.bcx.ins().uextend(types::I64, cb_in);\n     let cb_in_as_u64 = CValue::by_val(cb_in_as_u64, fx.layout_of(fx.tcx.types.u64));\n-    let int1 = crate::num::codegen_checked_int_binop(\n-        fx,\n-        bin_op,\n-        c,\n-        cb_in_as_u64,\n-    );\n+    let int1 = crate::num::codegen_checked_int_binop(fx, bin_op, c, cb_in_as_u64);\n     let (c, cb1) = int1.load_scalar_pair(fx);\n \n     // carry0 | carry1 -> carry or borrow respectively"}, {"sha": "4a5f9f133a2bbc8e2168fd4668036fb46f3d091f", "filename": "src/vtable.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0cdbd1aa61e47fed13e84cbbda9460ea88b7100/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=a0cdbd1aa61e47fed13e84cbbda9460ea88b7100", "patch": "@@ -69,12 +69,8 @@ pub(crate) fn get_vtable<'tcx>(\n     trait_ref: Option<ty::PolyExistentialTraitRef<'tcx>>,\n ) -> Value {\n     let alloc_id = fx.tcx.vtable_allocation(ty, trait_ref);\n-    let data_id = data_id_for_alloc_id(\n-        &mut fx.constants_cx,\n-        &mut *fx.module,\n-        alloc_id,\n-        Mutability::Not,\n-    );\n+    let data_id =\n+        data_id_for_alloc_id(&mut fx.constants_cx, &mut *fx.module, alloc_id, Mutability::Not);\n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     if fx.clif_comments.enabled() {\n         fx.add_comment(local_data_id, format!(\"vtable: {:?}\", alloc_id));"}]}