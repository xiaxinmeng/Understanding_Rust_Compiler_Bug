{"sha": "a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e", "node_id": "C_kwDOAAsO6NoAKGExZTg1MzVmNDQxOGVkNDhkNGNhNmQxMDE5YjBiOWVhN2U4NzE0NWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T18:20:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T18:20:32Z"}, "message": "Auto merge of #14518 - Veykril:hir-def-refac, r=Veykril\n\ninternal: Remove unnecessary Names from FunctionData::params", "tree": {"sha": "8beaac6eb56550c047357b716bcca566f9e1c8e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8beaac6eb56550c047357b716bcca566f9e1c8e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e", "html_url": "https://github.com/rust-lang/rust/commit/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58da3fc24073e58f5fd002fbf602729b6efe979f", "url": "https://api.github.com/repos/rust-lang/rust/commits/58da3fc24073e58f5fd002fbf602729b6efe979f", "html_url": "https://github.com/rust-lang/rust/commit/58da3fc24073e58f5fd002fbf602729b6efe979f"}, {"sha": "b7c443569a53e624c250058c2181d2c1d299c46f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c443569a53e624c250058c2181d2c1d299c46f", "html_url": "https://github.com/rust-lang/rust/commit/b7c443569a53e624c250058c2181d2c1d299c46f"}], "stats": {"total": 33, "additions": 17, "deletions": 16}, "files": [{"sha": "8a773899cfc987c2aa809efb9d5db143f413f765", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e", "patch": "@@ -973,10 +973,10 @@ impl ExprCollector<'_> {\n         block: ast::BlockExpr,\n         mk_block: impl FnOnce(Option<BlockId>, Box<[Statement]>, Option<ExprId>) -> Expr,\n     ) -> ExprId {\n-        let file_local_id = self.ast_id_map.ast_id(&block);\n-        let ast_id = AstId::new(self.expander.current_file_id, file_local_id);\n-\n-        let block_id = if ItemTree::block_has_items(self.db, ast_id.file_id, &block) {\n+        let block_id = if ItemTree::block_has_items(self.db, self.expander.current_file_id, &block)\n+        {\n+            let file_local_id = self.ast_id_map.ast_id(&block);\n+            let ast_id = AstId::new(self.expander.current_file_id, file_local_id);\n             Some(self.db.intern_block(BlockLoc {\n                 ast_id,\n                 module: self.expander.def_map.module_id(self.expander.module),"}, {"sha": "de1e10ae2b0b1ea26fc2fcdb1347e0f20a2507e5", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e", "patch": "@@ -30,7 +30,7 @@ use crate::{\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct FunctionData {\n     pub name: Name,\n-    pub params: Vec<(Option<Name>, Interned<TypeRef>)>,\n+    pub params: Vec<Interned<TypeRef>>,\n     pub ret_type: Interned<TypeRef>,\n     pub attrs: Attrs,\n     pub visibility: RawVisibility,\n@@ -100,7 +100,7 @@ impl FunctionData {\n             params: enabled_params\n                 .clone()\n                 .filter_map(|id| match &item_tree[id] {\n-                    Param::Normal(name, ty) => Some((name.clone(), ty.clone())),\n+                    Param::Normal(_, ty) => Some(ty.clone()),\n                     Param::Varargs => None,\n                 })\n                 .collect(),"}, {"sha": "4285a0ca72c071f898d82884dc4ad1174e164e05", "filename": "crates/hir-def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/crates%2Fhir-def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fgenerics.rs?ref=a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e", "patch": "@@ -176,7 +176,7 @@ impl GenericParams {\n                 // Don't create an `Expander` nor call `loc.source(db)` if not needed since this\n                 // causes a reparse after the `ItemTree` has been created.\n                 let mut expander = Lazy::new(|| Expander::new(db, loc.source(db).file_id, module));\n-                for (_, param) in &func_data.params {\n+                for param in &func_data.params {\n                     generic_params.fill_implicit_impl_trait_args(db, &mut expander, param);\n                 }\n "}, {"sha": "c34b24bee82f48bef2048e62bd64e2404e552f85", "filename": "crates/hir-ty/src/infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/crates%2Fhir-ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer.rs?ref=a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e", "patch": "@@ -618,7 +618,7 @@ impl<'a> InferenceContext<'a> {\n         let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver)\n             .with_impl_trait_mode(ImplTraitLoweringMode::Param);\n         let mut param_tys =\n-            data.params.iter().map(|(_, type_ref)| ctx.lower_ty(type_ref)).collect::<Vec<_>>();\n+            data.params.iter().map(|type_ref| ctx.lower_ty(type_ref)).collect::<Vec<_>>();\n         // Check if function contains a va_list, if it does then we append it to the parameter types\n         // that are collected from the function data\n         if data.is_varargs() {"}, {"sha": "d69fd8c8110480cfb9a8e6f35eb1bac3707a7a05", "filename": "crates/hir-ty/src/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/crates%2Fhir-ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/crates%2Fhir-ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flower.rs?ref=a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e", "patch": "@@ -1634,7 +1634,7 @@ fn fn_sig_for_fn(db: &dyn HirDatabase, def: FunctionId) -> PolyFnSig {\n     let ctx_params = TyLoweringContext::new(db, &resolver)\n         .with_impl_trait_mode(ImplTraitLoweringMode::Variable)\n         .with_type_param_mode(ParamLoweringMode::Variable);\n-    let params = data.params.iter().map(|(_, tr)| ctx_params.lower_ty(tr)).collect::<Vec<_>>();\n+    let params = data.params.iter().map(|tr| ctx_params.lower_ty(tr)).collect::<Vec<_>>();\n     let ctx_ret = TyLoweringContext::new(db, &resolver)\n         .with_impl_trait_mode(ImplTraitLoweringMode::Opaque)\n         .with_type_param_mode(ParamLoweringMode::Variable);"}, {"sha": "49165ca70ec454cb6ef30dca8e0077d527e2e610", "filename": "crates/hir/src/display.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/crates%2Fhir%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/crates%2Fhir%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdisplay.rs?ref=a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e", "patch": "@@ -8,6 +8,7 @@ use hir_def::{\n     type_ref::{TypeBound, TypeRef},\n     AdtId, GenericDefId,\n };\n+use hir_expand::name;\n use hir_ty::{\n     display::{\n         write_bounds_like_dyn_trait_with_prefix, write_visibility, HirDisplay, HirDisplayError,\n@@ -76,22 +77,22 @@ impl HirDisplay for Function {\n         };\n \n         let mut first = true;\n-        for (name, type_ref) in &data.params {\n+        // FIXME: Use resolved `param.ty` once we no longer discard lifetimes\n+        for (type_ref, param) in data.params.iter().zip(self.assoc_fn_params(db)) {\n+            let local = param.as_local(db).map(|it| it.name(db));\n             if !first {\n                 f.write_str(\", \")?;\n             } else {\n                 first = false;\n-                if data.has_self_param() {\n+                if local == Some(name!(self)) {\n                     write_self_param(type_ref, f)?;\n                     continue;\n                 }\n             }\n-            match name {\n+            match local {\n                 Some(name) => write!(f, \"{name}: \")?,\n                 None => f.write_str(\"_: \")?,\n             }\n-            // FIXME: Use resolved `param.ty` or raw `type_ref`?\n-            // The former will ignore lifetime arguments currently.\n             type_ref.hir_fmt(f)?;\n         }\n "}, {"sha": "fad9f19d25359b2857e3c2c00c2ca2c40bc0f0b7", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=a1e8535f4418ed48d4ca6d1019b0b9ea7e87145e", "patch": "@@ -1844,7 +1844,7 @@ impl Param {\n     }\n \n     pub fn name(&self, db: &dyn HirDatabase) -> Option<Name> {\n-        db.function_data(self.func.id).params[self.idx].0.clone()\n+        Some(self.as_local(db)?.name(db))\n     }\n \n     pub fn as_local(&self, db: &dyn HirDatabase) -> Option<Local> {\n@@ -1885,7 +1885,7 @@ impl SelfParam {\n         func_data\n             .params\n             .first()\n-            .map(|(_, param)| match &**param {\n+            .map(|param| match &**param {\n                 TypeRef::Reference(.., mutability) => match mutability {\n                     hir_def::type_ref::Mutability::Shared => Access::Shared,\n                     hir_def::type_ref::Mutability::Mut => Access::Exclusive,"}]}