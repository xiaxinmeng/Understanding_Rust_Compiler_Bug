{"sha": "fcab11da47daa6461a3b5895a1dc16e582f7cae3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjYWIxMWRhNDdkYWE2NDYxYTNiNTg5NWExZGMxNmU1ODJmN2NhZTM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-14T19:24:56Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-14T19:24:56Z"}, "message": "Refactor; annotate a FIXME", "tree": {"sha": "69c3b94bfcd4f3e47f2c49c8eec5e0e4ea02dc24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69c3b94bfcd4f3e47f2c49c8eec5e0e4ea02dc24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcab11da47daa6461a3b5895a1dc16e582f7cae3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcab11da47daa6461a3b5895a1dc16e582f7cae3", "html_url": "https://github.com/rust-lang/rust/commit/fcab11da47daa6461a3b5895a1dc16e582f7cae3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcab11da47daa6461a3b5895a1dc16e582f7cae3/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24f9f45ac68f4b29997a20b63de7997536f89dd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/24f9f45ac68f4b29997a20b63de7997536f89dd1", "html_url": "https://github.com/rust-lang/rust/commit/24f9f45ac68f4b29997a20b63de7997536f89dd1"}], "stats": {"total": 42, "additions": 17, "deletions": 25}, "files": [{"sha": "845bd8b1fb4ffc25ca1ebcf86aba169882fc8387", "filename": "src/rustc/util/common.rs", "status": "modified", "additions": 17, "deletions": 25, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/fcab11da47daa6461a3b5895a1dc16e582f7cae3/src%2Frustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcab11da47daa6461a3b5895a1dc16e582f7cae3/src%2Frustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fcommon.rs?ref=fcab11da47daa6461a3b5895a1dc16e582f7cae3", "patch": "@@ -33,36 +33,28 @@ fn field_exprs(fields: [ast::field]) -> [@ast::expr] {\n     ret es;\n }\n \n-fn has_nonlocal_exits(b: ast::blk) -> bool {\n-    let has_exits = @mut false;\n-    fn visit_expr(flag: @mut bool, e: @ast::expr) {\n-        alt e.node {\n-          ast::expr_break { *flag = true; }\n-          ast::expr_cont { *flag = true; }\n-          _ { }\n-        }\n-    }\n+// Takes a predicate p, returns true iff p is true for any subexpressions\n+// of b\n+fn block_expr_query(b: ast::blk, p: fn@(ast::expr_) -> bool) -> bool {\n+    let rs = @mut false;\n+    let visit_expr = {|flag: @mut bool, e: @ast::expr| *flag |= p(e.node)};\n     let v =\n-        visit::mk_simple_visitor(@{visit_expr: bind visit_expr(has_exits, _)\n+        visit::mk_simple_visitor(@{visit_expr: bind visit_expr(rs, _)\n                                       with *visit::default_simple_visitor()});\n     visit::visit_block(b, (), v);\n-    ret *has_exits;\n+    ret *rs;\n+}\n+\n+fn has_nonlocal_exits(b: ast::blk) -> bool {\n+    block_expr_query(b) {|e| alt e {\n+      ast::expr_break | ast::expr_cont { true }\n+      _ { false }}}\n }\n \n-/* FIXME: copy/paste, yuck */\n fn may_break(b: ast::blk) -> bool {\n-    let has_exits = @mut false;\n-    fn visit_expr(flag: @mut bool, e: @ast::expr) {\n-        alt e.node {\n-          ast::expr_break { *flag = true; }\n-          _ { }\n-        }\n-    }\n-    let v =\n-        visit::mk_simple_visitor(@{visit_expr: bind visit_expr(has_exits, _)\n-                                      with *visit::default_simple_visitor()});\n-    visit::visit_block(b, (), v);\n-    ret *has_exits;\n+    block_expr_query(b) {|e| alt e {\n+      ast::expr_break { true }\n+      _ { false }}}\n }\n \n fn local_rhs_span(l: @ast::local, def: span) -> span {\n@@ -71,7 +63,7 @@ fn local_rhs_span(l: @ast::local, def: span) -> span {\n \n fn is_main_name(path: syntax::ast_map::path) -> bool {\n     // FIXME: path should be a constrained type, so we know\n-    // the call to last doesn't fail\n+    // the call to last doesn't fail (#34)\n     vec::last(path) == syntax::ast_map::path_name(@\"main\")\n }\n "}]}