{"sha": "393cbd0982707a20b0ef40277385737f8de1833e", "node_id": "C_kwDOAAsO6NoAKDM5M2NiZDA5ODI3MDdhMjBiMGVmNDAyNzczODU3MzdmOGRlMTgzM2U", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-29T11:13:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-29T11:13:39Z"}, "message": "Merge #10841\n\n10841: Emit moniker in lsif r=Veykril a=HKalbasi\n\nfix #10559 \n\nCo-authored-by: hkalbasi <hamidrezakalbasi@protonmail.com>\nCo-authored-by: HKalbasi <45197576+HKalbasi@users.noreply.github.com>", "tree": {"sha": "41eb0788943699393d5b99ed709e7a9cc97c7b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/41eb0788943699393d5b99ed709e7a9cc97c7b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/393cbd0982707a20b0ef40277385737f8de1833e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhpLXjCRBK7hj4Ov3rIwAANmMIAGShpfCC5Ic/pyAyUmYd64Tb\nL4mVGgG9Yr/A+UQMMNHCRABv58djhnPemJU9EWu4+DKwJguzmqLK9ETpZ5uKZVTB\nbwZz4WQP+Ynfrhkj+cnLg1ae4W4XjozUyb0E0N/sIu1A0dSEUJFXvGXsdnlchHTA\nsSL5Omc84N7fW2LeYs6ilCABK7sw6ZODOcmccRSKAO1TI63GMK8nbz8q8ltMfIo+\nFFIrniiL8pHmg5R+dDI5QgVIggvAhHvvRt3eXviVoXSBOWlVtz1+x96FwWzaL7EY\nRsY9Ud9R/QuWCmfaVW4h94Pq38k+SVVk+TqkKh4W28oA6nKgPqe9pf0sEZWQmHk=\n=bdxm\n-----END PGP SIGNATURE-----\n", "payload": "tree 41eb0788943699393d5b99ed709e7a9cc97c7b78\nparent d9b2291f546abc77d24499339a72a89127464b95\nparent 1409781c452832ced09acc1ab51ba1ed972689e1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1638184419 +0000\ncommitter GitHub <noreply@github.com> 1638184419 +0000\n\nMerge #10841\n\n10841: Emit moniker in lsif r=Veykril a=HKalbasi\n\nfix #10559 \n\nCo-authored-by: hkalbasi <hamidrezakalbasi@protonmail.com>\nCo-authored-by: HKalbasi <45197576+HKalbasi@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/393cbd0982707a20b0ef40277385737f8de1833e", "html_url": "https://github.com/rust-lang/rust/commit/393cbd0982707a20b0ef40277385737f8de1833e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/393cbd0982707a20b0ef40277385737f8de1833e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9b2291f546abc77d24499339a72a89127464b95", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b2291f546abc77d24499339a72a89127464b95", "html_url": "https://github.com/rust-lang/rust/commit/d9b2291f546abc77d24499339a72a89127464b95"}, {"sha": "1409781c452832ced09acc1ab51ba1ed972689e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1409781c452832ced09acc1ab51ba1ed972689e1", "html_url": "https://github.com/rust-lang/rust/commit/1409781c452832ced09acc1ab51ba1ed972689e1"}], "stats": {"total": 530, "additions": 511, "deletions": 19}, "files": [{"sha": "9baae9214458f5050ea7b7b36735020eeb7cba41", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 29, "deletions": 8, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=393cbd0982707a20b0ef40277385737f8de1833e", "patch": "@@ -10,9 +10,10 @@ use tt::Subtree;\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n-    input::CrateName, Change, CrateDisplayName, CrateGraph, CrateId, Dependency, Edition, Env,\n-    FileId, FilePosition, FileRange, ProcMacro, ProcMacroExpander, ProcMacroExpansionError,\n-    SourceDatabaseExt, SourceRoot, SourceRootId,\n+    input::{CrateName, CrateOrigin},\n+    Change, CrateDisplayName, CrateGraph, CrateId, Dependency, Edition, Env, FileId, FilePosition,\n+    FileRange, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, SourceDatabaseExt,\n+    SourceRoot, SourceRootId,\n };\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n@@ -130,17 +131,18 @@ impl ChangeFixture {\n                 current_source_root_kind = *kind;\n             }\n \n-            if let Some(krate) = meta.krate {\n+            if let Some((krate, origin, version)) = meta.krate {\n                 let crate_name = CrateName::normalize_dashes(&krate);\n                 let crate_id = crate_graph.add_crate_root(\n                     file_id,\n                     meta.edition,\n                     Some(crate_name.clone().into()),\n-                    None,\n+                    version,\n                     meta.cfg.clone(),\n                     meta.cfg,\n                     meta.env,\n                     Default::default(),\n+                    origin,\n                 );\n                 let prev = crates.insert(crate_name.clone(), crate_id);\n                 assert!(prev.is_none());\n@@ -174,6 +176,7 @@ impl ChangeFixture {\n                 default_cfg,\n                 Env::default(),\n                 Default::default(),\n+                Default::default(),\n             );\n         } else {\n             for (from, to, prelude) in crate_deps {\n@@ -209,6 +212,7 @@ impl ChangeFixture {\n                 CfgOptions::default(),\n                 Env::default(),\n                 Vec::new(),\n+                CrateOrigin::Lang,\n             );\n \n             for krate in all_crates {\n@@ -243,6 +247,7 @@ impl ChangeFixture {\n                 CfgOptions::default(),\n                 Env::default(),\n                 proc_macro,\n+                CrateOrigin::Lang,\n             );\n \n             for krate in all_crates {\n@@ -324,7 +329,7 @@ enum SourceRootKind {\n #[derive(Debug)]\n struct FileMeta {\n     path: String,\n-    krate: Option<String>,\n+    krate: Option<(String, CrateOrigin, Option<String>)>,\n     deps: Vec<String>,\n     extern_prelude: Vec<String>,\n     cfg: CfgOptions,\n@@ -333,16 +338,32 @@ struct FileMeta {\n     introduce_new_source_root: Option<SourceRootKind>,\n }\n \n+fn parse_crate(crate_str: String) -> (String, CrateOrigin, Option<String>) {\n+    if let Some((a, b)) = crate_str.split_once(\"@\") {\n+        let (version, origin) = match b.split_once(\":\") {\n+            Some((\"CratesIo\", data)) => match data.split_once(\",\") {\n+                Some((version, url)) => {\n+                    (version, CrateOrigin::CratesIo { repo: Some(url.to_owned()) })\n+                }\n+                _ => panic!(\"Bad crates.io parameter: {}\", data),\n+            },\n+            _ => panic!(\"Bad string for crate origin: {}\", b),\n+        };\n+        (a.to_owned(), origin, Some(version.to_string()))\n+    } else {\n+        (crate_str, CrateOrigin::Unknown, None)\n+    }\n+}\n+\n impl From<Fixture> for FileMeta {\n     fn from(f: Fixture) -> FileMeta {\n         let mut cfg = CfgOptions::default();\n         f.cfg_atoms.iter().for_each(|it| cfg.insert_atom(it.into()));\n         f.cfg_key_values.iter().for_each(|(k, v)| cfg.insert_key_value(k.into(), v.into()));\n-\n         let deps = f.deps;\n         FileMeta {\n             path: f.path,\n-            krate: f.krate,\n+            krate: f.krate.map(parse_crate),\n             extern_prelude: f.extern_prelude.unwrap_or_else(|| deps.clone()),\n             deps,\n             cfg,"}, {"sha": "f182427e478dd00a7304a4d73fe9484e1643b624", "filename": "crates/base_db/src/input.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fbase_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fbase_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Finput.rs?ref=393cbd0982707a20b0ef40277385737f8de1833e", "patch": "@@ -112,6 +112,24 @@ impl ops::Deref for CrateName {\n     }\n }\n \n+/// Origin of the crates. It is used in emitting monikers.\n+#[derive(Debug, Clone)]\n+pub enum CrateOrigin {\n+    /// Crates that are from crates.io official registry,\n+    CratesIo { repo: Option<String> },\n+    /// Crates that are provided by the language, like std, core, proc-macro, ...\n+    Lang,\n+    /// Crates that we don't know their origin.\n+    // Idealy this enum should cover all cases, and then we remove this variant.\n+    Unknown,\n+}\n+\n+impl Default for CrateOrigin {\n+    fn default() -> Self {\n+        Self::Unknown\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct CrateDisplayName {\n     // The name we use to display various paths (with `_`).\n@@ -205,6 +223,7 @@ pub struct CrateData {\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n     pub proc_macro: Vec<ProcMacro>,\n+    pub origin: CrateOrigin,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -256,6 +275,7 @@ impl CrateGraph {\n         potential_cfg_options: CfgOptions,\n         env: Env,\n         proc_macro: Vec<ProcMacro>,\n+        origin: CrateOrigin,\n     ) -> CrateId {\n         let data = CrateData {\n             root_file_id: file_id,\n@@ -267,6 +287,7 @@ impl CrateGraph {\n             env,\n             proc_macro,\n             dependencies: Vec::new(),\n+            origin,\n         };\n         let crate_id = CrateId(self.arena.len() as u32);\n         let prev = self.arena.insert(crate_id, data);\n@@ -571,6 +592,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -581,6 +603,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n@@ -591,6 +614,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -615,6 +639,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -625,6 +650,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -646,6 +672,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -656,6 +683,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate3 = graph.add_crate_root(\n             FileId(3u32),\n@@ -666,6 +694,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         assert!(graph\n             .add_dep(crate1, Dependency::new(CrateName::new(\"crate2\").unwrap(), crate2))\n@@ -687,6 +716,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         let crate2 = graph.add_crate_root(\n             FileId(2u32),\n@@ -697,6 +727,7 @@ mod tests {\n             CfgOptions::default(),\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         assert!(graph\n             .add_dep("}, {"sha": "d4070457cdd5028930ff866a022bd79553cabe4f", "filename": "crates/base_db/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fbase_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fbase_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Flib.rs?ref=393cbd0982707a20b0ef40277385737f8de1833e", "patch": "@@ -11,9 +11,9 @@ use syntax::{ast, Parse, SourceFile, TextRange, TextSize};\n pub use crate::{\n     change::Change,\n     input::{\n-        CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, Dependency, Edition, Env,\n-        ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacroId, ProcMacroKind,\n-        SourceRoot, SourceRootId,\n+        CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency,\n+        Edition, Env, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacroId,\n+        ProcMacroKind, SourceRoot, SourceRootId,\n     },\n };\n pub use salsa::{self, Cancelled};"}, {"sha": "badd9ac5891759f78e5daadc5d78aa355cb48602", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=393cbd0982707a20b0ef40277385737f8de1833e", "patch": "@@ -34,7 +34,7 @@ mod display;\n use std::{iter, ops::ControlFlow, sync::Arc};\n \n use arrayvec::ArrayVec;\n-use base_db::{CrateDisplayName, CrateId, Edition, FileId};\n+use base_db::{CrateDisplayName, CrateId, CrateOrigin, Edition, FileId};\n use either::Either;\n use hir_def::{\n     adt::{ReprKind, VariantData},\n@@ -144,6 +144,10 @@ pub struct CrateDependency {\n }\n \n impl Crate {\n+    pub fn origin(self, db: &dyn HirDatabase) -> CrateOrigin {\n+        db.crate_graph()[self.id].origin.clone()\n+    }\n+\n     pub fn dependencies(self, db: &dyn HirDatabase) -> Vec<CrateDependency> {\n         db.crate_graph()[self.id]\n             .dependencies"}, {"sha": "121baa86f1e5fd8fddc80006d354f8a2a5d8f3b7", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=393cbd0982707a20b0ef40277385737f8de1833e", "patch": "@@ -41,6 +41,7 @@ mod inlay_hints;\n mod join_lines;\n mod markdown_remove;\n mod matching_brace;\n+mod moniker;\n mod move_item;\n mod parent_module;\n mod references;\n@@ -83,6 +84,7 @@ pub use crate::{\n     inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n     join_lines::JoinLinesConfig,\n     markup::Markup,\n+    moniker::{MonikerKind, MonikerResult, PackageInformation},\n     move_item::Direction,\n     navigation_target::NavigationTarget,\n     prime_caches::PrimeCachesProgress,\n@@ -225,6 +227,7 @@ impl Analysis {\n             cfg_options,\n             Env::default(),\n             Default::default(),\n+            Default::default(),\n         );\n         change.change_file(file_id, Some(Arc::new(text)));\n         change.set_crate_graph(crate_graph);\n@@ -425,6 +428,14 @@ impl Analysis {\n         self.with_db(|db| hover::hover(db, range, config))\n     }\n \n+    /// Returns moniker of symbol at position.\n+    pub fn moniker(\n+        &self,\n+        position: FilePosition,\n+    ) -> Cancellable<Option<RangeInfo<Vec<moniker::MonikerResult>>>> {\n+        self.with_db(|db| moniker::moniker(db, position))\n+    }\n+\n     /// Return URL(s) for the documentation of the symbol under the cursor.\n     pub fn external_docs(\n         &self,"}, {"sha": "9d8c742fc466cc605afffac074a23faa15ac27af", "filename": "crates/ide/src/moniker.rs", "status": "added", "additions": 233, "deletions": 0, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fide%2Fsrc%2Fmoniker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fide%2Fsrc%2Fmoniker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmoniker.rs?ref=393cbd0982707a20b0ef40277385737f8de1833e", "patch": "@@ -0,0 +1,233 @@\n+//! This module generates [moniker](https://microsoft.github.io/language-server-protocol/specifications/lsif/0.6.0/specification/#exportsImports)\n+//! for LSIF and LSP.\n+\n+use hir::{db::DefDatabase, Crate, Name, Semantics};\n+use ide_db::{\n+    base_db::{CrateOrigin, FileId, FileLoader, FilePosition},\n+    defs::Definition,\n+    helpers::pick_best_token,\n+    RootDatabase,\n+};\n+use itertools::Itertools;\n+use syntax::{AstNode, SyntaxKind::*, T};\n+\n+use crate::{doc_links::token_as_doc_comment, RangeInfo};\n+\n+#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub struct MonikerIdentifier {\n+    crate_name: String,\n+    path: Vec<Name>,\n+}\n+\n+impl ToString for MonikerIdentifier {\n+    fn to_string(&self) -> String {\n+        match self {\n+            MonikerIdentifier { path, crate_name } => {\n+                format!(\"{}::{}\", crate_name, path.iter().map(|x| x.to_string()).join(\"::\"))\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+pub enum MonikerKind {\n+    Import,\n+    Export,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct MonikerResult {\n+    pub identifier: MonikerIdentifier,\n+    pub kind: MonikerKind,\n+    pub package_information: PackageInformation,\n+}\n+\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct PackageInformation {\n+    pub name: String,\n+    pub repo: String,\n+    pub version: String,\n+}\n+\n+pub(crate) fn crate_for_file(db: &RootDatabase, file_id: FileId) -> Option<Crate> {\n+    for &krate in db.relevant_crates(file_id).iter() {\n+        let crate_def_map = db.crate_def_map(krate);\n+        for (_, data) in crate_def_map.modules() {\n+            if data.origin.file_id() == Some(file_id) {\n+                return Some(krate.into());\n+            }\n+        }\n+    }\n+    None\n+}\n+\n+pub(crate) fn moniker(\n+    db: &RootDatabase,\n+    FilePosition { file_id, offset }: FilePosition,\n+) -> Option<RangeInfo<Vec<MonikerResult>>> {\n+    let sema = &Semantics::new(db);\n+    let file = sema.parse(file_id).syntax().clone();\n+    let current_crate = crate_for_file(db, file_id)?;\n+    let original_token = pick_best_token(file.token_at_offset(offset), |kind| match kind {\n+        IDENT | INT_NUMBER | LIFETIME_IDENT | T![self] | T![super] | T![crate] | COMMENT => 2,\n+        kind if kind.is_trivia() => 0,\n+        _ => 1,\n+    })?;\n+    if let Some(doc_comment) = token_as_doc_comment(&original_token) {\n+        return doc_comment.get_definition_with_descend_at(sema, offset, |def, _, _| {\n+            let m = def_to_moniker(db, def, current_crate)?;\n+            Some(RangeInfo::new(original_token.text_range(), vec![m]))\n+        });\n+    }\n+    let navs = sema\n+        .descend_into_macros(original_token.clone())\n+        .into_iter()\n+        .map(|token| {\n+            Definition::from_token(sema, &token)\n+                .into_iter()\n+                .flat_map(|def| def_to_moniker(sema.db, def, current_crate))\n+                .collect::<Vec<_>>()\n+        })\n+        .flatten()\n+        .unique()\n+        .collect::<Vec<_>>();\n+    Some(RangeInfo::new(original_token.text_range(), navs))\n+}\n+\n+pub(crate) fn def_to_moniker(\n+    db: &RootDatabase,\n+    def: Definition,\n+    from_crate: Crate,\n+) -> Option<MonikerResult> {\n+    if matches!(def, Definition::GenericParam(_) | Definition::SelfType(_) | Definition::Local(_)) {\n+        return None;\n+    }\n+    let module = def.module(db)?;\n+    let krate = module.krate();\n+    let mut path = vec![];\n+    path.extend(module.path_to_root(db).into_iter().filter_map(|x| x.name(db)));\n+    if let Definition::Field(it) = def {\n+        path.push(it.parent_def(db).name(db));\n+    }\n+    path.push(def.name(db)?);\n+    Some(MonikerResult {\n+        identifier: MonikerIdentifier {\n+            crate_name: krate.display_name(db)?.crate_name().to_string(),\n+            path,\n+        },\n+        kind: if krate == from_crate { MonikerKind::Export } else { MonikerKind::Import },\n+        package_information: {\n+            let name = krate.display_name(db)?.to_string();\n+            let (repo, version) = match krate.origin(db) {\n+                CrateOrigin::CratesIo { repo } => (repo?, krate.version(db)?),\n+                CrateOrigin::Lang => (\n+                    \"https://github.com/rust-lang/rust/\".to_string(),\n+                    \"compiler_version\".to_string(),\n+                ),\n+                CrateOrigin::Unknown => return None,\n+            };\n+            PackageInformation { name, repo, version }\n+        },\n+    })\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::fixture;\n+\n+    use super::MonikerKind;\n+\n+    #[track_caller]\n+    fn no_moniker(ra_fixture: &str) {\n+        let (analysis, position) = fixture::position(ra_fixture);\n+        if let Some(x) = analysis.moniker(position).unwrap() {\n+            assert_eq!(x.info.len(), 0, \"Moniker founded but no moniker expected: {:?}\", x);\n+        }\n+    }\n+\n+    #[track_caller]\n+    fn check_moniker(ra_fixture: &str, identifier: &str, package: &str, kind: MonikerKind) {\n+        let (analysis, position) = fixture::position(ra_fixture);\n+        let x = analysis.moniker(position).unwrap().expect(\"no moniker found\").info;\n+        assert_eq!(x.len(), 1);\n+        let x = x.into_iter().next().unwrap();\n+        assert_eq!(identifier, x.identifier.to_string());\n+        assert_eq!(package, format!(\"{:?}\", x.package_information));\n+        assert_eq!(kind, x.kind);\n+    }\n+\n+    #[test]\n+    fn basic() {\n+        check_moniker(\n+            r#\"\n+//- /lib.rs crate:main deps:foo\n+use foo::module::func;\n+fn main() {\n+    func$0();\n+}\n+//- /foo/lib.rs crate:foo@CratesIo:0.1.0,https://a.b/foo.git\n+pub mod module {\n+    pub fn func() {}\n+}\n+\"#,\n+            \"foo::module::func\",\n+            r#\"PackageInformation { name: \"foo\", repo: \"https://a.b/foo.git\", version: \"0.1.0\" }\"#,\n+            MonikerKind::Import,\n+        );\n+        check_moniker(\n+            r#\"\n+//- /lib.rs crate:main deps:foo\n+use foo::module::func;\n+fn main() {\n+    func();\n+}\n+//- /foo/lib.rs crate:foo@CratesIo:0.1.0,https://a.b/foo.git\n+pub mod module {\n+    pub fn func$0() {}\n+}\n+\"#,\n+            \"foo::module::func\",\n+            r#\"PackageInformation { name: \"foo\", repo: \"https://a.b/foo.git\", version: \"0.1.0\" }\"#,\n+            MonikerKind::Export,\n+        );\n+    }\n+\n+    #[test]\n+    fn moniker_for_field() {\n+        check_moniker(\n+            r#\"\n+//- /lib.rs crate:main deps:foo\n+use foo::St;\n+fn main() {\n+    let x = St { a$0: 2 };\n+}\n+//- /foo/lib.rs crate:foo@CratesIo:0.1.0,https://a.b/foo.git\n+pub struct St {\n+    pub a: i32,\n+}\n+\"#,\n+            \"foo::St::a\",\n+            r#\"PackageInformation { name: \"foo\", repo: \"https://a.b/foo.git\", version: \"0.1.0\" }\"#,\n+            MonikerKind::Import,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_moniker_for_local() {\n+        no_moniker(\n+            r#\"\n+//- /lib.rs crate:main deps:foo\n+use foo::module::func;\n+fn main() {\n+    func();\n+}\n+//- /foo/lib.rs crate:foo@CratesIo:0.1.0,https://a.b/foo.git\n+pub mod module {\n+    pub fn func() {\n+        let x$0 = 2;\n+    }\n+}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "cf98bc32faf9763a506d06c820514ca94aa3b2e0", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=393cbd0982707a20b0ef40277385737f8de1833e", "patch": "@@ -12,6 +12,7 @@ use ide_db::{\n use rustc_hash::FxHashSet;\n use syntax::{AstNode, SyntaxKind::*, SyntaxToken, TextRange, T};\n \n+use crate::moniker::{crate_for_file, def_to_moniker, MonikerResult};\n use crate::{\n     hover::hover_for_definition, Analysis, Fold, HoverConfig, HoverDocFormat, HoverResult,\n     InlayHint, InlayHintsConfig, TryToNav,\n@@ -40,6 +41,7 @@ pub struct TokenStaticData {\n     pub hover: Option<HoverResult>,\n     pub definition: Option<FileRange>,\n     pub references: Vec<ReferenceData>,\n+    pub moniker: Option<MonikerResult>,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -97,6 +99,7 @@ fn all_modules(db: &dyn HirDatabase) -> Vec<Module> {\n \n impl StaticIndex<'_> {\n     fn add_file(&mut self, file_id: FileId) {\n+        let current_crate = crate_for_file(self.db, file_id);\n         let folds = self.analysis.folding_ranges(file_id).unwrap();\n         let inlay_hints = self\n             .analysis\n@@ -143,6 +146,7 @@ impl StaticIndex<'_> {\n                         .try_to_nav(self.db)\n                         .map(|x| FileRange { file_id: x.file_id, range: x.focus_or_full_range() }),\n                     references: vec![],\n+                    moniker: current_crate.and_then(|cc| def_to_moniker(self.db, def, cc)),\n                 });\n                 self.def_map.insert(def, x);\n                 x\n@@ -206,6 +210,7 @@ mod tests {\n     use crate::{fixture, StaticIndex};\n     use ide_db::base_db::FileRange;\n     use std::collections::HashSet;\n+    use syntax::TextSize;\n \n     fn check_all_ranges(ra_fixture: &str) {\n         let (analysis, ranges) = fixture::annotations_without_marker(ra_fixture);\n@@ -231,6 +236,10 @@ mod tests {\n         let mut range_set: HashSet<_> = ranges.iter().map(|x| x.0).collect();\n         for (_, t) in s.tokens.iter() {\n             if let Some(x) = t.definition {\n+                if x.range.start() == TextSize::from(0) {\n+                    // ignore definitions that are whole of file\n+                    continue;\n+                }\n                 if !range_set.contains(&x) {\n                     panic!(\"additional definition {:?}\", x);\n                 }\n@@ -262,6 +271,28 @@ enum E { X(Foo) }\n         );\n     }\n \n+    #[test]\n+    fn multi_crate() {\n+        check_definitions(\n+            r#\"\n+//- /main.rs crate:main deps:foo\n+\n+\n+use foo::func;\n+\n+fn main() {\n+ //^^^^\n+    func();\n+}\n+//- /foo/lib.rs crate:foo\n+\n+pub func() {\n+\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn derives() {\n         check_all_ranges("}, {"sha": "c2cf3c4ce3aeec6319f17c5b990a268287b7f34f", "filename": "crates/project_model/src/cargo_workspace.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fcargo_workspace.rs?ref=393cbd0982707a20b0ef40277385737f8de1833e", "patch": "@@ -130,6 +130,8 @@ pub struct PackageData {\n     pub version: semver::Version,\n     /// Name as given in the `Cargo.toml`\n     pub name: String,\n+    /// Repository as given in the `Cargo.toml`\n+    pub repository: Option<String>,\n     /// Path containing the `Cargo.toml`\n     pub manifest: ManifestPath,\n     /// Targets provided by the crate (lib, bin, example, test, ...)\n@@ -146,9 +148,9 @@ pub struct PackageData {\n     pub features: FxHashMap<String, Vec<String>>,\n     /// List of features enabled on this package\n     pub active_features: Vec<String>,\n-    // String representation of package id\n+    /// String representation of package id\n     pub id: String,\n-    // The contents of [package.metadata.rust-analyzer]\n+    /// The contents of [package.metadata.rust-analyzer]\n     pub metadata: RustAnalyzerPackageMetaData,\n }\n \n@@ -302,7 +304,14 @@ impl CargoWorkspace {\n         meta.packages.sort_by(|a, b| a.id.cmp(&b.id));\n         for meta_pkg in &meta.packages {\n             let cargo_metadata::Package {\n-                id, edition, name, manifest_path, version, metadata, ..\n+                id,\n+                edition,\n+                name,\n+                manifest_path,\n+                version,\n+                metadata,\n+                repository,\n+                ..\n             } = meta_pkg;\n             let meta = from_value::<PackageMetadata>(metadata.clone()).unwrap_or_default();\n             let edition = edition.parse::<Edition>().unwrap_or_else(|err| {\n@@ -323,6 +332,7 @@ impl CargoWorkspace {\n                 is_local,\n                 is_member,\n                 edition,\n+                repository: repository.clone(),\n                 dependencies: Vec::new(),\n                 features: meta_pkg.features.clone().into_iter().collect(),\n                 active_features: Vec::new(),"}, {"sha": "a3c5ac167406d7f7ca8641f0d1aa3b087d4201d4", "filename": "crates/project_model/src/project_json.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fproject_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fproject_json.rs?ref=393cbd0982707a20b0ef40277385737f8de1833e", "patch": "@@ -39,6 +39,7 @@ pub struct Crate {\n     pub(crate) include: Vec<AbsPathBuf>,\n     pub(crate) exclude: Vec<AbsPathBuf>,\n     pub(crate) is_proc_macro: bool,\n+    pub(crate) repository: Option<String>,\n }\n \n impl ProjectJson {\n@@ -99,6 +100,7 @@ impl ProjectJson {\n                         include,\n                         exclude,\n                         is_proc_macro: crate_data.is_proc_macro,\n+                        repository: crate_data.repository,\n                     }\n                 })\n                 .collect::<Vec<_>>(),\n@@ -142,6 +144,8 @@ struct CrateData {\n     source: Option<CrateSource>,\n     #[serde(default)]\n     is_proc_macro: bool,\n+    #[serde(default)]\n+    repository: Option<String>,\n }\n \n #[derive(Deserialize, Debug, Clone)]"}, {"sha": "edf26736618d18529c6466b299227fab6886821e", "filename": "crates/project_model/src/tests.rs", "status": "modified", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fproject_model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fproject_model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Ftests.rs?ref=393cbd0982707a20b0ef40277385737f8de1833e", "patch": "@@ -173,6 +173,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: None,\n+                        },\n                     },\n                     CrateId(\n                         5,\n@@ -242,6 +245,11 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n+                        },\n                     },\n                     CrateId(\n                         2,\n@@ -311,6 +319,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: None,\n+                        },\n                     },\n                     CrateId(\n                         4,\n@@ -370,6 +381,11 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n+                        },\n                     },\n                     CrateId(\n                         1,\n@@ -439,6 +455,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: None,\n+                        },\n                     },\n                     CrateId(\n                         6,\n@@ -498,6 +517,11 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n+                        },\n                     },\n                     CrateId(\n                         3,\n@@ -567,6 +591,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: None,\n+                        },\n                     },\n                 },\n             }\"#]],\n@@ -651,6 +678,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: None,\n+                        },\n                     },\n                     CrateId(\n                         5,\n@@ -720,6 +750,11 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n+                        },\n                     },\n                     CrateId(\n                         2,\n@@ -791,6 +826,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: None,\n+                        },\n                     },\n                     CrateId(\n                         4,\n@@ -850,6 +888,11 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n+                        },\n                     },\n                     CrateId(\n                         1,\n@@ -921,6 +964,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: None,\n+                        },\n                     },\n                     CrateId(\n                         6,\n@@ -980,6 +1026,11 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n+                        },\n                     },\n                     CrateId(\n                         3,\n@@ -1051,6 +1102,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: None,\n+                        },\n                     },\n                 },\n             }\"#]],\n@@ -1126,6 +1180,9 @@ fn cargo_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: None,\n+                        },\n                     },\n                     CrateId(\n                         5,\n@@ -1197,6 +1254,11 @@ fn cargo_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n+                        },\n                     },\n                     CrateId(\n                         2,\n@@ -1268,6 +1330,9 @@ fn cargo_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: None,\n+                        },\n                     },\n                     CrateId(\n                         4,\n@@ -1329,6 +1394,11 @@ fn cargo_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n+                        },\n                     },\n                     CrateId(\n                         1,\n@@ -1400,6 +1470,9 @@ fn cargo_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: None,\n+                        },\n                     },\n                     CrateId(\n                         6,\n@@ -1461,6 +1534,11 @@ fn cargo_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n+                        },\n                     },\n                     CrateId(\n                         3,\n@@ -1532,6 +1610,9 @@ fn cargo_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: None,\n+                        },\n                     },\n                 },\n             }\"#]],\n@@ -1583,6 +1664,7 @@ fn rust_project_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: Lang,\n                     },\n                     CrateId(\n                         10,\n@@ -1611,6 +1693,7 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n+                        origin: Lang,\n                     },\n                     CrateId(\n                         7,\n@@ -1639,6 +1722,7 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n+                        origin: Lang,\n                     },\n                     CrateId(\n                         4,\n@@ -1677,6 +1761,7 @@ fn rust_project_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: Lang,\n                     },\n                     CrateId(\n                         1,\n@@ -1705,6 +1790,7 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n+                        origin: Lang,\n                     },\n                     CrateId(\n                         11,\n@@ -1770,6 +1856,9 @@ fn rust_project_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: CratesIo {\n+                            repo: None,\n+                        },\n                     },\n                     CrateId(\n                         8,\n@@ -1798,6 +1887,7 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n+                        origin: Lang,\n                     },\n                     CrateId(\n                         5,\n@@ -1826,6 +1916,7 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n+                        origin: Lang,\n                     },\n                     CrateId(\n                         2,\n@@ -1854,6 +1945,7 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n+                        origin: Lang,\n                     },\n                     CrateId(\n                         9,\n@@ -1882,6 +1974,7 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n+                        origin: Lang,\n                     },\n                     CrateId(\n                         6,\n@@ -1992,6 +2085,7 @@ fn rust_project_hello_world_project_model() {\n                             },\n                         ],\n                         proc_macro: [],\n+                        origin: Lang,\n                     },\n                     CrateId(\n                         3,\n@@ -2020,6 +2114,7 @@ fn rust_project_hello_world_project_model() {\n                         },\n                         dependencies: [],\n                         proc_macro: [],\n+                        origin: Lang,\n                     },\n                 },\n             }\"#]],"}, {"sha": "0335f8b1746247c6ca7a13d7040ba358ca03f0b8", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=393cbd0982707a20b0ef40277385737f8de1833e", "patch": "@@ -6,7 +6,8 @@ use std::{collections::VecDeque, fmt, fs, process::Command};\n \n use anyhow::{format_err, Context, Result};\n use base_db::{\n-    CrateDisplayName, CrateGraph, CrateId, CrateName, Dependency, Edition, Env, FileId, ProcMacro,\n+    CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency, Edition, Env,\n+    FileId, ProcMacro,\n };\n use cfg::{CfgDiff, CfgOptions};\n use paths::{AbsPath, AbsPathBuf};\n@@ -473,6 +474,11 @@ fn project_json_to_crate_graph(\n                     cfg_options,\n                     env,\n                     proc_macro.unwrap_or_default(),\n+                    if krate.display_name.is_some() {\n+                        CrateOrigin::CratesIo { repo: krate.repository.clone() }\n+                    } else {\n+                        CrateOrigin::Unknown\n+                    },\n                 ),\n             )\n         })\n@@ -681,6 +687,7 @@ fn detached_files_to_crate_graph(\n             cfg_options.clone(),\n             Env::default(),\n             Vec::new(),\n+            CrateOrigin::Unknown,\n         );\n \n         public_deps.add(detached_file_crate, &mut crate_graph);\n@@ -821,7 +828,6 @@ fn add_target_crate_root(\n             .iter()\n             .map(|feat| CfgFlag::KeyValue { key: \"feature\".into(), value: feat.0.into() }),\n     );\n-\n     crate_graph.add_crate_root(\n         file_id,\n         edition,\n@@ -831,6 +837,7 @@ fn add_target_crate_root(\n         potential_cfg_options,\n         env,\n         proc_macro,\n+        CrateOrigin::CratesIo { repo: pkg.repository.clone() },\n     )\n }\n \n@@ -874,6 +881,7 @@ fn sysroot_to_crate_graph(\n                 cfg_options.clone(),\n                 env,\n                 proc_macro,\n+                CrateOrigin::Lang,\n             );\n             Some((krate, crate_id))\n         })"}, {"sha": "b9bb335b05dbb712bbecf19e1b18098cd4f7eeed", "filename": "crates/rust-analyzer/src/cli/lsif.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/393cbd0982707a20b0ef40277385737f8de1833e/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Flsif.rs?ref=393cbd0982707a20b0ef40277385737f8de1833e", "patch": "@@ -5,8 +5,8 @@ use std::env;\n use std::time::Instant;\n \n use ide::{\n-    Analysis, FileId, FileRange, RootDatabase, StaticIndex, StaticIndexedFile, TokenId,\n-    TokenStaticData,\n+    Analysis, FileId, FileRange, MonikerKind, PackageInformation, RootDatabase, StaticIndex,\n+    StaticIndexedFile, TokenId, TokenStaticData,\n };\n use ide_db::LineIndexDatabase;\n \n@@ -36,6 +36,7 @@ struct LsifManager<'a> {\n     token_map: HashMap<TokenId, Id>,\n     range_map: HashMap<FileRange, Id>,\n     file_map: HashMap<FileId, Id>,\n+    package_map: HashMap<PackageInformation, Id>,\n     analysis: &'a Analysis,\n     db: &'a RootDatabase,\n     vfs: &'a Vfs,\n@@ -57,6 +58,7 @@ impl LsifManager<'_> {\n             token_map: HashMap::default(),\n             range_map: HashMap::default(),\n             file_map: HashMap::default(),\n+            package_map: HashMap::default(),\n             analysis,\n             db,\n             vfs,\n@@ -92,6 +94,28 @@ impl LsifManager<'_> {\n         result_set_id\n     }\n \n+    fn get_package_id(&mut self, package_information: PackageInformation) -> Id {\n+        if let Some(x) = self.package_map.get(&package_information) {\n+            return *x;\n+        }\n+        let pi = package_information.clone();\n+        let result_set_id =\n+            self.add_vertex(lsif::Vertex::PackageInformation(lsif::PackageInformation {\n+                name: pi.name,\n+                manager: \"cargo\".to_string(),\n+                uri: None,\n+                content: None,\n+                repository: Some(lsif::Repository {\n+                    url: pi.repo,\n+                    r#type: \"git\".to_string(),\n+                    commit_id: None,\n+                }),\n+                version: Some(pi.version),\n+            }));\n+        self.package_map.insert(package_information, result_set_id);\n+        result_set_id\n+    }\n+\n     fn get_range_id(&mut self, id: FileRange) -> Id {\n         if let Some(x) = self.range_map.get(&id) {\n             return *x;\n@@ -146,6 +170,26 @@ impl LsifManager<'_> {\n                 out_v: result_set_id.into(),\n             }));\n         }\n+        if let Some(moniker) = token.moniker {\n+            let package_id = self.get_package_id(moniker.package_information);\n+            let moniker_id = self.add_vertex(lsif::Vertex::Moniker(lsp_types::Moniker {\n+                scheme: \"rust-analyzer\".to_string(),\n+                identifier: moniker.identifier.to_string(),\n+                unique: lsp_types::UniquenessLevel::Scheme,\n+                kind: Some(match moniker.kind {\n+                    MonikerKind::Import => lsp_types::MonikerKind::Import,\n+                    MonikerKind::Export => lsp_types::MonikerKind::Export,\n+                }),\n+            }));\n+            self.add_edge(lsif::Edge::PackageInformation(lsif::EdgeData {\n+                in_v: package_id.into(),\n+                out_v: moniker_id.into(),\n+            }));\n+            self.add_edge(lsif::Edge::Moniker(lsif::EdgeData {\n+                in_v: moniker_id.into(),\n+                out_v: result_set_id.into(),\n+            }));\n+        }\n         if let Some(def) = token.definition {\n             let result_id = self.add_vertex(lsif::Vertex::DefinitionResult);\n             let def_vertex = self.get_range_id(def);"}]}