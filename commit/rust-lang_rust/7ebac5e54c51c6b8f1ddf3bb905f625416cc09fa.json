{"sha": "7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYmFjNWU1NGM1MWM2YjhmMWRkZjNiYjkwNWY2MjU0MTZjYzA5ZmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-15T18:34:26Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-06-15T18:34:26Z"}, "message": "internal: switch some tests to minicore", "tree": {"sha": "1eb45c7a221654c7da7ac3baebbb6deb02271593", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eb45c7a221654c7da7ac3baebbb6deb02271593"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa", "html_url": "https://github.com/rust-lang/rust/commit/7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "047520153878ade5b0136bc151fc53a43419b1c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/047520153878ade5b0136bc151fc53a43419b1c9", "html_url": "https://github.com/rust-lang/rust/commit/047520153878ade5b0136bc151fc53a43419b1c9"}], "stats": {"total": 137, "additions": 75, "deletions": 62}, "files": [{"sha": "713b74165c1517a5186c5dfdec300d64e9b151fb", "filename": "crates/hir_ty/src/tests/coercion.rs", "status": "modified", "additions": 32, "deletions": 33, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fcoercion.rs?ref=7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa", "patch": "@@ -426,15 +426,15 @@ fn coerce_autoderef() {\n #[test]\n fn coerce_autoderef_generic() {\n     check_infer_with_mismatches(\n-        r\"\n-        struct Foo;\n-        fn takes_ref<T>(x: &T) -> T { *x }\n-        fn test() {\n-            takes_ref(&Foo);\n-            takes_ref(&&Foo);\n-            takes_ref(&&&Foo);\n-        }\n-        \",\n+        r#\"\n+struct Foo;\n+fn takes_ref<T>(x: &T) -> T { *x }\n+fn test() {\n+    takes_ref(&Foo);\n+    takes_ref(&&Foo);\n+    takes_ref(&&&Foo);\n+}\n+\"#,\n         expect![[r\"\n             28..29 'x': &T\n             40..46 '{ *x }': T\n@@ -464,30 +464,29 @@ fn coerce_autoderef_generic() {\n fn coerce_autoderef_block() {\n     check_infer_with_mismatches(\n         r#\"\n-        struct String {}\n-        #[lang = \"deref\"]\n-        trait Deref { type Target; }\n-        impl Deref for String { type Target = str; }\n-        fn takes_ref_str(x: &str) {}\n-        fn returns_string() -> String { loop {} }\n-        fn test() {\n-            takes_ref_str(&{ returns_string() });\n-        }\n-        \"#,\n-        expect![[r\"\n-            126..127 'x': &str\n-            135..137 '{}': ()\n-            168..179 '{ loop {} }': String\n-            170..177 'loop {}': !\n-            175..177 '{}': ()\n-            190..235 '{     ... }); }': ()\n-            196..209 'takes_ref_str': fn takes_ref_str(&str)\n-            196..232 'takes_...g() })': ()\n-            210..231 '&{ ret...ng() }': &String\n-            211..231 '{ retu...ng() }': String\n-            213..227 'returns_string': fn returns_string() -> String\n-            213..229 'return...ring()': String\n-        \"]],\n+//- minicore: deref\n+struct String {}\n+impl core::ops::Deref for String { type Target = str; }\n+fn takes_ref_str(x: &str) {}\n+fn returns_string() -> String { loop {} }\n+fn test() {\n+    takes_ref_str(&{ returns_string() });\n+}\n+\"#,\n+        expect![[r#\"\n+            90..91 'x': &str\n+            99..101 '{}': ()\n+            132..143 '{ loop {} }': String\n+            134..141 'loop {}': !\n+            139..141 '{}': ()\n+            154..199 '{     ... }); }': ()\n+            160..173 'takes_ref_str': fn takes_ref_str(&str)\n+            160..196 'takes_...g() })': ()\n+            174..195 '&{ ret...ng() }': &String\n+            175..195 '{ retu...ng() }': String\n+            177..191 'returns_string': fn returns_string() -> String\n+            177..193 'return...ring()': String\n+        \"#]],\n     );\n }\n "}, {"sha": "79108054c1b2891e05fa88d324811bfa28a1e448", "filename": "crates/hir_ty/src/tests/method_resolution.rs", "status": "modified", "additions": 18, "deletions": 26, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fmethod_resolution.rs?ref=7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa", "patch": "@@ -780,10 +780,7 @@ fn test() { (&S).foo(); }\n fn method_resolution_unsize_array() {\n     check_types(\n         r#\"\n-#[lang = \"slice\"]\n-impl<T> [T] {\n-    fn len(&self) -> usize { loop {} }\n-}\n+//- minicore: slice\n fn test() {\n     let a = [1, 2, 3];\n     a.len();\n@@ -1178,11 +1175,7 @@ fn main() {\n fn autoderef_visibility_field() {\n     check_infer(\n         r#\"\n-#[lang = \"deref\"]\n-pub trait Deref {\n-    type Target;\n-    fn deref(&self) -> &Self::Target;\n-}\n+//- minicore: deref\n mod a {\n     pub struct Foo(pub char);\n     pub struct Bar(i32);\n@@ -1191,7 +1184,7 @@ mod a {\n             Self(0)\n         }\n     }\n-    impl super::Deref for Bar {\n+    impl core::ops::Deref for Bar {\n         type Target = Foo;\n         fn deref(&self) -> &Foo {\n             &Foo('z')\n@@ -1205,22 +1198,21 @@ mod b {\n }\n         \"#,\n         expect![[r#\"\n-            67..71 'self': &Self\n-            200..231 '{     ...     }': Bar\n-            214..218 'Self': Bar(i32) -> Bar\n-            214..221 'Self(0)': Bar\n-            219..220 '0': i32\n-            315..319 'self': &Bar\n-            329..362 '{     ...     }': &Foo\n-            343..352 '&Foo('z')': &Foo\n-            344..347 'Foo': Foo(char) -> Foo\n-            344..352 'Foo('z')': Foo\n-            348..351 ''z'': char\n-            392..439 '{     ...     }': ()\n-            406..407 'x': char\n-            410..428 'super:...r::new': fn new() -> Bar\n-            410..430 'super:...:new()': Bar\n-            410..432 'super:...ew().0': char\n+            107..138 '{     ...     }': Bar\n+            121..125 'Self': Bar(i32) -> Bar\n+            121..128 'Self(0)': Bar\n+            126..127 '0': i32\n+            226..230 'self': &Bar\n+            240..273 '{     ...     }': &Foo\n+            254..263 '&Foo('z')': &Foo\n+            255..258 'Foo': Foo(char) -> Foo\n+            255..263 'Foo('z')': Foo\n+            259..262 ''z'': char\n+            303..350 '{     ...     }': ()\n+            317..318 'x': char\n+            321..339 'super:...r::new': fn new() -> Bar\n+            321..341 'super:...:new()': Bar\n+            321..343 'super:...ew().0': char\n         \"#]],\n     )\n }"}, {"sha": "a61459f6d9318f66b63774f7b062ac64b391a2f7", "filename": "crates/test_utils/src/minicore.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa/crates%2Ftest_utils%2Fsrc%2Fminicore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Fminicore.rs?ref=7ebac5e54c51c6b8f1ddf3bb905f625416cc09fa", "patch": "@@ -9,7 +9,9 @@\n //!\n //! Available flags:\n //!     sized:\n+//!     slice:\n //!     unsize: sized\n+//!     deref: sized\n //!     coerce_unsized: unsize\n \n pub mod marker {\n@@ -27,8 +29,8 @@ pub mod marker {\n }\n \n pub mod ops {\n+    // region:coerce_unsized\n     mod unsize {\n-        // region:coerce_unsized\n         use crate::marker::Unsize;\n \n         #[lang = \"coerce_unsized\"]\n@@ -45,11 +47,31 @@ pub mod ops {\n         impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n         impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *mut T {}\n         impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n-        // endregion:coerce_unsized\n     }\n+    pub use self::unsize::CoerceUnsized;\n+    // endregion:coerce_unsized\n \n-    pub use self::unsize::CoerceUnsized; // :coerce_unsized\n+    // region:deref\n+    mod deref {\n+        #[lang = \"deref\"]\n+        pub trait Deref {\n+            #[lang = \"deref_target\"]\n+            type Target: ?Sized;\n+            fn deref(&self) -> &Self::Target;\n+        }\n+    }\n+    pub use self::deref::Deref;\n+    // endregion:deref\n+}\n+\n+// region:slice\n+pub mod slice {\n+    #[lang = \"slice\"]\n+    impl<T> [T] {\n+        pub fn len(&self) -> usize { loop {} }\n+    }\n }\n+// endregion:slice\n \n pub mod prelude {\n     pub mod v1 {"}]}