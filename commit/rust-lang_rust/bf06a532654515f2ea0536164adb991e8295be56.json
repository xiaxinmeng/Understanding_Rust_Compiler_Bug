{"sha": "bf06a532654515f2ea0536164adb991e8295be56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMDZhNTMyNjU0NTE1ZjJlYTA1MzYxNjRhZGI5OTFlODI5NWJlNTY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-03-03T05:20:26Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-04-17T14:43:30Z"}, "message": "Make Handler more thread-safe", "tree": {"sha": "59c598635aca7a019820b4151009d199a8029147", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59c598635aca7a019820b4151009d199a8029147"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf06a532654515f2ea0536164adb991e8295be56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf06a532654515f2ea0536164adb991e8295be56", "html_url": "https://github.com/rust-lang/rust/commit/bf06a532654515f2ea0536164adb991e8295be56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf06a532654515f2ea0536164adb991e8295be56/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8728c7a726f3e8854f5a80b474d1a8bacab10304", "url": "https://api.github.com/repos/rust-lang/rust/commits/8728c7a726f3e8854f5a80b474d1a8bacab10304", "html_url": "https://github.com/rust-lang/rust/commit/8728c7a726f3e8854f5a80b474d1a8bacab10304"}], "stats": {"total": 71, "additions": 38, "deletions": 33}, "files": [{"sha": "2d7a256a369f76cd9ea28a3af87164bf6a9a631a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf06a532654515f2ea0536164adb991e8295be56/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf06a532654515f2ea0536164adb991e8295be56/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=bf06a532654515f2ea0536164adb991e8295be56", "patch": "@@ -26,7 +26,7 @@ use util::nodemap::{FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n use util::common::ProfileQueriesMsg;\n \n-use rustc_data_structures::sync::{Lrc, Lock, LockCell, OneThread, Once, RwLock};\n+use rustc_data_structures::sync::{self, Lrc, Lock, LockCell, OneThread, Once, RwLock};\n \n use syntax::ast::NodeId;\n use errors::{self, DiagnosticBuilder, DiagnosticId};\n@@ -929,7 +929,7 @@ impl Session {\n     }\n \n     pub fn teach(&self, code: &DiagnosticId) -> bool {\n-        self.opts.debugging_opts.teach && !self.parse_sess.span_diagnostic.code_emitted(code)\n+        self.opts.debugging_opts.teach && self.parse_sess.span_diagnostic.must_teach(code)\n     }\n \n     /// Are we allowed to use features from the Rust 2018 edition?\n@@ -983,7 +983,7 @@ pub fn build_session_with_codemap(\n \n     let external_macro_backtrace = sopts.debugging_opts.external_macro_backtrace;\n \n-    let emitter: Box<dyn Emitter> =\n+    let emitter: Box<dyn Emitter + sync::Send> =\n         match (sopts.error_format, emitter_dest) {\n             (config::ErrorOutputType::HumanReadable(color_config), None) => Box::new(\n                 EmitterWriter::stderr(\n@@ -1188,7 +1188,7 @@ pub enum IncrCompSession {\n }\n \n pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n-    let emitter: Box<dyn Emitter> = match output {\n+    let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, None, false, false))\n         }\n@@ -1203,7 +1203,7 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n }\n \n pub fn early_warn(output: config::ErrorOutputType, msg: &str) {\n-    let emitter: Box<dyn Emitter> = match output {\n+    let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(color_config) => {\n             Box::new(EmitterWriter::stderr(color_config, None, false, false))\n         }"}, {"sha": "04f6503d92dd89bc38e7ef3d6461617fb3d748a1", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf06a532654515f2ea0536164adb991e8295be56/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf06a532654515f2ea0536164adb991e8295be56/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=bf06a532654515f2ea0536164adb991e8295be56", "patch": "@@ -28,7 +28,7 @@ use rustc_metadata::cstore::CStore;\n use rustc::hir::map as hir_map;\n use rustc::session::{self, config};\n use rustc::session::config::{OutputFilenames, OutputTypes};\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{self, Lrc};\n use syntax;\n use syntax::ast;\n use syntax::abi::Abi;\n@@ -88,13 +88,13 @@ impl Emitter for ExpectErrorEmitter {\n     }\n }\n \n-fn errors(msgs: &[&str]) -> (Box<Emitter + Send>, usize) {\n+fn errors(msgs: &[&str]) -> (Box<Emitter + sync::Send>, usize) {\n     let v = msgs.iter().map(|m| m.to_string()).collect();\n-    (box ExpectErrorEmitter { messages: v } as Box<Emitter + Send>, msgs.len())\n+    (box ExpectErrorEmitter { messages: v } as Box<Emitter + sync::Send>, msgs.len())\n }\n \n fn test_env<F>(source_string: &str,\n-               args: (Box<Emitter + Send>, usize),\n+               args: (Box<Emitter + sync::Send>, usize),\n                body: F)\n     where F: FnOnce(Env)\n {\n@@ -104,7 +104,7 @@ fn test_env<F>(source_string: &str,\n }\n \n fn test_env_impl<F>(source_string: &str,\n-                    (emitter, expected_err_count): (Box<Emitter + Send>, usize),\n+                    (emitter, expected_err_count): (Box<Emitter + sync::Send>, usize),\n                     body: F)\n     where F: FnOnce(Env)\n {"}, {"sha": "ce3efef08cc4234f992590284732635140f8302c", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 26, "deletions": 21, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/bf06a532654515f2ea0536164adb991e8295be56/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf06a532654515f2ea0536164adb991e8295be56/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=bf06a532654515f2ea0536164adb991e8295be56", "patch": "@@ -33,12 +33,12 @@ use self::Level::*;\n \n use emitter::{Emitter, EmitterWriter};\n \n-use rustc_data_structures::sync::{self, Lrc};\n+use rustc_data_structures::sync::{self, Lrc, Lock, LockCell};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stable_hasher::StableHasher;\n \n use std::borrow::Cow;\n-use std::cell::{RefCell, Cell};\n+use std::cell::Cell;\n use std::{error, fmt};\n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering::SeqCst;\n@@ -262,19 +262,22 @@ pub struct Handler {\n     pub flags: HandlerFlags,\n \n     err_count: AtomicUsize,\n-    emitter: RefCell<Box<Emitter>>,\n-    continue_after_error: Cell<bool>,\n-    delayed_span_bug: RefCell<Option<Diagnostic>>,\n+    emitter: Lock<Box<Emitter + sync::Send>>,\n+    continue_after_error: LockCell<bool>,\n+    delayed_span_bug: Lock<Option<Diagnostic>>,\n \n     // This set contains the `DiagnosticId` of all emitted diagnostics to avoid\n     // emitting the same diagnostic with extended help (`--teach`) twice, which\n     // would be uneccessary repetition.\n-    tracked_diagnostic_codes: RefCell<FxHashSet<DiagnosticId>>,\n+    taught_diagnostics: Lock<FxHashSet<DiagnosticId>>,\n+\n+    /// Used to suggest rustc --explain <error code>\n+    emitted_diagnostic_codes: Lock<FxHashSet<DiagnosticId>>,\n \n     // This set contains a hash of every diagnostic that has been emitted by\n     // this handler. These hashes is used to avoid emitting the same error\n     // twice.\n-    emitted_diagnostics: RefCell<FxHashSet<u128>>,\n+    emitted_diagnostics: Lock<FxHashSet<u128>>,\n }\n \n fn default_track_diagnostic(_: &Diagnostic) {}\n@@ -315,7 +318,7 @@ impl Handler {\n \n     pub fn with_emitter(can_emit_warnings: bool,\n                         treat_err_as_bug: bool,\n-                        e: Box<Emitter>)\n+                        e: Box<Emitter + sync::Send>)\n                         -> Handler {\n         Handler::with_emitter_and_flags(\n             e,\n@@ -326,15 +329,16 @@ impl Handler {\n             })\n     }\n \n-    pub fn with_emitter_and_flags(e: Box<Emitter>, flags: HandlerFlags) -> Handler {\n+    pub fn with_emitter_and_flags(e: Box<Emitter + sync::Send>, flags: HandlerFlags) -> Handler {\n         Handler {\n             flags,\n             err_count: AtomicUsize::new(0),\n-            emitter: RefCell::new(e),\n-            continue_after_error: Cell::new(true),\n-            delayed_span_bug: RefCell::new(None),\n-            tracked_diagnostic_codes: RefCell::new(FxHashSet()),\n-            emitted_diagnostics: RefCell::new(FxHashSet()),\n+            emitter: Lock::new(e),\n+            continue_after_error: LockCell::new(true),\n+            delayed_span_bug: Lock::new(None),\n+            taught_diagnostics: Lock::new(FxHashSet()),\n+            emitted_diagnostic_codes: Lock::new(FxHashSet()),\n+            emitted_diagnostics: Lock::new(FxHashSet()),\n         }\n     }\n \n@@ -348,7 +352,7 @@ impl Handler {\n     /// tools that want to reuse a `Parser` cleaning the previously emitted diagnostics as well as\n     /// the overall count of emitted error diagnostics.\n     pub fn reset_err_count(&self) {\n-        self.emitted_diagnostics.replace(FxHashSet());\n+        *self.emitted_diagnostics.borrow_mut() = FxHashSet();\n         self.err_count.store(0, SeqCst);\n     }\n \n@@ -568,10 +572,10 @@ impl Handler {\n         let _ = self.fatal(&s);\n \n         let can_show_explain = self.emitter.borrow().should_show_explain();\n-        let are_there_diagnostics = !self.tracked_diagnostic_codes.borrow().is_empty();\n+        let are_there_diagnostics = !self.emitted_diagnostic_codes.borrow().is_empty();\n         if can_show_explain && are_there_diagnostics {\n             let mut error_codes =\n-                self.tracked_diagnostic_codes.borrow()\n+                self.emitted_diagnostic_codes.borrow()\n                                              .clone()\n                                              .into_iter()\n                                              .filter_map(|x| match x {\n@@ -630,12 +634,13 @@ impl Handler {\n         }\n     }\n \n-    /// `true` if a diagnostic with this code has already been emitted in this handler.\n+    /// `true` if we haven't taught a diagnostic with this code already.\n+    /// The caller must then teach the user about such a diagnostic.\n     ///\n     /// Used to suppress emitting the same error multiple times with extended explanation when\n     /// calling `-Zteach`.\n-    pub fn code_emitted(&self, code: &DiagnosticId) -> bool {\n-        self.tracked_diagnostic_codes.borrow().contains(code)\n+    pub fn must_teach(&self, code: &DiagnosticId) -> bool {\n+        self.taught_diagnostics.borrow_mut().insert(code.clone())\n     }\n \n     pub fn force_print_db(&self, mut db: DiagnosticBuilder) {\n@@ -651,7 +656,7 @@ impl Handler {\n         });\n \n         if let Some(ref code) = diagnostic.code {\n-            self.tracked_diagnostic_codes.borrow_mut().insert(code.clone());\n+            self.emitted_diagnostic_codes.borrow_mut().insert(code.clone());\n         }\n \n         let diagnostic_hash = {"}, {"sha": "9fb024fd906099859e86becb2d3136af9fc09736", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bf06a532654515f2ea0536164adb991e8295be56/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf06a532654515f2ea0536164adb991e8295be56/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=bf06a532654515f2ea0536164adb991e8295be56", "patch": "@@ -35,7 +35,7 @@ use errors::emitter::{Emitter, EmitterWriter};\n \n use std::cell::{RefCell, Cell};\n use std::mem;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{self, Lrc};\n use std::rc::Rc;\n use std::path::PathBuf;\n \n@@ -163,7 +163,7 @@ pub fn run_core(search_paths: SearchPaths,\n     };\n \n     let codemap = Lrc::new(codemap::CodeMap::new(sessopts.file_path_mapping()));\n-    let emitter: Box<dyn Emitter> = match error_format {\n+    let emitter: Box<dyn Emitter + sync::Send> = match error_format {\n         ErrorOutputType::HumanReadable(color_config) => Box::new(\n             EmitterWriter::stderr(\n                 color_config,"}]}