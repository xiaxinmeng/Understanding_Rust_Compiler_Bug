{"sha": "28ce3e8a55b21a285f7075612d140a44b42eb889", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4Y2UzZThhNTViMjFhMjg1ZjcwNzU2MTJkMTQwYTQ0YjQyZWI4ODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-01T15:57:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-01T15:57:32Z"}, "message": "Auto merge of #35163 - sanxiyn:rollup, r=sanxiyn\n\nRollup of 8 pull requests\n\n- Successful merges: #34802, #35033, #35085, #35114, #35134, #35140, #35141, #35157\n- Failed merges:", "tree": {"sha": "620b274d225d0b64e48494fb234f16d43a2469c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/620b274d225d0b64e48494fb234f16d43a2469c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/28ce3e8a55b21a285f7075612d140a44b42eb889", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/28ce3e8a55b21a285f7075612d140a44b42eb889", "html_url": "https://github.com/rust-lang/rust/commit/28ce3e8a55b21a285f7075612d140a44b42eb889", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/28ce3e8a55b21a285f7075612d140a44b42eb889/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c1612c62aa59e40cf1a4bddde943938e0147eec", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c1612c62aa59e40cf1a4bddde943938e0147eec", "html_url": "https://github.com/rust-lang/rust/commit/2c1612c62aa59e40cf1a4bddde943938e0147eec"}, {"sha": "5fb13cf13fd76cc475816d12f729d4df7bd12f33", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fb13cf13fd76cc475816d12f729d4df7bd12f33", "html_url": "https://github.com/rust-lang/rust/commit/5fb13cf13fd76cc475816d12f729d4df7bd12f33"}], "stats": {"total": 846, "additions": 372, "deletions": 474}, "files": [{"sha": "0abd858d8228baaf5daa76454e4fa76185154f39", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -7,6 +7,7 @@ services:\n # our configure script, so disable auto submodule management.\n git:\n   submodules: false\n+  depth: 1\n \n before_install:\n   - docker build -t rust -f src/etc/Dockerfile src/etc"}, {"sha": "83d54789ff3572a12b8ec6ae4ade1c6fa9d638a0", "filename": "src/etc/Dockerfile", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Fetc%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Fetc%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2FDockerfile?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -23,11 +23,5 @@ RUN apt-get update && apt-get -y install \\\n     libedit-dev zlib1g-dev \\\n     llvm-3.7-tools cmake\n \n-# When we compile compiler-rt we pass it the llvm-config we just installed on\n-# the system, but unfortunately it doesn't infer correctly where\n-# LLVMConfig.cmake is so we need to coerce it a bit...\n-RUN mkdir -p /usr/lib/llvm-3.7/build/share/llvm\n-RUN ln -s /usr/share/llvm-3.7/cmake /usr/lib/llvm-3.7/build/share/llvm/cmake\n-\n RUN mkdir /build\n WORKDIR /build"}, {"sha": "21387a1aa95543031fa403d3893c2a102f9afed1", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -49,7 +49,6 @@\n #![feature(specialization)]\n #![feature(staged_api)]\n #![feature(step_by)]\n-#![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]\n #![feature(unsafe_no_drop_flag)]"}, {"sha": "ff2b8cdea22789076a31416392827ecfee6ba742", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -577,15 +577,13 @@ impl<T> [T] {\n     ///\n     /// # Example\n     ///\n-    /// Print the slice two elements at a time (i.e. `[1,2]`,\n-    /// `[3,4]`, `[5]`):\n-    ///\n-    /// ```rust\n-    /// let v = &[1, 2, 3, 4, 5];\n-    ///\n-    /// for chunk in v.chunks(2) {\n-    ///     println!(\"{:?}\", chunk);\n-    /// }\n+    /// ```\n+    /// let slice = ['l', 'o', 'r', 'e', 'm'];\n+    /// let mut iter = slice.chunks(2);\n+    /// assert_eq!(iter.next().unwrap(), &['l', 'o']);\n+    /// assert_eq!(iter.next().unwrap(), &['r', 'e']);\n+    /// assert_eq!(iter.next().unwrap(), &['m']);\n+    /// assert!(iter.next().is_none());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]"}, {"sha": "9428b4096bfeceaa74fdd5ea61d50f1f518bbd7e", "filename": "src/libcoretest/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibcoretest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibcoretest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Flib.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -31,7 +31,6 @@\n #![feature(step_by)]\n #![feature(test)]\n #![feature(try_from)]\n-#![feature(unboxed_closures)]\n #![feature(unicode)]\n #![feature(unique)]\n "}, {"sha": "aded220c0cdfe6893c854a8c734a560606cd6bff", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -867,7 +867,7 @@ pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility) {\n     }\n }\n \n-#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Copy, Clone, RustcEncodable, RustcDecodable, Debug, PartialEq, Eq)]\n pub struct IdRange {\n     pub min: NodeId,\n     pub max: NodeId,\n@@ -893,6 +893,7 @@ impl IdRange {\n         self.min = cmp::min(self.min, id);\n         self.max = cmp::max(self.max, id + 1);\n     }\n+\n }\n \n "}, {"sha": "aed3613f44ed489328e3df2f1a6ae1013fafd684", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 57, "deletions": 5, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -32,6 +32,7 @@ use hir::print as pprust;\n \n use arena::TypedArena;\n use std::cell::RefCell;\n+use std::cmp;\n use std::io;\n use std::mem;\n \n@@ -127,7 +128,10 @@ impl<'ast> MapEntry<'ast> {\n             EntryStructCtor(id, _) => id,\n             EntryLifetime(id, _) => id,\n             EntryTyParam(id, _) => id,\n-            _ => return None\n+\n+            NotPresent |\n+            RootCrate |\n+            RootInlinedParent(_) => return None,\n         })\n     }\n \n@@ -196,6 +200,10 @@ pub struct Map<'ast> {\n     map: RefCell<Vec<MapEntry<'ast>>>,\n \n     definitions: RefCell<Definitions>,\n+\n+    /// All NodeIds that are numerically greater or equal to this value come\n+    /// from inlined items.\n+    local_node_id_watermark: NodeId,\n }\n \n impl<'ast> Map<'ast> {\n@@ -550,6 +558,13 @@ impl<'ast> Map<'ast> {\n         }\n     }\n \n+    pub fn expect_inlined_item(&self, id: NodeId) -> &'ast InlinedItem {\n+        match self.find_entry(id) {\n+            Some(RootInlinedParent(inlined_item)) => inlined_item,\n+            _ => bug!(\"expected inlined item, found {}\", self.node_to_string(id)),\n+        }\n+    }\n+\n     /// Returns the name associated with the given NodeId's AST.\n     pub fn name(&self, id: NodeId) -> Name {\n         match self.get(id) {\n@@ -649,6 +664,10 @@ impl<'ast> Map<'ast> {\n     pub fn node_to_user_string(&self, id: NodeId) -> String {\n         node_id_to_string(self, id, false)\n     }\n+\n+    pub fn is_inlined(&self, id: NodeId) -> bool {\n+        id >= self.local_node_id_watermark\n+    }\n }\n \n pub struct NodesMatchingSuffix<'a, 'ast:'a> {\n@@ -765,13 +784,37 @@ pub trait FoldOps {\n }\n \n /// A Folder that updates IDs and Span's according to fold_ops.\n-struct IdAndSpanUpdater<F> {\n-    fold_ops: F\n+pub struct IdAndSpanUpdater<F> {\n+    fold_ops: F,\n+    min_id_assigned: NodeId,\n+    max_id_assigned: NodeId,\n+}\n+\n+impl<F: FoldOps> IdAndSpanUpdater<F> {\n+    pub fn new(fold_ops: F) -> IdAndSpanUpdater<F> {\n+        IdAndSpanUpdater {\n+            fold_ops: fold_ops,\n+            min_id_assigned: ::std::u32::MAX,\n+            max_id_assigned: ::std::u32::MIN,\n+        }\n+    }\n+\n+    pub fn id_range(&self) -> intravisit::IdRange {\n+        intravisit::IdRange {\n+            min: self.min_id_assigned,\n+            max: self.max_id_assigned + 1,\n+        }\n+    }\n }\n \n impl<F: FoldOps> Folder for IdAndSpanUpdater<F> {\n     fn new_id(&mut self, id: NodeId) -> NodeId {\n-        self.fold_ops.new_id(id)\n+        let id = self.fold_ops.new_id(id);\n+\n+        self.min_id_assigned = cmp::min(self.min_id_assigned, id);\n+        self.max_id_assigned = cmp::max(self.max_id_assigned, id);\n+\n+        id\n     }\n \n     fn new_span(&mut self, span: Span) -> Span {\n@@ -802,11 +845,14 @@ pub fn map_crate<'ast>(forest: &'ast mut Forest,\n               entries, vector_length, (entries as f64 / vector_length as f64) * 100.);\n     }\n \n+    let local_node_id_watermark = map.len() as NodeId;\n+\n     Map {\n         forest: forest,\n         dep_graph: forest.dep_graph.clone(),\n         map: RefCell::new(map),\n         definitions: RefCell::new(definitions),\n+        local_node_id_watermark: local_node_id_watermark\n     }\n }\n \n@@ -818,7 +864,7 @@ pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n                                           ii: InlinedItem,\n                                           fold_ops: F)\n                                           -> &'ast InlinedItem {\n-    let mut fld = IdAndSpanUpdater { fold_ops: fold_ops };\n+    let mut fld = IdAndSpanUpdater::new(fold_ops);\n     let ii = match ii {\n         II::Item(i) => II::Item(i.map(|i| fld.fold_item(i))),\n         II::TraitItem(d, ti) => {\n@@ -835,6 +881,12 @@ pub fn map_decoded_item<'ast, F: FoldOps>(map: &Map<'ast>,\n     let ii = map.forest.inlined_items.alloc(ii);\n     let ii_parent_id = fld.new_id(DUMMY_NODE_ID);\n \n+    // Assert that the ii_parent_id is the last NodeId in our reserved range\n+    assert!(ii_parent_id == fld.max_id_assigned);\n+    // Assert that we did not violate the invariant that all inlined HIR items\n+    // have NodeIds greater than or equal to `local_node_id_watermark`\n+    assert!(fld.min_id_assigned >= map.local_node_id_watermark);\n+\n     let defs = &mut *map.definitions.borrow_mut();\n     let mut def_collector = DefCollector::extend(ii_parent_id,\n                                                  parent_def_path.clone(),"}, {"sha": "32344a7b9c8deb1485d2d5ac8e27c8102144c0c3", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -120,12 +120,6 @@ pub struct ChildItem {\n     pub vis: ty::Visibility,\n }\n \n-pub enum FoundAst<'ast> {\n-    Found(&'ast InlinedItem),\n-    FoundParent(DefId, &'ast hir::Item),\n-    NotFound,\n-}\n-\n #[derive(Copy, Clone, Debug)]\n pub struct ExternCrate {\n     /// def_id of an `extern crate` in the current crate that caused\n@@ -250,7 +244,10 @@ pub trait CrateStore<'tcx> {\n \n     // misc. metadata\n     fn maybe_get_item_ast<'a>(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n-                              -> FoundAst<'tcx>;\n+                              -> Option<(&'tcx InlinedItem, ast::NodeId)>;\n+    fn local_node_for_inlined_defid(&'tcx self, def_id: DefId) -> Option<ast::NodeId>;\n+    fn defid_for_inlined_node(&'tcx self, node_id: ast::NodeId) -> Option<DefId>;\n+\n     fn maybe_get_item_mir<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                               -> Option<Mir<'tcx>>;\n     fn is_item_mir_available(&self, def: DefId) -> bool;\n@@ -447,7 +444,16 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n \n     // misc. metadata\n     fn maybe_get_item_ast<'a>(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n-                              -> FoundAst<'tcx> { bug!(\"maybe_get_item_ast\") }\n+                              -> Option<(&'tcx InlinedItem, ast::NodeId)> {\n+        bug!(\"maybe_get_item_ast\")\n+    }\n+    fn local_node_for_inlined_defid(&'tcx self, def_id: DefId) -> Option<ast::NodeId> {\n+        bug!(\"local_node_for_inlined_defid\")\n+    }\n+    fn defid_for_inlined_node(&'tcx self, node_id: ast::NodeId) -> Option<DefId> {\n+        bug!(\"defid_for_inlined_node\")\n+    }\n+\n     fn maybe_get_item_mir<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n                               -> Option<Mir<'tcx>> { bug!(\"maybe_get_item_mir\") }\n     fn is_item_mir_available(&self, def: DefId) -> bool {"}, {"sha": "fd6578c2a2a0a91fe55c3589a9d6446aa539d6e1", "filename": "src/librustc_back/target/x86_64_rumprun_netbsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_rumprun_netbsd.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -12,6 +12,7 @@ use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n+    base.cpu = \"x86-64\".to_string();\n     base.pre_link_args.push(\"-m64\".to_string());\n     base.linker = \"x86_64-rumprun-netbsd-gcc\".to_string();\n     base.ar = \"x86_64-rumprun-netbsd-ar\".to_string();"}, {"sha": "38209655898156b61ba3392f90c0e743bb9ad242", "filename": "src/librustc_back/target/x86_64_unknown_bitrig.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_bitrig.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -12,6 +12,7 @@ use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::bitrig_base::opts();\n+    base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = 64;\n     base.pre_link_args.push(\"-m64\".to_string());\n "}, {"sha": "2d0b1e2a9330bac956cbfd18ed9d3efd8a57f4e6", "filename": "src/librustc_back/target/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_netbsd.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -12,6 +12,7 @@ use target::{Target, TargetResult};\n \n pub fn target() -> TargetResult {\n     let mut base = super::netbsd_base::opts();\n+    base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = 64;\n     base.pre_link_args.push(\"-m64\".to_string());\n "}, {"sha": "d424b57c938411168550c1e229c9ff022fca94bf", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -17,7 +17,7 @@ use self::EvalHint::*;\n \n use rustc::hir::map as ast_map;\n use rustc::hir::map::blocks::FnLikeNode;\n-use rustc::middle::cstore::{self, InlinedItem};\n+use rustc::middle::cstore::InlinedItem;\n use rustc::traits;\n use rustc::hir::def::{Def, PathResolution};\n use rustc::hir::def_id::DefId;\n@@ -142,13 +142,13 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         }\n         let mut used_substs = false;\n         let expr_ty = match tcx.sess.cstore.maybe_get_item_ast(tcx, def_id) {\n-            cstore::FoundAst::Found(&InlinedItem::Item(ref item)) => match item.node {\n+            Some((&InlinedItem::Item(ref item), _)) => match item.node {\n                 hir::ItemConst(ref ty, ref const_expr) => {\n                     Some((&**const_expr, tcx.ast_ty_to_prim_ty(ty)))\n                 },\n                 _ => None\n             },\n-            cstore::FoundAst::Found(&InlinedItem::TraitItem(trait_id, ref ti)) => match ti.node {\n+            Some((&InlinedItem::TraitItem(trait_id, ref ti), _)) => match ti.node {\n                 hir::ConstTraitItem(_, _) => {\n                     used_substs = true;\n                     if let Some(substs) = substs {\n@@ -163,7 +163,7 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 }\n                 _ => None\n             },\n-            cstore::FoundAst::Found(&InlinedItem::ImplItem(_, ref ii)) => match ii.node {\n+            Some((&InlinedItem::ImplItem(_, ref ii), _)) => match ii.node {\n                 hir::ImplItemKind::Const(ref ty, ref expr) => {\n                     Some((&**expr, tcx.ast_ty_to_prim_ty(ty)))\n                 },\n@@ -198,8 +198,8 @@ fn inline_const_fn_from_external_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     let fn_id = match tcx.sess.cstore.maybe_get_item_ast(tcx, def_id) {\n-        cstore::FoundAst::Found(&InlinedItem::Item(ref item)) => Some(item.id),\n-        cstore::FoundAst::Found(&InlinedItem::ImplItem(_, ref item)) => Some(item.id),\n+        Some((&InlinedItem::Item(ref item), _)) => Some(item.id),\n+        Some((&InlinedItem::ImplItem(_, ref item), _)) => Some(item.id),\n         _ => None\n     };\n     tcx.extern_const_fns.borrow_mut().insert(def_id,"}, {"sha": "f49d47fb0815407827c40bd6bd376d9ed35b5d1c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -31,7 +31,6 @@\n #![feature(set_stdio)]\n #![feature(staged_api)]\n #![feature(question_mark)]\n-#![feature(unboxed_closures)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "c39ad414492ed637fd0faa29134e7e504ccea3d7", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 42, "deletions": 9, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -88,8 +88,9 @@ pub fn encode_inlined_item(ecx: &e::EncodeContext,\n            rbml_w.writer.seek(SeekFrom::Current(0)));\n \n     // Folding could be avoided with a smarter encoder.\n-    let ii = simplify_ast(ii);\n+    let (ii, expected_id_range) = simplify_ast(ii);\n     let id_range = inlined_item_id_range(&ii);\n+    assert_eq!(expected_id_range, id_range);\n \n     rbml_w.start_tag(c::tag_ast as usize);\n     id_range.encode(rbml_w);\n@@ -186,6 +187,10 @@ impl<'a, 'b, 'tcx> DecodeContext<'a, 'b, 'tcx> {\n     pub fn tr_id(&self, id: ast::NodeId) -> ast::NodeId {\n         // from_id_range should be non-empty\n         assert!(!self.from_id_range.empty());\n+        // Make sure that translating the NodeId will actually yield a\n+        // meaningful result\n+        assert!(self.from_id_range.contains(id));\n+\n         // Use wrapping arithmetic because otherwise it introduces control flow.\n         // Maybe we should just have the control flow? -- aatch\n         (id.wrapping_sub(self.from_id_range.min).wrapping_add(self.to_id_range.min))\n@@ -279,9 +284,23 @@ fn encode_ast(rbml_w: &mut Encoder, item: &InlinedItem) {\n     rbml_w.end_tag();\n }\n \n-struct NestedItemsDropper;\n+struct NestedItemsDropper {\n+    id_range: IdRange\n+}\n \n impl Folder for NestedItemsDropper {\n+\n+    // The unit tests below run on HIR with NodeIds not properly assigned. That\n+    // causes an integer overflow. So we just don't track the id_range when\n+    // building the unit tests.\n+    #[cfg(not(test))]\n+    fn new_id(&mut self, id: ast::NodeId) -> ast::NodeId {\n+        // Record the range of NodeIds we are visiting, so we can do a sanity\n+        // check later\n+        self.id_range.add(id);\n+        id\n+    }\n+\n     fn fold_block(&mut self, blk: P<hir::Block>) -> P<hir::Block> {\n         blk.and_then(|hir::Block {id, stmts, expr, rules, span, ..}| {\n             let stmts_sans_items = stmts.into_iter().filter_map(|stmt| {\n@@ -322,10 +341,12 @@ impl Folder for NestedItemsDropper {\n // As it happens, trans relies on the fact that we do not export\n // nested items, as otherwise it would get confused when translating\n // inlined items.\n-fn simplify_ast(ii: InlinedItemRef) -> InlinedItem {\n-    let mut fld = NestedItemsDropper;\n+fn simplify_ast(ii: InlinedItemRef) -> (InlinedItem, IdRange) {\n+    let mut fld = NestedItemsDropper {\n+        id_range: IdRange::max()\n+    };\n \n-    match ii {\n+    let ii = match ii {\n         // HACK we're not dropping items.\n         InlinedItemRef::Item(i) => {\n             InlinedItem::Item(P(fold::noop_fold_item(i.clone(), &mut fld)))\n@@ -339,7 +360,9 @@ fn simplify_ast(ii: InlinedItemRef) -> InlinedItem {\n         InlinedItemRef::Foreign(i) => {\n             InlinedItem::Foreign(P(fold::noop_fold_foreign_item(i.clone(), &mut fld)))\n         }\n-    }\n+    };\n+\n+    (ii, fld.id_range)\n }\n \n fn decode_ast(item_doc: rbml::Doc) -> InlinedItem {\n@@ -361,8 +384,18 @@ impl tr for Def {\n         match *self {\n           Def::Fn(did) => Def::Fn(did.tr(dcx)),\n           Def::Method(did) => Def::Method(did.tr(dcx)),\n-          Def::SelfTy(opt_did, impl_id) => { Def::SelfTy(opt_did.map(|did| did.tr(dcx)),\n-                                                         impl_id.map(|id| dcx.tr_id(id))) }\n+          Def::SelfTy(opt_did, impl_id) => {\n+              // Since the impl_id will never lie within the reserved range of\n+              // imported NodeIds, it does not make sense to translate it.\n+              // The result would not make any sense within the importing crate.\n+              // We also don't allow for impl items to be inlined (just their\n+              // members), so even if we had a DefId here, we wouldn't be able\n+              // to do much with it.\n+              // So, we set the id to DUMMY_NODE_ID. That way we make it\n+              // explicit that this is no usable NodeId.\n+              Def::SelfTy(opt_did.map(|did| did.tr(dcx)),\n+                          impl_id.map(|_| ast::DUMMY_NODE_ID))\n+          }\n           Def::Mod(did) => { Def::Mod(did.tr(dcx)) }\n           Def::ForeignMod(did) => { Def::ForeignMod(did.tr(dcx)) }\n           Def::Static(did, m) => { Def::Static(did.tr(dcx), m) }\n@@ -1361,7 +1394,7 @@ fn test_simplification() {\n     with_testing_context(|lcx| {\n         let hir_item = lcx.lower_item(&item);\n         let item_in = InlinedItemRef::Item(&hir_item);\n-        let item_out = simplify_ast(item_in);\n+        let (item_out, _) = simplify_ast(item_in);\n         let item_exp = InlinedItem::Item(P(lcx.lower_item(&quote_item!(&cx,\n             fn new_int_alist<B>() -> alist<isize, B> {\n                 return alist {eq_fn: eq_int, data: Vec::new()};"}, {"sha": "862245b9b78694bcb22cba1271a98ced9ba0c0e2", "filename": "src/librustc_metadata/csearch.rs", "status": "modified", "additions": 141, "deletions": 6, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_metadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_metadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcsearch.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -14,7 +14,7 @@ use decoder;\n use encoder;\n use loader;\n \n-use middle::cstore::{CrateStore, CrateSource, ChildItem, ExternCrate, FoundAst, DefLike};\n+use middle::cstore::{InlinedItem, CrateStore, CrateSource, ChildItem, ExternCrate, DefLike};\n use middle::cstore::{NativeLibraryKind, LinkMeta, LinkagePreference};\n use rustc::hir::def;\n use middle::lang_items;\n@@ -482,12 +482,146 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         result\n     }\n \n-    fn maybe_get_item_ast<'a>(&'tcx self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n-                              -> FoundAst<'tcx>\n+    fn maybe_get_item_ast<'a>(&'tcx self,\n+                              tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              def_id: DefId)\n+                              -> Option<(&'tcx InlinedItem, ast::NodeId)>\n     {\n-        self.dep_graph.read(DepNode::MetaData(def));\n-        let cdata = self.get_crate_data(def.krate);\n-        decoder::maybe_get_item_ast(&cdata, tcx, def.index)\n+        self.dep_graph.read(DepNode::MetaData(def_id));\n+\n+        match self.inlined_item_cache.borrow().get(&def_id) {\n+            Some(&None) => {\n+                return None; // Not inlinable\n+            }\n+            Some(&Some(ref cached_inlined_item)) => {\n+                // Already inline\n+                debug!(\"maybe_get_item_ast({}): already inline as node id {}\",\n+                          tcx.item_path_str(def_id), cached_inlined_item.item_id);\n+                return Some((tcx.map.expect_inlined_item(cached_inlined_item.inlined_root),\n+                             cached_inlined_item.item_id));\n+            }\n+            None => {\n+                // Not seen yet\n+            }\n+        }\n+\n+        debug!(\"maybe_get_item_ast({}): inlining item\", tcx.item_path_str(def_id));\n+\n+        let cdata = self.get_crate_data(def_id.krate);\n+        let inlined = decoder::maybe_get_item_ast(&cdata, tcx, def_id.index);\n+\n+        let cache_inlined_item = |original_def_id, inlined_item_id, inlined_root_node_id| {\n+            let cache_entry = cstore::CachedInlinedItem {\n+                inlined_root: inlined_root_node_id,\n+                item_id: inlined_item_id,\n+            };\n+            self.inlined_item_cache\n+                .borrow_mut()\n+                .insert(original_def_id, Some(cache_entry));\n+            self.defid_for_inlined_node\n+                .borrow_mut()\n+                .insert(inlined_item_id, original_def_id);\n+        };\n+\n+        let find_inlined_item_root = |inlined_item_id| {\n+            let mut node = inlined_item_id;\n+            let mut path = Vec::with_capacity(10);\n+\n+            // If we can't find the inline root after a thousand hops, we can\n+            // be pretty sure there's something wrong with the HIR map.\n+            for _ in 0 .. 1000 {\n+                path.push(node);\n+                let parent_node = tcx.map.get_parent_node(node);\n+                if parent_node == node {\n+                    return node;\n+                }\n+                node = parent_node;\n+            }\n+            bug!(\"cycle in HIR map parent chain\")\n+        };\n+\n+        match inlined {\n+            decoder::FoundAst::NotFound => {\n+                self.inlined_item_cache\n+                    .borrow_mut()\n+                    .insert(def_id, None);\n+            }\n+            decoder::FoundAst::Found(&InlinedItem::Item(ref item)) => {\n+                let inlined_root_node_id = find_inlined_item_root(item.id);\n+                cache_inlined_item(def_id, item.id, inlined_root_node_id);\n+            }\n+            decoder::FoundAst::Found(&InlinedItem::Foreign(ref item)) => {\n+                let inlined_root_node_id = find_inlined_item_root(item.id);\n+                cache_inlined_item(def_id, item.id, inlined_root_node_id);\n+            }\n+            decoder::FoundAst::FoundParent(parent_did, item) => {\n+                let inlined_root_node_id = find_inlined_item_root(item.id);\n+                cache_inlined_item(parent_did, item.id, inlined_root_node_id);\n+\n+                match item.node {\n+                    hir::ItemEnum(ref ast_def, _) => {\n+                        let ast_vs = &ast_def.variants;\n+                        let ty_vs = &tcx.lookup_adt_def(parent_did).variants;\n+                        assert_eq!(ast_vs.len(), ty_vs.len());\n+                        for (ast_v, ty_v) in ast_vs.iter().zip(ty_vs.iter()) {\n+                            cache_inlined_item(ty_v.did,\n+                                               ast_v.node.data.id(),\n+                                               inlined_root_node_id);\n+                        }\n+                    }\n+                    hir::ItemStruct(ref struct_def, _) => {\n+                        if struct_def.is_struct() {\n+                            bug!(\"instantiate_inline: called on a non-tuple struct\")\n+                        } else {\n+                            cache_inlined_item(def_id,\n+                                               struct_def.id(),\n+                                               inlined_root_node_id);\n+                        }\n+                    }\n+                    _ => bug!(\"instantiate_inline: item has a \\\n+                               non-enum, non-struct parent\")\n+                }\n+            }\n+            decoder::FoundAst::Found(&InlinedItem::TraitItem(_, ref trait_item)) => {\n+                let inlined_root_node_id = find_inlined_item_root(trait_item.id);\n+                cache_inlined_item(def_id, trait_item.id, inlined_root_node_id);\n+\n+                // Associated consts already have to be evaluated in `typeck`, so\n+                // the logic to do that already exists in `middle`. In order to\n+                // reuse that code, it needs to be able to look up the traits for\n+                // inlined items.\n+                let ty_trait_item = tcx.impl_or_trait_item(def_id).clone();\n+                let trait_item_def_id = tcx.map.local_def_id(trait_item.id);\n+                tcx.impl_or_trait_items.borrow_mut()\n+                   .insert(trait_item_def_id, ty_trait_item);\n+            }\n+            decoder::FoundAst::Found(&InlinedItem::ImplItem(_, ref impl_item)) => {\n+                let inlined_root_node_id = find_inlined_item_root(impl_item.id);\n+                cache_inlined_item(def_id, impl_item.id, inlined_root_node_id);\n+            }\n+        }\n+\n+        // We can be sure to hit the cache now\n+        return self.maybe_get_item_ast(tcx, def_id);\n+    }\n+\n+    fn local_node_for_inlined_defid(&'tcx self, def_id: DefId) -> Option<ast::NodeId> {\n+        assert!(!def_id.is_local());\n+        match self.inlined_item_cache.borrow().get(&def_id) {\n+            Some(&Some(ref cached_inlined_item)) => {\n+                Some(cached_inlined_item.item_id)\n+            }\n+            Some(&None) => {\n+                None\n+            }\n+            _ => {\n+                bug!(\"Trying to lookup inlined NodeId for unexpected item\");\n+            }\n+        }\n+    }\n+\n+    fn defid_for_inlined_node(&'tcx self, node_id: ast::NodeId) -> Option<DefId> {\n+        self.defid_for_inlined_node.borrow().get(&node_id).map(|x| *x)\n     }\n \n     fn maybe_get_item_mir<'a>(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, def: DefId)\n@@ -634,3 +768,4 @@ impl<'tcx> CrateStore<'tcx> for cstore::CStore {\n         visible_parent_map\n     }\n }\n+"}, {"sha": "d786cc5ba0eb7865bbc58e4f2e3c267a1417e58b", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -25,7 +25,7 @@ use rustc::dep_graph::DepGraph;\n use rustc::hir::def_id::{DefIndex, DefId};\n use rustc::hir::map::DefKey;\n use rustc::hir::svh::Svh;\n-use rustc::middle::cstore::{ExternCrate};\n+use rustc::middle::cstore::ExternCrate;\n use rustc::session::config::PanicStrategy;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::util::nodemap::{FnvHashMap, NodeMap, NodeSet, DefIdMap};\n@@ -96,6 +96,13 @@ pub struct CrateMetadata {\n     pub explicitly_linked: Cell<bool>,\n }\n \n+pub struct CachedInlinedItem {\n+    /// The NodeId of the RootInlinedParent HIR map entry\n+    pub inlined_root: ast::NodeId,\n+    /// The local NodeId of the inlined entity\n+    pub item_id: ast::NodeId,\n+}\n+\n pub struct CStore {\n     pub dep_graph: DepGraph,\n     metas: RefCell<FnvHashMap<ast::CrateNum, Rc<CrateMetadata>>>,\n@@ -105,6 +112,8 @@ pub struct CStore {\n     used_libraries: RefCell<Vec<(String, NativeLibraryKind)>>,\n     used_link_args: RefCell<Vec<String>>,\n     statically_included_foreign_items: RefCell<NodeSet>,\n+    pub inlined_item_cache: RefCell<DefIdMap<Option<CachedInlinedItem>>>,\n+    pub defid_for_inlined_node: RefCell<NodeMap<DefId>>,\n     pub visible_parent_map: RefCell<DefIdMap<DefId>>,\n }\n \n@@ -119,6 +128,8 @@ impl CStore {\n             used_link_args: RefCell::new(Vec::new()),\n             statically_included_foreign_items: RefCell::new(NodeSet()),\n             visible_parent_map: RefCell::new(FnvHashMap()),\n+            inlined_item_cache: RefCell::new(FnvHashMap()),\n+            defid_for_inlined_node: RefCell::new(FnvHashMap()),\n         }\n     }\n "}, {"sha": "d8fd25d62774af11721a3db8b604a6ff6c0f4400", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -30,7 +30,7 @@ use rustc::util::nodemap::FnvHashMap;\n use rustc::hir;\n use rustc::session::config::PanicStrategy;\n \n-use middle::cstore::{FoundAst, InlinedItem, LinkagePreference};\n+use middle::cstore::{InlinedItem, LinkagePreference};\n use middle::cstore::{DefLike, DlDef, DlField, DlImpl, tls};\n use rustc::hir::def::Def;\n use rustc::hir::def_id::{DefId, DefIndex};\n@@ -755,6 +755,12 @@ pub fn maybe_get_item_name(cdata: Cmd, id: DefIndex) -> Option<ast::Name> {\n     maybe_item_name(cdata.lookup_item(id))\n }\n \n+pub enum FoundAst<'ast> {\n+    Found(&'ast InlinedItem),\n+    FoundParent(DefId, &'ast hir::Item),\n+    NotFound,\n+}\n+\n pub fn maybe_get_item_ast<'a, 'tcx>(cdata: Cmd, tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefIndex)\n                                     -> FoundAst<'tcx> {\n     debug!(\"Looking up item: {:?}\", id);"}, {"sha": "61d8a0837c1d6219127a108eed022ae19b070f08", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -1235,7 +1235,6 @@ pub fn inlined_variant_def<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                      inlined_vid: ast::NodeId)\n                                      -> ty::VariantDef<'tcx>\n {\n-\n     let ctor_ty = ccx.tcx().node_id_to_type(inlined_vid);\n     debug!(\"inlined_variant_def: ctor_ty={:?} inlined_vid={:?}\", ctor_ty,\n            inlined_vid);\n@@ -1245,13 +1244,18 @@ pub fn inlined_variant_def<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         }), ..}) => ty,\n         _ => ctor_ty\n     }.ty_adt_def().unwrap();\n-    let inlined_vid_def_id = ccx.tcx().map.local_def_id(inlined_vid);\n-    adt_def.variants.iter().find(|v| {\n-        inlined_vid_def_id == v.did ||\n-            ccx.external().borrow().get(&v.did) == Some(&Some(inlined_vid))\n-    }).unwrap_or_else(|| {\n-        bug!(\"no variant for {:?}::{}\", adt_def, inlined_vid)\n-    })\n+    let variant_def_id = if ccx.tcx().map.is_inlined(inlined_vid) {\n+        ccx.defid_for_inlined_node(inlined_vid).unwrap()\n+    } else {\n+        ccx.tcx().map.local_def_id(inlined_vid)\n+    };\n+\n+    adt_def.variants\n+           .iter()\n+           .find(|v| variant_def_id == v.did)\n+           .unwrap_or_else(|| {\n+                bug!(\"no variant for {:?}::{}\", adt_def, inlined_vid)\n+            })\n }\n \n // To avoid UB from LLVM, these two functions mask RHS with an"}, {"sha": "27048994254caa968bb518f23feb8bc749847e42", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -1026,7 +1026,7 @@ pub fn get_static<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, def_id: DefId)\n                              .get(TransItem::Static(id))\n                              .expect(\"Local statics should always be in the SymbolMap\");\n                 // Make sure that this is never executed for something inlined.\n-                assert!(!ccx.external_srcs().borrow().contains_key(&id));\n+                assert!(!ccx.tcx().map.is_inlined(id));\n \n                 let defined_in_current_codegen_unit = ccx.codegen_unit()\n                                                          .items()"}, {"sha": "5a3c1c8512ad4c3efb9a6ada3f2d9d401c1231d3", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -37,7 +37,7 @@ use session::Session;\n use session::config;\n use symbol_map::SymbolMap;\n use util::sha2::Sha256;\n-use util::nodemap::{NodeMap, NodeSet, DefIdMap, FnvHashMap, FnvHashSet};\n+use util::nodemap::{NodeSet, DefIdMap, FnvHashMap, FnvHashSet};\n \n use std::ffi::{CStr, CString};\n use std::cell::{Cell, RefCell};\n@@ -102,11 +102,6 @@ pub struct LocalCrateContext<'tcx> {\n     needs_unwind_cleanup_cache: RefCell<FnvHashMap<Ty<'tcx>, bool>>,\n     fn_pointer_shims: RefCell<FnvHashMap<Ty<'tcx>, ValueRef>>,\n     drop_glues: RefCell<FnvHashMap<DropGlueKind<'tcx>, (ValueRef, FnType)>>,\n-    /// Track mapping of external ids to local items imported for inlining\n-    external: RefCell<DefIdMap<Option<ast::NodeId>>>,\n-    /// Backwards version of the `external` map (inlined items to where they\n-    /// came from)\n-    external_srcs: RefCell<NodeMap<DefId>>,\n     /// Cache instances of monomorphic and polymorphic items\n     instances: RefCell<FnvHashMap<Instance<'tcx>, ValueRef>>,\n     monomorphizing: RefCell<DefIdMap<usize>>,\n@@ -630,8 +625,6 @@ impl<'tcx> LocalCrateContext<'tcx> {\n                 needs_unwind_cleanup_cache: RefCell::new(FnvHashMap()),\n                 fn_pointer_shims: RefCell::new(FnvHashMap()),\n                 drop_glues: RefCell::new(FnvHashMap()),\n-                external: RefCell::new(DefIdMap()),\n-                external_srcs: RefCell::new(NodeMap()),\n                 instances: RefCell::new(FnvHashMap()),\n                 monomorphizing: RefCell::new(DefIdMap()),\n                 vtables: RefCell::new(FnvHashMap()),\n@@ -825,12 +818,12 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         &self.local().drop_glues\n     }\n \n-    pub fn external<'a>(&'a self) -> &'a RefCell<DefIdMap<Option<ast::NodeId>>> {\n-        &self.local().external\n+    pub fn local_node_for_inlined_defid<'a>(&'a self, def_id: DefId) -> Option<ast::NodeId> {\n+        self.sess().cstore.local_node_for_inlined_defid(def_id)\n     }\n \n-    pub fn external_srcs<'a>(&'a self) -> &'a RefCell<NodeMap<DefId>> {\n-        &self.local().external_srcs\n+    pub fn defid_for_inlined_node<'a>(&'a self, node_id: ast::NodeId) -> Option<DefId> {\n+        self.sess().cstore.defid_for_inlined_node(node_id)\n     }\n \n     pub fn instances<'a>(&'a self) -> &'a RefCell<FnvHashMap<Instance<'tcx>, ValueRef>> {"}, {"sha": "1d718d4b57a6c347f32d5dd84b8403d89f0a00d2", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -326,13 +326,12 @@ impl<'tcx> TypeMap<'tcx> {\n             // First, find out the 'real' def_id of the type. Items inlined from\n             // other crates have to be mapped back to their source.\n             let def_id = if let Some(node_id) = cx.tcx().map.as_local_node_id(def_id) {\n-                match cx.external_srcs().borrow().get(&node_id).cloned() {\n-                    Some(source_def_id) => {\n-                        // The given def_id identifies the inlined copy of a\n-                        // type definition, let's take the source of the copy.\n-                        source_def_id\n-                    }\n-                    None => def_id\n+                if cx.tcx().map.is_inlined(node_id) {\n+                    // The given def_id identifies the inlined copy of a\n+                    // type definition, let's take the source of the copy.\n+                    cx.defid_for_inlined_node(node_id).unwrap()\n+                } else {\n+                    def_id\n                 }\n             } else {\n                 def_id\n@@ -1846,7 +1845,7 @@ pub fn create_global_var_metadata(cx: &CrateContext,\n     // crate should already contain debuginfo for it. More importantly, the\n     // global might not even exist in un-inlined form anywhere which would lead\n     // to a linker errors.\n-    if cx.external_srcs().borrow().contains_key(&node_id) {\n+    if cx.tcx().map.is_inlined(node_id) {\n         return;\n     }\n "}, {"sha": "0cb52c8768b04e06addcdc19985843e2d1865042", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -438,10 +438,9 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         });\n \n         // Try to get some span information, if we have an inlined item.\n-        let definition_span = match cx.external().borrow().get(&instance.def) {\n-            Some(&Some(node_id)) => cx.tcx().map.span(node_id),\n-            _ => cx.tcx().map.def_id_span(instance.def, syntax_pos::DUMMY_SP)\n-        };\n+        let definition_span = cx.tcx()\n+                                .map\n+                                .def_id_span(instance.def, syntax_pos::DUMMY_SP);\n \n         (containing_scope, definition_span)\n     }"}, {"sha": "facdfe73ddc8e577c046cdccbfddc8d25b6f45cb", "filename": "src/librustc_trans/debuginfo/utils.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Futils.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -86,10 +86,7 @@ pub fn get_namespace_and_span_for_item(cx: &CrateContext, def_id: DefId)\n     });\n \n     // Try to get some span information, if we have an inlined item.\n-    let definition_span = match cx.external().borrow().get(&def_id) {\n-        Some(&Some(node_id)) => cx.tcx().map.span(node_id),\n-        _ => cx.tcx().map.def_id_span(def_id, syntax_pos::DUMMY_SP)\n-    };\n+    let definition_span = cx.tcx().map.def_id_span(def_id, syntax_pos::DUMMY_SP);\n \n     (containing_scope, definition_span)\n }"}, {"sha": "8581fccf10ab53b0d2c783567a4e403ea894e60f", "filename": "src/librustc_trans/inline.rs", "status": "modified", "additions": 6, "deletions": 100, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Finline.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,119 +8,25 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::cstore::{FoundAst, InlinedItem};\n use rustc::hir::def_id::DefId;\n use base::push_ctxt;\n use common::*;\n use monomorphize::Instance;\n \n use rustc::dep_graph::DepNode;\n-use rustc::hir;\n \n fn instantiate_inline(ccx: &CrateContext, fn_id: DefId) -> Option<DefId> {\n     debug!(\"instantiate_inline({:?})\", fn_id);\n     let _icx = push_ctxt(\"instantiate_inline\");\n     let tcx = ccx.tcx();\n     let _task = tcx.dep_graph.in_task(DepNode::TransInlinedItem(fn_id));\n \n-    match ccx.external().borrow().get(&fn_id) {\n-        Some(&Some(node_id)) => {\n-            // Already inline\n-            debug!(\"instantiate_inline({}): already inline as node id {}\",\n-                   tcx.item_path_str(fn_id), node_id);\n-            let node_def_id = tcx.map.local_def_id(node_id);\n-            return Some(node_def_id);\n-        }\n-        Some(&None) => {\n-            return None; // Not inlinable\n-        }\n-        None => {\n-            // Not seen yet\n-        }\n-    }\n-\n-    let inlined = tcx.sess.cstore.maybe_get_item_ast(tcx, fn_id);\n-    let inline_id = match inlined {\n-        FoundAst::NotFound => {\n-            ccx.external().borrow_mut().insert(fn_id, None);\n-            return None;\n-        }\n-        FoundAst::Found(&InlinedItem::Item(ref item)) => {\n-            ccx.external().borrow_mut().insert(fn_id, Some(item.id));\n-            ccx.external_srcs().borrow_mut().insert(item.id, fn_id);\n-\n-            ccx.stats().n_inlines.set(ccx.stats().n_inlines.get() + 1);\n-\n-            item.id\n-        }\n-        FoundAst::Found(&InlinedItem::Foreign(ref item)) => {\n-            ccx.external().borrow_mut().insert(fn_id, Some(item.id));\n-            ccx.external_srcs().borrow_mut().insert(item.id, fn_id);\n-            item.id\n-        }\n-        FoundAst::FoundParent(parent_id, item) => {\n-            ccx.external().borrow_mut().insert(parent_id, Some(item.id));\n-            ccx.external_srcs().borrow_mut().insert(item.id, parent_id);\n-\n-            let mut my_id = 0;\n-            match item.node {\n-                hir::ItemEnum(ref ast_def, _) => {\n-                    let ast_vs = &ast_def.variants;\n-                    let ty_vs = &tcx.lookup_adt_def(parent_id).variants;\n-                    assert_eq!(ast_vs.len(), ty_vs.len());\n-                    for (ast_v, ty_v) in ast_vs.iter().zip(ty_vs.iter()) {\n-                        if ty_v.did == fn_id { my_id = ast_v.node.data.id(); }\n-                        ccx.external().borrow_mut().insert(ty_v.did, Some(ast_v.node.data.id()));\n-                        ccx.external_srcs().borrow_mut().insert(ast_v.node.data.id(), ty_v.did);\n-                    }\n-                }\n-                hir::ItemStruct(ref struct_def, _) => {\n-                    if struct_def.is_struct() {\n-                        bug!(\"instantiate_inline: called on a \\\n-                              non-tuple struct\")\n-                    } else {\n-                        ccx.external().borrow_mut().insert(fn_id, Some(struct_def.id()));\n-                        ccx.external_srcs().borrow_mut().insert(struct_def.id(), fn_id);\n-                        my_id = struct_def.id();\n-                    }\n-                }\n-                _ => bug!(\"instantiate_inline: item has a \\\n-                           non-enum, non-struct parent\")\n-            }\n-            my_id\n-        }\n-        FoundAst::Found(&InlinedItem::TraitItem(_, ref trait_item)) => {\n-            ccx.external().borrow_mut().insert(fn_id, Some(trait_item.id));\n-            ccx.external_srcs().borrow_mut().insert(trait_item.id, fn_id);\n-\n-            ccx.stats().n_inlines.set(ccx.stats().n_inlines.get() + 1);\n-\n-            // Associated consts already have to be evaluated in `typeck`, so\n-            // the logic to do that already exists in `middle`. In order to\n-            // reuse that code, it needs to be able to look up the traits for\n-            // inlined items.\n-            let ty_trait_item = tcx.impl_or_trait_item(fn_id).clone();\n-            let trait_item_def_id = tcx.map.local_def_id(trait_item.id);\n-            tcx.impl_or_trait_items.borrow_mut()\n-               .insert(trait_item_def_id, ty_trait_item);\n-\n-            // If this is a default method, we can't look up the\n-            // impl type. But we aren't going to translate anyways, so\n-            // don't.\n-            trait_item.id\n-        }\n-        FoundAst::Found(&InlinedItem::ImplItem(_, ref impl_item)) => {\n-            ccx.external().borrow_mut().insert(fn_id, Some(impl_item.id));\n-            ccx.external_srcs().borrow_mut().insert(impl_item.id, fn_id);\n-\n-            ccx.stats().n_inlines.set(ccx.stats().n_inlines.get() + 1);\n-\n-            impl_item.id\n-        }\n-    };\n-\n-    let inline_def_id = tcx.map.local_def_id(inline_id);\n-    Some(inline_def_id)\n+    tcx.sess\n+       .cstore\n+       .maybe_get_item_ast(tcx, fn_id)\n+       .map(|(_, inline_id)| {\n+            tcx.map.local_def_id(inline_id)\n+       })\n }\n \n pub fn get_local_instance(ccx: &CrateContext, fn_id: DefId)"}, {"sha": "2d1769b8637b30016dd615e053a83d0e14982869", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -284,6 +284,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n                 // After this point, bcx is the block for the call to panic.\n                 bcx = panic_block.build();\n+                debug_loc.apply_to_bcx(&bcx);\n \n                 // Get the location information.\n                 let loc = bcx.sess().codemap().lookup_char_pos(span.lo);"}, {"sha": "3b2bca4ab391225f9e477195a248be95a9b5eefd", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -1313,6 +1313,12 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n         // item is declared.\n         let bound = match (&ty.sty, ty_path_def) {\n             (_, Def::SelfTy(Some(trait_did), Some(impl_id))) => {\n+                // For Def::SelfTy() values inlined from another crate, the\n+                // impl_id will be DUMMY_NODE_ID, which would cause problems\n+                // here. But we should never run into an impl from another crate\n+                // in this pass.\n+                assert!(impl_id != ast::DUMMY_NODE_ID);\n+\n                 // `Self` in an impl of a trait - we have a concrete self type and a\n                 // trait reference.\n                 let trait_ref = tcx.impl_trait_ref(tcx.map.local_def_id(impl_id)).unwrap();\n@@ -1518,6 +1524,13 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             }\n             Def::SelfTy(_, Some(impl_id)) => {\n                 // Self in impl (we know the concrete type).\n+\n+                // For Def::SelfTy() values inlined from another crate, the\n+                // impl_id will be DUMMY_NODE_ID, which would cause problems\n+                // here. But we should never run into an impl from another crate\n+                // in this pass.\n+                assert!(impl_id != ast::DUMMY_NODE_ID);\n+\n                 tcx.prohibit_type_params(base_segments);\n                 let ty = tcx.node_id_to_type(impl_id);\n                 if let Some(free_substs) = self.get_free_substs() {"}, {"sha": "bd2c05ba66d47188d77729c08c5cf874832c79b9", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -27,33 +27,8 @@ use rustc::hir;\n /// to `trait_id` (this only cares about the trait, not the specific\n /// method that is called)\n pub fn check_legal_trait_for_method_call(ccx: &CrateCtxt, span: Span, trait_id: DefId) {\n-    let tcx = ccx.tcx;\n-    let did = Some(trait_id);\n-    let li = &tcx.lang_items;\n-\n-    if did == li.drop_trait() {\n-        span_err!(tcx.sess, span, E0040, \"explicit use of destructor method\");\n-    } else if !tcx.sess.features.borrow().unboxed_closures {\n-        // the #[feature(unboxed_closures)] feature isn't\n-        // activated so we need to enforce the closure\n-        // restrictions.\n-\n-        let method = if did == li.fn_trait() {\n-            \"call\"\n-        } else if did == li.fn_mut_trait() {\n-            \"call_mut\"\n-        } else if did == li.fn_once_trait() {\n-            \"call_once\"\n-        } else {\n-            return // not a closure method, everything is OK.\n-        };\n-\n-        struct_span_err!(tcx.sess, span, E0174,\n-                         \"explicit use of unboxed closure method `{}` is experimental\",\n-                         method)\n-            .help(\"add `#![feature(unboxed_closures)]` to the crate \\\n-                  attributes to enable\")\n-            .emit();\n+    if ccx.tcx.lang_items.drop_trait() == Some(trait_id) {\n+        span_err!(ccx.tcx.sess, span, E0040, \"explicit use of destructor method\");\n     }\n }\n "}, {"sha": "cd2259a283469279df6ddd8286434ff76ef2ffa2", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 83, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -1944,89 +1944,6 @@ To learn more about traits, take a look at the Book:\n https://doc.rust-lang.org/book/traits.html\n \"##,\n \n-E0174: r##\"\n-This error occurs because of the explicit use of unboxed closure methods\n-that are an experimental feature in current Rust version.\n-\n-Example of erroneous code:\n-\n-```compile_fail\n-fn foo<F: Fn(&str)>(mut f: F) {\n-    f.call((\"call\",));\n-    // error: explicit use of unboxed closure method `call`\n-    f.call_mut((\"call_mut\",));\n-    // error: explicit use of unboxed closure method `call_mut`\n-    f.call_once((\"call_once\",));\n-    // error: explicit use of unboxed closure method `call_once`\n-}\n-\n-fn bar(text: &str) {\n-    println!(\"Calling {} it works!\", text);\n-}\n-\n-fn main() {\n-    foo(bar);\n-}\n-```\n-\n-Rust's implementation of closures is a bit different than other languages.\n-They are effectively syntax sugar for traits `Fn`, `FnMut` and `FnOnce`.\n-To understand better how the closures are implemented see here:\n-https://doc.rust-lang.org/book/closures.html#closure-implementation\n-\n-To fix this you can call them using parenthesis, like this: `foo()`.\n-When you execute the closure with parenthesis, under the hood you are executing\n-the method `call`, `call_mut` or `call_once`. However, using them explicitly is\n-currently an experimental feature.\n-\n-Example of an implicit call:\n-\n-```\n-fn foo<F: Fn(&str)>(f: F) {\n-    f(\"using ()\"); // Calling using () it works!\n-}\n-\n-fn bar(text: &str) {\n-    println!(\"Calling {} it works!\", text);\n-}\n-\n-fn main() {\n-    foo(bar);\n-}\n-```\n-\n-To enable the explicit calls you need to add `#![feature(unboxed_closures)]`.\n-\n-This feature is still unstable so you will also need to add\n-`#![feature(fn_traits)]`.\n-More details about this issue here:\n-https://github.com/rust-lang/rust/issues/29625\n-\n-Example of use:\n-\n-```\n-#![feature(fn_traits)]\n-#![feature(unboxed_closures)]\n-\n-fn foo<F: Fn(&str)>(mut f: F) {\n-    f.call((\"call\",)); // Calling 'call' it works!\n-    f.call_mut((\"call_mut\",)); // Calling 'call_mut' it works!\n-    f.call_once((\"call_once\",)); // Calling 'call_once' it works!\n-}\n-\n-fn bar(text: &str) {\n-    println!(\"Calling '{}' it works!\", text);\n-}\n-\n-fn main() {\n-    foo(bar);\n-}\n-```\n-\n-To see more about closures take a look here:\n-https://doc.rust-lang.org/book/closures.html`\n-\"##,\n-\n E0178: r##\"\n In types, the `+` type operator has low precedence, so it is often necessary\n to use parentheses.\n@@ -4049,6 +3966,7 @@ register_diagnostics! {\n     E0167,\n //  E0168,\n //  E0173, // manual implementations of unboxed closure traits are experimental\n+//  E0174,\n     E0182,\n     E0183,\n //  E0187, // can't infer the kind of the closure"}, {"sha": "d609ad84a83831dd8920ab84b60e9791231f93f3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -2691,7 +2691,12 @@ fn register_def(cx: &DocContext, def: Def) -> DefId {\n         Def::Static(i, _) => (i, TypeStatic),\n         Def::Variant(i, _) => (i, TypeEnum),\n         Def::SelfTy(Some(def_id), _) => (def_id, TypeTrait),\n-        Def::SelfTy(_, Some(impl_id)) => return cx.map.local_def_id(impl_id),\n+        Def::SelfTy(_, Some(impl_id)) => {\n+            // For Def::SelfTy() values inlined from another crate, the\n+            // impl_id will be DUMMY_NODE_ID, which would cause problems.\n+            // But we should never run into an impl from another crate here.\n+            return cx.map.local_def_id(impl_id)\n+        }\n         _ => return def.def_id()\n     };\n     if did.is_local() { return did }"}, {"sha": "de6ce798d63542c3d7431f2e182467e538c8144b", "filename": "src/test/compile-fail/associated-types/bound-lifetime-constrained.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fbound-lifetime-constrained.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -12,7 +12,6 @@\n \n #![allow(dead_code)]\n #![feature(rustc_attrs)]\n-#![feature(unboxed_closures)]\n #![deny(hr_lifetime_in_assoc_type)]\n \n trait Foo<'a> {"}, {"sha": "6ba09acc0e799e579496d364c9cf52c0d8eab5b3", "filename": "src/test/compile-fail/associated-types/cache/wasm-issue-32330.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fwasm-issue-32330.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fwasm-issue-32330.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types%2Fcache%2Fwasm-issue-32330.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -13,7 +13,6 @@\n \n #![allow(dead_code, unused_variables)]\n #![deny(hr_lifetime_in_assoc_type)]\n-#![feature(unboxed_closures)]\n \n use std::str::Chars;\n "}, {"sha": "e4ae565fe92f5296f4e66e12cdb907a10fc3e5ca", "filename": "src/test/compile-fail/borrowck/borrowck-call-is-borrow-issue-12224.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-call-is-borrow-issue-12224.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-call-is-borrow-issue-12224.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-call-is-borrow-issue-12224.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // Ensure that invoking a closure counts as a unique immutable borrow\n \n-#![feature(unboxed_closures)]\n-\n type Fn<'a> = Box<FnMut() + 'a>;\n \n struct Test<'a> {"}, {"sha": "0f9829ab259a922a916bf006e04f6d0c665bfeb7", "filename": "src/test/compile-fail/borrowck/borrowck-unboxed-closures.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-unboxed-closures.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls, unboxed_closures)]\n-\n fn a<F:Fn(isize, isize) -> isize>(mut f: F) {\n     let g = &mut f;\n     f(1, 2);    //~ ERROR cannot borrow `f` as immutable"}, {"sha": "253d1633b1c4eb95c3e12036bf3312a3cbcff354", "filename": "src/test/compile-fail/feature-gate-unboxed-closures-method-calls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-method-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-method-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-method-calls.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,9 +11,9 @@\n #![allow(dead_code)]\n \n fn foo<F: Fn()>(mut f: F) {\n-    f.call(()); //~ ERROR explicit use of unboxed closure method `call`\n-    f.call_mut(()); //~ ERROR explicit use of unboxed closure method `call_mut`\n-    f.call_once(()); //~ ERROR explicit use of unboxed closure method `call_once`\n+    f.call(()); //~ ERROR use of unstable library feature 'fn_traits'\n+    f.call_mut(()); //~ ERROR use of unstable library feature 'fn_traits'\n+    f.call_once(()); //~ ERROR use of unstable library feature 'fn_traits'\n }\n \n fn main() {}"}, {"sha": "902b3c1774c1d638c1a39435ffef5ee3f083fea4", "filename": "src/test/compile-fail/feature-gate-unboxed-closures-ufcs-calls.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-ufcs-calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-ufcs-calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-unboxed-closures-ufcs-calls.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,10 +10,10 @@\n \n #![allow(dead_code)]\n \n-fn foo<F: Fn()>(mut f: F, mut g: F) {\n-    Fn::call(&g, ()); //~ ERROR explicit use of unboxed closure method `call`\n-    FnMut::call_mut(&mut g, ()); //~ ERROR explicit use of unboxed closure method `call_mut`\n-    FnOnce::call_once(g, ()); //~ ERROR explicit use of unboxed closure method `call_once`\n+fn foo<F: Fn()>(mut f: F) {\n+    Fn::call(&f, ()); //~ ERROR use of unstable library feature 'fn_traits'\n+    FnMut::call_mut(&mut f, ()); //~ ERROR use of unstable library feature 'fn_traits'\n+    FnOnce::call_once(f, ()); //~ ERROR use of unstable library feature 'fn_traits'\n }\n \n fn main() {}"}, {"sha": "e01a0412cef4efe3081f6a512f91b4968e59a2db", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n #![feature(box_syntax)]\n \n fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}"}, {"sha": "e16c58b8a6c1ac1033e14332b30bb62c7dc381bb", "filename": "src/test/compile-fail/issue-16939.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16939.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls, unboxed_closures)]\n-\n // Make sure we don't ICE when making an overloaded call with the\n // wrong arity.\n "}, {"sha": "0ec05b941a960dc1b7dc40bb9710272762de9e5c", "filename": "src/test/compile-fail/issue-17033.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(overloaded_calls)]\n-\n fn f<'r>(p: &'r mut fn(p: &mut ())) {\n     (*p)(()) //~  ERROR mismatched types\n              //~| expected type `&mut ()`"}, {"sha": "49435f83ce3c454ce473481213bdf138daa76008", "filename": "src/test/compile-fail/issue-17545.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17545.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n pub fn foo<'a, F: Fn(&'a ())>(bar: F) {\n     bar.call((\n         &(), //~ ERROR borrowed value does not live long enough"}, {"sha": "5e69553d3a48532e1a78b6a50a60f4e9441cf98e", "filename": "src/test/compile-fail/issue-17551.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17551.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::marker;\n \n struct B<T>(marker::PhantomData<T>);"}, {"sha": "94eab97c42a197a6e0887f0c6b3b62d696dad908", "filename": "src/test/compile-fail/issue-18532.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-18532.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-18532.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18532.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -12,8 +12,6 @@\n // when a type error or unconstrained type variable propagates\n // into it.\n \n-#![feature(unboxed_closures)]\n-\n fn main() {\n     (return)((),());\n     //~^ ERROR the type of this value must be known"}, {"sha": "93d95ca0b0f945b7f14d00e3e27693f0e6b0b276", "filename": "src/test/compile-fail/issue-19521.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-19521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-19521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19521.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n fn main() {\n     \"\".homura()(); //~ ERROR no method named `homura` found\n }"}, {"sha": "beeb7da6d389953165804e91c70631787ab6faf8", "filename": "src/test/compile-fail/issue-19707.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-19707.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-19707.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19707.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n type foo = fn(&u8, &u8) -> &u8; //~ ERROR missing lifetime specifier"}, {"sha": "9a1b5d9b83d2c27a910164b0d687567dca23b43f", "filename": "src/test/compile-fail/issue-4335.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4335.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n fn id<T>(t: T) -> T { t }\n \n fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {"}, {"sha": "df9a3519d5d6152633f8e17b2d4000779105d69f", "filename": "src/test/compile-fail/moves-based-on-type-no-recursive-stack-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-no-recursive-stack-closure.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -12,8 +12,6 @@\n // bound must be noncopyable. For details see\n // http://smallcultfollowing.com/babysteps/blog/2013/04/30/the-case-of-the-recurring-closure/\n \n-#![feature(unboxed_closures)]\n-\n struct R<'a> {\n     // This struct is needed to create the\n     // otherwise infinite type of a fn that"}, {"sha": "8ec6036762f4886b74a90adfac129eb7ec35e533", "filename": "src/test/compile-fail/regionck-unboxed-closure-lifetimes.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregionck-unboxed-closure-lifetimes.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures, overloaded_calls)]\n-\n use std::ops::FnMut;\n \n fn main() {"}, {"sha": "cf41fad270839ecf7938bef47edeb2fe7c54c327", "filename": "src/test/compile-fail/regions-escape-unboxed-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fregions-escape-unboxed-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fregions-escape-unboxed-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-escape-unboxed-closure.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n fn with_int(f: &mut FnMut(&isize)) {\n }\n "}, {"sha": "99e5cc0315383f6c44435929742e963baa9fabb6", "filename": "src/test/compile-fail/regions-return-ref-to-upvar-issue-17403.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // Test that closures cannot subvert aliasing restrictions\n \n-#![feature(overloaded_calls, unboxed_closures)]\n-\n fn main() {\n     // Unboxed closure case\n     {"}, {"sha": "8ade8b239b3b3e417d2575be1a9411127fa130a4", "filename": "src/test/compile-fail/regions-steal-closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-steal-closure.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n struct closure_box<'a> {\n     cl: Box<FnMut() + 'a>,\n }"}, {"sha": "2d99837422955926356bc7dea7f3cf4402accbd6", "filename": "src/test/compile-fail/unboxed-closure-immutable-capture.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n // Test that even unboxed closures that are capable of mutating their\n // environment cannot mutate captured variables that have not been\n // declared mutable (#18335)"}, {"sha": "1c86dda3378a96fa76a133286bdd1a084ee3fcba", "filename": "src/test/compile-fail/unboxed-closure-region.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n // Test that an unboxed closure that captures a free variable by\n // reference cannot escape the region of that variable.\n fn main() {"}, {"sha": "465bddd060d77166fae1e66567c34401d49c8ca3", "filename": "src/test/compile-fail/unboxed-closure-sugar-nonexistent-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-nonexistent-trait.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n fn f<F:Nonexist(isize) -> isize>(x: F) {} //~ ERROR trait `Nonexist` is not in scope\n \n type Typedef = isize;"}, {"sha": "ad7e6784a0a414fb4cbc624352a4580ee6ffc068", "filename": "src/test/compile-fail/unboxed-closures-borrow-conflict.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n // Test that an unboxed closure that mutates a free variable will\n // cause borrow conflicts.\n "}, {"sha": "5436a855ee786debc86fd428a8d7f945e2b7c4b5", "filename": "src/test/compile-fail/unboxed-closures-infer-argument-types-two-region-pointers.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-argument-types-two-region-pointers.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,8 +11,6 @@\n // That a closure whose expected argument types include two distinct\n // bound regions.\n \n-#![feature(unboxed_closures)]\n-\n use std::cell::Cell;\n \n fn doit<T,F>(val: T, f: &F)"}, {"sha": "62f6ee56ca5de44407cfa890622c2f28659abb62", "filename": "src/test/compile-fail/unboxed-closures-infer-explicit-call-too-early.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-explicit-call-too-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-explicit-call-too-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-infer-explicit-call-too-early.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n fn main() {\n     let mut zero = || {};\n     let () = zero.call_mut(());"}, {"sha": "dba4c8cc2e9e7ac5ce6dd9334f2561e75f765999", "filename": "src/test/compile-fail/unboxed-closures-type-mismatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::ops::FnMut;\n \n pub fn main() {"}, {"sha": "2b0a8baf4f23d61be10b54b08cde23f5d69bf33e", "filename": "src/test/compile-fail/unboxed-closures-unsafe-extern-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-unsafe-extern-fn.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // Tests that unsafe extern fn pointers do not implement any Fn traits.\n \n-#![feature(unboxed_closures)]\n-\n use std::ops::{Fn,FnMut,FnOnce};\n \n unsafe fn square(x: &isize) -> isize { (*x) * (*x) }"}, {"sha": "f6ba25f43685c9d24784c0346a074a55efeff5ec", "filename": "src/test/compile-fail/unboxed-closures-wrong-abi.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-abi.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // Tests that unsafe extern fn pointers do not implement any Fn traits.\n \n-#![feature(unboxed_closures)]\n-\n use std::ops::{Fn,FnMut,FnOnce};\n \n extern \"C\" fn square(x: &isize) -> isize { (*x) * (*x) }"}, {"sha": "9d907ffc17f2be34a96b99afa3a4059d6fffedbb", "filename": "src/test/compile-fail/unboxed-closures-wrong-arg-type-extern-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-wrong-arg-type-extern-fn.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // Tests that unsafe extern fn pointers do not implement any Fn traits.\n \n-#![feature(unboxed_closures)]\n-\n use std::ops::{Fn,FnMut,FnOnce};\n \n unsafe fn square(x: isize) -> isize { x * x }"}, {"sha": "b415546faeac7af89e3ca093096de84144216049", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -40,7 +40,7 @@\n // lldb-check:[...]$2 = 5\n \n #![allow(unused_variables)]\n-#![feature(unboxed_closures, box_syntax)]\n+#![feature(box_syntax)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n "}, {"sha": "e60f964dd095ebc6239e285ce1a77c89aaf6771b", "filename": "src/test/debuginfo/var-captured-in-stack-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-stack-closure.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -69,7 +69,7 @@\n // lldb-command:print *owned\n // lldb-check:[...]$9 = 6\n \n-#![feature(unboxed_closures, box_syntax)]\n+#![feature(box_syntax)]\n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]"}, {"sha": "c364240f4ad69f5ddf7061ecc6bbef98d2a3f48e", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -12,9 +12,6 @@\n // making method calls, but only if there aren't any matches without\n // it.\n \n-\n-#![feature(unboxed_closures)]\n-\n trait iterable<A> {\n     fn iterate<F>(&self, blk: F) -> bool where F: FnMut(&A) -> bool;\n }"}, {"sha": "3e34367a215826e37caa2b96c11c713a28ca56db", "filename": "src/test/run-pass/associated-types-impl-redirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -14,7 +14,7 @@\n // for `ByRef`. The right answer was to consider the result ambiguous\n // until more type information was available.\n \n-#![feature(lang_items, unboxed_closures)]\n+#![feature(lang_items)]\n #![no_implicit_prelude]\n \n use std::marker::Sized;"}, {"sha": "ef1225d39a70e91aa036c696be9385397c9b437f", "filename": "src/test/run-pass/associated-types-where-clause-impl-ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -14,7 +14,7 @@\n // for `ByRef`. The right answer was to consider the result ambiguous\n // until more type information was available.\n \n-#![feature(lang_items, unboxed_closures)]\n+#![feature(lang_items)]\n #![no_implicit_prelude]\n \n use std::marker::Sized;"}, {"sha": "c247c0223fcbf249ffe2eafacd1148c2cff6e6c3", "filename": "src/test/run-pass/auxiliary/issue-18711.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-18711.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-18711.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue-18711.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n #![crate_type = \"rlib\"]\n \n pub fn inner<F>(f: F) -> F {"}, {"sha": "dc9798a2101686325471d52153b242022797f486", "filename": "src/test/run-pass/auxiliary/unboxed-closures-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Funboxed-closures-cross-crate.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::ops::Add;\n \n #[inline]"}, {"sha": "30a11ca2536d379c65f8b35efe81d3b56c841d09", "filename": "src/test/run-pass/bare-fn-implements-fn-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbare-fn-implements-fn-mut.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::ops::FnMut;\n \n fn call_f<F:FnMut()>(mut f: F) {"}, {"sha": "158594df8cac01865530b8a7a8fa7eeef510475f", "filename": "src/test/run-pass/borrowck/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck%2Fborrowck-move-by-capture-ok.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,7 +11,6 @@\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]\n-#![feature(unboxed_closures)]\n \n pub fn main() {\n     let bar: Box<_> = box 3;"}, {"sha": "e8a9dc7b8f368b69d01f4e694dedc6dd3b39361d", "filename": "src/test/run-pass/capture-clauses-unboxed-closures.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unboxed_closures)]\n-\n fn each<'a,T,F:FnMut(&'a T)>(x: &'a [T], mut f: F) {\n     for val in x {\n         f(val)"}, {"sha": "5268e855d5fd8866f26a9a3f75439c851331ca5e", "filename": "src/test/run-pass/closure-bounds-can-capture-chan.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-bounds-can-capture-chan.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n use std::sync::mpsc::channel;\n \n fn foo<F:FnOnce()+Send>(blk: F) {"}, {"sha": "a37733bdc2df8c4be5d23ac001167a781ce9acc6", "filename": "src/test/run-pass/closure-reform.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fclosure-reform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-reform.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,8 +11,6 @@\n /* Any copyright is dedicated to the Public Domain.\n  * http://creativecommons.org/publicdomain/zero/1.0/ */\n \n-#![feature(unboxed_closures)]\n-\n fn call_it<F>(f: F)\n     where F : FnOnce(String) -> String\n {"}, {"sha": "3f6f1aa6b5fe394ebff4694c4f4e63ea9c90c840", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(unboxed_closures, std_misc)]\n+#![feature(std_misc)]\n \n /**\n    A somewhat reduced test case to expose some Valgrind issues."}, {"sha": "cdffaef66eb2f68e6fef22f6786e0d5a2a530b93", "filename": "src/test/run-pass/hrtb-parse.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-parse.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -13,7 +13,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n #![allow(unused_variables)]\n #![allow(dead_code)]\n "}, {"sha": "46ea256296194590c6b668966f1c76b73f94016e", "filename": "src/test/run-pass/hrtb-precedence-of-plus-where-clause.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus-where-clause.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n // Test that `F : Fn(isize) -> isize + Send` is interpreted as two\n // distinct bounds on `F`.\n "}, {"sha": "d93e52a8f5fbb10d45623c13c9521710f6b5ac43", "filename": "src/test/run-pass/hrtb-precedence-of-plus.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-precedence-of-plus.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,7 +11,6 @@\n // pretty-expanded FIXME #23616\n \n #![allow(unknown_features)]\n-#![feature(unboxed_closures)]\n \n // Test that `Fn(isize) -> isize + 'static` parses as `(Fn(isize) -> isize) +\n // 'static` and not `Fn(isize) -> (isize + 'static)`. The latter would"}, {"sha": "5b9d4a834d872385f0c7c63239f7d56a637895d9", "filename": "src/test/run-pass/hrtb-trait-object-paren-notation.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-trait-object-paren-notation.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unboxed_closures)]\n-\n // A basic test of using a higher-ranked trait bound.\n \n trait FnLike<A,R> {"}, {"sha": "6666b61a4a725a6396a22b738ee208454dab1824", "filename": "src/test/run-pass/hrtb-unboxed-closure-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fhrtb-unboxed-closure-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fhrtb-unboxed-closure-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-unboxed-closure-trait.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // Test HRTB used with the `Fn` trait.\n \n-#![feature(unboxed_closures)]\n-\n fn foo<F:Fn(&isize)>(f: F) {\n     let x = 22;\n     f(&x);"}, {"sha": "fedd94e22e7bd9831f526a6dfac5437a1b9889a9", "filename": "src/test/run-pass/issue-10718.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-10718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-10718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10718.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n fn f<F:FnOnce()>(p: F) {\n     p();\n }"}, {"sha": "e91569f8b245052ac81da24189d95eea8121b8e2", "filename": "src/test/run-pass/issue-16560.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-16560.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-16560.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16560.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-emscripten no threads support\n \n-#![feature(unboxed_closures)]\n-\n use std::thread;\n use std::mem;\n "}, {"sha": "0fd99650284895297a2419795aeb510ec7695471", "filename": "src/test/run-pass/issue-16668.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-16668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16668.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,7 +11,6 @@\n // ignore-pretty\n \n #![allow(unknown_features)]\n-#![feature(unboxed_closures)]\n \n struct Parser<'a, I, O> {\n     parse: Box<FnMut(I) -> Result<O, String> + 'a>"}, {"sha": "9ec5910c2f67938c79803351a73c0d8816a0de94", "filename": "src/test/run-pass/issue-16774.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16774.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -12,7 +12,6 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n #![feature(box_patterns)]\n-#![feature(unboxed_closures)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "a9aa4cdd4f69d9b1f549bb4b965e29cba7417095", "filename": "src/test/run-pass/issue-17816.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-17816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-17816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17816.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::marker::PhantomData;\n \n fn main() {"}, {"sha": "cea0beaf5f076f2d6f08fb070b36a14d0db93429", "filename": "src/test/run-pass/issue-18652.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-18652.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-18652.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18652.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -12,9 +12,6 @@\n // once closure as an optimization by trans.  This used to hit an\n // incorrect assert.\n \n-\n-#![feature(unboxed_closures)]\n-\n fn main() {\n     let x = 2u8;\n     let y = 3u8;"}, {"sha": "b569dbc8062e463f056031aacb0a304459f141ef", "filename": "src/test/run-pass/issue-18685.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-18685.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-18685.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18685.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -13,8 +13,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n trait Tr {\n     fn foo(&self);\n "}, {"sha": "8239d74d6df12cf565f3e5e233d9a79a741bf56f", "filename": "src/test/run-pass/issue-18711.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-18711.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-18711.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18711.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -13,8 +13,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n // aux-build:issue-18711.rs\n extern crate issue_18711 as issue;\n "}, {"sha": "8d169917cad92fbc657b00184da127646f613d2a", "filename": "src/test/run-pass/issue-19127.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-19127.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-19127.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19127.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n fn foo<T, F: FnOnce(T) -> T>(f: F) {}\n fn id<'a>(input: &'a u8) -> &'a u8 { input }\n "}, {"sha": "ca2098138ef0c74a387df4ea626694b8c8d721ce", "filename": "src/test/run-pass/issue-19135.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-19135.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fissue-19135.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19135.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::marker::PhantomData;\n \n #[derive(Debug)]"}, {"sha": "7ff684a5ef392912b1ab64020316a4a9b24885de", "filename": "src/test/run-pass/mir_trans_calls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs, unboxed_closures, fn_traits)]\n+#![feature(rustc_attrs, fn_traits)]\n \n #[rustc_mir]\n fn test1(a: isize, b: (i32, i32), c: &[i32]) -> (isize, (i32, i32), &[i32]) {"}, {"sha": "0ba019c591c198e44357ed2e3a2645916e334d2e", "filename": "src/test/run-pass/tcp-stress.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Ftcp-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-stress.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -21,6 +21,8 @@ use std::sync::mpsc::channel;\n use std::time::Duration;\n use std::thread::{self, Builder};\n \n+const TARGET_CNT: usize = 200;\n+\n fn main() {\n     // This test has a chance to time out, try to not let it time out\n     thread::spawn(move|| -> () {\n@@ -42,8 +44,9 @@ fn main() {\n     });\n \n     let (tx, rx) = channel();\n+\n     let mut spawned_cnt = 0;\n-    for _ in 0..1000 {\n+    for _ in 0..TARGET_CNT {\n         let tx = tx.clone();\n         let res = Builder::new().stack_size(64 * 1024).spawn(move|| {\n             match TcpStream::connect(addr) {\n@@ -66,6 +69,6 @@ fn main() {\n     for _ in 0..spawned_cnt {\n         rx.recv().unwrap();\n     }\n-    assert_eq!(spawned_cnt, 1000);\n+    assert_eq!(spawned_cnt, TARGET_CNT);\n     process::exit(0);\n }"}, {"sha": "0de6fbc91cc6b4e9af75fd5508fef6c6e147d3aa", "filename": "src/test/run-pass/trait-bounds-in-arc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-bounds-in-arc.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -16,7 +16,6 @@\n \n #![allow(unknown_features)]\n #![feature(box_syntax, std_misc)]\n-#![feature(unboxed_closures)]\n \n use std::sync::Arc;\n use std::sync::mpsc::channel;"}, {"sha": "c29fb5e86f51d54311b2db332b85c7a64910330d", "filename": "src/test/run-pass/type-id-higher-rank.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-id-higher-rank.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -12,7 +12,7 @@\n // Also acts as a regression test for an ICE (issue #19791)\n \n \n-#![feature(unboxed_closures, core)]\n+#![feature(core)]\n \n use std::any::{Any, TypeId};\n "}, {"sha": "201500d0c6289744034a0e419a14c8b4682d22cf", "filename": "src/test/run-pass/unboxed-closures-all-traits.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-all-traits.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(lang_items, unboxed_closures)]\n+#![feature(lang_items)]\n \n fn a<F:Fn(isize, isize) -> isize>(f: F) -> isize {\n     f(1, 2)"}, {"sha": "23ec0cb5f60f0bee30ad8cb9a774a605c81e9001", "filename": "src/test/run-pass/unboxed-closures-blanket-fn-mut.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-blanket-fn-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-blanket-fn-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-blanket-fn-mut.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,7 @@\n \n // Test that you can supply `&F` where `F: FnMut()`.\n \n-\n-#![feature(lang_items, unboxed_closures)]\n+#![feature(lang_items)]\n \n fn a<F:FnMut() -> i32>(mut f: F) -> i32 {\n     f()"}, {"sha": "2aa48e7d2add37e3616249fe904a45b8c2f17a13", "filename": "src/test/run-pass/unboxed-closures-blanket-fn.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-blanket-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-blanket-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-blanket-fn.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,7 @@\n \n // Test that you can supply `&F` where `F: Fn()`.\n \n-\n-#![feature(lang_items, unboxed_closures)]\n+#![feature(lang_items)]\n \n fn a<F:Fn() -> i32>(f: F) -> i32 {\n     f()"}, {"sha": "069f26841d2cd7139f2569e434e5f8205de545bd", "filename": "src/test/run-pass/unboxed-closures-boxed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-boxed.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,7 +10,6 @@\n \n #![allow(unknown_features)]\n #![feature(box_syntax)]\n-#![feature(unboxed_closures)]\n \n use std::ops::FnMut;\n "}, {"sha": "b251215909a433319ecf881c7267e770d9532ed3", "filename": "src/test/run-pass/unboxed-closures-by-ref.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-by-ref.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unboxed_closures)]\n-\n // Test by-ref capture of environment in unboxed closure types\n \n fn call_fn<F: Fn()>(f: F) {"}, {"sha": "56c53bcafcede749807f22e2e9657b588ce8675c", "filename": "src/test/run-pass/unboxed-closures-call-fn-autoderef.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-call-fn-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-call-fn-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-fn-autoderef.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,9 +10,6 @@\n \n // Test that the call operator autoderefs when calling a bounded type parameter.\n \n-\n-#![feature(unboxed_closures)]\n-\n use std::ops::FnMut;\n \n fn call_with_2(x: &fn(isize) -> isize) -> isize"}, {"sha": "63667ec11d66920d2a62dedb92da27b990cf714f", "filename": "src/test/run-pass/unboxed-closures-call-sugar-autoderef.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-autoderef.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,9 +10,6 @@\n \n // Test that the call operator autoderefs when calling a bounded type parameter.\n \n-\n-#![feature(unboxed_closures)]\n-\n use std::ops::FnMut;\n \n fn call_with_2<F>(x: &mut F) -> isize"}, {"sha": "a92fb05306f483081104e601b7089c61224a140d", "filename": "src/test/run-pass/unboxed-closures-call-sugar-object-autoderef.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object-autoderef.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,7 +11,6 @@\n // Test that the call operator autoderefs when calling to an object type.\n \n #![allow(unknown_features)]\n-#![feature(unboxed_closures)]\n \n use std::ops::FnMut;\n "}, {"sha": "5dd2343cfd1dd43bf67c4b39e93954e77de20efb", "filename": "src/test/run-pass/unboxed-closures-call-sugar-object.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-call-sugar-object.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(unknown_features)]\n-#![feature(unboxed_closures)]\n \n use std::ops::FnMut;\n "}, {"sha": "0b85916d224108922dc2b3bd735cf5464def66ce", "filename": "src/test/run-pass/unboxed-closures-counter-not-moved.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-counter-not-moved.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,7 +10,6 @@\n \n // Test that we mutate a counter on the stack only when we expect to.\n \n-\n fn call<F>(f: F) where F : FnOnce() {\n     f();\n }"}, {"sha": "c8da4a6992a1db92e7605f53b361b53488f76947", "filename": "src/test/run-pass/unboxed-closures-direct-sugary-call.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-direct-sugary-call.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n fn main() {\n     let mut unboxed = || {};\n     unboxed();"}, {"sha": "57f2f87e24697874278b9c9a213aa9f348d334c4", "filename": "src/test/run-pass/unboxed-closures-drop.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-drop.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,9 +11,6 @@\n // A battery of tests to ensure destructors of unboxed closure environments\n // run at the right times.\n \n-\n-#![feature(unboxed_closures)]\n-\n static mut DROP_COUNT: usize = 0;\n \n fn drop_count() -> usize {"}, {"sha": "eddb6080d17be64c26920c3f6a20613db960ad2e", "filename": "src/test/run-pass/unboxed-closures-extern-fn.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-extern-fn.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,10 +10,6 @@\n \n // Checks that extern fn pointers implement the full range of Fn traits.\n \n-\n-#![feature(unboxed_closures)]\n-#![feature(unboxed_closures)]\n-\n use std::ops::{Fn,FnMut,FnOnce};\n \n fn square(x: isize) -> isize { x * x }"}, {"sha": "f90aced3dbe334efc41ef57df279642fc3391088", "filename": "src/test/run-pass/unboxed-closures-fn-as-fnmut-and-fnonce.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fn-as-fnmut-and-fnonce.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,7 +11,6 @@\n // Checks that the Fn trait hierarchy rules permit\n // any Fn trait to be used where Fn is implemented.\n \n-\n #![feature(unboxed_closures, fn_traits)]\n \n use std::ops::{Fn,FnMut,FnOnce};"}, {"sha": "0a977cef442ee68b6ab2420766421a4995110818", "filename": "src/test/run-pass/unboxed-closures-fnmut-as-fnonce.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-fnmut-as-fnonce.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,7 +11,6 @@\n // Checks that the Fn trait hierarchy rules permit\n // FnMut or FnOnce to be used where FnMut is implemented.\n \n-\n #![feature(unboxed_closures, fn_traits)]\n \n struct S;"}, {"sha": "01c81ef98d505c84ad5aefa701b8501afd87b8f1", "filename": "src/test/run-pass/unboxed-closures-generic.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-generic.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unboxed_closures)]\n-\n use std::ops::FnMut;\n \n fn call_it<F:FnMut(i32,i32)->i32>(y: i32, mut f: F) -> i32 {"}, {"sha": "17833033492d09b064c233da18a6649c8e0d9912", "filename": "src/test/run-pass/unboxed-closures-infer-fnmut-calling-fnmut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-calling-fnmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-calling-fnmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-calling-fnmut.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,7 +11,6 @@\n // Test that we are able to infer a suitable kind for this closure\n // that is just called (`FnMut`).\n \n-\n fn main() {\n     let mut counter = 0;\n "}, {"sha": "794527249bffaaf55d9da303bbd046c70de181e9", "filename": "src/test/run-pass/unboxed-closures-infer-fnmut-move.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut-move.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,7 +11,6 @@\n // Test that we are able to infer a suitable kind for this `move`\n // closure that is just called (`FnMut`).\n \n-\n fn main() {\n     let mut counter = 0;\n "}, {"sha": "67f36b9a9203cfa0fe04b69df050ef7eb7665151", "filename": "src/test/run-pass/unboxed-closures-infer-fnmut.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-fnmut.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,7 +11,6 @@\n // Test that we are able to infer a suitable kind for this closure\n // that is just called (`FnMut`).\n \n-\n fn main() {\n     let mut counter = 0;\n "}, {"sha": "c04df7ed5f87126c011f3555ae5a1b53c5bdf8a1", "filename": "src/test/run-pass/unboxed-closures-infer-kind.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-kind.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,9 +11,6 @@\n // Test that we can infer the \"kind\" of an unboxed closure based on\n // the expected type.\n \n-\n-#![feature(unboxed_closures)]\n-\n // Test by-ref capture of environment in unboxed closure types\n \n fn call_fn<F: Fn()>(f: F) {"}, {"sha": "1401fe7470b0a1d71f0772e2d9217414625cdbde", "filename": "src/test/run-pass/unboxed-closures-infer-upvar.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-infer-upvar.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,7 +11,6 @@\n // Test that the type variable in the type(`Vec<_>`) of a closed over\n // variable does not interfere with type inference.\n \n-\n fn f<F: FnMut()>(mut f: F) {\n     f();\n }"}, {"sha": "a55b0a0185e615200c4dfea5e7ec4f96c3a5be12", "filename": "src/test/run-pass/unboxed-closures-move-mutable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-move-mutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-move-mutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-move-mutable.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,7 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n #![deny(unused_mut)]\n \n // Test that mutating a mutable upvar in a capture-by-value unboxed"}, {"sha": "99663646254e73969c9a22bfeabbb40d26749540", "filename": "src/test/run-pass/unboxed-closures-move-some-upvars-in-by-ref-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-move-some-upvars-in-by-ref-closure.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,7 +11,6 @@\n // Test that in a by-ref once closure we move some variables even as\n // we capture others by mutable reference.\n \n-\n fn call<F>(f: F) where F : FnOnce() {\n     f();\n }"}, {"sha": "429afb95248ce2024ebfd7fd17cceecb9ce855d4", "filename": "src/test/run-pass/unboxed-closures-simple.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-simple.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n-#![feature(unboxed_closures)]\n-\n use std::ops::FnMut;\n \n pub fn main() {"}, {"sha": "3ed055a7884ebb7c71ba7f40f2bfef4bca4b09c0", "filename": "src/test/run-pass/unboxed-closures-single-word-env.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-single-word-env.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -11,9 +11,6 @@\n // Ensures that single-word environments work right in unboxed closures.\n // These take a different path in codegen.\n \n-\n-#![feature(unboxed_closures)]\n-\n fn a<F:Fn(isize, isize) -> isize>(f: F) -> isize {\n     f(1, 2)\n }"}, {"sha": "c13e9513ce33a00c379ff23823c322dd41b13b57", "filename": "src/test/run-pass/unboxed-closures-static-call-fn-once.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-static-call-fn-once.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n fn main() {\n     let onetime = |x| x;\n     onetime(0);"}, {"sha": "b7d367f235381bc88721dce80562ffacdfa113a3", "filename": "src/test/run-pass/unboxed-closures-sugar-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-sugar-object.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,9 +10,7 @@\n \n // Test unboxed closure sugar used in object types.\n \n-\n #![allow(dead_code)]\n-#![feature(unboxed_closures)]\n \n struct Foo<T,U> {\n     t: T, u: U"}, {"sha": "40071ec9754e2617bcda034310e6c48b16ca29d6", "filename": "src/test/run-pass/unboxed-closures-unique-type-id.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-unique-type-id.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -19,9 +19,6 @@\n //\n // compile-flags: -g\n \n-\n-#![feature(unboxed_closures)]\n-\n use std::ptr;\n \n pub fn replace_map<'a, T, F>(src: &mut T, prod: F) where F: FnOnce(T) -> T {"}, {"sha": "9e6a7cce1fd2a9ad77d17117b403e0996f628543", "filename": "src/test/run-pass/unboxed-closures-zero-args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-zero-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Funboxed-closures-zero-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-zero-args.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n fn main() {\n     let mut zero = || {};\n     let () = zero();"}, {"sha": "8a775caaac6d2248f654f52d160aaab63c2c5446", "filename": "src/test/run-pass/where-clauses-unboxed-closures.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/28ce3e8a55b21a285f7075612d140a44b42eb889/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhere-clauses-unboxed-closures.rs?ref=28ce3e8a55b21a285f7075612d140a44b42eb889", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-#![feature(unboxed_closures)]\n-\n struct Bencher;\n \n // ICE"}]}