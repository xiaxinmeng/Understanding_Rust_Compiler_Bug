{"sha": "b7fa9f12ca62fc4f95306fa0c233de948edf303c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZmE5ZjEyY2E2MmZjNGY5NTMwNmZhMGMyMzNkZTk0OGVkZjMwM2M=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril@gmail.com", "date": "2019-10-27T16:58:04Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-01T17:23:04Z"}, "message": "Factor out constructor subtraction", "tree": {"sha": "6725f7409cd5f87607063c94016bd66e43648d4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6725f7409cd5f87607063c94016bd66e43648d4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7fa9f12ca62fc4f95306fa0c233de948edf303c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7fa9f12ca62fc4f95306fa0c233de948edf303c", "html_url": "https://github.com/rust-lang/rust/commit/b7fa9f12ca62fc4f95306fa0c233de948edf303c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7fa9f12ca62fc4f95306fa0c233de948edf303c/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92101b7655d915ae636efcc09d9df18783d8412e", "url": "https://api.github.com/repos/rust-lang/rust/commits/92101b7655d915ae636efcc09d9df18783d8412e", "html_url": "https://github.com/rust-lang/rust/commit/92101b7655d915ae636efcc09d9df18783d8412e"}], "stats": {"total": 63, "additions": 36, "deletions": 27}, "files": [{"sha": "5d5cf9dfac7da51e0479f776b17d26b5986c8e46", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/b7fa9f12ca62fc4f95306fa0c233de948edf303c/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7fa9f12ca62fc4f95306fa0c233de948edf303c/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=b7fa9f12ca62fc4f95306fa0c233de948edf303c", "patch": "@@ -646,6 +646,41 @@ impl<'tcx> Constructor<'tcx> {\n         }\n     }\n \n+    // Returns the set of constructors covered by `self` but not by\n+    // anything in `other_ctors`.\n+    fn subtract_ctors(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        other_ctors: &Vec<Constructor<'tcx>>,\n+    ) -> Vec<Constructor<'tcx>> {\n+        let mut refined_ctors = vec![self.clone()];\n+        for other_ctor in other_ctors {\n+            if other_ctor == self {\n+                // If a constructor appears in a `match` arm, we can\n+                // eliminate it straight away.\n+                refined_ctors = vec![]\n+            } else if let Some(interval) = IntRange::from_ctor(tcx, param_env, other_ctor) {\n+                // Refine the required constructors for the type by subtracting\n+                // the range defined by the current constructor pattern.\n+                refined_ctors = interval.subtract_from(tcx, param_env, refined_ctors);\n+            }\n+\n+            // If the constructor patterns that have been considered so far\n+            // already cover the entire range of values, then we know the\n+            // constructor is not missing, and we can move on to the next one.\n+            if refined_ctors.is_empty() {\n+                break;\n+            }\n+        }\n+\n+        // If a constructor has not been matched, then it is missing.\n+        // We add `refined_ctors` instead of `self`, because then we can\n+        // provide more detailed error information about precisely which\n+        // ranges have been omitted.\n+        refined_ctors\n+    }\n+\n     /// This returns one wildcard pattern for each argument to this constructor.\n     fn wildcard_subpatterns<'a>(\n         &self,\n@@ -1313,33 +1348,7 @@ impl<'tcx> MissingConstructors<'tcx> {\n     /// Iterate over all_ctors \\ used_ctors\n     fn iter<'a>(&'a self) -> impl Iterator<Item = Constructor<'tcx>> + Captures<'a> {\n         self.all_ctors.iter().flat_map(move |req_ctor| {\n-            let mut refined_ctors = vec![req_ctor.clone()];\n-            for used_ctor in &self.used_ctors {\n-                if used_ctor == req_ctor {\n-                    // If a constructor appears in a `match` arm, we can\n-                    // eliminate it straight away.\n-                    refined_ctors = vec![]\n-                } else if let Some(interval) =\n-                    IntRange::from_ctor(self.tcx, self.param_env, used_ctor)\n-                {\n-                    // Refine the required constructors for the type by subtracting\n-                    // the range defined by the current constructor pattern.\n-                    refined_ctors = interval.subtract_from(self.tcx, self.param_env, refined_ctors);\n-                }\n-\n-                // If the constructor patterns that have been considered so far\n-                // already cover the entire range of values, then we know the\n-                // constructor is not missing, and we can move on to the next one.\n-                if refined_ctors.is_empty() {\n-                    break;\n-                }\n-            }\n-\n-            // If a constructor has not been matched, then it is missing.\n-            // We add `refined_ctors` instead of `req_ctor`, because then we can\n-            // provide more detailed error information about precisely which\n-            // ranges have been omitted.\n-            refined_ctors\n+            req_ctor.subtract_ctors(self.tcx, self.param_env, &self.used_ctors)\n         })\n     }\n }"}]}