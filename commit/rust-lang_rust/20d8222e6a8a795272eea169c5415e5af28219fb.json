{"sha": "20d8222e6a8a795272eea169c5415e5af28219fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZDgyMjJlNmE4YTc5NTI3MmVlYTE2OWM1NDE1ZTVhZjI4MjE5ZmI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-15T20:30:45Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-15T20:30:45Z"}, "message": "libsyntax: Pass feature set in ExpansionConfig, not just enable_quotes.", "tree": {"sha": "3b497a221d5891daa81c9c7d22fda9261c12b237", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b497a221d5891daa81c9c7d22fda9261c12b237"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20d8222e6a8a795272eea169c5415e5af28219fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20d8222e6a8a795272eea169c5415e5af28219fb", "html_url": "https://github.com/rust-lang/rust/commit/20d8222e6a8a795272eea169c5415e5af28219fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20d8222e6a8a795272eea169c5415e5af28219fb/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf636c233dfeef5abf0de8fb35e23c0a161810d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf636c233dfeef5abf0de8fb35e23c0a161810d2", "html_url": "https://github.com/rust-lang/rust/commit/cf636c233dfeef5abf0de8fb35e23c0a161810d2"}], "stats": {"total": 44, "additions": 27, "deletions": 17}, "files": [{"sha": "0eda86525ae442571ca39e163343648ffdd1de65", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/20d8222e6a8a795272eea169c5415e5af28219fb/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d8222e6a8a795272eea169c5415e5af28219fb/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=20d8222e6a8a795272eea169c5415e5af28219fb", "patch": "@@ -469,9 +469,10 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n                 new_path.extend(env::split_paths(&_old_path));\n                 env::set_var(\"PATH\", &env::join_paths(new_path.iter()).unwrap());\n             }\n+            let features = sess.features.borrow();\n             let cfg = syntax::ext::expand::ExpansionConfig {\n                 crate_name: crate_name.to_string(),\n-                enable_quotes: sess.features.borrow().quote,\n+                features: Some(&features),\n                 recursion_limit: sess.recursion_limit.get(),\n             };\n             let ret = syntax::ext::expand::expand_crate(&sess.parse_sess,"}, {"sha": "2a3636abf873bb2a373957d6bdb928ffe4a32231", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20d8222e6a8a795272eea169c5415e5af28219fb/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d8222e6a8a795272eea169c5415e5af28219fb/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=20d8222e6a8a795272eea169c5415e5af28219fb", "patch": "@@ -439,7 +439,8 @@ impl BlockInfo {\n \n /// The base map of methods for expanding syntax extension\n /// AST nodes into full ASTs\n-fn initial_syntax_expander_table(ecfg: &expand::ExpansionConfig) -> SyntaxEnv {\n+fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n+                                        -> SyntaxEnv {\n     // utility function to simplify creating NormalTT syntax extensions\n     fn builtin_normal_expander(f: MacroExpanderFn) -> SyntaxExtension {\n         NormalTT(box f, None)\n@@ -470,7 +471,7 @@ fn initial_syntax_expander_table(ecfg: &expand::ExpansionConfig) -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"deriving\"),\n                             Decorator(box ext::deriving::expand_deprecated_deriving));\n \n-    if ecfg.enable_quotes {\n+    if ecfg.enable_quotes() {\n         // Quasi-quoting expanders\n         syntax_expanders.insert(intern(\"quote_tokens\"),\n                            builtin_normal_expander(\n@@ -541,7 +542,7 @@ pub struct ExtCtxt<'a> {\n     pub parse_sess: &'a parse::ParseSess,\n     pub cfg: ast::CrateConfig,\n     pub backtrace: ExpnId,\n-    pub ecfg: expand::ExpansionConfig,\n+    pub ecfg: expand::ExpansionConfig<'a>,\n     pub use_std: bool,\n \n     pub mod_path: Vec<ast::Ident> ,\n@@ -554,7 +555,7 @@ pub struct ExtCtxt<'a> {\n \n impl<'a> ExtCtxt<'a> {\n     pub fn new(parse_sess: &'a parse::ParseSess, cfg: ast::CrateConfig,\n-               ecfg: expand::ExpansionConfig) -> ExtCtxt<'a> {\n+               ecfg: expand::ExpansionConfig<'a>) -> ExtCtxt<'a> {\n         let env = initial_syntax_expander_table(&ecfg);\n         ExtCtxt {\n             parse_sess: parse_sess,"}, {"sha": "267d732c9e66d11241b1b620b038e95ee7d10e02", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/20d8222e6a8a795272eea169c5415e5af28219fb/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20d8222e6a8a795272eea169c5415e5af28219fb/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=20d8222e6a8a795272eea169c5415e5af28219fb", "patch": "@@ -22,6 +22,7 @@ use attr::AttrMetaMethods;\n use codemap;\n use codemap::{Span, Spanned, ExpnInfo, NameAndSpan, MacroBang, MacroAttribute};\n use ext::base::*;\n+use feature_gate::{Features};\n use fold;\n use fold::*;\n use parse;\n@@ -1407,28 +1408,35 @@ fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n     }\n }\n \n-pub struct ExpansionConfig {\n+pub struct ExpansionConfig<'feat> {\n     pub crate_name: String,\n-    pub enable_quotes: bool,\n+    pub features: Option<&'feat Features>,\n     pub recursion_limit: usize,\n }\n \n-impl ExpansionConfig {\n-    pub fn default(crate_name: String) -> ExpansionConfig {\n+impl<'feat> ExpansionConfig<'feat> {\n+    pub fn default(crate_name: String) -> ExpansionConfig<'static> {\n         ExpansionConfig {\n             crate_name: crate_name,\n-            enable_quotes: false,\n+            features: None,\n             recursion_limit: 64,\n         }\n     }\n+\n+    pub fn enable_quotes(&self) -> bool {\n+        match self.features {\n+            Some(&Features { quote: true, .. }) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n-pub fn expand_crate(parse_sess: &parse::ParseSess,\n-                    cfg: ExpansionConfig,\n-                    // these are the macros being imported to this crate:\n-                    imported_macros: Vec<ast::MacroDef>,\n-                    user_exts: Vec<NamedSyntaxExtension>,\n-                    c: Crate) -> Crate {\n+pub fn expand_crate<'feat>(parse_sess: &parse::ParseSess,\n+                           cfg: ExpansionConfig<'feat>,\n+                           // these are the macros being imported to this crate:\n+                           imported_macros: Vec<ast::MacroDef>,\n+                           user_exts: Vec<NamedSyntaxExtension>,\n+                           c: Crate) -> Crate {\n     let mut cx = ExtCtxt::new(parse_sess, c.config.clone(), cfg);\n     cx.use_std = std_inject::use_std(&c);\n \n@@ -1597,7 +1605,7 @@ mod test {\n     // these following tests are quite fragile, in that they don't test what\n     // *kind* of failure occurs.\n \n-    fn test_ecfg() -> ExpansionConfig {\n+    fn test_ecfg() -> ExpansionConfig<'static> {\n         ExpansionConfig::default(\"test\".to_string())\n     }\n "}]}