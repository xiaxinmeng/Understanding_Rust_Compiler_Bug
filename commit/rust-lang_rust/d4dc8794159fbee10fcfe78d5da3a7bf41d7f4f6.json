{"sha": "d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZGM4Nzk0MTU5ZmJlZTEwZmNmZTc4ZDVkYTNhN2JmNDFkN2Y0ZjY=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-05-19T13:08:16Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-05-19T13:08:16Z"}, "message": "Add infer for generic default type", "tree": {"sha": "3d12bfa68f784e6ac2fa73bcbee516cdb22f4f1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d12bfa68f784e6ac2fa73bcbee516cdb22f4f1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6", "html_url": "https://github.com/rust-lang/rust/commit/d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e74d8f148b805f9f6cb1331d1a96f680948da399", "url": "https://api.github.com/repos/rust-lang/rust/commits/e74d8f148b805f9f6cb1331d1a96f680948da399", "html_url": "https://github.com/rust-lang/rust/commit/e74d8f148b805f9f6cb1331d1a96f680948da399"}], "stats": {"total": 95, "additions": 80, "deletions": 15}, "files": [{"sha": "bda02d3cc19d763792091025947a98c23fc68848", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6", "patch": "@@ -11,7 +11,7 @@ use crate::{\n     DefWithBody, Trait,\n     ids,\n     nameres::{Namespace, ImportSourceMap, RawItems, CrateDefMap},\n-    ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks, TypableDef, CallableDef, FnSig, TypeCtor, GenericPredicate},\n+    ty::{InferenceResult, Ty, method_resolution::CrateImplBlocks, TypableDef, CallableDef, FnSig, TypeCtor, GenericPredicate, Substs},\n     adt::{StructData, EnumData},\n     impl_block::{ModuleImplBlocks, ImplSourceMap, ImplBlock},\n     generics::{GenericParams, GenericDef},\n@@ -141,6 +141,9 @@ pub trait HirDatabase: DefDatabase {\n     #[salsa::invoke(crate::ty::generic_predicates)]\n     fn generic_predicates(&self, def: GenericDef) -> Arc<[GenericPredicate]>;\n \n+    #[salsa::invoke(crate::ty::generic_defaults)]\n+    fn generic_defaults(&self, def: GenericDef) -> Substs;\n+\n     #[salsa::invoke(crate::expr::body_with_source_map_query)]\n     fn body_with_source_map(\n         &self,"}, {"sha": "9a65bf567de39d4fb3baf8b2b697d9ae4bfef821", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6", "patch": "@@ -19,7 +19,7 @@ use std::{fmt, mem};\n use crate::{Name, AdtDef, type_ref::Mutability, db::HirDatabase, Trait, GenericParams};\n use display::{HirDisplay, HirFormatter};\n \n-pub(crate) use lower::{TypableDef, type_for_def, type_for_field, callable_item_sig, generic_predicates};\n+pub(crate) use lower::{TypableDef, type_for_def, type_for_field, callable_item_sig, generic_predicates, generic_defaults};\n pub(crate) use infer::{infer, InferenceResult, InferTy};\n pub use lower::CallableDef;\n "}, {"sha": "b4496789b3316685850a7f7a61d8db87821e7e52", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 46, "deletions": 13, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6", "patch": "@@ -18,7 +18,7 @@ use crate::{\n     nameres::Namespace,\n     resolve::{Resolver, Resolution},\n     path::{PathSegment, GenericArg},\n-    generics::{GenericParams, HasGenericParams},\n+    generics::{HasGenericParams},\n     adt::VariantDef, Trait, generics::{ WherePredicate, GenericDef}\n };\n use super::{Ty, primitive, FnSig, Substs, TypeCtor, TraitRef, GenericPredicate};\n@@ -120,15 +120,15 @@ impl Ty {\n         segment: &PathSegment,\n         resolved: TypableDef,\n     ) -> Substs {\n-        let def_generics = match resolved {\n-            TypableDef::Function(func) => func.generic_params(db),\n-            TypableDef::Struct(s) => s.generic_params(db),\n-            TypableDef::Enum(e) => e.generic_params(db),\n-            TypableDef::EnumVariant(var) => var.parent_enum(db).generic_params(db),\n-            TypableDef::TypeAlias(t) => t.generic_params(db),\n-            TypableDef::Const(_) | TypableDef::Static(_) => GenericParams::default().into(),\n+        let def_generic: Option<GenericDef> = match resolved {\n+            TypableDef::Function(func) => Some(func.into()),\n+            TypableDef::Struct(s) => Some(s.into()),\n+            TypableDef::Enum(e) => Some(e.into()),\n+            TypableDef::EnumVariant(var) => Some(var.parent_enum(db).into()),\n+            TypableDef::TypeAlias(t) => Some(t.into()),\n+            TypableDef::Const(_) | TypableDef::Static(_) => None,\n         };\n-        substs_from_path_segment(db, resolver, segment, &def_generics, false)\n+        substs_from_path_segment(db, resolver, segment, def_generic, false)\n     }\n \n     /// Collect generic arguments from a path into a `Substs`. See also\n@@ -172,10 +172,12 @@ pub(super) fn substs_from_path_segment(\n     db: &impl HirDatabase,\n     resolver: &Resolver,\n     segment: &PathSegment,\n-    def_generics: &GenericParams,\n+    def_generic: Option<GenericDef>,\n     add_self_param: bool,\n ) -> Substs {\n     let mut substs = Vec::new();\n+    let def_generics = def_generic.map(|def| def.generic_params(db)).unwrap_or_default();\n+\n     let parent_param_count = def_generics.count_parent_params();\n     substs.extend(iter::repeat(Ty::Unknown).take(parent_param_count));\n     if add_self_param {\n@@ -199,13 +201,28 @@ pub(super) fn substs_from_path_segment(\n         }\n     }\n     // add placeholders for args that were not provided\n-    // FIXME: handle defaults\n     let supplied_params = substs.len();\n     for _ in supplied_params..def_generics.count_params_including_parent() {\n         substs.push(Ty::Unknown);\n     }\n     assert_eq!(substs.len(), def_generics.count_params_including_parent());\n-    Substs(substs.into())\n+    let mut substs = Substs(substs.into());\n+\n+    // handle defaults\n+    if let Some(def_generic) = def_generic {\n+        let default_substs = db.generic_defaults(def_generic);\n+        assert_eq!(substs.len(), default_substs.len());\n+\n+        let mut i = 0;\n+        substs.walk_mut(&mut |ty| {\n+            if *ty == Ty::Unknown {\n+                *ty = default_substs[i].clone();\n+            }\n+            i += 1;\n+        });\n+    }\n+\n+    substs\n }\n \n impl TraitRef {\n@@ -249,7 +266,7 @@ impl TraitRef {\n         resolved: Trait,\n     ) -> Substs {\n         let segment = path.segments.last().expect(\"path should have at least one segment\");\n-        substs_from_path_segment(db, resolver, segment, &resolved.generic_params(db), true)\n+        substs_from_path_segment(db, resolver, segment, Some(resolved.into()), true)\n     }\n \n     pub(crate) fn for_trait(db: &impl HirDatabase, trait_: Trait) -> TraitRef {\n@@ -331,6 +348,22 @@ pub(crate) fn generic_predicates(\n     predicates.into()\n }\n \n+/// Resolve the default type params from generics\n+pub(crate) fn generic_defaults(db: &impl HirDatabase, def: GenericDef) -> Substs {\n+    let resolver = def.resolver(db);\n+    let generic_params = def.generic_params(db);\n+\n+    let defaults = generic_params\n+        .params_including_parent()\n+        .into_iter()\n+        .map(|p| {\n+            p.default.as_ref().map_or(Ty::Unknown, |path| Ty::from_hir_path(db, &resolver, path))\n+        })\n+        .collect::<Vec<_>>();\n+\n+    Substs(defaults.into())\n+}\n+\n fn fn_sig_for_fn(db: &impl HirDatabase, def: Function) -> FnSig {\n     let signature = def.signature(db);\n     let resolver = def.resolver(db);"}, {"sha": "cd24faba52913462ca27b02e7d0b9aed4beb43b8", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=d4dc8794159fbee10fcfe78d5da3a7bf41d7f4f6", "patch": "@@ -1448,6 +1448,35 @@ fn test() {\n     );\n }\n \n+#[test]\n+fn infer_associated_method_generics_with_default_param() {\n+    assert_snapshot_matches!(\n+        infer(r#\"\n+struct Gen<T=u32> {\n+    val: T\n+}\n+\n+impl<T> Gen<T> {\n+    pub fn make() -> Gen<T> {\n+        loop { }\n+    }\n+}\n+\n+fn test() {\n+    let a = Gen::make();\n+}\n+\"#),\n+        @r###\"\n+[80; 104) '{     ...     }': !\n+[90; 98) 'loop { }': !\n+[95; 98) '{ }': ()\n+[118; 146) '{     ...e(); }': ()\n+[128; 129) 'a': Gen<u32>\n+[132; 141) 'Gen::make': fn make<u32>() -> Gen<T>\n+[132; 143) 'Gen::make()': Gen<u32>\"###\n+    );\n+}\n+\n #[test]\n fn infer_associated_method_generics_without_args() {\n     assert_snapshot_matches!("}]}