{"sha": "7a268b9b9635425176f93d3c893fb5345e84e9ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMjY4YjliOTYzNTQyNTE3NmY5M2QzYzg5M2ZiNTM0NWU4NGU5Y2U=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-28T16:17:19Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-28T16:17:19Z"}, "message": "Merge #350\n\n350: Super simple macro support r=matklad a=matklad\n\nSuper simple support for macros, mostly for figuring out how to fit them into the current architecture. Expansion is hard-coded and string based (mid-term, we should try to copy-paste macro-by-example expander from rustc). \r\n\r\nIdeally, we should handle\r\n\r\n* highlighting inside the macro (done)\r\n* extend selection inside the macro \r\n* completion inside the macro\r\n* indexing structs, produced by the macro\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "6ea69024cb22d3fc48a3b392a0185163fa452014", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ea69024cb22d3fc48a3b392a0185163fa452014"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a268b9b9635425176f93d3c893fb5345e84e9ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a268b9b9635425176f93d3c893fb5345e84e9ce", "html_url": "https://github.com/rust-lang/rust/commit/7a268b9b9635425176f93d3c893fb5345e84e9ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a268b9b9635425176f93d3c893fb5345e84e9ce/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "9d6740a9c9ad2ca47c4885bd994f849e90bbef86", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6740a9c9ad2ca47c4885bd994f849e90bbef86", "html_url": "https://github.com/rust-lang/rust/commit/9d6740a9c9ad2ca47c4885bd994f849e90bbef86"}, {"sha": "b911ee542b2f4d1cd62a655f24197856cd9b9097", "url": "https://api.github.com/repos/rust-lang/rust/commits/b911ee542b2f4d1cd62a655f24197856cd9b9097", "html_url": "https://github.com/rust-lang/rust/commit/b911ee542b2f4d1cd62a655f24197856cd9b9097"}], "stats": {"total": 314, "additions": 275, "deletions": 39}, "files": [{"sha": "5e1fbee18f041626f71db162a248109199a6dd26", "filename": "crates/ra_analysis/src/extend_selection.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fextend_selection.rs?ref=7a268b9b9635425176f93d3c893fb5345e84e9ce", "patch": "@@ -0,0 +1,11 @@\n+use ra_db::SyntaxDatabase;\n+\n+use crate::{\n+    TextRange, FileRange,\n+    db::RootDatabase,\n+};\n+\n+pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRange {\n+    let file = db.source_file(frange.file_id);\n+    ra_editor::extend_selection(&file, frange.range).unwrap_or(frange.range)\n+}"}, {"sha": "fcb4cd95740c19f25523ea859d95da62079eb2c0", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=7a268b9b9635425176f93d3c893fb5345e84e9ce", "patch": "@@ -23,7 +23,7 @@ use crate::{\n     AnalysisChange,\n     Cancelable,\n     completion::{CompletionItem, completions},\n-    CrateId, db, Diagnostic, FileId, FilePosition, FileSystemEdit,\n+    CrateId, db, Diagnostic, FileId, FilePosition, FileRange, FileSystemEdit,\n     Query, ReferenceResolution, RootChange, SourceChange, SourceFileEdit,\n     symbol_index::{LibrarySymbolsQuery, SymbolIndex, SymbolsDatabase},\n };\n@@ -404,19 +404,21 @@ impl AnalysisImpl {\n         Ok(res)\n     }\n \n-    pub fn assists(&self, file_id: FileId, range: TextRange) -> Vec<SourceChange> {\n-        let file = self.file_syntax(file_id);\n-        let offset = range.start();\n+    pub fn assists(&self, frange: FileRange) -> Vec<SourceChange> {\n+        let file = self.file_syntax(frange.file_id);\n+        let offset = frange.range.start();\n         let actions = vec![\n             ra_editor::flip_comma(&file, offset).map(|f| f()),\n             ra_editor::add_derive(&file, offset).map(|f| f()),\n             ra_editor::add_impl(&file, offset).map(|f| f()),\n             ra_editor::make_pub_crate(&file, offset).map(|f| f()),\n-            ra_editor::introduce_variable(&file, range).map(|f| f()),\n+            ra_editor::introduce_variable(&file, frange.range).map(|f| f()),\n         ];\n         actions\n             .into_iter()\n-            .filter_map(|local_edit| Some(SourceChange::from_local_edit(file_id, local_edit?)))\n+            .filter_map(|local_edit| {\n+                Some(SourceChange::from_local_edit(frange.file_id, local_edit?))\n+            })\n             .collect()\n     }\n \n@@ -487,13 +489,15 @@ impl AnalysisImpl {\n         Ok(None)\n     }\n \n-    pub fn type_of(&self, file_id: FileId, range: TextRange) -> Cancelable<Option<String>> {\n-        let file = self.db.source_file(file_id);\n+    pub fn type_of(&self, frange: FileRange) -> Cancelable<Option<String>> {\n+        let file = self.db.source_file(frange.file_id);\n         let syntax = file.syntax();\n-        let node = find_covering_node(syntax, range);\n+        let node = find_covering_node(syntax, frange.range);\n         let parent_fn = ctry!(node.ancestors().find_map(FnDef::cast));\n         let function = ctry!(source_binder::function_from_source(\n-            &*self.db, file_id, parent_fn\n+            &*self.db,\n+            frange.file_id,\n+            parent_fn\n         )?);\n         let infer = function.infer(&*self.db)?;\n         Ok(infer.type_of_node(node).map(|t| t.to_string()))"}, {"sha": "67b1c148241a420b78d8ffdb369ac3b8f36780de", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=7a268b9b9635425176f93d3c893fb5345e84e9ce", "patch": "@@ -16,6 +16,10 @@ mod completion;\n mod symbol_index;\n pub mod mock_analysis;\n \n+mod extend_selection;\n+mod syntax_highlighting;\n+mod macros;\n+\n use std::{fmt, sync::Arc};\n \n use rustc_hash::FxHashMap;\n@@ -37,7 +41,7 @@ pub use ra_editor::{\n pub use hir::FnSignatureInfo;\n \n pub use ra_db::{\n-    Canceled, Cancelable, FilePosition,\n+    Canceled, Cancelable, FilePosition, FileRange,\n     CrateGraph, CrateId, SourceRootId, FileId\n };\n \n@@ -276,8 +280,8 @@ impl Analysis {\n     pub fn file_line_index(&self, file_id: FileId) -> Arc<LineIndex> {\n         self.imp.file_line_index(file_id)\n     }\n-    pub fn extend_selection(&self, file: &SourceFileNode, range: TextRange) -> TextRange {\n-        ra_editor::extend_selection(file, range).unwrap_or(range)\n+    pub fn extend_selection(&self, frange: FileRange) -> TextRange {\n+        extend_selection::extend_selection(&self.imp.db, frange)\n     }\n     pub fn matching_brace(&self, file: &SourceFileNode, offset: TextUnit) -> Option<TextUnit> {\n         ra_editor::matching_brace(file, offset)\n@@ -286,9 +290,9 @@ impl Analysis {\n         let file = self.imp.file_syntax(file_id);\n         ra_editor::syntax_tree(&file)\n     }\n-    pub fn join_lines(&self, file_id: FileId, range: TextRange) -> SourceChange {\n-        let file = self.imp.file_syntax(file_id);\n-        SourceChange::from_local_edit(file_id, ra_editor::join_lines(&file, range))\n+    pub fn join_lines(&self, frange: FileRange) -> SourceChange {\n+        let file = self.imp.file_syntax(frange.file_id);\n+        SourceChange::from_local_edit(frange.file_id, ra_editor::join_lines(&file, frange.range))\n     }\n     pub fn on_enter(&self, position: FilePosition) -> Option<SourceChange> {\n         let file = self.imp.file_syntax(position.file_id);\n@@ -340,14 +344,13 @@ impl Analysis {\n         Ok(ra_editor::runnables(&file))\n     }\n     pub fn highlight(&self, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {\n-        let file = self.imp.file_syntax(file_id);\n-        Ok(ra_editor::highlight(&file))\n+        syntax_highlighting::highlight(&*self.imp.db, file_id)\n     }\n     pub fn completions(&self, position: FilePosition) -> Cancelable<Option<Vec<CompletionItem>>> {\n         self.imp.completions(position)\n     }\n-    pub fn assists(&self, file_id: FileId, range: TextRange) -> Cancelable<Vec<SourceChange>> {\n-        Ok(self.imp.assists(file_id, range))\n+    pub fn assists(&self, frange: FileRange) -> Cancelable<Vec<SourceChange>> {\n+        Ok(self.imp.assists(frange))\n     }\n     pub fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n         self.imp.diagnostics(file_id)\n@@ -358,8 +361,8 @@ impl Analysis {\n     ) -> Cancelable<Option<(FnSignatureInfo, Option<usize>)>> {\n         self.imp.resolve_callable(position)\n     }\n-    pub fn type_of(&self, file_id: FileId, range: TextRange) -> Cancelable<Option<String>> {\n-        self.imp.type_of(file_id, range)\n+    pub fn type_of(&self, frange: FileRange) -> Cancelable<Option<String>> {\n+        self.imp.type_of(frange)\n     }\n }\n "}, {"sha": "c0dd49dc873794bb40a999ac0caa2e6e8d286f07", "filename": "crates/ra_analysis/src/macros.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_analysis%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_analysis%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fmacros.rs?ref=7a268b9b9635425176f93d3c893fb5345e84e9ce", "patch": "@@ -0,0 +1,64 @@\n+/// Begining of macro expansion.\n+///\n+/// This code should be moved out of ra_analysis into hir (?) ideally.\n+use ra_syntax::{ast, AstNode, SourceFileNode, TextRange};\n+\n+use crate::{db::RootDatabase, FileId};\n+\n+pub(crate) fn expand(\n+    _db: &RootDatabase,\n+    _file_id: FileId,\n+    macro_call: ast::MacroCall,\n+) -> Option<MacroExpansion> {\n+    let path = macro_call.path()?;\n+    if path.qualifier().is_some() {\n+        return None;\n+    }\n+    let name_ref = path.segment()?.name_ref()?;\n+    if name_ref.text() != \"ctry\" {\n+        return None;\n+    }\n+\n+    let arg = macro_call.token_tree()?;\n+    let text = format!(\n+        r\"\n+        fn dummy() {{\n+            match {} {{\n+                None => return Ok(None),\n+                Some(it) => it,\n+            }}\n+        }}\",\n+        arg.syntax().text()\n+    );\n+    let file = SourceFileNode::parse(&text);\n+    let match_expr = file.syntax().descendants().find_map(ast::MatchExpr::cast)?;\n+    let match_arg = match_expr.expr()?;\n+    let ranges_map = vec![(arg.syntax().range(), match_arg.syntax().range())];\n+    let res = MacroExpansion {\n+        source_file: file,\n+        ranges_map,\n+    };\n+    Some(res)\n+}\n+\n+pub(crate) struct MacroExpansion {\n+    pub(crate) source_file: SourceFileNode,\n+    pub(crate) ranges_map: Vec<(TextRange, TextRange)>,\n+}\n+\n+impl MacroExpansion {\n+    pub(crate) fn source_file(&self) -> &SourceFileNode {\n+        &self.source_file\n+    }\n+    pub(crate) fn map_range_back(&self, tgt_range: TextRange) -> Option<TextRange> {\n+        for (s_range, t_range) in self.ranges_map.iter() {\n+            if tgt_range.is_subrange(&t_range) {\n+                let tgt_at_zero_range = tgt_range - tgt_range.start();\n+                let tgt_range_offset = tgt_range.start() - t_range.start();\n+                let src_range = tgt_at_zero_range + tgt_range_offset + s_range.start();\n+                return Some(src_range);\n+            }\n+        }\n+        None\n+    }\n+}"}, {"sha": "38219da71db5a4c264eec4fb527a21f8cd1a1747", "filename": "crates/ra_analysis/src/syntax_highlighting.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fsyntax_highlighting.rs?ref=7a268b9b9635425176f93d3c893fb5345e84e9ce", "patch": "@@ -0,0 +1,63 @@\n+use ra_syntax::{ast, AstNode,};\n+use ra_editor::HighlightedRange;\n+use ra_db::SyntaxDatabase;\n+\n+use crate::{\n+    db::RootDatabase,\n+    FileId, Cancelable,\n+};\n+\n+pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Cancelable<Vec<HighlightedRange>> {\n+    let source_file = db.source_file(file_id);\n+    let mut res = ra_editor::highlight(&source_file);\n+    for macro_call in source_file\n+        .syntax()\n+        .descendants()\n+        .filter_map(ast::MacroCall::cast)\n+    {\n+        if let Some(exp) = crate::macros::expand(db, file_id, macro_call) {\n+            let mapped_ranges = ra_editor::highlight(exp.source_file())\n+                .into_iter()\n+                .filter_map(|r| {\n+                    let mapped_range = exp.map_range_back(r.range)?;\n+                    let res = HighlightedRange {\n+                        range: mapped_range,\n+                        tag: r.tag,\n+                    };\n+                    Some(res)\n+                });\n+            res.extend(mapped_ranges);\n+        }\n+    }\n+    Ok(res)\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::mock_analysis::single_file;\n+    use test_utils::assert_eq_dbg;\n+\n+    #[test]\n+    fn highlights_code_inside_macros() {\n+        let (analysis, file_id) = single_file(\n+            \"\n+            fn main() {\n+                ctry!({ let x = 92; x});\n+            }\n+        \",\n+        );\n+        let highlights = analysis.highlight(file_id).unwrap();\n+        assert_eq_dbg(\n+            r#\"[HighlightedRange { range: [13; 15), tag: \"keyword\" },\n+                HighlightedRange { range: [16; 20), tag: \"function\" },\n+                HighlightedRange { range: [41; 46), tag: \"macro\" },\n+                HighlightedRange { range: [49; 52), tag: \"keyword\" },\n+                HighlightedRange { range: [57; 59), tag: \"literal\" },\n+                HighlightedRange { range: [49; 52), tag: \"keyword\" },\n+                HighlightedRange { range: [53; 54), tag: \"function\" },\n+                HighlightedRange { range: [57; 59), tag: \"literal\" },\n+                HighlightedRange { range: [61; 62), tag: \"text\" }]\"#,\n+            &highlights,\n+        )\n+    }\n+}"}, {"sha": "7181f295057b64876fa990478a014a6dbd619d40", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=7a268b9b9635425176f93d3c893fb5345e84e9ce", "patch": "@@ -8,7 +8,7 @@ pub mod mock;\n use std::sync::Arc;\n \n use ra_editor::LineIndex;\n-use ra_syntax::{TextUnit, SourceFileNode};\n+use ra_syntax::{TextUnit, TextRange, SourceFileNode};\n \n pub use crate::{\n     cancelation::{Canceled, Cancelable},\n@@ -70,3 +70,9 @@ pub struct FilePosition {\n     pub file_id: FileId,\n     pub offset: TextUnit,\n }\n+\n+#[derive(Clone, Copy, Debug)]\n+pub struct FileRange {\n+    pub file_id: FileId,\n+    pub range: TextRange,\n+}"}, {"sha": "9043026c1f3629271aa8a71d7a50cfb0db5e5dc9", "filename": "crates/ra_editor/src/lib.rs", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_editor%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_editor%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Flib.rs?ref=7a268b9b9635425176f93d3c893fb5345e84e9ce", "patch": "@@ -24,9 +24,10 @@ use ra_syntax::{\n     SourceFileNode,\n     Location,\n     SyntaxKind::{self, *},\n-    SyntaxNodeRef, TextRange, TextUnit,\n+    SyntaxNodeRef, TextRange, TextUnit, Direction,\n };\n use itertools::Itertools;\n+use rustc_hash::FxHashSet;\n \n #[derive(Debug)]\n pub struct HighlightedRange {\n@@ -79,8 +80,13 @@ pub fn matching_brace(file: &SourceFileNode, offset: TextUnit) -> Option<TextUni\n }\n \n pub fn highlight(file: &SourceFileNode) -> Vec<HighlightedRange> {\n+    // Visited nodes to handle highlighting priorities\n+    let mut highlighted = FxHashSet::default();\n     let mut res = Vec::new();\n     for node in file.syntax().descendants() {\n+        if highlighted.contains(&node) {\n+            continue;\n+        }\n         let tag = match node.kind() {\n             COMMENT => \"comment\",\n             STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => \"string\",\n@@ -90,7 +96,30 @@ pub fn highlight(file: &SourceFileNode) -> Vec<HighlightedRange> {\n             INT_NUMBER | FLOAT_NUMBER | CHAR | BYTE => \"literal\",\n             LIFETIME => \"parameter\",\n             k if k.is_keyword() => \"keyword\",\n-            _ => continue,\n+            _ => {\n+                if let Some(macro_call) = ast::MacroCall::cast(node) {\n+                    if let Some(path) = macro_call.path() {\n+                        if let Some(segment) = path.segment() {\n+                            if let Some(name_ref) = segment.name_ref() {\n+                                highlighted.insert(name_ref.syntax());\n+                                let range_start = name_ref.syntax().range().start();\n+                                let mut range_end = name_ref.syntax().range().end();\n+                                for sibling in path.syntax().siblings(Direction::Next) {\n+                                    match sibling.kind() {\n+                                        EXCL | IDENT => range_end = sibling.range().end(),\n+                                        _ => (),\n+                                    }\n+                                }\n+                                res.push(HighlightedRange {\n+                                    range: TextRange::from_to(range_start, range_end),\n+                                    tag: \"macro\",\n+                                })\n+                            }\n+                        }\n+                    }\n+                }\n+                continue;\n+            }\n         };\n         res.push(HighlightedRange {\n             range: node.range(),\n@@ -235,7 +264,7 @@ fn main() {}\n             r#\"[HighlightedRange { range: [1; 11), tag: \"comment\" },\n                 HighlightedRange { range: [12; 14), tag: \"keyword\" },\n                 HighlightedRange { range: [15; 19), tag: \"function\" },\n-                HighlightedRange { range: [29; 36), tag: \"text\" },\n+                HighlightedRange { range: [29; 37), tag: \"macro\" },\n                 HighlightedRange { range: [38; 50), tag: \"string\" },\n                 HighlightedRange { range: [52; 54), tag: \"literal\" }]\"#,\n             &hls,"}, {"sha": "3d56ccd9717a52f067469ab3caa6062dfa8a4c2f", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=7a268b9b9635425176f93d3c893fb5345e84e9ce", "patch": "@@ -2,7 +2,7 @@ use languageserver_types::{\n     self, Location, Position, Range, SymbolKind, TextDocumentEdit, TextDocumentIdentifier,\n     TextDocumentItem, TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier, InsertTextFormat,\n };\n-use ra_analysis::{FileId, FileSystemEdit, SourceChange, SourceFileEdit, FilePosition, CompletionItem, CompletionItemKind, InsertText};\n+use ra_analysis::{FileId, FileSystemEdit, SourceChange, SourceFileEdit, FilePosition,FileRange,  CompletionItem, CompletionItemKind, InsertText};\n use ra_editor::{LineCol, LineIndex, translate_offset_with_edit};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n@@ -218,6 +218,17 @@ impl<'a> TryConvWith for &'a TextDocumentPositionParams {\n     }\n }\n \n+impl<'a> TryConvWith for (&'a TextDocumentIdentifier, Range) {\n+    type Ctx = ServerWorld;\n+    type Output = FileRange;\n+    fn try_conv_with(self, world: &ServerWorld) -> Result<FileRange> {\n+        let file_id = self.0.try_conv_with(world)?;\n+        let line_index = world.analysis().file_line_index(file_id);\n+        let range = self.1.conv_with(&line_index);\n+        Ok(FileRange { file_id, range })\n+    }\n+}\n+\n impl<T: TryConvWith> TryConvWith for Vec<T> {\n     type Ctx = <T as TryConvWith>::Ctx;\n     type Output = Vec<<T as TryConvWith>::Output>;"}, {"sha": "d6f3dbe28da2e5e41ea1604eb22a1d8fd598cdae", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=7a268b9b9635425176f93d3c893fb5345e84e9ce", "patch": "@@ -8,7 +8,7 @@ use languageserver_types::{\n     PrepareRenameResponse, RenameParams, SymbolInformation, TextDocumentIdentifier, TextEdit,\n     WorkspaceEdit, ParameterInformation, ParameterLabel, SignatureInformation, Hover, HoverContents,\n };\n-use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FilePosition, Severity};\n+use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FileRange, FilePosition, Severity};\n use ra_syntax::{TextUnit, text_utils::intersect};\n use ra_text_edit::text_utils::contains_offset_nonstrict;\n use rustc_hash::FxHashMap;\n@@ -33,13 +33,13 @@ pub fn handle_extend_selection(\n     params: req::ExtendSelectionParams,\n ) -> Result<req::ExtendSelectionResult> {\n     let file_id = params.text_document.try_conv_with(&world)?;\n-    let file = world.analysis().file_syntax(file_id);\n     let line_index = world.analysis().file_line_index(file_id);\n     let selections = params\n         .selections\n         .into_iter()\n         .map_conv_with(&line_index)\n-        .map(|r| world.analysis().extend_selection(&file, r))\n+        .map(|range| FileRange { file_id, range })\n+        .map(|frange| world.analysis().extend_selection(frange))\n         .map_conv_with(&line_index)\n         .collect();\n     Ok(req::ExtendSelectionResult { selections })\n@@ -71,13 +71,8 @@ pub fn handle_join_lines(\n     world: ServerWorld,\n     params: req::JoinLinesParams,\n ) -> Result<req::SourceChange> {\n-    let file_id = params.text_document.try_conv_with(&world)?;\n-    let line_index = world.analysis().file_line_index(file_id);\n-    let range = params.range.conv_with(&line_index);\n-    world\n-        .analysis()\n-        .join_lines(file_id, range)\n-        .try_conv_with(&world)\n+    let frange = (&params.text_document, params.range).try_conv_with(&world)?;\n+    world.analysis().join_lines(frange).try_conv_with(&world)\n }\n \n pub fn handle_on_enter(\n@@ -614,7 +609,10 @@ pub fn handle_code_action(\n     let line_index = world.analysis().file_line_index(file_id);\n     let range = params.range.conv_with(&line_index);\n \n-    let assists = world.analysis().assists(file_id, range)?.into_iter();\n+    let assists = world\n+        .analysis()\n+        .assists(FileRange { file_id, range })?\n+        .into_iter();\n     let fixes = world\n         .analysis()\n         .diagnostics(file_id)?"}, {"sha": "c5ac90a62a83caf3773e8acdc93fe2bf821b077a", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=7a268b9b9635425176f93d3c893fb5345e84e9ce", "patch": "@@ -1838,6 +1838,51 @@ impl<R: TreeRoot<RaTypes>> LoopExprNode<R> {\n impl<'a> ast::LoopBodyOwner<'a> for LoopExpr<'a> {}\n impl<'a> LoopExpr<'a> {}\n \n+// MacroCall\n+#[derive(Debug, Clone, Copy,)]\n+pub struct MacroCallNode<R: TreeRoot<RaTypes> = OwnedRoot> {\n+    pub(crate) syntax: SyntaxNode<R>,\n+}\n+pub type MacroCall<'a> = MacroCallNode<RefRoot<'a>>;\n+\n+impl<R1: TreeRoot<RaTypes>, R2: TreeRoot<RaTypes>> PartialEq<MacroCallNode<R1>> for MacroCallNode<R2> {\n+    fn eq(&self, other: &MacroCallNode<R1>) -> bool { self.syntax == other.syntax }\n+}\n+impl<R: TreeRoot<RaTypes>> Eq for MacroCallNode<R> {}\n+impl<R: TreeRoot<RaTypes>> Hash for MacroCallNode<R> {\n+    fn hash<H: Hasher>(&self, state: &mut H) { self.syntax.hash(state) }\n+}\n+\n+impl<'a> AstNode<'a> for MacroCall<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            MACRO_CALL => Some(MacroCall { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<R: TreeRoot<RaTypes>> MacroCallNode<R> {\n+    pub fn borrowed(&self) -> MacroCall {\n+        MacroCallNode { syntax: self.syntax.borrowed() }\n+    }\n+    pub fn owned(&self) -> MacroCallNode {\n+        MacroCallNode { syntax: self.syntax.owned() }\n+    }\n+}\n+\n+\n+impl<'a> MacroCall<'a> {\n+    pub fn token_tree(self) -> Option<TokenTree<'a>> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn path(self) -> Option<Path<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n+\n // MatchArm\n #[derive(Debug, Clone, Copy,)]\n pub struct MatchArmNode<R: TreeRoot<RaTypes> = OwnedRoot> {"}, {"sha": "aab4839a9f634364543f3eb9d442effe163be814", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/7a268b9b9635425176f93d3c893fb5345e84e9ce/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=7a268b9b9635425176f93d3c893fb5345e84e9ce", "patch": "@@ -484,6 +484,7 @@ Grammar(\n \n         \"Name\": (),\n         \"NameRef\": (),\n+        \"MacroCall\": ( options: [ \"TokenTree\", \"Path\" ] ),\n         \"Attr\": ( options: [ [\"value\", \"TokenTree\"] ] ),\n         \"TokenTree\": (),\n         \"TypeParamList\": ("}, {"sha": "2521dff622151409c78f65700b4c63e60e7a0405", "filename": "editors/code/src/highlighting.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a268b9b9635425176f93d3c893fb5345e84e9ce/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "raw_url": "https://github.com/rust-lang/rust/raw/7a268b9b9635425176f93d3c893fb5345e84e9ce/editors%2Fcode%2Fsrc%2Fhighlighting.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fhighlighting.ts?ref=7a268b9b9635425176f93d3c893fb5345e84e9ce", "patch": "@@ -28,7 +28,8 @@ export class Highlighter {\n             ['builtin', decor('#DD6718')],\n             ['text', decor('#DCDCCC')],\n             ['attribute', decor('#BFEBBF')],\n-            ['literal', decor('#DFAF8F')]\n+            ['literal', decor('#DFAF8F')],\n+            ['macro', decor('#DFAF8F')]\n         ];\n \n         return new Map<string, vscode.TextEditorDecorationType>(decorations);"}]}