{"sha": "bb0c8ef373317843c1df7e9110e4bd0978ff47eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMGM4ZWYzNzMzMTc4NDNjMWRmN2U5MTEwZTRiZDA5NzhmZjQ3ZWI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T11:58:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-08T16:16:06Z"}, "message": "Normalize types in impls, add test for coherence failure.\n\nFixes #20624.", "tree": {"sha": "ad4dd3af62ba2a048a6df3bc2a4870bd13161f57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad4dd3af62ba2a048a6df3bc2a4870bd13161f57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb0c8ef373317843c1df7e9110e4bd0978ff47eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb0c8ef373317843c1df7e9110e4bd0978ff47eb", "html_url": "https://github.com/rust-lang/rust/commit/bb0c8ef373317843c1df7e9110e4bd0978ff47eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb0c8ef373317843c1df7e9110e4bd0978ff47eb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f99a41fe1a27a48e96bc2616ec9faa6de924386", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f99a41fe1a27a48e96bc2616ec9faa6de924386", "html_url": "https://github.com/rust-lang/rust/commit/2f99a41fe1a27a48e96bc2616ec9faa6de924386"}], "stats": {"total": 153, "additions": 122, "deletions": 31}, "files": [{"sha": "db67bb4ba7fac431abf226d213f0d47b1a33b278", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c8ef373317843c1df7e9110e4bd0978ff47eb/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c8ef373317843c1df7e9110e4bd0978ff47eb/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=bb0c8ef373317843c1df7e9110e4bd0978ff47eb", "patch": "@@ -28,7 +28,6 @@\n #![feature(slicing_syntax, unsafe_destructor)]\n #![feature(box_syntax)]\n #![feature(rustc_diagnostic_macros)]\n-#![feature(old_impl_check)]\n \n extern crate arena;\n extern crate flate;"}, {"sha": "9ac6b8a86b68b10585fb191f64ca5552f3cb181a", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c8ef373317843c1df7e9110e4bd0978ff47eb/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c8ef373317843c1df7e9110e4bd0978ff47eb/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=bb0c8ef373317843c1df7e9110e4bd0978ff47eb", "patch": "@@ -313,6 +313,17 @@ impl<T> VecPerParamSpace<T> {\n         self.content.insert(limit, value);\n     }\n \n+    /// Appends `values` to the vector associated with `space`.\n+    ///\n+    /// Unlike the `extend` method in `Vec`, this should not be assumed\n+    /// to be a cheap operation (even when amortized over many calls).\n+    pub fn extend<I:Iterator<Item=T>>(&mut self, space: ParamSpace, mut values: I) {\n+        // This could be made more efficient, obviously.\n+        for item in values {\n+            self.push(space, item);\n+        }\n+    }\n+\n     pub fn pop(&mut self, space: ParamSpace) -> Option<T> {\n         let (start, limit) = self.limits(space);\n         if start == limit {"}, {"sha": "b6d45ab89e70aa1b1b164357acc0ba98e84cd9f5", "filename": "src/librustc/middle/traits/coherence.rs", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c8ef373317843c1df7e9110e4bd0978ff47eb/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c8ef373317843c1df7e9110e4bd0978ff47eb/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fcoherence.rs?ref=bb0c8ef373317843c1df7e9110e4bd0978ff47eb", "patch": "@@ -12,6 +12,7 @@\n \n use super::SelectionContext;\n use super::{Obligation, ObligationCause};\n+use super::project;\n use super::util;\n \n use middle::subst::{Subst};\n@@ -34,22 +35,28 @@ pub fn impl_can_satisfy(infcx: &InferCtxt,\n            impl1_def_id.repr(infcx.tcx),\n            impl2_def_id.repr(infcx.tcx));\n \n+    let param_env = ty::empty_parameter_environment(infcx.tcx);\n+    let mut selcx = SelectionContext::intercrate(infcx, &param_env);\n+    let cause = ObligationCause::dummy();\n+\n     // `impl1` provides an implementation of `Foo<X,Y> for Z`.\n     let impl1_substs =\n         util::fresh_substs_for_impl(infcx, DUMMY_SP, impl1_def_id);\n     let impl1_trait_ref =\n         (*ty::impl_trait_ref(infcx.tcx, impl1_def_id).unwrap()).subst(infcx.tcx, &impl1_substs);\n+    let impl1_trait_ref =\n+        project::normalize(&mut selcx, cause.clone(), &impl1_trait_ref);\n \n     // Determine whether `impl2` can provide an implementation for those\n     // same types.\n-    let param_env = ty::empty_parameter_environment(infcx.tcx);\n-    let mut selcx = SelectionContext::intercrate(infcx, &param_env);\n-    let obligation = Obligation::new(ObligationCause::dummy(),\n+    let obligation = Obligation::new(cause,\n                                      ty::Binder(ty::TraitPredicate {\n-                                         trait_ref: Rc::new(impl1_trait_ref),\n+                                         trait_ref: Rc::new(impl1_trait_ref.value),\n                                      }));\n     debug!(\"impl_can_satisfy(obligation={})\", obligation.repr(infcx.tcx));\n-    selcx.evaluate_impl(impl2_def_id, &obligation)\n+    selcx.evaluate_impl(impl2_def_id, &obligation) &&\n+        impl1_trait_ref.obligations.iter().all(\n+            |o| selcx.evaluate_obligation(o))\n }\n \n #[allow(missing_copy_implementations)]"}, {"sha": "1a7e712f180d40c23d744a008f1a66f36f873c0a", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c8ef373317843c1df7e9110e4bd0978ff47eb/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c8ef373317843c1df7e9110e4bd0978ff47eb/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=bb0c8ef373317843c1df7e9110e4bd0978ff47eb", "patch": "@@ -243,6 +243,13 @@ pub struct Normalized<'tcx,T> {\n \n pub type NormalizedTy<'tcx> = Normalized<'tcx, Ty<'tcx>>;\n \n+impl<'tcx,T> Normalized<'tcx,T> {\n+    fn with<U>(self, value: U) -> Normalized<'tcx,U> {\n+        Normalized { value: value, obligations: self.obligations }\n+    }\n+}\n+\n+\n pub fn normalize_projection_type<'a,'b,'tcx>(\n     selcx: &'a mut SelectionContext<'b,'tcx>,\n     projection_ty: ty::ProjectionTy<'tcx>,"}, {"sha": "5a491d71cf42fdce24e4dc2cf314a6aad20b6556", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c8ef373317843c1df7e9110e4bd0978ff47eb/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c8ef373317843c1df7e9110e4bd0978ff47eb/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=bb0c8ef373317843c1df7e9110e4bd0978ff47eb", "patch": "@@ -19,6 +19,7 @@ use self::EvaluationResult::*;\n \n use super::{DerivedObligationCause};\n use super::{project};\n+use super::project::Normalized;\n use super::{PredicateObligation, Obligation, TraitObligation, ObligationCause};\n use super::{ObligationCauseCode, BuiltinDerivedObligation};\n use super::{SelectionError, Unimplemented, Overflow, OutputTypeParameterMismatch};\n@@ -1160,7 +1161,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     let impl_trait_ref =\n                         ty::impl_trait_ref(self.tcx(), impl_def_id).unwrap();\n                     let impl_trait_ref =\n-                        impl_trait_ref.subst(self.tcx(), &impl_substs);\n+                        impl_trait_ref.subst(self.tcx(), &impl_substs.value);\n                     let poly_impl_trait_ref =\n                         ty::Binder(impl_trait_ref);\n                     let origin =\n@@ -1731,15 +1732,15 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             let substs =\n                 self.rematch_impl(impl_def_id, obligation,\n                                   snapshot, &skol_map, skol_obligation_trait_ref.trait_ref);\n-            debug!(\"confirm_impl_candidate substs={:?}\", substs);\n+            debug!(\"confirm_impl_candidate substs={}\", substs.repr(self.tcx()));\n             Ok(self.vtable_impl(impl_def_id, substs, obligation.cause.clone(),\n                                 obligation.recursion_depth + 1, skol_map, snapshot))\n         })\n     }\n \n     fn vtable_impl(&mut self,\n                    impl_def_id: ast::DefId,\n-                   substs: Substs<'tcx>,\n+                   substs: Normalized<'tcx, Substs<'tcx>>,\n                    cause: ObligationCause<'tcx>,\n                    recursion_depth: uint,\n                    skol_map: infer::SkolemizationMap,\n@@ -1752,21 +1753,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                recursion_depth,\n                skol_map.repr(self.tcx()));\n \n-        let impl_predicates =\n-            self.impl_predicates(cause,\n+        let mut impl_obligations =\n+            self.impl_obligations(cause,\n                                  recursion_depth,\n                                  impl_def_id,\n-                                 &substs,\n+                                 &substs.value,\n                                  skol_map,\n                                  snapshot);\n \n-        debug!(\"vtable_impl: impl_def_id={} impl_predicates={}\",\n+        debug!(\"vtable_impl: impl_def_id={} impl_obligations={}\",\n                impl_def_id.repr(self.tcx()),\n-               impl_predicates.repr(self.tcx()));\n+               impl_obligations.repr(self.tcx()));\n+\n+        impl_obligations.extend(TypeSpace, substs.obligations.into_iter());\n \n         VtableImplData { impl_def_id: impl_def_id,\n-                         substs: substs,\n-                         nested: impl_predicates }\n+                         substs: substs.value,\n+                         nested: impl_obligations }\n     }\n \n     fn confirm_object_candidate(&mut self,\n@@ -1950,7 +1953,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     snapshot: &infer::CombinedSnapshot,\n                     skol_map: &infer::SkolemizationMap,\n                     skol_obligation_trait_ref: Rc<ty::TraitRef<'tcx>>)\n-                    -> Substs<'tcx>\n+                    -> Normalized<'tcx, Substs<'tcx>>\n     {\n         match self.match_impl(impl_def_id, obligation, snapshot,\n                               skol_map, skol_obligation_trait_ref) {\n@@ -1972,7 +1975,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                   snapshot: &infer::CombinedSnapshot,\n                   skol_map: &infer::SkolemizationMap,\n                   skol_obligation_trait_ref: Rc<ty::TraitRef<'tcx>>)\n-                  -> Result<Substs<'tcx>, ()>\n+                  -> Result<Normalized<'tcx, Substs<'tcx>>, ()>\n     {\n         let impl_trait_ref = ty::impl_trait_ref(self.tcx(), impl_def_id).unwrap();\n \n@@ -1990,6 +1993,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let impl_trait_ref = impl_trait_ref.subst(self.tcx(),\n                                                   &impl_substs);\n \n+        let impl_trait_ref =\n+            project::normalize_with_depth(self,\n+                                          obligation.cause.clone(),\n+                                          obligation.recursion_depth + 1,\n+                                          &impl_trait_ref);\n+\n         debug!(\"match_impl(impl_def_id={}, obligation={}, \\\n                impl_trait_ref={}, skol_obligation_trait_ref={})\",\n                impl_def_id.repr(self.tcx()),\n@@ -2000,7 +2009,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         let origin = infer::RelateOutputImplTypes(obligation.cause.span);\n         match self.infcx.sub_trait_refs(false,\n                                         origin,\n-                                        impl_trait_ref,\n+                                        impl_trait_ref.value.clone(),\n                                         skol_obligation_trait_ref) {\n             Ok(()) => { }\n             Err(e) => {\n@@ -2020,7 +2029,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n \n         debug!(\"match_impl: success impl_substs={}\", impl_substs.repr(self.tcx()));\n-        Ok(impl_substs)\n+        Ok(Normalized { value: impl_substs,\n+                        obligations: impl_trait_ref.obligations })\n     }\n \n     fn fast_reject_trait_refs(&mut self,\n@@ -2161,14 +2171,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n-    fn impl_predicates(&mut self,\n-                       cause: ObligationCause<'tcx>,\n-                       recursion_depth: uint,\n-                       impl_def_id: ast::DefId,\n-                       impl_substs: &Substs<'tcx>,\n-                       skol_map: infer::SkolemizationMap,\n-                       snapshot: &infer::CombinedSnapshot)\n-                       -> VecPerParamSpace<PredicateObligation<'tcx>>\n+    fn impl_obligations(&mut self,\n+                        cause: ObligationCause<'tcx>,\n+                        recursion_depth: uint,\n+                        impl_def_id: ast::DefId,\n+                        impl_substs: &Substs<'tcx>,\n+                        skol_map: infer::SkolemizationMap,\n+                        snapshot: &infer::CombinedSnapshot)\n+                        -> VecPerParamSpace<PredicateObligation<'tcx>>\n     {\n         let impl_generics = ty::lookup_item_type(self.tcx(), impl_def_id).generics;\n         let bounds = impl_generics.to_bounds(self.tcx(), impl_substs);\n@@ -2181,9 +2191,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                           cause,\n                                           recursion_depth,\n                                           &normalized_bounds.value);\n-        for obligation in normalized_bounds.obligations.into_iter() {\n-            impl_obligations.push(TypeSpace, obligation);\n-        }\n+        impl_obligations.extend(TypeSpace, normalized_bounds.obligations.into_iter());\n         impl_obligations\n     }\n "}, {"sha": "95a68dd66983672dfe537bf4f1bfc8bcee5c8d2d", "filename": "src/test/compile-fail/associated-types-coherence-failure.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bb0c8ef373317843c1df7e9110e4bd0978ff47eb/src%2Ftest%2Fcompile-fail%2Fassociated-types-coherence-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb0c8ef373317843c1df7e9110e4bd0978ff47eb/src%2Ftest%2Fcompile-fail%2Fassociated-types-coherence-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-coherence-failure.rs?ref=bb0c8ef373317843c1df7e9110e4bd0978ff47eb", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that coherence detects overlap when some of the types in the\n+// impls are projections of associated type. Issue #20624.\n+\n+use std::ops::Deref;\n+\n+pub struct Cow<'a, B: ?Sized>;\n+\n+/// Trait for moving into a `Cow`\n+pub trait IntoCow<'a, B: ?Sized> {\n+    /// Moves `self` into `Cow`\n+    fn into_cow(self) -> Cow<'a, B>;\n+}\n+\n+impl<'a, B: ?Sized> IntoCow<'a, B> for Cow<'a, B> where B: ToOwned {\n+//~^ ERROR E0119\n+    fn into_cow(self) -> Cow<'a, B> {\n+        self\n+    }\n+}\n+\n+impl<'a, B: ?Sized> IntoCow<'a, B> for <B as ToOwned>::Owned where B: ToOwned {\n+//~^ ERROR E0119\n+    fn into_cow(self) -> Cow<'a, B> {\n+        Cow\n+    }\n+}\n+\n+impl<'a, B: ?Sized> IntoCow<'a, B> for &'a B where B: ToOwned {\n+    fn into_cow(self) -> Cow<'a, B> {\n+        Cow\n+    }\n+}\n+\n+impl ToOwned for u8 {\n+    type Owned = &'static u8;\n+    fn to_owned(&self) -> &'static u8 { panic!() }\n+}\n+\n+/// A generalization of Clone to borrowed data.\n+pub trait ToOwned {\n+    type Owned;\n+\n+    /// Create owned data from borrowed data, usually by copying.\n+    fn to_owned(&self) -> Self::Owned;\n+}\n+\n+\n+fn main() {}\n+"}]}