{"sha": "600ac6959a824ca087b86cdd705ed9d1f3b73977", "node_id": "C_kwDOAAsO6NoAKDYwMGFjNjk1OWE4MjRjYTA4N2I4NmNkZDcwNWVkOWQxZjNiNzM5Nzc", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-07T14:46:16Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-13T12:09:08Z"}, "message": "sync thread_local key conditions exactly with what the macro uses", "tree": {"sha": "ca485e6a9867d6d3ebda8bece746c78778b4f588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca485e6a9867d6d3ebda8bece746c78778b4f588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/600ac6959a824ca087b86cdd705ed9d1f3b73977", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/600ac6959a824ca087b86cdd705ed9d1f3b73977", "html_url": "https://github.com/rust-lang/rust/commit/600ac6959a824ca087b86cdd705ed9d1f3b73977", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/600ac6959a824ca087b86cdd705ed9d1f3b73977/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58546803885164d488185fb9cb9fb04fcbe64e30", "url": "https://api.github.com/repos/rust-lang/rust/commits/58546803885164d488185fb9cb9fb04fcbe64e30", "html_url": "https://github.com/rust-lang/rust/commit/58546803885164d488185fb9cb9fb04fcbe64e30"}], "stats": {"total": 42, "additions": 32, "deletions": 10}, "files": [{"sha": "d7fd2130f7ccec5f84ff93187651e12d3550afc0", "filename": "library/std/src/sys/unix/thread_local_dtor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/600ac6959a824ca087b86cdd705ed9d1f3b73977/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ac6959a824ca087b86cdd705ed9d1f3b73977/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread_local_dtor.rs?ref=600ac6959a824ca087b86cdd705ed9d1f3b73977", "patch": "@@ -17,6 +17,7 @@\n     target_os = \"redox\",\n     target_os = \"emscripten\"\n ))]\n+#[cfg_attr(target_family = \"wasm\", allow(unused))] // might remain unused depending on target details (e.g. wasm32-unknown-emscripten)\n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n     use crate::mem;\n     use crate::sys_common::thread_local_dtor::register_dtor_fallback;"}, {"sha": "84660ea588156908166e40832b6ace041b3df601", "filename": "library/std/src/sys/unsupported/thread_local_dtor.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/600ac6959a824ca087b86cdd705ed9d1f3b73977/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_local_dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ac6959a824ca087b86cdd705ed9d1f3b73977/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_local_dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fthread_local_dtor.rs?ref=600ac6959a824ca087b86cdd705ed9d1f3b73977", "patch": "@@ -1,5 +1,6 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n \n+#[cfg_attr(target_family = \"wasm\", allow(unused))] // unused on wasm32-unknown-unknown\n pub unsafe fn register_dtor(_t: *mut u8, _dtor: unsafe extern \"C\" fn(*mut u8)) {\n     // FIXME: right now there is no concept of \"thread exit\", but this is likely\n     // going to show up at some point in the form of an exported symbol that the"}, {"sha": "5d267891bb0ed3b1538541624a3922134bbbb3b1", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/600ac6959a824ca087b86cdd705ed9d1f3b73977/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ac6959a824ca087b86cdd705ed9d1f3b73977/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=600ac6959a824ca087b86cdd705ed9d1f3b73977", "patch": "@@ -901,7 +901,7 @@ pub mod statik {\n }\n \n #[doc(hidden)]\n-#[cfg(target_thread_local)]\n+#[cfg(all(target_thread_local, not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),))]\n pub mod fast {\n     use super::lazy::LazyKeyInner;\n     use crate::cell::Cell;\n@@ -1037,7 +1037,10 @@ pub mod fast {\n }\n \n #[doc(hidden)]\n-#[cfg(not(target_thread_local))]\n+#[cfg(all(\n+    not(target_thread_local),\n+    not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n+))]\n pub mod os {\n     use super::lazy::LazyKeyInner;\n     use crate::cell::Cell;"}, {"sha": "4749f5c4ab1c73229597baa41ea253dd9a98ddb3", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 25, "deletions": 8, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/600ac6959a824ca087b86cdd705ed9d1f3b73977/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/600ac6959a824ca087b86cdd705ed9d1f3b73977/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=600ac6959a824ca087b86cdd705ed9d1f3b73977", "patch": "@@ -192,32 +192,49 @@ pub use scoped::{scope, Scope, ScopedJoinHandle};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::local::{AccessError, LocalKey};\n \n-// Select the type used by the thread_local! macro to access TLS keys. There\n-// are three types: \"static\", \"fast\", \"OS\". The \"OS\" thread local key\n+// Provide the type used by the thread_local! macro to access TLS keys. This\n+// needs to be kept in sync with the macro itself (in `local.rs`).\n+// There are three types: \"static\", \"fast\", \"OS\". The \"OS\" thread local key\n // type is accessed via platform-specific API calls and is slow, while the \"fast\"\n // key type is accessed via code generated via LLVM, where TLS keys are set up\n // by the elf linker. \"static\" is for single-threaded platforms where a global\n // static is sufficient.\n \n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n-#[cfg(target_thread_local)]\n #[cfg(not(test))]\n+#[cfg(all(\n+    target_thread_local,\n+    not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n+))]\n #[doc(hidden)]\n pub use self::local::fast::Key as __FastLocalKeyInner;\n+\n+// when building for tests, use real std's type\n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n-#[cfg(target_thread_local)]\n-#[cfg(test)] // when building for tests, use real std's key\n+#[cfg(test)]\n+#[cfg(all(\n+    target_thread_local,\n+    not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n+))]\n pub use realstd::thread::__FastLocalKeyInner;\n \n+// but import the local one anyway to silence 'unused' warnings\n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n-#[cfg(target_thread_local)]\n #[cfg(test)]\n-pub use self::local::fast::Key as __FastLocalKeyInnerUnused; // we import this anyway to silence 'unused' warnings\n+#[cfg(all(\n+    target_thread_local,\n+    not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n+))]\n+pub use self::local::fast::Key as __FastLocalKeyInnerUnused;\n \n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n+#[cfg(all(\n+    not(target_thread_local),\n+    not(all(target_family = \"wasm\", not(target_feature = \"atomics\"))),\n+))]\n #[doc(hidden)]\n-#[cfg(not(target_thread_local))]\n pub use self::local::os::Key as __OsLocalKeyInner;\n+\n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n #[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))]\n #[doc(hidden)]"}]}