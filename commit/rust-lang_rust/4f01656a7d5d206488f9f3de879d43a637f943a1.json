{"sha": "4f01656a7d5d206488f9f3de879d43a637f943a1", "node_id": "C_kwDOAAsO6NoAKDRmMDE2NTZhN2Q1ZDIwNjQ4OGY5ZjNkZTg3OWQ0M2E2MzdmOTQzYTE", "commit": {"author": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-01T17:07:25Z"}, "committer": {"name": "Yechan Bae", "email": "yechan@gatech.edu", "date": "2021-10-01T18:04:20Z"}, "message": "Add ui-test for enable-raw-pointer-heuristic-for-send config", "tree": {"sha": "5ee8c1e9e94f72afef4aa29e38e7c990dc5bd3e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ee8c1e9e94f72afef4aa29e38e7c990dc5bd3e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f01656a7d5d206488f9f3de879d43a637f943a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f01656a7d5d206488f9f3de879d43a637f943a1", "html_url": "https://github.com/rust-lang/rust/commit/4f01656a7d5d206488f9f3de879d43a637f943a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f01656a7d5d206488f9f3de879d43a637f943a1/comments", "author": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Qwaz", "id": 5073807, "node_id": "MDQ6VXNlcjUwNzM4MDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5073807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Qwaz", "html_url": "https://github.com/Qwaz", "followers_url": "https://api.github.com/users/Qwaz/followers", "following_url": "https://api.github.com/users/Qwaz/following{/other_user}", "gists_url": "https://api.github.com/users/Qwaz/gists{/gist_id}", "starred_url": "https://api.github.com/users/Qwaz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Qwaz/subscriptions", "organizations_url": "https://api.github.com/users/Qwaz/orgs", "repos_url": "https://api.github.com/users/Qwaz/repos", "events_url": "https://api.github.com/users/Qwaz/events{/privacy}", "received_events_url": "https://api.github.com/users/Qwaz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08f0aecffd4e8522bf51a7b9d74386a36834d4a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/08f0aecffd4e8522bf51a7b9d74386a36834d4a9", "html_url": "https://github.com/rust-lang/rust/commit/08f0aecffd4e8522bf51a7b9d74386a36834d4a9"}], "stats": {"total": 155, "additions": 149, "deletions": 6}, "files": [{"sha": "b43fb02d329353a114e93c083271651fc5b1b98a", "filename": "clippy_lints/src/non_send_field_in_send_ty.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4f01656a7d5d206488f9f3de879d43a637f943a1/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f01656a7d5d206488f9f3de879d43a637f943a1/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_send_field_in_send_ty.rs?ref=4f01656a7d5d206488f9f3de879d43a637f943a1", "patch": "@@ -68,7 +68,7 @@ impl<'tcx> LateLintPass<'tcx> for NonSendFieldInSendTy {\n         let ty_allowed_in_send = if self.enable_raw_pointer_heuristic {\n             ty_allowed_with_raw_pointer_heuristic\n         } else {\n-            ty_implements_send_or_copy\n+            ty_allowed_without_raw_pointer_heuristic\n         };\n \n         // Checks if we are in `Send` impl item.\n@@ -176,14 +176,22 @@ fn collect_generic_params<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Vec<Ty<\n         .collect()\n }\n \n-/// Determine if the given type is `Send` or `Copy`\n-fn ty_implements_send_or_copy(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n-    implements_trait(cx, ty, send_trait, &[]) || is_copy(cx, ty)\n+/// Be more strict when the heuristic is disabled\n+fn ty_allowed_without_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n+    if implements_trait(cx, ty, send_trait, &[]) {\n+        return true;\n+    }\n+\n+    if is_copy(cx, ty) && !contains_raw_pointer(cx, ty) {\n+        return true;\n+    }\n+\n+    false\n }\n \n /// Heuristic to allow cases like `Vec<*const u8>`\n fn ty_allowed_with_raw_pointer_heuristic<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, send_trait: DefId) -> bool {\n-    if ty_implements_send_or_copy(cx, ty, send_trait) {\n+    if implements_trait(cx, ty, send_trait, &[]) || is_copy(cx, ty) {\n         return true;\n     }\n "}, {"sha": "a942709d14acc27da4706e23760346122169525f", "filename": "tests/ui-toml/strict_non_send_field_in_send_ty/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4f01656a7d5d206488f9f3de879d43a637f943a1/tests%2Fui-toml%2Fstrict_non_send_field_in_send_ty%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4f01656a7d5d206488f9f3de879d43a637f943a1/tests%2Fui-toml%2Fstrict_non_send_field_in_send_ty%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstrict_non_send_field_in_send_ty%2Fclippy.toml?ref=4f01656a7d5d206488f9f3de879d43a637f943a1", "patch": "@@ -0,0 +1 @@\n+enable-raw-pointer-heuristic-for-send = false"}, {"sha": "6306c9c9f6d2cfbdedf2a3fb7485fba22f402624", "filename": "tests/ui-toml/strict_non_send_field_in_send_ty/test.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4f01656a7d5d206488f9f3de879d43a637f943a1/tests%2Fui-toml%2Fstrict_non_send_field_in_send_ty%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f01656a7d5d206488f9f3de879d43a637f943a1/tests%2Fui-toml%2Fstrict_non_send_field_in_send_ty%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstrict_non_send_field_in_send_ty%2Ftest.rs?ref=4f01656a7d5d206488f9f3de879d43a637f943a1", "patch": "@@ -0,0 +1,43 @@\n+#![warn(clippy::non_send_field_in_send_ty)]\n+#![feature(extern_types)]\n+\n+use std::rc::Rc;\n+\n+// Basic tests should not be affected\n+pub struct NoGeneric {\n+    rc_is_not_send: Rc<String>,\n+}\n+\n+unsafe impl Send for NoGeneric {}\n+\n+pub struct MultiField<T> {\n+    field1: T,\n+    field2: T,\n+    field3: T,\n+}\n+\n+unsafe impl<T> Send for MultiField<T> {}\n+\n+pub enum MyOption<T> {\n+    MySome(T),\n+    MyNone,\n+}\n+\n+unsafe impl<T> Send for MyOption<T> {}\n+\n+// All fields are disallowed when raw pointer heuristic is off\n+extern \"C\" {\n+    type NonSend;\n+}\n+\n+pub struct HeuristicTest {\n+    field1: Vec<*const NonSend>,\n+    field2: [*const NonSend; 3],\n+    field3: (*const NonSend, *const NonSend, *const NonSend),\n+    field4: (*const NonSend, Rc<u8>),\n+    field5: Vec<Vec<*const NonSend>>,\n+}\n+\n+unsafe impl Send for HeuristicTest {}\n+\n+fn main() {}"}, {"sha": "093c9320945c9808c72eee1df6e55a999bc47b93", "filename": "tests/ui-toml/strict_non_send_field_in_send_ty/test.stderr", "status": "added", "additions": 91, "deletions": 0, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/4f01656a7d5d206488f9f3de879d43a637f943a1/tests%2Fui-toml%2Fstrict_non_send_field_in_send_ty%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f01656a7d5d206488f9f3de879d43a637f943a1/tests%2Fui-toml%2Fstrict_non_send_field_in_send_ty%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fstrict_non_send_field_in_send_ty%2Ftest.stderr?ref=4f01656a7d5d206488f9f3de879d43a637f943a1", "patch": "@@ -0,0 +1,91 @@\n+error: this implementation is unsound, as some fields in `NoGeneric` are `!Send`\n+  --> $DIR/test.rs:11:1\n+   |\n+LL | unsafe impl Send for NoGeneric {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::non-send-field-in-send-ty` implied by `-D warnings`\n+note: the field `rc_is_not_send` has type `std::rc::Rc<std::string::String>` which is `!Send`\n+  --> $DIR/test.rs:8:5\n+   |\n+LL |     rc_is_not_send: Rc<String>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+\n+error: this implementation is unsound, as some fields in `MultiField<T>` are `!Send`\n+  --> $DIR/test.rs:19:1\n+   |\n+LL | unsafe impl<T> Send for MultiField<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the field `field1` has type `T` which is `!Send`\n+  --> $DIR/test.rs:14:5\n+   |\n+LL |     field1: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+note: the field `field2` has type `T` which is `!Send`\n+  --> $DIR/test.rs:15:5\n+   |\n+LL |     field2: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+note: the field `field3` has type `T` which is `!Send`\n+  --> $DIR/test.rs:16:5\n+   |\n+LL |     field3: T,\n+   |     ^^^^^^^^^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `MyOption<T>` are `!Send`\n+  --> $DIR/test.rs:26:1\n+   |\n+LL | unsafe impl<T> Send for MyOption<T> {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the field `0` has type `T` which is `!Send`\n+  --> $DIR/test.rs:22:12\n+   |\n+LL |     MySome(T),\n+   |            ^\n+   = help: add `T: Send` bound in `Send` impl\n+\n+error: this implementation is unsound, as some fields in `HeuristicTest` are `!Send`\n+  --> $DIR/test.rs:41:1\n+   |\n+LL | unsafe impl Send for HeuristicTest {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the field `field1` has type `std::vec::Vec<*const NonSend>` which is `!Send`\n+  --> $DIR/test.rs:34:5\n+   |\n+LL |     field1: Vec<*const NonSend>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+note: the field `field2` has type `[*const NonSend; 3]` which is `!Send`\n+  --> $DIR/test.rs:35:5\n+   |\n+LL |     field2: [*const NonSend; 3],\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+note: the field `field3` has type `(*const NonSend, *const NonSend, *const NonSend)` which is `!Send`\n+  --> $DIR/test.rs:36:5\n+   |\n+LL |     field3: (*const NonSend, *const NonSend, *const NonSend),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+note: the field `field4` has type `(*const NonSend, std::rc::Rc<u8>)` which is `!Send`\n+  --> $DIR/test.rs:37:5\n+   |\n+LL |     field4: (*const NonSend, Rc<u8>),\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+note: the field `field5` has type `std::vec::Vec<std::vec::Vec<*const NonSend>>` which is `!Send`\n+  --> $DIR/test.rs:38:5\n+   |\n+LL |     field5: Vec<Vec<*const NonSend>>,\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: use a thread-safe type that implements `Send`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "97bab1308aa52b12d94e269117263ef330ab1d0d", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f01656a7d5d206488f9f3de879d43a637f943a1/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f01656a7d5d206488f9f3de879d43a637f943a1/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=4f01656a7d5d206488f9f3de879d43a637f943a1", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `enable-raw-pointer-heuristic`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `enable-raw-pointer-heuristic-for-send`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}]}