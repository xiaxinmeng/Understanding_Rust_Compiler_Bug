{"sha": "1c978ee51610dcc282c35930231ea737042e56c5", "node_id": "C_kwDOAAsO6NoAKDFjOTc4ZWU1MTYxMGRjYzI4MmMzNTkzMDIzMWVhNzM3MDQyZTU2YzU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-25T11:32:28Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-25T11:32:28Z"}, "message": "Sync from rust f5559e338256f17ada6d82b429acc2dbd8facc9c", "tree": {"sha": "ac1f35f1836ca7e450fc3f66ee065a9d29122689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac1f35f1836ca7e450fc3f66ee065a9d29122689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c978ee51610dcc282c35930231ea737042e56c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c978ee51610dcc282c35930231ea737042e56c5", "html_url": "https://github.com/rust-lang/rust/commit/1c978ee51610dcc282c35930231ea737042e56c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c978ee51610dcc282c35930231ea737042e56c5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "805c4a27f51f331a7322b377d5ad42aee19c8455", "url": "https://api.github.com/repos/rust-lang/rust/commits/805c4a27f51f331a7322b377d5ad42aee19c8455", "html_url": "https://github.com/rust-lang/rust/commit/805c4a27f51f331a7322b377d5ad42aee19c8455"}, {"sha": "106db3ef59a20abd4403587895140114236ea4f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/106db3ef59a20abd4403587895140114236ea4f5", "html_url": "https://github.com/rust-lang/rust/commit/106db3ef59a20abd4403587895140114236ea4f5"}], "stats": {"total": 47, "additions": 12, "deletions": 35}, "files": [{"sha": "31a294ad7a89f271f10caec6e72f9761600829b1", "filename": "example/alloc_example.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c978ee51610dcc282c35930231ea737042e56c5/example%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c978ee51610dcc282c35930231ea737042e56c5/example%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Falloc_example.rs?ref=1c978ee51610dcc282c35930231ea737042e56c5", "patch": "@@ -1,4 +1,4 @@\n-#![feature(start, core_intrinsics, alloc_error_handler)]\n+#![feature(start, core_intrinsics)]\n #![no_std]\n \n extern crate alloc;\n@@ -22,11 +22,6 @@ fn panic_handler(_: &core::panic::PanicInfo<'_>) -> ! {\n     core::intrinsics::abort();\n }\n \n-#[alloc_error_handler]\n-fn alloc_error_handler(_: alloc::alloc::Layout) -> ! {\n-    core::intrinsics::abort();\n-}\n-\n #[start]\n fn main(_argc: isize, _argv: *const *const u8) -> isize {\n     let world: Box<&str> = Box::new(\"Hello World!\\0\");"}, {"sha": "14e54d5ee3814f97acb5ed7391d7992b4a70af55", "filename": "src/abi/returning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c978ee51610dcc282c35930231ea737042e56c5/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c978ee51610dcc282c35930231ea737042e56c5/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=1c978ee51610dcc282c35930231ea737042e56c5", "patch": "@@ -9,7 +9,7 @@ use smallvec::{smallvec, SmallVec};\n /// this adds an extra parameter pointing to where the return value needs to be stored.\n pub(super) fn codegen_return_param<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    ssa_analyzed: &rustc_index::vec::IndexVec<Local, crate::analyze::SsaKind>,\n+    ssa_analyzed: &rustc_index::IndexSlice<Local, crate::analyze::SsaKind>,\n     block_params_iter: &mut impl Iterator<Item = Value>,\n ) -> CPlace<'tcx> {\n     let (ret_place, ret_param): (_, SmallVec<[_; 2]>) = match fx.fn_abi.as_ref().unwrap().ret.mode {"}, {"sha": "9fb8079a21fc2a3929f16bba7bdc185889b3831e", "filename": "src/allocator.rs", "status": "modified", "additions": 1, "deletions": 22, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1c978ee51610dcc282c35930231ea737042e56c5/src%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c978ee51610dcc282c35930231ea737042e56c5/src%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fallocator.rs?ref=1c978ee51610dcc282c35930231ea737042e56c5", "patch": "@@ -6,7 +6,6 @@ use crate::prelude::*;\n use rustc_ast::expand::allocator::{AllocatorKind, AllocatorTy, ALLOCATOR_METHODS};\n use rustc_codegen_ssa::base::allocator_kind_for_codegen;\n use rustc_session::config::OomStrategy;\n-use rustc_span::symbol::sym;\n \n /// Returns whether an allocator shim was created\n pub(crate) fn codegen(\n@@ -15,21 +14,14 @@ pub(crate) fn codegen(\n     unwind_context: &mut UnwindContext,\n ) -> bool {\n     let Some(kind) = allocator_kind_for_codegen(tcx) else { return false };\n-    codegen_inner(\n-        module,\n-        unwind_context,\n-        kind,\n-        tcx.alloc_error_handler_kind(()).unwrap(),\n-        tcx.sess.opts.unstable_opts.oom,\n-    );\n+    codegen_inner(module, unwind_context, kind, tcx.sess.opts.unstable_opts.oom);\n     true\n }\n \n fn codegen_inner(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n     kind: AllocatorKind,\n-    alloc_error_handler_kind: AllocatorKind,\n     oom_strategy: OomStrategy,\n ) {\n     let usize_ty = module.target_config().pointer_type();\n@@ -71,19 +63,6 @@ fn codegen_inner(\n         );\n     }\n \n-    let sig = Signature {\n-        call_conv: module.target_config().default_call_conv,\n-        params: vec![AbiParam::new(usize_ty), AbiParam::new(usize_ty)],\n-        returns: vec![],\n-    };\n-    crate::common::create_wrapper_function(\n-        module,\n-        unwind_context,\n-        sig,\n-        \"__rust_alloc_error_handler\",\n-        &alloc_error_handler_kind.fn_name(sym::oom),\n-    );\n-\n     let data_id = module.declare_data(OomStrategy::SYMBOL, Linkage::Export, false, false).unwrap();\n     let mut data_ctx = DataContext::new();\n     data_ctx.set_align(1);"}, {"sha": "359d581c1535ab07bc3024050a1151153c33af68", "filename": "src/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c978ee51610dcc282c35930231ea737042e56c5/src%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c978ee51610dcc282c35930231ea737042e56c5/src%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fanalyze.rs?ref=1c978ee51610dcc282c35930231ea737042e56c5", "patch": "@@ -2,7 +2,7 @@\n \n use crate::prelude::*;\n \n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::mir::StatementKind::*;\n use rustc_middle::ty::Ty;\n "}, {"sha": "16398c19bb1df622b824b2f7203a6fcd45be86e4", "filename": "src/base.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c978ee51610dcc282c35930231ea737042e56c5/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c978ee51610dcc282c35930231ea737042e56c5/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=1c978ee51610dcc282c35930231ea737042e56c5", "patch": "@@ -1,7 +1,7 @@\n //! Codegen of a single function\n \n use rustc_ast::InlineAsmOptions;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::ty::adjustment::PointerCast;\n use rustc_middle::ty::layout::FnAbiOf;\n use rustc_middle::ty::print::with_no_trimmed_paths;\n@@ -772,12 +772,15 @@ fn codegen_stmt<'tcx>(\n                     let operand = operand.load_scalar(fx);\n                     lval.write_cvalue(fx, CValue::by_val(operand, box_layout));\n                 }\n-                Rvalue::NullaryOp(null_op, ty) => {\n+                Rvalue::NullaryOp(ref null_op, ty) => {\n                     assert!(lval.layout().ty.is_sized(fx.tcx, ParamEnv::reveal_all()));\n                     let layout = fx.layout_of(fx.monomorphize(ty));\n                     let val = match null_op {\n                         NullOp::SizeOf => layout.size.bytes(),\n                         NullOp::AlignOf => layout.align.abi.bytes(),\n+                        NullOp::OffsetOf(fields) => {\n+                            layout.offset_of_subfield(fx, fields.iter().map(|f| f.index())).bytes()\n+                        }\n                     };\n                     let val = CValue::by_val(\n                         fx.bcx.ins().iconst(fx.pointer_type, i64::try_from(val).unwrap()),"}, {"sha": "30f4cf4473c6bd283841228237d68c47f957e81a", "filename": "src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c978ee51610dcc282c35930231ea737042e56c5/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c978ee51610dcc282c35930231ea737042e56c5/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=1c978ee51610dcc282c35930231ea737042e56c5", "patch": "@@ -2,7 +2,7 @@ use cranelift_codegen::isa::TargetFrontendConfig;\n use gimli::write::FileId;\n \n use rustc_data_structures::sync::Lrc;\n-use rustc_index::vec::IndexVec;\n+use rustc_index::IndexVec;\n use rustc_middle::ty::layout::{\n     FnAbiError, FnAbiOfHelpers, FnAbiRequest, LayoutError, LayoutOfHelpers,\n };"}, {"sha": "bf5d29c16f664ad5ec48ca58354c0f83ab361e00", "filename": "src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c978ee51610dcc282c35930231ea737042e56c5/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c978ee51610dcc282c35930231ea737042e56c5/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=1c978ee51610dcc282c35930231ea737042e56c5", "patch": "@@ -91,7 +91,7 @@ pub(crate) fn eval_mir_constant<'tcx>(\n             ),\n         },\n         ConstantKind::Unevaluated(mir::UnevaluatedConst { def, .. }, _)\n-            if fx.tcx.is_static(def.did) =>\n+            if fx.tcx.is_static(def) =>\n         {\n             span_bug!(constant.span, \"MIR constant refers to static\");\n         }"}, {"sha": "f0b399ae2808d2792d173f29673b753ac0d60009", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c978ee51610dcc282c35930231ea737042e56c5/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c978ee51610dcc282c35930231ea737042e56c5/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=1c978ee51610dcc282c35930231ea737042e56c5", "patch": "@@ -90,7 +90,7 @@ mod prelude {\n \n     pub(crate) use rustc_data_structures::fx::FxHashMap;\n \n-    pub(crate) use rustc_index::vec::Idx;\n+    pub(crate) use rustc_index::Idx;\n \n     pub(crate) use cranelift_codegen::ir::condcodes::{FloatCC, IntCC};\n     pub(crate) use cranelift_codegen::ir::function::Function;"}]}