{"sha": "12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "node_id": "C_kwDOAAsO6NoAKDEyYWI2YmZhZmRkYWMzOWM0MDFmZTQxOGI5ZmE1ZGJkYTVjZTdjZWI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-25T17:42:23Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-07-01T17:38:34Z"}, "message": "Don't point at Self type if we can't find an infer variable in ambiguous trait predicate", "tree": {"sha": "2924b6c726857542e87942db0360b434076ca7b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2924b6c726857542e87942db0360b434076ca7b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "html_url": "https://github.com/rust-lang/rust/commit/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca0105ba4e3c846f3d3e25705a401db949c8dd40", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca0105ba4e3c846f3d3e25705a401db949c8dd40", "html_url": "https://github.com/rust-lang/rust/commit/ca0105ba4e3c846f3d3e25705a401db949c8dd40"}], "stats": {"total": 151, "additions": 94, "deletions": 57}, "files": [{"sha": "f73eca5bf612cd4b888e3ec9cc69b727eb00e7fa", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -914,9 +914,17 @@ impl<'tcx> Term<'tcx> {\n     pub fn ty(&self) -> Option<Ty<'tcx>> {\n         if let Term::Ty(ty) = self { Some(*ty) } else { None }\n     }\n+\n     pub fn ct(&self) -> Option<Const<'tcx>> {\n         if let Term::Const(c) = self { Some(*c) } else { None }\n     }\n+\n+    pub fn into_arg(self) -> GenericArg<'tcx> {\n+        match self {\n+            Term::Ty(ty) => ty.into(),\n+            Term::Const(c) => c.into(),\n+        }\n+    }\n }\n \n /// This kind of predicate has no *direct* correspondent in the"}, {"sha": "3201ea1e27150dbd4bcbc6bddea2016272ccc79e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 36, "deletions": 27, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -1970,13 +1970,31 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n \n                 // Pick the first substitution that still contains inference variables as the one\n                 // we're going to emit an error for. If there are none (see above), fall back to\n-                // the substitution for `Self`.\n-                let subst = {\n-                    let substs = data.trait_ref.substs;\n-                    substs\n-                        .iter()\n-                        .find(|s| s.has_infer_types_or_consts())\n-                        .unwrap_or_else(|| substs[0])\n+                // a more general error.\n+                let subst = data.trait_ref.substs.iter().find(|s| s.has_infer_types_or_consts());\n+\n+                let mut err = if let Some(subst) = subst {\n+                    let impl_candidates = self\n+                        .find_similar_impl_candidates(trait_ref)\n+                        .into_iter()\n+                        .map(|candidate| candidate.trait_ref)\n+                        .collect();\n+                    self.emit_inference_failure_err(\n+                        body_id,\n+                        span,\n+                        subst,\n+                        impl_candidates,\n+                        ErrorCode::E0283,\n+                        true,\n+                    )\n+                } else {\n+                    struct_span_err!(\n+                        self.tcx.sess,\n+                        span,\n+                        E0283,\n+                        \"type annotations needed: cannot satisfy `{}`\",\n+                        predicate,\n+                    )\n                 };\n \n                 // This is kind of a hack: it frequently happens that some earlier\n@@ -1999,30 +2017,17 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         self.emit_inference_failure_err(\n                             body_id,\n                             span,\n-                            subst,\n+                            trait_ref.self_ty().skip_binder().into(),\n                             vec![],\n                             ErrorCode::E0282,\n                             false,\n                         )\n                         .emit();\n                     }\n+                    err.cancel();\n                     return;\n                 }\n \n-                let impl_candidates = self\n-                    .find_similar_impl_candidates(trait_ref)\n-                    .into_iter()\n-                    .map(|candidate| candidate.trait_ref)\n-                    .collect();\n-                let mut err = self.emit_inference_failure_err(\n-                    body_id,\n-                    span,\n-                    subst,\n-                    impl_candidates,\n-                    ErrorCode::E0283,\n-                    true,\n-                );\n-\n                 let obligation = Obligation::new(\n                     obligation.cause.clone(),\n                     obligation.param_env,\n@@ -2136,24 +2141,28 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                 )\n             }\n             ty::PredicateKind::Projection(data) => {\n-                let self_ty = data.projection_ty.self_ty();\n-                let term = data.term;\n                 if predicate.references_error() || self.is_tainted_by_errors() {\n                     return;\n                 }\n-                if self_ty.needs_infer() && term.needs_infer() {\n-                    // We do this for the `foo.collect()?` case to produce a suggestion.\n+                let subst = data\n+                    .projection_ty\n+                    .substs\n+                    .iter()\n+                    .chain(Some(data.term.into_arg()))\n+                    .find(|g| g.has_infer_types_or_consts());\n+                if let Some(subst) = subst {\n                     let mut err = self.emit_inference_failure_err(\n                         body_id,\n                         span,\n-                        self_ty.into(),\n+                        subst,\n                         vec![],\n                         ErrorCode::E0284,\n                         true,\n                     );\n                     err.note(&format!(\"cannot satisfy `{}`\", predicate));\n                     err\n                 } else {\n+                    // If we can't find a substitution, just print a generic error\n                     let mut err = struct_span_err!(\n                         self.tcx.sess,\n                         span,"}, {"sha": "e324c1e799f9e20eb16942fbda3b2b43b1deae2b", "filename": "src/test/ui/coherence/coherence-overlap-trait-alias.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-overlap-trait-alias.stderr?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -1,8 +1,8 @@\n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `u32: C`\n   --> $DIR/coherence-overlap-trait-alias.rs:15:6\n    |\n LL | impl C for u32 {}\n-   |      ^ cannot infer type for type `u32`\n+   |      ^\n    |\n note: multiple `impl`s satisfying `u32: C` found\n   --> $DIR/coherence-overlap-trait-alias.rs:14:1"}, {"sha": "41afaec86b6e47881641ac0db817c2bcf41f8604", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.min.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.min.stderr?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -34,19 +34,19 @@ LL |     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n    = help: const parameters may only be used as standalone arguments, i.e. `J`\n    = help: use `#![feature(generic_const_exprs)]` to allow generic const expressions\n \n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n   --> $DIR/issue-72787.rs:21:26\n    |\n LL |     IsLessOrEqual<I, 8>: True,\n-   |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n+   |                          ^^^^\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n \n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n   --> $DIR/issue-72787.rs:21:26\n    |\n LL |     IsLessOrEqual<I, 8>: True,\n-   |                          ^^^^ cannot infer type for struct `IsLessOrEqual<I, 8_u32>`\n+   |                          ^^^^\n    |\n    = note: cannot satisfy `IsLessOrEqual<I, 8_u32>: True`\n "}, {"sha": "c651bf1c8de9d2fd79a9740b6d72a8fc26105ae4", "filename": "src/test/ui/const-generics/generic_const_exprs/issue-72787.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72787.rs?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -19,8 +19,8 @@ struct S<const I: u32, const J: u32>;\n impl<const I: u32, const J: u32> S<I, J>\n where\n     IsLessOrEqual<I, 8>: True,\n-//[min]~^ Error type annotations needed [E0283]\n-//[min]~| Error type annotations needed [E0283]\n+//[min]~^ Error type annotations needed\n+//[min]~| Error type annotations needed\n     IsLessOrEqual<J, 8>: True,\n     IsLessOrEqual<{ 8 - I }, { 8 - J }>: True,\n //[min]~^ Error generic parameters may not be used in const operations"}, {"sha": "8d6b81c24b682e5dd0a66fc424c2e6e6aea7012c", "filename": "src/test/ui/issues/issue-12028.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12028.stderr?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -1,8 +1,14 @@\n-error[E0284]: type annotations needed: cannot satisfy `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n+error[E0284]: type annotations needed\n   --> $DIR/issue-12028.rs:27:14\n    |\n LL |         self.input_stream(&mut stream);\n-   |              ^^^^^^^^^^^^ cannot satisfy `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n+   |              ^^^^^^^^^^^^\n+   |\n+   = note: cannot satisfy `<_ as StreamHasher>::S == <H as StreamHasher>::S`\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |         <u8 as StreamHash<H>>::input_stream(self, &mut stream);\n+   |         ++++++++++++++++++++++++++++++++++++    ~\n \n error: aborting due to previous error\n "}, {"sha": "4e010a13653e7796c0723c35125c33bdb5ce60b1", "filename": "src/test/ui/issues/issue-21974.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21974.stderr?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -1,8 +1,8 @@\n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `&'a T: Foo`\n   --> $DIR/issue-21974.rs:11:19\n    |\n LL |     where &'a T : Foo,\n-   |                   ^^^ cannot infer type for reference `&'a T`\n+   |                   ^^^\n    |\n    = note: cannot satisfy `&'a T: Foo`\n "}, {"sha": "8f3b2ac73199ccec1afced236ae6f1c0f0452522", "filename": "src/test/ui/issues/issue-24424.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24424.stderr?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -1,8 +1,8 @@\n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `T0: Trait0<'l0>`\n   --> $DIR/issue-24424.rs:4:57\n    |\n LL | impl <'l0, 'l1, T0> Trait1<'l0, T0> for bool where T0 : Trait0<'l0>, T0 : Trait0<'l1> {}\n-   |                                                         ^^^^^^^^^^^ cannot infer type for type parameter `T0`\n+   |                                                         ^^^^^^^^^^^\n    |\n    = note: cannot satisfy `T0: Trait0<'l0>`\n "}, {"sha": "193de1a35cf1a7e56e84059977202e5b49b98ef4", "filename": "src/test/ui/issues/issue-69683.stderr", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69683.stderr?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -1,8 +1,14 @@\n-error[E0284]: type annotations needed: cannot satisfy `<u8 as Element<_>>::Array == [u8; 3]`\n+error[E0284]: type annotations needed\n   --> $DIR/issue-69683.rs:30:10\n    |\n LL |     0u16.foo(b);\n-   |          ^^^ cannot satisfy `<u8 as Element<_>>::Array == [u8; 3]`\n+   |          ^^^\n+   |\n+   = note: cannot satisfy `<u8 as Element<_>>::Array == [u8; 3]`\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |     <u16 as Foo<I>>::foo(0u16, b);\n+   |     +++++++++++++++++++++    ~\n \n error[E0283]: type annotations needed\n   --> $DIR/issue-69683.rs:30:10"}, {"sha": "6ddb7657301cd29fdd8ca59007d13042d39093df", "filename": "src/test/ui/issues/issue-71584.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fissues%2Fissue-71584.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fissues%2Fissue-71584.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-71584.stderr?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -1,8 +1,16 @@\n-error[E0284]: type annotations needed: cannot satisfy `<u64 as Rem<_>>::Output == u64`\n-  --> $DIR/issue-71584.rs:4:11\n+error[E0284]: type annotations needed\n+  --> $DIR/issue-71584.rs:4:15\n    |\n LL |     d = d % n.into();\n-   |           ^ cannot satisfy `<u64 as Rem<_>>::Output == u64`\n+   |           -   ^^^^\n+   |           |\n+   |           type must be known at this point\n+   |\n+   = note: cannot satisfy `<u64 as Rem<_>>::Output == u64`\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |     d = d % <u32 as Into<T>>::into(n);\n+   |             +++++++++++++++++++++++ ~\n \n error: aborting due to previous error\n "}, {"sha": "5832c4d173c10245c4574f5c47a058be2ad345eb", "filename": "src/test/ui/lifetimes/issue-34979.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-34979.stderr?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -1,8 +1,8 @@\n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `&'a (): Foo`\n   --> $DIR/issue-34979.rs:6:13\n    |\n LL |     &'a (): Foo,\n-   |             ^^^ cannot infer type for reference `&'a ()`\n+   |             ^^^\n    |\n    = note: cannot satisfy `&'a (): Foo`\n "}, {"sha": "6631fe987e275d44da48a06c9f4289fb365c1f73", "filename": "src/test/ui/marker_trait_attr/region-overlap.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmarker_trait_attr%2Fregion-overlap.stderr?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -1,8 +1,8 @@\n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `(&'static (), &'a ()): A`\n   --> $DIR/region-overlap.rs:5:10\n    |\n LL | impl<'a> A for (&'static (), &'a ()) {}\n-   |          ^ cannot infer type for tuple `(&'static (), &'a ())`\n+   |          ^\n    |\n note: multiple `impl`s satisfying `(&'static (), &'a ()): A` found\n   --> $DIR/region-overlap.rs:5:1\n@@ -12,11 +12,11 @@ LL | impl<'a> A for (&'static (), &'a ()) {}\n LL | impl<'a> A for (&'a (), &'static ()) {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `(&'a (), &'static ()): A`\n   --> $DIR/region-overlap.rs:6:10\n    |\n LL | impl<'a> A for (&'a (), &'static ()) {}\n-   |          ^ cannot infer type for tuple `(&'a (), &'static ())`\n+   |          ^\n    |\n note: multiple `impl`s satisfying `(&'a (), &'static ()): A` found\n   --> $DIR/region-overlap.rs:5:1"}, {"sha": "fb387a9c909657066c9d9fbe0a617ae46f03d05d", "filename": "src/test/ui/traits/issue-85735.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.rs?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -5,7 +5,7 @@ trait Foo {}\n impl<'a, 'b, T> Foo for T\n where\n     T: FnMut(&'a ()),\n-    //~^ ERROR: type annotations needed [E0283]\n+    //~^ ERROR: type annotations needed\n     T: FnMut(&'b ()),\n {\n }"}, {"sha": "fa280135beb2d98a99f1605dc79ea8c33b57b7fa", "filename": "src/test/ui/traits/issue-85735.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-85735.stderr?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -1,8 +1,8 @@\n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `T: FnMut<(&'a (),)>`\n   --> $DIR/issue-85735.rs:7:8\n    |\n LL |     T: FnMut(&'a ()),\n-   |        ^^^^^^^^^^^^^ cannot infer type for type parameter `T`\n+   |        ^^^^^^^^^^^^^\n    |\n    = note: cannot satisfy `T: FnMut<(&'a (),)>`\n "}, {"sha": "75feb5698eb630ea2e868cfb5cf4ea6d0e0b1eb5", "filename": "src/test/ui/type/type-check/issue-40294.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-check%2Fissue-40294.stderr?ref=12ab6bfafddac39c401fe418b9fa5dbda5ce7ceb", "patch": "@@ -1,8 +1,8 @@\n-error[E0283]: type annotations needed\n+error[E0283]: type annotations needed: cannot satisfy `&'a T: Foo`\n   --> $DIR/issue-40294.rs:6:19\n    |\n LL |     where &'a T : Foo,\n-   |                   ^^^ cannot infer type for reference `&'a T`\n+   |                   ^^^\n    |\n    = note: cannot satisfy `&'a T: Foo`\n "}]}