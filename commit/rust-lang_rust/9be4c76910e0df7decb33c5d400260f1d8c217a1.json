{"sha": "9be4c76910e0df7decb33c5d400260f1d8c217a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZTRjNzY5MTBlMGRmN2RlY2IzM2M1ZDQwMDI2MGYxZDhjMjE3YTE=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-01-09T18:37:38Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-01-17T16:32:55Z"}, "message": "Add signed num::NonZeroI* types\n\nMultiple people have asked for them, in\nhttps://github.com/rust-lang/rust/issues/49137.\nGiven that the unsigned ones already exist,\nthey are very easy to add and not an additional maintenance burden.", "tree": {"sha": "09821bb66cb7deba8a1ecce1dc9aed844f5e4022", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09821bb66cb7deba8a1ecce1dc9aed844f5e4022"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9be4c76910e0df7decb33c5d400260f1d8c217a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9be4c76910e0df7decb33c5d400260f1d8c217a1", "html_url": "https://github.com/rust-lang/rust/commit/9be4c76910e0df7decb33c5d400260f1d8c217a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9be4c76910e0df7decb33c5d400260f1d8c217a1/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/daa53a52a2667533d5fe59bfcc5b8614b79c3d31", "html_url": "https://github.com/rust-lang/rust/commit/daa53a52a2667533d5fe59bfcc5b8614b79c3d31"}], "stats": {"total": 50, "additions": 32, "deletions": 18}, "files": [{"sha": "41caa1788fbb867eae50c06936540eec3f397aa9", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9be4c76910e0df7decb33c5d400260f1d8c217a1/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be4c76910e0df7decb33c5d400260f1d8c217a1/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=9be4c76910e0df7decb33c5d400260f1d8c217a1", "patch": "@@ -10,9 +10,9 @@ use ops;\n use str::FromStr;\n \n macro_rules! impl_nonzero_fmt {\n-    ( ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n+    ( #[$stability: meta] ( $( $Trait: ident ),+ ) for $Ty: ident ) => {\n         $(\n-            #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+            #[$stability]\n             impl fmt::$Trait for $Ty {\n                 #[inline]\n                 fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -31,7 +31,7 @@ macro_rules! doc_comment {\n }\n \n macro_rules! nonzero_integers {\n-    ( $( $Ty: ident($Int: ty); )+ ) => {\n+    ( $( #[$stability: meta] $Ty: ident($Int: ty); )+ ) => {\n         $(\n             doc_comment! {\n                 concat!(\"An integer that is known not to equal zero.\n@@ -41,10 +41,10 @@ For example, `Option<\", stringify!($Ty), \">` is the same size as `\", stringify!(\n \n ```rust\n use std::mem::size_of;\n-assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", stringify!($Int),\n+assert_eq!(size_of::<Option<core::num::\", stringify!($Ty), \">>(), size_of::<\", stringify!($Int),\n \">());\n ```\"),\n-                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+                #[$stability]\n                 #[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n                 #[repr(transparent)]\n                 #[rustc_layout_scalar_valid_range_start(1)]\n@@ -57,14 +57,14 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 /// # Safety\n                 ///\n                 /// The value must not be zero.\n-                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+                #[$stability]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n                     $Ty(n)\n                 }\n \n                 /// Create a non-zero if the given value is not zero.\n-                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+                #[$stability]\n                 #[inline]\n                 pub fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n@@ -75,7 +75,7 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 }\n \n                 /// Returns the value as a primitive type.\n-                #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n+                #[$stability]\n                 #[inline]\n                 pub const fn get(self) -> $Int {\n                     self.0\n@@ -91,19 +91,25 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n             }\n \n             impl_nonzero_fmt! {\n-                (Debug, Display, Binary, Octal, LowerHex, UpperHex) for $Ty\n+                #[$stability] (Debug, Display, Binary, Octal, LowerHex, UpperHex) for $Ty\n             }\n         )+\n     }\n }\n \n nonzero_integers! {\n-    NonZeroU8(u8);\n-    NonZeroU16(u16);\n-    NonZeroU32(u32);\n-    NonZeroU64(u64);\n-    NonZeroU128(u128);\n-    NonZeroUsize(usize);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU8(u8);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU16(u16);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU32(u32);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU64(u64);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroU128(u128);\n+    #[stable(feature = \"nonzero\", since = \"1.28.0\")] NonZeroUsize(usize);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI8(i8);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI16(i16);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI32(i32);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI64(i64);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroI128(i128);\n+    #[stable(feature = \"signed_nonzero\", since = \"1.34.0\")] NonZeroIsize(isize);\n }\n \n /// Provides intentionally-wrapped arithmetic on `T`."}, {"sha": "4532568ee0c1630179c64b008abc99278be1aac4", "filename": "src/libcore/tests/nonzero.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9be4c76910e0df7decb33c5d400260f1d8c217a1/src%2Flibcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be4c76910e0df7decb33c5d400260f1d8c217a1/src%2Flibcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnonzero.rs?ref=9be4c76910e0df7decb33c5d400260f1d8c217a1", "patch": "@@ -1,4 +1,4 @@\n-use core::num::NonZeroU32;\n+use core::num::{NonZeroU32, NonZeroI32};\n use core::option::Option;\n use core::option::Option::{Some, None};\n use std::mem::size_of;\n@@ -13,6 +13,7 @@ fn test_create_nonzero_instance() {\n #[test]\n fn test_size_nonzero_in_option() {\n     assert_eq!(size_of::<NonZeroU32>(), size_of::<Option<NonZeroU32>>());\n+    assert_eq!(size_of::<NonZeroI32>(), size_of::<Option<NonZeroI32>>());\n }\n \n #[test]\n@@ -118,3 +119,10 @@ fn test_from_nonzero() {\n     let num: u32 = nz.into();\n     assert_eq!(num, 1u32);\n }\n+\n+#[test]\n+fn test_from_signed_nonzero() {\n+    let nz = NonZeroI32::new(1).unwrap();\n+    let num: i32 = nz.into();\n+    assert_eq!(num, 1i32);\n+}"}, {"sha": "c2f9e9b52bee68613436f111688853f2aec9dc35", "filename": "src/test/ui/try-block/try-block-bad-type.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9be4c76910e0df7decb33c5d400260f1d8c217a1/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9be4c76910e0df7decb33c5d400260f1d8c217a1/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-type.stderr?ref=9be4c76910e0df7decb33c5d400260f1d8c217a1", "patch": "@@ -5,11 +5,11 @@ LL |         Err(\"\")?; //~ ERROR the trait bound `i32: std::convert::From<&str>`\n    |         ^^^^^^^^ the trait `std::convert::From<&str>` is not implemented for `i32`\n    |\n    = help: the following implementations were found:\n-             <i32 as std::convert::From<bool>>\n+             <i32 as std::convert::From<core::num::NonZeroI32>>\n              <i32 as std::convert::From<i16>>\n              <i32 as std::convert::From<i8>>\n-             <i32 as std::convert::From<u16>>\n              <i32 as std::convert::From<u8>>\n+           and 2 others\n    = note: required by `std::convert::From::from`\n \n error[E0271]: type mismatch resolving `<std::result::Result<i32, i32> as std::ops::Try>::Ok == &str`"}]}