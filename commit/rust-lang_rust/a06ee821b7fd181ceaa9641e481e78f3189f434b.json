{"sha": "a06ee821b7fd181ceaa9641e481e78f3189f434b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNmVlODIxYjdmZDE4MWNlYWE5NjQxZTQ4MWU3OGYzMTg5ZjQzNGI=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-06-24T15:00:47Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-06-24T22:41:56Z"}, "message": "Document the various methods of `core::task::Poll`", "tree": {"sha": "007fa5ff1c4e4ce8be0e1a7e0076a67947140c57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/007fa5ff1c4e4ce8be0e1a7e0076a67947140c57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a06ee821b7fd181ceaa9641e481e78f3189f434b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a06ee821b7fd181ceaa9641e481e78f3189f434b", "html_url": "https://github.com/rust-lang/rust/commit/a06ee821b7fd181ceaa9641e481e78f3189f434b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a06ee821b7fd181ceaa9641e481e78f3189f434b/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "964a81eb37db6ee33b8fc107582618bf2befe02d", "url": "https://api.github.com/repos/rust-lang/rust/commits/964a81eb37db6ee33b8fc107582618bf2befe02d", "html_url": "https://github.com/rust-lang/rust/commit/964a81eb37db6ee33b8fc107582618bf2befe02d"}], "stats": {"total": 107, "additions": 100, "deletions": 7}, "files": [{"sha": "ccf68547293ea8911e51b80aa32f4dded2bf3ef0", "filename": "library/core/src/task/poll.rs", "status": "modified", "additions": 100, "deletions": 7, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/a06ee821b7fd181ceaa9641e481e78f3189f434b/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a06ee821b7fd181ceaa9641e481e78f3189f434b/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fpoll.rs?ref=a06ee821b7fd181ceaa9641e481e78f3189f434b", "patch": "@@ -26,7 +26,21 @@ pub enum Poll<T> {\n }\n \n impl<T> Poll<T> {\n-    /// Changes the ready value of this `Poll` with the closure provided.\n+    /// Maps a `Poll<T>` to `Poll<U>` by applying a function to a contained value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Converts a `Poll<`[`String`]`>` into an `Poll<`[`usize`]`>`, consuming the original:\n+    ///\n+    /// [`String`]: ../../std/string/struct.String.html\n+    /// ```\n+    /// # use core::task::Poll;\n+    /// let poll_some_string = Poll::Ready(String::from(\"Hello, World!\"));\n+    /// // `Poll::map` takes self *by value*, consuming `poll_some_string`\n+    /// let poll_some_len = poll_some_string.map(|s| s.len());\n+    ///\n+    /// assert_eq!(poll_some_len, Poll::Ready(13));\n+    /// ```\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn map<U, F>(self, f: F) -> Poll<U>\n     where\n@@ -38,15 +52,39 @@ impl<T> Poll<T> {\n         }\n     }\n \n-    /// Returns `true` if this is `Poll::Ready`\n+    /// Returns `true` if the poll is a [`Poll::Ready`] value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # use core::task::Poll;\n+    /// let x: Poll<u32> = Poll::Ready(2);\n+    /// assert_eq!(x.is_ready(), true);\n+    ///\n+    /// let x: Poll<u32> = Poll::Pending;\n+    /// assert_eq!(x.is_ready(), false);\n+    /// ```\n     #[inline]\n     #[rustc_const_stable(feature = \"const_poll\", since = \"1.49.0\")]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub const fn is_ready(&self) -> bool {\n         matches!(*self, Poll::Ready(_))\n     }\n \n-    /// Returns `true` if this is `Poll::Pending`\n+    /// Returns `true` if the poll is a [`Pending`] value.\n+    ///\n+    /// [`Pending`]: Poll::Pending\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # use core::task::Poll;\n+    /// let x: Poll<u32> = Poll::Ready(2);\n+    /// assert_eq!(x.is_pending(), false);\n+    ///\n+    /// let x: Poll<u32> = Poll::Pending;\n+    /// assert_eq!(x.is_pending(), true);\n+    /// ```\n     #[inline]\n     #[rustc_const_stable(feature = \"const_poll\", since = \"1.49.0\")]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n@@ -56,7 +94,20 @@ impl<T> Poll<T> {\n }\n \n impl<T, E> Poll<Result<T, E>> {\n-    /// Changes the success value of this `Poll` with the closure provided.\n+    /// Maps a `Poll<Result<T, E>>` to `Poll<Result<U, E>>` by applying a\n+    /// function to a contained `Poll::Ready(Ok)` value, leaving all other\n+    /// variants untouched.\n+    ///\n+    /// This function can be used to compose the results of two functions.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # use core::task::Poll;\n+    /// let res: Poll<Result<u8, _>> = Poll::Ready(\"12\".parse());\n+    /// let squared = res.map_ok(|n| n * n);\n+    /// assert_eq!(squared, Poll::Ready(Ok(144)));\n+    /// ```\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn map_ok<U, F>(self, f: F) -> Poll<Result<U, E>>\n     where\n@@ -69,7 +120,21 @@ impl<T, E> Poll<Result<T, E>> {\n         }\n     }\n \n-    /// Changes the error value of this `Poll` with the closure provided.\n+    /// Maps a `Poll::Ready<Result<T, E>>` to `Poll::Ready<Result<T, F>>` by\n+    /// applying a function to a contained `Poll::Ready(Err)` value, leaving all other\n+    /// variants untouched.\n+    ///\n+    /// This function can be used to pass through a successful result while handling\n+    /// an error.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # use core::task::Poll;\n+    /// let res: Poll<Result<u8, _>> = Poll::Ready(\"oops\".parse());\n+    /// let res = res.map_err(|_| 0_u8);\n+    /// assert_eq!(res, Poll::Ready(Err(0)));\n+    /// ```\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub fn map_err<U, F>(self, f: F) -> Poll<Result<T, U>>\n     where\n@@ -84,7 +149,20 @@ impl<T, E> Poll<Result<T, E>> {\n }\n \n impl<T, E> Poll<Option<Result<T, E>>> {\n-    /// Changes the success value of this `Poll` with the closure provided.\n+    /// Maps a `Poll<Option<Result<T, E>>>` to `Poll<Option<Result<U, E>>>` by\n+    /// applying a function to a contained `Poll::Ready(Some(Ok))` value,\n+    /// leaving all other variants untouched.\n+    ///\n+    /// This function can be used to compose the results of two functions.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # use core::task::Poll;\n+    /// let res: Poll<Option<Result<u8, _>>> = Poll::Ready(Some(\"12\".parse()));\n+    /// let squared = res.map_ok(|n| n * n);\n+    /// assert_eq!(squared, Poll::Ready(Some(Ok(144))));\n+    /// ```\n     #[stable(feature = \"poll_map\", since = \"1.51.0\")]\n     pub fn map_ok<U, F>(self, f: F) -> Poll<Option<Result<U, E>>>\n     where\n@@ -98,7 +176,22 @@ impl<T, E> Poll<Option<Result<T, E>>> {\n         }\n     }\n \n-    /// Changes the error value of this `Poll` with the closure provided.\n+    /// Maps a `Poll::Ready<Option<Result<T, E>>>` to\n+    /// `Poll::Ready<Option<Result<T, F>>>` by applying a function to a\n+    /// contained `Poll::Ready(Some(Err))` value, leaving all other variants\n+    /// untouched.\n+    ///\n+    /// This function can be used to pass through a successful result while handling\n+    /// an error.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # use core::task::Poll;\n+    /// let res: Poll<Option<Result<u8, _>>> = Poll::Ready(Some(\"oops\".parse()));\n+    /// let res = res.map_err(|_| 0_u8);\n+    /// assert_eq!(res, Poll::Ready(Some(Err(0))));\n+    /// ```\n     #[stable(feature = \"poll_map\", since = \"1.51.0\")]\n     pub fn map_err<U, F>(self, f: F) -> Poll<Option<Result<T, U>>>\n     where"}]}