{"sha": "782cc9f65c0c19ef79bd009074e09bf0394674f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MmNjOWY2NWMwYzE5ZWY3OWJkMDA5MDc0ZTA5YmYwMzk0Njc0ZjQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-23T13:47:31Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-23T17:52:23Z"}, "message": "Derive HashStable for TokenKind.", "tree": {"sha": "c367a73f0bcc04651ec1fb77f6ba9655d4a94353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c367a73f0bcc04651ec1fb77f6ba9655d4a94353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/782cc9f65c0c19ef79bd009074e09bf0394674f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/782cc9f65c0c19ef79bd009074e09bf0394674f4", "html_url": "https://github.com/rust-lang/rust/commit/782cc9f65c0c19ef79bd009074e09bf0394674f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/782cc9f65c0c19ef79bd009074e09bf0394674f4/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d1674f62007053ddeba44e27459e18128cc97cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d1674f62007053ddeba44e27459e18128cc97cf", "html_url": "https://github.com/rust-lang/rust/commit/4d1674f62007053ddeba44e27459e18128cc97cf"}], "stats": {"total": 91, "additions": 12, "deletions": 79}, "files": [{"sha": "144980c53eb5fe7188c51332d52f59acc0eddb20", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 66, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/782cc9f65c0c19ef79bd009074e09bf0394674f4/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/782cc9f65c0c19ef79bd009074e09bf0394674f4/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=782cc9f65c0c19ef79bd009074e09bf0394674f4", "patch": "@@ -3,12 +3,8 @@\n \n use crate::ich::StableHashingContext;\n \n-use std::hash as std_hash;\n-use std::mem;\n-\n use syntax::ast;\n use syntax::feature_gate;\n-use syntax::token;\n use syntax_pos::SourceFile;\n \n use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n@@ -65,68 +61,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ast::Attribute {\n     }\n }\n \n-impl<'ctx> syntax::HashStableContext for StableHashingContext<'ctx> {\n-    fn hash_stable_tokenkind(&mut self, tokenkind: &token::TokenKind, hasher: &mut StableHasher) {\n-        mem::discriminant(tokenkind).hash_stable(self, hasher);\n-        match *tokenkind {\n-            token::Eq |\n-            token::Lt |\n-            token::Le |\n-            token::EqEq |\n-            token::Ne |\n-            token::Ge |\n-            token::Gt |\n-            token::AndAnd |\n-            token::OrOr |\n-            token::Not |\n-            token::Tilde |\n-            token::At |\n-            token::Dot |\n-            token::DotDot |\n-            token::DotDotDot |\n-            token::DotDotEq |\n-            token::Comma |\n-            token::Semi |\n-            token::Colon |\n-            token::ModSep |\n-            token::RArrow |\n-            token::LArrow |\n-            token::FatArrow |\n-            token::Pound |\n-            token::Dollar |\n-            token::Question |\n-            token::SingleQuote |\n-            token::Whitespace |\n-            token::Comment |\n-            token::Eof => {}\n-\n-            token::BinOp(bin_op_token) |\n-            token::BinOpEq(bin_op_token) => {\n-                std_hash::Hash::hash(&bin_op_token, hasher);\n-            }\n-\n-            token::OpenDelim(delim_token) |\n-            token::CloseDelim(delim_token) => {\n-                std_hash::Hash::hash(&delim_token, hasher);\n-            }\n-            token::Literal(lit) => lit.hash_stable(self, hasher),\n-\n-            token::Ident(name, is_raw) => {\n-                name.hash_stable(self, hasher);\n-                is_raw.hash_stable(self, hasher);\n-            }\n-            token::Lifetime(name) => name.hash_stable(self, hasher),\n-\n-            token::Interpolated(_) => {\n-                bug!(\"interpolated tokens should not be present in the HIR\")\n-            }\n-\n-            token::DocComment(val) |\n-            token::Shebang(val) |\n-            token::Unknown(val) => val.hash_stable(self, hasher),\n-        }\n-    }\n-}\n+impl<'ctx> syntax::HashStableContext for StableHashingContext<'ctx> {}\n \n impl<'a> HashStable<StableHashingContext<'a>> for SourceFile {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {"}, {"sha": "22b49862f4965f74be2d9b443590e1af610659f0", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/782cc9f65c0c19ef79bd009074e09bf0394674f4/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/782cc9f65c0c19ef79bd009074e09bf0394674f4/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=782cc9f65c0c19ef79bd009074e09bf0394674f4", "patch": "@@ -20,7 +20,6 @@\n #![recursion_limit=\"256\"]\n \n pub use errors;\n-use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::Lock;\n use rustc_index::bit_set::GrowableBitSet;\n pub use rustc_data_structures::thin_vec::ThinVec;\n@@ -115,6 +114,4 @@ pub mod early_buffered_lints;\n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n /// instead of implementing everything in librustc.\n-pub trait HashStableContext: syntax_pos::HashStableContext {\n-    fn hash_stable_tokenkind(&mut self, tokenkind: &token::TokenKind, hasher: &mut StableHasher);\n-}\n+pub trait HashStableContext: syntax_pos::HashStableContext {}"}, {"sha": "6f45211ac5f2998b5ddec09467cce98674f149a4", "filename": "src/libsyntax/token.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/782cc9f65c0c19ef79bd009074e09bf0394674f4/src%2Flibsyntax%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/782cc9f65c0c19ef79bd009074e09bf0394674f4/src%2Flibsyntax%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftoken.rs?ref=782cc9f65c0c19ef79bd009074e09bf0394674f4", "patch": "@@ -19,6 +19,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable_Generic;\n \n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n+#[derive(HashStable_Generic)]\n pub enum BinOpToken {\n     Plus,\n     Minus,\n@@ -192,7 +193,7 @@ fn ident_can_begin_type(name: ast::Name, span: Span, is_raw: bool) -> bool {\n     ].contains(&name)\n }\n \n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub enum TokenKind {\n     /* Expression-operator symbols. */\n     Eq,\n@@ -264,14 +265,6 @@ pub enum TokenKind {\n #[cfg(target_arch = \"x86_64\")]\n rustc_data_structures::static_assert_size!(TokenKind, 16);\n \n-impl<CTX> HashStable<CTX> for TokenKind\n-    where CTX: crate::HashStableContext\n-{\n-    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        hcx.hash_stable_tokenkind(self, hasher)\n-    }\n-}\n-\n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n pub struct Token {\n     pub kind: TokenKind,\n@@ -735,3 +728,11 @@ impl fmt::Debug for Nonterminal {\n         }\n     }\n }\n+\n+impl<CTX> HashStable<CTX> for Nonterminal\n+    where CTX: crate::HashStableContext\n+{\n+    fn hash_stable(&self, _hcx: &mut CTX, _hasher: &mut StableHasher) {\n+        panic!(\"interpolated tokens should not be present in the HIR\")\n+    }\n+}"}]}