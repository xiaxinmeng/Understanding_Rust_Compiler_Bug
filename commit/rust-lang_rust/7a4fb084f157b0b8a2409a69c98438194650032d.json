{"sha": "7a4fb084f157b0b8a2409a69c98438194650032d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNGZiMDg0ZjE1N2IwYjhhMjQwOWE2OWM5ODQzODE5NDY1MDAzMmQ=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-06-21T02:42:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-22T14:03:16Z"}, "message": "Pull environment loading out into a function.", "tree": {"sha": "2f1017ca44c68b4e2c0745e8fbb49c791633dd0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f1017ca44c68b4e2c0745e8fbb49c791633dd0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a4fb084f157b0b8a2409a69c98438194650032d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4fb084f157b0b8a2409a69c98438194650032d", "html_url": "https://github.com/rust-lang/rust/commit/7a4fb084f157b0b8a2409a69c98438194650032d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a4fb084f157b0b8a2409a69c98438194650032d/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b40cedcb1c19dedd9803f27c8d3e6b1f949c0ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b40cedcb1c19dedd9803f27c8d3e6b1f949c0ea", "html_url": "https://github.com/rust-lang/rust/commit/6b40cedcb1c19dedd9803f27c8d3e6b1f949c0ea"}], "stats": {"total": 86, "additions": 50, "deletions": 36}, "files": [{"sha": "fecd6df0ab3ff94c147456465a4342834add0bd9", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 50, "deletions": 36, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/7a4fb084f157b0b8a2409a69c98438194650032d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4fb084f157b0b8a2409a69c98438194650032d/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=7a4fb084f157b0b8a2409a69c98438194650032d", "patch": "@@ -4268,6 +4268,53 @@ fn build_environment(&@block_ctxt cx, &vec[ast::node_id] upvars) ->\n     ret tup(llenvptr, llenvptrty);\n }\n \n+// Given an enclosing block context, a new function context, a closure type,\n+// and a list of upvars, generate code to load and populate the environment\n+// with the upvars and type descriptors.\n+fn load_environment(&@block_ctxt cx, &@fn_ctxt fcx,\n+                    TypeRef llenvptrty, &vec[ast::node_id] upvars)\n+{\n+    auto upvar_count = vec::len(upvars);\n+    auto copy_args_bcx = new_raw_block_ctxt(fcx, fcx.llcopyargs);\n+\n+    // Populate the upvars from the environment.\n+    auto llremoteenvptr =\n+        copy_args_bcx.build.PointerCast(fcx.llenv, llenvptrty);\n+    auto llremotebindingsptrptr =\n+        copy_args_bcx.build.GEP(llremoteenvptr,\n+                                [C_int(0), C_int(abi::box_rc_field_body),\n+                                 C_int(abi::closure_elt_bindings)]);\n+    auto llremotebindingsptr =\n+        copy_args_bcx.build.Load(llremotebindingsptrptr);\n+    auto i = 0u;\n+    while (i < upvar_count) {\n+        auto upvar_id = upvars.(i);\n+        auto llupvarptrptr =\n+            copy_args_bcx.build.GEP(llremotebindingsptr,\n+                                    [C_int(0), C_int(i as int)]);\n+        auto llupvarptr = copy_args_bcx.build.Load(llupvarptrptr);\n+        fcx.llupvars.insert(upvar_id, llupvarptr);\n+        i += 1u;\n+    }\n+\n+    // Populate the type parameters from the environment.\n+    auto llremotetydescsptr =\n+        copy_args_bcx.build.GEP(llremoteenvptr,\n+                                [C_int(0), C_int(abi::box_rc_field_body),\n+                                 C_int(abi::closure_elt_ty_params)]);\n+    auto tydesc_count = vec::len(cx.fcx.lltydescs);\n+    i = 0u;\n+    while (i < tydesc_count) {\n+        auto llremotetydescptr =\n+            copy_args_bcx.build.GEP(llremotetydescsptr,\n+                                    [C_int(0), C_int(i as int)]);\n+        auto llremotetydesc = copy_args_bcx.build.Load(llremotetydescptr);\n+        fcx.lltydescs += [llremotetydesc];\n+        i += 1u;\n+    }\n+\n+}\n+\n fn trans_for_each(&@block_ctxt cx, &@ast::local local, &@ast::expr seq,\n                   &ast::block body) -> result {\n     /*\n@@ -4323,43 +4370,10 @@ fn trans_for_each(&@block_ctxt cx, &@ast::local local, &@ast::expr seq,\n     let ValueRef lliterbody =\n         decl_internal_fastcall_fn(lcx.ccx.llmod, s, iter_body_llty);\n     auto fcx = new_fn_ctxt(lcx, cx.sp, lliterbody);\n-    auto copy_args_bcx = new_raw_block_ctxt(fcx, fcx.llcopyargs);\n-\n-    // Populate the upvars from the environment.\n-    auto llremoteenvptr =\n-        copy_args_bcx.build.PointerCast(fcx.llenv, llenvptrty);\n-    auto llremotebindingsptrptr =\n-        copy_args_bcx.build.GEP(llremoteenvptr,\n-                                [C_int(0), C_int(abi::box_rc_field_body),\n-                                 C_int(abi::closure_elt_bindings)]);\n-    auto llremotebindingsptr =\n-        copy_args_bcx.build.Load(llremotebindingsptrptr);\n-    auto i = 0u;\n-    while (i < upvar_count) {\n-        auto upvar_id = upvars.(i);\n-        auto llupvarptrptr =\n-            copy_args_bcx.build.GEP(llremotebindingsptr,\n-                                    [C_int(0), C_int(i as int)]);\n-        auto llupvarptr = copy_args_bcx.build.Load(llupvarptrptr);\n-        fcx.llupvars.insert(upvar_id, llupvarptr);\n-        i += 1u;\n-    }\n \n-    // Populate the type parameters from the environment.\n-    auto llremotetydescsptr =\n-        copy_args_bcx.build.GEP(llremoteenvptr,\n-                                [C_int(0), C_int(abi::box_rc_field_body),\n-                                 C_int(abi::closure_elt_ty_params)]);\n-    auto tydesc_count = vec::len[ValueRef](cx.fcx.lltydescs);\n-    i = 0u;\n-    while (i < tydesc_count) {\n-        auto llremotetydescptr =\n-            copy_args_bcx.build.GEP(llremotetydescsptr,\n-                                    [C_int(0), C_int(i as int)]);\n-        auto llremotetydesc = copy_args_bcx.build.Load(llremotetydescptr);\n-        fcx.lltydescs += [llremotetydesc];\n-        i += 1u;\n-    }\n+    // Generate code to load the environment out of the\n+    // environment pointer.\n+    load_environment(cx, fcx, llenvptrty, upvars);\n \n     // Add an upvar for the loop variable alias.\n     fcx.llupvars.insert(decl_id, llvm::LLVMGetParam(fcx.llfn, 3u));"}]}