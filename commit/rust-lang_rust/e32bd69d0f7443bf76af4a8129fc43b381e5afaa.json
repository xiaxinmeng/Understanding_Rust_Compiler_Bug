{"sha": "e32bd69d0f7443bf76af4a8129fc43b381e5afaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMmJkNjlkMGY3NDQzYmY3NmFmNGE4MTI5ZmM0M2IzODFlNWFmYWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T06:27:01Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-12T10:50:44Z"}, "message": "extract parse_pat_mac_invoc", "tree": {"sha": "ce7967f07c7339a3105d8f8d0743dbcda333879d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce7967f07c7339a3105d8f8d0743dbcda333879d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e32bd69d0f7443bf76af4a8129fc43b381e5afaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e32bd69d0f7443bf76af4a8129fc43b381e5afaa", "html_url": "https://github.com/rust-lang/rust/commit/e32bd69d0f7443bf76af4a8129fc43b381e5afaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e32bd69d0f7443bf76af4a8129fc43b381e5afaa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "231da7e044255286ba92675e89ca168a4932452c", "url": "https://api.github.com/repos/rust-lang/rust/commits/231da7e044255286ba92675e89ca168a4932452c", "html_url": "https://github.com/rust-lang/rust/commit/231da7e044255286ba92675e89ca168a4932452c"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "40dfa86834f1c657ebc68d4e1228323032ef537d", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e32bd69d0f7443bf76af4a8129fc43b381e5afaa/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e32bd69d0f7443bf76af4a8129fc43b381e5afaa/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=e32bd69d0f7443bf76af4a8129fc43b381e5afaa", "patch": "@@ -3,7 +3,7 @@ use super::{Parser, PResult, PathStyle};\n use crate::{maybe_recover_from_interpolated_ty_qpath, maybe_whole};\n use crate::ptr::P;\n use crate::ast::{self, Attribute, Pat, PatKind, FieldPat, RangeEnd, RangeSyntax, Mac_};\n-use crate::ast::{BindingMode, Ident, Mutability, Expr, ExprKind};\n+use crate::ast::{BindingMode, Ident, Mutability, Path, Expr, ExprKind};\n use crate::parse::token::{self};\n use crate::print::pprust;\n use crate::source_map::{respan, Span, Spanned};\n@@ -165,18 +165,7 @@ impl<'a> Parser<'a> {\n                     (None, self.parse_path(PathStyle::Expr)?)\n                 };\n                 match self.token.kind {\n-                    token::Not if qself.is_none() => {\n-                        // Parse macro invocation\n-                        self.bump();\n-                        let (delim, tts) = self.expect_delimited_token_tree()?;\n-                        let mac = respan(lo.to(self.prev_span), Mac_ {\n-                            path,\n-                            tts,\n-                            delim,\n-                            prior_type_ascription: self.last_type_ascription,\n-                        });\n-                        PatKind::Mac(mac)\n-                    }\n+                    token::Not if qself.is_none() => self.parse_pat_mac_invoc(lo, path)?,\n                     token::DotDotDot | token::DotDotEq | token::DotDot => {\n                         let (end_kind, form) = match self.token.kind {\n                             token::DotDot => (RangeEnd::Excluded, \"..\"),\n@@ -328,7 +317,8 @@ impl<'a> Parser<'a> {\n         })\n     }\n \n-    // Recover on `mut ref? ident @ pat` and suggest that the order of `mut` and `ref` is incorrect.\n+    /// Recover on `mut ref? ident @ pat` and suggest\n+    /// that the order of `mut` and `ref` is incorrect.\n     fn recover_pat_ident_mut_first(&mut self) -> PResult<'a, PatKind> {\n         let mutref_span = self.prev_span.to(self.token.span);\n         let binding_mode = if self.eat_keyword(kw::Ref) {\n@@ -347,6 +337,19 @@ impl<'a> Parser<'a> {\n         self.parse_pat_ident(binding_mode)\n     }\n \n+    /// Parse macro invocation\n+    fn parse_pat_mac_invoc(&mut self, lo: Span, path: Path) -> PResult<'a, PatKind> {\n+        self.bump();\n+        let (delim, tts) = self.expect_delimited_token_tree()?;\n+        let mac = respan(lo.to(self.prev_span), Mac_ {\n+            path,\n+            tts,\n+            delim,\n+            prior_type_ascription: self.last_type_ascription,\n+        });\n+        Ok(PatKind::Mac(mac))\n+    }\n+\n     // Helper function to decide whether to parse as ident binding\n     // or to try to do something more complex like range patterns.\n     fn parse_as_ident(&mut self) -> bool {"}]}