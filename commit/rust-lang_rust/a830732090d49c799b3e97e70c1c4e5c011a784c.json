{"sha": "a830732090d49c799b3e97e70c1c4e5c011a784c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MzA3MzIwOTBkNDljNzk5YjNlOTdlNzBjMWM0ZTVjMDExYTc4NGM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-23T10:33:52Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2018-09-24T22:33:13Z"}, "message": "Rename places_conflict to borrow_conflicts_with_place\n\nThis name better reflects the asymmetry of this function.", "tree": {"sha": "b65ed5c703fd05a95759d33bc0a78057e427f01c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b65ed5c703fd05a95759d33bc0a78057e427f01c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a830732090d49c799b3e97e70c1c4e5c011a784c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a830732090d49c799b3e97e70c1c4e5c011a784c", "html_url": "https://github.com/rust-lang/rust/commit/a830732090d49c799b3e97e70c1c4e5c011a784c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a830732090d49c799b3e97e70c1c4e5c011a784c/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "531e98a0d80af18da51a0bec6a39b0c9d7e33fb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4", "html_url": "https://github.com/rust-lang/rust/commit/531e98a0d80af18da51a0bec6a39b0c9d7e33fb4"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "9250c04969f989eeb94b76883cdc0762ef70b130", "filename": "src/librustc_mir/borrow_check/path_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a830732090d49c799b3e97e70c1c4e5c011a784c/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a830732090d49c799b3e97e70c1c4e5c011a784c/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fpath_utils.rs?ref=a830732090d49c799b3e97e70c1c4e5c011a784c", "patch": "@@ -61,7 +61,7 @@ pub(super) fn each_borrow_involving_path<'a, 'tcx, 'gcx: 'tcx, F, I, S> (\n     for i in candidates {\n         let borrowed = &borrow_set[i];\n \n-        if places_conflict::places_conflict(\n+        if places_conflict::borrow_conflicts_with_place(\n             tcx,\n             mir,\n             &borrowed.borrowed_place,"}, {"sha": "c0f059619a4974b59e5264c1e8f7a4ee4c980a3f", "filename": "src/librustc_mir/borrow_check/places_conflict.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a830732090d49c799b3e97e70c1c4e5c011a784c/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a830732090d49c799b3e97e70c1c4e5c011a784c/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fplaces_conflict.rs?ref=a830732090d49c799b3e97e70c1c4e5c011a784c", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::{Projection, ProjectionElem};\n use rustc::ty::{self, TyCtxt};\n use std::cmp::max;\n \n-pub(super) fn places_conflict<'gcx, 'tcx>(\n+pub(super) fn borrow_conflicts_with_place<'gcx, 'tcx>(\n     tcx: TyCtxt<'_, 'gcx, 'tcx>,\n     mir: &Mir<'tcx>,\n     borrow_place: &Place<'tcx>,\n@@ -26,7 +26,7 @@ pub(super) fn places_conflict<'gcx, 'tcx>(\n     access: AccessDepth,\n ) -> bool {\n     debug!(\n-        \"places_conflict({:?},{:?},{:?})\",\n+        \"borrow_conflicts_with_place({:?},{:?},{:?})\",\n         borrow_place, access_place, access\n     );\n \n@@ -104,10 +104,10 @@ fn place_components_conflict<'gcx, 'tcx>(\n     loop {\n         // loop invariant: borrow_c is always either equal to access_c or disjoint from it.\n         if let Some(borrow_c) = borrow_components.next() {\n-            debug!(\"places_conflict: borrow_c = {:?}\", borrow_c);\n+            debug!(\"borrow_conflicts_with_place: borrow_c = {:?}\", borrow_c);\n \n             if let Some(access_c) = access_components.next() {\n-                debug!(\"places_conflict: access_c = {:?}\", access_c);\n+                debug!(\"borrow_conflicts_with_place: access_c = {:?}\", access_c);\n \n                 // Borrow and access path both have more components.\n                 //\n@@ -136,7 +136,7 @@ fn place_components_conflict<'gcx, 'tcx>(\n                         // idea, at least for now, so just give up and\n                         // report a conflict. This is unsafe code anyway so\n                         // the user could always use raw pointers.\n-                        debug!(\"places_conflict: arbitrary -> conflict\");\n+                        debug!(\"borrow_conflicts_with_place: arbitrary -> conflict\");\n                         return true;\n                     }\n                     Overlap::EqualOrDisjoint => {\n@@ -145,7 +145,7 @@ fn place_components_conflict<'gcx, 'tcx>(\n                     Overlap::Disjoint => {\n                         // We have proven the borrow disjoint - further\n                         // projections will remain disjoint.\n-                        debug!(\"places_conflict: disjoint\");\n+                        debug!(\"borrow_conflicts_with_place: disjoint\");\n                         return false;\n                     }\n                 }\n@@ -177,15 +177,15 @@ fn place_components_conflict<'gcx, 'tcx>(\n                         //\n                         // e.g. a (mutable) borrow of `a[5]` while we read the\n                         // array length of `a`.\n-                        debug!(\"places_conflict: implicit field\");\n+                        debug!(\"borrow_conflicts_with_place: implicit field\");\n                         return false;\n                     }\n \n                     (ProjectionElem::Deref, _, Shallow(None)) => {\n                         // e.g. a borrow of `*x.y` while we shallowly access `x.y` or some\n                         // prefix thereof - the shallow access can't touch anything behind\n                         // the pointer.\n-                        debug!(\"places_conflict: shallow access behind ptr\");\n+                        debug!(\"borrow_conflicts_with_place: shallow access behind ptr\");\n                         return false;\n                     }\n                     (ProjectionElem::Deref, ty::Ref(_, _, hir::MutImmutable), _) => {\n@@ -195,7 +195,7 @@ fn place_components_conflict<'gcx, 'tcx>(\n                     (ProjectionElem::Deref, ty::Ref(_, _, hir::MutMutable), AccessDepth::Drop) => {\n                         // Values behind a mutatble reference are not access either by Dropping a\n                         // value, or by StorageDead\n-                        debug!(\"places_conflict: drop access behind ptr\");\n+                        debug!(\"borrow_conflicts_with_place: drop access behind ptr\");\n                         return false;\n                     }\n \n@@ -236,10 +236,10 @@ fn place_components_conflict<'gcx, 'tcx>(\n             // that the borrow can access a *part* of our place that\n             // our access cares about, so we still have a conflict.\n             if borrow_kind == BorrowKind::Shallow && access_components.next().is_some() {\n-                debug!(\"places_conflict: shallow borrow\");\n+                debug!(\"borrow_conflicts_with_place: shallow borrow\");\n                 return false;\n             } else {\n-                debug!(\"places_conflict: full borrow, CONFLICT\");\n+                debug!(\"borrow_conflicts_with_place: full borrow, CONFLICT\");\n                 return true;\n             }\n         }\n@@ -253,7 +253,7 @@ fn place_components_conflict<'gcx, 'tcx>(\n ///\n /// NB: This particular impl strategy is not the most obvious.  It was\n /// chosen because it makes a measurable difference to NLL\n-/// performance, as this code (`places_conflict`) is somewhat hot.\n+/// performance, as this code (`borrow_conflicts_with_place`) is somewhat hot.\n struct PlaceComponents<'p, 'tcx: 'p> {\n     component: &'p Place<'tcx>,\n     next: Option<&'p PlaceComponents<'p, 'tcx>>,"}]}