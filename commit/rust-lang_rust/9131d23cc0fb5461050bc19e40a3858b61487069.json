{"sha": "9131d23cc0fb5461050bc19e40a3858b61487069", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxMzFkMjNjYzBmYjU0NjEwNTBiYzE5ZTQwYTM4NThiNjE0ODcwNjk=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-29T13:47:39Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-30T12:15:08Z"}, "message": "resolve: Don't speculatively load crates if this is a speculative resolution\n\nThis avoids a rare rustdoc bug where loading `core` twice caused a\n'cannot find a built-in macro' error:\n\n1. `x.py build --stage 1` builds the standard library and creates a sysroot\n2. `cargo doc` does something like `cargo check` to create `rmeta`s for all the crates (unrelated to what was built above)\n3. the `cargo check`-like `libcore-*.rmeta` is loaded as a transitive dependency *and claims ownership* of builtin macros\n4. `rustdoc` later tries to resolve some path in a doc link\n5. suggestion logic fires and loads \"extern prelude\" crates by name\n6. the sysroot `libcore-*.rlib` is loaded and *fails to claim ownership* of builtin macros\n\nThis fixes step 5. by not running suggestion logic if this is a\nspeculative resolution. Additionally, it marks `resolve_ast_path` as a\nspeculative resolution.", "tree": {"sha": "f14a5e764cad14880cff4bb500b6372877629a57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f14a5e764cad14880cff4bb500b6372877629a57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9131d23cc0fb5461050bc19e40a3858b61487069", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9131d23cc0fb5461050bc19e40a3858b61487069", "html_url": "https://github.com/rust-lang/rust/commit/9131d23cc0fb5461050bc19e40a3858b61487069", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9131d23cc0fb5461050bc19e40a3858b61487069/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1c71a17090cd5ef732d852ee878114375ff9254", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1c71a17090cd5ef732d852ee878114375ff9254", "html_url": "https://github.com/rust-lang/rust/commit/a1c71a17090cd5ef732d852ee878114375ff9254"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "5892edf7652b73a802e32a9abebe013dd5dddca8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9131d23cc0fb5461050bc19e40a3858b61487069/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9131d23cc0fb5461050bc19e40a3858b61487069/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9131d23cc0fb5461050bc19e40a3858b61487069", "patch": "@@ -2385,8 +2385,12 @@ impl<'a> Resolver<'a> {\n                             Res::Def(DefKind::Mod, _) => true,\n                             _ => false,\n                         };\n-                        let mut candidates =\n-                            self.lookup_import_candidates(ident, TypeNS, parent_scope, is_mod);\n+                        // Don't look up import candidates if this is a speculative resolve\n+                        let mut candidates = if record_used {\n+                            self.lookup_import_candidates(ident, TypeNS, parent_scope, is_mod)\n+                        } else {\n+                            Vec::new()\n+                        };\n                         candidates.sort_by_cached_key(|c| {\n                             (c.path.segments.len(), pprust::path_to_string(&c.path))\n                         });\n@@ -3200,7 +3204,7 @@ impl<'a> Resolver<'a> {\n             &Segment::from_path(path),\n             Some(ns),\n             parent_scope,\n-            true,\n+            false,\n             path.span,\n             CrateLint::No,\n         ) {"}]}