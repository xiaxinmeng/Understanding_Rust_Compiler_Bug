{"sha": "8c82486ea92219d1c0c720fc598abac27c81a966", "node_id": "C_kwDOAAsO6NoAKDhjODI0ODZlYTkyMjE5ZDFjMGM3MjBmYzU5OGFiYWMyN2M4MWE5NjY", "commit": {"author": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-05-22T14:13:23Z"}, "committer": {"name": "y21", "email": "30553356+y21@users.noreply.github.com", "date": "2023-05-22T14:13:23Z"}, "message": "[`default_constructed_unit_structs`]: do not lint type aliases", "tree": {"sha": "a4dfaef9e4a44a7f047c41ec9f1e577861ef70fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4dfaef9e4a44a7f047c41ec9f1e577861ef70fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c82486ea92219d1c0c720fc598abac27c81a966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c82486ea92219d1c0c720fc598abac27c81a966", "html_url": "https://github.com/rust-lang/rust/commit/8c82486ea92219d1c0c720fc598abac27c81a966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c82486ea92219d1c0c720fc598abac27c81a966/comments", "author": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "y21", "id": 30553356, "node_id": "MDQ6VXNlcjMwNTUzMzU2", "avatar_url": "https://avatars.githubusercontent.com/u/30553356?v=4", "gravatar_id": "", "url": "https://api.github.com/users/y21", "html_url": "https://github.com/y21", "followers_url": "https://api.github.com/users/y21/followers", "following_url": "https://api.github.com/users/y21/following{/other_user}", "gists_url": "https://api.github.com/users/y21/gists{/gist_id}", "starred_url": "https://api.github.com/users/y21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/y21/subscriptions", "organizations_url": "https://api.github.com/users/y21/orgs", "repos_url": "https://api.github.com/users/y21/repos", "events_url": "https://api.github.com/users/y21/events{/privacy}", "received_events_url": "https://api.github.com/users/y21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/435a8ad86c7a33bd7ffb91c59039943408d3b6aa", "html_url": "https://github.com/rust-lang/rust/commit/435a8ad86c7a33bd7ffb91c59039943408d3b6aa"}], "stats": {"total": 69, "additions": 62, "deletions": 7}, "files": [{"sha": "fb037bbcbf3eb95c1194512d6e8f87af8c00f807", "filename": "clippy_lints/src/default_constructed_unit_structs.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8c82486ea92219d1c0c720fc598abac27c81a966/clippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c82486ea92219d1c0c720fc598abac27c81a966/clippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_constructed_unit_structs.rs?ref=8c82486ea92219d1c0c720fc598abac27c81a966", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::{diagnostics::span_lint_and_sugg, match_def_path, paths};\n+use clippy_utils::{diagnostics::span_lint_and_sugg, is_ty_alias, match_def_path, paths};\n use hir::{def::Res, ExprKind};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -43,12 +43,23 @@ declare_clippy_lint! {\n }\n declare_lint_pass!(DefaultConstructedUnitStructs => [DEFAULT_CONSTRUCTED_UNIT_STRUCTS]);\n \n+fn is_alias(ty: hir::Ty<'_>) -> bool {\n+    if let hir::TyKind::Path(ref qpath) = ty.kind {\n+        is_ty_alias(qpath)\n+    } else {\n+        false\n+    }\n+}\n+\n impl LateLintPass<'_> for DefaultConstructedUnitStructs {\n     fn check_expr<'tcx>(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'tcx>) {\n         if_chain!(\n             // make sure we have a call to `Default::default`\n             if let hir::ExprKind::Call(fn_expr, &[]) = expr.kind;\n-            if let ExprKind::Path(ref qpath@ hir::QPath::TypeRelative(_,_)) = fn_expr.kind;\n+            if let ExprKind::Path(ref qpath @ hir::QPath::TypeRelative(base, _)) = fn_expr.kind;\n+            // make sure this isn't a type alias:\n+            // `<Foo as Bar>::Assoc` cannot be used as a constructor\n+            if !is_alias(*base);\n             if let Res::Def(_, def_id) = cx.qpath_res(qpath, fn_expr.hir_id);\n             if match_def_path(cx, def_id, &paths::DEFAULT_TRAIT_METHOD);\n             // make sure we have a struct with no fields (unit struct)"}, {"sha": "8c883445a798469cee598af28e8bc5ce024df4c0", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c82486ea92219d1c0c720fc598abac27c81a966/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c82486ea92219d1c0c720fc598abac27c81a966/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=8c82486ea92219d1c0c720fc598abac27c81a966", "patch": "@@ -287,7 +287,7 @@ pub fn is_wild(pat: &Pat<'_>) -> bool {\n /// Checks if the given `QPath` belongs to a type alias.\n pub fn is_ty_alias(qpath: &QPath<'_>) -> bool {\n     match *qpath {\n-        QPath::Resolved(_, path) => matches!(path.res, Res::Def(DefKind::TyAlias, ..)),\n+        QPath::Resolved(_, path) => matches!(path.res, Res::Def(DefKind::TyAlias | DefKind::AssocTy, ..)),\n         QPath::TypeRelative(ty, _) if let TyKind::Path(qpath) = ty.kind => { is_ty_alias(&qpath) },\n         _ => false,\n     }"}, {"sha": "ac5fe38ff4439068254b93e79a290d28aad982a5", "filename": "tests/ui/default_constructed_unit_structs.fixed", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8c82486ea92219d1c0c720fc598abac27c81a966/tests%2Fui%2Fdefault_constructed_unit_structs.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8c82486ea92219d1c0c720fc598abac27c81a966/tests%2Fui%2Fdefault_constructed_unit_structs.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_constructed_unit_structs.fixed?ref=8c82486ea92219d1c0c720fc598abac27c81a966", "patch": "@@ -101,6 +101,28 @@ struct EmptyStruct {}\n #[non_exhaustive]\n struct NonExhaustiveStruct;\n \n+mod issue_10755 {\n+    struct Sqlite {}\n+\n+    trait HasArguments<'q> {\n+        type Arguments;\n+    }\n+\n+    impl<'q> HasArguments<'q> for Sqlite {\n+        type Arguments = std::marker::PhantomData<&'q ()>;\n+    }\n+\n+    type SqliteArguments<'q> = <Sqlite as HasArguments<'q>>::Arguments;\n+\n+    fn foo() {\n+        // should not lint\n+        // type alias cannot be used as a constructor\n+        let _ = <Sqlite as HasArguments>::Arguments::default();\n+\n+        let _ = SqliteArguments::default();\n+    }\n+}\n+\n fn main() {\n     // should lint\n     let _ = PhantomData::<usize>;"}, {"sha": "de7f14ffbd95c393a8ebca68b3ab020adb9b511e", "filename": "tests/ui/default_constructed_unit_structs.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8c82486ea92219d1c0c720fc598abac27c81a966/tests%2Fui%2Fdefault_constructed_unit_structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c82486ea92219d1c0c720fc598abac27c81a966/tests%2Fui%2Fdefault_constructed_unit_structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_constructed_unit_structs.rs?ref=8c82486ea92219d1c0c720fc598abac27c81a966", "patch": "@@ -101,6 +101,28 @@ struct EmptyStruct {}\n #[non_exhaustive]\n struct NonExhaustiveStruct;\n \n+mod issue_10755 {\n+    struct Sqlite {}\n+\n+    trait HasArguments<'q> {\n+        type Arguments;\n+    }\n+\n+    impl<'q> HasArguments<'q> for Sqlite {\n+        type Arguments = std::marker::PhantomData<&'q ()>;\n+    }\n+\n+    type SqliteArguments<'q> = <Sqlite as HasArguments<'q>>::Arguments;\n+\n+    fn foo() {\n+        // should not lint\n+        // type alias cannot be used as a constructor\n+        let _ = <Sqlite as HasArguments>::Arguments::default();\n+\n+        let _ = SqliteArguments::default();\n+    }\n+}\n+\n fn main() {\n     // should lint\n     let _ = PhantomData::<usize>::default();"}, {"sha": "13abb9149da246b853a6466181b9223fa78891c2", "filename": "tests/ui/default_constructed_unit_structs.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c82486ea92219d1c0c720fc598abac27c81a966/tests%2Fui%2Fdefault_constructed_unit_structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8c82486ea92219d1c0c720fc598abac27c81a966/tests%2Fui%2Fdefault_constructed_unit_structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_constructed_unit_structs.stderr?ref=8c82486ea92219d1c0c720fc598abac27c81a966", "patch": "@@ -13,25 +13,25 @@ LL |             inner: PhantomData::default(),\n    |                               ^^^^^^^^^^^ help: remove this call to `default`\n \n error: use of `default` to create a unit struct\n-  --> $DIR/default_constructed_unit_structs.rs:106:33\n+  --> $DIR/default_constructed_unit_structs.rs:128:33\n    |\n LL |     let _ = PhantomData::<usize>::default();\n    |                                 ^^^^^^^^^^^ help: remove this call to `default`\n \n error: use of `default` to create a unit struct\n-  --> $DIR/default_constructed_unit_structs.rs:107:42\n+  --> $DIR/default_constructed_unit_structs.rs:129:42\n    |\n LL |     let _: PhantomData<i32> = PhantomData::default();\n    |                                          ^^^^^^^^^^^ help: remove this call to `default`\n \n error: use of `default` to create a unit struct\n-  --> $DIR/default_constructed_unit_structs.rs:108:55\n+  --> $DIR/default_constructed_unit_structs.rs:130:55\n    |\n LL |     let _: PhantomData<i32> = std::marker::PhantomData::default();\n    |                                                       ^^^^^^^^^^^ help: remove this call to `default`\n \n error: use of `default` to create a unit struct\n-  --> $DIR/default_constructed_unit_structs.rs:109:23\n+  --> $DIR/default_constructed_unit_structs.rs:131:23\n    |\n LL |     let _ = UnitStruct::default();\n    |                       ^^^^^^^^^^^ help: remove this call to `default`"}]}