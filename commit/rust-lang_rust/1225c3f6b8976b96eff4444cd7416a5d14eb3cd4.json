{"sha": "1225c3f6b8976b96eff4444cd7416a5d14eb3cd4", "node_id": "C_kwDOAAsO6NoAKDEyMjVjM2Y2Yjg5NzZiOTZlZmY0NDQ0Y2Q3NDE2YTVkMTRlYjNjZDQ", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-16T21:54:13Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-10-20T03:55:30Z"}, "message": "fix #103112, add diagnostic for calling a function with the same name when a Macro is not found", "tree": {"sha": "cc1fe195ecbc678bde0ae58b5a17e5ba795b6af4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc1fe195ecbc678bde0ae58b5a17e5ba795b6af4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1225c3f6b8976b96eff4444cd7416a5d14eb3cd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1225c3f6b8976b96eff4444cd7416a5d14eb3cd4", "html_url": "https://github.com/rust-lang/rust/commit/1225c3f6b8976b96eff4444cd7416a5d14eb3cd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1225c3f6b8976b96eff4444cd7416a5d14eb3cd4/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "53728ff751df4c271d4ea565b6871057a3504fc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/53728ff751df4c271d4ea565b6871057a3504fc5", "html_url": "https://github.com/rust-lang/rust/commit/53728ff751df4c271d4ea565b6871057a3504fc5"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "71264ffc877ded9682e7f9b34b44371827cbfb33", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1225c3f6b8976b96eff4444cd7416a5d14eb3cd4/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1225c3f6b8976b96eff4444cd7416a5d14eb3cd4/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=1225c3f6b8976b96eff4444cd7416a5d14eb3cd4", "patch": "@@ -12,7 +12,7 @@ use rustc_attr::StabilityLevel;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::intern::Interned;\n use rustc_data_structures::sync::Lrc;\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_expand::base::{Annotatable, DeriveResolutions, Indeterminate, ResolverExpand};\n use rustc_expand::base::{SyntaxExtension, SyntaxExtensionKind};\n use rustc_expand::compile_declarative_macro;\n@@ -694,7 +694,25 @@ impl<'a> Resolver<'a> {\n                     check_consistency(self, &path, path_span, kind, initial_res, res)\n                 }\n                 path_res @ PathResult::NonModule(..) | path_res @ PathResult::Failed { .. } => {\n+                    let mut suggestion = None;\n                     let (span, label) = if let PathResult::Failed { span, label, .. } = path_res {\n+                        // try to suggest if it's not a macro, maybe a function\n+                        if let PathResult::NonModule(partial_res) =  self.resolve_path(\n+                            &path,\n+                            Some(ValueNS),\n+                            &parent_scope,\n+                            Some(Finalize::new(ast::CRATE_NODE_ID, path_span)),\n+                            None,\n+                        ) && partial_res.unresolved_segments() == 0 {\n+                            let sm = self.session.source_map();\n+                            let span = sm.span_extend_while(span, |c| c == '!').unwrap_or(span);\n+                            let code = sm.span_to_snippet(span).unwrap();\n+                            suggestion = Some(\n+                                    (vec![(span, code.trim_end_matches('!').to_string())],\n+                                    format!(\"{} is not a macro, but a {}, try to remove `!`\", Segment::names_to_string(&path), partial_res.base_res().descr()),\n+                                    Applicability::MaybeIncorrect)\n+                                );\n+                        }\n                         (span, label)\n                     } else {\n                         (\n@@ -708,7 +726,7 @@ impl<'a> Resolver<'a> {\n                     };\n                     self.report_error(\n                         span,\n-                        ResolutionError::FailedToResolve { label, suggestion: None },\n+                        ResolutionError::FailedToResolve { label, suggestion },\n                     );\n                 }\n                 PathResult::Module(..) | PathResult::Indeterminate => unreachable!(),"}, {"sha": "111ae7c73080d3eab5df9bdfa5b6f98f58510117", "filename": "src/test/ui/suggestions/issue-103112.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1225c3f6b8976b96eff4444cd7416a5d14eb3cd4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-103112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1225c3f6b8976b96eff4444cd7416a5d14eb3cd4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-103112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-103112.rs?ref=1225c3f6b8976b96eff4444cd7416a5d14eb3cd4", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    std::process::abort!();\n+    //~^ ERROR: failed to resolve\n+}"}, {"sha": "3518ef4c6527153718fa8e0ba90979163888d04e", "filename": "src/test/ui/suggestions/issue-103112.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1225c3f6b8976b96eff4444cd7416a5d14eb3cd4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-103112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1225c3f6b8976b96eff4444cd7416a5d14eb3cd4/src%2Ftest%2Fui%2Fsuggestions%2Fissue-103112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-103112.stderr?ref=1225c3f6b8976b96eff4444cd7416a5d14eb3cd4", "patch": "@@ -0,0 +1,14 @@\n+error[E0433]: failed to resolve: could not find `abort` in `process`\n+  --> $DIR/issue-103112.rs:2:19\n+   |\n+LL |     std::process::abort!();\n+   |                   ^^^^^ could not find `abort` in `process`\n+   |\n+help: std::process::abort is not a macro, but a function, try to remove `!`\n+   |\n+LL |     std::process::abort();\n+   |                   ~~~~~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}]}