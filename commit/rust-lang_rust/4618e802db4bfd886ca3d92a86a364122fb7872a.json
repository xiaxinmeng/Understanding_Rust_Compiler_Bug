{"sha": "4618e802db4bfd886ca3d92a86a364122fb7872a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MThlODAyZGI0YmZkODg2Y2EzZDkyYTg2YTM2NDEyMmZiNzg3MmE=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2011-07-11T21:37:21Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-11T21:45:21Z"}, "message": "Fix comparisons of the nil type to do something sensible.\n\nCloses #576.", "tree": {"sha": "1d323998fe931b7073f8967509d7fed74a592e98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d323998fe931b7073f8967509d7fed74a592e98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4618e802db4bfd886ca3d92a86a364122fb7872a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4618e802db4bfd886ca3d92a86a364122fb7872a", "html_url": "https://github.com/rust-lang/rust/commit/4618e802db4bfd886ca3d92a86a364122fb7872a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4618e802db4bfd886ca3d92a86a364122fb7872a/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fc7ebd520f16947f8356fdeb9061238e2fb4f0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fc7ebd520f16947f8356fdeb9061238e2fb4f0b", "html_url": "https://github.com/rust-lang/rust/commit/7fc7ebd520f16947f8356fdeb9061238e2fb4f0b"}], "stats": {"total": 48, "additions": 22, "deletions": 26}, "files": [{"sha": "0acf799b145827834d0fc896c79bd7412e41f4cb", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4618e802db4bfd886ca3d92a86a364122fb7872a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4618e802db4bfd886ca3d92a86a364122fb7872a/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4618e802db4bfd886ca3d92a86a364122fb7872a", "patch": "@@ -2362,9 +2362,8 @@ fn make_cmp_glue(&@block_ctxt cx, ValueRef lhs0, ValueRef rhs0, &ty::t t,\n                 rhs_fill = vec_fill(scx, rhs);\n                 bcx = scx;\n             }\n-            r =\n-                compare_numerical_values(bcx, lhs_fill, rhs_fill,\n-                                         unsigned_int, llop);\n+            r = compare_scalar_values(bcx, lhs_fill, rhs_fill,\n+                                      unsigned_int, llop);\n             r.bcx.build.Store(r.val, flag);\n         } else {\n             // == and <= default to true if they find == all the way. <\n@@ -2441,18 +2440,18 @@ fn make_cmp_glue(&@block_ctxt cx, ValueRef lhs0, ValueRef rhs0, &ty::t t,\n \n \n // Used only for creating scalar comparsion glue.\n-tag numerical_type { signed_int; unsigned_int; floating_point; }\n+tag scalar_type { nil_type; signed_int; unsigned_int; floating_point; }\n \n \n fn compare_scalar_types(@block_ctxt cx, ValueRef lhs, ValueRef rhs, &ty::t t,\n                         ValueRef llop) -> result {\n     // FIXME: this could be a lot shorter if we could combine multiple cases\n     // of alt expressions (issue #449).\n \n-    auto f = bind compare_numerical_values(cx, lhs, rhs, _, llop);\n+    auto f = bind compare_scalar_values(cx, lhs, rhs, _, llop);\n \n     alt (ty::struct(cx.fcx.lcx.ccx.tcx, t)) {\n-        case (ty::ty_nil) { ret rslt(cx, C_bool(true)); }\n+        case (ty::ty_nil) { ret f(nil_type); }\n         case (ty::ty_bool) { ret f(unsigned_int); }\n         case (ty::ty_int) { ret f(signed_int); }\n         case (ty::ty_float) { ret f(floating_point); }\n@@ -2514,13 +2513,20 @@ fn make_scalar_cmp_glue(&@block_ctxt cx, ValueRef lhs, ValueRef rhs, &ty::t t,\n }\n \n \n-// A helper function to compare numerical values.\n-fn compare_numerical_values(&@block_ctxt cx, ValueRef lhs, ValueRef rhs,\n-                            numerical_type nt, ValueRef llop) -> result {\n+// A helper function to do the actual comparison of scalar values.\n+fn compare_scalar_values(&@block_ctxt cx, ValueRef lhs, ValueRef rhs,\n+                         scalar_type nt, ValueRef llop) -> result {\n     auto eq_cmp;\n     auto lt_cmp;\n     auto le_cmp;\n     alt (nt) {\n+        case (nil_type) {\n+            // We don't need to do actual comparisons for nil.\n+            // () == () holds but () < () does not.\n+            eq_cmp = 1u;\n+            lt_cmp = 0u;\n+            le_cmp = 1u;\n+        }\n         case (floating_point) {\n             eq_cmp = lib::llvm::LLVMRealUEQ;\n             lt_cmp = lib::llvm::LLVMRealULT;\n@@ -2543,10 +2549,12 @@ fn compare_numerical_values(&@block_ctxt cx, ValueRef lhs, ValueRef rhs,\n     // the above, and \"auto eq_result = cmp_fn(eq_cmp, lhs, rhs);\" in the\n     // below.\n \n-    fn generic_cmp(&@block_ctxt cx, numerical_type nt, uint op, ValueRef lhs,\n+    fn generic_cmp(&@block_ctxt cx, scalar_type nt, uint op, ValueRef lhs,\n                    ValueRef rhs) -> ValueRef {\n         let ValueRef r;\n-        if (nt == floating_point) {\n+        if (nt == nil_type) {\n+            r = C_bool(op != 0u);\n+        } else if (nt == floating_point) {\n             r = cx.build.FCmp(op, lhs, rhs);\n         } else { r = cx.build.ICmp(op, lhs, rhs); }\n         ret r;\n@@ -2573,16 +2581,6 @@ fn compare_numerical_values(&@block_ctxt cx, ValueRef lhs, ValueRef rhs,\n     ret rslt(last_cx, last_result);\n }\n \n-\n-// A helper function to create numerical comparison glue.\n-fn make_numerical_cmp_glue(&@block_ctxt cx, ValueRef lhs, ValueRef rhs,\n-                           numerical_type nt, ValueRef llop) {\n-    auto r = compare_numerical_values(cx, lhs, rhs, nt, llop);\n-    r.bcx.build.Store(r.val, r.bcx.fcx.llretptr);\n-    r.bcx.build.RetVoid();\n-}\n-\n-\n type val_pair_fn = fn(&@block_ctxt, ValueRef, ValueRef) -> result ;\n \n type val_and_ty_fn = fn(&@block_ctxt, ValueRef, ty::t) -> result ;"}, {"sha": "74852f556f0111c4ff59e9a5960863ec5557935f", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4618e802db4bfd886ca3d92a86a364122fb7872a/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4618e802db4bfd886ca3d92a86a364122fb7872a/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=4618e802db4bfd886ca3d92a86a364122fb7872a", "patch": "@@ -3,12 +3,10 @@\n fn test_nil() {\n   assert () == ();\n   assert !(() != ());\n-  // FIXME (#576): The current implementation of relational ops on nil\n-  // is nonsensical\n-  assert () < ();\n+  assert !(() < ());\n   assert () <= ();\n   assert !(() > ());\n-  assert !(() >= ());\n+  assert () >= ();\n }\n \n fn test_bool() {\n@@ -159,4 +157,4 @@ fn main() {\n   test_fn();\n   test_native_fn();\n   test_obj();\n-}\n\\ No newline at end of file\n+}"}]}