{"sha": "f2321ecce5d3ce9adedeb376f76492657478f5d1", "node_id": "C_kwDOAAsO6NoAKGYyMzIxZWNjZTVkM2NlOWFkZWRlYjM3NmY3NjQ5MjY1NzQ3OGY1ZDE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-21T04:44:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-21T04:44:29Z"}, "message": "Rollup merge of #110365 - ozkanonur:ship-tools-with-sysroot, r=jyn514\n\nship tools with sysroot\n\nProvides tool binaries under the sysroot which can be used/tested with `cargo +custom-toolchain $tool`\n\nClippy and fmt works without any problem.\n\nBut can't say the same for miri:\n\n```sh\n\uf32e  ~/devspace/.other/chunk-list \uf7a1 stable $ cargo +stage2 miri setup\nRunning `\"rustup\" \"component\" \"add\" \"rust-src\"` to install the `rust-src` component for the selected toolchain.\nerror: stage2 is a custom toolchain\nfatal error: failed to install the `rust-src` component for the selected toolchain\n```\n\nit's looking for `$sysroot/lib/rustlib/src/rust/library` and that simply doesn't exists for `x build`.\n\ncc `@jyn514` (I thought you might be interested on this, since you did few review iterations on previous PRs of adding tools to sysroot)\n\n--\n\n**Update**\n\nNow we are able to use `miri` as well.\n\nAfter running `x b miri cargo-miri --stage 2`, I am able to run `cargo +stage2 miri setup` which works as expected.\n\nResolves #110625\nResolves #97762\nResolves #81431", "tree": {"sha": "2edf18a61762757a87b0576d0e2ee78a1eef7a04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2edf18a61762757a87b0576d0e2ee78a1eef7a04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2321ecce5d3ce9adedeb376f76492657478f5d1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkQhStCRBK7hj4Ov3rIwAA6Y8IAGhKbXT9OFlH8I84S7Gmyf7w\ndG+0ML8RpiuQJTWFWOYTWBq8z/Dj2shHiShP5uhjpvoSyL9LGDNdr4UInRpVERNZ\ngEom00clK6Kt+S7MNsXkTNrnbmnIB0wMCSFEyyG38OqS0H/F+5nKM9U2fZUl+QBI\niaX0gfBALKPGHsBdiZUIp1lWLzlyzqcBiA8d3l2FnCRDOq6H5bEp6ynB9/SvKX8o\nPo7Ytvvkige0vXKF3YeqTZ/4a7ZcoflqiD5f39gaqaaIUAOPtQyNMDSEff3eHxS0\nv4F1xCeLLujkgS9QO7mzohGAAtVW8O8Q5dr0YJbFsBEJReGGeuM+jHZFvRwA8jc=\n=NdAc\n-----END PGP SIGNATURE-----\n", "payload": "tree 2edf18a61762757a87b0576d0e2ee78a1eef7a04\nparent 8d09b8e206c9993fca26309d6d0b5892ae845ca2\nparent 68fc568b89b364025b6f4d1b364e26b4d5b1e79a\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682052269 +0200\ncommitter GitHub <noreply@github.com> 1682052269 +0200\n\nRollup merge of #110365 - ozkanonur:ship-tools-with-sysroot, r=jyn514\n\nship tools with sysroot\n\nProvides tool binaries under the sysroot which can be used/tested with `cargo +custom-toolchain $tool`\n\nClippy and fmt works without any problem.\n\nBut can't say the same for miri:\n\n```sh\n\uf32e  ~/devspace/.other/chunk-list \uf7a1 stable $ cargo +stage2 miri setup\nRunning `\"rustup\" \"component\" \"add\" \"rust-src\"` to install the `rust-src` component for the selected toolchain.\nerror: stage2 is a custom toolchain\nfatal error: failed to install the `rust-src` component for the selected toolchain\n```\n\nit's looking for `$sysroot/lib/rustlib/src/rust/library` and that simply doesn't exists for `x build`.\n\ncc `@jyn514` (I thought you might be interested on this, since you did few review iterations on previous PRs of adding tools to sysroot)\n\n--\n\n**Update**\n\nNow we are able to use `miri` as well.\n\nAfter running `x b miri cargo-miri --stage 2`, I am able to run `cargo +stage2 miri setup` which works as expected.\n\nResolves #110625\nResolves #97762\nResolves #81431\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2321ecce5d3ce9adedeb376f76492657478f5d1", "html_url": "https://github.com/rust-lang/rust/commit/f2321ecce5d3ce9adedeb376f76492657478f5d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2321ecce5d3ce9adedeb376f76492657478f5d1/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d09b8e206c9993fca26309d6d0b5892ae845ca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d09b8e206c9993fca26309d6d0b5892ae845ca2", "html_url": "https://github.com/rust-lang/rust/commit/8d09b8e206c9993fca26309d6d0b5892ae845ca2"}, {"sha": "68fc568b89b364025b6f4d1b364e26b4d5b1e79a", "url": "https://api.github.com/repos/rust-lang/rust/commits/68fc568b89b364025b6f4d1b364e26b4d5b1e79a", "html_url": "https://github.com/rust-lang/rust/commit/68fc568b89b364025b6f4d1b364e26b4d5b1e79a"}], "stats": {"total": 34, "additions": 27, "deletions": 7}, "files": [{"sha": "ab307d4d038c5b79c3be579571fb381bb8cbcfcf", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f2321ecce5d3ce9adedeb376f76492657478f5d1/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2321ecce5d3ce9adedeb376f76492657478f5d1/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=f2321ecce5d3ce9adedeb376f76492657478f5d1", "patch": "@@ -1328,7 +1328,6 @@ impl Step for Sysroot {\n                     true\n                 }\n             });\n-            return INTERNER.intern_path(sysroot);\n         }\n \n         // Symlink the source root into the same location inside the sysroot,"}, {"sha": "f8da6df0c7ccd0e7a841d1480b85fb3030f494fc", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f2321ecce5d3ce9adedeb376f76492657478f5d1/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2321ecce5d3ce9adedeb376f76492657478f5d1/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=f2321ecce5d3ce9adedeb376f76492657478f5d1", "patch": "@@ -748,6 +748,7 @@ macro_rules! tool_extended {\n        stable = $stable:expr\n        $(,tool_std = $tool_std:literal)?\n        $(,allow_features = $allow_features:expr)?\n+       $(,add_bins_to_sysroot = $add_bins_to_sysroot:expr)?\n        ;)+) => {\n         $(\n             #[derive(Debug, Clone, Hash, PartialEq, Eq)]\n@@ -790,7 +791,7 @@ macro_rules! tool_extended {\n \n             #[allow(unused_mut)]\n             fn run(mut $sel, $builder: &Builder<'_>) -> Option<PathBuf> {\n-                $builder.ensure(ToolBuild {\n+                let tool = $builder.ensure(ToolBuild {\n                     compiler: $sel.compiler,\n                     target: $sel.target,\n                     tool: $tool_name,\n@@ -800,7 +801,27 @@ macro_rules! tool_extended {\n                     is_optional_tool: true,\n                     source_type: SourceType::InTree,\n                     allow_features: concat!($($allow_features)*),\n-                })\n+                })?;\n+\n+                if (false $(|| !$add_bins_to_sysroot.is_empty())?) && $sel.compiler.stage > 0 {\n+                    let bindir = $builder.sysroot($sel.compiler).join(\"bin\");\n+                    t!(fs::create_dir_all(&bindir));\n+\n+                    #[allow(unused_variables)]\n+                    let tools_out = $builder\n+                        .cargo_out($sel.compiler, Mode::ToolRustc, $sel.target);\n+\n+                    $(for add_bin in $add_bins_to_sysroot {\n+                        let bin_source = tools_out.join(exe(add_bin, $sel.target));\n+                        let bin_destination = bindir.join(exe(add_bin, $sel.compiler.host));\n+                        $builder.copy(&bin_source, &bin_destination);\n+                    })?\n+\n+                    let tool = bindir.join(exe($tool_name, $sel.compiler.host));\n+                    Some(tool)\n+                } else {\n+                    Some(tool)\n+                }\n             }\n         }\n         )+\n@@ -814,15 +835,15 @@ macro_rules! tool_extended {\n tool_extended!((self, builder),\n     Cargofmt, \"src/tools/rustfmt\", \"cargo-fmt\", stable=true;\n     CargoClippy, \"src/tools/clippy\", \"cargo-clippy\", stable=true;\n-    Clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true;\n-    Miri, \"src/tools/miri\", \"miri\", stable=false;\n-    CargoMiri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=true;\n+    Clippy, \"src/tools/clippy\", \"clippy-driver\", stable=true, add_bins_to_sysroot = [\"clippy-driver\", \"cargo-clippy\"];\n+    Miri, \"src/tools/miri\", \"miri\", stable=false, add_bins_to_sysroot = [\"miri\"];\n+    CargoMiri, \"src/tools/miri/cargo-miri\", \"cargo-miri\", stable=true, add_bins_to_sysroot = [\"cargo-miri\"];\n     // FIXME: tool_std is not quite right, we shouldn't allow nightly features.\n     // But `builder.cargo` doesn't know how to handle ToolBootstrap in stages other than 0,\n     // and this is close enough for now.\n     Rls, \"src/tools/rls\", \"rls\", stable=true, tool_std=true;\n     RustDemangler, \"src/tools/rust-demangler\", \"rust-demangler\", stable=false, tool_std=true;\n-    Rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true;\n+    Rustfmt, \"src/tools/rustfmt\", \"rustfmt\", stable=true, add_bins_to_sysroot = [\"rustfmt\", \"cargo-fmt\"];\n );\n \n impl<'a> Builder<'a> {"}]}