{"sha": "33b923fd44c5c5925e635815fce68bdf1f98740f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzYjkyM2ZkNDRjNWM1OTI1ZTYzNTgxNWZjZTY4YmRmMWY5ODc0MGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-18T19:34:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-18T19:34:24Z"}, "message": "Auto merge of #53324 - alexreg:self_in_typedefs, r=eddyb\n\n`Self` in type definitions (self_in_typedefs)\n\nThis implements the [`self_in_typedefs` feature](https://github.com/rust-lang/rfcs/blob/master/text/2300-self-in-typedefs.md) ([tracking issue 49303](https://github.com/rust-lang/rust/issues/49303)).\n\nr? @eddyb\n\nCC @Centril", "tree": {"sha": "f10fd762a6fde5ed03bdc2b2ff9c9b9cda6382cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f10fd762a6fde5ed03bdc2b2ff9c9b9cda6382cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33b923fd44c5c5925e635815fce68bdf1f98740f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33b923fd44c5c5925e635815fce68bdf1f98740f", "html_url": "https://github.com/rust-lang/rust/commit/33b923fd44c5c5925e635815fce68bdf1f98740f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33b923fd44c5c5925e635815fce68bdf1f98740f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f0341412ed4b7c39003f2bf409b183d7ce066814", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0341412ed4b7c39003f2bf409b183d7ce066814", "html_url": "https://github.com/rust-lang/rust/commit/f0341412ed4b7c39003f2bf409b183d7ce066814"}, {"sha": "4e7d3f5a5eb9db95194cbb672f081c2ad9647674", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e7d3f5a5eb9db95194cbb672f081c2ad9647674", "html_url": "https://github.com/rust-lang/rust/commit/4e7d3f5a5eb9db95194cbb672f081c2ad9647674"}], "stats": {"total": 190, "additions": 153, "deletions": 37}, "files": [{"sha": "2416e85c17d1f68601ce0963670c286527e588b7", "filename": "src/doc/unstable-book/src/language-features/self-in-typedefs.md", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/33b923fd44c5c5925e635815fce68bdf1f98740f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-in-typedefs.md", "raw_url": "https://github.com/rust-lang/rust/raw/33b923fd44c5c5925e635815fce68bdf1f98740f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-in-typedefs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fself-in-typedefs.md?ref=33b923fd44c5c5925e635815fce68bdf1f98740f", "patch": "@@ -0,0 +1,24 @@\n+# `self_in_typedefs`\n+\n+The tracking issue for this feature is: [#49303]\n+\n+[#49303]: https://github.com/rust-lang/rust/issues/49303\n+\n+------------------------\n+\n+The `self_in_typedefs` feature gate lets you use the special `Self` identifier\n+in `struct`, `enum`, and `union` type definitions.\n+\n+A simple example is:\n+\n+```rust\n+#![feature(self_in_typedefs)]\n+\n+enum List<T>\n+where\n+    Self: PartialOrd<Self> // can write `Self` instead of `List<T>`\n+{\n+    Nil,\n+    Cons(T, Box<Self>) // likewise here\n+}\n+```"}, {"sha": "c1dc3041d7d178cd6cd708477c5cb1c4d06cf6bd", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33b923fd44c5c5925e635815fce68bdf1f98740f/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b923fd44c5c5925e635815fce68bdf1f98740f/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=33b923fd44c5c5925e635815fce68bdf1f98740f", "patch": "@@ -770,17 +770,18 @@ match x {\n \"##,\n \n E0411: r##\"\n-The `Self` keyword was used outside an impl or a trait.\n+The `Self` keyword was used outside an impl, trait, or type definition.\n \n Erroneous code example:\n \n ```compile_fail,E0411\n-<Self>::foo; // error: use of `Self` outside of an impl or trait\n+<Self>::foo; // error: use of `Self` outside of an impl, trait, or type\n+             // definition\n ```\n \n The `Self` keyword represents the current type, which explains why it can only\n-be used inside an impl or a trait. It gives access to the associated items of a\n-type:\n+be used inside an impl, trait, or type definition. It gives access to the\n+associated items of a type:\n \n ```\n trait Foo {"}, {"sha": "b04dd07ba7d8004fd2761bb48eee797fe6d582a9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 36, "deletions": 18, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/33b923fd44c5c5925e635815fce68bdf1f98740f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b923fd44c5c5925e635815fce68bdf1f98740f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=33b923fd44c5c5925e635815fce68bdf1f98740f", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n #![doc(html_logo_url = \"https://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n-      html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+       html_favicon_url = \"https://doc.rust-lang.org/favicon.ico\",\n+       html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n \n #![feature(crate_visibility_modifier)]\n #![cfg_attr(not(stage0), feature(nll))]\n@@ -2175,14 +2175,26 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n         debug!(\"(resolving item) resolving {}\", name);\n \n         match item.node {\n-            ItemKind::Enum(_, ref generics) |\n             ItemKind::Ty(_, ref generics) |\n-            ItemKind::Existential(_, ref generics) |\n-            ItemKind::Struct(_, ref generics) |\n-            ItemKind::Union(_, ref generics) |\n-            ItemKind::Fn(_, _, ref generics, _) => {\n+            ItemKind::Fn(_, _, ref generics, _) |\n+            ItemKind::Existential(_, ref generics) => {\n                 self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind),\n-                                         |this| visit::walk_item(this, item));\n+                                             |this| visit::walk_item(this, item));\n+            }\n+\n+            ItemKind::Enum(_, ref generics) |\n+            ItemKind::Struct(_, ref generics) |\n+            ItemKind::Union(_, ref generics) => {\n+                self.with_type_parameter_rib(HasTypeParameters(generics, ItemRibKind), |this| {\n+                    let item_def_id = this.definitions.local_def_id(item.id);\n+                    if this.session.features_untracked().self_in_typedefs {\n+                        this.with_self_rib(Def::SelfTy(None, Some(item_def_id)), |this| {\n+                            visit::walk_item(this, item);\n+                        });\n+                    } else {\n+                        visit::walk_item(this, item);\n+                    }\n+                });\n             }\n \n             ItemKind::Impl(.., ref generics, ref opt_trait_ref, ref self_type, ref impl_items) =>\n@@ -2470,13 +2482,14 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     let item_def_id = this.definitions.local_def_id(item_id);\n                     this.with_self_rib(Def::SelfTy(trait_id, Some(item_def_id)), |this| {\n                         if let Some(trait_ref) = opt_trait_reference.as_ref() {\n-                            // Resolve type arguments in trait path\n+                            // Resolve type arguments in the trait path.\n                             visit::walk_trait_ref(this, trait_ref);\n                         }\n                         // Resolve the self type.\n                         this.visit_ty(self_type);\n                         // Resolve the type parameters.\n                         this.visit_generics(generics);\n+                        // Resolve the items within the impl.\n                         this.with_current_self_type(self_type, |this| {\n                             for impl_item in impl_items {\n                                 this.resolve_visibility(&impl_item.vis);\n@@ -2491,8 +2504,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                             // If this is a trait impl, ensure the const\n                                             // exists in trait\n                                             this.check_trait_item(impl_item.ident,\n-                                                                ValueNS,\n-                                                                impl_item.span,\n+                                                                  ValueNS,\n+                                                                  impl_item.span,\n                                                 |n, s| ConstNotMemberOfTrait(n, s));\n                                             this.with_constant_rib(|this|\n                                                 visit::walk_impl_item(this, impl_item)\n@@ -2502,8 +2515,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                             // If this is a trait impl, ensure the method\n                                             // exists in trait\n                                             this.check_trait_item(impl_item.ident,\n-                                                                ValueNS,\n-                                                                impl_item.span,\n+                                                                  ValueNS,\n+                                                                  impl_item.span,\n                                                 |n, s| MethodNotMemberOfTrait(n, s));\n \n                                             visit::walk_impl_item(this, impl_item);\n@@ -2512,8 +2525,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                             // If this is a trait impl, ensure the type\n                                             // exists in trait\n                                             this.check_trait_item(impl_item.ident,\n-                                                                TypeNS,\n-                                                                impl_item.span,\n+                                                                  TypeNS,\n+                                                                  impl_item.span,\n                                                 |n, s| TypeNotMemberOfTrait(n, s));\n \n                                             this.visit_ty(ty);\n@@ -2522,8 +2535,8 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                                             // If this is a trait impl, ensure the type\n                                             // exists in trait\n                                             this.check_trait_item(impl_item.ident,\n-                                                                TypeNS,\n-                                                                impl_item.span,\n+                                                                  TypeNS,\n+                                                                  impl_item.span,\n                                                 |n, s| TypeNotMemberOfTrait(n, s));\n \n                                             for bound in bounds {\n@@ -2948,7 +2961,12 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             if is_self_type(path, ns) {\n                 __diagnostic_used!(E0411);\n                 err.code(DiagnosticId::Error(\"E0411\".into()));\n-                err.span_label(span, \"`Self` is only available in traits and impls\");\n+                let available_in = if this.session.features_untracked().self_in_typedefs {\n+                    \"impls, traits, and type definitions\"\n+                } else {\n+                    \"traits and impls\"\n+                };\n+                err.span_label(span, format!(\"`Self` is only available in {}\", available_in));\n                 return (err, Vec::new());\n             }\n             if is_self_value(path, ns) {"}, {"sha": "3b9e1b3c26566ad5ead181e1229d2842f01ae443", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/33b923fd44c5c5925e635815fce68bdf1f98740f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b923fd44c5c5925e635815fce68bdf1f98740f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=33b923fd44c5c5925e635815fce68bdf1f98740f", "patch": "@@ -127,7 +127,7 @@ declare_features! (\n     (active, thread_local, \"1.0.0\", Some(29594), None),\n     (active, trace_macros, \"1.0.0\", Some(29598), None),\n \n-    // rustc internal, for now:\n+    // rustc internal, for now\n     (active, intrinsics, \"1.0.0\", None, None),\n     (active, lang_items, \"1.0.0\", None, None),\n     (active, format_args_nl, \"1.29.0\", None, None),\n@@ -157,6 +157,7 @@ declare_features! (\n     (active, optin_builtin_traits, \"1.0.0\", Some(13231), None),\n \n     // Allows use of #[staged_api]\n+    //\n     // rustc internal\n     (active, staged_api, \"1.0.0\", None, None),\n \n@@ -234,24 +235,25 @@ declare_features! (\n     // Allows associated type defaults\n     (active, associated_type_defaults, \"1.2.0\", Some(29661), None),\n \n-    // allow `repr(simd)`, and importing the various simd intrinsics\n+    // Allows `repr(simd)`, and importing the various simd intrinsics\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n \n-    // allow `extern \"platform-intrinsic\" { ... }`\n+    // Allows `extern \"platform-intrinsic\" { ... }`\n     (active, platform_intrinsics, \"1.4.0\", Some(27731), None),\n \n-    // allow `#[unwind(..)]`\n+    // Allows `#[unwind(..)]`\n     // rustc internal for rust runtime\n     (active, unwind_attributes, \"1.4.0\", None, None),\n \n-    // allow the use of `#[naked]` on functions.\n+    // Allows the use of `#[naked]` on functions.\n     (active, naked_functions, \"1.9.0\", Some(32408), None),\n \n-    // allow `#[no_debug]`\n+    // Allows `#[no_debug]`\n     (active, no_debug, \"1.5.0\", Some(29721), None),\n \n-    // allow `#[omit_gdb_pretty_printer_section]`\n-    // rustc internal.\n+    // Allows `#[omit_gdb_pretty_printer_section]`\n+    //\n+    // rustc internal\n     (active, omit_gdb_pretty_printer_section, \"1.5.0\", None, None),\n \n     // Allows cfg(target_vendor = \"...\").\n@@ -281,10 +283,10 @@ declare_features! (\n     // The `!` type. Does not imply exhaustive_patterns (below) any more.\n     (active, never_type, \"1.13.0\", Some(35121), None),\n \n-    // Allows exhaustive pattern matching on types that contain uninhabited types.\n+    // Allows exhaustive pattern matching on types that contain uninhabited types\n     (active, exhaustive_patterns, \"1.13.0\", Some(51085), None),\n \n-    // Allows all literals in attribute lists and values of key-value pairs.\n+    // Allows all literals in attribute lists and values of key-value pairs\n     (active, attr_literals, \"1.13.0\", Some(34981), None),\n \n     // Allows untagged unions `union U { ... }`\n@@ -321,6 +323,7 @@ declare_features! (\n     (active, sanitizer_runtime, \"1.17.0\", None, None),\n \n     // Used to identify crates that contain the profiler runtime\n+    //\n     // rustc internal\n     (active, profiler_runtime, \"1.18.0\", None, None),\n \n@@ -378,7 +381,7 @@ declare_features! (\n     // extern types\n     (active, extern_types, \"1.23.0\", Some(43467), None),\n \n-    // Allow trait methods with arbitrary self types\n+    // Allows trait methods with arbitrary self types\n     (active, arbitrary_self_types, \"1.23.0\", Some(44874), None),\n \n     // `crate` in paths\n@@ -387,7 +390,7 @@ declare_features! (\n     // In-band lifetime bindings (e.g. `fn foo(x: &'a u8) -> &'a u8`)\n     (active, in_band_lifetimes, \"1.23.0\", Some(44524), None),\n \n-    // generic associated types (RFC 1598)\n+    // Generic associated types (RFC 1598)\n     (active, generic_associated_types, \"1.23.0\", Some(44265), None),\n \n     // Resolve absolute paths as paths from other crates\n@@ -462,7 +465,7 @@ declare_features! (\n     // Scoped lints\n     (active, tool_lints, \"1.28.0\", Some(44690), None),\n \n-    // allow irrefutable patterns in if-let and while-let statements (RFC 2086)\n+    // Allows irrefutable patterns in if-let and while-let statements (RFC 2086)\n     (active, irrefutable_let_patterns, \"1.27.0\", Some(44495), None),\n \n     // Allows use of the :literal macro fragment specifier (RFC 1576)\n@@ -492,11 +495,14 @@ declare_features! (\n     // impl Debug for Foo<'_>\n     (active, impl_header_lifetime_elision, \"1.30.0\", Some(15872), Some(Edition::Edition2018)),\n \n-    // Support for arbitrary delimited token streams in non-macro attributes.\n+    // Support for arbitrary delimited token streams in non-macro attributes\n     (active, unrestricted_attribute_tokens, \"1.30.0\", Some(44690), None),\n \n-    // Allows `use x::y;` to resolve through `self::x`, not just `::x`.\n+    // Allows `use x::y;` to resolve through `self::x`, not just `::x`\n     (active, uniform_paths, \"1.30.0\", Some(53130), None),\n+\n+    // Allows `Self` in type definitions\n+    (active, self_in_typedefs, \"1.30.0\", Some(49303), None),\n );\n \n declare_features! ("}, {"sha": "d262e8c60a18eb6400c5b1bc4c15ff88959964c3", "filename": "src/test/run-pass/self-in-typedefs.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/33b923fd44c5c5925e635815fce68bdf1f98740f/src%2Ftest%2Frun-pass%2Fself-in-typedefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b923fd44c5c5925e635815fce68bdf1f98740f/src%2Ftest%2Frun-pass%2Fself-in-typedefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-in-typedefs.rs?ref=33b923fd44c5c5925e635815fce68bdf1f98740f", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(self_in_typedefs)]\n+#![feature(untagged_unions)]\n+\n+#![allow(dead_code)]\n+\n+enum A<'a, T: 'a>\n+where\n+    Self: Send, T: PartialEq<Self>\n+{\n+    Foo(&'a Self),\n+    Bar(T),\n+}\n+\n+struct B<'a, T: 'a>\n+where\n+    Self: Send, T: PartialEq<Self>\n+{\n+    foo: &'a Self,\n+    bar: T,\n+}\n+\n+union C<'a, T: 'a>\n+where\n+    Self: Send, T: PartialEq<Self>\n+{\n+    foo: &'a Self,\n+    bar: T,\n+}\n+\n+fn main() {}"}, {"sha": "4b476a0a645b1541900a37d9536985c75ceb5e98", "filename": "src/test/ui/feature-gates/feature-gate-self-in-typedefs.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/33b923fd44c5c5925e635815fce68bdf1f98740f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-in-typedefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b923fd44c5c5925e635815fce68bdf1f98740f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-in-typedefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-in-typedefs.rs?ref=33b923fd44c5c5925e635815fce68bdf1f98740f", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum StackList<'a, T: 'a> {\n+    Nil,\n+    Cons(T, &'a Self)\n+    //~^ ERROR cannot find type `Self` in this scope\n+    //~| `Self` is only available in traits and impls\n+}\n+\n+fn main() {}"}, {"sha": "c3f9abd90a7f1bffdb2d1e9a2a0b7b54df07a47a", "filename": "src/test/ui/feature-gates/feature-gate-self-in-typedefs.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33b923fd44c5c5925e635815fce68bdf1f98740f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-in-typedefs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33b923fd44c5c5925e635815fce68bdf1f98740f/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-in-typedefs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-self-in-typedefs.stderr?ref=33b923fd44c5c5925e635815fce68bdf1f98740f", "patch": "@@ -0,0 +1,9 @@\n+error[E0411]: cannot find type `Self` in this scope\n+  --> $DIR/feature-gate-self-in-typedefs.rs:13:17\n+   |\n+LL |     Cons(T, &'a Self)\n+   |                 ^^^^ `Self` is only available in traits and impls\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0411`."}]}