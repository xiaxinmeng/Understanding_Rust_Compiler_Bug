{"sha": "7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMzQ0NGUxYmFmMGQzMzViNGJmMzc5Zjg0NWRiYzI4Y2RkMDUwOWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-26T18:26:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-26T18:26:03Z"}, "message": "Auto merge of #49513 - nox:univariant-fieldless-enum-as-zst, r=eddyb\n\nTreat repr(Rust) univariant fieldless enums as ZSTs\n\nThis makes all those enums be represented the same way:\n\n```rust\nenum A1 {\u00a0B1 }\nenum A2 { B2 = 0 }\nenum A3 { B3, C3(!) }\n```\n\nRelated to #15747.\n\nCc @rust-lang/wg-codegen @rust-lang/lang", "tree": {"sha": "d622c175eba7e36229cd0d3cc985ce29a8f0f72c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d622c175eba7e36229cd0d3cc985ce29a8f0f72c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "html_url": "https://github.com/rust-lang/rust/commit/7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "949010d23e9f7037a8e6f323588873b3d2438fb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/949010d23e9f7037a8e6f323588873b3d2438fb1", "html_url": "https://github.com/rust-lang/rust/commit/949010d23e9f7037a8e6f323588873b3d2438fb1"}, {"sha": "1c09977c9a1aa344c52ddf44ebd42bacd876274b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c09977c9a1aa344c52ddf44ebd42bacd876274b", "html_url": "https://github.com/rust-lang/rust/commit/1c09977c9a1aa344c52ddf44ebd42bacd876274b"}], "stats": {"total": 131, "additions": 116, "deletions": 15}, "files": [{"sha": "ef2a424662828fba87d7c584d47e6f2fe815bc57", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "patch": "@@ -727,11 +727,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     // Only one variant is inhabited.\n                     (inh_second.is_none() &&\n                     // Representation optimizations are allowed.\n-                     !def.repr.inhibit_enum_layout_opt() &&\n-                    // Inhabited variant either has data ...\n-                     (!variants[inh_first.unwrap()].is_empty() ||\n-                    // ... or there other, uninhabited, variants.\n-                      variants.len() > 1));\n+                     !def.repr.inhibit_enum_layout_opt());\n                 if is_struct {\n                     // Struct, or univariant enum equivalent to a struct.\n                     // (Typechecking will reject discriminant-sizing attrs.)\n@@ -765,6 +761,9 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                     return Ok(tcx.intern_layout(st));\n                 }\n \n+                // The current code for niche-filling relies on variant indices\n+                // instead of actual discriminants, so dataful enums with\n+                // explicit discriminants (RFC #2363) would misbehave.\n                 let no_explicit_discriminants = def.variants.iter().enumerate()\n                     .all(|(i, v)| v.discr == ty::VariantDiscr::Relative(i));\n "}, {"sha": "4b57c6415469ffcf829a34ff9408c70074c1b214", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "patch": "@@ -671,6 +671,23 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n                                 (Value::ByVal(_), _) => bug!(\"expected fat ptr\"),\n                             }\n                         } else {\n+                            let src_layout = self.layout_of(src.ty)?;\n+                            match src_layout.variants {\n+                                layout::Variants::Single { index } => {\n+                                    if let Some(def) = src.ty.ty_adt_def() {\n+                                        let discr_val = def\n+                                            .discriminant_for_variant(*self.tcx, index)\n+                                            .val;\n+                                        return self.write_primval(\n+                                            dest,\n+                                            PrimVal::Bytes(discr_val),\n+                                            dest_ty);\n+                                    }\n+                                }\n+                                layout::Variants::Tagged { .. } |\n+                                layout::Variants::NicheFilling { .. } => {},\n+                            }\n+\n                             let src_val = self.value_to_primval(src)?;\n                             let dest_val = self.cast_primval(src_val, src.ty, dest_ty)?;\n                             let valty = ValTy {\n@@ -852,10 +869,16 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     ) -> EvalResult<'tcx, u128> {\n         let layout = self.layout_of(ty)?;\n         trace!(\"read_discriminant_value {:#?}\", layout);\n+        if layout.abi == layout::Abi::Uninhabited {\n+            return Ok(0);\n+        }\n \n         match layout.variants {\n             layout::Variants::Single { index } => {\n-                return Ok(index as u128);\n+                let discr_val = ty.ty_adt_def().map_or(\n+                    index as u128,\n+                    |def| def.discriminant_for_variant(*self.tcx, index).val);\n+                return Ok(discr_val);\n             }\n             layout::Variants::Tagged { .. } |\n             layout::Variants::NicheFilling { .. } => {},\n@@ -1318,6 +1341,15 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n     pub fn try_read_value(&self, ptr: Pointer, ptr_align: Align, ty: Ty<'tcx>) -> EvalResult<'tcx, Option<Value>> {\n         use syntax::ast::FloatTy;\n \n+        let layout = self.layout_of(ty)?;\n+        // do the strongest layout check of the two\n+        let align = layout.align.max(ptr_align);\n+        self.memory.check_align(ptr, align)?;\n+\n+        if layout.size.bytes() == 0 {\n+            return Ok(Some(Value::ByVal(PrimVal::Undef)));\n+        }\n+\n         let ptr = ptr.to_ptr()?;\n         let val = match ty.sty {\n             ty::TyBool => {"}, {"sha": "42cb149d68221ed11f8cf5469b37df9f7e4eac05", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "patch": "@@ -136,6 +136,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 let val = [a, b][field_index];\n                 Ok(Some((Value::ByVal(val), field.ty)))\n             },\n+            // FIXME(oli-obk): figure out whether we should be calling `try_read_value` here\n             _ => Ok(None),\n         }\n     }"}, {"sha": "b8b0c019ca6063ab424eaae872f0ecca4b56d148", "filename": "src/librustc_trans/mir/place.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Flibrustc_trans%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Flibrustc_trans%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fplace.rs?ref=7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "patch": "@@ -16,7 +16,7 @@ use rustc::mir::tcx::PlaceTy;\n use rustc_data_structures::indexed_vec::Idx;\n use base;\n use builder::Builder;\n-use common::{CodegenCx, C_usize, C_u8, C_u32, C_uint, C_int, C_null, C_uint_big};\n+use common::{CodegenCx, C_undef, C_usize, C_u8, C_u32, C_uint, C_null, C_uint_big};\n use consts;\n use type_of::LayoutLlvmExt;\n use type_::Type;\n@@ -264,9 +264,15 @@ impl<'a, 'tcx> PlaceRef<'tcx> {\n     /// Obtain the actual discriminant of a value.\n     pub fn trans_get_discr(self, bx: &Builder<'a, 'tcx>, cast_to: Ty<'tcx>) -> ValueRef {\n         let cast_to = bx.cx.layout_of(cast_to).immediate_llvm_type(bx.cx);\n+        if self.layout.abi == layout::Abi::Uninhabited {\n+            return C_undef(cast_to);\n+        }\n         match self.layout.variants {\n             layout::Variants::Single { index } => {\n-                return C_uint(cast_to, index as u64);\n+                let discr_val = self.layout.ty.ty_adt_def().map_or(\n+                    index as u128,\n+                    |def| def.discriminant_for_variant(bx.cx.tcx, index).val);\n+                return C_uint_big(cast_to, discr_val);\n             }\n             layout::Variants::Tagged { .. } |\n             layout::Variants::NicheFilling { .. } => {},\n@@ -328,9 +334,11 @@ impl<'a, 'tcx> PlaceRef<'tcx> {\n                 let ptr = self.project_field(bx, 0);\n                 let to = self.layout.ty.ty_adt_def().unwrap()\n                     .discriminant_for_variant(bx.tcx(), variant_index)\n-                    .val as u64;\n-                bx.store(C_int(ptr.layout.llvm_type(bx.cx), to as i64),\n-                    ptr.llval, ptr.align);\n+                    .val;\n+                bx.store(\n+                    C_uint_big(ptr.layout.llvm_type(bx.cx), to),\n+                    ptr.llval,\n+                    ptr.align);\n             }\n             layout::Variants::NicheFilling {\n                 dataful_variant,"}, {"sha": "c932777402eb842ec4a61e72c0a3e30ea0e6a7f6", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "patch": "@@ -22,7 +22,7 @@ use base;\n use builder::Builder;\n use callee;\n use common::{self, val_ty};\n-use common::{C_bool, C_u8, C_i32, C_u32, C_u64, C_null, C_usize, C_uint, C_uint_big};\n+use common::{C_bool, C_u8, C_i32, C_u32, C_u64, C_undef, C_null, C_usize, C_uint, C_uint_big};\n use consts;\n use monomorphize;\n use type_::Type;\n@@ -267,11 +267,33 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                     }\n                     mir::CastKind::Misc => {\n                         assert!(cast.is_llvm_immediate());\n+                        let ll_t_out = cast.immediate_llvm_type(bx.cx);\n+                        if operand.layout.abi == layout::Abi::Uninhabited {\n+                            return (bx, OperandRef {\n+                                val: OperandValue::Immediate(C_undef(ll_t_out)),\n+                                layout: cast,\n+                            });\n+                        }\n                         let r_t_in = CastTy::from_ty(operand.layout.ty)\n                             .expect(\"bad input type for cast\");\n                         let r_t_out = CastTy::from_ty(cast.ty).expect(\"bad output type for cast\");\n                         let ll_t_in = operand.layout.immediate_llvm_type(bx.cx);\n-                        let ll_t_out = cast.immediate_llvm_type(bx.cx);\n+                        match operand.layout.variants {\n+                            layout::Variants::Single { index } => {\n+                                if let Some(def) = operand.layout.ty.ty_adt_def() {\n+                                    let discr_val = def\n+                                        .discriminant_for_variant(bx.cx.tcx, index)\n+                                        .val;\n+                                    let discr = C_uint_big(ll_t_out, discr_val);\n+                                    return (bx, OperandRef {\n+                                        val: OperandValue::Immediate(discr),\n+                                        layout: cast,\n+                                    });\n+                                }\n+                            }\n+                            layout::Variants::Tagged { .. } |\n+                            layout::Variants::NicheFilling { .. } => {},\n+                        }\n                         let llval = operand.immediate();\n \n                         let mut signed = false;"}, {"sha": "2dbac8e3d9eac0cff654f54edffbc4ec311f5af8", "filename": "src/test/debuginfo/c-style-enum.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs?ref=7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "patch": "@@ -151,6 +151,7 @@ enum ManualDiscriminant {\n }\n \n #[derive(Copy, Clone)]\n+#[repr(u8)]\n enum SingleVariant {\n     TheOnlyVariant\n }"}, {"sha": "5989b7e9c6ad8bc749095eda3fdecb3aec7cf2cc", "filename": "src/test/run-pass/issue-23304-2.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Ftest%2Frun-pass%2Fissue-23304-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Ftest%2Frun-pass%2Fissue-23304-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23304-2.rs?ref=7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "patch": "@@ -10,8 +10,13 @@\n \n #![allow(dead_code)]\n \n-enum X { A = 0 as isize }\n+enum X { A = 42 as isize }\n \n enum Y { A = X::A as isize }\n \n-fn main() { }\n+fn main() {\n+    let x = X::A;\n+    let x = x as isize;\n+    assert_eq!(x, 42);\n+    assert_eq!(Y::A as isize, 42);\n+}"}, {"sha": "a47f082b9c3ee8baa53644f840bc9b8b635c8cc0", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3444e1baf0d335b4bf379f845dbc28cdd0509c/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=7f3444e1baf0d335b4bf379f845dbc28cdd0509c", "patch": "@@ -43,6 +43,31 @@ enum ReorderedEnum {\n     B(u8, u16, u8),\n }\n \n+enum EnumEmpty {}\n+\n+enum EnumSingle1 {\n+    A,\n+}\n+\n+enum EnumSingle2 {\n+    A = 42 as isize,\n+}\n+\n+enum EnumSingle3 {\n+    A,\n+    B(!),\n+}\n+\n+#[repr(u8)]\n+enum EnumSingle4 {\n+    A,\n+}\n+\n+#[repr(u8)]\n+enum EnumSingle5 {\n+    A = 42 as u8,\n+}\n+\n enum NicheFilledEnumWithInhabitedVariant {\n     A(&'static ()),\n     B(&'static (), !),\n@@ -74,5 +99,13 @@ pub fn main() {\n     assert_eq!(size_of::<e3>(), 4 as usize);\n     assert_eq!(size_of::<ReorderedStruct>(), 4);\n     assert_eq!(size_of::<ReorderedEnum>(), 6);\n+\n+    assert_eq!(size_of::<EnumEmpty>(), 0);\n+    assert_eq!(size_of::<EnumSingle1>(), 0);\n+    assert_eq!(size_of::<EnumSingle2>(), 0);\n+    assert_eq!(size_of::<EnumSingle3>(), 0);\n+    assert_eq!(size_of::<EnumSingle4>(), 1);\n+    assert_eq!(size_of::<EnumSingle5>(), 1);\n+\n     assert_eq!(size_of::<NicheFilledEnumWithInhabitedVariant>(), size_of::<&'static ()>());\n }"}]}