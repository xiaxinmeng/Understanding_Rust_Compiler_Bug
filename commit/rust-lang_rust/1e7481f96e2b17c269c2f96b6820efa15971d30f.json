{"sha": "1e7481f96e2b17c269c2f96b6820efa15971d30f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlNzQ4MWY5NmUyYjE3YzI2OWMyZjk2YjY4MjBlZmExNTk3MWQzMGY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-10T15:26:59Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-02-10T15:26:59Z"}, "message": "remove a hack that is now useless", "tree": {"sha": "678d761ac44b7aabb1f319fb7d3f6e5fbcb8fc66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/678d761ac44b7aabb1f319fb7d3f6e5fbcb8fc66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e7481f96e2b17c269c2f96b6820efa15971d30f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e7481f96e2b17c269c2f96b6820efa15971d30f", "html_url": "https://github.com/rust-lang/rust/commit/1e7481f96e2b17c269c2f96b6820efa15971d30f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e7481f96e2b17c269c2f96b6820efa15971d30f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b86d30594fe03858416139a940262d2277f53a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b86d30594fe03858416139a940262d2277f53a0", "html_url": "https://github.com/rust-lang/rust/commit/0b86d30594fe03858416139a940262d2277f53a0"}], "stats": {"total": 10, "additions": 0, "deletions": 10}, "files": [{"sha": "f3f8c3fde0cc4859be1a380b9bf024697431fa89", "filename": "src/lvalue.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e7481f96e2b17c269c2f96b6820efa15971d30f/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e7481f96e2b17c269c2f96b6820efa15971d30f/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=1e7481f96e2b17c269c2f96b6820efa15971d30f", "patch": "@@ -116,16 +116,6 @@ impl<'tcx> Global<'tcx> {\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     pub(super) fn eval_and_read_lvalue(&mut self, lvalue: &mir::Lvalue<'tcx>) -> EvalResult<'tcx, Value> {\n-        if let mir::Lvalue::Projection(ref proj) = *lvalue {\n-            if let mir::Lvalue::Local(index) = proj.base {\n-                if let Value::ByValPair(a, b) = self.frame().get_local(index, None) {\n-                    if let mir::ProjectionElem::Field(ref field, _) = proj.elem {\n-                        let val = [a, b][field.index()];\n-                        return Ok(Value::ByVal(val));\n-                    }\n-                }\n-            }\n-        }\n         let lvalue = self.eval_lvalue(lvalue)?;\n         Ok(self.read_lvalue(lvalue))\n     }"}]}