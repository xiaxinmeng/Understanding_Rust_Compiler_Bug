{"sha": "91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "node_id": "C_kwDOAAsO6NoAKDkxNDk2YzJhYzZhYmY2NDU0YzQxM2JiMjNlOGJlY2Y2YjZkYzIwZWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-21T10:23:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-10-21T10:23:11Z"}, "message": "Auto merge of #7853 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "363a30b1297b875be683a11d20e93a5ce0dce73d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/363a30b1297b875be683a11d20e93a5ce0dce73d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "html_url": "https://github.com/rust-lang/rust/commit/91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "535262cc8cc29c82694286760ce5cbe3420b9e35", "url": "https://api.github.com/repos/rust-lang/rust/commits/535262cc8cc29c82694286760ce5cbe3420b9e35", "html_url": "https://github.com/rust-lang/rust/commit/535262cc8cc29c82694286760ce5cbe3420b9e35"}, {"sha": "8e48333bf19218fef59cf1e998ac3704033fc5dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e48333bf19218fef59cf1e998ac3704033fc5dd", "html_url": "https://github.com/rust-lang/rust/commit/8e48333bf19218fef59cf1e998ac3704033fc5dd"}], "stats": {"total": 941, "additions": 316, "deletions": 625}, "files": [{"sha": "3b4c687209e11dfa8ebb9454ad8c4af571a9677f", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -1873,10 +1873,10 @@ Released 2019-01-17\n \n [2e26fdc2...b2601be](https://github.com/rust-lang/rust-clippy/compare/2e26fdc2...b2601be)\n \n-* New lints: [`slow_vector_initialization`], [`mem_discriminant_non_enum`],\n+* New lints: [`slow_vector_initialization`], `mem_discriminant_non_enum`,\n   [`redundant_clone`], [`wildcard_dependencies`],\n   [`into_iter_on_ref`], `into_iter_on_array`, [`deprecated_cfg_attr`],\n-  [`mem_discriminant_non_enum`], [`cargo_common_metadata`]\n+  [`cargo_common_metadata`]\n * Add support for `u128` and `i128` to integer related lints\n * Add float support to `mistyped_literal_suffixes`\n * Fix false positives in `use_self`\n@@ -2842,7 +2842,6 @@ Released 2018-09-13\n [`match_wild_err_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_wild_err_arm\n [`match_wildcard_for_single_variants`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants\n [`maybe_infinite_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#maybe_infinite_iter\n-[`mem_discriminant_non_enum`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_discriminant_non_enum\n [`mem_forget`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_forget\n [`mem_replace_option_with_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_option_with_none\n [`mem_replace_with_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default"}, {"sha": "ed7fb1440139f7d199f5632cb54525633c0d48a1", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.57\"\n+version = \"0.1.58\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "aaf9ac83d49005dad0df8a05de2dc7818dcedd06", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.57\"\n+version = \"0.1.58\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "8abf10c0d1c2d174b1380b5a3c01d5ef5b17d3ee", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{Block, Expr, ExprKind, HirId};\n-use rustc_lint::{LateContext, LateLintPass};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{source_map::Span, symbol::Symbol, BytePos};\n@@ -432,10 +432,11 @@ fn emit_branches_sharing_code_lint(\n     let mut add_expr_note = false;\n \n     // Construct suggestions\n+    let sm = cx.sess().source_map();\n     if start_stmts > 0 {\n         let block = blocks[0];\n         let span_start = first_line_of_span(cx, if_expr.span).shrink_to_lo();\n-        let span_end = block.stmts[start_stmts - 1].span.source_callsite();\n+        let span_end = sm.stmt_span(block.stmts[start_stmts - 1].span, block.span);\n \n         let cond_span = first_line_of_span(cx, if_expr.span).until(block.span);\n         let cond_snippet = reindent_multiline(snippet(cx, cond_span, \"_\"), false, None);\n@@ -454,15 +455,14 @@ fn emit_branches_sharing_code_lint(\n         let span_end = block.span.shrink_to_hi();\n \n         let moved_start = if end_stmts == 0 && block.expr.is_some() {\n-            block.expr.unwrap().span\n+            block.expr.unwrap().span.source_callsite()\n         } else {\n-            block.stmts[block.stmts.len() - end_stmts].span\n-        }\n-        .source_callsite();\n-        let moved_end = block\n-            .expr\n-            .map_or_else(|| block.stmts[block.stmts.len() - 1].span, |expr| expr.span)\n-            .source_callsite();\n+            sm.stmt_span(block.stmts[block.stmts.len() - end_stmts].span, block.span)\n+        };\n+        let moved_end = block.expr.map_or_else(\n+            || sm.stmt_span(block.stmts[block.stmts.len() - 1].span, block.span),\n+            |expr| expr.span.source_callsite(),\n+        );\n \n         let moved_span = moved_start.to(moved_end);\n         let moved_snipped = reindent_multiline(snippet(cx, moved_span, \"_\"), true, None);"}, {"sha": "c22f9d0e170326c79fbdd0df8cc2228b27822aaf", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -89,12 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for UselessFormat {\n     }\n }\n \n-fn span_useless_format(cx: &LateContext<'_>, span: Span, mut sugg: String, mut applicability: Applicability) {\n-    // The callsite span contains the statement semicolon for some reason.\n-    if snippet_with_applicability(cx, span, \"..\", &mut applicability).ends_with(';') {\n-        sugg.push(';');\n-    }\n-\n+fn span_useless_format(cx: &LateContext<'_>, span: Span, sugg: String, applicability: Applicability) {\n     span_lint_and_sugg(\n         cx,\n         USELESS_FORMAT,"}, {"sha": "c949ee23ecc7a94858ce40214e496a881c8a08fd", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -130,7 +130,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(matches::REDUNDANT_PATTERN_MATCHING),\n     LintId::of(matches::SINGLE_MATCH),\n     LintId::of(matches::WILDCARD_IN_OR_PATTERNS),\n-    LintId::of(mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n     LintId::of(mem_replace::MEM_REPLACE_OPTION_WITH_NONE),\n     LintId::of(mem_replace::MEM_REPLACE_WITH_DEFAULT),\n     LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),"}, {"sha": "ff56a6081fb57f8cbc44c08f785b2981900147f4", "filename": "clippy_lints/src/lib.register_correctness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Flib.register_correctness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_correctness.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -37,7 +37,6 @@ store.register_group(true, \"clippy::correctness\", Some(\"clippy_correctness\"), ve\n     LintId::of(loops::NEVER_LOOP),\n     LintId::of(loops::WHILE_IMMUTABLE_CONDITION),\n     LintId::of(match_str_case_mismatch::MATCH_STR_CASE_MISMATCH),\n-    LintId::of(mem_discriminant::MEM_DISCRIMINANT_NON_ENUM),\n     LintId::of(mem_replace::MEM_REPLACE_WITH_UNINIT),\n     LintId::of(methods::CLONE_DOUBLE_REF),\n     LintId::of(methods::ITERATOR_STEP_BY_ZERO),"}, {"sha": "e8dd3708c8ed406dc3f92b6bff81332d49d9757e", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -245,7 +245,6 @@ store.register_lints(&[\n     matches::SINGLE_MATCH_ELSE,\n     matches::WILDCARD_ENUM_MATCH_ARM,\n     matches::WILDCARD_IN_OR_PATTERNS,\n-    mem_discriminant::MEM_DISCRIMINANT_NON_ENUM,\n     mem_forget::MEM_FORGET,\n     mem_replace::MEM_REPLACE_OPTION_WITH_NONE,\n     mem_replace::MEM_REPLACE_WITH_DEFAULT,"}, {"sha": "ed7e827702395dc72336e5f2adaf24709324e6ac", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -268,7 +268,6 @@ mod match_on_vec_items;\n mod match_result_ok;\n mod match_str_case_mismatch;\n mod matches;\n-mod mem_discriminant;\n mod mem_forget;\n mod mem_replace;\n mod methods;\n@@ -606,7 +605,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let doc_valid_idents = conf.doc_valid_idents.iter().cloned().collect::<FxHashSet<_>>();\n     store.register_late_pass(move || Box::new(doc::DocMarkdown::new(doc_valid_idents.clone())));\n     store.register_late_pass(|| Box::new(neg_multiply::NegMultiply));\n-    store.register_late_pass(|| Box::new(mem_discriminant::MemDiscriminant));\n     store.register_late_pass(|| Box::new(mem_forget::MemForget));\n     store.register_late_pass(|| Box::new(arithmetic::Arithmetic::default()));\n     store.register_late_pass(|| Box::new(assign_ops::AssignOps));\n@@ -861,6 +859,7 @@ pub fn register_renamed(ls: &mut rustc_lint::LintStore) {\n     ls.register_renamed(\"clippy::panic_params\", \"non_fmt_panics\");\n     ls.register_renamed(\"clippy::unknown_clippy_lints\", \"unknown_lints\");\n     ls.register_renamed(\"clippy::invalid_atomic_ordering\", \"invalid_atomic_ordering\");\n+    ls.register_renamed(\"clippy::mem_discriminant_non_enum\", \"enum_intrinsics_non_enums\");\n }\n \n // only exists to let the dogfood integration test works."}, {"sha": "42478e3416ece7a2549529503c03943b25fbaadf", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -98,7 +98,7 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n                 reindent_multiline(or_body_snippet.into(), true, Some(indent));\n \n             let suggestion = if scrutinee.span.from_expansion() {\n-                    // we don't want parenthesis around macro, e.g. `(some_macro!()).unwrap_or(0)`\n+                    // we don't want parentheses around macro, e.g. `(some_macro!()).unwrap_or(0)`\n                     sugg::Sugg::hir_with_macro_callsite(cx, scrutinee, \"..\")\n                 }\n                 else {"}, {"sha": "59176c4b846633caa7fc7a5e0e39162a7fc3916d", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "removed", "additions": 0, "deletions": 82, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/535262cc8cc29c82694286760ce5cbe3420b9e35/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535262cc8cc29c82694286760ce5cbe3420b9e35/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=535262cc8cc29c82694286760ce5cbe3420b9e35", "patch": "@@ -1,82 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::source::snippet;\n-use clippy_utils::ty::walk_ptrs_ty_depth;\n-use clippy_utils::{match_def_path, paths};\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::{BorrowKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Checks for calls of `mem::discriminant()` on a non-enum type.\n-    ///\n-    /// ### Why is this bad?\n-    /// The value of `mem::discriminant()` on non-enum types\n-    /// is unspecified.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// use std::mem;\n-    ///\n-    /// mem::discriminant(&\"hello\");\n-    /// mem::discriminant(&&Some(2));\n-    /// ```\n-    pub MEM_DISCRIMINANT_NON_ENUM,\n-    correctness,\n-    \"calling `mem::descriminant` on non-enum type\"\n-}\n-\n-declare_lint_pass!(MemDiscriminant => [MEM_DISCRIMINANT_NON_ENUM]);\n-\n-impl<'tcx> LateLintPass<'tcx> for MemDiscriminant {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if let ExprKind::Call(func, func_args) = expr.kind;\n-            // is `mem::discriminant`\n-            if let ExprKind::Path(ref func_qpath) = func.kind;\n-            if let Some(def_id) = cx.qpath_res(func_qpath, func.hir_id).opt_def_id();\n-            if match_def_path(cx, def_id, &paths::MEM_DISCRIMINANT);\n-            // type is non-enum\n-            let ty_param = cx.typeck_results().node_substs(func.hir_id).type_at(0);\n-            if !ty_param.is_enum();\n-\n-            then {\n-                span_lint_and_then(\n-                    cx,\n-                    MEM_DISCRIMINANT_NON_ENUM,\n-                    expr.span,\n-                    &format!(\"calling `mem::discriminant` on non-enum type `{}`\", ty_param),\n-                    |diag| {\n-                        // if this is a reference to an enum, suggest dereferencing\n-                        let (base_ty, ptr_depth) = walk_ptrs_ty_depth(ty_param);\n-                        if ptr_depth >= 1 && base_ty.is_enum() {\n-                            let param = &func_args[0];\n-\n-                            // cancel out '&'s first\n-                            let mut derefs_needed = ptr_depth;\n-                            let mut cur_expr = param;\n-                            while derefs_needed > 0  {\n-                                if let ExprKind::AddrOf(BorrowKind::Ref, _, inner_expr) = cur_expr.kind {\n-                                    derefs_needed -= 1;\n-                                    cur_expr = inner_expr;\n-                                } else {\n-                                    break;\n-                                }\n-                            }\n-\n-                            let derefs = \"*\".repeat(derefs_needed);\n-                            diag.span_suggestion(\n-                                param.span,\n-                                \"try dereferencing\",\n-                                format!(\"{}{}\", derefs, snippet(cx, cur_expr.span, \"<param>\")),\n-                                Applicability::MachineApplicable,\n-                            );\n-                        }\n-                    },\n-                )\n-            }\n-        }\n-    }\n-}"}, {"sha": "7aa93ed783920a943ae44caaa23128dbfc4b9990", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -36,9 +36,8 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::source::{indent_of, snippet, snippet_block};\n use rustc_ast::ast;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::Span;\n \n declare_clippy_lint! {\n@@ -270,7 +269,7 @@ struct LintData<'a> {\n     /// The 0-based index of the `if` statement in the containing loop block.\n     stmt_idx: usize,\n     /// The statements of the loop block.\n-    block_stmts: &'a [ast::Stmt],\n+    loop_block: &'a ast::Block,\n }\n \n const MSG_REDUNDANT_CONTINUE_EXPRESSION: &str = \"this `continue` expression is redundant\";\n@@ -343,10 +342,10 @@ fn suggestion_snippet_for_continue_inside_else<'a>(cx: &EarlyContext<'_>, data:\n     let indent = span_of_first_expr_in_block(data.if_block)\n         .and_then(|span| indent_of(cx, span))\n         .unwrap_or(0);\n-    let to_annex = data.block_stmts[data.stmt_idx + 1..]\n+    let to_annex = data.loop_block.stmts[data.stmt_idx + 1..]\n         .iter()\n-        .map(|stmt| original_sp(stmt.span, DUMMY_SP))\n-        .map(|span| {\n+        .map(|stmt| {\n+            let span = cx.sess().source_map().stmt_span(stmt.span, data.loop_block.span);\n             let snip = snippet_block(cx, span, \"..\", None).into_owned();\n             snip.lines()\n                 .map(|line| format!(\"{}{}\", \" \".repeat(indent), line))\n@@ -393,7 +392,7 @@ fn check_and_warn<'a>(cx: &EarlyContext<'_>, expr: &'a ast::Expr) {\n                     if_cond: cond,\n                     if_block: then_block,\n                     else_expr,\n-                    block_stmts: &loop_block.stmts,\n+                    loop_block,\n                 };\n                 if needless_continue_in_else(else_expr, label) {\n                     emit_warning("}, {"sha": "824ec53ab9c75301f822805eaf5cf860fe03ff74", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -770,8 +770,7 @@ impl<'tcx> LateLintPass<'tcx> for MatchTypeOnDiagItem {\n             let segments: Vec<&str> = segments.iter().map(|sym| &**sym).collect();\n             if let Some(ty_did) = path_to_res(cx, &segments[..]).opt_def_id();\n             // Check if the matched type is a diagnostic item\n-            let diag_items = cx.tcx.diagnostic_items(ty_did.krate);\n-            if let Some(item_name) = diag_items.iter().find_map(|(k, v)| if *v == ty_did { Some(k) } else { None });\n+            if let Some(item_name) = cx.tcx.get_diagnostic_name(ty_did);\n             then {\n                 // TODO: check paths constants from external crates.\n                 let cx_snippet = snippet(cx, context.span, \"_\");"}, {"sha": "d99a3d9359e1f439ba973431874f2b2b3c3941d1", "filename": "clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2FCargo.toml?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.57\"\n+version = \"0.1.58\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "60c4cb361aa6c0dfbc2d9ff534ca2569d9e7db18", "filename": "clippy_utils/src/higher.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhigher.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -722,7 +722,6 @@ impl PanicExpn<'tcx> {\n             if let Some(init) = block.expr;\n             if let ExprKind::Call(_, [format_args]) = init.kind;\n             let expn_data = expr.span.ctxt().outer_expn_data();\n-            if let ExprKind::AddrOf(_, _, format_args) = format_args.kind;\n             if let Some(format_args) = FormatArgsExpn::parse(format_args);\n             then {\n                 Some(PanicExpn {"}, {"sha": "9bc380ca6caa6501c526c4edd18b2faa11df4a5c", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -1641,7 +1641,6 @@ pub fn match_panic_def_id(cx: &LateContext<'_>, did: DefId) -> bool {\n         did,\n         &[\n             &paths::BEGIN_PANIC,\n-            &paths::BEGIN_PANIC_FMT,\n             &paths::PANIC_ANY,\n             &paths::PANICKING_PANIC,\n             &paths::PANICKING_PANIC_FMT,"}, {"sha": "501b08a47f161103b9f34b46760ae2502df8d4bc", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -26,7 +26,6 @@ pub const ASSERT_NE_MACRO: [&str; 3] = [\"core\", \"macros\", \"assert_ne\"];\n pub const ASMUT_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsMut\"];\n pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub(super) const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n-pub(super) const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n /// Preferably use the diagnostic item `sym::Borrow` where possible\n pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n pub const BTREEMAP_CONTAINS_KEY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"contains_key\"];"}, {"sha": "01fb944cc36f64dcfd266726ce70bf4aa6ba5418", "filename": "clippy_utils/src/sugg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/clippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fsugg.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -16,10 +16,10 @@ use std::convert::TryInto;\n use std::fmt::Display;\n use std::ops::{Add, Neg, Not, Sub};\n \n-/// A helper type to build suggestion correctly handling parenthesis.\n+/// A helper type to build suggestion correctly handling parentheses.\n #[derive(Clone, PartialEq)]\n pub enum Sugg<'a> {\n-    /// An expression that never needs parenthesis such as `1337` or `[0; 42]`.\n+    /// An expression that never needs parentheses such as `1337` or `[0; 42]`.\n     NonParen(Cow<'a, str>),\n     /// An expression that does not fit in other variants.\n     MaybeParen(Cow<'a, str>),\n@@ -283,7 +283,7 @@ impl<'a> Sugg<'a> {\n         }\n     }\n \n-    /// Adds parenthesis to any expression that might need them. Suitable to the\n+    /// Adds parentheses to any expression that might need them. Suitable to the\n     /// `self` argument of a method call\n     /// (e.g., to build `bar.foo()` or `(1 + 2).foo()`).\n     pub fn maybe_par(self) -> Self {"}, {"sha": "67eaf286004f9515cabbfefe3d889ec4b9c74b3f", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-10-07\"\n+channel = \"nightly-2021-10-21\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "95b8c6dfe89eea23435b45dfd0ae6386ae34367a", "filename": "tests/ui-internal/unnecessary_symbol_str.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui-internal%2Funnecessary_symbol_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui-internal%2Funnecessary_symbol_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_symbol_str.fixed?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -11,6 +11,6 @@ fn main() {\n     Symbol::intern(\"foo\") == rustc_span::sym::clippy;\n     Symbol::intern(\"foo\") == rustc_span::symbol::kw::SelfLower;\n     Symbol::intern(\"foo\") != rustc_span::symbol::kw::SelfUpper;\n-    Ident::invalid().name == rustc_span::sym::clippy;\n-    rustc_span::sym::clippy == Ident::invalid().name;\n+    Ident::empty().name == rustc_span::sym::clippy;\n+    rustc_span::sym::clippy == Ident::empty().name;\n }"}, {"sha": "ad6937cf60a65c71035adde5ff4ea9a6681ce63b", "filename": "tests/ui-internal/unnecessary_symbol_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui-internal%2Funnecessary_symbol_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui-internal%2Funnecessary_symbol_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_symbol_str.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -11,6 +11,6 @@ fn main() {\n     Symbol::intern(\"foo\").as_str() == \"clippy\";\n     Symbol::intern(\"foo\").to_string() == \"self\";\n     Symbol::intern(\"foo\").to_ident_string() != \"Self\";\n-    &*Ident::invalid().as_str() == \"clippy\";\n-    \"clippy\" == Ident::invalid().to_string();\n+    &*Ident::empty().as_str() == \"clippy\";\n+    \"clippy\" == Ident::empty().to_string();\n }"}, {"sha": "12e05eaa7a09ab1070681f50275dbffff46e065d", "filename": "tests/ui-internal/unnecessary_symbol_str.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui-internal%2Funnecessary_symbol_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui-internal%2Funnecessary_symbol_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Funnecessary_symbol_str.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -26,14 +26,14 @@ LL |     Symbol::intern(\"foo\").to_ident_string() != \"Self\";\n error: unnecessary `Symbol` to string conversion\n   --> $DIR/unnecessary_symbol_str.rs:14:5\n    |\n-LL |     &*Ident::invalid().as_str() == \"clippy\";\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Ident::invalid().name == rustc_span::sym::clippy`\n+LL |     &*Ident::empty().as_str() == \"clippy\";\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Ident::empty().name == rustc_span::sym::clippy`\n \n error: unnecessary `Symbol` to string conversion\n   --> $DIR/unnecessary_symbol_str.rs:15:5\n    |\n-LL |     \"clippy\" == Ident::invalid().to_string();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::sym::clippy == Ident::invalid().name`\n+LL |     \"clippy\" == Ident::empty().to_string();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::sym::clippy == Ident::empty().name`\n \n error: aborting due to 5 previous errors\n "}, {"sha": "039b23b1bdb2f28a02e67619cdf4c5eb0b4f194f", "filename": "tests/ui-toml/nonstandard_macro_braces/conf_nonstandard_macro_braces.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fnonstandard_macro_braces%2Fconf_nonstandard_macro_braces.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -82,13 +82,13 @@ error: use of irregular braces for `eprint!` macro\n   --> $DIR/conf_nonstandard_macro_braces.rs:57:5\n    |\n LL |     eprint!(\"test if user config overrides defaults\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: consider writing `eprint![\"test if user config overrides defaults\"];`\n+help: consider writing `eprint![\"test if user config overrides defaults\"]`\n   --> $DIR/conf_nonstandard_macro_braces.rs:57:5\n    |\n LL |     eprint!(\"test if user config overrides defaults\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "409f4db76bc256e1b676a9c41535c699414dc401", "filename": "tests/ui/asm_syntax.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fasm_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fasm_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasm_syntax.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -2,7 +2,7 @@ error: Intel x86 assembly syntax used\n   --> $DIR/asm_syntax.rs:9:9\n    |\n LL |         asm!(\"\");\n-   |         ^^^^^^^^^\n+   |         ^^^^^^^^\n    |\n    = note: `-D clippy::inline-asm-x86-intel-syntax` implied by `-D warnings`\n    = help: use AT&T x86 assembly syntax\n@@ -11,23 +11,23 @@ error: Intel x86 assembly syntax used\n   --> $DIR/asm_syntax.rs:10:9\n    |\n LL |         asm!(\"\", options());\n-   |         ^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use AT&T x86 assembly syntax\n \n error: Intel x86 assembly syntax used\n   --> $DIR/asm_syntax.rs:11:9\n    |\n LL |         asm!(\"\", options(nostack));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use AT&T x86 assembly syntax\n \n error: AT&T x86 assembly syntax used\n   --> $DIR/asm_syntax.rs:23:9\n    |\n LL |         asm!(\"\", options(att_syntax));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::inline-asm-x86-att-syntax` implied by `-D warnings`\n    = help: use Intel x86 assembly syntax\n@@ -36,7 +36,7 @@ error: AT&T x86 assembly syntax used\n   --> $DIR/asm_syntax.rs:24:9\n    |\n LL |         asm!(\"\", options(nostack, att_syntax));\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use Intel x86 assembly syntax\n "}, {"sha": "4ca1e6f6e88cc783cf0b2ecd25d9b0c44ddfea5e", "filename": "tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -2,7 +2,7 @@ error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:11:5\n    |\n LL |     assert!(true);\n-   |     ^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::assertions-on-constants` implied by `-D warnings`\n    = help: remove it\n@@ -12,7 +12,7 @@ error: `assert!(false)` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:12:5\n    |\n LL |     assert!(false);\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n    |\n    = help: use `panic!()` or `unreachable!()`\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -21,7 +21,7 @@ error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:13:5\n    |\n LL |     assert!(true, \"true message\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -30,7 +30,7 @@ error: `assert!(false, \"false message\")` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:14:5\n    |\n LL |     assert!(false, \"false message\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(\"false message\")` or `unreachable!(\"false message\")`\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -39,7 +39,7 @@ error: `assert!(false, msg.to_uppercase())` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:17:5\n    |\n LL |     assert!(false, msg.to_uppercase());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(msg.to_uppercase())` or `unreachable!(msg.to_uppercase())`\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -48,7 +48,7 @@ error: `assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:20:5\n    |\n LL |     assert!(B);\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^\n    |\n    = help: remove it\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -57,7 +57,7 @@ error: `assert!(false)` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:23:5\n    |\n LL |     assert!(C);\n-   |     ^^^^^^^^^^^\n+   |     ^^^^^^^^^^\n    |\n    = help: use `panic!()` or `unreachable!()`\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -66,7 +66,7 @@ error: `assert!(false, \"C message\")` should probably be replaced\n   --> $DIR/assertions_on_constants.rs:24:5\n    |\n LL |     assert!(C, \"C message\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: use `panic!(\"C message\")` or `unreachable!(\"C message\")`\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -75,7 +75,7 @@ error: `debug_assert!(true)` will be optimized out by the compiler\n   --> $DIR/assertions_on_constants.rs:26:5\n    |\n LL |     debug_assert!(true);\n-   |     ^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: remove it\n    = note: this error originates in the macro `$crate::assert` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "377d51be4cde7438cad96c7e5b6cd583a0f3dfbe", "filename": "tests/ui/bool_assert_comparison.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fbool_assert_comparison.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fbool_assert_comparison.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbool_assert_comparison.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -2,135 +2,135 @@ error: used `assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:69:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n    |\n    = note: `-D clippy::bool-assert-comparison` implied by `-D warnings`\n \n error: used `assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:70:5\n    |\n LL |     assert_eq!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:71:5\n    |\n LL |     assert_eq!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:76:5\n    |\n LL |     assert_eq!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:79:5\n    |\n LL |     assert_ne!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:80:5\n    |\n LL |     assert_ne!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:81:5\n    |\n LL |     assert_ne!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:86:5\n    |\n LL |     assert_ne!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:89:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:90:5\n    |\n LL |     debug_assert_eq!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:91:5\n    |\n LL |     debug_assert_eq!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:96:5\n    |\n LL |     debug_assert_eq!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:99:5\n    |\n LL |     debug_assert_ne!(\"a\".is_empty(), false);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:100:5\n    |\n LL |     debug_assert_ne!(\"\".is_empty(), true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:101:5\n    |\n LL |     debug_assert_ne!(true, \"\".is_empty());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_ne!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:106:5\n    |\n LL |     debug_assert_ne!(b, true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:111:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:112:5\n    |\n LL |     assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:113:5\n    |\n LL |     assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:118:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", 1);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:119:5\n    |\n LL |     debug_assert_eq!(\"a\".is_empty(), false, \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: used `debug_assert_eq!` with a literal bool\n   --> $DIR/bool_assert_comparison.rs:120:5\n    |\n LL |     debug_assert_eq!(false, \"a\".is_empty(), \"tadam {}\", true);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `debug_assert!(..)`\n \n error: aborting due to 22 previous errors\n "}, {"sha": "32a9c1c4ae1afee87c8c70a4dde3691d2a58d3fa", "filename": "tests/ui/cast_lossless_float.fixed", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcast_lossless_float.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcast_lossless_float.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.fixed?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -6,24 +6,24 @@\n fn main() {\n     // Test clippy::cast_lossless with casts to floating-point types\n     let x0 = 1i8;\n-    f32::from(x0);\n-    f64::from(x0);\n+    let _ = f32::from(x0);\n+    let _ = f64::from(x0);\n     let x1 = 1u8;\n-    f32::from(x1);\n-    f64::from(x1);\n+    let _ = f32::from(x1);\n+    let _ = f64::from(x1);\n     let x2 = 1i16;\n-    f32::from(x2);\n-    f64::from(x2);\n+    let _ = f32::from(x2);\n+    let _ = f64::from(x2);\n     let x3 = 1u16;\n-    f32::from(x3);\n-    f64::from(x3);\n+    let _ = f32::from(x3);\n+    let _ = f64::from(x3);\n     let x4 = 1i32;\n-    f64::from(x4);\n+    let _ = f64::from(x4);\n     let x5 = 1u32;\n-    f64::from(x5);\n+    let _ = f64::from(x5);\n \n     // Test with casts from floating-point types\n-    f64::from(1.0f32);\n+    let _ = f64::from(1.0f32);\n }\n \n // The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,"}, {"sha": "6f5ddcfe09c8a7e48b73f7e3b0625768522c1737", "filename": "tests/ui/cast_lossless_float.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcast_lossless_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcast_lossless_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -6,24 +6,24 @@\n fn main() {\n     // Test clippy::cast_lossless with casts to floating-point types\n     let x0 = 1i8;\n-    x0 as f32;\n-    x0 as f64;\n+    let _ = x0 as f32;\n+    let _ = x0 as f64;\n     let x1 = 1u8;\n-    x1 as f32;\n-    x1 as f64;\n+    let _ = x1 as f32;\n+    let _ = x1 as f64;\n     let x2 = 1i16;\n-    x2 as f32;\n-    x2 as f64;\n+    let _ = x2 as f32;\n+    let _ = x2 as f64;\n     let x3 = 1u16;\n-    x3 as f32;\n-    x3 as f64;\n+    let _ = x3 as f32;\n+    let _ = x3 as f64;\n     let x4 = 1i32;\n-    x4 as f64;\n+    let _ = x4 as f64;\n     let x5 = 1u32;\n-    x5 as f64;\n+    let _ = x5 as f64;\n \n     // Test with casts from floating-point types\n-    1.0f32 as f64;\n+    let _ = 1.0f32 as f64;\n }\n \n // The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,"}, {"sha": "8326d40be7165285635d228e03ba4b8b4b0125d4", "filename": "tests/ui/cast_lossless_float.stderr", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcast_lossless_float.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcast_lossless_float.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_float.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -1,70 +1,70 @@\n error: casting `i8` to `f32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:9:5\n+  --> $DIR/cast_lossless_float.rs:9:13\n    |\n-LL |     x0 as f32;\n-   |     ^^^^^^^^^ help: try: `f32::from(x0)`\n+LL |     let _ = x0 as f32;\n+   |             ^^^^^^^^^ help: try: `f32::from(x0)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting `i8` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:10:5\n+  --> $DIR/cast_lossless_float.rs:10:13\n    |\n-LL |     x0 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x0)`\n+LL |     let _ = x0 as f64;\n+   |             ^^^^^^^^^ help: try: `f64::from(x0)`\n \n error: casting `u8` to `f32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:12:5\n+  --> $DIR/cast_lossless_float.rs:12:13\n    |\n-LL |     x1 as f32;\n-   |     ^^^^^^^^^ help: try: `f32::from(x1)`\n+LL |     let _ = x1 as f32;\n+   |             ^^^^^^^^^ help: try: `f32::from(x1)`\n \n error: casting `u8` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:13:5\n+  --> $DIR/cast_lossless_float.rs:13:13\n    |\n-LL |     x1 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x1)`\n+LL |     let _ = x1 as f64;\n+   |             ^^^^^^^^^ help: try: `f64::from(x1)`\n \n error: casting `i16` to `f32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:15:5\n+  --> $DIR/cast_lossless_float.rs:15:13\n    |\n-LL |     x2 as f32;\n-   |     ^^^^^^^^^ help: try: `f32::from(x2)`\n+LL |     let _ = x2 as f32;\n+   |             ^^^^^^^^^ help: try: `f32::from(x2)`\n \n error: casting `i16` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:16:5\n+  --> $DIR/cast_lossless_float.rs:16:13\n    |\n-LL |     x2 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x2)`\n+LL |     let _ = x2 as f64;\n+   |             ^^^^^^^^^ help: try: `f64::from(x2)`\n \n error: casting `u16` to `f32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:18:5\n+  --> $DIR/cast_lossless_float.rs:18:13\n    |\n-LL |     x3 as f32;\n-   |     ^^^^^^^^^ help: try: `f32::from(x3)`\n+LL |     let _ = x3 as f32;\n+   |             ^^^^^^^^^ help: try: `f32::from(x3)`\n \n error: casting `u16` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:19:5\n+  --> $DIR/cast_lossless_float.rs:19:13\n    |\n-LL |     x3 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x3)`\n+LL |     let _ = x3 as f64;\n+   |             ^^^^^^^^^ help: try: `f64::from(x3)`\n \n error: casting `i32` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:21:5\n+  --> $DIR/cast_lossless_float.rs:21:13\n    |\n-LL |     x4 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x4)`\n+LL |     let _ = x4 as f64;\n+   |             ^^^^^^^^^ help: try: `f64::from(x4)`\n \n error: casting `u32` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:23:5\n+  --> $DIR/cast_lossless_float.rs:23:13\n    |\n-LL |     x5 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x5)`\n+LL |     let _ = x5 as f64;\n+   |             ^^^^^^^^^ help: try: `f64::from(x5)`\n \n error: casting `f32` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_float.rs:26:5\n+  --> $DIR/cast_lossless_float.rs:26:13\n    |\n-LL |     1.0f32 as f64;\n-   |     ^^^^^^^^^^^^^ help: try: `f64::from(1.0f32)`\n+LL |     let _ = 1.0f32 as f64;\n+   |             ^^^^^^^^^^^^^ help: try: `f64::from(1.0f32)`\n \n error: aborting due to 11 previous errors\n "}, {"sha": "72a708b40737b3932688127ec9b1905901bacb86", "filename": "tests/ui/cast_lossless_integer.fixed", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcast_lossless_integer.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcast_lossless_integer.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.fixed?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -5,27 +5,27 @@\n \n fn main() {\n     // Test clippy::cast_lossless with casts to integer types\n-    i16::from(1i8);\n-    i32::from(1i8);\n-    i64::from(1i8);\n-    i16::from(1u8);\n-    i32::from(1u8);\n-    i64::from(1u8);\n-    u16::from(1u8);\n-    u32::from(1u8);\n-    u64::from(1u8);\n-    i32::from(1i16);\n-    i64::from(1i16);\n-    i32::from(1u16);\n-    i64::from(1u16);\n-    u32::from(1u16);\n-    u64::from(1u16);\n-    i64::from(1i32);\n-    i64::from(1u32);\n-    u64::from(1u32);\n+    let _ = i16::from(1i8);\n+    let _ = i32::from(1i8);\n+    let _ = i64::from(1i8);\n+    let _ = i16::from(1u8);\n+    let _ = i32::from(1u8);\n+    let _ = i64::from(1u8);\n+    let _ = u16::from(1u8);\n+    let _ = u32::from(1u8);\n+    let _ = u64::from(1u8);\n+    let _ = i32::from(1i16);\n+    let _ = i64::from(1i16);\n+    let _ = i32::from(1u16);\n+    let _ = i64::from(1u16);\n+    let _ = u32::from(1u16);\n+    let _ = u64::from(1u16);\n+    let _ = i64::from(1i32);\n+    let _ = i64::from(1u32);\n+    let _ = u64::from(1u32);\n \n     // Test with an expression wrapped in parens\n-    u16::from(1u8 + 1u8);\n+    let _ = u16::from(1u8 + 1u8);\n }\n \n // The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,"}, {"sha": "34bb47181e69deffcf1bfe283ed4557b68d08c4e", "filename": "tests/ui/cast_lossless_integer.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcast_lossless_integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcast_lossless_integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -5,27 +5,27 @@\n \n fn main() {\n     // Test clippy::cast_lossless with casts to integer types\n-    1i8 as i16;\n-    1i8 as i32;\n-    1i8 as i64;\n-    1u8 as i16;\n-    1u8 as i32;\n-    1u8 as i64;\n-    1u8 as u16;\n-    1u8 as u32;\n-    1u8 as u64;\n-    1i16 as i32;\n-    1i16 as i64;\n-    1u16 as i32;\n-    1u16 as i64;\n-    1u16 as u32;\n-    1u16 as u64;\n-    1i32 as i64;\n-    1u32 as i64;\n-    1u32 as u64;\n+    let _ = 1i8 as i16;\n+    let _ = 1i8 as i32;\n+    let _ = 1i8 as i64;\n+    let _ = 1u8 as i16;\n+    let _ = 1u8 as i32;\n+    let _ = 1u8 as i64;\n+    let _ = 1u8 as u16;\n+    let _ = 1u8 as u32;\n+    let _ = 1u8 as u64;\n+    let _ = 1i16 as i32;\n+    let _ = 1i16 as i64;\n+    let _ = 1u16 as i32;\n+    let _ = 1u16 as i64;\n+    let _ = 1u16 as u32;\n+    let _ = 1u16 as u64;\n+    let _ = 1i32 as i64;\n+    let _ = 1u32 as i64;\n+    let _ = 1u32 as u64;\n \n     // Test with an expression wrapped in parens\n-    (1u8 + 1u8) as u16;\n+    let _ = (1u8 + 1u8) as u16;\n }\n \n // The lint would suggest using `f64::from(input)` here but the `XX::from` function is not const,"}, {"sha": "721b94876cb2c6c5305b81c91f2dc3424fa6a2fe", "filename": "tests/ui/cast_lossless_integer.stderr", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcast_lossless_integer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcast_lossless_integer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_lossless_integer.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -1,118 +1,118 @@\n error: casting `i8` to `i16` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:8:5\n+  --> $DIR/cast_lossless_integer.rs:8:13\n    |\n-LL |     1i8 as i16;\n-   |     ^^^^^^^^^^ help: try: `i16::from(1i8)`\n+LL |     let _ = 1i8 as i16;\n+   |             ^^^^^^^^^^ help: try: `i16::from(1i8)`\n    |\n    = note: `-D clippy::cast-lossless` implied by `-D warnings`\n \n error: casting `i8` to `i32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:9:5\n+  --> $DIR/cast_lossless_integer.rs:9:13\n    |\n-LL |     1i8 as i32;\n-   |     ^^^^^^^^^^ help: try: `i32::from(1i8)`\n+LL |     let _ = 1i8 as i32;\n+   |             ^^^^^^^^^^ help: try: `i32::from(1i8)`\n \n error: casting `i8` to `i64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:10:5\n+  --> $DIR/cast_lossless_integer.rs:10:13\n    |\n-LL |     1i8 as i64;\n-   |     ^^^^^^^^^^ help: try: `i64::from(1i8)`\n+LL |     let _ = 1i8 as i64;\n+   |             ^^^^^^^^^^ help: try: `i64::from(1i8)`\n \n error: casting `u8` to `i16` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:11:5\n+  --> $DIR/cast_lossless_integer.rs:11:13\n    |\n-LL |     1u8 as i16;\n-   |     ^^^^^^^^^^ help: try: `i16::from(1u8)`\n+LL |     let _ = 1u8 as i16;\n+   |             ^^^^^^^^^^ help: try: `i16::from(1u8)`\n \n error: casting `u8` to `i32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:12:5\n+  --> $DIR/cast_lossless_integer.rs:12:13\n    |\n-LL |     1u8 as i32;\n-   |     ^^^^^^^^^^ help: try: `i32::from(1u8)`\n+LL |     let _ = 1u8 as i32;\n+   |             ^^^^^^^^^^ help: try: `i32::from(1u8)`\n \n error: casting `u8` to `i64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:13:5\n+  --> $DIR/cast_lossless_integer.rs:13:13\n    |\n-LL |     1u8 as i64;\n-   |     ^^^^^^^^^^ help: try: `i64::from(1u8)`\n+LL |     let _ = 1u8 as i64;\n+   |             ^^^^^^^^^^ help: try: `i64::from(1u8)`\n \n error: casting `u8` to `u16` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:14:5\n+  --> $DIR/cast_lossless_integer.rs:14:13\n    |\n-LL |     1u8 as u16;\n-   |     ^^^^^^^^^^ help: try: `u16::from(1u8)`\n+LL |     let _ = 1u8 as u16;\n+   |             ^^^^^^^^^^ help: try: `u16::from(1u8)`\n \n error: casting `u8` to `u32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:15:5\n+  --> $DIR/cast_lossless_integer.rs:15:13\n    |\n-LL |     1u8 as u32;\n-   |     ^^^^^^^^^^ help: try: `u32::from(1u8)`\n+LL |     let _ = 1u8 as u32;\n+   |             ^^^^^^^^^^ help: try: `u32::from(1u8)`\n \n error: casting `u8` to `u64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:16:5\n+  --> $DIR/cast_lossless_integer.rs:16:13\n    |\n-LL |     1u8 as u64;\n-   |     ^^^^^^^^^^ help: try: `u64::from(1u8)`\n+LL |     let _ = 1u8 as u64;\n+   |             ^^^^^^^^^^ help: try: `u64::from(1u8)`\n \n error: casting `i16` to `i32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:17:5\n+  --> $DIR/cast_lossless_integer.rs:17:13\n    |\n-LL |     1i16 as i32;\n-   |     ^^^^^^^^^^^ help: try: `i32::from(1i16)`\n+LL |     let _ = 1i16 as i32;\n+   |             ^^^^^^^^^^^ help: try: `i32::from(1i16)`\n \n error: casting `i16` to `i64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:18:5\n+  --> $DIR/cast_lossless_integer.rs:18:13\n    |\n-LL |     1i16 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1i16)`\n+LL |     let _ = 1i16 as i64;\n+   |             ^^^^^^^^^^^ help: try: `i64::from(1i16)`\n \n error: casting `u16` to `i32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:19:5\n+  --> $DIR/cast_lossless_integer.rs:19:13\n    |\n-LL |     1u16 as i32;\n-   |     ^^^^^^^^^^^ help: try: `i32::from(1u16)`\n+LL |     let _ = 1u16 as i32;\n+   |             ^^^^^^^^^^^ help: try: `i32::from(1u16)`\n \n error: casting `u16` to `i64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:20:5\n+  --> $DIR/cast_lossless_integer.rs:20:13\n    |\n-LL |     1u16 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1u16)`\n+LL |     let _ = 1u16 as i64;\n+   |             ^^^^^^^^^^^ help: try: `i64::from(1u16)`\n \n error: casting `u16` to `u32` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:21:5\n+  --> $DIR/cast_lossless_integer.rs:21:13\n    |\n-LL |     1u16 as u32;\n-   |     ^^^^^^^^^^^ help: try: `u32::from(1u16)`\n+LL |     let _ = 1u16 as u32;\n+   |             ^^^^^^^^^^^ help: try: `u32::from(1u16)`\n \n error: casting `u16` to `u64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:22:5\n+  --> $DIR/cast_lossless_integer.rs:22:13\n    |\n-LL |     1u16 as u64;\n-   |     ^^^^^^^^^^^ help: try: `u64::from(1u16)`\n+LL |     let _ = 1u16 as u64;\n+   |             ^^^^^^^^^^^ help: try: `u64::from(1u16)`\n \n error: casting `i32` to `i64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:23:5\n+  --> $DIR/cast_lossless_integer.rs:23:13\n    |\n-LL |     1i32 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1i32)`\n+LL |     let _ = 1i32 as i64;\n+   |             ^^^^^^^^^^^ help: try: `i64::from(1i32)`\n \n error: casting `u32` to `i64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:24:5\n+  --> $DIR/cast_lossless_integer.rs:24:13\n    |\n-LL |     1u32 as i64;\n-   |     ^^^^^^^^^^^ help: try: `i64::from(1u32)`\n+LL |     let _ = 1u32 as i64;\n+   |             ^^^^^^^^^^^ help: try: `i64::from(1u32)`\n \n error: casting `u32` to `u64` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:25:5\n+  --> $DIR/cast_lossless_integer.rs:25:13\n    |\n-LL |     1u32 as u64;\n-   |     ^^^^^^^^^^^ help: try: `u64::from(1u32)`\n+LL |     let _ = 1u32 as u64;\n+   |             ^^^^^^^^^^^ help: try: `u64::from(1u32)`\n \n error: casting `u8` to `u16` may become silently lossy if you later change the type\n-  --> $DIR/cast_lossless_integer.rs:28:5\n+  --> $DIR/cast_lossless_integer.rs:28:13\n    |\n-LL |     (1u8 + 1u8) as u16;\n-   |     ^^^^^^^^^^^^^^^^^^ help: try: `u16::from(1u8 + 1u8)`\n+LL |     let _ = (1u8 + 1u8) as u16;\n+   |             ^^^^^^^^^^^^^^^^^^ help: try: `u16::from(1u8 + 1u8)`\n \n error: aborting due to 19 previous errors\n "}, {"sha": "34131592802174733460089058730462605bf25f", "filename": "tests/ui/checked_unwrap/simple_conditionals.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -71,7 +71,7 @@ LL |             $a.unwrap(); // unnecessary\n    |             ^^^^^^^^^^^\n ...\n LL |     m!(x);\n-   |     ------ in this macro invocation\n+   |     ----- in this macro invocation\n    |\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "46b645aea135cd78d0e50158cbfde73ab0d0b63b", "filename": "tests/ui/collapsible_match2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcollapsible_match2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcollapsible_match2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcollapsible_match2.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -46,7 +46,7 @@ LL | |                     },\n    | |_____________________^\n ...\n LL |           mac!(res_opt => Ok(val), val => Some(n), foo(n));\n-   |           ------------------------------------------------- in this macro invocation\n+   |           ------------------------------------------------ in this macro invocation\n    |\n help: the outer pattern can be modified to include the inner pattern\n   --> $DIR/collapsible_match2.rs:46:28"}, {"sha": "db0cb25e34a0f7c703f63aa607a6eb40abb13222", "filename": "tests/ui/crashes/ice-6255.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcrashes%2Fice-6255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcrashes%2Fice-6255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6255.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -5,7 +5,7 @@ LL |         extern crate std as core;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL | define_other_core!();\n-   | --------------------- in this macro invocation\n+   | -------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `define_other_core` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "ae4e6cad3328bb120e160dcae2d72384d0285acb", "filename": "tests/ui/crashes/ice-6256.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fcrashes%2Fice-6256.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-6256.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -6,7 +6,7 @@ LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types\n    |\n    = note: expected reference `&(dyn TT + 'static)`\n               found reference `&dyn TT`\n-note: the anonymous lifetime #1 defined on the body at 13:13...\n+note: the anonymous lifetime #1 defined here...\n   --> $DIR/ice-6256.rs:13:13\n    |\n LL |     let f = |x: &dyn TT| x.func(); //[default]~ ERROR: mismatched types"}, {"sha": "fd0689dfc4c99db4dbc8dce74d0b2d3566e97e10", "filename": "tests/ui/declare_interior_mutable_const/others.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Fothers.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -31,7 +31,7 @@ LL |         const $name: $ty = $e;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL | declare_const!(_ONCE: Once = Once::new()); //~ ERROR interior mutable\n-   | ------------------------------------------ in this macro invocation\n+   | ----------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `declare_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "7debe059ff4ee5538e7b6a0973b1e4fd70145978", "filename": "tests/ui/declare_interior_mutable_const/traits.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdeclare_interior_mutable_const%2Ftraits.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -13,7 +13,7 @@ LL |         const $name: $ty = $e;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     declare_const!(ANOTHER_ATOMIC: AtomicUsize = Self::ATOMIC); //~ ERROR interior mutable\n-   |     ----------------------------------------------------------- in this macro invocation\n+   |     ---------------------------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `declare_const` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "f8a2407b6933d8d6be71bf32087083eeee09b79b", "filename": "tests/ui/default_numeric_fallback_f64.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_f64.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -139,7 +139,7 @@ LL |             let x = 22.;\n    |                     ^^^ help: consider adding suffix: `22.0_f64`\n ...\n LL |         internal_macro!();\n-   |         ------------------ in this macro invocation\n+   |         ----------------- in this macro invocation\n    |\n    = note: this error originates in the macro `internal_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "6f9e124704b2c76834dd95840a8cebfecec1d589", "filename": "tests/ui/default_numeric_fallback_i32.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback_i32.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -151,7 +151,7 @@ LL |             let x = 22;\n    |                     ^^ help: consider adding suffix: `22_i32`\n ...\n LL |         internal_macro!();\n-   |         ------------------ in this macro invocation\n+   |         ----------------- in this macro invocation\n    |\n    = note: this error originates in the macro `internal_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "d68b8a0c67be68fda36fdfd3b961ed6f3ff97945", "filename": "tests/ui/doc_unsafe.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fdoc_unsafe.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fdoc_unsafe.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdoc_unsafe.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -47,7 +47,7 @@ LL | |         }\n    | |_________^\n ...\n LL |   very_unsafe!();\n-   |   --------------- in this macro invocation\n+   |   -------------- in this macro invocation\n    |\n    = note: this error originates in the macro `very_unsafe` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "885415b42c78735c2c12bdfe385a9aea8a821292", "filename": "tests/ui/eq_op_macros.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Feq_op_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Feq_op_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Feq_op_macros.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -5,7 +5,7 @@ LL |         assert_eq!(a, a);\n    |                    ^^^^\n ...\n LL |     assert_in_macro_def!();\n-   |     ----------------------- in this macro invocation\n+   |     ---------------------- in this macro invocation\n    |\n    = note: `-D clippy::eq-op` implied by `-D warnings`\n    = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -17,7 +17,7 @@ LL |         assert_ne!(a, a);\n    |                    ^^^^\n ...\n LL |     assert_in_macro_def!();\n-   |     ----------------------- in this macro invocation\n+   |     ---------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -52,7 +52,7 @@ LL |         debug_assert_eq!(a, a);\n    |                          ^^^^\n ...\n LL |     assert_in_macro_def!();\n-   |     ----------------------- in this macro invocation\n+   |     ---------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -63,7 +63,7 @@ LL |         debug_assert_ne!(a, a);\n    |                          ^^^^\n ...\n LL |     assert_in_macro_def!();\n-   |     ----------------------- in this macro invocation\n+   |     ---------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `assert_in_macro_def` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "f5d0b98c10862cd11a4db14d65c484f90c988dd4", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -37,7 +37,7 @@ note: potential failure(s)\n   --> $DIR/fallible_impl_from.rs:30:13\n    |\n LL |             panic!();\n-   |             ^^^^^^^^^\n+   |             ^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n@@ -60,11 +60,11 @@ LL |         let s = s.unwrap();\n    |                 ^^^^^^^^^^\n LL |         if !s.is_empty() {\n LL |             panic!(\"42\");\n-   |             ^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^\n LL |         } else if s.parse::<u32>().unwrap() != 42 {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n-   |             ^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: consider implementing `TryFrom` instead\n@@ -86,7 +86,7 @@ note: potential failure(s)\n LL |         if s.parse::<u32>().ok().unwrap() != 42 {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);\n-   |             ^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 4 previous errors"}, {"sha": "701399b32d62834a9d993339b83df1f5ba8d03ab", "filename": "tests/ui/format.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fformat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fformat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformat.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -2,21 +2,21 @@ error: useless use of `format!`\n   --> $DIR/format.rs:13:5\n    |\n LL |     format!(\"foo\");\n-   |     ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string();`\n+   |     ^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n    |\n    = note: `-D clippy::useless-format` implied by `-D warnings`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:14:5\n    |\n LL |     format!(\"{{}}\");\n-   |     ^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{}\".to_string();`\n+   |     ^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{}\".to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:15:5\n    |\n LL |     format!(\"{{}} abc {{}}\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{} abc {}\".to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"{} abc {}\".to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:16:5\n@@ -25,61 +25,61 @@ LL | /     format!(\n LL | |         r##\"foo {{}}\n LL | | \" bar\"##\n LL | |     );\n-   | |______^\n+   | |_____^\n    |\n help: consider using `.to_string()`\n    |\n LL ~     r##\"foo {}\n-LL + \" bar\"##.to_string();\n+LL ~ \" bar\"##.to_string();\n    |\n \n error: useless use of `format!`\n   --> $DIR/format.rs:21:5\n    |\n LL |     format!(\"{}\", \"foo\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:25:5\n    |\n LL |     format!(\"{:+}\", \"foo\"); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:26:5\n    |\n LL |     format!(\"{:<}\", \"foo\"); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `\"foo\".to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:31:5\n    |\n LL |     format!(\"{}\", arg);\n-   |     ^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:35:5\n    |\n LL |     format!(\"{:+}\", arg); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:36:5\n    |\n LL |     format!(\"{:<}\", arg); // Warn when the format makes no difference.\n-   |     ^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `arg.to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:63:5\n    |\n LL |     format!(\"{}\", 42.to_string());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `42.to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `42.to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:65:5\n    |\n LL |     format!(\"{}\", x.display().to_string());\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.display().to_string();`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `.to_string()`: `x.display().to_string()`\n \n error: useless use of `format!`\n   --> $DIR/format.rs:69:18"}, {"sha": "3f5f56b923fe2453b25e792bc9b5a912f880cd90", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -107,7 +107,7 @@ LL |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V> {\n    |                                           ^^^^^^^^^^^^^\n ...\n LL | gen!(impl);\n-   | ----------- in this macro invocation\n+   | ---------- in this macro invocation\n    |\n    = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n@@ -126,7 +126,7 @@ LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>)\n    |                                 ^^^^^^^^^^^^^^^^^\n ...\n LL | gen!(fn bar);\n-   | ------------- in this macro invocation\n+   | ------------ in this macro invocation\n    |\n    = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter\n@@ -141,7 +141,7 @@ LL |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>)\n    |                                                               ^^^^^^^^^^^^\n ...\n LL | gen!(fn bar);\n-   | ------------- in this macro invocation\n+   | ------------ in this macro invocation\n    |\n    = note: this error originates in the macro `gen` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider adding a type parameter"}, {"sha": "ab4a6374c73cae3dbfe7ddf84ebedd7e0e0a1b4c", "filename": "tests/ui/item_after_statement.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fitem_after_statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fitem_after_statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fitem_after_statement.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -25,7 +25,7 @@ LL | |             }\n    | |_____________^\n ...\n LL |       b!();\n-   |       ----- in this macro invocation\n+   |       ---- in this macro invocation\n    |\n    = note: this error originates in the macro `b` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "05d6c56f2aca0a5dd63a3d635468800d0431a5e3", "filename": "tests/ui/manual_unwrap_or.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fmanual_unwrap_or.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fmanual_unwrap_or.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.fixed?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -74,10 +74,10 @@ fn result_unwrap_or() {\n     let a = Ok::<i32, &str>(1);\n     a.unwrap_or(42);\n \n-    // int case, suggestion must surround Result expr with parenthesis\n+    // int case, suggestion must surround Result expr with parentheses\n     (Ok(1) as Result<i32, &str>).unwrap_or(42);\n \n-    // method call case, suggestion must not surround Result expr `s.method()` with parenthesis\n+    // method call case, suggestion must not surround Result expr `s.method()` with parentheses\n     struct S {}\n     impl S {\n         fn method(self) -> Option<i32> {"}, {"sha": "09f62c69b71de15b832c836a03c21829a78d501f", "filename": "tests/ui/manual_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_unwrap_or.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -95,13 +95,13 @@ fn result_unwrap_or() {\n         Err(_) => 42,\n     };\n \n-    // int case, suggestion must surround Result expr with parenthesis\n+    // int case, suggestion must surround Result expr with parentheses\n     match Ok(1) as Result<i32, &str> {\n         Ok(i) => i,\n         Err(_) => 42,\n     };\n \n-    // method call case, suggestion must not surround Result expr `s.method()` with parenthesis\n+    // method call case, suggestion must not surround Result expr `s.method()` with parentheses\n     struct S {}\n     impl S {\n         fn method(self) -> Option<i32> {"}, {"sha": "69a8f286d050d398dc19f78e0252a8d31f67d62f", "filename": "tests/ui/mem_discriminant.fixed", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/535262cc8cc29c82694286760ce5cbe3420b9e35/tests%2Fui%2Fmem_discriminant.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/535262cc8cc29c82694286760ce5cbe3420b9e35/tests%2Fui%2Fmem_discriminant.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant.fixed?ref=535262cc8cc29c82694286760ce5cbe3420b9e35", "patch": "@@ -1,45 +0,0 @@\n-// run-rustfix\n-\n-#![deny(clippy::mem_discriminant_non_enum)]\n-\n-use std::mem;\n-\n-enum Foo {\n-    One(usize),\n-    Two(u8),\n-}\n-\n-fn main() {\n-    // bad\n-    mem::discriminant(&Some(2));\n-    mem::discriminant(&None::<u8>);\n-    mem::discriminant(&Foo::One(5));\n-    mem::discriminant(&Foo::Two(5));\n-\n-    let ro = &Some(3);\n-    let rro = &ro;\n-    mem::discriminant(ro);\n-    mem::discriminant(*rro);\n-    mem::discriminant(*rro);\n-\n-    macro_rules! mem_discriminant_but_in_a_macro {\n-        ($param:expr) => {\n-            mem::discriminant($param)\n-        };\n-    }\n-\n-    mem_discriminant_but_in_a_macro!(*rro);\n-\n-    let rrrrro = &&&rro;\n-    mem::discriminant(****rrrrro);\n-    mem::discriminant(****rrrrro);\n-\n-    // ok\n-    mem::discriminant(&Some(2));\n-    mem::discriminant(&None::<u8>);\n-    mem::discriminant(&Foo::One(5));\n-    mem::discriminant(&Foo::Two(5));\n-    mem::discriminant(ro);\n-    mem::discriminant(*rro);\n-    mem::discriminant(****rrrrro);\n-}"}, {"sha": "55db50fcdc733d4a0180df3ff1eedf535045711d", "filename": "tests/ui/mem_discriminant.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/535262cc8cc29c82694286760ce5cbe3420b9e35/tests%2Fui%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535262cc8cc29c82694286760ce5cbe3420b9e35/tests%2Fui%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant.rs?ref=535262cc8cc29c82694286760ce5cbe3420b9e35", "patch": "@@ -1,45 +0,0 @@\n-// run-rustfix\n-\n-#![deny(clippy::mem_discriminant_non_enum)]\n-\n-use std::mem;\n-\n-enum Foo {\n-    One(usize),\n-    Two(u8),\n-}\n-\n-fn main() {\n-    // bad\n-    mem::discriminant(&&Some(2));\n-    mem::discriminant(&&None::<u8>);\n-    mem::discriminant(&&Foo::One(5));\n-    mem::discriminant(&&Foo::Two(5));\n-\n-    let ro = &Some(3);\n-    let rro = &ro;\n-    mem::discriminant(&ro);\n-    mem::discriminant(rro);\n-    mem::discriminant(&rro);\n-\n-    macro_rules! mem_discriminant_but_in_a_macro {\n-        ($param:expr) => {\n-            mem::discriminant($param)\n-        };\n-    }\n-\n-    mem_discriminant_but_in_a_macro!(&rro);\n-\n-    let rrrrro = &&&rro;\n-    mem::discriminant(&rrrrro);\n-    mem::discriminant(*rrrrro);\n-\n-    // ok\n-    mem::discriminant(&Some(2));\n-    mem::discriminant(&None::<u8>);\n-    mem::discriminant(&Foo::One(5));\n-    mem::discriminant(&Foo::Two(5));\n-    mem::discriminant(ro);\n-    mem::discriminant(*rro);\n-    mem::discriminant(****rrrrro);\n-}"}, {"sha": "36a225b759484da68bd6f98fa1f1f4c8cfdf216f", "filename": "tests/ui/mem_discriminant.stderr", "status": "removed", "additions": 0, "deletions": 94, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/535262cc8cc29c82694286760ce5cbe3420b9e35/tests%2Fui%2Fmem_discriminant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535262cc8cc29c82694286760ce5cbe3420b9e35/tests%2Fui%2Fmem_discriminant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant.stderr?ref=535262cc8cc29c82694286760ce5cbe3420b9e35", "patch": "@@ -1,94 +0,0 @@\n-error: calling `mem::discriminant` on non-enum type `&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:14:5\n-   |\n-LL |     mem::discriminant(&&Some(2));\n-   |     ^^^^^^^^^^^^^^^^^^---------^\n-   |                       |\n-   |                       help: try dereferencing: `&Some(2)`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/mem_discriminant.rs:3:9\n-   |\n-LL | #![deny(clippy::mem_discriminant_non_enum)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: calling `mem::discriminant` on non-enum type `&std::option::Option<u8>`\n-  --> $DIR/mem_discriminant.rs:15:5\n-   |\n-LL |     mem::discriminant(&&None::<u8>);\n-   |     ^^^^^^^^^^^^^^^^^^------------^\n-   |                       |\n-   |                       help: try dereferencing: `&None::<u8>`\n-\n-error: calling `mem::discriminant` on non-enum type `&Foo`\n-  --> $DIR/mem_discriminant.rs:16:5\n-   |\n-LL |     mem::discriminant(&&Foo::One(5));\n-   |     ^^^^^^^^^^^^^^^^^^-------------^\n-   |                       |\n-   |                       help: try dereferencing: `&Foo::One(5)`\n-\n-error: calling `mem::discriminant` on non-enum type `&Foo`\n-  --> $DIR/mem_discriminant.rs:17:5\n-   |\n-LL |     mem::discriminant(&&Foo::Two(5));\n-   |     ^^^^^^^^^^^^^^^^^^-------------^\n-   |                       |\n-   |                       help: try dereferencing: `&Foo::Two(5)`\n-\n-error: calling `mem::discriminant` on non-enum type `&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:21:5\n-   |\n-LL |     mem::discriminant(&ro);\n-   |     ^^^^^^^^^^^^^^^^^^---^\n-   |                       |\n-   |                       help: try dereferencing: `ro`\n-\n-error: calling `mem::discriminant` on non-enum type `&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:22:5\n-   |\n-LL |     mem::discriminant(rro);\n-   |     ^^^^^^^^^^^^^^^^^^---^\n-   |                       |\n-   |                       help: try dereferencing: `*rro`\n-\n-error: calling `mem::discriminant` on non-enum type `&&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:23:5\n-   |\n-LL |     mem::discriminant(&rro);\n-   |     ^^^^^^^^^^^^^^^^^^----^\n-   |                       |\n-   |                       help: try dereferencing: `*rro`\n-\n-error: calling `mem::discriminant` on non-enum type `&&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:27:13\n-   |\n-LL |             mem::discriminant($param)\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n-...\n-LL |     mem_discriminant_but_in_a_macro!(&rro);\n-   |     ---------------------------------------\n-   |     |                                |\n-   |     |                                help: try dereferencing: `*rro`\n-   |     in this macro invocation\n-   |\n-   = note: this error originates in the macro `mem_discriminant_but_in_a_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: calling `mem::discriminant` on non-enum type `&&&&&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:34:5\n-   |\n-LL |     mem::discriminant(&rrrrro);\n-   |     ^^^^^^^^^^^^^^^^^^-------^\n-   |                       |\n-   |                       help: try dereferencing: `****rrrrro`\n-\n-error: calling `mem::discriminant` on non-enum type `&&&std::option::Option<i32>`\n-  --> $DIR/mem_discriminant.rs:35:5\n-   |\n-LL |     mem::discriminant(*rrrrro);\n-   |     ^^^^^^^^^^^^^^^^^^-------^\n-   |                       |\n-   |                       help: try dereferencing: `****rrrrro`\n-\n-error: aborting due to 10 previous errors\n-"}, {"sha": "e245d3257d55d02a5639ec09761a8a8af87f58f2", "filename": "tests/ui/mem_discriminant_unfixable.rs", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/535262cc8cc29c82694286760ce5cbe3420b9e35/tests%2Fui%2Fmem_discriminant_unfixable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/535262cc8cc29c82694286760ce5cbe3420b9e35/tests%2Fui%2Fmem_discriminant_unfixable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant_unfixable.rs?ref=535262cc8cc29c82694286760ce5cbe3420b9e35", "patch": "@@ -1,16 +0,0 @@\n-#![deny(clippy::mem_discriminant_non_enum)]\n-\n-use std::mem;\n-\n-enum Foo {\n-    One(usize),\n-    Two(u8),\n-}\n-\n-struct A(Foo);\n-\n-fn main() {\n-    // bad\n-    mem::discriminant(&\"hello\");\n-    mem::discriminant(&A(Foo::One(0)));\n-}"}, {"sha": "e2de3776f2c911ac0f4684790f5a2e9162b9fbc5", "filename": "tests/ui/mem_discriminant_unfixable.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/535262cc8cc29c82694286760ce5cbe3420b9e35/tests%2Fui%2Fmem_discriminant_unfixable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/535262cc8cc29c82694286760ce5cbe3420b9e35/tests%2Fui%2Fmem_discriminant_unfixable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_discriminant_unfixable.stderr?ref=535262cc8cc29c82694286760ce5cbe3420b9e35", "patch": "@@ -1,20 +0,0 @@\n-error: calling `mem::discriminant` on non-enum type `&str`\n-  --> $DIR/mem_discriminant_unfixable.rs:14:5\n-   |\n-LL |     mem::discriminant(&\"hello\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-note: the lint level is defined here\n-  --> $DIR/mem_discriminant_unfixable.rs:1:9\n-   |\n-LL | #![deny(clippy::mem_discriminant_non_enum)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: calling `mem::discriminant` on non-enum type `A`\n-  --> $DIR/mem_discriminant_unfixable.rs:15:5\n-   |\n-LL |     mem::discriminant(&A(Foo::One(0)));\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "dd69ab8b5efb80bc8069b3c0590830079cdea50b", "filename": "tests/ui/mem_replace_macro.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fmem_replace_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fmem_replace_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmem_replace_macro.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -5,7 +5,7 @@ LL |         std::mem::replace($s, Default::default())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n ...\n LL |     take!(s);\n-   |     --------- in this macro invocation\n+   |     -------- in this macro invocation\n    |\n    = note: `-D clippy::mem-replace-with-default` implied by `-D warnings`\n    = note: this error originates in the macro `take` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "b863063b626dbe68183eda66c717ef6156b78881", "filename": "tests/ui/missing_panics_doc.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fmissing_panics_doc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fmissing_panics_doc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_panics_doc.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -91,7 +91,7 @@ note: first possible panic found here\n   --> $DIR/missing_panics_doc.rs:39:5\n    |\n LL |     assert_eq!(x, 0);\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: docs for function which may panic missing `# Panics` section\n@@ -107,7 +107,7 @@ note: first possible panic found here\n   --> $DIR/missing_panics_doc.rs:45:5\n    |\n LL |     assert_ne!(x, 0);\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 7 previous errors"}, {"sha": "f56c2d03c664fb2d98448f7127c92acabb6b2bdc", "filename": "tests/ui/panic_in_result_fn.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fpanic_in_result_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fpanic_in_result_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -13,7 +13,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:9:9\n    |\n LL |         panic!(\"error\");\n-   |         ^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n@@ -30,7 +30,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:14:9\n    |\n LL |         unimplemented!();\n-   |         ^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n@@ -47,7 +47,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:19:9\n    |\n LL |         unreachable!();\n-   |         ^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^\n    = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n@@ -64,7 +64,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:24:9\n    |\n LL |         todo!(\"Finish this\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n@@ -81,7 +81,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:55:5\n    |\n LL |     panic!(\"error\");\n-   |     ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `$crate::panic::panic_2015` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n@@ -98,7 +98,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn.rs:69:5\n    |\n LL |     todo!(\"finish main method\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 6 previous errors"}, {"sha": "7501d6d85edd78f1e0c1d375af6bc4d570cac889", "filename": "tests/ui/panic_in_result_fn_assertions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_assertions.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -14,7 +14,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn_assertions.rs:9:9\n    |\n LL |         assert!(x == 5, \"wrong argument\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n@@ -32,7 +32,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn_assertions.rs:15:9\n    |\n LL |         assert_eq!(x, 5);\n-   |         ^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n@@ -50,7 +50,7 @@ note: return Err() instead of panicking\n   --> $DIR/panic_in_result_fn_assertions.rs:21:9\n    |\n LL |         assert_ne!(x, 1);\n-   |         ^^^^^^^^^^^^^^^^^\n+   |         ^^^^^^^^^^^^^^^^\n    = note: this error originates in the macro `assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to 3 previous errors"}, {"sha": "2b607ff5888958bffad99388acc43754d1524264", "filename": "tests/ui/panicking_macros.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fpanicking_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fpanicking_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanicking_macros.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -2,27 +2,27 @@ error: `panic` should not be present in production code\n   --> $DIR/panicking_macros.rs:8:5\n    |\n LL |     panic!();\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^\n    |\n    = note: `-D clippy::panic` implied by `-D warnings`\n \n error: `panic` should not be present in production code\n   --> $DIR/panicking_macros.rs:9:5\n    |\n LL |     panic!(\"message\");\n-   |     ^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^\n \n error: `panic` should not be present in production code\n   --> $DIR/panicking_macros.rs:10:5\n    |\n LL |     panic!(\"{} {}\", \"panic with\", \"multiple arguments\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:16:5\n    |\n LL |     todo!();\n-   |     ^^^^^^^^\n+   |     ^^^^^^^\n    |\n    = note: `-D clippy::todo` implied by `-D warnings`\n    = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -31,23 +31,23 @@ error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:17:5\n    |\n LL |     todo!(\"message\");\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:18:5\n    |\n LL |     todo!(\"{} {}\", \"panic with\", \"multiple arguments\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:24:5\n    |\n LL |     unimplemented!();\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unimplemented` implied by `-D warnings`\n    = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -56,23 +56,23 @@ error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:25:5\n    |\n LL |     unimplemented!(\"message\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:26:5\n    |\n LL |     unimplemented!(\"{} {}\", \"panic with\", \"multiple arguments\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:32:5\n    |\n LL |     unreachable!();\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::unreachable` implied by `-D warnings`\n    = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n@@ -81,45 +81,45 @@ error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:33:5\n    |\n LL |     unreachable!(\"message\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `$crate::unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:34:5\n    |\n LL |     unreachable!(\"{} {}\", \"panic with\", \"multiple arguments\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `panic` should not be present in production code\n   --> $DIR/panicking_macros.rs:40:5\n    |\n LL |     panic!();\n-   |     ^^^^^^^^^\n+   |     ^^^^^^^^\n \n error: `todo` should not be present in production code\n   --> $DIR/panicking_macros.rs:41:5\n    |\n LL |     todo!();\n-   |     ^^^^^^^^\n+   |     ^^^^^^^\n    |\n    = note: this error originates in the macro `todo` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `unimplemented` should not be present in production code\n   --> $DIR/panicking_macros.rs:42:5\n    |\n LL |     unimplemented!();\n-   |     ^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `unimplemented` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: usage of the `unreachable!` macro\n   --> $DIR/panicking_macros.rs:43:5\n    |\n LL |     unreachable!();\n-   |     ^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^\n    |\n    = note: this error originates in the macro `unreachable` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "12b3d3a8bd075cbe97bfe8d85769d992ce38e21e", "filename": "tests/ui/pattern_type_mismatch/syntax.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern_type_mismatch%2Fsyntax.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -70,7 +70,7 @@ LL |                 Some(_) => (),\n    |                 ^^^^^^^\n ...\n LL |     matching_macro!(value);\n-   |     ----------------------- in this macro invocation\n+   |     ---------------------- in this macro invocation\n    |\n    = help: use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings\n    = note: this error originates in the macro `matching_macro` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "a66c2e587c8736111e067f1b2dd8a41d583840a5", "filename": "tests/ui/rename.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.fixed?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -8,6 +8,7 @@\n #![allow(clippy::redundant_static_lifetimes)]\n // warn for the old lint name here, to test if the renaming worked\n #![warn(clippy::cognitive_complexity)]\n+#![warn(enum_intrinsics_non_enums)]\n \n #[warn(clippy::module_name_repetitions)]\n fn main() {}"}, {"sha": "fa81201a2daf305fd675ddf65668882cdb842419", "filename": "tests/ui/rename.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -8,6 +8,7 @@\n #![allow(clippy::redundant_static_lifetimes)]\n // warn for the old lint name here, to test if the renaming worked\n #![warn(clippy::cyclomatic_complexity)]\n+#![warn(clippy::mem_discriminant_non_enum)]\n \n #[warn(clippy::stutter)]\n fn main() {}"}, {"sha": "05c7854074c60cd3ba9291173c7c70421cf17ccf", "filename": "tests/ui/rename.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frename.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -6,23 +6,29 @@ LL | #![warn(clippy::cyclomatic_complexity)]\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n+error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n+  --> $DIR/rename.rs:11:9\n+   |\n+LL | #![warn(clippy::mem_discriminant_non_enum)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n+\n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:12:8\n+  --> $DIR/rename.rs:13:8\n    |\n LL | #[warn(clippy::stutter)]\n    |        ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:15:8\n+  --> $DIR/rename.rs:16:8\n    |\n LL | #[warn(clippy::new_without_default_derive)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:18:8\n+  --> $DIR/rename.rs:19:8\n    |\n LL | #[warn(clippy::const_static_lifetime)]\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}, {"sha": "9c853020ab0191a3907fb62f4a1816e0746d3990", "filename": "tests/ui/toplevel_ref_arg.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Ftoplevel_ref_arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Ftoplevel_ref_arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -37,7 +37,7 @@ LL |         let ref _y = 42;\n    |         ----^^^^^^------ help: try: `let _y = &42;`\n ...\n LL |         gen_binding!();\n-   |         --------------- in this macro invocation\n+   |         -------------- in this macro invocation\n    |\n    = note: this error originates in the macro `gen_binding` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "e97011c7fd51fa3e9e1c3db512ec0283c2c8e30f", "filename": "tests/ui/toplevel_ref_arg_non_rustfix.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftoplevel_ref_arg_non_rustfix.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -13,7 +13,7 @@ LL |         fn fun_example(ref _x: usize) {}\n    |                        ^^^^^^\n ...\n LL |         gen_function!();\n-   |         ---------------- in this macro invocation\n+   |         --------------- in this macro invocation\n    |\n    = note: this error originates in the macro `gen_function` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "0cb1328fbfcf0c733d48fd7c78930f456e741a6f", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -35,7 +35,7 @@ LL |             Err(_) => Err(1)?,\n    |                       ^^^^^^^ help: try this: `return Err(1)`\n ...\n LL |     try_validation!(Ok::<_, i32>(5));\n-   |     --------------------------------- in this macro invocation\n+   |     -------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try_validation` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -46,7 +46,7 @@ LL |             Err(_) => Err(ret_one!())?,\n    |                       ^^^^^^^^^^^^^^^^ help: try this: `return Err(ret_one!())`\n ...\n LL |     try_validation_in_macro!(Ok::<_, i32>(5));\n-   |     ------------------------------------------ in this macro invocation\n+   |     ----------------------------------------- in this macro invocation\n    |\n    = note: this error originates in the macro `try_validation_in_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "613e9ffca456559a9352d85166f44711d7c7b787", "filename": "tests/ui/undocumented_unsafe_blocks.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fundocumented_unsafe_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fundocumented_unsafe_blocks.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -114,7 +114,7 @@ LL |             unsafe {}\n    |             ^^^^^^^^^\n ...\n LL |     t!();\n-   |     ----- in this macro invocation\n+   |     ---- in this macro invocation\n    |\n    = help: consider adding a safety comment in the macro definition\n    = note: this error originates in the macro `t` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "2b5a7b348b982c13d6a9f6eda9faefc1d3cdfb23", "filename": "tests/ui/unit_cmp.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Funit_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Funit_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funit_cmp.stderr?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -32,7 +32,7 @@ LL | |         },\n ...  |\n LL | |         }\n LL | |     );\n-   | |______^\n+   | |_____^\n    |\n    = note: this error originates in the macro `assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -46,7 +46,7 @@ LL | |         },\n ...  |\n LL | |         }\n LL | |     );\n-   | |______^\n+   | |_____^\n    |\n    = note: this error originates in the macro `$crate::assert_eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -60,7 +60,7 @@ LL | |         },\n ...  |\n LL | |         }\n LL | |     );\n-   | |______^\n+   | |_____^\n    |\n    = note: this error originates in the macro `assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n@@ -74,7 +74,7 @@ LL | |         },\n ...  |\n LL | |         }\n LL | |     );\n-   | |______^\n+   | |_____^\n    |\n    = note: this error originates in the macro `$crate::assert_ne` (in Nightly builds, run with -Z macro-backtrace for more info)\n "}, {"sha": "70ff08f36551838743b29d059c5d207a6f1593cd", "filename": "tests/ui/useless_conversion.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fuseless_conversion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fuseless_conversion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.fixed?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -66,7 +66,7 @@ fn main() {\n     let _ = vec![1, 2, 3].into_iter();\n     let _: String = format!(\"Hello {}\", \"world\");\n \n-    // keep parenthesis around `a + b` for suggestion (see #4750)\n+    // keep parentheses around `a + b` for suggestion (see #4750)\n     let a: i32 = 1;\n     let b: i32 = 1;\n     let _ = (a + b) * 3;"}, {"sha": "f2444a8f436bf1a699e45cdee099846a261f9568", "filename": "tests/ui/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91496c2ac6abf6454c413bb23e8becf6b6dc20ea/tests%2Fui%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_conversion.rs?ref=91496c2ac6abf6454c413bb23e8becf6b6dc20ea", "patch": "@@ -66,7 +66,7 @@ fn main() {\n     let _ = vec![1, 2, 3].into_iter().into_iter();\n     let _: String = format!(\"Hello {}\", \"world\").into();\n \n-    // keep parenthesis around `a + b` for suggestion (see #4750)\n+    // keep parentheses around `a + b` for suggestion (see #4750)\n     let a: i32 = 1;\n     let b: i32 = 1;\n     let _ = i32::from(a + b) * 3;"}]}