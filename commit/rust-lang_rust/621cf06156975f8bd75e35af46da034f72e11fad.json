{"sha": "621cf06156975f8bd75e35af46da034f72e11fad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMWNmMDYxNTY5NzVmOGJkNzVlMzVhZjQ2ZGEwMzRmNzJlMTFmYWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-21T10:32:03Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-21T10:48:05Z"}, "message": "Decouple", "tree": {"sha": "f06e26fc377bd36961a5c8fb41e01423e4e1a01d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f06e26fc377bd36961a5c8fb41e01423e4e1a01d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/621cf06156975f8bd75e35af46da034f72e11fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/621cf06156975f8bd75e35af46da034f72e11fad", "html_url": "https://github.com/rust-lang/rust/commit/621cf06156975f8bd75e35af46da034f72e11fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/621cf06156975f8bd75e35af46da034f72e11fad/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24964ca58e057b3f32d5cbb17d84e46f2a236ff6", "url": "https://api.github.com/repos/rust-lang/rust/commits/24964ca58e057b3f32d5cbb17d84e46f2a236ff6", "html_url": "https://github.com/rust-lang/rust/commit/24964ca58e057b3f32d5cbb17d84e46f2a236ff6"}], "stats": {"total": 102, "additions": 59, "deletions": 43}, "files": [{"sha": "e294e957bcb3532826b8bde68b705fb10c6113ac", "filename": "crates/ra_hir/src/from_id.rs", "status": "modified", "additions": 20, "deletions": 3, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/621cf06156975f8bd75e35af46da034f72e11fad/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621cf06156975f8bd75e35af46da034f72e11fad/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs?ref=621cf06156975f8bd75e35af46da034f72e11fad", "patch": "@@ -4,12 +4,13 @@\n //! are splitting the hir.\n \n use hir_def::{\n-    AdtId, AssocItemId, DefWithBodyId, EnumId, EnumVariantId, GenericDefId, ModuleDefId, StructId,\n-    TypeAliasId, UnionId,\n+    AdtId, AssocItemId, ConstId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, GenericDefId,\n+    ModuleDefId, StaticId, StructId, TypeAliasId, UnionId,\n };\n \n use crate::{\n-    ty::TypableDef, Adt, AssocItem, DefWithBody, EnumVariant, GenericDef, ModuleDef, TypeAlias,\n+    ty::TypableDef, Adt, AssocItem, Const, DefWithBody, EnumVariant, Function, GenericDef,\n+    ModuleDef, Static, TypeAlias,\n };\n \n macro_rules! from_id {\n@@ -174,6 +175,22 @@ impl From<TypeAliasId> for TypableDef {\n     }\n }\n \n+impl From<FunctionId> for TypableDef {\n+    fn from(id: FunctionId) -> Self {\n+        Function::from(id).into()\n+    }\n+}\n+impl From<ConstId> for TypableDef {\n+    fn from(id: ConstId) -> Self {\n+        Const::from(id).into()\n+    }\n+}\n+impl From<StaticId> for TypableDef {\n+    fn from(id: StaticId) -> Self {\n+        Static::from(id).into()\n+    }\n+}\n+\n impl From<Adt> for GenericDefId {\n     fn from(id: Adt) -> Self {\n         match id {"}, {"sha": "770864ec5d2b1d2dfe4c3f3933481e3450610a92", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 20, "deletions": 22, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/621cf06156975f8bd75e35af46da034f72e11fad/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621cf06156975f8bd75e35af46da034f72e11fad/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=621cf06156975f8bd75e35af46da034f72e11fad", "patch": "@@ -8,8 +8,8 @@ use hir_def::{\n     generics::GenericParams,\n     nameres::CrateDefMap,\n     path::{Path, PathKind},\n-    AdtId, CrateModuleId, DefWithBodyId, EnumId, EnumVariantId, GenericDefId, ImplId, ModuleDefId,\n-    StructId, TraitId, TypeAliasId,\n+    AdtId, ConstId, CrateModuleId, DefWithBodyId, EnumId, EnumVariantId, FunctionId, GenericDefId,\n+    ImplId, ModuleDefId, StaticId, StructId, TraitId, TypeAliasId,\n };\n use hir_expand::name::{self, Name};\n use rustc_hash::FxHashSet;\n@@ -18,8 +18,8 @@ use crate::{\n     code_model::Crate,\n     db::{DefDatabase, HirDatabase},\n     expr::{ExprScopes, PatId, ScopeId},\n-    Adt, Const, Container, DefWithBody, EnumVariant, Function, GenericDef, HasBody, ImplBlock,\n-    Local, MacroDef, Module, ModuleDef, PerNs, Static, Struct, Trait, TypeAlias,\n+    Adt, Const, Container, DefWithBody, Function, GenericDef, ImplBlock, Local, MacroDef, Module,\n+    ModuleDef, PerNs, Static, Trait, TypeAlias,\n };\n \n #[derive(Debug, Clone, Default)]\n@@ -79,11 +79,11 @@ pub(crate) enum ResolveValueResult {\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub(crate) enum ValueNs {\n     LocalBinding(PatId),\n-    Function(Function),\n-    Const(Const),\n-    Static(Static),\n-    Struct(Struct),\n-    EnumVariant(EnumVariant),\n+    FunctionId(FunctionId),\n+    ConstId(ConstId),\n+    StaticId(StaticId),\n+    StructId(StructId),\n+    EnumVariantId(EnumVariantId),\n }\n \n impl Resolver {\n@@ -266,13 +266,11 @@ impl Resolver {\n                     return match idx {\n                         None => {\n                             let value = match module_def.take_values()? {\n-                                ModuleDefId::FunctionId(it) => ValueNs::Function(it.into()),\n-                                ModuleDefId::AdtId(AdtId::StructId(it)) => {\n-                                    ValueNs::Struct(it.into())\n-                                }\n-                                ModuleDefId::EnumVariantId(it) => ValueNs::EnumVariant(it.into()),\n-                                ModuleDefId::ConstId(it) => ValueNs::Const(it.into()),\n-                                ModuleDefId::StaticId(it) => ValueNs::Static(it.into()),\n+                                ModuleDefId::FunctionId(it) => ValueNs::FunctionId(it),\n+                                ModuleDefId::AdtId(AdtId::StructId(it)) => ValueNs::StructId(it),\n+                                ModuleDefId::EnumVariantId(it) => ValueNs::EnumVariantId(it),\n+                                ModuleDefId::ConstId(it) => ValueNs::ConstId(it),\n+                                ModuleDefId::StaticId(it) => ValueNs::StaticId(it),\n \n                                 ModuleDefId::AdtId(AdtId::EnumId(_))\n                                 | ModuleDefId::AdtId(AdtId::UnionId(_))\n@@ -496,23 +494,23 @@ impl Scope {\n // needs arbitrary_self_types to be a method... or maybe move to the def?\n pub(crate) fn resolver_for_expr(\n     db: &impl HirDatabase,\n-    owner: DefWithBody,\n+    owner: DefWithBodyId,\n     expr_id: ExprId,\n ) -> Resolver {\n-    let scopes = owner.expr_scopes(db);\n+    let scopes = db.expr_scopes(owner);\n     resolver_for_scope(db, owner, scopes.scope_for(expr_id))\n }\n \n pub(crate) fn resolver_for_scope(\n     db: &impl HirDatabase,\n-    owner: DefWithBody,\n+    owner: DefWithBodyId,\n     scope_id: Option<ScopeId>,\n ) -> Resolver {\n-    let mut r = owner.resolver(db);\n-    let scopes = owner.expr_scopes(db);\n+    let mut r = DefWithBody::from(owner).resolver(db);\n+    let scopes = db.expr_scopes(owner);\n     let scope_chain = scopes.scope_chain(scope_id).collect::<Vec<_>>();\n     for scope in scope_chain.into_iter().rev() {\n-        r = r.push_expr_scope(owner.into(), Arc::clone(&scopes), scope);\n+        r = r.push_expr_scope(owner, Arc::clone(&scopes), scope);\n     }\n     r\n }"}, {"sha": "09df4f0aaa1159b0585ae5c026187bd33be2d809", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/621cf06156975f8bd75e35af46da034f72e11fad/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621cf06156975f8bd75e35af46da034f72e11fad/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=621cf06156975f8bd75e35af46da034f72e11fad", "patch": "@@ -160,7 +160,7 @@ impl SourceAnalyzer {\n                 None => scope_for(&scopes, &source_map, node),\n                 Some(offset) => scope_for_offset(&scopes, &source_map, node.with_value(offset)),\n             };\n-            let resolver = resolver_for_scope(db, def, scope);\n+            let resolver = resolver_for_scope(db, def.into(), scope);\n             SourceAnalyzer {\n                 resolver,\n                 body_owner: Some(def),\n@@ -260,11 +260,11 @@ impl SourceAnalyzer {\n                     let var = Local { parent: self.body_owner?, pat_id };\n                     PathResolution::Local(var)\n                 }\n-                ValueNs::Function(it) => PathResolution::Def(it.into()),\n-                ValueNs::Const(it) => PathResolution::Def(it.into()),\n-                ValueNs::Static(it) => PathResolution::Def(it.into()),\n-                ValueNs::Struct(it) => PathResolution::Def(it.into()),\n-                ValueNs::EnumVariant(it) => PathResolution::Def(it.into()),\n+                ValueNs::FunctionId(it) => PathResolution::Def(Function::from(it).into()),\n+                ValueNs::ConstId(it) => PathResolution::Def(Const::from(it).into()),\n+                ValueNs::StaticId(it) => PathResolution::Def(Static::from(it).into()),\n+                ValueNs::StructId(it) => PathResolution::Def(Struct::from(it).into()),\n+                ValueNs::EnumVariantId(it) => PathResolution::Def(EnumVariant::from(it).into()),\n             };\n             Some(res)\n         });"}, {"sha": "1ac2709f59c71470b568b6e6ade63bc46f04827a", "filename": "crates/ra_hir/src/ty/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/621cf06156975f8bd75e35af46da034f72e11fad/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621cf06156975f8bd75e35af46da034f72e11fad/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fexpr.rs?ref=621cf06156975f8bd75e35af46da034f72e11fad", "patch": "@@ -187,7 +187,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::Path(p) => {\n                 // FIXME this could be more efficient...\n-                let resolver = resolver_for_expr(self.db, self.owner, tgt_expr);\n+                let resolver = resolver_for_expr(self.db, self.owner.into(), tgt_expr);\n                 self.infer_path(&resolver, p, tgt_expr.into()).unwrap_or(Ty::Unknown)\n             }\n             Expr::Continue => Ty::simple(TypeCtor::Never),"}, {"sha": "55a5dbec764577dff419a23346db6d02a4015c6d", "filename": "crates/ra_hir/src/ty/infer/path.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/621cf06156975f8bd75e35af46da034f72e11fad/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/621cf06156975f8bd75e35af46da034f72e11fad/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer%2Fpath.rs?ref=621cf06156975f8bd75e35af46da034f72e11fad", "patch": "@@ -8,7 +8,7 @@ use crate::{\n     generics::HasGenericParams,\n     resolve::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n     ty::{method_resolution, Namespace, Substs, Ty, TypableDef, TypeWalk},\n-    AssocItem, Container, Name, Path,\n+    AssocItem, Container, Function, Name, Path,\n };\n \n impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n@@ -60,11 +60,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let ty = self.resolve_ty_as_possible(&mut vec![], ty);\n                 return Some(ty);\n             }\n-            ValueNs::Function(it) => it.into(),\n-            ValueNs::Const(it) => it.into(),\n-            ValueNs::Static(it) => it.into(),\n-            ValueNs::Struct(it) => it.into(),\n-            ValueNs::EnumVariant(it) => it.into(),\n+            ValueNs::FunctionId(it) => it.into(),\n+            ValueNs::ConstId(it) => it.into(),\n+            ValueNs::StaticId(it) => it.into(),\n+            ValueNs::StructId(it) => it.into(),\n+            ValueNs::EnumVariantId(it) => it.into(),\n         };\n \n         let mut ty = self.db.type_for_def(typable, Namespace::Values);\n@@ -160,8 +160,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             AssocItem::TypeAlias(_) => None,\n         })?;\n         let def = match item {\n-            AssocItem::Function(f) => ValueNs::Function(f),\n-            AssocItem::Const(c) => ValueNs::Const(c),\n+            AssocItem::Function(f) => ValueNs::FunctionId(f.id),\n+            AssocItem::Const(c) => ValueNs::ConstId(c.id),\n             AssocItem::TypeAlias(_) => unreachable!(),\n         };\n         let substs = Substs::build_for_def(self.db, item)\n@@ -193,8 +193,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             method_resolution::LookupMode::Path,\n             move |_ty, item| {\n                 let def = match item {\n-                    AssocItem::Function(f) => ValueNs::Function(f),\n-                    AssocItem::Const(c) => ValueNs::Const(c),\n+                    AssocItem::Function(f) => ValueNs::FunctionId(f.id),\n+                    AssocItem::Const(c) => ValueNs::ConstId(c.id),\n                     AssocItem::TypeAlias(_) => unreachable!(),\n                 };\n                 let substs = match item.container(self.db) {\n@@ -224,7 +224,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn find_self_types(&self, def: &ValueNs, actual_def_ty: Ty) -> Option<Substs> {\n-        if let ValueNs::Function(func) = def {\n+        if let ValueNs::FunctionId(func) = def {\n+            let func = Function::from(*func);\n             // We only do the infer if parent has generic params\n             let gen = func.generic_params(self.db);\n             if gen.count_parent_params() == 0 {"}]}