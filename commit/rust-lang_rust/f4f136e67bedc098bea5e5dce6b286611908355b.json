{"sha": "f4f136e67bedc098bea5e5dce6b286611908355b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZjEzNmU2N2JlZGMwOThiZWE1ZTVkY2U2YjI4NjYxMTkwODM1NWI=", "commit": {"author": {"name": "Arno Haase", "email": "arno.haase@haase-consulting.com", "date": "2019-09-17T10:09:07Z"}, "committer": {"name": "Arno Haase", "email": "arno.haase@haase-consulting.com", "date": "2019-09-17T10:09:07Z"}, "message": "newly phrased documentation for spin loop hints", "tree": {"sha": "c7f5f21a596967ae18d3318c8e019b4e7ccc6b9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7f5f21a596967ae18d3318c8e019b4e7ccc6b9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4f136e67bedc098bea5e5dce6b286611908355b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4f136e67bedc098bea5e5dce6b286611908355b", "html_url": "https://github.com/rust-lang/rust/commit/f4f136e67bedc098bea5e5dce6b286611908355b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4f136e67bedc098bea5e5dce6b286611908355b/comments", "author": null, "committer": null, "parents": [{"sha": "51c49e257322babe0426327102357877a9015f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/51c49e257322babe0426327102357877a9015f4d", "html_url": "https://github.com/rust-lang/rust/commit/51c49e257322babe0426327102357877a9015f4d"}], "stats": {"total": 49, "additions": 20, "deletions": 29}, "files": [{"sha": "3ea8b31fda6d0916fe4ce60eff96830161c31fc5", "filename": "src/libcore/hint.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f4f136e67bedc098bea5e5dce6b286611908355b/src%2Flibcore%2Fhint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f136e67bedc098bea5e5dce6b286611908355b/src%2Flibcore%2Fhint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhint.rs?ref=f4f136e67bedc098bea5e5dce6b286611908355b", "patch": "@@ -49,28 +49,16 @@ pub unsafe fn unreachable_unchecked() -> ! {\n     intrinsics::unreachable()\n }\n \n-/// Signals the processor that it is entering a busy-wait spin-loop.\n+/// Emits a machine instruction hinting to the processor that it is running in busy-wait\n+/// spin-loop (\"spin lock\").\n ///\n-/// Upon receiving spin-loop signal the processor can optimize its behavior by, for example, saving\n-/// power or switching hyper-threads.\n-///\n-/// This function is different than [`std::thread::yield_now`] which directly yields to the\n-/// system's scheduler, whereas `spin_loop` only signals the processor that it is entering a\n-/// busy-wait spin-loop without yielding control to the system's scheduler.\n-///\n-/// Using a busy-wait spin-loop with `spin_loop` is ideally used in situations where a\n-/// contended lock is held by another thread executed on a different CPU or core and where the\n-/// waiting times are relatively small. Because entering busy-wait spin-loop does not trigger the\n-/// system's scheduler, no overhead for switching threads occurs. However, if the thread holding the\n-/// contended lock is running on the same CPU or core, the spin-loop is likely to occupy an entire\n-/// CPU slice before switching to the thread that holds the lock. If the contending lock is held by\n-/// a thread on the same CPU or core or if the waiting times for acquiring the lock are longer, it\n-/// is often better to use [`std::thread::yield_now`].\n+/// For a discussion of different locking strategies and their trade-offs, see\n+/// [`core::sync::atomic::spin_loop_hint`].\n ///\n /// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n /// do anything at all.\n ///\n-/// [`std::thread::yield_now`]: ../../std/thread/fn.yield_now.html\n+/// [`core::sync::atomic::spin_loop_hint`]: ./sync/atomic/fn.spin_loop_hint.html\n #[inline]\n #[unstable(feature = \"renamed_spin_loop\", issue = \"55002\")]\n pub fn spin_loop() {"}, {"sha": "63ee9a42a0f72c219c9f5589678c4832935b6820", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f4f136e67bedc098bea5e5dce6b286611908355b/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4f136e67bedc098bea5e5dce6b286611908355b/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=f4f136e67bedc098bea5e5dce6b286611908355b", "patch": "@@ -124,28 +124,31 @@ use crate::fmt;\n \n use crate::hint::spin_loop;\n \n-/// Signals the processor that it is entering a busy-wait spin-loop.\n+/// Signals the processor that it is inside a busy-wait spin-loop (\"spin lock\").\n ///\n /// Upon receiving spin-loop signal the processor can optimize its behavior by, for example, saving\n /// power or switching hyper-threads.\n ///\n-/// This function is different than [`std::thread::yield_now`] which directly yields to the\n-/// system's scheduler, whereas `spin_loop_hint` only signals the processor that it is entering a\n-/// busy-wait spin-loop without yielding control to the system's scheduler.\n+/// This function is different from [`std::thread::yield_now`] which directly yields to the\n+/// system's scheduler, whereas `spin_loop_hint` does not interact with the operating system.\n ///\n-/// Using a busy-wait spin-loop with `spin_loop_hint` is ideally used in situations where a\n-/// contended lock is held by another thread executed on a different CPU or core and where the\n-/// waiting times are relatively small. Because entering busy-wait spin-loop does not trigger the\n-/// system's scheduler, no overhead for switching threads occurs. However, if the thread holding the\n-/// contended lock is running on the same CPU or core, the spin-loop is likely to occupy an entire\n-/// CPU slice before switching to the thread that holds the lock. If the contending lock is held by\n-/// a thread on the same CPU or core or if the waiting times for acquiring the lock are longer, it\n-/// is often better to use [`std::thread::yield_now`].\n+/// Spin locks can be very efficient for short lock durations because they do not involve context\n+/// switches or interaction with the operating system. For long lock durations they become wasteful\n+/// however because they use CPU cycles for the entire lock duration, and using a\n+/// [`std::sync::Mutex`] is likely the better approach. If actively spinning for a long time is\n+/// required, e.g. because code polls a non-blocking API, calling [`std::thread::yield_now`]\n+/// or [`std::thread::sleep`] may be the best option.\n+///\n+/// **Note**: Spin locks are based on the underlying assumption that another thread will release\n+/// the lock 'soon'. In order for this to work, that other thread must run on a different CPU or\n+/// core (at least potentially). Spin locks do not work efficiently on single CPU / core platforms.\n ///\n /// **Note**: On platforms that do not support receiving spin-loop hints this function does not\n /// do anything at all.\n ///\n /// [`std::thread::yield_now`]: ../../../std/thread/fn.yield_now.html\n+/// [`std::thread::sleep`]: ../../../std/thread/fn.sleep.html\n+/// [`std::sync::Mutex`]: ../../../std/sync/Mutex.html\n #[inline]\n #[stable(feature = \"spin_loop_hint\", since = \"1.24.0\")]\n pub fn spin_loop_hint() {"}]}