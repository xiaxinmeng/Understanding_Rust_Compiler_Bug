{"sha": "3b229f144160067409dd9d321748ab7ae77bd99c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMjI5ZjE0NDE2MDA2NzQwOWRkOWQzMjE3NDhhYjdhZTc3YmQ5OWM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-27T09:02:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T08:19:57Z"}, "message": "check that ptr is valid already when doing Deref, not only when doing the access", "tree": {"sha": "4c0bd1ea0f9effa11d2dd6b0b2be270e68ca39ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c0bd1ea0f9effa11d2dd6b0b2be270e68ca39ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b229f144160067409dd9d321748ab7ae77bd99c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b229f144160067409dd9d321748ab7ae77bd99c", "html_url": "https://github.com/rust-lang/rust/commit/3b229f144160067409dd9d321748ab7ae77bd99c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b229f144160067409dd9d321748ab7ae77bd99c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a239ef4ded03d155c72b68b5a2dd7aff013e141", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a239ef4ded03d155c72b68b5a2dd7aff013e141", "html_url": "https://github.com/rust-lang/rust/commit/9a239ef4ded03d155c72b68b5a2dd7aff013e141"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "e90fc28a521b6032067f8d89ed07c7cd8b9292e8", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b229f144160067409dd9d321748ab7ae77bd99c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b229f144160067409dd9d321748ab7ae77bd99c/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=3b229f144160067409dd9d321748ab7ae77bd99c", "patch": "@@ -304,7 +304,16 @@ where\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         let val = self.read_immediate(src)?;\n         trace!(\"deref to {} on {:?}\", val.layout.ty, *val);\n-        self.ref_to_mplace(val)\n+        let mut place = self.ref_to_mplace(val)?;\n+        let (size, align) = self.size_and_align_of_mplace(place)?\n+            .unwrap_or((place.layout.size, place.layout.align.abi));\n+        assert!(place.mplace.align <= align, \"dynamic alignment less strict than static one?\");\n+        place.mplace.align = align; // maximally strict checking\n+        // When dereferencing a pointer, it must be non-NULL, aligned, and live.\n+        if let Some(ptr) = self.check_mplace_access(place, Some(size))? {\n+            place.mplace.ptr = ptr.into();\n+        }\n+        Ok(place)\n     }\n \n     /// Check if the given place is good for memory access with the given"}]}