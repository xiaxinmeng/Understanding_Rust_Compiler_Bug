{"sha": "26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZTYxZGQ4MjY1ZDU2ODBmN2FjNDBmMzRiMGJkMWM5YzI4YmFhZjA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-05-04T02:06:52Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-01T16:01:09Z"}, "message": "rustc: replace Res in hir::Upvar with only Local/Upvar data.", "tree": {"sha": "f00f2d7e0c95c367552a58ab1fe7b1df7a787094", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f00f2d7e0c95c367552a58ab1fe7b1df7a787094"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "html_url": "https://github.com/rust-lang/rust/commit/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd3f21bc7dc3d2d1a44367618940701ab308f7d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd3f21bc7dc3d2d1a44367618940701ab308f7d2", "html_url": "https://github.com/rust-lang/rust/commit/cd3f21bc7dc3d2d1a44367618940701ab308f7d2"}], "stats": {"total": 82, "additions": 44, "deletions": 38}, "files": [{"sha": "bdae04ae478406b7f681637c83e8c30113f7d3db", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "patch": "@@ -2495,26 +2495,24 @@ impl ForeignItemKind {\n #[derive(Debug, Copy, Clone, RustcEncodable, RustcDecodable, HashStable)]\n pub struct Upvar<Id = HirId> {\n     /// The variable being captured.\n-    pub res: Res<Id>,\n+    pub var_id: Id,\n+\n+    /// The parent closure, if this is not a direct capture,\n+    /// and the index within that closure's capture list.\n+    pub parent: Option<(ast::NodeId, usize)>,\n \n     // First span where it is accessed (there can be multiple).\n     pub span: Span\n }\n \n impl<Id: fmt::Debug + Copy> Upvar<Id> {\n-    pub fn map_id<R>(self, map: impl FnMut(Id) -> R) -> Upvar<R> {\n+    pub fn map_id<R>(self, map: impl FnOnce(Id) -> R) -> Upvar<R> {\n         Upvar {\n-            res: self.res.map_id(map),\n+            var_id: map(self.var_id),\n+            parent: self.parent,\n             span: self.span,\n         }\n     }\n-\n-    pub fn var_id(&self) -> Id {\n-        match self.res {\n-            Res::Local(id) | Res::Upvar(id, ..) => id,\n-            _ => bug!(\"Upvar::var_id: bad res ({:?})\", self.res)\n-        }\n-    }\n }\n \n pub type UpvarMap = NodeMap<Vec<Upvar<ast::NodeId>>>;"}, {"sha": "fd9233acbaea7c5acdcb5a986e892b6d439c5f9e", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "patch": "@@ -925,9 +925,8 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n         let closure_def_id = self.tcx().hir().local_def_id_from_hir_id(closure_expr.hir_id);\n         if let Some(upvars) = self.tcx().upvars(closure_def_id) {\n             for upvar in upvars.iter() {\n-                let var_hir_id = upvar.var_id();\n                 let upvar_id = ty::UpvarId {\n-                    var_path: ty::UpvarPath { hir_id: var_hir_id },\n+                    var_path: ty::UpvarPath { hir_id: upvar.var_id },\n                     closure_expr_id: closure_def_id.to_local(),\n                 };\n                 let upvar_capture = self.mc.tables.upvar_capture(upvar_id);\n@@ -962,9 +961,12 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n                         -> mc::McResult<mc::cmt_<'tcx>> {\n         // Create the cmt for the variable being borrowed, from the\n         // caller's perspective\n-        let var_hir_id = upvar.var_id();\n-        let var_ty = self.mc.node_ty(var_hir_id)?;\n-        self.mc.cat_res(closure_hir_id, closure_span, var_ty, upvar.res)\n+        let var_ty = self.mc.node_ty(upvar.var_id)?;\n+        let res = upvar.parent.map_or(\n+            Res::Local(upvar.var_id),\n+            |(closure_node_id, i)| Res::Upvar(upvar.var_id, i, closure_node_id),\n+        );\n+        self.mc.cat_res(closure_hir_id, closure_span, var_ty, res)\n     }\n }\n "}, {"sha": "e19d713d561055afb98d6308f6e76d98b3572af6", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "patch": "@@ -486,9 +486,9 @@ fn visit_expr<'a, 'tcx>(ir: &mut IrMaps<'a, 'tcx>, expr: &'tcx Expr) {\n         let closure_def_id = ir.tcx.hir().local_def_id_from_hir_id(expr.hir_id);\n         if let Some(upvars) = ir.tcx.upvars(closure_def_id) {\n             call_caps.extend(upvars.iter().filter_map(|upvar| {\n-                if let Res::Local(rv) = upvar.res {\n+                if upvar.parent.is_none() {\n                     let upvar_ln = ir.add_live_node(UpvarNode(upvar.span));\n-                    Some(CaptureInfo { ln: upvar_ln, var_hid: rv })\n+                    Some(CaptureInfo { ln: upvar_ln, var_hid: upvar.var_id })\n                 } else {\n                     None\n                 }"}, {"sha": "1f29b370d272930875d8d016766838b47b345bc6", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "patch": "@@ -2563,7 +2563,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n                             if let Some(upvars) = tcx.upvars(def_id) {\n                                 for (upvar, place) in upvars.iter().zip(places) {\n-                                    let var_name = tcx.hir().name_by_hir_id(upvar.var_id());\n+                                    let var_name = tcx.hir().name_by_hir_id(upvar.var_id);\n                                     struct_fmt.field(&var_name.as_str(), place);\n                                 }\n                             }\n@@ -2582,7 +2582,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n \n                             if let Some(upvars) = tcx.upvars(def_id) {\n                                 for (upvar, place) in upvars.iter().zip(places) {\n-                                    let var_name = tcx.hir().name_by_hir_id(upvar.var_id());\n+                                    let var_name = tcx.hir().name_by_hir_id(upvar.var_id);\n                                     struct_fmt.field(&var_name.as_str(), place);\n                                 }\n                             }"}, {"sha": "03c7226c1afe59175fae3123e8feaab290bc3eee", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "patch": "@@ -594,7 +594,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n                         p!(\n                             write(\"{}{}:\",\n                                     sep,\n-                                    self.tcx().hir().name_by_hir_id(upvar.var_id())),\n+                                    self.tcx().hir().name_by_hir_id(upvar.var_id)),\n                             print(upvar_ty));\n                         sep = \", \";\n                     }\n@@ -637,7 +637,7 @@ pub trait PrettyPrinter<'gcx: 'tcx, 'tcx>:\n                         p!(\n                             write(\"{}{}:\",\n                                     sep,\n-                                    self.tcx().hir().name_by_hir_id(upvar.var_id())),\n+                                    self.tcx().hir().name_by_hir_id(upvar.var_id)),\n                             print(upvar_ty));\n                         sep = \", \";\n                     }"}, {"sha": "74601cc389184814d41d6d2658d2a532a064d1ac", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "patch": "@@ -350,7 +350,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     // be borrowck'ing it, so we can just unwrap:\n                     let upvar = self.infcx.tcx.upvars(def_id).unwrap()[field.index()];\n \n-                    self.infcx.tcx.hir().name_by_hir_id(upvar.var_id()).to_string()\n+                    self.infcx.tcx.hir().name_by_hir_id(upvar.var_id).to_string()\n                 }\n                 _ => {\n                     // Might need a revision when the fields in trait RFC is implemented"}, {"sha": "354aec442ed897e0bc8d45fabe25bc292205312c", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "patch": "@@ -1181,19 +1181,22 @@ fn capture_upvar<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                                    upvar: &hir::Upvar,\n                                    upvar_ty: Ty<'tcx>)\n                                    -> ExprRef<'tcx> {\n-    let var_hir_id = upvar.var_id();\n     let upvar_id = ty::UpvarId {\n-        var_path: ty::UpvarPath { hir_id: var_hir_id },\n+        var_path: ty::UpvarPath { hir_id: upvar.var_id },\n         closure_expr_id: cx.tcx.hir().local_def_id_from_hir_id(closure_expr.hir_id).to_local(),\n     };\n     let upvar_capture = cx.tables().upvar_capture(upvar_id);\n     let temp_lifetime = cx.region_scope_tree.temporary_scope(closure_expr.hir_id.local_id);\n-    let var_ty = cx.tables().node_type(var_hir_id);\n+    let var_ty = cx.tables().node_type(upvar.var_id);\n+    let upvar_res = upvar.parent.map_or(\n+        Res::Local(upvar.var_id),\n+        |(closure_node_id, i)| Res::Upvar(upvar.var_id, i, closure_node_id),\n+    );\n     let captured_var = Expr {\n         temp_lifetime,\n         ty: var_ty,\n         span: closure_expr.span,\n-        kind: convert_var(cx, closure_expr, upvar.res),\n+        kind: convert_var(cx, closure_expr, upvar_res),\n     };\n     match upvar_capture {\n         ty::UpvarCapture::ByValue => captured_var.to_ref(),"}, {"sha": "67ed6a773056bd7cb0a4f42312dc5ff1df611df1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "patch": "@@ -4040,7 +4040,7 @@ impl<'a> Resolver<'a> {\n             Res::Upvar(..) => {\n                 span_bug!(span, \"unexpected {:?} in bindings\", res)\n             }\n-            Res::Local(node_id) => {\n+            Res::Local(var_id) => {\n                 use ResolutionError::*;\n                 let mut res_err = None;\n \n@@ -4051,27 +4051,31 @@ impl<'a> Resolver<'a> {\n                             // Nothing to do. Continue.\n                         }\n                         ClosureRibKind(function_id) => {\n-                            let prev_res = res;\n+                            let parent = match res {\n+                                Res::Upvar(_, i, closure) => Some((closure, i)),\n+                                _ => None,\n+                            };\n \n                             let seen = self.upvars_seen\n                                            .entry(function_id)\n                                            .or_default();\n-                            if let Some(&index) = seen.get(&node_id) {\n-                                res = Res::Upvar(node_id, index, function_id);\n+                            if let Some(&index) = seen.get(&var_id) {\n+                                res = Res::Upvar(var_id, index, function_id);\n                                 continue;\n                             }\n                             let vec = self.upvars\n                                           .entry(function_id)\n                                           .or_default();\n                             let depth = vec.len();\n-                            res = Res::Upvar(node_id, depth, function_id);\n+                            res = Res::Upvar(var_id, depth, function_id);\n \n                             if record_used {\n                                 vec.push(Upvar {\n-                                    res: prev_res,\n+                                    var_id,\n+                                    parent,\n                                     span,\n                                 });\n-                                seen.insert(node_id, depth);\n+                                seen.insert(var_id, depth);\n                             }\n                         }\n                         ItemRibKind | FnItemRibKind | AssocItemRibKind => {"}, {"sha": "a4f9ede37c9dbeed22beaf3db2588cf16a08fc82", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=26e61dd8265d5680f7ac40f34b0bd1c9c28baaf0", "patch": "@@ -126,7 +126,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             for upvar in upvars.iter() {\n                 let upvar_id = ty::UpvarId {\n                     var_path: ty::UpvarPath {\n-                        hir_id: upvar.var_id(),\n+                        hir_id: upvar.var_id,\n                     },\n                     closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n                 };\n@@ -250,17 +250,16 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             upvars\n                 .iter()\n                 .map(|upvar| {\n-                    let var_hir_id = upvar.var_id();\n-                    let upvar_ty = self.node_ty(var_hir_id);\n+                    let upvar_ty = self.node_ty(upvar.var_id);\n                     let upvar_id = ty::UpvarId {\n-                        var_path: ty::UpvarPath { hir_id: var_hir_id },\n+                        var_path: ty::UpvarPath { hir_id: upvar.var_id },\n                         closure_expr_id: LocalDefId::from_def_id(closure_def_id),\n                     };\n                     let capture = self.tables.borrow().upvar_capture(upvar_id);\n \n                     debug!(\n                         \"var_id={:?} upvar_ty={:?} capture={:?}\",\n-                        var_hir_id, upvar_ty, capture\n+                        upvar.var_id, upvar_ty, capture\n                     );\n \n                     match capture {"}]}