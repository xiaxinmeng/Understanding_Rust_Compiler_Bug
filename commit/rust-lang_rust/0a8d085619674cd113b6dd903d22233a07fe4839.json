{"sha": "0a8d085619674cd113b6dd903d22233a07fe4839", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhOGQwODU2MTk2NzRjZDExM2I2ZGQ5MDNkMjIyMzNhMDdmZTQ4Mzk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-30T21:38:50Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-30T21:38:50Z"}, "message": "remove backtraces from Cancelled\n\nHopefully we won't need them for debugging. If we do need them, it\nshould be easy to add back.", "tree": {"sha": "ed180196ff6cfc2cfa7dd71f0728decbccbd11b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed180196ff6cfc2cfa7dd71f0728decbccbd11b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a8d085619674cd113b6dd903d22233a07fe4839", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8d085619674cd113b6dd903d22233a07fe4839", "html_url": "https://github.com/rust-lang/rust/commit/0a8d085619674cd113b6dd903d22233a07fe4839", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a8d085619674cd113b6dd903d22233a07fe4839/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dee7c3b0de9650216bd761e587d0e1d4cca52981", "url": "https://api.github.com/repos/rust-lang/rust/commits/dee7c3b0de9650216bd761e587d0e1d4cca52981", "html_url": "https://github.com/rust-lang/rust/commit/dee7c3b0de9650216bd761e587d0e1d4cca52981"}], "stats": {"total": 53, "additions": 5, "deletions": 48}, "files": [{"sha": "39dd6a3cfc829ca14f59082025b44f2584f4fb29", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a8d085619674cd113b6dd903d22233a07fe4839/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0a8d085619674cd113b6dd903d22233a07fe4839/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0a8d085619674cd113b6dd903d22233a07fe4839", "patch": "@@ -697,7 +697,6 @@ dependencies = [\n name = \"ra_db\"\n version = \"0.1.0\"\n dependencies = [\n- \"backtrace 0.3.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ra_editor 0.1.0\",\n  \"ra_syntax 0.1.0\","}, {"sha": "ecc56d9532eac122f39be368fb914a7eddff7b69", "filename": "crates/ra_db/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a8d085619674cd113b6dd903d22233a07fe4839/crates%2Fra_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0a8d085619674cd113b6dd903d22233a07fe4839/crates%2Fra_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2FCargo.toml?ref=0a8d085619674cd113b6dd903d22233a07fe4839", "patch": "@@ -5,7 +5,6 @@ version = \"0.1.0\"\n authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n \n [dependencies]\n-backtrace = \"0.3.1\"\n relative-path = \"0.4.0\"\n salsa = \"0.9.0\"\n rustc-hash = \"1.0\""}, {"sha": "56ce27bff73b83e50657134684b61b53c2b89554", "filename": "crates/ra_db/src/cancelation.rs", "status": "modified", "additions": 4, "deletions": 45, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/0a8d085619674cd113b6dd903d22233a07fe4839/crates%2Fra_db%2Fsrc%2Fcancelation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8d085619674cd113b6dd903d22233a07fe4839/crates%2Fra_db%2Fsrc%2Fcancelation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Fcancelation.rs?ref=0a8d085619674cd113b6dd903d22233a07fe4839", "patch": "@@ -15,29 +15,17 @@\n //! any background processing (this bit is handled by salsa, see\n //! `BaseDatabase::check_canceled` method).\n \n-use std::{\n-    cmp,\n-    hash::{Hash, Hasher},\n-    sync::Arc,\n-};\n-\n-use backtrace::Backtrace;\n-use parking_lot::Mutex;\n-\n /// An \"error\" signifing that the operation was canceled.\n-#[derive(Clone)]\n+#[derive(Clone, PartialEq, Eq, Hash)]\n pub struct Canceled {\n-    backtrace: Arc<Mutex<Backtrace>>,\n+    _private: (),\n }\n \n pub type Cancelable<T> = Result<T, Canceled>;\n \n impl Canceled {\n     pub(crate) fn new() -> Canceled {\n-        let bt = Backtrace::new_unresolved();\n-        Canceled {\n-            backtrace: Arc::new(Mutex::new(bt)),\n-        }\n+        Canceled { _private: () }\n     }\n }\n \n@@ -49,37 +37,8 @@ impl std::fmt::Display for Canceled {\n \n impl std::fmt::Debug for Canceled {\n     fn fmt(&self, fmt: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        let mut bt = self.backtrace.lock();\n-        let bt: &mut Backtrace = &mut *bt;\n-        bt.resolve();\n-        write!(fmt, \"canceled at:\\n{:?}\", bt)\n+        write!(fmt, \"Canceled\")\n     }\n }\n \n impl std::error::Error for Canceled {}\n-\n-impl PartialEq for Canceled {\n-    fn eq(&self, _: &Canceled) -> bool {\n-        true\n-    }\n-}\n-\n-impl Eq for Canceled {}\n-\n-impl Hash for Canceled {\n-    fn hash<H: Hasher>(&self, hasher: &mut H) {\n-        ().hash(hasher)\n-    }\n-}\n-\n-impl cmp::Ord for Canceled {\n-    fn cmp(&self, _: &Canceled) -> cmp::Ordering {\n-        cmp::Ordering::Equal\n-    }\n-}\n-\n-impl cmp::PartialOrd for Canceled {\n-    fn partial_cmp(&self, other: &Canceled) -> Option<cmp::Ordering> {\n-        Some(self.cmp(other))\n-    }\n-}"}, {"sha": "d425b6733a97c969c0e0860cb200ee2ec7d1b238", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a8d085619674cd113b6dd903d22233a07fe4839/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a8d085619674cd113b6dd903d22233a07fe4839/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=0a8d085619674cd113b6dd903d22233a07fe4839", "patch": "@@ -432,7 +432,7 @@ impl<'a> PoolDispatcher<'a> {\n                                     RawResponse::err(\n                                         id,\n                                         ErrorCode::ContentModified as i32,\n-                                        format!(\"content modified: {:?}\", e),\n+                                        \"content modified\".to_string(),\n                                     )\n                                 } else {\n                                     RawResponse::err("}]}