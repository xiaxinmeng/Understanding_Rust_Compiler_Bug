{"sha": "7092af7ee317a42c8ad7d9f8d02bb9ff64891949", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwOTJhZjdlZTMxN2E0MmM4YWQ3ZDlmOGQwMmJiOWZmNjQ4OTE5NDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-01T18:15:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-01T23:48:26Z"}, "message": "Normalize predicates found on the impl", "tree": {"sha": "030c23ecbf3d5d3f9bb0860266740ecbac5f3b70", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/030c23ecbf3d5d3f9bb0860266740ecbac5f3b70"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7092af7ee317a42c8ad7d9f8d02bb9ff64891949", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7092af7ee317a42c8ad7d9f8d02bb9ff64891949", "html_url": "https://github.com/rust-lang/rust/commit/7092af7ee317a42c8ad7d9f8d02bb9ff64891949", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7092af7ee317a42c8ad7d9f8d02bb9ff64891949/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39d74026663597a8d4ad0ab04e6d117bf9fd6ad4", "url": "https://api.github.com/repos/rust-lang/rust/commits/39d74026663597a8d4ad0ab04e6d117bf9fd6ad4", "html_url": "https://github.com/rust-lang/rust/commit/39d74026663597a8d4ad0ab04e6d117bf9fd6ad4"}], "stats": {"total": 58, "additions": 49, "deletions": 9}, "files": [{"sha": "c84f31bf6c3bcad624c7c94a5f1aa1a58dab54b0", "filename": "src/librustc/middle/traits/project.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7092af7ee317a42c8ad7d9f8d02bb9ff64891949/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092af7ee317a42c8ad7d9f8d02bb9ff64891949/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fproject.rs?ref=7092af7ee317a42c8ad7d9f8d02bb9ff64891949", "patch": "@@ -102,7 +102,7 @@ pub fn poly_project_and_unify_type<'cx,'tcx>(\n \n /// Compute result of projecting an associated type and unify it with\n /// `obligation.predicate.ty` (if we can).\n-pub fn project_and_unify_type<'cx,'tcx>(\n+fn project_and_unify_type<'cx,'tcx>(\n     selcx: &mut SelectionContext<'cx,'tcx>,\n     obligation: &ProjectionObligation<'tcx>)\n     -> Result<Option<Vec<PredicateObligation<'tcx>>>, MismatchedProjectionTypes<'tcx>>\n@@ -135,9 +135,19 @@ pub fn normalize<'a,'b,'tcx,T>(selcx: &'a mut SelectionContext<'b,'tcx>,\n                                cause: ObligationCause<'tcx>,\n                                value: &T)\n                                -> Normalized<'tcx, T>\n-    where T : TypeFoldable<'tcx> + HasProjectionTypes + Clone\n+    where T : TypeFoldable<'tcx> + HasProjectionTypes + Clone + Repr<'tcx>\n {\n-    let mut normalizer = AssociatedTypeNormalizer::new(selcx, cause, 0);\n+    normalize_with_depth(selcx, cause, 0, value)\n+}\n+\n+pub fn normalize_with_depth<'a,'b,'tcx,T>(selcx: &'a mut SelectionContext<'b,'tcx>,\n+                                          cause: ObligationCause<'tcx>,\n+                                          depth: uint,\n+                                          value: &T)\n+                                          -> Normalized<'tcx, T>\n+    where T : TypeFoldable<'tcx> + HasProjectionTypes + Clone + Repr<'tcx>\n+{\n+    let mut normalizer = AssociatedTypeNormalizer::new(selcx, cause, depth);\n     let result = normalizer.fold(value);\n     Normalized {\n         value: result,\n@@ -278,9 +288,10 @@ fn opt_normalize_projection_type<'a,'b,'tcx>(\n             // an impl, where-clause etc) and hence we must\n             // re-normalize it\n \n-            debug!(\"normalize_projection_type: projected_ty={} depth={}\",\n+            debug!(\"normalize_projection_type: projected_ty={} depth={} obligations={}\",\n                    projected_ty.repr(selcx.tcx()),\n-                   depth);\n+                   depth,\n+                   obligations.repr(selcx.tcx()));\n \n             if ty::type_has_projection(projected_ty) {\n                 let tcx = selcx.tcx();\n@@ -644,3 +655,20 @@ impl<'tcx> Repr<'tcx> for ProjectionTyCandidate<'tcx> {\n         }\n     }\n }\n+\n+impl<'tcx, T: TypeFoldable<'tcx>> TypeFoldable<'tcx> for Normalized<'tcx, T> {\n+    fn fold_with<F: TypeFolder<'tcx>>(&self, folder: &mut F) -> Normalized<'tcx, T> {\n+        Normalized {\n+            value: self.value.fold_with(folder),\n+            obligations: self.obligations.fold_with(folder),\n+        }\n+    }\n+}\n+\n+impl<'tcx, T:Repr<'tcx>> Repr<'tcx> for Normalized<'tcx, T> {\n+    fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n+        format!(\"Normalized({},{})\",\n+                self.value.repr(tcx),\n+                self.obligations.repr(tcx))\n+    }\n+}"}, {"sha": "3837cb9722807aa3fbfb12ea66ab9cea8d690b8d", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7092af7ee317a42c8ad7d9f8d02bb9ff64891949/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7092af7ee317a42c8ad7d9f8d02bb9ff64891949/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=7092af7ee317a42c8ad7d9f8d02bb9ff64891949", "patch": "@@ -18,6 +18,7 @@ use self::BuiltinBoundConditions::*;\n use self::EvaluationResult::*;\n \n use super::{DerivedObligationCause};\n+use super::{project};\n use super::{PredicateObligation, Obligation, TraitObligation, ObligationCause};\n use super::{ObligationCauseCode, BuiltinDerivedObligation};\n use super::{SelectionError, Unimplemented, Overflow, OutputTypeParameterMismatch};\n@@ -29,7 +30,7 @@ use super::{util};\n \n use middle::fast_reject;\n use middle::mem_categorization::Typer;\n-use middle::subst::{Subst, Substs, VecPerParamSpace};\n+use middle::subst::{Subst, Substs, TypeSpace, VecPerParamSpace};\n use middle::ty::{mod, AsPredicate, RegionEscape, ToPolyTraitRef, Ty};\n use middle::infer;\n use middle::infer::{InferCtxt, TypeFreshener};\n@@ -2100,7 +2101,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n-    fn impl_predicates(&self,\n+    fn impl_predicates(&mut self,\n                        cause: ObligationCause<'tcx>,\n                        recursion_depth: uint,\n                        impl_def_id: ast::DefId,\n@@ -2111,8 +2112,19 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     {\n         let impl_generics = ty::lookup_item_type(self.tcx(), impl_def_id).generics;\n         let bounds = impl_generics.to_bounds(self.tcx(), impl_substs);\n-        let bounds = self.infcx().plug_leaks(skol_map, snapshot, &bounds);\n-        util::predicates_for_generics(self.tcx(), cause, recursion_depth, &bounds)\n+        let normalized_bounds =\n+            project::normalize_with_depth(self, cause.clone(), recursion_depth, &bounds);\n+        let normalized_bounds =\n+            self.infcx().plug_leaks(skol_map, snapshot, &normalized_bounds);\n+        let mut impl_obligations =\n+            util::predicates_for_generics(self.tcx(),\n+                                          cause,\n+                                          recursion_depth,\n+                                          &normalized_bounds.value);\n+        for obligation in normalized_bounds.obligations.into_iter() {\n+            impl_obligations.push(TypeSpace, obligation);\n+        }\n+        impl_obligations\n     }\n \n     fn fn_family_trait_kind(&self,"}]}