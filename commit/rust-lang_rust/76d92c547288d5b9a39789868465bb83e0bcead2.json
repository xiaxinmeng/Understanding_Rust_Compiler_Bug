{"sha": "76d92c547288d5b9a39789868465bb83e0bcead2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZDkyYzU0NzI4OGQ1YjlhMzk3ODk4Njg0NjViYjgzZTBiY2VhZDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-09-27T04:53:40Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-10-01T21:24:34Z"}, "message": "librustc: Inline cross-crate tuple struct constructors", "tree": {"sha": "0411918795a03ddad994268e8b30b5d9983cfbac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0411918795a03ddad994268e8b30b5d9983cfbac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76d92c547288d5b9a39789868465bb83e0bcead2", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76d92c547288d5b9a39789868465bb83e0bcead2", "html_url": "https://github.com/rust-lang/rust/commit/76d92c547288d5b9a39789868465bb83e0bcead2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76d92c547288d5b9a39789868465bb83e0bcead2/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8cdabc32fc7c6a5c3b01ef24340bc2f4b1ae359", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8cdabc32fc7c6a5c3b01ef24340bc2f4b1ae359", "html_url": "https://github.com/rust-lang/rust/commit/c8cdabc32fc7c6a5c3b01ef24340bc2f4b1ae359"}], "stats": {"total": 35, "additions": 30, "deletions": 5}, "files": [{"sha": "e88ee701051958f23c55bd92c624b6c61c25cb1e", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/76d92c547288d5b9a39789868465bb83e0bcead2/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d92c547288d5b9a39789868465bb83e0bcead2/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=76d92c547288d5b9a39789868465bb83e0bcead2", "patch": "@@ -747,7 +747,8 @@ fn encode_info_for_struct_ctor(ecx: &EncodeContext,\n                                path: &[ast_map::path_elt],\n                                name: ast::Ident,\n                                ctor_id: NodeId,\n-                               index: @mut ~[entry<i64>]) {\n+                               index: @mut ~[entry<i64>],\n+                               struct_id: NodeId) {\n     index.push(entry { val: ctor_id as i64, pos: ebml_w.writer.tell() });\n \n     ebml_w.start_tag(tag_items_data_item);\n@@ -756,6 +757,7 @@ fn encode_info_for_struct_ctor(ecx: &EncodeContext,\n     encode_name(ecx, ebml_w, name);\n     encode_type(ecx, ebml_w, node_id_to_type(ecx.tcx, ctor_id));\n     encode_path(ecx, ebml_w, path, ast_map::path_name(name));\n+    encode_parent_item(ebml_w, local_def(struct_id));\n \n     if ecx.item_symbols.contains_key(&ctor_id) {\n         encode_symbol(ecx, ebml_w, ctor_id);\n@@ -1032,6 +1034,8 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         needs to know*/\n         encode_struct_fields(ecx, ebml_w, struct_def);\n \n+        (ecx.encode_inlined_item)(ecx, ebml_w, path, ii_item(item));\n+\n         // Encode inherent implementations for this structure.\n         encode_inherent_implementations(ecx, ebml_w, def_id);\n \n@@ -1054,7 +1058,8 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                                         path,\n                                         item.ident,\n                                         ctor_id,\n-                                        index);\n+                                        index,\n+                                        def_id.node);\n         }\n       }\n       item_impl(_, ref opt_trait, ref ty, ref ast_methods) => {"}, {"sha": "41a835fcab957faa6a7802907c677186d3c2e667", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76d92c547288d5b9a39789868465bb83e0bcead2/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d92c547288d5b9a39789868465bb83e0bcead2/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=76d92c547288d5b9a39789868465bb83e0bcead2", "patch": "@@ -99,8 +99,17 @@ pub fn maybe_instantiate_inline(ccx: @mut CrateContext, fn_id: ast::DefId)\n                   ccx.external.insert(there.id, Some(here.id.node));\n               }\n             }\n+            ast::item_struct(ref struct_def, _) => {\n+              match struct_def.ctor_id {\n+                None => {}\n+                Some(ctor_id) => {\n+                    let _ = ccx.external.insert(fn_id, Some(ctor_id));\n+                    my_id = ctor_id;\n+                }\n+              }\n+            }\n             _ => ccx.sess.bug(\"maybe_instantiate_inline: item has a \\\n-                               non-enum parent\")\n+                               non-enum, non-struct parent\")\n           }\n           trans_item(ccx, item);\n           local_def(my_id)"}, {"sha": "b3d5e03331c90cef791a52355a4018ee730ce7b9", "filename": "src/libsyntax/ast_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76d92c547288d5b9a39789868465bb83e0bcead2/src%2Flibsyntax%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d92c547288d5b9a39789868465bb83e0bcead2/src%2Flibsyntax%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_map.rs?ref=76d92c547288d5b9a39789868465bb83e0bcead2", "patch": "@@ -403,9 +403,9 @@ pub fn map_decoded_item(diag: @mut span_handler,\n         diag: diag,\n     };\n \n-    // methods get added to the AST map when their impl is visited.  Since we\n+    // Methods get added to the AST map when their impl is visited.  Since we\n     // don't decode and instantiate the impl, but just the method, we have to\n-    // add it to the table now:\n+    // add it to the table now. Likewise with foreign items.\n     match *ii {\n         ii_item(*) => {} // fallthrough\n         ii_foreign(i) => {"}, {"sha": "f42eb89456d7f4463dfe2cb0f95010c2407cb849", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76d92c547288d5b9a39789868465bb83e0bcead2/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d92c547288d5b9a39789868465bb83e0bcead2/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=76d92c547288d5b9a39789868465bb83e0bcead2", "patch": "@@ -590,6 +590,17 @@ impl Visitor<()> for IdVisitor {\n         self.operation.visit_id(struct_field.node.id);\n         visit::walk_struct_field(self, struct_field, env)\n     }\n+\n+    fn visit_struct_def(&mut self,\n+                        struct_def: @struct_def,\n+                        ident: ast::Ident,\n+                        generics: &ast::Generics,\n+                        id: NodeId,\n+                        _: ()) {\n+        self.operation.visit_id(id);\n+        struct_def.ctor_id.map(|&ctor_id| self.operation.visit_id(ctor_id));\n+        visit::walk_struct_def(self, struct_def, ident, generics, id, ());\n+    }\n }\n \n pub fn visit_ids_for_inlined_item(item: &inlined_item,"}]}