{"sha": "34384b7a68b3a72fc96e5293de7c7486d2cceb92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0Mzg0YjdhNjhiM2E3MmZjOTZlNTI5M2RlN2M3NDg2ZDJjY2ViOTI=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-07-28T04:19:31Z"}, "committer": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-07-28T04:19:31Z"}, "message": "Add const_evaluatable_checked feature, change to_bitmask to use it, and fix existing std feature", "tree": {"sha": "98b84bf318a3c41def5ae4f87695e2041e063d2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98b84bf318a3c41def5ae4f87695e2041e063d2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34384b7a68b3a72fc96e5293de7c7486d2cceb92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34384b7a68b3a72fc96e5293de7c7486d2cceb92", "html_url": "https://github.com/rust-lang/rust/commit/34384b7a68b3a72fc96e5293de7c7486d2cceb92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34384b7a68b3a72fc96e5293de7c7486d2cceb92/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82e3405efe5ffd2bc214d32b581d5cfc1157eb8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/82e3405efe5ffd2bc214d32b581d5cfc1157eb8d", "html_url": "https://github.com/rust-lang/rust/commit/82e3405efe5ffd2bc214d32b581d5cfc1157eb8d"}], "stats": {"total": 401, "additions": 195, "deletions": 206}, "files": [{"sha": "764b199d5bf96a84f8b3625956d31222f8069df0", "filename": "crates/core_simd/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2FCargo.toml?ref=34384b7a68b3a72fc96e5293de7c7486d2cceb92", "patch": "@@ -10,8 +10,9 @@ categories = [\"hardware-support\", \"no-std\"]\n license = \"MIT OR Apache-2.0\"\n \n [features]\n-default = [\"std\"]\n+default = [\"std\", \"const_evaluatable_checked\"]\n std = []\n+const_evaluatable_checked = []\n \n [target.'cfg(target_arch = \"wasm32\")'.dev-dependencies.wasm-bindgen]\n version = \"0.2\""}, {"sha": "779575985ed9ed933b67cf4ea1b503e5201950e6", "filename": "crates/core_simd/examples/nbody.rs", "status": "modified", "additions": 151, "deletions": 142, "changes": 293, "blob_url": "https://github.com/rust-lang/rust/blob/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2Fexamples%2Fnbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2Fexamples%2Fnbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fexamples%2Fnbody.rs?ref=34384b7a68b3a72fc96e5293de7c7486d2cceb92", "patch": "@@ -1,169 +1,173 @@\n-#![feature(portable_simd)]\n+#![cfg_attr(feature = \"std\", feature(portable_simd))]\n \n /// Benchmarks game nbody code\n /// Taken from the `packed_simd` crate\n /// Run this benchmark with `cargo test --example nbody`\n-use core_simd::*;\n+#[cfg(feature = \"std\")]\n+mod nbody {\n+    use core_simd::*;\n \n-use std::f64::consts::PI;\n-const SOLAR_MASS: f64 = 4.0 * PI * PI;\n-const DAYS_PER_YEAR: f64 = 365.24;\n+    use std::f64::consts::PI;\n+    const SOLAR_MASS: f64 = 4.0 * PI * PI;\n+    const DAYS_PER_YEAR: f64 = 365.24;\n \n-#[derive(Debug, Clone, Copy)]\n-pub struct Body {\n-    pub x: f64x4,\n-    pub v: f64x4,\n-    pub mass: f64,\n-}\n+    #[derive(Debug, Clone, Copy)]\n+    struct Body {\n+        pub x: f64x4,\n+        pub v: f64x4,\n+        pub mass: f64,\n+    }\n \n-const N_BODIES: usize = 5;\n-const BODIES: [Body; N_BODIES] = [\n-    // sun:\n-    Body {\n-        x: f64x4::from_array([0., 0., 0., 0.]),\n-        v: f64x4::from_array([0., 0., 0., 0.]),\n-        mass: SOLAR_MASS,\n-    },\n-    // jupiter:\n-    Body {\n-        x: f64x4::from_array([\n-            4.84143144246472090e+00,\n-            -1.16032004402742839e+00,\n-            -1.03622044471123109e-01,\n-            0.,\n-        ]),\n-        v: f64x4::from_array([\n-            1.66007664274403694e-03 * DAYS_PER_YEAR,\n-            7.69901118419740425e-03 * DAYS_PER_YEAR,\n-            -6.90460016972063023e-05 * DAYS_PER_YEAR,\n-            0.,\n-        ]),\n-        mass: 9.54791938424326609e-04 * SOLAR_MASS,\n-    },\n-    // saturn:\n-    Body {\n-        x: f64x4::from_array([\n-            8.34336671824457987e+00,\n-            4.12479856412430479e+00,\n-            -4.03523417114321381e-01,\n-            0.,\n-        ]),\n-        v: f64x4::from_array([\n-            -2.76742510726862411e-03 * DAYS_PER_YEAR,\n-            4.99852801234917238e-03 * DAYS_PER_YEAR,\n-            2.30417297573763929e-05 * DAYS_PER_YEAR,\n-            0.,\n-        ]),\n-        mass: 2.85885980666130812e-04 * SOLAR_MASS,\n-    },\n-    // uranus:\n-    Body {\n-        x: f64x4::from_array([\n-            1.28943695621391310e+01,\n-            -1.51111514016986312e+01,\n-            -2.23307578892655734e-01,\n-            0.,\n-        ]),\n-        v: f64x4::from_array([\n-            2.96460137564761618e-03 * DAYS_PER_YEAR,\n-            2.37847173959480950e-03 * DAYS_PER_YEAR,\n-            -2.96589568540237556e-05 * DAYS_PER_YEAR,\n-            0.,\n-        ]),\n-        mass: 4.36624404335156298e-05 * SOLAR_MASS,\n-    },\n-    // neptune:\n-    Body {\n-        x: f64x4::from_array([\n-            1.53796971148509165e+01,\n-            -2.59193146099879641e+01,\n-            1.79258772950371181e-01,\n-            0.,\n-        ]),\n-        v: f64x4::from_array([\n-            2.68067772490389322e-03 * DAYS_PER_YEAR,\n-            1.62824170038242295e-03 * DAYS_PER_YEAR,\n-            -9.51592254519715870e-05 * DAYS_PER_YEAR,\n-            0.,\n-        ]),\n-        mass: 5.15138902046611451e-05 * SOLAR_MASS,\n-    },\n-];\n+    const N_BODIES: usize = 5;\n+    const BODIES: [Body; N_BODIES] = [\n+        // sun:\n+        Body {\n+            x: f64x4::from_array([0., 0., 0., 0.]),\n+            v: f64x4::from_array([0., 0., 0., 0.]),\n+            mass: SOLAR_MASS,\n+        },\n+        // jupiter:\n+        Body {\n+            x: f64x4::from_array([\n+                4.84143144246472090e+00,\n+                -1.16032004402742839e+00,\n+                -1.03622044471123109e-01,\n+                0.,\n+            ]),\n+            v: f64x4::from_array([\n+                1.66007664274403694e-03 * DAYS_PER_YEAR,\n+                7.69901118419740425e-03 * DAYS_PER_YEAR,\n+                -6.90460016972063023e-05 * DAYS_PER_YEAR,\n+                0.,\n+            ]),\n+            mass: 9.54791938424326609e-04 * SOLAR_MASS,\n+        },\n+        // saturn:\n+        Body {\n+            x: f64x4::from_array([\n+                8.34336671824457987e+00,\n+                4.12479856412430479e+00,\n+                -4.03523417114321381e-01,\n+                0.,\n+            ]),\n+            v: f64x4::from_array([\n+                -2.76742510726862411e-03 * DAYS_PER_YEAR,\n+                4.99852801234917238e-03 * DAYS_PER_YEAR,\n+                2.30417297573763929e-05 * DAYS_PER_YEAR,\n+                0.,\n+            ]),\n+            mass: 2.85885980666130812e-04 * SOLAR_MASS,\n+        },\n+        // uranus:\n+        Body {\n+            x: f64x4::from_array([\n+                1.28943695621391310e+01,\n+                -1.51111514016986312e+01,\n+                -2.23307578892655734e-01,\n+                0.,\n+            ]),\n+            v: f64x4::from_array([\n+                2.96460137564761618e-03 * DAYS_PER_YEAR,\n+                2.37847173959480950e-03 * DAYS_PER_YEAR,\n+                -2.96589568540237556e-05 * DAYS_PER_YEAR,\n+                0.,\n+            ]),\n+            mass: 4.36624404335156298e-05 * SOLAR_MASS,\n+        },\n+        // neptune:\n+        Body {\n+            x: f64x4::from_array([\n+                1.53796971148509165e+01,\n+                -2.59193146099879641e+01,\n+                1.79258772950371181e-01,\n+                0.,\n+            ]),\n+            v: f64x4::from_array([\n+                2.68067772490389322e-03 * DAYS_PER_YEAR,\n+                1.62824170038242295e-03 * DAYS_PER_YEAR,\n+                -9.51592254519715870e-05 * DAYS_PER_YEAR,\n+                0.,\n+            ]),\n+            mass: 5.15138902046611451e-05 * SOLAR_MASS,\n+        },\n+    ];\n \n-pub fn offset_momentum(bodies: &mut [Body; N_BODIES]) {\n-    let (sun, rest) = bodies.split_at_mut(1);\n-    let sun = &mut sun[0];\n-    for body in rest {\n-        let m_ratio = body.mass / SOLAR_MASS;\n-        sun.v -= body.v * m_ratio;\n+    fn offset_momentum(bodies: &mut [Body; N_BODIES]) {\n+        let (sun, rest) = bodies.split_at_mut(1);\n+        let sun = &mut sun[0];\n+        for body in rest {\n+            let m_ratio = body.mass / SOLAR_MASS;\n+            sun.v -= body.v * m_ratio;\n+        }\n     }\n-}\n \n-pub fn energy(bodies: &[Body; N_BODIES]) -> f64 {\n-    let mut e = 0.;\n-    for i in 0..N_BODIES {\n-        let bi = &bodies[i];\n-        e += bi.mass * (bi.v * bi.v).horizontal_sum() * 0.5;\n-        for bj in bodies.iter().take(N_BODIES).skip(i + 1) {\n-            let dx = bi.x - bj.x;\n-            e -= bi.mass * bj.mass / (dx * dx).horizontal_sum().sqrt()\n+    fn energy(bodies: &[Body; N_BODIES]) -> f64 {\n+        let mut e = 0.;\n+        for i in 0..N_BODIES {\n+            let bi = &bodies[i];\n+            e += bi.mass * (bi.v * bi.v).horizontal_sum() * 0.5;\n+            for bj in bodies.iter().take(N_BODIES).skip(i + 1) {\n+                let dx = bi.x - bj.x;\n+                e -= bi.mass * bj.mass / (dx * dx).horizontal_sum().sqrt()\n+            }\n         }\n+        e\n     }\n-    e\n-}\n \n-pub fn advance(bodies: &mut [Body; N_BODIES], dt: f64) {\n-    const N: usize = N_BODIES * (N_BODIES - 1) / 2;\n+    fn advance(bodies: &mut [Body; N_BODIES], dt: f64) {\n+        const N: usize = N_BODIES * (N_BODIES - 1) / 2;\n+\n+        // compute distance between bodies:\n+        let mut r = [f64x4::splat(0.); N];\n+        {\n+            let mut i = 0;\n+            for j in 0..N_BODIES {\n+                for k in j + 1..N_BODIES {\n+                    r[i] = bodies[j].x - bodies[k].x;\n+                    i += 1;\n+                }\n+            }\n+        }\n+\n+        let mut mag = [0.0; N];\n+        for i in (0..N).step_by(2) {\n+            let d2s = f64x2::from_array([\n+                (r[i] * r[i]).horizontal_sum(),\n+                (r[i + 1] * r[i + 1]).horizontal_sum(),\n+            ]);\n+            let dmags = f64x2::splat(dt) / (d2s * d2s.sqrt());\n+            mag[i] = dmags[0];\n+            mag[i + 1] = dmags[1];\n+        }\n \n-    // compute distance between bodies:\n-    let mut r = [f64x4::splat(0.); N];\n-    {\n         let mut i = 0;\n         for j in 0..N_BODIES {\n             for k in j + 1..N_BODIES {\n-                r[i] = bodies[j].x - bodies[k].x;\n-                i += 1;\n+                let f = r[i] * mag[i];\n+                bodies[j].v -= f * bodies[k].mass;\n+                bodies[k].v += f * bodies[j].mass;\n+                i += 1\n             }\n         }\n+        for body in bodies {\n+            body.x += dt * body.v\n+        }\n     }\n \n-    let mut mag = [0.0; N];\n-    for i in (0..N).step_by(2) {\n-        let d2s = f64x2::from_array([\n-            (r[i] * r[i]).horizontal_sum(),\n-            (r[i + 1] * r[i + 1]).horizontal_sum(),\n-        ]);\n-        let dmags = f64x2::splat(dt) / (d2s * d2s.sqrt());\n-        mag[i] = dmags[0];\n-        mag[i + 1] = dmags[1];\n-    }\n-\n-    let mut i = 0;\n-    for j in 0..N_BODIES {\n-        for k in j + 1..N_BODIES {\n-            let f = r[i] * mag[i];\n-            bodies[j].v -= f * bodies[k].mass;\n-            bodies[k].v += f * bodies[j].mass;\n-            i += 1\n+    pub fn run(n: usize) -> (f64, f64) {\n+        let mut bodies = BODIES;\n+        offset_momentum(&mut bodies);\n+        let energy_before = energy(&bodies);\n+        for _ in 0..n {\n+            advance(&mut bodies, 0.01);\n         }\n-    }\n-    for body in bodies {\n-        body.x += dt * body.v\n-    }\n-}\n+        let energy_after = energy(&bodies);\n \n-pub fn run(n: usize) -> (f64, f64) {\n-    let mut bodies = BODIES;\n-    offset_momentum(&mut bodies);\n-    let energy_before = energy(&bodies);\n-    for _ in 0..n {\n-        advance(&mut bodies, 0.01);\n+        (energy_before, energy_after)\n     }\n-    let energy_after = energy(&bodies);\n-\n-    (energy_before, energy_after)\n }\n \n+#[cfg(feature = \"std\")]\n #[cfg(test)]\n mod tests {\n     // Good enough for demonstration purposes, not going for strictness here.\n@@ -173,12 +177,17 @@ mod tests {\n     #[test]\n     fn test() {\n         const OUTPUT: [f64; 2] = [-0.169075164, -0.169087605];\n-        let (energy_before, energy_after) = super::run(1000);\n+        let (energy_before, energy_after) = super::nbody::run(1000);\n         assert!(approx_eq_f64(energy_before, OUTPUT[0]));\n         assert!(approx_eq_f64(energy_after, OUTPUT[1]));\n     }\n }\n \n fn main() {\n-    // empty main to pass CI\n+    #[cfg(feature = \"std\")]\n+    {\n+        let (energy_before, energy_after) = nbody::run(1000);\n+        println!(\"Energy before: {}\", energy_before);\n+        println!(\"Energy after:  {}\", energy_after);\n+    }\n }"}, {"sha": "916c0dadf7527fe548534908ca23833df9d000e1", "filename": "crates/core_simd/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fintrinsics.rs?ref=34384b7a68b3a72fc96e5293de7c7486d2cceb92", "patch": "@@ -47,6 +47,7 @@ extern \"platform-intrinsic\" {\n     pub(crate) fn simd_fabs<T>(x: T) -> T;\n \n     /// fsqrt\n+    #[cfg(feature = \"std\")]\n     pub(crate) fn simd_fsqrt<T>(x: T) -> T;\n \n     /// fma"}, {"sha": "5f88e3c63b5becbc33d35072ca90eefb5a9eb1b2", "filename": "crates/core_simd/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Flib.rs?ref=34384b7a68b3a72fc96e5293de7c7486d2cceb92", "patch": "@@ -1,6 +1,7 @@\n #![no_std]\n #![allow(incomplete_features)]\n #![feature(\n+    const_evaluatable_checked,\n     const_generics,\n     platform_intrinsics,\n     repr_simd,\n@@ -20,8 +21,8 @@ mod reduction;\n mod select;\n pub use select::Select;\n \n+#[cfg(feature = \"const_evaluatable_checked\")]\n mod to_bytes;\n-pub use to_bytes::ToBytes;\n \n mod comparisons;\n mod fmt;"}, {"sha": "c284ade463fc338eb8066bdb7bf2bb7f276736cf", "filename": "crates/core_simd/src/round.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2Fsrc%2Fround.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2Fsrc%2Fround.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fround.rs?ref=34384b7a68b3a72fc96e5293de7c7486d2cceb92", "patch": "@@ -41,7 +41,12 @@ macro_rules! implement {\n             pub fn fract(self) -> Self {\n                 self - self.trunc()\n             }\n+        }\n \n+        impl<const LANES: usize> crate::$type<LANES>\n+        where\n+            crate::LaneCount<LANES>: crate::SupportedLaneCount,\n+        {\n             /// Rounds toward zero and converts to the same-width integer type, assuming that\n             /// the value is finite and fits in that type.\n             ///"}, {"sha": "31d7dfebe1a7aa2563a71810e3e374c099418f88", "filename": "crates/core_simd/src/to_bytes.rs", "status": "modified", "additions": 20, "deletions": 53, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2Fsrc%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2Fsrc%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fto_bytes.rs?ref=34384b7a68b3a72fc96e5293de7c7486d2cceb92", "patch": "@@ -1,72 +1,39 @@\n-mod sealed {\n-    pub trait Sealed {}\n-}\n-use sealed::Sealed;\n-\n-/// Supporting trait for byte conversion functions.\n-pub trait ToBytes: Sealed {\n-    /// The bytes representation of this type.\n-    type Bytes;\n-\n-    #[doc(hidden)]\n-    fn to_bytes_impl(self) -> Self::Bytes;\n-\n-    #[doc(hidden)]\n-    fn from_bytes_impl(bytes: Self::Bytes) -> Self;\n-}\n-\n macro_rules! impl_to_bytes {\n-    { $name:ident, $($int_width:literal -> $byte_width:literal),* } => {\n-        $(\n-        impl Sealed for crate::$name<$int_width>\n-        where\n-            crate::LaneCount<$int_width>: crate::SupportedLaneCount,\n-        {}\n-\n-        impl ToBytes for crate::$name<$int_width>\n-        where\n-            crate::LaneCount<$int_width>: crate::SupportedLaneCount,\n-        {\n-            type Bytes = crate::SimdU8<$byte_width>;\n-            fn to_bytes_impl(self) -> Self::Bytes {\n-                unsafe { core::mem::transmute(self) }\n-            }\n-            fn from_bytes_impl(bytes: Self::Bytes) -> Self {\n-                unsafe { core::mem::transmute(bytes) }\n-            }\n-        }\n-        )*\n-\n+    { $name:ident, $size:literal } => {\n         impl<const LANES: usize> crate::$name<LANES>\n         where\n             crate::LaneCount<LANES>: crate::SupportedLaneCount,\n-            Self: ToBytes,\n+            crate::LaneCount<{{ $size * LANES }}>: crate::SupportedLaneCount,\n         {\n             /// Return the memory representation of this integer as a byte array in native byte\n             /// order.\n-            pub fn to_ne_bytes(self) -> <Self as ToBytes>::Bytes { self.to_bytes_impl() }\n+            pub fn to_ne_bytes(self) -> crate::SimdU8<{{ $size * LANES }}> {\n+                unsafe { core::mem::transmute_copy(&self) }\n+            }\n \n             /// Create a native endian integer value from its memory representation as a byte array\n             /// in native endianness.\n-            pub fn from_ne_bytes(bytes: <Self as ToBytes>::Bytes) -> Self { Self::from_bytes_impl(bytes) }\n+            pub fn from_ne_bytes(bytes: crate::SimdU8<{{ $size * LANES }}>) -> Self {\n+                unsafe { core::mem::transmute_copy(&bytes) }\n+            }\n         }\n     }\n }\n \n-impl_to_bytes! { SimdU8, 1 -> 1, 2 -> 2, 4 -> 4, 8 -> 8, 16 -> 16, 32 -> 32 }\n-impl_to_bytes! { SimdU16, 1 -> 2, 2 -> 4, 4 -> 8, 8 -> 16, 16 -> 32 }\n-impl_to_bytes! { SimdU32, 1 -> 4, 2 -> 8, 4 -> 16, 8 -> 32 }\n-impl_to_bytes! { SimdU64, 1 -> 8, 2 -> 16, 4 -> 32 }\n+impl_to_bytes! { SimdU8, 1 }\n+impl_to_bytes! { SimdU16, 2 }\n+impl_to_bytes! { SimdU32, 4 }\n+impl_to_bytes! { SimdU64, 8 }\n #[cfg(target_pointer_width = \"32\")]\n-impl_to_bytes! { SimdUsize, 1 -> 4, 2 -> 8, 4 -> 16, 8 -> 32 }\n+impl_to_bytes! { SimdUsize, 4 }\n #[cfg(target_pointer_width = \"64\")]\n-impl_to_bytes! { SimdUsize, 1 -> 8, 2 -> 16, 4 -> 32 }\n+impl_to_bytes! { SimdUsize, 8 }\n \n-impl_to_bytes! { SimdI8, 1 -> 1, 2 -> 2, 4 -> 4, 8 -> 8, 16 -> 16, 32 -> 32 }\n-impl_to_bytes! { SimdI16, 1 -> 2, 2 -> 4, 4 -> 8, 8 -> 16, 16 -> 32 }\n-impl_to_bytes! { SimdI32, 1 -> 4, 2 -> 8, 4 -> 16, 8 -> 32 }\n-impl_to_bytes! { SimdI64, 1 -> 8, 2 -> 16, 4 -> 32 }\n+impl_to_bytes! { SimdI8, 1 }\n+impl_to_bytes! { SimdI16, 2 }\n+impl_to_bytes! { SimdI32, 4 }\n+impl_to_bytes! { SimdI64, 8 }\n #[cfg(target_pointer_width = \"32\")]\n-impl_to_bytes! { SimdIsize, 1 -> 4, 2 -> 8, 4 -> 16, 8 -> 32 }\n+impl_to_bytes! { SimdIsize, 4 }\n #[cfg(target_pointer_width = \"64\")]\n-impl_to_bytes! { SimdIsize, 1 -> 8, 2 -> 16, 4 -> 32 }\n+impl_to_bytes! { SimdIsize, 8 }"}, {"sha": "81553c34aa774b58ef3763a204c58cc9c9cf6886", "filename": "crates/core_simd/tests/ops_macros.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2Ftests%2Fops_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fops_macros.rs?ref=34384b7a68b3a72fc96e5293de7c7486d2cceb92", "patch": "@@ -443,14 +443,6 @@ macro_rules! impl_float_tests {\n                     )\n                 }\n \n-                fn sqrt<const LANES: usize>() {\n-                    test_helpers::test_unary_elementwise(\n-                        &Vector::<LANES>::sqrt,\n-                        &Scalar::sqrt,\n-                        &|_| true,\n-                    )\n-                }\n-\n                 fn recip<const LANES: usize>() {\n                     test_helpers::test_unary_elementwise(\n                         &Vector::<LANES>::recip,\n@@ -605,6 +597,17 @@ macro_rules! impl_float_tests {\n                     });\n                 }\n             }\n+\n+            #[cfg(feature = \"std\")]\n+            test_helpers::test_lanes! {\n+                fn sqrt<const LANES: usize>() {\n+                    test_helpers::test_unary_elementwise(\n+                        &Vector::<LANES>::sqrt,\n+                        &Scalar::sqrt,\n+                        &|_| true,\n+                    )\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "22c97c95d927f9c46f97707db36e52d7aaebdac0", "filename": "crates/core_simd/tests/to_bytes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34384b7a68b3a72fc96e5293de7c7486d2cceb92/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Ftests%2Fto_bytes.rs?ref=34384b7a68b3a72fc96e5293de7c7486d2cceb92", "patch": "@@ -1,4 +1,6 @@\n-#![feature(portable_simd)]\n+#![feature(portable_simd, const_generics, const_evaluatable_checked)]\n+#![allow(incomplete_features)]\n+#![cfg(feature = \"const_evaluatable_checked\")]\n \n use core_simd::SimdU32;\n "}]}