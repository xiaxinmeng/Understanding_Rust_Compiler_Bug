{"sha": "8cce752bcb83c86f300c9a8e830dd7d411f6bc48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjY2U3NTJiY2I4M2M4NmYzMDBjOWE4ZTgzMGRkN2Q0MTFmNmJjNDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-01T09:17:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-01T09:17:09Z"}, "message": "Merge #3802\n\n3802: Crisper name r=matklad a=matklad\n\nhttps://www.flycheck.org/en/latest/\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "eca5f6bd69dc7f7f0df5a3a4ab5ed47f5aa7255e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eca5f6bd69dc7f7f0df5a3a4ab5ed47f5aa7255e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cce752bcb83c86f300c9a8e830dd7d411f6bc48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehFwVCRBK7hj4Ov3rIwAAdHIIAAsdmxYvcFEz1wJVViNfiLlX\n0W+qEdj30Wg12l1eAql6asbKLq/6dwXcpyuV/exqkXauyCVARpPrOJaDjYHxy2vW\nqPbOOL5TC73BYo7xituv1I2GcYD4hVuGxj5Eu1Er2Puhr7pTMump8PTRJxKuJMeX\nLgjLQcLGDNFBaGZfyCs2mqL7S5qrKBLv7HhT/bxeJgtgPgYK2chBqxEg21hdnnvR\nIap/WQKD3R8uUJpYTs7XHvL0Y63mmQDl+WUTLtCYQCf6XErDYyBrj7SW2niJ5f6d\nJFSR+zZeZrEDHc8m9vJGVfLC0RbTuaJ+cVfeNhIRPrJhHda28dsBBqdsQKZl7fE=\n=i3Vj\n-----END PGP SIGNATURE-----\n", "payload": "tree eca5f6bd69dc7f7f0df5a3a4ab5ed47f5aa7255e\nparent fae6cecf5434a865043ec566a6417e9bb28c3a4c\nparent b5306ea70659aad28b1a5de248128b47a5e5f1bf\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585732629 +0000\ncommitter GitHub <noreply@github.com> 1585732629 +0000\n\nMerge #3802\n\n3802: Crisper name r=matklad a=matklad\n\nhttps://www.flycheck.org/en/latest/\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cce752bcb83c86f300c9a8e830dd7d411f6bc48", "html_url": "https://github.com/rust-lang/rust/commit/8cce752bcb83c86f300c9a8e830dd7d411f6bc48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cce752bcb83c86f300c9a8e830dd7d411f6bc48/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fae6cecf5434a865043ec566a6417e9bb28c3a4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fae6cecf5434a865043ec566a6417e9bb28c3a4c", "html_url": "https://github.com/rust-lang/rust/commit/fae6cecf5434a865043ec566a6417e9bb28c3a4c"}, {"sha": "b5306ea70659aad28b1a5de248128b47a5e5f1bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5306ea70659aad28b1a5de248128b47a5e5f1bf", "html_url": "https://github.com/rust-lang/rust/commit/b5306ea70659aad28b1a5de248128b47a5e5f1bf"}], "stats": {"total": 67, "additions": 34, "deletions": 33}, "files": [{"sha": "75aece45fd69901881195f44128326c6021a0a21", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8cce752bcb83c86f300c9a8e830dd7d411f6bc48/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cce752bcb83c86f300c9a8e830dd7d411f6bc48/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=8cce752bcb83c86f300c9a8e830dd7d411f6bc48", "patch": "@@ -24,33 +24,32 @@ pub use crate::conv::url_from_path_with_drive_lowercasing;\n \n #[derive(Clone, Debug)]\n pub struct CheckConfig {\n-    pub enable: bool,\n     pub args: Vec<String>,\n     pub command: String,\n     pub all_targets: bool,\n }\n \n-/// CheckWatcher wraps the shared state and communication machinery used for\n+/// Flycheck wraps the shared state and communication machinery used for\n /// running `cargo check` (or other compatible command) and providing\n /// diagnostics based on the output.\n /// The spawned thread is shut down when this struct is dropped.\n #[derive(Debug)]\n-pub struct CheckWatcher {\n+pub struct Flycheck {\n     // XXX: drop order is significant\n     cmd_send: Sender<CheckCommand>,\n-    handle: Option<jod_thread::JoinHandle<()>>,\n+    handle: jod_thread::JoinHandle<()>,\n     pub task_recv: Receiver<CheckTask>,\n }\n \n-impl CheckWatcher {\n-    pub fn new(config: CheckConfig, workspace_root: PathBuf) -> CheckWatcher {\n+impl Flycheck {\n+    pub fn new(config: CheckConfig, workspace_root: PathBuf) -> Flycheck {\n         let (task_send, task_recv) = unbounded::<CheckTask>();\n         let (cmd_send, cmd_recv) = unbounded::<CheckCommand>();\n         let handle = jod_thread::spawn(move || {\n-            let mut check = CheckWatcherThread::new(config, workspace_root);\n+            let mut check = FlycheckThread::new(config, workspace_root);\n             check.run(&task_send, &cmd_recv);\n         });\n-        CheckWatcher { task_recv, cmd_send, handle: Some(handle) }\n+        Flycheck { task_recv, cmd_send, handle }\n     }\n \n     /// Schedule a re-start of the cargo check worker.\n@@ -76,7 +75,7 @@ pub enum CheckCommand {\n     Update,\n }\n \n-struct CheckWatcherThread {\n+struct FlycheckThread {\n     options: CheckConfig,\n     workspace_root: PathBuf,\n     last_update_req: Option<Instant>,\n@@ -90,9 +89,9 @@ struct CheckWatcherThread {\n     check_process: Option<jod_thread::JoinHandle<()>>,\n }\n \n-impl CheckWatcherThread {\n-    fn new(options: CheckConfig, workspace_root: PathBuf) -> CheckWatcherThread {\n-        CheckWatcherThread {\n+impl FlycheckThread {\n+    fn new(options: CheckConfig, workspace_root: PathBuf) -> FlycheckThread {\n+        FlycheckThread {\n             options,\n             workspace_root,\n             last_update_req: None,\n@@ -216,9 +215,6 @@ impl CheckWatcherThread {\n         // First, clear and cancel the old thread\n         self.message_recv = never();\n         self.check_process = None;\n-        if !self.options.enable {\n-            return;\n-        }\n \n         let mut args: Vec<String> = vec![\n             self.options.command.clone(),"}, {"sha": "79dc03de43ff09e0cf3d97e14d035f624da6c6ff", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8cce752bcb83c86f300c9a8e830dd7d411f6bc48/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cce752bcb83c86f300c9a8e830dd7d411f6bc48/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=8cce752bcb83c86f300c9a8e830dd7d411f6bc48", "patch": "@@ -101,11 +101,14 @@ fn get_config(\n             chaining_hints: config.inlay_hints_chaining,\n             max_length: config.inlay_hints_max_length,\n         },\n-        check: CheckConfig {\n-            enable: config.cargo_watch_enable,\n-            args: config.cargo_watch_args.clone(),\n-            command: config.cargo_watch_command.clone(),\n-            all_targets: config.cargo_watch_all_targets,\n+        check: if config.cargo_watch_enable {\n+            Some(CheckConfig {\n+                args: config.cargo_watch_args.clone(),\n+                command: config.cargo_watch_command.clone(),\n+                all_targets: config.cargo_watch_all_targets,\n+            })\n+        } else {\n+            None\n         },\n         rustfmt_args: config.rustfmt_args.clone(),\n         vscode_lldb: config.vscode_lldb,\n@@ -240,7 +243,7 @@ pub fn main_loop(\n                     Err(RecvError) => return Err(\"vfs died\".into()),\n                 },\n                 recv(libdata_receiver) -> data => Event::Lib(data.unwrap()),\n-                recv(world_state.check_watcher.as_ref().map_or(&never(), |it| &it.task_recv)) -> task => match task {\n+                recv(world_state.flycheck.as_ref().map_or(&never(), |it| &it.task_recv)) -> task => match task {\n                     Ok(task) => Event::CheckWatcher(task),\n                     Err(RecvError) => return Err(\"check watcher died\".into()),\n                 }\n@@ -481,8 +484,8 @@ fn loop_turn(\n         && loop_state.in_flight_libraries == 0\n     {\n         loop_state.workspace_loaded = true;\n-        if let Some(check_watcher) = &world_state.check_watcher {\n-            check_watcher.update();\n+        if let Some(flycheck) = &world_state.flycheck {\n+            flycheck.update();\n         }\n         pool.execute({\n             let subs = loop_state.subscriptions.subscriptions();\n@@ -654,8 +657,8 @@ fn on_notification(\n     };\n     let not = match notification_cast::<req::DidSaveTextDocument>(not) {\n         Ok(_params) => {\n-            if let Some(check_watcher) = &state.check_watcher {\n-                check_watcher.update();\n+            if let Some(flycheck) = &state.flycheck {\n+                flycheck.update();\n             }\n             return Ok(());\n         }"}, {"sha": "7814a682e16d30a619d2962c9c50056ffa3f5eee", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8cce752bcb83c86f300c9a8e830dd7d411f6bc48/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cce752bcb83c86f300c9a8e830dd7d411f6bc48/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=8cce752bcb83c86f300c9a8e830dd7d411f6bc48", "patch": "@@ -11,7 +11,7 @@ use std::{\n use crossbeam_channel::{unbounded, Receiver};\n use lsp_types::Url;\n use parking_lot::RwLock;\n-use ra_flycheck::{url_from_path_with_drive_lowercasing, CheckConfig, CheckWatcher};\n+use ra_flycheck::{url_from_path_with_drive_lowercasing, CheckConfig, Flycheck};\n use ra_ide::{\n     Analysis, AnalysisChange, AnalysisHost, CrateGraph, FileId, InlayHintsConfig, LibraryData,\n     SourceRootId,\n@@ -31,7 +31,9 @@ use crate::{\n use ra_db::ExternSourceId;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n-fn create_watcher(workspaces: &[ProjectWorkspace], config: &Config) -> Option<CheckWatcher> {\n+fn create_flycheck(workspaces: &[ProjectWorkspace], config: &Config) -> Option<Flycheck> {\n+    let check_config = config.check.as_ref()?;\n+\n     // FIXME: Figure out the multi-workspace situation\n     workspaces\n         .iter()\n@@ -41,7 +43,7 @@ fn create_watcher(workspaces: &[ProjectWorkspace], config: &Config) -> Option<Ch\n         })\n         .map(|cargo| {\n             let cargo_project_root = cargo.workspace_root().to_path_buf();\n-            Some(CheckWatcher::new(config.check.clone(), cargo_project_root))\n+            Some(Flycheck::new(check_config.clone(), cargo_project_root))\n         })\n         .unwrap_or_else(|| {\n             log::warn!(\"Cargo check watching only supported for cargo workspaces, disabling\");\n@@ -56,7 +58,7 @@ pub struct Config {\n     pub line_folding_only: bool,\n     pub inlay_hints: InlayHintsConfig,\n     pub rustfmt_args: Vec<String>,\n-    pub check: CheckConfig,\n+    pub check: Option<CheckConfig>,\n     pub vscode_lldb: bool,\n     pub proc_macro_srv: Option<String>,\n }\n@@ -76,7 +78,7 @@ pub struct WorldState {\n     pub vfs: Arc<RwLock<Vfs>>,\n     pub task_receiver: Receiver<VfsTask>,\n     pub latest_requests: Arc<RwLock<LatestRequests>>,\n-    pub check_watcher: Option<CheckWatcher>,\n+    pub flycheck: Option<Flycheck>,\n     pub diagnostics: DiagnosticCollection,\n }\n \n@@ -201,7 +203,7 @@ impl WorldState {\n             });\n         change.set_crate_graph(crate_graph);\n \n-        let check_watcher = create_watcher(&workspaces, &config);\n+        let flycheck = create_flycheck(&workspaces, &config);\n \n         let mut analysis_host = AnalysisHost::new(lru_capacity);\n         analysis_host.apply_change(change);\n@@ -214,7 +216,7 @@ impl WorldState {\n             vfs: Arc::new(RwLock::new(vfs)),\n             task_receiver,\n             latest_requests: Default::default(),\n-            check_watcher,\n+            flycheck,\n             diagnostics: Default::default(),\n         }\n     }\n@@ -227,7 +229,7 @@ impl WorldState {\n     ) {\n         self.feature_flags = Arc::new(feature_flags);\n         self.analysis_host.update_lru_capacity(lru_capacity);\n-        self.check_watcher = create_watcher(&self.workspaces, &config);\n+        self.flycheck = create_flycheck(&self.workspaces, &config);\n         self.config = config;\n     }\n "}]}