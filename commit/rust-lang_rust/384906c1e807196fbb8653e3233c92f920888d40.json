{"sha": "384906c1e807196fbb8653e3233c92f920888d40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NDkwNmMxZTgwNzE5NmZiYjg2NTNlMzIzM2M5MmY5MjA4ODhkNDA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-19T20:21:25Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-19T22:51:44Z"}, "message": "Remove unused hokey-hashes from typeck and region inference.", "tree": {"sha": "b9815704e08e88d4c11a8adff6fb7b98a669384b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9815704e08e88d4c11a8adff6fb7b98a669384b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/384906c1e807196fbb8653e3233c92f920888d40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/384906c1e807196fbb8653e3233c92f920888d40", "html_url": "https://github.com/rust-lang/rust/commit/384906c1e807196fbb8653e3233c92f920888d40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/384906c1e807196fbb8653e3233c92f920888d40/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bac89eae4844f030b0b3e219e114a1b79212fe7f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bac89eae4844f030b0b3e219e114a1b79212fe7f", "html_url": "https://github.com/rust-lang/rust/commit/bac89eae4844f030b0b3e219e114a1b79212fe7f"}], "stats": {"total": 120, "additions": 1, "deletions": 119}, "files": [{"sha": "f0b71ea556a1da30fe600df4951b362558dc6f68", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 110, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/384906c1e807196fbb8653e3233c92f920888d40/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384906c1e807196fbb8653e3233c92f920888d40/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=384906c1e807196fbb8653e3233c92f920888d40", "patch": "@@ -2645,120 +2645,10 @@ impl sty : to_bytes::IterBytes {\n     }\n }\n \n-pure fn hash_bound_region(br: &bound_region) -> uint {\n-    match *br { // no idea if this is any good\n-      ty::br_self => 0u,\n-      ty::br_anon(idx) => 1u | (idx << 2),\n-      ty::br_named(ident) => 2u | (ident << 2),\n-      ty::br_cap_avoid(id, br) =>\n-        3u | (id as uint << 2) | hash_bound_region(br)\n-    }\n-}\n-\n fn br_hashmap<V:Copy>() -> HashMap<bound_region, V> {\n     map::HashMap()\n }\n \n-pure fn hash_region(r: &region) -> uint {\n-    match *r { // no idea if this is any good\n-      re_bound(br) => (hash_bound_region(&br)) << 2u | 0u,\n-      re_free(id, br) => ((id as uint) << 4u) |\n-      (hash_bound_region(&br)) << 2u | 1u,\n-      re_scope(id)  => ((id as uint) << 2u) | 2u,\n-      re_var(id)    => (id.to_uint() << 2u) | 3u,\n-      re_static     => 4u\n-    }\n-}\n-\n-// Type hashing.\n-pure fn hash_type_structure(st: &sty) -> uint {\n-    pure fn hash_uint(id: uint, n: uint) -> uint { (id << 2u) + n }\n-    pure fn hash_def(id: uint, did: ast::def_id) -> uint {\n-        let h = (id << 2u) + (did.crate as uint);\n-        (h << 2u) + (did.node as uint)\n-    }\n-    pure fn hash_subty(id: uint, subty: t) -> uint {\n-        (id << 2u) + type_id(subty)\n-    }\n-    pure fn hash_subtys(id: uint, subtys: ~[t]) -> uint {\n-        let mut h = id;\n-        for vec::each(subtys) |s| { h = (h << 2u) + type_id(*s) }\n-        h\n-    }\n-    pure fn hash_substs(h: uint, substs: &substs) -> uint {\n-        let h = hash_subtys(h, substs.tps);\n-        h + substs.self_r.map_default(0u, |r| hash_region(&r))\n-    }\n-    match *st {\n-      ty_nil => 0u,\n-      ty_bool => 1u,\n-      ty_int(t) => match t {\n-        ast::ty_i => 2u,\n-        ast::ty_char => 3u,\n-        ast::ty_i8 => 4u,\n-        ast::ty_i16 => 5u,\n-        ast::ty_i32 => 6u,\n-        ast::ty_i64 => 7u\n-      },\n-      ty_uint(t) => match t {\n-        ast::ty_u => 8u,\n-        ast::ty_u8 => 9u,\n-        ast::ty_u16 => 10u,\n-        ast::ty_u32 => 11u,\n-        ast::ty_u64 => 12u\n-      },\n-      ty_float(t) => match t {\n-        ast::ty_f => 13u,\n-        ast::ty_f32 => 14u,\n-        ast::ty_f64 => 15u\n-      },\n-      ty_estr(_) => 16u,\n-      ty_enum(did, ref substs) => {\n-        let mut h = hash_def(18u, did);\n-        hash_substs(h, substs)\n-      }\n-      ty_box(mt) => hash_subty(19u, mt.ty),\n-      ty_evec(mt, _) => hash_subty(20u, mt.ty),\n-      ty_unboxed_vec(mt) => hash_subty(22u, mt.ty),\n-      ty_tup(ts) => hash_subtys(25u, ts),\n-      ty_rec(fields) => {\n-        let mut h = 26u;\n-        for vec::each(fields) |f| { h = hash_subty(h, f.mt.ty); }\n-        h\n-      }\n-      ty_fn(ref f) => {\n-        let mut h = 27u;\n-        for vec::each(f.sig.inputs) |a| {\n-            h = hash_subty(h, a.ty);\n-        }\n-        hash_subty(h, f.sig.output)\n-      }\n-      ty_self => 28u,\n-      ty_infer(v) => hash_uint(29u, v.to_hash()),\n-      ty_param(p) => hash_def(hash_uint(31u, p.idx), p.def_id),\n-      ty_type => 32u,\n-      ty_bot => 34u,\n-      ty_ptr(mt) => hash_subty(35u, mt.ty),\n-      ty_uniq(mt) => hash_subty(37u, mt.ty),\n-      ty_trait(did, ref substs, _) => {\n-        let mut h = hash_def(40u, did);\n-        hash_substs(h, substs)\n-      }\n-      ty_opaque_closure_ptr(ck_block) => 41u,\n-      ty_opaque_closure_ptr(ck_box) => 42u,\n-      ty_opaque_closure_ptr(ck_uniq) => 43u,\n-      ty_opaque_box => 44u,\n-      ty_class(did, ref substs) => {\n-        let mut h = hash_def(45u, did);\n-        hash_substs(h, substs)\n-      }\n-      ty_rptr(region, mt) => {\n-        let mut h = (46u << 2u) + hash_region(&region);\n-        hash_subty(h, mt.ty)\n-      }\n-    }\n-}\n-\n fn node_id_to_type(cx: ctxt, id: ast::node_id) -> t {\n     //io::println(fmt!(\"%?/%?\", id, cx.node_types.size()));\n     match smallintmap::find(*cx.node_types, id as uint) {"}, {"sha": "7e73692589017fb6fde676322914add84229ea67", "filename": "src/rustc/middle/typeck/infer/region_var_bindings.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/384906c1e807196fbb8653e3233c92f920888d40/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/384906c1e807196fbb8653e3233c92f920888d40/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_var_bindings.rs?ref=384906c1e807196fbb8653e3233c92f920888d40", "patch": "@@ -312,7 +312,7 @@ use std::map::{HashMap, uint_hash};\n use std::cell::{Cell, empty_cell};\n use std::list::{List, Nil, Cons};\n \n-use ty::{region, RegionVid, hash_region};\n+use ty::{region, RegionVid};\n use region::is_subregion_of;\n use syntax::codemap;\n use to_str::to_str;\n@@ -429,14 +429,6 @@ fn CombineMap() -> CombineMap {\n     return HashMap();\n }\n \n-pure fn hash_constraint(rc: &Constraint) -> uint {\n-    match *rc {\n-      ConstrainVarSubVar(a, b) => *a ^ *b,\n-      ConstrainRegSubVar(ref r, b) => ty::hash_region(r) ^ *b,\n-      ConstrainVarSubReg(a, ref r) => *a ^ ty::hash_region(r)\n-    }\n-}\n-\n impl RegionVarBindings {\n     fn in_snapshot() -> bool {\n         self.undo_log.len() > 0"}]}