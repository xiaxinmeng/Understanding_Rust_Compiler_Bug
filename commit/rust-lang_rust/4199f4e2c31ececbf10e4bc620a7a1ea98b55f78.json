{"sha": "4199f4e2c31ececbf10e4bc620a7a1ea98b55f78", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxOTlmNGUyYzMxZWNlY2JmMTBlNGJjNjIwYTdhMWVhOThiNTVmNzg=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-21T21:01:28Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-21T21:01:28Z"}, "message": "Merge #1307\n\n1307: better profilig r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "768cbfb703c0fb5259a10efc241f97246753aaec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/768cbfb703c0fb5259a10efc241f97246753aaec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78", "html_url": "https://github.com/rust-lang/rust/commit/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "366ad6f03ba2296f09cb79ea139fa53a132fa651", "url": "https://api.github.com/repos/rust-lang/rust/commits/366ad6f03ba2296f09cb79ea139fa53a132fa651", "html_url": "https://github.com/rust-lang/rust/commit/366ad6f03ba2296f09cb79ea139fa53a132fa651"}, {"sha": "6fed943bd2a96893cc5c3e4d2033e8c253d25d45", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fed943bd2a96893cc5c3e4d2033e8c253d25d45", "html_url": "https://github.com/rust-lang/rust/commit/6fed943bd2a96893cc5c3e4d2033e8c253d25d45"}], "stats": {"total": 37, "additions": 29, "deletions": 8}, "files": [{"sha": "5aa4ff5de36aedf2430db4e82a56309251e4d1cf", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4199f4e2c31ececbf10e4bc620a7a1ea98b55f78", "patch": "@@ -1211,6 +1211,7 @@ dependencies = [\n name = \"ra_prof\"\n version = \"0.1.0\"\n dependencies = [\n+ \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"once_cell 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n "}, {"sha": "efcce3d65c182e8d09fa00702409e465e0f2d433", "filename": "crates/ra_prof/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78/crates%2Fra_prof%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78/crates%2Fra_prof%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2FCargo.toml?ref=4199f4e2c31ececbf10e4bc620a7a1ea98b55f78", "patch": "@@ -7,3 +7,4 @@ publish = false\n \n [dependencies]\n once_cell = \"0.2.0\"\n+itertools = \"0.8.0\""}, {"sha": "031405879a92964f30337adaa76bb658a5b414b7", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4199f4e2c31ececbf10e4bc620a7a1ea98b55f78/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=4199f4e2c31ececbf10e4bc620a7a1ea98b55f78", "patch": "@@ -9,6 +9,7 @@ use std::{\n };\n \n use once_cell::sync::Lazy;\n+use itertools::Itertools;\n \n /// Set profiling filter. It specifies descriptions allowed to profile.\n /// This is helpful when call stack has too many nested profiling scopes.\n@@ -179,8 +180,9 @@ impl Drop for Profiler {\n                     stack.messages.push(Message { level, duration, message });\n                     if level == 0 {\n                         let stdout = stderr();\n-                        if duration >= stack.filter_data.longer_than {\n-                            print(0, &stack.messages, &mut stdout.lock());\n+                        let longer_than = stack.filter_data.longer_than;\n+                        if duration >= longer_than {\n+                            print(0, &stack.messages, &mut stdout.lock(), longer_than);\n                         }\n                         stack.messages.clear();\n                     }\n@@ -191,20 +193,37 @@ impl Drop for Profiler {\n     }\n }\n \n-fn print(lvl: usize, msgs: &[Message], out: &mut impl Write) {\n+fn print(lvl: usize, msgs: &[Message], out: &mut impl Write, longer_than: Duration) {\n     let mut last = 0;\n     let indent = repeat(\"    \").take(lvl + 1).collect::<String>();\n-    for (i, &Message { level: l, duration: dur, message: ref msg }) in msgs.iter().enumerate() {\n-        if l != lvl {\n+    // We output hierarchy for long calls, but sum up all short calls\n+    let mut short = Vec::new();\n+    for (i, &Message { level, duration, message: ref msg }) in msgs.iter().enumerate() {\n+        if level != lvl {\n             continue;\n         }\n+        if duration >= longer_than {\n+            writeln!(out, \"{} {:6}ms - {}\", indent, duration.as_millis(), msg)\n+                .expect(\"printing profiling info to stdout\");\n \n-        writeln!(out, \"{} {:6}ms - {}\", indent, dur.as_millis(), msg)\n-            .expect(\"printing profiling info to stdout\");\n+            print(lvl + 1, &msgs[last..i], out, longer_than);\n+        } else {\n+            short.push((msg, duration))\n+        }\n \n-        print(lvl + 1, &msgs[last..i], out);\n         last = i;\n     }\n+    short.sort_by_key(|(msg, _time)| *msg);\n+    for (msg, entires) in short.iter().group_by(|(msg, _time)| msg).into_iter() {\n+        let mut count = 0;\n+        let mut total_duration = Duration::default();\n+        entires.for_each(|(_msg, time)| {\n+            count += 1;\n+            total_duration += *time;\n+        });\n+        writeln!(out, \"{} {:6}ms - {} ({} calls)\", indent, total_duration.as_millis(), msg, count)\n+            .expect(\"printing profiling info to stdout\");\n+    }\n }\n \n #[cfg(test)]"}]}