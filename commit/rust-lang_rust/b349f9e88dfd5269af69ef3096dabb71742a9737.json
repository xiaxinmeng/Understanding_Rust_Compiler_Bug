{"sha": "b349f9e88dfd5269af69ef3096dabb71742a9737", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNDlmOWU4OGRmZDUyNjlhZjY5ZWYzMDk2ZGFiYjcxNzQyYTk3Mzc=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-12T11:16:09Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2015-08-13T04:35:40Z"}, "message": "new lint for needless lifetimes (fixes #115)", "tree": {"sha": "3bcd1de46d2165b3f5521664423a889e7faea97b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bcd1de46d2165b3f5521664423a889e7faea97b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b349f9e88dfd5269af69ef3096dabb71742a9737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b349f9e88dfd5269af69ef3096dabb71742a9737", "html_url": "https://github.com/rust-lang/rust/commit/b349f9e88dfd5269af69ef3096dabb71742a9737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b349f9e88dfd5269af69ef3096dabb71742a9737/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbd396db9179d99a219726e4dcfb7875c6749390", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd396db9179d99a219726e4dcfb7875c6749390", "html_url": "https://github.com/rust-lang/rust/commit/dbd396db9179d99a219726e4dcfb7875c6749390"}], "stats": {"total": 191, "additions": 191, "deletions": 0}, "files": [{"sha": "69a373b21bb55f64bf326223ac41b377df1d2c4a", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b349f9e88dfd5269af69ef3096dabb71742a9737/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b349f9e88dfd5269af69ef3096dabb71742a9737/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=b349f9e88dfd5269af69ef3096dabb71742a9737", "patch": "@@ -32,6 +32,7 @@ pub mod unicode;\n pub mod strings;\n pub mod methods;\n pub mod returns;\n+pub mod lifetimes;\n \n #[plugin_registrar]\n pub fn plugin_registrar(reg: &mut Registry) {\n@@ -59,6 +60,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box returns::ReturnPass as LintPassObject);\n     reg.register_lint_pass(box methods::MethodsPass as LintPassObject);\n     reg.register_lint_pass(box types::LetPass as LintPassObject);\n+    reg.register_lint_pass(box lifetimes::LifetimePass as LintPassObject);\n \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH,\n@@ -87,5 +89,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            methods::STR_TO_STRING,\n                                            methods::STRING_TO_STRING,\n                                            types::LET_UNIT_VALUE,\n+                                           lifetimes::NEEDLESS_LIFETIMES,\n                                            ]);\n }"}, {"sha": "602eea1ae5e6702c2ec21bbfc95d0ff0602386a0", "filename": "src/lifetimes.rs", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/b349f9e88dfd5269af69ef3096dabb71742a9737/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b349f9e88dfd5269af69ef3096dabb71742a9737/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=b349f9e88dfd5269af69ef3096dabb71742a9737", "patch": "@@ -0,0 +1,126 @@\n+use syntax::ast::*;\n+use rustc::lint::{Context, LintPass, LintArray, Lint};\n+use syntax::codemap::Span;\n+use syntax::visit::{Visitor, FnKind, walk_ty};\n+use utils::{in_macro, span_lint};\n+use std::collections::HashSet;\n+use std::iter::FromIterator;\n+\n+declare_lint!(pub NEEDLESS_LIFETIMES, Warn,\n+              \"Warn on explicit lifetimes when elision rules would apply\");\n+\n+#[derive(Copy,Clone)]\n+pub struct LifetimePass;\n+\n+impl LintPass for LifetimePass {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(NEEDLESS_LIFETIMES)\n+    }\n+\n+    fn check_fn(&mut self, cx: &Context, kind: FnKind, decl: &FnDecl,\n+                _: &Block, span: Span, _: NodeId) {\n+        if cx.sess().codemap().with_expn_info(span.expn_id, |info| in_macro(cx, info)) {\n+            return;\n+        }\n+        if could_use_elision(kind, decl) {\n+            span_lint(cx, NEEDLESS_LIFETIMES, span,\n+                      \"explicit lifetimes given where they could be inferred\");\n+        }\n+    }\n+}\n+\n+#[derive(PartialEq, Eq, Hash, Debug)]\n+enum RefLt {\n+    Unnamed,\n+    Static,\n+    Named(Name),\n+}\n+use self::RefLt::*;\n+\n+fn could_use_elision(kind: FnKind, func: &FnDecl) -> bool {\n+    // There are two scenarios where elision works:\n+    // * no output references, all input references have different LT\n+    // * output references, exactly one input reference with same LT\n+\n+    let mut input_visitor = RefVisitor(Vec::new());\n+    let mut output_visitor = RefVisitor(Vec::new());\n+\n+    // extract lifetimes of input argument types\n+    for arg in &func.inputs {\n+        walk_ty(&mut input_visitor, &*arg.ty);\n+    }\n+    // extract lifetime of \"self\" argument for methods\n+    if let FnKind::FkMethod(_, sig, _) = kind {\n+        match sig.explicit_self.node {\n+            SelfRegion(ref lt_opt, _, _) =>\n+                input_visitor.visit_opt_lifetime_ref(sig.explicit_self.span, lt_opt),\n+            SelfExplicit(ref ty, _) =>\n+                walk_ty(&mut input_visitor, ty),\n+            _ => { }\n+        }\n+    }\n+    // extract lifetimes of output type\n+    if let Return(ref ty) = func.output {\n+        walk_ty(&mut output_visitor, ty);\n+    }\n+\n+    let input_lts = input_visitor.into_vec();\n+    let output_lts = output_visitor.into_vec();\n+\n+    // no input lifetimes? easy case!\n+    if input_lts.is_empty() {\n+        return false;\n+    } else if output_lts.is_empty() {\n+        // no output lifetimes, check distinctness of input lifetimes\n+\n+        // only one reference with unnamed lifetime, ok\n+        if input_lts.len() == 1 && input_lts[0] == Unnamed {\n+            return false;\n+        }\n+        // we have no output reference, so we only need all distinct lifetimes\n+        if input_lts.len() == unique_lifetimes(&input_lts) {\n+            return true;\n+        }\n+    } else {\n+        // we have output references, so we need one input reference,\n+        // and all output lifetimes must be the same\n+        if unique_lifetimes(&output_lts) > 1 {\n+            return false;\n+        }\n+        if input_lts.len() == 1 {\n+            match (&input_lts[0], &output_lts[0]) {\n+                (&Named(n1), &Named(n2)) if n1 == n2 => { return true; }\n+                (&Named(_), &Unnamed) => { return true; }\n+                (&Unnamed, &Named(_)) => { return true; }\n+                _ => { } // already elided, different named lifetimes\n+                         // or something static going on\n+            }\n+        }\n+    }\n+    false\n+}\n+\n+fn unique_lifetimes(lts: &Vec<RefLt>) -> usize {\n+    let set: HashSet<&RefLt> = HashSet::from_iter(lts.iter());\n+    set.len()\n+}\n+\n+struct RefVisitor(Vec<RefLt>);\n+\n+impl RefVisitor {\n+    fn into_vec(self) -> Vec<RefLt> { self.0 }\n+}\n+\n+impl<'v> Visitor<'v> for RefVisitor {\n+    fn visit_opt_lifetime_ref(&mut self, _: Span, lifetime: &'v Option<Lifetime>) {\n+        if let &Some(ref lt) = lifetime {\n+            if lt.name.as_str() == \"'static\" {\n+                self.0.push(Static);\n+            } else {\n+                self.0.push(Named(lt.name));\n+            }\n+        } else {\n+            self.0.push(Unnamed);\n+        }\n+    }\n+}"}, {"sha": "9f2a3ee99afae5abb4830320410893b9dc9a9474", "filename": "tests/compile-fail/lifetimes.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b349f9e88dfd5269af69ef3096dabb71742a9737/tests%2Fcompile-fail%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b349f9e88dfd5269af69ef3096dabb71742a9737/tests%2Fcompile-fail%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flifetimes.rs?ref=b349f9e88dfd5269af69ef3096dabb71742a9737", "patch": "@@ -0,0 +1,62 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(needless_lifetimes)]\n+\n+fn distinct_lifetimes<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: u8) { } //~ERROR\n+\n+fn distinct_and_static<'a, 'b>(_x: &'a u8, _y: &'b u8, _z: &'static u8) { } //~ERROR\n+\n+fn same_lifetime_on_input<'a>(_x: &'a u8, _y: &'a u8) { } // no error, same lifetime on two params\n+\n+fn only_static_on_input(_x: &u8, _y: &u8, _z: &'static u8) { } // no error, static involved\n+\n+fn in_and_out<'a>(x: &'a u8, _y: u8) -> &'a u8 { x } //~ERROR\n+\n+fn multiple_in_and_out_1<'a>(x: &'a u8, _y: &'a u8) -> &'a u8 { x } // no error, multiple input refs\n+\n+fn multiple_in_and_out_2<'a, 'b>(x: &'a u8, _y: &'b u8) -> &'a u8 { x } // no error, multiple input refs\n+\n+fn in_static_and_out<'a>(x: &'a u8, _y: &'static u8) -> &'a u8 { x } // no error, static involved\n+\n+fn deep_reference_1<'a, 'b>(x: &'a u8, _y: &'b u8) -> Result<&'a u8, ()> { Ok(x) } // no error\n+\n+fn deep_reference_2<'a>(x: Result<&'a u8, &'a u8>) -> &'a u8 { x.unwrap() } // no error, two input refs\n+\n+fn deep_reference_3<'a>(x: &'a u8, _y: u8) -> Result<&'a u8, ()> { Ok(x) } //~ERROR\n+\n+struct X {\n+    x: u8,\n+}\n+\n+impl X {\n+    fn self_and_out<'s>(&'s self) -> &'s u8 { &self.x } //~ERROR\n+\n+    fn self_and_in_out<'s, 't>(&'s self, _x: &'t u8) -> &'s u8 { &self.x } // no error, multiple input refs\n+\n+    fn distinct_self_and_in<'s, 't>(&'s self, _x: &'t u8) { } //~ERROR\n+\n+    fn self_and_same_in<'s>(&'s self, _x: &'s u8) { } // no error, same lifetimes on two params\n+}\n+\n+static STATIC: u8 = 1;\n+\n+fn main() {\n+    distinct_lifetimes(&1, &2, 3);\n+    distinct_and_static(&1, &2, &STATIC);\n+    same_lifetime_on_input(&1, &2);\n+    only_static_on_input(&1, &2, &STATIC);\n+    in_and_out(&1, 2);\n+    multiple_in_and_out_1(&1, &2);\n+    multiple_in_and_out_2(&1, &2);\n+    in_static_and_out(&1, &STATIC);\n+    let _ = deep_reference_1(&1, &2);\n+    let _ = deep_reference_2(Ok(&1));\n+    let _ = deep_reference_3(&1, 2);\n+\n+    let foo = X { x: 1 };\n+    foo.self_and_out();\n+    foo.self_and_in_out(&1);\n+    foo.distinct_self_and_in(&1);\n+    foo.self_and_same_in(&1);\n+}"}]}