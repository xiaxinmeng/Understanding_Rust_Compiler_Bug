{"sha": "e17b97c8e02c7de0230466ec36bb9cceef9c774f", "node_id": "C_kwDOAAsO6NoAKGUxN2I5N2M4ZTAyYzdkZTAyMzA0NjZlYzM2YmI5Y2NlZWY5Yzc3NGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-19T12:44:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-19T12:44:07Z"}, "message": "Auto merge of #8711 - kyoto7250:new-lint-bytes-count-to-len, r=giraffate\n\nTake over: New lint bytes count to len\n\ntake over #8375\nclose #8083\n\nThis PR adds new lint about  considering replacing `.bytes().count()` with `.len()`.\n\nThank you in advance.\n\n---\n\nr! `@Manishearth`\n\nchangelog: adds new lint [`bytes_count_to_len`] to consider replacing `.bytes().count()` with `.len()`", "tree": {"sha": "f35843ed3247b4a7e7f47f5688600f19a1cb9584", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f35843ed3247b4a7e7f47f5688600f19a1cb9584"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e17b97c8e02c7de0230466ec36bb9cceef9c774f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e17b97c8e02c7de0230466ec36bb9cceef9c774f", "html_url": "https://github.com/rust-lang/rust/commit/e17b97c8e02c7de0230466ec36bb9cceef9c774f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e17b97c8e02c7de0230466ec36bb9cceef9c774f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c", "html_url": "https://github.com/rust-lang/rust/commit/cbdf17c884116f17b1efe8c6dd3c41eb45d1342c"}, {"sha": "f19387d2371de497552fbf465acf9438084fe77b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f19387d2371de497552fbf465acf9438084fe77b", "html_url": "https://github.com/rust-lang/rust/commit/f19387d2371de497552fbf465acf9438084fe77b"}], "stats": {"total": 174, "additions": 174, "deletions": 0}, "files": [{"sha": "dba4ab50cf2fd599354833bbb7ecf59b6488c4b3", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e17b97c8e02c7de0230466ec36bb9cceef9c774f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e17b97c8e02c7de0230466ec36bb9cceef9c774f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e17b97c8e02c7de0230466ec36bb9cceef9c774f", "patch": "@@ -3300,6 +3300,7 @@ Released 2018-09-13\n [`boxed_local`]: https://rust-lang.github.io/rust-clippy/master/index.html#boxed_local\n [`branches_sharing_code`]: https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code\n [`builtin_type_shadow`]: https://rust-lang.github.io/rust-clippy/master/index.html#builtin_type_shadow\n+[`bytes_count_to_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#bytes_count_to_len\n [`bytes_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#bytes_nth\n [`cargo_common_metadata`]: https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata\n [`case_sensitive_file_extension_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#case_sensitive_file_extension_comparisons"}, {"sha": "d70dbf5b23904aa282d7be16b3c025add46f1781", "filename": "clippy_lints/src/bytes_count_to_len.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e17b97c8e02c7de0230466ec36bb9cceef9c774f/clippy_lints%2Fsrc%2Fbytes_count_to_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17b97c8e02c7de0230466ec36bb9cceef9c774f/clippy_lints%2Fsrc%2Fbytes_count_to_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytes_count_to_len.rs?ref=e17b97c8e02c7de0230466ec36bb9cceef9c774f", "patch": "@@ -0,0 +1,70 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{match_def_path, paths};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// It checks for `str::bytes().count()` and suggests replacing it with\n+    /// `str::len()`.\n+    ///\n+    /// ### Why is this bad?\n+    /// `str::bytes().count()` is longer and may not be as performant as using\n+    /// `str::len()`.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// \"hello\".bytes().count();\n+    /// String::from(\"hello\").bytes().count();\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// \"hello\".len();\n+    /// String::from(\"hello\").len();\n+    /// ```\n+    #[clippy::version = \"1.62.0\"]\n+    pub BYTES_COUNT_TO_LEN,\n+    complexity,\n+    \"Using `bytes().count()` when `len()` performs the same functionality\"\n+}\n+\n+declare_lint_pass!(BytesCountToLen => [BYTES_COUNT_TO_LEN]);\n+\n+impl<'tcx> LateLintPass<'tcx> for BytesCountToLen {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n+        if_chain! {\n+            if let hir::ExprKind::MethodCall(_, expr_args, _) = &expr.kind;\n+            if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n+            if match_def_path(cx, expr_def_id, &paths::ITER_COUNT);\n+\n+            if let [bytes_expr] = &**expr_args;\n+            if let hir::ExprKind::MethodCall(_, bytes_args, _) = &bytes_expr.kind;\n+            if let Some(bytes_def_id) = cx.typeck_results().type_dependent_def_id(bytes_expr.hir_id);\n+            if match_def_path(cx, bytes_def_id, &paths::STR_BYTES);\n+\n+            if let [str_expr] = &**bytes_args;\n+            let ty = cx.typeck_results().expr_ty(str_expr).peel_refs();\n+\n+            if is_type_diagnostic_item(cx, ty, sym::String) || ty.kind() == &ty::Str;\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+                span_lint_and_sugg(\n+                    cx,\n+                    BYTES_COUNT_TO_LEN,\n+                    expr.span,\n+                    \"using long and hard to read `.bytes().count()`\",\n+                    \"consider calling `.len()` instead\",\n+                    format!(\"{}.len()\", snippet_with_applicability(cx, str_expr.span, \"..\", &mut applicability)),\n+                    applicability\n+                );\n+            }\n+        };\n+    }\n+}"}, {"sha": "46494d496a44a3ca5a3e8d5cd70744adfa723e67", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e17b97c8e02c7de0230466ec36bb9cceef9c774f/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17b97c8e02c7de0230466ec36bb9cceef9c774f/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=e17b97c8e02c7de0230466ec36bb9cceef9c774f", "patch": "@@ -24,6 +24,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),\n     LintId::of(booleans::LOGIC_BUG),\n     LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(bytes_count_to_len::BYTES_COUNT_TO_LEN),\n     LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n     LintId::of(casts::CAST_ENUM_TRUNCATION),"}, {"sha": "df646ff5c5fe9fa8a3dc0b84f94d38934d3d55f2", "filename": "clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e17b97c8e02c7de0230466ec36bb9cceef9c774f/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17b97c8e02c7de0230466ec36bb9cceef9c774f/clippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=e17b97c8e02c7de0230466ec36bb9cceef9c774f", "patch": "@@ -5,6 +5,7 @@\n store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec![\n     LintId::of(attrs::DEPRECATED_CFG_ATTR),\n     LintId::of(booleans::NONMINIMAL_BOOL),\n+    LintId::of(bytes_count_to_len::BYTES_COUNT_TO_LEN),\n     LintId::of(casts::CHAR_LIT_AS_U8),\n     LintId::of(casts::UNNECESSARY_CAST),\n     LintId::of(derivable_impls::DERIVABLE_IMPLS),"}, {"sha": "3541c9328c068366db31dbaf5e3ad1858ab62648", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e17b97c8e02c7de0230466ec36bb9cceef9c774f/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17b97c8e02c7de0230466ec36bb9cceef9c774f/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=e17b97c8e02c7de0230466ec36bb9cceef9c774f", "patch": "@@ -65,6 +65,7 @@ store.register_lints(&[\n     booleans::NONMINIMAL_BOOL,\n     borrow_as_ptr::BORROW_AS_PTR,\n     bytecount::NAIVE_BYTECOUNT,\n+    bytes_count_to_len::BYTES_COUNT_TO_LEN,\n     cargo::CARGO_COMMON_METADATA,\n     cargo::MULTIPLE_CRATE_VERSIONS,\n     cargo::NEGATIVE_FEATURE_NAMES,"}, {"sha": "c1783a3f764bcc3290627565d3771c91ed36d0b2", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17b97c8e02c7de0230466ec36bb9cceef9c774f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17b97c8e02c7de0230466ec36bb9cceef9c774f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=e17b97c8e02c7de0230466ec36bb9cceef9c774f", "patch": "@@ -181,6 +181,7 @@ mod bool_assert_comparison;\n mod booleans;\n mod borrow_as_ptr;\n mod bytecount;\n+mod bytes_count_to_len;\n mod cargo;\n mod case_sensitive_file_extension_comparisons;\n mod casts;\n@@ -880,6 +881,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(unnecessary_owned_empty_strings::UnnecessaryOwnedEmptyStrings));\n     store.register_early_pass(|| Box::new(pub_use::PubUse));\n     store.register_late_pass(|| Box::new(format_push_string::FormatPushString));\n+    store.register_late_pass(|| Box::new(bytes_count_to_len::BytesCountToLen));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "4291a5e2299c7f1ecc0e6211d9687253b8ea8734", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e17b97c8e02c7de0230466ec36bb9cceef9c774f/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17b97c8e02c7de0230466ec36bb9cceef9c774f/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=e17b97c8e02c7de0230466ec36bb9cceef9c774f", "patch": "@@ -61,6 +61,7 @@ pub const IO_READ: [&str; 3] = [\"std\", \"io\", \"Read\"];\n pub const IO_WRITE: [&str; 3] = [\"std\", \"io\", \"Write\"];\n pub const IPADDR_V4: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V4\"];\n pub const IPADDR_V6: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V6\"];\n+pub const ITER_COUNT: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"count\"];\n pub const ITER_REPEAT: [&str; 5] = [\"core\", \"iter\", \"sources\", \"repeat\", \"repeat\"];\n #[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const ITERTOOLS_NEXT_TUPLE: [&str; 3] = [\"itertools\", \"Itertools\", \"next_tuple\"];\n@@ -149,6 +150,7 @@ pub const STD_FS_CREATE_DIR: [&str; 3] = [\"std\", \"fs\", \"create_dir\"];\n pub const STRING_AS_MUT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_mut_str\"];\n pub const STRING_AS_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"as_str\"];\n pub const STRING_NEW: [&str; 4] = [\"alloc\", \"string\", \"String\", \"new\"];\n+pub const STR_BYTES: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"bytes\"];\n pub const STR_ENDS_WITH: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"ends_with\"];\n pub const STR_FROM_UTF8: [&str; 4] = [\"core\", \"str\", \"converts\", \"from_utf8\"];\n pub const STR_LEN: [&str; 4] = [\"core\", \"str\", \"<impl str>\", \"len\"];"}, {"sha": "860642363b5f0ecf370379dc2ee071b58a66e72a", "filename": "tests/ui/bytes_count_to_len.fixed", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e17b97c8e02c7de0230466ec36bb9cceef9c774f/tests%2Fui%2Fbytes_count_to_len.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e17b97c8e02c7de0230466ec36bb9cceef9c774f/tests%2Fui%2Fbytes_count_to_len.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_count_to_len.fixed?ref=e17b97c8e02c7de0230466ec36bb9cceef9c774f", "patch": "@@ -0,0 +1,34 @@\n+// run-rustfix\n+#![warn(clippy::bytes_count_to_len)]\n+use std::fs::File;\n+use std::io::Read;\n+\n+fn main() {\n+    // should fix, because type is String\n+    let _ = String::from(\"foo\").len();\n+\n+    let s1 = String::from(\"foo\");\n+    let _ = s1.len();\n+\n+    // should fix, because type is &str\n+    let _ = \"foo\".len();\n+\n+    let s2 = \"foo\";\n+    let _ = s2.len();\n+\n+    // make sure using count() normally doesn't trigger warning\n+    let vector = [0, 1, 2];\n+    let _ = vector.iter().count();\n+\n+    // The type is slice, so should not fix\n+    let _ = &[1, 2, 3].bytes().count();\n+\n+    let bytes: &[u8] = &[1, 2, 3];\n+    bytes.bytes().count();\n+\n+    // The type is File, so should not fix\n+    let _ = File::open(\"foobar\").unwrap().bytes().count();\n+\n+    let f = File::open(\"foobar\").unwrap();\n+    let _ = f.bytes().count();\n+}"}, {"sha": "162730c2842a1615db2b1fe1cbb5e68d369737a7", "filename": "tests/ui/bytes_count_to_len.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e17b97c8e02c7de0230466ec36bb9cceef9c774f/tests%2Fui%2Fbytes_count_to_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17b97c8e02c7de0230466ec36bb9cceef9c774f/tests%2Fui%2Fbytes_count_to_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_count_to_len.rs?ref=e17b97c8e02c7de0230466ec36bb9cceef9c774f", "patch": "@@ -0,0 +1,34 @@\n+// run-rustfix\n+#![warn(clippy::bytes_count_to_len)]\n+use std::fs::File;\n+use std::io::Read;\n+\n+fn main() {\n+    // should fix, because type is String\n+    let _ = String::from(\"foo\").bytes().count();\n+\n+    let s1 = String::from(\"foo\");\n+    let _ = s1.bytes().count();\n+\n+    // should fix, because type is &str\n+    let _ = \"foo\".bytes().count();\n+\n+    let s2 = \"foo\";\n+    let _ = s2.bytes().count();\n+\n+    // make sure using count() normally doesn't trigger warning\n+    let vector = [0, 1, 2];\n+    let _ = vector.iter().count();\n+\n+    // The type is slice, so should not fix\n+    let _ = &[1, 2, 3].bytes().count();\n+\n+    let bytes: &[u8] = &[1, 2, 3];\n+    bytes.bytes().count();\n+\n+    // The type is File, so should not fix\n+    let _ = File::open(\"foobar\").unwrap().bytes().count();\n+\n+    let f = File::open(\"foobar\").unwrap();\n+    let _ = f.bytes().count();\n+}"}, {"sha": "224deb779871c7bdd81ffa5b38d0d9dcfff2fbb4", "filename": "tests/ui/bytes_count_to_len.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e17b97c8e02c7de0230466ec36bb9cceef9c774f/tests%2Fui%2Fbytes_count_to_len.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e17b97c8e02c7de0230466ec36bb9cceef9c774f/tests%2Fui%2Fbytes_count_to_len.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbytes_count_to_len.stderr?ref=e17b97c8e02c7de0230466ec36bb9cceef9c774f", "patch": "@@ -0,0 +1,28 @@\n+error: using long and hard to read `.bytes().count()`\n+  --> $DIR/bytes_count_to_len.rs:8:13\n+   |\n+LL |     let _ = String::from(\"foo\").bytes().count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.len()` instead: `String::from(\"foo\").len()`\n+   |\n+   = note: `-D clippy::bytes-count-to-len` implied by `-D warnings`\n+\n+error: using long and hard to read `.bytes().count()`\n+  --> $DIR/bytes_count_to_len.rs:11:13\n+   |\n+LL |     let _ = s1.bytes().count();\n+   |             ^^^^^^^^^^^^^^^^^^ help: consider calling `.len()` instead: `s1.len()`\n+\n+error: using long and hard to read `.bytes().count()`\n+  --> $DIR/bytes_count_to_len.rs:14:13\n+   |\n+LL |     let _ = \"foo\".bytes().count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^ help: consider calling `.len()` instead: `\"foo\".len()`\n+\n+error: using long and hard to read `.bytes().count()`\n+  --> $DIR/bytes_count_to_len.rs:17:13\n+   |\n+LL |     let _ = s2.bytes().count();\n+   |             ^^^^^^^^^^^^^^^^^^ help: consider calling `.len()` instead: `s2.len()`\n+\n+error: aborting due to 4 previous errors\n+"}]}