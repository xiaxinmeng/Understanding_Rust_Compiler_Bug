{"sha": "09d3097734883a78b69f111a9ecf2154c7da9ce7", "node_id": "C_kwDOAAsO6NoAKDA5ZDMwOTc3MzQ4ODNhNzhiNjlmMTExYTllY2YyMTU0YzdkYTljZTc", "commit": {"author": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2023-02-12T14:40:06Z"}, "committer": {"name": "Samuel Tardieu", "email": "sam@rfc1149.net", "date": "2023-02-12T19:07:23Z"}, "message": "manual_let_else: do not suggest semantically different replacements", "tree": {"sha": "edc502fec581d90368680a70dbbf81af0468ef09", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/edc502fec581d90368680a70dbbf81af0468ef09"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09d3097734883a78b69f111a9ecf2154c7da9ce7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09d3097734883a78b69f111a9ecf2154c7da9ce7", "html_url": "https://github.com/rust-lang/rust/commit/09d3097734883a78b69f111a9ecf2154c7da9ce7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09d3097734883a78b69f111a9ecf2154c7da9ce7/comments", "author": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samueltardieu", "id": 44656, "node_id": "MDQ6VXNlcjQ0NjU2", "avatar_url": "https://avatars.githubusercontent.com/u/44656?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samueltardieu", "html_url": "https://github.com/samueltardieu", "followers_url": "https://api.github.com/users/samueltardieu/followers", "following_url": "https://api.github.com/users/samueltardieu/following{/other_user}", "gists_url": "https://api.github.com/users/samueltardieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/samueltardieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samueltardieu/subscriptions", "organizations_url": "https://api.github.com/users/samueltardieu/orgs", "repos_url": "https://api.github.com/users/samueltardieu/repos", "events_url": "https://api.github.com/users/samueltardieu/events{/privacy}", "received_events_url": "https://api.github.com/users/samueltardieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d880cae0b5d5b57dc41366644f9fc3162be6bdcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/d880cae0b5d5b57dc41366644f9fc3162be6bdcb", "html_url": "https://github.com/rust-lang/rust/commit/d880cae0b5d5b57dc41366644f9fc3162be6bdcb"}], "stats": {"total": 51, "additions": 46, "deletions": 5}, "files": [{"sha": "9eacb38351407c8d2a2ba7bf12fcdbf1296b78ab", "filename": "clippy_lints/src/manual_let_else.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09d3097734883a78b69f111a9ecf2154c7da9ce7/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d3097734883a78b69f111a9ecf2154c7da9ce7/clippy_lints%2Fsrc%2Fmanual_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_let_else.rs?ref=09d3097734883a78b69f111a9ecf2154c7da9ce7", "patch": "@@ -115,6 +115,13 @@ impl<'tcx> LateLintPass<'tcx> for ManualLetElse {\n                     .enumerate()\n                     .find(|(_, arm)| expr_diverges(cx, arm.body) && pat_allowed_for_else(cx, arm.pat, check_types));\n                 let Some((idx, diverging_arm)) = diverging_arm_opt else { return; };\n+                // If the non-diverging arm is the first one, its pattern can be reused in a let/else statement.\n+                // However, if it arrives in second position, its pattern may cover some cases already covered\n+                // by the diverging one.\n+                // TODO: accept the non-diverging arm as a second position if patterns are disjointed.\n+                if idx == 0 {\n+                    return;\n+                }\n                 let pat_arm = &arms[1 - idx];\n                 if !expr_is_simple_identity(pat_arm.pat, pat_arm.body) {\n                     return;"}, {"sha": "73b74679125978913c96a650c10113b27f3d77b3", "filename": "tests/ui/manual_let_else_match.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/09d3097734883a78b69f111a9ecf2154c7da9ce7/tests%2Fui%2Fmanual_let_else_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09d3097734883a78b69f111a9ecf2154c7da9ce7/tests%2Fui%2Fmanual_let_else_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else_match.rs?ref=09d3097734883a78b69f111a9ecf2154c7da9ce7", "patch": "@@ -42,13 +42,13 @@ fn fire() {\n     loop {\n         // More complex pattern for the identity arm and diverging arm\n         let v = match h() {\n-            (Some(_), Some(_)) | (None, None) => continue,\n             (Some(v), None) | (None, Some(v)) => v,\n+            (Some(_), Some(_)) | (None, None) => continue,\n         };\n         // Custom enums are supported as long as the \"else\" arm is a simple _\n         let v = match build_enum() {\n-            _ => continue,\n             Variant::Bar(v) | Variant::Baz(v) => v,\n+            _ => continue,\n         };\n     }\n \n@@ -71,6 +71,12 @@ fn fire() {\n         Variant::Bar(_) | Variant::Baz(_) => (),\n         _ => return,\n     };\n+\n+    let data = [1_u8, 2, 3, 4, 0, 0, 0, 0];\n+    let data = match data.as_slice() {\n+        [data @ .., 0, 0, 0, 0] | [data @ .., 0, 0] | [data @ .., 0] => data,\n+        _ => return,\n+    };\n }\n \n fn not_fire() {\n@@ -125,4 +131,23 @@ fn not_fire() {\n         Ok(v) | Err(Variant::Bar(v) | Variant::Baz(v)) => v,\n         Err(Variant::Foo) => return,\n     };\n+\n+    // Issue 10241\n+    // The non-divergent arm arrives in second position and\n+    // may cover values already matched in the first arm.\n+    let v = match h() {\n+        (Some(_), Some(_)) | (None, None) => return,\n+        (Some(v), _) | (None, Some(v)) => v,\n+    };\n+\n+    let v = match build_enum() {\n+        _ => return,\n+        Variant::Bar(v) | Variant::Baz(v) => v,\n+    };\n+\n+    let data = [1_u8, 2, 3, 4, 0, 0, 0, 0];\n+    let data = match data.as_slice() {\n+        [] | [0, 0] => return,\n+        [data @ .., 0, 0, 0, 0] | [data @ .., 0, 0] | [data @ ..] => data,\n+    };\n }"}, {"sha": "7abaa0b85d23ec2e914ed319d4e955103dd08819", "filename": "tests/ui/manual_let_else_match.stderr", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/09d3097734883a78b69f111a9ecf2154c7da9ce7/tests%2Fui%2Fmanual_let_else_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09d3097734883a78b69f111a9ecf2154c7da9ce7/tests%2Fui%2Fmanual_let_else_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmanual_let_else_match.stderr?ref=09d3097734883a78b69f111a9ecf2154c7da9ce7", "patch": "@@ -22,17 +22,17 @@ error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else_match.rs:44:9\n    |\n LL | /         let v = match h() {\n-LL | |             (Some(_), Some(_)) | (None, None) => continue,\n LL | |             (Some(v), None) | (None, Some(v)) => v,\n+LL | |             (Some(_), Some(_)) | (None, None) => continue,\n LL | |         };\n    | |__________^ help: consider writing: `let ((Some(v), None) | (None, Some(v))) = h() else { continue };`\n \n error: this could be rewritten as `let...else`\n   --> $DIR/manual_let_else_match.rs:49:9\n    |\n LL | /         let v = match build_enum() {\n-LL | |             _ => continue,\n LL | |             Variant::Bar(v) | Variant::Baz(v) => v,\n+LL | |             _ => continue,\n LL | |         };\n    | |__________^ help: consider writing: `let (Variant::Bar(v) | Variant::Baz(v)) = build_enum() else { continue };`\n \n@@ -63,5 +63,14 @@ LL | |         _ => return,\n LL | |     };\n    | |______^ help: consider writing: `let (Variant::Bar(_) | Variant::Baz(_)) = f else { return };`\n \n-error: aborting due to 7 previous errors\n+error: this could be rewritten as `let...else`\n+  --> $DIR/manual_let_else_match.rs:76:5\n+   |\n+LL | /     let data = match data.as_slice() {\n+LL | |         [data @ .., 0, 0, 0, 0] | [data @ .., 0, 0] | [data @ .., 0] => data,\n+LL | |         _ => return,\n+LL | |     };\n+   | |______^ help: consider writing: `let ([data @ .., 0, 0, 0, 0] | [data @ .., 0, 0] | [data @ .., 0]) = data.as_slice() else { return };`\n+\n+error: aborting due to 8 previous errors\n "}]}