{"sha": "29c105964bc303448611b6329ecb36a7470b796b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YzEwNTk2NGJjMzAzNDQ4NjExYjYzMjllY2IzNmE3NDcwYjc5NmI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-18T07:25:44Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-26T23:23:01Z"}, "message": "Add and use `HasAttrs` trait", "tree": {"sha": "f56418dd1438d906932429f6f11e27e9fed9b7f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f56418dd1438d906932429f6f11e27e9fed9b7f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29c105964bc303448611b6329ecb36a7470b796b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29c105964bc303448611b6329ecb36a7470b796b", "html_url": "https://github.com/rust-lang/rust/commit/29c105964bc303448611b6329ecb36a7470b796b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29c105964bc303448611b6329ecb36a7470b796b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97e3a2401e4b2f659d69ed0c0822cae04e3495b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/97e3a2401e4b2f659d69ed0c0822cae04e3495b7", "html_url": "https://github.com/rust-lang/rust/commit/97e3a2401e4b2f659d69ed0c0822cae04e3495b7"}], "stats": {"total": 166, "additions": 89, "deletions": 77}, "files": [{"sha": "b641600fb448a07119d90b70e77acb7c3449de7c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 20, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/29c105964bc303448611b6329ecb36a7470b796b/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c105964bc303448611b6329ecb36a7470b796b/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=29c105964bc303448611b6329ecb36a7470b796b", "patch": "@@ -15,7 +15,7 @@ pub use self::UnsafeSource::*;\n pub use self::ViewPath_::*;\n pub use self::PathParameters::*;\n \n-use attr::ThinAttributes;\n+use attr::{ThinAttributes, HasAttrs};\n use codemap::{mk_sp, respan, Span, Spanned, DUMMY_SP, ExpnId};\n use abi::Abi;\n use errors;\n@@ -829,13 +829,7 @@ impl StmtKind {\n     }\n \n     pub fn attrs(&self) -> &[Attribute] {\n-        match *self {\n-            StmtKind::Decl(ref d, _) => d.attrs(),\n-            StmtKind::Expr(ref e, _) |\n-            StmtKind::Semi(ref e, _) => e.attrs(),\n-            StmtKind::Mac(_, _, Some(ref b)) => b,\n-            StmtKind::Mac(_, _, None) => &[],\n-        }\n+        HasAttrs::attrs(self)\n     }\n }\n \n@@ -868,10 +862,7 @@ pub struct Local {\n \n impl Local {\n     pub fn attrs(&self) -> &[Attribute] {\n-        match self.attrs {\n-            Some(ref b) => b,\n-            None => &[],\n-        }\n+        HasAttrs::attrs(self)\n     }\n }\n \n@@ -887,10 +878,7 @@ pub enum DeclKind {\n \n impl Decl {\n     pub fn attrs(&self) -> &[Attribute] {\n-        match self.node {\n-            DeclKind::Local(ref l) => l.attrs(),\n-            DeclKind::Item(ref i) => i.attrs(),\n-        }\n+        HasAttrs::attrs(self)\n     }\n }\n \n@@ -935,10 +923,7 @@ pub struct Expr {\n \n impl Expr {\n     pub fn attrs(&self) -> &[Attribute] {\n-        match self.attrs {\n-            Some(ref b) => b,\n-            None => &[],\n-        }\n+        HasAttrs::attrs(self)\n     }\n }\n "}, {"sha": "c3c3deea1877fa1a00fc69fd6c413e55bdd6f813", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 84, "deletions": 57, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/29c105964bc303448611b6329ecb36a7470b796b/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29c105964bc303448611b6329ecb36a7470b796b/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=29c105964bc303448611b6329ecb36a7470b796b", "patch": "@@ -884,82 +884,109 @@ impl AttributesExt for Vec<Attribute> {\n     }\n }\n \n+pub trait HasAttrs: Sized {\n+    fn attrs(&self) -> &[ast::Attribute];\n+    fn map_attrs<F: FnOnce(Vec<ast::Attribute>) -> Vec<ast::Attribute>>(self, f: F) -> Self;\n+}\n+\n /// A cheap way to add Attributes to an AST node.\n pub trait WithAttrs {\n     // FIXME: Could be extended to anything IntoIter<Item=Attribute>\n     fn with_attrs(self, attrs: ThinAttributes) -> Self;\n }\n \n-impl WithAttrs for P<Expr> {\n+impl<T: HasAttrs> WithAttrs for T {\n     fn with_attrs(self, attrs: ThinAttributes) -> Self {\n-        self.map(|mut e| {\n-            e.attrs.update(|a| a.append(attrs));\n-            e\n+        self.map_attrs(|mut orig_attrs| {\n+            orig_attrs.extend(attrs.into_attr_vec());\n+            orig_attrs\n         })\n     }\n }\n \n-impl WithAttrs for P<Item> {\n-    fn with_attrs(self, attrs: ThinAttributes) -> Self {\n-        self.map(|Item { ident, attrs: mut ats, id, node, vis, span }| {\n-            ats.extend(attrs.into_attr_vec());\n-            Item {\n-                ident: ident,\n-                attrs: ats,\n-                id: id,\n-                node: node,\n-                vis: vis,\n-                span: span,\n-            }\n-        })\n+impl HasAttrs for Vec<Attribute> {\n+    fn attrs(&self) -> &[Attribute] {\n+        &self\n+    }\n+    fn map_attrs<F: FnOnce(Vec<Attribute>) -> Vec<Attribute>>(self, f: F) -> Self {\n+        f(self)\n     }\n }\n \n-impl WithAttrs for P<Local> {\n-    fn with_attrs(self, attrs: ThinAttributes) -> Self {\n-        self.map(|Local { pat, ty, init, id, span, attrs: mut ats }| {\n-            ats.update(|a| a.append(attrs));\n-            Local {\n-                pat: pat,\n-                ty: ty,\n-                init: init,\n-                id: id,\n-                span: span,\n-                attrs: ats,\n-            }\n-        })\n+impl HasAttrs for ThinAttributes {\n+    fn attrs(&self) -> &[Attribute] {\n+        self.as_attr_slice()\n+    }\n+    fn map_attrs<F: FnOnce(Vec<Attribute>) -> Vec<Attribute>>(self, f: F) -> Self {\n+        self.map_thin_attrs(f)\n     }\n }\n \n-impl WithAttrs for P<Decl> {\n-    fn with_attrs(self, attrs: ThinAttributes) -> Self {\n-        self.map(|Spanned { span, node }| {\n-            Spanned {\n-                span: span,\n-                node: match node {\n-                    DeclKind::Local(local) => DeclKind::Local(local.with_attrs(attrs)),\n-                    DeclKind::Item(item) => DeclKind::Item(item.with_attrs(attrs)),\n-                }\n-            }\n-        })\n+impl<T: HasAttrs + 'static> HasAttrs for P<T> {\n+    fn attrs(&self) -> &[Attribute] {\n+        (**self).attrs()\n+    }\n+    fn map_attrs<F: FnOnce(Vec<Attribute>) -> Vec<Attribute>>(self, f: F) -> Self {\n+        self.map(|t| t.map_attrs(f))\n     }\n }\n \n-impl WithAttrs for P<Stmt> {\n-    fn with_attrs(self, attrs: ThinAttributes) -> Self {\n-        self.map(|Spanned { span, node }| {\n-            Spanned {\n-                span: span,\n-                node: match node {\n-                    StmtKind::Decl(decl, id) => StmtKind::Decl(decl.with_attrs(attrs), id),\n-                    StmtKind::Expr(expr, id) => StmtKind::Expr(expr.with_attrs(attrs), id),\n-                    StmtKind::Semi(expr, id) => StmtKind::Semi(expr.with_attrs(attrs), id),\n-                    StmtKind::Mac(mac, style, mut ats) => {\n-                        ats.update(|a| a.append(attrs));\n-                        StmtKind::Mac(mac, style, ats)\n-                    }\n-                },\n-            }\n-        })\n+impl HasAttrs for DeclKind {\n+    fn attrs(&self) -> &[Attribute] {\n+        match *self {\n+            DeclKind::Local(ref local) => local.attrs(),\n+            DeclKind::Item(ref item) => item.attrs(),\n+        }\n+    }\n+\n+    fn map_attrs<F: FnOnce(Vec<Attribute>) -> Vec<Attribute>>(self, f: F) -> Self {\n+        match self {\n+            DeclKind::Local(local) => DeclKind::Local(local.map_attrs(f)),\n+            DeclKind::Item(item) => DeclKind::Item(item.map_attrs(f)),\n+        }\n     }\n }\n+\n+impl HasAttrs for StmtKind {\n+    fn attrs(&self) -> &[Attribute] {\n+        match *self {\n+            StmtKind::Decl(ref decl, _) => decl.attrs(),\n+            StmtKind::Expr(ref expr, _) | StmtKind::Semi(ref expr, _) => expr.attrs(),\n+            StmtKind::Mac(_, _, ref attrs) => attrs.attrs(),\n+        }\n+    }\n+\n+    fn map_attrs<F: FnOnce(Vec<Attribute>) -> Vec<Attribute>>(self, f: F) -> Self {\n+        match self {\n+            StmtKind::Decl(decl, id) => StmtKind::Decl(decl.map_attrs(f), id),\n+            StmtKind::Expr(expr, id) => StmtKind::Expr(expr.map_attrs(f), id),\n+            StmtKind::Semi(expr, id) => StmtKind::Semi(expr.map_attrs(f), id),\n+            StmtKind::Mac(mac, style, attrs) =>\n+                StmtKind::Mac(mac, style, attrs.map_attrs(f)),\n+        }\n+    }\n+}\n+\n+macro_rules! derive_has_attrs_from_field {\n+    ($($ty:path),*) => { derive_has_attrs_from_field!($($ty: .attrs),*); };\n+    ($($ty:path : $(.$field:ident)*),*) => { $(\n+        impl HasAttrs for $ty {\n+            fn attrs(&self) -> &[Attribute] {\n+                self $(.$field)* .attrs()\n+            }\n+\n+            fn map_attrs<F>(mut self, f: F) -> Self\n+                where F: FnOnce(Vec<Attribute>) -> Vec<Attribute>,\n+            {\n+                self $(.$field)* = self $(.$field)* .map_attrs(f);\n+                self\n+            }\n+        }\n+    )* }\n+}\n+\n+derive_has_attrs_from_field! {\n+    Item, Expr, Local, ast::ForeignItem, ast::StructField, ast::ImplItem, ast::TraitItem, ast::Arm\n+}\n+\n+derive_has_attrs_from_field! { Decl: .node, Stmt: .node, ast::Variant: .node.attrs }"}]}