{"sha": "215e229dd1a495cda6541371c75145ba03f62de5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNWUyMjlkZDFhNDk1Y2RhNjU0MTM3MWM3NTE0NWJhMDNmNjJkZTU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-11T15:28:32Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-11T15:28:32Z"}, "message": "Update wrap return tests\n\nUpdate \"no diagnostic\" tests, use `()` instead of `String`", "tree": {"sha": "ed882b1eea9ab16107518455b113c6d048724ca4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed882b1eea9ab16107518455b113c6d048724ca4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/215e229dd1a495cda6541371c75145ba03f62de5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/215e229dd1a495cda6541371c75145ba03f62de5", "html_url": "https://github.com/rust-lang/rust/commit/215e229dd1a495cda6541371c75145ba03f62de5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/215e229dd1a495cda6541371c75145ba03f62de5/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90331ea0350eaea281d35bd0aa13df7f20a8600d", "url": "https://api.github.com/repos/rust-lang/rust/commits/90331ea0350eaea281d35bd0aa13df7f20a8600d", "html_url": "https://github.com/rust-lang/rust/commit/90331ea0350eaea281d35bd0aa13df7f20a8600d"}], "stats": {"total": 46, "additions": 17, "deletions": 29}, "files": [{"sha": "f44feaf697b72ccc82ae48985ceb4c2772d6f516", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/215e229dd1a495cda6541371c75145ba03f62de5/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/215e229dd1a495cda6541371c75145ba03f62de5/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=215e229dd1a495cda6541371c75145ba03f62de5", "patch": "@@ -321,29 +321,26 @@ mod tests {\n     fn test_wrap_return_type() {\n         let before = r#\"\n             //- /main.rs\n-            use core::{string::String, result::Result::{self, Ok, Err}};\n+            use core::result::Result::{self, Ok, Err};\n \n-            fn div(x: i32, y: i32) -> Result<i32, String> {\n+            fn div(x: i32, y: i32) -> Result<i32, ()> {\n                 if y == 0 {\n-                    return Err(\"div by zero\".into());\n+                    return Err(());\n                 }\n                 x / y<|>\n             }\n \n             //- /core/lib.rs\n-            pub mod string {\n-                pub struct String { }\n-            }\n             pub mod result {\n                 pub enum Result<T, E> { Ok(T), Err(E) }\n             }\n         \"#;\n         let after = r#\"\n-            use core::{string::String, result::Result::{self, Ok, Err}};\n+            use core::result::Result::{self, Ok, Err};\n \n-            fn div(x: i32, y: i32) -> Result<i32, String> {\n+            fn div(x: i32, y: i32) -> Result<i32, ()> {\n                 if y == 0 {\n-                    return Err(\"div by zero\".into());\n+                    return Err(());\n                 }\n                 Ok(x / y)\n             }\n@@ -386,32 +383,29 @@ mod tests {\n     fn test_wrap_return_type_handles_type_aliases() {\n         let before = r#\"\n             //- /main.rs\n-            use core::{string::String, result::Result::{self, Ok, Err}};\n+            use core::result::Result::{self, Ok, Err};\n \n-            type MyResult<T> = Result<T, String>;\n+            type MyResult<T> = Result<T, ()>;\n \n             fn div(x: i32, y: i32) -> MyResult<i32> {\n                 if y == 0 {\n-                    return Err(\"div by zero\".into());\n+                    return Err(());\n                 }\n                 x <|>/ y\n             }\n \n             //- /core/lib.rs\n-            pub mod string {\n-                pub struct String { }\n-            }\n             pub mod result {\n                 pub enum Result<T, E> { Ok(T), Err(E) }\n             }\n         \"#;\n         let after = r#\"\n-            use core::{string::String, result::Result::{self, Ok, Err}};\n+            use core::result::Result::{self, Ok, Err};\n \n-            type MyResult<T> = Result<T, String>;\n+            type MyResult<T> = Result<T, ()>;\n             fn div(x: i32, y: i32) -> MyResult<i32> {\n                 if y == 0 {\n-                    return Err(\"div by zero\".into());\n+                    return Err(());\n                 }\n                 Ok(x / y)\n             }\n@@ -423,16 +417,13 @@ mod tests {\n     fn test_wrap_return_type_not_applicable_when_expr_type_does_not_match_ok_type() {\n         let content = r#\"\n             //- /main.rs\n-            use std::{string::String, result::Result::{self, Ok, Err}};\n+            use core::result::Result::{self, Ok, Err};\n \n-            fn foo() -> Result<String, i32> {\n+            fn foo() -> Result<(), i32> {\n                 0<|>\n             }\n \n-            //- /std/lib.rs\n-            pub mod string {\n-                pub struct String { }\n-            }\n+            //- /core/lib.rs\n             pub mod result {\n                 pub enum Result<T, E> { Ok(T), Err(E) }\n             }\n@@ -444,7 +435,7 @@ mod tests {\n     fn test_wrap_return_type_not_applicable_when_return_type_is_not_result() {\n         let content = r#\"\n             //- /main.rs\n-            use std::{string::String, result::Result::{self, Ok, Err}};\n+            use core::result::Result::{self, Ok, Err};\n \n             enum SomeOtherEnum {\n                 Ok(i32),\n@@ -455,10 +446,7 @@ mod tests {\n                 0<|>\n             }\n \n-            //- /std/lib.rs\n-            pub mod string {\n-                pub struct String { }\n-            }\n+            //- /core/lib.rs\n             pub mod result {\n                 pub enum Result<T, E> { Ok(T), Err(E) }\n             }"}]}