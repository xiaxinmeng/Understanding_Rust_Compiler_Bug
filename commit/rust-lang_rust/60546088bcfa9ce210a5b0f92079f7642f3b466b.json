{"sha": "60546088bcfa9ce210a5b0f92079f7642f3b466b", "node_id": "C_kwDOAAsO6NoAKDYwNTQ2MDg4YmNmYTljZTIxMGE1YjBmOTIwNzlmNzY0MmYzYjQ2NmI", "commit": {"author": {"name": "Nicholas Bishop", "email": "nbishop@nbishop.net", "date": "2022-11-20T19:13:17Z"}, "committer": {"name": "Nicholas Bishop", "email": "nbishop@nbishop.net", "date": "2022-11-20T20:25:22Z"}, "message": "dist: Ensure UEFI rlibs are all COFF\n\nIf clang isn't the C compiler used for the UEFI targets, or if the wrong\n`--target` is passed to clang, we will get ELF objects in some\nrlibs. This will cause problems at link time when trying to compile a\nUEFI program that uses any of those objects. Add a check to the dist\nstep for UEFI targets that reads each rlib with the `object` crate and\nfails with an error if any non-COFF objects are found.", "tree": {"sha": "ba54fc72697a7eef8e710a479b7bc28101133a66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba54fc72697a7eef8e710a479b7bc28101133a66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60546088bcfa9ce210a5b0f92079f7642f3b466b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60546088bcfa9ce210a5b0f92079f7642f3b466b", "html_url": "https://github.com/rust-lang/rust/commit/60546088bcfa9ce210a5b0f92079f7642f3b466b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60546088bcfa9ce210a5b0f92079f7642f3b466b/comments", "author": {"login": "nicholasbishop", "id": 1023208, "node_id": "MDQ6VXNlcjEwMjMyMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1023208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicholasbishop", "html_url": "https://github.com/nicholasbishop", "followers_url": "https://api.github.com/users/nicholasbishop/followers", "following_url": "https://api.github.com/users/nicholasbishop/following{/other_user}", "gists_url": "https://api.github.com/users/nicholasbishop/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicholasbishop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicholasbishop/subscriptions", "organizations_url": "https://api.github.com/users/nicholasbishop/orgs", "repos_url": "https://api.github.com/users/nicholasbishop/repos", "events_url": "https://api.github.com/users/nicholasbishop/events{/privacy}", "received_events_url": "https://api.github.com/users/nicholasbishop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nicholasbishop", "id": 1023208, "node_id": "MDQ6VXNlcjEwMjMyMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1023208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicholasbishop", "html_url": "https://github.com/nicholasbishop", "followers_url": "https://api.github.com/users/nicholasbishop/followers", "following_url": "https://api.github.com/users/nicholasbishop/following{/other_user}", "gists_url": "https://api.github.com/users/nicholasbishop/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicholasbishop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicholasbishop/subscriptions", "organizations_url": "https://api.github.com/users/nicholasbishop/orgs", "repos_url": "https://api.github.com/users/nicholasbishop/repos", "events_url": "https://api.github.com/users/nicholasbishop/events{/privacy}", "received_events_url": "https://api.github.com/users/nicholasbishop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a2a546bea08e6b561f99fe09aa94df3f185bbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a2a546bea08e6b561f99fe09aa94df3f185bbc", "html_url": "https://github.com/rust-lang/rust/commit/01a2a546bea08e6b561f99fe09aa94df3f185bbc"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "acac9e7a03c6075fcd1e6914615465ab4fee3ed6", "filename": "src/bootstrap/Cargo.lock", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60546088bcfa9ce210a5b0f92079f7642f3b466b/src%2Fbootstrap%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/60546088bcfa9ce210a5b0f92079f7642f3b466b/src%2Fbootstrap%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.lock?ref=60546088bcfa9ce210a5b0f92079f7642f3b466b", "patch": "@@ -53,6 +53,7 @@ dependencies = [\n  \"hex\",\n  \"ignore\",\n  \"libc\",\n+ \"object\",\n  \"once_cell\",\n  \"opener\",\n  \"pretty_assertions\",\n@@ -400,6 +401,15 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"object\"\n+version = \"0.29.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"21158b2c33aa6d4561f1c0a6ea283ca92bc54802a93b263e910746d679a7eb53\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n [[package]]\n name = \"once_cell\"\n version = \"1.12.0\""}, {"sha": "4000d6cd477e32d6985c23bd1c03ea729d605dc0", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/60546088bcfa9ce210a5b0f92079f7642f3b466b/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/60546088bcfa9ce210a5b0f92079f7642f3b466b/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=60546088bcfa9ce210a5b0f92079f7642f3b466b", "patch": "@@ -42,6 +42,7 @@ getopts = \"0.2.19\"\n cc = \"1.0.69\"\n libc = \"0.2\"\n hex = \"0.4\"\n+object = { version = \"0.29.0\", default-features = false, features = [\"archive\", \"coff\", \"read_core\", \"unaligned\"] }\n serde = { version = \"1.0.8\", features = [\"derive\"] }\n serde_json = \"1.0.2\"\n sha2 = \"0.10\""}, {"sha": "2fef7f65827dd65c90e43c4b2141b964a4943fef", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/60546088bcfa9ce210a5b0f92079f7642f3b466b/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60546088bcfa9ce210a5b0f92079f7642f3b466b/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=60546088bcfa9ce210a5b0f92079f7642f3b466b", "patch": "@@ -10,10 +10,14 @@\n \n use std::collections::HashSet;\n use std::env;\n+use std::ffi::OsStr;\n use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n+use object::read::archive::ArchiveFile;\n+use object::BinaryFormat;\n+\n use crate::builder::{Builder, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::channel;\n@@ -555,6 +559,39 @@ fn skip_host_target_lib(builder: &Builder<'_>, compiler: Compiler) -> bool {\n     }\n }\n \n+/// Check that all objects in rlibs for UEFI targets are COFF. This\n+/// ensures that the C compiler isn't producing ELF objects, which would\n+/// not link correctly with the COFF objects.\n+fn verify_uefi_rlib_format(builder: &Builder<'_>, target: TargetSelection, stamp: &Path) {\n+    if !target.ends_with(\"-uefi\") {\n+        return;\n+    }\n+\n+    for (path, _) in builder.read_stamp_file(stamp) {\n+        if path.extension() != Some(OsStr::new(\"rlib\")) {\n+            continue;\n+        }\n+\n+        let data = t!(fs::read(&path));\n+        let data = data.as_slice();\n+        let archive = t!(ArchiveFile::parse(data));\n+        for member in archive.members() {\n+            let member = t!(member);\n+            let member_data = t!(member.data(data));\n+\n+            let is_coff = match object::File::parse(member_data) {\n+                Ok(member_file) => member_file.format() == BinaryFormat::Coff,\n+                Err(_) => false,\n+            };\n+\n+            if !is_coff {\n+                let member_name = String::from_utf8_lossy(member.name());\n+                panic!(\"member {} in {} is not COFF\", member_name, path.display());\n+            }\n+        }\n+    }\n+}\n+\n /// Copy stamped files into an image's `target/lib` directory.\n fn copy_target_libs(builder: &Builder<'_>, target: TargetSelection, image: &Path, stamp: &Path) {\n     let dst = image.join(\"lib/rustlib\").join(target.triple).join(\"lib\");\n@@ -610,6 +647,7 @@ impl Step for Std {\n \n         let compiler_to_use = builder.compiler_for(compiler.stage, compiler.host, target);\n         let stamp = compile::libstd_stamp(builder, compiler_to_use, target);\n+        verify_uefi_rlib_format(builder, target, &stamp);\n         copy_target_libs(builder, target, &tarball.image_dir(), &stamp);\n \n         Some(tarball.generate())"}]}