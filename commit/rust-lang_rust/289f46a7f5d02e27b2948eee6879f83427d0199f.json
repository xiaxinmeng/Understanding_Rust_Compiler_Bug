{"sha": "289f46a7f5d02e27b2948eee6879f83427d0199f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4OWY0NmE3ZjVkMDJlMjdiMjk0OGVlZTY4NzlmODM0MjdkMDE5OWY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-10T02:13:29Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-04-18T15:39:59Z"}, "message": "Detect mistyped associated consts in `Instance::resolve`.", "tree": {"sha": "fbbdcf0aa65526e9998560e7da4aeb7d831db2fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbbdcf0aa65526e9998560e7da4aeb7d831db2fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/289f46a7f5d02e27b2948eee6879f83427d0199f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/289f46a7f5d02e27b2948eee6879f83427d0199f", "html_url": "https://github.com/rust-lang/rust/commit/289f46a7f5d02e27b2948eee6879f83427d0199f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/289f46a7f5d02e27b2948eee6879f83427d0199f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675", "html_url": "https://github.com/rust-lang/rust/commit/0b83a5a8ae81f69dbfd1ed19566ab2d6eb588675"}], "stats": {"total": 194, "additions": 142, "deletions": 52}, "files": [{"sha": "f3d226b30f7cf3926964d86b12a2ad4d35a8af2f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -4310,6 +4310,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"log\",\n  \"rustc_data_structures\",\n+ \"rustc_errors\",\n  \"rustc_hir\",\n  \"rustc_infer\",\n  \"rustc_middle\","}, {"sha": "d385c073074743e181011359563268cf5daa5c19", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -376,6 +376,7 @@ impl MiscMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                     def_id,\n                     tcx.intern_substs(&[]),\n                 )\n+                .unwrap()\n                 .unwrap(),\n             ),\n             _ => {"}, {"sha": "1577dbbd3508f9f41e39c210c9ab8138698bda63", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -468,6 +468,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                     start_def_id,\n                     cx.tcx().intern_substs(&[main_ret_ty.into()]),\n                 )\n+                .unwrap()\n                 .unwrap(),\n             );\n             ("}, {"sha": "112833845e5a461ac536b68009e6a21982910a60", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -537,6 +537,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             ty::FnDef(def_id, substs) => (\n                 Some(\n                     ty::Instance::resolve(bx.tcx(), ty::ParamEnv::reveal_all(), def_id, substs)\n+                        .unwrap()\n                         .unwrap(),\n                 ),\n                 None,"}, {"sha": "a7953f0f900fb583fa243370a01a7ef94a099f7c", "filename": "src/librustc_middle/mir/interpret/queries.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fqueries.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -39,12 +39,13 @@ impl<'tcx> TyCtxt<'tcx> {\n         promoted: Option<mir::Promoted>,\n         span: Option<Span>,\n     ) -> ConstEvalResult<'tcx> {\n-        let instance = ty::Instance::resolve(self, param_env, def_id, substs);\n-        if let Some(instance) = instance {\n-            let cid = GlobalId { instance, promoted };\n-            self.const_eval_global_id(param_env, cid, span)\n-        } else {\n-            Err(ErrorHandled::TooGeneric)\n+        match ty::Instance::resolve(self, param_env, def_id, substs) {\n+            Ok(Some(instance)) => {\n+                let cid = GlobalId { instance, promoted };\n+                self.const_eval_global_id(param_env, cid, span)\n+            }\n+            Ok(None) => Err(ErrorHandled::TooGeneric),\n+            Err(error_reported) => Err(ErrorHandled::Reported(error_reported)),\n         }\n     }\n "}, {"sha": "6e56b36476007c34ecb29dc0aca7642a50a005eb", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -679,7 +679,7 @@ rustc_queries! {\n     Codegen {\n         query codegen_fulfill_obligation(\n             key: (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>)\n-        ) -> Option<Vtable<'tcx, ()>> {\n+        ) -> Result<Vtable<'tcx, ()>, ErrorReported> {\n             cache_on_disk_if { true }\n             desc { |tcx|\n                 \"checking if `{}` fulfills its obligations\",\n@@ -1258,9 +1258,18 @@ rustc_queries! {\n             desc { \"looking up enabled feature gates\" }\n         }\n \n+        /// Attempt to resolve the given `DefId` to an `Instance`, for the\n+        /// given generics args (`SubstsRef`), returning one of:\n+        ///  * `Ok(Some(instance))` on success\n+        ///  * `Ok(None)` when the `SubstsRef` are still too generic,\n+        ///    and therefore don't allow finding the final `Instance`\n+        ///  * `Err(ErrorReported)` when the `Instance` resolution process\n+        ///    couldn't complete due to errors elsewhere - this is distinct\n+        ///    from `Ok(None)` to avoid misleading diagnostics when an error\n+        ///    has already been/will be emitted, for the original cause\n         query resolve_instance(\n             key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>\n-        ) -> Option<ty::Instance<'tcx>> {\n+        ) -> Result<Option<ty::Instance<'tcx>>, ErrorReported> {\n             desc { \"resolving instance `{}`\", ty::Instance::new(key.value.0, key.value.1) }\n         }\n     }"}, {"sha": "d7b59d5fa132c294f1a53f26770d993df0ea5401", "filename": "src/librustc_middle/ty/instance.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_middle%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_middle%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Finstance.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -1,6 +1,7 @@\n use crate::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::ty::{self, SubstsRef, Ty, TyCtxt, TypeFoldable};\n+use rustc_errors::ErrorReported;\n use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::lang_items::DropInPlaceFnLangItem;\n@@ -268,26 +269,31 @@ impl<'tcx> Instance<'tcx> {\n     /// this is used to find the precise code that will run for a trait method invocation,\n     /// if known.\n     ///\n-    /// Returns `None` if we cannot resolve `Instance` to a specific instance.\n+    /// Returns `Ok(None)` if we cannot resolve `Instance` to a specific instance.\n     /// For example, in a context like this,\n     ///\n     /// ```\n     /// fn foo<T: Debug>(t: T) { ... }\n     /// ```\n     ///\n-    /// trying to resolve `Debug::fmt` applied to `T` will yield `None`, because we do not\n+    /// trying to resolve `Debug::fmt` applied to `T` will yield `Ok(None)`, because we do not\n     /// know what code ought to run. (Note that this setting is also affected by the\n     /// `RevealMode` in the parameter environment.)\n     ///\n     /// Presuming that coherence and type-check have succeeded, if this method is invoked\n     /// in a monomorphic context (i.e., like during codegen), then it is guaranteed to return\n-    /// `Some`.\n+    /// `Ok(Some(instance))`.\n+    ///\n+    /// Returns `Err(ErrorReported)` when the `Instance` resolution process\n+    /// couldn't complete due to errors elsewhere - this is distinct\n+    /// from `Ok(None)` to avoid misleading diagnostics when an error\n+    /// has already been/will be emitted, for the original cause\n     pub fn resolve(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         def_id: DefId,\n         substs: SubstsRef<'tcx>,\n-    ) -> Option<Instance<'tcx>> {\n+    ) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n         // All regions in the result of this query are erased, so it's\n         // fine to erase all of the input regions.\n \n@@ -307,7 +313,7 @@ impl<'tcx> Instance<'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> Option<Instance<'tcx>> {\n         debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n-        Instance::resolve(tcx, param_env, def_id, substs).map(|mut resolved| {\n+        Instance::resolve(tcx, param_env, def_id, substs).ok().flatten().map(|mut resolved| {\n             match resolved.def {\n                 InstanceDef::Item(def_id) if resolved.def.requires_caller_location(tcx) => {\n                     debug!(\" => fn pointer created for function with #[track_caller]\");\n@@ -339,7 +345,7 @@ impl<'tcx> Instance<'tcx> {\n             debug!(\" => associated item with unsizeable self: Self\");\n             Some(Instance { def: InstanceDef::VtableShim(def_id), substs })\n         } else {\n-            Instance::resolve(tcx, param_env, def_id, substs)\n+            Instance::resolve(tcx, param_env, def_id, substs).ok().flatten()\n         }\n     }\n \n@@ -360,7 +366,7 @@ impl<'tcx> Instance<'tcx> {\n     pub fn resolve_drop_in_place(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> ty::Instance<'tcx> {\n         let def_id = tcx.require_lang_item(DropInPlaceFnLangItem, None);\n         let substs = tcx.intern_substs(&[ty.into()]);\n-        Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap()\n+        Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap().unwrap()\n     }\n \n     pub fn fn_once_adapter_instance("}, {"sha": "18efc736d2a3256ab865c187287861f3ce3fa14a", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -453,8 +453,13 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         trace!(\"resolve: {:?}, {:#?}\", def_id, substs);\n         trace!(\"param_env: {:#?}\", self.param_env);\n         trace!(\"substs: {:#?}\", substs);\n-        ty::Instance::resolve(*self.tcx, self.param_env, def_id, substs)\n-            .ok_or_else(|| err_inval!(TooGeneric).into())\n+        match ty::Instance::resolve(*self.tcx, self.param_env, def_id, substs) {\n+            Ok(Some(instance)) => Ok(instance),\n+            Ok(None) => throw_inval!(TooGeneric),\n+\n+            // FIXME(eddyb) this could be a bit more specific than `TypeckError`.\n+            Err(error_reported) => throw_inval!(TypeckError(error_reported)),\n+        }\n     }\n \n     pub fn layout_of_local("}, {"sha": "efb5e24bf96b233626b90a35499c7bf4108582f4", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -674,9 +674,12 @@ fn visit_fn_use<'tcx>(\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {\n     if let ty::FnDef(def_id, substs) = ty.kind {\n-        let resolver =\n-            if is_direct_call { ty::Instance::resolve } else { ty::Instance::resolve_for_fn_ptr };\n-        let instance = resolver(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap();\n+        let instance = if is_direct_call {\n+            ty::Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap().unwrap()\n+        } else {\n+            ty::Instance::resolve_for_fn_ptr(tcx, ty::ParamEnv::reveal_all(), def_id, substs)\n+                .unwrap()\n+        };\n         visit_instance_use(tcx, instance, is_direct_call, output);\n     }\n }\n@@ -1057,6 +1060,7 @@ impl RootCollector<'_, 'v> {\n             start_def_id,\n             self.tcx.intern_substs(&[main_ret_ty.into()]),\n         )\n+        .unwrap()\n         .unwrap();\n \n         self.output.push(create_fn_mono_item(start_instance));\n@@ -1112,8 +1116,9 @@ fn create_mono_items_for_default_impls<'tcx>(\n                                 trait_ref.substs[param.index as usize]\n                             }\n                         });\n-                    let instance =\n-                        ty::Instance::resolve(tcx, param_env, method.def_id, substs).unwrap();\n+                    let instance = ty::Instance::resolve(tcx, param_env, method.def_id, substs)\n+                        .unwrap()\n+                        .unwrap();\n \n                     let mono_item = create_fn_mono_item(instance);\n                     if mono_item.is_instantiable(tcx) && should_monomorphize_locally(tcx, &instance)"}, {"sha": "98a3d9584f58781d85447f931ac22931994a743f", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -18,7 +18,7 @@ pub fn custom_coerce_unsize_info<'tcx>(\n     });\n \n     match tcx.codegen_fulfill_obligation((ty::ParamEnv::reveal_all(), trait_ref)) {\n-        Some(traits::VtableImpl(traits::VtableImplData { impl_def_id, .. })) => {\n+        Ok(traits::VtableImpl(traits::VtableImplData { impl_def_id, .. })) => {\n             tcx.coerce_unsized_info(impl_def_id).custom_kind.unwrap()\n         }\n         vtable => {"}, {"sha": "6754831a6fe15f197c3884e2efbc5371c144a286", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -525,7 +525,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                 if self.tcx.features().const_trait_impl {\n                     let instance = Instance::resolve(self.tcx, self.param_env, def_id, substs);\n                     debug!(\"Resolving ({:?}) -> {:?}\", def_id, instance);\n-                    if let Some(func) = instance {\n+                    if let Ok(Some(func)) = instance {\n                         if let InstanceDef::Item(def_id) = func.def {\n                             if is_const_fn(self.tcx, def_id) {\n                                 return;"}, {"sha": "f071eb0a952d0ab10d93db7bda7ea973ddf4a584", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -178,7 +178,8 @@ impl Inliner<'tcx> {\n         let terminator = bb_data.terminator();\n         if let TerminatorKind::Call { func: ref op, .. } = terminator.kind {\n             if let ty::FnDef(callee_def_id, substs) = op.ty(caller_body, self.tcx).kind {\n-                let instance = Instance::resolve(self.tcx, param_env, callee_def_id, substs)?;\n+                let instance =\n+                    Instance::resolve(self.tcx, param_env, callee_def_id, substs).ok().flatten()?;\n \n                 if let InstanceDef::Virtual(..) = instance.def {\n                     return None;"}, {"sha": "66d56858527ae5e673d40ae97da1c57348d9a004", "filename": "src/librustc_mir_build/lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_mir_build%2Flints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_mir_build%2Flints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Flints.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -72,7 +72,7 @@ impl<'mir, 'tcx> Search<'mir, 'tcx> {\n         let func_ty = func.ty(body, tcx);\n         if let ty::FnDef(fn_def_id, substs) = func_ty.kind {\n             let (call_fn_id, call_substs) =\n-                if let Some(instance) = Instance::resolve(tcx, param_env, fn_def_id, substs) {\n+                if let Ok(Some(instance)) = Instance::resolve(tcx, param_env, fn_def_id, substs) {\n                     (instance.def_id(), instance.substs)\n                 } else {\n                     (fn_def_id, substs)"}, {"sha": "b2e46bc6da116bcddc9078ffc7fd53df9a199b1d", "filename": "src/librustc_trait_selection/traits/codegen/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_trait_selection%2Ftraits%2Fcodegen%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_trait_selection%2Ftraits%2Fcodegen%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fcodegen%2Fmod.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -7,6 +7,7 @@ use crate::infer::{InferCtxt, TyCtxtInferExt};\n use crate::traits::{\n     FulfillmentContext, Obligation, ObligationCause, SelectionContext, TraitEngine, Vtable,\n };\n+use rustc_errors::ErrorReported;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{self, TyCtxt};\n \n@@ -19,7 +20,7 @@ use rustc_middle::ty::{self, TyCtxt};\n pub fn codegen_fulfill_obligation<'tcx>(\n     ty: TyCtxt<'tcx>,\n     (param_env, trait_ref): (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>),\n-) -> Option<Vtable<'tcx, ()>> {\n+) -> Result<Vtable<'tcx, ()>, ErrorReported> {\n     // Remove any references to regions; this helps improve caching.\n     let trait_ref = ty.erase_regions(&trait_ref);\n \n@@ -55,7 +56,7 @@ pub fn codegen_fulfill_obligation<'tcx>(\n                         trait_ref\n                     ),\n                 );\n-                return None;\n+                return Err(ErrorReported);\n             }\n             Err(e) => {\n                 bug!(\"Encountered error `{:?}` selecting `{:?}` during codegen\", e, trait_ref)\n@@ -75,7 +76,7 @@ pub fn codegen_fulfill_obligation<'tcx>(\n         let vtable = drain_fulfillment_cx_or_panic(&infcx, &mut fulfill_cx, &vtable);\n \n         info!(\"Cache miss: {:?} => {:?}\", trait_ref, vtable);\n-        Some(vtable)\n+        Ok(vtable)\n     })\n }\n "}, {"sha": "b6db75e44f971c949de1b98667c3907513f19718", "filename": "src/librustc_ty/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2FCargo.toml?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -12,6 +12,7 @@ path = \"lib.rs\"\n log = \"0.4\"\n rustc_middle = { path = \"../librustc_middle\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n+rustc_errors = { path = \"../librustc_errors\" }\n rustc_hir = { path = \"../librustc_hir\" }\n rustc_infer = { path = \"../librustc_infer\" }\n rustc_span = { path = \"../librustc_span\" }"}, {"sha": "2a99bb1aed954393ac8f021d77cb3d5b41a921a1", "filename": "src/librustc_ty/instance.rs", "status": "modified", "additions": 53, "deletions": 13, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_ty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Flibrustc_ty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Finstance.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -1,3 +1,4 @@\n+use rustc_errors::ErrorReported;\n use rustc_hir::def_id::DefId;\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::ty::subst::SubstsRef;\n@@ -12,7 +13,7 @@ use log::debug;\n fn resolve_instance<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     key: ty::ParamEnvAnd<'tcx, (DefId, SubstsRef<'tcx>)>,\n-) -> Option<Instance<'tcx>> {\n+) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n     let (param_env, (def_id, substs)) = key.into_parts();\n \n     debug!(\"resolve(def_id={:?}, substs={:?})\", def_id, substs);\n@@ -40,7 +41,7 @@ fn resolve_instance<'tcx>(\n                 if ty.needs_drop(tcx, param_env) {\n                     // `DropGlue` requires a monomorphic aka concrete type.\n                     if ty.needs_subst() {\n-                        return None;\n+                        return Ok(None);\n                     }\n \n                     debug!(\" => nontrivial drop glue\");\n@@ -55,7 +56,7 @@ fn resolve_instance<'tcx>(\n                 ty::InstanceDef::Item(def_id)\n             }\n         };\n-        Some(Instance { def, substs })\n+        Ok(Some(Instance { def, substs }))\n     };\n     debug!(\"resolve(def_id={:?}, substs={:?}) = {:?}\", def_id, substs, result);\n     result\n@@ -67,7 +68,7 @@ fn resolve_associated_item<'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     trait_id: DefId,\n     rcvr_substs: SubstsRef<'tcx>,\n-) -> Option<Instance<'tcx>> {\n+) -> Result<Option<Instance<'tcx>>, ErrorReported> {\n     let def_id = trait_item.def_id;\n     debug!(\n         \"resolve_associated_item(trait_item={:?}, \\\n@@ -82,7 +83,7 @@ fn resolve_associated_item<'tcx>(\n \n     // Now that we know which impl is being used, we can dispatch to\n     // the actual function:\n-    match vtbl {\n+    Ok(match vtbl {\n         traits::VtableImpl(impl_data) => {\n             debug!(\n                 \"resolving VtableImpl: {:?}, {:?}, {:?}, {:?}\",\n@@ -94,13 +95,11 @@ fn resolve_associated_item<'tcx>(\n             let trait_def_id = tcx.trait_id_of_impl(impl_data.impl_def_id).unwrap();\n             let trait_def = tcx.trait_def(trait_def_id);\n             let leaf_def = trait_def\n-                .ancestors(tcx, impl_data.impl_def_id)\n-                .ok()?\n+                .ancestors(tcx, impl_data.impl_def_id)?\n                 .leaf_def(tcx, trait_item.ident, trait_item.kind)\n                 .unwrap_or_else(|| {\n                     bug!(\"{:?} not found in {:?}\", trait_item, impl_data.impl_def_id);\n                 });\n-            let def_id = leaf_def.item.def_id;\n \n             let substs = tcx.infer_ctxt().enter(|infcx| {\n                 let param_env = param_env.with_reveal_all();\n@@ -135,11 +134,52 @@ fn resolve_associated_item<'tcx>(\n             };\n \n             if !eligible {\n-                return None;\n+                return Ok(None);\n             }\n \n             let substs = tcx.erase_regions(&substs);\n-            Some(ty::Instance::new(def_id, substs))\n+\n+            // Check if we just resolved an associated `const` declaration from\n+            // a `trait` to an associated `const` definition in an `impl`, where\n+            // the definition in the `impl` has the wrong type (for which an\n+            // error has already been/will be emitted elsewhere).\n+            //\n+            // NB: this may be expensive, we try to skip it in all the cases where\n+            // we know the error would've been caught (e.g. in an upstream crate).\n+            //\n+            // A better approach might be to just introduce a query (returning\n+            // `Result<(), ErrorReported>`) for the check that `rustc_typeck`\n+            // performs (i.e. that the definition's type in the `impl` matches\n+            // the declaration in the `trait`), so that we can cheaply check\n+            // here if it failed, instead of approximating it.\n+            if trait_item.kind == ty::AssocKind::Const\n+                && trait_item.def_id != leaf_def.item.def_id\n+                && leaf_def.item.def_id.is_local()\n+            {\n+                let normalized_type_of = |def_id, substs| {\n+                    tcx.subst_and_normalize_erasing_regions(substs, param_env, &tcx.type_of(def_id))\n+                };\n+\n+                let original_ty = normalized_type_of(trait_item.def_id, rcvr_substs);\n+                let resolved_ty = normalized_type_of(leaf_def.item.def_id, substs);\n+\n+                if original_ty != resolved_ty {\n+                    let msg = format!(\n+                        \"Instance::resolve: inconsistent associated `const` type: \\\n+                         was `{}: {}` but resolved to `{}: {}`\",\n+                        tcx.def_path_str_with_substs(trait_item.def_id, rcvr_substs),\n+                        original_ty,\n+                        tcx.def_path_str_with_substs(leaf_def.item.def_id, substs),\n+                        resolved_ty,\n+                    );\n+                    let span = tcx.def_span(leaf_def.item.def_id);\n+                    tcx.sess.delay_span_bug(span, &msg);\n+\n+                    return Err(ErrorReported);\n+                }\n+            }\n+\n+            Some(ty::Instance::new(leaf_def.item.def_id, substs))\n         }\n         traits::VtableGenerator(generator_data) => Some(Instance {\n             def: ty::InstanceDef::Item(generator_data.generator_def_id),\n@@ -157,7 +197,7 @@ fn resolve_associated_item<'tcx>(\n         traits::VtableFnPointer(ref data) => {\n             // `FnPtrShim` requires a monomorphic aka concrete type.\n             if data.fn_ty.needs_subst() {\n-                return None;\n+                return Ok(None);\n             }\n \n             Some(Instance {\n@@ -178,7 +218,7 @@ fn resolve_associated_item<'tcx>(\n \n                     // `CloneShim` requires a monomorphic aka concrete type.\n                     if self_ty.needs_subst() {\n-                        return None;\n+                        return Ok(None);\n                     }\n \n                     Some(Instance {\n@@ -197,7 +237,7 @@ fn resolve_associated_item<'tcx>(\n             }\n         }\n         traits::VtableAutoImpl(..) | traits::VtableParam(..) | traits::VtableTraitAlias(..) => None,\n-    }\n+    })\n }\n \n pub fn provide(providers: &mut ty::query::Providers<'_>) {"}, {"sha": "b65f5345034e5f280afcb9d6c18dac5d4af3d378", "filename": "src/test/ui/consts/issue-70942-trait-vs-impl-mismatch.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -0,0 +1,14 @@\n+trait Nat {\n+    const VALUE: usize;\n+}\n+\n+struct Zero;\n+\n+impl Nat for Zero {\n+    const VALUE: i32 = 0;\n+    //~^ ERROR implemented const `VALUE` has an incompatible type for trait\n+}\n+\n+fn main() {\n+    let _: [i32; Zero::VALUE] = [];\n+}"}, {"sha": "19d9ff71667842aa1b3cfc8651705a05e0f9e4a3", "filename": "src/test/ui/consts/issue-70942-trait-vs-impl-mismatch.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-70942-trait-vs-impl-mismatch.stderr?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -0,0 +1,12 @@\n+error[E0326]: implemented const `VALUE` has an incompatible type for trait\n+  --> $DIR/issue-70942-trait-vs-impl-mismatch.rs:8:18\n+   |\n+LL |     const VALUE: usize;\n+   |                  ----- type in trait\n+...\n+LL |     const VALUE: i32 = 0;\n+   |                  ^^^ expected `usize`, found `i32`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0326`."}, {"sha": "2c5257ce063cb525897cd2c19a1b4380f1d0c37d", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.rs?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -19,5 +19,4 @@ impl TraitB for B { //~ ERROR not all trait items implemented, missing: `MyA`\n \n fn main() {\n     let _ = [0; B::VALUE];\n-    //~^ ERROR constant expression depends on a generic parameter\n }"}, {"sha": "8ae0f8b804c93e822b6b5f97fa81105cb3215dcc", "filename": "src/test/ui/issues/issue-69602-type-err-during-codegen-ice.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/289f46a7f5d02e27b2948eee6879f83427d0199f/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-69602-type-err-during-codegen-ice.stderr?ref=289f46a7f5d02e27b2948eee6879f83427d0199f", "patch": "@@ -13,15 +13,7 @@ LL |     type MyA: TraitA;\n LL | impl TraitB for B {\n    | ^^^^^^^^^^^^^^^^^ missing `MyA` in implementation\n \n-error: constant expression depends on a generic parameter\n-  --> $DIR/issue-69602-type-err-during-codegen-ice.rs:21:17\n-   |\n-LL |     let _ = [0; B::VALUE];\n-   |                 ^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0046, E0437.\n For more information about an error, try `rustc --explain E0046`."}]}