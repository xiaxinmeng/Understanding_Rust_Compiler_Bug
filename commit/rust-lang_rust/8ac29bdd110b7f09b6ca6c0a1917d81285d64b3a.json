{"sha": "8ac29bdd110b7f09b6ca6c0a1917d81285d64b3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYzI5YmRkMTEwYjdmMDliNmNhNmMwYTE5MTdkODEyODVkNjRiM2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-12T06:23:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-12T06:23:38Z"}, "message": "Auto merge of #42697 - Mark-Simulacrum:take-limit, r=aturon\n\nAllow setting the limit on std::io::Take.\n\nFixes https://github.com/rust-lang/rust/issues/27269.", "tree": {"sha": "44aac4d2bd98e5f262dbd5585bafd2cb938e97c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44aac4d2bd98e5f262dbd5585bafd2cb938e97c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ac29bdd110b7f09b6ca6c0a1917d81285d64b3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac29bdd110b7f09b6ca6c0a1917d81285d64b3a", "html_url": "https://github.com/rust-lang/rust/commit/8ac29bdd110b7f09b6ca6c0a1917d81285d64b3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ac29bdd110b7f09b6ca6c0a1917d81285d64b3a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1f1f86d7f5b0ee363b3d247624c01db3b1ef55f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1f1f86d7f5b0ee363b3d247624c01db3b1ef55f", "html_url": "https://github.com/rust-lang/rust/commit/d1f1f86d7f5b0ee363b3d247624c01db3b1ef55f"}, {"sha": "7109d03db50379c881b7efa42a46a8472c65f9a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7109d03db50379c881b7efa42a46a8472c65f9a0", "html_url": "https://github.com/rust-lang/rust/commit/7109d03db50379c881b7efa42a46a8472c65f9a0"}], "stats": {"total": 29, "additions": 29, "deletions": 0}, "files": [{"sha": "9a3036f753ed314e155321dea34d8acfdaea0a92", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8ac29bdd110b7f09b6ca6c0a1917d81285d64b3a/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ac29bdd110b7f09b6ca6c0a1917d81285d64b3a/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=8ac29bdd110b7f09b6ca6c0a1917d81285d64b3a", "patch": "@@ -1755,6 +1755,35 @@ impl<T> Take<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn limit(&self) -> u64 { self.limit }\n \n+    /// Sets the number of bytes that can be read before this instance will\n+    /// return EOF. This is the same as constructing a new `Take` instance, so\n+    /// the amount of bytes read and the previous limit value don't matter when\n+    /// calling this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(take_set_limit)]\n+    /// use std::io;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// # fn foo() -> io::Result<()> {\n+    /// let f = File::open(\"foo.txt\")?;\n+    ///\n+    /// // read at most five bytes\n+    /// let mut handle = f.take(5);\n+    /// handle.set_limit(10);\n+    ///\n+    /// assert_eq!(handle.limit(), 10);\n+    /// # Ok(())\n+    /// # }\n+    /// ```\n+    #[unstable(feature = \"take_set_limit\", issue = \"42781\")]\n+    pub fn set_limit(&mut self, limit: u64) {\n+        self.limit = limit;\n+    }\n+\n     /// Consumes the `Take`, returning the wrapped reader.\n     ///\n     /// # Examples"}]}