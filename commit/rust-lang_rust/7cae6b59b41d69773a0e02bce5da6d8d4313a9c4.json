{"sha": "7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYWU2YjU5YjQxZDY5NzczYTBlMDJiY2U1ZGE2ZDhkNDMxM2E5YzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-01T18:27:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-01T18:27:54Z"}, "message": "Auto merge of #30367 - tamird:fix-makefile-bugs, r=alexcrichton\n\nSome of this is scary stuff. Probably time to lint against this.\n\nFound with `make --warn-undefined-variables`.\n\nr? @alexcrichton", "tree": {"sha": "10e8002cdd60c4476107805148efba3d3b5cbc2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10e8002cdd60c4476107805148efba3d3b5cbc2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "html_url": "https://github.com/rust-lang/rust/commit/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2849ca64be2e09a0a67b84cdfc0ccc0b56c04599", "url": "https://api.github.com/repos/rust-lang/rust/commits/2849ca64be2e09a0a67b84cdfc0ccc0b56c04599", "html_url": "https://github.com/rust-lang/rust/commit/2849ca64be2e09a0a67b84cdfc0ccc0b56c04599"}, {"sha": "d03712977d7c913044f2b863269c4491d7fa7c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/d03712977d7c913044f2b863269c4491d7fa7c36", "html_url": "https://github.com/rust-lang/rust/commit/d03712977d7c913044f2b863269c4491d7fa7c36"}], "stats": {"total": 123, "additions": 66, "deletions": 57}, "files": [{"sha": "140c4af8297dd10af9e9d2ed20e04fccf56d8ceb", "filename": "mk/cfg/aarch64-linux-android.mk", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fcfg%2Faarch64-linux-android.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fcfg%2Faarch64-linux-android.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Faarch64-linux-android.mk?ref=7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "patch": "@@ -1,5 +1,4 @@\n # aarch64-linux-android configuration\n-# CROSS_PREFIX_aarch64-linux-android-\n CC_aarch64-linux-android=$(CFG_AARCH64_LINUX_ANDROID_NDK)/bin/aarch64-linux-android-gcc\n CXX_aarch64-linux-android=$(CFG_AARCH64_LINUX_ANDROID_NDK)/bin/aarch64-linux-android-g++\n CPP_aarch64-linux-android=$(CFG_AARCH64_LINUX_ANDROID_NDK)/bin/aarch64-linux-android-gcc -E"}, {"sha": "3faf0c6a3f2d7908131c4af727308f370df4392b", "filename": "mk/cfg/x86_64-apple-ios.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fcfg%2Fx86_64-apple-ios.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fcfg%2Fx86_64-apple-ios.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-apple-ios.mk?ref=7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "patch": "@@ -29,4 +29,4 @@ CFG_UNIXY_x86_64-apple-ios := 1\n CFG_LDPATH_x86_64-apple-ios :=\n CFG_RUN_x86_64-apple-ios = $(2)\n CFG_RUN_TARG_x86_64-apple-ios = $(call CFG_RUN_x86_64-apple-ios,,$(2))\n-CFG_GNU_TRIPLE_i386-apple-ios := x86_64-apple-ios\n+CFG_GNU_TRIPLE_x86_64-apple-ios := x86_64-apple-ios"}, {"sha": "3ed94011c486edfdcd4315ef483c8c3e737350fc", "filename": "mk/cfg/x86_64-unknown-bitrig.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-bitrig.mk?ref=7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "patch": "@@ -9,7 +9,7 @@ CFG_LIB_GLOB_x86_64-unknown-bitrig=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_x86_64-unknown-bitrig=$(1)-*.dylib.dSYM\n CFG_JEMALLOC_CFLAGS_x86_64-unknown-bitrig := -m64 -I/usr/include $(CFLAGS)\n CFG_GCCISH_CFLAGS_x86_64-unknown-bitrig := -Wall -Werror -fPIE -fPIC -m64 -I/usr/include $(CFLAGS)\n-CFG_GCCISH_LINK_FLAGS_x86_64-unknown-bitrig := -shared -pic -pthread -m64 $(LDFLAGS)\n+CFG_GCCISH_LINK_FLAGS_x86_64-unknown-bitrig := -shared -pic -pthread -m64\n CFG_GCCISH_DEF_FLAG_x86_64-unknown-bitrig := -Wl,--export-dynamic,--dynamic-list=\n CFG_LLC_FLAGS_x86_64-unknown-bitrig :=\n CFG_INSTALL_NAME_x86_64-unknown-bitrig ="}, {"sha": "4db8f32bb16f66077adb43e844489abc1052b9bd", "filename": "mk/crates.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "patch": "@@ -139,13 +139,13 @@ ONLY_RLIB_alloc_system := 1\n # Documented-by-default crates\n DOC_CRATES := std alloc collections core libc rustc_unicode\n \n-ifeq ($(CFG_DISABLE_JEMALLOC),)\n+ifdef CFG_DISABLE_JEMALLOC\n+RUSTFLAGS_rustc_back := --cfg disable_jemalloc\n+else\n TARGET_CRATES += alloc_jemalloc\n DEPS_std += alloc_jemalloc\n DEPS_alloc_jemalloc := core libc native:jemalloc\n ONLY_RLIB_alloc_jemalloc := 1\n-else\n-RUSTFLAGS_rustc_back := --cfg disable_jemalloc\n endif\n \n ################################################################################"}, {"sha": "81aabe60ff3cb98eb09d5ba7bb1eb83b4cc43897", "filename": "mk/docs.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "patch": "@@ -71,7 +71,7 @@ DOC_L10N_TARGETS :=\n \n # If NO_REBUILD is set then break the dependencies on rustdoc so we\n # build the documentation without having to rebuild rustdoc.\n-ifeq ($(NO_REBUILD),)\n+ifndef NO_REBUILD\n HTML_DEPS := $(RUSTDOC_EXE)\n else\n HTML_DEPS :=\n@@ -152,7 +152,7 @@ define DEF_LIB_DOC\n \n # If NO_REBUILD is set then break the dependencies on rustdoc so we\n # build crate documentation without having to rebuild rustdoc.\n-ifeq ($(NO_REBUILD),)\n+ifndef NO_REBUILD\n LIB_DOC_DEP_$(1) = \\\n \t$$(CRATEFILE_$(1)) \\\n \t$$(RSINPUTS_$(1)) \\"}, {"sha": "8956983e3bee86712f6259ae564460f3ea3582da", "filename": "mk/grammar.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fgrammar.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fgrammar.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fgrammar.mk?ref=7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "patch": "@@ -41,8 +41,8 @@ $(BG)RustLexer.class: $(BG) $(SG)RustLexer.g4\n \n check-build-lexer-verifier: $(BG)verify\n \n-ifeq ($(NO_REBUILD),)\n-VERIFY_DEPS :=  rustc-stage2-H-$(CFG_BUILD) $(LD)stamp.rustc\n+ifndef NO_REBUILD\n+VERIFY_DEPS := rustc-stage2-H-$(CFG_BUILD) $(LD)stamp.rustc\n else\n VERIFY_DEPS :=\n endif"}, {"sha": "2faed75ac07efb197fd41d84bc6dc762699d57d6", "filename": "mk/host.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fhost.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fhost.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fhost.mk?ref=7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "patch": "@@ -18,7 +18,7 @@\n # $(5) - the name of the crate being processed\n define CP_HOST_STAGE_N_CRATE\n \n-ifeq ($$(ONLY_RLIB_$(5)),)\n+ifndef ONLY_RLIB_$(5)\n $$(HLIB$(2)_H_$(4))/stamp.$(5): \\\n \t$$(TLIB$(1)_T_$(3)_H_$(4))/stamp.$(5) \\\n \t$$(RUST_DEPS_$(5):%=$$(HLIB$(2)_H_$(4))/stamp.%) \\"}, {"sha": "6d9d86c3eb8bc2e080e885165cfb1bb5682c36c3", "filename": "mk/install.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "patch": "@@ -121,7 +121,7 @@ install-runtime-target-$(1)-cleanup:\n endef\n \n $(foreach target,$(CFG_TARGET), \\\n- $(if $(findstring $(CFG_ADB_DEVICE_STATUS),\"true\"), \\\n+ $(if $(findstring $(CFG_ADB_DEVICE_STATUS),true), \\\n   $(eval $(call INSTALL_RUNTIME_TARGET_N,$(taget),$(CFG_BUILD))) \\\n   $(eval $(call INSTALL_RUNTIME_TARGET_CLEANUP_N,$(target))) \\\n   ))"}, {"sha": "d250ede995873c55454e2f7262cc815facdb568a", "filename": "mk/llvm.mk", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fllvm.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fllvm.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fllvm.mk?ref=7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "patch": "@@ -71,7 +71,7 @@ $$(LLVM_STAMP_$(1)): $$(S)src/rustllvm/llvm-auto-clean-trigger\n \t@$$(call E, make: done cleaning llvm)\n \ttouch -r $$@.start_time $$@ && rm $$@.start_time\n \n-ifeq ($$(CFG_ENABLE_LLVM_STATIC_STDCPP),1)\n+ifdef CFG_ENABLE_LLVM_STATIC_STDCPP\n LLVM_STDCPP_RUSTFLAGS_$(1) = -L \"$$(dir $$(shell $$(CC_$(1)) $$(CFG_GCCISH_CFLAGS_$(1)) \\\n \t\t\t\t\t-print-file-name=lib$(CFG_STDCPP_NAME).a))\"\n else\n@@ -95,9 +95,6 @@ endef\n $(foreach host,$(CFG_HOST), \\\n  $(eval $(call DEF_LLVM_RULES,$(host))))\n \n-$(foreach host,$(CFG_HOST), \\\n- $(eval LLVM_CONFIGS := $(LLVM_CONFIGS) $(LLVM_CONFIG_$(host))))\n-\n # This can't be done in target.mk because it's included before this file.\n define LLVM_LINKAGE_DEPS\n $$(TLIB$(1)_T_$(2)_H_$(3))/stamp.rustc_llvm: $$(LLVM_LINKAGE_PATH_$(2))"}, {"sha": "b272a80eaf786d01a243b9a2a19c11efe00be802", "filename": "mk/main.mk", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "patch": "@@ -86,13 +86,13 @@ CFG_INFO := $(info cfg: version $(CFG_VERSION))\n \n MKFILE_DEPS := config.stamp $(call rwildcard,$(CFG_SRC_DIR)mk/,*)\n MKFILES_FOR_TARBALL:=$(MKFILE_DEPS)\n-ifneq ($(NO_MKFILE_DEPS),)\n+ifdef NO_MKFILE_DEPS\n MKFILE_DEPS :=\n endif\n NON_BUILD_HOST = $(filter-out $(CFG_BUILD),$(CFG_HOST))\n NON_BUILD_TARGET = $(filter-out $(CFG_BUILD),$(CFG_TARGET))\n \n-ifneq ($(MAKE_RESTARTS),)\n+ifdef MAKE_RESTARTS\n CFG_INFO := $(info cfg: make restarts: $(MAKE_RESTARTS))\n endif\n \n@@ -107,28 +107,40 @@ ifneq ($(wildcard $(NON_BUILD_TARGET)),)\n CFG_INFO := $(info cfg: non-build target triples $(NON_BUILD_TARGET))\n endif\n \n-CFG_RUSTC_FLAGS := $(RUSTFLAGS)\n+CFG_RUSTC_FLAGS :=\n+ifdef RUSTFLAGS\n+  CFG_RUSTC_FLAGS += $(RUSTFLAGS)\n+endif\n CFG_GCCISH_CFLAGS :=\n CFG_GCCISH_LINK_FLAGS :=\n \n CFG_JEMALLOC_FLAGS :=\n+ifdef JEMALLOC_FLAGS\n+  CFG_JEMALLOC_FLAGS += $(JEMALLOC_FLAGS)\n+endif\n \n ifdef CFG_DISABLE_OPTIMIZE\n   $(info cfg: disabling rustc optimization (CFG_DISABLE_OPTIMIZE))\n-  CFG_RUSTC_FLAGS +=\n   CFG_JEMALLOC_FLAGS += --enable-debug\n else\n   # The rtopt cfg turns off runtime sanity checks\n   CFG_RUSTC_FLAGS += -O --cfg rtopt\n endif\n \n-CFG_JEMALLOC_FLAGS += $(JEMALLOC_FLAGS)\n-\n ifdef CFG_ENABLE_DEBUG_ASSERTIONS\n   $(info cfg: enabling debug assertions (CFG_ENABLE_DEBUG_ASSERTIONS))\n   CFG_RUSTC_FLAGS += -C debug-assertions=on\n endif\n \n+define DEF_RUSTFLAGS_STAGE\n+RUSTFLAGS_STAGE$(1) :=\n+endef\n+\n+STAGES = 0 1 2 3\n+\n+$(foreach stage,$(STAGES), \\\n+  $(eval $(call DEF_RUSTFLAGS_STAGE,$(stage))))\n+\n ifdef CFG_ENABLE_DEBUGINFO\n   $(info cfg: enabling debuginfo (CFG_ENABLE_DEBUGINFO))\n   CFG_RUSTC_FLAGS += -g\n@@ -186,9 +198,9 @@ endif\n \n \n ifndef CFG_DISABLE_VALGRIND_RPASS\n-  $(info cfg: enabling valgrind run-pass tests (CFG_ENABLE_VALGRIND_RPASS))\n+  $(info cfg: enabling valgrind run-pass tests)\n   $(info cfg: valgrind-rpass command set to $(CFG_VALGRIND))\n-  CFG_VALGRIND_RPASS :=$(CFG_VALGRIND)\n+  CFG_VALGRIND_RPASS := $(CFG_VALGRIND)\n else\n   $(info cfg: disabling valgrind run-pass tests)\n   CFG_VALGRIND_RPASS :=\n@@ -372,8 +384,6 @@ export CFG_BOOTSTRAP_KEY\n TRIPLE_TO_DEBUGGER_SCRIPT_SETTING=\\\n  $(if $(findstring windows,$(1)),none,$(if $(findstring darwin,$(1)),lldb,gdb))\n \n-STAGES = 0 1 2 3\n-\n define SREQ\n # $(1) is the stage number\n # $(2) is the target triple"}, {"sha": "d702cca209def0c14c920e4fcd28744d57532809", "filename": "mk/platform.mk", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "patch": "@@ -82,12 +82,11 @@ AR := ar\n define SET_FROM_CFG\n   ifdef CFG_$(1)\n     ifeq ($(origin $(1)),undefined)\n-      $$(info cfg: using $(1)=$(CFG_$(1)) (CFG_$(1)))\n-      $(1)=$(CFG_$(1))\n-    endif\n-    ifeq ($(origin $(1)),default)\n-      $$(info cfg: using $(1)=$(CFG_$(1)) (CFG_$(1)))\n-      $(1)=$(CFG_$(1))\n+      $$(info cfg: using $(1)=$$(CFG_$(1)) (CFG_$(1)))\n+      $(1)=$$(CFG_$(1))\n+    else ifeq ($(origin $(1)),default)\n+      $$(info cfg: using $(1)=$$(CFG_$(1)) (CFG_$(1)))\n+      $(1)=$$(CFG_$(1))\n     endif\n   endif\n endef\n@@ -101,7 +100,9 @@ include $(wildcard $(CFG_SRC_DIR)mk/cfg/*.mk)\n \n define ADD_INSTALLED_OBJECTS\n   INSTALLED_OBJECTS_$(1) += $$(CFG_INSTALLED_OBJECTS_$(1))\n-  REQUIRED_OBJECTS_$(1) += $$(CFG_THIRD_PARTY_OBJECTS_$(1))\n+  ifdef CFG_THIRD_PARTY_OBJECTS_$(1)\n+    REQUIRED_OBJECTS_$(1) += $$(CFG_THIRD_PARTY_OBJECTS_$(1))\n+  endif\n   INSTALLED_OBJECTS_$(1) += $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n   REQUIRED_OBJECTS_$(1) += $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n endef\n@@ -163,15 +164,15 @@ define CFG_MAKE_TOOLCHAIN\n   # Prepend the tools with their prefix if cross compiling\n   ifneq ($(CFG_BUILD),$(1))\n     ifneq ($$(findstring msvc,$(1)),msvc)\n-       CC_$(1)=$(CROSS_PREFIX_$(1))$(CC_$(1))\n-       CXX_$(1)=$(CROSS_PREFIX_$(1))$(CXX_$(1))\n-       CPP_$(1)=$(CROSS_PREFIX_$(1))$(CPP_$(1))\n-       AR_$(1)=$(CROSS_PREFIX_$(1))$(AR_$(1))\n-       LINK_$(1)=$(CROSS_PREFIX_$(1))$(LINK_$(1))\n-       RUSTC_CROSS_FLAGS_$(1)=-C linker=$$(call FIND_COMPILER,$$(LINK_$(1))) \\\n-           -C ar=$$(call FIND_COMPILER,$$(AR_$(1))) $(RUSTC_CROSS_FLAGS_$(1))\n-\n-       RUSTC_FLAGS_$(1)=$$(RUSTC_CROSS_FLAGS_$(1)) $(RUSTC_FLAGS_$(1))\n+      CC_$(1)=$(CROSS_PREFIX_$(1))$(CC_$(1))\n+      CXX_$(1)=$(CROSS_PREFIX_$(1))$(CXX_$(1))\n+      CPP_$(1)=$(CROSS_PREFIX_$(1))$(CPP_$(1))\n+      AR_$(1)=$(CROSS_PREFIX_$(1))$(AR_$(1))\n+      LINK_$(1)=$(CROSS_PREFIX_$(1))$(LINK_$(1))\n+      RUSTC_CROSS_FLAGS_$(1)=-C linker=$$(call FIND_COMPILER,$$(LINK_$(1))) \\\n+        -C ar=$$(call FIND_COMPILER,$$(AR_$(1))) $(RUSTC_CROSS_FLAGS_$(1))\n+\n+      RUSTC_FLAGS_$(1)=$$(RUSTC_CROSS_FLAGS_$(1)) $(RUSTC_FLAGS_$(1))\n     endif\n   endif\n "}, {"sha": "394fbe1ba0f7184147cc0d5c470ad5db550c2f8e", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "patch": "@@ -107,8 +107,6 @@ $$(RT_OUTPUT_DIR_$(1))/$$(NATIVE_$(2)_$(1)): $$(OBJS_$(2)_$(1))\n \n endef\n \n-$(foreach target,$(CFG_TARGET), \\\n- $(eval $(call RUNTIME_RULES,$(target))))\n $(foreach lib,$(NATIVE_LIBS), \\\n  $(foreach target,$(CFG_TARGET), \\\n   $(eval $(call THIRD_PARTY_LIB,$(target),$(lib)))))\n@@ -171,7 +169,7 @@ endif\n \n # See #17183 for details, this file is touched during the build process so we\n # don't want to consider it as a dependency.\n-JEMALLOC_DEPS := $(filter-out $(S)src/jemalloc/VERSION,$(JEMALLOC_DEPS))\n+JEMALLOC_DEPS := $(filter-out $(S)src/jemalloc/VERSION,$$(JEMALLOC_DEPS))\n \n JEMALLOC_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),jemalloc)\n ifeq ($$(CFG_WINDOWSY_$(1)),1)"}, {"sha": "1fcc87f0c35fc6dc893bf4002592eb808b5a5785", "filename": "mk/target.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Ftarget.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Ftarget.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftarget.mk?ref=7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "patch": "@@ -138,12 +138,12 @@ define TARGET_RUSTRT_STARTUP_OBJ\n $$(TLIB$(1)_T_$(2)_H_$(3))/$(4).o: \\\n \t\t$(S)src/rtstartup/$(4).rs \\\n \t\t$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.core \\\n-\t\t$$(HSREQ$(1)_T_$(2)_H_$(3)) \\\n+\t\t$$(HSREQ$(1)_H_$(3)) \\\n \t\t| $$(TBIN$(1)_T_$(2)_H_$(3))/\n \t@$$(call E, rustc: $$@)\n \t$$(STAGE$(1)_T_$(2)_H_$(3)) --emit=obj -o $$@ $$<\n \n-ifeq ($$(CFG_RUSTRT_HAS_STARTUP_OBJS_$(2)), 1)\n+ifdef CFG_RUSTRT_HAS_STARTUP_OBJS_$(2)\n # Add dependencies on Rust startup objects to all crates that depend on core.\n # This ensures that they are built after core (since they depend on it),\n # but before everything else (since they are needed for linking dylib crates)."}, {"sha": "bce5a52118bd89455cb740860d58613d99952c0b", "filename": "mk/tests.mk", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Ftests.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7cae6b59b41d69773a0e02bce5da6d8d4313a9c4/mk%2Ftests.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Ftests.mk?ref=7cae6b59b41d69773a0e02bce5da6d8d4313a9c4", "patch": "@@ -36,6 +36,8 @@ TEST_CRATES = $(TEST_TARGET_CRATES) $(TEST_HOST_CRATES)\n # Environment configuration\n ######################################################################\n \n+TESTARGS :=\n+\n # The arguments to all test runners\n ifdef TESTNAME\n   TESTARGS += $(TESTNAME)\n@@ -48,6 +50,8 @@ endif\n # Arguments to the cfail/rfail/rpass tests\n ifdef CFG_VALGRIND\n   CTEST_RUNTOOL = --runtool \"$(CFG_VALGRIND)\"\n+else\n+  CTEST_RUNTOOL =\n endif\n \n CTEST_TESTARGS := $(TESTARGS)\n@@ -143,10 +147,11 @@ else\n CFG_ADB_TEST_DIR=\n endif\n \n+DOC_NAMES :=\n # $(1) - name of doc test\n # $(2) - file of the test\n define DOCTEST\n-DOC_NAMES := $$(DOC_NAMES) $(1)\n+DOC_NAMES += $(1)\n DOCFILE_$(1) := $(2)\n endef\n \n@@ -362,7 +367,7 @@ define TEST_RUNNER\n # If NO_REBUILD is set then break the dependencies on everything but\n # the source files so we can test crates without rebuilding any of the\n # parent crates.\n-ifeq ($(NO_REBUILD),)\n+ifndef NO_REBUILD\n TESTDEP_$(1)_$(2)_$(3)_$(4) = $$(SREQ$(1)_T_$(2)_H_$(3)) \\\n \t\t\t    $$(foreach crate,$$(TARGET_CRATES), \\\n \t\t\t\t$$(TLIB$(1)_T_$(2)_H_$(3))/stamp.$$(crate)) \\\n@@ -447,7 +452,7 @@ $(foreach host,$(CFG_HOST), \\\n     $(if $(findstring $(target),$(CFG_BUILD)), \\\n      $(eval $(call DEF_TEST_CRATE_RULES,$(stage),$(target),$(host),$(crate))), \\\n      $(if $(findstring android, $(target)), \\\n-      $(if $(findstring $(CFG_ADB_DEVICE_STATUS),\"true\"), \\\n+      $(if $(findstring $(CFG_ADB_DEVICE_STATUS),true), \\\n        $(eval $(call DEF_TEST_CRATE_RULES_android,$(stage),$(target),$(host),$(crate))), \\\n        $(eval $(call DEF_TEST_CRATE_RULES_null,$(stage),$(target),$(host),$(crate))) \\\n       ), \\\n@@ -700,22 +705,22 @@ check-stage$(1)-T-$(2)-H-$(3)-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4\n # (Encoded as a separate variable because GNU make does not have a\n # good way to express OR on ifeq commands)\n \n-ifneq ($$(CTEST_DISABLE_$(4)),)\n+ifdef CTEST_DISABLE_$(4)\n # Test suite is disabled for all configured targets.\n CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4) := $$(CTEST_DISABLE_$(4))\n else\n # else, check if non-self-hosted target (i.e. target not-in hosts) ...\n ifeq ($$(findstring $(2),$$(CFG_HOST)),)\n # ... if so, then check if this test suite is disabled for non-selfhosts.\n-ifneq ($$(CTEST_DISABLE_NONSELFHOST_$(4)),)\n+ifdef CTEST_DISABLE_NONSELFHOST_$(4)\n # Test suite is disabled for this target.\n CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4) := $$(CTEST_DISABLE_NONSELFHOST_$(4))\n endif\n endif\n # Neither DISABLE nor DISABLE_NONSELFHOST is set ==> okay, run the test.\n endif\n \n-ifeq ($$(CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4)),)\n+ifndef CTEST_DONT_RUN_$(1)-T-$(2)-H-$(3)-$(4)\n $$(call TEST_OK_FILE,$(1),$(2),$(3),$(4)): \\\n \t\t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n                 $$(CTEST_DEPS_$(4)_$(1)-T-$(2)-H-$(3))\n@@ -824,7 +829,7 @@ check-stage$(1)-T-$(2)-H-$(3)-doc-$(4)-exec: $$(call TEST_OK_FILE,$(1),$(2),$(3)\n # If NO_REBUILD is set then break the dependencies on everything but\n # the source files so we can test documentation without rebuilding\n # rustdoc etc.\n-ifeq ($(NO_REBUILD),)\n+ifndef NO_REBUILD\n DOCTESTDEP_$(1)_$(2)_$(3)_$(4) = \\\n \t$$(DOCFILE_$(4)) \\\n \t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n@@ -859,7 +864,7 @@ define DEF_CRATE_DOC_TEST\n # If NO_REBUILD is set then break the dependencies on everything but\n # the source files so we can test crate documentation without\n # rebuilding any of the parent crates.\n-ifeq ($(NO_REBUILD),)\n+ifndef NO_REBUILD\n CRATEDOCTESTDEP_$(1)_$(2)_$(3)_$(4) = \\\n \t$$(TEST_SREQ$(1)_T_$(2)_H_$(3)) \\\n \t$$(CRATE_FULLDEPS_$(1)_T_$(2)_H_$(3)_$(4)) \\\n@@ -922,8 +927,7 @@ TEST_GROUPS = \\\n \tpretty-rpass-full \\\n \tpretty-rfail-full \\\n \tpretty-rfail \\\n-\tpretty-pretty \\\n-\t$(NULL)\n+\tpretty-pretty\n \n define DEF_CHECK_FOR_STAGE_AND_TARGET_AND_HOST\n check-stage$(1)-T-$(2)-H-$(3): check-stage$(1)-T-$(2)-H-$(3)-exec"}]}