{"sha": "1e0d20366fb141b469e6383b6efe10c664ad45f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlMGQyMDM2NmZiMTQxYjQ2OWU2MzgzYjZlZmUxMGM2NjRhZDQ1ZjM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-14T17:17:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-14T17:17:51Z"}, "message": "Merge #9900\n\n9900: internal: remove one more usage of old editing API. r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "4643bd00391d85f0a5890f6c0b2a6ff4b4382b1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4643bd00391d85f0a5890f6c0b2a6ff4b4382b1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e0d20366fb141b469e6383b6efe10c664ad45f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhF/q/CRBK7hj4Ov3rIwAAYN0IAIWQVNcy/RjNFeJolT8b0kwJ\n4JiFikIrEEILYLt8YaBPWBBGFEQvs5BQxxWDQax4o+TFCcEoc8EOr0uDLszLXead\n/yOY1tvfBMTb2NRki10rT4EPoQHXwut29Q5Tky0jKjnJfeXDVRgbKGofrdSwwxXM\nafL6+zO0bcmO4zWrlZniMiBD6bU2Xinz8vQ/W8z1+Cjpck5uwsQspZo+3RPaM1AH\nqg+yGhDz2LOohcBATMUtM7dur5tCHbHj38cYHqOSW4u1i+mxNANVgMxpY+I/TSCA\nr53X7W8T+s31UCB/9O87qyqT9As/Cg7fncPRlT2ZXRd/KS2LzVsDnJEqw/R8Wzw=\n=3tsb\n-----END PGP SIGNATURE-----\n", "payload": "tree 4643bd00391d85f0a5890f6c0b2a6ff4b4382b1d\nparent 01de9021cd18e2bb3f447f4f080f452016b0da17\nparent e300f58d2cc853d40622f2e835a899eda37e60db\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1628961471 +0000\ncommitter GitHub <noreply@github.com> 1628961471 +0000\n\nMerge #9900\n\n9900: internal: remove one more usage of old editing API. r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e0d20366fb141b469e6383b6efe10c664ad45f3", "html_url": "https://github.com/rust-lang/rust/commit/1e0d20366fb141b469e6383b6efe10c664ad45f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e0d20366fb141b469e6383b6efe10c664ad45f3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01de9021cd18e2bb3f447f4f080f452016b0da17", "url": "https://api.github.com/repos/rust-lang/rust/commits/01de9021cd18e2bb3f447f4f080f452016b0da17", "html_url": "https://github.com/rust-lang/rust/commit/01de9021cd18e2bb3f447f4f080f452016b0da17"}, {"sha": "e300f58d2cc853d40622f2e835a899eda37e60db", "url": "https://api.github.com/repos/rust-lang/rust/commits/e300f58d2cc853d40622f2e835a899eda37e60db", "html_url": "https://github.com/rust-lang/rust/commit/e300f58d2cc853d40622f2e835a899eda37e60db"}], "stats": {"total": 80, "additions": 25, "deletions": 55}, "files": [{"sha": "c5540fa8426cf9f6dc479aa92feb107f38aaa075", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1e0d20366fb141b469e6383b6efe10c664ad45f3/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0d20366fb141b469e6383b6efe10c664ad45f3/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=1e0d20366fb141b469e6383b6efe10c664ad45f3", "patch": "@@ -130,7 +130,8 @@ pub fn add_trait_assoc_items_to_impl(\n     let items = items.into_iter().map(|assoc_item| {\n         let assoc_item = assoc_item.clone_for_update();\n         transform.apply(assoc_item.syntax());\n-        edit::remove_attrs_and_docs(&assoc_item).clone_subtree().clone_for_update()\n+        edit::remove_attrs_and_docs(&assoc_item);\n+        assoc_item\n     });\n \n     let res = impl_.clone_for_update();"}, {"sha": "aa110b089987c4304a18da41b91ac1901ff6c3be", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1e0d20366fb141b469e6383b6efe10c664ad45f3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0d20366fb141b469e6383b6efe10c664ad45f3/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=1e0d20366fb141b469e6383b6efe10c664ad45f3", "patch": "@@ -194,10 +194,10 @@ fn get_transformed_assoc_item(\n     );\n \n     transform.apply(assoc_item.syntax());\n-    Some(match assoc_item {\n-        ast::AssocItem::Fn(func) => ast::AssocItem::Fn(edit::remove_attrs_and_docs(&func)),\n-        _ => assoc_item,\n-    })\n+    if let ast::AssocItem::Fn(func) = &assoc_item {\n+        edit::remove_attrs_and_docs(func)\n+    }\n+    Some(assoc_item)\n }\n \n fn add_type_alias_impl(\n@@ -253,7 +253,7 @@ fn add_const_impl(\n }\n \n fn make_const_compl_syntax(const_: &ast::Const) -> String {\n-    let const_ = edit::remove_attrs_and_docs(const_);\n+    edit::remove_attrs_and_docs(const_);\n \n     let const_start = const_.syntax().text_range().start();\n     let const_end = const_.syntax().text_range().end();"}, {"sha": "904a38471e746337ac74090e60d4264fd28e489c", "filename": "crates/syntax/src/algo.rs", "status": "modified", "additions": 1, "deletions": 36, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/1e0d20366fb141b469e6383b6efe10c664ad45f3/crates%2Fsyntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0d20366fb141b469e6383b6efe10c664ad45f3/crates%2Fsyntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Falgo.rs?ref=1e0d20366fb141b469e6383b6efe10c664ad45f3", "patch": "@@ -1,6 +1,6 @@\n //! Collection of assorted algorithms for syntax trees.\n \n-use std::{hash::BuildHasherDefault, ops::RangeInclusive};\n+use std::hash::BuildHasherDefault;\n \n use indexmap::IndexMap;\n use itertools::Itertools;\n@@ -295,41 +295,6 @@ fn _insert_children(\n     with_children(parent, new_children)\n }\n \n-/// Replaces all nodes in `to_delete` with nodes from `to_insert`\n-///\n-/// This is a type-unsafe low-level editing API, if you need to use it,\n-/// prefer to create a type-safe abstraction on top of it instead.\n-pub fn replace_children(\n-    parent: &SyntaxNode,\n-    to_delete: RangeInclusive<SyntaxElement>,\n-    to_insert: impl IntoIterator<Item = SyntaxElement>,\n-) -> SyntaxNode {\n-    let mut to_insert = to_insert.into_iter();\n-    _replace_children(parent, to_delete, &mut to_insert)\n-}\n-\n-fn _replace_children(\n-    parent: &SyntaxNode,\n-    to_delete: RangeInclusive<SyntaxElement>,\n-    to_insert: &mut dyn Iterator<Item = SyntaxElement>,\n-) -> SyntaxNode {\n-    let start = position_of_child(parent, to_delete.start().clone());\n-    let end = position_of_child(parent, to_delete.end().clone());\n-    let parent_green = parent.green();\n-    let mut old_children = parent_green.children().map(|it| match it {\n-        NodeOrToken::Token(it) => NodeOrToken::Token(it.to_owned()),\n-        NodeOrToken::Node(it) => NodeOrToken::Node(it.to_owned()),\n-    });\n-\n-    let before = old_children.by_ref().take(start).collect::<Vec<_>>();\n-    let new_children = before\n-        .into_iter()\n-        .chain(to_insert.map(to_green_element))\n-        .chain(old_children.skip(end + 1 - start))\n-        .collect::<Vec<_>>();\n-    with_children(parent, new_children)\n-}\n-\n fn with_children(\n     parent: &SyntaxNode,\n     new_children: Vec<NodeOrToken<rowan::GreenNode, rowan::GreenToken>>,"}, {"sha": "01d6add36d5e69d66d7a34e553c179c64d086617", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 17, "deletions": 13, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1e0d20366fb141b469e6383b6efe10c664ad45f3/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e0d20366fb141b469e6383b6efe10c664ad45f3/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=1e0d20366fb141b469e6383b6efe10c664ad45f3", "patch": "@@ -48,22 +48,26 @@ impl ast::UseTree {\n     }\n }\n \n-#[must_use]\n-pub fn remove_attrs_and_docs<N: ast::AttrsOwner>(node: &N) -> N {\n-    N::cast(remove_attrs_and_docs_inner(node.syntax().clone())).unwrap()\n+pub fn remove_attrs_and_docs<N: ast::AttrsOwner>(node: &N) {\n+    remove_attrs_and_docs_inner(node.syntax())\n }\n \n-fn remove_attrs_and_docs_inner(mut node: SyntaxNode) -> SyntaxNode {\n-    while let Some(start) =\n-        node.children_with_tokens().find(|it| it.kind() == ATTR || it.kind() == COMMENT)\n-    {\n-        let end = match &start.next_sibling_or_token() {\n-            Some(el) if el.kind() == WHITESPACE => el.clone(),\n-            Some(_) | None => start.clone(),\n-        };\n-        node = algo::replace_children(&node, start..=end, &mut iter::empty());\n+fn remove_attrs_and_docs_inner(node: &SyntaxNode) {\n+    let mut remove_next_ws = false;\n+    for child in node.children_with_tokens() {\n+        match child.kind() {\n+            ATTR | COMMENT => {\n+                remove_next_ws = true;\n+                child.detach();\n+                continue;\n+            }\n+            WHITESPACE if remove_next_ws => {\n+                child.detach();\n+            }\n+            _ => (),\n+        }\n+        remove_next_ws = false;\n     }\n-    node\n }\n \n #[derive(Debug, Clone, Copy)]"}]}