{"sha": "fc19590297d211bb395a16b8ecdc82bab5c00bd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMTk1OTAyOTdkMjExYmIzOTVhMTZiOGVjZGM4MmJhYjVjMDBiZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-18T23:14:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-18T23:14:50Z"}, "message": "Auto merge of #51248 - fabric-and-ink:newtype_index_debrujin, r=nikomatsakis\n\nDeclare DebruijnIndex via newtype_index macro\n\nPart of #49887\n\nDeclare `DebruijnIndex` via the `newtype_index` macro.", "tree": {"sha": "8c00dbdb1bb370cdc50a34ed95a7f7f842f6eb17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c00dbdb1bb370cdc50a34ed95a7f7f842f6eb17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc19590297d211bb395a16b8ecdc82bab5c00bd3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc19590297d211bb395a16b8ecdc82bab5c00bd3", "html_url": "https://github.com/rust-lang/rust/commit/fc19590297d211bb395a16b8ecdc82bab5c00bd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc19590297d211bb395a16b8ecdc82bab5c00bd3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5230979794db209de492b3f7cc688020b72bc7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5230979794db209de492b3f7cc688020b72bc7c6", "html_url": "https://github.com/rust-lang/rust/commit/5230979794db209de492b3f7cc688020b72bc7c6"}, {"sha": "862d25c89076c5914fa4b8bc17e6b7656799535f", "url": "https://api.github.com/repos/rust-lang/rust/commits/862d25c89076c5914fa4b8bc17e6b7656799535f", "html_url": "https://github.com/rust-lang/rust/commit/862d25c89076c5914fa4b8bc17e6b7656799535f"}], "stats": {"total": 106, "additions": 50, "deletions": 56}, "files": [{"sha": "b148a7401f8baa16a3ccab8c5621e7779cf370a2", "filename": "src/librustc/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'gcx, 'tcx> NiceRegionError<'a, 'gcx, 'tcx> {\n             tcx: self.tcx,\n             bound_region: *br,\n             found_type: None,\n-            current_index: ty::DebruijnIndex::INNERMOST,\n+            current_index: ty::INNERMOST,\n         };\n         nested_visitor.visit_ty(arg);\n         nested_visitor.found_type"}, {"sha": "680d445a1bcfcc6b169d405998178bc598df5250", "filename": "src/librustc/infer/higher_ranked/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -417,8 +417,7 @@ impl<'a, 'gcx, 'tcx> CombineFields<'a, 'gcx, 'tcx> {\n         {\n             for (a_br, a_r) in a_map {\n                 if *a_r == r {\n-                    return infcx.tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::INNERMOST,\n-                                                               *a_br));\n+                    return infcx.tcx.mk_region(ty::ReLateBound(ty::INNERMOST, *a_br));\n                 }\n             }\n             span_bug!(\n@@ -735,7 +734,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     // trait checking, and all of the skolemized regions\n                     // appear inside predicates, which always have\n                     // binders, so this assert is satisfied.\n-                    assert!(current_depth > ty::DebruijnIndex::INNERMOST);\n+                    assert!(current_depth > ty::INNERMOST);\n \n                     // since leak-check passed, this skolemized region\n                     // should only have incoming edges from variables"}, {"sha": "f251a3d5f38380ab42226b9041aff44cc228cce7", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -98,7 +98,7 @@ impl Region {\n     }\n \n     fn late(hir_map: &Map, def: &hir::LifetimeDef) -> (hir::LifetimeName, Region) {\n-        let depth = ty::DebruijnIndex::INNERMOST;\n+        let depth = ty::INNERMOST;\n         let def_id = hir_map.local_def_id(def.lifetime.id);\n         let origin = LifetimeDefOrigin::from_is_in_band(def.in_band);\n         debug!(\n@@ -114,7 +114,7 @@ impl Region {\n     fn late_anon(index: &Cell<u32>) -> Region {\n         let i = index.get();\n         index.set(i + 1);\n-        let depth = ty::DebruijnIndex::INNERMOST;\n+        let depth = ty::INNERMOST;\n         Region::LateBoundAnon(depth, i)\n     }\n \n@@ -1870,7 +1870,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             .map(|(i, input)| {\n                 let mut gather = GatherLifetimes {\n                     map: self.map,\n-                    outer_index: ty::DebruijnIndex::INNERMOST,\n+                    outer_index: ty::INNERMOST,\n                     have_bound_regions: false,\n                     lifetimes: FxHashSet(),\n                 };"}, {"sha": "e3fbadc271206e1cbb1a2224441f32c6203a0cf1", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -24,7 +24,7 @@ impl FlagComputation {\n     fn new() -> FlagComputation {\n         FlagComputation {\n             flags: TypeFlags::empty(),\n-            outer_exclusive_binder: ty::DebruijnIndex::INNERMOST,\n+            outer_exclusive_binder: ty::INNERMOST,\n         }\n     }\n \n@@ -60,7 +60,7 @@ impl FlagComputation {\n         // a region binder, so subtract one from the region depth\n         // within when adding the depth to `self`.\n         let outer_exclusive_binder = computation.outer_exclusive_binder;\n-        if outer_exclusive_binder > ty::DebruijnIndex::INNERMOST {\n+        if outer_exclusive_binder > ty::INNERMOST {\n             self.add_exclusive_binder(outer_exclusive_binder.shifted_out(1));\n         } else {\n             // otherwise, this binder captures nothing"}, {"sha": "d459a6de0d69e3293b5fbff0562662201c47d1ca", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -65,7 +65,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n \n     /// True if `self` has any late-bound regions that are either\n     /// bound by `binder` or bound by some binder outside of `binder`.\n-    /// If `binder` is `ty::DebruijnIndex::INNERMOST`, this indicates whether\n+    /// If `binder` is `ty::INNERMOST`, this indicates whether\n     /// there are any late-bound regions that appear free.\n     fn has_regions_bound_at_or_above(&self, binder: ty::DebruijnIndex) -> bool {\n         self.visit_with(&mut HasEscapingRegionsVisitor { outer_index: binder })\n@@ -78,7 +78,7 @@ pub trait TypeFoldable<'tcx>: fmt::Debug + Clone {\n     }\n \n     fn has_escaping_regions(&self) -> bool {\n-        self.has_regions_bound_at_or_above(ty::DebruijnIndex::INNERMOST)\n+        self.has_regions_bound_at_or_above(ty::INNERMOST)\n     }\n \n     fn has_type_flags(&self, flags: TypeFlags) -> bool {\n@@ -246,7 +246,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n               T: TypeFoldable<'tcx>,\n     {\n         value.visit_with(&mut RegionVisitor {\n-            outer_index: ty::DebruijnIndex::INNERMOST,\n+            outer_index: ty::INNERMOST,\n             callback\n         });\n \n@@ -260,7 +260,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             /// ^          ^          ^     ^\n             /// |          |          |     | here, would be shifted in 1\n             /// |          |          | here, would be shifted in 2\n-            /// |          | here, would be INNTERMOST shifted in by 1\n+            /// |          | here, would be INNERMOST shifted in by 1\n             /// | here, initially, binder would be INNERMOST\n             /// ```\n             ///\n@@ -333,7 +333,7 @@ impl<'a, 'gcx, 'tcx> RegionFolder<'a, 'gcx, 'tcx> {\n         RegionFolder {\n             tcx,\n             skipped_regions,\n-            current_index: ty::DebruijnIndex::INNERMOST,\n+            current_index: ty::INNERMOST,\n             fold_region_fn,\n         }\n     }\n@@ -495,7 +495,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let mut counter = 0;\n         Binder::bind(self.replace_late_bound_regions(sig, |_| {\n             counter += 1;\n-            self.mk_region(ty::ReLateBound(ty::DebruijnIndex::INNERMOST, ty::BrAnon(counter)))\n+            self.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BrAnon(counter)))\n         }).0)\n     }\n }\n@@ -507,7 +507,7 @@ impl<'a, 'gcx, 'tcx> RegionReplacer<'a, 'gcx, 'tcx> {\n     {\n         RegionReplacer {\n             tcx,\n-            current_index: ty::DebruijnIndex::INNERMOST,\n+            current_index: ty::INNERMOST,\n             fld_r,\n             map: BTreeMap::default()\n         }\n@@ -542,7 +542,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for RegionReplacer<'a, 'gcx, 'tcx> {\n                     // that region should always use the INNERMOST\n                     // debruijn index. Then we adjust it to the\n                     // correct depth.\n-                    assert_eq!(debruijn1, ty::DebruijnIndex::INNERMOST);\n+                    assert_eq!(debruijn1, ty::INNERMOST);\n                     self.tcx.mk_region(ty::ReLateBound(debruijn, br))\n                 } else {\n                     region\n@@ -701,7 +701,7 @@ struct LateBoundRegionsCollector {\n impl LateBoundRegionsCollector {\n     fn new(just_constrained: bool) -> Self {\n         LateBoundRegionsCollector {\n-            current_index: ty::DebruijnIndex::INNERMOST,\n+            current_index: ty::INNERMOST,\n             regions: FxHashSet(),\n             just_constrained,\n         }"}, {"sha": "e4296a03b8df7a0570ac9da5cd3752c0cad7f440", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -60,7 +60,7 @@ use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n \n use hir;\n \n-pub use self::sty::{Binder, CanonicalVar, DebruijnIndex};\n+pub use self::sty::{Binder, CanonicalVar, DebruijnIndex, INNERMOST};\n pub use self::sty::{FnSig, GenSig, PolyFnSig, PolyGenSig};\n pub use self::sty::{InferTy, ParamTy, ProjectionTy, ExistentialPredicate};\n pub use self::sty::{ClosureSubsts, GeneratorSubsts, UpvarSubsts, TypeAndMut};"}, {"sha": "4a69fbdacc476a006051365189d339bcedc0b329", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -1023,12 +1023,11 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n /// is the outer fn.\n ///\n /// [dbi]: http://en.wikipedia.org/wiki/De_Bruijn_index\n-#[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable, Debug, Copy, PartialOrd, Ord)]\n-pub struct DebruijnIndex {\n-    /// We maintain the invariant that this is never 0. So 1 indicates\n-    /// the innermost binder.\n-    index: u32,\n-}\n+newtype_index!(DebruijnIndex\n+    {\n+        DEBUG_FORMAT = \"DebruijnIndex({})\",\n+        const INNERMOST = 0,\n+    });\n \n pub type Region<'tcx> = &'tcx RegionKind;\n \n@@ -1261,8 +1260,6 @@ impl<'a, 'tcx, 'gcx> PolyExistentialProjection<'tcx> {\n }\n \n impl DebruijnIndex {\n-    pub const INNERMOST: DebruijnIndex = DebruijnIndex { index: 0 };\n-\n     /// Returns the resulting index when this value is moved into\n     /// `amount` number of new binders. So e.g. if you had\n     ///\n@@ -1275,7 +1272,7 @@ impl DebruijnIndex {\n     /// you would need to shift the index for `'a` into 1 new binder.\n     #[must_use]\n     pub const fn shifted_in(self, amount: u32) -> DebruijnIndex {\n-        DebruijnIndex { index: self.index + amount }\n+        DebruijnIndex(self.0 + amount)\n     }\n \n     /// Update this index in place by shifting it \"in\" through\n@@ -1288,7 +1285,7 @@ impl DebruijnIndex {\n     /// `amount` number of new binders.\n     #[must_use]\n     pub const fn shifted_out(self, amount: u32) -> DebruijnIndex {\n-        DebruijnIndex { index: self.index - amount }\n+        DebruijnIndex(self.0 - amount)\n     }\n \n     /// Update in place by shifting out from `amount` binders.\n@@ -1317,13 +1314,11 @@ impl DebruijnIndex {\n     /// bound by one of the binders we are shifting out of, that is an\n     /// error (and should fail an assertion failure).\n     pub fn shifted_out_to_binder(self, to_binder: DebruijnIndex) -> Self {\n-        self.shifted_out(to_binder.index - Self::INNERMOST.index)\n+        self.shifted_out((to_binder.0 - INNERMOST.0) as u32)\n     }\n }\n \n-impl_stable_hash_for!(struct DebruijnIndex {\n-    index\n-});\n+impl_stable_hash_for!(tuple_struct DebruijnIndex { index });\n \n /// Region utilities\n impl RegionKind {"}, {"sha": "024885420f619f01ceff91ed9e6bfb8efedfc418", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -555,7 +555,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                           -> Option<ty::Binder<Ty<'tcx>>>\n     {\n         let closure_ty = self.mk_closure(closure_def_id, closure_substs);\n-        let env_region = ty::ReLateBound(ty::DebruijnIndex::INNERMOST, ty::BrEnv);\n+        let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n         let closure_kind_ty = closure_substs.closure_kind_ty(closure_def_id, self);\n         let closure_kind = closure_kind_ty.to_opt_closure_kind()?;\n         let env_ty = match closure_kind {"}, {"sha": "883882dfe6837f22be689cc3c2aa5499fd7ee386", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -527,7 +527,7 @@ impl PrintContext {\n                     ty::BrNamed(tcx.hir.local_def_id(CRATE_NODE_ID), name)\n                 }\n             };\n-            tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::INNERMOST, br))\n+            tcx.mk_region(ty::ReLateBound(ty::INNERMOST, br))\n         }).0;\n         start_or_continue(f, \"\", \"> \")?;\n "}, {"sha": "7e55642814bbae137443c37989e008cdb0669a8f", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -425,7 +425,7 @@ pub fn ty_fn_sig<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             let tcx = cx.tcx;\n             let sig = substs.poly_sig(def_id, cx.tcx);\n \n-            let env_region = ty::ReLateBound(ty::DebruijnIndex::INNERMOST, ty::BrEnv);\n+            let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n             let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n \n             sig.map_bound(|sig| {"}, {"sha": "9808e289f3b3a4285293a1b887a903517cf7cade", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -183,7 +183,7 @@ fn test_env_with_pool<F>(\n     });\n }\n \n-const D1: ty::DebruijnIndex = ty::DebruijnIndex::INNERMOST;\n+const D1: ty::DebruijnIndex = ty::INNERMOST;\n const D2: ty::DebruijnIndex = D1.shifted_in(1);\n \n impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {"}, {"sha": "cfe9e420c5fee79b739b4f1fe923880baf6efbd1", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -463,7 +463,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Create a `PolyFnSig`. Note the oddity that late bound\n         // regions appearing free in `expected_sig` are now bound up\n         // in this binder we are creating.\n-        assert!(!expected_sig.sig.has_regions_bound_above(ty::DebruijnIndex::INNERMOST));\n+        assert!(!expected_sig.sig.has_regions_bound_above(ty::INNERMOST));\n         let bound_sig = ty::Binder::bind(self.tcx.mk_fn_sig(\n             expected_sig.sig.inputs().iter().cloned(),\n             expected_sig.sig.output(),"}, {"sha": "c93023edcea08285207dd94d67ac34959846ca6a", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -119,7 +119,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"pref_align_of\" | \"min_align_of\" => (1, Vec::new(), tcx.types.usize),\n             \"size_of_val\" |  \"min_align_of_val\" => {\n                 (1, vec![\n-                    tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::INNERMOST,\n+                    tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::INNERMOST,\n                                                                   ty::BrAnon(0))),\n                                     param(0))\n                  ], tcx.types.usize)\n@@ -298,7 +298,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             \"unlikely\" => (0, vec![tcx.types.bool], tcx.types.bool),\n \n             \"discriminant_value\" => (1, vec![\n-                    tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::DebruijnIndex::INNERMOST,\n+                    tcx.mk_imm_ref(tcx.mk_region(ty::ReLateBound(ty::INNERMOST,\n                                                                   ty::BrAnon(0))),\n                                    param(0))], tcx.types.u64),\n "}, {"sha": "58e804fc13f2d8c9497f04672c4b528fa0fada04", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -736,7 +736,7 @@ fn has_late_bound_regions<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                         -> Option<Span> {\n         let mut visitor = LateBoundRegionsDetector {\n             tcx,\n-            outer_index: ty::DebruijnIndex::INNERMOST,\n+            outer_index: ty::INNERMOST,\n             has_late_bound_regions: None,\n         };\n         for lifetime in generics.lifetimes() {"}, {"sha": "067b5ebc6c4addc7740103e23446f6eb8baff3db", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -18,7 +18,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: DefId(0/1:9 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't0)) i32))\n+               for<'r, 's, 't0> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) i32))\n            ]\n \n note: No external requirements"}, {"sha": "dba27f16e8cac234111f4735c8e9c9db2086c057", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -6,7 +6,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |\n    = note: defining type: DefId(0/1:9 ~ escape_argument[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) i32))\n+               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32))\n            ]\n \n note: No external requirements"}, {"sha": "c88f0efba6f4b6192f76692242950c6f6d08d91f", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -24,7 +24,7 @@ LL | |         },\n    |\n    = note: defining type: DefId(0/1:20 ~ propagate_approximated_fail_no_postdom[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#3r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n \n note: No external requirements"}, {"sha": "840b4071a8776e172ef175e4d07bc22ad273d734", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -18,7 +18,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_ref[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#2r"}, {"sha": "ac4efecc8ac075a12b59a4a0fbe645a26c2c4fa4", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -23,7 +23,7 @@ LL | |     })\n    |\n    = note: defining type: DefId(0/1:12 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case1[0]::{{closure}}[0]) with closure substs [\n                i32,\n-               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>))\n+               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>))\n            ]\n \n note: No external requirements\n@@ -51,7 +51,7 @@ LL | |     })\n    |\n    = note: defining type: DefId(0/1:13 ~ propagate_approximated_shorter_to_static_comparing_against_free[317d]::case2[0]::{{closure}}[0]) with closure substs [\n                i32,\n-               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>))\n+               for<'r> extern \"rust-call\" fn((std::cell::Cell<&'_#1r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>))\n            ]\n    = note: number of external vids: 2\n    = note: where '_#1r: '_#0r"}, {"sha": "93a7c1a0c6c33a0c3165040276dbeae87f7d6bd9", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -18,7 +18,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_shorter_to_static_no_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't2)) u32>))\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) u32>))\n            ]\n    = note: number of external vids: 2\n    = note: where '_#1r: '_#0r"}, {"sha": "c62f62efda361795c70e2426b4f14881f3eac9ce", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -18,7 +18,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_shorter_to_static_wrong_bound[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&'_#2r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#0r"}, {"sha": "cf5f4d415b669cc88ddec9555edd86ef80b30c75", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -18,7 +18,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_approximated_val[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#2r"}, {"sha": "ef27218e0899fd38f4304ec66f85a8e8f9410e18", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -16,7 +16,7 @@ LL | |         },\n    |\n    = note: defining type: DefId(0/1:16 ~ propagate_despite_same_free_region[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n+               for<'r, 's> extern \"rust-call\" fn((std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#2r u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) u32>, std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#2r"}, {"sha": "8b6cd2ea432dbea8744477b808c8fc113b2fb300", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -24,7 +24,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_fail_to_approximate_longer_no_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n+               for<'r, 's, 't0, 't1, 't2> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>))\n            ]\n \n note: No external requirements"}, {"sha": "2fd6ce50095fc15be47af685158640eef93c8a36", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -24,7 +24,7 @@ LL | |     });\n    |\n    = note: defining type: DefId(0/1:18 ~ propagate_fail_to_approximate_longer_wrong_bounds[317d]::supply[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n+               for<'r, 's, 't0, 't1, 't2, 't3> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) &'_#1r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't0)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) &'_#2r u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't2)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) u32>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't3)) std::cell::Cell<&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 't1)) u32>))\n            ]\n \n note: No external requirements"}, {"sha": "04ff4aaadf875bc036b78aa8a53a65af70f7b214", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -18,7 +18,7 @@ LL |     expect_sig(|a, b| b); // ought to return `a`\n    |\n    = note: defining type: DefId(0/1:9 ~ return_wrong_bound_region[317d]::test[0]::{{closure}}[0]) with closure substs [\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) i32, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) i32)) -> &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) i32\n+               for<'r, 's> extern \"rust-call\" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) i32)) -> &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) i32\n            ]\n \n note: No external requirements"}, {"sha": "0ada3fb64ae80da3434b905e504091a59bda0647", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fc19590297d211bb395a16b8ecdc82bab5c00bd3/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=fc19590297d211bb395a16b8ecdc82bab5c00bd3", "patch": "@@ -25,7 +25,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: defining type: DefId(0/1:14 ~ ty_param_closure_approximate_lower_bound[317d]::generic[0]::{{closure}}[0]) with closure substs [\n                T,\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) T))\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T))\n            ]\n    = note: number of external vids: 2\n    = note: where T: '_#1r\n@@ -55,7 +55,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: defining type: DefId(0/1:17 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]::{{closure}}[0]) with closure substs [\n                T,\n                i16,\n-               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex { index: 0 }, BrNamed(crate0:DefIndex(0:0), 's)) T))\n+               for<'r, 's> extern \"rust-call\" fn((std::option::Option<std::cell::Cell<&'_#1r &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 'r)) ()>>, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0:0), 's)) T))\n            ]\n    = note: number of external vids: 2\n    = note: where T: '_#1r"}]}