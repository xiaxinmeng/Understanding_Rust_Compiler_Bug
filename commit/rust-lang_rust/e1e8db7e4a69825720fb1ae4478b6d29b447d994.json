{"sha": "e1e8db7e4a69825720fb1ae4478b6d29b447d994", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZThkYjdlNGE2OTgyNTcyMGZiMWFlNDQ3OGI2ZDI5YjQ0N2Q5OTQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-01T18:16:18Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-06-02T04:53:43Z"}, "message": "rustdoc: Ensure external impls are inlined once\n\nIf the type associated with the impl is `pub use`'d or referenced twice in a\ndownstream crate, the impl will attempt to be inlined twice.\n\nCloses #14584", "tree": {"sha": "4181f1148b664e1fe02427ba598aa4ac8d1971e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4181f1148b664e1fe02427ba598aa4ac8d1971e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1e8db7e4a69825720fb1ae4478b6d29b447d994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1e8db7e4a69825720fb1ae4478b6d29b447d994", "html_url": "https://github.com/rust-lang/rust/commit/e1e8db7e4a69825720fb1ae4478b6d29b447d994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1e8db7e4a69825720fb1ae4478b6d29b447d994/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "890754794c02615310781bc006149dddeb2770bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/890754794c02615310781bc006149dddeb2770bc", "html_url": "https://github.com/rust-lang/rust/commit/890754794c02615310781bc006149dddeb2770bc"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "9a3a68894ab517c898c743696d8fdb544236a31a", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/e1e8db7e4a69825720fb1ae4478b6d29b447d994/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1e8db7e4a69825720fb1ae4478b6d29b447d994/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=e1e8db7e4a69825720fb1ae4478b6d29b447d994", "patch": "@@ -207,7 +207,7 @@ fn build_impls(cx: &core::DocContext,\n     match tcx.inherent_impls.borrow().find(&did) {\n         None => {}\n         Some(i) => {\n-            impls.extend(i.borrow().iter().map(|&did| { build_impl(tcx, did) }));\n+            impls.extend(i.borrow().iter().map(|&did| { build_impl(cx, tcx, did) }));\n         }\n     }\n \n@@ -223,30 +223,37 @@ fn build_impls(cx: &core::DocContext,\n         csearch::each_top_level_item_of_crate(&tcx.sess.cstore,\n                                               did.krate,\n                                               |def, _, _| {\n-            populate_impls(tcx, def, &mut impls)\n+            populate_impls(cx, tcx, def, &mut impls)\n         });\n \n-        fn populate_impls(tcx: &ty::ctxt,\n+        fn populate_impls(cx: &core::DocContext,\n+                          tcx: &ty::ctxt,\n                           def: decoder::DefLike,\n-                          impls: &mut Vec<clean::Item>) {\n+                          impls: &mut Vec<Option<clean::Item>>) {\n             match def {\n-                decoder::DlImpl(did) => impls.push(build_impl(tcx, did)),\n+                decoder::DlImpl(did) => impls.push(build_impl(cx, tcx, did)),\n                 decoder::DlDef(ast::DefMod(did)) => {\n                     csearch::each_child_of_item(&tcx.sess.cstore,\n                                                 did,\n                                                 |def, _, _| {\n-                        populate_impls(tcx, def, impls)\n+                        populate_impls(cx, tcx, def, impls)\n                     })\n                 }\n                 _ => {}\n             }\n         }\n     }\n \n-    impls\n+    impls.move_iter().filter_map(|a| a).collect()\n }\n \n-fn build_impl(tcx: &ty::ctxt, did: ast::DefId) -> clean::Item {\n+fn build_impl(cx: &core::DocContext,\n+              tcx: &ty::ctxt,\n+              did: ast::DefId) -> Option<clean::Item> {\n+    if !cx.inlined.borrow_mut().get_mut_ref().insert(did) {\n+        return None\n+    }\n+\n     let associated_trait = csearch::get_impl_trait(tcx, did);\n     let attrs = load_attrs(tcx, did);\n     let ty = ty::lookup_item_type(tcx, did);\n@@ -275,7 +282,7 @@ fn build_impl(tcx: &ty::ctxt, did: ast::DefId) -> clean::Item {\n         };\n         Some(item)\n     }).collect();\n-    clean::Item {\n+    Some(clean::Item {\n         inner: clean::ImplItem(clean::Impl {\n             derived: clean::detect_derived(attrs.as_slice()),\n             trait_: associated_trait.clean().map(|bound| {\n@@ -293,7 +300,7 @@ fn build_impl(tcx: &ty::ctxt, did: ast::DefId) -> clean::Item {\n         attrs: attrs,\n         visibility: Some(ast::Inherited),\n         def_id: did,\n-    }\n+    })\n }\n \n fn build_module(cx: &core::DocContext, tcx: &ty::ctxt,"}]}