{"sha": "3cb987862fbb4bd54a1239978965600574c20d02", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYjk4Nzg2MmZiYjRiZDU0YTEyMzk5Nzg5NjU2MDA1NzRjMjBkMDI=", "commit": {"author": {"name": "Samuel Holland", "email": "samuel@sholland.org", "date": "2017-08-22T21:24:29Z"}, "committer": {"name": "Samuel Holland", "email": "samuel@sholland.org", "date": "2017-08-22T21:24:29Z"}, "message": "Factor out a helper for the getting C runtime linkage\n\nThis commit makes no functional changes.", "tree": {"sha": "f14772d024886dd207316dc862ce4d0751411f0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f14772d024886dd207316dc862ce4d0751411f0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cb987862fbb4bd54a1239978965600574c20d02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cb987862fbb4bd54a1239978965600574c20d02", "html_url": "https://github.com/rust-lang/rust/commit/3cb987862fbb4bd54a1239978965600574c20d02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cb987862fbb4bd54a1239978965600574c20d02/comments", "author": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smaeul", "id": 5846453, "node_id": "MDQ6VXNlcjU4NDY0NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/5846453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smaeul", "html_url": "https://github.com/smaeul", "followers_url": "https://api.github.com/users/smaeul/followers", "following_url": "https://api.github.com/users/smaeul/following{/other_user}", "gists_url": "https://api.github.com/users/smaeul/gists{/gist_id}", "starred_url": "https://api.github.com/users/smaeul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smaeul/subscriptions", "organizations_url": "https://api.github.com/users/smaeul/orgs", "repos_url": "https://api.github.com/users/smaeul/repos", "events_url": "https://api.github.com/users/smaeul/events{/privacy}", "received_events_url": "https://api.github.com/users/smaeul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52832439ad00fcb23a96ef79a216ed9f62c467c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/52832439ad00fcb23a96ef79a216ed9f62c467c5", "html_url": "https://github.com/rust-lang/rust/commit/52832439ad00fcb23a96ef79a216ed9f62c467c5"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "a3aa7594c6c2dbd229a5f6f774f21021ef5b25ca", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3cb987862fbb4bd54a1239978965600574c20d02/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb987862fbb4bd54a1239978965600574c20d02/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=3cb987862fbb4bd54a1239978965600574c20d02", "patch": "@@ -429,6 +429,22 @@ impl Session {\n             .unwrap_or(self.opts.debug_assertions)\n     }\n \n+    pub fn crt_static(&self) -> bool {\n+        let requested_features = self.opts.cg.target_feature.split(',');\n+        let found_negative = requested_features.clone().any(|r| r == \"-crt-static\");\n+        let found_positive = requested_features.clone().any(|r| r == \"+crt-static\");\n+\n+        // If the target we're compiling for requests a static crt by default,\n+        // then see if the `-crt-static` feature was passed to disable that.\n+        // Otherwise if we don't have a static crt by default then see if the\n+        // `+crt-static` feature was passed.\n+        if self.target.target.options.crt_static_default {\n+            !found_negative\n+        } else {\n+            found_positive\n+        }\n+    }\n+\n     pub fn must_not_eliminate_frame_pointers(&self) -> bool {\n         self.opts.debuginfo != DebugInfoLevel::NoDebugInfo ||\n         !self.target.target.options.eliminate_frame_pointer"}, {"sha": "4616db3ae8746a8e35cdbe4314f533d260473073", "filename": "src/librustc_driver/target_features.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3cb987862fbb4bd54a1239978965600574c20d02/src%2Flibrustc_driver%2Ftarget_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cb987862fbb4bd54a1239978965600574c20d02/src%2Flibrustc_driver%2Ftarget_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftarget_features.rs?ref=3cb987862fbb4bd54a1239978965600574c20d02", "patch": "@@ -25,21 +25,7 @@ pub fn add_configuration(cfg: &mut ast::CrateConfig, sess: &Session) {\n         cfg.insert((tf, Some(feat)));\n     }\n \n-    let requested_features = sess.opts.cg.target_feature.split(',');\n-    let found_negative = requested_features.clone().any(|r| r == \"-crt-static\");\n-    let found_positive = requested_features.clone().any(|r| r == \"+crt-static\");\n-\n-    // If the target we're compiling for requests a static crt by default,\n-    // then see if the `-crt-static` feature was passed to disable that.\n-    // Otherwise if we don't have a static crt by default then see if the\n-    // `+crt-static` feature was passed.\n-    let crt_static = if sess.target.target.options.crt_static_default {\n-        !found_negative\n-    } else {\n-        found_positive\n-    };\n-\n-    if crt_static {\n+    if sess.crt_static() {\n         cfg.insert((tf, Some(Symbol::intern(\"crt-static\"))));\n     }\n }"}]}