{"sha": "c1975dbd34a69565cd0a66770377ed9bfc85fa35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOTc1ZGJkMzRhNjk1NjVjZDBhNjY3NzAzNzdlZDliZmM4NWZhMzU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-19T14:16:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-03-19T14:16:45Z"}, "message": "Rollup merge of #57729 - pnkfelix:issue-55748-pat-types-are-constraints-on-bindings-too, r=nikomatsakis\n\nextra testing of how NLL handles wildcard type `_`\n\ntest that wildcard type `_` is not duplicated by `type Foo<X> = (X, X);` and potentially instantiated at different types when used in type ascriptions in let bindings.\n\n(NLL's handling of this for the type ascription *expression form* is currently broken, or at least differs from what AST-borrowck does. I'll file a separate bug about that. Its not something critical to address since that expression is guarded by `#![feature(type_ascription)]`.)\n\ncc #55748", "tree": {"sha": "4277a8ba6453018aa8a1d4a91176eca93bb0969a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4277a8ba6453018aa8a1d4a91176eca93bb0969a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1975dbd34a69565cd0a66770377ed9bfc85fa35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJckPnNCRBK7hj4Ov3rIwAAdHIIAEnZf8i6GCqtq80qMm0sILjF\npY7h3w4IzAlXdyBPIYrBgFTG7Q2BEK9ipVj9eF1zvSH2NWi4M67Lxvta44PN1sbu\n6/amPFTS0WU62ICY4xc0XZAUYC8dJ2NptkDXOmSbqfLRy64yh75uMTxMv1EUOAUn\nMQWlVUeXbrPXcPIpb6IuFg0nPEHqZ0gKesMddGKWCswlANyNVoQAiKi7sEh5mlL9\ndh3M0Hxtobwe2WvAEf5/xVg9phEMfu0mkSpiue381IW/ZJqMZDAORLs8zZXiPP+6\n3Us7+nM4XvZtc3tqPUU5DqiqRhFML8iCDvfyJmS0acKK4qEKtv4U88HEuerJzsU=\n=LTSR\n-----END PGP SIGNATURE-----\n", "payload": "tree 4277a8ba6453018aa8a1d4a91176eca93bb0969a\nparent d4dd8604eb76683e1bb613cc35d3ad970f4d372f\nparent 4e5692d9858d298f27757579688c71ba494cb5c3\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1553005005 +0100\ncommitter GitHub <noreply@github.com> 1553005005 +0100\n\nRollup merge of #57729 - pnkfelix:issue-55748-pat-types-are-constraints-on-bindings-too, r=nikomatsakis\n\nextra testing of how NLL handles wildcard type `_`\n\ntest that wildcard type `_` is not duplicated by `type Foo<X> = (X, X);` and potentially instantiated at different types when used in type ascriptions in let bindings.\n\n(NLL's handling of this for the type ascription *expression form* is currently broken, or at least differs from what AST-borrowck does. I'll file a separate bug about that. Its not something critical to address since that expression is guarded by `#![feature(type_ascription)]`.)\n\ncc #55748\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1975dbd34a69565cd0a66770377ed9bfc85fa35", "html_url": "https://github.com/rust-lang/rust/commit/c1975dbd34a69565cd0a66770377ed9bfc85fa35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1975dbd34a69565cd0a66770377ed9bfc85fa35/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4dd8604eb76683e1bb613cc35d3ad970f4d372f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4dd8604eb76683e1bb613cc35d3ad970f4d372f", "html_url": "https://github.com/rust-lang/rust/commit/d4dd8604eb76683e1bb613cc35d3ad970f4d372f"}, {"sha": "4e5692d9858d298f27757579688c71ba494cb5c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e5692d9858d298f27757579688c71ba494cb5c3", "html_url": "https://github.com/rust-lang/rust/commit/4e5692d9858d298f27757579688c71ba494cb5c3"}], "stats": {"total": 99, "additions": 99, "deletions": 0}, "files": [{"sha": "3d042d442d5318b3fde457e908eed0dcdca46119", "filename": "src/test/ui/nll/user-annotations/issue-55748-pat-types-constrain-bindings.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c1975dbd34a69565cd0a66770377ed9bfc85fa35/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1975dbd34a69565cd0a66770377ed9bfc85fa35/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.rs?ref=c1975dbd34a69565cd0a66770377ed9bfc85fa35", "patch": "@@ -0,0 +1,70 @@\n+// This test is ensuring that type ascriptions on let bindings\n+// constrain both:\n+//\n+// 1. the input expression on the right-hand side (after any potential\n+//    coercion, and allowing for covariance), *and*\n+//\n+// 2. the bindings (if any) nested within the pattern on the left-hand\n+//    side (and here, the type-constraint is *invariant*).\n+\n+#![feature(nll)]\n+\n+#![allow(dead_code, unused_mut)]\n+type PairUncoupled<'a, 'b, T> = (&'a T, &'b T);\n+type PairCoupledRegions<'a, T> = (&'a T, &'a T);\n+type PairCoupledTypes<T> = (T, T);\n+\n+fn uncoupled_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+    let ((mut y, mut _z),): (PairUncoupled<u32>,) = ((s, &_x),); // ok\n+    // Above compiling does *not* imply below would compile.\n+    // ::std::mem::swap(&mut y, &mut _z);\n+    y\n+}\n+\n+fn swap_regions((mut y, mut _z): PairCoupledRegions<u32>) {\n+    ::std::mem::swap(&mut y, &mut _z);\n+}\n+\n+fn coupled_regions_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+    let ((y, _z),): (PairCoupledRegions<u32>,) = ((s, &_x),);\n+    // If above line compiled, so should line below ...\n+\n+    // swap_regions((y, _z));\n+\n+    // ... but the ascribed type also invalidates this use of `y`\n+    y //~ ERROR lifetime may not live long enough\n+}\n+\n+fn swap_types((mut y, mut _z): PairCoupledTypes<&u32>) {\n+    ::std::mem::swap(&mut y, &mut _z);\n+}\n+\n+fn coupled_types_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+    let ((y, _z),): (PairCoupledTypes<&u32>,) = ((s, &_x),);\n+    // If above line compiled, so should line below ...\n+\n+    // swap_types((y, _z));\n+\n+    // ... but the ascribed type also invalidates this use of `y`\n+    y //~ ERROR lifetime may not live long enough\n+}\n+\n+fn swap_wilds((mut y, mut _z): PairCoupledTypes<&u32>) {\n+    ::std::mem::swap(&mut y, &mut _z);\n+}\n+\n+fn coupled_wilds_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+    let ((y, _z),): (PairCoupledTypes<_>,) = ((s, &_x),);\n+    // If above line compiled, so should line below\n+    // swap_wilds((y, _z));\n+\n+    // ... but the ascribed type also invalidates this use of `y`\n+    y //~ ERROR lifetime may not live long enough\n+}\n+\n+fn main() {\n+    uncoupled_lhs(&3, &4);\n+    coupled_regions_lhs(&3, &4);\n+    coupled_types_lhs(&3, &4);\n+    coupled_wilds_lhs(&3, &4);\n+}"}, {"sha": "5929707e41e10ba18c724401fd5503be3db368ae", "filename": "src/test/ui/nll/user-annotations/issue-55748-pat-types-constrain-bindings.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c1975dbd34a69565cd0a66770377ed9bfc85fa35/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c1975dbd34a69565cd0a66770377ed9bfc85fa35/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fissue-55748-pat-types-constrain-bindings.stderr?ref=c1975dbd34a69565cd0a66770377ed9bfc85fa35", "patch": "@@ -0,0 +1,29 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-55748-pat-types-constrain-bindings.rs:35:5\n+   |\n+LL | fn coupled_regions_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+   |                        -- lifetime `'a` defined here\n+...\n+LL |     y\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-55748-pat-types-constrain-bindings.rs:49:5\n+   |\n+LL | fn coupled_types_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+   |                      -- lifetime `'a` defined here\n+...\n+LL |     y\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-55748-pat-types-constrain-bindings.rs:62:5\n+   |\n+LL | fn coupled_wilds_lhs<'a>(_x: &'a u32, s: &'static u32) -> &'static u32 {\n+   |                      -- lifetime `'a` defined here\n+...\n+LL |     y\n+   |     ^ returning this value requires that `'a` must outlive `'static`\n+\n+error: aborting due to 3 previous errors\n+"}]}