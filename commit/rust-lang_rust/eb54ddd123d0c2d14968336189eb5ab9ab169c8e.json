{"sha": "eb54ddd123d0c2d14968336189eb5ab9ab169c8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViNTRkZGQxMjNkMGMyZDE0OTY4MzM2MTg5ZWI1YWI5YWIxNjljOGU=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-21T13:52:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-21T13:52:49Z"}, "message": "Rollup merge of #87279 - sunfishcode:document-unix-argv, r=RalfJung\n\nAdd comments explaining the unix command-line argument support.\n\nFollowing up on #87236, add comments to the unix command-line argument\nsupport explaining that the code doesn't mutate the system-provided\nargc/argv, and that this is why the code doesn't need a lock or special\nmemory ordering.\n\nr? ```@RalfJung```", "tree": {"sha": "c3f1cad52b6e499acd8863f7821f5e65a98030a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3f1cad52b6e499acd8863f7821f5e65a98030a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb54ddd123d0c2d14968336189eb5ab9ab169c8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg+CaxCRBK7hj4Ov3rIwAALHUIADfskRCTrj1wDM+vA0INd59+\ng/CLvxEn+JndTd7BqgTFq7JlGy2FRlPop4szWvzftGZbOlkXoq3f2LOUmj97JgoJ\n+M9eLWIwDVBZfEPxkloOyUy1SeZRT5Ygi2SOe8RK91FPCmZhlAQkjkNBEp1mjcUz\n34BDESAACM2Xya1vijuKQzcVlvsmaGGrKT2v5mw5V50K0HzDTqTWO/aHQbumeHbU\nC82D907/RHKbCx1rYplBXIFrWUCEvTCq+HiS48wBQzwvvEyQ3j1A8SJgWVAypO2G\nLt6Fky4JKTNA3CZL6xCnp78blictpHPv0vEPC03/MVpaamuqH+EnfdnuTJf3mgY=\n=FjQI\n-----END PGP SIGNATURE-----\n", "payload": "tree c3f1cad52b6e499acd8863f7821f5e65a98030a1\nparent 1008ace95c825bd48ad9dffdb27fd63be45bb3c2\nparent 2a56a681c4cfd56822e447a66adccdc32580b46a\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1626875569 +0200\ncommitter GitHub <noreply@github.com> 1626875569 +0200\n\nRollup merge of #87279 - sunfishcode:document-unix-argv, r=RalfJung\n\nAdd comments explaining the unix command-line argument support.\n\nFollowing up on #87236, add comments to the unix command-line argument\nsupport explaining that the code doesn't mutate the system-provided\nargc/argv, and that this is why the code doesn't need a lock or special\nmemory ordering.\n\nr? ```@RalfJung```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb54ddd123d0c2d14968336189eb5ab9ab169c8e", "html_url": "https://github.com/rust-lang/rust/commit/eb54ddd123d0c2d14968336189eb5ab9ab169c8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb54ddd123d0c2d14968336189eb5ab9ab169c8e/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1008ace95c825bd48ad9dffdb27fd63be45bb3c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1008ace95c825bd48ad9dffdb27fd63be45bb3c2", "html_url": "https://github.com/rust-lang/rust/commit/1008ace95c825bd48ad9dffdb27fd63be45bb3c2"}, {"sha": "2a56a681c4cfd56822e447a66adccdc32580b46a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a56a681c4cfd56822e447a66adccdc32580b46a", "html_url": "https://github.com/rust-lang/rust/commit/2a56a681c4cfd56822e447a66adccdc32580b46a"}], "stats": {"total": 18, "additions": 16, "deletions": 2}, "files": [{"sha": "0bd1ea645779f6d524e1cb9e27156bcfe3f82b38", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eb54ddd123d0c2d14968336189eb5ab9ab169c8e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb54ddd123d0c2d14968336189eb5ab9ab169c8e/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=eb54ddd123d0c2d14968336189eb5ab9ab169c8e", "patch": "@@ -77,10 +77,18 @@ mod imp {\n     use crate::ptr;\n     use crate::sync::atomic::{AtomicIsize, AtomicPtr, Ordering};\n \n+    // The system-provided argc and argv, which we store in static memory\n+    // here so that we can defer the work of parsing them until its actually\n+    // needed.\n+    //\n+    // Note that we never mutate argv/argc, the argv array, or the argv\n+    // strings, which allows the code in this file to be very simple.\n     static ARGC: AtomicIsize = AtomicIsize::new(0);\n     static ARGV: AtomicPtr<*const u8> = AtomicPtr::new(ptr::null_mut());\n \n     unsafe fn really_init(argc: isize, argv: *const *const u8) {\n+        // These don't need to be ordered with each other or other stores,\n+        // because they only hold the unmodified system-provide argv/argc.\n         ARGC.store(argc, Ordering::Relaxed);\n         ARGV.store(argv as *mut _, Ordering::Relaxed);\n     }\n@@ -122,8 +130,14 @@ mod imp {\n \n     fn clone() -> Vec<OsString> {\n         unsafe {\n-            // Load ARGC and ARGV without a lock. If the store to either ARGV or\n-            // ARGC isn't visible yet, we'll return an empty argument list.\n+            // Load ARGC and ARGV, which hold the unmodified system-provided\n+            // argc/argv, so we can read the pointed-to memory without atomics\n+            // or synchronization.\n+            //\n+            // If either ARGC or ARGV is still zero or null, then either there\n+            // really are no arguments, or someone is asking for `args()`\n+            // before initialization has completed, and we return an empty\n+            // list.\n             let argv = ARGV.load(Ordering::Relaxed);\n             let argc = if argv.is_null() { 0 } else { ARGC.load(Ordering::Relaxed) };\n             (0..argc)"}]}