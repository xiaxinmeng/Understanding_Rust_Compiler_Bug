{"sha": "6ea28c377947b7e26efcb107d0dbbd804ed5e27f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlYTI4YzM3Nzk0N2I3ZTI2ZWZjYjEwN2QwZGJiZDgwNGVkNWUyN2Y=", "commit": {"author": {"name": "petr-tik", "email": "petr-tik@users.noreply.github.com", "date": "2020-07-27T21:17:15Z"}, "committer": {"name": "petr-tik", "email": "petr-tik@users.noreply.github.com", "date": "2020-07-27T21:17:15Z"}, "message": "Fixed #5129\n\nAddresses two issues:\n- keep the parens from dbg!() in case the call is chained or there is\nsemantic difference if parens are excluded\n- Exclude the semicolon after the dbg!(); by checking if it was\naccidentally included in the macro_call\n\ninvestigated, but decided against:\nfix ast::MacroCall extraction to never include semicolons at the end -\nthis logic lives in rowan.\n\nDefensively shorten the macro_range if there is a semicolon token.\nDeleted unneccessary temp variable macro_args\n\nRenamed macro_content to \"paste_instead_of_dbg\", because it isn't a\nsimple extraction of text inside dbg!() anymore", "tree": {"sha": "c3fce05f13e463ebcf7d9721f29dc5dcf2b84540", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3fce05f13e463ebcf7d9721f29dc5dcf2b84540"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ea28c377947b7e26efcb107d0dbbd804ed5e27f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ea28c377947b7e26efcb107d0dbbd804ed5e27f", "html_url": "https://github.com/rust-lang/rust/commit/6ea28c377947b7e26efcb107d0dbbd804ed5e27f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ea28c377947b7e26efcb107d0dbbd804ed5e27f/comments", "author": {"login": "petr-tik", "id": 14153264, "node_id": "MDQ6VXNlcjE0MTUzMjY0", "avatar_url": "https://avatars.githubusercontent.com/u/14153264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petr-tik", "html_url": "https://github.com/petr-tik", "followers_url": "https://api.github.com/users/petr-tik/followers", "following_url": "https://api.github.com/users/petr-tik/following{/other_user}", "gists_url": "https://api.github.com/users/petr-tik/gists{/gist_id}", "starred_url": "https://api.github.com/users/petr-tik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petr-tik/subscriptions", "organizations_url": "https://api.github.com/users/petr-tik/orgs", "repos_url": "https://api.github.com/users/petr-tik/repos", "events_url": "https://api.github.com/users/petr-tik/events{/privacy}", "received_events_url": "https://api.github.com/users/petr-tik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petr-tik", "id": 14153264, "node_id": "MDQ6VXNlcjE0MTUzMjY0", "avatar_url": "https://avatars.githubusercontent.com/u/14153264?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petr-tik", "html_url": "https://github.com/petr-tik", "followers_url": "https://api.github.com/users/petr-tik/followers", "following_url": "https://api.github.com/users/petr-tik/following{/other_user}", "gists_url": "https://api.github.com/users/petr-tik/gists{/gist_id}", "starred_url": "https://api.github.com/users/petr-tik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petr-tik/subscriptions", "organizations_url": "https://api.github.com/users/petr-tik/orgs", "repos_url": "https://api.github.com/users/petr-tik/repos", "events_url": "https://api.github.com/users/petr-tik/events{/privacy}", "received_events_url": "https://api.github.com/users/petr-tik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01bdeaad71ea87e2e989fc9ded06f69805929e42", "url": "https://api.github.com/repos/rust-lang/rust/commits/01bdeaad71ea87e2e989fc9ded06f69805929e42", "html_url": "https://github.com/rust-lang/rust/commit/01bdeaad71ea87e2e989fc9ded06f69805929e42"}], "stats": {"total": 31, "additions": 23, "deletions": 8}, "files": [{"sha": "c43b89661fad295331c07ac09d6c32c73960106c", "filename": "crates/ra_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6ea28c377947b7e26efcb107d0dbbd804ed5e27f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ea28c377947b7e26efcb107d0dbbd804ed5e27f/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=6ea28c377947b7e26efcb107d0dbbd804ed5e27f", "patch": "@@ -1,6 +1,6 @@\n use ra_syntax::{\n     ast::{self, AstNode},\n-    TextSize, T,\n+    TextRange, TextSize, T,\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -27,19 +27,32 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         return None;\n     }\n \n-    let macro_range = macro_call.syntax().text_range();\n+    let semicolon_on_end = macro_call.semicolon_token().is_some();\n+    let is_leaf = macro_call.syntax().next_sibling().is_none();\n \n-    let macro_content = {\n-        let macro_args = macro_call.token_tree()?.syntax().clone();\n+    let macro_end = match semicolon_on_end {\n+        true => macro_call.syntax().text_range().end() - TextSize::of(';'),\n+        false => macro_call.syntax().text_range().end(),\n+    };\n \n-        let text = macro_args.text();\n-        let without_parens = TextSize::of('(')..text.len() - TextSize::of(')');\n-        text.slice(without_parens).to_string()\n+    // macro_range determines what will be deleted and replaced with macro_content\n+    let macro_range = TextRange::new(macro_call.syntax().text_range().start(), macro_end);\n+    let paste_instead_of_dbg = {\n+        let text = macro_call.token_tree()?.syntax().text();\n+\n+        // leafines determines if we should include the parenthesis or not\n+        let slice_index: TextRange = match is_leaf {\n+            // leaf means - we can extract the contents of the dbg! in text\n+            true => TextRange::new(TextSize::of('('), text.len() - TextSize::of(')')),\n+            // not leaf - means we should keep the parens\n+            false => TextRange::new(TextSize::from(0 as u32), text.len()),\n+        };\n+        text.slice(slice_index).to_string()\n     };\n \n     let target = macro_call.syntax().text_range();\n     acc.add(AssistId(\"remove_dbg\", AssistKind::Refactor), \"Remove dbg!()\", target, |builder| {\n-        builder.replace(macro_range, macro_content);\n+        builder.replace(macro_range, paste_instead_of_dbg);\n     })\n }\n \n@@ -132,6 +145,8 @@ fn foo(n: usize) {\n     fn test_remove_dbg_keep_semicolon() {\n         // https://github.com/rust-analyzer/rust-analyzer/issues/5129#issuecomment-651399779\n         // not quite though\n+        // adding a comment at the end of the line makes\n+        // the ast::MacroCall to include the semicolon at the end\n         let code = \"\n let res = <|>dbg!(1 * 20); // needless comment\n \";"}]}