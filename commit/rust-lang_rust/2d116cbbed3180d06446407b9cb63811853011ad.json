{"sha": "2d116cbbed3180d06446407b9cb63811853011ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkMTE2Y2JiZWQzMTgwZDA2NDQ2NDA3YjljYjYzODExODUzMDExYWQ=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-06T02:19:04Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-09-06T02:20:01Z"}, "message": "Start making moves explicit in libcore\n\nThis is in preparation for issue 2633. Replaced implicit moves that\nrely on last-use with explicit moves in char, float, and str.", "tree": {"sha": "b64c27dfbd9f4a2f9e080b6d6e43d4a94743664d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b64c27dfbd9f4a2f9e080b6d6e43d4a94743664d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d116cbbed3180d06446407b9cb63811853011ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d116cbbed3180d06446407b9cb63811853011ad", "html_url": "https://github.com/rust-lang/rust/commit/2d116cbbed3180d06446407b9cb63811853011ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d116cbbed3180d06446407b9cb63811853011ad/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ba632a683f21f306e1f71c1bd867752b93ebd3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba632a683f21f306e1f71c1bd867752b93ebd3b", "html_url": "https://github.com/rust-lang/rust/commit/2ba632a683f21f306e1f71c1bd867752b93ebd3b"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "20b0857f5c8c56351be71043527557d952ac9369", "filename": "src/libcore/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2d116cbbed3180d06446407b9cb63811853011ad/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d116cbbed3180d06446407b9cb63811853011ad/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=2d116cbbed3180d06446407b9cb63811853011ad", "patch": "@@ -148,7 +148,7 @@ fn escape_unicode(c: char) -> ~str {\n     str::push_str(out, str::from_char(c));\n     for uint::range(str::len(s), pad) |_i| { str::push_str(out, ~\"0\"); }\n     str::push_str(out, s);\n-    return out;\n+    move out\n }\n \n /**"}, {"sha": "a69260abaab89278e1be395ed0cf06cacb6612c3", "filename": "src/libcore/float.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2d116cbbed3180d06446407b9cb63811853011ad/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d116cbbed3180d06446407b9cb63811853011ad/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=2d116cbbed3180d06446407b9cb63811853011ad", "patch": "@@ -181,8 +181,7 @@ fn to_str_common(num: float, digits: uint, exact: bool) -> ~str {\n     } else {\n         acc = sign + ones + ~\".\" + racc;\n     }\n-\n-    return acc;\n+    move acc\n }\n \n /**"}, {"sha": "fe4d1cba40708949066f71abe3d22a7927cf9b3f", "filename": "src/libcore/str.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2d116cbbed3180d06446407b9cb63811853011ad/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d116cbbed3180d06446407b9cb63811853011ad/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=2d116cbbed3180d06446407b9cb63811853011ad", "patch": "@@ -228,7 +228,7 @@ fn push_char(&s: ~str, ch: char) {\n pure fn from_char(ch: char) -> ~str {\n     let mut buf = ~\"\";\n     unchecked { push_char(buf, ch); }\n-    return buf;\n+    move buf\n }\n \n /// Convert a vector of chars to a string\n@@ -238,7 +238,7 @@ pure fn from_chars(chs: &[char]) -> ~str {\n         reserve(buf, chs.len());\n         for vec::each(chs) |ch| { push_char(buf, ch); }\n     }\n-    return buf;\n+    move buf\n }\n \n /// Appends a string slice to the back of a string, without overallocating\n@@ -281,15 +281,15 @@ pure fn append(+lhs: ~str, rhs: &str) -> ~str {\n     unchecked {\n         push_str_no_overallocate(v, rhs);\n     }\n-    return v;\n+    move v\n }\n \n \n /// Concatenate a vector of strings\n pure fn concat(v: &[~str]) -> ~str {\n     let mut s: ~str = ~\"\";\n     for vec::each(v) |ss| { unchecked { push_str(s, ss) }; }\n-    return s;\n+    move s\n }\n \n /// Concatenate a vector of strings, placing a given separator between each\n@@ -299,7 +299,7 @@ pure fn connect(v: &[~str], sep: &str) -> ~str {\n         if first { first = false; } else { unchecked { push_str(s, sep); } }\n         unchecked { push_str(s, ss) };\n     }\n-    return s;\n+    move s\n }\n \n /*\n@@ -436,13 +436,11 @@ Section: Transforming strings\n  *\n  * The result vector is not null-terminated.\n  */\n-pure fn to_bytes(s: &str) -> ~[u8] {\n-    unsafe {\n-        let mut s_copy = from_slice(s);\n-        let mut v: ~[u8] = ::unsafe::transmute(s_copy);\n-        vec::unsafe::set_len(v, len(s));\n-        return v;\n-    }\n+pure fn to_bytes(s: &str) -> ~[u8] unsafe {\n+    let mut s_copy = from_slice(s);\n+    let mut v: ~[u8] = ::unsafe::transmute(s_copy);\n+    vec::unsafe::set_len(v, len(s));\n+    move v\n }\n \n /// Work with the string as a byte slice, not including trailing null.\n@@ -462,7 +460,7 @@ pure fn chars(s: &str) -> ~[char] {\n         unchecked { vec::push(buf, ch); }\n         i = next;\n     }\n-    return buf;\n+    move buf\n }\n \n /**\n@@ -539,7 +537,7 @@ pure fn split_char_inner(s: &str, sep: char, count: uint, allow_empty: bool)\n         if allow_empty || start < l {\n             unsafe { vec::push(result, unsafe::slice_bytes(s, start, l) ) };\n         }\n-        result\n+        move result\n     } else {\n         splitn(s, |cur| cur == sep, count)\n     }\n@@ -582,7 +580,7 @@ pure fn split_inner(s: &str, sepfn: fn(cc: char) -> bool, count: uint,\n     if allow_empty || start < l unchecked {\n         vec::push(result, unsafe { unsafe::slice_bytes(s, start, l) });\n     }\n-    result\n+    move result\n }\n \n // See Issue #1932 for why this is a naive search\n@@ -636,7 +634,7 @@ pure fn split_str(s: &a/str, sep: &b/str) -> ~[~str] {\n     do iter_between_matches(s, sep) |from, to| {\n         unsafe { vec::push(result, unsafe::slice_bytes(s, from, to)); }\n     }\n-    result\n+    move result\n }\n \n pure fn split_str_nonempty(s: &a/str, sep: &b/str) -> ~[~str] {\n@@ -646,7 +644,7 @@ pure fn split_str_nonempty(s: &a/str, sep: &b/str) -> ~[~str] {\n             unsafe { vec::push(result, unsafe::slice_bytes(s, from, to)); }\n         }\n     }\n-    result\n+    move result\n }\n \n /**\n@@ -665,7 +663,7 @@ pure fn lines_any(s: &str) -> ~[~str] {\n         if l > 0u && s[l - 1u] == '\\r' as u8 {\n             unsafe { unsafe::set_len(cp, l - 1u); }\n         }\n-        cp\n+        move cp\n     })\n }\n \n@@ -707,7 +705,7 @@ pure fn replace(s: &str, from: &str, to: &str) -> ~str {\n         if first { first = false; } else { unchecked {push_str(result, to); }}\n         unsafe { push_str(result, unsafe::slice_bytes(s, start, end)); }\n     }\n-    result\n+    move result\n }\n \n /*\n@@ -865,7 +863,7 @@ pure fn map(ss: &str, ff: fn(char) -> char) -> ~str {\n             str::push_char(result, ff(cc));\n         }\n     }\n-    result\n+    move result\n }\n \n /// Iterate over the bytes in a string\n@@ -1517,7 +1515,7 @@ pure fn to_utf16(s: &str) -> ~[u16] {\n             vec::push_all(u, ~[w1, w2])\n         }\n     }\n-    return u;\n+    move u\n }\n \n pure fn utf16_chars(v: &[u16], f: fn(char)) {\n@@ -1551,7 +1549,7 @@ pure fn from_utf16(v: &[u16]) -> ~str {\n         reserve(buf, vec::len(v));\n         utf16_chars(v, |ch| push_char(buf, ch));\n     }\n-    return buf;\n+    move buf\n }\n \n \n@@ -1931,7 +1929,7 @@ pure fn escape_default(s: &str) -> ~str {\n         reserve_at_least(out, str::len(s));\n         chars_iter(s, |c| push_str(out, char::escape_default(c)));\n     }\n-    return out;\n+    move out\n }\n \n /// Escape each char in `s` with char::escape_unicode.\n@@ -1941,7 +1939,7 @@ pure fn escape_unicode(s: &str) -> ~str {\n         reserve_at_least(out, str::len(s));\n         chars_iter(s, |c| push_str(out, char::escape_unicode(c)));\n     }\n-    return out;\n+    move out\n }\n \n /// Unsafe operations"}]}