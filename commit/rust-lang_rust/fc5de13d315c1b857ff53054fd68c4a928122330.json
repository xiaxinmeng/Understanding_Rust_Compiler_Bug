{"sha": "fc5de13d315c1b857ff53054fd68c4a928122330", "node_id": "C_kwDOAAsO6NoAKGZjNWRlMTNkMzE1YzFiODU3ZmY1MzA1NGZkNjhjNGE5MjgxMjIzMzA", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-03T22:30:28Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2023-04-03T22:31:07Z"}, "message": "rustdoc: convert `print_tuple_struct_fields` to return a Display", "tree": {"sha": "56095d3e4f30dfb6cc8c7891a5cf59a714452d56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/56095d3e4f30dfb6cc8c7891a5cf59a714452d56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc5de13d315c1b857ff53054fd68c4a928122330", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5de13d315c1b857ff53054fd68c4a928122330", "html_url": "https://github.com/rust-lang/rust/commit/fc5de13d315c1b857ff53054fd68c4a928122330", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc5de13d315c1b857ff53054fd68c4a928122330/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf41e753ec60da69f2393850ec5035063a573d95", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf41e753ec60da69f2393850ec5035063a573d95", "html_url": "https://github.com/rust-lang/rust/commit/bf41e753ec60da69f2393850ec5035063a573d95"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "7837368f3405fc0aa53dda3f03f0b5359c96b89a", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fc5de13d315c1b857ff53054fd68c4a928122330/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5de13d315c1b857ff53054fd68c4a928122330/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=fc5de13d315c1b857ff53054fd68c4a928122330", "patch": "@@ -1174,17 +1174,23 @@ fn item_union(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, s: &clean:\n     document_type_layout(w, cx, def_id);\n }\n \n-fn print_tuple_struct_fields(w: &mut Buffer, cx: &Context<'_>, s: &[clean::Item]) {\n-    for (i, ty) in s.iter().enumerate() {\n-        if i > 0 {\n-            w.write_str(\", \");\n-        }\n-        match *ty.kind {\n-            clean::StrippedItem(box clean::StructFieldItem(_)) => w.write_str(\"_\"),\n-            clean::StructFieldItem(ref ty) => write!(w, \"{}\", ty.print(cx)),\n-            _ => unreachable!(),\n+fn print_tuple_struct_fields<'a, 'cx: 'a>(\n+    cx: &'a Context<'cx>,\n+    s: &'a [clean::Item],\n+) -> impl fmt::Display + 'a + Captures<'cx> {\n+    display_fn(|f| {\n+        for (i, ty) in s.iter().enumerate() {\n+            if i > 0 {\n+                f.write_str(\", \")?;\n+            }\n+            match *ty.kind {\n+                clean::StrippedItem(box clean::StructFieldItem(_)) => f.write_str(\"_\")?,\n+                clean::StructFieldItem(ref ty) => write!(f, \"{}\", ty.print(cx))?,\n+                _ => unreachable!(),\n+            }\n         }\n-    }\n+        Ok(())\n+    })\n }\n \n fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::Enum) {\n@@ -1221,9 +1227,7 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n                     clean::VariantItem(ref var) => match var.kind {\n                         clean::VariantKind::CLike => write!(w, \"{}\", name),\n                         clean::VariantKind::Tuple(ref s) => {\n-                            write!(w, \"{}(\", name);\n-                            print_tuple_struct_fields(w, cx, s);\n-                            w.write_str(\")\");\n+                            write!(w, \"{name}({})\", print_tuple_struct_fields(cx, s),);\n                         }\n                         clean::VariantKind::Struct(ref s) => {\n                             render_struct(w, v, None, None, &s.fields, \"    \", false, cx);\n@@ -1276,9 +1280,7 @@ fn item_enum(w: &mut Buffer, cx: &mut Context<'_>, it: &clean::Item, e: &clean::\n             let clean::VariantItem(variant_data) = &*variant.kind else { unreachable!() };\n \n             if let clean::VariantKind::Tuple(ref s) = variant_data.kind {\n-                w.write_str(\"(\");\n-                print_tuple_struct_fields(w, cx, s);\n-                w.write_str(\")\");\n+                write!(w, \"({})\", print_tuple_struct_fields(cx, s),);\n             }\n             w.write_str(\"</h3></section>\");\n "}]}