{"sha": "0a06d7344b5e83c304b926d03452f4c95d2c89dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMDZkNzM0NGI1ZTgzYzMwNGI5MjZkMDM0NTJmNGM5NWQyYzg5ZGM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-10-24T20:39:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-24T20:39:49Z"}, "message": "Rollup merge of #78069 - fusion-engineering-forks:core-const-panic-str, r=RalfJung\n\nFix const core::panic!(non_literal_str).\n\nInvocations of `core::panic!(x)` where `x` is not a string literal expand to `panic!(\"{}\", x)`, which is not understood by the const panic logic right now. This adds `panic_str` as a lang item, and modifies the const eval implementation to hook into this item as well.\n\nThis fixes the issue mentioned here: https://github.com/rust-lang/rust/issues/51999#issuecomment-687604248\n\nr? `@RalfJung`\n\n`@rustbot` modify labels: +A-const-eval", "tree": {"sha": "e7707c041083b92e099eb28e63c01666b7cbb219", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7707c041083b92e099eb28e63c01666b7cbb219"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a06d7344b5e83c304b926d03452f4c95d2c89dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflJEVCRBK7hj4Ov3rIwAAdHIIAEYyRujAjU2IyipJPfiCYVW6\nLmM3EIajLD9G5oPVIdfETjzntkF/Lu2NZHrXd8GMRInr7bWzfph1z3y3dWDPRCzN\nQul+vtkaFazupNJjuXmNn0Uy6zS9qzJ0TCU5iUACU/H7EFLLtqT3wKLjaEeg8Gjf\nKFyaHrBdULmYxhtdLdxXSDHUqnIorZg3N9yyhRlmqjm0xnoZgWhFs37xWUl6H3zl\nSaUmqjqy1OEF+DW/FyDKKQk7NKhWgucX59jYCUmPuEWhue3FMEUbk48S3XUx8cny\nulENAT8pe2d0GvcSxyCBKzBCl2fn5TTj46qeVdnYJDw9OBx14iFwd22yq5YbUls=\n=tcyE\n-----END PGP SIGNATURE-----\n", "payload": "tree e7707c041083b92e099eb28e63c01666b7cbb219\nparent 7428de1583b5ebee2e8b35f79ecdcf3590f0b9ea\nparent 713012780fd6d7d236f040e6cdc78aaad9d926e4\nauthor Jonas Schievink <jonasschievink@gmail.com> 1603571989 +0200\ncommitter GitHub <noreply@github.com> 1603571989 +0200\n\nRollup merge of #78069 - fusion-engineering-forks:core-const-panic-str, r=RalfJung\n\nFix const core::panic!(non_literal_str).\n\nInvocations of `core::panic!(x)` where `x` is not a string literal expand to `panic!(\"{}\", x)`, which is not understood by the const panic logic right now. This adds `panic_str` as a lang item, and modifies the const eval implementation to hook into this item as well.\n\nThis fixes the issue mentioned here: https://github.com/rust-lang/rust/issues/51999#issuecomment-687604248\n\nr? `@RalfJung`\n\n`@rustbot` modify labels: +A-const-eval\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a06d7344b5e83c304b926d03452f4c95d2c89dc", "html_url": "https://github.com/rust-lang/rust/commit/0a06d7344b5e83c304b926d03452f4c95d2c89dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a06d7344b5e83c304b926d03452f4c95d2c89dc/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7428de1583b5ebee2e8b35f79ecdcf3590f0b9ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/7428de1583b5ebee2e8b35f79ecdcf3590f0b9ea", "html_url": "https://github.com/rust-lang/rust/commit/7428de1583b5ebee2e8b35f79ecdcf3590f0b9ea"}, {"sha": "713012780fd6d7d236f040e6cdc78aaad9d926e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/713012780fd6d7d236f040e6cdc78aaad9d926e4", "html_url": "https://github.com/rust-lang/rust/commit/713012780fd6d7d236f040e6cdc78aaad9d926e4"}], "stats": {"total": 80, "additions": 60, "deletions": 20}, "files": [{"sha": "3e4eb9eafd7f99a0a9124e8d43d65d8b740b27a0", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a06d7344b5e83c304b926d03452f4c95d2c89dc/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a06d7344b5e83c304b926d03452f4c95d2c89dc/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=0a06d7344b5e83c304b926d03452f4c95d2c89dc", "patch": "@@ -263,6 +263,7 @@ language_item_table! {\n     // is required to define it somewhere. Additionally, there are restrictions on crates that use\n     // a weak lang item, but do not have it defined.\n     Panic,                   sym::panic,               panic_fn,                   Target::Fn;\n+    PanicStr,                sym::panic_str,           panic_str,                  Target::Fn;\n     PanicBoundsCheck,        sym::panic_bounds_check,  panic_bounds_check_fn,      Target::Fn;\n     PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct;\n     PanicLocation,           sym::panic_location,      panic_location,             Target::Struct;"}, {"sha": "7e2cae094811a07ccc69b533b764917ce63891ae", "filename": "compiler/rustc_mir/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0a06d7344b5e83c304b926d03452f4c95d2c89dc/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a06d7344b5e83c304b926d03452f4c95d2c89dc/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=0a06d7344b5e83c304b926d03452f4c95d2c89dc", "patch": "@@ -70,9 +70,10 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n     ) -> InterpResult<'tcx> {\n         let def_id = instance.def_id();\n         if Some(def_id) == self.tcx.lang_items().panic_fn()\n+            || Some(def_id) == self.tcx.lang_items().panic_str()\n             || Some(def_id) == self.tcx.lang_items().begin_panic_fn()\n         {\n-            // &'static str\n+            // &str\n             assert!(args.len() == 1);\n \n             let msg_place = self.deref_operand(args[0])?;"}, {"sha": "b93d63b4fddb9335d2bdf731f3bce6e1b0e073b0", "filename": "compiler/rustc_mir/src/transform/check_consts/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a06d7344b5e83c304b926d03452f4c95d2c89dc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a06d7344b5e83c304b926d03452f4c95d2c89dc/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=0a06d7344b5e83c304b926d03452f4c95d2c89dc", "patch": "@@ -74,7 +74,9 @@ impl ConstCx<'mir, 'tcx> {\n \n /// Returns `true` if this `DefId` points to one of the official `panic` lang items.\n pub fn is_lang_panic_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n-    Some(def_id) == tcx.lang_items().panic_fn() || Some(def_id) == tcx.lang_items().begin_panic_fn()\n+    Some(def_id) == tcx.lang_items().panic_fn()\n+        || Some(def_id) == tcx.lang_items().panic_str()\n+        || Some(def_id) == tcx.lang_items().begin_panic_fn()\n }\n \n pub fn allow_internal_unstable(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bool {"}, {"sha": "3133090575e36e0dc6adde677303c88aee11fa97", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a06d7344b5e83c304b926d03452f4c95d2c89dc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a06d7344b5e83c304b926d03452f4c95d2c89dc/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=0a06d7344b5e83c304b926d03452f4c95d2c89dc", "patch": "@@ -777,6 +777,7 @@ symbols! {\n         panic_info,\n         panic_location,\n         panic_runtime,\n+        panic_str,\n         panic_unwind,\n         param_attrs,\n         parent_trait,"}, {"sha": "ac45e819cf67a23a82186b45adb3942606ea6b0f", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a06d7344b5e83c304b926d03452f4c95d2c89dc/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a06d7344b5e83c304b926d03452f4c95d2c89dc/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=0a06d7344b5e83c304b926d03452f4c95d2c89dc", "patch": "@@ -10,7 +10,7 @@ macro_rules! panic {\n         $crate::panicking::panic($msg)\n     );\n     ($msg:expr) => (\n-        $crate::panic!(\"{}\", $crate::convert::identity::<&str>($msg))\n+        $crate::panicking::panic_str($msg)\n     );\n     ($msg:expr,) => (\n         $crate::panic!($msg)"}, {"sha": "09dd19b8f5f9385450fa7dc6ce4e5c85eeacf52f", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a06d7344b5e83c304b926d03452f4c95d2c89dc/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a06d7344b5e83c304b926d03452f4c95d2c89dc/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=0a06d7344b5e83c304b926d03452f4c95d2c89dc", "patch": "@@ -50,6 +50,13 @@ pub fn panic(expr: &'static str) -> ! {\n     panic_fmt(fmt::Arguments::new_v1(&[expr], &[]));\n }\n \n+#[inline]\n+#[track_caller]\n+#[cfg_attr(not(bootstrap), lang = \"panic_str\")] // needed for const-evaluated panics\n+pub fn panic_str(expr: &str) -> ! {\n+    panic_fmt(format_args!(\"{}\", expr));\n+}\n+\n #[cold]\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[track_caller]"}, {"sha": "799c185fb8e4b534e003e35c58ab946f1a4d2a8a", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a06d7344b5e83c304b926d03452f4c95d2c89dc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a06d7344b5e83c304b926d03452f4c95d2c89dc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=0a06d7344b5e83c304b926d03452f4c95d2c89dc", "patch": "@@ -1,6 +1,8 @@\n #![feature(const_panic)]\n #![crate_type = \"lib\"]\n \n+const MSG: &str = \"hello\";\n+\n const Z: () = std::panic!(\"cheese\");\n //~^ ERROR any use of this value will cause an error\n \n@@ -12,6 +14,9 @@ const Y: () = std::unreachable!();\n \n const X: () = std::unimplemented!();\n //~^ ERROR any use of this value will cause an error\n+//\n+const W: () = std::panic!(MSG);\n+//~^ ERROR any use of this value will cause an error\n \n const Z_CORE: () = core::panic!(\"cheese\");\n //~^ ERROR any use of this value will cause an error\n@@ -24,3 +29,6 @@ const Y_CORE: () = core::unreachable!();\n \n const X_CORE: () = core::unimplemented!();\n //~^ ERROR any use of this value will cause an error\n+\n+const W_CORE: () = core::panic!(MSG);\n+//~^ ERROR any use of this value will cause an error"}, {"sha": "c2711952d58373f0b8329516aa83d55bad75cdd7", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/0a06d7344b5e83c304b926d03452f4c95d2c89dc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a06d7344b5e83c304b926d03452f4c95d2c89dc/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=0a06d7344b5e83c304b926d03452f4c95d2c89dc", "patch": "@@ -1,83 +1,103 @@\n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:4:15\n+  --> $DIR/const_panic.rs:6:15\n    |\n LL | const Z: () = std::panic!(\"cheese\");\n    | --------------^^^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:4:15\n+   |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:6:15\n    |\n    = note: `#[deny(const_err)]` on by default\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:7:16\n+  --> $DIR/const_panic.rs:9:16\n    |\n LL | const Z2: () = std::panic!();\n    | ---------------^^^^^^^^^^^^^-\n    |                |\n-   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:7:16\n+   |                the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:9:16\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:10:15\n+  --> $DIR/const_panic.rs:12:15\n    |\n LL | const Y: () = std::unreachable!();\n    | --------------^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:10:15\n+   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:12:15\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:13:15\n+  --> $DIR/const_panic.rs:15:15\n    |\n LL | const X: () = std::unimplemented!();\n    | --------------^^^^^^^^^^^^^^^^^^^^^-\n    |               |\n-   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:13:15\n+   |               the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:15:15\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:16:20\n+  --> $DIR/const_panic.rs:18:15\n+   |\n+LL | const W: () = std::panic!(MSG);\n+   | --------------^^^^^^^^^^^^^^^^-\n+   |               |\n+   |               the evaluated program panicked at 'hello', $DIR/const_panic.rs:18:15\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:21:20\n    |\n LL | const Z_CORE: () = core::panic!(\"cheese\");\n    | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:16:20\n+   |                    the evaluated program panicked at 'cheese', $DIR/const_panic.rs:21:20\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:19:21\n+  --> $DIR/const_panic.rs:24:21\n    |\n LL | const Z2_CORE: () = core::panic!();\n    | --------------------^^^^^^^^^^^^^^-\n    |                     |\n-   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:19:21\n+   |                     the evaluated program panicked at 'explicit panic', $DIR/const_panic.rs:24:21\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:22:20\n+  --> $DIR/const_panic.rs:27:20\n    |\n LL | const Y_CORE: () = core::unreachable!();\n    | -------------------^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:22:20\n+   |                    the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:27:20\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: any use of this value will cause an error\n-  --> $DIR/const_panic.rs:25:20\n+  --> $DIR/const_panic.rs:30:20\n    |\n LL | const X_CORE: () = core::unimplemented!();\n    | -------------------^^^^^^^^^^^^^^^^^^^^^^-\n    |                    |\n-   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:25:20\n+   |                    the evaluated program panicked at 'not implemented', $DIR/const_panic.rs:30:20\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:33:20\n+   |\n+LL | const W_CORE: () = core::panic!(MSG);\n+   | -------------------^^^^^^^^^^^^^^^^^-\n+   |                    |\n+   |                    the evaluated program panicked at 'hello', $DIR/const_panic.rs:33:20\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n "}]}