{"sha": "50936397cc4e34712b18cd337facef527fa20b48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwOTM2Mzk3Y2M0ZTM0NzEyYjE4Y2QzMzdmYWNlZjUyN2ZhMjBiNDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-03T09:55:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-03T09:55:37Z"}, "message": "Merge #9105\n\n9105: internal: calculate pattern adjustments r=flodiebold a=iDawer\n\nThis extends `InferenceResult` with `pub pat_adjustments: FxHashMap<PatId, Vec<Ty>>`.\r\n\r\nFixes #9095 \r\n\n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>", "tree": {"sha": "709dac4e04b492c16829e299bbaf6f2377f0f3a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/709dac4e04b492c16829e299bbaf6f2377f0f3a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50936397cc4e34712b18cd337facef527fa20b48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJguKcZCRBK7hj4Ov3rIwAA2qgIAE/EetlCZtd/cMe/vQ1N2na7\nf5L/5bR/8c38fqZ85rYWpBvOE3pHGtw7+QFJJ1KKqe0jm6sMUMMXURFTvs0zCxAP\nWNiiU4jENrbAwcABx3ZDlDol66Ykw2p3nWSg28onJcHRxzQCyhzB7ECA6GUTaKpw\nBLkajGdFZ9IU32TsLWIB4u2pswOXnEU6f49+POw+GGoxGoYCkRo1ESHivQ96nMZQ\nGQekJgjW8ZgiPqfE/q6BgmAEOmfKVXnWLXEobzNJeSUnVcVCWsru0sjnyjkImkZb\n6sXFvaiempbPYnv6l2k0C9nVImZfaHzVdWbTXTSRQ++gKD1ZtmS0yBFE3z1BUp0=\n=jUHS\n-----END PGP SIGNATURE-----\n", "payload": "tree 709dac4e04b492c16829e299bbaf6f2377f0f3a0\nparent e8e14e1b13b76aaa643bc3beffb9c52bc5228d24\nparent 0a8c30a96fe09047da07a8e2980baa47a334a3d7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1622714137 +0000\ncommitter GitHub <noreply@github.com> 1622714137 +0000\n\nMerge #9105\n\n9105: internal: calculate pattern adjustments r=flodiebold a=iDawer\n\nThis extends `InferenceResult` with `pub pat_adjustments: FxHashMap<PatId, Vec<Ty>>`.\r\n\r\nFixes #9095 \r\n\n\nCo-authored-by: Dawer <7803845+iDawer@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50936397cc4e34712b18cd337facef527fa20b48", "html_url": "https://github.com/rust-lang/rust/commit/50936397cc4e34712b18cd337facef527fa20b48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50936397cc4e34712b18cd337facef527fa20b48/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8e14e1b13b76aaa643bc3beffb9c52bc5228d24", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8e14e1b13b76aaa643bc3beffb9c52bc5228d24", "html_url": "https://github.com/rust-lang/rust/commit/e8e14e1b13b76aaa643bc3beffb9c52bc5228d24"}, {"sha": "0a8c30a96fe09047da07a8e2980baa47a334a3d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a8c30a96fe09047da07a8e2980baa47a334a3d7", "html_url": "https://github.com/rust-lang/rust/commit/0a8c30a96fe09047da07a8e2980baa47a334a3d7"}], "stats": {"total": 65, "additions": 50, "deletions": 15}, "files": [{"sha": "a2a4d61db5fbb4f43fd2363b3373dec4eafcea99", "filename": "crates/hir_ty/src/diagnostics/expr.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/50936397cc4e34712b18cd337facef527fa20b48/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50936397cc4e34712b18cd337facef527fa20b48/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fexpr.rs?ref=50936397cc4e34712b18cd337facef527fa20b48", "patch": "@@ -357,17 +357,20 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             infer: &infer,\n             db,\n             pattern_arena: &pattern_arena,\n-            eprint_panic_context: &|| {\n+            panic_context: &|| {\n                 use syntax::AstNode;\n-                if let Ok(scrutinee_sptr) = source_map.expr_syntax(match_expr) {\n-                    let root = scrutinee_sptr.file_syntax(db.upcast());\n-                    if let Some(match_ast) = scrutinee_sptr.value.to_node(&root).syntax().parent() {\n-                        eprintln!(\n-                            \"Match checking is about to panic on this expression:\\n{}\",\n-                            match_ast.to_string(),\n-                        );\n-                    }\n-                }\n+                let match_expr_text = source_map\n+                    .expr_syntax(match_expr)\n+                    .ok()\n+                    .and_then(|scrutinee_sptr| {\n+                        let root = scrutinee_sptr.file_syntax(db.upcast());\n+                        scrutinee_sptr.value.to_node(&root).syntax().parent()\n+                    })\n+                    .map(|node| node.to_string());\n+                format!(\n+                    \"expression:\\n{}\",\n+                    match_expr_text.as_deref().unwrap_or(\"<synthesized expr>\")\n+                )\n             },\n         };\n         let report = compute_match_usefulness(&cx, &m_arms);"}, {"sha": "c8e1b23deeec40fb7bc78d70a052ef13282492dd", "filename": "crates/hir_ty/src/diagnostics/match_check.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/50936397cc4e34712b18cd337facef527fa20b48/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50936397cc4e34712b18cd337facef527fa20b48/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check.rs?ref=50936397cc4e34712b18cd337facef527fa20b48", "patch": "@@ -100,10 +100,19 @@ impl<'a> PatCtxt<'a> {\n     }\n \n     pub(crate) fn lower_pattern(&mut self, pat: hir_def::expr::PatId) -> Pat {\n-        // FIXME: implement pattern adjustments (implicit pattern dereference; \"RFC 2005-match-ergonomics\")\n+        // XXX(iDawer): Collecting pattern adjustments feels imprecise to me.\n+        // When lowering of & and box patterns are implemented this should be tested\n+        // in a manner of `match_ergonomics_issue_9095` test.\n+        // Pattern adjustment is part of RFC 2005-match-ergonomics.\n         // More info https://github.com/rust-lang/rust/issues/42640#issuecomment-313535089\n         let unadjusted_pat = self.lower_pattern_unadjusted(pat);\n-        unadjusted_pat\n+        self.infer.pat_adjustments.get(&pat).map(|it| &**it).unwrap_or_default().iter().rev().fold(\n+            unadjusted_pat,\n+            |subpattern, ref_ty| Pat {\n+                ty: ref_ty.clone(),\n+                kind: Box::new(PatKind::Deref { subpattern }),\n+            },\n+        )\n     }\n \n     fn lower_pattern_unadjusted(&mut self, pat: hir_def::expr::PatId) -> Pat {\n@@ -1236,6 +1245,21 @@ fn main(f: Foo) {\n         );\n     }\n \n+    #[test]\n+    fn match_ergonomics_issue_9095() {\n+        check_diagnostics(\n+            r#\"\n+enum Foo<T> { A(T) }\n+fn main() {\n+    match &Foo::A(true) {\n+        _ => {}\n+        Foo::A(_) => {}\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     mod false_negatives {\n         //! The implementation of match checking here is a work in progress. As we roll this out, we\n         //! prefer false negatives to false positives (ideally there would be no false positives). This"}, {"sha": "bd76a606cb120dbb03122c7ee8d6212cfe2448e4", "filename": "crates/hir_ty/src/diagnostics/match_check/usefulness.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/50936397cc4e34712b18cd337facef527fa20b48/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50936397cc4e34712b18cd337facef527fa20b48/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdiagnostics%2Fmatch_check%2Fusefulness.rs?ref=50936397cc4e34712b18cd337facef527fa20b48", "patch": "@@ -295,7 +295,7 @@ pub(crate) struct MatchCheckCtx<'a> {\n     pub(crate) db: &'a dyn HirDatabase,\n     /// Lowered patterns from arms plus generated by the check.\n     pub(crate) pattern_arena: &'a RefCell<PatternArena>,\n-    pub(crate) eprint_panic_context: &'a dyn Fn(),\n+    pub(crate) panic_context: &'a dyn Fn() -> String,\n }\n \n impl<'a> MatchCheckCtx<'a> {\n@@ -331,8 +331,7 @@ impl<'a> MatchCheckCtx<'a> {\n \n     #[track_caller]\n     pub(super) fn bug(&self, info: &str) -> ! {\n-        (self.eprint_panic_context)();\n-        panic!(\"bug: {}\", info);\n+        panic!(\"bug: {}\\n{}\", info, (self.panic_context)());\n     }\n }\n "}, {"sha": "0e9f777dab07b1fda173ad45e63055b48db8fa97", "filename": "crates/hir_ty/src/infer.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50936397cc4e34712b18cd337facef527fa20b48/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50936397cc4e34712b18cd337facef527fa20b48/crates%2Fhir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer.rs?ref=50936397cc4e34712b18cd337facef527fa20b48", "patch": "@@ -150,6 +150,8 @@ pub struct InferenceResult {\n     type_mismatches: FxHashMap<ExprOrPatId, TypeMismatch>,\n     /// Interned Unknown to return references to.\n     standard_types: InternedStandardTypes,\n+    /// Stores the types which were implicitly dereferenced in pattern binding modes.\n+    pub pat_adjustments: FxHashMap<PatId, Vec<Ty>>,\n }\n \n impl InferenceResult {"}, {"sha": "25dff7e49d41a4dc74a04ddbea532fd9d74a45eb", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/50936397cc4e34712b18cd337facef527fa20b48/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50936397cc4e34712b18cd337facef527fa20b48/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=50936397cc4e34712b18cd337facef527fa20b48", "patch": "@@ -101,14 +101,21 @@ impl<'a> InferenceContext<'a> {\n         let mut expected = self.resolve_ty_shallow(expected);\n \n         if is_non_ref_pat(&body, pat) {\n+            let mut pat_adjustments = Vec::new();\n             while let Some((inner, _lifetime, mutability)) = expected.as_reference() {\n+                pat_adjustments.push(expected.clone());\n                 expected = self.resolve_ty_shallow(inner);\n                 default_bm = match default_bm {\n                     BindingMode::Move => BindingMode::Ref(mutability),\n                     BindingMode::Ref(Mutability::Not) => BindingMode::Ref(Mutability::Not),\n                     BindingMode::Ref(Mutability::Mut) => BindingMode::Ref(mutability),\n                 }\n             }\n+\n+            if !pat_adjustments.is_empty() {\n+                pat_adjustments.shrink_to_fit();\n+                self.result.pat_adjustments.insert(pat, pat_adjustments);\n+            }\n         } else if let Pat::Ref { .. } = &body[pat] {\n             cov_mark::hit!(match_ergonomics_ref);\n             // When you encounter a `&pat` pattern, reset to Move."}]}