{"sha": "c894a3e19b0e658622a03a7d0539a78a433b42ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4OTRhM2UxOWIwZTY1ODYyMmEwM2E3ZDA1MzlhNzhhNDMzYjQyYWU=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-03-31T13:21:14Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-04-02T07:03:30Z"}, "message": "Fix prettier error", "tree": {"sha": "687f625980861712afb024aec8af4718c1c900a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/687f625980861712afb024aec8af4718c1c900a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c894a3e19b0e658622a03a7d0539a78a433b42ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c894a3e19b0e658622a03a7d0539a78a433b42ae", "html_url": "https://github.com/rust-lang/rust/commit/c894a3e19b0e658622a03a7d0539a78a433b42ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c894a3e19b0e658622a03a7d0539a78a433b42ae/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6971c7f1185fb7c1c0ce5f19867b999de71b5937", "url": "https://api.github.com/repos/rust-lang/rust/commits/6971c7f1185fb7c1c0ce5f19867b999de71b5937", "html_url": "https://github.com/rust-lang/rust/commit/6971c7f1185fb7c1c0ce5f19867b999de71b5937"}], "stats": {"total": 53, "additions": 31, "deletions": 22}, "files": [{"sha": "037f1e3020295ceb6e4cdd04821e9e9ce6ec23bf", "filename": "editors/code/src/commands/cargo_watch.ts", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c894a3e19b0e658622a03a7d0539a78a433b42ae/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c894a3e19b0e658622a03a7d0539a78a433b42ae/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts?ref=c894a3e19b0e658622a03a7d0539a78a433b42ae", "patch": "@@ -2,7 +2,7 @@ import * as child_process from 'child_process';\n import * as path from 'path';\n import * as timers from 'timers';\n import * as vscode from 'vscode';\n-import {StatusDisplay} from './watch_status';\n+import { StatusDisplay } from './watch_status';\n \n export class CargoWatchProvider {\n     private diagnosticCollection?: vscode.DiagnosticCollection;\n@@ -12,19 +12,22 @@ export class CargoWatchProvider {\n \n     public activate(subscriptions: vscode.Disposable[]) {\n         subscriptions.push(this);\n-        this.diagnosticCollection = vscode.languages.createDiagnosticCollection('rustc');\n+        this.diagnosticCollection = vscode.languages.createDiagnosticCollection(\n+            'rustc'\n+        );\n \n         this.statusDisplay = new StatusDisplay(subscriptions);\n \n-        // Start the cargo watch with json message \n-        this.cargoProcess = child_process.spawn('cargo',\n-            ['watch', '-x', '\\\"check --message-format json\\\"'],\n+        // Start the cargo watch with json message\n+        this.cargoProcess = child_process.spawn(\n+            'cargo',\n+            ['watch', '-x', '\"check --message-format json\"'],\n             {\n-                // stdio: ['ignore', 'pipe', 'ignore'], \n+                // stdio: ['ignore', 'pipe', 'ignore'],\n                 shell: true,\n-                cwd: vscode.workspace.rootPath,\n-            });\n-\n+                cwd: vscode.workspace.rootPath\n+            }\n+        );\n \n         this.cargoProcess.stdout.on('data', (s: string) => {\n             this.processOutput(s);\n@@ -109,7 +112,9 @@ export class CargoWatchProvider {\n \n             const fileUrl = vscode.Uri.file(fileName!);\n \n-            const diagnostics: vscode.Diagnostic[] = [...(this.diagnosticCollection!.get(fileUrl) || [])];\n+            const diagnostics: vscode.Diagnostic[] = [\n+                ...(this.diagnosticCollection!.get(fileUrl) || [])\n+            ];\n             diagnostics.push(diagnostic);\n \n             this.diagnosticCollection!.set(fileUrl, diagnostics);\n@@ -129,5 +134,4 @@ export class CargoWatchProvider {\n             eolIndex = this.outBuffer.indexOf('\\n');\n         }\n     }\n-\n }"}, {"sha": "7bba6f9cb25b14eda933848e27d82137d4b9eadb", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c894a3e19b0e658622a03a7d0539a78a433b42ae/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c894a3e19b0e658622a03a7d0539a78a433b42ae/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=c894a3e19b0e658622a03a7d0539a78a433b42ae", "patch": "@@ -134,8 +134,9 @@ export async function handleSingle(runnable: Runnable) {\n  * provide inline diagnostics; the user is met with a series of dialog boxes\n  * that, when accepted, allow us to `cargo install cargo-watch` and then run it.\n  */\n-export async function interactivelyStartCargoWatch(context: vscode.ExtensionContext) {\n-\n+export async function interactivelyStartCargoWatch(\n+    context: vscode.ExtensionContext\n+) {\n     if (Server.config.enableCargoWatchOnStartup === 'disabled') {\n         return;\n     }\n@@ -195,7 +196,6 @@ export async function interactivelyStartCargoWatch(context: vscode.ExtensionCont\n         }\n     }\n \n-\n     const validater = new CargoWatchProvider();\n-    validater.activate(context.subscriptions);    \n+    validater.activate(context.subscriptions);\n }"}, {"sha": "1b0611ce36a5194661dfbb8e89dbf49142a37331", "filename": "editors/code/src/commands/watch_status.ts", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c894a3e19b0e658622a03a7d0539a78a433b42ae/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c894a3e19b0e658622a03a7d0539a78a433b42ae/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts?ref=c894a3e19b0e658622a03a7d0539a78a433b42ae", "patch": "@@ -9,15 +9,20 @@ export class StatusDisplay {\n     private timer?: NodeJS.Timeout;\n \n     constructor(subscriptions: vscode.Disposable[]) {\n-        this.statusBarItem = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left, 10);\n+        this.statusBarItem = vscode.window.createStatusBarItem(\n+            vscode.StatusBarAlignment.Left,\n+            10\n+        );\n         subscriptions.push(this.statusBarItem);\n         this.statusBarItem.hide();\n     }\n \n     public show() {\n-        this.timer = this.timer || setInterval(() => {\n-            this.statusBarItem!.text = 'cargo check ' + this.frame();\n-        }, 300);\n+        this.timer =\n+            this.timer ||\n+            setInterval(() => {\n+                this.statusBarItem!.text = 'cargo check ' + this.frame();\n+            }, 300);\n \n         this.statusBarItem!.show();\n     }\n@@ -32,6 +37,6 @@ export class StatusDisplay {\n     }\n \n     private frame() {\n-        return spinnerFrames[this.i = ++this.i % spinnerFrames.length];\n+        return spinnerFrames[(this.i = ++this.i % spinnerFrames.length)];\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "ef83c0b8b21ba6b1cadf922792eb1ab6c27ff787", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c894a3e19b0e658622a03a7d0539a78a433b42ae/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/c894a3e19b0e658622a03a7d0539a78a433b42ae/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=c894a3e19b0e658622a03a7d0539a78a433b42ae", "patch": "@@ -2,7 +2,7 @@ import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import * as commands from './commands';\n-import { interactivelyStartCargoWatch} from './commands/runnables';\n+import { interactivelyStartCargoWatch } from './commands/runnables';\n import { SyntaxTreeContentProvider } from './commands/syntaxTree';\n import * as events from './events';\n import * as notifications from './notifications';"}]}