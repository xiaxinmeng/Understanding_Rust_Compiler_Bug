{"sha": "bc704e127de2b9ffce384b63812dae6b1d268024", "node_id": "C_kwDOAAsO6NoAKGJjNzA0ZTEyN2RlMmI5ZmZjZTM4NGI2MzgxMmRhZTZiMWQyNjgwMjQ", "commit": {"author": {"name": "Jonas Platte", "email": "jplatte@matrix.org", "date": "2023-04-05T16:48:21Z"}, "committer": {"name": "Jonas Platte", "email": "jplatte@matrix.org", "date": "2023-04-05T16:48:21Z"}, "message": "Address another round of review comments", "tree": {"sha": "bc0dae1f20d3e9e19699b94be096f5cba77f43fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bc0dae1f20d3e9e19699b94be096f5cba77f43fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc704e127de2b9ffce384b63812dae6b1d268024", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niIkEABYIADEWIQSXh9PzuU+wqFLlTaCqp6YfaWw+DAUCZC2mVRMcanBsYXR0ZUBt\nYXRyaXgub3JnAAoJEKqnph9pbD4MbSEA/ihrs9nL+lfTwONxQUeEwukfWglYIh3J\nvPCaIPL9VahXAP9roceLzQHdnkqNJoL6h16iI2y1EX1e+rnE/FNvrnloBg==\n=vC7u\n-----END PGP SIGNATURE-----", "payload": "tree bc0dae1f20d3e9e19699b94be096f5cba77f43fc\nparent d01a38ce3f10158f8ecb2f15278c0b0d711fcf27\nauthor Jonas Platte <jplatte@matrix.org> 1680713301 +0200\ncommitter Jonas Platte <jplatte@matrix.org> 1680713301 +0200\n\nAddress another round of review comments\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc704e127de2b9ffce384b63812dae6b1d268024", "html_url": "https://github.com/rust-lang/rust/commit/bc704e127de2b9ffce384b63812dae6b1d268024", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc704e127de2b9ffce384b63812dae6b1d268024/comments", "author": {"login": "jplatte", "id": 951129, "node_id": "MDQ6VXNlcjk1MTEyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/951129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jplatte", "html_url": "https://github.com/jplatte", "followers_url": "https://api.github.com/users/jplatte/followers", "following_url": "https://api.github.com/users/jplatte/following{/other_user}", "gists_url": "https://api.github.com/users/jplatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/jplatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jplatte/subscriptions", "organizations_url": "https://api.github.com/users/jplatte/orgs", "repos_url": "https://api.github.com/users/jplatte/repos", "events_url": "https://api.github.com/users/jplatte/events{/privacy}", "received_events_url": "https://api.github.com/users/jplatte/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jplatte", "id": 951129, "node_id": "MDQ6VXNlcjk1MTEyOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/951129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jplatte", "html_url": "https://github.com/jplatte", "followers_url": "https://api.github.com/users/jplatte/followers", "following_url": "https://api.github.com/users/jplatte/following{/other_user}", "gists_url": "https://api.github.com/users/jplatte/gists{/gist_id}", "starred_url": "https://api.github.com/users/jplatte/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jplatte/subscriptions", "organizations_url": "https://api.github.com/users/jplatte/orgs", "repos_url": "https://api.github.com/users/jplatte/repos", "events_url": "https://api.github.com/users/jplatte/events{/privacy}", "received_events_url": "https://api.github.com/users/jplatte/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d01a38ce3f10158f8ecb2f15278c0b0d711fcf27", "url": "https://api.github.com/repos/rust-lang/rust/commits/d01a38ce3f10158f8ecb2f15278c0b0d711fcf27", "html_url": "https://github.com/rust-lang/rust/commit/d01a38ce3f10158f8ecb2f15278c0b0d711fcf27"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "399f87c8f509dd7d177316e3b4b8f3f670b62825", "filename": "crates/ide-assists/src/handlers/convert_nested_function_to_closure.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bc704e127de2b9ffce384b63812dae6b1d268024/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_nested_function_to_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc704e127de2b9ffce384b63812dae6b1d268024/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_nested_function_to_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_nested_function_to_closure.rs?ref=bc704e127de2b9ffce384b63812dae6b1d268024", "patch": "@@ -41,35 +41,31 @@ pub(crate) fn convert_nested_function_to_closure(\n     let target = function.syntax().text_range();\n     let body = function.body()?;\n     let name = function.name()?;\n-    let params = function.param_list()?;\n-\n-    let params_text = params.syntax().text().to_string();\n-    let closure_params = params_text.strip_prefix(\"(\").and_then(|p| p.strip_suffix(\")\"))?;\n+    let param_list = function.param_list()?;\n \n     acc.add(\n         AssistId(\"convert_nested_function_to_closure\", AssistKind::RefactorRewrite),\n         \"Convert nested function to closure\",\n         target,\n         |edit| {\n-            let has_semicolon = has_semicolon(&function);\n+            let params = &param_list.syntax().text().to_string();\n+            let params = params.strip_prefix(\"(\").unwrap_or(params);\n+            let params = params.strip_suffix(\")\").unwrap_or(params);\n \n             let mut body = body.to_string();\n-            if !has_semicolon {\n+            if !has_semicolon(&function) {\n                 body.push(';');\n             }\n-            edit.replace(target, format!(\"let {} = |{}| {}\", name, closure_params, body));\n+            edit.replace(target, format!(\"let {name} = |{params}| {body}\"));\n         },\n     )\n }\n \n /// Returns whether the given function is nested within the body of another function.\n fn is_nested_function(function: &ast::Fn) -> bool {\n-    function\n-        .syntax()\n-        .ancestors()\n-        .skip(1)\n-        .find_map(ast::Item::cast)\n-        .map_or(false, |it| matches!(it, ast::Item::Fn(_)))\n+    function.syntax().ancestors().skip(1).find_map(ast::Item::cast).map_or(false, |it| {\n+        matches!(it, ast::Item::Fn(_) | ast::Item::Static(_) | ast::Item::Const(_))\n+    })\n }\n \n /// Returns whether the given nested function has generic parameters."}]}