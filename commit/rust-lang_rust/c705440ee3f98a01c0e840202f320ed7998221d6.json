{"sha": "c705440ee3f98a01c0e840202f320ed7998221d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MDU0NDBlZTNmOThhMDFjMGU4NDAyMDJmMzIwZWQ3OTk4MjIxZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-28T07:30:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-28T07:30:40Z"}, "message": "auto merge of #5155 : bstrie/rust/dedrop, r=pcwalton\n\nThis removes all but 6 uses of `drop {}` from the entire codebase. Removing any of the remaining uses causes various non-trivial bugs; I'll start reporting them once this gets merged.", "tree": {"sha": "deec96635e740426ae18513d8a0019715ced23fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deec96635e740426ae18513d8a0019715ced23fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c705440ee3f98a01c0e840202f320ed7998221d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c705440ee3f98a01c0e840202f320ed7998221d6", "html_url": "https://github.com/rust-lang/rust/commit/c705440ee3f98a01c0e840202f320ed7998221d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c705440ee3f98a01c0e840202f320ed7998221d6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcd4af169fc6ed45090625c354460a911177533b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd4af169fc6ed45090625c354460a911177533b", "html_url": "https://github.com/rust-lang/rust/commit/fcd4af169fc6ed45090625c354460a911177533b"}, {"sha": "43d43adf6bd2024b1ddc0e596d4bed88e1df82b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/43d43adf6bd2024b1ddc0e596d4bed88e1df82b1", "html_url": "https://github.com/rust-lang/rust/commit/43d43adf6bd2024b1ddc0e596d4bed88e1df82b1"}], "stats": {"total": 146, "additions": 117, "deletions": 29}, "files": [{"sha": "45d89b29a2e9a0797918d2eabae5b774b01e51fc", "filename": "src/libcore/io.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -474,7 +474,10 @@ impl<R:Reader,C> Reader for Wrapper<R, C> {\n \n pub struct FILERes {\n     f: *libc::FILE,\n-    drop {\n+}\n+\n+impl Drop for FILERes {\n+    fn finalize(&self) {\n         unsafe {\n             libc::fclose(self.f);\n         }\n@@ -683,7 +686,10 @@ impl Writer for fd_t {\n \n pub struct FdRes {\n     fd: fd_t,\n-    drop {\n+}\n+\n+impl Drop for FdRes {\n+    fn finalize(&self) {\n         unsafe {\n             libc::close(self.fd);\n         }"}, {"sha": "12ed0df007621cd01245b4ab18ea845148b10062", "filename": "src/libcore/option.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -450,7 +450,10 @@ fn test_unwrap_str() {\n fn test_unwrap_resource() {\n     struct R {\n        i: @mut int,\n-       drop { *(self.i) += 1; }\n+    }\n+\n+    impl ::ops::Drop for R {\n+       fn finalize(&self) { *(self.i) += 1; }\n     }\n \n     fn R(i: @mut int) -> R {"}, {"sha": "a0a29c6b5160193159a75024296f1d1ceda555e9", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -346,7 +346,10 @@ pub unsafe fn get_buffer<T>(p: *PacketHeader) -> ~Buffer<T> {\n struct BufferResource<T> {\n     buffer: ~Buffer<T>,\n \n-    drop {\n+}\n+\n+impl<T> ::ops::Drop for BufferResource<T> {\n+    fn finalize(&self) {\n         unsafe {\n             let b = move_it!(self.buffer);\n             //let p = ptr::addr_of(*b);"}, {"sha": "e4fab18966cadd0b71387cb16634850dcc0c2026", "filename": "src/libcore/private.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -126,7 +126,10 @@ struct ArcData<T> {\n \n struct ArcDestruct<T> {\n     mut data: *libc::c_void,\n-    drop {\n+}\n+\n+impl<T> Drop for ArcDestruct<T>{\n+    fn finalize(&self) {\n         unsafe {\n             if self.data.is_null() {\n                 return; // Happens when destructing an unwrapper's handle.\n@@ -178,7 +181,10 @@ pub unsafe fn unwrap_shared_mutable_state<T:Owned>(rc: SharedMutableState<T>)\n     struct DeathThroes<T> {\n         mut ptr:      Option<~ArcData<T>>,\n         mut response: Option<comm::ChanOne<bool>>,\n-        drop {\n+    }\n+\n+    impl<T> Drop for DeathThroes<T>{\n+        fn finalize(&self) {\n             unsafe {\n                 let response = option::swap_unwrap(&mut self.response);\n                 // In case we get killed early, we need to tell the person who\n@@ -311,7 +317,10 @@ type rust_little_lock = *libc::c_void;\n \n struct LittleLock {\n     l: rust_little_lock,\n-    drop {\n+}\n+\n+impl Drop for LittleLock {\n+    fn finalize(&self) {\n         unsafe {\n             rustrt::rust_destroy_little_lock(self.l);\n         }"}, {"sha": "15362f89e3fb63f176836597b42fe7fcc455861e", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -365,7 +365,10 @@ impl Rng {\n \n struct RandRes {\n     rng: *rust_rng,\n-    drop {\n+}\n+\n+impl Drop for RandRes {\n+    fn finalize(&self) {\n         unsafe {\n             rustrt::rand_free(self.rng);\n         }"}, {"sha": "aa1e473e3bf8cdfb3c4161cd6e6bf3f2c2493229", "filename": "src/libcore/run.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -248,7 +248,10 @@ pub fn start_program(prog: &str, args: &[~str]) -> Program {\n     }\n     struct ProgRes {\n         r: ProgRepr,\n-        drop {\n+    }\n+\n+    impl Drop for ProgRes {\n+        fn finalize(&self) {\n             unsafe {\n                 // FIXME #4943: This is bad.\n                 destroy_repr(cast::transmute(&self.r));"}, {"sha": "bf7209f9fc3fc9ef4594704a69d744961b854a98", "filename": "src/libcore/task/spawn.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fspawn.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -308,8 +308,11 @@ struct TCB {\n     mut ancestors: AncestorList,\n     is_main:       bool,\n     notifier:      Option<AutoNotify>,\n+}\n+\n+impl Drop for TCB {\n     // Runs on task exit.\n-    drop {\n+    fn finalize(&self) {\n         unsafe {\n             // If we are failing, the whole taskgroup needs to die.\n             if rt::rust_task_is_unwinding(self.me) {\n@@ -353,7 +356,10 @@ fn TCB(me: *rust_task, tasks: TaskGroupArc, ancestors: AncestorList,\n struct AutoNotify {\n     notify_chan: Chan<TaskResult>,\n     mut failed:  bool,\n-    drop {\n+}\n+\n+impl Drop for AutoNotify {\n+    fn finalize(&self) {\n         let result = if self.failed { Failure } else { Success };\n         self.notify_chan.send(result);\n     }"}, {"sha": "522cb2d2783cf213d64e6a37cd9e479aece28250", "filename": "src/libcore/util.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibcore%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Futil.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -66,7 +66,10 @@ pub fn replace<T>(dest: &mut T, src: T) -> T {\n /// A non-copyable dummy type.\n pub struct NonCopyable {\n     i: (),\n-    drop { }\n+}\n+\n+impl Drop for NonCopyable {\n+    fn finalize(&self) { }\n }\n \n pub fn NonCopyable() -> NonCopyable { NonCopyable { i: () } }"}, {"sha": "78528fa053ae05fbb6a6a04fa37cd726f7e42df8", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -1458,7 +1458,10 @@ pub fn struct_tys(struct_ty: TypeRef) -> ~[TypeRef] {\n \n pub struct target_data_res {\n     TD: TargetDataRef,\n-    drop {\n+}\n+\n+impl Drop for target_data_res {\n+    fn finalize(&self) {\n         unsafe {\n             llvm::LLVMDisposeTargetData(self.TD);\n         }\n@@ -1492,7 +1495,10 @@ pub fn mk_target_data(string_rep: ~str) -> TargetData {\n \n pub struct pass_manager_res {\n     PM: PassManagerRef,\n-    drop {\n+}\n+\n+impl Drop for pass_manager_res {\n+    fn finalize(&self) {\n         unsafe {\n             llvm::LLVMDisposePassManager(self.PM);\n         }\n@@ -1525,7 +1531,10 @@ pub fn mk_pass_manager() -> PassManager {\n \n pub struct object_file_res {\n     ObjectFile: ObjectFileRef,\n-    drop {\n+}\n+\n+impl Drop for object_file_res {\n+    fn finalize(&self) {\n         unsafe {\n             llvm::LLVMDisposeObjectFile(self.ObjectFile);\n         }\n@@ -1559,7 +1568,10 @@ pub fn mk_object_file(llmb: MemoryBufferRef) -> Option<ObjectFile> {\n \n pub struct section_iter_res {\n     SI: SectionIteratorRef,\n-    drop {\n+}\n+\n+impl Drop for section_iter_res {\n+    fn finalize(&self) {\n         unsafe {\n             llvm::LLVMDisposeSectionIterator(self.SI);\n         }"}, {"sha": "786f3c85d6bdfce5b82dbdb721cb255610afa0a8", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -90,7 +90,10 @@ use syntax::{ast, ast_util, codemap, ast_map};\n \n pub struct icx_popper {\n     ccx: @CrateContext,\n-    drop {\n+}\n+\n+impl Drop for icx_popper {\n+    fn finalize(&self) {\n       if self.ccx.sess.count_llvm_insns() {\n           self.ccx.stats.llvm_insn_ctxt.pop();\n       }"}, {"sha": "c45278ee454b99048b723721f4ca26fff59f316e", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -141,7 +141,10 @@ pub struct Stats {\n \n pub struct BuilderRef_res {\n     B: BuilderRef,\n-    drop {\n+}\n+\n+impl Drop for BuilderRef_res {\n+    fn finalize(&self) {\n         unsafe {\n             llvm::LLVMDisposeBuilder(self.B);\n         }"}, {"sha": "56ad56c3ae690e382225b0eaf3db23cc3a3275a6", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -336,7 +336,10 @@ pub fn monitor(+f: fn~(diagnostic::Emitter)) {\n \n         struct finally {\n             ch: SharedChan<monitor_msg>,\n-            drop { self.ch.send(done); }\n+        }\n+\n+        impl Drop for finally {\n+            fn finalize(&self) { self.ch.send(done); }\n         }\n \n         let _finally = finally { ch: ch };"}, {"sha": "a83447432a006388f6fc210e3dd22268714d51fe", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -32,7 +32,10 @@ pub fn indent<R>(op: fn() -> R) -> R {\n \n pub struct _indenter {\n     _i: (),\n-    drop { debug!(\"<<\"); }\n+}\n+\n+impl Drop for _indenter {\n+    fn finalize(&self) { debug!(\"<<\"); }\n }\n \n pub fn _indenter(_i: ()) -> _indenter {"}, {"sha": "b823be95ef7528102037d8b2a7fd8f15b778f797", "filename": "src/librustdoc/demo.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibrustdoc%2Fdemo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibrustdoc%2Fdemo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdemo.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -125,7 +125,10 @@ mod blade_runner {\n  */\n struct Bored {\n   bored: bool,\n-  drop { log(error, self.bored); }\n+}\n+\n+impl Drop for Bored {\n+  fn finalize(&self) { log(error, self.bored); }\n }\n \n /**"}, {"sha": "35b7ff5ad275caec1bf795a119878c6299538703", "filename": "src/libstd/task_pool.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibstd%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibstd%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask_pool.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -28,7 +28,10 @@ pub struct TaskPool<T> {\n     channels: ~[Chan<Msg<T>>],\n     mut next_index: uint,\n \n-    drop {\n+}\n+\n+impl<T> Drop for TaskPool<T> {\n+    fn finalize(&self) {\n         for self.channels.each |channel| {\n             channel.send(Quit);\n         }"}, {"sha": "9ad3e60ba844738dfc55b666e99914d96a6cc78a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -245,7 +245,11 @@ pub struct Parser {\n     /// Used to determine the path to externally loaded source files\n     mod_path_stack: @mut ~[~str],\n \n-    drop {} /* do not copy the parser; its state is tied to outside state */\n+}\n+\n+impl Drop for Parser {\n+    /* do not copy the parser; its state is tied to outside state */\n+    fn finalize(&self) {}\n }\n \n pub impl Parser {"}, {"sha": "826bd0db12964ab84b58eed9db7bc0feebe04097", "filename": "src/test/auxiliary/moves_based_on_type_lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmoves_based_on_type_lib.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -12,7 +12,10 @@\n \n pub struct S {\n     x: int,\n-    drop {\n+}\n+\n+impl Drop for S {\n+    fn finalize(&self) {\n         io::println(\"goodbye\");\n     }\n }"}, {"sha": "a06bc42d29aba242291f517ab614e113fb38e48d", "filename": "src/test/compile-fail/use-after-move-self-based-on-type.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move-self-based-on-type.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -1,6 +1,9 @@\n struct S {\n     x: int,\n-    drop {}\n+}\n+\n+impl Drop for S {\n+    fn finalize(&self) {}\n }\n \n impl S {"}, {"sha": "3890e24cdfe05cf0bed6415cd05f32186d8fce22", "filename": "src/test/run-fail/too-much-recursion-unwinding.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ftoo-much-recursion-unwinding.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -21,7 +21,10 @@ fn recurse() {\n \n struct r {\n     recursed: *mut bool,\n-    drop {\n+}\n+\n+impl Drop for r {\n+    fn finalize(&self) {\n         unsafe {\n             if !*(self.recursed) {\n                 *(self.recursed) = true;"}, {"sha": "d60e575bac4662e2205ddd789af3ca9b08c8569d", "filename": "src/test/run-fail/unwind-resource-fail.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -12,7 +12,10 @@\n \n struct r {\n     i: int,\n-    drop { fail!(~\"squirrel\") }\n+}\n+\n+impl Drop for r {\n+    fn finalize(&self) { fail!(~\"squirrel\") }\n }\n \n fn r(i: int) -> r { r { i: i } }"}, {"sha": "e276f2065f708ee69e91ede44d890b29c87e2650", "filename": "src/test/run-fail/unwind-resource-fail2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-resource-fail2.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -13,7 +13,10 @@\n \n struct r {\n     i: int,\n-    drop { fail!(~\"wombat\") }\n+}\n+\n+impl Drop for r {\n+    fn finalize(&self) { fail!(~\"wombat\") }\n }\n \n fn r(i: int) -> r { r { i: i } }"}, {"sha": "f66a3cc474c20ce47a8ddc266c18a36cd7b92968", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c705440ee3f98a01c0e840202f320ed7998221d6/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=c705440ee3f98a01c0e840202f320ed7998221d6", "patch": "@@ -54,7 +54,10 @@ struct AsciiArt\n \n     // This struct can be quite large so we'll disable copying: developers need\n     // to either pass these structs around via borrowed pointers or move them.\n-    drop {}\n+}\n+\n+impl Drop for AsciiArt {\n+    fn finalize(&self) {}\n }\n \n // It's common to define a constructor sort of function to create struct instances."}]}