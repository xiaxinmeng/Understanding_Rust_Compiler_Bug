{"sha": "8916accc104e2dd8277ec8fc19b1dfa77a64bf4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MTZhY2NjMTA0ZTJkZDgyNzdlYzhmYzE5YjFkZmE3N2E2NGJmNGU=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2016-12-03T20:39:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-12-03T20:39:51Z"}, "message": "Rollup merge of #37919 - nikomatsakis:incremental-36168, r=mw\n\nadd regression test for #36168\n\nFixes #36168\n\nr? @michaelwoerister", "tree": {"sha": "650cf565ecc2e0ddb690c0de3b2c10f47256af29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/650cf565ecc2e0ddb690c0de3b2c10f47256af29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8916accc104e2dd8277ec8fc19b1dfa77a64bf4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8916accc104e2dd8277ec8fc19b1dfa77a64bf4e", "html_url": "https://github.com/rust-lang/rust/commit/8916accc104e2dd8277ec8fc19b1dfa77a64bf4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8916accc104e2dd8277ec8fc19b1dfa77a64bf4e/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf99183f8706759f5dfeba11faea572de3f7eb0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf99183f8706759f5dfeba11faea572de3f7eb0a", "html_url": "https://github.com/rust-lang/rust/commit/bf99183f8706759f5dfeba11faea572de3f7eb0a"}, {"sha": "72fbf9f0fee1af2f918d3a9a4e377605ae158f2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/72fbf9f0fee1af2f918d3a9a4e377605ae158f2a", "html_url": "https://github.com/rust-lang/rust/commit/72fbf9f0fee1af2f918d3a9a4e377605ae158f2a"}], "stats": {"total": 112, "additions": 112, "deletions": 0}, "files": [{"sha": "adc2b23441ef817355c6af0d2ff05a4cb878c388", "filename": "src/test/incremental/add_private_fn_at_krate_root_cc/auxiliary/point.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/8916accc104e2dd8277ec8fc19b1dfa77a64bf4e/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fauxiliary%2Fpoint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8916accc104e2dd8277ec8fc19b1dfa77a64bf4e/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fauxiliary%2Fpoint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fauxiliary%2Fpoint.rs?ref=8916accc104e2dd8277ec8fc19b1dfa77a64bf4e", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Point {\n+    pub x: f32,\n+    pub y: f32,\n+}\n+\n+#[cfg(rpass2)]\n+fn unused_helper() {\n+}\n+\n+pub fn distance_squared(this: &Point) -> f32 {\n+    return this.x * this.x + this.y * this.y;\n+}\n+\n+impl Point {\n+    pub fn distance_from_origin(&self) -> f32 {\n+        distance_squared(self).sqrt()\n+    }\n+}"}, {"sha": "489427ba1c126202be6eafe31f9d379f7a99074a", "filename": "src/test/incremental/add_private_fn_at_krate_root_cc/struct_point.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/8916accc104e2dd8277ec8fc19b1dfa77a64bf4e/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8916accc104e2dd8277ec8fc19b1dfa77a64bf4e/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fadd_private_fn_at_krate_root_cc%2Fstruct_point.rs?ref=8916accc104e2dd8277ec8fc19b1dfa77a64bf4e", "patch": "@@ -0,0 +1,84 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test where we add a private item into the root of an external.\n+// crate. This should not cause anything we use to be invalidated.\n+// Regression test for #36168.\n+\n+// revisions:rpass1 rpass2\n+// compile-flags: -Z query-dep-graph\n+// aux-build:point.rs\n+\n+#![feature(rustc_attrs)]\n+#![feature(stmt_expr_attributes)]\n+#![allow(dead_code)]\n+\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_methods_in_same_impl\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_calls_free_fn\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_read_field\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_write_field\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module=\"struct_point-fn_make_struct\", cfg=\"rpass2\")]\n+\n+extern crate point;\n+\n+/// A fn item that calls (public) methods on `Point` from the same impl\n+mod fn_calls_methods_in_same_impl {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn check() {\n+        let x = Point { x: 2.0, y: 2.0 };\n+        x.distance_from_origin();\n+    }\n+}\n+\n+/// A fn item that calls (public) methods on `Point` from another impl\n+mod fn_calls_free_fn {\n+    use point::{self, Point};\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn check() {\n+        let x = Point { x: 2.0, y: 2.0 };\n+        point::distance_squared(&x);\n+    }\n+}\n+\n+/// A fn item that makes an instance of `Point` but does not invoke methods\n+mod fn_make_struct {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn make_origin() -> Point {\n+        Point { x: 2.0, y: 2.0 }\n+    }\n+}\n+\n+/// A fn item that reads fields from `Point` but does not invoke methods\n+mod fn_read_field {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn get_x(p: Point) -> f32 {\n+        p.x\n+    }\n+}\n+\n+/// A fn item that writes to a field of `Point` but does not invoke methods\n+mod fn_write_field {\n+    use point::Point;\n+\n+    #[rustc_clean(label=\"TypeckItemBody\", cfg=\"rpass2\")]\n+    pub fn inc_x(p: &mut Point) {\n+        p.x += 1.0;\n+    }\n+}\n+\n+fn main() {\n+}"}]}