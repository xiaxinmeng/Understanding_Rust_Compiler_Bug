{"sha": "29832b8c3db509dea8da9164e980ccac4bccf47d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ODMyYjhjM2RiNTA5ZGVhOGRhOTE2NGU5ODBjY2FjNGJjY2Y0N2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-16T16:07:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-16T16:07:53Z"}, "message": "Reduce visibility", "tree": {"sha": "b6d8cce0dee8988404d4ef0b7bb29a80129fd53e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6d8cce0dee8988404d4ef0b7bb29a80129fd53e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29832b8c3db509dea8da9164e980ccac4bccf47d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29832b8c3db509dea8da9164e980ccac4bccf47d", "html_url": "https://github.com/rust-lang/rust/commit/29832b8c3db509dea8da9164e980ccac4bccf47d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29832b8c3db509dea8da9164e980ccac4bccf47d/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff0312fa32715ce42f134fd9f049c4df5956d042", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff0312fa32715ce42f134fd9f049c4df5956d042", "html_url": "https://github.com/rust-lang/rust/commit/ff0312fa32715ce42f134fd9f049c4df5956d042"}], "stats": {"total": 55, "additions": 26, "deletions": 29}, "files": [{"sha": "90f5b1c254b7fd3a0b5c958be264e9f55c31e783", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29832b8c3db509dea8da9164e980ccac4bccf47d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29832b8c3db509dea8da9164e980ccac4bccf47d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=29832b8c3db509dea8da9164e980ccac4bccf47d", "patch": "@@ -43,7 +43,7 @@ use crate::{\n     completion::{\n         CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n     },\n-    display::FunctionSignature,\n+    display::function_signature::FunctionSignature,\n };\n \n pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext) {"}, {"sha": "e29b82017810a9fd6684bd1c00a96a45749c2849", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29832b8c3db509dea8da9164e980ccac4bccf47d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29832b8c3db509dea8da9164e980ccac4bccf47d/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=29832b8c3db509dea8da9164e980ccac4bccf47d", "patch": "@@ -11,7 +11,7 @@ use crate::{\n         completion_item::Builder, CompletionContext, CompletionItem, CompletionItemKind,\n         CompletionKind, Completions,\n     },\n-    display::{const_label, macro_label, type_label, FunctionSignature},\n+    display::{const_label, function_signature::FunctionSignature, macro_label, type_label},\n     CompletionScore, RootDatabase,\n };\n "}, {"sha": "b59d4bbdf5b12f80693ecefe0dc7f12c0476ad8b", "filename": "crates/ra_ide/src/display.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/29832b8c3db509dea8da9164e980ccac4bccf47d/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29832b8c3db509dea8da9164e980ccac4bccf47d/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay.rs?ref=29832b8c3db509dea8da9164e980ccac4bccf47d", "patch": "@@ -1,7 +1,7 @@\n //! This module contains utilities for turning SyntaxNodes and HIR types\n //! into types that may be used to render in a UI.\n \n-mod function_signature;\n+pub(crate) mod function_signature;\n mod navigation_target;\n mod structure;\n mod short_label;\n@@ -11,15 +11,14 @@ use ra_syntax::{\n     SyntaxKind::{ATTR, COMMENT},\n };\n \n-pub use function_signature::FunctionSignature;\n pub use navigation_target::NavigationTarget;\n pub use structure::{file_structure, StructureNode};\n \n pub(crate) use navigation_target::{ToNav, TryToNav};\n pub(crate) use short_label::ShortLabel;\n \n pub(crate) fn function_label(node: &ast::FnDef) -> String {\n-    FunctionSignature::from(node).to_string()\n+    function_signature::FunctionSignature::from(node).to_string()\n }\n \n pub(crate) fn const_label(node: &ast::ConstDef) -> String {"}, {"sha": "9b7220d1fe30a5935c9b4600c9ccfa4c2422ac4a", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/29832b8c3db509dea8da9164e980ccac4bccf47d/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29832b8c3db509dea8da9164e980ccac4bccf47d/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=29832b8c3db509dea8da9164e980ccac4bccf47d", "patch": "@@ -15,49 +15,48 @@ use stdx::{split_delim, SepBy};\n use crate::display::{generic_parameters, where_predicates};\n \n #[derive(Debug)]\n-pub enum CallableKind {\n+pub(crate) enum CallableKind {\n     Function,\n     StructConstructor,\n     VariantConstructor,\n-    Macro,\n }\n \n /// Contains information about a function signature\n #[derive(Debug)]\n-pub struct FunctionSignature {\n-    pub kind: CallableKind,\n+pub(crate) struct FunctionSignature {\n+    pub(crate) kind: CallableKind,\n     /// Optional visibility\n-    pub visibility: Option<String>,\n+    pub(crate) visibility: Option<String>,\n     /// Qualifiers like `async`, `unsafe`, ...\n-    pub qualifier: FunctionQualifier,\n+    pub(crate) qualifier: FunctionQualifier,\n     /// Name of the function\n-    pub name: Option<String>,\n+    pub(crate) name: Option<String>,\n     /// Documentation for the function\n-    pub doc: Option<Documentation>,\n+    pub(crate) doc: Option<Documentation>,\n     /// Generic parameters\n-    pub generic_parameters: Vec<String>,\n+    pub(crate) generic_parameters: Vec<String>,\n     /// Parameters of the function\n-    pub parameters: Vec<String>,\n+    pub(crate) parameters: Vec<String>,\n     /// Parameter names of the function\n-    pub parameter_names: Vec<String>,\n+    pub(crate) parameter_names: Vec<String>,\n     /// Parameter types of the function\n-    pub parameter_types: Vec<String>,\n+    pub(crate) parameter_types: Vec<String>,\n     /// Optional return type\n-    pub ret_type: Option<String>,\n+    pub(crate) ret_type: Option<String>,\n     /// Where predicates\n-    pub where_predicates: Vec<String>,\n+    pub(crate) where_predicates: Vec<String>,\n     /// Self param presence\n-    pub has_self_param: bool,\n+    pub(crate) has_self_param: bool,\n }\n \n #[derive(Debug, Default)]\n-pub struct FunctionQualifier {\n+pub(crate) struct FunctionQualifier {\n     // `async` and `const` are mutually exclusive. Do we need to enforcing it here?\n-    pub is_async: bool,\n-    pub is_const: bool,\n-    pub is_unsafe: bool,\n+    pub(crate) is_async: bool,\n+    pub(crate) is_const: bool,\n+    pub(crate) is_unsafe: bool,\n     /// The string `extern \"..\"`\n-    pub extern_abi: Option<String>,\n+    pub(crate) extern_abi: Option<String>,\n }\n \n impl FunctionSignature {\n@@ -277,7 +276,6 @@ impl Display for FunctionSignature {\n                 CallableKind::Function => write!(f, \"fn {}\", name)?,\n                 CallableKind::StructConstructor => write!(f, \"struct {}\", name)?,\n                 CallableKind::VariantConstructor => write!(f, \"{}\", name)?,\n-                CallableKind::Macro => write!(f, \"{}!\", name)?,\n             }\n         }\n "}, {"sha": "ae5695f613ff1121a09fdaea27f99cdb7e279564", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/29832b8c3db509dea8da9164e980ccac4bccf47d/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29832b8c3db509dea8da9164e980ccac4bccf47d/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=29832b8c3db509dea8da9164e980ccac4bccf47d", "patch": "@@ -5,10 +5,10 @@ use ra_syntax::{\n     ast::{self, ArgListOwner, AstNode, TypeAscriptionOwner},\n     match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, TextRange, T,\n };\n-\n-use crate::{FileId, FunctionSignature};\n use stdx::to_lower_snake_case;\n \n+use crate::{display::function_signature::FunctionSignature, FileId};\n+\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct InlayHintsConfig {\n     pub type_hints: bool,"}, {"sha": "6810c1c6afa7587a51eb1c6775f0261804eadb21", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29832b8c3db509dea8da9164e980ccac4bccf47d/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29832b8c3db509dea8da9164e980ccac4bccf47d/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=29832b8c3db509dea8da9164e980ccac4bccf47d", "patch": "@@ -65,7 +65,7 @@ pub use crate::{\n         CompletionConfig, CompletionItem, CompletionItemKind, CompletionScore, InsertTextFormat,\n     },\n     diagnostics::Severity,\n-    display::{file_structure, FunctionSignature, NavigationTarget, StructureNode},\n+    display::{file_structure, NavigationTarget, StructureNode},\n     expand_macro::ExpandedMacro,\n     folding_ranges::{Fold, FoldKind},\n     hover::{HoverAction, HoverConfig, HoverGotoTypeData, HoverResult},"}]}