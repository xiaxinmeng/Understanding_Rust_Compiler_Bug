{"sha": "8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYjBmMmQzYzVhODU1NjNiOThjNDg5NjExNmUzZDUzMTU0ZmZmOWM=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-02-20T09:19:48Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T13:41:32Z"}, "message": "Add tests for asm!", "tree": {"sha": "9e4ac5efac12844c17ec1a89ff05bcb539a0d6c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e4ac5efac12844c17ec1a89ff05bcb539a0d6c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "html_url": "https://github.com/rust-lang/rust/commit/8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abed45ff9fa3e68f2a32ca12e012f95b9153f4df", "url": "https://api.github.com/repos/rust-lang/rust/commits/abed45ff9fa3e68f2a32ca12e012f95b9153f4df", "html_url": "https://github.com/rust-lang/rust/commit/abed45ff9fa3e68f2a32ca12e012f95b9153f4df"}], "stats": {"total": 3529, "additions": 3489, "deletions": 40}, "files": [{"sha": "d4519ca7ffa033bdafcdce1e0b7916d3981b4e58", "filename": "src/test/assembly/asm/aarch64-modifiers.rs", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,144 @@\n+// assembly-output: emit-asm\n+// compile-flags: -O\n+// compile-flags: --target aarch64-unknown-linux-gnu\n+\n+#![feature(no_core, lang_items, rustc_attrs)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+impl Copy for i32 {}\n+\n+macro_rules! check {\n+    ($func:ident $reg:ident $code:literal) => {\n+        // -O and extern \"C\" guarantee that the selected register is always r0/s0/d0/q0\n+        #[no_mangle]\n+        pub unsafe extern \"C\" fn $func() -> i32 {\n+            // Hack to avoid function merging\n+            extern \"Rust\" {\n+                fn dont_merge(s: &str);\n+            }\n+            dont_merge(stringify!($func));\n+\n+            let y;\n+            asm!($code, out($reg) y);\n+            y\n+        }\n+    };\n+}\n+\n+// CHECK-LABEL: reg:\n+// CHECK: //APP\n+// CHECK: mov x0, x0\n+// CHECK: //NO_APP\n+check!(reg reg \"mov {0}, {0}\");\n+\n+// CHECK-LABEL: reg_w:\n+// CHECK: //APP\n+// CHECK: mov w0, w0\n+// CHECK: //NO_APP\n+check!(reg_w reg \"mov {0:w}, {0:w}\");\n+\n+// CHECK-LABEL: reg_x:\n+// CHECK: //APP\n+// CHECK: mov x0, x0\n+// CHECK: //NO_APP\n+check!(reg_x reg \"mov {0:x}, {0:x}\");\n+\n+// CHECK-LABEL: vreg:\n+// CHECK: //APP\n+// CHECK: add v0.4s, v0.4s, v0.4s\n+// CHECK: //NO_APP\n+check!(vreg vreg \"add {0}.4s, {0}.4s, {0}.4s\");\n+\n+// CHECK-LABEL: vreg_b:\n+// CHECK: //APP\n+// CHECK: ldr b0, [x0]\n+// CHECK: //NO_APP\n+check!(vreg_b vreg \"ldr {:b}, [x0]\");\n+\n+// CHECK-LABEL: vreg_h:\n+// CHECK: //APP\n+// CHECK: ldr h0, [x0]\n+// CHECK: //NO_APP\n+check!(vreg_h vreg \"ldr {:h}, [x0]\");\n+\n+// CHECK-LABEL: vreg_s:\n+// CHECK: //APP\n+// CHECK: ldr s0, [x0]\n+// CHECK: //NO_APP\n+check!(vreg_s vreg \"ldr {:s}, [x0]\");\n+\n+// CHECK-LABEL: vreg_d:\n+// CHECK: //APP\n+// CHECK: ldr d0, [x0]\n+// CHECK: //NO_APP\n+check!(vreg_d vreg \"ldr {:d}, [x0]\");\n+\n+// CHECK-LABEL: vreg_q:\n+// CHECK: //APP\n+// CHECK: ldr q0, [x0]\n+// CHECK: //NO_APP\n+check!(vreg_q vreg \"ldr {:q}, [x0]\");\n+\n+// CHECK-LABEL: vreg_v:\n+// CHECK: //APP\n+// CHECK: add v0.4s, v0.4s, v0.4s\n+// CHECK: //NO_APP\n+check!(vreg_v vreg \"add {0:v}.4s, {0:v}.4s, {0:v}.4s\");\n+\n+// CHECK-LABEL: vreg_low16:\n+// CHECK: //APP\n+// CHECK: add v0.4s, v0.4s, v0.4s\n+// CHECK: //NO_APP\n+check!(vreg_low16 vreg_low16 \"add {0}.4s, {0}.4s, {0}.4s\");\n+\n+// CHECK-LABEL: vreg_low16_b:\n+// CHECK: //APP\n+// CHECK: ldr b0, [x0]\n+// CHECK: //NO_APP\n+check!(vreg_low16_b vreg_low16 \"ldr {:b}, [x0]\");\n+\n+// CHECK-LABEL: vreg_low16_h:\n+// CHECK: //APP\n+// CHECK: ldr h0, [x0]\n+// CHECK: //NO_APP\n+check!(vreg_low16_h vreg_low16 \"ldr {:h}, [x0]\");\n+\n+// CHECK-LABEL: vreg_low16_s:\n+// CHECK: //APP\n+// CHECK: ldr s0, [x0]\n+// CHECK: //NO_APP\n+check!(vreg_low16_s vreg_low16 \"ldr {:s}, [x0]\");\n+\n+// CHECK-LABEL: vreg_low16_d:\n+// CHECK: //APP\n+// CHECK: ldr d0, [x0]\n+// CHECK: //NO_APP\n+check!(vreg_low16_d vreg_low16 \"ldr {:d}, [x0]\");\n+\n+// CHECK-LABEL: vreg_low16_q:\n+// CHECK: //APP\n+// CHECK: ldr q0, [x0]\n+// CHECK: //NO_APP\n+check!(vreg_low16_q vreg_low16 \"ldr {:q}, [x0]\");\n+\n+// CHECK-LABEL: vreg_low16_v:\n+// CHECK: //APP\n+// CHECK: add v0.4s, v0.4s, v0.4s\n+// CHECK: //NO_APP\n+check!(vreg_low16_v vreg_low16 \"add {0:v}.4s, {0:v}.4s, {0:v}.4s\");"}, {"sha": "8b763462e4a2ad9b28c0dcfa3d5025ed2d398854", "filename": "src/test/assembly/asm/aarch64-types.rs", "status": "added", "additions": 380, "deletions": 0, "changes": 380, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,380 @@\n+// assembly-output: emit-asm\n+// compile-flags: --target aarch64-unknown-linux-gnu\n+\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register, non_camel_case_types)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+type ptr = *mut u8;\n+\n+#[repr(simd)]\n+pub struct i8x8(i8, i8, i8, i8, i8, i8, i8, i8);\n+#[repr(simd)]\n+pub struct i16x4(i16, i16, i16, i16);\n+#[repr(simd)]\n+pub struct i32x2(i32, i32);\n+#[repr(simd)]\n+pub struct i64x1(i64);\n+#[repr(simd)]\n+pub struct f32x2(f32, f32);\n+#[repr(simd)]\n+pub struct f64x1(f64);\n+#[repr(simd)]\n+pub struct i8x16(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8);\n+#[repr(simd)]\n+pub struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n+#[repr(simd)]\n+pub struct i32x4(i32, i32, i32, i32);\n+#[repr(simd)]\n+pub struct i64x2(i64, i64);\n+#[repr(simd)]\n+pub struct f32x4(f32, f32, f32, f32);\n+#[repr(simd)]\n+pub struct f64x2(f64, f64);\n+\n+impl Copy for i8 {}\n+impl Copy for i16 {}\n+impl Copy for i32 {}\n+impl Copy for f32 {}\n+impl Copy for i64 {}\n+impl Copy for f64 {}\n+impl Copy for ptr {}\n+impl Copy for i8x8 {}\n+impl Copy for i16x4 {}\n+impl Copy for i32x2 {}\n+impl Copy for i64x1 {}\n+impl Copy for f32x2 {}\n+impl Copy for f64x1 {}\n+impl Copy for i8x16 {}\n+impl Copy for i16x8 {}\n+impl Copy for i32x4 {}\n+impl Copy for i64x2 {}\n+impl Copy for f32x4 {}\n+impl Copy for f64x2 {}\n+\n+extern \"C\" {\n+    fn extern_func();\n+    static extern_static: u8;\n+}\n+\n+// CHECK-LABEL: sym_fn:\n+// CHECK: //APP\n+// CHECK: bl extern_func\n+// CHECK: //NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_fn() {\n+    asm!(\"bl {}\", sym extern_func);\n+}\n+\n+// CHECK-LABEL: sym_static:\n+// CHECK: //APP\n+// CHECK: adr x0, extern_static\n+// CHECK: //NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_static() {\n+    asm!(\"adr x0, {}\", sym extern_static);\n+}\n+\n+macro_rules! check {\n+    ($func:ident $ty:ident $class:ident $mov:literal $modifier:literal) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            // Hack to avoid function merging\n+            extern \"Rust\" {\n+                fn dont_merge(s: &str);\n+            }\n+            dont_merge(stringify!($func));\n+\n+            let y;\n+            asm!(\n+                concat!($mov, \" {:\", $modifier, \"}, {:\", $modifier, \"}\"),\n+                out($class) y,\n+                in($class) x\n+            );\n+            y\n+        }\n+    };\n+}\n+\n+// CHECK-LABEL: reg_i8:\n+// CHECK: //APP\n+// CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(reg_i8 i8 reg \"mov\" \"\");\n+\n+// CHECK-LABEL: reg_i16:\n+// CHECK: //APP\n+// CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(reg_i16 i16 reg \"mov\" \"\");\n+\n+// CHECK-LABEL: reg_i32:\n+// CHECK: //APP\n+// CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(reg_i32 i32 reg \"mov\" \"\");\n+\n+// CHECK-LABEL: reg_f32:\n+// CHECK: //APP\n+// CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(reg_f32 f32 reg \"mov\" \"\");\n+\n+// CHECK-LABEL: reg_i64:\n+// CHECK: //APP\n+// CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(reg_i64 i64 reg \"mov\" \"\");\n+\n+// CHECK-LABEL: reg_f64:\n+// CHECK: //APP\n+// CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(reg_f64 f64 reg \"mov\" \"\");\n+\n+// CHECK-LABEL: reg_ptr:\n+// CHECK: //APP\n+// CHECK: mov x{{[0-9]+}}, x{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(reg_ptr ptr reg \"mov\" \"\");\n+\n+// CHECK-LABEL: vreg_i8:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_i8 i8 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_i16:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_i16 i16 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_i32:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_i32 i32 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_f32:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_f32 f32 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_i64:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_i64 i64 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_f64:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_f64 f64 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_ptr:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_ptr ptr vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_i8x8:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_i8x8 i8x8 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_i16x4:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_i16x4 i16x4 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_i32x2:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_i32x2 i32x2 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_i64x1:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_i64x1 i64x1 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_f32x2:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_f32x2 f32x2 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_f64x1:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_f64x1 f64x1 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_i8x16:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_i8x16 i8x16 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_i16x8:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_i16x8 i16x8 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_i32x4:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_i32x4 i32x4 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_i64x2:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_i64x2 i64x2 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_f32x4:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_f32x4 f32x4 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_f64x2:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_f64x2 f64x2 vreg \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_i8:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_i8 i8 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_i16:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_i16 i16 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_f32:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_f32 f32 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_i64:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_i64 i64 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_f64:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_f64 f64 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_ptr:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_ptr ptr vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_i8x8:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_i8x8 i8x8 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_i16x4:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_i16x4 i16x4 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_i32x2:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_i32x2 i32x2 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_i64x1:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_i64x1 i64x1 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_f32x2:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_f32x2 f32x2 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_f64x1:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_f64x1 f64x1 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_i8x16:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_i8x16 i8x16 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_i16x8:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_i16x8 i16x8 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_i32x4:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_i32x4 i32x4 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_i64x2:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_i64x2 i64x2 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_f32x4:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_f32x4 f32x4 vreg_low16 \"fmov\" \"s\");\n+\n+// CHECK-LABEL: vreg_low16_f64x2:\n+// CHECK: //APP\n+// CHECK: fmov s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: //NO_APP\n+check!(vreg_low16_f64x2 f64x2 vreg_low16 \"fmov\" \"s\");"}, {"sha": "cefab9c4a676f45df9245014792d1213dfb9f4d9", "filename": "src/test/assembly/asm/arm-modifiers.rs", "status": "added", "additions": 149, "deletions": 0, "changes": 149, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,149 @@\n+// assembly-output: emit-asm\n+// compile-flags: -O\n+// compile-flags: --target armv7-unknown-linux-gnueabihf\n+// compile-flags: -C target-feature=+neon\n+\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register, non_camel_case_types)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+#[repr(simd)]\n+pub struct f32x4(f32, f32, f32, f32);\n+\n+impl Copy for i32 {}\n+impl Copy for f32 {}\n+impl Copy for f64 {}\n+impl Copy for f32x4 {}\n+\n+macro_rules! check {\n+    ($func:ident $modifier:literal $reg:ident $ty:ident $mov:literal) => {\n+        // -O and extern \"C\" guarantee that the selected register is always r0/s0/d0/q0\n+        #[no_mangle]\n+        pub unsafe extern \"C\" fn $func() -> $ty {\n+            // Hack to avoid function merging\n+            extern \"Rust\" {\n+                fn dont_merge(s: &str);\n+            }\n+            dont_merge(stringify!($func));\n+\n+            let y;\n+            asm!(concat!($mov, \" {0:\", $modifier, \"}, {0:\", $modifier, \"}\"), out($reg) y);\n+            y\n+        }\n+    };\n+}\n+\n+// CHECK-LABEL: reg:\n+// CHECK: @APP\n+// CHECK: mov r0, r0\n+// CHECK: @NO_APP\n+check!(reg \"\" reg i32 \"mov\");\n+\n+// CHECK-LABEL: reg_thumb:\n+// CHECK: @APP\n+// CHECK: mov r0, r0\n+// CHECK: @NO_APP\n+check!(reg_thumb \"\" reg_thumb i32 \"mov\");\n+\n+// CHECK-LABEL: sreg:\n+// CHECK: @APP\n+// CHECK: vmov.f32 s0, s0\n+// CHECK: @NO_APP\n+check!(sreg \"\" sreg f32 \"vmov.f32\");\n+\n+// CHECK-LABEL: sreg_low16:\n+// CHECK: @APP\n+// CHECK: vmov.f32 s0, s0\n+// CHECK: @NO_APP\n+check!(sreg_low16 \"\" sreg_low16 f32 \"vmov.f32\");\n+\n+// CHECK-LABEL: dreg:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d0, d0\n+// CHECK: @NO_APP\n+check!(dreg \"\" dreg f64 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low16:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d0, d0\n+// CHECK: @NO_APP\n+check!(dreg_low16 \"\" dreg_low16 f64 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low8:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d0, d0\n+// CHECK: @NO_APP\n+check!(dreg_low8 \"\" dreg_low8 f64 \"vmov.f64\");\n+\n+// CHECK-LABEL: qreg:\n+// CHECK: @APP\n+// CHECK: vorr q0, q0, q0\n+// CHECK: @NO_APP\n+check!(qreg \"\" qreg f32x4 \"vmov\");\n+\n+// CHECK-LABEL: qreg_e:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d0, d0\n+// CHECK: @NO_APP\n+check!(qreg_e \"e\" qreg f32x4 \"vmov.f64\");\n+\n+// CHECK-LABEL: qreg_f:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d1, d1\n+// CHECK: @NO_APP\n+check!(qreg_f \"f\" qreg f32x4 \"vmov.f64\");\n+\n+// CHECK-LABEL: qreg_low8:\n+// CHECK: @APP\n+// CHECK: vorr q0, q0, q0\n+// CHECK: @NO_APP\n+check!(qreg_low8 \"\" qreg_low8 f32x4 \"vmov\");\n+\n+// CHECK-LABEL: qreg_low8_e:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d0, d0\n+// CHECK: @NO_APP\n+check!(qreg_low8_e \"e\" qreg_low8 f32x4 \"vmov.f64\");\n+\n+// CHECK-LABEL: qreg_low8_f:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d1, d1\n+// CHECK: @NO_APP\n+check!(qreg_low8_f \"f\" qreg_low8 f32x4 \"vmov.f64\");\n+\n+// CHECK-LABEL: qreg_low4:\n+// CHECK: @APP\n+// CHECK: vorr q0, q0, q0\n+// CHECK: @NO_APP\n+check!(qreg_low4 \"\" qreg_low4 f32x4 \"vmov\");\n+\n+// CHECK-LABEL: qreg_low4_e:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d0, d0\n+// CHECK: @NO_APP\n+check!(qreg_low4_e \"e\" qreg_low4 f32x4 \"vmov.f64\");\n+\n+// CHECK-LABEL: qreg_low4_f:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d1, d1\n+// CHECK: @NO_APP\n+check!(qreg_low4_f \"f\" qreg_low4 f32x4 \"vmov.f64\");"}, {"sha": "729adae66f615c446c08d962e9294178a836a317", "filename": "src/test/assembly/asm/arm-types.rs", "status": "added", "additions": 413, "deletions": 0, "changes": 413, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,413 @@\n+// assembly-output: emit-asm\n+// compile-flags: --target armv7-unknown-linux-gnueabihf\n+// compile-flags: -C target-feature=+neon\n+\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register, non_camel_case_types)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+type ptr = *mut u8;\n+\n+#[repr(simd)]\n+pub struct i8x8(i8, i8, i8, i8, i8, i8, i8, i8);\n+#[repr(simd)]\n+pub struct i16x4(i16, i16, i16, i16);\n+#[repr(simd)]\n+pub struct i32x2(i32, i32);\n+#[repr(simd)]\n+pub struct i64x1(i64);\n+#[repr(simd)]\n+pub struct f32x2(f32, f32);\n+#[repr(simd)]\n+pub struct i8x16(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8);\n+#[repr(simd)]\n+pub struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n+#[repr(simd)]\n+pub struct i32x4(i32, i32, i32, i32);\n+#[repr(simd)]\n+pub struct i64x2(i64, i64);\n+#[repr(simd)]\n+pub struct f32x4(f32, f32, f32, f32);\n+\n+impl Copy for i8 {}\n+impl Copy for i16 {}\n+impl Copy for i32 {}\n+impl Copy for f32 {}\n+impl Copy for i64 {}\n+impl Copy for f64 {}\n+impl Copy for ptr {}\n+impl Copy for i8x8 {}\n+impl Copy for i16x4 {}\n+impl Copy for i32x2 {}\n+impl Copy for i64x1 {}\n+impl Copy for f32x2 {}\n+impl Copy for i8x16 {}\n+impl Copy for i16x8 {}\n+impl Copy for i32x4 {}\n+impl Copy for i64x2 {}\n+impl Copy for f32x4 {}\n+\n+extern \"C\" {\n+    fn extern_func();\n+    static extern_static: u8;\n+}\n+\n+// CHECK-LABEL: sym_fn:\n+// CHECK: @APP\n+// CHECK: bl extern_func\n+// CHECK: @NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_fn() {\n+    asm!(\"bl {}\", sym extern_func);\n+}\n+\n+// CHECK-LABEL: sym_static:\n+// CHECK: @APP\n+// CHECK: adr r0, extern_static\n+// CHECK: @NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_static() {\n+    asm!(\"adr r0, {}\", sym extern_static);\n+}\n+\n+macro_rules! check {\n+    ($func:ident $ty:ident $class:ident $mov:literal) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            // Hack to avoid function merging\n+            extern \"Rust\" {\n+                fn dont_merge(s: &str);\n+            }\n+            dont_merge(stringify!($func));\n+\n+            let y;\n+            asm!(concat!($mov, \" {}, {}\"), out($class) y, in($class) x);\n+            y\n+        }\n+    };\n+}\n+\n+// CHECK-LABEL: reg_i8:\n+// CHECK: @APP\n+// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: @NO_APP\n+check!(reg_i8 i8 reg \"mov\");\n+\n+// CHECK-LABEL: reg_i16:\n+// CHECK: @APP\n+// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: @NO_APP\n+check!(reg_i16 i16 reg \"mov\");\n+\n+// CHECK-LABEL: reg_i32:\n+// CHECK: @APP\n+// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: @NO_APP\n+check!(reg_i32 i32 reg \"mov\");\n+\n+// CHECK-LABEL: reg_f32:\n+// CHECK: @APP\n+// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: @NO_APP\n+check!(reg_f32 f32 reg \"mov\");\n+\n+// CHECK-LABEL: reg_ptr:\n+// CHECK: @APP\n+// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: @NO_APP\n+check!(reg_ptr ptr reg \"mov\");\n+\n+// CHECK-LABEL: reg_thumb_i8:\n+// CHECK: @APP\n+// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: @NO_APP\n+check!(reg_thumb_i8 i8 reg_thumb \"mov\");\n+\n+// CHECK-LABEL: reg_thumb_i16:\n+// CHECK: @APP\n+// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: @NO_APP\n+check!(reg_thumb_i16 i16 reg_thumb \"mov\");\n+\n+// CHECK-LABEL: reg_thumb_i32:\n+// CHECK: @APP\n+// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: @NO_APP\n+check!(reg_thumb_i32 i32 reg_thumb \"mov\");\n+\n+// CHECK-LABEL: reg_thumb_f32:\n+// CHECK: @APP\n+// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: @NO_APP\n+check!(reg_thumb_f32 f32 reg_thumb \"mov\");\n+\n+// CHECK-LABEL: reg_thumb_ptr:\n+// CHECK: @APP\n+// CHECK: mov {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: @NO_APP\n+check!(reg_thumb_ptr ptr reg_thumb \"mov\");\n+\n+// CHECK-LABEL: sreg_i32:\n+// CHECK: @APP\n+// CHECK: vmov.f32 s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(sreg_i32 i32 sreg \"vmov.f32\");\n+\n+// CHECK-LABEL: sreg_f32:\n+// CHECK: @APP\n+// CHECK: vmov.f32 s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(sreg_f32 f32 sreg \"vmov.f32\");\n+\n+// CHECK-LABEL: sreg_ptr:\n+// CHECK: @APP\n+// CHECK: vmov.f32 s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(sreg_ptr ptr sreg \"vmov.f32\");\n+\n+// CHECK-LABEL: sreg_low16_i32:\n+// CHECK: @APP\n+// CHECK: vmov.f32 s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(sreg_low16_i32 i32 sreg_low16 \"vmov.f32\");\n+\n+// CHECK-LABEL: sreg_low16_f32:\n+// CHECK: @APP\n+// CHECK: vmov.f32 s{{[0-9]+}}, s{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(sreg_low16_f32 f32 sreg_low16 \"vmov.f32\");\n+\n+// CHECK-LABEL: dreg_i64:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_i64 i64 dreg \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_f64:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_f64 f64 dreg \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_i8x8:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_i8x8 i8x8 dreg \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_i16x4:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_i16x4 i16x4 dreg \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_i32x2:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_i32x2 i32x2 dreg \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_i64x1:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_i64x1 i64x1 dreg \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_f32x2:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_f32x2 f32x2 dreg \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low16_i64:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_low16_i64 i64 dreg_low16 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low16_f64:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_low16_f64 f64 dreg_low16 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low16_i8x8:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_low16_i8x8 i8x8 dreg_low16 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low16_i16x4:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_low16_i16x4 i16x4 dreg_low16 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low16_i32x2:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_low16_i32x2 i32x2 dreg_low16 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low16_i64x1:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_low16_i64x1 i64x1 dreg_low16 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low16_f32x2:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_low16_f32x2 f32x2 dreg_low16 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low8_i64:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_low8_i64 i64 dreg_low8 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low8_f64:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_low8_f64 f64 dreg_low8 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low8_i8x8:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_low8_i8x8 i8x8 dreg_low8 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low8_i16x4:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_low8_i16x4 i16x4 dreg_low8 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low8_i32x2:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_low8_i32x2 i32x2 dreg_low8 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low8_i64x1:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_low8_i64x1 i64x1 dreg_low8 \"vmov.f64\");\n+\n+// CHECK-LABEL: dreg_low8_f32x2:\n+// CHECK: @APP\n+// CHECK: vmov.f64 d{{[0-9]+}}, d{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(dreg_low8_f32x2 f32x2 dreg_low8 \"vmov.f64\");\n+\n+// CHECK-LABEL: qreg_i8x16:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_i8x16 i8x16 qreg \"vmov\");\n+\n+// CHECK-LABEL: qreg_i16x8:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_i16x8 i16x8 qreg \"vmov\");\n+\n+// CHECK-LABEL: qreg_i32x4:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_i32x4 i32x4 qreg \"vmov\");\n+\n+// CHECK-LABEL: qreg_i64x2:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_i64x2 i64x2 qreg \"vmov\");\n+\n+// CHECK-LABEL: qreg_f32x4:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_f32x4 f32x4 qreg \"vmov\");\n+\n+// CHECK-LABEL: qreg_low8_i8x16:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_low8_i8x16 i8x16 qreg_low8 \"vmov\");\n+\n+// CHECK-LABEL: qreg_low8_i16x8:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_low8_i16x8 i16x8 qreg_low8 \"vmov\");\n+\n+// CHECK-LABEL: qreg_low8_i32x4:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_low8_i32x4 i32x4 qreg_low8 \"vmov\");\n+\n+// CHECK-LABEL: qreg_low8_i64x2:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_low8_i64x2 i64x2 qreg_low8 \"vmov\");\n+\n+// CHECK-LABEL: qreg_low8_f32x4:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_low8_f32x4 f32x4 qreg_low8 \"vmov\");\n+\n+// CHECK-LABEL: qreg_low4_i8x16:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_low4_i8x16 i8x16 qreg_low4 \"vmov\");\n+\n+// CHECK-LABEL: qreg_low4_i16x8:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_low4_i16x8 i16x8 qreg_low4 \"vmov\");\n+\n+// CHECK-LABEL: qreg_low4_i32x4:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_low4_i32x4 i32x4 qreg_low4 \"vmov\");\n+\n+// CHECK-LABEL: qreg_low4_i64x2:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_low4_i64x2 i64x2 qreg_low4 \"vmov\");\n+\n+// CHECK-LABEL: qreg_low4_f32x4:\n+// CHECK: @APP\n+// CHECK: vorr q{{[0-9]+}}, q{{[0-9]+}}, q{{[0-9]+}}\n+// CHECK: @NO_APP\n+check!(qreg_low4_f32x4 f32x4 qreg_low4 \"vmov\");"}, {"sha": "622d0c0dc5e846c8e02f3468aff57eceefc3aca1", "filename": "src/test/assembly/asm/riscv-modifiers.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,58 @@\n+// assembly-output: emit-asm\n+// compile-flags: -O\n+// compile-flags: --target riscv64gc-unknown-linux-gnu\n+// compile-flags: -C target-feature=+f\n+\n+#![feature(no_core, lang_items, rustc_attrs)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+impl Copy for f32 {}\n+\n+macro_rules! check {\n+    ($func:ident $modifier:literal $reg:ident $mov:literal) => {\n+        // -O and extern \"C\" guarantee that the selected register is always r0/s0/d0/q0\n+        #[no_mangle]\n+        pub unsafe extern \"C\" fn $func() -> f32 {\n+            // Hack to avoid function merging\n+            extern \"Rust\" {\n+                fn dont_merge(s: &str);\n+            }\n+            dont_merge(stringify!($func));\n+\n+            let y;\n+            asm!(concat!($mov, \" {0:\", $modifier, \"}, {0:\", $modifier, \"}\"), out($reg) y);\n+            y\n+        }\n+    };\n+}\n+\n+// CHECK-LABEL: reg:\n+// CHECK: #APP\n+// CHECK: mv a0, a0\n+// CHECK: #NO_APP\n+check!(reg \"\" reg \"mv\");\n+\n+// CHECK-LABEL: freg:\n+// CHECK: #APP\n+// CHECK: fmv.s fa0, fa0\n+// CHECK: #NO_APP\n+check!(freg \"\" freg \"fmv.s\");"}, {"sha": "5c10753c765de15758f3e481ca3aec381505a4ab", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "added", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,134 @@\n+// revisions: riscv64 riscv32\n+// assembly-output: emit-asm\n+//[riscv64] compile-flags: --target riscv64imac-unknown-none-elf\n+//[riscv32] compile-flags: --target riscv32imac-unknown-none-elf\n+// compile-flags: -C target-feature=+d\n+\n+#![feature(no_core, lang_items, rustc_attrs)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+type ptr = *mut u8;\n+\n+impl Copy for i8 {}\n+impl Copy for i16 {}\n+impl Copy for i32 {}\n+impl Copy for f32 {}\n+impl Copy for i64 {}\n+impl Copy for f64 {}\n+impl Copy for ptr {}\n+\n+extern \"C\" {\n+    fn extern_func();\n+    static extern_static: u8;\n+}\n+\n+// CHECK-LABEL: sym_fn:\n+// CHECK: #APP\n+// CHECK: call extern_func\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_fn() {\n+    asm!(\"call {}\", sym extern_func);\n+}\n+\n+// CHECK-LABEL: sym_static:\n+// CHECK: #APP\n+// CHECK: lb t0, extern_static\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_static() {\n+    asm!(\"lb t0, {}\", sym extern_static);\n+}\n+\n+macro_rules! check {\n+    ($func:ident $ty:ident $class:ident $mov:literal) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            // Hack to avoid function merging\n+            extern \"Rust\" {\n+                fn dont_merge(s: &str);\n+            }\n+            dont_merge(stringify!($func));\n+\n+            let y;\n+            asm!(concat!($mov, \" {}, {}\"), out($class) y, in($class) x);\n+            y\n+        }\n+    };\n+}\n+\n+// CHECK-LABEL: reg_i8:\n+// CHECK: #APP\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i8 i8 reg \"mv\");\n+\n+// CHECK-LABEL: reg_i16:\n+// CHECK: #APP\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i16 i16 reg \"mv\");\n+\n+// CHECK-LABEL: reg_i32:\n+// CHECK: #APP\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i32 i32 reg \"mv\");\n+\n+// CHECK-LABEL: reg_f32:\n+// CHECK: #APP\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_f32 f32 reg \"mv\");\n+\n+// riscv64-LABEL: reg_i64:\n+// riscv64: #APP\n+// riscv64: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// riscv64: #NO_APP\n+#[cfg(riscv64)]\n+check!(reg_i64 i64 reg \"mv\");\n+\n+// riscv64-LABEL: reg_f64:\n+// riscv64: #APP\n+// riscv64: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// riscv64: #NO_APP\n+#[cfg(riscv64)]\n+check!(reg_f64 f64 reg \"mv\");\n+\n+// CHECK-LABEL: reg_ptr:\n+// CHECK: #APP\n+// CHECK: mv {{[a-z0-9]+}}, {{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_ptr ptr reg \"mv\");\n+\n+// CHECK-LABEL: freg_f32:\n+// CHECK: #APP\n+// CHECK: fmv.s f{{[a-z0-9]+}}, f{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(freg_f32 f32 freg \"fmv.s\");\n+\n+// CHECK-LABEL: freg_f64:\n+// CHECK: #APP\n+// CHECK: fmv.d f{{[a-z0-9]+}}, f{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(freg_f64 f64 freg \"fmv.d\");"}, {"sha": "460e22aa69e4e622b0ed6c12e34572f8c1e36b99", "filename": "src/test/assembly/asm/x86-modifiers.rs", "status": "added", "additions": 210, "deletions": 0, "changes": 210, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Fx86-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Fx86-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fx86-modifiers.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,210 @@\n+// revisions: x86_64 i686\n+// assembly-output: emit-asm\n+// compile-flags: -O\n+//[x86_64] compile-flags: --target x86_64-unknown-linux-gnu\n+//[i686] compile-flags: --target i686-unknown-linux-gnu\n+// compile-flags: -C llvm-args=--x86-asm-syntax=intel\n+// compile-flags: -C target-feature=+avx512bw\n+\n+#![feature(no_core, lang_items, rustc_attrs)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+impl Copy for i32 {}\n+\n+macro_rules! check {\n+    ($func:ident $modifier:literal $reg:ident $mov:literal) => {\n+        // -O and extern \"C\" guarantee that the selected register is always ax/xmm0\n+        #[no_mangle]\n+        pub unsafe extern \"C\" fn $func() -> i32 {\n+            // Hack to avoid function merging\n+            extern \"Rust\" {\n+                fn dont_merge(s: &str);\n+            }\n+            dont_merge(stringify!($func));\n+\n+            let y;\n+            asm!(concat!($mov, \" {0:\", $modifier, \"}, {0:\", $modifier, \"}\"), out($reg) y);\n+            y\n+        }\n+    };\n+}\n+\n+// CHECK-LABEL: reg:\n+// CHECK: #APP\n+// x86_64: mov rax, rax\n+// i686: mov eax, eax\n+// CHECK: #NO_APP\n+check!(reg \"\" reg \"mov\");\n+\n+// x86_64-LABEL: reg_l:\n+// x86_64: #APP\n+// x86_64: mov al, al\n+// x86_64: #NO_APP\n+#[cfg(x86_64)]\n+check!(reg_l \"l\" reg \"mov\");\n+\n+// x86_64-LABEL: reg_h:\n+// x86_64: #APP\n+// x86_64: mov ah, ah\n+// x86_64: #NO_APP\n+#[cfg(x86_64)]\n+check!(reg_h \"h\" reg \"mov\");\n+\n+// CHECK-LABEL: reg_x:\n+// CHECK: #APP\n+// CHECK: mov ax, ax\n+// CHECK: #NO_APP\n+check!(reg_x \"x\" reg \"mov\");\n+\n+// CHECK-LABEL: reg_e:\n+// CHECK: #APP\n+// CHECK: mov eax, eax\n+// CHECK: #NO_APP\n+check!(reg_e \"e\" reg \"mov\");\n+\n+// x86_64-LABEL: reg_r:\n+// x86_64: #APP\n+// x86_64: mov rax, rax\n+// x86_64: #NO_APP\n+#[cfg(x86_64)]\n+check!(reg_r \"r\" reg \"mov\");\n+\n+// CHECK-LABEL: reg_abcd:\n+// CHECK: #APP\n+// x86_64: mov rax, rax\n+// i686: mov eax, eax\n+// CHECK: #NO_APP\n+check!(reg_abcd \"\" reg_abcd \"mov\");\n+\n+// CHECK-LABEL: reg_abcd_l:\n+// CHECK: #APP\n+// CHECK: mov al, al\n+// CHECK: #NO_APP\n+check!(reg_abcd_l \"l\" reg_abcd \"mov\");\n+\n+// CHECK-LABEL: reg_abcd_h:\n+// CHECK: #APP\n+// CHECK: mov ah, ah\n+// CHECK: #NO_APP\n+check!(reg_abcd_h \"h\" reg_abcd \"mov\");\n+\n+// CHECK-LABEL: reg_abcd_x:\n+// CHECK: #APP\n+// CHECK: mov ax, ax\n+// CHECK: #NO_APP\n+check!(reg_abcd_x \"x\" reg_abcd \"mov\");\n+\n+// CHECK-LABEL: reg_abcd_e:\n+// CHECK: #APP\n+// CHECK: mov eax, eax\n+// CHECK: #NO_APP\n+check!(reg_abcd_e \"e\" reg_abcd \"mov\");\n+\n+// x86_64-LABEL: reg_abcd_r:\n+// x86_64: #APP\n+// x86_64: mov rax, rax\n+// x86_64: #NO_APP\n+#[cfg(x86_64)]\n+check!(reg_abcd_r \"r\" reg_abcd \"mov\");\n+\n+// CHECK-LABEL: xmm_reg\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check!(xmm_reg \"\" xmm_reg \"movaps\");\n+\n+// CHECK-LABEL: xmm_reg_x\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check!(xmm_reg_x \"x\" xmm_reg \"movaps\");\n+\n+// CHECK-LABEL: xmm_reg_y\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check!(xmm_reg_y \"y\" xmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: xmm_reg_z\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check!(xmm_reg_z \"z\" xmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg\n+// CHECK: #APP\n+// CHECK: movaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check!(ymm_reg \"\" ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_x\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check!(ymm_reg_x \"x\" ymm_reg \"movaps\");\n+\n+// CHECK-LABEL: ymm_reg_y\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check!(ymm_reg_y \"y\" ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_z\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check!(ymm_reg_z \"z\" ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg\n+// CHECK: #APP\n+// CHECK: movaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check!(zmm_reg \"\" zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_x\n+// CHECK: #APP\n+// CHECK: movaps xmm0, xmm0\n+// CHECK: #NO_APP\n+check!(zmm_reg_x \"x\" zmm_reg \"movaps\");\n+\n+// CHECK-LABEL: zmm_reg_y\n+// CHECK: #APP\n+// CHECK: vmovaps ymm0, ymm0\n+// CHECK: #NO_APP\n+check!(zmm_reg_y \"y\" zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_z\n+// CHECK: #APP\n+// CHECK: vmovaps zmm0, zmm0\n+// CHECK: #NO_APP\n+check!(zmm_reg_z \"z\" zmm_reg \"vmovaps\");\n+\n+// Note: we don't have any way of ensuring that k1 is actually the register\n+// chosen by the register allocator, so this check may fail if a different\n+// register is chosen.\n+\n+// CHECK-LABEL: kreg:\n+// CHECK: #APP\n+// CHECK: kmovb k1, k1\n+// CHECK: #NO_APP\n+check!(kreg \"\" kreg \"kmovb\");"}, {"sha": "d2819ac88e70bf13d1f064abe3d100d74e1d5884", "filename": "src/test/assembly/asm/x86-types.rs", "status": "added", "additions": 701, "deletions": 0, "changes": 701, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fx86-types.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,701 @@\n+// revisions: x86_64 i686\n+// assembly-output: emit-asm\n+//[x86_64] compile-flags: --target x86_64-unknown-linux-gnu\n+//[i686] compile-flags: --target i686-unknown-linux-gnu\n+// compile-flags: -C llvm-args=--x86-asm-syntax=intel\n+// compile-flags: -C target-feature=+avx512bw\n+\n+#![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n+#![crate_type = \"rlib\"]\n+#![no_core]\n+#![allow(asm_sub_register, non_camel_case_types)]\n+\n+#[rustc_builtin_macro]\n+macro_rules! asm {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! concat {\n+    () => {};\n+}\n+#[rustc_builtin_macro]\n+macro_rules! stringify {\n+    () => {};\n+}\n+\n+#[lang = \"sized\"]\n+trait Sized {}\n+#[lang = \"copy\"]\n+trait Copy {}\n+\n+type ptr = *mut u8;\n+\n+#[repr(simd)]\n+pub struct i8x16(i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8);\n+#[repr(simd)]\n+pub struct i16x8(i16, i16, i16, i16, i16, i16, i16, i16);\n+#[repr(simd)]\n+pub struct i32x4(i32, i32, i32, i32);\n+#[repr(simd)]\n+pub struct i64x2(i64, i64);\n+#[repr(simd)]\n+pub struct f32x4(f32, f32, f32, f32);\n+#[repr(simd)]\n+pub struct f64x2(f64, f64);\n+\n+#[repr(simd)]\n+pub struct i8x32(\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+);\n+#[repr(simd)]\n+pub struct i16x16(i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16, i16);\n+#[repr(simd)]\n+pub struct i32x8(i32, i32, i32, i32, i32, i32, i32, i32);\n+#[repr(simd)]\n+pub struct i64x4(i64, i64, i64, i64);\n+#[repr(simd)]\n+pub struct f32x8(f32, f32, f32, f32, f32, f32, f32, f32);\n+#[repr(simd)]\n+pub struct f64x4(f64, f64, f64, f64);\n+\n+#[repr(simd)]\n+pub struct i8x64(\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+    i8,\n+);\n+#[repr(simd)]\n+pub struct i16x32(\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+    i16,\n+);\n+#[repr(simd)]\n+pub struct i32x16(i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32);\n+#[repr(simd)]\n+pub struct i64x8(i64, i64, i64, i64, i64, i64, i64, i64);\n+#[repr(simd)]\n+pub struct f32x16(f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32, f32);\n+#[repr(simd)]\n+pub struct f64x8(f64, f64, f64, f64, f64, f64, f64, f64);\n+\n+impl Copy for i8 {}\n+impl Copy for i16 {}\n+impl Copy for i32 {}\n+impl Copy for f32 {}\n+impl Copy for i64 {}\n+impl Copy for f64 {}\n+impl Copy for ptr {}\n+impl Copy for i8x16 {}\n+impl Copy for i16x8 {}\n+impl Copy for i32x4 {}\n+impl Copy for i64x2 {}\n+impl Copy for f32x4 {}\n+impl Copy for f64x2 {}\n+impl Copy for i8x32 {}\n+impl Copy for i16x16 {}\n+impl Copy for i32x8 {}\n+impl Copy for i64x4 {}\n+impl Copy for f32x8 {}\n+impl Copy for f64x4 {}\n+impl Copy for i8x64 {}\n+impl Copy for i16x32 {}\n+impl Copy for i32x16 {}\n+impl Copy for i64x8 {}\n+impl Copy for f32x16 {}\n+impl Copy for f64x8 {}\n+\n+extern \"C\" {\n+    fn extern_func();\n+    static extern_static: u8;\n+}\n+\n+// CHECK-LABEL: sym_fn:\n+// CHECK: #APP\n+// CHECK: call extern_func\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_fn() {\n+    asm!(\"call {}\", sym extern_func);\n+}\n+\n+// CHECK-LABEL: sym_static:\n+// CHECK: #APP\n+// CHECK: mov al, byte ptr [extern_static]\n+// CHECK: #NO_APP\n+#[no_mangle]\n+pub unsafe fn sym_static() {\n+    asm!(\"mov al, byte ptr [{}]\", sym extern_static);\n+}\n+\n+macro_rules! check {\n+    ($func:ident $ty:ident $class:ident $mov:literal) => {\n+        #[no_mangle]\n+        pub unsafe fn $func(x: $ty) -> $ty {\n+            // Hack to avoid function merging\n+            extern \"Rust\" {\n+                fn dont_merge(s: &str);\n+            }\n+            dont_merge(stringify!($func));\n+\n+            let y;\n+            asm!(concat!($mov, \" {}, {}\"), out($class) y, in($class) x);\n+            y\n+        }\n+    };\n+}\n+\n+// CHECK-LABEL: reg_i8:\n+// CHECK: #APP\n+// x86_64: mov r{{[a-z0-9]+}}, r{{[a-z0-9]+}}\n+// i686: mov e{{[a-z0-9]+}}, e{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i8 i8 reg \"mov\");\n+\n+// CHECK-LABEL: reg_i16:\n+// CHECK: #APP\n+// x86_64: mov r{{[a-z0-9]+}}, r{{[a-z0-9]+}}\n+// i686: mov e{{[a-z0-9]+}}, e{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i16 i16 reg \"mov\");\n+\n+// CHECK-LABEL: reg_i32:\n+// CHECK: #APP\n+// x86_64: mov r{{[a-z0-9]+}}, r{{[a-z0-9]+}}\n+// i686: mov e{{[a-z0-9]+}}, e{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_i32 i32 reg \"mov\");\n+\n+// CHECK-LABEL: reg_f32:\n+// CHECK: #APP\n+// x86_64: mov r{{[a-z0-9]+}}, r{{[a-z0-9]+}}\n+// i686: mov e{{[a-z0-9]+}}, e{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_f32 f32 reg \"mov\");\n+\n+// x86_64-LABEL: reg_i64:\n+// x86_64: #APP\n+// x86_64: mov r{{[a-z0-9]+}}, r{{[a-z0-9]+}}\n+// x86_64: #NO_APP\n+#[cfg(x86_64)]\n+check!(reg_i64 i64 reg \"mov\");\n+\n+// x86_64-LABEL: reg_f64:\n+// x86_64: #APP\n+// x86_64: mov r{{[a-z0-9]+}}, r{{[a-z0-9]+}}\n+// x86_64: #NO_APP\n+#[cfg(x86_64)]\n+check!(reg_f64 f64 reg \"mov\");\n+\n+// CHECK-LABEL: reg_ptr:\n+// CHECK: #APP\n+// x86_64: mov r{{[a-z0-9]+}}, r{{[a-z0-9]+}}\n+// i686: mov e{{[a-z0-9]+}}, e{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_ptr ptr reg \"mov\");\n+\n+// CHECK-LABEL: reg_abcd_i8:\n+// CHECK: #APP\n+// x86_64: mov r{{[a-z0-9]+}}, r{{[a-z0-9]+}}\n+// i686: mov e{{[a-z0-9]+}}, e{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_abcd_i8 i8 reg_abcd \"mov\");\n+\n+// CHECK-LABEL: reg_abcd_i16:\n+// CHECK: #APP\n+// x86_64: mov r{{[a-z0-9]+}}, r{{[a-z0-9]+}}\n+// i686: mov e{{[a-z0-9]+}}, e{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_abcd_i16 i16 reg_abcd \"mov\");\n+\n+// CHECK-LABEL: reg_abcd_i32:\n+// CHECK: #APP\n+// x86_64: mov r{{[a-z0-9]+}}, r{{[a-z0-9]+}}\n+// i686: mov e{{[a-z0-9]+}}, e{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_abcd_i32 i32 reg_abcd \"mov\");\n+\n+// CHECK-LABEL: reg_abcd_f32:\n+// CHECK: #APP\n+// x86_64: mov r{{[a-z0-9]+}}, r{{[a-z0-9]+}}\n+// i686: mov e{{[a-z0-9]+}}, e{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_abcd_f32 f32 reg_abcd \"mov\");\n+\n+// x86_64-LABEL: reg_abcd_i64:\n+// x86_64: #APP\n+// x86_64: mov r{{[a-z0-9]+}}, r{{[a-z0-9]+}}\n+// x86_64: #NO_APP\n+#[cfg(x86_64)]\n+check!(reg_abcd_i64 i64 reg_abcd \"mov\");\n+\n+// x86_64-LABEL: reg_abcd_f64:\n+// x86_64: #APP\n+// x86_64: mov r{{[a-z0-9]+}}, r{{[a-z0-9]+}}\n+// x86_64: #NO_APP\n+#[cfg(x86_64)]\n+check!(reg_abcd_f64 f64 reg_abcd \"mov\");\n+\n+// CHECK-LABEL: reg_abcd_ptr:\n+// CHECK: #APP\n+// x86_64: mov r{{[a-z0-9]+}}, r{{[a-z0-9]+}}\n+// i686: mov e{{[a-z0-9]+}}, e{{[a-z0-9]+}}\n+// CHECK: #NO_APP\n+check!(reg_abcd_ptr ptr reg_abcd \"mov\");\n+\n+// CHECK-LABEL: xmm_reg_i32:\n+// CHECK: #APP\n+// CHECK: movaps xmm{{[0-9]+}}, xmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(xmm_reg_i32 i32 xmm_reg \"movaps\");\n+\n+// CHECK-LABEL: xmm_reg_f32:\n+// CHECK: #APP\n+// CHECK: movaps xmm{{[0-9]+}}, xmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(xmm_reg_f32 f32 xmm_reg \"movaps\");\n+\n+// CHECK-LABEL: xmm_reg_i64:\n+// CHECK: #APP\n+// CHECK: movaps xmm{{[0-9]+}}, xmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(xmm_reg_i64 i64 xmm_reg \"movaps\");\n+\n+// CHECK-LABEL: xmm_reg_f64:\n+// CHECK: #APP\n+// CHECK: movaps xmm{{[0-9]+}}, xmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(xmm_reg_f64 f64 xmm_reg \"movaps\");\n+\n+// CHECK-LABEL: xmm_reg_ptr:\n+// CHECK: #APP\n+// CHECK: movaps xmm{{[0-9]+}}, xmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(xmm_reg_ptr ptr xmm_reg \"movaps\");\n+\n+// CHECK-LABEL: xmm_reg_i8x16:\n+// CHECK: #APP\n+// CHECK: movaps xmm{{[0-9]+}}, xmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(xmm_reg_i8x16 i8x16 xmm_reg \"movaps\");\n+\n+// CHECK-LABEL: xmm_reg_i16x8:\n+// CHECK: #APP\n+// CHECK: movaps xmm{{[0-9]+}}, xmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(xmm_reg_i16x8 i16x8 xmm_reg \"movaps\");\n+\n+// CHECK-LABEL: xmm_reg_i32x4:\n+// CHECK: #APP\n+// CHECK: movaps xmm{{[0-9]+}}, xmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(xmm_reg_i32x4 i32x4 xmm_reg \"movaps\");\n+\n+// CHECK-LABEL: xmm_reg_i64x2:\n+// CHECK: #APP\n+// CHECK: movaps xmm{{[0-9]+}}, xmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(xmm_reg_i64x2 i64x2 xmm_reg \"movaps\");\n+\n+// CHECK-LABEL: xmm_reg_f32x4:\n+// CHECK: #APP\n+// CHECK: movaps xmm{{[0-9]+}}, xmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(xmm_reg_f32x4 f32x4 xmm_reg \"movaps\");\n+\n+// CHECK-LABEL: xmm_reg_f64x2:\n+// CHECK: #APP\n+// CHECK: movaps xmm{{[0-9]+}}, xmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(xmm_reg_f64x2 f64x2 xmm_reg \"movaps\");\n+\n+// CHECK-LABEL: ymm_reg_i32:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_i32 i32 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_f32:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_f32 f32 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_i64:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_i64 i64 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_f64:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_f64 f64 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_ptr:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_ptr ptr ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_i8x16:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_i8x16 i8x16 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_i16x8:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_i16x8 i16x8 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_i32x4:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_i32x4 i32x4 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_i64x2:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_i64x2 i64x2 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_f32x4:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_f32x4 f32x4 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_f64x2:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_f64x2 f64x2 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_i8x32:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_i8x32 i8x32 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_i16x16:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_i16x16 i16x16 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_i32x8:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_i32x8 i32x8 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_i64x4:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_i64x4 i64x4 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_f32x8:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_f32x8 f32x8 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: ymm_reg_f64x4:\n+// CHECK: #APP\n+// CHECK: vmovaps ymm{{[0-9]+}}, ymm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(ymm_reg_f64x4 f64x4 ymm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_i32:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_i32 i32 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_f32:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_f32 f32 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_i64:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_i64 i64 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_f64:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_f64 f64 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_ptr:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_ptr ptr zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_i8x16:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_i8x16 i8x16 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_i16x8:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_i16x8 i16x8 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_i32x4:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_i32x4 i32x4 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_i64x2:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_i64x2 i64x2 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_f32x4:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_f32x4 f32x4 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_f64x2:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_f64x2 f64x2 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_i8x32:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_i8x32 i8x32 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_i16x16:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_i16x16 i16x16 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_i32x8:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_i32x8 i32x8 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_i64x4:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_i64x4 i64x4 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_f32x8:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_f32x8 f32x8 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_f64x4:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_f64x4 f64x4 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_i8x64:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_i8x64 i8x64 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_i16x32:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_i16x32 i16x32 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_i32x16:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_i32x16 i32x16 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_i64x8:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_i64x8 i64x8 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_f32x16:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_f32x16 f32x16 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: zmm_reg_f64x8:\n+// CHECK: #APP\n+// CHECK: vmovaps zmm{{[0-9]+}}, zmm{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(zmm_reg_f64x8 f64x8 zmm_reg \"vmovaps\");\n+\n+// CHECK-LABEL: kreg_i8:\n+// CHECK: #APP\n+// CHECK: kmovb k{{[0-9]+}}, k{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(kreg_i8 i8 kreg \"kmovb\");\n+\n+// CHECK-LABEL: kreg_i16:\n+// CHECK: #APP\n+// CHECK: kmovw k{{[0-9]+}}, k{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(kreg_i16 i16 kreg \"kmovw\");\n+\n+// CHECK-LABEL: kreg_i32:\n+// CHECK: #APP\n+// CHECK: kmovd k{{[0-9]+}}, k{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(kreg_i32 i32 kreg \"kmovd\");\n+\n+// CHECK-LABEL: kreg_i64:\n+// CHECK: #APP\n+// CHECK: kmovq k{{[0-9]+}}, k{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(kreg_i64 i64 kreg \"kmovq\");\n+\n+// CHECK-LABEL: kreg_ptr:\n+// CHECK: #APP\n+// CHECK: kmovq k{{[0-9]+}}, k{{[0-9]+}}\n+// CHECK: #NO_APP\n+check!(kreg_ptr ptr kreg \"kmovq\");"}, {"sha": "21e7eb43796345932bd2a571db09149e571a86f8", "filename": "src/test/codegen/asm-options.rs", "status": "added", "additions": 96, "deletions": 0, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fcodegen%2Fasm-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fcodegen%2Fasm-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fasm-options.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,96 @@\n+// compile-flags: -O\n+// only-x86_64\n+\n+#![crate_type = \"rlib\"]\n+#![feature(asm)]\n+\n+// CHECK-LABEL: @pure\n+// CHECK-NOT: asm\n+// CHECK: ret void\n+#[no_mangle]\n+pub unsafe fn pure(x: i32) {\n+    let y: i32;\n+    asm!(\"\", out(\"ax\") y, in(\"bx\") x, options(pure, nomem));\n+}\n+\n+// CHECK-LABEL: @noreturn\n+// CHECK: call void asm\n+// CHECK-NEXT: unreachable\n+#[no_mangle]\n+pub unsafe fn noreturn() {\n+    asm!(\"\", options(noreturn));\n+}\n+\n+pub static mut VAR: i32 = 0;\n+pub static mut DUMMY_OUTPUT: i32 = 0;\n+\n+// CHECK-LABEL: @readonly\n+// CHECK: call i32 asm\n+// CHECK: ret i32 1\n+#[no_mangle]\n+pub unsafe fn readonly() -> i32 {\n+    VAR = 1;\n+    asm!(\"\", out(\"ax\") DUMMY_OUTPUT, options(pure, readonly));\n+    VAR\n+}\n+\n+// CHECK-LABEL: @not_readonly\n+// CHECK: call i32 asm\n+// CHECK: ret i32 %\n+#[no_mangle]\n+pub unsafe fn not_readonly() -> i32 {\n+    VAR = 1;\n+    asm!(\"\", out(\"ax\") DUMMY_OUTPUT, options());\n+    VAR\n+}\n+\n+// CHECK-LABEL: @nomem\n+// CHECK-NOT: store\n+// CHECK: call i32 asm\n+// CHECK: store\n+// CHECK: ret i32 2\n+#[no_mangle]\n+pub unsafe fn nomem() -> i32 {\n+    VAR = 1;\n+    asm!(\"\", out(\"ax\") DUMMY_OUTPUT, options(pure, nomem));\n+    VAR = 2;\n+    VAR\n+}\n+\n+// CHECK-LABEL: @nomem_nopure\n+// CHECK-NOT: store\n+// CHECK: call i32 asm\n+// CHECK: store\n+// CHECK: ret i32 2\n+#[no_mangle]\n+pub unsafe fn nomem_nopure() -> i32 {\n+    VAR = 1;\n+    asm!(\"\", out(\"ax\") DUMMY_OUTPUT, options(nomem));\n+    VAR = 2;\n+    VAR\n+}\n+\n+// CHECK-LABEL: @not_nomem\n+// CHECK: store\n+// CHECK: call i32 asm\n+// CHECK: store\n+// CHECK: ret i32 2\n+#[no_mangle]\n+pub unsafe fn not_nomem() -> i32 {\n+    VAR = 1;\n+    asm!(\"\", out(\"ax\") DUMMY_OUTPUT, options(pure, readonly));\n+    VAR = 2;\n+    VAR\n+}\n+\n+// CHECK-LABEL: @dont_remove_nonpure\n+// CHECK: call void asm\n+// CHECK: call void asm\n+// CHECK: call void asm\n+// CHECK: ret void\n+#[no_mangle]\n+pub unsafe fn dont_remove_nonpure() {\n+    asm!(\"\", options());\n+    asm!(\"\", options(nomem));\n+    asm!(\"\", options(readonly));\n+}"}, {"sha": "1723e1cc1cb095da734f73c75499cc93f00bc1c4", "filename": "src/test/pretty/asm.pp", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fpretty%2Fasm.pp", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fpretty%2Fasm.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fasm.pp?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,25 @@\n+#![feature(prelude_import)]\n+#![no_std]\n+#![feature(asm)]\n+#[prelude_import]\n+use ::std::prelude::v1::*;\n+#[macro_use]\n+extern crate std;\n+\n+// pretty-mode:expanded\n+// pp-exact:asm.pp\n+\n+pub fn main() {\n+    let a: i32;\n+    let mut b = 4i32;\n+    unsafe {\n+        asm!(\"\");\n+        asm!(\"\");\n+        asm!(\"\", options(nomem, nostack));\n+        asm!(\"{0}\", in(reg) 4);\n+        asm!(\"{0}\", out(reg) a);\n+        asm!(\"{0}\", inout(reg) b);\n+        asm!(\"{0} {1}\", out(reg) _, inlateout(reg) b => _);\n+        asm!(\"\", out(\"al\") _, lateout(\"rbx\") _);\n+    }\n+}"}, {"sha": "9812f1d97e5ff21949c9c6097bc7f6188918e6f7", "filename": "src/test/pretty/asm.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fpretty%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fpretty%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fasm.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,19 @@\n+#![feature(asm)]\n+\n+// pretty-mode:expanded\n+// pp-exact:asm.pp\n+\n+pub fn main() {\n+    let a: i32;\n+    let mut b = 4i32;\n+    unsafe {\n+        asm!(\"\");\n+        asm!(\"\", options());\n+        asm!(\"\", options(nostack, nomem));\n+        asm!(\"{}\", in(reg) 4);\n+        asm!(\"{0}\", out(reg) a);\n+        asm!(\"{name}\", name = inout(reg) b);\n+        asm!(\"{} {}\", out(reg) _, inlateout(reg) b => _);\n+        asm!(\"\", out(\"al\") _, lateout(\"rbx\") _);\n+    }\n+}"}, {"sha": "2c09646e47e4ab1b421af5b9a1e9bea1360733a5", "filename": "src/test/pretty/llvm-asm-clobbers.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fpretty%2Fllvm-asm-clobbers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fpretty%2Fllvm-asm-clobbers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fllvm-asm-clobbers.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "previous_filename": "src/test/pretty/asm-clobbers.rs"}, {"sha": "86a881bfbd18a8f201d2e532dfb0522e0763fc7b", "filename": "src/test/pretty/llvm-asm-options.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fpretty%2Fllvm-asm-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fpretty%2Fllvm-asm-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fllvm-asm-options.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "previous_filename": "src/test/pretty/asm-options.rs"}, {"sha": "755fc2ca238aa8e7feebfcf0023006764e3ffb2c", "filename": "src/test/ui/asm/bad-options.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fbad-options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fbad-options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-options.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,18 @@\n+// only-x86_64\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    let mut foo = 0;\n+    unsafe {\n+        asm!(\"\", options(nomem, readonly));\n+        //~^ ERROR the `nomem` and `readonly` options are mutually exclusive\n+        asm!(\"\", options(pure, nomem, noreturn));\n+        //~^ ERROR the `pure` and `noreturn` options are mutually exclusive\n+        //~^^ ERROR asm with `pure` option must have at least one output\n+        asm!(\"{}\", in(reg) foo, options(pure, nomem));\n+        //~^ ERROR asm with `pure` option must have at least one output\n+        asm!(\"{}\", out(reg) foo, options(noreturn));\n+        //~^ ERROR asm outputs are not allowed with the `noreturn` option\n+    }\n+}"}, {"sha": "c5e8e2ccf44ccf7ab31e139dcb25a359c206129c", "filename": "src/test/ui/asm/bad-options.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fbad-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fbad-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-options.stderr?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,32 @@\n+error: the `nomem` and `readonly` options are mutually exclusive\n+  --> $DIR/bad-options.rs:8:18\n+   |\n+LL |         asm!(\"\", options(nomem, readonly));\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: the `pure` and `noreturn` options are mutually exclusive\n+  --> $DIR/bad-options.rs:10:18\n+   |\n+LL |         asm!(\"\", options(pure, nomem, noreturn));\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: asm with `pure` option must have at least one output\n+  --> $DIR/bad-options.rs:10:18\n+   |\n+LL |         asm!(\"\", options(pure, nomem, noreturn));\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: asm with `pure` option must have at least one output\n+  --> $DIR/bad-options.rs:13:33\n+   |\n+LL |         asm!(\"{}\", in(reg) foo, options(pure, nomem));\n+   |                                 ^^^^^^^^^^^^^^^^^^^^\n+\n+error: asm outputs are not allowed with the `noreturn` option\n+  --> $DIR/bad-options.rs:15:20\n+   |\n+LL |         asm!(\"{}\", out(reg) foo, options(noreturn));\n+   |                    ^^^^^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "ed7faa4b156dec571ef629fb077f2f1e19ba203a", "filename": "src/test/ui/asm/bad-reg.rs", "status": "added", "additions": 57, "deletions": 0, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-reg.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,57 @@\n+// only-x86_64\n+// compile-flags: -C target-feature=+avx2\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    let mut foo = 0;\n+    let mut bar = 0;\n+    unsafe {\n+        // Bad register/register class\n+\n+        asm!(\"{}\", in(foo) foo);\n+        //~^ ERROR invalid register class `foo`: unknown register class\n+        asm!(\"\", in(\"foo\") foo);\n+        //~^ ERROR invalid register `foo`: unknown register\n+        asm!(\"{:z}\", in(reg) foo);\n+        //~^ ERROR invalid asm template modifier for this register class\n+        asm!(\"{:r}\", in(xmm_reg) foo);\n+        //~^ ERROR invalid asm template modifier for this register class\n+        asm!(\"{:a}\", const 0);\n+        //~^ ERROR asm template modifiers are not allowed for `const` arguments\n+        asm!(\"{:a}\", sym main);\n+        //~^ ERROR asm template modifiers are not allowed for `sym` arguments\n+        asm!(\"{}\", in(zmm_reg) foo);\n+        //~^ ERROR register class `zmm_reg` requires the `avx512f` target feature\n+        asm!(\"\", in(\"zmm0\") foo);\n+        //~^ ERROR register class `zmm_reg` requires the `avx512f` target feature\n+        asm!(\"\", in(\"ah\") foo);\n+        //~^ ERROR invalid register `ah`: high byte registers are not currently supported\n+        asm!(\"\", in(\"ebp\") foo);\n+        //~^ ERROR invalid register `ebp`: the frame pointer cannot be used as an operand\n+        asm!(\"\", in(\"rsp\") foo);\n+        //~^ ERROR invalid register `rsp`: the stack pointer cannot be used as an operand\n+        asm!(\"\", in(\"ip\") foo);\n+        //~^ ERROR invalid register `ip`: the instruction pointer cannot be used as an operand\n+        asm!(\"\", in(\"st(2)\") foo);\n+        //~^ ERROR invalid register `st(2)`: x87 registers are not currently supported as operands\n+        asm!(\"\", in(\"mm0\") foo);\n+        //~^ ERROR invalid register `mm0`: MMX registers are not currently supported as operands\n+        asm!(\"\", in(\"k0\") foo);\n+        //~^ ERROR invalid register `k0`: the k0 AVX mask register cannot be used as an operand\n+\n+        // Explicit register conflicts\n+        // (except in/lateout which don't conflict)\n+\n+        asm!(\"\", in(\"eax\") foo, in(\"al\") bar);\n+        //~^ ERROR register `ax` conflicts with register `ax`\n+        asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n+        //~^ ERROR register `ax` conflicts with register `ax`\n+        asm!(\"\", in(\"al\") foo, lateout(\"al\") bar);\n+        asm!(\"\", in(\"xmm0\") foo, in(\"ymm0\") bar);\n+        //~^ ERROR register `ymm0` conflicts with register `xmm0`\n+        asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n+        //~^ ERROR register `ymm0` conflicts with register `xmm0`\n+        asm!(\"\", in(\"xmm0\") foo, lateout(\"ymm0\") bar);\n+    }\n+}"}, {"sha": "a9d872dae410f6fd8269d68e94c71ebbd6312740", "filename": "src/test/ui/asm/bad-reg.stderr", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-reg.stderr?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,148 @@\n+error: invalid register class `foo`: unknown register class\n+  --> $DIR/bad-reg.rs:12:20\n+   |\n+LL |         asm!(\"{}\", in(foo) foo);\n+   |                    ^^^^^^^^^^^\n+\n+error: invalid register `foo`: unknown register\n+  --> $DIR/bad-reg.rs:14:18\n+   |\n+LL |         asm!(\"\", in(\"foo\") foo);\n+   |                  ^^^^^^^^^^^^^\n+\n+error: invalid asm template modifier for this register class\n+  --> $DIR/bad-reg.rs:16:15\n+   |\n+LL |         asm!(\"{:z}\", in(reg) foo);\n+   |               ^^^^   ----------- argument\n+   |               |\n+   |               template modifier\n+   |\n+   = note: the `reg` register class supports the following template modifiers: `l`, `h`, `x`, `e`, `r`\n+\n+error: invalid asm template modifier for this register class\n+  --> $DIR/bad-reg.rs:18:15\n+   |\n+LL |         asm!(\"{:r}\", in(xmm_reg) foo);\n+   |               ^^^^   --------------- argument\n+   |               |\n+   |               template modifier\n+   |\n+   = note: the `xmm_reg` register class supports the following template modifiers: `x`, `y`, `z`\n+\n+error: asm template modifiers are not allowed for `const` arguments\n+  --> $DIR/bad-reg.rs:20:15\n+   |\n+LL |         asm!(\"{:a}\", const 0);\n+   |               ^^^^   ------- argument\n+   |               |\n+   |               template modifier\n+\n+error: asm template modifiers are not allowed for `sym` arguments\n+  --> $DIR/bad-reg.rs:22:15\n+   |\n+LL |         asm!(\"{:a}\", sym main);\n+   |               ^^^^   -------- argument\n+   |               |\n+   |               template modifier\n+\n+error: register class `zmm_reg` requires the `avx512f` target feature\n+  --> $DIR/bad-reg.rs:24:20\n+   |\n+LL |         asm!(\"{}\", in(zmm_reg) foo);\n+   |                    ^^^^^^^^^^^^^^^\n+\n+error: register class `zmm_reg` requires the `avx512f` target feature\n+  --> $DIR/bad-reg.rs:26:18\n+   |\n+LL |         asm!(\"\", in(\"zmm0\") foo);\n+   |                  ^^^^^^^^^^^^^^\n+\n+error: invalid register `ah`: high byte registers are not currently supported as operands for inline asm\n+  --> $DIR/bad-reg.rs:28:18\n+   |\n+LL |         asm!(\"\", in(\"ah\") foo);\n+   |                  ^^^^^^^^^^^^\n+\n+error: invalid register `ebp`: the frame pointer cannot be used as an operand for inline asm\n+  --> $DIR/bad-reg.rs:30:18\n+   |\n+LL |         asm!(\"\", in(\"ebp\") foo);\n+   |                  ^^^^^^^^^^^^^\n+\n+error: invalid register `rsp`: the stack pointer cannot be used as an operand for inline asm\n+  --> $DIR/bad-reg.rs:32:18\n+   |\n+LL |         asm!(\"\", in(\"rsp\") foo);\n+   |                  ^^^^^^^^^^^^^\n+\n+error: invalid register `ip`: the instruction pointer cannot be used as an operand for inline asm\n+  --> $DIR/bad-reg.rs:34:18\n+   |\n+LL |         asm!(\"\", in(\"ip\") foo);\n+   |                  ^^^^^^^^^^^^\n+\n+error: invalid register `st(2)`: x87 registers are not currently supported as operands for inline asm\n+  --> $DIR/bad-reg.rs:36:18\n+   |\n+LL |         asm!(\"\", in(\"st(2)\") foo);\n+   |                  ^^^^^^^^^^^^^^^\n+\n+error: invalid register `mm0`: MMX registers are not currently supported as operands for inline asm\n+  --> $DIR/bad-reg.rs:38:18\n+   |\n+LL |         asm!(\"\", in(\"mm0\") foo);\n+   |                  ^^^^^^^^^^^^^\n+\n+error: invalid register `k0`: the k0 AVX mask register cannot be used as an operand for inline asm\n+  --> $DIR/bad-reg.rs:40:18\n+   |\n+LL |         asm!(\"\", in(\"k0\") foo);\n+   |                  ^^^^^^^^^^^^\n+\n+error: register `ax` conflicts with register `ax`\n+  --> $DIR/bad-reg.rs:46:33\n+   |\n+LL |         asm!(\"\", in(\"eax\") foo, in(\"al\") bar);\n+   |                  -------------  ^^^^^^^^^^^^ register `ax`\n+   |                  |\n+   |                  register `ax`\n+\n+error: register `ax` conflicts with register `ax`\n+  --> $DIR/bad-reg.rs:48:33\n+   |\n+LL |         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n+   |                  -------------  ^^^^^^^^^^^^^^ register `ax`\n+   |                  |\n+   |                  register `ax`\n+   |\n+help: use `lateout` instead of `out` to avoid conflict\n+  --> $DIR/bad-reg.rs:48:18\n+   |\n+LL |         asm!(\"\", in(\"rax\") foo, out(\"rax\") bar);\n+   |                  ^^^^^^^^^^^^^\n+\n+error: register `ymm0` conflicts with register `xmm0`\n+  --> $DIR/bad-reg.rs:51:34\n+   |\n+LL |         asm!(\"\", in(\"xmm0\") foo, in(\"ymm0\") bar);\n+   |                  --------------  ^^^^^^^^^^^^^^ register `ymm0`\n+   |                  |\n+   |                  register `xmm0`\n+\n+error: register `ymm0` conflicts with register `xmm0`\n+  --> $DIR/bad-reg.rs:53:34\n+   |\n+LL |         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n+   |                  --------------  ^^^^^^^^^^^^^^^ register `ymm0`\n+   |                  |\n+   |                  register `xmm0`\n+   |\n+help: use `lateout` instead of `out` to avoid conflict\n+  --> $DIR/bad-reg.rs:53:18\n+   |\n+LL |         asm!(\"\", in(\"xmm0\") foo, out(\"ymm0\") bar);\n+   |                  ^^^^^^^^^^^^^^\n+\n+error: aborting due to 19 previous errors\n+"}, {"sha": "0b333eca1ab917193009545dd22bad73fa74fe6d", "filename": "src/test/ui/asm/bad-template.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,26 @@\n+// only-x86_64\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    let mut foo = 0;\n+    unsafe {\n+        asm!(\"{}\");\n+        //~^ ERROR invalid reference to argument at index 0\n+        asm!(\"{1}\", in(reg) foo);\n+        //~^ ERROR invalid reference to argument at index 1\n+        //~^^ ERROR argument never used\n+        asm!(\"{a}\");\n+        //~^ ERROR there is no argument named `a`\n+        asm!(\"{}\", a = in(reg) foo);\n+        //~^ ERROR invalid reference to argument at index 0\n+        //~^^ ERROR argument never used\n+        asm!(\"{1}\", a = in(reg) foo);\n+        //~^ ERROR invalid reference to argument at index 1\n+        //~^^ ERROR named argument never used\n+        asm!(\"{}\", in(\"eax\") foo);\n+        //~^ ERROR invalid reference to argument at index 0\n+        asm!(\"{:foo}\", in(reg) foo);\n+        //~^ ERROR asm template modifier must be a single character\n+    }\n+}"}, {"sha": "2de76ef824192d5301907e38b6a7f42207bd507e", "filename": "src/test/ui/asm/bad-template.stderr", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fbad-template.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fbad-template.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fbad-template.stderr?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,86 @@\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:8:15\n+   |\n+LL |         asm!(\"{}\");\n+   |               ^^ from here\n+   |\n+   = note: no arguments were given\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:10:15\n+   |\n+LL |         asm!(\"{1}\", in(reg) foo);\n+   |               ^^^ from here\n+   |\n+   = note: there is 1 argument\n+\n+error: argument never used\n+  --> $DIR/bad-template.rs:10:21\n+   |\n+LL |         asm!(\"{1}\", in(reg) foo);\n+   |                     ^^^^^^^^^^^ argument never used\n+\n+error: there is no argument named `a`\n+  --> $DIR/bad-template.rs:13:15\n+   |\n+LL |         asm!(\"{a}\");\n+   |               ^^^\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:15:15\n+   |\n+LL |         asm!(\"{}\", a = in(reg) foo);\n+   |               ^^   --------------- named argument\n+   |               |\n+   |               from here\n+   |\n+   = note: no positional arguments were given\n+note: named arguments cannot be referenced by position\n+  --> $DIR/bad-template.rs:15:20\n+   |\n+LL |         asm!(\"{}\", a = in(reg) foo);\n+   |                    ^^^^^^^^^^^^^^^\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:15:20\n+   |\n+LL |         asm!(\"{}\", a = in(reg) foo);\n+   |                    ^^^^^^^^^^^^^^^ named argument never used\n+\n+error: invalid reference to argument at index 1\n+  --> $DIR/bad-template.rs:18:15\n+   |\n+LL |         asm!(\"{1}\", a = in(reg) foo);\n+   |               ^^^ from here\n+   |\n+   = note: no positional arguments were given\n+\n+error: named argument never used\n+  --> $DIR/bad-template.rs:18:21\n+   |\n+LL |         asm!(\"{1}\", a = in(reg) foo);\n+   |                     ^^^^^^^^^^^^^^^ named argument never used\n+\n+error: invalid reference to argument at index 0\n+  --> $DIR/bad-template.rs:21:15\n+   |\n+LL |         asm!(\"{}\", in(\"eax\") foo);\n+   |               ^^   ------------- explicit register argument\n+   |               |\n+   |               from here\n+   |\n+   = note: no positional arguments were given\n+note: explicit register arguments cannot be used in the asm template\n+  --> $DIR/bad-template.rs:21:20\n+   |\n+LL |         asm!(\"{}\", in(\"eax\") foo);\n+   |                    ^^^^^^^^^^^^^\n+\n+error: asm template modifier must be a single character\n+  --> $DIR/bad-template.rs:23:17\n+   |\n+LL |         asm!(\"{:foo}\", in(reg) foo);\n+   |                 ^^^\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "5e1ee93bfb0735320c3266feaa9b0a4fa0d30034", "filename": "src/test/ui/asm/noreturn.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fnoreturn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fnoreturn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fnoreturn.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,17 @@\n+// only-x86_64\n+// check-pass\n+\n+#![feature(asm, never_type)]\n+#![crate_type = \"rlib\"]\n+\n+pub unsafe fn asm1() {\n+    let _: () = asm!(\"\");\n+}\n+\n+pub unsafe fn asm2() {\n+    let _: ! = asm!(\"\", options(noreturn));\n+}\n+\n+pub unsafe fn asm3() -> ! {\n+    asm!(\"\", options(noreturn));\n+}"}, {"sha": "e6566866b22701047b1bc861bb32c44c8abb5e0e", "filename": "src/test/ui/asm/parse-error.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,53 @@\n+// only-x86_64\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    let mut foo = 0;\n+    let mut bar = 0;\n+    unsafe {\n+        asm!();\n+        //~^ ERROR requires at least a template string argument\n+        asm!(foo);\n+        //~^ ERROR asm template must be a string literal\n+        asm!(\"{}\" foo);\n+        //~^ ERROR expected token: `,`\n+        asm!(\"{}\", foo);\n+        //~^ ERROR expected one of\n+        asm!(\"{}\", in foo);\n+        //~^ ERROR expected `(`, found `foo`\n+        asm!(\"{}\", in(reg foo));\n+        //~^ ERROR expected `)`, found `foo`\n+        asm!(\"{}\", in(reg));\n+        //~^ ERROR expected expression, found end of macro arguments\n+        asm!(\"{}\", inout(=) foo => bar);\n+        //~^ ERROR expected register class or explicit register\n+        asm!(\"{}\", inout(reg) foo =>);\n+        //~^ ERROR expected expression, found end of macro arguments\n+        asm!(\"{}\", in(reg) foo => bar);\n+        //~^ ERROR expected one of `!`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n+        asm!(\"{}\", sym foo + bar);\n+        //~^ ERROR argument to `sym` must be a path expression\n+        asm!(\"\", options(foo));\n+        //~^ ERROR expected one of\n+        asm!(\"\", options(nomem foo));\n+        //~^ ERROR expected one of\n+        asm!(\"\", options(nomem, foo));\n+        //~^ ERROR expected one of\n+        asm!(\"\", options(), options());\n+        //~^ ERROR asm options cannot be specified twice\n+        asm!(\"{}\", options(), const foo);\n+        //~^ ERROR arguments are not allowed after options\n+        asm!(\"{a}\", a = const foo, a = const bar);\n+        //~^ ERROR duplicate argument named `a`\n+        //~^^ ERROR argument never used\n+        asm!(\"\", a = in(\"eax\") foo);\n+        //~^ ERROR explicit register arguments cannot have names\n+        asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+        //~^ ERROR named arguments cannot follow explicit register arguments\n+        asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+        //~^ ERROR named arguments cannot follow explicit register arguments\n+        asm!(\"{1}\", in(\"eax\") foo, const bar);\n+        //~^ ERROR positional arguments cannot follow named arguments or explicit register arguments\n+    }\n+}"}, {"sha": "a927ce13858a5425ec3bc1b136a21b736ea3ebf5", "filename": "src/test/ui/asm/parse-error.stderr", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Fparse-error.stderr?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,146 @@\n+error: requires at least a template string argument\n+  --> $DIR/parse-error.rs:9:9\n+   |\n+LL |         asm!();\n+   |         ^^^^^^^\n+\n+error: asm template must be a string literal\n+  --> $DIR/parse-error.rs:11:14\n+   |\n+LL |         asm!(foo);\n+   |              ^^^\n+\n+error: expected token: `,`\n+  --> $DIR/parse-error.rs:13:19\n+   |\n+LL |         asm!(\"{}\" foo);\n+   |                   ^^^ expected `,`\n+\n+error: expected one of `const`, `in`, `inlateout`, `inout`, `lateout`, `options`, `out`, or `sym`, found `foo`\n+  --> $DIR/parse-error.rs:15:20\n+   |\n+LL |         asm!(\"{}\", foo);\n+   |                    ^^^ expected one of 8 possible tokens\n+\n+error: expected `(`, found `foo`\n+  --> $DIR/parse-error.rs:17:23\n+   |\n+LL |         asm!(\"{}\", in foo);\n+   |                       ^^^ expected `(`\n+\n+error: expected `)`, found `foo`\n+  --> $DIR/parse-error.rs:19:27\n+   |\n+LL |         asm!(\"{}\", in(reg foo));\n+   |                           ^^^ expected `)`\n+\n+error: expected expression, found end of macro arguments\n+  --> $DIR/parse-error.rs:21:27\n+   |\n+LL |         asm!(\"{}\", in(reg));\n+   |                           ^ expected expression\n+\n+error: expected register class or explicit register\n+  --> $DIR/parse-error.rs:23:26\n+   |\n+LL |         asm!(\"{}\", inout(=) foo => bar);\n+   |                          ^\n+\n+error: expected expression, found end of macro arguments\n+  --> $DIR/parse-error.rs:25:37\n+   |\n+LL |         asm!(\"{}\", inout(reg) foo =>);\n+   |                                     ^ expected expression\n+\n+error: expected one of `!`, `,`, `.`, `::`, `?`, `{`, or an operator, found `=>`\n+  --> $DIR/parse-error.rs:27:32\n+   |\n+LL |         asm!(\"{}\", in(reg) foo => bar);\n+   |                                ^^ expected one of 7 possible tokens\n+\n+error: argument to `sym` must be a path expression\n+  --> $DIR/parse-error.rs:29:24\n+   |\n+LL |         asm!(\"{}\", sym foo + bar);\n+   |                        ^^^^^^^^^\n+\n+error: expected one of `)`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, or `readonly`, found `foo`\n+  --> $DIR/parse-error.rs:31:26\n+   |\n+LL |         asm!(\"\", options(foo));\n+   |                          ^^^ expected one of 7 possible tokens\n+\n+error: expected one of `)` or `,`, found `foo`\n+  --> $DIR/parse-error.rs:33:32\n+   |\n+LL |         asm!(\"\", options(nomem foo));\n+   |                                ^^^ expected one of `)` or `,`\n+\n+error: expected one of `)`, `nomem`, `noreturn`, `nostack`, `preserves_flags`, `pure`, or `readonly`, found `foo`\n+  --> $DIR/parse-error.rs:35:33\n+   |\n+LL |         asm!(\"\", options(nomem, foo));\n+   |                                 ^^^ expected one of 7 possible tokens\n+\n+error: asm options cannot be specified twice\n+  --> $DIR/parse-error.rs:37:29\n+   |\n+LL |         asm!(\"\", options(), options());\n+   |                  ---------  ^^^^^^^^^ duplicate options\n+   |                  |\n+   |                  previously here\n+\n+error: arguments are not allowed after options\n+  --> $DIR/parse-error.rs:39:31\n+   |\n+LL |         asm!(\"{}\", options(), const foo);\n+   |                    ---------  ^^^^^^^^^ argument\n+   |                    |\n+   |                    previous options\n+\n+error: duplicate argument named `a`\n+  --> $DIR/parse-error.rs:41:36\n+   |\n+LL |         asm!(\"{a}\", a = const foo, a = const bar);\n+   |                     -------------  ^^^^^^^^^^^^^ duplicate argument\n+   |                     |\n+   |                     previously here\n+\n+error: argument never used\n+  --> $DIR/parse-error.rs:41:36\n+   |\n+LL |         asm!(\"{a}\", a = const foo, a = const bar);\n+   |                                    ^^^^^^^^^^^^^ argument never used\n+\n+error: explicit register arguments cannot have names\n+  --> $DIR/parse-error.rs:44:18\n+   |\n+LL |         asm!(\"\", a = in(\"eax\") foo);\n+   |                  ^^^^^^^^^^^^^^^^^\n+\n+error: named arguments cannot follow explicit register arguments\n+  --> $DIR/parse-error.rs:46:36\n+   |\n+LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+   |                     -------------  ^^^^^^^^^^^^^ named argument\n+   |                     |\n+   |                     explicit register argument\n+\n+error: named arguments cannot follow explicit register arguments\n+  --> $DIR/parse-error.rs:48:36\n+   |\n+LL |         asm!(\"{a}\", in(\"eax\") foo, a = const bar);\n+   |                     -------------  ^^^^^^^^^^^^^ named argument\n+   |                     |\n+   |                     explicit register argument\n+\n+error: positional arguments cannot follow named arguments or explicit register arguments\n+  --> $DIR/parse-error.rs:50:36\n+   |\n+LL |         asm!(\"{1}\", in(\"eax\") foo, const bar);\n+   |                     -------------  ^^^^^^^^^ positional argument\n+   |                     |\n+   |                     explicit register argument\n+\n+error: aborting due to 22 previous errors\n+"}, {"sha": "c9271059810c7d91141041954c0bbd9981e36394", "filename": "src/test/ui/asm/rustfix-asm.fixed", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.fixed?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+// only-x86_64\n+\n+#![feature(asm, llvm_asm)]\n+\n+fn main() {\n+    unsafe {\n+        let x = 1;\n+        let y: i32;\n+        llvm_asm!(\"\" :: \"r\" (x));\n+        //~^ ERROR legacy asm! syntax is no longer supported\n+        llvm_asm!(\"\" : \"=r\" (y));\n+        //~^ ERROR legacy asm! syntax is no longer supported\n+        let _ = y;\n+    }\n+}"}, {"sha": "a108595ca1b666468cf5419c858bcc4f8ca05a01", "filename": "src/test/ui/asm/rustfix-asm.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,16 @@\n+// run-rustfix\n+// only-x86_64\n+\n+#![feature(asm, llvm_asm)]\n+\n+fn main() {\n+    unsafe {\n+        let x = 1;\n+        let y: i32;\n+        asm!(\"\" :: \"r\" (x));\n+        //~^ ERROR legacy asm! syntax is no longer supported\n+        asm!(\"\" : \"=r\" (y));\n+        //~^ ERROR legacy asm! syntax is no longer supported\n+        let _ = y;\n+    }\n+}"}, {"sha": "28675b51d15fb828ff9349f0a70f3a3e97b47cae", "filename": "src/test/ui/asm/rustfix-asm.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Frustfix-asm.stderr?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,18 @@\n+error: legacy asm! syntax is no longer supported\n+  --> $DIR/rustfix-asm.rs:10:9\n+   |\n+LL |         asm!(\"\" :: \"r\" (x));\n+   |         ----^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: replace with: `llvm_asm!`\n+\n+error: legacy asm! syntax is no longer supported\n+  --> $DIR/rustfix-asm.rs:12:9\n+   |\n+LL |         asm!(\"\" : \"=r\" (y));\n+   |         ----^^^^^^^^^^^^^^^^\n+   |         |\n+   |         help: replace with: `llvm_asm!`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "7880382c3b74f58e0507504bcfd5e24fb4290113", "filename": "src/test/ui/asm/type-check-1.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,25 @@\n+// only-x86_64\n+\n+#![feature(asm)]\n+\n+fn main() {\n+    unsafe {\n+        // Outputs must be place expressions\n+\n+        asm!(\"{}\", in(reg) 1 + 2);\n+        asm!(\"{}\", out(reg) 1 + 2);\n+        //~^ ERROR invalid asm output\n+        asm!(\"{}\", inout(reg) 1 + 2);\n+        //~^ ERROR invalid asm output\n+\n+        // Operands must be sized\n+\n+        let v: [u64; 3] = [0, 1, 2];\n+        asm!(\"{}\", in(reg) v[..]);\n+        //~^ ERROR the size for values of type `[u64]` cannot be known at compilation time\n+        asm!(\"{}\", out(reg) v[..]);\n+        //~^ ERROR the size for values of type `[u64]` cannot be known at compilation time\n+        asm!(\"{}\", inout(reg) v[..]);\n+        //~^ ERROR the size for values of type `[u64]` cannot be known at compilation time\n+    }\n+}"}, {"sha": "7c9c041f45784b58999606a2bc3f07da4180dfbc", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,45 @@\n+error: invalid asm output\n+  --> $DIR/type-check-1.rs:10:29\n+   |\n+LL |         asm!(\"{}\", out(reg) 1 + 2);\n+   |                             ^^^^^ cannot assign to this expression\n+\n+error: invalid asm output\n+  --> $DIR/type-check-1.rs:12:31\n+   |\n+LL |         asm!(\"{}\", inout(reg) 1 + 2);\n+   |                               ^^^^^ cannot assign to this expression\n+\n+error[E0277]: the size for values of type `[u64]` cannot be known at compilation time\n+  --> $DIR/type-check-1.rs:18:28\n+   |\n+LL |         asm!(\"{}\", in(reg) v[..]);\n+   |                            ^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[u64]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: all inline asm arguments must have a statically known size\n+\n+error[E0277]: the size for values of type `[u64]` cannot be known at compilation time\n+  --> $DIR/type-check-1.rs:20:29\n+   |\n+LL |         asm!(\"{}\", out(reg) v[..]);\n+   |                             ^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[u64]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: all inline asm arguments must have a statically known size\n+\n+error[E0277]: the size for values of type `[u64]` cannot be known at compilation time\n+  --> $DIR/type-check-1.rs:22:31\n+   |\n+LL |         asm!(\"{}\", inout(reg) v[..]);\n+   |                               ^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `[u64]`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+   = note: all inline asm arguments must have a statically known size\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "1652e9e4c9f661a581e1640e5188a11006490cb6", "filename": "src/test/ui/asm/type-check-2.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,104 @@\n+// only-x86_64\n+\n+#![feature(asm, repr_simd, never_type)]\n+\n+#[repr(simd)]\n+struct SimdNonCopy(f32, f32, f32, f32);\n+\n+fn main() {\n+    unsafe {\n+        // Inputs must be initialized\n+\n+        let x: u64;\n+        asm!(\"{}\", in(reg) x);\n+        //~^ ERROR use of possibly-uninitialized variable: `x`\n+        let mut y: u64;\n+        asm!(\"{}\", inout(reg) y);\n+        //~^ ERROR use of possibly-uninitialized variable: `y`\n+        let _ = y;\n+\n+        // Outputs require mutable places\n+\n+        let v: Vec<u64> = vec![0, 1, 2];\n+        asm!(\"{}\", in(reg) v[0]);\n+        asm!(\"{}\", out(reg) v[0]);\n+        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n+        asm!(\"{}\", inout(reg) v[0]);\n+        //~^ ERROR cannot borrow `v` as mutable, as it is not declared as mutable\n+\n+        // Const operands must be integer or floats, and must be constants.\n+\n+        let x = 0;\n+        const C: i32 = 0;\n+        const fn const_foo(x: i32) -> i32 {\n+            x\n+        }\n+        const fn const_bar<T>(x: T) -> T {\n+            x\n+        }\n+        asm!(\"{}\", const 0i32);\n+        asm!(\"{}\", const 0f32);\n+        asm!(\"{}\", const 0 as *mut u8);\n+        //~^ ERROR asm `const` arguments must be integer or floating-point values\n+        asm!(\"{}\", const &0);\n+        //~^ ERROR asm `const` arguments must be integer or floating-point values\n+        asm!(\"{}\", const x);\n+        //~^ ERROR argument 1 is required to be a constant\n+        asm!(\"{}\", const const_foo(0));\n+        asm!(\"{}\", const const_foo(x));\n+        //~^ ERROR argument 1 is required to be a constant\n+        asm!(\"{}\", const const_bar(0));\n+        asm!(\"{}\", const const_bar(x));\n+        //~^ ERROR argument 1 is required to be a constant\n+\n+        // Sym operands must point to a function or static\n+\n+        static S: i32 = 0;\n+        asm!(\"{}\", sym S);\n+        asm!(\"{}\", sym main);\n+        asm!(\"{}\", sym C);\n+        //~^ ERROR asm `sym` operand must point to a fn or static\n+        asm!(\"{}\", sym x);\n+        //~^ ERROR asm `sym` operand must point to a fn or static\n+\n+        // Register operands must be Copy\n+\n+        asm!(\"{}\", in(xmm_reg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n+        //~^ ERROR arguments for inline assembly must be copyable\n+\n+        // Register operands must be integers, floats, SIMD vectors, pointers or\n+        // function pointers.\n+\n+        asm!(\"{}\", in(reg) 0i64);\n+        asm!(\"{}\", in(reg) 0f64);\n+        asm!(\"{}\", in(xmm_reg) std::arch::x86_64::_mm_setzero_ps());\n+        asm!(\"{}\", in(reg) 0 as *const u8);\n+        asm!(\"{}\", in(reg) 0 as *mut u8);\n+        asm!(\"{}\", in(reg) main as fn());\n+        asm!(\"{}\", in(reg) |x: i32| x);\n+        //~^ ERROR cannot use value of type\n+        asm!(\"{}\", in(reg) vec![0]);\n+        //~^ ERROR cannot use value of type `std::vec::Vec<i32>` for inline assembly\n+        asm!(\"{}\", in(reg) (1, 2, 3));\n+        //~^ ERROR cannot use value of type `(i32, i32, i32)` for inline assembly\n+        asm!(\"{}\", in(reg) [1, 2, 3]);\n+        //~^ ERROR cannot use value of type `[i32; 3]` for inline assembly\n+\n+        // Register inputs (but not outputs) allow references and function types\n+\n+        let mut f = main;\n+        let mut r = &mut 0;\n+        asm!(\"{}\", in(reg) f);\n+        asm!(\"{}\", inout(reg) f);\n+        //~^ ERROR cannot use value of type `fn() {main}` for inline assembly\n+        asm!(\"{}\", in(reg) r);\n+        asm!(\"{}\", inout(reg) r);\n+        //~^ ERROR cannot use value of type `&mut i32` for inline assembly\n+        let _ = (f, r);\n+\n+        // Type checks ignore never type\n+\n+        let u: ! = unreachable!();\n+        asm!(\"{}\", in(reg) u);\n+    }\n+}"}, {"sha": "dc7949534f1a91713e3b626f4b3c6412db4eb3fa", "filename": "src/test/ui/asm/type-check-2.stderr", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-2.stderr?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,133 @@\n+error: asm `const` arguments must be integer or floating-point values\n+  --> $DIR/type-check-2.rs:41:26\n+   |\n+LL |         asm!(\"{}\", const 0 as *mut u8);\n+   |                          ^^^^^^^^^^^^\n+\n+error: asm `const` arguments must be integer or floating-point values\n+  --> $DIR/type-check-2.rs:43:26\n+   |\n+LL |         asm!(\"{}\", const &0);\n+   |                          ^^\n+\n+error: arguments for inline assembly must be copyable\n+  --> $DIR/type-check-2.rs:66:32\n+   |\n+LL |         asm!(\"{}\", in(xmm_reg) SimdNonCopy(0.0, 0.0, 0.0, 0.0));\n+   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `SimdNonCopy` does not implement the Copy trait\n+\n+error: cannot use value of type `[closure@$DIR/type-check-2.rs:78:28: 78:38]` for inline assembly\n+  --> $DIR/type-check-2.rs:78:28\n+   |\n+LL |         asm!(\"{}\", in(reg) |x: i32| x);\n+   |                            ^^^^^^^^^^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+\n+error: cannot use value of type `std::vec::Vec<i32>` for inline assembly\n+  --> $DIR/type-check-2.rs:80:28\n+   |\n+LL |         asm!(\"{}\", in(reg) vec![0]);\n+   |                            ^^^^^^^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: cannot use value of type `(i32, i32, i32)` for inline assembly\n+  --> $DIR/type-check-2.rs:82:28\n+   |\n+LL |         asm!(\"{}\", in(reg) (1, 2, 3));\n+   |                            ^^^^^^^^^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+\n+error: cannot use value of type `[i32; 3]` for inline assembly\n+  --> $DIR/type-check-2.rs:84:28\n+   |\n+LL |         asm!(\"{}\", in(reg) [1, 2, 3]);\n+   |                            ^^^^^^^^^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+\n+error: cannot use value of type `fn() {main}` for inline assembly\n+  --> $DIR/type-check-2.rs:92:31\n+   |\n+LL |         asm!(\"{}\", inout(reg) f);\n+   |                               ^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+\n+error: cannot use value of type `&mut i32` for inline assembly\n+  --> $DIR/type-check-2.rs:95:31\n+   |\n+LL |         asm!(\"{}\", inout(reg) r);\n+   |                               ^\n+   |\n+   = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n+\n+error: asm `sym` operand must point to a fn or static\n+  --> $DIR/type-check-2.rs:59:24\n+   |\n+LL |         asm!(\"{}\", sym C);\n+   |                        ^\n+\n+error: asm `sym` operand must point to a fn or static\n+  --> $DIR/type-check-2.rs:61:24\n+   |\n+LL |         asm!(\"{}\", sym x);\n+   |                        ^\n+\n+error: argument 1 is required to be a constant\n+  --> $DIR/type-check-2.rs:45:9\n+   |\n+LL |         asm!(\"{}\", const x);\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: argument 1 is required to be a constant\n+  --> $DIR/type-check-2.rs:48:9\n+   |\n+LL |         asm!(\"{}\", const const_foo(x));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: argument 1 is required to be a constant\n+  --> $DIR/type-check-2.rs:51:9\n+   |\n+LL |         asm!(\"{}\", const const_bar(x));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0381]: use of possibly-uninitialized variable: `x`\n+  --> $DIR/type-check-2.rs:13:28\n+   |\n+LL |         asm!(\"{}\", in(reg) x);\n+   |                            ^ use of possibly-uninitialized `x`\n+\n+error[E0381]: use of possibly-uninitialized variable: `y`\n+  --> $DIR/type-check-2.rs:16:9\n+   |\n+LL |         asm!(\"{}\", inout(reg) y);\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ use of possibly-uninitialized `y`\n+\n+error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n+  --> $DIR/type-check-2.rs:24:29\n+   |\n+LL |         let v: Vec<u64> = vec![0, 1, 2];\n+   |             - help: consider changing this to be mutable: `mut v`\n+LL |         asm!(\"{}\", in(reg) v[0]);\n+LL |         asm!(\"{}\", out(reg) v[0]);\n+   |                             ^ cannot borrow as mutable\n+\n+error[E0596]: cannot borrow `v` as mutable, as it is not declared as mutable\n+  --> $DIR/type-check-2.rs:26:31\n+   |\n+LL |         let v: Vec<u64> = vec![0, 1, 2];\n+   |             - help: consider changing this to be mutable: `mut v`\n+...\n+LL |         asm!(\"{}\", inout(reg) v[0]);\n+   |                               ^ cannot borrow as mutable\n+\n+error: aborting due to 18 previous errors\n+\n+Some errors have detailed explanations: E0381, E0596.\n+For more information about an error, try `rustc --explain E0381`."}, {"sha": "750d28026d768343b74e4c4341a1ce72413afcb6", "filename": "src/test/ui/asm/type-check-3.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,68 @@\n+// only-x86_64\n+// compile-flags: -C target-feature=+avx512f\n+\n+#![feature(asm)]\n+\n+use std::arch::x86_64::{_mm256_setzero_ps, _mm_setzero_ps};\n+\n+fn main() {\n+    unsafe {\n+        // Types must be in the whitelist for the register class\n+\n+        asm!(\"{}\", in(reg) 0i128);\n+        //~^ ERROR type `i128` cannot be used with this register class\n+        asm!(\"{}\", in(reg) _mm_setzero_ps());\n+        //~^ ERROR type `std::arch::x86_64::__m128` cannot be used with this register class\n+        asm!(\"{}\", in(reg) _mm256_setzero_ps());\n+        //~^ ERROR type `std::arch::x86_64::__m256` cannot be used with this register class\n+        asm!(\"{}\", in(xmm_reg) 0u8);\n+        //~^ ERROR type `u8` cannot be used with this register class\n+        asm!(\"{:e}\", in(reg) 0i32);\n+        asm!(\"{}\", in(xmm_reg) 0i32);\n+        asm!(\"{:e}\", in(reg) 0f32);\n+        asm!(\"{}\", in(xmm_reg) 0f32);\n+        asm!(\"{}\", in(xmm_reg) _mm_setzero_ps());\n+        asm!(\"{:x}\", in(ymm_reg) _mm_setzero_ps());\n+        asm!(\"{}\", in(kreg) 0u16);\n+        asm!(\"{}\", in(kreg) 0u64);\n+        //~^ ERROR `avx512bw` target feature is not enabled\n+\n+        // Template modifier suggestions for sub-registers\n+\n+        asm!(\"{0} {0}\", in(reg) 0i8);\n+        //~^ WARN formatting may not be suitable for sub-register argument\n+        asm!(\"{0} {0:x}\", in(reg) 0i16);\n+        //~^ WARN formatting may not be suitable for sub-register argument\n+        asm!(\"{}\", in(reg) 0i32);\n+        //~^ WARN formatting may not be suitable for sub-register argument\n+        asm!(\"{}\", in(reg) 0i64);\n+        asm!(\"{}\", in(ymm_reg) 0i64);\n+        //~^ WARN formatting may not be suitable for sub-register argument\n+        asm!(\"{}\", in(ymm_reg) _mm256_setzero_ps());\n+        asm!(\"{:l}\", in(reg) 0i8);\n+        asm!(\"{:l}\", in(reg) 0i16);\n+        asm!(\"{:l}\", in(reg) 0i32);\n+        asm!(\"{:l}\", in(reg) 0i64);\n+        asm!(\"{:x}\", in(ymm_reg) 0i64);\n+        asm!(\"{:x}\", in(ymm_reg) _mm256_setzero_ps());\n+\n+        // Split inout operands must have compatible types\n+\n+        let mut val_i8: i8;\n+        let mut val_f32: f32;\n+        let mut val_u32: u32;\n+        let mut val_u64: u64;\n+        let mut val_ptr: *mut u8;\n+        asm!(\"{:r}\", inout(reg) 0u8 => val_i8);\n+        asm!(\"{:r}\", inout(reg) 0u16 => val_i8);\n+        //~^ ERROR incompatible types for asm inout argument\n+        asm!(\"{:r}\", inout(reg) 0u32 => val_f32);\n+        //~^ ERROR incompatible types for asm inout argument\n+        asm!(\"{:r}\", inout(reg) 0u32 => val_ptr);\n+        //~^ ERROR incompatible types for asm inout argument\n+        asm!(\"{:r}\", inout(reg) main => val_u32);\n+        //~^ ERROR incompatible types for asm inout argument\n+        asm!(\"{:r}\", inout(reg) 0u64 => val_ptr);\n+        asm!(\"{:r}\", inout(reg) main => val_u64);\n+    }\n+}"}, {"sha": "e4018ca1d428b1fd34956a2d4ec21aa72a468680", "filename": "src/test/ui/asm/type-check-3.stderr", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-3.stderr?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -0,0 +1,123 @@\n+error: type `i128` cannot be used with this register class\n+  --> $DIR/type-check-3.rs:12:28\n+   |\n+LL |         asm!(\"{}\", in(reg) 0i128);\n+   |                            ^^^^^\n+   |\n+   = note: register class `reg` supports these types: i8, i16, i32, i64, f32, f64\n+\n+error: type `std::arch::x86_64::__m128` cannot be used with this register class\n+  --> $DIR/type-check-3.rs:14:28\n+   |\n+LL |         asm!(\"{}\", in(reg) _mm_setzero_ps());\n+   |                            ^^^^^^^^^^^^^^^^\n+   |\n+   = note: register class `reg` supports these types: i8, i16, i32, i64, f32, f64\n+\n+error: type `std::arch::x86_64::__m256` cannot be used with this register class\n+  --> $DIR/type-check-3.rs:16:28\n+   |\n+LL |         asm!(\"{}\", in(reg) _mm256_setzero_ps());\n+   |                            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: register class `reg` supports these types: i8, i16, i32, i64, f32, f64\n+\n+error: type `u8` cannot be used with this register class\n+  --> $DIR/type-check-3.rs:18:32\n+   |\n+LL |         asm!(\"{}\", in(xmm_reg) 0u8);\n+   |                                ^^^\n+   |\n+   = note: register class `xmm_reg` supports these types: i32, i64, f32, f64, i8x16, i16x8, i32x4, i64x2, f32x4, f64x2\n+\n+error: `avx512bw` target feature is not enabled\n+  --> $DIR/type-check-3.rs:27:29\n+   |\n+LL |         asm!(\"{}\", in(kreg) 0u64);\n+   |                             ^^^^\n+   |\n+   = note: this is required to use type `u64` with register class `kreg`\n+\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/type-check-3.rs:32:15\n+   |\n+LL |         asm!(\"{0} {0}\", in(reg) 0i8);\n+   |               ^^^ ^^^           --- for this argument\n+   |\n+   = note: `#[warn(asm_sub_register)]` on by default\n+   = help: use the `l` modifier to have the register formatted as `al`\n+   = help: or use the `r` modifier to keep the default formatting of `rax`\n+\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/type-check-3.rs:34:15\n+   |\n+LL |         asm!(\"{0} {0:x}\", in(reg) 0i16);\n+   |               ^^^                 ---- for this argument\n+   |\n+   = help: use the `x` modifier to have the register formatted as `ax`\n+   = help: or use the `r` modifier to keep the default formatting of `rax`\n+\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/type-check-3.rs:36:15\n+   |\n+LL |         asm!(\"{}\", in(reg) 0i32);\n+   |               ^^           ---- for this argument\n+   |\n+   = help: use the `e` modifier to have the register formatted as `eax`\n+   = help: or use the `r` modifier to keep the default formatting of `rax`\n+\n+warning: formatting may not be suitable for sub-register argument\n+  --> $DIR/type-check-3.rs:39:15\n+   |\n+LL |         asm!(\"{}\", in(ymm_reg) 0i64);\n+   |               ^^               ---- for this argument\n+   |\n+   = help: use the `x` modifier to have the register formatted as `xmm0`\n+   = help: or use the `y` modifier to keep the default formatting of `ymm0`\n+\n+error: incompatible types for asm inout argument\n+  --> $DIR/type-check-3.rs:57:33\n+   |\n+LL |         asm!(\"{:r}\", inout(reg) 0u16 => val_i8);\n+   |                                 ^^^^    ^^^^^^ type `i8`\n+   |                                 |\n+   |                                 type `u16`\n+   |\n+   = note: asm inout arguments must have the same type\n+   = note: unless they are both pointers or integers of the same size\n+\n+error: incompatible types for asm inout argument\n+  --> $DIR/type-check-3.rs:59:33\n+   |\n+LL |         asm!(\"{:r}\", inout(reg) 0u32 => val_f32);\n+   |                                 ^^^^    ^^^^^^^ type `f32`\n+   |                                 |\n+   |                                 type `u32`\n+   |\n+   = note: asm inout arguments must have the same type\n+   = note: unless they are both pointers or integers of the same size\n+\n+error: incompatible types for asm inout argument\n+  --> $DIR/type-check-3.rs:61:33\n+   |\n+LL |         asm!(\"{:r}\", inout(reg) 0u32 => val_ptr);\n+   |                                 ^^^^    ^^^^^^^ type `*mut u8`\n+   |                                 |\n+   |                                 type `u32`\n+   |\n+   = note: asm inout arguments must have the same type\n+   = note: unless they are both pointers or integers of the same size\n+\n+error: incompatible types for asm inout argument\n+  --> $DIR/type-check-3.rs:63:33\n+   |\n+LL |         asm!(\"{:r}\", inout(reg) main => val_u32);\n+   |                                 ^^^^    ^^^^^^^ type `u32`\n+   |                                 |\n+   |                                 type `fn()`\n+   |\n+   = note: asm inout arguments must have the same type\n+   = note: unless they are both pointers or integers of the same size\n+\n+error: aborting due to 9 previous errors; 4 warnings emitted\n+"}, {"sha": "7eeeb4bc4e243d18f799de376474a4106d93eff8", "filename": "src/test/ui/feature-gates/feature-gate-asm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -3,7 +3,6 @@\n fn main() {\n     unsafe {\n         asm!(\"\"); //~ ERROR inline assembly is not stable enough\n-        //~^ WARN use of deprecated item 'asm'\n         llvm_asm!(\"\"); //~ ERROR inline assembly is not stable enough\n     }\n }"}, {"sha": "1f9eaa5632e4ad3961216a41994eeb6210cd46c2", "filename": "src/test/ui/feature-gates/feature-gate-asm.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm.stderr?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -8,22 +8,14 @@ LL |         asm!(\"\");\n    = help: add `#![feature(asm)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'llvm_asm': inline assembly is not stable enough for use and is subject to change\n-  --> $DIR/feature-gate-asm.rs:7:9\n+  --> $DIR/feature-gate-asm.rs:6:9\n    |\n LL |         llvm_asm!(\"\");\n    |         ^^^^^^^^\n    |\n    = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n    = help: add `#![feature(llvm_asm)]` to the crate attributes to enable\n \n-warning: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\n-  --> $DIR/feature-gate-asm.rs:5:9\n-   |\n-LL |         asm!(\"\");\n-   |         ^^^ help: replace the use of the deprecated item: `llvm_asm`\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "666a4894f627551226ae9d1c0b9c359d639cccdd", "filename": "src/test/ui/feature-gates/feature-gate-asm2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -3,7 +3,6 @@\n fn main() {\n     unsafe {\n         println!(\"{:?}\", asm!(\"\")); //~ ERROR inline assembly is not stable\n-        //~^ WARN use of deprecated item 'asm'\n         println!(\"{:?}\", llvm_asm!(\"\")); //~ ERROR inline assembly is not stable\n     }\n }"}, {"sha": "17ba66e9842fac2dbf76bad1e045a76e332046cc", "filename": "src/test/ui/feature-gates/feature-gate-asm2.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-asm2.stderr?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -8,22 +8,14 @@ LL |         println!(\"{:?}\", asm!(\"\"));\n    = help: add `#![feature(asm)]` to the crate attributes to enable\n \n error[E0658]: use of unstable library feature 'llvm_asm': inline assembly is not stable enough for use and is subject to change\n-  --> $DIR/feature-gate-asm2.rs:7:26\n+  --> $DIR/feature-gate-asm2.rs:6:26\n    |\n LL |         println!(\"{:?}\", llvm_asm!(\"\"));\n    |                          ^^^^^^^^\n    |\n    = note: see issue #70173 <https://github.com/rust-lang/rust/issues/70173> for more information\n    = help: add `#![feature(llvm_asm)]` to the crate attributes to enable\n \n-warning: use of deprecated item 'asm': the syntax of asm! will change soon, use llvm_asm! to avoid breakage\n-  --> $DIR/feature-gate-asm2.rs:5:26\n-   |\n-LL |         println!(\"{:?}\", asm!(\"\"));\n-   |                          ^^^ help: replace the use of the deprecated item: `llvm_asm`\n-   |\n-   = note: `#[warn(deprecated)]` on by default\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "1dc1c859c6b0e3645ef11fbcdd53870019d42f5f", "filename": "src/test/ui/llvm-asm/llvm-asm-concat-src.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-concat-src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-concat-src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-concat-src.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "previous_filename": "src/test/ui/asm-concat-src.rs"}, {"sha": "35f4d92c8ffbcf6ff9b22721c679f00831395a68", "filename": "src/test/ui/llvm-asm/llvm-asm-in-moved.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-moved.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "previous_filename": "src/test/ui/asm-in-moved.rs"}, {"sha": "acefabd8a666e0385a9092cc4ecfd3bc58e5782b", "filename": "src/test/ui/llvm-asm/llvm-asm-in-out-operand.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-out-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-out-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-in-out-operand.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "previous_filename": "src/test/ui/asm-in-out-operand.rs"}, {"sha": "556ad83a4ead8202d76062e286161a15efa49657", "filename": "src/test/ui/llvm-asm/llvm-asm-indirect-memory.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-indirect-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-indirect-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-indirect-memory.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "previous_filename": "src/test/ui/asm-indirect-memory.rs"}, {"sha": "321f28565ff180d3c2810da8e76f9c82c53d22f5", "filename": "src/test/ui/llvm-asm/llvm-asm-out-assign.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fllvm-asm%2Fllvm-asm-out-assign.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "previous_filename": "src/test/ui/asm-out-assign.rs"}, {"sha": "a8bfa0299f66f0b1fadc94f5c13803b0634929d3", "filename": "src/test/ui/macros/macro-expanded-include/foo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ffoo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ffoo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ffoo%2Fmod.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -5,5 +5,5 @@ macro_rules! m {\n }\n \n macro_rules! n {\n-    () => { unsafe { llvm_asm!(include_str!(\"file.txt\")); } }\n+    () => { unsafe { asm!(include_str!(\"file.txt\")); } }\n }"}, {"sha": "f1a71059a89016e1684d4d25c8657a0f969f84c1", "filename": "src/test/ui/macros/macro-expanded-include/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-expanded-include%2Ftest.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -1,6 +1,6 @@\n // ignore-emscripten no llvm_asm! support\n // build-pass (FIXME(62277): could be check-pass?)\n-#![feature(llvm_asm)]\n+#![feature(asm)]\n #![allow(unused)]\n \n #[macro_use]"}, {"sha": "0a496c9dc3d33eee41add0057acce1ca745e9dfb", "filename": "src/test/ui/macros/macros-nonfatal-errors.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -3,13 +3,14 @@\n // test that errors in a (selection) of macros don't kill compilation\n // immediately, so that we get more errors listed at a time.\n \n-#![feature(llvm_asm)]\n+#![feature(asm, llvm_asm)]\n #![feature(trace_macros, concat_idents)]\n \n #[derive(Default)] //~ ERROR\n enum OrDeriveThis {}\n \n fn main() {\n+    asm!(invalid); //~ ERROR\n     llvm_asm!(invalid); //~ ERROR\n \n     concat_idents!(\"not\", \"idents\"); //~ ERROR"}, {"sha": "6ef757a55b8fb82d2b569ad12684cba406da1151", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -6,44 +6,50 @@ LL | #[derive(Default)]\n    |\n    = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n+error: asm template must be a string literal\n+  --> $DIR/macros-nonfatal-errors.rs:13:10\n+   |\n+LL |     asm!(invalid);\n+   |          ^^^^^^^\n+\n error: inline assembly must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:13:15\n+  --> $DIR/macros-nonfatal-errors.rs:14:15\n    |\n LL |     llvm_asm!(invalid);\n    |               ^^^^^^^\n \n error: concat_idents! requires ident args.\n-  --> $DIR/macros-nonfatal-errors.rs:15:5\n+  --> $DIR/macros-nonfatal-errors.rs:16:5\n    |\n LL |     concat_idents!(\"not\", \"idents\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:17:17\n+  --> $DIR/macros-nonfatal-errors.rs:18:17\n    |\n LL |     option_env!(invalid);\n    |                 ^^^^^^^\n \n error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:18:10\n+  --> $DIR/macros-nonfatal-errors.rs:19:10\n    |\n LL |     env!(invalid);\n    |          ^^^^^^^\n \n error: expected string literal\n-  --> $DIR/macros-nonfatal-errors.rs:19:10\n+  --> $DIR/macros-nonfatal-errors.rs:20:10\n    |\n LL |     env!(foo, abr, baz);\n    |          ^^^\n \n error: environment variable `RUST_HOPEFULLY_THIS_DOESNT_EXIST` not defined\n-  --> $DIR/macros-nonfatal-errors.rs:20:5\n+  --> $DIR/macros-nonfatal-errors.rs:21:5\n    |\n LL |     env!(\"RUST_HOPEFULLY_THIS_DOESNT_EXIST\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: format argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:22:13\n+  --> $DIR/macros-nonfatal-errors.rs:23:13\n    |\n LL |     format!(invalid);\n    |             ^^^^^^^\n@@ -54,45 +60,45 @@ LL |     format!(\"{}\", invalid);\n    |             ^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:24:14\n+  --> $DIR/macros-nonfatal-errors.rs:25:14\n    |\n LL |     include!(invalid);\n    |              ^^^^^^^\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:26:18\n+  --> $DIR/macros-nonfatal-errors.rs:27:18\n    |\n LL |     include_str!(invalid);\n    |                  ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: $FILE_NOT_FOUND_MSG (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:27:5\n+  --> $DIR/macros-nonfatal-errors.rs:28:5\n    |\n LL |     include_str!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: argument must be a string literal\n-  --> $DIR/macros-nonfatal-errors.rs:28:20\n+  --> $DIR/macros-nonfatal-errors.rs:29:20\n    |\n LL |     include_bytes!(invalid);\n    |                    ^^^^^^^\n \n error: couldn't read $DIR/i'd be quite surprised if a file with this name existed: $FILE_NOT_FOUND_MSG (os error 2)\n-  --> $DIR/macros-nonfatal-errors.rs:29:5\n+  --> $DIR/macros-nonfatal-errors.rs:30:5\n    |\n LL |     include_bytes!(\"i'd be quite surprised if a file with this name existed\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: trace_macros! accepts only `true` or `false`\n-  --> $DIR/macros-nonfatal-errors.rs:31:5\n+  --> $DIR/macros-nonfatal-errors.rs:32:5\n    |\n LL |     trace_macros!(invalid);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 14 previous errors\n+error: aborting due to 15 previous errors\n \n For more information about this error, try `rustc --explain E0665`."}, {"sha": "2384a00aa47aa2395ea11d580cf3250289c3fbea", "filename": "src/test/ui/target-feature/gate.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8ab0f2d3c5a85563b98c4896116e3d53154fff9c/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftarget-feature%2Fgate.stderr?ref=8ab0f2d3c5a85563b98c4896116e3d53154fff9c", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: the target feature `avx512bw` is currently unstable\n-  --> $DIR/gate.rs:29:18\n+  --> $DIR/gate.rs:30:18\n    |\n LL | #[target_feature(enable = \"avx512bw\")]\n    |                  ^^^^^^^^^^^^^^^^^^^"}]}