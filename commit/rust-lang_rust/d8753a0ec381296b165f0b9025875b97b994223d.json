{"sha": "d8753a0ec381296b165f0b9025875b97b994223d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NzUzYTBlYzM4MTI5NmIxNjVmMGI5MDI1ODc1Yjk3Yjk5NDIyM2Q=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T22:32:01Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-18T22:32:01Z"}, "message": "rollup merge of #22438: dotdash/iter_vec_loop\n\nNo need to create a bunch of blocks and a stack allocated temporary just\nto build a simple loop.", "tree": {"sha": "b8d6b804b4bf4719284ed35df9d29125bd18eb3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8d6b804b4bf4719284ed35df9d29125bd18eb3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8753a0ec381296b165f0b9025875b97b994223d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8753a0ec381296b165f0b9025875b97b994223d", "html_url": "https://github.com/rust-lang/rust/commit/d8753a0ec381296b165f0b9025875b97b994223d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8753a0ec381296b165f0b9025875b97b994223d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "386d329ac5506f1e82c1e1095b12c30c3f990cc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/386d329ac5506f1e82c1e1095b12c30c3f990cc9", "html_url": "https://github.com/rust-lang/rust/commit/386d329ac5506f1e82c1e1095b12c30c3f990cc9"}, {"sha": "378abdbde790440fd61aece00d053ae400cab56d", "url": "https://api.github.com/repos/rust-lang/rust/commits/378abdbde790440fd61aece00d053ae400cab56d", "html_url": "https://github.com/rust-lang/rust/commit/378abdbde790440fd61aece00d053ae400cab56d"}], "stats": {"total": 51, "additions": 14, "deletions": 37}, "files": [{"sha": "d250f4fb678e0dc384df08810e0a594010f6b02d", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 14, "deletions": 37, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/d8753a0ec381296b165f0b9025875b97b994223d/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8753a0ec381296b165f0b9025875b97b994223d/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=d8753a0ec381296b165f0b9025875b97b994223d", "patch": "@@ -420,49 +420,26 @@ pub fn iter_vec_loop<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n     let _icx = push_ctxt(\"tvec::iter_vec_loop\");\n     let fcx = bcx.fcx;\n \n-    let next_bcx = fcx.new_temp_block(\"expr_repeat: while next\");\n     let loop_bcx = fcx.new_temp_block(\"expr_repeat\");\n-    let cond_bcx = fcx.new_temp_block(\"expr_repeat: loop cond\");\n-    let body_bcx = fcx.new_temp_block(\"expr_repeat: body: set\");\n-    let inc_bcx = fcx.new_temp_block(\"expr_repeat: body: inc\");\n-    Br(bcx, loop_bcx.llbb, DebugLoc::None);\n+    let next_bcx = fcx.new_temp_block(\"expr_repeat: next\");\n \n-    let loop_counter = {\n-        // i = 0\n-        let i = alloca(loop_bcx, bcx.ccx().int_type(), \"__i\");\n-        Store(loop_bcx, C_uint(bcx.ccx(), 0us), i);\n+    Br(bcx, loop_bcx.llbb, DebugLoc::None);\n \n-        Br(loop_bcx, cond_bcx.llbb, DebugLoc::None);\n-        i\n-    };\n+    let loop_counter = Phi(loop_bcx, bcx.ccx().int_type(), &[C_uint(bcx.ccx(), 0us)], &[bcx.llbb]);\n \n-    { // i < count\n-        let lhs = Load(cond_bcx, loop_counter);\n-        let rhs = count;\n-        let cond_val = ICmp(cond_bcx, llvm::IntULT, lhs, rhs, DebugLoc::None);\n+    let bcx = loop_bcx;\n \n-        CondBr(cond_bcx, cond_val, body_bcx.llbb, next_bcx.llbb, DebugLoc::None);\n-    }\n-\n-    { // loop body\n-        let i = Load(body_bcx, loop_counter);\n-        let lleltptr = if vt.llunit_alloc_size == 0 {\n-            data_ptr\n-        } else {\n-            InBoundsGEP(body_bcx, data_ptr, &[i])\n-        };\n-        let body_bcx = f(body_bcx, lleltptr, vt.unit_ty);\n-\n-        Br(body_bcx, inc_bcx.llbb, DebugLoc::None);\n-    }\n-\n-    { // i += 1\n-        let i = Load(inc_bcx, loop_counter);\n-        let plusone = Add(inc_bcx, i, C_uint(bcx.ccx(), 1us), DebugLoc::None);\n-        Store(inc_bcx, plusone, loop_counter);\n+    let lleltptr = if vt.llunit_alloc_size == 0 {\n+        data_ptr\n+    } else {\n+        InBoundsGEP(bcx, data_ptr, &[loop_counter])\n+    };\n+    let bcx = f(bcx, lleltptr, vt.unit_ty);\n+    let plusone = Add(bcx, loop_counter, C_uint(bcx.ccx(), 1us), DebugLoc::None);\n+    AddIncomingToPhi(loop_counter, plusone, bcx.llbb);\n \n-        Br(inc_bcx, cond_bcx.llbb, DebugLoc::None);\n-    }\n+    let cond_val = ICmp(bcx, llvm::IntULT, plusone, count, DebugLoc::None);\n+    CondBr(bcx, cond_val, loop_bcx.llbb, next_bcx.llbb, DebugLoc::None);\n \n     next_bcx\n }"}]}