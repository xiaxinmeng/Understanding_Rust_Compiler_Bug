{"sha": "59b6583287eb90598af98d916aaed617b148b4a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5YjY1ODMyODdlYjkwNTk4YWY5OGQ5MTZhYWVkNjE3YjE0OGI0YTM=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-06-02T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-06-03T14:29:21Z"}, "message": "Remove unused support for `VarDebugInfo`\n\nThis code has been dead since changes in 68961.", "tree": {"sha": "d3cfc760c8dbefe5c1ebc1117e766bd9df422878", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3cfc760c8dbefe5c1ebc1117e766bd9df422878"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59b6583287eb90598af98d916aaed617b148b4a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59b6583287eb90598af98d916aaed617b148b4a3", "html_url": "https://github.com/rust-lang/rust/commit/59b6583287eb90598af98d916aaed617b148b4a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59b6583287eb90598af98d916aaed617b148b4a3/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "835150e70288535bc57bb624792229b9dc94991d", "url": "https://api.github.com/repos/rust-lang/rust/commits/835150e70288535bc57bb624792229b9dc94991d", "html_url": "https://github.com/rust-lang/rust/commit/835150e70288535bc57bb624792229b9dc94991d"}], "stats": {"total": 37, "additions": 4, "deletions": 33}, "files": [{"sha": "a5aa170deced9972cdcd739848c06e110cafb0b5", "filename": "compiler/rustc_codegen_ssa/src/mir/analyze.rs", "status": "modified", "additions": 4, "deletions": 33, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/59b6583287eb90598af98d916aaed617b148b4a3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b6583287eb90598af98d916aaed617b148b4a3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fanalyze.rs?ref=59b6583287eb90598af98d916aaed617b148b4a3", "patch": "@@ -7,9 +7,7 @@ use rustc_data_structures::graph::dominators::Dominators;\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::mir::traversal;\n-use rustc_middle::mir::visit::{\n-    MutatingUseContext, NonMutatingUseContext, NonUseContext, PlaceContext, Visitor,\n-};\n+use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{self, Location, TerminatorKind};\n use rustc_middle::ty;\n use rustc_middle::ty::layout::HasTyCtxt;\n@@ -21,7 +19,9 @@ pub fn non_ssa_locals<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     let mir = fx.mir;\n     let mut analyzer = LocalAnalyzer::new(fx);\n \n-    analyzer.visit_body(&mir);\n+    for (bb, data) in mir.basic_blocks().iter_enumerated() {\n+        analyzer.visit_basic_block_data(bb, data);\n+    }\n \n     for (local, decl) in mir.local_decls.iter_enumerated() {\n         let ty = fx.monomorphize(decl.ty);\n@@ -142,36 +142,7 @@ impl<Bx: BuilderMethods<'a, 'tcx>> LocalAnalyzer<'mir, 'a, 'tcx, Bx> {\n \n             if let mir::ProjectionElem::Deref = elem {\n                 // Deref projections typically only read the pointer.\n-                // (the exception being `VarDebugInfo` contexts, handled below)\n                 base_context = PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy);\n-\n-                // Indirect debuginfo requires going through memory, that only\n-                // the debugger accesses, following our emitted DWARF pointer ops.\n-                //\n-                // FIXME(eddyb) Investigate the possibility of relaxing this, but\n-                // note that `llvm.dbg.declare` *must* be used for indirect places,\n-                // even if we start using `llvm.dbg.value` for all other cases,\n-                // as we don't necessarily know when the value changes, but only\n-                // where it lives in memory.\n-                //\n-                // It's possible `llvm.dbg.declare` could support starting from\n-                // a pointer that doesn't point to an `alloca`, but this would\n-                // only be useful if we know the pointer being `Deref`'d comes\n-                // from an immutable place, and if `llvm.dbg.declare` calls\n-                // must be at the very start of the function, then only function\n-                // arguments could contain such pointers.\n-                if context == PlaceContext::NonUse(NonUseContext::VarDebugInfo) {\n-                    // We use `NonUseContext::VarDebugInfo` for the base,\n-                    // which might not force the base local to memory,\n-                    // so we have to do it manually.\n-                    self.visit_local(&place_ref.local, context, location);\n-                }\n-            }\n-\n-            // `NonUseContext::VarDebugInfo` needs to flow all the\n-            // way down to the base local (see `visit_local`).\n-            if context == PlaceContext::NonUse(NonUseContext::VarDebugInfo) {\n-                base_context = context;\n             }\n \n             self.process_place(&place_base, base_context, location);"}]}