{"sha": "ce841fe73b1476f6d4ac1495f88a567c501d01a8", "node_id": "C_kwDOAAsO6NoAKGNlODQxZmU3M2IxNDc2ZjZkNGFjMTQ5NWY4OGE1NjdjNTAxZDAxYTg", "commit": {"author": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-03-05T23:35:58Z"}, "committer": {"name": "Samuel E. Moelius III", "email": "sam@moeli.us", "date": "2022-03-05T23:35:58Z"}, "message": "Format with `rustfmt_if_chain`", "tree": {"sha": "17c9f6019dd6d9d384410ce486c6bdc706594dba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17c9f6019dd6d9d384410ce486c6bdc706594dba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce841fe73b1476f6d4ac1495f88a567c501d01a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce841fe73b1476f6d4ac1495f88a567c501d01a8", "html_url": "https://github.com/rust-lang/rust/commit/ce841fe73b1476f6d4ac1495f88a567c501d01a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce841fe73b1476f6d4ac1495f88a567c501d01a8/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48d54942f55078cd5866a96bd182bbaf2b81d0f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/48d54942f55078cd5866a96bd182bbaf2b81d0f6", "html_url": "https://github.com/rust-lang/rust/commit/48d54942f55078cd5866a96bd182bbaf2b81d0f6"}], "stats": {"total": 36, "additions": 14, "deletions": 22}, "files": [{"sha": "cc9949b153f0e94b8daa5e3df0ded5575d35683d", "filename": "clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 14, "deletions": 22, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ce841fe73b1476f6d4ac1495f88a567c501d01a8/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce841fe73b1476f6d4ac1495f88a567c501d01a8/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=ce841fe73b1476f6d4ac1495f88a567c501d01a8", "patch": "@@ -114,7 +114,12 @@ fn check_addr_of_expr(\n                     parent.span,\n                     &format!(\"unnecessary use of `{}`\", method_name),\n                     \"use\",\n-                    format!(\"{:&>width$}{}\", \"\", receiver_snippet, width = n_target_refs - n_receiver_refs),\n+                    format!(\n+                        \"{:&>width$}{}\",\n+                        \"\",\n+                        receiver_snippet,\n+                        width = n_target_refs - n_receiver_refs\n+                    ),\n                     Applicability::MachineApplicable,\n                 );\n                 return true;\n@@ -182,20 +187,10 @@ fn check_into_iter_call_arg(cx: &LateContext<'_>, expr: &Expr<'_>, method_name:\n         if let Some(item_ty) = get_iterator_item_ty(cx, parent_ty);\n         if let Some(receiver_snippet) = snippet_opt(cx, receiver.span);\n         then {\n-            if unnecessary_iter_cloned::check_for_loop_iter(\n-                cx,\n-                parent,\n-                method_name,\n-                receiver,\n-                true,\n-            ) {\n+            if unnecessary_iter_cloned::check_for_loop_iter(cx, parent, method_name, receiver, true) {\n                 return true;\n             }\n-            let cloned_or_copied = if is_copy(cx, item_ty) {\n-                \"copied\"\n-            } else {\n-                \"cloned\"\n-            };\n+            let cloned_or_copied = if is_copy(cx, item_ty) { \"copied\" } else { \"cloned\" };\n             // The next suggestion may be incorrect because the removal of the `to_owned`-like\n             // function could cause the iterator to hold a reference to a resource that is used\n             // mutably. See https://github.com/rust-lang/rust-clippy/issues/8148.\n@@ -243,18 +238,19 @@ fn check_other_call_arg<'tcx>(\n         if if trait_predicate.def_id() == deref_trait_id {\n             if let [projection_predicate] = projection_predicates[..] {\n                 let normalized_ty =\n-                    cx.tcx.subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.term);\n+                    cx.tcx\n+                        .subst_and_normalize_erasing_regions(call_substs, cx.param_env, projection_predicate.term);\n                 implements_trait(cx, receiver_ty, deref_trait_id, &[])\n-                    && get_associated_type(cx, receiver_ty, deref_trait_id,\n-                    \"Target\").map_or(false, |ty| ty::Term::Ty(ty) == normalized_ty)\n+                    && get_associated_type(cx, receiver_ty, deref_trait_id, \"Target\")\n+                        .map_or(false, |ty| ty::Term::Ty(ty) == normalized_ty)\n             } else {\n                 false\n             }\n         } else if trait_predicate.def_id() == as_ref_trait_id {\n             let composed_substs = compose_substs(\n                 cx,\n                 &trait_predicate.trait_ref.substs.iter().skip(1).collect::<Vec<_>>()[..],\n-                call_substs\n+                call_substs,\n             );\n             implements_trait(cx, receiver_ty, as_ref_trait_id, &composed_substs)\n         } else {\n@@ -339,11 +335,7 @@ fn get_input_traits_and_projections<'tcx>(\n                 if let Some(arg) = substs.iter().next();\n                 if let GenericArgKind::Type(arg_ty) = arg.unpack();\n                 if arg_ty == input;\n-                then {\n-                    true\n-                } else {\n-                    false\n-                }\n+                then { true } else { false }\n             }\n         };\n         match predicate.kind().skip_binder() {"}]}