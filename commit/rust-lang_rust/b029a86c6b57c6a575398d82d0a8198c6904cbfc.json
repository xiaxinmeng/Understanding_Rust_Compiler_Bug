{"sha": "b029a86c6b57c6a575398d82d0a8198c6904cbfc", "node_id": "C_kwDOAAsO6NoAKGIwMjlhODZjNmI1N2M2YTU3NTM5OGQ4MmQwYTgxOThjNjkwNGNiZmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-08T21:43:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-08T21:43:26Z"}, "message": "Auto merge of #8648 - Jarcho:transmute_collection_7706, r=xFrednet\n\nFix `unsound_collection_transmute`\n\nfixes #7706\n\nchangelog: Better check size and alignment requirements in `unsound_collection_transmute`", "tree": {"sha": "92e58def896a731a95625e2189e824682667216a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92e58def896a731a95625e2189e824682667216a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b029a86c6b57c6a575398d82d0a8198c6904cbfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b029a86c6b57c6a575398d82d0a8198c6904cbfc", "html_url": "https://github.com/rust-lang/rust/commit/b029a86c6b57c6a575398d82d0a8198c6904cbfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b029a86c6b57c6a575398d82d0a8198c6904cbfc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a63308be0a66fe34aa1ccefef76fa6a0bc50d2a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/a63308be0a66fe34aa1ccefef76fa6a0bc50d2a3", "html_url": "https://github.com/rust-lang/rust/commit/a63308be0a66fe34aa1ccefef76fa6a0bc50d2a3"}, {"sha": "d5e887c6f005347c5c243fe8691e2b7d7d594203", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e887c6f005347c5c243fe8691e2b7d7d594203", "html_url": "https://github.com/rust-lang/rust/commit/d5e887c6f005347c5c243fe8691e2b7d7d594203"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "0e07a0b0392eb3eb5a4fe2431516985a078ba640", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b029a86c6b57c6a575398d82d0a8198c6904cbfc/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b029a86c6b57c6a575398d82d0a8198c6904cbfc/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=b029a86c6b57c6a575398d82d0a8198c6904cbfc", "patch": "@@ -1,10 +1,9 @@\n use clippy_utils::last_path_segment;\n use clippy_utils::source::snippet;\n-use clippy_utils::ty::is_normalizable;\n use if_chain::if_chain;\n use rustc_hir::{Expr, GenericArg, QPath, TyKind};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, cast::CastKind, Ty};\n+use rustc_middle::ty::{cast::CastKind, Ty};\n use rustc_span::DUMMY_SP;\n use rustc_typeck::check::{cast::CastCheck, FnCtxt, Inherited};\n \n@@ -34,15 +33,12 @@ pub(super) fn get_type_snippet(cx: &LateContext<'_>, path: &QPath<'_>, to_ref_ty\n // check if the component types of the transmuted collection and the result have different ABI,\n // size or alignment\n pub(super) fn is_layout_incompatible<'tcx>(cx: &LateContext<'tcx>, from: Ty<'tcx>, to: Ty<'tcx>) -> bool {\n-    let empty_param_env = ty::ParamEnv::empty();\n-    // check if `from` and `to` are normalizable to avoid ICE (#4968)\n-    if !(is_normalizable(cx, empty_param_env, from) && is_normalizable(cx, empty_param_env, to)) {\n-        return false;\n-    }\n-    let from_ty_layout = cx.tcx.layout_of(empty_param_env.and(from));\n-    let to_ty_layout = cx.tcx.layout_of(empty_param_env.and(to));\n-    if let (Ok(from_layout), Ok(to_layout)) = (from_ty_layout, to_ty_layout) {\n-        from_layout.size != to_layout.size || from_layout.align != to_layout.align || from_layout.abi != to_layout.abi\n+    if let Ok(from) = cx.tcx.try_normalize_erasing_regions(cx.param_env, from)\n+        && let Ok(to) = cx.tcx.try_normalize_erasing_regions(cx.param_env, to)\n+        && let Ok(from_layout) = cx.tcx.layout_of(cx.param_env.and(from))\n+        && let Ok(to_layout) = cx.tcx.layout_of(cx.param_env.and(to))\n+    {\n+        from_layout.size != to_layout.size || from_layout.align.abi != to_layout.align.abi\n     } else {\n         // no idea about layout, so don't lint\n         false"}, {"sha": "5a431bee04a45c03d8b54ee438a1b4b003aa611a", "filename": "tests/ui/transmute_collection.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b029a86c6b57c6a575398d82d0a8198c6904cbfc/tests%2Fui%2Ftransmute_collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b029a86c6b57c6a575398d82d0a8198c6904cbfc/tests%2Fui%2Ftransmute_collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_collection.rs?ref=b029a86c6b57c6a575398d82d0a8198c6904cbfc", "patch": "@@ -1,7 +1,7 @@\n #![warn(clippy::unsound_collection_transmute)]\n \n use std::collections::{BTreeMap, BTreeSet, BinaryHeap, HashMap, HashSet, VecDeque};\n-use std::mem::transmute;\n+use std::mem::{transmute, MaybeUninit};\n \n fn main() {\n     unsafe {\n@@ -43,5 +43,8 @@ fn main() {\n         // wrong layout\n         let _ = transmute::<_, HashMap<u8, u32>>(HashMap::<u8, [u8; 4]>::new());\n         let _ = transmute::<_, HashMap<u32, u32>>(HashMap::<[u8; 4], u32>::new());\n+\n+        let _ = transmute::<_, Vec<u8>>(Vec::<MaybeUninit<u8>>::new());\n+        let _ = transmute::<_, Vec<*mut u32>>(Vec::<Box<u32>>::new());\n     }\n }"}]}