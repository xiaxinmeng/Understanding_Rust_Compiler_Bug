{"sha": "97d46232b4df2230dfc24e3cd49a3714620cb496", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZDQ2MjMyYjRkZjIyMzBkZmMyNGUzY2Q0OWEzNzE0NjIwY2I0OTY=", "commit": {"author": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-18T03:12:13Z"}, "committer": {"name": "Bood Qian", "email": "bood@glowing.com", "date": "2017-02-18T03:12:13Z"}, "message": "Merge branch 'master' of github.com:Manishearth/rust-clippy", "tree": {"sha": "d77c1a97e10a1d18ff1fb7bfc0a1bb5a1cc2c11d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d77c1a97e10a1d18ff1fb7bfc0a1bb5a1cc2c11d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97d46232b4df2230dfc24e3cd49a3714620cb496", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97d46232b4df2230dfc24e3cd49a3714620cb496", "html_url": "https://github.com/rust-lang/rust/commit/97d46232b4df2230dfc24e3cd49a3714620cb496", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97d46232b4df2230dfc24e3cd49a3714620cb496/comments", "author": null, "committer": null, "parents": [{"sha": "9d8dc689c73ae1738a0c02e68e5748e16499c0cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d8dc689c73ae1738a0c02e68e5748e16499c0cd", "html_url": "https://github.com/rust-lang/rust/commit/9d8dc689c73ae1738a0c02e68e5748e16499c0cd"}, {"sha": "0682c950bc71421783e8b5c15e0dfbe04496c616", "url": "https://api.github.com/repos/rust-lang/rust/commits/0682c950bc71421783e8b5c15e0dfbe04496c616", "html_url": "https://github.com/rust-lang/rust/commit/0682c950bc71421783e8b5c15e0dfbe04496c616"}], "stats": {"total": 163, "additions": 154, "deletions": 9}, "files": [{"sha": "951fdc70d19f0f5c3cd0ca6e6792acd65f1fe50e", "filename": "CHANGELOG.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97d46232b4df2230dfc24e3cd49a3714620cb496/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/97d46232b4df2230dfc24e3cd49a3714620cb496/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=97d46232b4df2230dfc24e3cd49a3714620cb496", "patch": "@@ -1,6 +1,7 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+* New [`never_loop`] lint\n * New [`mut_from_ref`] lint\n \n ## 0.0.114 \u2014 2017-02-08\n@@ -384,6 +385,7 @@ All notable changes to this project will be documented in this file.\n [`needless_return`]: https://github.com/Manishearth/rust-clippy/wiki#needless_return\n [`needless_update`]: https://github.com/Manishearth/rust-clippy/wiki#needless_update\n [`neg_multiply`]: https://github.com/Manishearth/rust-clippy/wiki#neg_multiply\n+[`never_loop`]: https://github.com/Manishearth/rust-clippy/wiki#never_loop\n [`new_ret_no_self`]: https://github.com/Manishearth/rust-clippy/wiki#new_ret_no_self\n [`new_without_default`]: https://github.com/Manishearth/rust-clippy/wiki#new_without_default\n [`new_without_default_derive`]: https://github.com/Manishearth/rust-clippy/wiki#new_without_default_derive"}, {"sha": "a2f82d76d449f9d9ebb1e3dc15083756ea85d73c", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97d46232b4df2230dfc24e3cd49a3714620cb496/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/97d46232b4df2230dfc24e3cd49a3714620cb496/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=97d46232b4df2230dfc24e3cd49a3714620cb496", "patch": "@@ -291,6 +291,7 @@ name\n [needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                                     | warn    | using a return statement like `return expr;` where an expression would suffice\n [needless_update](https://github.com/Manishearth/rust-clippy/wiki#needless_update)                                     | warn    | using `Foo { ..base }` when there are no missing fields\n [neg_multiply](https://github.com/Manishearth/rust-clippy/wiki#neg_multiply)                                           | warn    | multiplying integers with -1\n+[never_loop](https://github.com/Manishearth/rust-clippy/wiki#never_loop)                                               | warn    | any loop with an unconditional `break` statement\n [new_ret_no_self](https://github.com/Manishearth/rust-clippy/wiki#new_ret_no_self)                                     | warn    | not returning `Self` in a `new` method\n [new_without_default](https://github.com/Manishearth/rust-clippy/wiki#new_without_default)                             | warn    | `fn new() -> Self` method without `Default` implementation\n [new_without_default_derive](https://github.com/Manishearth/rust-clippy/wiki#new_without_default_derive)               | warn    | `fn new() -> Self` without `#[derive]`able `Default` implementation"}, {"sha": "90c0a5a917224c1d3dd74ef600bd1a71b8accc39", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97d46232b4df2230dfc24e3cd49a3714620cb496/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d46232b4df2230dfc24e3cd49a3714620cb496/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=97d46232b4df2230dfc24e3cd49a3714620cb496", "patch": "@@ -56,7 +56,7 @@ declare_lint! {\n /// **Example:**\n /// ```rust,ignore\n /// let a = &[\n-///     -1, -2, -3 // <= no coma here\n+///     -1, -2, -3 // <= no comma here\n ///     -4, -5, -6\n /// ];\n /// ```"}, {"sha": "417115c2b826fc5f9de6d22a769483cf1512f694", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/97d46232b4df2230dfc24e3cd49a3714620cb496/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d46232b4df2230dfc24e3cd49a3714620cb496/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=97d46232b4df2230dfc24e3cd49a3714620cb496", "patch": "@@ -405,6 +405,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         loops::FOR_LOOP_OVER_RESULT,\n         loops::ITER_NEXT_LOOP,\n         loops::NEEDLESS_RANGE_LOOP,\n+        loops::NEVER_LOOP,\n         loops::REVERSE_RANGE_LOOP,\n         loops::UNUSED_COLLECT,\n         loops::WHILE_LET_LOOP,"}, {"sha": "d7f952255fe283d4273ab0f15c8496a5974b0480", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 67, "deletions": 1, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/97d46232b4df2230dfc24e3cd49a3714620cb496/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d46232b4df2230dfc24e3cd49a3714620cb496/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=97d46232b4df2230dfc24e3cd49a3714620cb496", "patch": "@@ -286,6 +286,23 @@ declare_lint! {\n     \"looping on a map using `iter` when `keys` or `values` would do\"\n }\n \n+/// **What it does:** Checks for loops that contain an unconditional `break`.\n+///\n+/// **Why is this bad?** This loop never loops, all it does is obfuscating the\n+/// code.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// loop { ..; break; }\n+/// ```\n+declare_lint! {\n+    pub NEVER_LOOP,\n+    Warn,\n+    \"any loop with an unconditional `break` statement\"\n+}\n+\n #[derive(Copy, Clone)]\n pub struct Pass;\n \n@@ -303,7 +320,8 @@ impl LintPass for Pass {\n                     EXPLICIT_COUNTER_LOOP,\n                     EMPTY_LOOP,\n                     WHILE_LET_ON_ITERATOR,\n-                    FOR_KV_MAP)\n+                    FOR_KV_MAP,\n+                    NEVER_LOOP)\n     }\n }\n \n@@ -324,6 +342,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                           \"empty `loop {}` detected. You may want to either use `panic!()` or add \\\n                            `std::thread::sleep(..);` to the loop body.\");\n             }\n+            if never_loop_block(block) {\n+                span_lint(cx, NEVER_LOOP, expr.span, \"this loop never actually loops\");\n+            }\n \n             // extract the expression from the first statement (if any) in a block\n             let inner_stmt_expr = extract_expr_from_first_stmt(block);\n@@ -402,6 +423,51 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n     }\n }\n \n+fn never_loop_block(block: &Block) -> bool {\n+    block.stmts.iter().any(never_loop_stmt) || block.expr.as_ref().map_or(false, |e| never_loop_expr(e))\n+}\n+\n+fn never_loop_stmt(stmt: &Stmt) -> bool {\n+    match stmt.node {\n+        StmtSemi(ref e, _) |\n+        StmtExpr(ref e, _) => never_loop_expr(e),\n+        StmtDecl(ref d, _) => never_loop_decl(d),\n+    }\n+}\n+\n+fn never_loop_decl(decl: &Decl) -> bool {\n+    if let DeclLocal(ref local) = decl.node {\n+        local.init.as_ref().map_or(false, |e| never_loop_expr(e))\n+    } else {\n+        false\n+    }\n+}\n+\n+fn never_loop_expr(expr: &Expr) -> bool {\n+    match expr.node {\n+        ExprBreak(..) | ExprRet(..) => true,\n+        ExprBox(ref e) |\n+        ExprUnary(_, ref e) |\n+        ExprBinary(_, ref e, _) | // because short-circuiting\n+        ExprCast(ref e, _) |\n+        ExprType(ref e, _) |\n+        ExprField(ref e, _) |\n+        ExprTupField(ref e, _) |\n+        ExprRepeat(ref e, _) |\n+        ExprAddrOf(_, ref e) => never_loop_expr(e),\n+        ExprAssign(ref e1, ref e2) |\n+        ExprAssignOp(_, ref e1, ref e2) |\n+        ExprIndex(ref e1, ref e2) => never_loop_expr(e1) || never_loop_expr(e2),\n+        ExprArray(ref es) |\n+        ExprTup(ref es) |\n+        ExprMethodCall(_, _, ref es) => es.iter().any(|e| never_loop_expr(e)),\n+        ExprCall(ref e, ref es) => never_loop_expr(e) || es.iter().any(|e| never_loop_expr(e)),\n+        ExprBlock(ref block) => never_loop_block(block),\n+        ExprStruct(_, _, ref base) => base.as_ref().map_or(false, |e| never_loop_expr(e)),\n+        _ => false,\n+    }\n+}\n+\n fn check_for_loop<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     pat: &'tcx Pat,"}, {"sha": "9d67ba3958a8e7b5699c38fe6313bdb2b2e1405f", "filename": "src/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97d46232b4df2230dfc24e3cd49a3714620cb496/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d46232b4df2230dfc24e3cd49a3714620cb496/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=97d46232b4df2230dfc24e3cd49a3714620cb496", "patch": "@@ -182,7 +182,7 @@ pub fn main() {\n             .map(AsRef::as_ref)) {\n             metadata\n         } else {\n-            let _ = io::stderr().write_fmt(format_args!(\"error: Could not obtain cargo metadata.\"));\n+            let _ = io::stderr().write_fmt(format_args!(\"error: Could not obtain cargo metadata.\\n\"));\n             process::exit(101);\n         };\n "}, {"sha": "03064bf5ae74ad8ea653c520ce55b945fcc2363b", "filename": "tests/ui/formatting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97d46232b4df2230dfc24e3cd49a3714620cb496/tests%2Fui%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d46232b4df2230dfc24e3cd49a3714620cb496/tests%2Fui%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.rs?ref=97d46232b4df2230dfc24e3cd49a3714620cb496", "patch": "@@ -99,13 +99,13 @@ fn main() {\n \n     // possible missing comma in an array\n     let _ = &[\n-        -1, -2, -3 // <= no coma here\n+        -1, -2, -3 // <= no comma here\n \n \n         -4, -5, -6\n     ];\n     let _ = &[\n-        -1, -2, -3 // <= no coma here\n+        -1, -2, -3 // <= no comma here\n \n \n         *4, -5, -6"}, {"sha": "c59a202de5ff373e66c50e97f996e2c7fbc53729", "filename": "tests/ui/formatting.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97d46232b4df2230dfc24e3cd49a3714620cb496/tests%2Fui%2Fformatting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d46232b4df2230dfc24e3cd49a3714620cb496/tests%2Fui%2Fformatting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fformatting.stderr?ref=97d46232b4df2230dfc24e3cd49a3714620cb496", "patch": "@@ -92,7 +92,7 @@ error: this looks like you are trying to use `.. != ..`, but you really are doin\n error: possibly missing a comma here\n    --> $DIR/formatting.rs:102:19\n     |\n-102 |         -1, -2, -3 // <= no coma here\n+102 |         -1, -2, -3 // <= no comma here\n     |                   ^\n     |\n     = note: #[deny(possible_missing_comma)] implied by #[deny(clippy)]\n@@ -106,7 +106,7 @@ note: lint level defined here\n error: possibly missing a comma here\n    --> $DIR/formatting.rs:108:19\n     |\n-108 |         -1, -2, -3 // <= no coma here\n+108 |         -1, -2, -3 // <= no comma here\n     |                   ^\n     |\n     = note: #[deny(possible_missing_comma)] implied by #[deny(clippy)]"}, {"sha": "087f1a1e6af3c32e3137c1bcf14b80b9b637948f", "filename": "tests/ui/never_loop.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/97d46232b4df2230dfc24e3cd49a3714620cb496/tests%2Fui%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d46232b4df2230dfc24e3cd49a3714620cb496/tests%2Fui%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.rs?ref=97d46232b4df2230dfc24e3cd49a3714620cb496", "patch": "@@ -0,0 +1,34 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(never_loop)]\n+#![allow(dead_code, unused)]\n+\n+fn main() {\n+    loop {\n+        println!(\"This is only ever printed once\");\n+        break;\n+    }\n+\n+    let x = 1;\n+    loop {\n+        println!(\"This, too\"); // but that's OK\n+        if x == 1 {\n+            break;\n+        }\n+    }\n+\n+    loop {\n+        loop {\n+            // another one\n+            break;\n+        }\n+        break;\n+    }\n+\n+    loop {\n+        loop {\n+            if x == 1 { return; }\n+        }\n+    }\n+}"}, {"sha": "ebb98a6cf1461e226a13c4d2b1c32729cb52e098", "filename": "tests/ui/never_loop.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/97d46232b4df2230dfc24e3cd49a3714620cb496/tests%2Fui%2Fnever_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/97d46232b4df2230dfc24e3cd49a3714620cb496/tests%2Fui%2Fnever_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnever_loop.stderr?ref=97d46232b4df2230dfc24e3cd49a3714620cb496", "patch": "@@ -0,0 +1,41 @@\n+error: this loop never actually loops\n+  --> $DIR/never_loop.rs:8:5\n+   |\n+8  |       loop {\n+   |  _____^ starting here...\n+9  | |         println!(\"This is only ever printed once\");\n+10 | |         break;\n+11 | |     }\n+   | |_____^ ...ending here\n+   |\n+note: lint level defined here\n+  --> $DIR/never_loop.rs:4:9\n+   |\n+4  | #![deny(never_loop)]\n+   |         ^^^^^^^^^^\n+\n+error: this loop never actually loops\n+  --> $DIR/never_loop.rs:21:5\n+   |\n+21 |       loop {\n+   |  _____^ starting here...\n+22 | |         loop {\n+23 | |             // another one\n+24 | |             break;\n+25 | |         }\n+26 | |         break;\n+27 | |     }\n+   | |_____^ ...ending here\n+\n+error: this loop never actually loops\n+  --> $DIR/never_loop.rs:22:9\n+   |\n+22 |           loop {\n+   |  _________^ starting here...\n+23 | |             // another one\n+24 | |             break;\n+25 | |         }\n+   | |_________^ ...ending here\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "1eb067e9684d502fe8b61e1f61f6f1f3118e02e8", "filename": "tests/ui/unused_labels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97d46232b4df2230dfc24e3cd49a3714620cb496/tests%2Fui%2Funused_labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d46232b4df2230dfc24e3cd49a3714620cb496/tests%2Fui%2Funused_labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_labels.rs?ref=97d46232b4df2230dfc24e3cd49a3714620cb496", "patch": "@@ -1,7 +1,7 @@\n #![plugin(clippy)]\n #![feature(plugin)]\n \n-#![allow(dead_code, items_after_statements)]\n+#![allow(dead_code, items_after_statements, never_loop)]\n #![deny(unused_label)]\n \n fn unused_label() {"}, {"sha": "253aebe4444347ab7d2b2aa7724d5a1d8aa0b586", "filename": "tests/ui/while_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97d46232b4df2230dfc24e3cd49a3714620cb496/tests%2Fui%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d46232b4df2230dfc24e3cd49a3714620cb496/tests%2Fui%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhile_loop.rs?ref=97d46232b4df2230dfc24e3cd49a3714620cb496", "patch": "@@ -2,7 +2,7 @@\n #![plugin(clippy)]\n \n #![deny(while_let_loop, empty_loop, while_let_on_iterator)]\n-#![allow(dead_code, unused, cyclomatic_complexity)]\n+#![allow(dead_code, never_loop, unused, cyclomatic_complexity)]\n \n fn main() {\n     let y = Some(true);"}]}