{"sha": "be2c92078b37b6e3a92275403e9670564f818ebb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMmM5MjA3OGIzN2I2ZTNhOTIyNzU0MDNlOTY3MDU2NGY4MThlYmI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-03T23:32:02Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-03T23:49:46Z"}, "message": "Change crust -> extern.", "tree": {"sha": "bdb9be5f0d12bf70f6a296c440d6187b0563d1b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdb9be5f0d12bf70f6a296c440d6187b0563d1b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be2c92078b37b6e3a92275403e9670564f818ebb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be2c92078b37b6e3a92275403e9670564f818ebb", "html_url": "https://github.com/rust-lang/rust/commit/be2c92078b37b6e3a92275403e9670564f818ebb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be2c92078b37b6e3a92275403e9670564f818ebb/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc981654437ab2dd89950ff74fc851095ccd322a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc981654437ab2dd89950ff74fc851095ccd322a", "html_url": "https://github.com/rust-lang/rust/commit/dc981654437ab2dd89950ff74fc851095ccd322a"}], "stats": {"total": 112, "additions": 56, "deletions": 56}, "files": [{"sha": "2476cf0f5a82a420adff97ee13db662557cfd4dc", "filename": "src/libcore/task.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibcore%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibcore%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -612,7 +612,7 @@ type task_local_element = (*libc::c_void, *libc::c_void, fn@(+*libc::c_void));\n // Has to be a pointer at outermost layer; the foreign call returns void *.\n type task_local_map = @dvec::dvec<option<task_local_element>>;\n \n-crust fn cleanup_task_local_map(map_ptr: *libc::c_void) unsafe {\n+extern fn cleanup_task_local_map(map_ptr: *libc::c_void) unsafe {\n     assert !map_ptr.is_null();\n     // Get and keep the single reference that was created at the beginning.\n     let map: task_local_map = unsafe::reinterpret_cast(map_ptr);\n@@ -1250,7 +1250,7 @@ fn test_tls_modify() unsafe {\n #[test]\n fn test_tls_crust_automorestack_memorial_bug() unsafe {\n     // This might result in a stack-canary clobber if the runtime fails to set\n-    // sp_limit to 0 when calling the cleanup crust - it might automatically\n+    // sp_limit to 0 when calling the cleanup extern - it might automatically\n     // jump over to the rust stack, which causes next_c_sp to get recorded as\n     // something within a rust stack segment. Then a subsequent upcall (esp.\n     // for logging, think vsnprintf) would run on a stack smaller than 1 MB."}, {"sha": "bd1266e10d370236dc4cb4b10370f4807b173092", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -257,7 +257,7 @@ type get_addr_data = {\n     output_ch: comm::chan<result::result<[ip_addr]/~,ip_get_addr_err>>\n };\n \n-crust fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n+extern fn get_addr_cb(handle: *uv_getaddrinfo_t, status: libc::c_int,\n                      res: *addrinfo) unsafe {\n     log(debug, \"in get_addr_cb\");\n     let handle_data = get_data_for_req(handle) as"}, {"sha": "f847896e934d8c71e4d86c83f1448997a00441c5", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -1031,13 +1031,13 @@ type tcp_listen_fc_data = {\n     mut active: bool\n };\n \n-crust fn tcp_lfc_close_cb(handle: *uv::ll::uv_tcp_t) unsafe {\n+extern fn tcp_lfc_close_cb(handle: *uv::ll::uv_tcp_t) unsafe {\n     let server_data_ptr = uv::ll::get_data_for_uv_handle(\n         handle) as *tcp_listen_fc_data;\n     comm::send((*server_data_ptr).stream_closed_ch, ());\n }\n \n-crust fn tcp_lfc_on_connection_cb(handle: *uv::ll::uv_tcp_t,\n+extern fn tcp_lfc_on_connection_cb(handle: *uv::ll::uv_tcp_t,\n                                      status: libc::c_int) unsafe {\n     let server_data_ptr = uv::ll::get_data_for_uv_handle(handle)\n         as *tcp_listen_fc_data;\n@@ -1094,7 +1094,7 @@ impl of to_tcp_err_iface for uv::ll::uv_err_data {\n     }\n }\n \n-crust fn on_tcp_read_cb(stream: *uv::ll::uv_stream_t,\n+extern fn on_tcp_read_cb(stream: *uv::ll::uv_stream_t,\n                     nread: libc::ssize_t,\n                     ++buf: uv::ll::uv_buf_t) unsafe {\n     log(debug, #fmt(\"entering on_tcp_read_cb stream: %? nread: %?\",\n@@ -1128,7 +1128,7 @@ crust fn on_tcp_read_cb(stream: *uv::ll::uv_stream_t,\n     log(debug, \"exiting on_tcp_read_cb\");\n }\n \n-crust fn on_alloc_cb(handle: *libc::c_void,\n+extern fn on_alloc_cb(handle: *libc::c_void,\n                      ++suggested_size: size_t)\n     -> uv::ll::uv_buf_t unsafe {\n     log(debug, \"tcp read on_alloc_cb!\");\n@@ -1144,15 +1144,15 @@ type tcp_socket_close_data = {\n     closed_ch: comm::chan<()>\n };\n \n-crust fn tcp_socket_dtor_close_cb(handle: *uv::ll::uv_tcp_t) unsafe {\n+extern fn tcp_socket_dtor_close_cb(handle: *uv::ll::uv_tcp_t) unsafe {\n     let data = uv::ll::get_data_for_uv_handle(handle)\n         as *tcp_socket_close_data;\n     let closed_ch = (*data).closed_ch;\n     comm::send(closed_ch, ());\n     log(debug, \"tcp_socket_dtor_close_cb exiting..\");\n }\n \n-crust fn tcp_write_complete_cb(write_req: *uv::ll::uv_write_t,\n+extern fn tcp_write_complete_cb(write_req: *uv::ll::uv_write_t,\n                               status: libc::c_int) unsafe {\n     let write_data_ptr = uv::ll::get_data_for_req(write_req)\n         as *write_req_data;\n@@ -1178,18 +1178,18 @@ type connect_req_data = {\n     closed_signal_ch: comm::chan<()>\n };\n \n-crust fn stream_error_close_cb(handle: *uv::ll::uv_tcp_t) unsafe {\n+extern fn stream_error_close_cb(handle: *uv::ll::uv_tcp_t) unsafe {\n     let data = uv::ll::get_data_for_uv_handle(handle) as\n         *connect_req_data;\n     comm::send((*data).closed_signal_ch, ());\n     log(debug, #fmt(\"exiting steam_error_close_cb for %?\", handle));\n }\n \n-crust fn tcp_connect_close_cb(handle: *uv::ll::uv_tcp_t) unsafe {\n+extern fn tcp_connect_close_cb(handle: *uv::ll::uv_tcp_t) unsafe {\n     log(debug, #fmt(\"closed client tcp handle %?\", handle));\n }\n \n-crust fn tcp_connect_on_connect_cb(connect_req_ptr: *uv::ll::uv_connect_t,\n+extern fn tcp_connect_on_connect_cb(connect_req_ptr: *uv::ll::uv_connect_t,\n                                    status: libc::c_int) unsafe {\n     let conn_data_ptr = (uv::ll::get_data_for_req(connect_req_ptr)\n                       as *connect_req_data);"}, {"sha": "6e4dc0d426016f951eadc8c6bedf68f7c0da51e8", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -116,7 +116,7 @@ fn recv_timeout<T: copy send>(iotask: iotask,\n }\n \n // INTERNAL API\n-crust fn delayed_send_cb(handle: *uv::ll::uv_timer_t,\n+extern fn delayed_send_cb(handle: *uv::ll::uv_timer_t,\n                                 status: libc::c_int) unsafe {\n     log(debug, #fmt(\"delayed_send_cb handle %? status %?\", handle, status));\n     let timer_done_ch =\n@@ -133,7 +133,7 @@ crust fn delayed_send_cb(handle: *uv::ll::uv_timer_t,\n     }\n }\n \n-crust fn delayed_send_close_cb(handle: *uv::ll::uv_timer_t) unsafe {\n+extern fn delayed_send_close_cb(handle: *uv::ll::uv_timer_t) unsafe {\n     log(debug, #fmt(\"delayed_send_close_cb handle %?\", handle));\n     let timer_done_ch =\n         *(uv::ll::get_data_for_uv_handle(handle) as *comm::chan<()>);"}, {"sha": "119942c783a7ffb9b476c39c92ab14c7febbad4d", "filename": "src/libstd/uv_global_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibstd%2Fuv_global_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibstd%2Fuv_global_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_global_loop.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -116,15 +116,15 @@ fn spawn_loop() -> iotask unsafe {\n \n #[cfg(test)]\n mod test {\n-    crust fn simple_timer_close_cb(timer_ptr: *ll::uv_timer_t) unsafe {\n+    extern fn simple_timer_close_cb(timer_ptr: *ll::uv_timer_t) unsafe {\n         let exit_ch_ptr = ll::get_data_for_uv_handle(\n             timer_ptr as *libc::c_void) as *comm::chan<bool>;\n         let exit_ch = *exit_ch_ptr;\n         comm::send(exit_ch, true);\n         log(debug, #fmt(\"EXIT_CH_PTR simple_timer_close_cb exit_ch_ptr: %?\",\n                        exit_ch_ptr));\n     }\n-    crust fn simple_timer_cb(timer_ptr: *ll::uv_timer_t,\n+    extern fn simple_timer_cb(timer_ptr: *ll::uv_timer_t,\n                              _status: libc::c_int) unsafe {\n         log(debug, \"in simple timer cb\");\n         ll::timer_stop(timer_ptr);"}, {"sha": "9e26862eeee18537a717e3bc26b293010a8a57d5", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -148,10 +148,10 @@ fn send_msg(iotask: iotask,\n }\n \n #[doc =\"Dispatch all pending messages\"]\n-crust fn wake_up_cb(async_handle: *ll::uv_async_t,\n+extern fn wake_up_cb(async_handle: *ll::uv_async_t,\n                     status: int) unsafe {\n \n-    log(debug, #fmt(\"wake_up_cb crust.. handle: %? status: %?\",\n+    log(debug, #fmt(\"wake_up_cb extern.. handle: %? status: %?\",\n                      async_handle, status));\n \n     let loop_ptr = ll::get_loop_for_uv_handle(async_handle);\n@@ -176,7 +176,7 @@ fn begin_teardown(data: *iotask_loop_data) unsafe {\n     ll::close(async_handle as *c_void, tear_down_close_cb);\n }\n \n-crust fn tear_down_close_cb(handle: *ll::uv_async_t) unsafe {\n+extern fn tear_down_close_cb(handle: *ll::uv_async_t) unsafe {\n     let loop_ptr = ll::get_loop_for_uv_handle(handle);\n     let loop_refs = ll::loop_refcount(loop_ptr);\n     log(debug, #fmt(\"tear_down_close_cb called, closing handle at %? refs %?\",\n@@ -186,13 +186,13 @@ crust fn tear_down_close_cb(handle: *ll::uv_async_t) unsafe {\n \n #[cfg(test)]\n mod test {\n-    crust fn async_close_cb(handle: *ll::uv_async_t) unsafe {\n+    extern fn async_close_cb(handle: *ll::uv_async_t) unsafe {\n         log(debug, #fmt(\"async_close_cb handle %?\", handle));\n         let exit_ch = (*(ll::get_data_for_uv_handle(handle)\n                         as *ah_data)).exit_ch;\n         comm::send(exit_ch, ());\n     }\n-    crust fn async_handle_cb(handle: *ll::uv_async_t, status: libc::c_int)\n+    extern fn async_handle_cb(handle: *ll::uv_async_t, status: libc::c_int)\n         unsafe {\n         log(debug, #fmt(\"async_handle_cb handle %? status %?\",handle,status));\n         ll::close(handle, async_close_cb);\n@@ -231,11 +231,11 @@ mod test {\n         ret comm::recv(iotask_port);\n     }\n \n-    crust fn lifetime_handle_close(handle: *libc::c_void) unsafe {\n+    extern fn lifetime_handle_close(handle: *libc::c_void) unsafe {\n         log(debug, #fmt(\"lifetime_handle_close ptr %?\", handle));\n     }\n \n-    crust fn lifetime_async_callback(handle: *libc::c_void,\n+    extern fn lifetime_async_callback(handle: *libc::c_void,\n                                      status: libc::c_int) {\n         log(debug, #fmt(\"lifetime_handle_close ptr %? status %?\",\n                         handle, status));"}, {"sha": "e282c7c15f43cef0331e6c4863e0ad99c1325dbc", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -1016,12 +1016,12 @@ mod test {\n         read_chan: *comm::chan<str>\n     };\n \n-    crust fn after_close_cb(handle: *libc::c_void) {\n+    extern fn after_close_cb(handle: *libc::c_void) {\n         log(debug, #fmt(\"after uv_close! handle ptr: %?\",\n                         handle));\n     }\n \n-    crust fn on_alloc_cb(handle: *libc::c_void,\n+    extern fn on_alloc_cb(handle: *libc::c_void,\n                          ++suggested_size: libc::size_t)\n         -> uv_buf_t unsafe {\n         log(debug, \"on_alloc_cb!\");\n@@ -1033,7 +1033,7 @@ mod test {\n         ret buf_init(char_ptr, suggested_size as uint);\n     }\n \n-    crust fn on_read_cb(stream: *uv_stream_t,\n+    extern fn on_read_cb(stream: *uv_stream_t,\n                         nread: libc::ssize_t,\n                         ++buf: uv_buf_t) unsafe {\n         let nread = nread as int;\n@@ -1067,7 +1067,7 @@ mod test {\n         log(debug, \"CLIENT exiting on_read_cb\");\n     }\n \n-    crust fn on_write_complete_cb(write_req: *uv_write_t,\n+    extern fn on_write_complete_cb(write_req: *uv_write_t,\n                                   status: libc::c_int) unsafe {\n         log(debug, #fmt(\"CLIENT beginning on_write_complete_cb status: %d\",\n                          status as int));\n@@ -1079,7 +1079,7 @@ mod test {\n                          result as int));\n     }\n \n-    crust fn on_connect_cb(connect_req_ptr: *uv_connect_t,\n+    extern fn on_connect_cb(connect_req_ptr: *uv_connect_t,\n                                  status: libc::c_int) unsafe {\n         log(debug, #fmt(\"beginning on_connect_cb .. status: %d\",\n                          status as int));\n@@ -1184,12 +1184,12 @@ mod test {\n \n     }\n \n-    crust fn server_after_close_cb(handle: *libc::c_void) unsafe {\n+    extern fn server_after_close_cb(handle: *libc::c_void) unsafe {\n         log(debug, #fmt(\"SERVER server stream closed, should exit.. h: %?\",\n                    handle));\n     }\n \n-    crust fn client_stream_after_close_cb(handle: *libc::c_void)\n+    extern fn client_stream_after_close_cb(handle: *libc::c_void)\n         unsafe {\n         log(debug, \"SERVER: closed client stream, now closing server stream\");\n         let client_data = get_data_for_uv_handle(\n@@ -1199,15 +1199,15 @@ mod test {\n                       server_after_close_cb);\n     }\n \n-    crust fn after_server_resp_write(req: *uv_write_t) unsafe {\n+    extern fn after_server_resp_write(req: *uv_write_t) unsafe {\n         let client_stream_ptr =\n             get_stream_handle_from_write_req(req);\n         log(debug, \"SERVER: resp sent... closing client stream\");\n         close(client_stream_ptr as *libc::c_void,\n                       client_stream_after_close_cb)\n     }\n \n-    crust fn on_server_read_cb(client_stream_ptr: *uv_stream_t,\n+    extern fn on_server_read_cb(client_stream_ptr: *uv_stream_t,\n                                nread: libc::ssize_t,\n                                ++buf: uv_buf_t) unsafe {\n         let nread = nread as int;\n@@ -1268,7 +1268,7 @@ mod test {\n         log(debug, \"SERVER exiting on_read_cb\");\n     }\n \n-    crust fn server_connection_cb(server_stream_ptr:\n+    extern fn server_connection_cb(server_stream_ptr:\n                                     *uv_stream_t,\n                                   status: libc::c_int) unsafe {\n         log(debug, \"client connecting!\");\n@@ -1335,12 +1335,12 @@ mod test {\n         continue_chan: *comm::chan<bool>\n     };\n \n-    crust fn async_close_cb(handle: *libc::c_void) {\n+    extern fn async_close_cb(handle: *libc::c_void) {\n         log(debug, #fmt(\"SERVER: closing async cb... h: %?\",\n                    handle));\n     }\n \n-    crust fn continue_async_cb(async_handle: *uv_async_t,\n+    extern fn continue_async_cb(async_handle: *uv_async_t,\n                                status: libc::c_int) unsafe {\n         // once we're in the body of this callback,\n         // the tcp server's loop is set up, so we"}, {"sha": "9419b9f647e86b0b2d61cf2f227c92026dc585c2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -563,7 +563,7 @@ enum purity {\n     pure_fn, // declared with \"pure fn\"\n     unsafe_fn, // declared with \"unsafe fn\"\n     impure_fn, // declared with \"fn\"\n-    extern_fn, // declared with \"crust fn\"\n+    extern_fn, // declared with \"extern fn\"\n }\n \n #[auto_serialize]"}, {"sha": "39a5215b779b05b861688be52883cb9aace1e6ba", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -1009,7 +1009,7 @@ fn trans_foreign_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n \n         fn build_args(bcx: block, tys: @c_stack_tys,\n                       llargbundle: ValueRef) -> ~[ValueRef] {\n-            let _icx = bcx.insn_ctxt(\"foreign::crust::shim::build_args\");\n+            let _icx = bcx.insn_ctxt(\"foreign::extern::shim::build_args\");\n             let mut llargvals = ~[];\n             let mut i = 0u;\n             let n = vec::len(tys.arg_tys);"}, {"sha": "08927d60fb8f000ce7e3a0a751646ffc8c0981a0", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -2031,7 +2031,7 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n         }\n       }\n       ast::def_fn(id, ast::extern_fn) {\n-        // Crust functions are just u8 pointers\n+        // extern functions are just u8 pointers\n         ret {\n             bounds: @~[],\n             rp: ast::rp_none,"}, {"sha": "e53f4ee6940427507bcda179852c7f1432b9a017", "filename": "src/test/compile-fail/extern-no-call.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Fcompile-fail%2Fextern-no-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Fcompile-fail%2Fextern-no-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-no-call.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -1,5 +1,5 @@\n // error-pattern:expected function or foreign function but found *u8\n-crust fn f() {\n+extern fn f() {\n }\n \n fn main() {", "previous_filename": "src/test/compile-fail/crust-no-call.rs"}, {"sha": "3f17f61dc0596bf4e3d86a5c00b1053c61599db8", "filename": "src/test/compile-fail/extern-wrong-value-type.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -1,8 +1,8 @@\n // error-pattern:expected `fn()` but found `*u8`\n-crust fn f() {\n+extern fn f() {\n }\n \n fn main() {\n-    // Crust functions are *u8 types\n+    // extern functions are *u8 types\n     let _x: fn() = f;\n }\n\\ No newline at end of file", "previous_filename": "src/test/compile-fail/crust-wrong-value-type.rs"}, {"sha": "3632b8324291418c9043a7ce59acf3ec7e80fc19", "filename": "src/test/run-fail/extern-fail.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-fail%2Fextern-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-fail.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -7,7 +7,7 @@ extern mod rustrt {\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n-crust fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n+extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n     if data == 1u {\n         data\n     } else {", "previous_filename": "src/test/run-fail/crust-fail.rs"}, {"sha": "365227821a3a6922e4b38e8c705bc08932fe918f", "filename": "src/test/run-pass/crust-1.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dc981654437ab2dd89950ff74fc851095ccd322a/src%2Ftest%2Frun-pass%2Fcrust-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc981654437ab2dd89950ff74fc851095ccd322a/src%2Ftest%2Frun-pass%2Fcrust-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrust-1.rs?ref=dc981654437ab2dd89950ff74fc851095ccd322a", "patch": "@@ -1,5 +0,0 @@\n-crust fn f() {\n-}\n-\n-fn main() {\n-}\n\\ No newline at end of file"}, {"sha": "c60ef3b63209047aa7686ab97ebb6e9f05ae148d", "filename": "src/test/run-pass/extern-1.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-1.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -0,0 +1,5 @@\n+extern fn f() {\n+}\n+\n+fn main() {\n+}\n\\ No newline at end of file"}, {"sha": "e0d313ea54c03e6f90e4e06387101be64a79dc6f", "filename": "src/test/run-pass/extern-call-deep.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -3,7 +3,7 @@ extern mod rustrt {\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n-crust fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n+extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n     if data == 1u {\n         data\n     } else {", "previous_filename": "src/test/run-pass/crust-call-deep.rs"}, {"sha": "8d7d5fce9bc247cd99e2d8c35fff2e792fbba3ce", "filename": "src/test/run-pass/extern-call-deep2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-deep2.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -3,7 +3,7 @@ extern mod rustrt {\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n-crust fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n+extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n     if data == 1u {\n         data\n     } else {", "previous_filename": "src/test/run-pass/crust-call-deep2.rs"}, {"sha": "daa78ae031e678bfeb95316d7c7e530659404937", "filename": "src/test/run-pass/extern-call-scrub.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call-scrub.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -7,7 +7,7 @@ extern mod rustrt {\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n-crust fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n+extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n     if data == 1u {\n         data\n     } else {", "previous_filename": "src/test/run-pass/crust-call-scrub.rs"}, {"sha": "88ee55d856e8a3962bdbe3598f623853fc807728", "filename": "src/test/run-pass/extern-call.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-call.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -3,7 +3,7 @@ extern mod rustrt {\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n-crust fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n+extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n     if data == 1u {\n         data\n     } else {", "previous_filename": "src/test/run-pass/crust-call.rs"}, {"sha": "4435e18cec219ed06ff3b8ea81a545347ce32dea", "filename": "src/test/run-pass/extern-stress.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -6,7 +6,7 @@ extern mod rustrt {\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n-crust fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n+extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n     if data == 1u {\n         data\n     } else {", "previous_filename": "src/test/run-pass/crust-stress.rs"}, {"sha": "fcbf13eb14a05da6a0a361d7d61c7bbfa1d22759", "filename": "src/test/run-pass/extern-take-value.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-take-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-take-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-take-value.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -1,11 +1,11 @@\n-crust fn f() {\n+extern fn f() {\n }\n \n-crust fn g() {\n+extern fn g() {\n }\n \n fn main() {\n-    // Crust functions are *u8 types\n+    // extern functions are *u8 types\n     let a: *u8 = f;\n     let b: *u8 = f;\n     let c: *u8 = g;", "previous_filename": "src/test/run-pass/crust-take-value.rs"}, {"sha": "bf70e09fdd8e27e1780b406b02c8b8b2080004af", "filename": "src/test/run-pass/extern-yield.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be2c92078b37b6e3a92275403e9670564f818ebb/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=be2c92078b37b6e3a92275403e9670564f818ebb", "patch": "@@ -3,7 +3,7 @@ extern mod rustrt {\n                      data: libc::uintptr_t) -> libc::uintptr_t;\n }\n \n-crust fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n+extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n     if data == 1u {\n         data\n     } else {", "previous_filename": "src/test/run-pass/crust-yield.rs"}]}