{"sha": "9fda05c0bc1c6611e8c6102c46c39a7af847ff08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZGEwNWMwYmMxYzY2MTFlOGM2MTAyYzQ2YzM5YTdhZjg0N2ZmMDg=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-10-18T06:03:50Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2017-10-18T06:03:50Z"}, "message": "rustdoc: add a primitive page for \"unit\"\n\nIn `src/libstd/primitive_docs.rs`, a `#[doc(primitive = \"unit\")]`\nsection has sat long neglected.  This patch teaches rustdoc to recognize\n\"unit\", and steals its trait implementations away from the tuple page.", "tree": {"sha": "492a573f82bbba429608ec4b45afc3128d86e0ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/492a573f82bbba429608ec4b45afc3128d86e0ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fda05c0bc1c6611e8c6102c46c39a7af847ff08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fda05c0bc1c6611e8c6102c46c39a7af847ff08", "html_url": "https://github.com/rust-lang/rust/commit/9fda05c0bc1c6611e8c6102c46c39a7af847ff08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fda05c0bc1c6611e8c6102c46c39a7af847ff08/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6d7514545cbe83e771a400d04049b96dfb210cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d7514545cbe83e771a400d04049b96dfb210cd", "html_url": "https://github.com/rust-lang/rust/commit/f6d7514545cbe83e771a400d04049b96dfb210cd"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "ad171c4babbce4f0f4e852ce5b42af18b7570cb8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9fda05c0bc1c6611e8c6102c46c39a7af847ff08/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fda05c0bc1c6611e8c6102c46c39a7af847ff08/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9fda05c0bc1c6611e8c6102c46c39a7af847ff08", "patch": "@@ -238,6 +238,7 @@ impl Clean<ExternalCrate> for CrateNum {\n                             if prim.is_some() {\n                                 break;\n                             }\n+                            // FIXME: should warn on unknown primitives?\n                         }\n                     }\n                 }\n@@ -1627,6 +1628,7 @@ pub enum PrimitiveType {\n     Slice,\n     Array,\n     Tuple,\n+    Unit,\n     RawPointer,\n     Reference,\n     Fn,\n@@ -1662,7 +1664,11 @@ impl Type {\n             Primitive(p) | BorrowedRef { type_: box Primitive(p), ..} => Some(p),\n             Slice(..) | BorrowedRef { type_: box Slice(..), .. } => Some(PrimitiveType::Slice),\n             Array(..) | BorrowedRef { type_: box Array(..), .. } => Some(PrimitiveType::Array),\n-            Tuple(..) => Some(PrimitiveType::Tuple),\n+            Tuple(ref tys) => if tys.is_empty() {\n+                Some(PrimitiveType::Unit)\n+            } else {\n+                Some(PrimitiveType::Tuple)\n+            },\n             RawPointer(..) => Some(PrimitiveType::RawPointer),\n             BorrowedRef { type_: box Generic(..), .. } => Some(PrimitiveType::Reference),\n             BareFunction(..) => Some(PrimitiveType::Fn),\n@@ -1708,7 +1714,11 @@ impl GetDefId for Type {\n             BorrowedRef { type_: box Generic(..), .. } =>\n                 Primitive(PrimitiveType::Reference).def_id(),\n             BorrowedRef { ref type_, .. } => type_.def_id(),\n-            Tuple(..) => Primitive(PrimitiveType::Tuple).def_id(),\n+            Tuple(ref tys) => if tys.is_empty() {\n+                Primitive(PrimitiveType::Unit).def_id()\n+            } else {\n+                Primitive(PrimitiveType::Tuple).def_id()\n+            },\n             BareFunction(..) => Primitive(PrimitiveType::Fn).def_id(),\n             Slice(..) => Primitive(PrimitiveType::Slice).def_id(),\n             Array(..) => Primitive(PrimitiveType::Array).def_id(),\n@@ -1742,6 +1752,7 @@ impl PrimitiveType {\n             \"array\" => Some(PrimitiveType::Array),\n             \"slice\" => Some(PrimitiveType::Slice),\n             \"tuple\" => Some(PrimitiveType::Tuple),\n+            \"unit\" => Some(PrimitiveType::Unit),\n             \"pointer\" => Some(PrimitiveType::RawPointer),\n             \"reference\" => Some(PrimitiveType::Reference),\n             \"fn\" => Some(PrimitiveType::Fn),\n@@ -1772,6 +1783,7 @@ impl PrimitiveType {\n             Array => \"array\",\n             Slice => \"slice\",\n             Tuple => \"tuple\",\n+            Unit => \"unit\",\n             RawPointer => \"pointer\",\n             Reference => \"reference\",\n             Fn => \"fn\",\n@@ -2693,6 +2705,7 @@ fn build_deref_target_impls(cx: &DocContext,\n             Slice => tcx.lang_items().slice_impl(),\n             Array => tcx.lang_items().slice_impl(),\n             Tuple => None,\n+            Unit => None,\n             RawPointer => tcx.lang_items().const_ptr_impl(),\n             Reference => None,\n             Fn => None,"}, {"sha": "18d6b1cc1e0f06fd26c248b2a87b47ab59d3c55d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9fda05c0bc1c6611e8c6102c46c39a7af847ff08/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fda05c0bc1c6611e8c6102c46c39a7af847ff08/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9fda05c0bc1c6611e8c6102c46c39a7af847ff08", "patch": "@@ -614,7 +614,7 @@ fn fmt_type(t: &clean::Type, f: &mut fmt::Formatter, use_absolute: bool) -> fmt:\n         }\n         clean::Tuple(ref typs) => {\n             match &typs[..] {\n-                &[] => primitive_link(f, PrimitiveType::Tuple, \"()\"),\n+                &[] => primitive_link(f, PrimitiveType::Unit, \"()\"),\n                 &[ref one] => {\n                     primitive_link(f, PrimitiveType::Tuple, \"(\")?;\n                     //carry f.alternate() into this display w/o branching manually"}]}