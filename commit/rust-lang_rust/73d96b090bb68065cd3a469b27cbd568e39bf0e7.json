{"sha": "73d96b090bb68065cd3a469b27cbd568e39bf0e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZDk2YjA5MGJiNjgwNjVjZDNhNDY5YjI3Y2JkNTY4ZTM5YmYwZTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-16T09:38:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-08-16T09:38:18Z"}, "message": "Auto merge of #88032 - hyd-dev:no-mangle-method, r=petrochenkov\n\nFix `reachable_set` for non-function items in non-library crates\n\nI unintentionally changed `reachable_set` to ignore non-function items when `!self.any_library` in https://github.com/rust-lang/rust/pull/86492, which can lead to \"undefined reference\" errors in non-library (`cdylib`/`staticlib`/`bin`) crates, for example: https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=6bb2c5065a9be7e40943d0541e161b5a\n\nThis PR restores the behavior of `reachable_set` for non-function items.\n\nFixes https://github.com/rust-lang/rust/issues/88016.\n\n<details>\n<summary>The modified test will fail with this output without the `reachable_set` change</summary>\n\n```\n---- [codegen] codegen/external-no-mangle-statics.rs#staticlib stdout ----\n\nerror in revision `staticlib`: verification with 'FileCheck' failed\nstatus: exit status: 1\ncommand: \"/checkout/build/x86_64-unknown-linux-gnu/ci-llvm/bin/FileCheck\" \"--input-file\" \"/checkout/build/x86_64-unknown-linux-gnu/test/codegen/external-no-mangle-statics.staticlib/external-no-mangle-statics.ll\" \"/checkout/src/test/codegen/external-no-mangle-statics.rs\" \"--check-prefixes\" \"CHECK,NONMSVC,staticlib\"\nstdout:\n------------------------------------------\n\n------------------------------------------\nstderr:\n------------------------------------------\n/checkout/src/test/codegen/external-no-mangle-statics.rs:10:11: error: CHECK: expected string not found in input\n// CHECK: `@A` = local_unnamed_addr constant\n          ^\n/checkout/build/x86_64-unknown-linux-gnu/test/codegen/external-no-mangle-statics.staticlib/external-no-mangle-statics.ll:1:1: note: scanning from here\n; ModuleID = 'external_no_mangle_statics.b50529d3-cgu.0'\n^\n/checkout/build/x86_64-unknown-linux-gnu/test/codegen/external-no-mangle-statics.staticlib/external-no-mangle-statics.ll:1:6: note: possible intended match here\n; ModuleID = 'external_no_mangle_statics.b50529d3-cgu.0'\n     ^\n\nInput file: /checkout/build/x86_64-unknown-linux-gnu/test/codegen/external-no-mangle-statics.staticlib/external-no-mangle-statics.ll\nCheck file: /checkout/src/test/codegen/external-no-mangle-statics.rs\n\n-dump-input=help explains the following input dump.\n\nInput was:\n<<<<<<\n            1: ; ModuleID = 'external_no_mangle_statics.b50529d3-cgu.0'\ncheck:10'0     X~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ error: no match found\ncheck:10'1          ?                                                   possible intended match\n            2: source_filename = \"external_no_mangle_statics.b50529d3-cgu.0\"\ncheck:10'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n            3: target datalayout = \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\ncheck:10'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n            4: target triple = \"x86_64-unknown-linux-gnu\"\ncheck:10'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n            5:\ncheck:10'0     ~\n            6: !llvm.module.flags = !{!0, !1}\ncheck:10'0     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n            .\n            .\n            .\n>>>>>>\n\n------------------------------------------\n\nfailures:\n    [codegen] codegen/external-no-mangle-statics.rs#staticlib\n```\n</details>", "tree": {"sha": "f066443002bd89843a317e250065a7e0e2c8a2b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f066443002bd89843a317e250065a7e0e2c8a2b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73d96b090bb68065cd3a469b27cbd568e39bf0e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73d96b090bb68065cd3a469b27cbd568e39bf0e7", "html_url": "https://github.com/rust-lang/rust/commit/73d96b090bb68065cd3a469b27cbd568e39bf0e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73d96b090bb68065cd3a469b27cbd568e39bf0e7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92f3753b073c03184118a315cc0d289116102ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/92f3753b073c03184118a315cc0d289116102ae1", "html_url": "https://github.com/rust-lang/rust/commit/92f3753b073c03184118a315cc0d289116102ae1"}, {"sha": "29b73ee5fa04e4ccbd1468e50fb88470b03d4d27", "url": "https://api.github.com/repos/rust-lang/rust/commits/29b73ee5fa04e4ccbd1468e50fb88470b03d4d27", "html_url": "https://github.com/rust-lang/rust/commit/29b73ee5fa04e4ccbd1468e50fb88470b03d4d27"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "5ca098c22878b8d52934b52ae13df55533973499", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/73d96b090bb68065cd3a469b27cbd568e39bf0e7/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d96b090bb68065cd3a469b27cbd568e39bf0e7/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=73d96b090bb68065cd3a469b27cbd568e39bf0e7", "patch": "@@ -211,21 +211,22 @@ impl<'tcx> ReachableContext<'tcx> {\n         if !self.any_library {\n             // If we are building an executable, only explicitly extern\n             // types need to be exported.\n-            if let Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, ..), def_id, .. })\n-            | Node::ImplItem(hir::ImplItem {\n-                kind: hir::ImplItemKind::Fn(sig, ..),\n-                def_id,\n-                ..\n-            }) = *node\n-            {\n-                let reachable = sig.header.abi != Abi::Rust;\n-                let codegen_attrs = self.tcx.codegen_fn_attrs(*def_id);\n-                let is_extern = codegen_attrs.contains_extern_indicator();\n-                let std_internal =\n-                    codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL);\n-                if reachable || is_extern || std_internal {\n-                    self.reachable_symbols.insert(search_item);\n-                }\n+            let reachable =\n+                if let Node::Item(hir::Item { kind: hir::ItemKind::Fn(sig, ..), .. })\n+                | Node::ImplItem(hir::ImplItem {\n+                    kind: hir::ImplItemKind::Fn(sig, ..), ..\n+                }) = *node\n+                {\n+                    sig.header.abi != Abi::Rust\n+                } else {\n+                    false\n+                };\n+            let codegen_attrs = self.tcx.codegen_fn_attrs(search_item);\n+            let is_extern = codegen_attrs.contains_extern_indicator();\n+            let std_internal =\n+                codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL);\n+            if reachable || is_extern || std_internal {\n+                self.reachable_symbols.insert(search_item);\n             }\n         } else {\n             // If we are building a library, then reachable symbols will"}, {"sha": "6274434cd8fcc3754c844fd5a38c0b233f061bf0", "filename": "src/test/codegen/external-no-mangle-statics.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73d96b090bb68065cd3a469b27cbd568e39bf0e7/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73d96b090bb68065cd3a469b27cbd568e39bf0e7/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs?ref=73d96b090bb68065cd3a469b27cbd568e39bf0e7", "patch": "@@ -1,10 +1,11 @@\n+// revisions: lib staticlib\n // ignore-emscripten default visibility is hidden\n // compile-flags: -O\n // `#[no_mangle]`d static variables always have external linkage, i.e., no `internal` in their\n // definitions\n \n-#![crate_type = \"lib\"]\n-#![no_std]\n+#![cfg_attr(lib, crate_type = \"lib\")]\n+#![cfg_attr(staticlib, crate_type = \"staticlib\")]\n \n // CHECK: @A = local_unnamed_addr constant\n #[no_mangle]"}]}