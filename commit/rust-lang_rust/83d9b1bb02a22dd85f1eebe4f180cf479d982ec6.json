{"sha": "83d9b1bb02a22dd85f1eebe4f180cf479d982ec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzZDliMWJiMDJhMjJkZDg1ZjFlZWJlNGYxODBjZjQ3OWQ5ODJlYzY=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-21T22:37:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-21T22:37:49Z"}, "message": "Rollup merge of #86334 - LeSeulArtichaut:86120-links-type-aliases, r=jyn514\n\nResolve type aliases to the type they point to in intra-doc links\n\nThis feels a bit sketchy, but I think it's better than just rejecting the link.\nHelps with #86120, r? ``@jyn514``", "tree": {"sha": "6eac587ad96c0553f7edf0f4680ba014e5ea0e32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6eac587ad96c0553f7edf0f4680ba014e5ea0e32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83d9b1bb02a22dd85f1eebe4f180cf479d982ec6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg0RS+CRBK7hj4Ov3rIwAAMyQIAEAiuOAZ6XWKzyfiJhZWO/Xc\nLieaCiJEbzYhqeNk7aD7Au50hnAWY1nmJmq8eR/COicH9ucD6ypraZtnHLZsId06\n4RZD8ENW3UBGqxsqvCXULtgkX7ByWEZtVOIFBReMHOUVU7o4kFTe7DeWM6wvBZnM\nXg1thiHffnlMjEtEHOoP3n3vpBqESXa+9h8iONf3DcaKBMPD9JeZoP9x9eItYrNK\nlDe8foqb8/0Q6dmaB+lBynG5YYikeb8QNOQd7xWUfknBrOCTPsIFDrcYyxt0NE44\npdPOx+aIwdXHKMgWle+HAw7AgCqk//+cGexeQJVQoEuUCnLotUt7FZo6kjjOANM=\n=+D4Q\n-----END PGP SIGNATURE-----\n", "payload": "tree 6eac587ad96c0553f7edf0f4680ba014e5ea0e32\nparent 7dca2e276df7f2babce704f9b757bcfdb788fee1\nparent dd90900cf479c0282d023a7c694610e0a2ca3177\nauthor Yuki Okushi <jtitor@2k36.org> 1624315069 +0900\ncommitter GitHub <noreply@github.com> 1624315069 +0900\n\nRollup merge of #86334 - LeSeulArtichaut:86120-links-type-aliases, r=jyn514\n\nResolve type aliases to the type they point to in intra-doc links\n\nThis feels a bit sketchy, but I think it's better than just rejecting the link.\nHelps with #86120, r? ``@jyn514``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83d9b1bb02a22dd85f1eebe4f180cf479d982ec6", "html_url": "https://github.com/rust-lang/rust/commit/83d9b1bb02a22dd85f1eebe4f180cf479d982ec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83d9b1bb02a22dd85f1eebe4f180cf479d982ec6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dca2e276df7f2babce704f9b757bcfdb788fee1", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dca2e276df7f2babce704f9b757bcfdb788fee1", "html_url": "https://github.com/rust-lang/rust/commit/7dca2e276df7f2babce704f9b757bcfdb788fee1"}, {"sha": "dd90900cf479c0282d023a7c694610e0a2ca3177", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd90900cf479c0282d023a7c694610e0a2ca3177", "html_url": "https://github.com/rust-lang/rust/commit/dd90900cf479c0282d023a7c694610e0a2ca3177"}], "stats": {"total": 70, "additions": 65, "deletions": 5}, "files": [{"sha": "fb82a075de0a9f56f842238ffdd1c267bd596d28", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/83d9b1bb02a22dd85f1eebe4f180cf479d982ec6/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d9b1bb02a22dd85f1eebe4f180cf479d982ec6/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=83d9b1bb02a22dd85f1eebe4f180cf479d982ec6", "patch": "@@ -544,6 +544,44 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n             })\n     }\n \n+    /// Convert a DefId to a Res, where possible.\n+    ///\n+    /// This is used for resolving type aliases.\n+    fn def_id_to_res(&self, ty_id: DefId) -> Option<Res> {\n+        use PrimitiveType::*;\n+        Some(match *self.cx.tcx.type_of(ty_id).kind() {\n+            ty::Bool => Res::Primitive(Bool),\n+            ty::Char => Res::Primitive(Char),\n+            ty::Int(ity) => Res::Primitive(ity.into()),\n+            ty::Uint(uty) => Res::Primitive(uty.into()),\n+            ty::Float(fty) => Res::Primitive(fty.into()),\n+            ty::Str => Res::Primitive(Str),\n+            ty::Tuple(ref tys) if tys.is_empty() => Res::Primitive(Unit),\n+            ty::Tuple(_) => Res::Primitive(Tuple),\n+            ty::Array(..) => Res::Primitive(Array),\n+            ty::Slice(_) => Res::Primitive(Slice),\n+            ty::RawPtr(_) => Res::Primitive(RawPointer),\n+            ty::Ref(..) => Res::Primitive(Reference),\n+            ty::FnDef(..) => panic!(\"type alias to a function definition\"),\n+            ty::FnPtr(_) => Res::Primitive(Fn),\n+            ty::Never => Res::Primitive(Never),\n+            ty::Adt(&ty::AdtDef { did, .. }, _) | ty::Foreign(did) => {\n+                Res::Def(self.cx.tcx.def_kind(did), did)\n+            }\n+            ty::Projection(_)\n+            | ty::Closure(..)\n+            | ty::Generator(..)\n+            | ty::GeneratorWitness(_)\n+            | ty::Opaque(..)\n+            | ty::Dynamic(..)\n+            | ty::Param(_)\n+            | ty::Bound(..)\n+            | ty::Placeholder(_)\n+            | ty::Infer(_)\n+            | ty::Error(_) => return None,\n+        })\n+    }\n+\n     /// Returns:\n     /// - None if no associated item was found\n     /// - Some((_, _, Some(_))) if an item was found and should go through a side channel\n@@ -559,12 +597,15 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n \n         match root_res {\n             Res::Primitive(prim) => self.resolve_primitive_associated_item(prim, ns, item_name),\n+            Res::Def(DefKind::TyAlias, did) => {\n+                // Resolve the link on the type the alias points to.\n+                // FIXME: if the associated item is defined directly on the type alias,\n+                // it will show up on its documentation page, we should link there instead.\n+                let res = self.def_id_to_res(did)?;\n+                self.resolve_associated_item(res, item_name, ns, module_id)\n+            }\n             Res::Def(\n-                DefKind::Struct\n-                | DefKind::Union\n-                | DefKind::Enum\n-                | DefKind::TyAlias\n-                | DefKind::ForeignTy,\n+                DefKind::Struct | DefKind::Union | DefKind::Enum | DefKind::ForeignTy,\n                 did,\n             ) => {\n                 debug!(\"looking for associated item named {} for item {:?}\", item_name, did);"}, {"sha": "f3609ccd0a1418e19fde32809d7e13216a03e1cb", "filename": "src/test/rustdoc/intra-doc/type-alias.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/83d9b1bb02a22dd85f1eebe4f180cf479d982ec6/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftype-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d9b1bb02a22dd85f1eebe4f180cf479d982ec6/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftype-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Ftype-alias.rs?ref=83d9b1bb02a22dd85f1eebe4f180cf479d982ec6", "patch": "@@ -0,0 +1,19 @@\n+// Regression test for issue #86120.\n+\n+#![deny(broken_intra_doc_links)]\n+#![crate_name = \"foo\"]\n+\n+pub struct Foo;\n+\n+/// You should really try [`Self::bar`]!\n+pub type Bar = Foo;\n+\n+impl Bar {\n+    pub fn bar() {}\n+}\n+\n+/// The minimum is [`Self::MIN`].\n+pub type Int = i32;\n+\n+// @has foo/type.Bar.html '//a[@href=\"struct.Foo.html#method.bar\"]' 'Self::bar'\n+// @has foo/type.Int.html '//a[@href=\"{{channel}}/std/primitive.i32.html#associatedconstant.MIN\"]' 'Self::MIN'"}]}