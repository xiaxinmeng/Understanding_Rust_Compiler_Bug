{"sha": "df9d3db82f1d0dce5f74faf8ae0501a534953f84", "node_id": "C_kwDOAAsO6NoAKGRmOWQzZGI4MmYxZDBkY2U1Zjc0ZmFmOGFlMDUwMWE1MzQ5NTNmODQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-04T11:22:15Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-08-04T11:22:15Z"}, "message": "Trigger flycheck on all transitive dependencies as well", "tree": {"sha": "aa9072a050efce0c48465b7168f30be283fd0a1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa9072a050efce0c48465b7168f30be283fd0a1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df9d3db82f1d0dce5f74faf8ae0501a534953f84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df9d3db82f1d0dce5f74faf8ae0501a534953f84", "html_url": "https://github.com/rust-lang/rust/commit/df9d3db82f1d0dce5f74faf8ae0501a534953f84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df9d3db82f1d0dce5f74faf8ae0501a534953f84/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d73b0d5fc6c6be434bd0e31ddc6572a6efaf6400", "url": "https://api.github.com/repos/rust-lang/rust/commits/d73b0d5fc6c6be434bd0e31ddc6572a6efaf6400", "html_url": "https://github.com/rust-lang/rust/commit/d73b0d5fc6c6be434bd0e31ddc6572a6efaf6400"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "5c93874ca2afaf123e26728edec3bda1e36e7d9c", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/df9d3db82f1d0dce5f74faf8ae0501a534953f84/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df9d3db82f1d0dce5f74faf8ae0501a534953f84/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=df9d3db82f1d0dce5f74faf8ae0501a534953f84", "patch": "@@ -9,7 +9,8 @@ use std::{\n \n use always_assert::always;\n use crossbeam_channel::{select, Receiver};\n-use ide_db::base_db::{SourceDatabaseExt, VfsPath};\n+use ide_db::base_db::{SourceDatabase, SourceDatabaseExt, VfsPath};\n+use itertools::Itertools;\n use lsp_server::{Connection, Notification, Request};\n use lsp_types::notification::Notification as _;\n use vfs::{ChangeKind, FileId};\n@@ -727,9 +728,21 @@ impl GlobalState {\n                     let (vfs, _) = &*this.vfs.read();\n                     if let Some(file_id) = vfs.file_id(&vfs_path) {\n                         let analysis = this.analysis_host.analysis();\n-                        let crate_ids = analysis.crate_for(file_id)?;\n+                        // Crates containing or depending on the saved file\n+                        let crate_ids: Vec<_> = analysis\n+                            .crate_for(file_id)?\n+                            .into_iter()\n+                            .flat_map(|id| {\n+                                this.analysis_host\n+                                    .raw_database()\n+                                    .crate_graph()\n+                                    .transitive_rev_deps(id)\n+                            })\n+                            .sorted()\n+                            .unique()\n+                            .collect();\n \n-                        let paths: Vec<_> = crate_ids\n+                        let crate_root_paths: Vec<_> = crate_ids\n                             .iter()\n                             .filter_map(|&crate_id| {\n                                 analysis\n@@ -740,23 +753,26 @@ impl GlobalState {\n                                     .transpose()\n                             })\n                             .collect::<ide::Cancellable<_>>()?;\n-                        let paths: Vec<_> = paths.iter().map(Deref::deref).collect();\n+                        let crate_root_paths: Vec<_> =\n+                            crate_root_paths.iter().map(Deref::deref).collect();\n \n+                        // Find all workspaces that have at least one target containing the saved file\n                         let workspace_ids =\n                             this.workspaces.iter().enumerate().filter(|(_, ws)| match ws {\n                                 project_model::ProjectWorkspace::Cargo { cargo, .. } => {\n                                     cargo.packages().any(|pkg| {\n-                                        cargo[pkg]\n-                                            .targets\n-                                            .iter()\n-                                            .any(|&it| paths.contains(&cargo[it].root.as_path()))\n+                                        cargo[pkg].targets.iter().any(|&it| {\n+                                            crate_root_paths.contains(&cargo[it].root.as_path())\n+                                        })\n                                     })\n                                 }\n                                 project_model::ProjectWorkspace::Json { project, .. } => project\n                                     .crates()\n                                     .any(|(c, _)| crate_ids.iter().any(|&crate_id| crate_id == c)),\n                                 project_model::ProjectWorkspace::DetachedFiles { .. } => false,\n                             });\n+\n+                        // Find and trigger corresponding flychecks\n                         for flycheck in &this.flycheck {\n                             for (id, _) in workspace_ids.clone() {\n                                 if id == flycheck.id() {"}]}