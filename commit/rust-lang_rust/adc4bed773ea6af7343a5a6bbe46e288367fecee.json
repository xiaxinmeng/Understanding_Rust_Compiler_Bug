{"sha": "adc4bed773ea6af7343a5a6bbe46e288367fecee", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkYzRiZWQ3NzNlYTZhZjczNDNhNWE2YmJlNDZlMjg4MzY3ZmVjZWU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-15T00:32:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-11-15T18:26:49Z"}, "message": "librustc: Implement (and require) explicit self for derivable traits. r=nmatsakis", "tree": {"sha": "1718d659bc568abff0d3f1023b3e2e3d094433dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1718d659bc568abff0d3f1023b3e2e3d094433dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adc4bed773ea6af7343a5a6bbe46e288367fecee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adc4bed773ea6af7343a5a6bbe46e288367fecee", "html_url": "https://github.com/rust-lang/rust/commit/adc4bed773ea6af7343a5a6bbe46e288367fecee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adc4bed773ea6af7343a5a6bbe46e288367fecee/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e10c91fe1d2b854b4db7a4cb3c12e3ea8dbddc", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e10c91fe1d2b854b4db7a4cb3c12e3ea8dbddc", "html_url": "https://github.com/rust-lang/rust/commit/29e10c91fe1d2b854b4db7a4cb3c12e3ea8dbddc"}], "stats": {"total": 135, "additions": 89, "deletions": 46}, "files": [{"sha": "8fc81101faf0506d829241910405a873a79fb18a", "filename": "src/librustc/middle/trans/deriving.rs", "status": "modified", "additions": 44, "deletions": 11, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Flibrustc%2Fmiddle%2Ftrans%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Flibrustc%2Fmiddle%2Ftrans%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fderiving.rs?ref=adc4bed773ea6af7343a5a6bbe46e288367fecee", "patch": "@@ -4,6 +4,7 @@\n use lib::llvm::llvm::{LLVMCountParams, LLVMGetParam};\n use middle::trans::base::{GEP_enum, finish_fn, get_insn_ctxt, get_item_val};\n use middle::trans::base::{new_fn_ctxt, sub_block, top_scope_block};\n+use middle::trans::base;\n use middle::trans::build::{AddCase, Br, CondBr, GEPi, Load, PointerCast};\n use middle::trans::build::{Store, Switch, Unreachable, ValueRef};\n use middle::trans::callee;\n@@ -14,7 +15,8 @@ use middle::trans::common::{C_bool, C_int, T_ptr, block, crate_ctxt};\n use middle::trans::common::{fn_ctxt};\n use middle::trans::expr::SaveIn;\n use middle::trans::type_of::type_of;\n-use middle::ty::DerivedFieldInfo;\n+use middle::ty::{DerivedFieldInfo, re_static};\n+use middle::typeck::check::method;\n use middle::typeck::method_static;\n use syntax::ast;\n use syntax::ast::{def_id, ident, node_id, ty_param};\n@@ -78,14 +80,33 @@ pub fn trans_deriving_impl(ccx: @crate_ctxt,\n             for method_dids.each |method_did| {\n                 let kind = DerivingKind::of_item(ccx, *method_did);\n                 let llfn = get_item_val(ccx, method_did.node);\n+\n+                // Transform the self type as appropriate.\n+                let derived_method_info =\n+                    ccx.tcx.automatically_derived_methods.get(*method_did);\n+                let transformed_self_ty =\n+                    method::transform_self_type_for_method(\n+                        ccx.tcx,\n+                        Some(re_static),\n+                        self_ty.ty,\n+                        derived_method_info.method_info.self_type);\n+\n                 match ty::get(self_ty.ty).sty {\n                     ty::ty_class(*) => {\n-                        trans_deriving_struct_method(ccx, llfn, impl_def_id,\n-                                                     self_ty.ty, kind);\n+                        trans_deriving_struct_method(ccx,\n+                                                     llfn,\n+                                                     impl_def_id,\n+                                                     self_ty.ty,\n+                                                     transformed_self_ty,\n+                                                     kind);\n                     }\n                     ty::ty_enum(*) => {\n-                        trans_deriving_enum_method(ccx, llfn, impl_def_id,\n-                                                   self_ty.ty, kind);\n+                        trans_deriving_enum_method(ccx,\n+                                                   llfn,\n+                                                   impl_def_id,\n+                                                   self_ty.ty,\n+                                                   transformed_self_ty,\n+                                                   kind);\n                     }\n                     _ => {\n                         ccx.tcx.sess.bug(~\"translation of non-struct \\\n@@ -119,6 +140,7 @@ fn trans_deriving_struct_method(ccx: @crate_ctxt,\n                                 llfn: ValueRef,\n                                 impl_did: def_id,\n                                 self_ty: ty::t,\n+                                transformed_self_ty: ty::t,\n                                 kind: DerivingKind) {\n     let _icx = ccx.insn_ctxt(\"trans_deriving_struct_method\");\n     let fcx = new_fn_ctxt(ccx, ~[], llfn, None);\n@@ -128,8 +150,10 @@ fn trans_deriving_struct_method(ccx: @crate_ctxt,\n \n     let llextraparams = get_extra_params(llfn, kind);\n \n-    let llselfty = type_of(ccx, self_ty);\n-    let llselfval = PointerCast(bcx, fcx.llenv, T_ptr(llselfty));\n+    let lltransformedselfty = type_of(ccx, transformed_self_ty);\n+    let lltransformedselfval =\n+        PointerCast(bcx, fcx.llenv, T_ptr(lltransformedselfty));\n+    let llselfval = Load(bcx, lltransformedselfval);\n \n     // If there is an \"other\" value, then get it. The \"other\" value is the\n     // value we're comparing against in the case of Eq and Ord.\n@@ -155,6 +179,9 @@ fn trans_deriving_struct_method(ccx: @crate_ctxt,\n     for ccx.tcx.deriving_struct_methods.get(impl_did).eachi\n             |i, derived_method_info| {\n         let llselfval = GEPi(bcx, llselfval, [0, 0, i]);\n+        let llselfallocaty = common::val_ty(llselfval);\n+        let llselfalloca = base::alloca(bcx, llselfallocaty);\n+        Store(bcx, llselfval, llselfalloca);\n \n         let llotherval_opt = llotherval_opt.map(\n             |llotherval| GEPi(bcx, *llotherval, [0, 0, i]));\n@@ -163,7 +190,7 @@ fn trans_deriving_struct_method(ccx: @crate_ctxt,\n         bcx = call_substructure_method(bcx,\n                                        derived_method_info,\n                                        self_ty,\n-                                       llselfval,\n+                                       llselfalloca,\n                                        llotherval_opt,\n                                        llextraparams);\n \n@@ -197,6 +224,7 @@ fn trans_deriving_enum_method(ccx: @crate_ctxt,\n                               llfn: ValueRef,\n                               impl_did: def_id,\n                               self_ty: ty::t,\n+                              transformed_self_ty: ty::t,\n                               kind: DerivingKind) {\n     let _icx = ccx.insn_ctxt(\"trans_deriving_enum_method\");\n     let fcx = new_fn_ctxt(ccx, ~[], llfn, None);\n@@ -206,8 +234,10 @@ fn trans_deriving_enum_method(ccx: @crate_ctxt,\n \n     let llextraparams = get_extra_params(llfn, kind);\n \n-    let llselfty = type_of(ccx, self_ty);\n-    let llselfval = PointerCast(bcx, fcx.llenv, T_ptr(llselfty));\n+    let lltransformedselfty = type_of(ccx, transformed_self_ty);\n+    let lltransformedselfval =\n+        PointerCast(bcx, fcx.llenv, T_ptr(lltransformedselfty));\n+    let llselfval = Load(bcx, lltransformedselfval);\n \n     let llotherval_opt;\n     match kind {\n@@ -280,6 +310,9 @@ fn trans_deriving_enum_method(ccx: @crate_ctxt,\n                         enum_variant_infos[self_variant_index].id;\n                 let llselfval = GEP_enum(match_bcx, llselfpayload, enum_id,\n                                          variant_def_id, enum_substs.tps, i);\n+                let llselfallocaty = common::val_ty(llselfval);\n+                let llselfalloca = base::alloca(match_bcx, llselfallocaty);\n+                Store(match_bcx, llselfval, llselfalloca);\n \n                 let llotherval_opt = llotherpayload_opt.map(|llotherpayload|\n                     GEP_enum(match_bcx, *llotherpayload, enum_id,\n@@ -289,7 +322,7 @@ fn trans_deriving_enum_method(ccx: @crate_ctxt,\n                 match_bcx = call_substructure_method(match_bcx,\n                                                      derived_method_info,\n                                                      self_ty,\n-                                                     llselfval,\n+                                                     llselfalloca,\n                                                      llotherval_opt,\n                                                      llextraparams);\n "}, {"sha": "977fc06ce8659d0472cf464c1065a0e704b6a9e1", "filename": "src/librustc/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Flibrustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Flibrustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck.rs?ref=adc4bed773ea6af7343a5a6bbe46e288367fecee", "patch": "@@ -63,6 +63,7 @@ use std::list;\n use list::{List, Nil, Cons};\n use dvec::DVec;\n \n+export check;\n export check_crate;\n export infer;\n export method_map;"}, {"sha": "010ca242c7dce57338cf55592016bef36967b0bd", "filename": "src/librustc/middle/typeck/deriving.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fderiving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fderiving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fderiving.rs?ref=adc4bed773ea6af7343a5a6bbe46e288367fecee", "patch": "@@ -17,8 +17,8 @@ use syntax::print::pprust;\n use syntax::visit::{default_simple_visitor, mk_simple_visitor, visit_crate};\n use middle::resolve::{Impl, MethodInfo};\n use middle::ty;\n-use middle::ty::{DerivedFieldInfo, substs, ty_class, ty_enum};\n-use middle::ty::{ty_param_bounds_and_ty};\n+use middle::ty::{DerivedFieldInfo, ReVar, re_infer, re_static, substs};\n+use middle::ty::{ty_class, ty_enum, ty_param_bounds_and_ty};\n use /*middle::typeck::*/check::method;\n use /*middle::typeck::*/check::vtable;\n use /*middle::typeck::*/infer::infer_ctxt;\n@@ -56,10 +56,12 @@ impl DerivingChecker {\n         let tcx = self.crate_context.tcx;\n \n         let impl_self_tpbt = ty::lookup_item_type(tcx, impl_info.did);\n-        let transformed_type = method::transform_self_type_for_method(\n-            tcx, None, impl_self_tpbt.ty, method_info.self_type);\n \n         let inference_context = infer::new_infer_ctxt(self.crate_context.tcx);\n+        let region = inference_context.next_region_var_nb(span);\n+        let transformed_type = method::transform_self_type_for_method(\n+            tcx, Some(region), impl_self_tpbt.ty, method_info.self_type);\n+\n         let substs = {\n             self_r: None,\n             self_ty: None,\n@@ -68,6 +70,13 @@ impl DerivingChecker {\n         let transformed_type = ty::subst(\n             self.crate_context.tcx, &substs, transformed_type);\n \n+        // Automatically reference the substructure type.\n+        let region = inference_context.next_region_var_nb(span);\n+        let substructure_type = ty::mk_rptr(\n+            self.crate_context.tcx,\n+            region,\n+            { ty: substructure_type, mutbl: ast::m_imm });\n+\n         debug!(\"(matching impl method) substructure type %s, transformed \\\n                 type %s, subst tps %u\",\n                ppaux::ty_to_str(self.crate_context.tcx, substructure_type),"}, {"sha": "2b92255bcc56102369dd82acb4ed521e06c12bd6", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=adc4bed773ea6af7343a5a6bbe46e288367fecee", "patch": "@@ -95,10 +95,10 @@ mod middle {\n     mod ty;\n     #[legacy_exports]\n     mod resolve;\n-    mod typeck {\n+    pub mod typeck {\n         #[legacy_exports];\n-        mod check {\n-            #[legacy_exports];\n+        #[legacy_exports]\n+        pub mod check {\n             #[legacy_exports]\n             mod alt;\n             #[legacy_exports]\n@@ -112,7 +112,7 @@ mod middle {\n             #[legacy_exports]\n             mod demand;\n             #[legacy_exports]\n-            mod method;\n+            pub mod method;\n         }\n         #[legacy_exports]\n         mod rscope;"}, {"sha": "0d6d499842f870a8a882f0f2274ebb8f45e87702", "filename": "src/test/compile-fail/enum-deriving-incomplete.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Fcompile-fail%2Fenum-deriving-incomplete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Fcompile-fail%2Fenum-deriving-incomplete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fenum-deriving-incomplete.rs?ref=adc4bed773ea6af7343a5a6bbe46e288367fecee", "patch": "@@ -1,6 +1,6 @@\n trait MyEq {\n     #[derivable]\n-    pure fn eq(other: &self) -> bool;\n+    pure fn eq(&self, other: &self) -> bool;\n }\n \n struct A {"}, {"sha": "a28519e0a56d2f36f914823706b6b9e933a84de0", "filename": "src/test/compile-fail/missing-derivable-attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-derivable-attr.rs?ref=adc4bed773ea6af7343a5a6bbe46e288367fecee", "patch": "@@ -1,13 +1,13 @@\n trait MyEq {\n-    pure fn eq(other: &self) -> bool;\n+    pure fn eq(&self, other: &self) -> bool;\n }\n \n struct A {\n     x: int\n }\n \n impl int : MyEq {\n-    pure fn eq(other: &int) -> bool { self == *other }\n+    pure fn eq(&self, other: &int) -> bool { *self == *other }\n }\n \n impl A : MyEq;  //~ ERROR missing method"}, {"sha": "2dd27fdba675a659d284b2f215a6d6d609c3f927", "filename": "src/test/run-pass/deriving-generic-bounded.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Frun-pass%2Fderiving-generic-bounded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Frun-pass%2Fderiving-generic-bounded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-generic-bounded.rs?ref=adc4bed773ea6af7343a5a6bbe46e288367fecee", "patch": "@@ -1,20 +1,20 @@\n trait MyEq {\n     #[derivable]\n-    pure fn eq(other: &self) -> bool;\n+    pure fn eq(&self, other: &self) -> bool;\n }\n \n impl int : MyEq {\n-    pure fn eq(other: &int) -> bool {\n-        self == *other\n+    pure fn eq(&self, other: &int) -> bool {\n+        *self == *other\n     }\n }\n \n impl<T:MyEq> @T : MyEq {\n-    pure fn eq(other: &@T) -> bool {\n+    pure fn eq(&self, other: &@T) -> bool {\n         unsafe {\n             io::println(\"@T\");\n         }\n-        (*self).eq(&**other)\n+        (**self).eq(&**other)\n     }\n }\n "}, {"sha": "3a4e9db22c84b4b1461ab41ee3b1235a0ef77386", "filename": "src/test/run-pass/deriving-one-method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Frun-pass%2Fderiving-one-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Frun-pass%2Fderiving-one-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-one-method.rs?ref=adc4bed773ea6af7343a5a6bbe46e288367fecee", "patch": "@@ -1,20 +1,20 @@\n trait MyEq {\n     #[derivable]\n-    pure fn eq(other: &self) -> bool;\n-    pure fn ne(other: &self) -> bool;\n+    pure fn eq(&self, other: &self) -> bool;\n+    pure fn ne(&self, other: &self) -> bool;\n }\n \n struct A {\n     x: int\n }\n \n impl int : MyEq {\n-    pure fn eq(other: &int) -> bool { self == *other }\n-    pure fn ne(other: &int) -> bool { self != *other }\n+    pure fn eq(&self, other: &int) -> bool { *self == *other }\n+    pure fn ne(&self, other: &int) -> bool { *self != *other }\n }\n \n impl A : MyEq {\n-    pure fn ne(other: &A) -> bool { !self.eq(other) }\n+    pure fn ne(&self, other: &A) -> bool { !self.eq(other) }\n }\n \n fn main() {"}, {"sha": "ff6b4480259ddb6b54ce9bae7a75c29bbdf8cda8", "filename": "src/test/run-pass/deriving-override.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Frun-pass%2Fderiving-override.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Frun-pass%2Fderiving-override.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-override.rs?ref=adc4bed773ea6af7343a5a6bbe46e288367fecee", "patch": "@@ -1,21 +1,21 @@\n trait MyEq {\n     #[derivable]\n-    pure fn eq(other: &self) -> bool;\n+    pure fn eq(&self, other: &self) -> bool;\n     #[derivable]\n-    pure fn ne(other: &self) -> bool;\n+    pure fn ne(&self, other: &self) -> bool;\n }\n \n struct A {\n     x: int\n }\n \n impl int : MyEq {\n-    pure fn eq(other: &int) -> bool { self == *other }\n-    pure fn ne(other: &int) -> bool { self != *other }\n+    pure fn eq(&self, other: &int) -> bool { *self == *other }\n+    pure fn ne(&self, other: &int) -> bool { *self != *other }\n }\n \n impl A : MyEq {\n-    pure fn ne(other: &A) -> bool { !self.eq(other) }\n+    pure fn ne(&self, other: &A) -> bool { !self.eq(other) }\n }\n \n fn main() {"}, {"sha": "35ec951d6e7dd38193114696fbd42196d7fb2ebc", "filename": "src/test/run-pass/deriving-param-pass-through.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Frun-pass%2Fderiving-param-pass-through.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Frun-pass%2Fderiving-param-pass-through.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-param-pass-through.rs?ref=adc4bed773ea6af7343a5a6bbe46e288367fecee", "patch": "@@ -1,17 +1,17 @@\n trait Trait {\n     #[derivable]\n-    fn f(x: int, y: &str);\n+    fn f(&self, x: int, y: &str);\n }\n \n impl int : Trait {\n-    fn f(x: int, y: &str) {\n+    fn f(&self, x: int, y: &str) {\n         assert x == 42;\n         assert y == \"hello\";\n     }\n }\n \n impl float : Trait {\n-    fn f(x: int, y: &str) {\n+    fn f(&self, x: int, y: &str) {\n         assert x == 42;\n         assert y == \"hello\";\n     }"}, {"sha": "af0a5518967e7e237d7482c3a4f902ba0d93157a", "filename": "src/test/run-pass/deriving-returning-nil.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Frun-pass%2Fderiving-returning-nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Frun-pass%2Fderiving-returning-nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-returning-nil.rs?ref=adc4bed773ea6af7343a5a6bbe46e288367fecee", "patch": "@@ -1,10 +1,10 @@\n trait Show {\n     #[derivable]\n-    fn show();\n+    fn show(&self);\n }\n \n impl int : Show {\n-    fn show() {\n+    fn show(&self) {\n         io::println(self.to_str());\n     }\n }"}, {"sha": "35d3584bcae6607cb15de445803c98c298b79472", "filename": "src/test/run-pass/deriving-simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Frun-pass%2Fderiving-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Frun-pass%2Fderiving-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-simple.rs?ref=adc4bed773ea6af7343a5a6bbe46e288367fecee", "patch": "@@ -1,6 +1,6 @@\n trait MyEq {\n     #[derivable]\n-    pure fn eq(other: &self) -> bool;\n+    pure fn eq(&self, other: &self) -> bool;\n }\n \n struct A {\n@@ -14,7 +14,7 @@ struct B {\n }\n \n impl A : MyEq {\n-    pure fn eq(other: &A) -> bool {\n+    pure fn eq(&self, other: &A) -> bool {\n         unsafe { io::println(fmt!(\"eq %d %d\", self.x, other.x)); }\n         self.x == other.x\n     }"}, {"sha": "a084b4cec4fbbe9483d97d0b26b9b489f5135321", "filename": "src/test/run-pass/enum-deriving-simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Frun-pass%2Fenum-deriving-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adc4bed773ea6af7343a5a6bbe46e288367fecee/src%2Ftest%2Frun-pass%2Fenum-deriving-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-deriving-simple.rs?ref=adc4bed773ea6af7343a5a6bbe46e288367fecee", "patch": "@@ -1,6 +1,6 @@\n trait MyEq {\n     #[derivable]\n-    pure fn eq(other: &self) -> bool;\n+    pure fn eq(&self, other: &self) -> bool;\n }\n \n struct A {\n@@ -14,7 +14,7 @@ enum B {\n }\n \n impl A : MyEq {\n-    pure fn eq(other: &A) -> bool {\n+    pure fn eq(&self, other: &A) -> bool {\n         unsafe { io::println(\"in eq\"); }\n         self.x == other.x\n     }"}]}