{"sha": "76d66e641383c2949a5bbb1b7f46f22deb0703c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2ZDY2ZTY0MTM4M2MyOTQ5YTViYmIxYjdmNDZmMjJkZWIwNzAzYzU=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-07-13T07:20:54Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-07-13T07:20:54Z"}, "message": "Merge branch 'master' into dev-fmt-4", "tree": {"sha": "433b6b44ba8b7e9f476d9f3ebb53f83215d4ebb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/433b6b44ba8b7e9f476d9f3ebb53f83215d4ebb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76d66e641383c2949a5bbb1b7f46f22deb0703c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76d66e641383c2949a5bbb1b7f46f22deb0703c5", "html_url": "https://github.com/rust-lang/rust/commit/76d66e641383c2949a5bbb1b7f46f22deb0703c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76d66e641383c2949a5bbb1b7f46f22deb0703c5/comments", "author": null, "committer": null, "parents": [{"sha": "2c90083f6294f901e2e8b5640cc084feb02431ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c90083f6294f901e2e8b5640cc084feb02431ee", "html_url": "https://github.com/rust-lang/rust/commit/2c90083f6294f901e2e8b5640cc084feb02431ee"}, {"sha": "b0290424bb94aaa7a6d5bc17eb6c616836da27da", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0290424bb94aaa7a6d5bc17eb6c616836da27da", "html_url": "https://github.com/rust-lang/rust/commit/b0290424bb94aaa7a6d5bc17eb6c616836da27da"}], "stats": {"total": 88, "additions": 54, "deletions": 34}, "files": [{"sha": "9f6cc45af81e0768cc3d9c7e57a2dd9b5109899b", "filename": "appveyor.yml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76d66e641383c2949a5bbb1b7f46f22deb0703c5/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/76d66e641383c2949a5bbb1b7f46f22deb0703c5/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=76d66e641383c2949a5bbb1b7f46f22deb0703c5", "patch": "@@ -8,11 +8,10 @@ environment:\n         - TARGET: x86_64-pc-windows-msvc\n \n branches:\n-    # Only build AppVeyor on r+, try and the master branch\n+    # Only build AppVeyor on r+ and try branch\n     only:\n       - auto\n       - try\n-      - master\n \n install:\n     - curl -sSf -o rustup-init.exe https://win.rustup.rs/"}, {"sha": "acca50e3df88bc70ef44006c3d3e9a1e008634cf", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76d66e641383c2949a5bbb1b7f46f22deb0703c5/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d66e641383c2949a5bbb1b7f46f22deb0703c5/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=76d66e641383c2949a5bbb1b7f46f22deb0703c5", "patch": "@@ -7,7 +7,7 @@ use rustc::ty;\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n-use syntax::source_map::{ExpnFormat, Span};\n+use syntax::source_map::{ExpnKind, Span};\n \n use crate::consts::{constant, Constant};\n use crate::utils::sugg::Sugg;\n@@ -596,10 +596,14 @@ fn is_used(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n /// Tests whether an expression is in a macro expansion (e.g., something\n /// generated by `#[derive(...)]` or the like).\n fn in_attributes_expansion(expr: &Expr) -> bool {\n-    expr.span\n-        .ctxt()\n-        .outer_expn_info()\n-        .map_or(false, |info| matches!(info.format, ExpnFormat::MacroAttribute(_)))\n+    use syntax::ext::hygiene::MacroKind;\n+    expr.span.ctxt().outer_expn_info().map_or(false, |info| {\n+        if let ExpnKind::Macro(MacroKind::Attr, _) = info.kind {\n+            true\n+        } else {\n+            false\n+        }\n+    })\n }\n \n /// Tests whether `res` is a variable defined outside a macro."}, {"sha": "0f2084e819e368282f1b0cec2025463ee168dfa1", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/76d66e641383c2949a5bbb1b7f46f22deb0703c5/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d66e641383c2949a5bbb1b7f46f22deb0703c5/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=76d66e641383c2949a5bbb1b7f46f22deb0703c5", "patch": "@@ -86,7 +86,7 @@ declare_clippy_lint! {\n #[derive(PartialEq, Eq, Copy, Clone)]\n enum RetReplacement {\n     Empty,\n-    Unit,\n+    Block,\n }\n \n declare_lint_pass!(Return => [NEEDLESS_RETURN, LET_AND_RETURN, UNUSED_UNIT]);\n@@ -139,7 +139,7 @@ impl Return {\n             // a match expr, check all arms\n             ast::ExprKind::Match(_, ref arms) => {\n                 for arm in arms {\n-                    self.check_final_expr(cx, &arm.body, Some(arm.body.span), RetReplacement::Unit);\n+                    self.check_final_expr(cx, &arm.body, Some(arm.body.span), RetReplacement::Block);\n                 }\n             },\n             _ => (),\n@@ -176,12 +176,12 @@ impl Return {\n                         );\n                     });\n                 },\n-                RetReplacement::Unit => {\n+                RetReplacement::Block => {\n                     span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n                         db.span_suggestion(\n                             ret_span,\n-                            \"replace `return` with the unit type\",\n-                            \"()\".to_string(),\n+                            \"replace `return` with an empty block\",\n+                            \"{}\".to_string(),\n                             Applicability::MachineApplicable,\n                         );\n                     });\n@@ -317,7 +317,7 @@ fn attr_is_cfg(attr: &ast::Attribute) -> bool {\n \n // get the def site\n fn get_def(span: Span) -> Option<Span> {\n-    span.ctxt().outer_expn_info().and_then(|info| info.def_site)\n+    span.ctxt().outer_expn_info().and_then(|info| Some(info.def_site))\n }\n \n // is this expr a `()` unit?"}, {"sha": "57f63a600a7c7dbea170cc3da2a423c6022a37bf", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76d66e641383c2949a5bbb1b7f46f22deb0703c5/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d66e641383c2949a5bbb1b7f46f22deb0703c5/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=76d66e641383c2949a5bbb1b7f46f22deb0703c5", "patch": "@@ -138,6 +138,9 @@ fn is_add(cx: &LateContext<'_, '_>, src: &Expr, target: &Expr) -> bool {\n     }\n }\n \n+// Max length a b\"foo\" string can take\n+const MAX_LENGTH_BYTE_STRING_LIT: usize = 32;\n+\n declare_lint_pass!(StringLitAsBytes => [STRING_LIT_AS_BYTES]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n@@ -173,6 +176,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for StringLitAsBytes {\n                             );\n                         } else if callsite == expanded\n                             && lit_content.as_str().chars().all(|c| c.is_ascii())\n+                            && lit_content.as_str().len() <= MAX_LENGTH_BYTE_STRING_LIT\n                             && !in_macro_or_desugar(args[0].span)\n                         {\n                             span_lint_and_sugg("}, {"sha": "4f35337292e3891c1e387748581b4cb1760173ae", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/76d66e641383c2949a5bbb1b7f46f22deb0703c5/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d66e641383c2949a5bbb1b7f46f22deb0703c5/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=76d66e641383c2949a5bbb1b7f46f22deb0703c5", "patch": "@@ -621,9 +621,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnitArg {\n }\n \n fn is_questionmark_desugar_marked_call(expr: &Expr) -> bool {\n-    use syntax_pos::hygiene::CompilerDesugaringKind;\n+    use syntax_pos::hygiene::DesugaringKind;\n     if let ExprKind::Call(ref callee, _) = expr.node {\n-        callee.span.is_compiler_desugaring(CompilerDesugaringKind::QuestionMark)\n+        callee.span.is_desugaring(DesugaringKind::QuestionMark)\n     } else {\n         false\n     }\n@@ -789,7 +789,8 @@ declare_clippy_lint! {\n     /// **Why is this bad?** Dereferencing the resulting pointer may be undefined\n     /// behavior.\n     ///\n-    /// **Known problems:** None.\n+    /// **Known problems:** Using `std::ptr::read_unaligned` and `std::ptr::write_unaligned` or similar\n+    /// on the resulting pointer is fine.\n     ///\n     /// **Example:**\n     /// ```rust\n@@ -1210,17 +1211,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n             if_chain! {\n                 if let ty::RawPtr(from_ptr_ty) = &cast_from.sty;\n                 if let ty::RawPtr(to_ptr_ty) = &cast_to.sty;\n-                if let Some(from_align) = cx.layout_of(from_ptr_ty.ty).ok().map(|a| a.align.abi);\n-                if let Some(to_align) = cx.layout_of(to_ptr_ty.ty).ok().map(|a| a.align.abi);\n-                if from_align < to_align;\n+                if let Ok(from_layout) = cx.layout_of(from_ptr_ty.ty);\n+                if let Ok(to_layout) = cx.layout_of(to_ptr_ty.ty);\n+                if from_layout.align.abi < to_layout.align.abi;\n                 // with c_void, we inherently need to trust the user\n                 if !is_c_void(cx, from_ptr_ty.ty);\n+                // when casting from a ZST, we don't know enough to properly lint\n+                if !from_layout.is_zst();\n                 then {\n                     span_lint(\n                         cx,\n                         CAST_PTR_ALIGNMENT,\n                         expr.span,\n-                        &format!(\"casting from `{}` to a more-strictly-aligned pointer (`{}`)\", cast_from, cast_to)\n+                        &format!(\n+                            \"casting from `{}` to a more-strictly-aligned pointer (`{}`) ({} < {} bytes)\",\n+                            cast_from,\n+                            cast_to,\n+                            from_layout.align.abi.bytes(),\n+                            to_layout.align.abi.bytes(),\n+                        ),\n                     );\n                 }\n             }"}, {"sha": "9e45c453ae9f89716bba7255684f73be9b614059", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76d66e641383c2949a5bbb1b7f46f22deb0703c5/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d66e641383c2949a5bbb1b7f46f22deb0703c5/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=76d66e641383c2949a5bbb1b7f46f22deb0703c5", "patch": "@@ -43,7 +43,7 @@ use rustc_errors::Applicability;\n use smallvec::SmallVec;\n use syntax::ast::{self, LitKind};\n use syntax::attr;\n-use syntax::ext::hygiene::ExpnFormat;\n+use syntax::ext::hygiene::ExpnKind;\n use syntax::source_map::{Span, DUMMY_SP};\n use syntax::symbol::{kw, Symbol};\n \n@@ -100,7 +100,7 @@ pub fn in_macro_or_desugar(span: Span) -> bool {\n /// Returns `true` if this `expn_info` was expanded by any macro.\n pub fn in_macro(span: Span) -> bool {\n     if let Some(info) = span.ctxt().outer_expn_info() {\n-        if let ExpnFormat::CompilerDesugaring(..) = info.format {\n+        if let ExpnKind::Desugaring(..) = info.kind {\n             false\n         } else {\n             true\n@@ -686,7 +686,7 @@ pub fn is_adjusted(cx: &LateContext<'_, '_>, e: &Expr) -> bool {\n /// See also `is_direct_expn_of`.\n pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n     loop {\n-        let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.format.name(), ei.call_site));\n+        let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.kind.descr(), ei.call_site));\n \n         match span_name_span {\n             Some((mac_name, new_span)) if mac_name.as_str() == name => return Some(new_span),\n@@ -706,7 +706,7 @@ pub fn is_expn_of(mut span: Span, name: &str) -> Option<Span> {\n /// `bar!` by\n /// `is_direct_expn_of`.\n pub fn is_direct_expn_of(span: Span, name: &str) -> Option<Span> {\n-    let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.format.name(), ei.call_site));\n+    let span_name_span = span.ctxt().outer_expn_info().map(|ei| (ei.kind.descr(), ei.call_site));\n \n     match span_name_span {\n         Some((mac_name, new_span)) if mac_name.as_str() == name => Some(new_span),"}, {"sha": "4c08935639f1f3a5ae5fd847de7c3398ae71b31e", "filename": "tests/ui/cast_alignment.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76d66e641383c2949a5bbb1b7f46f22deb0703c5/tests%2Fui%2Fcast_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d66e641383c2949a5bbb1b7f46f22deb0703c5/tests%2Fui%2Fcast_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.rs?ref=76d66e641383c2949a5bbb1b7f46f22deb0703c5", "patch": "@@ -22,4 +22,6 @@ fn main() {\n     // For c_void, we should trust the user. See #2677\n     (&1u32 as *const u32 as *const std::os::raw::c_void) as *const u32;\n     (&1u32 as *const u32 as *const libc::c_void) as *const u32;\n+    // For ZST, we should trust the user. See #4256\n+    (&1u32 as *const u32 as *const ()) as *const u32;\n }"}, {"sha": "79219f86155a4458fe95c46dbc9b699b0738bca1", "filename": "tests/ui/cast_alignment.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76d66e641383c2949a5bbb1b7f46f22deb0703c5/tests%2Fui%2Fcast_alignment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d66e641383c2949a5bbb1b7f46f22deb0703c5/tests%2Fui%2Fcast_alignment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_alignment.stderr?ref=76d66e641383c2949a5bbb1b7f46f22deb0703c5", "patch": "@@ -1,12 +1,12 @@\n-error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`)\n+error: casting from `*const u8` to a more-strictly-aligned pointer (`*const u16`) (1 < 2 bytes)\n   --> $DIR/cast_alignment.rs:12:5\n    |\n LL |     (&1u8 as *const u8) as *const u16;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::cast-ptr-alignment` implied by `-D warnings`\n \n-error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`)\n+error: casting from `*mut u8` to a more-strictly-aligned pointer (`*mut u16`) (1 < 2 bytes)\n   --> $DIR/cast_alignment.rs:13:5\n    |\n LL |     (&mut 1u8 as *mut u8) as *mut u16;"}, {"sha": "ee700ab8408688e9958dd928bbacbe216165a131", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76d66e641383c2949a5bbb1b7f46f22deb0703c5/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d66e641383c2949a5bbb1b7f46f22deb0703c5/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=76d66e641383c2949a5bbb1b7f46f22deb0703c5", "patch": "@@ -70,7 +70,7 @@ error: unneeded return statement\n   --> $DIR/needless_return.rs:64:14\n    |\n LL |         _ => return,\n-   |              ^^^^^^ help: replace `return` with the unit type: `()`\n+   |              ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: aborting due to 12 previous errors\n "}, {"sha": "1922478165fd30232aea3cb6c8242c96a9e93f80", "filename": "tests/ui/string_lit_as_bytes.fixed", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76d66e641383c2949a5bbb1b7f46f22deb0703c5/tests%2Fui%2Fstring_lit_as_bytes.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/76d66e641383c2949a5bbb1b7f46f22deb0703c5/tests%2Fui%2Fstring_lit_as_bytes.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.fixed?ref=76d66e641383c2949a5bbb1b7f46f22deb0703c5", "patch": "@@ -6,10 +6,11 @@\n fn str_lit_as_bytes() {\n     let bs = b\"hello there\";\n \n-    let bs = br###\"raw string with three ### in it and some \" \"\"###;\n+    let bs = br###\"raw string with 3# plus \" \"\"###;\n \n-    // no warning, because this cannot be written as a byte string literal:\n+    // no warning, because these cannot be written as byte string literals:\n     let ubs = \"\u2603\".as_bytes();\n+    let ubs = \"hello there! this is a very long string\".as_bytes();\n \n     let strify = stringify!(foobar).as_bytes();\n "}, {"sha": "560cbcb657b8ce84ad4ee9c6556a12b6d611b573", "filename": "tests/ui/string_lit_as_bytes.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/76d66e641383c2949a5bbb1b7f46f22deb0703c5/tests%2Fui%2Fstring_lit_as_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76d66e641383c2949a5bbb1b7f46f22deb0703c5/tests%2Fui%2Fstring_lit_as_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.rs?ref=76d66e641383c2949a5bbb1b7f46f22deb0703c5", "patch": "@@ -6,10 +6,11 @@\n fn str_lit_as_bytes() {\n     let bs = \"hello there\".as_bytes();\n \n-    let bs = r###\"raw string with three ### in it and some \" \"\"###.as_bytes();\n+    let bs = r###\"raw string with 3# plus \" \"\"###.as_bytes();\n \n-    // no warning, because this cannot be written as a byte string literal:\n+    // no warning, because these cannot be written as byte string literals:\n     let ubs = \"\u2603\".as_bytes();\n+    let ubs = \"hello there! this is a very long string\".as_bytes();\n \n     let strify = stringify!(foobar).as_bytes();\n "}, {"sha": "59aaec75bd2213fc2180386182833dd0a50ad163", "filename": "tests/ui/string_lit_as_bytes.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76d66e641383c2949a5bbb1b7f46f22deb0703c5/tests%2Fui%2Fstring_lit_as_bytes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76d66e641383c2949a5bbb1b7f46f22deb0703c5/tests%2Fui%2Fstring_lit_as_bytes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstring_lit_as_bytes.stderr?ref=76d66e641383c2949a5bbb1b7f46f22deb0703c5", "patch": "@@ -9,11 +9,11 @@ LL |     let bs = \"hello there\".as_bytes();\n error: calling `as_bytes()` on a string literal\n   --> $DIR/string_lit_as_bytes.rs:9:14\n    |\n-LL |     let bs = r###\"raw string with three ### in it and some \" \"\"###.as_bytes();\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `br###\"raw string with three ### in it and some \" \"\"###`\n+LL |     let bs = r###\"raw string with 3# plus \" \"\"###.as_bytes();\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using a byte string literal instead: `br###\"raw string with 3# plus \" \"\"###`\n \n error: calling `as_bytes()` on `include_str!(..)`\n-  --> $DIR/string_lit_as_bytes.rs:16:22\n+  --> $DIR/string_lit_as_bytes.rs:17:22\n    |\n LL |     let includestr = include_str!(\"entry.rs\").as_bytes();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using `include_bytes!(..)` instead: `include_bytes!(\"entry.rs\")`"}]}