{"sha": "db5f005f35ee8abdf772d518fea09fcadd97fb43", "node_id": "C_kwDOAAsO6NoAKGRiNWYwMDVmMzVlZThhYmRmNzcyZDUxOGZlYTA5ZmNhZGQ5N2ZiNDM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-20T17:21:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-20T17:21:48Z"}, "message": "Rollup merge of #104568 - RalfJung:realloc, r=Amanieu\n\nclarify that realloc refreshes pointer provenance even when the allocation remains in-place\n\nThis [matches what C does](https://en.cppreference.com/w/c/memory/realloc):\n\n> The original pointer ptr is invalidated and any access to it is undefined behavior (even if reallocation was in-place).\n\nCc `@rust-lang/wg-allocators`", "tree": {"sha": "05543385b1c9ac898b95f27cad01361726721bdf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05543385b1c9ac898b95f27cad01361726721bdf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db5f005f35ee8abdf772d518fea09fcadd97fb43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjemIsCRBK7hj4Ov3rIwAAfmQIAChv9zEd4O6K78M2gu9HEa2I\nnbp/+1NUU1yj9aJDyL+ATRfuhI9kxgVFqHVkfqnK/RY5khSyVL1B+ZNoGEIqmIpa\nE3Di4eK8jmoB2h7E1GDmTlIPtNz54zwz1g0APh6+L1HCOv1p+EhPGWUwg3KnLOX/\nwobEx2Y9NLWUxPgR7I0bzMBYQZvN9+Xpw44X0lzmxrhxZRHBpBg9JgGG0hgwtubw\nNgjMCogwg87LqjCEHW1GtnalGwe3QuxGIEc3OSdvXY8x+U/WzJPZ3lhUk37ZabHm\nO9QgogOcV2tAW0w8SgyiDrga1d9YlIuuXbf3FpFLwyIO6lV2DmrexUewm+i57YQ=\n=vKVz\n-----END PGP SIGNATURE-----\n", "payload": "tree 05543385b1c9ac898b95f27cad01361726721bdf\nparent 820a41580efb5c67df02dc511c2465d71b0e9f61\nparent d26659d61153922fdd44485b409747566661a674\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668964908 +0100\ncommitter GitHub <noreply@github.com> 1668964908 +0100\n\nRollup merge of #104568 - RalfJung:realloc, r=Amanieu\n\nclarify that realloc refreshes pointer provenance even when the allocation remains in-place\n\nThis [matches what C does](https://en.cppreference.com/w/c/memory/realloc):\n\n> The original pointer ptr is invalidated and any access to it is undefined behavior (even if reallocation was in-place).\n\nCc `@rust-lang/wg-allocators`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db5f005f35ee8abdf772d518fea09fcadd97fb43", "html_url": "https://github.com/rust-lang/rust/commit/db5f005f35ee8abdf772d518fea09fcadd97fb43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db5f005f35ee8abdf772d518fea09fcadd97fb43/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "820a41580efb5c67df02dc511c2465d71b0e9f61", "url": "https://api.github.com/repos/rust-lang/rust/commits/820a41580efb5c67df02dc511c2465d71b0e9f61", "html_url": "https://github.com/rust-lang/rust/commit/820a41580efb5c67df02dc511c2465d71b0e9f61"}, {"sha": "d26659d61153922fdd44485b409747566661a674", "url": "https://api.github.com/repos/rust-lang/rust/commits/d26659d61153922fdd44485b409747566661a674", "html_url": "https://github.com/rust-lang/rust/commit/d26659d61153922fdd44485b409747566661a674"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "1d80b8bf9ec761ef815188c91b12eec841118b5b", "filename": "library/core/src/alloc/global.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db5f005f35ee8abdf772d518fea09fcadd97fb43/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5f005f35ee8abdf772d518fea09fcadd97fb43/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fglobal.rs?ref=db5f005f35ee8abdf772d518fea09fcadd97fb43", "patch": "@@ -208,9 +208,11 @@ pub unsafe trait GlobalAlloc {\n     ///\n     /// If this returns a non-null pointer, then ownership of the memory block\n     /// referenced by `ptr` has been transferred to this allocator.\n-    /// The memory may or may not have been deallocated, and should be\n-    /// considered unusable. The new memory block is allocated with `layout`,\n-    /// but with the `size` updated to `new_size`. This new layout should be\n+    /// Any access to the old `ptr` is Undefined Behavior, even if the\n+    /// allocation remained in-place. The newly returned pointer is the only valid pointer\n+    /// for accessing this memory now.\n+    /// The new memory block is allocated with `layout`,\n+    /// but with the `size` updated to `new_size`. This new layout must be\n     /// used when deallocating the new memory block with `dealloc`. The range\n     /// `0..min(layout.size(), new_size)` of the new memory block is\n     /// guaranteed to have the same values as the original block."}, {"sha": "a6082455fac8d1d6f29b1fa029502dab87914060", "filename": "library/core/src/alloc/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/db5f005f35ee8abdf772d518fea09fcadd97fb43/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5f005f35ee8abdf772d518fea09fcadd97fb43/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Fmod.rs?ref=db5f005f35ee8abdf772d518fea09fcadd97fb43", "patch": "@@ -169,8 +169,9 @@ pub unsafe trait Allocator {\n     /// this, the allocator may extend the allocation referenced by `ptr` to fit the new layout.\n     ///\n     /// If this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\n-    /// transferred to this allocator. The memory may or may not have been freed, and should be\n-    /// considered unusable.\n+    /// transferred to this allocator. Any access to the old `ptr` is Undefined Behavior, even if the\n+    /// allocation was grown in-place. The newly returned pointer is the only valid pointer\n+    /// for accessing this memory now.\n     ///\n     /// If this method returns `Err`, then ownership of the memory block has not been transferred to\n     /// this allocator, and the contents of the memory block are unaltered.\n@@ -295,8 +296,9 @@ pub unsafe trait Allocator {\n     /// this, the allocator may shrink the allocation referenced by `ptr` to fit the new layout.\n     ///\n     /// If this returns `Ok`, then ownership of the memory block referenced by `ptr` has been\n-    /// transferred to this allocator. The memory may or may not have been freed, and should be\n-    /// considered unusable.\n+    /// transferred to this allocator. Any access to the old `ptr` is Undefined Behavior, even if the\n+    /// allocation was shrunk in-place. The newly returned pointer is the only valid pointer\n+    /// for accessing this memory now.\n     ///\n     /// If this method returns `Err`, then ownership of the memory block has not been transferred to\n     /// this allocator, and the contents of the memory block are unaltered."}]}