{"sha": "3f60e71a12eea313ffab4e4140331ee9e13c262d", "node_id": "C_kwDOAAsO6NoAKDNmNjBlNzFhMTJlZWEzMTNmZmFiNGU0MTQwMzMxZWU5ZTEzYzI2MmQ", "commit": {"author": {"name": "Hongxu Xu", "email": "xuhongxu96@hotmail.com", "date": "2022-06-14T13:44:07Z"}, "committer": {"name": "Hongxu Xu", "email": "xuhongxu96@hotmail.com", "date": "2022-06-14T13:44:07Z"}, "message": "remove inherited_visibility in lower.rs", "tree": {"sha": "08bc7039eb9188ae3f1ab19be551b0a415d86173", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08bc7039eb9188ae3f1ab19be551b0a415d86173"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f60e71a12eea313ffab4e4140331ee9e13c262d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f60e71a12eea313ffab4e4140331ee9e13c262d", "html_url": "https://github.com/rust-lang/rust/commit/3f60e71a12eea313ffab4e4140331ee9e13c262d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f60e71a12eea313ffab4e4140331ee9e13c262d/comments", "author": {"login": "xuhongxu96", "id": 2201482, "node_id": "MDQ6VXNlcjIyMDE0ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/2201482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xuhongxu96", "html_url": "https://github.com/xuhongxu96", "followers_url": "https://api.github.com/users/xuhongxu96/followers", "following_url": "https://api.github.com/users/xuhongxu96/following{/other_user}", "gists_url": "https://api.github.com/users/xuhongxu96/gists{/gist_id}", "starred_url": "https://api.github.com/users/xuhongxu96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuhongxu96/subscriptions", "organizations_url": "https://api.github.com/users/xuhongxu96/orgs", "repos_url": "https://api.github.com/users/xuhongxu96/repos", "events_url": "https://api.github.com/users/xuhongxu96/events{/privacy}", "received_events_url": "https://api.github.com/users/xuhongxu96/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xuhongxu96", "id": 2201482, "node_id": "MDQ6VXNlcjIyMDE0ODI=", "avatar_url": "https://avatars.githubusercontent.com/u/2201482?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xuhongxu96", "html_url": "https://github.com/xuhongxu96", "followers_url": "https://api.github.com/users/xuhongxu96/followers", "following_url": "https://api.github.com/users/xuhongxu96/following{/other_user}", "gists_url": "https://api.github.com/users/xuhongxu96/gists{/gist_id}", "starred_url": "https://api.github.com/users/xuhongxu96/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xuhongxu96/subscriptions", "organizations_url": "https://api.github.com/users/xuhongxu96/orgs", "repos_url": "https://api.github.com/users/xuhongxu96/repos", "events_url": "https://api.github.com/users/xuhongxu96/events{/privacy}", "received_events_url": "https://api.github.com/users/xuhongxu96/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7eebd9706ebc48fc4c6e09249dc45baa9e1dc61", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7eebd9706ebc48fc4c6e09249dc45baa9e1dc61", "html_url": "https://github.com/rust-lang/rust/commit/d7eebd9706ebc48fc4c6e09249dc45baa9e1dc61"}], "stats": {"total": 50, "additions": 13, "deletions": 37}, "files": [{"sha": "7ba983fa716da2b680c599ddaf57be4440eb4707", "filename": "crates/hir-def/src/item_tree/lower.rs", "status": "modified", "additions": 13, "deletions": 37, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3f60e71a12eea313ffab4e4140331ee9e13c262d/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f60e71a12eea313ffab4e4140331ee9e13c262d/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fitem_tree%2Flower.rs?ref=3f60e71a12eea313ffab4e4140331ee9e13c262d", "patch": "@@ -21,7 +21,6 @@ pub(super) struct Ctx<'a> {\n     tree: ItemTree,\n     source_ast_id_map: Arc<AstIdMap>,\n     body_ctx: crate::body::LowerCtx<'a>,\n-    forced_visibility: Option<RawVisibilityId>,\n }\n \n impl<'a> Ctx<'a> {\n@@ -31,7 +30,6 @@ impl<'a> Ctx<'a> {\n             tree: ItemTree::default(),\n             source_ast_id_map: db.ast_id_map(file),\n             body_ctx: crate::body::LowerCtx::new(db, file),\n-            forced_visibility: None,\n         }\n     }\n \n@@ -225,11 +223,10 @@ impl<'a> Ctx<'a> {\n         let visibility = self.lower_visibility(enum_);\n         let name = enum_.name()?.as_name();\n         let generic_params = self.lower_generic_params(GenericsOwner::Enum, enum_);\n-        let variants =\n-            self.with_inherited_visibility(visibility, |this| match &enum_.variant_list() {\n-                Some(variant_list) => this.lower_variants(variant_list),\n-                None => IdxRange::new(this.next_variant_idx()..this.next_variant_idx()),\n-            });\n+        let variants = match &enum_.variant_list() {\n+            Some(variant_list) => self.lower_variants(variant_list),\n+            None => IdxRange::new(self.next_variant_idx()..self.next_variant_idx()),\n+        };\n         let ast_id = self.source_ast_id_map.ast_id(enum_);\n         let res = Enum { name, visibility, generic_params, variants, ast_id };\n         Some(id(self.data().enums.alloc(res)))\n@@ -440,18 +437,15 @@ impl<'a> Ctx<'a> {\n         let is_auto = trait_def.auto_token().is_some();\n         let is_unsafe = trait_def.unsafe_token().is_some();\n         let items = trait_def.assoc_item_list().map(|list| {\n-            let db = self.db;\n-            self.with_inherited_visibility(visibility, |this| {\n-                list.assoc_items()\n-                    .filter_map(|item| {\n-                        let attrs = RawAttrs::new(db, &item, this.hygiene());\n-                        this.lower_assoc_item(&item).map(|item| {\n-                            this.add_attrs(ModItem::from(item).into(), attrs);\n-                            item\n-                        })\n+            list.assoc_items()\n+                .filter_map(|item| {\n+                    let attrs = RawAttrs::new(self.db, &item, self.hygiene());\n+                    self.lower_assoc_item(&item).map(|item| {\n+                        self.add_attrs(ModItem::from(item).into(), attrs);\n+                        item\n                     })\n-                    .collect()\n-            })\n+                })\n+                .collect()\n         });\n         let ast_id = self.source_ast_id_map.ast_id(trait_def);\n         let res = Trait {\n@@ -622,13 +616,7 @@ impl<'a> Ctx<'a> {\n     }\n \n     fn lower_visibility(&mut self, item: &dyn ast::HasVisibility) -> RawVisibilityId {\n-        let vis = match self.forced_visibility {\n-            Some(vis) => return vis,\n-            None => {\n-                RawVisibility::from_ast_with_hygiene(self.db, item.visibility(), self.hygiene())\n-            }\n-        };\n-\n+        let vis = RawVisibility::from_ast_with_hygiene(self.db, item.visibility(), self.hygiene());\n         self.data().vis.alloc(vis)\n     }\n \n@@ -649,18 +637,6 @@ impl<'a> Ctx<'a> {\n         }\n     }\n \n-    /// Forces the visibility `vis` to be used for all items lowered during execution of `f`.\n-    fn with_inherited_visibility<R>(\n-        &mut self,\n-        vis: RawVisibilityId,\n-        f: impl FnOnce(&mut Self) -> R,\n-    ) -> R {\n-        let old = mem::replace(&mut self.forced_visibility, Some(vis));\n-        let res = f(self);\n-        self.forced_visibility = old;\n-        res\n-    }\n-\n     fn next_field_idx(&self) -> Idx<Field> {\n         Idx::from_raw(RawIdx::from(\n             self.tree.data.as_ref().map_or(0, |data| data.fields.len() as u32),"}]}