{"sha": "b57ffef37e6e2196ad948ab2f6944d242c3aaaf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1N2ZmZWYzN2U2ZTIxOTZhZDk0OGFiMmY2OTQ0ZDI0MmMzYWFhZjE=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-07-31T22:10:35Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-08-01T05:00:32Z"}, "message": "convert `pure` to a reserved keyword", "tree": {"sha": "8421ccfc32fc348eb98420e61d9c3204b0196dff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8421ccfc32fc348eb98420e61d9c3204b0196dff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b57ffef37e6e2196ad948ab2f6944d242c3aaaf1", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b57ffef37e6e2196ad948ab2f6944d242c3aaaf1", "html_url": "https://github.com/rust-lang/rust/commit/b57ffef37e6e2196ad948ab2f6944d242c3aaaf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b57ffef37e6e2196ad948ab2f6944d242c3aaaf1/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dabd4762037baab06603fe76dd59795e4d415334", "url": "https://api.github.com/repos/rust-lang/rust/commits/dabd4762037baab06603fe76dd59795e4d415334", "html_url": "https://github.com/rust-lang/rust/commit/dabd4762037baab06603fe76dd59795e4d415334"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "3365222036ca4b71997d32dbe8b0de75445cf697", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/b57ffef37e6e2196ad948ab2f6944d242c3aaaf1/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b57ffef37e6e2196ad948ab2f6944d242c3aaaf1/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=b57ffef37e6e2196ad948ab2f6944d242c3aaaf1", "patch": "@@ -458,23 +458,23 @@ fn mk_fresh_ident_interner() -> @ident_interner {\n         \"once\",               // 50\n         \"priv\",               // 51\n         \"pub\",                // 52\n-        \"pure\",               // 53\n-        \"ref\",                // 54\n-        \"return\",             // 55\n+        \"ref\",                // 53\n+        \"return\",             // 54\n         \"static\",             // 27 -- also a special ident\n         \"self\",               //  8 -- also a special ident\n-        \"struct\",             // 56\n-        \"super\",              // 57\n-        \"true\",               // 58\n-        \"trait\",              // 59\n-        \"type\",               // 60\n-        \"unsafe\",             // 61\n-        \"use\",                // 62\n-        \"while\",              // 63\n-        \"in\",                 // 64\n-        \"foreach\",            // 65\n-\n-        \"be\",                 // 66\n+        \"struct\",             // 55\n+        \"super\",              // 56\n+        \"true\",               // 57\n+        \"trait\",              // 58\n+        \"type\",               // 59\n+        \"unsafe\",             // 60\n+        \"use\",                // 61\n+        \"while\",              // 62\n+        \"in\",                 // 63\n+        \"foreach\",            // 64\n+\n+        \"be\",                 // 65\n+        \"pure\",               // 66\n     ];\n \n     @ident_interner {\n@@ -615,10 +615,10 @@ pub mod keywords {\n                 False => ident { name: 39, ctxt: 0 },\n                 Fn => ident { name: 40, ctxt: 0 },\n                 For => ident { name: 41, ctxt: 0 },\n-                ForEach => ident { name: 65, ctxt: 0 },\n+                ForEach => ident { name: 64, ctxt: 0 },\n                 If => ident { name: 42, ctxt: 0 },\n                 Impl => ident { name: 43, ctxt: 0 },\n-                In => ident { name: 64, ctxt: 0 },\n+                In => ident { name: 63, ctxt: 0 },\n                 Let => ident { name: 44, ctxt: 0 },\n                 __Log => ident { name: 45, ctxt: 0 },\n                 Loop => ident { name: 46, ctxt: 0 },\n@@ -628,20 +628,20 @@ pub mod keywords {\n                 Once => ident { name: 50, ctxt: 0 },\n                 Priv => ident { name: 51, ctxt: 0 },\n                 Pub => ident { name: 52, ctxt: 0 },\n-                Pure => ident { name: 53, ctxt: 0 },\n-                Ref => ident { name: 54, ctxt: 0 },\n-                Return => ident { name: 55, ctxt: 0 },\n+                Pure => ident { name: 66, ctxt: 0 },\n+                Ref => ident { name: 53, ctxt: 0 },\n+                Return => ident { name: 54, ctxt: 0 },\n                 Static => ident { name: 27, ctxt: 0 },\n                 Self => ident { name: 8, ctxt: 0 },\n-                Struct => ident { name: 56, ctxt: 0 },\n-                Super => ident { name: 57, ctxt: 0 },\n-                True => ident { name: 58, ctxt: 0 },\n-                Trait => ident { name: 59, ctxt: 0 },\n-                Type => ident { name: 60, ctxt: 0 },\n-                Unsafe => ident { name: 61, ctxt: 0 },\n-                Use => ident { name: 62, ctxt: 0 },\n-                While => ident { name: 63, ctxt: 0 },\n-                Be => ident { name: 66, ctxt: 0 },\n+                Struct => ident { name: 55, ctxt: 0 },\n+                Super => ident { name: 56, ctxt: 0 },\n+                True => ident { name: 57, ctxt: 0 },\n+                Trait => ident { name: 58, ctxt: 0 },\n+                Type => ident { name: 59, ctxt: 0 },\n+                Unsafe => ident { name: 60, ctxt: 0 },\n+                Use => ident { name: 61, ctxt: 0 },\n+                While => ident { name: 62, ctxt: 0 },\n+                Be => ident { name: 65, ctxt: 0 },\n             }\n         }\n     }\n@@ -667,7 +667,7 @@ pub fn is_any_keyword(tok: &Token) -> bool {\n pub fn is_strict_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            8 | 27 | 32 .. 65 => true,\n+            8 | 27 | 32 .. 64 => true,\n             _ => false,\n         },\n         _ => false,\n@@ -677,7 +677,7 @@ pub fn is_strict_keyword(tok: &Token) -> bool {\n pub fn is_reserved_keyword(tok: &Token) -> bool {\n     match *tok {\n         token::IDENT(sid, false) => match sid.name {\n-            66 => true,\n+            65 .. 66 => true,\n             _ => false,\n         },\n         _ => false,"}]}