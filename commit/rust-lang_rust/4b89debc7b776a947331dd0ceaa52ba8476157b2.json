{"sha": "4b89debc7b776a947331dd0ceaa52ba8476157b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiODlkZWJjN2I3NzZhOTQ3MzMxZGQwY2VhYTUyYmE4NDc2MTU3YjI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-06-24T16:03:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-06-24T16:03:54Z"}, "message": "Auto merge of #34425 - tbu-:pr_len_instead_of_size_hint, r=alexcrichton\n\nUse `len` instead of `size_hint` where appropiate\n\nThis makes it clearer that we're not just looking for a lower bound but\nrather know that the iterator is an `ExactSizeIterator`.", "tree": {"sha": "d05eb419e87868c9f3478567922d918c05f9e01d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d05eb419e87868c9f3478567922d918c05f9e01d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b89debc7b776a947331dd0ceaa52ba8476157b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b89debc7b776a947331dd0ceaa52ba8476157b2", "html_url": "https://github.com/rust-lang/rust/commit/4b89debc7b776a947331dd0ceaa52ba8476157b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b89debc7b776a947331dd0ceaa52ba8476157b2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7189ae36116491ea4936ad34461c8d89f704608b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7189ae36116491ea4936ad34461c8d89f704608b", "html_url": "https://github.com/rust-lang/rust/commit/7189ae36116491ea4936ad34461c8d89f704608b"}, {"sha": "8ff5c4394cdfc11f29de36123a6c9618e12c9904", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff5c4394cdfc11f29de36123a6c9618e12c9904", "html_url": "https://github.com/rust-lang/rust/commit/8ff5c4394cdfc11f29de36123a6c9618e12c9904"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "9797113b8ad66450ac1934404e9acad9c112456a", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b89debc7b776a947331dd0ceaa52ba8476157b2/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b89debc7b776a947331dd0ceaa52ba8476157b2/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=4b89debc7b776a947331dd0ceaa52ba8476157b2", "patch": "@@ -1658,7 +1658,7 @@ impl<T> Iterator for IntoIter<T> {\n \n     #[inline]\n     fn count(self) -> usize {\n-        self.size_hint().0\n+        self.len()\n     }\n }\n "}, {"sha": "4ac134c2b59c8d9535d1b1d449809be809d449a4", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b89debc7b776a947331dd0ceaa52ba8476157b2/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b89debc7b776a947331dd0ceaa52ba8476157b2/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=4b89debc7b776a947331dd0ceaa52ba8476157b2", "patch": "@@ -1384,7 +1384,7 @@ impl Debug for str {\n         for (i, c) in self.char_indices() {\n             let esc = c.escape_default();\n             // If char needs escaping, flush backlog so far and write, else skip\n-            if esc.size_hint() != (1, Some(1)) {\n+            if esc.len() != 1 {\n                 f.write_str(&self[from..i])?;\n                 for c in esc {\n                     f.write_char(c)?;"}, {"sha": "4f11cac4eb2bec7b7e7ba6c4346e78fd5f3ed354", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b89debc7b776a947331dd0ceaa52ba8476157b2/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b89debc7b776a947331dd0ceaa52ba8476157b2/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=4b89debc7b776a947331dd0ceaa52ba8476157b2", "patch": "@@ -835,7 +835,7 @@ macro_rules! iterator {\n \n             #[inline]\n             fn count(self) -> usize {\n-                self.size_hint().0\n+                self.len()\n             }\n \n             #[inline]\n@@ -1444,7 +1444,7 @@ impl<'a, T> Iterator for Windows<'a, T> {\n \n     #[inline]\n     fn count(self) -> usize {\n-        self.size_hint().0\n+        self.len()\n     }\n \n     #[inline]\n@@ -1541,7 +1541,7 @@ impl<'a, T> Iterator for Chunks<'a, T> {\n \n     #[inline]\n     fn count(self) -> usize {\n-        self.size_hint().0\n+        self.len()\n     }\n \n     #[inline]\n@@ -1632,7 +1632,7 @@ impl<'a, T> Iterator for ChunksMut<'a, T> {\n \n     #[inline]\n     fn count(self) -> usize {\n-        self.size_hint().0\n+        self.len()\n     }\n \n     #[inline]"}, {"sha": "a32c9da9815ffc0a19d0cfdeec1138ccd6097b3d", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4b89debc7b776a947331dd0ceaa52ba8476157b2/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b89debc7b776a947331dd0ceaa52ba8476157b2/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=4b89debc7b776a947331dd0ceaa52ba8476157b2", "patch": "@@ -433,7 +433,7 @@ impl<'a> Iterator for Chars<'a> {\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let (len, _) = self.iter.size_hint();\n+        let len = self.iter.len();\n         // `(len + 3)` can't overflow, because we know that the `slice::Iter`\n         // belongs to a slice in memory which has a maximum length of\n         // `isize::MAX` (that's well below `usize::MAX`).\n@@ -480,12 +480,12 @@ impl<'a> Iterator for CharIndices<'a> {\n \n     #[inline]\n     fn next(&mut self) -> Option<(usize, char)> {\n-        let (pre_len, _) = self.iter.iter.size_hint();\n+        let pre_len = self.iter.iter.len();\n         match self.iter.next() {\n             None => None,\n             Some(ch) => {\n                 let index = self.front_offset;\n-                let (len, _) = self.iter.iter.size_hint();\n+                let len = self.iter.iter.len();\n                 self.front_offset += pre_len - len;\n                 Some((index, ch))\n             }\n@@ -505,8 +505,7 @@ impl<'a> DoubleEndedIterator for CharIndices<'a> {\n         match self.iter.next_back() {\n             None => None,\n             Some(ch) => {\n-                let (len, _) = self.iter.iter.size_hint();\n-                let index = self.front_offset + len;\n+                let index = self.front_offset + self.iter.iter.len();\n                 Some((index, ch))\n             }\n         }"}, {"sha": "53804c611e66ed52dc196b01e68eee88cce6820b", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b89debc7b776a947331dd0ceaa52ba8476157b2/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b89debc7b776a947331dd0ceaa52ba8476157b2/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=4b89debc7b776a947331dd0ceaa52ba8476157b2", "patch": "@@ -310,9 +310,9 @@ unsafe impl<'a, C: CharEq> Searcher<'a> for CharEqSearcher<'a, C> {\n         let s = &mut self.char_indices;\n         // Compare lengths of the internal byte slice iterator\n         // to find length of current char\n-        let (pre_len, _) = s.iter.iter.size_hint();\n+        let pre_len = s.iter.iter.len();\n         if let Some((i, c)) = s.next() {\n-            let (len, _) = s.iter.iter.size_hint();\n+            let len = s.iter.iter.len();\n             let char_len = pre_len - len;\n             if self.char_eq.matches(c) {\n                 return SearchStep::Match(i, i + char_len);\n@@ -330,9 +330,9 @@ unsafe impl<'a, C: CharEq> ReverseSearcher<'a> for CharEqSearcher<'a, C> {\n         let s = &mut self.char_indices;\n         // Compare lengths of the internal byte slice iterator\n         // to find length of current char\n-        let (pre_len, _) = s.iter.iter.size_hint();\n+        let pre_len = s.iter.iter.len();\n         if let Some((i, c)) = s.next_back() {\n-            let (len, _) = s.iter.iter.size_hint();\n+            let len = s.iter.iter.len();\n             let char_len = pre_len - len;\n             if self.char_eq.matches(c) {\n                 return SearchStep::Match(i, i + char_len);"}, {"sha": "b6be85a4dfa2879b04548c74964195a5f3f8c1ce", "filename": "src/libstd/sys/common/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b89debc7b776a947331dd0ceaa52ba8476157b2/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b89debc7b776a947331dd0ceaa52ba8476157b2/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fwtf8.rs?ref=4b89debc7b776a947331dd0ceaa52ba8476157b2", "patch": "@@ -715,7 +715,7 @@ impl<'a> Iterator for Wtf8CodePoints<'a> {\n \n     #[inline]\n     fn size_hint(&self) -> (usize, Option<usize>) {\n-        let (len, _) = self.bytes.size_hint();\n+        let len = self.bytes.len();\n         (len.saturating_add(3) / 4, Some(len))\n     }\n }"}]}