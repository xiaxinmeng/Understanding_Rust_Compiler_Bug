{"sha": "bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjNWViN2Q5OGM5ZWYyZWRlOTdmMWNiNTMzOTM2YWI4MjEwZDQ5YTQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-05-15T00:53:48Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-06-06T23:51:23Z"}, "message": "Stop passing around Option<&substs> in trans and just pass &substs, making the code more regular", "tree": {"sha": "5e7a26c60b0079e83f3c714c880c6d6c704de246", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7a26c60b0079e83f3c714c880c6d6c704de246"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "html_url": "https://github.com/rust-lang/rust/commit/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f03b5608cc66aedb94409d62335ec539880b875", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f03b5608cc66aedb94409d62335ec539880b875", "html_url": "https://github.com/rust-lang/rust/commit/0f03b5608cc66aedb94409d62335ec539880b875"}], "stats": {"total": 314, "additions": 129, "deletions": 185}, "files": [{"sha": "c4121d830dbdc50b043da75548bcb4c848d3f892", "filename": "src/librustc/middle/subst.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsubst.rs?ref=bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "patch": "@@ -63,6 +63,14 @@ impl Substs {\n         }\n     }\n \n+    pub fn trans_empty() -> Substs {\n+        Substs {\n+            self_ty: None,\n+            tps: Vec::new(),\n+            regions: ErasedRegions\n+        }\n+    }\n+\n     pub fn is_noop(&self) -> bool {\n         let regions_is_noop = match self.regions {\n             ErasedRegions => false, // may be used to canonicalize"}, {"sha": "96d059c2f84ce91a19be225812693858feab6171", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "patch": "@@ -1098,19 +1098,19 @@ pub fn new_fn_ctxt<'a>(ccx: &'a CrateContext,\n                        id: ast::NodeId,\n                        has_env: bool,\n                        output_type: ty::t,\n-                       param_substs: Option<&'a param_substs>,\n+                       param_substs: &'a param_substs,\n                        sp: Option<Span>,\n                        block_arena: &'a TypedArena<Block<'a>>)\n                        -> FunctionContext<'a> {\n-    for p in param_substs.iter() { p.validate(); }\n+    param_substs.validate();\n \n     debug!(\"new_fn_ctxt(path={}, id={}, param_substs={})\",\n            if id == -1 {\n                \"\".to_string()\n            } else {\n                ccx.tcx.map.path_to_str(id).to_string()\n            },\n-           id, param_substs.map(|s| s.repr(ccx.tcx())));\n+           id, param_substs.repr(ccx.tcx()));\n \n     let substd_output_type = output_type.substp(ccx.tcx(), param_substs);\n     let uses_outptr = type_of::return_uses_outptr(ccx, substd_output_type);\n@@ -1303,7 +1303,7 @@ pub fn trans_closure(ccx: &CrateContext,\n                      decl: &ast::FnDecl,\n                      body: &ast::Block,\n                      llfndecl: ValueRef,\n-                     param_substs: Option<&param_substs>,\n+                     param_substs: &param_substs,\n                      id: ast::NodeId,\n                      _attributes: &[ast::Attribute],\n                      output_type: ty::t,\n@@ -1314,7 +1314,7 @@ pub fn trans_closure(ccx: &CrateContext,\n     set_uwtable(llfndecl);\n \n     debug!(\"trans_closure(..., param_substs={})\",\n-           param_substs.map(|s| s.repr(ccx.tcx())));\n+           param_substs.repr(ccx.tcx()));\n \n     let has_env = match ty::get(ty::node_id_to_type(ccx.tcx(), id)).sty {\n         ty::ty_closure(_) => true,\n@@ -1327,7 +1327,7 @@ pub fn trans_closure(ccx: &CrateContext,\n                           id,\n                           has_env,\n                           output_type,\n-                          param_substs.map(|s| &*s),\n+                          param_substs,\n                           Some(body.span),\n                           &arena);\n     init_function(&fcx, false, output_type);\n@@ -1403,11 +1403,11 @@ pub fn trans_fn(ccx: &CrateContext,\n                 decl: &ast::FnDecl,\n                 body: &ast::Block,\n                 llfndecl: ValueRef,\n-                param_substs: Option<&param_substs>,\n+                param_substs: &param_substs,\n                 id: ast::NodeId,\n                 attrs: &[ast::Attribute]) {\n     let _s = StatRecorder::new(ccx, ccx.tcx.map.path_to_str(id).to_string());\n-    debug!(\"trans_fn(param_substs={})\", param_substs.map(|s| s.repr(ccx.tcx())));\n+    debug!(\"trans_fn(param_substs={})\", param_substs.repr(ccx.tcx()));\n     let _icx = push_ctxt(\"trans_fn\");\n     let output_type = ty::ty_fn_ret(ty::node_id_to_type(ccx.tcx(), id));\n     trans_closure(ccx, decl, body, llfndecl,\n@@ -1419,7 +1419,7 @@ pub fn trans_enum_variant(ccx: &CrateContext,\n                           variant: &ast::Variant,\n                           _args: &[ast::VariantArg],\n                           disr: ty::Disr,\n-                          param_substs: Option<&param_substs>,\n+                          param_substs: &param_substs,\n                           llfndecl: ValueRef) {\n     let _icx = push_ctxt(\"trans_enum_variant\");\n \n@@ -1434,7 +1434,7 @@ pub fn trans_enum_variant(ccx: &CrateContext,\n pub fn trans_tuple_struct(ccx: &CrateContext,\n                           _fields: &[ast::StructField],\n                           ctor_id: ast::NodeId,\n-                          param_substs: Option<&param_substs>,\n+                          param_substs: &param_substs,\n                           llfndecl: ValueRef) {\n     let _icx = push_ctxt(\"trans_tuple_struct\");\n \n@@ -1449,7 +1449,7 @@ pub fn trans_tuple_struct(ccx: &CrateContext,\n fn trans_enum_variant_or_tuple_like_struct(ccx: &CrateContext,\n                                            ctor_id: ast::NodeId,\n                                            disr: ty::Disr,\n-                                           param_substs: Option<&param_substs>,\n+                                           param_substs: &param_substs,\n                                            llfndecl: ValueRef) {\n     let ctor_ty = ty::node_id_to_type(ccx.tcx(), ctor_id);\n     let ctor_ty = ctor_ty.substp(ccx.tcx(), param_substs);\n@@ -1464,7 +1464,7 @@ fn trans_enum_variant_or_tuple_like_struct(ccx: &CrateContext,\n \n     let arena = TypedArena::new();\n     let fcx = new_fn_ctxt(ccx, llfndecl, ctor_id, false, result_ty,\n-                          param_substs.map(|s| &*s), None, &arena);\n+                          param_substs, None, &arena);\n     init_function(&fcx, false, result_ty);\n \n     let arg_tys = ty::ty_fn_args(ctor_ty);\n@@ -1500,7 +1500,7 @@ fn trans_enum_def(ccx: &CrateContext, enum_definition: &ast::EnumDef,\n             ast::TupleVariantKind(ref args) if args.len() > 0 => {\n                 let llfn = get_item_val(ccx, variant.node.id);\n                 trans_enum_variant(ccx, id, variant, args.as_slice(),\n-                                   disr_val, None, llfn);\n+                                   disr_val, &param_substs::empty(), llfn);\n             }\n             ast::TupleVariantKind(_) => {\n                 // Nothing to do.\n@@ -1587,7 +1587,7 @@ pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n                      decl,\n                      body,\n                      llfn,\n-                     None,\n+                     &param_substs::empty(),\n                      item.id,\n                      item.attrs.as_slice());\n         } else {\n@@ -1660,7 +1660,7 @@ pub fn trans_struct_def(ccx: &CrateContext, struct_def: @ast::StructDef) {\n         Some(ctor_id) if struct_def.fields.len() > 0 => {\n             let llfndecl = get_item_val(ccx, ctor_id);\n             trans_tuple_struct(ccx, struct_def.fields.as_slice(),\n-                               ctor_id, None, llfndecl);\n+                               ctor_id, &param_substs::empty(), llfndecl);\n         }\n         Some(_) | None => {}\n     }"}, {"sha": "8ee777278fe6a3841f239ae3ac6b3b14d354d3f3", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "patch": "@@ -187,7 +187,7 @@ fn trans_fn_ref_with_vtables_to_callee<'a>(bcx: &'a Block<'a>,\n                                            def_id: ast::DefId,\n                                            ref_id: ast::NodeId,\n                                            substs: subst::Substs,\n-                                           vtables: Option<typeck::vtable_res>)\n+                                           vtables: typeck::vtable_res)\n                                            -> Callee<'a> {\n     Callee {bcx: bcx,\n             data: Fn(trans_fn_ref_with_vtables(bcx, def_id, ExprId(ref_id),\n@@ -198,8 +198,9 @@ fn resolve_default_method_vtables(bcx: &Block,\n                                   impl_id: ast::DefId,\n                                   method: &ty::Method,\n                                   substs: &subst::Substs,\n-                                  impl_vtables: Option<typeck::vtable_res>)\n-                          -> (typeck::vtable_res, typeck::vtable_param_res) {\n+                                  impl_vtables: typeck::vtable_res)\n+                          -> (typeck::vtable_res, typeck::vtable_param_res)\n+{\n \n     // Get the vtables that the impl implements the trait at\n     let impl_res = ty::lookup_impl_vtables(bcx.tcx(), impl_id);\n@@ -213,27 +214,15 @@ fn resolve_default_method_vtables(bcx: &Block,\n     };\n \n     let mut param_vtables = resolve_vtables_under_param_substs(\n-        bcx.tcx(), Some(&param_substs), impl_res.trait_vtables.as_slice());\n+        bcx.tcx(), &param_substs, impl_res.trait_vtables.as_slice());\n \n     // Now we pull any vtables for parameters on the actual method.\n     let num_method_vtables = method.generics.type_param_defs().len();\n-    match impl_vtables {\n-        Some(ref vtables) => {\n-            let num_impl_type_parameters =\n-                vtables.len() - num_method_vtables;\n-            param_vtables.push_all(vtables.tailn(num_impl_type_parameters))\n-        },\n-        None => {\n-            param_vtables.extend(range(0, num_method_vtables).map(\n-                |_| -> typeck::vtable_param_res {\n-                    Vec::new()\n-                }\n-            ))\n-        }\n-    }\n+    let num_impl_type_parameters = impl_vtables.len() - num_method_vtables;\n+    param_vtables.push_all(impl_vtables.tailn(num_impl_type_parameters));\n \n     let self_vtables = resolve_param_vtables_under_param_substs(\n-        bcx.tcx(), Some(&param_substs), impl_res.self_vtables.as_slice());\n+        bcx.tcx(), &param_substs, impl_res.self_vtables.as_slice());\n \n     (param_vtables, self_vtables)\n }\n@@ -244,7 +233,7 @@ pub fn trans_fn_ref_with_vtables(\n         def_id: ast::DefId,   // def id of fn\n         node: ExprOrMethodCall,  // node id of use of fn; may be zero if N/A\n         substs: subst::Substs, // values for fn's ty params\n-        vtables: Option<typeck::vtable_res>) // vtables for the call\n+        vtables: typeck::vtable_res) // vtables for the call\n      -> ValueRef {\n     /*!\n      * Translates a reference to a fn/method item, monomorphizing and\n@@ -336,7 +325,7 @@ pub fn trans_fn_ref_with_vtables(\n                    self_vtables.repr(tcx), param_vtables.repr(tcx));\n \n             (true, source_id,\n-             new_substs, Some(self_vtables), Some(param_vtables))\n+             new_substs, Some(self_vtables), param_vtables)\n         }\n     };\n \n@@ -507,7 +496,7 @@ pub fn trans_lang_call<'a>(\n                                                                     did,\n                                                                     0,\n                                                                     subst::Substs::empty(),\n-                                                                    None)\n+                                                                    Vec::new())\n                              },\n                              ArgVals(args),\n                              dest)"}, {"sha": "f956b58031cde143c7812b1936d44ea997f07184", "filename": "src/librustc/middle/trans/closure.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "patch": "@@ -421,7 +421,9 @@ pub fn get_wrapper_for_bare_fn(ccx: &CrateContext,\n     let _icx = push_ctxt(\"closure::get_wrapper_for_bare_fn\");\n \n     let arena = TypedArena::new();\n-    let fcx = new_fn_ctxt(ccx, llfn, -1, true, f.sig.output, None, None, &arena);\n+    let empty_param_substs = param_substs::empty();\n+    let fcx = new_fn_ctxt(ccx, llfn, -1, true, f.sig.output,\n+                          &empty_param_substs, None, &arena);\n     init_function(&fcx, true, f.sig.output);\n     let bcx = fcx.entry_bcx.borrow().clone().unwrap();\n "}, {"sha": "1bcf47531dd561bb757da7e95b834f7e75e3ce24", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 21, "deletions": 41, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "patch": "@@ -180,11 +180,19 @@ pub type ExternMap = HashMap<String, ValueRef>;\n // will only be set in the case of default methods.\n pub struct param_substs {\n     pub substs: subst::Substs,\n-    pub vtables: Option<typeck::vtable_res>,\n+    pub vtables: typeck::vtable_res,\n     pub self_vtables: Option<typeck::vtable_param_res>\n }\n \n impl param_substs {\n+    pub fn empty() -> param_substs {\n+        param_substs {\n+            substs: subst::Substs::trans_empty(),\n+            vtables: Vec::new(),\n+            self_vtables: None\n+        }\n+    }\n+\n     pub fn validate(&self) {\n         for t in self.substs.tps.iter() {\n             assert!(!ty::type_needs_infer(*t));\n@@ -206,21 +214,13 @@ impl Repr for param_substs {\n }\n \n pub trait SubstP {\n-    fn substp(&self, tcx: &ty::ctxt, param_substs: Option<&param_substs>)\n+    fn substp(&self, tcx: &ty::ctxt, param_substs: &param_substs)\n               -> Self;\n }\n \n impl<T:Subst+Clone> SubstP for T {\n-    fn substp(&self, tcx: &ty::ctxt, param_substs: Option<&param_substs>)\n-              -> T {\n-        match param_substs {\n-            Some(substs) => {\n-                self.subst(tcx, &substs.substs)\n-            }\n-            None => {\n-                (*self).clone()\n-            }\n-        }\n+    fn substp(&self, tcx: &ty::ctxt, substs: &param_substs) -> T {\n+        self.subst(tcx, &substs.substs)\n     }\n }\n \n@@ -281,7 +281,7 @@ pub struct FunctionContext<'a> {\n \n     // If this function is being monomorphized, this contains the type\n     // substitutions used.\n-    pub param_substs: Option<&'a param_substs>,\n+    pub param_substs: &'a param_substs,\n \n     // The source span and nesting context where this function comes from, for\n     // error reporting and symbol generation.\n@@ -697,16 +697,7 @@ pub fn is_null(val: ValueRef) -> bool {\n }\n \n pub fn monomorphize_type(bcx: &Block, t: ty::t) -> ty::t {\n-    match bcx.fcx.param_substs {\n-        Some(ref substs) => {\n-            t.subst(bcx.tcx(), &substs.substs)\n-        }\n-        _ => {\n-            assert!(!ty::type_has_params(t));\n-            assert!(!ty::type_has_self(t));\n-            t\n-        }\n-    }\n+    t.subst(bcx.tcx(), &bcx.fcx.param_substs.substs)\n }\n \n pub fn node_id_type(bcx: &Block, id: ast::NodeId) -> ty::t {\n@@ -759,10 +750,10 @@ pub fn node_id_substs(bcx: &Block,\n }\n \n pub fn node_vtables(bcx: &Block, id: typeck::MethodCall)\n-                 -> Option<typeck::vtable_res> {\n+                 -> typeck::vtable_res {\n     bcx.tcx().vtable_map.borrow().find(&id).map(|vts| {\n         resolve_vtables_in_fn_ctxt(bcx.fcx, vts.as_slice())\n-    })\n+    }).unwrap_or_else(|| Vec::new())\n }\n \n // Apply the typaram substitutions in the FunctionContext to some\n@@ -776,7 +767,7 @@ pub fn resolve_vtables_in_fn_ctxt(fcx: &FunctionContext,\n }\n \n pub fn resolve_vtables_under_param_substs(tcx: &ty::ctxt,\n-                                          param_substs: Option<&param_substs>,\n+                                          param_substs: &param_substs,\n                                           vts: &[typeck::vtable_param_res])\n                                           -> typeck::vtable_res {\n     vts.iter().map(|ds| {\n@@ -788,7 +779,7 @@ pub fn resolve_vtables_under_param_substs(tcx: &ty::ctxt,\n \n pub fn resolve_param_vtables_under_param_substs(\n     tcx: &ty::ctxt,\n-    param_substs: Option<&param_substs>,\n+    param_substs: &param_substs,\n     ds: &[typeck::vtable_origin])\n     -> typeck::vtable_param_res {\n     ds.iter().map(|d| {\n@@ -801,7 +792,7 @@ pub fn resolve_param_vtables_under_param_substs(\n \n \n pub fn resolve_vtable_under_param_substs(tcx: &ty::ctxt,\n-                                         param_substs: Option<&param_substs>,\n+                                         param_substs: &param_substs,\n                                          vt: &typeck::vtable_origin)\n                                          -> typeck::vtable_origin {\n     match *vt {\n@@ -812,16 +803,7 @@ pub fn resolve_vtable_under_param_substs(tcx: &ty::ctxt,\n                 resolve_vtables_under_param_substs(tcx, param_substs, sub.as_slice()))\n         }\n         typeck::vtable_param(n_param, n_bound) => {\n-            match param_substs {\n-                Some(substs) => {\n-                    find_vtable(tcx, substs, n_param, n_bound)\n-                }\n-                _ => {\n-                    tcx.sess.bug(format!(\n-                        \"resolve_vtable_under_param_substs: asked to lookup \\\n-                         but no vtables in the fn_ctxt!\").as_slice())\n-                }\n-            }\n+            find_vtable(tcx, param_substs, n_param, n_bound)\n         }\n     }\n }\n@@ -837,9 +819,7 @@ pub fn find_vtable(tcx: &ty::ctxt,\n     let param_bounds = match n_param {\n         typeck::param_self => ps.self_vtables.as_ref().expect(\"self vtables missing\"),\n         typeck::param_numbered(n) => {\n-            let tables = ps.vtables.as_ref()\n-                .expect(\"vtables missing where they are needed\");\n-            tables.get(n)\n+            ps.vtables.get(n)\n         }\n     };\n     param_bounds.get(n_bound).clone()"}, {"sha": "b709fa52cf730261906458ebc108e6cdec91ac27", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "patch": "@@ -621,7 +621,7 @@ pub fn start_emitting_source_locations(fcx: &FunctionContext) {\n /// indicates why no debuginfo should be created for the function.\n pub fn create_function_debug_context(cx: &CrateContext,\n                                      fn_ast_id: ast::NodeId,\n-                                     param_substs: Option<&param_substs>,\n+                                     param_substs: &param_substs,\n                                      llfn: ValueRef) -> FunctionDebugContext {\n     if cx.sess().opts.debuginfo == NoDebugInfo {\n         return FunctionDebugContext { repr: DebugInfoDisabled };\n@@ -788,7 +788,7 @@ pub fn create_function_debug_context(cx: &CrateContext,\n     fn get_function_signature(cx: &CrateContext,\n                               fn_ast_id: ast::NodeId,\n                               fn_decl: &ast::FnDecl,\n-                              param_substs: Option<&param_substs>,\n+                              param_substs: &param_substs,\n                               error_span: Span) -> DIArray {\n         if cx.sess().opts.debuginfo == LimitedDebugInfo {\n             return create_DIArray(DIB(cx), []);\n@@ -823,14 +823,11 @@ pub fn create_function_debug_context(cx: &CrateContext,\n \n     fn get_template_parameters(cx: &CrateContext,\n                                generics: &ast::Generics,\n-                               param_substs: Option<&param_substs>,\n+                               param_substs: &param_substs,\n                                file_metadata: DIFile,\n                                name_to_append_suffix_to: &mut String)\n                                -> DIArray {\n-        let self_type = match param_substs {\n-            Some(param_substs) => param_substs.substs.self_ty,\n-            _ => None\n-        };\n+        let self_type = param_substs.substs.self_ty;\n \n         // Only true for static default methods:\n         let has_self_type = self_type.is_some();\n@@ -884,13 +881,7 @@ pub fn create_function_debug_context(cx: &CrateContext,\n         }\n \n         // Handle other generic parameters\n-        let actual_types = match param_substs {\n-            Some(param_substs) => &param_substs.substs.tps,\n-            None => {\n-                return create_DIArray(DIB(cx), template_params.as_slice());\n-            }\n-        };\n-\n+        let actual_types = &param_substs.substs.tps;\n         for (index, &ast::TyParam{ ident: ident, .. }) in generics.ty_params.iter().enumerate() {\n             let actual_type = *actual_types.get(index);\n             // Add actual type name to <...> clause of function name"}, {"sha": "6f217d83a624a2497f29fd016d6940877c63d5a5", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "patch": "@@ -570,7 +570,7 @@ pub fn trans_rust_fn_with_foreign_abi(ccx: &CrateContext,\n \n         let llfn = base::decl_internal_rust_fn(ccx, t, ps.as_slice());\n         base::set_llvm_fn_attrs(attrs, llfn);\n-        base::trans_fn(ccx, decl, body, llfn, None, id, []);\n+        base::trans_fn(ccx, decl, body, llfn, &param_substs::empty(), id, []);\n         llfn\n     }\n "}, {"sha": "96aa7267d231ab8aa65014a056e6781a2eca6e91", "filename": "src/librustc/middle/trans/glue.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fglue.rs?ref=bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "patch": "@@ -479,7 +479,9 @@ fn make_generic_glue(ccx: &CrateContext,\n     let _s = StatRecorder::new(ccx, glue_name);\n \n     let arena = TypedArena::new();\n-    let fcx = new_fn_ctxt(ccx, llfn, -1, false, ty::mk_nil(), None, None, &arena);\n+    let empty_param_substs = param_substs::empty();\n+    let fcx = new_fn_ctxt(ccx, llfn, -1, false, ty::mk_nil(),\n+                          &empty_param_substs, None, &arena);\n \n     init_function(&fcx, false, ty::mk_nil());\n "}, {"sha": "c14ff7a49eabcaa69040e57b212e74223b1fb48d", "filename": "src/librustc/middle/trans/inline.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Finline.rs?ref=bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "patch": "@@ -131,7 +131,8 @@ pub fn maybe_instantiate_inline(ccx: &CrateContext, fn_id: ast::DefId)\n \n           if num_type_params == 0 {\n               let llfn = get_item_val(ccx, mth.id);\n-              trans_fn(ccx, mth.decl, mth.body, llfn, None, mth.id, []);\n+              trans_fn(ccx, mth.decl, mth.body, llfn,\n+                       &param_substs::empty(), mth.id, []);\n           }\n           local_def(mth.id)\n         }"}, {"sha": "0719288bb028529e03c8e31a41df6fc45d7e6bfb", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "patch": "@@ -192,7 +192,7 @@ pub fn trans_intrinsic(ccx: &CrateContext,\n \n     let arena = TypedArena::new();\n     let fcx = new_fn_ctxt(ccx, decl, item.id, false, output_type,\n-                          Some(&*substs), Some(item.span), &arena);\n+                          substs, Some(item.span), &arena);\n     init_function(&fcx, true, output_type);\n \n     set_always_inline(fcx.llfn);"}, {"sha": "2beb3be3d275085e03cbc497d5acbd408fbf9583", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 14, "deletions": 30, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "patch": "@@ -68,7 +68,7 @@ pub fn trans_impl(ccx: &CrateContext,\n         if method.generics.ty_params.len() == 0u {\n             let llfn = get_item_val(ccx, method.id);\n             trans_fn(ccx, method.decl, method.body,\n-                     llfn, None, method.id, []);\n+                     llfn, &param_substs::empty(), method.id, []);\n         } else {\n             let mut v = TransItemVisitor{ ccx: ccx };\n             visit::walk_method_helper(&mut v, *method, ());\n@@ -110,19 +110,13 @@ pub fn trans_method_callee<'a>(\n             param_num: p,\n             bound_num: b\n         }) => {\n-            match bcx.fcx.param_substs {\n-                Some(substs) => {\n-                    ty::populate_implementations_for_trait_if_necessary(\n-                        bcx.tcx(),\n-                        trait_id);\n-\n-                    let vtbl = find_vtable(bcx.tcx(), substs, p, b);\n-                    trans_monomorphized_callee(bcx, method_call,\n-                                               trait_id, off, vtbl)\n-                }\n-                // how to get rid of this?\n-                None => fail!(\"trans_method_callee: missing param_substs\")\n-            }\n+            ty::populate_implementations_for_trait_if_necessary(\n+                bcx.tcx(),\n+                trait_id);\n+\n+            let vtbl = find_vtable(bcx.tcx(), bcx.fcx.param_substs, p, b);\n+            trans_monomorphized_callee(bcx, method_call,\n+                                       trait_id, off, vtbl)\n         }\n \n         typeck::MethodObject(ref mt) => {\n@@ -209,7 +203,7 @@ pub fn trans_static_method_callee(bcx: &Block,\n \n             let llfn = trans_fn_ref_with_vtables(bcx, mth_id, ExprId(expr_id),\n                                                  callee_substs,\n-                                                 Some(callee_origins));\n+                                                 callee_origins);\n \n             let callee_ty = node_id_type(bcx, expr_id);\n             let llty = type_of_fn_from_ty(ccx, callee_ty).ptr_to();\n@@ -265,7 +259,7 @@ fn trans_monomorphized_callee<'a>(bcx: &'a Block<'a>,\n                                                mth_id,\n                                                MethodCall(method_call),\n                                                callee_substs,\n-                                               Some(callee_origins));\n+                                               callee_origins);\n \n           Callee { bcx: bcx, data: Fn(llfn) }\n       }\n@@ -322,19 +316,9 @@ fn combine_impl_and_methods_tps(bcx: &Block,\n         MethodCall(method_call) => method_call\n     };\n     let mut vtables = rcvr_origins;\n-    match node_vtables(bcx, vtable_key) {\n-        Some(vt) => {\n-            let start = vt.len() - n_m_tps;\n-            vtables.extend(vt.move_iter().skip(start));\n-        }\n-        None => {\n-            vtables.extend(range(0, n_m_tps).map(\n-                |_| -> typeck::vtable_param_res {\n-                    Vec::new()\n-                }\n-            ));\n-        }\n-    }\n+    let vt = node_vtables(bcx, vtable_key);\n+    let start = vt.len() - n_m_tps;\n+    vtables.extend(vt.move_iter().skip(start));\n \n     let ty_substs = subst::Substs {\n         tps: tps,\n@@ -525,7 +509,7 @@ fn emit_vtable_methods(bcx: &Block,\n             C_null(Type::nil(ccx).ptr_to())\n         } else {\n             trans_fn_ref_with_vtables(bcx, m_id, ExprId(0),\n-                                      substs.clone(), Some(vtables.clone()))\n+                                      substs.clone(), vtables.clone())\n         }\n     }).collect()\n }"}, {"sha": "9559c0909a6abf42f17439efdbbadc72befaf7c8", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "patch": "@@ -32,7 +32,7 @@ use std::hash::{sip, Hash};\n pub fn monomorphic_fn(ccx: &CrateContext,\n                       fn_id: ast::DefId,\n                       real_substs: &subst::Substs,\n-                      vtables: Option<typeck::vtable_res>,\n+                      vtables: typeck::vtable_res,\n                       self_vtables: Option<typeck::vtable_param_res>,\n                       ref_id: Option<ast::NodeId>)\n     -> (ValueRef, bool) {\n@@ -206,7 +206,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n               } => {\n                   let d = mk_lldecl();\n                   set_llvm_fn_attrs(i.attrs.as_slice(), d);\n-                  trans_fn(ccx, decl, body, d, Some(&psubsts), fn_id.node, []);\n+                  trans_fn(ccx, decl, body, d, &psubsts, fn_id.node, []);\n                   d\n               }\n               _ => {\n@@ -238,7 +238,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n                                        v,\n                                        args.as_slice(),\n                                        this_tv.disr_val,\n-                                       Some(&psubsts),\n+                                       &psubsts,\n                                        d);\n                 }\n                 ast::StructVariantKind(_) =>\n@@ -249,15 +249,15 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n         ast_map::NodeMethod(mth) => {\n             let d = mk_lldecl();\n             set_llvm_fn_attrs(mth.attrs.as_slice(), d);\n-            trans_fn(ccx, mth.decl, mth.body, d, Some(&psubsts), mth.id, []);\n+            trans_fn(ccx, mth.decl, mth.body, d, &psubsts, mth.id, []);\n             d\n         }\n         ast_map::NodeTraitMethod(method) => {\n             match *method {\n                 ast::Provided(mth) => {\n                     let d = mk_lldecl();\n                     set_llvm_fn_attrs(mth.attrs.as_slice(), d);\n-                    trans_fn(ccx, mth.decl, mth.body, d, Some(&psubsts), mth.id, []);\n+                    trans_fn(ccx, mth.decl, mth.body, d, &psubsts, mth.id, []);\n                     d\n                 }\n                 _ => {\n@@ -273,7 +273,7 @@ pub fn monomorphic_fn(ccx: &CrateContext,\n                                      struct_def.fields.as_slice(),\n                                      struct_def.ctor_id.expect(\"ast-mapped tuple struct \\\n                                                                 didn't have a ctor id\"),\n-                                     Some(&psubsts),\n+                                     &psubsts,\n                                      d);\n             d\n         }"}, {"sha": "3b469a1d110633b2bcbf6f8e53fa2679eb5ed8f9", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "patch": "@@ -297,8 +297,10 @@ impl<'a, 'b> Reflector<'a, 'b> {\n                                                     fn_ty,\n                                                     sym.as_slice());\n                 let arena = TypedArena::new();\n+                let empty_param_substs = param_substs::empty();\n                 let fcx = new_fn_ctxt(ccx, llfdecl, -1, false,\n-                                      ty::mk_u64(), None, None, &arena);\n+                                      ty::mk_u64(), &empty_param_substs,\n+                                      None, &arena);\n                 init_function(&fcx, false, ty::mk_u64());\n \n                 let arg = unsafe {"}, {"sha": "0665ae651f0ad319bca3ad614348ad92c215da8d", "filename": "src/librustc/middle/typeck/check/vtable.rs", "status": "modified", "additions": 36, "deletions": 51, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fvtable.rs?ref=bc5eb7d98c9ef2ede97f1cb533936ab8210d49a4", "patch": "@@ -74,11 +74,6 @@ impl<'a> VtableContext<'a> {\n     pub fn tcx(&self) -> &'a ty::ctxt { self.infcx.tcx }\n }\n \n-fn has_trait_bounds(type_param_defs: &[ty::TypeParameterDef]) -> bool {\n-    type_param_defs.iter().any(\n-        |type_param_def| !type_param_def.bounds.trait_bounds.is_empty())\n-}\n-\n fn lookup_vtables(vcx: &VtableContext,\n                   span: Span,\n                   type_param_defs: &[ty::TypeParameterDef],\n@@ -636,16 +631,14 @@ pub fn early_resolve_expr(ex: &ast::Expr, fcx: &FnCtxt, is_early: bool) {\n             let item_ty = ty::lookup_item_type(cx.tcx, did);\n             debug!(\"early resolve expr: def {:?} {:?}, {:?}, {}\", ex.id, did, def,\n                    fcx.infcx().ty_to_str(item_ty.ty));\n-            if has_trait_bounds(item_ty.generics.type_param_defs()) {\n-                debug!(\"early_resolve_expr: looking up vtables for type params {}\",\n-                       item_ty.generics.type_param_defs().repr(fcx.tcx()));\n-                let vcx = fcx.vtable_context();\n-                let vtbls = lookup_vtables(&vcx, ex.span,\n-                                           item_ty.generics.type_param_defs(),\n-                                           &item_substs.substs, is_early);\n-                if !is_early {\n-                    insert_vtables(fcx, MethodCall::expr(ex.id), vtbls);\n-                }\n+            debug!(\"early_resolve_expr: looking up vtables for type params {}\",\n+                   item_ty.generics.type_param_defs().repr(fcx.tcx()));\n+            let vcx = fcx.vtable_context();\n+            let vtbls = lookup_vtables(&vcx, ex.span,\n+                                       item_ty.generics.type_param_defs(),\n+                                       &item_substs.substs, is_early);\n+            if !is_early {\n+                insert_vtables(fcx, MethodCall::expr(ex.id), vtbls);\n             }\n         });\n       }\n@@ -658,19 +651,17 @@ pub fn early_resolve_expr(ex: &ast::Expr, fcx: &FnCtxt, is_early: bool) {\n       ast::ExprMethodCall(_, _, _) => {\n         match fcx.inh.method_map.borrow().find(&MethodCall::expr(ex.id)) {\n           Some(method) => {\n-            debug!(\"vtable resolution on parameter bounds for method call {}\",\n-                   ex.repr(fcx.tcx()));\n-            let type_param_defs = ty::method_call_type_param_defs(cx.tcx, method.origin);\n-            if has_trait_bounds(type_param_defs.as_slice()) {\n-                let substs = fcx.method_ty_substs(ex.id);\n-                let vcx = fcx.vtable_context();\n-                let vtbls = lookup_vtables(&vcx, ex.span,\n-                                           type_param_defs.as_slice(),\n-                                           &substs, is_early);\n-                if !is_early {\n-                    insert_vtables(fcx, MethodCall::expr(ex.id), vtbls);\n-                }\n-            }\n+              debug!(\"vtable resolution on parameter bounds for method call {}\",\n+                     ex.repr(fcx.tcx()));\n+              let type_param_defs = ty::method_call_type_param_defs(cx.tcx, method.origin);\n+              let substs = fcx.method_ty_substs(ex.id);\n+              let vcx = fcx.vtable_context();\n+              let vtbls = lookup_vtables(&vcx, ex.span,\n+                                         type_param_defs.as_slice(),\n+                                         &substs, is_early);\n+              if !is_early {\n+                  insert_vtables(fcx, MethodCall::expr(ex.id), vtbls);\n+              }\n           }\n           None => {}\n         }\n@@ -696,15 +687,13 @@ pub fn early_resolve_expr(ex: &ast::Expr, fcx: &FnCtxt, is_early: bool) {\n                                        ex.repr(fcx.tcx()));\n                                 let type_param_defs =\n                                     ty::method_call_type_param_defs(cx.tcx, method.origin);\n-                                if has_trait_bounds(type_param_defs.deref().as_slice()) {\n-                                    let vcx = fcx.vtable_context();\n-                                    let vtbls = lookup_vtables(&vcx, ex.span,\n-                                                               type_param_defs.deref()\n-                                                               .as_slice(),\n-                                                               &method.substs, is_early);\n-                                    if !is_early {\n-                                        insert_vtables(fcx, method_call, vtbls);\n-                                    }\n+                                let vcx = fcx.vtable_context();\n+                                let vtbls = lookup_vtables(&vcx, ex.span,\n+                                                           type_param_defs.deref()\n+                                                           .as_slice(),\n+                                                           &method.substs, is_early);\n+                                if !is_early {\n+                                    insert_vtables(fcx, method_call, vtbls);\n                                 }\n                             }\n                             None => {}\n@@ -800,23 +789,19 @@ pub fn resolve_impl(tcx: &ty::ctxt,\n /// Resolve vtables for a method call after typeck has finished.\n /// Used by trans to monomorphize artificial method callees (e.g. drop).\n pub fn trans_resolve_method(tcx: &ty::ctxt, id: ast::NodeId,\n-                            substs: &subst::Substs) -> Option<vtable_res> {\n+                            substs: &subst::Substs) -> vtable_res {\n     let generics = ty::lookup_item_type(tcx, ast_util::local_def(id)).generics;\n     let type_param_defs = &*generics.type_param_defs;\n-    if has_trait_bounds(type_param_defs.as_slice()) {\n-        let vcx = VtableContext {\n-            infcx: &infer::new_infer_ctxt(tcx),\n-            param_env: &ty::construct_parameter_environment(tcx, None, [], [], [], [], id)\n-        };\n+    let vcx = VtableContext {\n+        infcx: &infer::new_infer_ctxt(tcx),\n+        param_env: &ty::construct_parameter_environment(tcx, None, [], [], [], [], id)\n+    };\n \n-        Some(lookup_vtables(&vcx,\n-                            tcx.map.span(id),\n-                            type_param_defs.as_slice(),\n-                            substs,\n-                            false))\n-    } else {\n-        None\n-    }\n+    lookup_vtables(&vcx,\n+                   tcx.map.span(id),\n+                   type_param_defs.as_slice(),\n+                   substs,\n+                   false)\n }\n \n impl<'a, 'b> visit::Visitor<()> for &'a FnCtxt<'b> {"}]}