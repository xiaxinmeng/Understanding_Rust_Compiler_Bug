{"sha": "9cf6ce070d02e978eb29a84a64934b674bccb32a", "node_id": "C_kwDOAAsO6NoAKDljZjZjZTA3MGQwMmU5NzhlYjI5YTg0YTY0OTM0YjY3NGJjY2IzMmE", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-11-03T17:07:09Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-11-18T01:01:05Z"}, "message": "Remove more PlaceBuilder clones", "tree": {"sha": "747bf7717783fe62fd63e6fd8f92e5b400dce882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/747bf7717783fe62fd63e6fd8f92e5b400dce882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cf6ce070d02e978eb29a84a64934b674bccb32a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cf6ce070d02e978eb29a84a64934b674bccb32a", "html_url": "https://github.com/rust-lang/rust/commit/9cf6ce070d02e978eb29a84a64934b674bccb32a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cf6ce070d02e978eb29a84a64934b674bccb32a/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "105abe39c087c8aa12928bdb5f077741695dda33", "url": "https://api.github.com/repos/rust-lang/rust/commits/105abe39c087c8aa12928bdb5f077741695dda33", "html_url": "https://github.com/rust-lang/rust/commit/105abe39c087c8aa12928bdb5f077741695dda33"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "edd527286264a135e019394fc9019646d32f3e88", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9cf6ce070d02e978eb29a84a64934b674bccb32a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf6ce070d02e978eb29a84a64934b674bccb32a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=9cf6ce070d02e978eb29a84a64934b674bccb32a", "patch": "@@ -315,6 +315,14 @@ impl<'tcx> PlaceBuilder<'tcx> {\n         self.projection.push(elem);\n         self\n     }\n+\n+    /// Same as `.clone().project(..)` but more efficient\n+    pub(crate) fn clone_project(&self, elem: PlaceElem<'tcx>) -> Self {\n+        Self {\n+            base: self.base,\n+            projection: Vec::from_iter(self.projection.iter().copied().chain([elem])),\n+        }\n+    }\n }\n \n impl<'tcx> From<Local> for PlaceBuilder<'tcx> {"}, {"sha": "1fb0f36021e0262b6b2517d413a62752086dc936", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9cf6ce070d02e978eb29a84a64934b674bccb32a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf6ce070d02e978eb29a84a64934b674bccb32a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=9cf6ce070d02e978eb29a84a64934b674bccb32a", "patch": "@@ -363,10 +363,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         .map(|(n, ty)| match fields_map.get(&n) {\n                             Some(v) => v.clone(),\n                             None => {\n-                                let place_builder = place_builder.clone();\n-                                this.consume_by_copy_or_move(\n-                                    place_builder.field(n, *ty).to_place(this),\n-                                )\n+                                let place = place_builder.clone_project(PlaceElem::Field(n, *ty));\n+                                this.consume_by_copy_or_move(place.to_place(this))\n                             }\n                         })\n                         .collect()"}, {"sha": "d5b1a56076a1ca7607f2503e53875055ba3ba8f8", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9cf6ce070d02e978eb29a84a64934b674bccb32a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf6ce070d02e978eb29a84a64934b674bccb32a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=9cf6ce070d02e978eb29a84a64934b674bccb32a", "patch": "@@ -168,7 +168,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let scrutinee_place =\n             unpack!(block = self.lower_scrutinee(block, scrutinee, scrutinee_span,));\n \n-        let mut arm_candidates = self.create_match_candidates(scrutinee_place.clone(), &arms);\n+        let mut arm_candidates = self.create_match_candidates(&scrutinee_place, &arms);\n \n         let match_has_guard = arm_candidates.iter().any(|(_, candidate)| candidate.has_guard);\n         let mut candidates =\n@@ -230,7 +230,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Create the initial `Candidate`s for a `match` expression.\n     fn create_match_candidates<'pat>(\n         &mut self,\n-        scrutinee: PlaceBuilder<'tcx>,\n+        scrutinee: &PlaceBuilder<'tcx>,\n         arms: &'pat [ArmId],\n     ) -> Vec<(&'pat Arm<'tcx>, Candidate<'pat, 'tcx>)>\n     where\n@@ -1332,15 +1332,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 bug!(\"Or-patterns should have been sorted to the end\");\n             };\n             let or_span = match_pair.pattern.span;\n-            let place = match_pair.place;\n \n             first_candidate.visit_leaves(|leaf_candidate| {\n                 self.test_or_pattern(\n                     leaf_candidate,\n                     &mut otherwise,\n                     pats,\n                     or_span,\n-                    place.clone(),\n+                    &match_pair.place,\n                     fake_borrows,\n                 );\n             });\n@@ -1368,7 +1367,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         otherwise: &mut Option<BasicBlock>,\n         pats: &'pat [Box<Pat<'tcx>>],\n         or_span: Span,\n-        place: PlaceBuilder<'tcx>,\n+        place: &PlaceBuilder<'tcx>,\n         fake_borrows: &mut Option<FxIndexSet<Place<'tcx>>>,\n     ) {\n         debug!(\"candidate={:#?}\\npats={:#?}\", candidate, pats);\n@@ -1607,7 +1606,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // encounter a candidate where the test is not relevant; at\n         // that point, we stop sorting.\n         while let Some(candidate) = candidates.first_mut() {\n-            let Some(idx) = self.sort_candidate(&match_place.clone(), &test, candidate) else {\n+            let Some(idx) = self.sort_candidate(&match_place, &test, candidate) else {\n                 break;\n             };\n             let (candidate, rest) = candidates.split_first_mut().unwrap();\n@@ -1676,7 +1675,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             target_blocks\n         };\n \n-        self.perform_test(span, scrutinee_span, block, match_place, &test, make_target_blocks);\n+        self.perform_test(span, scrutinee_span, block, &match_place, &test, make_target_blocks);\n     }\n \n     /// Determine the fake borrows that are needed from a set of places that"}, {"sha": "3e8d6cd71a1131bb9078ba974627bf4ca84c6163", "filename": "compiler/rustc_mir_build/src/build/matches/simplify.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9cf6ce070d02e978eb29a84a64934b674bccb32a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf6ce070d02e978eb29a84a64934b674bccb32a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fsimplify.rs?ref=9cf6ce070d02e978eb29a84a64934b674bccb32a", "patch": "@@ -73,8 +73,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             {\n                 existing_bindings.extend_from_slice(&new_bindings);\n                 mem::swap(&mut candidate.bindings, &mut existing_bindings);\n-                candidate.subcandidates =\n-                    self.create_or_subcandidates(candidate, place.clone(), pats);\n+                candidate.subcandidates = self.create_or_subcandidates(candidate, &place, pats);\n                 return true;\n             }\n \n@@ -127,7 +126,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     fn create_or_subcandidates<'pat>(\n         &mut self,\n         candidate: &Candidate<'pat, 'tcx>,\n-        place: PlaceBuilder<'tcx>,\n+        place: &PlaceBuilder<'tcx>,\n         pats: &'pat [Box<Pat<'tcx>>],\n     ) -> Vec<Candidate<'pat, 'tcx>> {\n         pats.iter()"}, {"sha": "0db29c3f9837aafbfaeee1b30ae790c296278331", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9cf6ce070d02e978eb29a84a64934b674bccb32a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf6ce070d02e978eb29a84a64934b674bccb32a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=9cf6ce070d02e978eb29a84a64934b674bccb32a", "patch": "@@ -150,7 +150,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         match_start_span: Span,\n         scrutinee_span: Span,\n         block: BasicBlock,\n-        place_builder: PlaceBuilder<'tcx>,\n+        place_builder: &PlaceBuilder<'tcx>,\n         test: &Test<'tcx>,\n         make_target_blocks: impl FnOnce(&mut Self) -> Vec<BasicBlock>,\n     ) {\n@@ -727,7 +727,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let downcast_place = match_pair.place.downcast(adt_def, variant_index); // `(x as Variant)`\n         let consequent_match_pairs = subpatterns.iter().map(|subpattern| {\n             // e.g., `(x as Variant).0`\n-            let place = downcast_place.clone().field(subpattern.field, subpattern.pattern.ty);\n+            let place = downcast_place\n+                .clone_project(PlaceElem::Field(subpattern.field, subpattern.pattern.ty));\n             // e.g., `(x as Variant).0 @ P1`\n             MatchPair::new(place, &subpattern.pattern, self)\n         });"}, {"sha": "bd435f9ab0095a4b86e10703a3127c31bbd068b5", "filename": "compiler/rustc_mir_build/src/build/matches/util.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9cf6ce070d02e978eb29a84a64934b674bccb32a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cf6ce070d02e978eb29a84a64934b674bccb32a/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Futil.rs?ref=9cf6ce070d02e978eb29a84a64934b674bccb32a", "patch": "@@ -18,7 +18,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         subpatterns\n             .iter()\n             .map(|fieldpat| {\n-                let place = place.clone().field(fieldpat.field, fieldpat.pattern.ty);\n+                let place =\n+                    place.clone_project(PlaceElem::Field(fieldpat.field, fieldpat.pattern.ty));\n                 MatchPair::new(place, &fieldpat.pattern, self)\n             })\n             .collect()\n@@ -45,13 +46,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         match_pairs.extend(prefix.iter().enumerate().map(|(idx, subpattern)| {\n             let elem =\n                 ProjectionElem::ConstantIndex { offset: idx as u64, min_length, from_end: false };\n-            let place = place.clone().project(elem);\n-            MatchPair::new(place, subpattern, self)\n+            MatchPair::new(place.clone_project(elem), subpattern, self)\n         }));\n \n         if let Some(subslice_pat) = opt_slice {\n             let suffix_len = suffix.len() as u64;\n-            let subslice = place.clone().project(ProjectionElem::Subslice {\n+            let subslice = place.clone_project(PlaceElem::Subslice {\n                 from: prefix.len() as u64,\n                 to: if exact_size { min_length - suffix_len } else { suffix_len },\n                 from_end: !exact_size,\n@@ -66,7 +66,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 min_length,\n                 from_end: !exact_size,\n             };\n-            let place = place.clone().project(elem);\n+            let place = place.clone_project(elem);\n             MatchPair::new(place, subpattern, self)\n         }));\n     }"}]}