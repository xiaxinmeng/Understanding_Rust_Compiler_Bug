{"sha": "f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZWI3ZmJiZjZiY2EwZWFhMTQ2YzRhNDhjZDM5YzEzM2EyNTc3MDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-17T23:16:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-17T23:16:10Z"}, "message": "Auto merge of #55134 - davidtwco:issue-55118, r=pnkfelix\n\nNLL: change compare-mode=nll to use borrowck=migrate\n\nFixes #55118.\n\nThis PR is split into two parts:\n\nThe first commit is a minor change that fixes a flaw in the existing `borrowck=migrate` implementation whereby a lint that was promoted to an error in the AST borrow checker would result in the same lint from the NLL borrow checker being downgraded to a warning in migrate mode. This PR fixes this by ensuring lints are exempt from buffering in the NLL borrow checker.\n\nThe second commit updates `compiletest` to make the NLL compare mode use `-Z borrowck=migrate` rather than `-Z borrowck=mir`. The third commit shows all the test output changes that result from this.\n\nr? @pnkfelix", "tree": {"sha": "dff6498867ed6b5d5f6765fec64efe4bdc6ef8e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dff6498867ed6b5d5f6765fec64efe4bdc6ef8e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "html_url": "https://github.com/rust-lang/rust/commit/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dceaddfbe163e2d916c904b98923342730ba970", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dceaddfbe163e2d916c904b98923342730ba970", "html_url": "https://github.com/rust-lang/rust/commit/1dceaddfbe163e2d916c904b98923342730ba970"}, {"sha": "539404b77d1e443793c653ae03b207c62b3b1ae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/539404b77d1e443793c653ae03b207c62b3b1ae0", "html_url": "https://github.com/rust-lang/rust/commit/539404b77d1e443793c653ae03b207c62b3b1ae0"}], "stats": {"total": 3894, "additions": 928, "deletions": 2966}, "files": [{"sha": "98663270882af031482153f10840b5e83cf28b17", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -320,20 +320,20 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n                 continue;\n             }\n \n-            let mut err = tcx.struct_span_lint_node(\n+            let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n+            tcx.struct_span_lint_node(\n                 UNUSED_MUT,\n                 vsi[local_decl.source_info.scope].lint_root,\n                 span,\n                 \"variable does not need to be mutable\",\n-            );\n-            let mut_span = tcx.sess.source_map().span_until_non_whitespace(span);\n-            err.span_suggestion_short_with_applicability(\n+            )\n+            .span_suggestion_short_with_applicability(\n                 mut_span,\n                 \"remove this `mut`\",\n                 String::new(),\n-                Applicability::MachineApplicable);\n-\n-            err.buffer(&mut mbcx.errors_buffer);\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n         }\n     }\n "}, {"sha": "3366f0639caa5cadfe22e00ad1f276c29affa313", "filename": "src/test/ui/access-mode-in-closures.nll.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faccess-mode-in-closures.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -13,6 +13,18 @@ note: move occurs because `v` has type `std::vec::Vec<isize>`, which does not im\n LL |         match *s { sty(v) => v } //~ ERROR cannot move out\n    |                        ^\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `s.0` which is behind a `&` reference\n+  --> $DIR/access-mode-in-closures.rs:19:24\n+   |\n+LL |     let _foo = unpack(|s| {\n+   |                        - help: consider changing this to be a mutable reference: `&mut sty`\n+LL |         // Test that `s` is moved here.\n+LL |         match *s { sty(v) => v } //~ ERROR cannot move out\n+   |                        ^\n+   |                        |\n+   |                        cannot move out of `s.0` which is behind a `&` reference\n+   |                        `s` is a `&` reference, so the data it refers to cannot be moved\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "674d85d95911260ccb9e87fe9a821424733c1bb5", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn-body.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn-body.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:32:29\n-   |\n-LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n-   |        --  -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-...\n-LL |     let z: I::A = if cond { x } else { y };\n-   |                             ^ assignment requires that `'a` must outlive `'b`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/associated-types-project-from-hrtb-in-fn-body.rs:32:40\n-   |\n-LL | fn bar<'a, 'b, I : for<'x> Foo<&'x isize>>(\n-   |        --  -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-...\n-LL |     let z: I::A = if cond { x } else { y };\n-   |                                        ^ assignment requires that `'b` must outlive `'a`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "1156c773b8c5a35412ba2a8f1cedab74cf55cf5d", "filename": "src/test/ui/associated-types/associated-types-subtyping-1.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-subtyping-1.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/associated-types-subtyping-1.rs:36:13\n-   |\n-LL | fn method2<'a,'b,T>(x: &'a T, y: &'b T)\n-   |            -- -- lifetime `'b` defined here\n-   |            |\n-   |            lifetime `'a` defined here\n-...\n-LL |     let _c: <T as Trait<'b>>::Type = a; //~ ERROR E0623\n-   |             ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/associated-types-subtyping-1.rs:44:12\n-   |\n-LL | fn method3<'a,'b,T>(x: &'a T, y: &'b T)\n-   |            -- -- lifetime `'b` defined here\n-   |            |\n-   |            lifetime `'a` defined here\n-...\n-LL |     let b: <T as Trait<'b>>::Type = make_any();\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "044a3f70b4a636261b9051bcb77d39edde4ed13d", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.krisskross.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.krisskross.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-contravariant.rs:55:4\n-   |\n-LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n-   |              -- -- lifetime `'b` defined here\n-   |              |\n-   |              lifetime `'a` defined here\n-...\n-LL |    (a, b) //[krisskross]~ ERROR 55:5: 55:6: lifetime mismatch [E0623]\n-   |    ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-contravariant.rs:55:4\n-   |\n-LL | fn transmute<'a,'b>(x: &'a u32, y: &'b u32) -> (&'a u32, &'b u32) {\n-   |              -- -- lifetime `'b` defined here\n-   |              |\n-   |              lifetime `'a` defined here\n-...\n-LL |    (a, b) //[krisskross]~ ERROR 55:5: 55:6: lifetime mismatch [E0623]\n-   |    ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "10f70b525e055c1bba36da3b0370760f862594fd", "filename": "src/test/ui/associated-types/cache/project-fn-ret-contravariant.transmute.nll.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-contravariant.transmute.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,20 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-contravariant.rs:48:4\n-   |\n-LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n-   |        -- lifetime `'a` defined here\n-LL |    bar(foo, x) //[transmute]~ ERROR E0495\n-   |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-contravariant.rs:48:4\n-   |\n-LL | fn baz<'a,'b>(x: &'a u32) -> &'static u32 {\n-   |        -- -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-LL |    bar(foo, x) //[transmute]~ ERROR E0495\n-   |    ^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "1cb687856942d4b20a349b3ed927e28f504003b9", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.krisskross.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.krisskross.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-invariant.rs:65:4\n-   |\n-LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |              -- -- lifetime `'b` defined here\n-   |              |\n-   |              lifetime `'a` defined here\n-...\n-LL |    (a, b) //[krisskross]~ ERROR E0623\n-   |    ^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-invariant.rs:65:4\n-   |\n-LL | fn transmute<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |              -- -- lifetime `'b` defined here\n-   |              |\n-   |              lifetime `'a` defined here\n-...\n-LL |    (a, b) //[krisskross]~ ERROR E0623\n-   |    ^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "a9c2bb3763988eed95e9c050aebf68d08962ecbf", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.oneuse.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.oneuse.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-invariant.rs:48:12\n-   |\n-LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |        -- -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-LL |    let f = foo; // <-- No consistent type can be inferred for `f` here.\n-LL |    let a = bar(f, x);\n-   |            ^^^^^^^^^ argument requires that `'a` must outlive `'b`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-invariant.rs:49:12\n-   |\n-LL | fn baz<'a,'b>(x: Type<'a>, y: Type<'b>) -> (Type<'a>, Type<'b>) {\n-   |        -- -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-...\n-LL |    let b = bar(f, y); //[oneuse]~ ERROR 49:19: 49:20: lifetime mismatch [E0623]\n-   |            ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "2329adb5deab1de1a8834b4440a129e59361653d", "filename": "src/test/ui/associated-types/cache/project-fn-ret-invariant.transmute.nll.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fcache%2Fproject-fn-ret-invariant.transmute.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,22 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-invariant.rs:58:4\n-   |\n-LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n-   |        -- lifetime `'a` defined here\n-...\n-LL |    bar(foo, x) //[transmute]~ ERROR E0495\n-   |    ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/project-fn-ret-invariant.rs:58:4\n-   |\n-LL | fn baz<'a,'b>(x: Type<'a>) -> Type<'static> {\n-   |        -- -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-...\n-LL |    bar(foo, x) //[transmute]~ ERROR E0495\n-   |    ^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "94676f0e5ad77e0f76ac6a702d6dbbbdd1565312", "filename": "src/test/ui/binop/binop-move-semantics.nll.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinop%2Fbinop-move-semantics.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -32,6 +32,18 @@ error[E0507]: cannot move out of borrowed content\n LL |     *n;  //~ ERROR: cannot move out of borrowed content\n    |     ^^ cannot move out of borrowed content\n \n+error[E0507]: cannot move out of `*n` which is behind a `&` reference\n+  --> $DIR/binop-move-semantics.rs:42:5\n+   |\n+LL |     let n = &y;\n+   |             -- help: consider changing this to be a mutable reference: `&mut y`\n+...\n+LL |     *n;  //~ ERROR: cannot move out of borrowed content\n+   |     ^^\n+   |     |\n+   |     cannot move out of `*n` which is behind a `&` reference\n+   |     `n` is a `&` reference, so the data it refers to cannot be moved\n+\n error[E0502]: cannot borrow `f` as immutable because it is also borrowed as mutable\n   --> $DIR/binop-move-semantics.rs:64:5\n    |\n@@ -62,7 +74,7 @@ LL | |     &mut f;  //~ ERROR: cannot borrow `f` as mutable because it is also b\n    |       |    immutable borrow later used here\n    |       mutable borrow occurs here\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 7 previous errors\n \n Some errors occurred: E0382, E0502, E0507.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "771ef88a662b1ebfcc3af54028f5032b0874d6af", "filename": "src/test/ui/borrowck/borrowck-closures-unique.nll.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-closures-unique.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -40,15 +40,19 @@ LL |     let c2 = || set(x); //~ ERROR two closures require unique access to `x`\n LL |     c1;\n    |     -- first borrow later used here\n \n-error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+warning[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/borrowck-closures-unique.rs:57:38\n    |\n LL | fn e(x: &'static mut isize) {\n    |      - help: consider changing this to be mutable: `mut x`\n LL |     let c1 = |y: &'static mut isize| x = y; //~ ERROR closure cannot assign to immutable argument\n    |                                      ^^^^^ cannot assign\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors occurred: E0500, E0524, E0594.\n For more information about an error, try `rustc --explain E0500`."}, {"sha": "88ae73b6368e7162d3ce9aa58ef1bad2e2503804", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.ast.nll.stderr", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.ast.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -20,7 +20,7 @@ LL |                    //[mir]~^ ERROR cannot borrow `x` as mutable more than o\n LL |                    *y = 1;\n    |                    ------ first borrow later used here\n \n-error: captured variable cannot escape `FnMut` closure body\n+warning: captured variable cannot escape `FnMut` closure body\n   --> $DIR/borrowck-describe-lvalue.rs:305:16\n    |\n LL |              || {\n@@ -36,6 +36,9 @@ LL | |                 }\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n error[E0503]: cannot use `f.x` because it was mutably borrowed\n   --> $DIR/borrowck-describe-lvalue.rs:53:9\n@@ -339,7 +342,7 @@ LL |             &[_, F {x: ref xf, ..}] => println!(\"{}\", xf),\n LL |         drop(x);\n    |              - mutable borrow later used here\n \n-error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:245:29\n    |\n LL |             let x = &mut block;\n@@ -349,8 +352,12 @@ LL |             let p: &'a u8 = &*block.current;\n ...\n LL |             drop(x);\n    |                  - mutable borrow later used here\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n-error[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n+warning[E0502]: cannot borrow `*block.current` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-describe-lvalue.rs:260:33\n    |\n LL |             let x = &mut block;\n@@ -360,6 +367,10 @@ LL |             let p : *const u8 = &*(*block).current;\n ...\n LL |             drop(x);\n    |                  - mutable borrow later used here\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-describe-lvalue.rs:318:22\n@@ -371,7 +382,7 @@ LL |                 drop(x); //[ast]~ ERROR use of moved value: `x`\n    |\n    = note: move occurs because `x` has type `std::vec::Vec<i32>`, which does not implement the `Copy` trait\n \n-error: aborting due to 32 previous errors\n+error: aborting due to 29 previous errors\n \n Some errors occurred: E0382, E0499, E0502, E0503.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "b171a48ac508180e0ee0bce78df917998b8ea79c", "filename": "src/test/ui/borrowck/borrowck-fn-in-const-a.ast.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-fn-in-const-a.ast.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -0,0 +1,20 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/borrowck-fn-in-const-a.rs:19:16\n+   |\n+LL |         return *x //[ast]~ ERROR cannot move out of borrowed content [E0507]\n+   |                ^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of `*x` which is behind a `&` reference\n+  --> $DIR/borrowck-fn-in-const-a.rs:19:16\n+   |\n+LL |     fn broken(x: &String) -> String {\n+   |                  ------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n+LL |         return *x //[ast]~ ERROR cannot move out of borrowed content [E0507]\n+   |                ^^\n+   |                |\n+   |                cannot move out of `*x` which is behind a `&` reference\n+   |                `x` is a `&` reference, so the data it refers to cannot be moved\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "0ab3d3ea5cdfea15c158258e48501d7fcb9860c7", "filename": "src/test/ui/borrowck/borrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-for-loop-correct-cmt-for-pattern.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -1,3 +1,13 @@\n+error[E0507]: cannot move out of `*__next` which is behind a `&` reference\n+  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:10\n+   |\n+LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+   |         -^\n+   |         ||\n+   |         |cannot move out of `*__next` which is behind a `&` reference\n+   |         |`__next` is a `&` reference, so the data it refers to cannot be moved\n+   |         help: consider changing this to be a mutable reference: `&mut a`\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:22:15\n    |\n@@ -13,6 +23,16 @@ note: move occurs because `a` has type `&mut i32`, which does not implement the\n LL |     for &a in x.iter() {    //~ ERROR cannot move out\n    |          ^\n \n+error[E0507]: cannot move out of `*__next` which is behind a `&` reference\n+  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:28:10\n+   |\n+LL |     for &a in &f.a {  //~ ERROR cannot move out\n+   |         -^\n+   |         ||\n+   |         |cannot move out of `*__next` which is behind a `&` reference\n+   |         |`__next` is a `&` reference, so the data it refers to cannot be moved\n+   |         help: consider changing this to be a mutable reference: `&mut a`\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:28:15\n    |\n@@ -28,6 +48,16 @@ note: move occurs because `a` has type `std::boxed::Box<isize>`, which does not\n LL |     for &a in &f.a {  //~ ERROR cannot move out\n    |          ^\n \n+error[E0507]: cannot move out of `*__next` which is behind a `&` reference\n+  --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:32:10\n+   |\n+LL |     for &a in x.iter() {    //~ ERROR cannot move out\n+   |         -^\n+   |         ||\n+   |         |cannot move out of `*__next` which is behind a `&` reference\n+   |         |`__next` is a `&` reference, so the data it refers to cannot be moved\n+   |         help: consider changing this to be a mutable reference: `&mut a`\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-for-loop-correct-cmt-for-pattern.rs:32:15\n    |\n@@ -43,6 +73,6 @@ note: move occurs because `a` has type `std::boxed::Box<i32>`, which does not im\n LL |     for &a in x.iter() {    //~ ERROR cannot move out\n    |          ^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "ba42dc2436377c3792f917f890c39e9ea9c8f43c", "filename": "src/test/ui/borrowck/borrowck-in-static.nll.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-in-static.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -6,6 +6,21 @@ LL |     let x = Box::new(0);\n LL |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n    |                 ^ cannot move out of captured variable in an `Fn` closure\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `x`, as it is a captured variable in a `Fn` closure\n+  --> $DIR/borrowck-in-static.rs:15:17\n+   |\n+LL |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n+   |                 ^\n+   |                 |\n+   |                 cannot move out of `x`, as it is a captured variable in a `Fn` closure\n+   |                 cannot move\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/borrowck-in-static.rs:15:14\n+   |\n+LL |     Box::new(|| x) //~ ERROR cannot move out of captured outer variable\n+   |              ^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "0445a75d61a9daccd504a45e061d9b685cd022e2", "filename": "src/test/ui/borrowck/borrowck-issue-2657-2.nll.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-2657-2.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -7,6 +7,17 @@ LL |         let _b = *y; //~ ERROR cannot move out\n    |                  cannot move out of borrowed content\n    |                  help: consider removing the `*`: `y`\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `*y` which is behind a `&` reference\n+  --> $DIR/borrowck-issue-2657-2.rs:17:18\n+   |\n+LL |       Some(ref y) => {\n+   |            ----- help: consider changing this to be a mutable reference: `ref mut y`\n+LL |         let _b = *y; //~ ERROR cannot move out\n+   |                  ^^\n+   |                  |\n+   |                  cannot move out of `*y` which is behind a `&` reference\n+   |                  `y` is a `&` reference, so the data it refers to cannot be moved\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "99f69515a473210c326fbecd5b78c74fb2bd89db", "filename": "src/test/ui/borrowck/borrowck-move-error-with-note.nll.stderr", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-error-with-note.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -24,6 +24,42 @@ LL |                   num2) => (),\n LL |         Foo::Foo2(num) => (),\n    |                   ^^^\n \n+error[E0507]: cannot move out of `f.0` which is behind a `&` reference\n+  --> $DIR/borrowck-move-error-with-note.rs:23:19\n+   |\n+LL |     let f = &Foo::Foo1(box 1, box 2);\n+   |             ------------------------ help: consider changing this to be a mutable reference: `&mut Foo::Foo1(box 1, box 2)`\n+...\n+LL |         Foo::Foo1(num1,\n+   |                   ^^^^\n+   |                   |\n+   |                   cannot move out of `f.0` which is behind a `&` reference\n+   |                   `f` is a `&` reference, so the data it refers to cannot be moved\n+\n+error[E0507]: cannot move out of `f.1` which is behind a `&` reference\n+  --> $DIR/borrowck-move-error-with-note.rs:24:19\n+   |\n+LL |     let f = &Foo::Foo1(box 1, box 2);\n+   |             ------------------------ help: consider changing this to be a mutable reference: `&mut Foo::Foo1(box 1, box 2)`\n+...\n+LL |                   num2) => (),\n+   |                   ^^^^\n+   |                   |\n+   |                   cannot move out of `f.1` which is behind a `&` reference\n+   |                   `f` is a `&` reference, so the data it refers to cannot be moved\n+\n+error[E0507]: cannot move out of `f.0` which is behind a `&` reference\n+  --> $DIR/borrowck-move-error-with-note.rs:25:19\n+   |\n+LL |     let f = &Foo::Foo1(box 1, box 2);\n+   |             ------------------------ help: consider changing this to be a mutable reference: `&mut Foo::Foo1(box 1, box 2)`\n+...\n+LL |         Foo::Foo2(num) => (),\n+   |                   ^^^\n+   |                   |\n+   |                   cannot move out of `f.0` which is behind a `&` reference\n+   |                   `f` is a `&` reference, so the data it refers to cannot be moved\n+\n error[E0509]: cannot move out of type `S`, which implements the `Drop` trait\n   --> $DIR/borrowck-move-error-with-note.rs:39:11\n    |\n@@ -61,7 +97,19 @@ note: move occurs because `n` has type `std::boxed::Box<isize>`, which does not\n LL |         n => {\n    |         ^\n \n-error: aborting due to 3 previous errors\n+error[E0507]: cannot move out of `a.a` which is behind a `&` reference\n+  --> $DIR/borrowck-move-error-with-note.rs:59:9\n+   |\n+LL |     let a = &A { a: box 1 };\n+   |             --------------- help: consider changing this to be a mutable reference: `&mut A { a: box 1 }`\n+...\n+LL |         n => {\n+   |         ^\n+   |         |\n+   |         cannot move out of `a.a` which is behind a `&` reference\n+   |         `a` is a `&` reference, so the data it refers to cannot be moved\n+\n+error: aborting due to 7 previous errors\n \n Some errors occurred: E0507, E0509.\n For more information about an error, try `rustc --explain E0507`."}, {"sha": "83c5b82957deaf85738174d3342fb31a68430c59", "filename": "src/test/ui/borrowck/borrowck-move-from-unsafe-ptr.nll.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-from-unsafe-ptr.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -7,6 +7,17 @@ LL |     let y = *x; //~ ERROR cannot move out of dereference of raw pointer\n    |             cannot move out of dereference of raw pointer\n    |             help: consider removing the `*`: `x`\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `*x` which is behind a `*const` pointer\n+  --> $DIR/borrowck-move-from-unsafe-ptr.rs:13:13\n+   |\n+LL | unsafe fn foo(x: *const Box<isize>) -> Box<isize> {\n+   |                  ----------------- help: consider changing this to be a mutable pointer: `*mut std::boxed::Box<isize>`\n+LL |     let y = *x; //~ ERROR cannot move out of dereference of raw pointer\n+   |             ^^\n+   |             |\n+   |             cannot move out of `*x` which is behind a `*const` pointer\n+   |             `x` is a `*const` pointer, so the data it refers to cannot be moved\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "f22aca9994986846585b8b30d3244e6b04df796d", "filename": "src/test/ui/borrowck/borrowck-move-in-irrefut-pat.ast.nll.stderr", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-in-irrefut-pat.ast.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -14,6 +14,15 @@ note: move occurs because `_x` has type `std::string::String`, which does not im\n LL | fn arg_item(&_x: &String) {}\n    |              ^^\n \n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:16:14\n+   |\n+LL | fn arg_item(&_x: &String) {}\n+   |              ^^\n+   |              |\n+   |              cannot move out of data in a `&` reference\n+   |              cannot move\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-in-irrefut-pat.rs:21:11\n    |\n@@ -30,6 +39,24 @@ note: move occurs because `_x` has type `std::string::String`, which does not im\n LL |     with(|&_x| ())\n    |            ^^\n \n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:21:12\n+   |\n+LL |     with(|&_x| ())\n+   |            ^^\n+   |            |\n+   |            cannot move out of data in a `&` reference\n+   |            cannot move\n+\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/borrowck-move-in-irrefut-pat.rs:27:10\n+   |\n+LL |     let &_x = &\"hi\".to_string();\n+   |          ^^\n+   |          |\n+   |          cannot move out of data in a `&` reference\n+   |          cannot move\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/borrowck-move-in-irrefut-pat.rs:27:15\n    |\n@@ -45,6 +72,6 @@ note: move occurs because `_x` has type `std::string::String`, which does not im\n LL |     let &_x = &\"hi\".to_string();\n    |          ^^\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "ba74cd2514e1a244d84191c517ab4f681b80f959", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.ast.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -4,6 +4,15 @@ error[E0507]: cannot move out of an `Rc`\n LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n    |              ^^^^^^^^^^^^^^^^^^^ cannot move out of an `Rc`\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/borrowck-move-out-of-overloaded-auto-deref.rs:17:14\n+   |\n+LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n+   |              ^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              cannot move out of data in a `&` reference\n+   |              cannot move\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "205044bb368851166a9d571ad260566b62d9908a", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-deref.nll.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-deref.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -7,6 +7,15 @@ LL |     let _x = *Rc::new(\"hi\".to_string());\n    |              cannot move out of an `Rc`\n    |              help: consider removing the `*`: `Rc::new(\"hi\".to_string())`\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/borrowck-move-out-of-overloaded-deref.rs:14:14\n+   |\n+LL |     let _x = *Rc::new(\"hi\".to_string());\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |              |\n+   |              cannot move out of data in a `&` reference\n+   |              cannot move\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "675458d8c2b85fc83c441d7369b947014deadb0b", "filename": "src/test/ui/borrowck/borrowck-move-out-of-static-item.ast.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-static-item.ast.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -0,0 +1,18 @@\n+error[E0507]: cannot move out of static item\n+  --> $DIR/borrowck-move-out-of-static-item.rs:28:10\n+   |\n+LL |     test(BAR); //[ast]~ ERROR cannot move out of static item [E0507]\n+   |          ^^^ cannot move out of static item\n+\n+error[E0507]: cannot move out of immutable static item `BAR`\n+  --> $DIR/borrowck-move-out-of-static-item.rs:28:10\n+   |\n+LL |     test(BAR); //[ast]~ ERROR cannot move out of static item [E0507]\n+   |          ^^^\n+   |          |\n+   |          cannot move out of immutable static item `BAR`\n+   |          cannot move\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "dea42c53992b19bdabae96a6dd490d9f88c06a41", "filename": "src/test/ui/borrowck/borrowck-move-out-of-vec-tail.nll.stderr", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-vec-tail.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -26,6 +26,31 @@ LL |                 //~| to prevent move\n LL |                   Foo { string: b }] => {\n    |\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `tail[..].string` which is behind a `&` reference\n+  --> $DIR/borrowck-move-out-of-vec-tail.rs:30:33\n+   |\n+LL |         [_, ref tail..] => {\n+   |             -------- help: consider changing this to be a mutable reference: `ref mut tail`\n+LL |             match tail {\n+LL |                 &[Foo { string: a },\n+   |                                 ^\n+   |                                 |\n+   |                                 cannot move out of `tail[..].string` which is behind a `&` reference\n+   |                                 `tail` is a `&` reference, so the data it refers to cannot be moved\n+\n+error[E0507]: cannot move out of `tail[..].string` which is behind a `&` reference\n+  --> $DIR/borrowck-move-out-of-vec-tail.rs:34:33\n+   |\n+LL |         [_, ref tail..] => {\n+   |             -------- help: consider changing this to be a mutable reference: `ref mut tail`\n+...\n+LL |                   Foo { string: b }] => {\n+   |                                 ^\n+   |                                 |\n+   |                                 cannot move out of `tail[..].string` which is behind a `&` reference\n+   |                                 `tail` is a `&` reference, so the data it refers to cannot be moved\n+\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0508`.\n+Some errors occurred: E0507, E0508.\n+For more information about an error, try `rustc --explain E0507`."}, {"sha": "05fd6d71520c76c52a2b7b4c9839faa8fe8cd310", "filename": "src/test/ui/borrowck/borrowck-overloaded-index-move-from-vec.nll.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-overloaded-index-move-from-vec.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -7,6 +7,15 @@ LL |     let bad = v[0];\n    |               cannot move out of borrowed content\n    |               help: consider borrowing here: `&v[0]`\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/borrowck-overloaded-index-move-from-vec.rs:30:15\n+   |\n+LL |     let bad = v[0];\n+   |               ^^^^\n+   |               |\n+   |               cannot move out of data in a `&` reference\n+   |               cannot move\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "e3211f83850995bcec44f76564fe98ba503f69e4", "filename": "src/test/ui/borrowck/borrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reborrow-from-shorter-lived-andmut.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/borrowck-reborrow-from-shorter-lived-andmut.rs:19:5\n-   |\n-LL | fn copy_borrowed_ptr<'a,'b>(p: &'a mut S<'b>) -> S<'b> {\n-   |                      -- -- lifetime `'b` defined here\n-   |                      |\n-   |                      lifetime `'a` defined here\n-LL |     S { pointer: &mut *p.pointer }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-\n-error: aborting due to previous error\n-"}, {"sha": "ee7e3e71962e8b38784b6e22332c2a1f5161370b", "filename": "src/test/ui/borrowck/issue-51415.nll.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-51415.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -13,6 +13,15 @@ note: move occurs because `s` has type `std::string::String`, which does not imp\n LL |     let opt = a.iter().enumerate().find(|(_, &s)| {\n    |                                               ^\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/issue-51415.rs:16:47\n+   |\n+LL |     let opt = a.iter().enumerate().find(|(_, &s)| {\n+   |                                               ^\n+   |                                               |\n+   |                                               cannot move out of data in a `&` reference\n+   |                                               cannot move\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "372df61d78c45bdd511d0a0a0cc1dce8859add49", "filename": "src/test/ui/borrowck/issue-7573.nll.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-7573.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,14 +0,0 @@\n-error: borrowed data escapes outside of closure\n-  --> $DIR/issue-7573.rs:32:9\n-   |\n-LL |     let mut lines_to_use: Vec<&CrateId> = Vec::new();\n-   |         ---------------- `lines_to_use` is declared here, outside of the closure body\n-LL |         //~^ NOTE cannot infer an appropriate lifetime\n-LL |     let push_id = |installed_id: &CrateId| {\n-   |                    ------------ `installed_id` is a reference that is only valid in the closure body\n-...\n-LL |         lines_to_use.push(installed_id);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `installed_id` escapes the closure body here\n-\n-error: aborting due to previous error\n-"}, {"sha": "d25fc759775428da39a6dc856f7e691206257975", "filename": "src/test/ui/borrowck/move-in-static-initializer-issue-38520.ast.nll.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmove-in-static-initializer-issue-38520.ast.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -0,0 +1,33 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/move-in-static-initializer-issue-38520.rs:25:23\n+   |\n+LL | static Y: usize = get(*&X); //[ast]~ ERROR E0507\n+   |                       ^^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/move-in-static-initializer-issue-38520.rs:25:23\n+   |\n+LL | static Y: usize = get(*&X); //[ast]~ ERROR E0507\n+   |                       ^^^\n+   |                       |\n+   |                       cannot move out of data in a `&` reference\n+   |                       cannot move\n+\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/move-in-static-initializer-issue-38520.rs:27:22\n+   |\n+LL | const Z: usize = get(*&X); //[ast]~ ERROR E0507\n+   |                      ^^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/move-in-static-initializer-issue-38520.rs:27:22\n+   |\n+LL | const Z: usize = get(*&X); //[ast]~ ERROR E0507\n+   |                      ^^^\n+   |                      |\n+   |                      cannot move out of data in a `&` reference\n+   |                      cannot move\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "bb45fe2da81174d5605bb85e3f81ef64346ff471", "filename": "src/test/ui/borrowck/mutability-errors.nll.stderr", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fmutability-errors.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -277,41 +277,57 @@ LL |     &mut x; //~ ERROR\n LL |     &mut x.0; //~ ERROR\n    |     ^^^^^^^^ cannot borrow as mutable\n \n-error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+warning[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:70:9\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n LL |     || { //~ ERROR\n LL |         x = (1,);\n    |         ^^^^^^^^ cannot assign\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n-error[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n+warning[E0594]: cannot assign to `x.0`, as `x` is not declared as mutable\n   --> $DIR/mutability-errors.rs:71:9\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n LL |         x.0 = 1;\n    |         ^^^^^^^ cannot assign\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n-error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+warning[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:72:9\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n LL |         &mut x;\n    |         ^^^^^^ cannot borrow as mutable\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n-error[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n+warning[E0596]: cannot borrow `x.0` as mutable, as `x` is not declared as mutable\n   --> $DIR/mutability-errors.rs:73:9\n    |\n LL | fn imm_capture(x: (i32,)) {\n    |                - help: consider changing this to be mutable: `mut x`\n ...\n LL |         &mut x.0;\n    |         ^^^^^^^^ cannot borrow as mutable\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n error[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/mutability-errors.rs:76:9\n@@ -373,7 +389,7 @@ error[E0596]: cannot borrow `X.0` as mutable, as `X` is an immutable static item\n LL |     &mut X.0; //~ ERROR\n    |     ^^^^^^^^ cannot borrow as mutable\n \n-error: aborting due to 38 previous errors\n+error: aborting due to 34 previous errors\n \n Some errors occurred: E0594, E0596.\n For more information about an error, try `rustc --explain E0594`."}, {"sha": "787fc4d872996d66f61ceb57f4b7e52ab259b3b1", "filename": "src/test/ui/borrowck/regions-escape-bound-fn-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn-2.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: borrowed data escapes outside of closure\n-  --> $DIR/regions-escape-bound-fn-2.rs:18:18\n-   |\n-LL |     let mut x = None;\n-   |         ----- `x` is declared here, outside of the closure body\n-LL |     with_int(|y| x = Some(y));\n-   |               -  ^^^^^^^^^^^ `y` escapes the closure body here\n-   |               |\n-   |               `y` is a reference that is only valid in the closure body\n-\n-error: aborting due to previous error\n-"}, {"sha": "91f1f00ce30ffc207b954c30711a0a3b06000fae", "filename": "src/test/ui/borrowck/regions-escape-bound-fn.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-bound-fn.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: borrowed data escapes outside of closure\n-  --> $DIR/regions-escape-bound-fn.rs:18:18\n-   |\n-LL |     let mut x: Option<&isize> = None;\n-   |         ----- `x` is declared here, outside of the closure body\n-LL |     with_int(|y| x = Some(y));\n-   |               -  ^^^^^^^^^^^ `y` escapes the closure body here\n-   |               |\n-   |               `y` is a reference that is only valid in the closure body\n-\n-error: aborting due to previous error\n-"}, {"sha": "44e7018fdd76487c84a0411c581d091d507f0097", "filename": "src/test/ui/borrowck/regions-escape-unboxed-closure.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-escape-unboxed-closure.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: borrowed data escapes outside of closure\n-  --> $DIR/regions-escape-unboxed-closure.rs:16:23\n-   |\n-LL |     let mut x: Option<&isize> = None;\n-   |         ----- `x` is declared here, outside of the closure body\n-LL |     with_int(&mut |y| x = Some(y));\n-   |                    -  ^^^^^^^^^^^ `y` escapes the closure body here\n-   |                    |\n-   |                    `y` is a reference that is only valid in the closure body\n-\n-error: aborting due to previous error\n-"}, {"sha": "0844ac32b8b60a37edf562e5e167c22b23e3a31f", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -7,6 +7,25 @@ LL |     call(|| {\n LL |         y.into_iter();\n    |         ^ cannot move out of captured variable in an `Fn` closure\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `y`, as it is a captured variable in a `Fn` closure\n+  --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:21:9\n+   |\n+LL |         y.into_iter();\n+   |         ^\n+   |         |\n+   |         cannot move out of `y`, as it is a captured variable in a `Fn` closure\n+   |         cannot move\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:20:10\n+   |\n+LL |       call(|| {\n+   |  __________^\n+LL | |         y.into_iter();\n+LL | |         //~^ ERROR cannot move out of captured outer variable in an `Fn` closure\n+LL | |     });\n+   | |_____^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "40987958115895deb46cf043e85040f6516de69d", "filename": "src/test/ui/by-move-pattern-binding.nll.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fby-move-pattern-binding.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fby-move-pattern-binding.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fby-move-pattern-binding.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -16,6 +16,15 @@ note: move occurs because `identifier` has type `std::string::String`, which doe\n LL |         &E::Bar(identifier) => f(identifier.clone())  //~ ERROR cannot move\n    |                 ^^^^^^^^^^\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/by-move-pattern-binding.rs:26:17\n+   |\n+LL |         &E::Bar(identifier) => f(identifier.clone())  //~ ERROR cannot move\n+   |                 ^^^^^^^^^^\n+   |                 |\n+   |                 cannot move out of data in a `&` reference\n+   |                 cannot move\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "576322ff5c1953d2087d5d88f19bdb19b9c20574", "filename": "src/test/ui/check-static-values-constraints.nll.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-static-values-constraints.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -58,13 +58,22 @@ LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                             cannot move out of static item\n    |                                             help: consider borrowing here: `&x`\n \n+error[E0507]: cannot move out of immutable static item `x`\n+  --> $DIR/check-static-values-constraints.rs:120:45\n+   |\n+LL |     let y = { static x: Box<isize> = box 3; x };\n+   |                                             ^\n+   |                                             |\n+   |                                             cannot move out of immutable static item `x`\n+   |                                             cannot move\n+\n error[E0010]: allocations are not allowed in statics\n   --> $DIR/check-static-values-constraints.rs:120:38\n    |\n LL |     let y = { static x: Box<isize> = box 3; x };\n    |                                      ^^^^^ allocation not allowed in statics\n \n-error: aborting due to 10 previous errors\n+error: aborting due to 11 previous errors\n \n Some errors occurred: E0010, E0015, E0493, E0507.\n For more information about an error, try `rustc --explain E0010`."}, {"sha": "ae3e3a262b5adc2d803a353ed9d94c42043e1d59", "filename": "src/test/ui/closure-expected-type/expect-fn-supply-fn.nll.stderr", "status": "removed", "additions": 0, "deletions": 54, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-fn-supply-fn.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,54 +0,0 @@\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:40:5\n-   |\n-LL |     with_closure_expecting_fn_with_free_region(|x: fn(&u32), y| {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `fn(for<'r> fn(&'r u32), _) -> _`\n-   |     |\n-   |     expected signature of `for<'a, 'r> fn(fn(&'a u32), &'r i32) -> _`\n-   |\n-note: required by `with_closure_expecting_fn_with_free_region`\n-  --> $DIR/expect-fn-supply-fn.rs:11:1\n-   |\n-LL | / fn with_closure_expecting_fn_with_free_region<F>(_: F)\n-LL | |     where F: for<'a> FnOnce(fn(&'a u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_^\n-\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:47:5\n-   |\n-LL |     with_closure_expecting_fn_with_bound_region(|x: fn(&'x u32), y| {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ------------------- found signature of `fn(fn(&'x u32), _) -> _`\n-   |     |\n-   |     expected signature of `for<'r> fn(for<'s> fn(&'s u32), &'r i32) -> _`\n-   |\n-note: required by `with_closure_expecting_fn_with_bound_region`\n-  --> $DIR/expect-fn-supply-fn.rs:16:1\n-   |\n-LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-LL | |     where F: FnOnce(fn(&u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_^\n-\n-error[E0631]: type mismatch in closure arguments\n-  --> $DIR/expect-fn-supply-fn.rs:56:5\n-   |\n-LL |     with_closure_expecting_fn_with_bound_region(|_x: Foo<'_>, y| {});\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ---------------- found signature of `for<'r> fn(fn(&'r u32), _) -> _`\n-   |     |\n-   |     expected signature of `for<'r> fn(for<'s> fn(&'s u32), &'r i32) -> _`\n-   |\n-note: required by `with_closure_expecting_fn_with_bound_region`\n-  --> $DIR/expect-fn-supply-fn.rs:16:1\n-   |\n-LL | / fn with_closure_expecting_fn_with_bound_region<F>(_: F)\n-LL | |     where F: FnOnce(fn(&u32), &i32)\n-LL | | {\n-LL | | }\n-   | |_^\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0631`."}, {"sha": "4bc5034f93e4d548777573f9f302329f4ca7b5f0", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.nll.stderr", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,29 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:15:5\n-   |\n-LL |   fn foo(x: &()) {\n-   |             --- help: add explicit lifetime `'static` to the type of `x`: `&'static ()`\n-LL | /     bar(|| {\n-LL | |         //~^ ERROR explicit lifetime required in the type of `x` [E0621]\n-LL | |         let _ = x;\n-LL | |     })\n-   | |______^ lifetime `'static` required\n-\n-error[E0597]: `x` does not live long enough\n-  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:17:17\n-   |\n-LL |     bar(|| {\n-   |         -- value captured here\n-LL |         //~^ ERROR explicit lifetime required in the type of `x` [E0621]\n-LL |         let _ = x;\n-   |                 ^ borrowed value does not live long enough\n-LL |     })\n-LL | }\n-   | - `x` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors occurred: E0597, E0621.\n-For more information about an error, try `rustc --explain E0597`."}, {"sha": "7f842c40ece5af87f01ab3024d0865cd83fee9c3", "filename": "src/test/ui/closures/closure-expected-type/expect-region-supply-region.nll.stderr", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-expected-type%2Fexpect-region-supply-region.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,34 +0,0 @@\n-error: borrowed data escapes outside of closure\n-  --> $DIR/expect-region-supply-region.rs:28:9\n-   |\n-LL |     let mut f: Option<&u32> = None;\n-   |         ----- `f` is declared here, outside of the closure body\n-LL |     closure_expecting_bound(|x| {\n-   |                              - `x` is a reference that is only valid in the closure body\n-LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n-   |         ^^^^^^^^^^^ `x` escapes the closure body here\n-\n-error: borrowed data escapes outside of closure\n-  --> $DIR/expect-region-supply-region.rs:38:9\n-   |\n-LL |     let mut f: Option<&u32> = None;\n-   |         ----- `f` is declared here, outside of the closure body\n-LL |     closure_expecting_bound(|x: &u32| {\n-   |                              - `x` is a reference that is only valid in the closure body\n-LL |         f = Some(x); //~ ERROR borrowed data cannot be stored outside of its closure\n-   |         ^^^^^^^^^^^ `x` escapes the closure body here\n-\n-error: borrowed data escapes outside of closure\n-  --> $DIR/expect-region-supply-region.rs:52:9\n-   |\n-LL |     let mut f: Option<&u32> = None;\n-   |         ----- `f` is declared here, outside of the closure body\n-...\n-LL |     closure_expecting_bound(|x: &'x u32| {\n-   |                              - `x` is a reference that is only valid in the closure body\n-...\n-LL |         f = Some(x);\n-   |         ^^^^^^^^^^^ `x` escapes the closure body here\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "38937904f47d6f402454d863fbd8f8b1e6666aef", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -190,7 +190,7 @@ error: trait bounds other than `Sized` on const fn parameters are unstable\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0716]: temporary value dropped while borrowed\n+warning[E0716]: temporary value dropped while borrowed\n   --> $DIR/min_const_fn.rs:142:64\n    |\n LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n@@ -199,6 +199,9 @@ LL | const fn no_dyn_trait_ret() -> &'static dyn std::fmt::Debug { &() }\n    |                                                                creates a temporary which is freed while still in use\n    |\n    = note: borrowed value must be valid for the static lifetime...\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n error: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:147:41\n@@ -218,7 +221,7 @@ error: function pointers in const fn are unstable\n LL | const fn no_fn_ptrs2() -> fn() { fn foo() {} foo }\n    |                           ^^^^\n \n-error: aborting due to 36 previous errors\n+error: aborting due to 35 previous errors\n \n Some errors occurred: E0493, E0716.\n For more information about an error, try `rustc --explain E0493`."}, {"sha": "a1d40cbfd46ad335f0a66069d9438cd9b45050e6", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_dyn.nll.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_dyn.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -10,7 +10,7 @@ error: trait bounds other than `Sized` on const fn parameters are unstable\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                  ^^\n \n-error[E0716]: temporary value dropped while borrowed\n+warning[E0716]: temporary value dropped while borrowed\n   --> $DIR/min_const_fn_dyn.rs:22:67\n    |\n LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n@@ -19,7 +19,10 @@ LL | const fn no_inner_dyn_trait_ret() -> Hide { Hide(HasDyn { field: &0 }) }\n    |                                                                   creates a temporary which is freed while still in use\n    |\n    = note: borrowed value must be valid for the static lifetime...\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0716`."}, {"sha": "d14760b707db2875b2a50e6b0391265912bfa661", "filename": "src/test/ui/dst/dst-index.nll.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fdst%2Fdst-index.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fdst%2Fdst-index.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-index.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -16,13 +16,31 @@ error[E0507]: cannot move out of borrowed content\n LL |     S[0];\n    |     ^^^^ cannot move out of borrowed content\n \n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/dst-index.rs:41:5\n+   |\n+LL |     S[0];\n+   |     ^^^^\n+   |     |\n+   |     cannot move out of data in a `&` reference\n+   |     cannot move\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/dst-index.rs:44:5\n    |\n LL |     T[0];\n    |     ^^^^ cannot move out of borrowed content\n \n-error: aborting due to 4 previous errors\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/dst-index.rs:44:5\n+   |\n+LL |     T[0];\n+   |     ^^^^\n+   |     |\n+   |     cannot move out of data in a `&` reference\n+   |     cannot move\n+\n+error: aborting due to 6 previous errors\n \n Some errors occurred: E0161, E0507.\n For more information about an error, try `rustc --explain E0161`."}, {"sha": "537ece48e012c63eb9983500b0a6ac3f83b73dcc", "filename": "src/test/ui/dst/dst-rvalue.nll.stderr", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdst%2Fdst-rvalue.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -16,13 +16,33 @@ error[E0507]: cannot move out of borrowed content\n LL |     let _x: Box<str> = box *\"hello world\";\n    |                            ^^^^^^^^^^^^^^ cannot move out of borrowed content\n \n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/dst-rvalue.rs:16:28\n+   |\n+LL |     let _x: Box<str> = box *\"hello world\";\n+   |                            ^^^^^^^^^^^^^^\n+   |                            |\n+   |                            cannot move out of data in a `&` reference\n+   |                            cannot move\n+\n error[E0508]: cannot move out of type `[isize]`, a non-copy slice\n   --> $DIR/dst-rvalue.rs:21:32\n    |\n LL |     let _x: Box<[isize]> = box *array;\n    |                                ^^^^^^ cannot move out of here\n \n-error: aborting due to 4 previous errors\n+error[E0507]: cannot move out of `*array` which is behind a `&` reference\n+  --> $DIR/dst-rvalue.rs:21:32\n+   |\n+LL |     let array: &[isize] = &[1, 2, 3];\n+   |                           ---------- help: consider changing this to be a mutable reference: `&mut [1, 2, 3]`\n+LL |     let _x: Box<[isize]> = box *array;\n+   |                                ^^^^^^\n+   |                                |\n+   |                                cannot move out of `*array` which is behind a `&` reference\n+   |                                `array` is a `&` reference, so the data it refers to cannot be moved\n+\n+error: aborting due to 6 previous errors\n \n Some errors occurred: E0161, E0507, E0508.\n For more information about an error, try `rustc --explain E0161`."}, {"sha": "43795e5224ddc92567a8281eb7b1ff511088d758", "filename": "src/test/ui/error-codes/E0507.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Ferror-codes%2FE0507.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Ferror-codes%2FE0507.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0507.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -0,0 +1,18 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/E0507.rs:22:5\n+   |\n+LL |     x.borrow().nothing_is_true(); //~ ERROR E0507\n+   |     ^^^^^^^^^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/E0507.rs:22:5\n+   |\n+LL |     x.borrow().nothing_is_true(); //~ ERROR E0507\n+   |     ^^^^^^^^^^\n+   |     |\n+   |     cannot move out of data in a `&` reference\n+   |     cannot move\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "65008380f9e1771b8c21fd1aa23e3916cd8ded27", "filename": "src/test/ui/error-codes/E0621-does-not-trigger-for-closures.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0621-does-not-trigger-for-closures.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/E0621-does-not-trigger-for-closures.rs:25:45\n-   |\n-LL |     invoke(&x, |a, b| if a > b { a } else { b }); //~ ERROR E0495\n-   |                    --                       ^ returning this value requires that `'1` must outlive `'2`\n-   |                    ||\n-   |                    |return type of closure is &'2 i32\n-   |                    has type `&'1 i32`\n-\n-error: aborting due to previous error\n-"}, {"sha": "471eda45dafdc950430c222e3694f0a3510b5f66", "filename": "src/test/ui/existential_types/generic_type_does_not_live_long_enough.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexistential_types%2Fgeneric_type_does_not_live_long_enough.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/generic_type_does_not_live_long_enough.rs:16:18\n-   |\n-LL |     let z: i32 = x; //~ ERROR mismatched types\n-   |                  ^ expected i32, found opaque type\n-   |\n-   = note: expected type `i32`\n-              found type `WrongGeneric::<&{integer}>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "cadb552697e651f2b657b45f8d1ff69f1eafc780", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,30 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/hr-subtype.rs:43:13\n-   |\n-LL |           fn subtype<'x,'y:'x,'z:'y>() {\n-   |                      -- -- lifetime `'y` defined here\n-   |                      |\n-   |                      lifetime `'x` defined here\n-LL |               gimme::<$t2>(None::<$t1>);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n-...\n-LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n-LL | |                                     fn(Inv<'y>)) }\n-   | |__________________________________________________- in this macro invocation\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/hr-subtype.rs:49:13\n-   |\n-LL |           fn supertype<'x,'y:'x,'z:'y>() {\n-   |                        -- -- lifetime `'y` defined here\n-   |                        |\n-   |                        lifetime `'x` defined here\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n-...\n-LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n-LL | |                                     fn(Inv<'y>)) }\n-   | |__________________________________________________- in this macro invocation\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "c1bcd146b34896f81879143b37d6c202ee089572", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.nll.stderr", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,16 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/hr-subtype.rs:49:13\n-   |\n-LL |           fn supertype<'x,'y:'x,'z:'y>() {\n-   |                        -- -- lifetime `'y` defined here\n-   |                        |\n-   |                        lifetime `'x` defined here\n-LL |               gimme::<$t1>(None::<$t2>);\n-   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n-...\n-LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n-LL | |                             fn(&'y u32)) }\n-   | |__________________________________________- in this macro invocation\n-\n-error: aborting due to previous error\n-"}, {"sha": "45ee808950e25795f71b2f6e7ac92e4274eaa7c9", "filename": "src/test/ui/impl-header-lifetime-elision/dyn-trait.nll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fdyn-trait.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,10 +0,0 @@\n-error: borrowed data escapes outside of function\n-  --> $DIR/dyn-trait.rs:32:5\n-   |\n-LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n-   |                              - `x` is a reference that is only valid in the function body\n-LL |     static_val(x); //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^^ `x` escapes the function body here\n-\n-error: aborting due to previous error\n-"}, {"sha": "485d35662445d27600b8ecfabc3bc7399e056e17", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,49 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/must_outlive_least_region_or_bound.rs:13:35\n-   |\n-LL | fn elided(x: &i32) -> impl Copy { x }\n-   |              ----                 ^ lifetime `'static` required\n-   |              |\n-   |              help: add explicit lifetime `'static` to the type of `x`: `&'static i32`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/must_outlive_least_region_or_bound.rs:16:44\n-   |\n-LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n-   |             -- lifetime `'a` defined here  ^ returning this value requires that `'a` must outlive `'static`\n-help: to allow this impl Trait to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n-   |\n-LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n-   |                                ^^^^^^^^^^^^^^\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/must_outlive_least_region_or_bound.rs:22:69\n-   |\n-LL | fn with_bound<'a>(x: &'a i32) -> impl LifetimeTrait<'a> + 'static { x }\n-   |               -- lifetime `'a` defined here                         ^ returning this value requires that `'a` must outlive `'static`\n-   |\n-   = help: consider replacing `'a` with `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/must_outlive_least_region_or_bound.rs:29:5\n-   |\n-LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                          --  -- lifetime `'b` defined here\n-   |                          |\n-   |                          lifetime `'a` defined here\n-LL |     //~^ ERROR lifetime mismatch\n-LL |     move |_| println!(\"{}\", y)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n-\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/must_outlive_least_region_or_bound.rs:32:51\n-   |\n-LL | fn ty_param_wont_outlive_static<T:Debug>(x: T) -> impl Debug + 'static {\n-   |                                                   ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-\n-error: aborting due to 5 previous errors\n-\n-Some errors occurred: E0310, E0621.\n-For more information about an error, try `rustc --explain E0310`."}, {"sha": "7e9aa90c6c50c495ce265d71bed5e6aeeb0e5813", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,26 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/static-return-lifetime-infered.rs:17:9\n-   |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         - let's call the lifetime of this reference `'1`\n-LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n-help: to allow this impl Trait to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n-   |\n-LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n-   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/static-return-lifetime-infered.rs:21:9\n-   |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                    -- lifetime `'a` defined here\n-LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-help: to allow this impl Trait to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n-   |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n-   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "18258ef1f9dc991e0aebd87bfce29ad55cc4ed12", "filename": "src/test/ui/impl-trait/type_parameters_captured.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftype_parameters_captured.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/type_parameters_captured.rs:17:20\n-   |\n-LL | fn foo<T>(x: T) -> impl Any + 'static {\n-   |                    ^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0310`."}, {"sha": "c8b2f849b32a79902279a704d47b78fa5d41aa25", "filename": "src/test/ui/in-band-lifetimes/mismatched.nll.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,20 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/mismatched.rs:14:42\n-   |\n-LL | fn foo(x: &'a u32, y: &u32) -> &'a u32 { y } //~ ERROR explicit lifetime required\n-   |                       ----               ^ lifetime `'a` required\n-   |                       |\n-   |                       help: add explicit lifetime `'a` to the type of `y`: `&'a u32`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/mismatched.rs:16:46\n-   |\n-LL | fn foo2(x: &'a u32, y: &'b u32) -> &'a u32 { y } //~ ERROR lifetime mismatch\n-   |             --          --                   ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n-   |             |           |\n-   |             |           lifetime `'b` defined here\n-   |             lifetime `'a` defined here\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "a21336654f379cdd2fee2c2c7786e9a4dbcd7b48", "filename": "src/test/ui/issues/issue-10291.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10291.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/issue-10291.rs:13:9\n-   |\n-LL | fn test<'x>(x: &'x isize) {\n-   |         -- lifetime `'x` defined here\n-LL |     drop::<Box<for<'z> FnMut(&'z isize) -> &'z isize>>(Box::new(|z| {\n-LL |         x //~ ERROR E0312\n-   |         ^ returning this value requires that `'x` must outlive `'static`\n-\n-error: aborting due to previous error\n-"}, {"sha": "bb844c4a69f22096775807aff91292c82f34764f", "filename": "src/test/ui/issues/issue-12567.nll.stderr", "status": "modified", "additions": 39, "deletions": 2, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-12567.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-12567.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-12567.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -40,6 +40,43 @@ LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n LL |         (&[hd1, ..], &[hd2, ..])\n    |            ^^^\n \n-error: aborting due to 2 previous errors\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/issue-12567.rs:16:17\n+   |\n+LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n+   |                 ^^\n+   |                 |\n+   |                 cannot move out of data in a `&` reference\n+   |                 cannot move\n+\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/issue-12567.rs:16:31\n+   |\n+LL |         (&[], &[hd, ..]) | (&[hd, ..], &[])\n+   |                               ^^\n+   |                               |\n+   |                               cannot move out of data in a `&` reference\n+   |                               cannot move\n+\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/issue-12567.rs:20:12\n+   |\n+LL |         (&[hd1, ..], &[hd2, ..])\n+   |            ^^^\n+   |            |\n+   |            cannot move out of data in a `&` reference\n+   |            cannot move\n+\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/issue-12567.rs:20:24\n+   |\n+LL |         (&[hd1, ..], &[hd2, ..])\n+   |                        ^^^\n+   |                        |\n+   |                        cannot move out of data in a `&` reference\n+   |                        cannot move\n+\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0508`.\n+Some errors occurred: E0507, E0508.\n+For more information about an error, try `rustc --explain E0507`."}, {"sha": "0d641ec8e891ad150a7b8d85a42291311cc364d9", "filename": "src/test/ui/issues/issue-13058.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-13058.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-13058.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13058.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `cont`\n-  --> $DIR/issue-13058.rs:24:21\n-   |\n-LL | fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n-   |                                                                     -- help: add explicit lifetime `'r` to the type of `cont`: `&'r T`\n-LL | {\n-LL |     let cont_iter = cont.iter();\n-   |                     ^^^^^^^^^^^ lifetime `'r` required\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "aa5ceabfb11748648f0f20a1757ac22b8c7a466d", "filename": "src/test/ui/issues/issue-15034.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15034.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `lexer`\n-  --> $DIR/issue-15034.rs:27:9\n-   |\n-LL |     pub fn new(lexer: &'a mut Lexer) -> Parser<'a> {\n-   |                       ------------- help: add explicit lifetime `'a` to the type of `lexer`: `&'a mut Lexer<'a>`\n-LL |         Parser { lexer: lexer }\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "29d9948f61a428fe89dd4d0ec1a1635f12367e8e", "filename": "src/test/ui/issues/issue-16683.nll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16683.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,10 +0,0 @@\n-error: borrowed data escapes outside of function\n-  --> $DIR/issue-16683.rs:14:9\n-   |\n-LL |     fn b(&self) {\n-   |          ----- `self` is a reference that is only valid in the function body\n-LL |         self.a(); //~ ERROR cannot infer\n-   |         ^^^^^^^^ `self` escapes the function body here\n-\n-error: aborting due to previous error\n-"}, {"sha": "66fba7749f4791544665507456c64fc834beb17a", "filename": "src/test/ui/issues/issue-17718-static-move.nll.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17718-static-move.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -7,6 +7,15 @@ LL |     let _a = FOO; //~ ERROR: cannot move out of static item\n    |              cannot move out of static item\n    |              help: consider borrowing here: `&FOO`\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of immutable static item `FOO`\n+  --> $DIR/issue-17718-static-move.rs:16:14\n+   |\n+LL |     let _a = FOO; //~ ERROR: cannot move out of static item\n+   |              ^^^\n+   |              |\n+   |              cannot move out of immutable static item `FOO`\n+   |              cannot move\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "2cb6f831d85684b6d383f02a7e571f9f5a9fe792", "filename": "src/test/ui/issues/issue-17728.nll.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17728.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,19 +0,0 @@\n-error[E0308]: match arms have incompatible types\n-  --> $DIR/issue-17728.rs:110:5\n-   |\n-LL | /     match to_parse { //~ ERROR match arms have incompatible types\n-LL | |         \"w\" | \"west\" => RoomDirection::West,\n-LL | |         \"e\" | \"east\" => RoomDirection::East,\n-LL | |         \"n\" | \"north\" => RoomDirection::North,\n-...  |\n-LL | |         _ => None\n-   | |              ---- match arm with an incompatible type\n-LL | |     }\n-   | |_____^ expected enum `RoomDirection`, found enum `std::option::Option`\n-   |\n-   = note: expected type `RoomDirection`\n-              found type `std::option::Option<_>`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "87e01ace64a1b5fe2b5b3d52444439536a9b18b5", "filename": "src/test/ui/issues/issue-17758.nll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17758.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,10 +0,0 @@\n-error: borrowed data escapes outside of function\n-  --> $DIR/issue-17758.rs:17:9\n-   |\n-LL |     fn bar(&self) {\n-   |            ----- `self` is a reference that is only valid in the function body\n-LL |         self.foo();\n-   |         ^^^^^^^^^^ `self` escapes the function body here\n-\n-error: aborting due to previous error\n-"}, {"sha": "60e3056b8c4d4a15af495563f838ba8a2a895bcc", "filename": "src/test/ui/issues/issue-20801.nll.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-20801.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-20801.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20801.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -16,6 +16,15 @@ LL |     let b = unsafe { *imm_ref() };\n    |                      cannot move out of borrowed content\n    |                      help: consider removing the `*`: `imm_ref()`\n \n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/issue-20801.rs:39:22\n+   |\n+LL |     let b = unsafe { *imm_ref() };\n+   |                      ^^^^^^^^^^\n+   |                      |\n+   |                      cannot move out of data in a `&` reference\n+   |                      cannot move\n+\n error[E0507]: cannot move out of dereference of raw pointer\n   --> $DIR/issue-20801.rs:42:22\n    |\n@@ -34,6 +43,15 @@ LL |     let d = unsafe { *const_ptr() };\n    |                      cannot move out of dereference of raw pointer\n    |                      help: consider removing the `*`: `const_ptr()`\n \n-error: aborting due to 4 previous errors\n+error[E0507]: cannot move out of data in a `*const` pointer\n+  --> $DIR/issue-20801.rs:45:22\n+   |\n+LL |     let d = unsafe { *const_ptr() };\n+   |                      ^^^^^^^^^^^^\n+   |                      |\n+   |                      cannot move out of data in a `*const` pointer\n+   |                      cannot move\n+\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "ae726d26d072b80203d31f10cb28fc6eb1cd7b5e", "filename": "src/test/ui/issues/issue-2590.nll.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-2590.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-2590.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-2590.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -4,6 +4,17 @@ error[E0507]: cannot move out of borrowed content\n LL |         self.tokens //~ ERROR cannot move out of borrowed content\n    |         ^^^^^^^^^^^ cannot move out of borrowed content\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `self.tokens` which is behind a `&` reference\n+  --> $DIR/issue-2590.rs:22:9\n+   |\n+LL |     fn parse(&self) -> Vec<isize> {\n+   |              ----- help: consider changing this to be a mutable reference: `&mut self`\n+LL |         self.tokens //~ ERROR cannot move out of borrowed content\n+   |         ^^^^^^^^^^^\n+   |         |\n+   |         cannot move out of `self.tokens` which is behind a `&` reference\n+   |         `self` is a `&` reference, so the data it refers to cannot be moved\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "f28b06540990637895334b7c19c3a4565a8a78ca", "filename": "src/test/ui/issues/issue-26217.nll.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26217.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,9 +0,0 @@\n-error[E0131]: `main` function is not allowed to have generic parameters\n-  --> $DIR/issue-26217.rs:13:8\n-   |\n-LL | fn main<'a>() {\n-   |        ^^^^ `main` cannot have generic parameters\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0131`."}, {"sha": "78cf3661bb76338d365291dd99fe67944a4e8833", "filename": "src/test/ui/issues/issue-30355.nll.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-30355.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-30355.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30355.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -16,7 +16,16 @@ error[E0508]: cannot move out of type `[u8]`, a non-copy slice\n LL |     &X(*Y)\n    |        ^^ cannot move out of here\n \n-error: aborting due to 3 previous errors\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/issue-30355.rs:15:8\n+   |\n+LL |     &X(*Y)\n+   |        ^^\n+   |        |\n+   |        cannot move out of data in a `&` reference\n+   |        cannot move\n+\n+error: aborting due to 4 previous errors\n \n-Some errors occurred: E0161, E0508.\n+Some errors occurred: E0161, E0507, E0508.\n For more information about an error, try `rustc --explain E0161`."}, {"sha": "e15e4e86dbcbf460f6a7d755d56595dc6b14d141", "filename": "src/test/ui/issues/issue-40288-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-40288-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-40288-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40288-2.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,21 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/issue-40288-2.rs:17:9\n-   |\n-LL | fn lifetime_transmute_slice<'a, T: ?Sized>(x: &'a T, y: &T) -> &'a T {\n-   |                                                         -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`\n-...\n-LL |         slice[0] = y;\n-   |         ^^^^^^^^^^^^ lifetime `'a` required\n-\n-error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/issue-40288-2.rs:32:9\n-   |\n-LL | fn lifetime_transmute_struct<'a, T: ?Sized>(x: &'a T, y: &T) -> &'a T {\n-   |                                                          -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`\n-...\n-LL |         dst.head = y;\n-   |         ^^^^^^^^^^^^ lifetime `'a` required\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "22fcffb9527a4b651c54fea1bb424bfdb2770301", "filename": "src/test/ui/issues/issue-40402-ref-hints/issue-40402-1.nll.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-1.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -7,6 +7,15 @@ LL |     let e = f.v[0]; //~ ERROR cannot move out of indexed content\n    |             cannot move out of borrowed content\n    |             help: consider borrowing here: `&f.v[0]`\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/issue-40402-1.rs:19:13\n+   |\n+LL |     let e = f.v[0]; //~ ERROR cannot move out of indexed content\n+   |             ^^^^^^\n+   |             |\n+   |             cannot move out of data in a `&` reference\n+   |             cannot move\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "cdb547ad10064f8b2734400d3d32c1f58d4705f2", "filename": "src/test/ui/issues/issue-40402-ref-hints/issue-40402-2.nll.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40402-ref-hints%2Fissue-40402-2.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -1,3 +1,21 @@\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/issue-40402-2.rs:15:10\n+   |\n+LL |     let (a, b) = x[0]; //~ ERROR cannot move out of indexed content\n+   |          ^\n+   |          |\n+   |          cannot move out of data in a `&` reference\n+   |          cannot move\n+\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/issue-40402-2.rs:15:13\n+   |\n+LL |     let (a, b) = x[0]; //~ ERROR cannot move out of indexed content\n+   |             ^\n+   |             |\n+   |             cannot move out of data in a `&` reference\n+   |             cannot move\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/issue-40402-2.rs:15:18\n    |\n@@ -15,6 +33,6 @@ note: move occurs because these variables have types that don't implement the `C\n LL |     let (a, b) = x[0]; //~ ERROR cannot move out of indexed content\n    |          ^  ^\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "ee8fdc16a06f421d550ea3deb01b3c2c7ea01a08", "filename": "src/test/ui/issues/issue-40510-1.nll.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-1.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -1,4 +1,4 @@\n-error: captured variable cannot escape `FnMut` closure body\n+warning: captured variable cannot escape `FnMut` closure body\n   --> $DIR/issue-40510-1.rs:18:9\n    |\n LL |     || {\n@@ -8,6 +8,15 @@ LL |         &mut x\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n+\n+error: compilation successful\n+  --> $DIR/issue-40510-1.rs:23:1\n+   |\n+LL | fn main() {} //~ ERROR compilation successful\n+   | ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "37a00746a88c23704ab76f44910c3f6353e11ad2", "filename": "src/test/ui/issues/issue-40510-3.nll.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-40510-3.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -1,4 +1,4 @@\n-error: captured variable cannot escape `FnMut` closure body\n+warning: captured variable cannot escape `FnMut` closure body\n   --> $DIR/issue-40510-3.rs:18:9\n    |\n LL |       || {\n@@ -10,6 +10,15 @@ LL | |         }\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n+\n+error: compilation successful\n+  --> $DIR/issue-40510-3.rs:25:1\n+   |\n+LL | fn main() {} //~ ERROR compilation successful\n+   | ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "fb123de2139283cc4900fe876ceae59677f37793", "filename": "src/test/ui/issues/issue-4335.nll.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-4335.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-4335.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-4335.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -6,6 +6,15 @@ LL | fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n LL |     id(Box::new(|| *v))\n    |                    ^^ cannot move out of captured variable in an `FnMut` closure\n \n+error[E0507]: cannot move out of `*v` which is behind a `&` reference\n+  --> $DIR/issue-4335.rs:16:20\n+   |\n+LL |     id(Box::new(|| *v))\n+   |                    ^^\n+   |                    |\n+   |                    cannot move out of `*v` which is behind a `&` reference\n+   |                    cannot move\n+\n error[E0597]: `v` does not live long enough\n   --> $DIR/issue-4335.rs:16:21\n    |\n@@ -23,7 +32,7 @@ note: borrowed value must be valid for the lifetime 'r as defined on the functio\n LL | fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n    |      ^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n Some errors occurred: E0507, E0597.\n For more information about an error, try `rustc --explain E0507`."}, {"sha": "555558c99d933b1d435a4b8f846f45a8d0a83c04", "filename": "src/test/ui/issues/issue-49824.nll.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49824.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -1,4 +1,4 @@\n-error: captured variable cannot escape `FnMut` closure body\n+warning: captured variable cannot escape `FnMut` closure body\n   --> $DIR/issue-49824.rs:22:9\n    |\n LL |       || {\n@@ -10,6 +10,21 @@ LL | |         }\n    |\n    = note: `FnMut` closures only have access to their captured variables while they are executing...\n    = note: ...therefore, they cannot allow references to captured variables to escape\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n+\n+error: compilation successful\n+  --> $DIR/issue-49824.rs:18:1\n+   |\n+LL | / fn main() {\n+LL | |     //~^ compilation successful\n+LL | |     let mut x = 0;\n+LL | |     || {\n+...  |\n+LL | |     };\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "dab3fd866ba64bcef97d51a0413ae50b77ea5442", "filename": "src/test/ui/issues/issue-52213.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52213.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/issue-52213.rs:13:20\n-   |\n-LL | fn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n-   |                       --  -- lifetime `'b` defined here\n-   |                       |\n-   |                       lifetime `'a` defined here\n-LL |     match (&t,) { //~ ERROR cannot infer an appropriate lifetime\n-LL |         ((u,),) => u,\n-   |                    ^ returning this value requires that `'a` must outlive `'b`\n-\n-error: aborting due to previous error\n-"}, {"sha": "cc5f4df79f8f566dd78fe5060765700c279bd601", "filename": "src/test/ui/issues/issue-52533-1.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533-1.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/issue-52533-1.rs:19:18\n-   |\n-LL |     gimme(|x, y| y)\n-   |            -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n-   |            |  |\n-   |            |  has type `&Foo<'_, '1, u32>`\n-   |            has type `&Foo<'_, '2, u32>`\n-\n-error: aborting due to previous error\n-"}, {"sha": "37ab2a3b84d2f3fafc2f098c950449ba8490e143", "filename": "src/test/ui/issues/issue-52533.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52533.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/issue-52533.rs:15:16\n-   |\n-LL |     foo(|a, b| b)\n-   |          -  -  ^ closure was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n-   |          |  |\n-   |          |  has type `&'1 u32`\n-   |          has type `&'2 u32`\n-\n-error: aborting due to previous error\n-"}, {"sha": "d484632f4c34e336507b4ec832a909f84bbd61db", "filename": "src/test/ui/kindck/kindck-impl-type-params.nll.stderr", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-impl-type-params.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,63 +0,0 @@\n-error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/kindck-impl-type-params.rs:28:13\n-   |\n-LL |     let a = &t as &Gettable<T>;\n-   |             ^^ `T` cannot be sent between threads safely\n-   |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n-   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-   = note: required for the cast to the object type `dyn Gettable<T>`\n-\n-error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:28:13\n-   |\n-LL |     let a = &t as &Gettable<T>;\n-   |             ^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n-   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-   = note: required for the cast to the object type `dyn Gettable<T>`\n-\n-error[E0277]: `T` cannot be sent between threads safely\n-  --> $DIR/kindck-impl-type-params.rs:35:27\n-   |\n-LL |     let a: &Gettable<T> = &t;\n-   |                           ^^ `T` cannot be sent between threads safely\n-   |\n-   = help: the trait `std::marker::Send` is not implemented for `T`\n-   = help: consider adding a `where T: std::marker::Send` bound\n-   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-   = note: required for the cast to the object type `dyn Gettable<T>`\n-\n-error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:35:27\n-   |\n-LL |     let a: &Gettable<T> = &t;\n-   |                           ^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |\n-   = help: consider adding a `where T: std::marker::Copy` bound\n-   = note: required because of the requirements on the impl of `Gettable<T>` for `S<T>`\n-   = note: required for the cast to the object type `dyn Gettable<T>`\n-\n-error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:48:13\n-   |\n-LL |     let a = t as Box<Gettable<String>>;\n-   |             ^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n-   |\n-   = note: required because of the requirements on the impl of `Gettable<std::string::String>` for `S<std::string::String>`\n-   = note: required for the cast to the object type `dyn Gettable<std::string::String>`\n-\n-error[E0277]: the trait bound `foo3::Foo: std::marker::Copy` is not satisfied\n-  --> $DIR/kindck-impl-type-params.rs:56:33\n-   |\n-LL |     let a: Box<Gettable<Foo>> = t;\n-   |                                 ^ the trait `std::marker::Copy` is not implemented for `foo3::Foo`\n-   |\n-   = note: required because of the requirements on the impl of `Gettable<foo3::Foo>` for `S<foo3::Foo>`\n-   = note: required for the cast to the object type `dyn Gettable<foo3::Foo>`\n-\n-error: aborting due to 6 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "a45ba157bf9a34913c0c48f169c721def057293c", "filename": "src/test/ui/kindck/kindck-send-object1.nll.stderr", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-send-object1.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,32 +0,0 @@\n-error[E0277]: `(dyn Dummy + 'a)` cannot be shared between threads safely\n-  --> $DIR/kindck-send-object1.rs:20:5\n-   |\n-LL |     assert_send::<&'a Dummy>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be shared between threads safely\n-   |\n-   = help: the trait `std::marker::Sync` is not implemented for `(dyn Dummy + 'a)`\n-   = note: required because of the requirements on the impl of `std::marker::Send` for `&'a (dyn Dummy + 'a)`\n-note: required by `assert_send`\n-  --> $DIR/kindck-send-object1.rs:15:1\n-   |\n-LL | fn assert_send<T:Send+'static>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0277]: `(dyn Dummy + 'a)` cannot be sent between threads safely\n-  --> $DIR/kindck-send-object1.rs:39:5\n-   |\n-LL |     assert_send::<Box<Dummy+'a>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `(dyn Dummy + 'a)` cannot be sent between threads safely\n-   |\n-   = help: the trait `std::marker::Send` is not implemented for `(dyn Dummy + 'a)`\n-   = note: required because of the requirements on the impl of `std::marker::Send` for `std::ptr::Unique<(dyn Dummy + 'a)>`\n-   = note: required because it appears within the type `std::boxed::Box<(dyn Dummy + 'a)>`\n-note: required by `assert_send`\n-  --> $DIR/kindck-send-object1.rs:15:1\n-   |\n-LL | fn assert_send<T:Send+'static>() { }\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "bc15df264cc3b1d895c4d473621e1e17589a1301", "filename": "src/test/ui/lifetimes/lifetime-bound-will-change-warning.nll.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-bound-will-change-warning.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,20 +0,0 @@\n-error: borrowed data escapes outside of function\n-  --> $DIR/lifetime-bound-will-change-warning.rs:44:5\n-   |\n-LL | fn test2<'a>(x: &'a Box<Fn()+'a>) {\n-   |              - `x` is a reference that is only valid in the function body\n-LL |     // but ref_obj will not, so warn.\n-LL |     ref_obj(x) //~ ERROR mismatched types\n-   |     ^^^^^^^^^^ `x` escapes the function body here\n-\n-error: borrowed data escapes outside of function\n-  --> $DIR/lifetime-bound-will-change-warning.rs:49:5\n-   |\n-LL | fn test2cc<'a>(x: &'a Box<Fn()+'a>) {\n-   |                - `x` is a reference that is only valid in the function body\n-LL |     // same as test2, but cross crate\n-LL |     lib::ref_obj(x) //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^ `x` escapes the function body here\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "4e3193ccbfd5cb4632ca466a1505dfb7c1f81c8d", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-if-else-using-impl.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-if-else-using-impl.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex1-return-one-existing-name-if-else-using-impl.rs:21:20\n-   |\n-LL |     fn foo<'a>(x: &i32, y: &'a i32) -> &'a i32 {\n-   |            --     - let's call the lifetime of this reference `'1`\n-   |            |\n-   |            lifetime `'a` defined here\n-LL | \n-LL |         if x > y { x } else { y } //~ ERROR lifetime mismatch\n-   |                    ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n-\n-error: aborting due to previous error\n-"}, {"sha": "3413203fa7f06291e8fbb15845dcb86a2e14ebc2", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-return-type-is-anon.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-return-type-is-anon.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex1-return-one-existing-name-return-type-is-anon.rs:18:5\n-   |\n-LL |   fn foo<'a>(&self, x: &'a i32) -> &i32 {\n-   |          --  - let's call the lifetime of this reference `'1`\n-   |          |\n-   |          lifetime `'a` defined here\n-LL | \n-LL |     x //~ ERROR lifetime mismatch\n-   |     ^ function was supposed to return data with lifetime `'1` but it is returning data with lifetime `'a`\n-\n-error: aborting due to previous error\n-"}, {"sha": "239419967f6c1cfa3bf491478a666b00db071dd0", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1-return-one-existing-name-self-is-anon.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1-return-one-existing-name-self-is-anon.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex1-return-one-existing-name-self-is-anon.rs:18:30\n-   |\n-LL |     fn foo<'a>(&self, x: &'a Foo) -> &'a Foo {\n-   |            --  - let's call the lifetime of this reference `'1`\n-   |            |\n-   |            lifetime `'a` defined here\n-LL | \n-LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n-   |                              ^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n-\n-error: aborting due to previous error\n-"}, {"sha": "709d9f84db3f9d98a2aadac1d7a75756e2bece7f", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-2.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/ex2a-push-one-existing-name-2.rs:16:5\n-   |\n-LL | fn foo<'a>(x: Ref<i32>, y: &mut Vec<Ref<'a, i32>>) {\n-   |               -------- help: add explicit lifetime `'a` to the type of `x`: `Ref<'a, i32>`\n-LL |     y.push(x); //~ ERROR explicit lifetime\n-   |     ^^^^^^^^^ lifetime `'a` required\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "1e608fe16e41361965f66ce487220dbc79893f44", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name-early-bound.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name-early-bound.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/ex2a-push-one-existing-name-early-bound.rs:17:5\n-   |\n-LL | fn baz<'a, 'b, T>(x: &mut Vec<&'a T>, y: &T)\n-   |                                          -- help: add explicit lifetime `'a` to the type of `y`: `&'a T`\n-...\n-LL |     x.push(y); //~ ERROR explicit lifetime required\n-   |     ^^^^^^^^^ lifetime `'a` required\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "14194352093954719524b08628e239122ab5a2b3", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2a-push-one-existing-name.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2a-push-one-existing-name.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `y`\n-  --> $DIR/ex2a-push-one-existing-name.rs:16:5\n-   |\n-LL | fn foo<'a>(x: &mut Vec<Ref<'a, i32>>, y: Ref<i32>) {\n-   |                                          -------- help: add explicit lifetime `'a` to the type of `y`: `Ref<'a, i32>`\n-LL |     x.push(y); //~ ERROR explicit lifetime\n-   |     ^^^^^^^^^ lifetime `'a` required\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "fc5f02fbc721de7e468b38b3c1e50c91d9208351", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2b-push-no-existing-names.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2b-push-no-existing-names.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex2b-push-no-existing-names.rs:16:5\n-   |\n-LL | fn foo(x: &mut Vec<Ref<i32>>, y: Ref<i32>) {\n-   |        -                      - has type `Ref<'1, i32>`\n-   |        |\n-   |        has type `&mut std::vec::Vec<Ref<'2, i32>>`\n-LL |     x.push(y); //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "a5053244dc1f0fd0bbcf00aac0680bb4501da539", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2c-push-inference-variable.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2c-push-inference-variable.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex2c-push-inference-variable.rs:17:5\n-   |\n-LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-   |            --  -- lifetime `'c` defined here\n-   |            |\n-   |            lifetime `'b` defined here\n-LL |     let z = Ref { data: y.data };\n-LL |     x.push(z); //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^ argument requires that `'c` must outlive `'b`\n-\n-error: aborting due to previous error\n-"}, {"sha": "361fb708d4013b81f6c41c5e6e2e8649347edae7", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2d-push-inference-variable-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2d-push-inference-variable-2.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex2d-push-inference-variable-2.rs:18:5\n-   |\n-LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-   |            --  -- lifetime `'c` defined here\n-   |            |\n-   |            lifetime `'b` defined here\n-...\n-LL |     a.push(b);\n-   |     ^^^^^^^^^ argument requires that `'c` must outlive `'b`\n-\n-error: aborting due to previous error\n-"}, {"sha": "5d0f07054dfed6c965f0cda0d2b3f481147ee187", "filename": "src/test/ui/lifetimes/lifetime-errors/ex2e-push-inference-variable-3.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex2e-push-inference-variable-3.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex2e-push-inference-variable-3.rs:18:5\n-   |\n-LL | fn foo<'a, 'b, 'c>(x: &'a mut Vec<Ref<'b, i32>>, y: Ref<'c, i32>) {\n-   |            --  -- lifetime `'c` defined here\n-   |            |\n-   |            lifetime `'b` defined here\n-...\n-LL |     Vec::push(a, b);\n-   |     ^^^^^^^^^^^^^^^ argument requires that `'c` must outlive `'b`\n-\n-error: aborting due to previous error\n-"}, {"sha": "e4aafd7b66e405e8d82ffb4da14b4649c60ed9e3", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-2.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-2.rs:12:5\n-   |\n-LL | fn foo(&mut (ref mut v, w): &mut (&u8, &u8), x: &u8) {\n-   |                                   -             - let's call the lifetime of this reference `'1`\n-   |                                   |\n-   |                                   let's call the lifetime of this reference `'2`\n-LL |     *v = x; //~ ERROR lifetime mismatch\n-   |     ^^^^^^ assignment requires that `'1` must outlive `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "e1872dcf777ec9da06272ee75454fed1229fc165", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-3.nll.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-3.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,22 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-3.rs:12:5\n-   |\n-LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n-   |                     -                   - let's call the lifetime of this reference `'1`\n-   |                     |\n-   |                     let's call the lifetime of this reference `'2`\n-LL |     z.push((x,y)); //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-3.rs:12:5\n-   |\n-LL | fn foo(z: &mut Vec<(&u8,&u8)>, (x, y): (&u8, &u8)) {\n-   |                         -                    - let's call the lifetime of this reference `'1`\n-   |                         |\n-   |                         let's call the lifetime of this reference `'2`\n-LL |     z.push((x,y)); //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "934cdcd2ef28cecbf51712f18156aed99a00eb8e", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-2.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-2.rs:16:5\n-   |\n-LL | fn foo(mut x: Ref, y: Ref) {\n-   |        -----       - has type `Ref<'_, '1>`\n-   |        |\n-   |        has type `Ref<'_, '2>`\n-LL |     x.b = y.b; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "cbfd9d478091e994aabd92569b7d8c4d221f8be5", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-3.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-3.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-3.rs:16:5\n-   |\n-LL | fn foo(mut x: Ref) {\n-   |        -----\n-   |        |\n-   |        has type `Ref<'_, '1>`\n-   |        has type `Ref<'2, '_>`\n-LL |     x.a = x.b; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^ assignment requires that `'1` must outlive `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "7f814b730fff538e83b6f28c0ad55adf72e3072a", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-earlybound-regions.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-earlybound-regions.rs:18:5\n-   |\n-LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>)\n-   |        --  -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-...\n-LL |     x.push(y); //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n-error: aborting due to previous error\n-"}, {"sha": "f38dceb331bfb12021f361dc224f3fe9d01b1027", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs-latebound-regions.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-both-are-structs-latebound-regions.rs:15:5\n-   |\n-LL | fn foo<'a, 'b>(mut x: Vec<Ref<'a>>, y: Ref<'b>) {\n-   |        --  -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-LL |     x.push(y); //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n-error: aborting due to previous error\n-"}, {"sha": "39a7154c8e9555e29dcff7563f38c50b5d1bcb3c", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-both-are-structs.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-both-are-structs.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-both-are-structs.rs:15:5\n-   |\n-LL | fn foo(mut x: Vec<Ref>, y: Ref) {\n-   |        -----            - has type `Ref<'1>`\n-   |        |\n-   |        has type `std::vec::Vec<Ref<'2>>`\n-LL |     x.push(y); //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "d59480cefcc698a788a42884ce7fa2dd6f4c00e2", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-latebound-regions.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-latebound-regions.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-latebound-regions.rs:12:5\n-   |\n-LL | fn foo<'a,'b>(x: &mut Vec<&'a u8>, y: &'b u8) {\n-   |        -- -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-LL |     x.push(y); //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^ argument requires that `'b` must outlive `'a`\n-\n-error: aborting due to previous error\n-"}, {"sha": "fc1fab7aab5bb208132aed2824bf5a31d1db5950", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-2.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,21 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:14:5\n-   |\n-LL | fn foo(mut x: Ref, y: &u32) {\n-   |        -----          - let's call the lifetime of this reference `'2`\n-   |        |\n-   |        has type `Ref<'_, '1>`\n-LL |     y = x.b; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n-\n-error[E0384]: cannot assign to immutable argument `y`\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-2.rs:14:5\n-   |\n-LL | fn foo(mut x: Ref, y: &u32) {\n-   |                    - help: make this binding mutable: `mut y`\n-LL |     y = x.b; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^ cannot assign to immutable argument\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0384`."}, {"sha": "8100fa89c2d0ac453a04cf2eec4c4f4413bff7a1", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-3.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-3.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-3.rs:14:5\n-   |\n-LL | fn foo(mut y: Ref, x: &u32) {\n-   |        -----          - let's call the lifetime of this reference `'1`\n-   |        |\n-   |        has type `Ref<'_, '2>`\n-LL |     y.b = x; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "1c4a8b665893210bf0a402cc9b542352bfbed927", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct-4.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct-4.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-one-is-struct-4.rs:14:5\n-   |\n-LL | fn foo(mut y: Ref, x: &u32) {\n-   |        -----          - let's call the lifetime of this reference `'1`\n-   |        |\n-   |        has type `Ref<'_, '2>`\n-LL |     y.b = x; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "2a4c5a685f16a524dcad341a4072bacfae7fd145", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-one-is-struct.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-one-is-struct.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-one-is-struct.rs:17:5\n-   |\n-LL | fn foo(mut x: Ref, y: &u32) {\n-   |        -----          - let's call the lifetime of this reference `'1`\n-   |        |\n-   |        has type `Ref<'_, '2>`\n-LL |     x.b = y; //~ ERROR lifetime mismatch\n-   |     ^^^^^^^ assignment requires that `'1` must outlive `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "898f997779d1db29e25074b5f94ebf045788fbf2", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-return-type-is-anon.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-return-type-is-anon.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-return-type-is-anon.rs:17:5\n-   |\n-LL |   fn foo<'a>(&self, x: &i32) -> &i32 {\n-   |              -         - let's call the lifetime of this reference `'1`\n-   |              |\n-   |              let's call the lifetime of this reference `'2`\n-LL |     x //~ ERROR lifetime mismatch\n-   |     ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n-\n-error: aborting due to previous error\n-"}, {"sha": "bdb9b306cdaea7c5433a6936b019c8cf0f2bb505", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-self-is-anon.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-self-is-anon.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-self-is-anon.rs:17:19\n-   |\n-LL |     fn foo<'a>(&self, x: &Foo) -> &Foo {\n-   |                -         - let's call the lifetime of this reference `'1`\n-   |                |\n-   |                let's call the lifetime of this reference `'2`\n-LL |         if true { x } else { self } //~ ERROR lifetime mismatch\n-   |                   ^ function was supposed to return data with lifetime `'2` but it is returning data with lifetime `'1`\n-\n-error: aborting due to previous error\n-"}, {"sha": "2e4df170d6cd5936a2a5e9b0db21db2701746104", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-fn-items.nll.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-fn-items.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,21 +0,0 @@\n-error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n-  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:11:3\n-   |\n-LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n-   |                        - help: consider changing this to be mutable: `mut y`\n-LL |   y.push(z); //~ ERROR lifetime mismatch\n-   |   ^ cannot borrow as mutable\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-using-fn-items.rs:11:3\n-   |\n-LL | fn foo(x:fn(&u8, &u8), y: Vec<&u8>, z: &u8) {\n-   |                               -        - let's call the lifetime of this reference `'1`\n-   |                               |\n-   |                               let's call the lifetime of this reference `'2`\n-LL |   y.push(z); //~ ERROR lifetime mismatch\n-   |   ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0596`."}, {"sha": "8d743608438ba06653ebd5d46d1b2a13d14b5bb6", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-impl-items.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-impl-items.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-using-impl-items.rs:15:9\n-   |\n-LL |     fn foo(x: &mut Vec<&u8>, y: &u8) {\n-   |                        -        - let's call the lifetime of this reference `'1`\n-   |                        |\n-   |                        let's call the lifetime of this reference `'2`\n-LL |         x.push(y); //~ ERROR lifetime mismatch\n-   |         ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "a2dc0e4bda3b797bdaa85c565a5a6855c8580445", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions-using-trait-objects.nll.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions-using-trait-objects.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,21 +0,0 @@\n-error[E0596]: cannot borrow `y` as mutable, as it is not declared as mutable\n-  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:11:3\n-   |\n-LL | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n-   |                              - help: consider changing this to be mutable: `mut y`\n-LL |   y.push(z); //~ ERROR lifetime mismatch\n-   |   ^ cannot borrow as mutable\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions-using-trait-objects.rs:11:3\n-   |\n-LL | fn foo(x:Box<Fn(&u8, &u8)> , y: Vec<&u8>, z: &u8) {\n-   |                                     -        - let's call the lifetime of this reference `'1`\n-   |                                     |\n-   |                                     let's call the lifetime of this reference `'2`\n-LL |   y.push(z); //~ ERROR lifetime mismatch\n-   |   ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0596`."}, {"sha": "0d674162eea05372e8cc3855f789edb9d554193f", "filename": "src/test/ui/lifetimes/lifetime-errors/ex3-both-anon-regions.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex3-both-anon-regions.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/ex3-both-anon-regions.rs:12:5\n-   |\n-LL | fn foo(x: &mut Vec<&u8>, y: &u8) {\n-   |                    -        - let's call the lifetime of this reference `'1`\n-   |                    |\n-   |                    let's call the lifetime of this reference `'2`\n-LL |     x.push(y); //~ ERROR lifetime mismatch\n-   |     ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "2405e30a8cd005db3a69bab6c1b20eedac7bbcc1", "filename": "src/test/ui/lub-if.nll.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flub-if.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flub-if.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-if.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,20 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/lub-if.rs:38:9\n-   |\n-LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n-   |                 -- lifetime `'a` defined here\n-...\n-LL |         s  //~ ERROR E0312\n-   |         ^ returning this value requires that `'a` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/lub-if.rs:45:9\n-   |\n-LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n-   |                 -- lifetime `'a` defined here\n-...\n-LL |         s  //~ ERROR E0312\n-   |         ^ returning this value requires that `'a` must outlive `'static`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "5a39dd14e4c42f51b94c46605e5a80bd60ea360f", "filename": "src/test/ui/lub-match.nll.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flub-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Flub-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flub-match.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,20 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/lub-match.rs:40:13\n-   |\n-LL | pub fn opt_str2<'a>(maybestr: &'a Option<String>) -> &'static str {\n-   |                 -- lifetime `'a` defined here\n-...\n-LL |             s //~ ERROR E0312\n-   |             ^ returning this value requires that `'a` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/lub-match.rs:49:13\n-   |\n-LL | pub fn opt_str3<'a>(maybestr: &'a Option<String>) -> &'static str {\n-   |                 -- lifetime `'a` defined here\n-...\n-LL |             s //~ ERROR E0312\n-   |             ^ returning this value requires that `'a` must outlive `'static`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "d5167bbaeab07233eae4bc69d1a7b3a04f2b3636", "filename": "src/test/ui/match/match-ref-mut-invariance.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-invariance.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/match-ref-mut-invariance.rs:20:9\n-   |\n-LL | impl<'b> S<'b> {\n-   |      -- lifetime `'b` defined here\n-LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n-   |            -- lifetime `'a` defined here\n-LL |         match self.0 { ref mut x => x } //~ ERROR mismatched types\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n-\n-error: aborting due to previous error\n-"}, {"sha": "54915865d8899a0526fa25c98f9b4294659c1286", "filename": "src/test/ui/match/match-ref-mut-let-invariance.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-ref-mut-let-invariance.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/match-ref-mut-let-invariance.rs:21:9\n-   |\n-LL | impl<'b> S<'b> {\n-   |      -- lifetime `'b` defined here\n-LL |     fn bar<'a>(&'a mut self) -> &'a mut &'a i32 {\n-   |            -- lifetime `'a` defined here\n-LL |         let ref mut x = self.0;\n-LL |         x //~ ERROR mismatched types\n-   |         ^ returning this value requires that `'a` must outlive `'b`\n-\n-error: aborting due to previous error\n-"}, {"sha": "1ded703fd5a2f0bc49f3dbaf832a07fbf91492a1", "filename": "src/test/ui/moves/moves-based-on-type-block-bad.nll.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-block-bad.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -16,6 +16,18 @@ note: move occurs because `x` has type `std::boxed::Box<isize>`, which does not\n LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n    |                            ^\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `hellothere.x.0` which is behind a `&` reference\n+  --> $DIR/moves-based-on-type-block-bad.rs:37:28\n+   |\n+LL |         f(&s, |hellothere| {\n+   |                ---------- help: consider changing this to be a mutable reference: `&mut S`\n+...\n+LL |                 box E::Bar(x) => println!(\"{}\", x.to_string()),\n+   |                            ^\n+   |                            |\n+   |                            cannot move out of `hellothere.x.0` which is behind a `&` reference\n+   |                            `hellothere` is a `&` reference, so the data it refers to cannot be moved\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "a34a9efab6bce413f317a557d9da135e6b17c453", "filename": "src/test/ui/moves/moves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-move-out-of-closure-env-issue-1965.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -6,6 +6,21 @@ LL |     let i = box 3;\n LL |     let _f = to_fn(|| test(i)); //~ ERROR cannot move out\n    |                            ^ cannot move out of captured variable in an `Fn` closure\n \n-error: aborting due to previous error\n+error[E0507]: cannot move out of `i`, as it is a captured variable in a `Fn` closure\n+  --> $DIR/moves-based-on-type-move-out-of-closure-env-issue-1965.rs:21:28\n+   |\n+LL |     let _f = to_fn(|| test(i)); //~ ERROR cannot move out\n+   |                            ^\n+   |                            |\n+   |                            cannot move out of `i`, as it is a captured variable in a `Fn` closure\n+   |                            cannot move\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/moves-based-on-type-move-out-of-closure-env-issue-1965.rs:21:20\n+   |\n+LL |     let _f = to_fn(|| test(i)); //~ ERROR cannot move out\n+   |                    ^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "2d54ae0b81ec820c054aca57ec17a481432a9cea", "filename": "src/test/ui/nll/cannot-move-block-spans.nll.stderr", "status": "modified", "additions": 71, "deletions": 1, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fcannot-move-block-spans.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -7,6 +7,17 @@ LL |     let x = { *r }; //~ ERROR\n    |               cannot move out of borrowed content\n    |               help: consider removing the `*`: `r`\n \n+error[E0507]: cannot move out of `*r` which is behind a `&` reference\n+  --> $DIR/cannot-move-block-spans.rs:15:15\n+   |\n+LL | pub fn deref(r: &String) {\n+   |                 ------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n+LL |     let x = { *r }; //~ ERROR\n+   |               ^^\n+   |               |\n+   |               cannot move out of `*r` which is behind a `&` reference\n+   |               `r` is a `&` reference, so the data it refers to cannot be moved\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:16:22\n    |\n@@ -16,6 +27,18 @@ LL |     let y = unsafe { *r }; //~ ERROR\n    |                      cannot move out of borrowed content\n    |                      help: consider removing the `*`: `r`\n \n+error[E0507]: cannot move out of `*r` which is behind a `&` reference\n+  --> $DIR/cannot-move-block-spans.rs:16:22\n+   |\n+LL | pub fn deref(r: &String) {\n+   |                 ------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n+LL |     let x = { *r }; //~ ERROR\n+LL |     let y = unsafe { *r }; //~ ERROR\n+   |                      ^^\n+   |                      |\n+   |                      cannot move out of `*r` which is behind a `&` reference\n+   |                      `r` is a `&` reference, so the data it refers to cannot be moved\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:17:26\n    |\n@@ -25,6 +48,18 @@ LL |     let z = loop { break *r; }; //~ ERROR\n    |                          cannot move out of borrowed content\n    |                          help: consider removing the `*`: `r`\n \n+error[E0507]: cannot move out of `*r` which is behind a `&` reference\n+  --> $DIR/cannot-move-block-spans.rs:17:26\n+   |\n+LL | pub fn deref(r: &String) {\n+   |                 ------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n+...\n+LL |     let z = loop { break *r; }; //~ ERROR\n+   |                          ^^\n+   |                          |\n+   |                          cannot move out of `*r` which is behind a `&` reference\n+   |                          `r` is a `&` reference, so the data it refers to cannot be moved\n+\n error[E0508]: cannot move out of type `[std::string::String; 2]`, a non-copy array\n   --> $DIR/cannot-move-block-spans.rs:21:15\n    |\n@@ -61,6 +96,17 @@ LL |     let x = { let mut u = 0; u += 1; *r }; //~ ERROR\n    |                                      cannot move out of borrowed content\n    |                                      help: consider removing the `*`: `r`\n \n+error[E0507]: cannot move out of `*r` which is behind a `&` reference\n+  --> $DIR/cannot-move-block-spans.rs:27:38\n+   |\n+LL | pub fn additional_statement_cases(r: &String) {\n+   |                                      ------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n+LL |     let x = { let mut u = 0; u += 1; *r }; //~ ERROR\n+   |                                      ^^\n+   |                                      |\n+   |                                      cannot move out of `*r` which is behind a `&` reference\n+   |                                      `r` is a `&` reference, so the data it refers to cannot be moved\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:28:45\n    |\n@@ -70,6 +116,18 @@ LL |     let y = unsafe { let mut u = 0; u += 1; *r }; //~ ERROR\n    |                                             cannot move out of borrowed content\n    |                                             help: consider removing the `*`: `r`\n \n+error[E0507]: cannot move out of `*r` which is behind a `&` reference\n+  --> $DIR/cannot-move-block-spans.rs:28:45\n+   |\n+LL | pub fn additional_statement_cases(r: &String) {\n+   |                                      ------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n+LL |     let x = { let mut u = 0; u += 1; *r }; //~ ERROR\n+LL |     let y = unsafe { let mut u = 0; u += 1; *r }; //~ ERROR\n+   |                                             ^^\n+   |                                             |\n+   |                                             cannot move out of `*r` which is behind a `&` reference\n+   |                                             `r` is a `&` reference, so the data it refers to cannot be moved\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/cannot-move-block-spans.rs:29:49\n    |\n@@ -79,7 +137,19 @@ LL |     let z = loop { let mut u = 0; u += 1; break *r; u += 2; }; //~ ERROR\n    |                                                 cannot move out of borrowed content\n    |                                                 help: consider removing the `*`: `r`\n \n-error: aborting due to 9 previous errors\n+error[E0507]: cannot move out of `*r` which is behind a `&` reference\n+  --> $DIR/cannot-move-block-spans.rs:29:49\n+   |\n+LL | pub fn additional_statement_cases(r: &String) {\n+   |                                      ------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n+...\n+LL |     let z = loop { let mut u = 0; u += 1; break *r; u += 2; }; //~ ERROR\n+   |                                                 ^^\n+   |                                                 |\n+   |                                                 cannot move out of `*r` which is behind a `&` reference\n+   |                                                 `r` is a `&` reference, so the data it refers to cannot be moved\n+\n+error: aborting due to 15 previous errors\n \n Some errors occurred: E0507, E0508.\n For more information about an error, try `rustc --explain E0507`."}, {"sha": "4fe01d472f50edac8829c1d09a3e89ca5b654258", "filename": "src/test/ui/nll/match-guards-always-borrow.ast.nll.stderr", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.ast.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.ast.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-always-borrow.ast.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -1,8 +1,36 @@\n-error[E0507]: cannot move out of borrowed content\n+warning[E0507]: cannot move out of borrowed content\n   --> $DIR/match-guards-always-borrow.rs:23:13\n    |\n LL |             (|| { let bar = foo; bar.take() })();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot move out of borrowed content\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n+\n+warning[E0507]: cannot move out of `foo`, as it is immutable for the pattern guard\n+  --> $DIR/match-guards-always-borrow.rs:23:13\n+   |\n+LL |             (|| { let bar = foo; bar.take() })();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |             |\n+   |             cannot move out of `foo`, as it is immutable for the pattern guard\n+   |             cannot move\n+   |\n+   = note: variables bound in patterns are immutable until the end of the pattern guard\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n+\n+error: compilation successful\n+  --> $DIR/match-guards-always-borrow.rs:57:1\n+   |\n+LL | / fn main() { //[ast]~ ERROR compilation successful\n+LL | |     should_reject_destructive_mutate_in_guard();\n+LL | |     allow_mutate_in_arm_body();\n+LL | |     allow_move_into_arm_body();\n+LL | | }\n+   | |_^\n \n error: aborting due to previous error\n "}, {"sha": "1e953ecff692301d5a7a8634b5e07f119549933b", "filename": "src/test/ui/nll/ty-outlives/projection-where-clause-env-wrong-lifetime.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-where-clause-env-wrong-lifetime.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error[E0309]: the associated type `<T as MyTrait<'_>>::Output` may not live long enough\n-  --> $DIR/projection-where-clause-env-wrong-lifetime.rs:14:5\n-   |\n-LL |     bar::<<T as MyTrait<'a>>::Output>()\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `<T as MyTrait<'_>>::Output: 'a`...\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0309`."}, {"sha": "e132ec67b9632d4acfe3b868d01d18c911e4b93a", "filename": "src/test/ui/object-lifetime/object-lifetime-default-elision.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-elision.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/object-lifetime-default-elision.rs:81:5\n-   |\n-LL | fn load3<'a,'b>(ss: &'a SomeTrait) -> &'b SomeTrait {\n-   |          -- -- lifetime `'b` defined here\n-   |          |\n-   |          lifetime `'a` defined here\n-...\n-LL |     ss\n-   |     ^^ returning this value requires that `'a` must outlive `'b`\n-\n-error: aborting due to previous error\n-"}, {"sha": "e0c291928283ce3fc9468acce53f5afc37000372", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-box-error.nll.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-box-error.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,28 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `ss`\n-  --> $DIR/object-lifetime-default-from-box-error.rs:28:5\n-   |\n-LL | fn load(ss: &mut SomeStruct) -> Box<SomeTrait> {\n-   |             --------------- help: add explicit lifetime `'static` to the type of `ss`: `&mut SomeStruct<'static>`\n-...\n-LL |     ss.r //~ ERROR explicit lifetime required in the type of `ss` [E0621]\n-   |     ^^^^ lifetime `'static` required\n-\n-error[E0507]: cannot move out of borrowed content\n-  --> $DIR/object-lifetime-default-from-box-error.rs:28:5\n-   |\n-LL |     ss.r //~ ERROR explicit lifetime required in the type of `ss` [E0621]\n-   |     ^^^^ cannot move out of borrowed content\n-\n-error[E0621]: explicit lifetime required in the type of `ss`\n-  --> $DIR/object-lifetime-default-from-box-error.rs:41:5\n-   |\n-LL | fn store1<'b>(ss: &mut SomeStruct, b: Box<SomeTrait+'b>) {\n-   |                   --------------- help: add explicit lifetime `'b` to the type of `ss`: `&mut SomeStruct<'b>`\n-...\n-LL |     ss.r = b; //~ ERROR 41:12: 41:13: explicit lifetime required in the type of `ss` [E0621]\n-   |     ^^^^ lifetime `'b` required\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0507, E0621.\n-For more information about an error, try `rustc --explain E0507`."}, {"sha": "a6bfcf1d3699a417c26d4487a5b6ad491b14b5f4", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-box-error.nll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-box-error.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,10 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/object-lifetime-default-from-rptr-box-error.rs:25:5\n-   |\n-LL | fn c<'a>(t: &'a Box<Test+'a>, mut ss: SomeStruct<'a>) {\n-   |      -- lifetime `'a` defined here\n-LL |     ss.t = t; //~ ERROR mismatched types\n-   |     ^^^^^^^^ assignment requires that `'a` must outlive `'static`\n-\n-error: aborting due to previous error\n-"}, {"sha": "396ff1302b1513a7bd72016b0c01b24fd52a2b4a", "filename": "src/test/ui/object-lifetime/object-lifetime-default-from-rptr-struct-error.nll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-from-rptr-struct-error.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,10 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/object-lifetime-default-from-rptr-struct-error.rs:31:5\n-   |\n-LL | fn c<'a>(t: &'a MyBox<Test+'a>, mut ss: SomeStruct<'a>) {\n-   |      -- lifetime `'a` defined here\n-LL |     ss.t = t; //~ ERROR mismatched types\n-   |     ^^^^^^^^ assignment requires that `'a` must outlive `'static`\n-\n-error: aborting due to previous error\n-"}, {"sha": "41988b31e9745bd37157ac3a602222af284641a4", "filename": "src/test/ui/object-lifetime/object-lifetime-default-mybox.nll.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-lifetime%2Fobject-lifetime-default-mybox.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,21 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/object-lifetime-default-mybox.rs:37:5\n-   |\n-LL | fn load1<'a,'b>(a: &'a MyBox<SomeTrait>,\n-   |          -- -- lifetime `'b` defined here\n-   |          |\n-   |          lifetime `'a` defined here\n-...\n-LL |     a //~ ERROR lifetime mismatch\n-   |     ^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-\n-error: borrowed data escapes outside of function\n-  --> $DIR/object-lifetime-default-mybox.rs:41:5\n-   |\n-LL | fn load2<'a>(ss: &MyBox<SomeTrait+'a>) -> MyBox<SomeTrait+'a> {\n-   |              -- `ss` is a reference that is only valid in the function body\n-LL |     load0(ss) //~ ERROR mismatched types\n-   |     ^^^^^^^^^ `ss` escapes the function body here\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "c9714de1f097509e9038f1797b037d14b7e78072", "filename": "src/test/ui/regions/region-invariant-static-error-reporting.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-invariant-static-error-reporting.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error: borrowed data escapes outside of function\n-  --> $DIR/region-invariant-static-error-reporting.rs:25:9\n-   |\n-LL | fn unify<'a>(x: Option<Invariant<'a>>, f: fn(Invariant<'a>)) {\n-   |              - `x` is a reference that is only valid in the function body\n-LL |     let bad = if x.is_some() {\n-LL |         x.unwrap()\n-   |         ^^^^^^^^^^ `x` escapes the function body here\n-\n-error: aborting due to previous error\n-"}, {"sha": "01bc022acb1cb24b6a05aa5af2a5c871ca80ce75", "filename": "src/test/ui/regions/region-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/region-lifetime-bounds-on-fns-where-clause.rs:30:43\n-   |\n-LL |     let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR mismatched types\n-   |                                           ^ expected concrete lifetime, found bound lifetime parameter\n-   |\n-   = note: expected type `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "44f8f9e46f3fe39651669104afcd27b8bcd72678", "filename": "src/test/ui/regions/region-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/region-multiple-lifetime-bounds-on-fns-where-clause.rs:32:56\n-   |\n-LL |     let _: fn(&mut &isize, &mut &isize, &mut &isize) = a; //~ ERROR mismatched types\n-   |                                                        ^ expected concrete lifetime, found bound lifetime parameter\n-   |\n-   = note: expected type `for<'r, 's, 't0, 't1, 't2, 't3> fn(&'r mut &'s isize, &'t0 mut &'t1 isize, &'t2 mut &'t3 isize)`\n-              found type `for<'r, 's, 't0> fn(&'r mut &isize, &'s mut &isize, &'t0 mut &isize) {a::<'_, '_, '_>}`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "4e1b8b7e1a076d2650f23d2f0ad1200cb86d3c68", "filename": "src/test/ui/regions/region-object-lifetime-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-2.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/region-object-lifetime-2.rs:20:5\n-   |\n-LL | fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a Foo) -> &'b () {\n-   |                                          -- -- lifetime `'b` defined here\n-   |                                          |\n-   |                                          lifetime `'a` defined here\n-LL |     x.borrowed() //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n-\n-error: aborting due to previous error\n-"}, {"sha": "5f1f70dfe1935b1cd63295b22aac1f304a4e0e80", "filename": "src/test/ui/regions/region-object-lifetime-4.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-4.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/region-object-lifetime-4.rs:22:5\n-   |\n-LL | fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a (Foo+'b)) -> &'b () {\n-   |                                         -- -- lifetime `'b` defined here\n-   |                                         |\n-   |                                         lifetime `'a` defined here\n-LL |     x.borrowed() //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^ argument requires that `'a` must outlive `'b`\n-\n-error: aborting due to previous error\n-"}, {"sha": "8fd195639fec3b449b9a54995b0a23007202003e", "filename": "src/test/ui/regions/region-object-lifetime-in-coercion.nll.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregion-object-lifetime-in-coercion.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,38 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:18:12\n-   |\n-LL | fn a(v: &[u8]) -> Box<Foo + 'static> {\n-   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n-LL |     let x: Box<Foo + 'static> = Box::new(v);\n-   |            ^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n-\n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:24:5\n-   |\n-LL | fn b(v: &[u8]) -> Box<Foo + 'static> {\n-   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n-LL |     Box::new(v)\n-   |     ^^^^^^^^^^^ lifetime `'static` required\n-\n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/region-object-lifetime-in-coercion.rs:31:5\n-   |\n-LL | fn c(v: &[u8]) -> Box<Foo> {\n-   |         ----- help: add explicit lifetime `'static` to the type of `v`: `&'static [u8]`\n-...\n-LL |     Box::new(v)\n-   |     ^^^^^^^^^^^ lifetime `'static` required\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/region-object-lifetime-in-coercion.rs:36:5\n-   |\n-LL | fn d<'a,'b>(v: &'a [u8]) -> Box<Foo+'b> {\n-   |      -- -- lifetime `'b` defined here\n-   |      |\n-   |      lifetime `'a` defined here\n-LL |     Box::new(v)\n-   |     ^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "1454c856f978586bf0f6ed076d224da72cad2bc8", "filename": "src/test/ui/regions/regions-addr-of-self.nll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-self.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,10 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-self.rs:17:16\n-   |\n-LL |     pub fn chase_cat(&mut self) {\n-   |                      - let's call the lifetime of this reference `'1`\n-LL |         let p: &'static mut usize = &mut self.cats_chased; //~ ERROR cannot infer\n-   |                ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n-\n-error: aborting due to previous error\n-"}, {"sha": "0e48192eaffc82d315766dfa18cfb046c632f7b3", "filename": "src/test/ui/regions/regions-addr-of-upvar-self.nll.stderr", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-addr-of-upvar-self.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,47 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-upvar-self.rs:20:20\n-   |\n-LL |         let _f = || {\n-   |                  -- lifetime `'1` represents this closure's body\n-LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-   |                    ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n-   |\n-   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-upvar-self.rs:20:20\n-   |\n-LL |     pub fn chase_cat(&mut self) {\n-   |                      --------- lifetime `'2` appears in the type of `self`\n-LL |         let _f = || {\n-   |                  -- lifetime `'1` represents this closure's body\n-LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-   |                    ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'2`\n-   |\n-   = note: closure implements `FnMut`, so references to captured variables can't escape the closure\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-addr-of-upvar-self.rs:20:20\n-   |\n-LL |     pub fn chase_cat(&mut self) {\n-   |                      - let's call the lifetime of this reference `'1`\n-LL |         let _f = || {\n-LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-   |                    ^^^^^^^^^^^^^^^^^^ type annotation requires that `'1` must outlive `'static`\n-\n-error[E0597]: `self` does not live long enough\n-  --> $DIR/regions-addr-of-upvar-self.rs:20:46\n-   |\n-LL |         let _f = || {\n-   |                  -- value captured here\n-LL |             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-   |                                              ^^^^ borrowed value does not live long enough\n-...\n-LL |     }\n-   |      - `self` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "f711541fbd5c2f6a466c229b3b5802229d0c010c", "filename": "src/test/ui/regions/regions-assoc-type-in-supertrait-outlives-container.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-assoc-type-in-supertrait-outlives-container.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-assoc-type-in-supertrait-outlives-container.rs:52:13\n-   |\n-LL | fn with_assoc<'a,'b>() {\n-   |               -- -- lifetime `'b` defined here\n-   |               |\n-   |               lifetime `'a` defined here\n-...\n-LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-\n-error: aborting due to previous error\n-"}, {"sha": "654b2b91583a84337a58a29008c8d974915fd3a9", "filename": "src/test/ui/regions/regions-bounded-by-trait-requiring-static.nll.stderr", "status": "removed", "additions": 0, "deletions": 50, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-by-trait-requiring-static.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,50 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:32:5\n-   |\n-LL | fn param_not_ok<'a>(x: &'a isize) {\n-   |                 -- lifetime `'a` defined here\n-LL |     assert_send::<&'a isize>(); //~ ERROR does not fulfill the required lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:36:5\n-   |\n-LL | fn param_not_ok1<'a>(_: &'a isize) {\n-   |                  -- lifetime `'a` defined here\n-LL |     assert_send::<&'a str>(); //~ ERROR does not fulfill the required lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:40:5\n-   |\n-LL | fn param_not_ok2<'a>(_: &'a isize) {\n-   |                  -- lifetime `'a` defined here\n-LL |     assert_send::<&'a [isize]>(); //~ ERROR does not fulfill the required lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:54:5\n-   |\n-LL | fn box_with_region_not_ok<'a>() {\n-   |                           -- lifetime `'a` defined here\n-LL |     assert_send::<Box<&'a isize>>(); //~ ERROR does not fulfill the required lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:65:5\n-   |\n-LL | fn unsafe_ok2<'a>(_: &'a isize) {\n-   |               -- lifetime `'a` defined here\n-LL |     assert_send::<*const &'a isize>(); //~ ERROR does not fulfill the required lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-bounded-by-trait-requiring-static.rs:69:5\n-   |\n-LL | fn unsafe_ok3<'a>(_: &'a isize) {\n-   |               -- lifetime `'a` defined here\n-LL |     assert_send::<*mut &'a isize>(); //~ ERROR does not fulfill the required lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-\n-error: aborting due to 6 previous errors\n-"}, {"sha": "a292bacc674bf5e1a70279741d84255a4f9bec54", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-cross-crate.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-cross-crate.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-bounded-method-type-parameters-cross-crate.rs:30:5\n-   |\n-LL | fn call_bigger_region<'x, 'y>(a: Inv<'x>, b: Inv<'y>) {\n-   |                       --  -- lifetime `'y` defined here\n-   |                       |\n-   |                       lifetime `'x` defined here\n-LL |     // Here the value provided for 'y is 'y, and hence 'y:'x does not hold.\n-LL |     a.bigger_region(b) //~ ERROR 30:7: 30:20: lifetime mismatch [E0623]\n-   |     ^^^^^^^^^^^^^^^^^^ argument requires that `'y` must outlive `'x`\n-\n-error: aborting due to previous error\n-"}, {"sha": "99c31783acdcc405a8f901528c4f7d479b81cb4f", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters-trait-bound.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters-trait-bound.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: borrowed data escapes outside of function\n-  --> $DIR/regions-bounded-method-type-parameters-trait-bound.rs:30:5\n-   |\n-LL | fn caller2<'a,'b,F:Foo<'a>>(a: Inv<'a>, b: Inv<'b>, f: F) {\n-   |                             -           - `b` is a reference that is only valid in the function body\n-   |                             |\n-   |                             `a` is declared here, outside of the function body\n-LL |     // Here the value provided for 'y is 'b, and hence 'b:'a does not hold.\n-LL |     f.method(b); //~ ERROR 30:7: 30:13: lifetime mismatch [E0623]\n-   |     ^^^^^^^^^^^ `b` escapes the function body here\n-\n-error: aborting due to previous error\n-"}, {"sha": "91e0f7f73ee3d2fef5f5ca847b67c184f68baedb", "filename": "src/test/ui/regions/regions-bounded-method-type-parameters.nll.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounded-method-type-parameters.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,19 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/regions-bounded-method-type-parameters.rs:22:5\n-   |\n-LL | fn caller<'a>(x: &isize) {\n-   |                  ------ help: add explicit lifetime `'a` to the type of `x`: `&'a isize`\n-LL |     Foo.some_method::<&'a isize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-bounded-method-type-parameters.rs:22:5\n-   |\n-LL | fn caller<'a>(x: &isize) {\n-   |           -- lifetime `'a` defined here\n-LL |     Foo.some_method::<&'a isize>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'a` must outlive `'static`\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "e50e806da12a30b361e7465f8b4baccceeadf7e0", "filename": "src/test/ui/regions/regions-bounds.nll.stderr", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-bounds.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,22 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-bounds.rs:19:12\n-   |\n-LL | fn a_fn1<'a,'b>(e: an_enum<'a>) -> an_enum<'b> {\n-   |          -- -- lifetime `'b` defined here\n-   |          |\n-   |          lifetime `'a` defined here\n-LL |     return e; //~ ERROR mismatched types\n-   |            ^ returning this value requires that `'a` must outlive `'b`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-bounds.rs:23:12\n-   |\n-LL | fn a_fn3<'a,'b>(e: a_class<'a>) -> a_class<'b> {\n-   |          -- -- lifetime `'b` defined here\n-   |          |\n-   |          lifetime `'a` defined here\n-LL |     return e; //~ ERROR mismatched types\n-   |            ^ returning this value requires that `'a` must outlive `'b`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "90d38a49c4a8259f0ff407abee329bf8812c5532", "filename": "src/test/ui/regions/regions-close-associated-type-into-object.nll.stderr", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-associated-type-into-object.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,36 +0,0 @@\n-error[E0310]: the associated type `<T as Iter>::Item` may not live long enough\n-  --> $DIR/regions-close-associated-type-into-object.rs:25:5\n-   |\n-LL |     Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n-   |     ^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'static`...\n-\n-error[E0310]: the associated type `<T as Iter>::Item` may not live long enough\n-  --> $DIR/regions-close-associated-type-into-object.rs:32:5\n-   |\n-LL |     Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n-   |     ^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'static`...\n-\n-error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n-  --> $DIR/regions-close-associated-type-into-object.rs:38:5\n-   |\n-LL |     Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n-   |     ^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'a`...\n-\n-error[E0309]: the associated type `<T as Iter>::Item` may not live long enough\n-  --> $DIR/regions-close-associated-type-into-object.rs:45:5\n-   |\n-LL |     Box::new(item) //~ ERROR associated type `<T as Iter>::Item` may not live long enough\n-   |     ^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `<T as Iter>::Item: 'a`...\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors occurred: E0309, E0310.\n-For more information about an error, try `rustc --explain E0309`."}, {"sha": "c073e3728e70571c7febf98ccfdf2e5160a6a311", "filename": "src/test/ui/regions/regions-close-object-into-object-2.nll.stderr", "status": "removed", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-2.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,21 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-close-object-into-object-2.rs:20:5\n-   |\n-LL | fn g<'a, T: 'static>(v: Box<A<T>+'a>) -> Box<X+'static> {\n-   |      -- lifetime `'a` defined here\n-LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-\n-error[E0597]: `*v` does not live long enough\n-  --> $DIR/regions-close-object-into-object-2.rs:20:11\n-   |\n-LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n-   |           ^^^ borrowed value does not live long enough\n-LL | }\n-   | - `*v` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "4b47b951d77173fcaba3511fd4e900fb0a38fb40", "filename": "src/test/ui/regions/regions-close-object-into-object-4.nll.stderr", "status": "removed", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-4.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,38 +0,0 @@\n-error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/regions-close-object-into-object-4.rs:20:5\n-   |\n-LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n-   |     ^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-close-object-into-object-4.rs:20:5\n-   |\n-LL | fn i<'a, T, U>(v: Box<A<U>+'a>) -> Box<X+'static> {\n-   |      -- lifetime `'a` defined here\n-LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'static`\n-\n-error[E0310]: the parameter type `U` may not live long enough\n-  --> $DIR/regions-close-object-into-object-4.rs:20:9\n-   |\n-LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n-   |         ^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `U: 'static`...\n-\n-error[E0597]: `*v` does not live long enough\n-  --> $DIR/regions-close-object-into-object-4.rs:20:11\n-   |\n-LL |     box B(&*v) as Box<X> //~ ERROR cannot infer\n-   |           ^^^ borrowed value does not live long enough\n-LL | }\n-   | - `*v` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors occurred: E0310, E0597.\n-For more information about an error, try `rustc --explain E0310`."}, {"sha": "8ef80fd775bfa765178e00ad0e4e48c107c31bc7", "filename": "src/test/ui/regions/regions-close-object-into-object-5.nll.stderr", "status": "removed", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-object-into-object-5.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,31 +0,0 @@\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:27:5\n-   |\n-LL |     box B(&*v) as Box<X>\n-   |     ^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:27:9\n-   |\n-LL |     box B(&*v) as Box<X>\n-   |         ^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-\n-error[E0597]: `*v` does not live long enough\n-  --> $DIR/regions-close-object-into-object-5.rs:27:11\n-   |\n-LL |     box B(&*v) as Box<X>\n-   |           ^^^ borrowed value does not live long enough\n-...\n-LL | }\n-   | - `*v` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors occurred: E0310, E0597.\n-For more information about an error, try `rustc --explain E0310`."}, {"sha": "6b8406cdb6e5e68831052f8976f8292f6ab77b89", "filename": "src/test/ui/regions/regions-close-over-type-parameter-1.nll.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-1.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,20 +0,0 @@\n-error[E0310]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-close-over-type-parameter-1.rs:20:5\n-   |\n-LL |     box v as Box<SomeTrait+'static>\n-   |     ^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'static`...\n-\n-error[E0309]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-close-over-type-parameter-1.rs:30:5\n-   |\n-LL |     box v as Box<SomeTrait+'b>\n-   |     ^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'b`...\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors occurred: E0309, E0310.\n-For more information about an error, try `rustc --explain E0309`."}, {"sha": "017e912688849f6ee8f9df8ed2eab4d974914bc6", "filename": "src/test/ui/regions/regions-close-over-type-parameter-multiple.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-over-type-parameter-multiple.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error[E0309]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-close-over-type-parameter-multiple.rs:30:5\n-   |\n-LL |     box v as Box<SomeTrait+'a> //~ ERROR cannot infer an appropriate lifetime\n-   |     ^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'c`...\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0309`."}, {"sha": "c1c7e1b71c98681526befc367b067417d75a05e3", "filename": "src/test/ui/regions/regions-close-param-into-object.nll.stderr", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-close-param-into-object.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,36 +0,0 @@\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-param-into-object.rs:16:5\n-   |\n-LL |     Box::new(v) //~ ERROR parameter type `T` may not live long enough\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-\n-error[E0310]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-param-into-object.rs:22:5\n-   |\n-LL |     Box::new(v) //~ ERROR parameter type `T` may not live long enough\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'static`...\n-\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-param-into-object.rs:28:5\n-   |\n-LL |     Box::new(v) //~ ERROR parameter type `T` may not live long enough\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n-\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-close-param-into-object.rs:34:5\n-   |\n-LL |     Box::new(v) //~ ERROR parameter type `T` may not live long enough\n-   |     ^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'a`...\n-\n-error: aborting due to 4 previous errors\n-\n-Some errors occurred: E0309, E0310.\n-For more information about an error, try `rustc --explain E0309`."}, {"sha": "aeb4fc67f55ed4b19276b3c4f75b99d3ec9466b9", "filename": "src/test/ui/regions/regions-creating-enums3.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums3.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-creating-enums3.rs:17:5\n-   |\n-LL | fn mk_add_bad1<'a,'b>(x: &'a ast<'a>, y: &'b ast<'b>) -> ast<'a> {\n-   |                -- -- lifetime `'b` defined here\n-   |                |\n-   |                lifetime `'a` defined here\n-LL |     ast::add(x, y) //~ ERROR 17:5: 17:19: lifetime mismatch [E0623]\n-   |     ^^^^^^^^^^^^^^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n-\n-error: aborting due to previous error\n-"}, {"sha": "9c68c9bca49f28a7f2ee7045da9dfdab530bc417", "filename": "src/test/ui/regions/regions-creating-enums4.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-creating-enums4.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-creating-enums4.rs:17:5\n-   |\n-LL | fn mk_add_bad2<'a,'b>(x: &'a ast<'a>, y: &'a ast<'a>, z: &ast) -> ast<'b> {\n-   |                -- -- lifetime `'b` defined here\n-   |                |\n-   |                lifetime `'a` defined here\n-LL |     ast::add(x, y) //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^^^ returning this value requires that `'a` must outlive `'b`\n-\n-error: aborting due to previous error\n-"}, {"sha": "e6c60b301a041667b3cbe542dc36dbe87a18ac6a", "filename": "src/test/ui/regions/regions-early-bound-error-method.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error-method.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-early-bound-error-method.rs:30:9\n-   |\n-LL | impl<'a> Box<'a> {\n-   |      -- lifetime `'a` defined here\n-LL |     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n-   |           -- lifetime `'b` defined here\n-LL |         g2.get()\n-   |         ^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n-\n-error: aborting due to previous error\n-"}, {"sha": "3c95e977fb366512e438ca71046981b5519a9342", "filename": "src/test/ui/regions/regions-early-bound-error.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-early-bound-error.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-early-bound-error.rs:29:5\n-   |\n-LL | fn get<'a,'b,G:GetRef<'a, isize>>(g1: G, b: &'b isize) -> &'b isize {\n-   |        -- -- lifetime `'b` defined here\n-   |        |\n-   |        lifetime `'a` defined here\n-LL |     g1.get()\n-   |     ^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-\n-error: aborting due to previous error\n-"}, {"sha": "ffcd1b6bd7b33beb87f17a76543ab61811dff981", "filename": "src/test/ui/regions/regions-escape-method.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-method.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-escape-method.rs:25:13\n-   |\n-LL |     s.f(|p| p) //~ ERROR cannot infer\n-   |          -- ^ returning this value requires that `'1` must outlive `'2`\n-   |          ||\n-   |          |return type of closure is &'2 i32\n-   |          has type `&'1 i32`\n-\n-error: aborting due to previous error\n-"}, {"sha": "36a79d52fd0022218b8eb2ad04447c14e9a20593", "filename": "src/test/ui/regions/regions-escape-via-trait-or-not.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-escape-via-trait-or-not.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-escape-via-trait-or-not.rs:28:14\n-   |\n-LL |     with(|o| o) //~ ERROR cannot infer\n-   |           -- ^ returning this value requires that `'1` must outlive `'2`\n-   |           ||\n-   |           |return type of closure is &'2 isize\n-   |           has type `&'1 isize`\n-\n-error: aborting due to previous error\n-"}, {"sha": "d0606295713193816dd2a684968e5bafb4fb554a", "filename": "src/test/ui/regions/regions-free-region-ordering-callee.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-callee.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-free-region-ordering-callee.rs:23:5\n-   |\n-LL | fn ordering2<'a, 'b>(x: &'a &'b usize, y: &'a usize) -> &'b usize {\n-   |              --  -- lifetime `'b` defined here\n-   |              |\n-   |              lifetime `'a` defined here\n-LL |     // However, it is not safe to assume that 'b <= 'a\n-LL |     &*y //~ ERROR 23:5: 23:8: lifetime mismatch [E0623]\n-   |     ^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-free-region-ordering-callee.rs:28:24\n-   |\n-LL | fn ordering3<'a, 'b>(x: &'a usize, y: &'b usize) -> &'a &'b usize {\n-   |              --  -- lifetime `'b` defined here\n-   |              |\n-   |              lifetime `'a` defined here\n-LL |     // Do not infer an ordering from the return value.\n-LL |     let z: &'b usize = &*x;\n-   |                        ^^^ assignment requires that `'a` must outlive `'b`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "8d4f3d1e87fba8dd7a3a186363707c8346d03409", "filename": "src/test/ui/regions/regions-free-region-ordering-caller.nll.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,33 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-free-region-ordering-caller.rs:18:12\n-   |\n-LL | fn call2<'a, 'b>(a: &'a usize, b: &'b usize) {\n-   |          --  -- lifetime `'b` defined here\n-   |          |\n-   |          lifetime `'a` defined here\n-LL |     let z: Option<&'b &'a usize> = None;//~ ERROR E0623\n-   |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-free-region-ordering-caller.rs:23:12\n-   |\n-LL | fn call3<'a, 'b>(a: &'a usize, b: &'b usize) {\n-   |          --  -- lifetime `'b` defined here\n-   |          |\n-   |          lifetime `'a` defined here\n-LL |     let y: Paramd<'a> = Paramd { x: a };\n-LL |     let z: Option<&'b Paramd<'a>> = None;//~ ERROR E0623\n-   |            ^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'a` must outlive `'b`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-free-region-ordering-caller.rs:27:12\n-   |\n-LL | fn call4<'a, 'b>(a: &'a usize, b: &'b usize) {\n-   |          --  -- lifetime `'b` defined here\n-   |          |\n-   |          lifetime `'a` defined here\n-LL |     let z: Option<&'a &'b usize> = None;//~ ERROR E0623\n-   |            ^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "10259ccf270e8b496e9cfd1bd13a3a0863763c23", "filename": "src/test/ui/regions/regions-free-region-ordering-incorrect.nll.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-incorrect.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,15 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-free-region-ordering-incorrect.rs:25:5\n-   |\n-LL |   impl<'b, T> Node<'b, T> {\n-   |        -- lifetime `'b` defined here\n-LL |     fn get<'a>(&'a self) -> &'b T {\n-   |            -- lifetime `'a` defined here\n-LL | /     match self.next {\n-LL | |       Some(ref next) => next.get(),\n-LL | |       None => &self.val //~ ERROR cannot infer\n-LL | |     }\n-   | |_____^ returning this value requires that `'a` must outlive `'b`\n-\n-error: aborting due to previous error\n-"}, {"sha": "2eb4ccf1c35f356e5b33c2674831956052ddae8d", "filename": "src/test/ui/regions/regions-implied-bounds-projection-gap-1.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-implied-bounds-projection-gap-1.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/regions-implied-bounds-projection-gap-1.rs:26:5\n-   |\n-LL |     wf::<&'x T>();\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `T: 'x`...\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0309`."}, {"sha": "9fc58273c941ea05062d3296f6af3b5754e933a3", "filename": "src/test/ui/regions/regions-infer-bound-from-trait-self.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait-self.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error[E0309]: the parameter type `Self` may not live long enough\n-  --> $DIR/regions-infer-bound-from-trait-self.rs:56:9\n-   |\n-LL |         check_bound(x, self)\n-   |         ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `Self: 'a`...\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0309`."}, {"sha": "ace8f14c734a09605aac11d0987b7d0cda16501d", "filename": "src/test/ui/regions/regions-infer-bound-from-trait.nll.stderr", "status": "removed", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-bound-from-trait.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,19 +0,0 @@\n-error[E0309]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-infer-bound-from-trait.rs:43:5\n-   |\n-LL |     check_bound(x, a) //~ ERROR parameter type `A` may not live long enough\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'a`...\n-\n-error[E0309]: the parameter type `A` may not live long enough\n-  --> $DIR/regions-infer-bound-from-trait.rs:47:5\n-   |\n-LL |     check_bound(x, a) //~ ERROR parameter type `A` may not live long enough\n-   |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider adding an explicit lifetime bound `A: 'a`...\n-\n-error: aborting due to 2 previous errors\n-\n-For more information about this error, try `rustc --explain E0309`."}, {"sha": "30b892d3710f224f02a95fd34224eeff15d84177", "filename": "src/test/ui/regions/regions-infer-call-3.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-call-3.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-infer-call-3.rs:18:24\n-   |\n-LL |     let z = with(|y| { select(x, y) });\n-   |                   --   ^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'2`\n-   |                   ||\n-   |                   |return type of closure is &'2 isize\n-   |                   has type `&'1 isize`\n-\n-error: aborting due to previous error\n-"}, {"sha": "aba285d427b47a8f6f89623a938313a1bcd2c4bf", "filename": "src/test/ui/regions/regions-infer-contravariance-due-to-decl.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-contravariance-due-to-decl.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-infer-contravariance-due-to-decl.rs:35:12\n-   |\n-LL | fn use_<'short,'long>(c: Contravariant<'short>,\n-   |         ------ ----- lifetime `'long` defined here\n-   |         |\n-   |         lifetime `'short` defined here\n-...\n-LL |     let _: Contravariant<'long> = c; //~ ERROR E0623\n-   |            ^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n-\n-error: aborting due to previous error\n-"}, {"sha": "8bc6d565cf1b20c5ddb27a5d4e23eecc94bac000", "filename": "src/test/ui/regions/regions-infer-covariance-due-to-decl.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-covariance-due-to-decl.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-infer-covariance-due-to-decl.rs:32:12\n-   |\n-LL | fn use_<'short,'long>(c: Covariant<'long>,\n-   |         ------ ----- lifetime `'long` defined here\n-   |         |\n-   |         lifetime `'short` defined here\n-...\n-LL |     let _: Covariant<'short> = c; //~ ERROR E0623\n-   |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n-\n-error: aborting due to previous error\n-"}, {"sha": "23a719e5503a1fe1df9bf182e45382a0b9a8730a", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-decl.nll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-decl.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,10 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-infer-invariance-due-to-decl.rs:22:5\n-   |\n-LL | fn to_longer_lifetime<'r>(b_isize: invariant<'r>) -> invariant<'static> {\n-   |                       -- lifetime `'r` defined here\n-LL |     b_isize //~ ERROR mismatched types\n-   |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n-\n-error: aborting due to previous error\n-"}, {"sha": "ff0a6adec049da7d523116bf02ae45579c414be8", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-3.nll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-3.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,10 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-infer-invariance-due-to-mutability-3.rs:21:5\n-   |\n-LL | fn to_longer_lifetime<'r>(b_isize: invariant<'r>) -> invariant<'static> {\n-   |                       -- lifetime `'r` defined here\n-LL |     b_isize //~ ERROR mismatched types\n-   |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n-\n-error: aborting due to previous error\n-"}, {"sha": "c296397954a766437f352a9eb36910d50bf3af17", "filename": "src/test/ui/regions/regions-infer-invariance-due-to-mutability-4.nll.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-invariance-due-to-mutability-4.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,10 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-infer-invariance-due-to-mutability-4.rs:21:5\n-   |\n-LL | fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n-   |                       -- lifetime `'r` defined here\n-LL |     b_isize //~ ERROR mismatched types\n-   |     ^^^^^^^ returning this value requires that `'r` must outlive `'static`\n-\n-error: aborting due to previous error\n-"}, {"sha": "faeaa5eda02c6dc533c23d4cf1a0bc4f177080a0", "filename": "src/test/ui/regions/regions-infer-not-param.nll.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-not-param.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,26 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-infer-not-param.rs:25:54\n-   |\n-LL | fn take_direct<'a,'b>(p: direct<'a>) -> direct<'b> { p } //~ ERROR mismatched types\n-   |                -- -- lifetime `'b` defined here      ^ returning this value requires that `'a` must outlive `'b`\n-   |                |\n-   |                lifetime `'a` defined here\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-infer-not-param.rs:29:63\n-   |\n-LL | fn take_indirect2<'a,'b>(p: indirect2<'a>) -> indirect2<'b> { p } //~ ERROR mismatched types\n-   |                   -- -- lifetime `'b` defined here            ^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'b`\n-   |                   |\n-   |                   lifetime `'a` defined here\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-infer-not-param.rs:29:63\n-   |\n-LL | fn take_indirect2<'a,'b>(p: indirect2<'a>) -> indirect2<'b> { p } //~ ERROR mismatched types\n-   |                   -- -- lifetime `'b` defined here            ^ returning this value requires that `'a` must outlive `'b`\n-   |                   |\n-   |                   lifetime `'a` defined here\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "7558c5caa0e24b7a37269e151efbedec6620896f", "filename": "src/test/ui/regions/regions-infer-paramd-indirect.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-infer-paramd-indirect.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-infer-paramd-indirect.rs:33:9\n-   |\n-LL | impl<'a> set_f<'a> for c<'a> {\n-   |      -- lifetime `'a` defined here\n-...\n-LL |     fn set_f_bad(&mut self, b: Box<b>) {\n-   |                             - has type `std::boxed::Box<std::boxed::Box<&'1 isize>>`\n-LL |         self.f = b;\n-   |         ^^^^^^ assignment requires that `'1` must outlive `'a`\n-\n-error: aborting due to previous error\n-"}, {"sha": "d1d98a26a41fac246dc46f2e9d77b553f878913d", "filename": "src/test/ui/regions/regions-lifetime-bounds-on-fns.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-lifetime-bounds-on-fns.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error[E0308]: mismatched types\n-  --> $DIR/regions-lifetime-bounds-on-fns.rs:30:43\n-   |\n-LL |     let _: fn(&mut &isize, &mut &isize) = a; //~ ERROR mismatched types\n-   |                                           ^ expected concrete lifetime, found bound lifetime parameter\n-   |\n-   = note: expected type `for<'r, 's, 't0, 't1> fn(&'r mut &'s isize, &'t0 mut &'t1 isize)`\n-              found type `for<'r, 's> fn(&'r mut &isize, &'s mut &isize) {a::<'_, '_>}`\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0308`."}, {"sha": "cbc1e6b787db508acab16a4b60383571e19c076d", "filename": "src/test/ui/regions/regions-nested-fns.nll.stderr", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-nested-fns.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,49 +0,0 @@\n-error: borrowed data escapes outside of closure\n-  --> $DIR/regions-nested-fns.rs:20:9\n-   |\n-LL |     let mut ay = &y; //~ ERROR E0495\n-   |         ------ `ay` is declared here, outside of the closure body\n-LL | \n-LL |     ignore::<Box<for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n-   |                                                       - `z` is a reference that is only valid in the closure body\n-...\n-LL |         ay = z;\n-   |         ^^^^^^ `z` escapes the closure body here\n-\n-error[E0597]: `y` does not live long enough\n-  --> $DIR/regions-nested-fns.rs:15:18\n-   |\n-LL |     let mut ay = &y; //~ ERROR E0495\n-   |                  ^^ borrowed value does not live long enough\n-...\n-LL | }\n-   | - `y` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error[E0597]: `y` does not live long enough\n-  --> $DIR/regions-nested-fns.rs:19:15\n-   |\n-LL |     ignore::<Box<for<'z> FnMut(&'z isize)>>(Box::new(|z| {\n-   |                                                      --- value captured here\n-LL |         ay = x;\n-LL |         ay = &y;\n-   |               ^ borrowed value does not live long enough\n-...\n-LL | }\n-   | - `y` dropped here while still borrowed\n-   |\n-   = note: borrowed value must be valid for the static lifetime...\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-nested-fns.rs:24:27\n-   |\n-LL | fn nested<'x>(x: &'x isize) {\n-   |           -- lifetime `'x` defined here\n-...\n-LL |         if false { return x; } //~ ERROR E0312\n-   |                           ^ returning this value requires that `'x` must outlive `'static`\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0597`."}, {"sha": "6db1f6f4e78a4cf23aa011b4a0f9f0ab4622d3fc", "filename": "src/test/ui/regions/regions-outlives-projection-container-hrtb.nll.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-hrtb.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,9 +0,0 @@\n-error: compilation successful\n-  --> $DIR/regions-outlives-projection-container-hrtb.rs:68:1\n-   |\n-LL | / fn main() {\n-LL | | }\n-   | |_^\n-\n-error: aborting due to previous error\n-"}, {"sha": "836f8c28a737a81d54d10c84bf56624dcde6363e", "filename": "src/test/ui/regions/regions-outlives-projection-container-wc.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container-wc.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-outlives-projection-container-wc.rs:46:13\n-   |\n-LL | fn with_assoc<'a,'b>() {\n-   |               -- -- lifetime `'b` defined here\n-   |               |\n-   |               lifetime `'a` defined here\n-...\n-LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-\n-error: aborting due to previous error\n-"}, {"sha": "126f50577c84f9fe955f0b45e9c6401b86daa6e2", "filename": "src/test/ui/regions/regions-outlives-projection-container.nll.stderr", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-outlives-projection-container.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,46 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-outlives-projection-container.rs:50:13\n-   |\n-LL | fn with_assoc<'a,'b>() {\n-   |               -- -- lifetime `'b` defined here\n-   |               |\n-   |               lifetime `'a` defined here\n-...\n-LL |     let _x: &'a WithAssoc<TheType<'b>> = loop { };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-outlives-projection-container.rs:68:13\n-   |\n-LL | fn without_assoc<'a,'b>() {\n-   |                  -- -- lifetime `'b` defined here\n-   |                  |\n-   |                  lifetime `'a` defined here\n-...\n-LL |     let _x: &'a WithoutAssoc<TheType<'b>> = loop { };\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'a`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-outlives-projection-container.rs:77:5\n-   |\n-LL | fn call_with_assoc<'a,'b>() {\n-   |                    -- -- lifetime `'b` defined here\n-   |                    |\n-   |                    lifetime `'a` defined here\n-...\n-LL |     call::<&'a WithAssoc<TheType<'b>>>();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-outlives-projection-container.rs:84:5\n-   |\n-LL | fn call_without_assoc<'a,'b>() {\n-   |                       -- -- lifetime `'b` defined here\n-   |                       |\n-   |                       lifetime `'a` defined here\n-...\n-LL |     call::<&'a WithoutAssoc<TheType<'b>>>(); //~ ERROR reference has a longer lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "48cd2d5a60bc1de874b8f77e656ec6e32c65abd6", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref-mut-ref.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-reborrow-from-shorter-mut-ref-mut-ref.rs:14:5\n-   |\n-LL | fn copy_borrowed_ptr<'a, 'b, 'c>(p: &'a mut &'b mut &'c mut isize) -> &'b mut isize {\n-   |                      --  -- lifetime `'b` defined here\n-   |                      |\n-   |                      lifetime `'a` defined here\n-LL |     &mut ***p //~ ERROR 14:5: 14:14: lifetime mismatch [E0623]\n-   |     ^^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-\n-error: aborting due to previous error\n-"}, {"sha": "02c7ce33aabac5d8b3cc215891a45aafa21bb3b5", "filename": "src/test/ui/regions/regions-reborrow-from-shorter-mut-ref.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-reborrow-from-shorter-mut-ref.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-reborrow-from-shorter-mut-ref.rs:16:5\n-   |\n-LL | fn copy_borrowed_ptr<'a, 'b>(p: &'a mut &'b mut isize) -> &'b mut isize {\n-   |                      --  -- lifetime `'b` defined here\n-   |                      |\n-   |                      lifetime `'a` defined here\n-LL |     &mut **p //~ ERROR 16:5: 16:13: lifetime mismatch [E0623]\n-   |     ^^^^^^^^ function was supposed to return data with lifetime `'b` but it is returning data with lifetime `'a`\n-\n-error: aborting due to previous error\n-"}, {"sha": "5df6bca72fa0aa4278526f8f2dc4cd2744f142e1", "filename": "src/test/ui/regions/regions-ret-borrowed-1.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed-1.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-ret-borrowed-1.rs:20:14\n-   |\n-LL |     with(|o| o)\n-   |           -- ^ returning this value requires that `'1` must outlive `'2`\n-   |           ||\n-   |           |return type of closure is &'2 isize\n-   |           has type `&'1 isize`\n-\n-error: aborting due to previous error\n-"}, {"sha": "b36191ada61c773d2809ded5019d32e14e38e4bb", "filename": "src/test/ui/regions/regions-ret-borrowed.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-ret-borrowed.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-ret-borrowed.rs:23:14\n-   |\n-LL |     with(|o| o)\n-   |           -- ^ returning this value requires that `'1` must outlive `'2`\n-   |           ||\n-   |           |return type of closure is &'2 isize\n-   |           has type `&'1 isize`\n-\n-error: aborting due to previous error\n-"}, {"sha": "300a563982253df694561b4d814cb2078446799b", "filename": "src/test/ui/regions/regions-return-ref-to-upvar-issue-17403.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-return-ref-to-upvar-issue-17403.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: captured variable cannot escape `FnMut` closure body\n-  --> $DIR/regions-return-ref-to-upvar-issue-17403.rs:17:24\n-   |\n-LL |         let mut f = || &mut x; //~ ERROR cannot infer\n-   |                      - ^^^^^^ returns a reference to a captured variable which escapes the closure body\n-   |                      |\n-   |                      inferred to be a `FnMut` closure\n-   |\n-   = note: `FnMut` closures only have access to their captured variables while they are executing...\n-   = note: ...therefore, they cannot allow references to captured variables to escape\n-\n-error: aborting due to previous error\n-"}, {"sha": "dc3a32cec6ac7b700d1eaa8821243451c253c61b", "filename": "src/test/ui/regions/regions-static-bound.ll.nll.stderr", "status": "removed", "additions": 0, "deletions": 49, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,49 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-static-bound.rs:19:5\n-   |\n-LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n-   |                        -- lifetime `'a` defined here\n-LL |     t //[ll]~ ERROR E0312\n-   |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-error[E0621]: explicit lifetime required in the type of `u`\n-  --> $DIR/regions-static-bound.rs:24:5\n-   |\n-LL | fn error(u: &(), v: &()) {\n-   |             --- help: add explicit lifetime `'static` to the type of `u`: `&'static ()`\n-LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n-   |     ^^^^^^^^^^^^^ lifetime `'static` required\n-\n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:27:5\n-   |\n-LL | fn error(u: &(), v: &()) {\n-   |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n-...\n-LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-static-bound.rs:24:5\n-   |\n-LL | fn error(u: &(), v: &()) {\n-   |             -       - let's call the lifetime of this reference `'2`\n-   |             |\n-   |             let's call the lifetime of this reference `'1`\n-LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n-   |     ^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-static-bound.rs:27:5\n-   |\n-LL | fn error(u: &(), v: &()) {\n-   |             -       - let's call the lifetime of this reference `'1`\n-   |             |\n-   |             let's call the lifetime of this reference `'2`\n-...\n-LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "0a9bcee1ce29d34f53a8a09e2fd9e189edec2782", "filename": "src/test/ui/regions/regions-trait-object-subtyping.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-trait-object-subtyping.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-trait-object-subtyping.rs:25:5\n-   |\n-LL | fn foo3<'a,'b>(x: &'a mut Dummy) -> &'b mut Dummy {\n-   |         -- -- lifetime `'b` defined here\n-   |         |\n-   |         lifetime `'a` defined here\n-LL |     // Without knowing 'a:'b, we can't coerce\n-LL |     x //~ ERROR lifetime bound not satisfied\n-   |     ^ cast requires that `'a` must outlive `'b`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-trait-object-subtyping.rs:32:5\n-   |\n-LL | fn foo4<'a:'b,'b>(x: Wrapper<&'a mut Dummy>) -> Wrapper<&'b mut Dummy> {\n-   |         --    -- lifetime `'b` defined here\n-   |         |\n-   |         lifetime `'a` defined here\n-LL |     // We can't coerce because it is packed in `Wrapper`\n-LL |     x //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'b` must outlive `'a`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "668b75f5733a21ab079d703d4933167337244149", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant-in-second-position.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-contravariant-use-covariant-in-second-position.rs:35:12\n-   |\n-LL | fn use_<'short,'long>(c: S<'long, 'short>,\n-   |         ------ ----- lifetime `'long` defined here\n-   |         |\n-   |         lifetime `'short` defined here\n-...\n-LL |     let _: S<'long, 'long> = c; //~ ERROR E0623\n-   |            ^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n-\n-error: aborting due to previous error\n-"}, {"sha": "5d787e6dab6991b595cdaceaab35453fe433163a", "filename": "src/test/ui/regions/regions-variance-contravariant-use-covariant.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-contravariant-use-covariant.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-contravariant-use-covariant.rs:33:12\n-   |\n-LL | fn use_<'short,'long>(c: Contravariant<'short>,\n-   |         ------ ----- lifetime `'long` defined here\n-   |         |\n-   |         lifetime `'short` defined here\n-...\n-LL |     let _: Contravariant<'long> = c; //~ ERROR E0623\n-   |            ^^^^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n-\n-error: aborting due to previous error\n-"}, {"sha": "3fb290096686d50ffeef723488bf2e3b2899080c", "filename": "src/test/ui/regions/regions-variance-covariant-use-contravariant.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-covariant-use-contravariant.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-covariant-use-contravariant.rs:33:12\n-   |\n-LL | fn use_<'short,'long>(c: Covariant<'long>,\n-   |         ------ ----- lifetime `'long` defined here\n-   |         |\n-   |         lifetime `'short` defined here\n-...\n-LL |     let _: Covariant<'short> = c; //~ ERROR E0623\n-   |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n-\n-error: aborting due to previous error\n-"}, {"sha": "fb59ec1ca1008ff7cc4f86042a111c5758612ed9", "filename": "src/test/ui/regions/regions-variance-invariant-use-contravariant.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-contravariant.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-invariant-use-contravariant.rs:30:12\n-   |\n-LL | fn use_<'short,'long>(c: Invariant<'long>,\n-   |         ------ ----- lifetime `'long` defined here\n-   |         |\n-   |         lifetime `'short` defined here\n-...\n-LL |     let _: Invariant<'short> = c; //~ ERROR E0623\n-   |            ^^^^^^^^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n-\n-error: aborting due to previous error\n-"}, {"sha": "daf6a79136a543ce0841acec7b3fb9ec72be37c5", "filename": "src/test/ui/regions/regions-variance-invariant-use-covariant.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-variance-invariant-use-covariant.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/regions-variance-invariant-use-covariant.rs:27:12\n-   |\n-LL | fn use_<'b>(c: Invariant<'b>) {\n-   |         -- lifetime `'b` defined here\n-...\n-LL |     let _: Invariant<'static> = c; //~ ERROR mismatched types\n-   |            ^^^^^^^^^^^^^^^^^^ type annotation requires that `'b` must outlive `'static`\n-\n-error: aborting due to previous error\n-"}, {"sha": "35a400b15089ff19a6bc00b0da5b7afaab78da42", "filename": "src/test/ui/static/static-items-cant-move.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fstatic%2Fstatic-items-cant-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fstatic%2Fstatic-items-cant-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstatic%2Fstatic-items-cant-move.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -0,0 +1,18 @@\n+error[E0507]: cannot move out of static item\n+  --> $DIR/static-items-cant-move.rs:28:10\n+   |\n+LL |     test(BAR); //~ ERROR cannot move out of static item\n+   |          ^^^ cannot move out of static item\n+\n+error[E0507]: cannot move out of immutable static item `BAR`\n+  --> $DIR/static-items-cant-move.rs:28:10\n+   |\n+LL |     test(BAR); //~ ERROR cannot move out of static item\n+   |          ^^^\n+   |          |\n+   |          cannot move out of immutable static item `BAR`\n+   |          cannot move\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "d2576a4baf369ab657e287a0e4b3f71f37beeb33", "filename": "src/test/ui/std-uncopyable-atomics.nll.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstd-uncopyable-atomics.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -7,6 +7,15 @@ LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n    |             cannot move out of borrowed content\n    |             help: consider removing the `*`: `&x`\n \n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/std-uncopyable-atomics.rs:19:13\n+   |\n+LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n+   |             ^^^\n+   |             |\n+   |             cannot move out of data in a `&` reference\n+   |             cannot move\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/std-uncopyable-atomics.rs:21:13\n    |\n@@ -16,6 +25,15 @@ LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n    |             cannot move out of borrowed content\n    |             help: consider removing the `*`: `&x`\n \n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/std-uncopyable-atomics.rs:21:13\n+   |\n+LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n+   |             ^^^\n+   |             |\n+   |             cannot move out of data in a `&` reference\n+   |             cannot move\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/std-uncopyable-atomics.rs:23:13\n    |\n@@ -25,6 +43,15 @@ LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n    |             cannot move out of borrowed content\n    |             help: consider removing the `*`: `&x`\n \n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/std-uncopyable-atomics.rs:23:13\n+   |\n+LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n+   |             ^^^\n+   |             |\n+   |             cannot move out of data in a `&` reference\n+   |             cannot move\n+\n error[E0507]: cannot move out of borrowed content\n   --> $DIR/std-uncopyable-atomics.rs:25:13\n    |\n@@ -34,6 +61,15 @@ LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n    |             cannot move out of borrowed content\n    |             help: consider removing the `*`: `&x`\n \n-error: aborting due to 4 previous errors\n+error[E0507]: cannot move out of data in a `&` reference\n+  --> $DIR/std-uncopyable-atomics.rs:25:13\n+   |\n+LL |     let x = *&x; //~ ERROR: cannot move out of borrowed content\n+   |             ^^^\n+   |             |\n+   |             cannot move out of data in a `&` reference\n+   |             cannot move\n+\n+error: aborting due to 8 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "05f8f343380036d3f16deb9072f1c6c6546e79fb", "filename": "src/test/ui/thread-local-in-ctfe.nll.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthread-local-in-ctfe.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -10,13 +10,17 @@ error[E0625]: thread-local statics cannot be accessed at compile-time\n LL | static C: &u32 = &A;\n    |                  ^^\n \n-error[E0712]: thread-local variable borrowed past end of function\n+warning[E0712]: thread-local variable borrowed past end of function\n   --> $DIR/thread-local-in-ctfe.rs:19:18\n    |\n LL | static C: &u32 = &A;\n    |                  ^^- end of enclosing function is here\n    |                  |\n    |                  thread-local variables cannot be borrowed beyond the end of the function\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n error[E0625]: thread-local statics cannot be accessed at compile-time\n   --> $DIR/thread-local-in-ctfe.rs:22:16\n@@ -30,21 +34,25 @@ error[E0625]: thread-local statics cannot be accessed at compile-time\n LL | const E: &u32 = &A;\n    |                 ^^\n \n-error[E0712]: thread-local variable borrowed past end of function\n+warning[E0712]: thread-local variable borrowed past end of function\n   --> $DIR/thread-local-in-ctfe.rs:25:17\n    |\n LL | const E: &u32 = &A;\n    |                 ^^- end of enclosing function is here\n    |                 |\n    |                 thread-local variables cannot be borrowed beyond the end of the function\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n error[E0625]: thread-local statics cannot be accessed at compile-time\n   --> $DIR/thread-local-in-ctfe.rs:29:5\n    |\n LL |     A\n    |     ^\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0625, E0712.\n For more information about an error, try `rustc --explain E0625`."}, {"sha": "9f56bf05384364a0b9181b3bb880ad8023dec91c", "filename": "src/test/ui/trivial-bounds/trivial-bounds-leak-copy.nll.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak-copy.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak-copy.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrivial-bounds%2Ftrivial-bounds-leak-copy.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -0,0 +1,20 @@\n+error[E0507]: cannot move out of borrowed content\n+  --> $DIR/trivial-bounds-leak-copy.rs:19:5\n+   |\n+LL |     *t //~ ERROR\n+   |     ^^ cannot move out of borrowed content\n+\n+error[E0507]: cannot move out of `*t` which is behind a `&` reference\n+  --> $DIR/trivial-bounds-leak-copy.rs:19:5\n+   |\n+LL | fn move_out_string(t: &String) -> String {\n+   |                       ------- help: consider changing this to be a mutable reference: `&mut std::string::String`\n+LL |     *t //~ ERROR\n+   |     ^^\n+   |     |\n+   |     cannot move out of `*t` which is behind a `&` reference\n+   |     `t` is a `&` reference, so the data it refers to cannot be moved\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "625084efec2ff38002627fb1ac27da748bab7e31", "filename": "src/test/ui/unboxed-closures/unboxed-closure-illegal-move.nll.stderr", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-illegal-move.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -6,6 +6,21 @@ LL |         let x = Box::new(0);\n LL |         let f = to_fn(|| drop(x)); //~ ERROR cannot move\n    |                               ^ cannot move out of captured variable in an `Fn` closure\n \n+error[E0507]: cannot move out of `x`, as it is a captured variable in a `Fn` closure\n+  --> $DIR/unboxed-closure-illegal-move.rs:25:31\n+   |\n+LL |         let f = to_fn(|| drop(x)); //~ ERROR cannot move\n+   |                               ^\n+   |                               |\n+   |                               cannot move out of `x`, as it is a captured variable in a `Fn` closure\n+   |                               cannot move\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/unboxed-closure-illegal-move.rs:25:23\n+   |\n+LL |         let f = to_fn(|| drop(x)); //~ ERROR cannot move\n+   |                       ^^^^^^^^^^\n+\n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:29:35\n    |\n@@ -22,6 +37,21 @@ LL |         let x = Box::new(0);\n LL |         let f = to_fn(move || drop(x)); //~ ERROR cannot move\n    |                                    ^ cannot move out of captured variable in an `Fn` closure\n \n+error[E0507]: cannot move out of `x`, as it is a captured variable in a `Fn` closure\n+  --> $DIR/unboxed-closure-illegal-move.rs:38:36\n+   |\n+LL |         let f = to_fn(move || drop(x)); //~ ERROR cannot move\n+   |                                    ^\n+   |                                    |\n+   |                                    cannot move out of `x`, as it is a captured variable in a `Fn` closure\n+   |                                    cannot move\n+   |\n+help: consider changing this to accept closures that implement `FnMut`\n+  --> $DIR/unboxed-closure-illegal-move.rs:38:23\n+   |\n+LL |         let f = to_fn(move || drop(x)); //~ ERROR cannot move\n+   |                       ^^^^^^^^^^^^^^^\n+\n error[E0507]: cannot move out of captured variable in an `FnMut` closure\n   --> $DIR/unboxed-closure-illegal-move.rs:42:40\n    |\n@@ -30,6 +60,6 @@ LL |         let x = Box::new(0);\n LL |         let f = to_fn_mut(move || drop(x)); //~ ERROR cannot move\n    |                                        ^ cannot move out of captured variable in an `FnMut` closure\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 6 previous errors\n \n For more information about this error, try `rustc --explain E0507`."}, {"sha": "ee91ea3b66f304e61d41fc7073ddb4cb0fa0f759", "filename": "src/test/ui/unboxed-closures/unboxed-closure-immutable-capture.nll.stderr", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-immutable-capture.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -33,43 +33,59 @@ LL |     let x = 0;\n LL |     move || set(&mut x); //~ ERROR cannot borrow\n    |                 ^^^^^^ cannot borrow as mutable\n \n-error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+warning[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/unboxed-closure-immutable-capture.rs:23:8\n    |\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n LL |     || x = 1; //~ ERROR cannot assign\n    |        ^^^^^ cannot assign\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n-error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+warning[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closure-immutable-capture.rs:25:12\n    |\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n LL |     || set(&mut x); //~ ERROR cannot assign\n    |            ^^^^^^ cannot borrow as mutable\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n-error[E0594]: cannot assign to `x`, as it is not declared as mutable\n+warning[E0594]: cannot assign to `x`, as it is not declared as mutable\n   --> $DIR/unboxed-closure-immutable-capture.rs:26:8\n    |\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n LL |     || x = 1; //~ ERROR cannot assign\n    |        ^^^^^ cannot assign\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n-error[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n+warning[E0596]: cannot borrow `x` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closure-immutable-capture.rs:28:12\n    |\n LL |     let x = 0;\n    |         - help: consider changing this to be mutable: `mut x`\n ...\n LL |     || set(&mut x); //~ ERROR cannot assign\n    |            ^^^^^^ cannot borrow as mutable\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors occurred: E0594, E0596.\n For more information about an error, try `rustc --explain E0594`."}, {"sha": "a3501290cd607d5b0df07aa7ca343560d45e7a50", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-argument-types-two-region-pointers.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/unboxed-closures-infer-argument-types-two-region-pointers.rs:27:9\n-   |\n-LL |     doit(0, &|x, y| {\n-   |               -  - has type `&'1 i32`\n-   |               |\n-   |               has type `&std::cell::Cell<&'2 i32>`\n-LL |         x.set(y); //~ ERROR E0312\n-   |         ^^^^^^^^ argument requires that `'1` must outlive `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "fa0aba96e18be314935d4c93d5622ee3735b026c", "filename": "src/test/ui/unboxed-closures/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fnmut-calling-fnmut-no-mut.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -1,11 +1,15 @@\n-error[E0596]: cannot borrow `tick1` as mutable, as it is not declared as mutable\n+warning[E0596]: cannot borrow `tick1` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.rs:27:9\n    |\n LL |     let tick1 = || {\n    |         ----- help: consider changing this to be mutable: `mut tick1`\n ...\n LL |         tick1();\n    |         ^^^^^ cannot borrow as mutable\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n error[E0596]: cannot borrow `tick2` as mutable, as it is not declared as mutable\n   --> $DIR/unboxed-closures-infer-fnmut-calling-fnmut-no-mut.rs:30:5\n@@ -16,6 +20,6 @@ LL |     let tick2 = || { //~ ERROR closure cannot assign to immutable local var\n LL |     tick2(); //~ ERROR cannot borrow\n    |     ^^^^^ cannot borrow as mutable\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0596`."}, {"sha": "9858b8db2112d1ae6a819e985c8ec0626821934d", "filename": "src/test/ui/unboxed-closures/unboxed-closures-mutate-upvar.nll.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-mutate-upvar.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -1,11 +1,15 @@\n-error[E0594]: cannot assign to `n`, as it is not declared as mutable\n+warning[E0594]: cannot assign to `n`, as it is not declared as mutable\n   --> $DIR/unboxed-closures-mutate-upvar.rs:25:9\n    |\n LL |     let n = 0;\n    |         - help: consider changing this to be mutable: `mut n`\n LL |     let mut f = to_fn_mut(|| { //~ ERROR closure cannot assign\n LL |         n += 1;\n    |         ^^^^^^ cannot assign\n+   |\n+   = warning: This error has been downgraded to a warning for backwards compatibility with previous releases.\n+           It represents potential unsoundness in your code.\n+           This warning will become a hard error in the future.\n \n error[E0594]: cannot assign to `n`, as it is not declared as mutable\n   --> $DIR/unboxed-closures-mutate-upvar.rs:42:9\n@@ -40,6 +44,6 @@ LL | |         n += 1; //~ ERROR cannot assign\n LL | |     });\n    | |_____^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0594`."}, {"sha": "7adb195b7d0225d68304b023191927b6d3b760e6", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/dyn-trait-underscore.rs:18:5\n-   |\n-LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n-   |                - let's call the lifetime of this reference `'1`\n-LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n-LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n-\n-error: aborting due to previous error\n-"}, {"sha": "eedbfbf5f61a7ab6005b76f4a2c752fcdd59364a", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-elison-mismatch.nll.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-elison-mismatch.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,11 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/underscore-lifetime-elison-mismatch.rs:11:42\n-   |\n-LL | fn foo(x: &mut Vec<&'_ u8>, y: &'_ u8) { x.push(y); } //~ ERROR lifetime mismatch\n-   |                    -           -         ^^^^^^^^^ argument requires that `'1` must outlive `'2`\n-   |                    |           |\n-   |                    |           let's call the lifetime of this reference `'1`\n-   |                    let's call the lifetime of this reference `'2`\n-\n-error: aborting due to previous error\n-"}, {"sha": "8112ddbe2f16e8db858080f795c9fa8daca7bcfb", "filename": "src/test/ui/unop-move-semantics.nll.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funop-move-semantics.nll.stderr?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -21,7 +21,19 @@ error[E0507]: cannot move out of borrowed content\n LL |     !*n;  //~ ERROR: cannot move out of borrowed content\n    |      ^^ cannot move out of borrowed content\n \n-error: aborting due to 3 previous errors\n+error[E0507]: cannot move out of `*n` which is behind a `&` reference\n+  --> $DIR/unop-move-semantics.rs:36:6\n+   |\n+LL |     let n = &y;\n+   |             -- help: consider changing this to be a mutable reference: `&mut y`\n+...\n+LL |     !*n;  //~ ERROR: cannot move out of borrowed content\n+   |      ^^\n+   |      |\n+   |      cannot move out of `*n` which is behind a `&` reference\n+   |      `n` is a `&` reference, so the data it refers to cannot be moved\n+\n+error: aborting due to 4 previous errors\n \n Some errors occurred: E0382, E0507.\n For more information about an error, try `rustc --explain E0382`."}, {"sha": "f09dcdf25dac96a125848dacbf3a7aebe3d6cc38", "filename": "src/test/ui/variance/variance-btree-invariant-types.nll.stderr", "status": "removed", "additions": 0, "deletions": 106, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-btree-invariant-types.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,106 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-btree-invariant-types.rs:16:5\n-   |\n-LL | fn iter_cov_key<'a, 'new>(v: IterMut<'a, &'static (), ()>) -> IterMut<'a, &'new (), ()> {\n-   |                     ---- lifetime `'new` defined here\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'new` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-btree-invariant-types.rs:19:5\n-   |\n-LL | fn iter_cov_val<'a, 'new>(v: IterMut<'a, (), &'static ()>) -> IterMut<'a, (), &'new ()> {\n-   |                     ---- lifetime `'new` defined here\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'new` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-btree-invariant-types.rs:22:5\n-   |\n-LL | fn iter_contra_key<'a, 'new>(v: IterMut<'a, &'new (), ()>) -> IterMut<'a, &'static (), ()> {\n-   |                        ---- lifetime `'new` defined here\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'new` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-btree-invariant-types.rs:25:5\n-   |\n-LL | fn iter_contra_val<'a, 'new>(v: IterMut<'a, (), &'new ()>) -> IterMut<'a, (), &'static ()> {\n-   |                        ---- lifetime `'new` defined here\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'new` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-btree-invariant-types.rs:30:5\n-   |\n-LL | fn occ_cov_key<'a, 'new>(v: OccupiedEntry<'a, &'static (), ()>)\n-   |                    ---- lifetime `'new` defined here\n-LL |                          -> OccupiedEntry<'a, &'new (), ()> {\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'new` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-btree-invariant-types.rs:34:5\n-   |\n-LL | fn occ_cov_val<'a, 'new>(v: OccupiedEntry<'a, (), &'static ()>)\n-   |                    ---- lifetime `'new` defined here\n-LL |                          -> OccupiedEntry<'a, (), &'new ()> {\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'new` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-btree-invariant-types.rs:38:5\n-   |\n-LL | fn occ_contra_key<'a, 'new>(v: OccupiedEntry<'a, &'new (), ()>)\n-   |                       ---- lifetime `'new` defined here\n-LL |                             -> OccupiedEntry<'a, &'static (), ()> {\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'new` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-btree-invariant-types.rs:42:5\n-   |\n-LL | fn occ_contra_val<'a, 'new>(v: OccupiedEntry<'a, (), &'new ()>)\n-   |                       ---- lifetime `'new` defined here\n-LL |                             -> OccupiedEntry<'a, (), &'static ()> {\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'new` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-btree-invariant-types.rs:47:5\n-   |\n-LL | fn vac_cov_key<'a, 'new>(v: VacantEntry<'a, &'static (), ()>)\n-   |                    ---- lifetime `'new` defined here\n-LL |                          -> VacantEntry<'a, &'new (), ()> {\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'new` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-btree-invariant-types.rs:51:5\n-   |\n-LL | fn vac_cov_val<'a, 'new>(v: VacantEntry<'a, (), &'static ()>)\n-   |                    ---- lifetime `'new` defined here\n-LL |                          -> VacantEntry<'a, (), &'new ()> {\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'new` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-btree-invariant-types.rs:55:5\n-   |\n-LL | fn vac_contra_key<'a, 'new>(v: VacantEntry<'a, &'new (), ()>)\n-   |                       ---- lifetime `'new` defined here\n-LL |                             -> VacantEntry<'a, &'static (), ()> {\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'new` must outlive `'static`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-btree-invariant-types.rs:59:5\n-   |\n-LL | fn vac_contra_val<'a, 'new>(v: VacantEntry<'a, (), &'new ()>)\n-   |                       ---- lifetime `'new` defined here\n-LL |                             -> VacantEntry<'a, (), &'static ()> {\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'new` must outlive `'static`\n-\n-error: aborting due to 12 previous errors\n-"}, {"sha": "eb01c2bbb05b1029e123ef02d161053232a1c498", "filename": "src/test/ui/variance/variance-cell-is-invariant.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-cell-is-invariant.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-cell-is-invariant.rs:24:12\n-   |\n-LL | fn use_<'short,'long>(c: Foo<'short>,\n-   |         ------ ----- lifetime `'long` defined here\n-   |         |\n-   |         lifetime `'short` defined here\n-...\n-LL |     let _: Foo<'long> = c; //~ ERROR E0623\n-   |            ^^^^^^^^^^ type annotation requires that `'short` must outlive `'long`\n-\n-error: aborting due to previous error\n-"}, {"sha": "a30720dc6ba8a8bef7ba1ad2989fa31e8b3135c3", "filename": "src/test/ui/variance/variance-contravariant-arg-object.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-object.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-contravariant-arg-object.rs:24:5\n-   |\n-LL | fn get_min_from_max<'min, 'max>(v: Box<Get<&'max i32>>)\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-contravariant-arg-object.rs:32:5\n-   |\n-LL | fn get_max_from_min<'min, 'max, G>(v: Box<Get<&'min i32>>)\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "69981699da8f1c45da150c1d570d6dd6cf3165a9", "filename": "src/test/ui/variance/variance-contravariant-arg-trait-match.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-arg-trait-match.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:23:5\n-   |\n-LL | fn get_min_from_max<'min, 'max, G>()\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     impls_get::<G,&'min i32>() //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-contravariant-arg-trait-match.rs:31:5\n-   |\n-LL | fn get_max_from_min<'min, 'max, G>()\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     impls_get::<G,&'max i32>() //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "a8566814c64569dda6b80d962abf5658e392abff", "filename": "src/test/ui/variance/variance-contravariant-self-trait-match.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-contravariant-self-trait-match.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-contravariant-self-trait-match.rs:23:5\n-   |\n-LL | fn get_min_from_max<'min, 'max, G>()\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     impls_get::<&'min G>(); //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-contravariant-self-trait-match.rs:32:5\n-   |\n-LL | fn get_max_from_min<'min, 'max, G>()\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     impls_get::<&'max G>(); //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "26699a537e81032fc7c5751882b727356f1afb5b", "filename": "src/test/ui/variance/variance-covariant-arg-object.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-object.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-covariant-arg-object.rs:25:5\n-   |\n-LL | fn get_min_from_max<'min, 'max>(v: Box<Get<&'max i32>>)\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-covariant-arg-object.rs:32:5\n-   |\n-LL | fn get_max_from_min<'min, 'max, G>(v: Box<Get<&'min i32>>)\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "bb3f5f5711cbfe7a8a9efe36ec7da2c2a7401558", "filename": "src/test/ui/variance/variance-covariant-arg-trait-match.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-arg-trait-match.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-covariant-arg-trait-match.rs:24:5\n-   |\n-LL | fn get_min_from_max<'min, 'max, G>()\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     impls_get::<G,&'min i32>() //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-covariant-arg-trait-match.rs:30:5\n-   |\n-LL | fn get_max_from_min<'min, 'max, G>()\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     impls_get::<G,&'max i32>() //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "3bbf9c0d3f5dfc61eb4a990f43825f02e006bed0", "filename": "src/test/ui/variance/variance-covariant-self-trait-match.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-covariant-self-trait-match.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-covariant-self-trait-match.rs:24:5\n-   |\n-LL | fn get_min_from_max<'min, 'max, G>()\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     impls_get::<&'min G>(); //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-covariant-self-trait-match.rs:30:5\n-   |\n-LL | fn get_max_from_min<'min, 'max, G>()\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     impls_get::<&'max G>(); //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "20ab6485986185fae8484f7ae9368f384b1a93f2", "filename": "src/test/ui/variance/variance-invariant-arg-object.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-object.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-invariant-arg-object.rs:21:5\n-   |\n-LL | fn get_min_from_max<'min, 'max>(v: Box<Get<&'max i32>>)\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-invariant-arg-object.rs:28:5\n-   |\n-LL | fn get_max_from_min<'min, 'max, G>(v: Box<Get<&'min i32>>)\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "be9f5a632dd6d55c435026507187a254092590db", "filename": "src/test/ui/variance/variance-invariant-arg-trait-match.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-arg-trait-match.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-invariant-arg-trait-match.rs:20:5\n-   |\n-LL | fn get_min_from_max<'min, 'max, G>()\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     impls_get::<G,&'min i32>() //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-invariant-arg-trait-match.rs:26:5\n-   |\n-LL | fn get_max_from_min<'min, 'max, G>()\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     impls_get::<G,&'max i32>() //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "f5827856a1bdbaced3150e67b03030b9c30b342d", "filename": "src/test/ui/variance/variance-invariant-self-trait-match.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-invariant-self-trait-match.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-invariant-self-trait-match.rs:20:5\n-   |\n-LL | fn get_min_from_max<'min, 'max, G>()\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     impls_get::<&'min G>(); //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-invariant-self-trait-match.rs:26:5\n-   |\n-LL | fn get_max_from_min<'min, 'max, G>()\n-   |                     ----  ---- lifetime `'max` defined here\n-   |                     |\n-   |                     lifetime `'min` defined here\n-...\n-LL |     impls_get::<&'max G>(); //~ ERROR mismatched types\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ requires that `'min` must outlive `'max`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "14b42585d6e2afd408fbdc832e2d988f6f5d4337", "filename": "src/test/ui/variance/variance-trait-matching.nll.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-trait-matching.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,12 +0,0 @@\n-error[E0621]: explicit lifetime required in the type of `get`\n-  --> $DIR/variance-trait-matching.rs:34:5\n-   |\n-LL | fn get<'a, G>(get: &G) -> i32\n-   |                    -- help: add explicit lifetime `'a` to the type of `get`: `&'a G`\n-...\n-LL |     pick(get, &22) //~ ERROR 34:5: 34:9: explicit lifetime required in the type of `get` [E0621]\n-   |     ^^^^^^^^^^^^^^ lifetime `'a` required\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "37604af5063224774309fd55ac24e06bd45f9236", "filename": "src/test/ui/variance/variance-use-contravariant-struct-1.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-contravariant-struct-1.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-use-contravariant-struct-1.rs:22:5\n-   |\n-LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n-   |        ---- ---- lifetime `'max` defined here\n-   |        |\n-   |        lifetime `'min` defined here\n-...\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n-\n-error: aborting due to previous error\n-"}, {"sha": "c7fd60301c834a798c8c9bf1b4295b68501f7c04", "filename": "src/test/ui/variance/variance-use-covariant-struct-1.nll.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-covariant-struct-1.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,13 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-use-covariant-struct-1.rs:20:5\n-   |\n-LL | fn foo<'min,'max>(v: SomeStruct<&'min ()>)\n-   |        ---- ---- lifetime `'max` defined here\n-   |        |\n-   |        lifetime `'min` defined here\n-...\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n-\n-error: aborting due to previous error\n-"}, {"sha": "1638d5ec4fb7a53d9bd8af805cd2553c15b858d0", "filename": "src/test/ui/variance/variance-use-invariant-struct-1.nll.stderr", "status": "removed", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-use-invariant-struct-1.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,24 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-use-invariant-struct-1.rs:22:5\n-   |\n-LL | fn foo<'min,'max>(v: SomeStruct<&'max ()>)\n-   |        ---- ---- lifetime `'max` defined here\n-   |        |\n-   |        lifetime `'min` defined here\n-...\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/variance-use-invariant-struct-1.rs:29:5\n-   |\n-LL | fn bar<'min,'max>(v: SomeStruct<&'min ()>)\n-   |        ---- ---- lifetime `'max` defined here\n-   |        |\n-   |        lifetime `'min` defined here\n-...\n-LL |     v //~ ERROR mismatched types\n-   |     ^ returning this value requires that `'min` must outlive `'max`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "bfcb16c654ff1d71dcf1c4a10056f44a44689002", "filename": "src/test/ui/wf/wf-static-method.nll.stderr", "status": "removed", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1dceaddfbe163e2d916c904b98923342730ba970/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-static-method.nll.stderr?ref=1dceaddfbe163e2d916c904b98923342730ba970", "patch": "@@ -1,55 +0,0 @@\n-error: unsatisfied lifetime constraints\n-  --> $DIR/wf-static-method.rs:27:9\n-   |\n-LL | impl<'a, 'b> Foo<'a, 'b, Evil<'a, 'b>> for () {\n-   |      --  -- lifetime `'b` defined here\n-   |      |\n-   |      lifetime `'a` defined here\n-...\n-LL |         u //~ ERROR E0312\n-   |         ^ returning this value requires that `'b` must outlive `'a`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/wf-static-method.rs:36:18\n-   |\n-LL | impl<'a, 'b> Foo<'a, 'b, ()> for IndirectEvil<'a, 'b> {\n-   |      --  -- lifetime `'b` defined here\n-   |      |\n-   |      lifetime `'a` defined here\n-...\n-LL |         let me = Self::make_me(); //~ ERROR lifetime bound not satisfied\n-   |                  ^^^^^^^^^^^^^^^ requires that `'b` must outlive `'a`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/wf-static-method.rs:43:9\n-   |\n-LL | impl<'a, 'b> Evil<'a, 'b> {\n-   |      --  -- lifetime `'b` defined here\n-   |      |\n-   |      lifetime `'a` defined here\n-LL |     fn inherent_evil(u: &'b u32) -> &'a u32 {\n-LL |         u //~ ERROR E0312\n-   |         ^ returning this value requires that `'b` must outlive `'a`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/wf-static-method.rs:51:5\n-   |\n-LL | fn evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n-   |         --  -- lifetime `'b` defined here\n-   |         |\n-   |         lifetime `'a` defined here\n-LL |     <()>::static_evil(b) //~ ERROR cannot infer an appropriate lifetime\n-   |     ^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n-\n-error: unsatisfied lifetime constraints\n-  --> $DIR/wf-static-method.rs:55:5\n-   |\n-LL | fn indirect_evil<'a, 'b>(b: &'b u32) -> &'a u32 {\n-   |                  --  -- lifetime `'b` defined here\n-   |                  |\n-   |                  lifetime `'a` defined here\n-LL |     <IndirectEvil>::static_evil(b)\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'b` must outlive `'a`\n-\n-error: aborting due to 5 previous errors\n-"}, {"sha": "c69956030c0b3ba6678cb817ff44bb54cc99e654", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7eb7fbbf6bca0eaa146c4a48cd39c133a257706/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=f7eb7fbbf6bca0eaa146c4a48cd39c133a257706", "patch": "@@ -1810,7 +1810,7 @@ impl<'test> TestCx<'test> {\n \n         match self.config.compare_mode {\n             Some(CompareMode::Nll) => {\n-                rustc.args(&[\"-Zborrowck=mir\", \"-Ztwo-phase-borrows\"]);\n+                rustc.args(&[\"-Zborrowck=migrate\", \"-Ztwo-phase-borrows\"]);\n             }\n             Some(CompareMode::Polonius) => {\n                 rustc.args(&[\"-Zpolonius\", \"-Zborrowck=mir\", \"-Ztwo-phase-borrows\"]);"}]}