{"sha": "8a1cc738fa9bc4af134da01386414d057cc2e719", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMWNjNzM4ZmE5YmM0YWYxMzRkYTAxMzg2NDE0ZDA1N2NjMmU3MTk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-02T13:00:45Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-12-02T13:00:45Z"}, "message": "Finally make the -1 crate id in resolve.rs a const", "tree": {"sha": "ff3ff99add121e307acdee12ab98eb39340d668e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff3ff99add121e307acdee12ab98eb39340d668e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a1cc738fa9bc4af134da01386414d057cc2e719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a1cc738fa9bc4af134da01386414d057cc2e719", "html_url": "https://github.com/rust-lang/rust/commit/8a1cc738fa9bc4af134da01386414d057cc2e719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a1cc738fa9bc4af134da01386414d057cc2e719/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7655b3c0c673a6857ccf94835f6cedbe778a8667", "url": "https://api.github.com/repos/rust-lang/rust/commits/7655b3c0c673a6857ccf94835f6cedbe778a8667", "html_url": "https://github.com/rust-lang/rust/commit/7655b3c0c673a6857ccf94835f6cedbe778a8667"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "086fdec803aad6e2c6ea3dfda98bdb0c28c18c2f", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8a1cc738fa9bc4af134da01386414d057cc2e719/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a1cc738fa9bc4af134da01386414d057cc2e719/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=8a1cc738fa9bc4af134da01386414d057cc2e719", "patch": "@@ -27,10 +27,8 @@ export ext_map;\n // locates all names (in expressions, types, and alt patterns) and resolves\n // them, storing the resulting def in the AST nodes.\n \n-// This module internally uses -1 as a def_id for the top_level module in a\n-// crate. The parser doesn't assign a def_id to this module.\n-// (FIXME See https://github.com/graydon/rust/issues/358 for the reason this\n-//  isn't a const.)\n+const crate_mod: int = -1;\n+\n tag scope {\n     scope_crate;\n     scope_item(@ast::item);\n@@ -158,7 +156,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n     visit::visit_crate(*c, cons(scope_crate, @nil), visit::mk_vt(v_map_mod));\n \n     // Register the top-level mod\n-    e.mod_map.insert(-1,\n+    e.mod_map.insert(crate_mod,\n                      @{m: some(c.node.module),\n                        index: index_mod(c.node.module),\n                        mutable glob_imports: [],\n@@ -228,7 +226,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n                     e.block_map.insert(b.node.id, globs);\n                   }\n                   scope_crate. {\n-                    e.mod_map.get(-1).glob_imports += [glob];\n+                    e.mod_map.get(crate_mod).glob_imports += [glob];\n                   }\n                 }\n             }\n@@ -636,7 +634,7 @@ fn lookup_in_scope(e: env, sc: scopes, sp: span, name: ident, ns: namespace)\n        option::t<def> {\n         alt s {\n           scope_crate. {\n-            ret lookup_in_local_mod(e, -1, sp, name, ns, inside);\n+            ret lookup_in_local_mod(e, crate_mod, sp, name, ns, inside);\n           }\n           scope_item(it) {\n             alt it.node {\n@@ -932,11 +930,10 @@ fn lookup_in_mod(e: env, m: def, sp: span, name: ident, ns: namespace,\n     let defid = ast_util::def_id_of_def(m);\n     if defid.crate != ast::local_crate {\n         // examining a module in an external crate\n-\n         let cached = e.ext_cache.find({did: defid, ident: name, ns: ns});\n         if !is_none(cached) { ret cached; }\n         let path = [name];\n-        if defid.node != -1 { path = e.ext_map.get(defid) + path; }\n+        if defid.node != crate_mod { path = e.ext_map.get(defid) + path; }\n         let fnd = lookup_external(e, defid.crate, path, ns);\n         if !is_none(fnd) {\n             e.ext_cache.insert({did: defid, ident: name, ns: ns},\n@@ -958,7 +955,7 @@ fn found_view_item(e: env, vi: @ast::view_item) -> option::t<def> {\n     alt vi.node {\n       ast::view_item_use(_, _, id) {\n         let cnum = cstore::get_use_stmt_cnum(e.cstore, id);\n-        ret some(ast::def_mod({crate: cnum, node: -1}));\n+        ret some(ast::def_mod({crate: cnum, node: crate_mod}));\n       }\n     }\n }"}]}