{"sha": "2c21f348a45f593ed4452fab9d083283cd4e7ce0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMjFmMzQ4YTQ1ZjU5M2VkNDQ1MmZhYjlkMDgzMjgzY2Q0ZTdjZTA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-14T23:47:11Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-12-15T01:09:44Z"}, "message": "Rewrite core::vec::shift to not allocate", "tree": {"sha": "c2322eb92d626b53e310ac7f9d5c4d1e2c2b2dc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2322eb92d626b53e310ac7f9d5c4d1e2c2b2dc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c21f348a45f593ed4452fab9d083283cd4e7ce0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c21f348a45f593ed4452fab9d083283cd4e7ce0", "html_url": "https://github.com/rust-lang/rust/commit/2c21f348a45f593ed4452fab9d083283cd4e7ce0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c21f348a45f593ed4452fab9d083283cd4e7ce0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbc52ce505eb5da181a658606a6129962a90c403", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc52ce505eb5da181a658606a6129962a90c403", "html_url": "https://github.com/rust-lang/rust/commit/dbc52ce505eb5da181a658606a6129962a90c403"}], "stats": {"total": 61, "additions": 42, "deletions": 19}, "files": [{"sha": "d54d9cf453b9695add84b9cea864f83aa93e2d4e", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 42, "deletions": 19, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/2c21f348a45f593ed4452fab9d083283cd4e7ce0/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c21f348a45f593ed4452fab9d083283cd4e7ce0/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=2c21f348a45f593ed4452fab9d083283cd4e7ce0", "patch": "@@ -398,28 +398,51 @@ pub fn rsplitn<T: Copy>(v: &[T], n: uint, f: fn(t: &T) -> bool) -> ~[~[T]] {\n // Mutators\n \n /// Removes the first element from a vector and return it\n-pub fn shift<T>(v: &mut ~[T]) -> T {\n-    let ln = v.len();\n-    assert (ln > 0);\n+pub fn shift<T>(v: &mut ~[T]) -> T unsafe {\n \n-    let mut vv = ~[];\n-    *v <-> vv;\n+    assert v.is_not_empty();\n \n-    unsafe {\n-        let mut rr;\n-        {\n-            let vv = raw::to_ptr(vv);\n-            rr = move *vv;\n-\n-            for uint::range(1, ln) |i| {\n-                let r = move *ptr::offset(vv, i);\n-                v.push(r);\n-            }\n-        }\n-        raw::set_len(&mut vv, 0);\n+    if v.len() == 1 { return v.pop() }\n \n-        rr\n+    if v.len() == 2 {\n+        let last = v.pop();\n+        let first = v.pop();\n+        v.push(last);\n+        return first;\n     }\n+\n+    let ln = v.len();\n+    let next_ln = v.len() - 1;\n+\n+    // Save the last element. We're going to overwrite its position\n+    let mut work_elt = v.pop();\n+    // We still should have room to work where what last element was\n+    assert capacity(v) >= ln;\n+    // Pretend like we have the original length so we can use\n+    // the vector memcpy to overwrite the hole we just made\n+    raw::set_len(v, ln);\n+\n+    // Memcopy the head element (the one we want) to the location we just\n+    // popped. For the moment it unsafely exists at both the head and last\n+    // positions\n+    let first_slice = view(*v, 0, 1);\n+    let last_slice = mut_view(*v, next_ln, ln);\n+    raw::memcpy(last_slice, first_slice, 1);\n+\n+    // Memcopy everything to the left one element\n+    let init_slice = mut_view(*v, 0, next_ln);\n+    let tail_slice = view(*v, 1, ln);\n+    raw::memcpy(init_slice, tail_slice, next_ln);\n+\n+    // Set the new length. Now the vector is back to normal\n+    raw::set_len(v, next_ln);\n+\n+    // Swap out the element we want from the end\n+    let vp = raw::to_mut_ptr(*v);\n+    let vp = ptr::mut_offset(vp, next_ln - 1);\n+    *vp <-> work_elt;\n+\n+    return work_elt;\n }\n \n /// Prepend an element to the vector\n@@ -1760,7 +1783,7 @@ pub struct UnboxedVecRepr {\n }\n \n /// Unsafe operations\n-mod raw {\n+pub mod raw {\n \n     /// The internal representation of a (boxed) vector\n     pub struct VecRepr {"}]}