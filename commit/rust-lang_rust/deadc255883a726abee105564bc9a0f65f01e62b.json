{"sha": "deadc255883a726abee105564bc9a0f65f01e62b", "node_id": "C_kwDOAAsO6NoAKGRlYWRjMjU1ODgzYTcyNmFiZWUxMDU1NjRiYzlhMGY2NWYwMWU2MmI", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-11-02T14:43:31Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2022-01-28T22:02:40Z"}, "message": "Factor out differing_macro_contexts", "tree": {"sha": "660bcf8e38560ebb28ccc77a8a2dcd8e05c26e7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/660bcf8e38560ebb28ccc77a8a2dcd8e05c26e7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deadc255883a726abee105564bc9a0f65f01e62b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deadc255883a726abee105564bc9a0f65f01e62b", "html_url": "https://github.com/rust-lang/rust/commit/deadc255883a726abee105564bc9a0f65f01e62b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deadc255883a726abee105564bc9a0f65f01e62b/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a", "url": "https://api.github.com/repos/rust-lang/rust/commits/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a", "html_url": "https://github.com/rust-lang/rust/commit/66a83d33ea9a39d1fc0f4c2ca058c0ce4884a71a"}], "stats": {"total": 55, "additions": 24, "deletions": 31}, "files": [{"sha": "4c4dd85d518a62ae9db0938d05f56f8fdfed47dc", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/deadc255883a726abee105564bc9a0f65f01e62b/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deadc255883a726abee105564bc9a0f65f01e62b/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=deadc255883a726abee105564bc9a0f65f01e62b", "patch": "@@ -1,8 +1,8 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::get_parent_expr;\n use clippy_utils::higher;\n use clippy_utils::source::snippet_block_with_applicability;\n use clippy_utils::ty::implements_trait;\n-use clippy_utils::{differing_macro_contexts, get_parent_expr};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n@@ -97,7 +97,7 @@ impl<'tcx> LateLintPass<'tcx> for BlocksInIfConditions {\n                         if let Some(ex) = &block.expr {\n                             // don't dig into the expression here, just suggest that they remove\n                             // the block\n-                            if expr.span.from_expansion() || differing_macro_contexts(expr.span, ex.span) {\n+                            if expr.span.from_expansion() || ex.span.from_expansion() {\n                                 return;\n                             }\n                             let mut applicability = Applicability::MachineApplicable;\n@@ -122,7 +122,7 @@ impl<'tcx> LateLintPass<'tcx> for BlocksInIfConditions {\n                         }\n                     } else {\n                         let span = block.expr.as_ref().map_or_else(|| block.stmts[0].span, |e| e.span);\n-                        if span.from_expansion() || differing_macro_contexts(expr.span, span) {\n+                        if span.from_expansion() || expr.span.from_expansion() {\n                             return;\n                         }\n                         // move block higher"}, {"sha": "57964b8d48ea9c4904282e191e097b044b140534", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/deadc255883a726abee105564bc9a0f65f01e62b/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deadc255883a726abee105564bc9a0f65f01e62b/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=deadc255883a726abee105564bc9a0f65f01e62b", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note};\n-use clippy_utils::differing_macro_contexts;\n use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::ast::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n@@ -135,7 +134,7 @@ impl EarlyLintPass for Formatting {\n /// Implementation of the `SUSPICIOUS_ASSIGNMENT_FORMATTING` lint.\n fn check_assign(cx: &EarlyContext<'_>, expr: &Expr) {\n     if let ExprKind::Assign(ref lhs, ref rhs, _) = expr.kind {\n-        if !differing_macro_contexts(lhs.span, rhs.span) && !lhs.span.from_expansion() {\n+        if !lhs.span.from_expansion() && !rhs.span.from_expansion() {\n             let eq_span = lhs.span.between(rhs.span);\n             if let ExprKind::Unary(op, ref sub_rhs) = rhs.kind {\n                 if let Some(eq_snippet) = snippet_opt(cx, eq_span) {\n@@ -165,7 +164,7 @@ fn check_assign(cx: &EarlyContext<'_>, expr: &Expr) {\n fn check_unop(cx: &EarlyContext<'_>, expr: &Expr) {\n     if_chain! {\n         if let ExprKind::Binary(ref binop, ref lhs, ref rhs) = expr.kind;\n-        if !differing_macro_contexts(lhs.span, rhs.span) && !lhs.span.from_expansion();\n+        if !lhs.span.from_expansion() && !rhs.span.from_expansion();\n         // span between BinOp LHS and RHS\n         let binop_span = lhs.span.between(rhs.span);\n         // if RHS is an UnOp\n@@ -206,8 +205,8 @@ fn check_else(cx: &EarlyContext<'_>, expr: &Expr) {\n     if_chain! {\n         if let ExprKind::If(_, then, Some(else_)) = &expr.kind;\n         if is_block(else_) || is_if(else_);\n-        if !differing_macro_contexts(then.span, else_.span);\n-        if !then.span.from_expansion() && !in_external_macro(cx.sess(), expr.span);\n+        if !then.span.from_expansion() && !else_.span.from_expansion();\n+        if !in_external_macro(cx.sess(), expr.span);\n \n         // workaround for rust-lang/rust#43081\n         if expr.span.lo().0 != 0 && expr.span.hi().0 != 0;\n@@ -268,7 +267,7 @@ fn check_array(cx: &EarlyContext<'_>, expr: &Expr) {\n         for element in array {\n             if_chain! {\n                 if let ExprKind::Binary(ref op, ref lhs, _) = element.kind;\n-                if has_unary_equivalent(op.node) && !differing_macro_contexts(lhs.span, op.span);\n+                if has_unary_equivalent(op.node) && lhs.span.ctxt() == op.span.ctxt();\n                 let space_span = lhs.span.between(op.span);\n                 if let Some(space_snippet) = snippet_opt(cx, space_span);\n                 let lint_span = lhs.span.with_lo(lhs.span.hi());\n@@ -291,8 +290,7 @@ fn check_array(cx: &EarlyContext<'_>, expr: &Expr) {\n \n fn check_missing_else(cx: &EarlyContext<'_>, first: &Expr, second: &Expr) {\n     if_chain! {\n-        if !differing_macro_contexts(first.span, second.span);\n-        if !first.span.from_expansion();\n+        if !first.span.from_expansion() && !second.span.from_expansion();\n         if let ExprKind::If(cond_expr, ..) = &first.kind;\n         if is_block(second) || is_if(second);\n "}, {"sha": "3fb7e5dfd6cdcaf8d9ffb2ca65c640a1d9e40035", "filename": "clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/deadc255883a726abee105564bc9a0f65f01e62b/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deadc255883a726abee105564bc9a0f65f01e62b/clippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=deadc255883a726abee105564bc9a0f65f01e62b", "patch": "@@ -17,7 +17,6 @@ use rustc_typeck::hir_ty_to_ty;\n use if_chain::if_chain;\n \n use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n-use clippy_utils::differing_macro_contexts;\n use clippy_utils::source::{snippet, snippet_opt};\n use clippy_utils::ty::is_type_diagnostic_item;\n \n@@ -123,7 +122,7 @@ impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n                 vis.visit_ty(impl_.self_ty);\n \n                 for target in &vis.found {\n-                    if differing_macro_contexts(item.span, target.span()) {\n+                    if item.span.ctxt() != target.span().ctxt() {\n                         return;\n                     }\n "}, {"sha": "6c641af59f92b9c6a3f1b6941c01305f8b8bd464", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/deadc255883a726abee105564bc9a0f65f01e62b/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deadc255883a726abee105564bc9a0f65f01e62b/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=deadc255883a726abee105564bc9a0f65f01e62b", "patch": "@@ -1,5 +1,4 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::differing_macro_contexts;\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::ty::is_copy;\n use clippy_utils::ty::is_type_diagnostic_item;\n@@ -48,7 +47,7 @@ pub(super) fn check<'tcx>(\n             }\n         }\n \n-        if differing_macro_contexts(unwrap_arg.span, map_span) {\n+        if unwrap_arg.span.ctxt() != map_span.ctxt() {\n             return;\n         }\n "}, {"sha": "1885f3ca414dfe9dbef2a600fc961cf4f6b9ebb5", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deadc255883a726abee105564bc9a0f65f01e62b/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deadc255883a726abee105564bc9a0f65f01e62b/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=deadc255883a726abee105564bc9a0f65f01e62b", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::source::snippet_with_applicability;\n use clippy_utils::sugg::Sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{can_mut_borrow_both, differing_macro_contexts, eq_expr_value, std_or_core};\n+use clippy_utils::{can_mut_borrow_both, eq_expr_value, std_or_core};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, PatKind, QPath, Stmt, StmtKind};\n@@ -172,7 +172,7 @@ fn check_suspicious_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n         if_chain! {\n             if let StmtKind::Semi(first) = w[0].kind;\n             if let StmtKind::Semi(second) = w[1].kind;\n-            if !differing_macro_contexts(first.span, second.span);\n+            if first.span.ctxt() == second.span.ctxt();\n             if let ExprKind::Assign(lhs0, rhs0, _) = first.kind;\n             if let ExprKind::Assign(lhs1, rhs1, _) = second.kind;\n             if eq_expr_value(cx, lhs0, rhs1);"}, {"sha": "9b9e25326f9663b11e84984b0acb71e59ffc1cfa", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/deadc255883a726abee105564bc9a0f65f01e62b/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deadc255883a726abee105564bc9a0f65f01e62b/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=deadc255883a726abee105564bc9a0f65f01e62b", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::higher;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{differing_macro_contexts, path_to_local, usage::is_potentially_mutated};\n+use clippy_utils::{path_to_local, usage::is_potentially_mutated};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, Visitor};\n@@ -238,8 +238,9 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                 if let Some(unwrappable) = self.unwrappables.iter()\n                     .find(|u| u.local_id == id);\n                 // Span contexts should not differ with the conditional branch\n-                if !differing_macro_contexts(unwrappable.branch.span, expr.span);\n-                if !differing_macro_contexts(unwrappable.branch.span, unwrappable.check.span);\n+                let span_ctxt = expr.span.ctxt();\n+                if unwrappable.branch.span.ctxt() == span_ctxt;\n+                if unwrappable.check.span.ctxt() == span_ctxt;\n                 then {\n                     if call_to_unwrap == unwrappable.safe_to_unwrap {\n                         let is_entire_condition = unwrappable.is_entire_condition;"}, {"sha": "a2b10c12eb90cbcf8871bcdfda3691e452d78cbe", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/deadc255883a726abee105564bc9a0f65f01e62b/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deadc255883a726abee105564bc9a0f65f01e62b/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=deadc255883a726abee105564bc9a0f65f01e62b", "patch": "@@ -1,5 +1,4 @@\n use crate::consts::{constant_context, constant_simple};\n-use crate::differing_macro_contexts;\n use crate::source::snippet_opt;\n use rustc_ast::ast::InlineAsmTemplatePiece;\n use rustc_data_structures::fx::FxHasher;\n@@ -186,7 +185,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n \n     #[allow(clippy::similar_names)]\n     pub fn eq_expr(&mut self, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n-        if !self.inner.allow_side_effects && differing_macro_contexts(left.span, right.span) {\n+        if !self.inner.allow_side_effects && left.span.ctxt() != right.span.ctxt() {\n             return false;\n         }\n "}, {"sha": "f10f130bc32beb2c318e96f764e327e328fc8973", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/deadc255883a726abee105564bc9a0f65f01e62b/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deadc255883a726abee105564bc9a0f65f01e62b/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=deadc255883a726abee105564bc9a0f65f01e62b", "patch": "@@ -134,13 +134,6 @@ macro_rules! extract_msrv_attr {\n     };\n }\n \n-/// Returns `true` if the two spans come from differing expansions (i.e., one is\n-/// from a macro and one isn't).\n-#[must_use]\n-pub fn differing_macro_contexts(lhs: Span, rhs: Span) -> bool {\n-    rhs.ctxt() != lhs.ctxt()\n-}\n-\n /// If the given expression is a local binding, find the initializer expression.\n /// If that initializer expression is another local binding, find its initializer again.\n /// This process repeats as long as possible (but usually no more than once). Initializer"}, {"sha": "36c454745ba06a5cc91cccb178fc987950c830f4", "filename": "doc/common_tools_writing_lints.md", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/deadc255883a726abee105564bc9a0f65f01e62b/doc%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/deadc255883a726abee105564bc9a0f65f01e62b/doc%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcommon_tools_writing_lints.md?ref=deadc255883a726abee105564bc9a0f65f01e62b", "patch": "@@ -235,7 +235,11 @@ Use the following functions to deal with macros:\n    assert_eq!(in_external_macro(cx.sess(), match_span), true);\n    ```\n \n-- `differing_macro_contexts()`: returns true if the two given spans are not from the same context\n+- `span.ctxt()`: the span's context represents whether it is from expansion, and if so, what expanded it\n+\n+One thing `SpanContext` is useful for is to check if two spans are in the same context. For example,\n+in `a == b`, `a` and `b` have the same context. In a `macro_rules!` with `a == $b`, `$b` is expanded to some\n+expression with a different context from `a`.\n \n    ```rust\n    macro_rules! m {\n@@ -252,7 +256,7 @@ Use the following functions to deal with macros:\n    // These spans are not from the same context\n    // x.is_some() is from inside the macro\n    // x.unwrap() is from outside the macro\n-   assert_eq!(differing_macro_contexts(x_is_some_span, x_unwrap_span), true);\n+   assert_eq!(x_is_some_span.ctxt(), x_unwrap_span.ctxt());\n    ```\n \n [TyS]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty/struct.TyS.html"}]}