{"sha": "3e528b85f9a3ed25b5dd709aa30dc679ccc5817f", "node_id": "C_kwDOAAsO6NoAKDNlNTI4Yjg1ZjlhM2VkMjViNWRkNzA5YWEzMGRjNjc5Y2NjNTgxN2Y", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-18T10:03:15Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-05-18T10:03:15Z"}, "message": "Fix cstring literals construct &CStr not &str", "tree": {"sha": "30bb67b479c3c6ba5d42fecda6f957b23a3f8e1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30bb67b479c3c6ba5d42fecda6f957b23a3f8e1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e528b85f9a3ed25b5dd709aa30dc679ccc5817f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e528b85f9a3ed25b5dd709aa30dc679ccc5817f", "html_url": "https://github.com/rust-lang/rust/commit/3e528b85f9a3ed25b5dd709aa30dc679ccc5817f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e528b85f9a3ed25b5dd709aa30dc679ccc5817f/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eab295cc73a876eeaa1424b3ed7a76bcf46a5fec", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab295cc73a876eeaa1424b3ed7a76bcf46a5fec", "html_url": "https://github.com/rust-lang/rust/commit/eab295cc73a876eeaa1424b3ed7a76bcf46a5fec"}], "stats": {"total": 335, "additions": 205, "deletions": 130}, "files": [{"sha": "0e9ac58fbaaad8fbbd258683261e22f208d16f3f", "filename": "crates/hir-def/src/lang_item.rs", "status": "modified", "additions": 142, "deletions": 128, "changes": 270, "blob_url": "https://github.com/rust-lang/rust/blob/3e528b85f9a3ed25b5dd709aa30dc679ccc5817f/crates%2Fhir-def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e528b85f9a3ed25b5dd709aa30dc679ccc5817f/crates%2Fhir-def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Flang_item.rs?ref=3e528b85f9a3ed25b5dd709aa30dc679ccc5817f", "patch": "@@ -199,7 +199,7 @@ pub enum GenericRequirement {\n \n macro_rules! language_item_table {\n     (\n-        $( $(#[$attr:meta])* $variant:ident, $name:ident, $method:ident, $target:expr, $generics:expr; )*\n+        $( $(#[$attr:meta])* $variant:ident, $module:ident :: $name:ident, $method:ident, $target:expr, $generics:expr; )*\n     ) => {\n \n         /// A representation of all the valid language items in Rust.\n@@ -244,82 +244,86 @@ impl LangItem {\n \n language_item_table! {\n //  Variant name,            Name,                     Getter method name,         Target                  Generic requirements;\n-    Sized,                   sized,               sized_trait,                Target::Trait,          GenericRequirement::Exact(0);\n-    Unsize,                  unsize,              unsize_trait,               Target::Trait,          GenericRequirement::Minimum(1);\n+    Sized,                   sym::sized,               sized_trait,                Target::Trait,          GenericRequirement::Exact(0);\n+    Unsize,                  sym::unsize,              unsize_trait,               Target::Trait,          GenericRequirement::Minimum(1);\n     /// Trait injected by `#[derive(PartialEq)]`, (i.e. \"Partial EQ\").\n-    StructuralPeq,           structural_peq,      structural_peq_trait,       Target::Trait,          GenericRequirement::None;\n+    StructuralPeq,           sym::structural_peq,      structural_peq_trait,       Target::Trait,          GenericRequirement::None;\n     /// Trait injected by `#[derive(Eq)]`, (i.e. \"Total EQ\"; no, I will not apologize).\n-    StructuralTeq,           structural_teq,      structural_teq_trait,       Target::Trait,          GenericRequirement::None;\n-    Copy,                    copy,                copy_trait,                 Target::Trait,          GenericRequirement::Exact(0);\n-    Clone,                   clone,               clone_trait,                Target::Trait,          GenericRequirement::None;\n-    Sync,                    sync,                sync_trait,                 Target::Trait,          GenericRequirement::Exact(0);\n-    DiscriminantKind,        discriminant_kind,   discriminant_kind_trait,    Target::Trait,          GenericRequirement::None;\n+    StructuralTeq,           sym::structural_teq,      structural_teq_trait,       Target::Trait,          GenericRequirement::None;\n+    Copy,                    sym::copy,                copy_trait,                 Target::Trait,          GenericRequirement::Exact(0);\n+    Clone,                   sym::clone,               clone_trait,                Target::Trait,          GenericRequirement::None;\n+    Sync,                    sym::sync,                sync_trait,                 Target::Trait,          GenericRequirement::Exact(0);\n+    DiscriminantKind,        sym::discriminant_kind,   discriminant_kind_trait,    Target::Trait,          GenericRequirement::None;\n     /// The associated item of the [`DiscriminantKind`] trait.\n-    Discriminant,            discriminant_type,   discriminant_type,          Target::AssocTy,        GenericRequirement::None;\n+    Discriminant,            sym::discriminant_type,   discriminant_type,          Target::AssocTy,        GenericRequirement::None;\n \n-    PointeeTrait,            pointee_trait,       pointee_trait,              Target::Trait,          GenericRequirement::None;\n-    Metadata,                metadata_type,       metadata_type,              Target::AssocTy,        GenericRequirement::None;\n-    DynMetadata,             dyn_metadata,        dyn_metadata,               Target::Struct,         GenericRequirement::None;\n+    PointeeTrait,            sym::pointee_trait,       pointee_trait,              Target::Trait,          GenericRequirement::None;\n+    Metadata,                sym::metadata_type,       metadata_type,              Target::AssocTy,        GenericRequirement::None;\n+    DynMetadata,             sym::dyn_metadata,        dyn_metadata,               Target::Struct,         GenericRequirement::None;\n \n-    Freeze,                  freeze,              freeze_trait,               Target::Trait,          GenericRequirement::Exact(0);\n+    Freeze,                  sym::freeze,              freeze_trait,               Target::Trait,          GenericRequirement::Exact(0);\n \n-    Drop,                    drop,                drop_trait,                 Target::Trait,          GenericRequirement::None;\n-    Destruct,                destruct,            destruct_trait,             Target::Trait,          GenericRequirement::None;\n+    FnPtrTrait,              sym::fn_ptr_trait,        fn_ptr_trait,               Target::Trait,          GenericRequirement::Exact(0);\n+    FnPtrAddr,               sym::fn_ptr_addr,         fn_ptr_addr,                Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n \n-    CoerceUnsized,           coerce_unsized,      coerce_unsized_trait,       Target::Trait,          GenericRequirement::Minimum(1);\n-    DispatchFromDyn,         dispatch_from_dyn,   dispatch_from_dyn_trait,    Target::Trait,          GenericRequirement::Minimum(1);\n+    Drop,                    sym::drop,                drop_trait,                 Target::Trait,          GenericRequirement::None;\n+    Destruct,                sym::destruct,            destruct_trait,             Target::Trait,          GenericRequirement::None;\n+\n+    CoerceUnsized,           sym::coerce_unsized,      coerce_unsized_trait,       Target::Trait,          GenericRequirement::Minimum(1);\n+    DispatchFromDyn,         sym::dispatch_from_dyn,   dispatch_from_dyn_trait,    Target::Trait,          GenericRequirement::Minimum(1);\n \n     // language items relating to transmutability\n-    TransmuteOpts,           transmute_opts,      transmute_opts,             Target::Struct,         GenericRequirement::Exact(0);\n-    TransmuteTrait,          transmute_trait,     transmute_trait,            Target::Trait,          GenericRequirement::Exact(3);\n-\n-    Add,                     add,                 add_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Sub,                     sub,                 sub_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Mul,                     mul,                 mul_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Div,                     div,                 div_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Rem,                     rem,                 rem_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Neg,                     neg,                 neg_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n-    Not,                     not,                 not_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n-    BitXor,                  bitxor,              bitxor_trait,               Target::Trait,          GenericRequirement::Exact(1);\n-    BitAnd,                  bitand,              bitand_trait,               Target::Trait,          GenericRequirement::Exact(1);\n-    BitOr,                   bitor,               bitor_trait,                Target::Trait,          GenericRequirement::Exact(1);\n-    Shl,                     shl,                 shl_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    Shr,                     shr,                 shr_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n-    AddAssign,               add_assign,          add_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    SubAssign,               sub_assign,          sub_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    MulAssign,               mul_assign,          mul_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    DivAssign,               div_assign,          div_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    RemAssign,               rem_assign,          rem_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    BitXorAssign,            bitxor_assign,       bitxor_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n-    BitAndAssign,            bitand_assign,       bitand_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n-    BitOrAssign,             bitor_assign,        bitor_assign_trait,         Target::Trait,          GenericRequirement::Exact(1);\n-    ShlAssign,               shl_assign,          shl_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    ShrAssign,               shr_assign,          shr_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n-    Index,                   index,               index_trait,                Target::Trait,          GenericRequirement::Exact(1);\n-    IndexMut,                index_mut,           index_mut_trait,            Target::Trait,          GenericRequirement::Exact(1);\n-\n-    UnsafeCell,              unsafe_cell,         unsafe_cell_type,           Target::Struct,         GenericRequirement::None;\n-    VaList,                  va_list,             va_list,                    Target::Struct,         GenericRequirement::None;\n-\n-    Deref,                   deref,               deref_trait,                Target::Trait,          GenericRequirement::Exact(0);\n-    DerefMut,                deref_mut,           deref_mut_trait,            Target::Trait,          GenericRequirement::Exact(0);\n-    DerefTarget,             deref_target,        deref_target,               Target::AssocTy,        GenericRequirement::None;\n-    Receiver,                receiver,            receiver_trait,             Target::Trait,          GenericRequirement::None;\n-\n-    Fn,                      fn,                  fn_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n-    FnMut,                   fn_mut,              fn_mut_trait,               Target::Trait,          GenericRequirement::Exact(1);\n-    FnOnce,                  fn_once,             fn_once_trait,              Target::Trait,          GenericRequirement::Exact(1);\n-\n-    FnOnceOutput,            fn_once_output,      fn_once_output,             Target::AssocTy,        GenericRequirement::None;\n-\n-    Future,                  future_trait,        future_trait,               Target::Trait,          GenericRequirement::Exact(0);\n-    GeneratorState,          generator_state,     gen_state,                  Target::Enum,           GenericRequirement::None;\n-    Generator,               generator,           gen_trait,                  Target::Trait,          GenericRequirement::Minimum(1);\n-    Unpin,                   unpin,               unpin_trait,                Target::Trait,          GenericRequirement::None;\n-    Pin,                     pin,                 pin_type,                   Target::Struct,         GenericRequirement::None;\n-\n-    PartialEq,               eq,                  eq_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n-    PartialOrd,              partial_ord,         partial_ord_trait,          Target::Trait,          GenericRequirement::Exact(1);\n+    TransmuteOpts,           sym::transmute_opts,      transmute_opts,             Target::Struct,         GenericRequirement::Exact(0);\n+    TransmuteTrait,          sym::transmute_trait,     transmute_trait,            Target::Trait,          GenericRequirement::Exact(3);\n+\n+    Add,                     sym::add,                 add_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Sub,                     sym::sub,                 sub_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Mul,                     sym::mul,                 mul_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Div,                     sym::div,                 div_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Rem,                     sym::rem,                 rem_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Neg,                     sym::neg,                 neg_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n+    Not,                     sym::not,                 not_trait,                  Target::Trait,          GenericRequirement::Exact(0);\n+    BitXor,                  sym::bitxor,              bitxor_trait,               Target::Trait,          GenericRequirement::Exact(1);\n+    BitAnd,                  sym::bitand,              bitand_trait,               Target::Trait,          GenericRequirement::Exact(1);\n+    BitOr,                   sym::bitor,               bitor_trait,                Target::Trait,          GenericRequirement::Exact(1);\n+    Shl,                     sym::shl,                 shl_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    Shr,                     sym::shr,                 shr_trait,                  Target::Trait,          GenericRequirement::Exact(1);\n+    AddAssign,               sym::add_assign,          add_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    SubAssign,               sym::sub_assign,          sub_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    MulAssign,               sym::mul_assign,          mul_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    DivAssign,               sym::div_assign,          div_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    RemAssign,               sym::rem_assign,          rem_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    BitXorAssign,            sym::bitxor_assign,       bitxor_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n+    BitAndAssign,            sym::bitand_assign,       bitand_assign_trait,        Target::Trait,          GenericRequirement::Exact(1);\n+    BitOrAssign,             sym::bitor_assign,        bitor_assign_trait,         Target::Trait,          GenericRequirement::Exact(1);\n+    ShlAssign,               sym::shl_assign,          shl_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    ShrAssign,               sym::shr_assign,          shr_assign_trait,           Target::Trait,          GenericRequirement::Exact(1);\n+    Index,                   sym::index,               index_trait,                Target::Trait,          GenericRequirement::Exact(1);\n+    IndexMut,                sym::index_mut,           index_mut_trait,            Target::Trait,          GenericRequirement::Exact(1);\n+\n+    UnsafeCell,              sym::unsafe_cell,         unsafe_cell_type,           Target::Struct,         GenericRequirement::None;\n+    VaList,                  sym::va_list,             va_list,                    Target::Struct,         GenericRequirement::None;\n+\n+    Deref,                   sym::deref,               deref_trait,                Target::Trait,          GenericRequirement::Exact(0);\n+    DerefMut,                sym::deref_mut,           deref_mut_trait,            Target::Trait,          GenericRequirement::Exact(0);\n+    DerefTarget,             sym::deref_target,        deref_target,               Target::AssocTy,        GenericRequirement::None;\n+    Receiver,                sym::receiver,            receiver_trait,             Target::Trait,          GenericRequirement::None;\n+\n+    Fn,                      kw::fn,                   fn_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n+    FnMut,                   sym::fn_mut,              fn_mut_trait,               Target::Trait,          GenericRequirement::Exact(1);\n+    FnOnce,                  sym::fn_once,             fn_once_trait,              Target::Trait,          GenericRequirement::Exact(1);\n+\n+    FnOnceOutput,            sym::fn_once_output,      fn_once_output,             Target::AssocTy,        GenericRequirement::None;\n+\n+    Future,                  sym::future_trait,        future_trait,               Target::Trait,          GenericRequirement::Exact(0);\n+    GeneratorState,          sym::generator_state,     gen_state,                  Target::Enum,           GenericRequirement::None;\n+    Generator,               sym::generator,           gen_trait,                  Target::Trait,          GenericRequirement::Minimum(1);\n+    Unpin,                   sym::unpin,               unpin_trait,                Target::Trait,          GenericRequirement::None;\n+    Pin,                     sym::pin,                 pin_type,                   Target::Struct,         GenericRequirement::None;\n+\n+    PartialEq,               sym::eq,                  eq_trait,                   Target::Trait,          GenericRequirement::Exact(1);\n+    PartialOrd,              sym::partial_ord,         partial_ord_trait,          Target::Trait,          GenericRequirement::Exact(1);\n+    CVoid,                   sym::c_void,              c_void,                     Target::Enum,           GenericRequirement::None;\n \n     // A number of panic-related lang items. The `panic` item corresponds to divide-by-zero and\n     // various panic cases with `match`. The `panic_bounds_check` item is for indexing arrays.\n@@ -328,93 +332,103 @@ language_item_table! {\n     // in the sense that a crate is not required to have it defined to use it, but a final product\n     // is required to define it somewhere. Additionally, there are restrictions on crates that use\n     // a weak lang item, but do not have it defined.\n-    Panic,                   panic,               panic_fn,                   Target::Fn,             GenericRequirement::Exact(0);\n-    PanicNounwind,           panic_nounwind,      panic_nounwind,             Target::Fn,             GenericRequirement::Exact(0);\n-    PanicFmt,                panic_fmt,           panic_fmt,                  Target::Fn,             GenericRequirement::None;\n-    PanicDisplay,            panic_display,       panic_display,              Target::Fn,             GenericRequirement::None;\n-    ConstPanicFmt,           const_panic_fmt,     const_panic_fmt,            Target::Fn,             GenericRequirement::None;\n-    PanicBoundsCheck,        panic_bounds_check,  panic_bounds_check_fn,      Target::Fn,             GenericRequirement::Exact(0);\n-    PanicInfo,               panic_info,          panic_info,                 Target::Struct,         GenericRequirement::None;\n-    PanicLocation,           panic_location,      panic_location,             Target::Struct,         GenericRequirement::None;\n-    PanicImpl,               panic_impl,          panic_impl,                 Target::Fn,             GenericRequirement::None;\n-    PanicCannotUnwind,       panic_cannot_unwind, panic_cannot_unwind,        Target::Fn,             GenericRequirement::Exact(0);\n+    Panic,                   sym::panic,               panic_fn,                   Target::Fn,             GenericRequirement::Exact(0);\n+    PanicNounwind,           sym::panic_nounwind,      panic_nounwind,             Target::Fn,             GenericRequirement::Exact(0);\n+    PanicFmt,                sym::panic_fmt,           panic_fmt,                  Target::Fn,             GenericRequirement::None;\n+    PanicDisplay,            sym::panic_display,       panic_display,              Target::Fn,             GenericRequirement::None;\n+    ConstPanicFmt,           sym::const_panic_fmt,     const_panic_fmt,            Target::Fn,             GenericRequirement::None;\n+    PanicBoundsCheck,        sym::panic_bounds_check,  panic_bounds_check_fn,      Target::Fn,             GenericRequirement::Exact(0);\n+    PanicMisalignedPointerDereference,        sym::panic_misaligned_pointer_dereference,  panic_misaligned_pointer_dereference_fn,      Target::Fn,             GenericRequirement::Exact(0);\n+    PanicInfo,               sym::panic_info,          panic_info,                 Target::Struct,         GenericRequirement::None;\n+    PanicLocation,           sym::panic_location,      panic_location,             Target::Struct,         GenericRequirement::None;\n+    PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn,             GenericRequirement::None;\n+    PanicCannotUnwind,       sym::panic_cannot_unwind, panic_cannot_unwind,        Target::Fn,             GenericRequirement::Exact(0);\n     /// libstd panic entry point. Necessary for const eval to be able to catch it\n-    BeginPanic,              begin_panic,         begin_panic_fn,             Target::Fn,             GenericRequirement::None;\n+    BeginPanic,              sym::begin_panic,         begin_panic_fn,             Target::Fn,             GenericRequirement::None;\n+\n+    // Lang items needed for `format_args!()`.\n+    FormatAlignment,         sym::format_alignment,    format_alignment,           Target::Enum,           GenericRequirement::None;\n+    FormatArgument,          sym::format_argument,     format_argument,            Target::Struct,         GenericRequirement::None;\n+    FormatArguments,         sym::format_arguments,    format_arguments,           Target::Struct,         GenericRequirement::None;\n+    FormatCount,             sym::format_count,        format_count,               Target::Enum,           GenericRequirement::None;\n+    FormatPlaceholder,       sym::format_placeholder,  format_placeholder,         Target::Struct,         GenericRequirement::None;\n+    FormatUnsafeArg,         sym::format_unsafe_arg,   format_unsafe_arg,          Target::Struct,         GenericRequirement::None;\n \n-    ExchangeMalloc,          exchange_malloc,     exchange_malloc_fn,         Target::Fn,             GenericRequirement::None;\n-    BoxFree,                 box_free,            box_free_fn,                Target::Fn,             GenericRequirement::Minimum(1);\n-    DropInPlace,             drop_in_place,       drop_in_place_fn,           Target::Fn,             GenericRequirement::Minimum(1);\n-    AllocLayout,             alloc_layout,        alloc_layout,               Target::Struct,         GenericRequirement::None;\n+    ExchangeMalloc,          sym::exchange_malloc,     exchange_malloc_fn,         Target::Fn,             GenericRequirement::None;\n+    BoxFree,                 sym::box_free,            box_free_fn,                Target::Fn,             GenericRequirement::Minimum(1);\n+    DropInPlace,             sym::drop_in_place,       drop_in_place_fn,           Target::Fn,             GenericRequirement::Minimum(1);\n+    AllocLayout,             sym::alloc_layout,        alloc_layout,               Target::Struct,         GenericRequirement::None;\n \n-    Start,                   start,               start_fn,                   Target::Fn,             GenericRequirement::Exact(1);\n+    Start,                   sym::start,               start_fn,                   Target::Fn,             GenericRequirement::Exact(1);\n \n-    EhPersonality,           eh_personality,      eh_personality,             Target::Fn,             GenericRequirement::None;\n-    EhCatchTypeinfo,         eh_catch_typeinfo,   eh_catch_typeinfo,          Target::Static,         GenericRequirement::None;\n+    EhPersonality,           sym::eh_personality,      eh_personality,             Target::Fn,             GenericRequirement::None;\n+    EhCatchTypeinfo,         sym::eh_catch_typeinfo,   eh_catch_typeinfo,          Target::Static,         GenericRequirement::None;\n \n-    OwnedBox,                owned_box,           owned_box,                  Target::Struct,         GenericRequirement::Minimum(1);\n+    OwnedBox,                sym::owned_box,           owned_box,                  Target::Struct,         GenericRequirement::Minimum(1);\n \n-    PhantomData,             phantom_data,        phantom_data,               Target::Struct,         GenericRequirement::Exact(1);\n+    PhantomData,             sym::phantom_data,        phantom_data,               Target::Struct,         GenericRequirement::Exact(1);\n \n-    ManuallyDrop,            manually_drop,       manually_drop,              Target::Struct,         GenericRequirement::None;\n+    ManuallyDrop,            sym::manually_drop,       manually_drop,              Target::Struct,         GenericRequirement::None;\n \n-    MaybeUninit,             maybe_uninit,        maybe_uninit,               Target::Union,          GenericRequirement::None;\n+    MaybeUninit,             sym::maybe_uninit,        maybe_uninit,               Target::Union,          GenericRequirement::None;\n \n     /// Align offset for stride != 1; must not panic.\n-    AlignOffset,             align_offset,        align_offset_fn,            Target::Fn,             GenericRequirement::None;\n+    AlignOffset,             sym::align_offset,        align_offset_fn,            Target::Fn,             GenericRequirement::None;\n \n-    Termination,             termination,         termination,                Target::Trait,          GenericRequirement::None;\n+    Termination,             sym::termination,         termination,                Target::Trait,          GenericRequirement::None;\n \n-    Try,                     Try,                 try_trait,                  Target::Trait,          GenericRequirement::None;\n+    Try,                     sym::Try,                 try_trait,                  Target::Trait,          GenericRequirement::None;\n \n-    Tuple,                   tuple_trait,         tuple_trait,                Target::Trait,          GenericRequirement::Exact(0);\n+    Tuple,                   sym::tuple_trait,         tuple_trait,                Target::Trait,          GenericRequirement::Exact(0);\n \n-    SliceLen,                slice_len_fn,        slice_len_fn,               Target::Method(MethodKind::Inherent), GenericRequirement::None;\n+    SliceLen,                sym::slice_len_fn,        slice_len_fn,               Target::Method(MethodKind::Inherent), GenericRequirement::None;\n \n     // Language items from AST lowering\n-    TryTraitFromResidual,    from_residual,       from_residual_fn,           Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n-    TryTraitFromOutput,      from_output,         from_output_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n-    TryTraitBranch,          branch,              branch_fn,                  Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n-    TryTraitFromYeet,        from_yeet,           from_yeet_fn,               Target::Fn,             GenericRequirement::None;\n+    TryTraitFromResidual,    sym::from_residual,       from_residual_fn,           Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    TryTraitFromOutput,      sym::from_output,         from_output_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    TryTraitBranch,          sym::branch,              branch_fn,                  Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    TryTraitFromYeet,        sym::from_yeet,           from_yeet_fn,               Target::Fn,             GenericRequirement::None;\n \n-    PointerSized,            pointer_sized,       pointer_sized,              Target::Trait,          GenericRequirement::Exact(0);\n+    PointerLike,             sym::pointer_like,        pointer_like,               Target::Trait,          GenericRequirement::Exact(0);\n \n-    Poll,                    Poll,                poll,                       Target::Enum,           GenericRequirement::None;\n-    PollReady,               Ready,               poll_ready_variant,         Target::Variant,        GenericRequirement::None;\n-    PollPending,             Pending,             poll_pending_variant,       Target::Variant,        GenericRequirement::None;\n+    ConstParamTy,            sym::const_param_ty,      const_param_ty_trait,       Target::Trait,          GenericRequirement::Exact(0);\n+\n+    Poll,                    sym::Poll,                poll,                       Target::Enum,           GenericRequirement::None;\n+    PollReady,               sym::Ready,               poll_ready_variant,         Target::Variant,        GenericRequirement::None;\n+    PollPending,             sym::Pending,             poll_pending_variant,       Target::Variant,        GenericRequirement::None;\n \n     // FIXME(swatinem): the following lang items are used for async lowering and\n     // should become obsolete eventually.\n-    ResumeTy,                ResumeTy,            resume_ty,                  Target::Struct,         GenericRequirement::None;\n-    IdentityFuture,          identity_future,     identity_future_fn,         Target::Fn,             GenericRequirement::None;\n-    GetContext,              get_context,         get_context_fn,             Target::Fn,             GenericRequirement::None;\n-\n-    Context,                 Context,             context,                    Target::Struct,         GenericRequirement::None;\n-    FuturePoll,              poll,                future_poll_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    ResumeTy,                sym::ResumeTy,            resume_ty,                  Target::Struct,         GenericRequirement::None;\n+    GetContext,              sym::get_context,         get_context_fn,             Target::Fn,             GenericRequirement::None;\n \n-    FromFrom,                from,                from_fn,                    Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    Context,                 sym::Context,             context,                    Target::Struct,         GenericRequirement::None;\n+    FuturePoll,              sym::poll,                future_poll_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n \n-    OptionSome,              Some,                option_some_variant,        Target::Variant,        GenericRequirement::None;\n-    OptionNone,              None,                option_none_variant,        Target::Variant,        GenericRequirement::None;\n+    Option,                  sym::Option,              option_type,                Target::Enum,           GenericRequirement::None;\n+    OptionSome,              sym::Some,                option_some_variant,        Target::Variant,        GenericRequirement::None;\n+    OptionNone,              sym::None,                option_none_variant,        Target::Variant,        GenericRequirement::None;\n \n-    ResultOk,                Ok,                  result_ok_variant,          Target::Variant,        GenericRequirement::None;\n-    ResultErr,               Err,                 result_err_variant,         Target::Variant,        GenericRequirement::None;\n+    ResultOk,                sym::Ok,                  result_ok_variant,          Target::Variant,        GenericRequirement::None;\n+    ResultErr,               sym::Err,                 result_err_variant,         Target::Variant,        GenericRequirement::None;\n \n-    ControlFlowContinue,     Continue,            cf_continue_variant,        Target::Variant,        GenericRequirement::None;\n-    ControlFlowBreak,        Break,               cf_break_variant,           Target::Variant,        GenericRequirement::None;\n+    ControlFlowContinue,     sym::Continue,            cf_continue_variant,        Target::Variant,        GenericRequirement::None;\n+    ControlFlowBreak,        sym::Break,               cf_break_variant,           Target::Variant,        GenericRequirement::None;\n \n-    IntoFutureIntoFuture,    into_future,         into_future_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n-    IntoIterIntoIter,        into_iter,           into_iter_fn,               Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n-    IteratorNext,            next,                next_fn,                    Target::Method(MethodKind::Trait { body: false}), GenericRequirement::None;\n+    IntoFutureIntoFuture,    sym::into_future,         into_future_fn,             Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    IntoIterIntoIter,        sym::into_iter,           into_iter_fn,               Target::Method(MethodKind::Trait { body: false }), GenericRequirement::None;\n+    IteratorNext,            sym::next,                next_fn,                    Target::Method(MethodKind::Trait { body: false}), GenericRequirement::None;\n \n-    PinNewUnchecked,         new_unchecked,       new_unchecked_fn,           Target::Method(MethodKind::Inherent), GenericRequirement::None;\n+    PinNewUnchecked,         sym::new_unchecked,       new_unchecked_fn,           Target::Method(MethodKind::Inherent), GenericRequirement::None;\n \n-    RangeFrom,               RangeFrom,           range_from_struct,          Target::Struct,         GenericRequirement::None;\n-    RangeFull,               RangeFull,           range_full_struct,          Target::Struct,         GenericRequirement::None;\n-    RangeInclusiveStruct,    RangeInclusive,      range_inclusive_struct,     Target::Struct,         GenericRequirement::None;\n-    RangeInclusiveNew,       range_inclusive_new, range_inclusive_new_method, Target::Method(MethodKind::Inherent), GenericRequirement::None;\n-    Range,                   Range,               range_struct,               Target::Struct,         GenericRequirement::None;\n-    RangeToInclusive,        RangeToInclusive,    range_to_inclusive_struct,  Target::Struct,         GenericRequirement::None;\n-    RangeTo,                 RangeTo,             range_to_struct,            Target::Struct,         GenericRequirement::None;\n+    RangeFrom,               sym::RangeFrom,           range_from_struct,          Target::Struct,         GenericRequirement::None;\n+    RangeFull,               sym::RangeFull,           range_full_struct,          Target::Struct,         GenericRequirement::None;\n+    RangeInclusiveStruct,    sym::RangeInclusive,      range_inclusive_struct,     Target::Struct,         GenericRequirement::None;\n+    RangeInclusiveNew,       sym::range_inclusive_new, range_inclusive_new_method, Target::Method(MethodKind::Inherent), GenericRequirement::None;\n+    Range,                   sym::Range,               range_struct,               Target::Struct,         GenericRequirement::None;\n+    RangeToInclusive,        sym::RangeToInclusive,    range_to_inclusive_struct,  Target::Struct,         GenericRequirement::None;\n+    RangeTo,                 sym::RangeTo,             range_to_struct,            Target::Struct,         GenericRequirement::None;\n \n-    String,                  String,              string,                     Target::Struct,         GenericRequirement::None;\n+    String,                  sym::String,              string,                     Target::Struct,         GenericRequirement::None;\n+    CStr,                    sym::CStr,                c_str,                      Target::Struct,         GenericRequirement::None;\n }"}, {"sha": "167854f3eddc40b6148a416baa5807a9850f19e6", "filename": "crates/hir-ty/src/consteval/tests.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3e528b85f9a3ed25b5dd709aa30dc679ccc5817f/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e528b85f9a3ed25b5dd709aa30dc679ccc5817f/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Fconsteval%2Ftests.rs?ref=3e528b85f9a3ed25b5dd709aa30dc679ccc5817f", "patch": "@@ -1829,6 +1829,38 @@ fn byte_string() {\n     );\n }\n \n+#[test]\n+fn c_string() {\n+    check_number(\n+        r#\"\n+//- minicore: index, slice\n+#[lang = \"CStr\"]\n+pub struct CStr {\n+    inner: [u8]\n+}\n+const GOAL: u8 = {\n+    let a = c\"hello\";\n+    a.inner[0]\n+};\n+    \"#,\n+        104,\n+    );\n+    check_number(\n+        r#\"\n+//- minicore: index, slice\n+#[lang = \"CStr\"]\n+pub struct CStr {\n+    inner: [u8]\n+}\n+const GOAL: u8 = {\n+    let a = c\"hello\";\n+    a.inner[6]\n+};\n+    \"#,\n+        0,\n+    );\n+}\n+\n #[test]\n fn consts() {\n     check_number("}, {"sha": "56438866de0db498512f87a066ec3408dce06eb6", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3e528b85f9a3ed25b5dd709aa30dc679ccc5817f/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e528b85f9a3ed25b5dd709aa30dc679ccc5817f/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=3e528b85f9a3ed25b5dd709aa30dc679ccc5817f", "patch": "@@ -13,7 +13,7 @@ use hir_def::{\n     hir::{\n         ArithOp, Array, BinaryOp, ClosureKind, Expr, ExprId, LabelId, Literal, Statement, UnaryOp,\n     },\n-    lang_item::LangItem,\n+    lang_item::{LangItem, LangItemTarget},\n     path::{GenericArg, GenericArgs},\n     BlockId, ConstParamId, FieldId, ItemContainerId, Lookup,\n };\n@@ -815,7 +815,7 @@ impl<'a> InferenceContext<'a> {\n             Expr::Array(array) => self.infer_expr_array(array, expected),\n             Expr::Literal(lit) => match lit {\n                 Literal::Bool(..) => self.result.standard_types.bool_.clone(),\n-                Literal::String(..) | Literal::CString(..) => {\n+                Literal::String(..) => {\n                     TyKind::Ref(Mutability::Not, static_lifetime(), TyKind::Str.intern(Interner))\n                         .intern(Interner)\n                 }\n@@ -831,6 +831,20 @@ impl<'a> InferenceContext<'a> {\n                     let array_type = TyKind::Array(byte_type, len).intern(Interner);\n                     TyKind::Ref(Mutability::Not, static_lifetime(), array_type).intern(Interner)\n                 }\n+                Literal::CString(..) => TyKind::Ref(\n+                    Mutability::Not,\n+                    static_lifetime(),\n+                    self.resolve_lang_item(LangItem::CStr)\n+                        .and_then(LangItemTarget::as_struct)\n+                        .map_or_else(\n+                            || self.err_ty(),\n+                            |strukt| {\n+                                TyKind::Adt(AdtId(strukt.into()), Substitution::empty(Interner))\n+                                    .intern(Interner)\n+                            },\n+                        ),\n+                )\n+                .intern(Interner),\n                 Literal::Char(..) => TyKind::Scalar(Scalar::Char).intern(Interner),\n                 Literal::Int(_v, ty) => match ty {\n                     Some(int_ty) => {"}, {"sha": "942d693140f7e596a1a80731c3b4424b36e73b39", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3e528b85f9a3ed25b5dd709aa30dc679ccc5817f/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e528b85f9a3ed25b5dd709aa30dc679ccc5817f/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=3e528b85f9a3ed25b5dd709aa30dc679ccc5817f", "patch": "@@ -3557,3 +3557,18 @@ fn main() {\n \"#,\n     );\n }\n+\n+#[test]\n+fn cstring_literals() {\n+    check_types(\n+        r#\"\n+#[lang = \"CStr\"]\n+pub struct CStr;\n+\n+fn main() {\n+    c\"ello\";\n+  //^^^^^^^ &CStr\n+}\n+\"#,\n+    );\n+}"}]}