{"sha": "58eb70a5e2ce6602e5685f5cc18ab2fe0c327020", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4ZWI3MGE1ZTJjZTY2MDJlNTY4NWY1Y2MxOGFiMmZlMGMzMjcwMjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-05T11:28:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-07-05T11:28:56Z"}, "message": "auto merge of #7554 : jld/rust/rm-ssoe, r=catamorphism", "tree": {"sha": "fad7223a868933e5832c7deaa9607fcd2f27941b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fad7223a868933e5832c7deaa9607fcd2f27941b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58eb70a5e2ce6602e5685f5cc18ab2fe0c327020", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58eb70a5e2ce6602e5685f5cc18ab2fe0c327020", "html_url": "https://github.com/rust-lang/rust/commit/58eb70a5e2ce6602e5685f5cc18ab2fe0c327020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58eb70a5e2ce6602e5685f5cc18ab2fe0c327020/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c50ee3916e049eb100f68a236bf99542f244b52", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c50ee3916e049eb100f68a236bf99542f244b52", "html_url": "https://github.com/rust-lang/rust/commit/8c50ee3916e049eb100f68a236bf99542f244b52"}, {"sha": "2f27d4316663dfecd47396d3655458602df28d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f27d4316663dfecd47396d3655458602df28d29", "html_url": "https://github.com/rust-lang/rust/commit/2f27d4316663dfecd47396d3655458602df28d29"}], "stats": {"total": 45, "additions": 1, "deletions": 44}, "files": [{"sha": "2cd313ff4315447ad062e83515297f2bce70f8d3", "filename": "src/librustc/middle/trans/machine.rs", "status": "modified", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/58eb70a5e2ce6602e5685f5cc18ab2fe0c327020/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58eb70a5e2ce6602e5685f5cc18ab2fe0c327020/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmachine.rs?ref=58eb70a5e2ce6602e5685f5cc18ab2fe0c327020", "patch": "@@ -14,9 +14,6 @@ use lib::llvm::{ValueRef};\n use lib::llvm::False;\n use lib::llvm::llvm;\n use middle::trans::common::*;\n-use middle::trans::type_of;\n-use middle::ty;\n-use util::ppaux::ty_to_str;\n \n use middle::trans::type_::Type;\n \n@@ -116,42 +113,3 @@ pub fn llalign_of(cx: &CrateContext, ty: Type) -> ValueRef {\n             llvm::LLVMAlignOf(ty.to_ref()), cx.int_type.to_ref(), False);\n     }\n }\n-\n-// Computes the size of the data part of an enum.\n-pub fn static_size_of_enum(cx: &mut CrateContext, t: ty::t) -> uint {\n-    if cx.enum_sizes.contains_key(&t) {\n-        return cx.enum_sizes.get_copy(&t);\n-    }\n-\n-    debug!(\"static_size_of_enum %s\", ty_to_str(cx.tcx, t));\n-\n-    match ty::get(t).sty {\n-        ty::ty_enum(tid, ref substs) => {\n-            // Compute max(variant sizes).\n-            let mut max_size = 0;\n-            let variants = ty::enum_variants(cx.tcx, tid);\n-            for variants.iter().advance |variant| {\n-                if variant.args.len() == 0 {\n-                    loop;\n-                }\n-\n-                let lltypes = variant.args.map(|&variant_arg| {\n-                    let substituted = ty::subst(cx.tcx, substs, variant_arg);\n-                    type_of::sizing_type_of(cx, substituted)\n-                });\n-\n-                debug!(\"static_size_of_enum: variant %s type %s\",\n-                       cx.tcx.sess.str_of(variant.name),\n-                       cx.tn.type_to_str(Type::struct_(lltypes, false)));\n-\n-                let this_size = llsize_of_real(cx, Type::struct_(lltypes, false));\n-                if max_size < this_size {\n-                    max_size = this_size;\n-                }\n-            }\n-            cx.enum_sizes.insert(t, max_size);\n-            return max_size;\n-        }\n-        _ => cx.sess.bug(\"static_size_of_enum called on non-enum\")\n-    }\n-}"}, {"sha": "e6d0d87ba73cf7882007dfa51cd03202110f0231", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/58eb70a5e2ce6602e5685f5cc18ab2fe0c327020/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58eb70a5e2ce6602e5685f5cc18ab2fe0c327020/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=58eb70a5e2ce6602e5685f5cc18ab2fe0c327020", "patch": "@@ -104,8 +104,7 @@ pub fn type_of_non_gc_box(cx: &mut CrateContext, t: ty::t) -> Type {\n //\n // (2) It won't make any recursive calls to determine the structure of the\n //     type behind pointers. This can help prevent infinite loops for\n-//     recursive types. For example, `static_size_of_enum()` relies on this\n-//     behavior.\n+//     recursive types. For example, enum types rely on this behavior.\n \n pub fn sizing_type_of(cx: &mut CrateContext, t: ty::t) -> Type {\n     match cx.llsizingtypes.find_copy(&t) {"}]}