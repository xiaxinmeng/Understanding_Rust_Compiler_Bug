{"sha": "03a73fa2cf5688a12fa5557170945a2a7c27436e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYTczZmEyY2Y1Njg4YTEyZmE1NTU3MTcwOTQ1YTJhN2MyNzQzNmU=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2020-01-05T21:32:15Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2020-02-12T14:30:51Z"}, "message": "Use IRBuilder to create memset\n\nTo avoid creating memsets with outdated signature. For some reason\nSROA chokes on this when using NewPM.", "tree": {"sha": "f1c6a93c49e1500b93cdb8dc700b89984fd23445", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1c6a93c49e1500b93cdb8dc700b89984fd23445"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03a73fa2cf5688a12fa5557170945a2a7c27436e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03a73fa2cf5688a12fa5557170945a2a7c27436e", "html_url": "https://github.com/rust-lang/rust/commit/03a73fa2cf5688a12fa5557170945a2a7c27436e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03a73fa2cf5688a12fa5557170945a2a7c27436e/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd5441faf4e56d136d7c05d5eb55b4a41396edaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5441faf4e56d136d7c05d5eb55b4a41396edaf", "html_url": "https://github.com/rust-lang/rust/commit/cd5441faf4e56d136d7c05d5eb55b4a41396edaf"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "f00460164daec8451e4a6200787ac406d22b8258", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/03a73fa2cf5688a12fa5557170945a2a7c27436e/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a73fa2cf5688a12fa5557170945a2a7c27436e/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=03a73fa2cf5688a12fa5557170945a2a7c27436e", "patch": "@@ -781,13 +781,18 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n         align: Align,\n         flags: MemFlags,\n     ) {\n-        let ptr_width = &self.sess().target.target.target_pointer_width;\n-        let intrinsic_key = format!(\"llvm.memset.p0i8.i{}\", ptr_width);\n-        let llintrinsicfn = self.get_intrinsic(&intrinsic_key);\n+        let is_volatile = flags.contains(MemFlags::VOLATILE);\n         let ptr = self.pointercast(ptr, self.type_i8p());\n-        let align = self.const_u32(align.bytes() as u32);\n-        let volatile = self.const_bool(flags.contains(MemFlags::VOLATILE));\n-        self.call(llintrinsicfn, &[ptr, fill_byte, size, align, volatile], None);\n+        unsafe {\n+            llvm::LLVMRustBuildMemSet(\n+                self.llbuilder,\n+                ptr,\n+                align.bytes() as c_uint,\n+                fill_byte,\n+                size,\n+                is_volatile,\n+            );\n+        }\n     }\n \n     fn select("}, {"sha": "9f5c8736efc0c8faa612d57df2538a3decb17afd", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/03a73fa2cf5688a12fa5557170945a2a7c27436e/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a73fa2cf5688a12fa5557170945a2a7c27436e/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=03a73fa2cf5688a12fa5557170945a2a7c27436e", "patch": "@@ -562,10 +562,6 @@ impl CodegenCx<'b, 'tcx> {\n             t_v8f64: t_f64, 8;\n         }\n \n-        ifn!(\"llvm.memset.p0i8.i16\", fn(i8p, t_i8, t_i16, t_i32, i1) -> void);\n-        ifn!(\"llvm.memset.p0i8.i32\", fn(i8p, t_i8, t_i32, t_i32, i1) -> void);\n-        ifn!(\"llvm.memset.p0i8.i64\", fn(i8p, t_i8, t_i64, t_i32, i1) -> void);\n-\n         ifn!(\"llvm.trap\", fn() -> void);\n         ifn!(\"llvm.debugtrap\", fn() -> void);\n         ifn!(\"llvm.frameaddress\", fn(t_i32) -> i8p);"}, {"sha": "cdb55b179a3a239a2ffbac2c8596db28d56fbfdd", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03a73fa2cf5688a12fa5557170945a2a7c27436e/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03a73fa2cf5688a12fa5557170945a2a7c27436e/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=03a73fa2cf5688a12fa5557170945a2a7c27436e", "patch": "@@ -1315,6 +1315,14 @@ extern \"C\" {\n         Size: &'a Value,\n         IsVolatile: bool,\n     ) -> &'a Value;\n+    pub fn LLVMRustBuildMemSet(\n+        B: &Builder<'a>,\n+        Dst: &'a Value,\n+        DstAlign: c_uint,\n+        Val: &'a Value,\n+        Size: &'a Value,\n+        IsVolatile: bool,\n+    ) -> &'a Value;\n     pub fn LLVMBuildSelect(\n         B: &Builder<'a>,\n         If: &'a Value,"}, {"sha": "49b6e1bfec38d1aa86144af2b3da3a89a777d67f", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/03a73fa2cf5688a12fa5557170945a2a7c27436e/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/03a73fa2cf5688a12fa5557170945a2a7c27436e/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=03a73fa2cf5688a12fa5557170945a2a7c27436e", "patch": "@@ -1296,6 +1296,14 @@ extern \"C\" LLVMValueRef LLVMRustBuildMemMove(LLVMBuilderRef B,\n #endif\n }\n \n+extern \"C\" LLVMValueRef LLVMRustBuildMemSet(LLVMBuilderRef B,\n+                                            LLVMValueRef Dst, unsigned DstAlign,\n+                                            LLVMValueRef Val,\n+                                            LLVMValueRef Size, bool IsVolatile) {\n+  return wrap(unwrap(B)->CreateMemSet(\n+      unwrap(Dst), unwrap(Val), unwrap(Size), DstAlign, IsVolatile));\n+}\n+\n extern \"C\" LLVMValueRef\n LLVMRustBuildInvoke(LLVMBuilderRef B, LLVMValueRef Fn, LLVMValueRef *Args,\n                     unsigned NumArgs, LLVMBasicBlockRef Then,"}]}