{"sha": "52fbf1989df18ba669f1542bb6706a42bb5db6f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZmJmMTk4OWRmMThiYTY2OWYxNTQyYmI2NzA2YTQyYmI1ZGI2ZjE=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-03T13:22:27Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-03T13:42:24Z"}, "message": "Add missing WRONG_PUB_SELF_CONVENTION in lint_array! and corresponding test", "tree": {"sha": "d9156243961d12e8dad2134a718a7f6efe1b2b05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9156243961d12e8dad2134a718a7f6efe1b2b05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52fbf1989df18ba669f1542bb6706a42bb5db6f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52fbf1989df18ba669f1542bb6706a42bb5db6f1", "html_url": "https://github.com/rust-lang/rust/commit/52fbf1989df18ba669f1542bb6706a42bb5db6f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52fbf1989df18ba669f1542bb6706a42bb5db6f1/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3ab0fb6e7c8a99b02355fec1708fd197156fbe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3ab0fb6e7c8a99b02355fec1708fd197156fbe4", "html_url": "https://github.com/rust-lang/rust/commit/e3ab0fb6e7c8a99b02355fec1708fd197156fbe4"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "e70d26820b187072fa87de0238da9d13629b16ac", "filename": "src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/52fbf1989df18ba669f1542bb6706a42bb5db6f1/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fbf1989df18ba669f1542bb6706a42bb5db6f1/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=52fbf1989df18ba669f1542bb6706a42bb5db6f1", "patch": "@@ -173,8 +173,8 @@ declare_lint!(pub SEARCH_IS_SOME, Warn,\n impl LintPass for MethodsPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(OPTION_UNWRAP_USED, RESULT_UNWRAP_USED, STR_TO_STRING, STRING_TO_STRING,\n-                    SHOULD_IMPLEMENT_TRAIT, WRONG_SELF_CONVENTION, OK_EXPECT, OPTION_MAP_UNWRAP_OR,\n-                    OPTION_MAP_UNWRAP_OR_ELSE)\n+                    SHOULD_IMPLEMENT_TRAIT, WRONG_SELF_CONVENTION, WRONG_PUB_SELF_CONVENTION,\n+                    OK_EXPECT, OPTION_MAP_UNWRAP_OR, OPTION_MAP_UNWRAP_OR_ELSE)\n     }\n }\n "}, {"sha": "ca896a6b94b830184913268ad2331beb1c50838d", "filename": "tests/compile-fail/wrong_self_convention.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/52fbf1989df18ba669f1542bb6706a42bb5db6f1/tests%2Fcompile-fail%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52fbf1989df18ba669f1542bb6706a42bb5db6f1/tests%2Fcompile-fail%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwrong_self_convention.rs?ref=52fbf1989df18ba669f1542bb6706a42bb5db6f1", "patch": "@@ -0,0 +1,45 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#![deny(wrong_self_convention)]\n+#![deny(wrong_pub_self_convention)]\n+#![allow(dead_code)]\n+\n+fn main() {}\n+\n+#[derive(Clone, Copy)]\n+struct Foo;\n+\n+impl Foo {\n+\n+    fn as_i32(self) {}\n+    fn into_i32(self) {}\n+    fn is_i32(self) {}\n+    fn to_i32(self) {}\n+    fn from_i32(self) {} //~ERROR: methods called `from_*` usually take no self\n+\n+    pub fn as_i64(self) {}\n+    pub fn into_i64(self) {}\n+    pub fn is_i64(self) {}\n+    pub fn to_i64(self) {}\n+    pub fn from_i64(self) {} //~ERROR: methods called `from_*` usually take no self\n+\n+}\n+\n+struct Bar;\n+\n+impl Bar {\n+\n+    fn as_i32(self) {} //~ERROR: methods called `as_*` usually take self by reference\n+    fn into_i32(&self) {} //~ERROR: methods called `into_*` usually take self by value\n+    fn is_i32(self) {} //~ERROR: methods called `is_*` usually take self by reference\n+    fn to_i32(self) {} //~ERROR: methods called `to_*` usually take self by reference\n+    fn from_i32(self) {} //~ERROR: methods called `from_*` usually take no self\n+\n+    pub fn as_i64(self) {} //~ERROR: methods called `as_*` usually take self by reference\n+    pub fn into_i64(&self) {} //~ERROR: methods called `into_*` usually take self by value\n+    pub fn is_i64(self) {} //~ERROR: methods called `is_*` usually take self by reference\n+    pub fn to_i64(self) {} //~ERROR: methods called `to_*` usually take self by reference\n+    pub fn from_i64(self) {} //~ERROR: methods called `from_*` usually take no self\n+\n+}"}]}