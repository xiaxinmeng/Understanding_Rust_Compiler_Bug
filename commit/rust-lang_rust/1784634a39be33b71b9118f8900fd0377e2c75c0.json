{"sha": "1784634a39be33b71b9118f8900fd0377e2c75c0", "node_id": "C_kwDOAAsO6NoAKDE3ODQ2MzRhMzliZTMzYjcxYjkxMThmODkwMGZkMDM3N2UyYzc1YzA", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-22T19:48:19Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-05-22T21:29:32Z"}, "message": "Lifetime variance fixes for rustc", "tree": {"sha": "b26f0d981d31934ad56b043af5065b2ca068fad9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b26f0d981d31934ad56b043af5065b2ca068fad9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1784634a39be33b71b9118f8900fd0377e2c75c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1784634a39be33b71b9118f8900fd0377e2c75c0", "html_url": "https://github.com/rust-lang/rust/commit/1784634a39be33b71b9118f8900fd0377e2c75c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1784634a39be33b71b9118f8900fd0377e2c75c0/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bb4dc4672b4d80509db4c0572ae8ceeaf7d4a1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb4dc4672b4d80509db4c0572ae8ceeaf7d4a1c", "html_url": "https://github.com/rust-lang/rust/commit/4bb4dc4672b4d80509db4c0572ae8ceeaf7d4a1c"}], "stats": {"total": 178, "additions": 92, "deletions": 86}, "files": [{"sha": "84ff33fe1d88d727a92badb04215d44998144aae", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -1,5 +1,6 @@\n use either::Either;\n use rustc_const_eval::util::CallKind;\n+use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, ErrorGuaranteed, MultiSpan};\n use rustc_hir as hir;\n@@ -1622,10 +1623,10 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         location: Location,\n         mpi: MovePathIndex,\n     ) -> (Vec<MoveSite>, Vec<Location>) {\n-        fn predecessor_locations<'a>(\n-            body: &'a mir::Body<'_>,\n+        fn predecessor_locations<'tcx, 'a>(\n+            body: &'a mir::Body<'tcx>,\n             location: Location,\n-        ) -> impl Iterator<Item = Location> + 'a {\n+        ) -> impl Iterator<Item = Location> + Captures<'tcx> + 'a {\n             if location.statement_index == 0 {\n                 let predecessors = body.predecessors()[location.block].to_vec();\n                 Either::Left(predecessors.into_iter().map(move |bb| body.terminator_loc(bb)))"}, {"sha": "e91fcf1472df14c67c22b8be88858162a4d06819", "filename": "compiler/rustc_borrowck/src/member_constraints.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fmember_constraints.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -1,3 +1,4 @@\n+use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_index::vec::IndexVec;\n use rustc_middle::infer::MemberConstraint;\n@@ -140,11 +141,13 @@ where\n     }\n }\n \n-impl<R> MemberConstraintSet<'_, R>\n+impl<'tcx, R> MemberConstraintSet<'tcx, R>\n where\n     R: Copy + Hash + Eq,\n {\n-    pub(crate) fn all_indices(&self) -> impl Iterator<Item = NllMemberConstraintIndex> + '_ {\n+    pub(crate) fn all_indices(\n+        &self,\n+    ) -> impl Iterator<Item = NllMemberConstraintIndex> + Captures<'tcx> + '_ {\n         self.constraints.indices()\n     }\n \n@@ -154,7 +157,7 @@ where\n     pub(crate) fn indices(\n         &self,\n         member_region_vid: R,\n-    ) -> impl Iterator<Item = NllMemberConstraintIndex> + '_ {\n+    ) -> impl Iterator<Item = NllMemberConstraintIndex> + Captures<'tcx> + '_ {\n         let mut next = self.first_constraints.get(&member_region_vid).cloned();\n         std::iter::from_fn(move || -> Option<NllMemberConstraintIndex> {\n             if let Some(current) = next {"}, {"sha": "8070f3579194d41e68947eaf00c97aee42a9c064", "filename": "compiler/rustc_borrowck/src/type_check/liveness/polonius.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -10,17 +10,17 @@ use super::TypeChecker;\n type VarPointRelation = Vec<(Local, LocationIndex)>;\n type PathPointRelation = Vec<(MovePathIndex, LocationIndex)>;\n \n-struct UseFactsExtractor<'me> {\n+struct UseFactsExtractor<'me, 'tcx> {\n     var_defined_at: &'me mut VarPointRelation,\n     var_used_at: &'me mut VarPointRelation,\n     location_table: &'me LocationTable,\n     var_dropped_at: &'me mut VarPointRelation,\n-    move_data: &'me MoveData<'me>,\n+    move_data: &'me MoveData<'tcx>,\n     path_accessed_at_base: &'me mut PathPointRelation,\n }\n \n // A Visitor to walk through the MIR and extract point-wise facts\n-impl UseFactsExtractor<'_> {\n+impl UseFactsExtractor<'_, '_> {\n     fn location_to_index(&self, location: Location) -> LocationIndex {\n         self.location_table.mid_index(location)\n     }\n@@ -53,7 +53,7 @@ impl UseFactsExtractor<'_> {\n     }\n }\n \n-impl Visitor<'_> for UseFactsExtractor<'_> {\n+impl<'a, 'tcx> Visitor<'tcx> for UseFactsExtractor<'a, 'tcx> {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n         match def_use::categorize(context) {\n             Some(DefUse::Def) => self.insert_def(local, location),\n@@ -63,7 +63,7 @@ impl Visitor<'_> for UseFactsExtractor<'_> {\n         }\n     }\n \n-    fn visit_place(&mut self, place: &Place<'_>, context: PlaceContext, location: Location) {\n+    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n         self.super_place(place, context, location);\n         match context {\n             PlaceContext::NonMutatingUse(_) => {\n@@ -82,11 +82,11 @@ impl Visitor<'_> for UseFactsExtractor<'_> {\n     }\n }\n \n-pub(super) fn populate_access_facts<'tcx>(\n-    typeck: &mut TypeChecker<'_, 'tcx>,\n+pub(super) fn populate_access_facts<'a, 'tcx>(\n+    typeck: &mut TypeChecker<'a, 'tcx>,\n     body: &Body<'tcx>,\n     location_table: &LocationTable,\n-    move_data: &MoveData<'_>,\n+    move_data: &MoveData<'tcx>,\n     dropped_at: &mut Vec<(Local, Location)>,\n ) {\n     debug!(\"populate_access_facts()\");"}, {"sha": "977b55a0890584e1e48f21c4a4a4508ac185355f", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -197,7 +197,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         size: Size,\n         align: Align,\n         kind: MemoryKind<M::MemoryKind>,\n-    ) -> InterpResult<'static, Pointer<M::PointerTag>> {\n+    ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n         let alloc = Allocation::uninit(size, align, M::PANIC_ON_ALLOC_FAIL)?;\n         Ok(self.allocate_raw_ptr(alloc, kind))\n     }\n@@ -402,7 +402,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         msg: CheckInAllocMsg,\n         alloc_size: impl FnOnce(AllocId, Size, M::TagExtra) -> InterpResult<'tcx, (Size, Align, T)>,\n     ) -> InterpResult<'tcx, Option<T>> {\n-        fn check_offset_align(offset: u64, align: Align) -> InterpResult<'static> {\n+        fn check_offset_align<'tcx>(offset: u64, align: Align) -> InterpResult<'tcx> {\n             if offset % align.bytes() == 0 {\n                 Ok(())\n             } else {\n@@ -654,7 +654,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &self,\n         id: AllocId,\n         liveness: AllocCheck,\n-    ) -> InterpResult<'static, (Size, Align)> {\n+    ) -> InterpResult<'tcx, (Size, Align)> {\n         // # Regular allocations\n         // Don't use `self.get_raw` here as that will\n         // a) cause cycles in case `id` refers to a static"}, {"sha": "dc49a45fe730997e558c62cb9b377205a2532559", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -1011,7 +1011,7 @@ where\n         &mut self,\n         layout: TyAndLayout<'tcx>,\n         kind: MemoryKind<M::MemoryKind>,\n-    ) -> InterpResult<'static, MPlaceTy<'tcx, M::PointerTag>> {\n+    ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::PointerTag>> {\n         let ptr = self.allocate_ptr(layout.size, layout.align.abi, kind)?;\n         Ok(MPlaceTy::from_aligned_ptr(ptr.into(), layout))\n     }"}, {"sha": "29b3807a514bbf43049d5f7a6a9883768022d580", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Futil.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -98,7 +98,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         &self,\n         anon_region: Region<'tcx>,\n         replace_region: Region<'tcx>,\n-    ) -> Option<AnonymousParamInfo<'_>> {\n+    ) -> Option<AnonymousParamInfo<'tcx>> {\n         find_param_with_region(self.tcx(), anon_region, replace_region)\n     }\n "}, {"sha": "6252dc1670c2c7c696d867eaf013495d051543c1", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -171,7 +171,7 @@ impl<Tag> Allocation<Tag> {\n \n     /// Try to create an Allocation of `size` bytes, failing if there is not enough memory\n     /// available to the compiler to do so.\n-    pub fn uninit(size: Size, align: Align, panic_on_fail: bool) -> InterpResult<'static, Self> {\n+    pub fn uninit<'tcx>(size: Size, align: Align, panic_on_fail: bool) -> InterpResult<'tcx, Self> {\n         let bytes = Box::<[u8]>::try_new_zeroed_slice(size.bytes_usize()).map_err(|_| {\n             // This results in an error that can happen non-deterministically, since the memory\n             // available to the compiler can change between runs. Normally queries are always"}, {"sha": "d00dae85367b8fe08fc2b557ac7e2d332832696d", "filename": "compiler/rustc_middle/src/mir/interpret/value.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fvalue.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -397,90 +397,90 @@ impl<'tcx, Tag: Provenance> Scalar<Tag> {\n     /// Converts the scalar to produce an unsigned integer of the given size.\n     /// Fails if the scalar is a pointer.\n     #[inline]\n-    pub fn to_uint(self, size: Size) -> InterpResult<'static, u128> {\n+    pub fn to_uint(self, size: Size) -> InterpResult<'tcx, u128> {\n         self.to_bits(size)\n     }\n \n     /// Converts the scalar to produce a `u8`. Fails if the scalar is a pointer.\n-    pub fn to_u8(self) -> InterpResult<'static, u8> {\n+    pub fn to_u8(self) -> InterpResult<'tcx, u8> {\n         self.to_uint(Size::from_bits(8)).map(|v| u8::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce a `u16`. Fails if the scalar is a pointer.\n-    pub fn to_u16(self) -> InterpResult<'static, u16> {\n+    pub fn to_u16(self) -> InterpResult<'tcx, u16> {\n         self.to_uint(Size::from_bits(16)).map(|v| u16::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce a `u32`. Fails if the scalar is a pointer.\n-    pub fn to_u32(self) -> InterpResult<'static, u32> {\n+    pub fn to_u32(self) -> InterpResult<'tcx, u32> {\n         self.to_uint(Size::from_bits(32)).map(|v| u32::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce a `u64`. Fails if the scalar is a pointer.\n-    pub fn to_u64(self) -> InterpResult<'static, u64> {\n+    pub fn to_u64(self) -> InterpResult<'tcx, u64> {\n         self.to_uint(Size::from_bits(64)).map(|v| u64::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce a `u128`. Fails if the scalar is a pointer.\n-    pub fn to_u128(self) -> InterpResult<'static, u128> {\n+    pub fn to_u128(self) -> InterpResult<'tcx, u128> {\n         self.to_uint(Size::from_bits(128))\n     }\n \n     /// Converts the scalar to produce a machine-pointer-sized unsigned integer.\n     /// Fails if the scalar is a pointer.\n-    pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'static, u64> {\n+    pub fn to_machine_usize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, u64> {\n         let b = self.to_uint(cx.data_layout().pointer_size)?;\n         Ok(u64::try_from(b).unwrap())\n     }\n \n     /// Converts the scalar to produce a signed integer of the given size.\n     /// Fails if the scalar is a pointer.\n     #[inline]\n-    pub fn to_int(self, size: Size) -> InterpResult<'static, i128> {\n+    pub fn to_int(self, size: Size) -> InterpResult<'tcx, i128> {\n         let b = self.to_bits(size)?;\n         Ok(size.sign_extend(b) as i128)\n     }\n \n     /// Converts the scalar to produce an `i8`. Fails if the scalar is a pointer.\n-    pub fn to_i8(self) -> InterpResult<'static, i8> {\n+    pub fn to_i8(self) -> InterpResult<'tcx, i8> {\n         self.to_int(Size::from_bits(8)).map(|v| i8::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce an `i16`. Fails if the scalar is a pointer.\n-    pub fn to_i16(self) -> InterpResult<'static, i16> {\n+    pub fn to_i16(self) -> InterpResult<'tcx, i16> {\n         self.to_int(Size::from_bits(16)).map(|v| i16::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce an `i32`. Fails if the scalar is a pointer.\n-    pub fn to_i32(self) -> InterpResult<'static, i32> {\n+    pub fn to_i32(self) -> InterpResult<'tcx, i32> {\n         self.to_int(Size::from_bits(32)).map(|v| i32::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce an `i64`. Fails if the scalar is a pointer.\n-    pub fn to_i64(self) -> InterpResult<'static, i64> {\n+    pub fn to_i64(self) -> InterpResult<'tcx, i64> {\n         self.to_int(Size::from_bits(64)).map(|v| i64::try_from(v).unwrap())\n     }\n \n     /// Converts the scalar to produce an `i128`. Fails if the scalar is a pointer.\n-    pub fn to_i128(self) -> InterpResult<'static, i128> {\n+    pub fn to_i128(self) -> InterpResult<'tcx, i128> {\n         self.to_int(Size::from_bits(128))\n     }\n \n     /// Converts the scalar to produce a machine-pointer-sized signed integer.\n     /// Fails if the scalar is a pointer.\n-    pub fn to_machine_isize(self, cx: &impl HasDataLayout) -> InterpResult<'static, i64> {\n+    pub fn to_machine_isize(self, cx: &impl HasDataLayout) -> InterpResult<'tcx, i64> {\n         let b = self.to_int(cx.data_layout().pointer_size)?;\n         Ok(i64::try_from(b).unwrap())\n     }\n \n     #[inline]\n-    pub fn to_f32(self) -> InterpResult<'static, Single> {\n+    pub fn to_f32(self) -> InterpResult<'tcx, Single> {\n         // Going through `u32` to check size and truncation.\n         Ok(Single::from_bits(self.to_u32()?.into()))\n     }\n \n     #[inline]\n-    pub fn to_f64(self) -> InterpResult<'static, Double> {\n+    pub fn to_f64(self) -> InterpResult<'tcx, Double> {\n         // Going through `u64` to check size and truncation.\n         Ok(Double::from_bits(self.to_u64()?.into()))\n     }\n@@ -534,7 +534,7 @@ impl<Tag> ScalarMaybeUninit<Tag> {\n     }\n \n     #[inline]\n-    pub fn check_init(self) -> InterpResult<'static, Scalar<Tag>> {\n+    pub fn check_init<'tcx>(self) -> InterpResult<'tcx, Scalar<Tag>> {\n         match self {\n             ScalarMaybeUninit::Scalar(scalar) => Ok(scalar),\n             ScalarMaybeUninit::Uninit => throw_ub!(InvalidUninitBytes(None)),"}, {"sha": "9f8b22c8afc4706edc2579f63cfe16e6455c8c27", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -13,6 +13,7 @@ use crate::ty::subst::{GenericArg, InternalSubsts, Subst, SubstsRef};\n use crate::ty::{self, List, Ty, TyCtxt};\n use crate::ty::{AdtDef, InstanceDef, Region, ScalarInt, UserTypeAnnotationIndex};\n \n+use rustc_data_structures::captures::Captures;\n use rustc_errors::ErrorGuaranteed;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID};\n@@ -484,7 +485,7 @@ impl<'tcx> Body<'tcx> {\n \n     /// Returns an iterator over all user-declared mutable locals.\n     #[inline]\n-    pub fn mut_vars_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {\n+    pub fn mut_vars_iter<'a>(&'a self) -> impl Iterator<Item = Local> + Captures<'tcx> + 'a {\n         (self.arg_count + 1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n             let decl = &self.local_decls[local];\n@@ -498,7 +499,9 @@ impl<'tcx> Body<'tcx> {\n \n     /// Returns an iterator over all user-declared mutable arguments and locals.\n     #[inline]\n-    pub fn mut_vars_and_args_iter<'a>(&'a self) -> impl Iterator<Item = Local> + 'a {\n+    pub fn mut_vars_and_args_iter<'a>(\n+        &'a self,\n+    ) -> impl Iterator<Item = Local> + Captures<'tcx> + 'a {\n         (1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n             let decl = &self.local_decls[local];"}, {"sha": "1bc53d3c9f1c5be43045d239b481c1f2aa06deaf", "filename": "compiler/rustc_middle/src/mir/patch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpatch.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -192,7 +192,7 @@ impl<'tcx> MirPatch<'tcx> {\n         }\n     }\n \n-    pub fn source_info_for_location(&self, body: &Body<'_>, loc: Location) -> SourceInfo {\n+    pub fn source_info_for_location(&self, body: &Body<'tcx>, loc: Location) -> SourceInfo {\n         let data = match loc.block.index().checked_sub(body.basic_blocks().len()) {\n             Some(new) => &self.new_blocks[new],\n             None => &body[loc.block],"}, {"sha": "4006b2fcf177a786e0dccb3efb0dae1d80981d31", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -115,8 +115,6 @@ impl Hash for ObligationCause<'_> {\n     }\n }\n \n-const MISC_OBLIGATION_CAUSE_CODE: ObligationCauseCode<'static> = MiscObligation;\n-\n impl<'tcx> ObligationCause<'tcx> {\n     #[inline]\n     pub fn new(\n@@ -201,7 +199,7 @@ pub struct UnifyReceiverContext<'tcx> {\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, Lift, Default)]\n pub struct InternedObligationCauseCode<'tcx> {\n-    /// `None` for `MISC_OBLIGATION_CAUSE_CODE` (a common case, occurs ~60% of\n+    /// `None` for `ObligationCauseCode::MiscObligation` (a common case, occurs ~60% of\n     /// the time). `Some` otherwise.\n     code: Option<Lrc<ObligationCauseCode<'tcx>>>,\n }\n@@ -210,7 +208,11 @@ impl<'tcx> ObligationCauseCode<'tcx> {\n     #[inline(always)]\n     fn into(self) -> InternedObligationCauseCode<'tcx> {\n         InternedObligationCauseCode {\n-            code: if let MISC_OBLIGATION_CAUSE_CODE = self { None } else { Some(Lrc::new(self)) },\n+            code: if let ObligationCauseCode::MiscObligation = self {\n+                None\n+            } else {\n+                Some(Lrc::new(self))\n+            },\n         }\n     }\n }\n@@ -219,7 +221,7 @@ impl<'tcx> std::ops::Deref for InternedObligationCauseCode<'tcx> {\n     type Target = ObligationCauseCode<'tcx>;\n \n     fn deref(&self) -> &Self::Target {\n-        self.code.as_deref().unwrap_or(&MISC_OBLIGATION_CAUSE_CODE)\n+        self.code.as_deref().unwrap_or(&ObligationCauseCode::MiscObligation)\n     }\n }\n "}, {"sha": "30552c685a33aa121a03e280a47fcd5da5e82221", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -2163,7 +2163,7 @@ impl<'tcx> SizeSkeleton<'tcx> {\n         }\n     }\n \n-    pub fn same_size(self, other: SizeSkeleton<'_>) -> bool {\n+    pub fn same_size(self, other: SizeSkeleton<'tcx>) -> bool {\n         match (self, other) {\n             (SizeSkeleton::Known(a), SizeSkeleton::Known(b)) => a == b,\n             (SizeSkeleton::Pointer { tail: a, .. }, SizeSkeleton::Pointer { tail: b, .. }) => {"}, {"sha": "31a318cc68f4432d1d11c97874bdbe9689124875", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -109,13 +109,13 @@ impl<'tcx> fmt::Debug for GenericArg<'tcx> {\n }\n \n impl<'tcx> Ord for GenericArg<'tcx> {\n-    fn cmp(&self, other: &GenericArg<'_>) -> Ordering {\n+    fn cmp(&self, other: &GenericArg<'tcx>) -> Ordering {\n         self.unpack().cmp(&other.unpack())\n     }\n }\n \n impl<'tcx> PartialOrd for GenericArg<'tcx> {\n-    fn partial_cmp(&self, other: &GenericArg<'_>) -> Option<Ordering> {\n+    fn partial_cmp(&self, other: &GenericArg<'tcx>) -> Option<Ordering> {\n         Some(self.cmp(&other))\n     }\n }\n@@ -233,7 +233,7 @@ pub type InternalSubsts<'tcx> = List<GenericArg<'tcx>>;\n \n pub type SubstsRef<'tcx> = &'tcx InternalSubsts<'tcx>;\n \n-impl<'a, 'tcx> InternalSubsts<'tcx> {\n+impl<'tcx> InternalSubsts<'tcx> {\n     /// Checks whether all elements of this list are types, if so, transmute.\n     pub fn try_as_type_list(&'tcx self) -> Option<&'tcx List<Ty<'tcx>>> {\n         if self.iter().all(|arg| matches!(arg.unpack(), GenericArgKind::Type(_))) {\n@@ -249,7 +249,7 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     /// Closure substitutions have a particular structure controlled by the\n     /// compiler that encodes information like the signature and closure kind;\n     /// see `ty::ClosureSubsts` struct for more comments.\n-    pub fn as_closure(&'a self) -> ClosureSubsts<'a> {\n+    pub fn as_closure(&'tcx self) -> ClosureSubsts<'tcx> {\n         ClosureSubsts { substs: self }\n     }\n \n@@ -330,29 +330,29 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     }\n \n     #[inline]\n-    pub fn types(&'a self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'a {\n+    pub fn types(&'tcx self) -> impl DoubleEndedIterator<Item = Ty<'tcx>> + 'tcx {\n         self.iter()\n             .filter_map(|k| if let GenericArgKind::Type(ty) = k.unpack() { Some(ty) } else { None })\n     }\n \n     #[inline]\n-    pub fn regions(&'a self) -> impl DoubleEndedIterator<Item = ty::Region<'tcx>> + 'a {\n+    pub fn regions(&'tcx self) -> impl DoubleEndedIterator<Item = ty::Region<'tcx>> + 'tcx {\n         self.iter().filter_map(|k| {\n             if let GenericArgKind::Lifetime(lt) = k.unpack() { Some(lt) } else { None }\n         })\n     }\n \n     #[inline]\n-    pub fn consts(&'a self) -> impl DoubleEndedIterator<Item = ty::Const<'tcx>> + 'a {\n+    pub fn consts(&'tcx self) -> impl DoubleEndedIterator<Item = ty::Const<'tcx>> + 'tcx {\n         self.iter().filter_map(|k| {\n             if let GenericArgKind::Const(ct) = k.unpack() { Some(ct) } else { None }\n         })\n     }\n \n     #[inline]\n     pub fn non_erasable_generics(\n-        &'a self,\n-    ) -> impl DoubleEndedIterator<Item = GenericArgKind<'tcx>> + 'a {\n+        &'tcx self,\n+    ) -> impl DoubleEndedIterator<Item = GenericArgKind<'tcx>> + 'tcx {\n         self.iter().filter_map(|k| match k.unpack() {\n             GenericArgKind::Lifetime(_) => None,\n             generic => Some(generic),"}, {"sha": "d6bfde8f34c8a6775dc988e5d5338e012a87aae8", "filename": "compiler/rustc_mir_dataflow/src/framework/direction.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Fdirection.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -304,8 +304,8 @@ impl Direction for Backward {\n     }\n }\n \n-struct BackwardSwitchIntEdgeEffectsApplier<'a, D, F> {\n-    body: &'a mir::Body<'a>,\n+struct BackwardSwitchIntEdgeEffectsApplier<'a, 'tcx, D, F> {\n+    body: &'a mir::Body<'tcx>,\n     pred: BasicBlock,\n     exit_state: &'a mut D,\n     bb: BasicBlock,\n@@ -314,7 +314,7 @@ struct BackwardSwitchIntEdgeEffectsApplier<'a, D, F> {\n     effects_applied: bool,\n }\n \n-impl<D, F> super::SwitchIntEdgeEffects<D> for BackwardSwitchIntEdgeEffectsApplier<'_, D, F>\n+impl<D, F> super::SwitchIntEdgeEffects<D> for BackwardSwitchIntEdgeEffectsApplier<'_, '_, D, F>\n where\n     D: Clone,\n     F: FnMut(BasicBlock, &D),"}, {"sha": "708a142581ab2809e48fee5d57b9901209b78732", "filename": "compiler/rustc_mir_dataflow/src/framework/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fframework%2Ftests.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -14,7 +14,7 @@ use super::*;\n ///\n /// This is the `Body` that will be used by the `MockAnalysis` below. The shape of its CFG is not\n /// important.\n-fn mock_body() -> mir::Body<'static> {\n+fn mock_body<'tcx>() -> mir::Body<'tcx> {\n     let source_info = mir::SourceInfo::outermost(DUMMY_SP);\n \n     let mut blocks = IndexVec::new();"}, {"sha": "510f1e64ed1c019f38c99effa46ba99d6fb868b5", "filename": "compiler/rustc_mir_transform/src/coverage/graph.rs", "status": "modified", "additions": 8, "deletions": 17, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fgraph.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -481,8 +481,8 @@ impl std::fmt::Debug for BcbBranch {\n // FIXME(#78544): MIR InstrumentCoverage: Improve coverage of `#[should_panic]` tests and\n // `catch_unwind()` handlers.\n fn bcb_filtered_successors<'a, 'tcx>(\n-    body: &'tcx &'a mir::Body<'tcx>,\n-    term_kind: &'tcx TerminatorKind<'tcx>,\n+    body: &'a mir::Body<'tcx>,\n+    term_kind: &'a TerminatorKind<'tcx>,\n ) -> Box<dyn Iterator<Item = BasicBlock> + 'a> {\n     Box::new(\n         match &term_kind {\n@@ -691,12 +691,9 @@ pub(super) fn find_loop_backedges(\n pub struct ShortCircuitPreorder<\n     'a,\n     'tcx,\n-    F: Fn(\n-        &'tcx &'a mir::Body<'tcx>,\n-        &'tcx TerminatorKind<'tcx>,\n-    ) -> Box<dyn Iterator<Item = BasicBlock> + 'a>,\n+    F: Fn(&'a mir::Body<'tcx>, &'a TerminatorKind<'tcx>) -> Box<dyn Iterator<Item = BasicBlock> + 'a>,\n > {\n-    body: &'tcx &'a mir::Body<'tcx>,\n+    body: &'a mir::Body<'tcx>,\n     visited: BitSet<BasicBlock>,\n     worklist: Vec<BasicBlock>,\n     filtered_successors: F,\n@@ -705,14 +702,11 @@ pub struct ShortCircuitPreorder<\n impl<\n     'a,\n     'tcx,\n-    F: Fn(\n-        &'tcx &'a mir::Body<'tcx>,\n-        &'tcx TerminatorKind<'tcx>,\n-    ) -> Box<dyn Iterator<Item = BasicBlock> + 'a>,\n+    F: Fn(&'a mir::Body<'tcx>, &'a TerminatorKind<'tcx>) -> Box<dyn Iterator<Item = BasicBlock> + 'a>,\n > ShortCircuitPreorder<'a, 'tcx, F>\n {\n     pub fn new(\n-        body: &'tcx &'a mir::Body<'tcx>,\n+        body: &'a mir::Body<'tcx>,\n         filtered_successors: F,\n     ) -> ShortCircuitPreorder<'a, 'tcx, F> {\n         let worklist = vec![mir::START_BLOCK];\n@@ -727,12 +721,9 @@ impl<\n }\n \n impl<\n-    'a: 'tcx,\n+    'a,\n     'tcx,\n-    F: Fn(\n-        &'tcx &'a mir::Body<'tcx>,\n-        &'tcx TerminatorKind<'tcx>,\n-    ) -> Box<dyn Iterator<Item = BasicBlock> + 'a>,\n+    F: Fn(&'a mir::Body<'tcx>, &'a TerminatorKind<'tcx>) -> Box<dyn Iterator<Item = BasicBlock> + 'a>,\n > Iterator for ShortCircuitPreorder<'a, 'tcx, F>\n {\n     type Item = (BasicBlock, &'a BasicBlockData<'tcx>);"}, {"sha": "5c09e5d7be16ab34cb3137e2e2df71a2e8163ce3", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -98,7 +98,7 @@ fn object_safety_violations_for_trait(\n                 span,\n             ) = violation\n             {\n-                lint_object_unsafe_trait(tcx, *span, trait_def_id, violation);\n+                lint_object_unsafe_trait(tcx, *span, trait_def_id, &violation);\n                 false\n             } else {\n                 true\n@@ -278,7 +278,7 @@ fn predicate_references_self<'tcx>(\n     (predicate, sp): (ty::Predicate<'tcx>, Span),\n ) -> Option<Span> {\n     let self_ty = tcx.types.self_param;\n-    let has_self_ty = |arg: &GenericArg<'_>| arg.walk().any(|arg| arg == self_ty.into());\n+    let has_self_ty = |arg: &GenericArg<'tcx>| arg.walk().any(|arg| arg == self_ty.into());\n     match predicate.kind().skip_binder() {\n         ty::PredicateKind::Trait(ref data) => {\n             // In the case of a trait predicate, we can skip the \"self\" type."}, {"sha": "7d5d6849b3bc4fddc864050884f72ad461199ba8", "filename": "compiler/rustc_typeck/src/check/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcast.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -961,7 +961,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n         }\n     }\n \n-    fn try_coercion_cast(&self, fcx: &FnCtxt<'a, 'tcx>) -> Result<(), ty::error::TypeError<'_>> {\n+    fn try_coercion_cast(&self, fcx: &FnCtxt<'a, 'tcx>) -> Result<(), ty::error::TypeError<'tcx>> {\n         match fcx.try_coerce(self.expr, self.expr_ty, self.cast_ty, AllowTwoPhase::No, None) {\n             Ok(_) => Ok(()),\n             Err(err) => Err(err),"}, {"sha": "2acc6700cec1b7f9c9c4840ba35f8b6cbaef7dff", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -1023,7 +1023,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Special-case that coercion alone cannot handle:\n         // Function items or non-capturing closures of differing IDs or InternalSubsts.\n         let (a_sig, b_sig) = {\n-            let is_capturing_closure = |ty| {\n+            #[allow(rustc::usage_of_ty_tykind)]\n+            let is_capturing_closure = |ty: &ty::TyKind<'tcx>| {\n                 if let &ty::Closure(closure_def_id, _substs) = ty {\n                     self.tcx.upvars_mentioned(closure_def_id.expect_local()).is_some()\n                 } else {"}, {"sha": "e8b91b6c3cf82a17e65c4406a4b756213281a644", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -959,7 +959,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             // Ideally this would be folded into the above, for uniform style\n             // but c-variadic is already a corner case\n             if c_variadic {\n-                fn variadic_error<'tcx>(sess: &Session, span: Span, ty: Ty<'tcx>, cast_ty: &str) {\n+                fn variadic_error<'tcx>(\n+                    sess: &'tcx Session,\n+                    span: Span,\n+                    ty: Ty<'tcx>,\n+                    cast_ty: &str,\n+                ) {\n                     use crate::structured_errors::MissingCastForVariadicArg;\n \n                     MissingCastForVariadicArg { sess, span, ty, cast_ty }.diagnostic().emit();"}, {"sha": "4322440d6856bf53af3d710f687b25d314028c4a", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -2454,15 +2454,15 @@ fn trait_explicit_predicates_and_bounds(\n     gather_explicit_predicates_of(tcx, def_id.to_def_id())\n }\n \n-fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n+fn explicit_predicates_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> ty::GenericPredicates<'tcx> {\n     let def_kind = tcx.def_kind(def_id);\n     if let DefKind::Trait = def_kind {\n         // Remove bounds on associated types from the predicates, they will be\n         // returned by `explicit_item_bounds`.\n         let predicates_and_bounds = tcx.trait_explicit_predicates_and_bounds(def_id.expect_local());\n         let trait_identity_substs = InternalSubsts::identity_for_item(tcx, def_id);\n \n-        let is_assoc_item_ty = |ty: Ty<'_>| {\n+        let is_assoc_item_ty = |ty: Ty<'tcx>| {\n             // For a predicate from a where clause to become a bound on an\n             // associated type:\n             // * It must use the identity substs of the item."}, {"sha": "bafc5a0b918d2dbc1a3429e8119d66cb31cbb899", "filename": "compiler/rustc_typeck/src/structured_errors/missing_cast_for_variadic_arg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1784634a39be33b71b9118f8900fd0377e2c75c0/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fmissing_cast_for_variadic_arg.rs?ref=1784634a39be33b71b9118f8900fd0377e2c75c0", "patch": "@@ -4,14 +4,14 @@ use rustc_middle::ty::{Ty, TypeFoldable};\n use rustc_session::Session;\n use rustc_span::Span;\n \n-pub struct MissingCastForVariadicArg<'tcx> {\n+pub struct MissingCastForVariadicArg<'tcx, 's> {\n     pub sess: &'tcx Session,\n     pub span: Span,\n     pub ty: Ty<'tcx>,\n-    pub cast_ty: &'tcx str,\n+    pub cast_ty: &'s str,\n }\n \n-impl<'tcx> StructuredDiagnostic<'tcx> for MissingCastForVariadicArg<'tcx> {\n+impl<'tcx> StructuredDiagnostic<'tcx> for MissingCastForVariadicArg<'tcx, '_> {\n     fn session(&self) -> &Session {\n         self.sess\n     }"}]}