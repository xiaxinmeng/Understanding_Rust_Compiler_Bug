{"sha": "3caf0bcdeb9546bd8a3ab58c0e33baabdcaac75a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYWYwYmNkZWI5NTQ2YmQ4YTNhYjU4YzBlMzNiYWFiZGNhYWM3NWE=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-09-06T16:12:55Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-09-06T16:12:55Z"}, "message": "Accept `m!{ .. }.method()` and `m!{ .. }?` statements.", "tree": {"sha": "cc538418eb14751559c60d06dded3939cc1734a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc538418eb14751559c60d06dded3939cc1734a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3caf0bcdeb9546bd8a3ab58c0e33baabdcaac75a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3caf0bcdeb9546bd8a3ab58c0e33baabdcaac75a", "html_url": "https://github.com/rust-lang/rust/commit/3caf0bcdeb9546bd8a3ab58c0e33baabdcaac75a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3caf0bcdeb9546bd8a3ab58c0e33baabdcaac75a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fbdff7fae941bce21fd3047f87777c84b866850e", "url": "https://api.github.com/repos/rust-lang/rust/commits/fbdff7fae941bce21fd3047f87777c84b866850e", "html_url": "https://github.com/rust-lang/rust/commit/fbdff7fae941bce21fd3047f87777c84b866850e"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "f1a91c41355eeb7fa4eb3c7fa8040814abf25751", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3caf0bcdeb9546bd8a3ab58c0e33baabdcaac75a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3caf0bcdeb9546bd8a3ab58c0e33baabdcaac75a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=3caf0bcdeb9546bd8a3ab58c0e33baabdcaac75a", "patch": "@@ -155,17 +155,20 @@ impl<'a> Parser<'a> {\n \n         let mac = MacCall { path, args, prior_type_ascription: self.last_type_ascription };\n \n-        let kind = if delim == token::Brace || self.token == token::Semi || self.token == token::Eof\n-        {\n-            StmtKind::MacCall(P(MacCallStmt { mac, style, attrs, tokens: None }))\n-        } else {\n-            // Since none of the above applied, this is an expression statement macro.\n-            let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac), AttrVec::new());\n-            let e = self.maybe_recover_from_bad_qpath(e, true)?;\n-            let e = self.parse_dot_or_call_expr_with(e, lo, attrs.into())?;\n-            let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;\n-            StmtKind::Expr(e)\n-        };\n+        let kind =\n+            if (delim == token::Brace && self.token != token::Dot && self.token != token::Question)\n+                || self.token == token::Semi\n+                || self.token == token::Eof\n+            {\n+                StmtKind::MacCall(P(MacCallStmt { mac, style, attrs, tokens: None }))\n+            } else {\n+                // Since none of the above applied, this is an expression statement macro.\n+                let e = self.mk_expr(lo.to(hi), ExprKind::MacCall(mac), AttrVec::new());\n+                let e = self.maybe_recover_from_bad_qpath(e, true)?;\n+                let e = self.parse_dot_or_call_expr_with(e, lo, attrs.into())?;\n+                let e = self.parse_assoc_expr_with(0, LhsExpr::AlreadyParsed(e))?;\n+                StmtKind::Expr(e)\n+            };\n         Ok(self.mk_stmt(lo.to(hi), kind))\n     }\n "}]}