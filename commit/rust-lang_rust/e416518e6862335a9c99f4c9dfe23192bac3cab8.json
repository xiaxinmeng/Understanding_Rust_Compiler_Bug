{"sha": "e416518e6862335a9c99f4c9dfe23192bac3cab8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0MTY1MThlNjg2MjMzNWE5Yzk5ZjRjOWRmZTIzMTkyYmFjM2NhYjg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-04-20T18:42:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-05-02T15:47:10Z"}, "message": "update test cases to reflect new messages", "tree": {"sha": "6df3b68c298843ffc1a3bb7423e6fe9084521b2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6df3b68c298843ffc1a3bb7423e6fe9084521b2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e416518e6862335a9c99f4c9dfe23192bac3cab8", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e416518e6862335a9c99f4c9dfe23192bac3cab8", "html_url": "https://github.com/rust-lang/rust/commit/e416518e6862335a9c99f4c9dfe23192bac3cab8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e416518e6862335a9c99f4c9dfe23192bac3cab8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5", "html_url": "https://github.com/rust-lang/rust/commit/d9a947ce8fd4f53b7a273b39a84a7af0fe34d2c5"}], "stats": {"total": 1164, "additions": 534, "deletions": 630}, "files": [{"sha": "1bbccae53a44d6f755804790fe9d8b787025028f", "filename": "src/test/compile-fail/array-not-vector.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Farray-not-vector.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -11,16 +11,14 @@\n fn main() {\n     let _x: i32 = [1, 2, 3];\n     //~^ ERROR mismatched types\n-    //~| expected `i32`\n-    //~| found `[_; 3]`\n-    //~| expected i32\n-    //~| found array of 3 elements\n+    //~| expected type `i32`\n+    //~| found type `[_; 3]`\n+    //~| expected i32, found array of 3 elements\n \n     let x: &[i32] = &[1, 2, 3];\n     let _y: &i32 = x;\n     //~^ ERROR mismatched types\n-    //~| expected `&i32`\n-    //~| found `&[i32]`\n-    //~| expected i32\n-    //~| found slice\n+    //~| expected type `&i32`\n+    //~| found type `&[i32]`\n+    //~| expected i32, found slice\n }"}, {"sha": "8c66160e8a36f723c0a16c017d2956a83814f8fe", "filename": "src/test/compile-fail/associated-types-eq-3.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -32,10 +32,9 @@ fn foo1<I: Foo<A=Bar>>(x: I) {\n fn foo2<I: Foo>(x: I) {\n     let _: Bar = x.boo();\n     //~^ ERROR mismatched types\n-    //~| expected `Bar`\n-    //~| found `<I as Foo>::A`\n-    //~| expected struct `Bar`\n-    //~| found associated type\n+    //~| expected type `Bar`\n+    //~| found type `<I as Foo>::A`\n+    //~| expected struct `Bar`, found associated type\n }\n \n "}, {"sha": "cdb7dff692c146dd6fb762c4c1cdcba8b970946b", "filename": "src/test/compile-fail/associated-types-path-2.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -28,8 +28,7 @@ pub fn f2<T: Foo>(a: T) -> T::A {\n pub fn f1_int_int() {\n     f1(2i32, 4i32);\n     //~^ ERROR mismatched types\n-    //~| expected `u32`\n-    //~| found `i32`\n+    //~| expected u32, found i32\n }\n \n pub fn f1_int_uint() {\n@@ -49,8 +48,7 @@ pub fn f1_uint_int() {\n pub fn f2_int() {\n     let _: i32 = f2(2i32);\n     //~^ ERROR mismatched types\n-    //~| expected `i32`\n-    //~| found `u32`\n+    //~| expected i32, found u32\n }\n \n pub fn main() { }"}, {"sha": "8ac6b419295ee851fb838b30801c06f3d4b0b4db", "filename": "src/test/compile-fail/augmented-assignments.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Faugmented-assignments.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -21,8 +21,10 @@ impl AddAssign for Int {\n fn main() {\n     let mut x = Int(1);\n     x   //~ error: use of moved value: `x`\n+    //~^ value used here after move\n+    //~| note: move occurs because `x` has type `Int`\n     +=\n-    x;  //~ note: `x` moved here because it has type `Int`, which is non-copyable\n+    x;  //~ value moved here\n \n     let y = Int(2);\n     y   //~ error: cannot borrow immutable local variable `y` as mutable"}, {"sha": "ee6ac33072792a722202d7a1b82f7bbbcad19f6b", "filename": "src/test/compile-fail/bad-const-type.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-const-type.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -10,8 +10,7 @@\n \n static i: String = 10;\n //~^ ERROR mismatched types\n-//~| expected `std::string::String`\n-//~| found `_`\n-//~| expected struct `std::string::String`\n-//~| found integral variable\n+//~| expected type `std::string::String`\n+//~| found type `_`\n+//~| expected struct `std::string::String`, found integral variable\n fn main() { println!(\"{}\", i); }"}, {"sha": "1253f7569e7e8e48ec2f9e315838d05b5c6940fa", "filename": "src/test/compile-fail/bad-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-main.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main(x: isize) { } //~ ERROR: main function expects type\n+fn main(x: isize) { } //~ ERROR: main function has wrong type"}, {"sha": "0cc6ea3e984d95c9f2c4e365608b0917c9ad5755", "filename": "src/test/compile-fail/binop-move-semantics.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -62,6 +62,7 @@ fn mut_plus_immut() {\n     &mut f\n     +\n     &f;  //~ ERROR: cannot borrow `f` as immutable because it is also borrowed as mutable\n+    //~^ cannot borrow `f` as immutable because it is also borrowed as mutable\n }\n \n fn immut_plus_mut() {\n@@ -70,6 +71,7 @@ fn immut_plus_mut() {\n     &f\n     +\n     &mut f;  //~ ERROR: cannot borrow `f` as mutable because it is also borrowed as immutable\n+    //~^ cannot borrow `f` as mutable because it is also borrowed as immutable\n }\n \n fn main() {}"}, {"sha": "a0fb470e1e4d0f1887a13e7b9967184102455dc2", "filename": "src/test/compile-fail/block-must-not-have-result-while.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-must-not-have-result-while.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -11,9 +11,8 @@\n fn main() {\n     while true {\n         true //~  ERROR mismatched types\n-             //~| expected `()`\n-             //~| found `bool`\n-             //~| expected ()\n-             //~| found bool\n+             //~| expected type `()`\n+             //~| found type `bool`\n+             //~| expected (), found bool\n     }\n }"}, {"sha": "bde3212c5bc6301536b036d27e790910d6f2d359", "filename": "src/test/compile-fail/borrowck/borrowck-box-insensitivity.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-box-insensitivity.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -33,22 +33,28 @@ struct D {\n fn copy_after_move() {\n     let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n+    //~^ value moved here\n     let _y = a.y; //~ ERROR use of moved\n-    //~^^ NOTE `a` moved here (through moving `a.x`)\n+    //~^ move occurs because `a.x` has type `Box<isize>`\n+    //~| value used here after move\n }\n \n fn move_after_move() {\n     let a: Box<_> = box B { x: box 0, y: box 1 };\n     let _x = a.x;\n+    //~^ value moved here\n     let _y = a.y; //~ ERROR use of moved\n-    //~^^ NOTE `a` moved here (through moving `a.x`)\n+    //~^ move occurs because `a.x` has type `Box<isize>`\n+    //~| value used here after move\n }\n \n fn borrow_after_move() {\n     let a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = a.x;\n+    //~^ value moved here\n     let _y = &a.y; //~ ERROR use of moved\n-    //~^^ NOTE `a` moved here (through moving `a.x`)\n+    //~^ move occurs because `a.x` has type `Box<isize>`\n+    //~| value used here after move\n }\n \n fn move_after_borrow() {\n@@ -75,44 +81,52 @@ fn move_after_mut_borrow() {\n fn borrow_after_mut_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &mut a.x;\n-    //~^ NOTE previous borrow of `a` occurs here (through borrowing `a.x`);\n+    //~^ NOTE mutable borrow occurs here (via `a.x`)\n     let _y = &a.y; //~ ERROR cannot borrow\n+    //~^ immutable borrow occurs here (via `a.y`)\n }\n-//~^ NOTE previous borrow ends here\n+//~^ NOTE mutable borrow ends here\n \n fn mut_borrow_after_borrow() {\n     let mut a: Box<_> = box A { x: box 0, y: 1 };\n     let _x = &a.x;\n-    //~^ NOTE previous borrow of `a` occurs here (through borrowing `a.x`)\n+    //~^ NOTE immutable borrow occurs here (via `a.x`)\n     let _y = &mut a.y; //~ ERROR cannot borrow\n+    //~^ mutable borrow occurs here (via `a.y`)\n }\n-//~^ NOTE previous borrow ends here\n+//~^ NOTE immutable borrow ends here\n \n fn copy_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n-    //~^ NOTE `a.x.x` moved here because it has type `Box<isize>`, which is moved by default\n+    //~^ value moved here\n     let _y = a.y; //~ ERROR use of collaterally moved\n+    //~^ NOTE move occurs because `a.x.x` has type `Box<isize>`\n+    //~| value used here after move\n }\n \n fn move_after_move_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = a.x.x;\n-    //~^ NOTE `a.x.x` moved here because it has type `Box<isize>`, which is moved by default\n+    //~^ value moved here\n     let _y = a.y; //~ ERROR use of collaterally moved\n+    //~^ NOTE move occurs because `a.x.x` has type `Box<isize>`\n+    //~| value used here after move\n }\n \n fn borrow_after_move_nested() {\n     let a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = a.x.x;\n-    //~^ NOTE `a.x.x` moved here because it has type `Box<isize>`, which is moved by default\n+    //~^ value moved here\n     let _y = &a.y; //~ ERROR use of collaterally moved\n+    //~^ NOTE move occurs because `a.x.x` has type `Box<isize>`\n+    //~| value used here after move\n }\n \n fn move_after_borrow_nested() {\n     let a: Box<_> = box D { x: box A { x: box 0, y: 1 }, y: box 2 };\n     let _x = &a.x.x;\n-    //~^ NOTE borrow of `a.x.x` occurs here\n+    //~^ borrow of `a.x.x` occurs here\n     let _y = a.y; //~ ERROR cannot move\n }\n \n@@ -133,18 +147,20 @@ fn move_after_mut_borrow_nested() {\n fn borrow_after_mut_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &mut a.x.x;\n-    //~^ NOTE previous borrow of `a.x.x` occurs here; the mutable borrow prevents\n+    //~^ mutable borrow occurs here\n     let _y = &a.y; //~ ERROR cannot borrow\n+    //~^ immutable borrow occurs here\n }\n-//~^ NOTE previous borrow ends here\n+//~^ NOTE mutable borrow ends here\n \n fn mut_borrow_after_borrow_nested() {\n     let mut a: Box<_> = box C { x: box A { x: box 0, y: 1 }, y: 2 };\n     let _x = &a.x.x;\n-    //~^ NOTE previous borrow of `a.x.x` occurs here; the immutable borrow prevents\n+    //~^ immutable borrow occurs here\n     let _y = &mut a.y; //~ ERROR cannot borrow\n+    //~^ mutable borrow occurs here\n }\n-//~^ NOTE previous borrow ends here\n+//~^ NOTE immutable borrow ends here\n \n fn main() {\n     copy_after_move();"}, {"sha": "dc2f0e8395f08154172853662d3d83f97d12ac09", "filename": "src/test/compile-fail/borrowck/borrowck-closures-mut-of-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-closures-mut-of-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-closures-mut-of-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-closures-mut-of-imm.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -24,7 +24,7 @@ fn a(x: &isize) {\n     //~^ ERROR cannot borrow\n     let c2 = || set(&mut *x);\n     //~^ ERROR cannot borrow\n-    //~| ERROR closure requires unique access\n+    //~| ERROR two closures require unique access to `x` at the same time\n }\n \n fn main() {"}, {"sha": "1b22dc4d2c6af585c7a7f3b608efb650a475b24d", "filename": "src/test/compile-fail/borrowck/borrowck-closures-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-closures-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-closures-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-closures-unique.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -39,7 +39,7 @@ fn c(x: &mut isize) {\n \n fn d(x: &mut isize) {\n     let c1 = || set(x);\n-    let c2 = || set(x); //~ ERROR closure requires unique access to `x`\n+    let c2 = || set(x); //~ ERROR two closures require unique access to `x` at the same time\n }\n \n fn e(x: &mut isize) {"}, {"sha": "56cbe0b1878675314087ea02137e368721b1448a", "filename": "src/test/compile-fail/borrowck/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-lend-flow-loop.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -109,6 +109,7 @@ fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n         borrow(&*v); //~ ERROR cannot borrow\n         if cond2 {\n             x = &mut v; //~ ERROR cannot borrow\n+            //~^ ERROR cannot borrow\n         }\n     }\n }"}, {"sha": "f789d44016eb177850ec2dd3cf35b6ae421c3b11", "filename": "src/test/compile-fail/borrowck/borrowck-mut-borrow-linear-errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-mut-borrow-linear-errors.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -19,6 +19,7 @@ fn main() {\n         match 1 {\n             1 => { addr = &mut x; }\n             //~^ ERROR cannot borrow `x` as mutable more than once at a time\n+            //~| ERROR cannot borrow `x` as mutable more than once at a time\n             2 => { addr = &mut x; }\n             //~^ ERROR cannot borrow `x` as mutable more than once at a time\n             _ => { addr = &mut x; }"}, {"sha": "3ca8cc431e0983ce8f5a9365420ae7b3f7d45f02", "filename": "src/test/compile-fail/borrowck/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-report-with-custom-diagnostic.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -13,21 +13,23 @@ fn main() {\n     // Original borrow ends at end of function\n     let mut x = 1;\n     let y = &mut x;\n-    //~^ previous borrow of `x` occurs here; the mutable borrow prevents\n+    //~^ mutable borrow occurs here\n     let z = &x; //~ ERROR cannot borrow\n+    //~^ immutable borrow occurs here\n }\n-//~^ NOTE previous borrow ends here\n+//~^ NOTE mutable borrow ends here\n \n fn foo() {\n     match true {\n         true => {\n             // Original borrow ends at end of match arm\n             let mut x = 1;\n             let y = &x;\n-            //~^ previous borrow of `x` occurs here; the immutable borrow prevents\n+            //~^ immutable borrow occurs here\n             let z = &mut x; //~ ERROR cannot borrow\n+            //~^ mutable borrow occurs here\n         }\n-     //~^ NOTE previous borrow ends here\n+     //~^ NOTE immutable borrow ends here\n         false => ()\n     }\n }\n@@ -37,8 +39,9 @@ fn bar() {\n     || {\n         let mut x = 1;\n         let y = &mut x;\n-        //~^ previous borrow of `x` occurs here; the mutable borrow prevents\n+        //~^ first mutable borrow occurs here\n         let z = &mut x; //~ ERROR cannot borrow\n+        //~^ second mutable borrow occurs here\n     };\n- //~^ NOTE previous borrow ends here\n+ //~^ NOTE first borrow ends here\n }"}, {"sha": "a387e4c5ece11467527a39ad57b4a9d7eb1a5db6", "filename": "src/test/compile-fail/closure-wrong-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fclosure-wrong-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fclosure-wrong-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclosure-wrong-kind.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -17,6 +17,6 @@ fn bar<T: Fn(u32)>(_: T) {}\n \n fn main() {\n     let x = X;\n-    let closure = |_| foo(x);  //~ ERROR E0524\n+    let closure = |_| foo(x);  //~ ERROR E0525\n     bar(closure);\n }"}, {"sha": "634d12441a12077c73bf3c5b62f63ff126d4d21b", "filename": "src/test/compile-fail/coerce-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-mut.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let x = 0;\n     f(&x);\n     //~^ ERROR mismatched types\n-    //~| expected `&mut i32`\n-    //~| found `&_`\n+    //~| expected type `&mut i32`\n+    //~| found type `&_`\n     //~| values differ in mutability\n }"}, {"sha": "bd7e6c2a2131d36d0eb104be0864caabe72b9c40", "filename": "src/test/compile-fail/coercion-slice.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoercion-slice.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -13,8 +13,7 @@\n fn main() {\n     let _: &[i32] = [0];\n     //~^ ERROR mismatched types\n-    //~| expected `&[i32]`\n-    //~| found `[_; 1]`\n-    //~| expected &-ptr\n-    //~| found array of 1 elements\n+    //~| expected type `&[i32]`\n+    //~| found type `[_; 1]`\n+    //~| expected &-ptr, found array of 1 elements\n }"}, {"sha": "ea9a29c0e2ae5e9aaf1080fc10427e9e37a7dce6", "filename": "src/test/compile-fail/cross-borrow-trait.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcross-borrow-trait.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -19,8 +19,7 @@ pub fn main() {\n     // FIXME (#22405): Replace `Box::new` with `box` here when/if possible.\n     let x: Box<Trait> = Box::new(Foo);\n     let _y: &Trait = x; //~  ERROR mismatched types\n-                        //~| expected `&Trait`\n-                        //~| found `Box<Trait>`\n-                        //~| expected &-ptr\n-                        //~| found box\n+                        //~| expected type `&Trait`\n+                        //~| found type `Box<Trait>`\n+                        //~| expected &-ptr, found box\n }"}, {"sha": "4702b504f157d9e4ad6c2745c6d53ffd6b792ee3", "filename": "src/test/compile-fail/default_ty_param_conflict.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -23,6 +23,9 @@ fn main() {\n     // Here, F is instantiated with $0=uint\n     let x = foo();\n     //~^ ERROR: mismatched types\n+    //~| expected type `usize`\n+    //~| found type `isize`\n+    //~| NOTE: conflicting type parameter defaults `usize` and `isize`\n     //~| NOTE: conflicting type parameter defaults `usize` and `isize`\n     //~| NOTE: ...that was applied to an unconstrained type variable here\n "}, {"sha": "b608c6c99be89a5754760dde87272bb94ac54945", "filename": "src/test/compile-fail/default_ty_param_conflict_cross_crate.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdefault_ty_param_conflict_cross_crate.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -24,7 +24,11 @@ fn main() {\n     //~^ NOTE: ...that also applies to the same type variable here\n \n     meh(foo);\n-    //~^ ERROR: mismatched types:\n+    //~^ ERROR: mismatched types\n     //~| NOTE: conflicting type parameter defaults `bool` and `char`\n+    //~| NOTE: conflicting type parameter defaults `bool` and `char`\n+    //~| a second default is defined on `default_param_test::bleh`\n     //~| NOTE:  ...that was applied to an unconstrained type variable here\n+    //~| expected type `bool`\n+    //~| found type `char`\n }"}, {"sha": "d0a31fbce91ed38475c42f7a1b1c23c20eaafac3", "filename": "src/test/compile-fail/destructure-trait-ref.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdestructure-trait-ref.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -40,20 +40,17 @@ fn main() {\n     // n > m\n     let &&x = &1isize as &T;\n     //~^ ERROR mismatched types\n-    //~| expected `T`\n-    //~| found `&_`\n-    //~| expected trait T\n-    //~| found &-ptr\n+    //~| expected type `T`\n+    //~| found type `&_`\n+    //~| expected trait T, found &-ptr\n     let &&&x = &(&1isize as &T);\n     //~^ ERROR mismatched types\n-    //~| expected `T`\n-    //~| found `&_`\n-    //~| expected trait T\n-    //~| found &-ptr\n+    //~| expected type `T`\n+    //~| found type `&_`\n+    //~| expected trait T, found &-ptr\n     let box box x = box 1isize as Box<T>;\n     //~^ ERROR mismatched types\n-    //~| expected `T`\n-    //~| found `Box<_>`\n-    //~| expected trait T\n-    //~| found box\n+    //~| expected type `T`\n+    //~| found type `Box<_>`\n+    //~| expected trait T, found box\n }"}, {"sha": "9e71ad2417792801b1eb88c5efe44ddb4abfcb81", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -45,9 +45,8 @@ pub fn main() {\n     let z: Box<ToBar> = Box::new(Bar1 {f: 36});\n     f5.ptr = Bar1 {f: 36};\n     //~^ ERROR mismatched types\n-    //~| expected `ToBar`\n-    //~| found `Bar1`\n-    //~| expected trait ToBar\n-    //~| found struct `Bar1`\n+    //~| expected type `ToBar`\n+    //~| found type `Bar1`\n+    //~| expected trait ToBar, found struct `Bar1`\n     //~| ERROR `ToBar: std::marker::Sized` is not satisfied\n }"}, {"sha": "9d4d56cf79190a78b12d9852d89c287bcbe8d21a", "filename": "src/test/compile-fail/dst-bad-coerce4.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-coerce4.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -19,8 +19,7 @@ pub fn main() {\n     let f1: &Fat<[isize]> = &Fat { ptr: [1, 2, 3] };\n     let f2: &Fat<[isize; 3]> = f1;\n     //~^ ERROR mismatched types\n-    //~| expected `&Fat<[isize; 3]>`\n-    //~| found `&Fat<[isize]>`\n-    //~| expected array of 3 elements\n-    //~| found slice\n+    //~| expected type `&Fat<[isize; 3]>`\n+    //~| found type `&Fat<[isize]>`\n+    //~| expected array of 3 elements, found slice\n }"}, {"sha": "b5432fafb1b855f0b09cb6a1a2634b847673acc8", "filename": "src/test/compile-fail/explicit-self-lifetime-mismatch.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexplicit-self-lifetime-mismatch.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -16,12 +16,12 @@ struct Foo<'a,'b> {\n impl<'a,'b> Foo<'a,'b> {\n     fn bar(self: Foo<'b,'a>) {}\n     //~^ ERROR mismatched types\n-    //~| expected `Foo<'a, 'b>`\n-    //~| found `Foo<'b, 'a>`\n+    //~| expected type `Foo<'a, 'b>`\n+    //~| found type `Foo<'b, 'a>`\n     //~| lifetime mismatch\n     //~| ERROR mismatched types\n-    //~| expected `Foo<'a, 'b>`\n-    //~| found `Foo<'b, 'a>`\n+    //~| expected type `Foo<'a, 'b>`\n+    //~| found type `Foo<'b, 'a>`\n     //~| lifetime mismatch\n }\n "}, {"sha": "11f299acefa874e55b5efa49b81eb345fd9350be", "filename": "src/test/compile-fail/extern-main-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fextern-main-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fextern-main-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-main-fn.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern fn main() {} //~ ERROR: main function expects type\n+extern fn main() {} //~ ERROR: main function has wrong type"}, {"sha": "6217a9f16b93523d868139299feddf0716e556a1", "filename": "src/test/compile-fail/fn-item-type.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-item-type.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -22,26 +22,22 @@ impl<T> Foo for T { /* `foo` is still default here */ }\n fn main() {\n     eq(foo::<u8>, bar::<u8>);\n     //~^ ERROR mismatched types\n-    //~|  expected `fn(isize) -> isize {foo::<u8>}`\n-    //~|  found `fn(isize) -> isize {bar::<u8>}`\n-    //~|  expected fn item\n-    //~|  found a different fn item\n+    //~|  expected type `fn(isize) -> isize {foo::<u8>}`\n+    //~|  found type `fn(isize) -> isize {bar::<u8>}`\n+    //~|  expected fn item, found a different fn item\n \n     eq(foo::<u8>, foo::<i8>);\n     //~^ ERROR mismatched types\n-    //~|  expected `fn(isize) -> isize {foo::<u8>}`\n-    //~|  found `fn(isize) -> isize {foo::<i8>}`\n+    //~| expected u8, found i8\n \n     eq(bar::<String>, bar::<Vec<u8>>);\n     //~^ ERROR mismatched types\n-    //~|  expected `fn(isize) -> isize {bar::<std::string::String>}`\n-    //~|  found `fn(isize) -> isize {bar::<std::vec::Vec<u8>>}`\n-    //~|  expected struct `std::string::String`\n-    //~|  found struct `std::vec::Vec`\n+    //~|  expected type `fn(isize) -> isize {bar::<std::string::String>}`\n+    //~|  found type `fn(isize) -> isize {bar::<std::vec::Vec<u8>>}`\n+    //~|  expected struct `std::string::String`, found struct `std::vec::Vec`\n \n     // Make sure we distinguish between trait methods correctly.\n     eq(<u8 as Foo>::foo, <u16 as Foo>::foo);\n     //~^ ERROR mismatched types\n-    //~|  expected `fn() {<u8 as Foo>::foo}`\n-    //~|  found `fn() {<u16 as Foo>::foo}`\n+    //~| expected u8, found u16\n }"}, {"sha": "fd140cd1d391a6bf1ca7105bb94cabfbe87a10dd", "filename": "src/test/compile-fail/fn-trait-formatting.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-trait-formatting.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -16,22 +16,19 @@ fn needs_fn<F>(x: F) where F: Fn(isize) -> isize {}\n fn main() {\n     let _: () = (box |_: isize| {}) as Box<FnOnce(isize)>;\n     //~^ ERROR mismatched types\n-    //~| expected `()`\n-    //~| found `Box<std::ops::FnOnce(isize)>`\n-    //~| expected ()\n-    //~| found box\n+    //~| expected type `()`\n+    //~| found type `Box<std::ops::FnOnce(isize)>`\n+    //~| expected (), found box\n     let _: () = (box |_: isize, isize| {}) as Box<Fn(isize, isize)>;\n     //~^ ERROR mismatched types\n-    //~| expected `()`\n-    //~| found `Box<std::ops::Fn(isize, isize)>`\n-    //~| expected ()\n-    //~| found box\n+    //~| expected type `()`\n+    //~| found type `Box<std::ops::Fn(isize, isize)>`\n+    //~| expected (), found box\n     let _: () = (box || -> isize { unimplemented!() }) as Box<FnMut() -> isize>;\n     //~^ ERROR mismatched types\n-    //~| expected `()`\n-    //~| found `Box<std::ops::FnMut() -> isize>`\n-    //~| expected ()\n-    //~| found box\n+    //~| expected type `()`\n+    //~| found type `Box<std::ops::FnMut() -> isize>`\n+    //~| expected (), found box\n \n     needs_fn(1);\n     //~^ ERROR : std::ops::Fn<(isize,)>`"}, {"sha": "5ea8ce226443836889e06866c287577af8a95f3a", "filename": "src/test/compile-fail/fully-qualified-type-name1.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name1.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -14,8 +14,7 @@ fn main() {\n     let x: Option<usize>;\n     x = 5;\n     //~^ ERROR mismatched types\n-    //~| expected `std::option::Option<usize>`\n-    //~| found `_`\n-    //~| expected enum `std::option::Option`\n-    //~| found integral variable\n+    //~| expected type `std::option::Option<usize>`\n+    //~| found type `_`\n+    //~| expected enum `std::option::Option`, found integral variable\n }"}, {"sha": "9ba8a11d536bede788c8f3d9a4ec2bf6e60c9224", "filename": "src/test/compile-fail/fully-qualified-type-name2.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name2.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -21,10 +21,9 @@ mod y {\n fn bar(x: x::foo) -> y::foo {\n     return x;\n     //~^ ERROR mismatched types\n-    //~| expected `y::foo`\n-    //~| found `x::foo`\n-    //~| expected enum `y::foo`\n-    //~| found enum `x::foo`\n+    //~| expected type `y::foo`\n+    //~| found type `x::foo`\n+    //~| expected enum `y::foo`, found enum `x::foo`\n }\n \n fn main() {"}, {"sha": "3c8fde751f123cec50b3b59d6829dd0a9d41e97d", "filename": "src/test/compile-fail/fully-qualified-type-name4.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -15,10 +15,9 @@ use std::option::Option;\n fn bar(x: usize) -> Option<usize> {\n     return x;\n     //~^ ERROR mismatched types\n-    //~| expected `std::option::Option<usize>`\n-    //~| found `usize`\n-    //~| expected enum `std::option::Option`\n-    //~| found usize\n+    //~| expected type `std::option::Option<usize>`\n+    //~| found type `usize`\n+    //~| expected enum `std::option::Option`, found usize\n }\n \n fn main() {"}, {"sha": "71d7cf792e4754d3b19397808b99c16fa655b6be", "filename": "src/test/compile-fail/generic-type-params-name-repr.rs", "status": "modified", "additions": 18, "deletions": 24, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -22,46 +22,40 @@ fn main() {\n     // Ensure that the printed type doesn't include the default type params...\n     let _: Foo<isize> = ();\n     //~^ ERROR mismatched types\n-    //~| expected `Foo<isize>`\n-    //~| found `()`\n-    //~| expected struct `Foo`\n-    //~| found ()\n+    //~| expected type `Foo<isize>`\n+    //~| found type `()`\n+    //~| expected struct `Foo`, found ()\n \n     // ...even when they're present, but the same types as the defaults.\n     let _: Foo<isize, B, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected `Foo<isize>`\n-    //~| found `()`\n-    //~| expected struct `Foo`\n-    //~| found ()\n+    //~| expected type `Foo<isize>`\n+    //~| found type `()`\n+    //~| expected struct `Foo`, found ()\n \n     // Including cases where the default is using previous type params.\n     let _: HashMap<String, isize> = ();\n     //~^ ERROR mismatched types\n-    //~| expected `HashMap<std::string::String, isize>`\n-    //~| found `()`\n-    //~| expected struct `HashMap`\n-    //~| found ()\n+    //~| expected type `HashMap<std::string::String, isize>`\n+    //~| found type `()`\n+    //~| expected struct `HashMap`, found ()\n     let _: HashMap<String, isize, Hash<String>> = ();\n     //~^ ERROR mismatched types\n-    //~| expected `HashMap<std::string::String, isize>`\n-    //~| found `()`\n-    //~| expected struct `HashMap`\n-    //~| found ()\n+    //~| expected type `HashMap<std::string::String, isize>`\n+    //~| found type `()`\n+    //~| expected struct `HashMap`, found ()\n \n     // But not when there's a different type in between.\n     let _: Foo<A, isize, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected `Foo<A, isize>`\n-    //~| found `()`\n-    //~| expected struct `Foo`\n-    //~| found ()\n+    //~| expected type `Foo<A, isize>`\n+    //~| found type `()`\n+    //~| expected struct `Foo`, found ()\n \n     // And don't print <> at all when there's just defaults.\n     let _: Foo<A, B, C> = ();\n     //~^ ERROR mismatched types\n-    //~| expected `Foo`\n-    //~| found `()`\n-    //~| expected struct `Foo`\n-    //~| found ()\n+    //~| expected type `Foo`\n+    //~| found type `()`\n+    //~| expected struct `Foo`, found ()\n }"}, {"sha": "ca9803f66b20d4e35502fa197d428d7e35409be4", "filename": "src/test/compile-fail/if-branch-types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fif-branch-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fif-branch-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-branch-types.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -11,6 +11,5 @@\n fn main() {\n     let x = if true { 10i32 } else { 10u32 };\n     //~^ ERROR if and else have incompatible types\n-    //~| expected `i32`\n-    //~| found `u32`\n+    //~| expected i32, found u32\n }"}, {"sha": "c7b1e1a62c2097c4e87fdcbdec210f5aa8b7f9a3", "filename": "src/test/compile-fail/if-let-arm-types.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-let-arm-types.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -10,6 +10,9 @@\n \n fn main() {\n     if let Some(b) = None { //~ ERROR: `if let` arms have incompatible types\n+        //~^ expected (), found integral variable\n+        //~| expected type `()`\n+        //~| found type `_`\n         ()\n     } else {                //~ NOTE: `if let` arm with an incompatible type\n         1"}, {"sha": "e8aa1f70ea1dcd85f6aa7fe6b37d9f3c404bda18", "filename": "src/test/compile-fail/if-without-else-result.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-without-else-result.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -11,9 +11,8 @@\n fn main() {\n     let a = if true { true };\n     //~^ ERROR if may be missing an else clause\n-    //~| expected `()`\n-    //~| found `bool`\n-    //~| expected ()\n-    //~| found bool\n+    //~| expected type `()`\n+    //~| found type `bool`\n+    //~| expected (), found bool\n     println!(\"{}\", a);\n }"}, {"sha": "7a850d90a87477f76ebdc3d2cc02a88be1ba0cd7", "filename": "src/test/compile-fail/integer-literal-suffix-inference.rs", "status": "modified", "additions": 36, "deletions": 72, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finteger-literal-suffix-inference.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -41,168 +41,132 @@ fn main() {\n     id_i8(a8); // ok\n     id_i8(a16);\n     //~^ ERROR mismatched types\n-    //~| expected `i8`\n-    //~| found `i16`\n+    //~| expected i8, found i16\n     id_i8(a32);\n     //~^ ERROR mismatched types\n-    //~| expected `i8`\n-    //~| found `i32`\n+    //~| expected i8, found i32\n     id_i8(a64);\n     //~^ ERROR mismatched types\n-    //~| expected `i8`\n-    //~| found `i64`\n+    //~| expected i8, found i64\n \n     id_i16(a8);\n     //~^ ERROR mismatched types\n-    //~| expected `i16`\n-    //~| found `i8`\n+    //~| expected i16, found i8\n     id_i16(a16); // ok\n     id_i16(a32);\n     //~^ ERROR mismatched types\n-    //~| expected `i16`\n-    //~| found `i32`\n+    //~| expected i16, found i32\n     id_i16(a64);\n     //~^ ERROR mismatched types\n-    //~| expected `i16`\n-    //~| found `i64`\n+    //~| expected i16, found i64\n \n     id_i32(a8);\n     //~^ ERROR mismatched types\n-    //~| expected `i32`\n-    //~| found `i8`\n+    //~| expected i32, found i8\n     id_i32(a16);\n     //~^ ERROR mismatched types\n-    //~| expected `i32`\n-    //~| found `i16`\n+    //~| expected i32, found i16\n     id_i32(a32); // ok\n     id_i32(a64);\n     //~^ ERROR mismatched types\n-    //~| expected `i32`\n-    //~| found `i64`\n+    //~| expected i32, found i64\n \n     id_i64(a8);\n     //~^ ERROR mismatched types\n-    //~| expected `i64`\n-    //~| found `i8`\n+    //~| expected i64, found i8\n     id_i64(a16);\n     //~^ ERROR mismatched types\n-    //~| expected `i64`\n-    //~| found `i16`\n+    //~| expected i64, found i16\n     id_i64(a32);\n     //~^ ERROR mismatched types\n-    //~| expected `i64`\n-    //~| found `i32`\n+    //~| expected i64, found i32\n     id_i64(a64); // ok\n \n     id_i8(c8); // ok\n     id_i8(c16);\n     //~^ ERROR mismatched types\n-    //~| expected `i8`\n-    //~| found `i16`\n+    //~| expected i8, found i16\n     id_i8(c32);\n     //~^ ERROR mismatched types\n-    //~| expected `i8`\n-    //~| found `i32`\n+    //~| expected i8, found i32\n     id_i8(c64);\n     //~^ ERROR mismatched types\n-    //~| expected `i8`\n-    //~| found `i64`\n+    //~| expected i8, found i64\n \n     id_i16(c8);\n     //~^ ERROR mismatched types\n-    //~| expected `i16`\n-    //~| found `i8`\n+    //~| expected i16, found i8\n     id_i16(c16); // ok\n     id_i16(c32);\n     //~^ ERROR mismatched types\n-    //~| expected `i16`\n-    //~| found `i32`\n+    //~| expected i16, found i32\n     id_i16(c64);\n     //~^ ERROR mismatched types\n-    //~| expected `i16`\n-    //~| found `i64`\n+    //~| expected i16, found i64\n \n     id_i32(c8);\n     //~^ ERROR mismatched types\n-    //~| expected `i32`\n-    //~| found `i8`\n+    //~| expected i32, found i8\n     id_i32(c16);\n     //~^ ERROR mismatched types\n-    //~| expected `i32`\n-    //~| found `i16`\n+    //~| expected i32, found i16\n     id_i32(c32); // ok\n     id_i32(c64);\n     //~^ ERROR mismatched types\n-    //~| expected `i32`\n-    //~| found `i64`\n+    //~| expected i32, found i64\n \n     id_i64(a8);\n     //~^ ERROR mismatched types\n-    //~| expected `i64`\n-    //~| found `i8`\n+    //~| expected i64, found i8\n     id_i64(a16);\n     //~^ ERROR mismatched types\n-    //~| expected `i64`\n-    //~| found `i16`\n+    //~| expected i64, found i16\n     id_i64(a32);\n     //~^ ERROR mismatched types\n-    //~| expected `i64`\n-    //~| found `i32`\n+    //~| expected i64, found i32\n     id_i64(a64); // ok\n \n     id_u8(b8); // ok\n     id_u8(b16);\n     //~^ ERROR mismatched types\n-    //~| expected `u8`\n-    //~| found `u16`\n+    //~| expected u8, found u16\n     id_u8(b32);\n     //~^ ERROR mismatched types\n-    //~| expected `u8`\n-    //~| found `u32`\n+    //~| expected u8, found u32\n     id_u8(b64);\n     //~^ ERROR mismatched types\n-    //~| expected `u8`\n-    //~| found `u64`\n+    //~| expected u8, found u64\n \n     id_u16(b8);\n     //~^ ERROR mismatched types\n-    //~| expected `u16`\n-    //~| found `u8`\n+    //~| expected u16, found u8\n     id_u16(b16); // ok\n     id_u16(b32);\n     //~^ ERROR mismatched types\n-    //~| expected `u16`\n-    //~| found `u32`\n+    //~| expected u16, found u32\n     id_u16(b64);\n     //~^ ERROR mismatched types\n-    //~| expected `u16`\n-    //~| found `u64`\n+    //~| expected u16, found u64\n \n     id_u32(b8);\n     //~^ ERROR mismatched types\n-    //~| expected `u32`\n-    //~| found `u8`\n+    //~| expected u32, found u8\n     id_u32(b16);\n     //~^ ERROR mismatched types\n-    //~| expected `u32`\n-    //~| found `u16`\n+    //~| expected u32, found u16\n     id_u32(b32); // ok\n     id_u32(b64);\n     //~^ ERROR mismatched types\n-    //~| expected `u32`\n-    //~| found `u64`\n+    //~| expected u32, found u64\n \n     id_u64(b8);\n     //~^ ERROR mismatched types\n-    //~| expected `u64`\n-    //~| found `u8`\n+    //~| expected u64, found u8\n     id_u64(b16);\n     //~^ ERROR mismatched types\n-    //~| expected `u64`\n-    //~| found `u16`\n+    //~| expected u64, found u16\n     id_u64(b32);\n     //~^ ERROR mismatched types\n-    //~| expected `u64`\n-    //~| found `u32`\n+    //~| expected u64, found u32\n     id_u64(b64); // ok\n }"}, {"sha": "99f2d25166891b1a785f03c1e8098edf9c113d63", "filename": "src/test/compile-fail/integral-variable-unification-error.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-variable-unification-error.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -12,8 +12,7 @@ fn main() {\n     let mut x = 2;\n     x = 5.0;\n     //~^ ERROR mismatched types\n-    //~| expected `_`\n-    //~| found `_`\n-    //~| expected integral variable\n-    //~| found floating-point variable\n+    //~| expected type `_`\n+    //~| found type `_`\n+    //~| expected integral variable, found floating-point variable\n }"}, {"sha": "434b795ff31f54404c489ae3491aaaf4a81d4ead", "filename": "src/test/compile-fail/issue-10176.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-10176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-10176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10176.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -11,10 +11,9 @@\n fn f() -> isize {\n     (return 1, return 2)\n //~^ ERROR mismatched types\n-//~| expected `isize`\n-//~| found `(_, _)`\n-//~| expected isize\n-//~| found tuple\n+//~| expected type `isize`\n+//~| found type `(_, _)`\n+//~| expected isize, found tuple\n }\n \n fn main() {}"}, {"sha": "8242fa1c2e9794eb8c92f61b1f81710ad910e3c4", "filename": "src/test/compile-fail/issue-11319.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-11319.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-11319.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11319.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -10,11 +10,10 @@\n \n fn main() {\n     match Some(10) {\n-    //~^ ERROR match arms have incompatible types:\n-    //~| expected `bool`\n-    //~| found `()`\n-    //~| expected bool\n-    //~| found ()\n+    //~^ ERROR match arms have incompatible types\n+    //~| expected type `bool`\n+    //~| found type `()`\n+    //~| expected bool, found ()\n         Some(5) => false,\n         Some(2) => true,\n         None    => (), //~ NOTE match arm with an incompatible type"}, {"sha": "436d9e91dc72f2ff4935e486780a05ab47e0feae", "filename": "src/test/compile-fail/issue-12997-2.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12997-2.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -15,7 +15,6 @@\n #[bench]\n fn bar(x: isize) { }\n //~^ ERROR mismatched types\n-//~| expected `fn(&mut __test::test::Bencher)`\n-//~| found `fn(isize) {bar}`\n-//~| expected &-ptr\n-//~| found isize\n+//~| expected type `fn(&mut __test::test::Bencher)`\n+//~| found type `fn(isize) {bar}`\n+//~| expected &-ptr, found isize"}, {"sha": "e33859e8c19a38479ee260f2579c00b8dd66068b", "filename": "src/test/compile-fail/issue-13359.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13359.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -15,11 +15,9 @@ fn bar(_s: u32) { }\n fn main() {\n     foo(1*(1 as isize));\n     //~^ ERROR mismatched types\n-    //~| expected `i16`\n-    //~| found `isize`\n+    //~| expected i16, found isize\n \n     bar(1*(1 as usize));\n     //~^ ERROR mismatched types\n-    //~| expected `u32`\n-    //~| found `usize`\n+    //~| expected u32, found usize\n }"}, {"sha": "17b96411603ef3e3ce6ffd4981728f34fd98e686", "filename": "src/test/compile-fail/issue-13466.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -17,16 +17,14 @@ pub fn main() {\n     let _x: usize = match Some(1) {\n         Ok(u) => u,\n         //~^ ERROR mismatched types\n-        //~| expected `std::option::Option<_>`\n-        //~| found `std::result::Result<_, _>`\n-        //~| expected enum `std::option::Option`\n-        //~| found enum `std::result::Result`\n+        //~| expected type `std::option::Option<_>`\n+        //~| found type `std::result::Result<_, _>`\n+        //~| expected enum `std::option::Option`, found enum `std::result::Result`\n \n         Err(e) => panic!(e)\n         //~^ ERROR mismatched types\n-        //~| expected `std::option::Option<_>`\n-        //~| found `std::result::Result<_, _>`\n-        //~| expected enum `std::option::Option`\n-        //~| found enum `std::result::Result`\n+        //~| expected type `std::option::Option<_>`\n+        //~| found type `std::result::Result<_, _>`\n+        //~| expected enum `std::option::Option`, found enum `std::result::Result`\n     };\n }"}, {"sha": "fe03373a45d9fd6b08ab2488febec50aea53e3d5", "filename": "src/test/compile-fail/issue-13482-2.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482-2.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -17,10 +17,9 @@ fn main() {\n     let y = match x {\n         [] => None,\n //~^ ERROR mismatched types\n-//~| expected `[_#1i; 2]`\n-//~| found `[_#7t; 0]`\n-//~| expected an array with a fixed size of 2 elements\n-//~| found one with 0 elements\n+//~| expected type `[_#1i; 2]`\n+//~| found type `[_#7t; 0]`\n+//~| expected an array with a fixed size of 2 elements, found one with 0 elements\n         [a,_] => Some(a)\n     };\n }"}, {"sha": "7ed7f5898b1b7411f4b49e713b8f2203db2eb5f5", "filename": "src/test/compile-fail/issue-13482.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13482.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -15,8 +15,8 @@ fn main() {\n   let y = match x {\n     [] => None,\n     //~^ ERROR mismatched types\n-    //~| expected `[_; 2]`\n-    //~| found `[_; 0]`\n+    //~| expected type `[_; 2]`\n+    //~| found type `[_; 0]`\n     //~| expected an array with a fixed size of 2 elements\n     [a,_] => Some(a)\n   };"}, {"sha": "e4ed87c3cb0cd5baac0a663c3af4a76006e38c9f", "filename": "src/test/compile-fail/issue-13624.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-13624.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-13624.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13624.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -16,10 +16,9 @@ mod a {\n   pub fn get_enum_struct_variant() -> () {\n     Enum::EnumStructVariant { x: 1, y: 2, z: 3 }\n     //~^ ERROR mismatched types\n-    //~| expected `()`\n-    //~| found `a::Enum`\n-    //~| expected ()\n-    //~| found enum `a::Enum`\n+    //~| expected type `()`\n+    //~| found type `a::Enum`\n+    //~| expected (), found enum `a::Enum`\n   }\n }\n \n@@ -32,10 +31,9 @@ mod b {\n       match enum_struct_variant {\n         a::Enum::EnumStructVariant { x, y, z } => {\n         //~^ ERROR mismatched types\n-        //~| expected `()`\n-        //~| found `a::Enum`\n-        //~| expected ()\n-        // found enum `a::Enum`\n+        //~| expected type `()`\n+        //~| found type `a::Enum`\n+        //~| expected (), found enum `a::Enum`\n         }\n       }\n     }"}, {"sha": "ccaeeab8b4789679da7928cd6d8968f3c3fd3e89", "filename": "src/test/compile-fail/issue-14091.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-14091.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-14091.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14091.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -9,9 +9,8 @@\n // except according to those terms.\n \n // error-pattern:mismatched types\n-// error-pattern:expected `bool`\n-// error-pattern:found `_`\n-// error-pattern:expected bool\n-// error-pattern:found integral variable\n+// error-pattern:expected bool, found integral variable\n+// error-pattern:expected type `bool`\n+// error-pattern:found type `_`\n \n fn main(){assert!(1,1);}"}, {"sha": "84c600d2201e324b378566a0e3d9e9083ecc2271", "filename": "src/test/compile-fail/issue-14541.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-14541.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-14541.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14541.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -14,10 +14,9 @@ struct vec3 { y: f32, z: f32 }\n fn make(v: vec2) {\n     let vec3 { y: _, z: _ } = v;\n     //~^ ERROR mismatched types\n-    //~| expected `vec2`\n-    //~| found `vec3`\n-    //~| expected struct `vec2`\n-    //~| found struct `vec3`\n+    //~| expected type `vec2`\n+    //~| found type `vec3`\n+    //~| expected struct `vec2`, found struct `vec3`\n }\n \n fn main() { }"}, {"sha": "37a2f1582bf08124fd4a152783a9f29c80be6623", "filename": "src/test/compile-fail/issue-15783.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15783.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -17,9 +17,8 @@ fn main() {\n     let x = Some(&[name]);\n     let msg = foo(x);\n //~^ ERROR mismatched types\n-//~| expected `std::option::Option<&[&str]>`\n-//~| found `std::option::Option<&[&str; 1]>`\n-//~| expected slice\n-//~| found array of 1 elements\n+//~| expected type `std::option::Option<&[&str]>`\n+//~| found type `std::option::Option<&[&str; 1]>`\n+//~| expected slice, found array of 1 elements\n     assert_eq!(msg, 3);\n }"}, {"sha": "35ef9ba2b4beacc244b90cd3e623a206241cd6ed", "filename": "src/test/compile-fail/issue-15896.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-15896.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -20,10 +20,9 @@ fn main() {\n         E::B(\n           Tau{t: x},\n           //~^ ERROR mismatched types\n-          //~| expected `main::R`\n-          //~| found `main::Tau`\n-          //~| expected enum `main::R`\n-          //~| found struct `main::Tau`\n+          //~| expected type `main::R`\n+          //~| found type `main::Tau`\n+          //~| expected enum `main::R`, found struct `main::Tau`\n           _) => x,\n     };\n }"}, {"sha": "da6d081a7acb57e654e2fdadd9862246db842b2e", "filename": "src/test/compile-fail/issue-16338.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16338.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -13,8 +13,7 @@ use std::raw::Slice;\n fn main() {\n     let Slice { data: data, len: len } = \"foo\";\n     //~^ ERROR mismatched types\n-    //~| expected `&str`\n-    //~| found `std::raw::Slice<_>`\n-    //~| expected &-ptr\n-    //~| found struct `std::raw::Slice`\n+    //~| expected type `&str`\n+    //~| found type `std::raw::Slice<_>`\n+    //~| expected &-ptr, found struct `std::raw::Slice`\n }"}, {"sha": "df272a71cee4f70af8daf73c6cb9475e79c76cd6", "filename": "src/test/compile-fail/issue-16401.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-16401.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -14,10 +14,9 @@ fn main() {\n     match () {\n         Slice { data: data, len: len } => (),\n         //~^ ERROR mismatched types\n-        //~| expected `()`\n-        //~| found `std::raw::Slice<_>`\n-        //~| expected ()\n-        //~| found struct `std::raw::Slice`\n+        //~| expected type `()`\n+        //~| found type `std::raw::Slice<_>`\n+        //~| expected (), found struct `std::raw::Slice`\n         _ => unreachable!()\n     }\n }"}, {"sha": "f0fe01b4159706b1281474395a81a477d0be0e47", "filename": "src/test/compile-fail/issue-17033.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17033.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -12,10 +12,9 @@\n \n fn f<'r>(p: &'r mut fn(p: &mut ())) {\n     (*p)(()) //~  ERROR mismatched types\n-             //~| expected `&mut ()`\n-             //~| found `()`\n-             //~| expected &-ptr\n-             //~| found ()\n+             //~| expected type `&mut ()`\n+             //~| found type `()`\n+             //~| expected &-ptr, found ()\n }\n \n fn main() {}"}, {"sha": "063afe285fad3cb75d367c7be1eee5c4f243ac8b", "filename": "src/test/compile-fail/issue-17263.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17263.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -15,13 +15,15 @@ struct Foo { a: isize, b: isize }\n fn main() {\n     let mut x: Box<_> = box Foo { a: 1, b: 2 };\n     let (a, b) = (&mut x.a, &mut x.b);\n-    //~^ ERROR cannot borrow `x` (here through borrowing `x.b`) as mutable more than once at a time\n-    //~^^ NOTE previous borrow of `x` occurs here (through borrowing `x.a`)\n+    //~^ ERROR cannot borrow `x` (via `x.b`) as mutable more than once at a time\n+    //~| NOTE first mutable borrow occurs here (via `x.a`)\n+    //~| NOTE second mutable borrow occurs here (via `x.b`)\n \n     let mut foo: Box<_> = box Foo { a: 1, b: 2 };\n     let (c, d) = (&mut foo.a, &foo.b);\n-    //~^ ERROR cannot borrow `foo` (here through borrowing `foo.b`) as immutable\n-    //~^^ NOTE previous borrow of `foo` occurs here (through borrowing `foo.a`)\n+    //~^ ERROR cannot borrow `foo` (via `foo.b`) as immutable\n+    //~| NOTE mutable borrow occurs here (via `foo.a`)\n+    //~| NOTE immutable borrow occurs here (via `foo.b`)\n }\n-//~^ NOTE previous borrow ends here\n-//~^^ NOTE previous borrow ends here\n+//~^ NOTE first borrow ends here\n+//~^^ NOTE mutable borrow ends here"}, {"sha": "98208bcfdbdee1e7f0cf1556ec51a4c8c3dded62", "filename": "src/test/compile-fail/issue-17283.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -24,28 +24,25 @@ fn main() {\n     // `x { ... }` should not be interpreted as a struct literal here\n     if x = x {\n         //~^ ERROR mismatched types\n-        //~| expected `bool`\n-        //~| found `()`\n-        //~| expected bool\n-        //~| found ()\n+        //~| expected type `bool`\n+        //~| found type `()`\n+        //~| expected bool, found ()\n         println!(\"{}\", x);\n     }\n     // Explicit parentheses on the left should match behavior of above\n     if (x = x) {\n         //~^ ERROR mismatched types\n-        //~| expected `bool`\n-        //~| found `()`\n-        //~| expected bool\n-        //~| found ()\n+        //~| expected type `bool`\n+        //~| found type `()`\n+        //~| expected bool, found ()\n         println!(\"{}\", x);\n     }\n     // The struct literal interpretation is fine with explicit parentheses on the right\n     if y = (Foo { foo: x }) {\n         //~^ ERROR mismatched types\n-        //~| expected `bool`\n-        //~| found `()`\n-        //~| expected bool\n-        //~| found ()\n+        //~| expected type `bool`\n+        //~| found type `()`\n+        //~| expected bool, found ()\n         println!(\"{}\", x);\n     }\n }"}, {"sha": "f508d7123d88f6ce4d2b7a36eedfffc46b18a0f5", "filename": "src/test/compile-fail/issue-17728.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -108,6 +108,9 @@ impl Debug for Player {\n \n fn str_to_direction(to_parse: &str) -> RoomDirection {\n     match to_parse { //~ ERROR match arms have incompatible types\n+    //~^ expected enum `RoomDirection`, found enum `std::option::Option`\n+    //~| expected type `RoomDirection`\n+    //~| found type `std::option::Option<_>`\n         \"w\" | \"west\" => RoomDirection::West,\n         \"e\" | \"east\" => RoomDirection::East,\n         \"n\" | \"north\" => RoomDirection::North,"}, {"sha": "6b9294b2038f18fff4070765df96e8d574a31605", "filename": "src/test/compile-fail/issue-17740.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-17740.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-17740.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17740.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -15,12 +15,12 @@ struct Foo<'a> {\n impl <'a> Foo<'a>{\n     fn bar(self: &mut Foo) {\n     //~^ mismatched types\n-    //~| expected `&mut Foo<'a>`\n-    //~| found `&mut Foo<'_>`\n+    //~| expected type `&mut Foo<'a>`\n+    //~| found type `&mut Foo<'_>`\n     //~| lifetime mismatch\n     //~| mismatched types\n-    //~| expected `&mut Foo<'a>`\n-    //~| found `&mut Foo<'_>`\n+    //~| expected type `&mut Foo<'a>`\n+    //~| found type `&mut Foo<'_>`\n     //~| lifetime mismatch\n     }\n }"}, {"sha": "580684e2e140bf3b49e5ec946dcfef0a680eac6e", "filename": "src/test/compile-fail/issue-19109.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-19109.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-19109.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19109.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -12,11 +12,10 @@ trait Trait { }\n \n fn function(t: &mut Trait) {\n     t as *mut Trait\n- //~^ ERROR: mismatched types:\n- //~| expected `()`,\n- //~|    found `*mut Trait`\n- //~| (expected (),\n- //~|    found *-ptr) [E0308]\n+ //~^ ERROR: mismatched types\n+ //~| NOTE: expected type `()`\n+ //~| NOTE:    found type `*mut Trait`\n+ //~| NOTE: expected (), found *-ptr\n }\n \n fn main() { }"}, {"sha": "b368daaaf587c15cf874979d1a2ce9ec93c5d161", "filename": "src/test/compile-fail/issue-19991.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19991.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -13,10 +13,9 @@\n \n fn main() {\n     if let Some(homura) = Some(\"madoka\") { //~  ERROR missing an else clause\n-                                           //~| expected `()`\n-                                           //~| found `_`\n-                                           //~| expected ()\n-                                           //~| found integral variable\n+                                           //~| expected type `()`\n+                                           //~| found type `_`\n+                                           //~| expected (), found integral variable\n         765\n     };\n }"}, {"sha": "ac7e0f2e9a8678b1ee2f0ee9d60a963249f44f8b", "filename": "src/test/compile-fail/issue-24036.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-24036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-24036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24036.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -14,6 +14,9 @@ fn closure_to_loc() {\n     //~^ ERROR mismatched types\n     //~| NOTE no two closures, even if identical, have the same type\n     //~| HELP consider boxing your closure and/or using it as a trait object\n+    //~| expected closure, found a different closure\n+    //~| expected type `[closure\n+    //~| found type `[closure\n }\n \n fn closure_from_match() {\n@@ -26,6 +29,9 @@ fn closure_from_match() {\n     //~^^^^^^ ERROR match arms have incompatible types\n     //~| NOTE no two closures, even if identical, have the same type\n     //~| HELP consider boxing your closure and/or using it as a trait object\n+    //~| expected closure, found a different closure\n+    //~| expected type `[closure\n+    //~| found type `[closure\n }\n \n fn main() { }"}, {"sha": "5d6b989fc968ac8c818b96d70eb5041716a878e1", "filename": "src/test/compile-fail/issue-24357.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-24357.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-24357.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24357.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -12,7 +12,9 @@ struct NoCopy;\n fn main() {\n    let x = NoCopy;\n    let f = move || { let y = x; };\n-   //~^ NOTE `x` moved into closure environment here because it has type `NoCopy`\n+   //~^ value moved (into closure) here\n    let z = x;\n    //~^ ERROR use of moved value: `x`\n+   //~| value used here after move\n+   //~| move occurs because `x` has type `NoCopy`\n }"}, {"sha": "cbeac77479811fc8d37096d842f4df40473ae24f", "filename": "src/test/compile-fail/issue-24446.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-24446.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     static foo: Fn() -> u32 = || -> u32 {\n-        //~^ ERROR: mismatched types:\n+        //~^ ERROR: mismatched types\n         0\n     };\n }"}, {"sha": "adcf8484f78285b4dbe67b59fa17120bd87ec2a9", "filename": "src/test/compile-fail/issue-26480.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-26480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-26480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26480.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -25,6 +25,7 @@ macro_rules! write {\n             write(stdout, $arr.as_ptr() as *const i8,\n                   $arr.len() * size_of($arr[0]));\n             //~^ ERROR mismatched types\n+            //~| expected u64, found usize\n         }\n     }}\n }"}, {"sha": "bdcbaf09177fe8c2e53c0aeb82262de6890e0a98", "filename": "src/test/compile-fail/issue-27008.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-27008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-27008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-27008.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -13,9 +13,8 @@ struct S;\n fn main() {\n     let b = [0; S];\n     //~^ ERROR mismatched types\n-    //~| expected `usize`\n-    //~| found `S`\n-    //~| expected usize\n-    //~| found struct `S`\n+    //~| expected type `usize`\n+    //~| found type `S`\n+    //~| expected usize, found struct `S`\n     //~| ERROR expected positive integer for repeat count, found struct\n }"}, {"sha": "00d2969a0f67d153ed10b9b1ef60995eea921019", "filename": "src/test/compile-fail/issue-29084.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-29084.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-29084.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-29084.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -13,10 +13,13 @@ macro_rules! foo {\n         fn bar(d: u8) { }\n         bar(&mut $d);\n         //~^ ERROR mismatched types\n+        //~| expected u8, found &-ptr\n+        //~| expected type `u8`\n+        //~| found type `&mut u8`\n     }}\n }\n \n fn main() {\n     foo!(0u8);\n-    //~^ NOTE in this expansion of foo!\n+    //~^ in this expansion of foo!\n }"}, {"sha": "11ff7ab2476b9475f3fbf897875cdddb7e1f96cd", "filename": "src/test/compile-fail/issue-2951.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2951.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -12,10 +12,9 @@ fn foo<T, U>(x: T, y: U) {\n     let mut xx = x;\n     xx = y;\n     //~^  ERROR mismatched types\n-    //~| expected `T`\n-    //~| found `U`\n-    //~| expected type parameter\n-    //~| found a different type parameter\n+    //~| expected type `T`\n+    //~| found type `U`\n+    //~| expected type parameter, found a different type parameter\n }\n \n fn main() {"}, {"sha": "0bad7372a12d993ce9020ddd06dc2edd9ce94fc0", "filename": "src/test/compile-fail/issue-3477.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-3477.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-3477.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3477.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -11,6 +11,5 @@\n fn main() {\n     let _p: char = 100;\n     //~^ ERROR mismatched types\n-    //~| expected `char`\n-    //~| found `u8`\n+    //~| expected char, found u8\n }"}, {"sha": "e698e6da5294efd113c48e459e9caa0e3d931635", "filename": "src/test/compile-fail/issue-3680.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3680.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -12,9 +12,8 @@ fn main() {\n     match None {\n         Err(_) => ()\n         //~^ ERROR mismatched types\n-        //~| expected `std::option::Option<_>`\n-        //~| found `std::result::Result<_, _>`\n-        //~| expected enum `std::option::Option`\n-        //~| found enum `std::result::Result`\n+        //~| expected type `std::option::Option<_>`\n+        //~| found type `std::result::Result<_, _>`\n+        //~| expected enum `std::option::Option`, found enum `std::result::Result`\n     }\n }"}, {"sha": "58423341cc6f0e88e283a338f69e8e8d367e1905", "filename": "src/test/compile-fail/issue-4201.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4201.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -13,10 +13,9 @@ fn main() {\n         0\n     } else if false {\n //~^ ERROR if may be missing an else clause\n-//~| expected `()`\n-//~| found `_`\n-//~| expected ()\n-//~| found integral variable\n+//~| expected type `()`\n+//~| found type `_`\n+//~| expected (), found integral variable\n         1\n     };\n }"}, {"sha": "fbd8972cbfaa6afa79505f8497ce4f8a3d5cd66a", "filename": "src/test/compile-fail/issue-4517.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -14,8 +14,7 @@ fn main() {\n     let foo: [u8; 4] = [1; 4];\n     bar(foo);\n     //~^ ERROR mismatched types\n-    //~| expected `usize`\n-    //~| found `[u8; 4]`\n-    //~| expected usize\n-    //~| found array of 4 elements\n+    //~| expected type `usize`\n+    //~| found type `[u8; 4]`\n+    //~| expected usize, found array of 4 elements\n }"}, {"sha": "7c0905873df8900f961438f2cc49cb9a841a77e3", "filename": "src/test/compile-fail/issue-4968.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4968.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -14,8 +14,7 @@ const A: (isize,isize) = (4,2);\n fn main() {\n     match 42 { A => () }\n     //~^ ERROR mismatched types\n-    //~| expected `_`\n-    //~| found `(isize, isize)`\n-    //~| expected integral variable\n-    //~| found tuple\n+    //~| expected type `_`\n+    //~| found type `(isize, isize)`\n+    //~| expected integral variable, found tuple\n }"}, {"sha": "9e78b7b947f98e9c3e6681074e8a71556dcc8eda", "filename": "src/test/compile-fail/issue-5100.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5100.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -16,48 +16,43 @@ enum A { B, C }\n fn main() {\n     match (true, false) {\n         A::B => (),\n-//~^ ERROR mismatched types:\n-//~| expected `(bool, bool)`\n-//~| found `A`\n-//~| expected tuple\n-//~| found enum `A`\n+//~^ ERROR mismatched types\n+//~| expected type `(bool, bool)`\n+//~| found type `A`\n+//~| expected tuple, found enum `A`\n         _ => ()\n     }\n \n     match (true, false) {\n         (true, false, false) => ()\n //~^ ERROR mismatched types\n-//~| expected `(bool, bool)`\n-//~| found `(_, _, _)`\n-//~| expected a tuple with 2 elements\n-//~| found one with 3 elements\n+//~| expected type `(bool, bool)`\n+//~| found type `(_, _, _)`\n+//~| expected a tuple with 2 elements, found one with 3 elements\n     }\n \n     match (true, false) {\n         (true, false, false) => ()\n //~^ ERROR mismatched types\n-//~| expected `(bool, bool)`\n-//~| found `(_, _, _)`\n-//~| expected a tuple with 2 elements\n-//~| found one with 3 elements\n+//~| expected type `(bool, bool)`\n+//~| found type `(_, _, _)`\n+//~| expected a tuple with 2 elements, found one with 3 elements\n     }\n \n     match (true, false) {\n         box (true, false) => ()\n //~^ ERROR mismatched types\n-//~| expected `(bool, bool)`\n-//~| found `Box<_>`\n-//~| expected tuple\n-//~| found box\n+//~| expected type `(bool, bool)`\n+//~| found type `Box<_>`\n+//~| expected tuple, found box\n     }\n \n     match (true, false) {\n         &(true, false) => ()\n //~^ ERROR mismatched types\n-//~| expected `(bool, bool)`\n-//~| found `&_`\n-//~| expected tuple\n-//~| found &-ptr\n+//~| expected type `(bool, bool)`\n+//~| found type `&_`\n+//~| expected tuple, found &-ptr\n     }\n \n \n@@ -69,6 +64,5 @@ fn main() {\n \n     // Make sure none of the errors above were fatal\n     let x: char = true; //~  ERROR mismatched types\n-                        //~| expected `char`\n-                        //~| found `bool`\n+                        //~| expected char, found bool\n }"}, {"sha": "d8aad54fd3ee9f8ecc4d84f4ff24ae265dd63e36", "filename": "src/test/compile-fail/issue-5358-1.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5358-1.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -15,10 +15,9 @@ fn main() {\n     match S(Either::Left(5)) {\n         Either::Right(_) => {}\n         //~^ ERROR mismatched types\n-        //~| expected `S`\n-        //~| found `Either<_, _>`\n-        //~| expected struct `S`\n-        //~| found enum `Either`\n+        //~| expected type `S`\n+        //~| found type `Either<_, _>`\n+        //~| expected struct `S`, found enum `Either`\n         _ => {}\n     }\n }"}, {"sha": "cacbf7656def2f4bf5d27cfbd558280663889c9f", "filename": "src/test/compile-fail/issue-5500.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5500.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -11,8 +11,7 @@\n fn main() {\n     &panic!()\n     //~^ ERROR mismatched types\n-    //~| expected `()`\n-    //~| found `&_`\n-    //~| expected ()\n-    //~| found &-ptr\n+    //~| expected type `()`\n+    //~| found type `&_`\n+    //~| expected (), found &-ptr\n }"}, {"sha": "1519d71dd3be26e92a1110bd6b183eb9e3dd200a", "filename": "src/test/compile-fail/issue-7061.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -13,10 +13,9 @@ struct BarStruct;\n impl<'a> BarStruct {\n     fn foo(&'a mut self) -> Box<BarStruct> { self }\n     //~^ ERROR mismatched types\n-    //~| expected `Box<BarStruct>`\n-    //~| found `&'a mut BarStruct`\n-    //~| expected box\n-    //~| found &-ptr\n+    //~| expected type `Box<BarStruct>`\n+    //~| found type `&'a mut BarStruct`\n+    //~| expected box, found &-ptr\n }\n \n fn main() {}"}, {"sha": "638f45cd357765998ec6e70319742027c338fbe7", "filename": "src/test/compile-fail/issue-7092.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7092.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -15,11 +15,10 @@ fn foo(x: Whatever) {\n     match x {\n         Some(field) =>\n //~^ ERROR mismatched types\n-//~| expected `Whatever`\n-//~| found `std::option::Option<_>`\n-//~| expected enum `Whatever`\n-//~| found enum `std::option::Option`\n-            field.access(),\n+//~| expected type `Whatever`\n+//~| found type `std::option::Option<_>`\n+//~| expected enum `Whatever`, found enum `std::option::Option`\n+            field.access(), \n     }\n }\n "}, {"sha": "e0de860b0eac30ef260b9bf75f1d3c678e27c813", "filename": "src/test/compile-fail/issue-7867.rs", "status": "modified", "additions": 9, "deletions": 12, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7867.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -16,25 +16,22 @@ fn main() {\n     match (true, false) {\n         A::B => (),\n         //~^ ERROR mismatched types\n-        //~| expected `(bool, bool)`\n-        //~| found `A`\n-        //~| expected tuple\n-        //~| found enum `A`\n+        //~| expected type `(bool, bool)`\n+        //~| found type `A`\n+        //~| expected tuple, found enum `A`\n         _ => ()\n     }\n \n     match &Some(42) {\n         Some(x) => (),\n         //~^ ERROR mismatched types\n-        //~| expected `&std::option::Option<_>`\n-        //~| found `std::option::Option<_>`\n-        //~| expected &-ptr\n-        //~| found enum `std::option::Option`\n+        //~| expected type `&std::option::Option<_>`\n+        //~| found type `std::option::Option<_>`\n+        //~| expected &-ptr, found enum `std::option::Option`\n         None => ()\n         //~^ ERROR mismatched types\n-        //~| expected `&std::option::Option<_>`\n-        //~| found `std::option::Option<_>`\n-        //~| expected &-ptr\n-        //~| found enum `std::option::Option`\n+        //~| expected type `&std::option::Option<_>`\n+        //~| found type `std::option::Option<_>`\n+        //~| expected &-ptr, found enum `std::option::Option`\n     }\n }"}, {"sha": "9295eeb1779b09f522c1870457e47299038acb49", "filename": "src/test/compile-fail/issue-9575.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-9575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fissue-9575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-9575.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -12,6 +12,6 @@\n \n #[start]\n fn start(argc: isize, argv: *const *const u8, crate_map: *const u8) -> isize {\n-    //~^ ERROR incorrect number of function parameters\n+    //~^ start function has wrong type\n    0\n }"}, {"sha": "7434a6c960b2db6261936416c9e6261b0e9e35f3", "filename": "src/test/compile-fail/main-wrong-type-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type-2.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() -> char {\n-//~^ ERROR: main function expects type\n+//~^ ERROR: main function has wrong type\n }"}, {"sha": "431b855d5177373cfcabd13a747e6f90dbe86e48", "filename": "src/test/compile-fail/main-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmain-wrong-type.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -14,5 +14,5 @@ struct S {\n }\n \n fn main(foo: S) {\n-//~^ ERROR: main function expects type\n+//~^ ERROR: main function has wrong type\n }"}, {"sha": "526aa83dec7fd2410b4539818b2265c5cbf91256", "filename": "src/test/compile-fail/match-range-fail.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -28,6 +28,5 @@ fn main() {\n         _ => { }\n     };\n     //~^^^ ERROR mismatched types in range\n-    //~| expected char\n-    //~| found integral variable\n+    //~| expected char, found integral variable\n }"}, {"sha": "0dbdda1f9ba1e120f7d227b7142d8b9151c91112", "filename": "src/test/compile-fail/match-struct.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -16,10 +16,9 @@ fn main() {\n     match (S { a: 1 }) {\n         E::C(_) => (),\n         //~^ ERROR mismatched types\n-        //~| expected `S`\n-        //~| found `E`\n-        //~| expected struct `S`\n-        //~| found enum `E`\n+        //~| expected type `S`\n+        //~| found type `E`\n+        //~| expected struct `S`, found enum `E`\n         _ => ()\n     }\n }"}, {"sha": "2831499c73d8732e5dd676ca3360631524e4f145", "filename": "src/test/compile-fail/match-vec-mismatch-2.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-vec-mismatch-2.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -14,9 +14,8 @@ fn main() {\n     match () {\n         [()] => { }\n         //~^ ERROR mismatched types\n-        //~| expected `()`\n-        //~| found `&[_]`\n-        //~| expected ()\n-        //~| found &-ptr\n+        //~| expected type `()`\n+        //~| found type `&[_]`\n+        //~| expected (), found &-ptr\n     }\n }"}, {"sha": "ffa5287d4b2c34d5ae5a770642ed2650ece23a4a", "filename": "src/test/compile-fail/method-self-arg-1.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-self-arg-1.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -19,13 +19,11 @@ impl Foo {\n fn main() {\n     let x = Foo;\n     Foo::bar(x); //~  ERROR mismatched types\n-                 //~| expected `&Foo`\n-                 //~| found `Foo`\n-                 //~| expected &-ptr\n-                 //~| found struct `Foo`\n+                 //~| expected type `&Foo`\n+                 //~| found type `Foo`\n+                 //~| expected &-ptr, found struct `Foo`\n     Foo::bar(&42); //~  ERROR mismatched types\n-                      //~| expected `&Foo`\n-                      //~| found `&_`\n-                      //~| expected struct `Foo`\n-                      //~| found integral variable\n+                      //~| expected type `&Foo`\n+                      //~| found type `&_`\n+                      //~| expected struct `Foo`, found integral variable\n }"}, {"sha": "02c09aa7d69a261e1f36a03d12318ff2a5cccf7e", "filename": "src/test/compile-fail/moves-based-on-type-distribute-copy-over-paren.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-distribute-copy-over-paren.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -16,13 +16,17 @@ fn touch<A>(_a: &A) {}\n \n fn f00() {\n     let x = \"hi\".to_string();\n-    let _y = Foo { f:x }; //~ NOTE `x` moved here\n+    let _y = Foo { f:x };\n+    //~^ value moved here\n     touch(&x); //~ ERROR use of moved value: `x`\n+    //~^ value used here after move\n+    //~| move occurs because `x` has type `std::string::String`\n }\n \n fn f05() {\n     let x = \"hi\".to_string();\n-    let _y = Foo { f:(((x))) }; //~ NOTE `x` moved here\n+    let _y = Foo { f:(((x))) };\n+    //~^ value moved here\n     touch(&x); //~ ERROR use of moved value: `x`\n }\n "}, {"sha": "bcbb8dbfad121889f68dd449358d3e49882c6382", "filename": "src/test/compile-fail/moves-based-on-type-match-bindings.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-match-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-match-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-match-bindings.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -24,6 +24,8 @@ fn f10() {\n     };\n \n     touch(&x); //~ ERROR use of partially moved value: `x`\n+    //~^ value used here after move\n+    //~| move occurs because `x.f` has type `std::string::String`\n }\n \n fn main() {}"}, {"sha": "63e7dbd30def2fcf96fe647e0f55dc314646b4e7", "filename": "src/test/compile-fail/mut-pattern-mismatched.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmut-pattern-mismatched.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -14,17 +14,17 @@ fn main() {\n     // (separate lines to ensure the spans are accurate)\n \n      let &_ //~  ERROR mismatched types\n-            //~| expected `&mut _`\n-            //~| found `&_`\n+            //~| expected type `&mut _`\n+            //~| found type `&_`\n             //~| values differ in mutability\n         = foo;\n     let &mut _ = foo;\n \n     let bar = &1;\n     let &_ = bar;\n     let &mut _ //~  ERROR mismatched types\n-               //~| expected `&_`\n-               //~| found `&mut _`\n+               //~| expected type `&_`\n+               //~| found type `&mut _`\n                //~| values differ in mutability\n          = bar;\n }"}, {"sha": "c950ef5b680022d3ba8d001258f82cc565c92ae4", "filename": "src/test/compile-fail/noexporttypeexe.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoexporttypeexe.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -19,8 +19,7 @@ fn main() {\n     // not convertible to a path.\n   let x: isize = noexporttypelib::foo();\n     //~^ ERROR mismatched types\n-    //~| expected `isize`\n-    //~| found `std::option::Option<isize>`\n-    //~| expected isize\n-    //~| found enum `std::option::Option`\n+    //~| expected type `isize`\n+    //~| found type `std::option::Option<isize>`\n+    //~| expected isize, found enum `std::option::Option`\n }"}, {"sha": "5cb60079fa4b8e8fb272346010c88ed3352f1298", "filename": "src/test/compile-fail/occurs-check-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check-2.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -16,7 +16,7 @@ fn main() {\n     g = f;\n     f = box g;\n     //~^  ERROR mismatched types\n-    //~| expected `_`\n-    //~| found `Box<_>`\n+    //~| expected type `_`\n+    //~| found type `Box<_>`\n     //~| cyclic type of infinite size\n }"}, {"sha": "499124cb0573b85ebf734717aa8e14098078ebcf", "filename": "src/test/compile-fail/occurs-check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     let f;\n     f = box f;\n     //~^ ERROR mismatched types\n-    //~| expected `_`\n-    //~| found `Box<_>`\n+    //~| expected type `_`\n+    //~| found type `Box<_>`\n     //~| cyclic type of infinite size\n }"}, {"sha": "d9f3bb3c40f8d0d18a2b137ad81dfb6aec75cbf5", "filename": "src/test/compile-fail/pattern-error-continue.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpattern-error-continue.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -31,17 +31,15 @@ fn main() {\n     match 'c' {\n         S { .. } => (),\n         //~^ ERROR mismatched types\n-        //~| expected `char`\n-        //~| found `S`\n-        //~| expected char\n-        //~| found struct `S`\n+        //~| expected type `char`\n+        //~| found type `S`\n+        //~| expected char, found struct `S`\n \n         _ => ()\n     }\n     f(true);\n     //~^ ERROR mismatched types\n-    //~| expected `char`\n-    //~| found `bool`\n+    //~| expected char, found bool\n \n     match () {\n         E::V => {} //~ ERROR failed to resolve. Use of undeclared type or module `E`"}, {"sha": "7ece52e75378603813be2d02710378e23dcefac5", "filename": "src/test/compile-fail/pptypedef.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpptypedef.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -13,11 +13,9 @@ fn let_in<T, F>(x: T, f: F) where F: FnOnce(T) {}\n fn main() {\n     let_in(3u32, |i| { assert!(i == 3i32); });\n     //~^ ERROR mismatched types\n-    //~| expected `u32`\n-    //~| found `i32`\n+    //~| expected u32, found i32\n \n     let_in(3i32, |i| { assert!(i == 3u32); });\n     //~^ ERROR mismatched types\n-    //~| expected `i32`\n-    //~| found `u32`\n+    //~| expected i32, found u32\n }"}, {"sha": "ff627e69d4c58f6d4d521a25030f895329ec2a59", "filename": "src/test/compile-fail/ptr-coercion.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fptr-coercion.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -15,19 +15,19 @@ pub fn main() {\n     // *const -> *mut\n     let x: *const isize = &42;\n     let x: *mut isize = x; //~  ERROR mismatched types\n-                           //~| expected `*mut isize`\n-                           //~| found `*const isize`\n+                           //~| expected type `*mut isize`\n+                           //~| found type `*const isize`\n                            //~| values differ in mutability\n \n     // & -> *mut\n     let x: *mut isize = &42; //~  ERROR mismatched types\n-                             //~| expected `*mut isize`\n-                             //~| found `&isize`\n+                             //~| expected type `*mut isize`\n+                             //~| found type `&isize`\n                              //~| values differ in mutability\n \n     let x: *const isize = &42;\n     let x: *mut isize = x; //~  ERROR mismatched types\n-                           //~| expected `*mut isize`\n-                           //~| found `*const isize`\n+                           //~| expected type `*mut isize`\n+                           //~| found type `*const isize`\n                            //~| values differ in mutability\n }"}, {"sha": "0a0867195d97600def9d4e8984cd52ea871abe93", "filename": "src/test/compile-fail/ref-suggestion.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fref-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fref-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fref-suggestion.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -11,22 +11,16 @@\n fn main() {\n     let x = vec![1];\n     let y = x;\n-    //~^ HELP use a `ref` binding as shown\n-    //~| SUGGESTION let ref y = x;\n     x; //~ ERROR use of moved value\n \n     let x = vec![1];\n     let mut y = x;\n-    //~^ HELP use a `ref` binding as shown\n-    //~| SUGGESTION let ref mut y = x;\n     x; //~ ERROR use of moved value\n \n     let x = (Some(vec![1]), ());\n \n     match x {\n         (Some(y), ()) => {},\n-        //~^ HELP use a `ref` binding as shown\n-        //~| SUGGESTION (Some(ref y), ()) => {},\n         _ => {},\n     }\n     x; //~ ERROR use of partially moved value"}, {"sha": "64dbf27b78e48141457dd4e565c0434c28e1b8d2", "filename": "src/test/compile-fail/regions-bounds.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounds.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -17,15 +17,15 @@ struct a_class<'a> { x:&'a isize }\n \n fn a_fn1<'a,'b>(e: an_enum<'a>) -> an_enum<'b> {\n     return e; //~  ERROR mismatched types\n-              //~| expected `an_enum<'b>`\n-              //~| found `an_enum<'a>`\n+              //~| expected type `an_enum<'b>`\n+              //~| found type `an_enum<'a>`\n               //~| lifetime mismatch\n }\n \n fn a_fn3<'a,'b>(e: a_class<'a>) -> a_class<'b> {\n     return e; //~  ERROR mismatched types\n-              //~| expected `a_class<'b>`\n-              //~| found `a_class<'a>`\n+              //~| expected type `a_class<'b>`\n+              //~| found type `a_class<'a>`\n               //~| lifetime mismatch\n }\n "}, {"sha": "f6a0c86de6626ec01f16d39d37ad13d375acdb07", "filename": "src/test/compile-fail/regions-early-bound-error-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-early-bound-error-method.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -29,8 +29,8 @@ impl<'a> Box<'a> {\n     fn or<'b,G:GetRef<'b>>(&self, g2: G) -> &'a isize {\n         g2.get()\n         //~^ ERROR mismatched types\n-        //~| expected `&'a isize`\n-        //~| found `&'b isize`\n+        //~| expected type `&'a isize`\n+        //~| found type `&'b isize`\n         //~| lifetime mismatch\n \n     }"}, {"sha": "c0116b21166e0350429cc6063306b82bf5b22fac", "filename": "src/test/compile-fail/regions-fn-subtyping-return-static.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-fn-subtyping-return-static.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -55,10 +55,9 @@ fn supply_G() {\n     want_G(bar);\n     want_G(baz);\n     //~^ ERROR mismatched types\n-    //~| expected `fn(&'cx S) -> &'static S`\n-    //~| found `fn(&S) -> &S {baz}`\n-    //~| expected concrete lifetime\n-    //~| found bound lifetime parameter 'cx\n+    //~| expected type `fn(&'cx S) -> &'static S`\n+    //~| found type `fn(&S) -> &S {baz}`\n+    //~| expected concrete lifetime, found bound lifetime parameter 'cx\n }\n \n pub fn main() {"}, {"sha": "131b7170951f6360fea97ebed9adfb6ac9eb6875", "filename": "src/test/compile-fail/regions-infer-not-param.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-not-param.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -27,10 +27,10 @@ fn take_direct<'a,'b>(p: direct<'a>) -> direct<'b> { p } //~ ERROR mismatched ty\n fn take_indirect1(p: indirect1) -> indirect1 { p }\n \n fn take_indirect2<'a,'b>(p: indirect2<'a>) -> indirect2<'b> { p } //~ ERROR mismatched types\n-//~| expected `indirect2<'b>`\n-//~| found `indirect2<'a>`\n+//~| expected type `indirect2<'b>`\n+//~| found type `indirect2<'a>`\n //~| ERROR mismatched types\n-//~| expected `indirect2<'b>`\n-//~| found `indirect2<'a>`\n+//~| expected type `indirect2<'b>`\n+//~| found type `indirect2<'a>`\n \n fn main() {}"}, {"sha": "fad115c2aedf83a3d4515a37c4721b5c96d137dc", "filename": "src/test/compile-fail/regions-infer-paramd-indirect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-paramd-indirect.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -32,8 +32,8 @@ impl<'a> set_f<'a> for c<'a> {\n     fn set_f_bad(&mut self, b: Box<b>) {\n         self.f = b;\n         //~^ ERROR mismatched types\n-        //~| expected `Box<Box<&'a isize>>`\n-        //~| found `Box<Box<&isize>>`\n+        //~| expected type `Box<Box<&'a isize>>`\n+        //~| found type `Box<Box<&isize>>`\n         //~| lifetime mismatch\n     }\n }"}, {"sha": "1ea956bbd54891f06c8899f784941e49fe897fef", "filename": "src/test/compile-fail/reject-specialized-drops-8142.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Freject-specialized-drops-8142.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Freject-specialized-drops-8142.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Freject-specialized-drops-8142.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -38,8 +38,8 @@ impl<'ml>               Drop for M<'ml>         { fn drop(&mut self) { } } // AC\n \n impl                    Drop for N<'static>     { fn drop(&mut self) { } } // REJECT\n //~^ ERROR mismatched types\n-//~| expected `N<'n>`\n-//~|    found `N<'static>`\n+//~| expected type `N<'n>`\n+//~|    found type `N<'static>`\n \n impl<Cok_nobound> Drop for O<Cok_nobound> { fn drop(&mut self) { } } // ACCEPT\n "}, {"sha": "ab5af64d95c1352d215b1757f29227c17360e458", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -16,52 +16,45 @@ fn main() {\n     //~^ ERROR expected constant integer for repeat count, found variable [E0307]\n     let b = [0; ()];\n     //~^ ERROR mismatched types\n-    //~| expected `usize`\n-    //~| found `()`\n-    //~| expected usize\n-    //~| found ()) [E0308]\n+    //~| expected type `usize`\n+    //~| found type `()`\n+    //~| expected usize, found ()\n     //~| ERROR expected positive integer for repeat count, found tuple [E0306]\n     let c = [0; true];\n     //~^ ERROR mismatched types\n-    //~| expected `usize`\n-    //~| found `bool`\n+    //~| expected usize, found bool\n     //~| ERROR expected positive integer for repeat count, found boolean [E0306]\n     let d = [0; 0.5];\n     //~^ ERROR mismatched types\n-    //~| expected `usize`\n-    //~| found `_`\n-    //~| expected usize\n-    //~| found floating-point variable) [E0308]\n+    //~| expected type `usize`\n+    //~| found type `_`\n+    //~| expected usize, found floating-point variable\n     //~| ERROR expected positive integer for repeat count, found float [E0306]\n     let e = [0; \"foo\"];\n     //~^ ERROR mismatched types\n-    //~| expected `usize`\n-    //~| found `&'static str`\n-    //~| expected usize\n-    //~| found &-ptr) [E0308]\n+    //~| expected type `usize`\n+    //~| found type `&'static str`\n+    //~| expected usize, found &-ptr\n     //~| ERROR expected positive integer for repeat count, found string literal [E0306]\n     let f = [0; -4_isize];\n     //~^ ERROR mismatched types\n     //~| expected `usize`\n-    //~| found `isize` [E0308]\n+    //~| found `isize`\n     //~| ERROR mismatched types:\n-    //~| expected `usize`,\n-    //~| found `isize` [E0307]\n+    //~| expected usize, found isize\n     let f = [0_usize; -1_isize];\n     //~^ ERROR mismatched types\n     //~| expected `usize`\n-    //~| found `isize` [E0308]\n+    //~| found `isize`\n     //~| ERROR mismatched types\n-    //~| expected `usize`\n-    //~| found `isize` [E0307]\n+    //~| expected usize, found isize\n     struct G {\n         g: (),\n     }\n     let g = [0; G { g: () }];\n     //~^ ERROR mismatched types\n-    //~| expected `usize`\n-    //~| found `main::G`\n-    //~| expected usize\n-    //~| found struct `main::G`) [E0308]\n+    //~| expected type `usize`\n+    //~| found type `main::G`\n+    //~| expected usize, found struct `main::G`\n     //~| ERROR expected positive integer for repeat count, found struct [E0306]\n }"}, {"sha": "2d06161111ef1f867ea0bbda303b47793391a771", "filename": "src/test/compile-fail/shift-various-bad-types.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshift-various-bad-types.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -34,8 +34,7 @@ fn foo(p: &Panolpy) {\n     // Type of the result follows the LHS, not the RHS:\n     let _: i32 = 22_i64 >> 1_i32;\n     //~^ ERROR mismatched types\n-    //~| expected `i32`\n-    //~| found `i64`\n+    //~| expected i32, found i64\n }\n \n fn main() {"}, {"sha": "874cca8cb3fd03c709282a7712e8a29fe1c6b650", "filename": "src/test/compile-fail/slice-mut.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslice-mut.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -16,7 +16,7 @@ fn main() {\n \n     let y: &mut[_] = &x[2..4];\n     //~^ ERROR mismatched types\n-    //~| expected `&mut [_]`\n-    //~| found `&[isize]`\n+    //~| expected type `&mut [_]`\n+    //~| found type `&[isize]`\n     //~| values differ in mutability\n }"}, {"sha": "3140bb6e5731d04d5822800e32fd00eb06dceb09", "filename": "src/test/compile-fail/slightly-nice-generic-literal-messages.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fslightly-nice-generic-literal-messages.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -16,10 +16,9 @@ fn main() {\n     match Foo(1.1, marker::PhantomData) {\n         1 => {}\n     //~^ ERROR mismatched types\n-    //~| expected `Foo<_, _>`\n-    //~| found `_`\n-    //~| expected struct `Foo`\n-    //~| found integral variable\n+    //~| expected type `Foo<_, _>`\n+    //~| found type `_`\n+    //~| expected struct `Foo`, found integral variable\n     }\n \n }"}, {"sha": "1250d0dabcd9a561e87db5a136d2cf65c6e89c76", "filename": "src/test/compile-fail/struct-base-wrong-type-2.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type-2.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -19,13 +19,11 @@ struct Bar { x: isize }\n fn main() {\n     let b = Bar { x: 5 };\n     let f = Foo { a: 2, ..b }; //~  ERROR mismatched types\n-                               //~| expected `Foo`\n-                               //~| found `Bar`\n-                               //~| expected struct `Foo`\n-                               //~| found struct `Bar`\n+                               //~| expected type `Foo`\n+                               //~| found type `Bar`\n+                               //~| expected struct `Foo`, found struct `Bar`\n     let f__isize = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n-                                 //~| expected `Foo`\n-                                 //~| found `_`\n-                                 //~| expected struct `Foo`\n-                                 //~| found integral variable\n+                                 //~| expected type `Foo`\n+                                 //~| found type `_`\n+                                 //~| expected struct `Foo`, found integral variable\n }"}, {"sha": "4503e465840fe73bfb6f5b0364f52e0f72f82fb7", "filename": "src/test/compile-fail/struct-base-wrong-type.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -18,15 +18,13 @@ struct Bar { x: isize }\n \n static bar: Bar = Bar { x: 5 };\n static foo: Foo = Foo { a: 2, ..bar }; //~  ERROR mismatched types\n-                                       //~| expected `Foo`\n-                                       //~| found `Bar`\n-                                       //~| expected struct `Foo`\n-                                       //~| found struct `Bar`\n+                                       //~| expected type `Foo`\n+                                       //~| found type `Bar`\n+                                       //~| expected struct `Foo`, found struct `Bar`\n static foo_i: Foo = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n-                                       //~| expected `Foo`\n-                                       //~| found `_`\n-                                       //~| expected struct `Foo`\n-                                       //~| found integral variable\n+                                       //~| expected type `Foo`\n+                                       //~| found type `_`\n+                                       //~| expected struct `Foo`, found integral variable\n \n fn main() {\n     let b = Bar { x: 5 };"}, {"sha": "87fc5ba93aeb3c384e926263c24f8a93dd5d1b78", "filename": "src/test/compile-fail/structure-constructor-type-mismatch.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -26,38 +26,32 @@ fn main() {\n     let pt = PointF {\n         x: 1,\n         //~^ ERROR mismatched types\n-        //~| expected f32\n-        //~| found integral variable\n+        //~| expected f32, found integral variable\n         y: 2,\n         //~^ ERROR mismatched types\n-        //~| expected f32\n-        //~| found integral variable\n+        //~| expected f32, found integral variable\n     };\n \n     let pt2 = Point::<f32> {\n         x: 3,\n         //~^ ERROR mismatched types\n-        //~| expected f32\n-        //~| found integral variable\n+        //~| expected f32, found integral variable\n         y: 4,\n         //~^ ERROR mismatched types\n-        //~| expected f32\n-        //~| found integral variable\n+        //~| expected f32, found integral variable\n     };\n \n     let pair = PairF {\n         x: 5,\n         //~^ ERROR mismatched types\n-        //~| expected f32\n-        //~| found integral variable\n+        //~| expected f32, found integral variable\n         y: 6,\n     };\n \n     let pair2 = PairF::<i32> {\n         x: 7,\n         //~^ ERROR mismatched types\n-        //~| expected f32\n-        //~| found integral variable\n+        //~| expected f32, found integral variable\n         y: 8,\n     };\n "}, {"sha": "c857790e342d0270921b9028c0b0329c2a5b22ae", "filename": "src/test/compile-fail/substs-ppaux.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsubsts-ppaux.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -24,36 +24,36 @@ fn main() {}\n fn foo<'z>() where &'z (): Sized {\n     let x: () = <i8 as Foo<'static, 'static,  u8>>::bar::<'static, char>;\n     //[verbose]~^ ERROR mismatched types\n-    //[verbose]~| expected `()`\n-    //[verbose]~| found `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>}`\n+    //[verbose]~| expected type `()`\n+    //[verbose]~| found type `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::bar::<ReStatic, char>}`\n     //[normal]~^^^^ ERROR mismatched types\n-    //[normal]~| expected `()`\n-    //[normal]~| found `fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>}`\n+    //[normal]~| expected type `()`\n+    //[normal]~| found type `fn() {<i8 as Foo<'static, 'static, u8>>::bar::<'static, char>}`\n \n \n     let x: () = <i8 as Foo<'static, 'static,  u32>>::bar::<'static, char>;\n     //[verbose]~^ ERROR mismatched types\n-    //[verbose]~| expected `()`\n-    //[verbose]~| found `fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>}`\n+    //[verbose]~| expected type `()`\n+    //[verbose]~| found type `fn() {<i8 as Foo<ReStatic, ReStatic, u32>>::bar::<ReStatic, char>}`\n     //[normal]~^^^^ ERROR mismatched types\n-    //[normal]~| expected `()`\n-    //[normal]~| found `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`\n+    //[normal]~| expected type `()`\n+    //[normal]~| found type `fn() {<i8 as Foo<'static, 'static>>::bar::<'static, char>}`\n \n     let x: () = <i8 as Foo<'static, 'static,  u8>>::baz;\n     //[verbose]~^ ERROR mismatched types\n-    //[verbose]~| expected `()`\n-    //[verbose]~| found `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz}`\n+    //[verbose]~| expected type `()`\n+    //[verbose]~| found type `fn() {<i8 as Foo<ReStatic, ReStatic, u8>>::baz}`\n     //[normal]~^^^^ ERROR mismatched types\n-    //[normal]~| expected `()`\n-    //[normal]~| found `fn() {<i8 as Foo<'static, 'static, u8>>::baz}`\n+    //[normal]~| expected type `()`\n+    //[normal]~| found type `fn() {<i8 as Foo<'static, 'static, u8>>::baz}`\n \n     let x: () = foo::<'static>;\n     //[verbose]~^ ERROR mismatched types\n-    //[verbose]~| expected `()`\n-    //[verbose]~| found `fn() {foo::<ReStatic>}`\n+    //[verbose]~| expected type `()`\n+    //[verbose]~| found type `fn() {foo::<ReStatic>}`\n     //[normal]~^^^^ ERROR mismatched types\n-    //[normal]~| expected `()`\n-    //[normal]~| found `fn() {foo::<'static>}`\n+    //[normal]~| expected type `()`\n+    //[normal]~| found type `fn() {foo::<'static>}`\n \n     <str as Foo<u8>>::bar;\n     //[verbose]~^ ERROR `str: std::marker::Sized` is not satisfied"}, {"sha": "9a4a52ced2008d44cb6346e4c7f0aeda0e41a2b6", "filename": "src/test/compile-fail/suppressed-error.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsuppressed-error.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -11,9 +11,8 @@\n fn main() {\n     let (x, y) = ();\n //~^ ERROR mismatched types\n-//~| expected `()`\n-//~| found `(_, _)`\n-//~| expected ()\n-//~| found tuple\n+//~| expected type `()`\n+//~| found type `(_, _)`\n+//~| expected (), found tuple\n     return x;\n }"}, {"sha": "8f420f1ce4b0d1d592fd6fa30937a9ebc3e4e52a", "filename": "src/test/compile-fail/tag-that-dare-not-speak-its-name.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-that-dare-not-speak-its-name.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -21,8 +21,7 @@ fn main() {\n     let y;\n     let x : char = last(y);\n     //~^ ERROR mismatched types\n-    //~| expected `char`\n-    //~| found `std::option::Option<_>`\n-    //~| expected char\n-    //~| found enum `std::option::Option`\n+    //~| expected type `char`\n+    //~| found type `std::option::Option<_>`\n+    //~| expected char, found enum `std::option::Option`\n }"}, {"sha": "4a21e1339811e748e26c6aef79f1d9b87b896abb", "filename": "src/test/compile-fail/terr-in-field.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-in-field.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -21,10 +21,9 @@ struct bar {\n fn want_foo(f: foo) {}\n fn have_bar(b: bar) {\n     want_foo(b); //~  ERROR mismatched types\n-                 //~| expected `foo`\n-                 //~| found `bar`\n-                 //~| expected struct `foo`\n-                 //~| found struct `bar`\n+                 //~| expected type `foo`\n+                 //~| found type `bar`\n+                 //~| expected struct `foo`, found struct `bar`\n }\n \n fn main() {}"}, {"sha": "592d7b3929bfc09129a07f294eec2a744f0a5ecf", "filename": "src/test/compile-fail/terr-sorts.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fterr-sorts.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -19,10 +19,9 @@ type bar = Box<foo>;\n fn want_foo(f: foo) {}\n fn have_bar(b: bar) {\n     want_foo(b); //~  ERROR mismatched types\n-                 //~| expected `foo`\n-                 //~| found `Box<foo>`\n-                 //~| expected struct `foo`\n-                 //~| found box\n+                 //~| expected type `foo`\n+                 //~| found type `Box<foo>`\n+                 //~| expected struct `foo`, found box\n }\n \n fn main() {}"}, {"sha": "24627e94208748651be95d740ba13fda68e7c7f1", "filename": "src/test/compile-fail/token-error-correct-3.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftoken-error-correct-3.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -22,6 +22,9 @@ pub mod raw {\n             callback(path.as_ref();  //~ NOTE: unclosed delimiter\n                      //~^ ERROR: expected one of\n             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n+            //~^ expected (), found enum `std::result::Result`\n+            //~| expected type `()`\n+            //~| found type `std::result::Result<bool, std::io::Error>`\n         } else { //~ ERROR: incorrect close delimiter: `}`\n             //~^ ERROR: expected one of\n             Ok(false);"}, {"sha": "1fff812af5b8d9f1e00f7941720b870555890ef6", "filename": "src/test/compile-fail/trait-bounds-cant-coerce.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -22,10 +22,9 @@ fn c(x: Box<Foo+Sync+Send>) {\n \n fn d(x: Box<Foo>) {\n     a(x); //~  ERROR mismatched types\n-          //~| expected `Box<Foo + Send + 'static>`\n-          //~| found `Box<Foo + 'static>`\n-          //~| expected bounds `Send`\n-          //~| found no bounds\n+          //~| expected type `Box<Foo + Send + 'static>`\n+          //~| found type `Box<Foo + 'static>`\n+          //~| expected bounds `Send`, found no bounds\n }\n \n fn main() { }"}, {"sha": "e62255a4e77d4301756320a6cd13c25f5f5c69fa", "filename": "src/test/compile-fail/tuple-arity-mismatch.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftuple-arity-mismatch.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -15,15 +15,13 @@ fn first((value, _): (isize, f64)) -> isize { value }\n fn main() {\n     let y = first ((1,2.0,3));\n     //~^ ERROR mismatched types\n-    //~| expected `(isize, f64)`\n-    //~| found `(isize, f64, _)`\n-    //~| expected a tuple with 2 elements\n-    //~| found one with 3 elements\n+    //~| expected type `(isize, f64)`\n+    //~| found type `(isize, f64, _)`\n+    //~| expected a tuple with 2 elements, found one with 3 elements\n \n     let y = first ((1,));\n     //~^ ERROR mismatched types\n-    //~| expected `(isize, f64)`\n-    //~| found `(isize,)`\n-    //~| expected a tuple with 2 elements\n-    //~| found one with 1 elements\n+    //~| expected type `(isize, f64)`\n+    //~| found type `(isize,)`\n+    //~| expected a tuple with 2 elements, found one with 1 elements\n }"}, {"sha": "dadf7eb91d8f46f0b5d74d947a096382a7689dd1", "filename": "src/test/compile-fail/tutorial-suffix-inference-test.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftutorial-suffix-inference-test.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -18,12 +18,10 @@ fn main() {\n     identity_u8(x);  // after this, `x` is assumed to have type `u8`\n     identity_u16(x);\n     //~^ ERROR mismatched types\n-    //~| expected `u16`\n-    //~| found `u8`\n+    //~| expected u16, found u8\n     identity_u16(y);\n     //~^ ERROR mismatched types\n-    //~| expected `u16`\n-    //~| found `i32`\n+    //~| expected u16, found i32\n \n     let a = 3;\n \n@@ -32,6 +30,5 @@ fn main() {\n     identity_i(a); // ok\n     identity_u16(a);\n     //~^ ERROR mismatched types\n-    //~| expected `u16`\n-    //~| found `isize`\n+    //~| expected u16, found isize\n }"}, {"sha": "0f174d99fefcbe4b5d952776a7ec7d906dc7179a", "filename": "src/test/compile-fail/type-mismatch-multiple.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-multiple.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -12,11 +12,9 @@\n \n fn main() { let a: bool = 1; let b: i32 = true; }\n //~^ ERROR mismatched types\n-//~| expected `bool`\n-//~| found `_`\n-//~| expected bool\n-//~| found integral variable\n+//~| expected type `bool`\n+//~| found type `_`\n+//~| expected bool, found integral variable\n //~| ERROR mismatched types\n-//~| expected `i32`\n-//~| found `bool`\n+//~| expected i32, found bool\n "}, {"sha": "e74acaa71b0f3d5f347955f5c75d93a3b5089ca3", "filename": "src/test/compile-fail/type-mismatch-same-crate-name.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -23,9 +23,17 @@ fn main() {\n     let bar2 = {extern crate crate_a2 as a; a::bar()};\n     {\n         extern crate crate_a1 as a;\n-        a::try_foo(foo2); //~ ERROR mismatched types\n-                          //~^ NOTE Perhaps two different versions of crate `crate_a1`\n-        a::try_bar(bar2); //~ ERROR mismatched types\n-                          //~^ NOTE Perhaps two different versions of crate `crate_a1`\n+        a::try_foo(foo2);\n+        //~^ ERROR mismatched types\n+        //~| Perhaps two different versions of crate `crate_a1`\n+        //~| expected struct `main::a::Foo`\n+        //~| expected type `main::a::Foo`\n+        //~| found type `main::a::Foo`\n+        a::try_bar(bar2);\n+        //~^ ERROR mismatched types\n+        //~| Perhaps two different versions of crate `crate_a1`\n+        //~| expected trait `main::a::Bar`\n+        //~| expected type `Box<main::a::Bar + 'static>`\n+        //~| found type `Box<main::a::Bar>`\n     }\n }"}, {"sha": "11a2fc2665ca46ff56c9731fbe25a123251f1e78", "filename": "src/test/compile-fail/type-parameter-names.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-parameter-names.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -14,10 +14,9 @@\n fn foo<Foo, Bar>(x: Foo) -> Bar {\n     x\n //~^ ERROR mismatched types\n-//~| expected `Bar`\n-//~| found `Foo`\n-//~| expected type parameter\n-//~| found a different type parameter\n+//~| expected type `Bar`\n+//~| found type `Foo`\n+//~| expected type parameter, found a different type parameter\n }\n \n fn main() {}"}, {"sha": "26eac6adde221b296b0804388b6ed4f67e06e6f0", "filename": "src/test/compile-fail/type-params-in-different-spaces-1.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-params-in-different-spaces-1.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -13,10 +13,9 @@ use std::ops::Add;\n trait BrokenAdd: Copy + Add<Output=Self> {\n     fn broken_add<T>(&self, rhs: T) -> Self {\n         *self + rhs //~  ERROR mismatched types\n-                    //~| expected `Self`\n-                    //~| found `T`\n-                    //~| expected Self\n-                    //~| found type parameter\n+                    //~| expected type `Self`\n+                    //~| found type `T`\n+                    //~| expected Self, found type parameter\n     }\n }\n "}, {"sha": "91e3c38322e4725ac0e224df5b0c81497b092405", "filename": "src/test/compile-fail/typeck_type_placeholder_mismatch.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_mismatch.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -22,18 +22,16 @@ pub fn main() {\n fn test1() {\n     let x: Foo<_> = Bar::<usize>(PhantomData);\n     //~^ ERROR mismatched types\n-    //~| expected `Foo<_>`\n-    //~| found `Bar<usize>`\n-    //~| expected struct `Foo`\n-    //~| found struct `Bar`\n+    //~| expected type `Foo<_>`\n+    //~| found type `Bar<usize>`\n+    //~| expected struct `Foo`, found struct `Bar`\n     let y: Foo<usize> = x;\n }\n \n fn test2() {\n     let x: Foo<_> = Bar::<usize>(PhantomData);\n     //~^ ERROR mismatched types\n-    //~| expected `Foo<_>`\n-    //~| found `Bar<usize>`\n-    //~| expected struct `Foo`\n-    //~| found struct `Bar`\n+    //~| expected type `Foo<_>`\n+    //~| found type `Bar<usize>`\n+    //~| expected struct `Foo`, found struct `Bar`\n }"}, {"sha": "f14a3505cdeb486510da18e7f6dd72d2184f8d58", "filename": "src/test/compile-fail/ufcs-explicit-self-bad.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fufcs-explicit-self-bad.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -45,12 +45,12 @@ impl<'a, T> SomeTrait for &'a Bar<T> {\n     //~^ ERROR mismatched types\n     fn dummy3(self: &&Bar<T>) {}\n     //~^ ERROR mismatched types\n-    //~| expected `&&'a Bar<T>`\n-    //~| found `&&Bar<T>`\n+    //~| expected type `&&'a Bar<T>`\n+    //~| found type `&&Bar<T>`\n     //~| lifetime mismatch\n     //~| ERROR mismatched types\n-    //~| expected `&&'a Bar<T>`\n-    //~| found `&&Bar<T>`\n+    //~| expected type `&&'a Bar<T>`\n+    //~| found type `&&Bar<T>`\n     //~| lifetime mismatch\n }\n "}, {"sha": "b43159b0d96b042fbd51c2494632730897602223", "filename": "src/test/compile-fail/variadic-ffi-3.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e416518e6862335a9c99f4c9dfe23192bac3cab8/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvariadic-ffi-3.rs?ref=e416518e6862335a9c99f4c9dfe23192bac3cab8", "patch": "@@ -21,17 +21,15 @@ fn main() {\n \n         let x: unsafe extern \"C\" fn(f: isize, x: u8) = foo;\n         //~^ ERROR: mismatched types\n-        //~| expected `unsafe extern \"C\" fn(isize, u8)`\n-        //~| found `unsafe extern \"C\" fn(isize, u8, ...) {foo}`\n-        //~| expected non-variadic fn\n-        //~| found variadic function\n+        //~| expected type `unsafe extern \"C\" fn(isize, u8)`\n+        //~| found type `unsafe extern \"C\" fn(isize, u8, ...) {foo}`\n+        //~| NOTE: expected non-variadic fn, found variadic function\n \n         let y: extern \"C\" fn(f: isize, x: u8, ...) = bar;\n         //~^ ERROR: mismatched types\n-        //~| expected `extern \"C\" fn(isize, u8, ...)`\n-        //~| found `extern \"C\" fn(isize, u8) {bar}`\n-        //~| expected variadic fn\n-        //~| found non-variadic function\n+        //~| expected type `extern \"C\" fn(isize, u8, ...)`\n+        //~| found type `extern \"C\" fn(isize, u8) {bar}`\n+        //~| NOTE: expected variadic fn, found non-variadic function\n \n         foo(1, 2, 3f32); //~ ERROR: can't pass an `f32` to variadic function, cast to `c_double`\n         foo(1, 2, true); //~ ERROR: can't pass `bool` to variadic function, cast to `c_int`"}]}