{"sha": "6c728e32c0bad69318c1c4d4413ea55ce7c5813f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZjNzI4ZTMyYzBiYWQ2OTMxOGMxYzRkNDQxM2VhNTVjZTdjNTgxM2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-02-12T23:01:29Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-02-16T13:03:58Z"}, "message": "Parse (and discard) lifetime declarations on function types", "tree": {"sha": "18b3b1cd5b4cf6b8eafed9779cf66f719b6e9081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18b3b1cd5b4cf6b8eafed9779cf66f719b6e9081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c728e32c0bad69318c1c4d4413ea55ce7c5813f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c728e32c0bad69318c1c4d4413ea55ce7c5813f", "html_url": "https://github.com/rust-lang/rust/commit/6c728e32c0bad69318c1c4d4413ea55ce7c5813f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c728e32c0bad69318c1c4d4413ea55ce7c5813f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad8b437adabbc11e79c3672bd5c74294f38d3bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8b437adabbc11e79c3672bd5c74294f38d3bc4", "html_url": "https://github.com/rust-lang/rust/commit/ad8b437adabbc11e79c3672bd5c74294f38d3bc4"}], "stats": {"total": 74, "additions": 43, "deletions": 31}, "files": [{"sha": "799f0d40a46171720fd070011ade8c43fd7ca452", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 29, "deletions": 17, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6c728e32c0bad69318c1c4d4413ea55ce7c5813f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c728e32c0bad69318c1c4d4413ea55ce7c5813f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6c728e32c0bad69318c1c4d4413ea55ce7c5813f", "patch": "@@ -307,12 +307,12 @@ pub impl Parser {\n     {\n         /*\n \n-        extern \"ABI\" [pure|unsafe] fn (S) -> T\n-               ^~~~^ ^~~~~~~~~~~~^    ^~^    ^\n-                 |     |               |     |\n-                 |     |               |   Return type\n-                 |     |             Argument types\n-                 |     |\n+        extern \"ABI\" [pure|unsafe] fn <'lt> (S) -> T\n+               ^~~~^ ^~~~~~~~~~~~^    ^~~~^ ^~^    ^\n+                 |     |                |    |     |\n+                 |     |                |    |   Return type\n+                 |     |                |  Argument types\n+                 |     |            Lifetimes\n                  |     |\n                  |   Purity\n                 ABI\n@@ -333,12 +333,12 @@ pub impl Parser {\n     {\n         /*\n \n-        (&|~|@) [r/] [pure|unsafe] [once] fn (S) -> T\n-        ^~~~~~^ ^~~^ ^~~~~~~~~~~~^ ^~~~~^    ^~^    ^\n-           |     |     |             |        |     |\n-           |     |     |             |        |   Return type\n-           |     |     |             |      Argument types\n-           |     |     |             |\n+        (&|~|@) [r/] [pure|unsafe] [once] fn <'lt> (S) -> T\n+        ^~~~~~^ ^~~^ ^~~~~~~~~~~~^ ^~~~~^    ^~~~^ ^~^    ^\n+           |     |     |             |         |    |     |\n+           |     |     |             |         |    |   Return type\n+           |     |     |             |         |  Argument types\n+           |     |     |             |     Lifetimes\n            |     |     |          Once-ness (a.k.a., affine)\n            |     |   Purity\n            | Lifetime bound\n@@ -394,12 +394,24 @@ pub impl Parser {\n     }\n \n     fn parse_ty_fn_decl() -> fn_decl {\n-        let inputs = do self.parse_unspanned_seq(\n-            token::LPAREN, token::RPAREN,\n-            seq_sep_trailing_disallowed(token::COMMA)) |p| {\n+        /*\n \n-            p.parse_arg_general(false)\n-        };\n+        (fn) <'lt> (S) -> T\n+             ^~~~^ ^~^    ^\n+               |    |     |\n+               |    |   Return type\n+               |  Argument types\n+           Lifetimes\n+\n+        */\n+        if self.eat(token::LT) {\n+            let _lifetimes = self.parse_lifetimes();\n+            self.expect(token::GT);\n+        }\n+        let inputs = self.parse_unspanned_seq(\n+            token::LPAREN, token::RPAREN,\n+            seq_sep_trailing_disallowed(token::COMMA),\n+            |p| p.parse_arg_general(false));\n         let (ret_style, ret_ty) = self.parse_ret_ty();\n         ast::fn_decl { inputs: inputs, output: ret_ty, cf: ret_style }\n     }"}, {"sha": "b399ef8a747f9a520ee8102af17532c807916805", "filename": "src/test/compile-fail/regions-in-enums.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6c728e32c0bad69318c1c4d4413ea55ce7c5813f/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c728e32c0bad69318c1c4d4413ea55ce7c5813f/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs?ref=6c728e32c0bad69318c1c4d4413ea55ce7c5813f", "patch": "@@ -10,15 +10,15 @@\n \n enum yes0<'lt> {\n     // This will eventually be legal (and in fact the only way):\n-    x3(&'lt uint) //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n+    X3(&'lt uint) //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n }\n \n enum yes1 {\n-    x4(&'self uint)\n+    X4(&'self uint)\n }\n \n enum yes2 {\n-    x5(&'foo uint) //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n+    X5(&'foo uint) //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n }\n \n fn main() {}"}, {"sha": "063bc32f7b446bb2005bc2e4cc0042426ed3dfe2", "filename": "src/test/compile-fail/regions-scoping.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6c728e32c0bad69318c1c4d4413ea55ce7c5813f/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c728e32c0bad69318c1c4d4413ea55ce7c5813f/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-scoping.rs?ref=6c728e32c0bad69318c1c4d4413ea55ce7c5813f", "patch": "@@ -10,13 +10,13 @@\n \n fn with<T>(t: T, f: fn(T)) { f(t) }\n \n-fn nested(x: &x/int) {  // (1)\n+fn nested<'x>(x: &'x int) {  // (1)\n     do with(\n-        fn&(x: &x/int, // Refers to the region `x` at (1)\n-            y: &y/int, // A fresh region `y` (2)\n-            z: fn(x: &x/int, // Refers to `x` at (1)\n-                  y: &y/int, // Refers to `y` at (2)\n-                  z: &z/int) -> &z/int) // A fresh region `z` (3)\n+        fn&(x: &'x int, // Refers to the region `x` at (1)\n+            y: &'y int, // A fresh region `y` (2)\n+            z: fn<'z>(x: &'x int, // Refers to `x` at (1)\n+                      y: &'y int, // Refers to `y` at (2)\n+                      z: &'z int) -> &'z int) // A fresh region `z` (3)\n             -> &x/int {\n \n             if false { return z(x, y, x); }\n@@ -29,13 +29,13 @@ fn nested(x: &x/int) {  // (1)\n         }\n     ) |foo| {\n \n-        let a: &x/int = foo(x, x, |_x, _y, z| z );\n-        let b: &x/int = foo(x, a, |_x, _y, z| z );\n-        let c: &x/int = foo(a, a, |_x, _y, z| z );\n+        let a: &'x int = foo(x, x, |_x, _y, z| z );\n+        let b: &'x int = foo(x, a, |_x, _y, z| z );\n+        let c: &'x int = foo(a, a, |_x, _y, z| z );\n \n         let z = 3i;\n-        let d: &x/int = foo(x, x, |_x, _y, z| z );\n-        let e: &x/int = foo(x, &z, |_x, _y, z| z );\n+        let d: &'x int = foo(x, x, |_x, _y, z| z );\n+        let e: &'x int = foo(x, &z, |_x, _y, z| z );\n \n         // This would result in an error, but it is not reported by typeck\n         // anymore but rather borrowck. Therefore, it doesn't end up"}]}