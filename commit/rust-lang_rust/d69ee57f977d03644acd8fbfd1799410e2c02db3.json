{"sha": "d69ee57f977d03644acd8fbfd1799410e2c02db3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2OWVlNTdmOTc3ZDAzNjQ0YWNkOGZiZmQxNzk5NDEwZTJjMDJkYjM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-09T00:13:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-09T00:13:25Z"}, "message": "Rollup merge of #77640 - ethanboxx:int_error_matching_attempt_2, r=KodrAus\n\nRefactor IntErrorKind to avoid \"underflow\" terminology\n\nThis PR is a continuation of #76455\n\n# Changes\n\n- `Overflow` renamed to `PosOverflow` and `Underflow` renamed to `NegOverflow` after discussion in #76455\n- Changed some of the parsing code to return `InvalidDigit` rather than `Empty` for strings \"+\" and \"-\". https://users.rust-lang.org/t/misleading-error-in-str-parse-for-int-types/49178\n- Carry the problem `char` with the `InvalidDigit` variant.\n- Necessary changes were made to the compiler as it depends on `int_error_matching`.\n- Redid tests to match on specific errors.\n\nr? ```@KodrAus```", "tree": {"sha": "127bcfb0132eabba68e01335aaf1b2b30c43a689", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/127bcfb0132eabba68e01335aaf1b2b30c43a689"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d69ee57f977d03644acd8fbfd1799410e2c02db3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfqImmCRBK7hj4Ov3rIwAAdHIIAIAvl8Xb/FUbUPPiYjXIL+1o\nNuac6foZs907I+aaicAK1Jq87QbfytqKoYCQfawia8YnGg6bS9aTtVjWv9CygPAr\ne8xQBT7Y27kTpLWuqgQrp7SD4pK8sQodSg9CpWfNW2CbN96EXAy3DkGmcJ9l45jY\nJPLQyxqCqRpkL9L3luZ3Geq6GV58Ln3YQDgtSpcyBY1+ejIC72GQa863xvIzNc41\nCSR4LrDdYFyuhxbrIAvJrUtxX0DysmtbOVUPXhGkANCB5HbXHYfOK44pysLZFYZ4\n1CIFf2ONHm+entLmlyCsaw9033ME7+ehD/JiF2eCyCV5hi4+4w9/8H3ciqIig5Y=\n=1Skh\n-----END PGP SIGNATURE-----\n", "payload": "tree 127bcfb0132eabba68e01335aaf1b2b30c43a689\nparent 1773f60ea5d42e86b8fdf78d2fc5221ead222bc1\nparent e750238404f59f3f6d94142f3e12ffc4c5c0b366\nauthor Dylan DPC <dylan.dpc@gmail.com> 1604880805 +0100\ncommitter GitHub <noreply@github.com> 1604880805 +0100\n\nRollup merge of #77640 - ethanboxx:int_error_matching_attempt_2, r=KodrAus\n\nRefactor IntErrorKind to avoid \"underflow\" terminology\n\nThis PR is a continuation of #76455\n\n# Changes\n\n- `Overflow` renamed to `PosOverflow` and `Underflow` renamed to `NegOverflow` after discussion in #76455\n- Changed some of the parsing code to return `InvalidDigit` rather than `Empty` for strings \"+\" and \"-\". https://users.rust-lang.org/t/misleading-error-in-str-parse-for-int-types/49178\n- Carry the problem `char` with the `InvalidDigit` variant.\n- Necessary changes were made to the compiler as it depends on `int_error_matching`.\n- Redid tests to match on specific errors.\n\nr? ```@KodrAus```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d69ee57f977d03644acd8fbfd1799410e2c02db3", "html_url": "https://github.com/rust-lang/rust/commit/d69ee57f977d03644acd8fbfd1799410e2c02db3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d69ee57f977d03644acd8fbfd1799410e2c02db3/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1773f60ea5d42e86b8fdf78d2fc5221ead222bc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/1773f60ea5d42e86b8fdf78d2fc5221ead222bc1", "html_url": "https://github.com/rust-lang/rust/commit/1773f60ea5d42e86b8fdf78d2fc5221ead222bc1"}, {"sha": "e750238404f59f3f6d94142f3e12ffc4c5c0b366", "url": "https://api.github.com/repos/rust-lang/rust/commits/e750238404f59f3f6d94142f3e12ffc4c5c0b366", "html_url": "https://github.com/rust-lang/rust/commit/e750238404f59f3f6d94142f3e12ffc4c5c0b366"}], "stats": {"total": 115, "additions": 69, "deletions": 46}, "files": [{"sha": "41342764ba773b299db01e39e2786280c6fef1b1", "filename": "compiler/rustc_middle/src/middle/limits.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d69ee57f977d03644acd8fbfd1799410e2c02db3/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69ee57f977d03644acd8fbfd1799410e2c02db3/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Flimits.rs?ref=d69ee57f977d03644acd8fbfd1799410e2c02db3", "patch": "@@ -48,10 +48,12 @@ fn update_limit(\n                         .unwrap_or(attr.span);\n \n                     let error_str = match e.kind() {\n-                        IntErrorKind::Overflow => \"`limit` is too large\",\n+                        IntErrorKind::PosOverflow => \"`limit` is too large\",\n                         IntErrorKind::Empty => \"`limit` must be a non-negative integer\",\n                         IntErrorKind::InvalidDigit => \"not a valid integer\",\n-                        IntErrorKind::Underflow => bug!(\"`limit` should never underflow\"),\n+                        IntErrorKind::NegOverflow => {\n+                            bug!(\"`limit` should never negatively overflow\")\n+                        }\n                         IntErrorKind::Zero => bug!(\"zero is a valid `limit`\"),\n                         kind => bug!(\"unimplemented IntErrorKind variant: {:?}\", kind),\n                     };"}, {"sha": "41202546566a7adeff5b0e22889a70b907b7d46c", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d69ee57f977d03644acd8fbfd1799410e2c02db3/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69ee57f977d03644acd8fbfd1799410e2c02db3/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=d69ee57f977d03644acd8fbfd1799410e2c02db3", "patch": "@@ -159,6 +159,7 @@\n #![feature(slice_ptr_get)]\n #![feature(no_niche)] // rust-lang/rust#68303\n #![feature(unsafe_block_in_unsafe_fn)]\n+#![feature(int_error_matching)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n #[prelude_import]"}, {"sha": "9d8c8c862911c21bac4ce60cb482912ed41ea289", "filename": "library/core/src/num/error.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d69ee57f977d03644acd8fbfd1799410e2c02db3/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69ee57f977d03644acd8fbfd1799410e2c02db3/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ferror.rs?ref=d69ee57f977d03644acd8fbfd1799410e2c02db3", "patch": "@@ -98,15 +98,18 @@ pub enum IntErrorKind {\n     ///\n     /// Among other causes, this variant will be constructed when parsing an empty string.\n     Empty,\n-    /// Contains an invalid digit.\n+    /// Contains an invalid digit in its context.\n     ///\n     /// Among other causes, this variant will be constructed when parsing a string that\n-    /// contains a letter.\n+    /// contains a non-ASCII char.\n+    ///\n+    /// This variant is also constructed when a `+` or `-` is misplaced within a string\n+    /// either on its own or in the middle of a number.\n     InvalidDigit,\n     /// Integer is too large to store in target integer type.\n-    Overflow,\n+    PosOverflow,\n     /// Integer is too small to store in target integer type.\n-    Underflow,\n+    NegOverflow,\n     /// Value was Zero\n     ///\n     /// This variant will be emitted when the parsing string has a value of zero, which\n@@ -119,7 +122,7 @@ impl ParseIntError {\n     #[unstable(\n         feature = \"int_error_matching\",\n         reason = \"it can be useful to match errors when making error messages \\\n-                  for integer parsing\",\n+              for integer parsing\",\n         issue = \"22639\"\n     )]\n     pub fn kind(&self) -> &IntErrorKind {\n@@ -136,8 +139,8 @@ impl ParseIntError {\n         match self.kind {\n             IntErrorKind::Empty => \"cannot parse integer from empty string\",\n             IntErrorKind::InvalidDigit => \"invalid digit found in string\",\n-            IntErrorKind::Overflow => \"number too large to fit in target type\",\n-            IntErrorKind::Underflow => \"number too small to fit in target type\",\n+            IntErrorKind::PosOverflow => \"number too large to fit in target type\",\n+            IntErrorKind::NegOverflow => \"number too small to fit in target type\",\n             IntErrorKind::Zero => \"number would be zero for non-zero type\",\n         }\n     }"}, {"sha": "9f5ae57b74adee4f8edfad538a71ba9d6239544c", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d69ee57f977d03644acd8fbfd1799410e2c02db3/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69ee57f977d03644acd8fbfd1799410e2c02db3/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=d69ee57f977d03644acd8fbfd1799410e2c02db3", "patch": "@@ -63,7 +63,12 @@ pub use nonzero::{NonZeroI128, NonZeroI16, NonZeroI32, NonZeroI64, NonZeroI8, No\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub use error::TryFromIntError;\n \n-#[unstable(feature = \"int_error_matching\", issue = \"22639\")]\n+#[unstable(\n+    feature = \"int_error_matching\",\n+    reason = \"it can be useful to match errors when making error messages \\\n+              for integer parsing\",\n+    issue = \"22639\"\n+)]\n pub use error::IntErrorKind;\n \n macro_rules! usize_isize_to_xe_bytes_doc {\n@@ -830,15 +835,14 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n     let src = src.as_bytes();\n \n     let (is_positive, digits) = match src[0] {\n+        b'+' | b'-' if src[1..].is_empty() => {\n+            return Err(PIE { kind: InvalidDigit });\n+        }\n         b'+' => (true, &src[1..]),\n         b'-' if is_signed_ty => (false, &src[1..]),\n         _ => (true, src),\n     };\n \n-    if digits.is_empty() {\n-        return Err(PIE { kind: Empty });\n-    }\n-\n     let mut result = T::from_u32(0);\n     if is_positive {\n         // The number is positive\n@@ -849,11 +853,11 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n             };\n             result = match result.checked_mul(radix) {\n                 Some(result) => result,\n-                None => return Err(PIE { kind: Overflow }),\n+                None => return Err(PIE { kind: PosOverflow }),\n             };\n             result = match result.checked_add(x) {\n                 Some(result) => result,\n-                None => return Err(PIE { kind: Overflow }),\n+                None => return Err(PIE { kind: PosOverflow }),\n             };\n         }\n     } else {\n@@ -865,11 +869,11 @@ fn from_str_radix<T: FromStrRadixHelper>(src: &str, radix: u32) -> Result<T, Par\n             };\n             result = match result.checked_mul(radix) {\n                 Some(result) => result,\n-                None => return Err(PIE { kind: Underflow }),\n+                None => return Err(PIE { kind: NegOverflow }),\n             };\n             result = match result.checked_sub(x) {\n                 Some(result) => result,\n-                None => return Err(PIE { kind: Underflow }),\n+                None => return Err(PIE { kind: NegOverflow }),\n             };\n         }\n     }"}, {"sha": "fb1293c99bba934748dd13362c0a994eea41d833", "filename": "library/core/tests/nonzero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d69ee57f977d03644acd8fbfd1799410e2c02db3/library%2Fcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69ee57f977d03644acd8fbfd1799410e2c02db3/library%2Fcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnonzero.rs?ref=d69ee57f977d03644acd8fbfd1799410e2c02db3", "patch": "@@ -135,11 +135,11 @@ fn test_from_str() {\n     );\n     assert_eq!(\n         \"-129\".parse::<NonZeroI8>().err().map(|e| e.kind().clone()),\n-        Some(IntErrorKind::Underflow)\n+        Some(IntErrorKind::NegOverflow)\n     );\n     assert_eq!(\n         \"257\".parse::<NonZeroU8>().err().map(|e| e.kind().clone()),\n-        Some(IntErrorKind::Overflow)\n+        Some(IntErrorKind::PosOverflow)\n     );\n }\n "}, {"sha": "49e5cc0eaa54484028e973667260d54e01f23d82", "filename": "library/core/tests/num/mod.rs", "status": "modified", "additions": 39, "deletions": 26, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/d69ee57f977d03644acd8fbfd1799410e2c02db3/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d69ee57f977d03644acd8fbfd1799410e2c02db3/library%2Fcore%2Ftests%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fmod.rs?ref=d69ee57f977d03644acd8fbfd1799410e2c02db3", "patch": "@@ -2,10 +2,11 @@ use core::cmp::PartialEq;\n use core::convert::{TryFrom, TryInto};\n use core::fmt::Debug;\n use core::marker::Copy;\n-use core::num::TryFromIntError;\n+use core::num::{IntErrorKind, ParseIntError, TryFromIntError};\n use core::ops::{Add, Div, Mul, Rem, Sub};\n use core::option::Option;\n-use core::option::Option::{None, Some};\n+use core::option::Option::None;\n+use core::str::FromStr;\n \n #[macro_use]\n mod int_macros;\n@@ -67,6 +68,15 @@ where\n     assert_eq!(ten.rem(two), ten % two);\n }\n \n+/// Helper function for asserting number parsing returns a specific error\n+fn test_parse<T>(num_str: &str, expected: Result<T, IntErrorKind>)\n+where\n+    T: FromStr<Err = ParseIntError>,\n+    Result<T, IntErrorKind>: PartialEq + Debug,\n+{\n+    assert_eq!(num_str.parse::<T>().map_err(|e| e.kind().clone()), expected)\n+}\n+\n #[test]\n fn from_str_issue7588() {\n     let u: Option<u8> = u8::from_str_radix(\"1000\", 10).ok();\n@@ -77,49 +87,52 @@ fn from_str_issue7588() {\n \n #[test]\n fn test_int_from_str_overflow() {\n-    assert_eq!(\"127\".parse::<i8>().ok(), Some(127i8));\n-    assert_eq!(\"128\".parse::<i8>().ok(), None);\n+    test_parse::<i8>(\"127\", Ok(127));\n+    test_parse::<i8>(\"128\", Err(IntErrorKind::PosOverflow));\n \n-    assert_eq!(\"-128\".parse::<i8>().ok(), Some(-128i8));\n-    assert_eq!(\"-129\".parse::<i8>().ok(), None);\n+    test_parse::<i8>(\"-128\", Ok(-128));\n+    test_parse::<i8>(\"-129\", Err(IntErrorKind::NegOverflow));\n \n-    assert_eq!(\"32767\".parse::<i16>().ok(), Some(32_767i16));\n-    assert_eq!(\"32768\".parse::<i16>().ok(), None);\n+    test_parse::<i16>(\"32767\", Ok(32_767));\n+    test_parse::<i16>(\"32768\", Err(IntErrorKind::PosOverflow));\n \n-    assert_eq!(\"-32768\".parse::<i16>().ok(), Some(-32_768i16));\n-    assert_eq!(\"-32769\".parse::<i16>().ok(), None);\n+    test_parse::<i16>(\"-32768\", Ok(-32_768));\n+    test_parse::<i16>(\"-32769\", Err(IntErrorKind::NegOverflow));\n \n-    assert_eq!(\"2147483647\".parse::<i32>().ok(), Some(2_147_483_647i32));\n-    assert_eq!(\"2147483648\".parse::<i32>().ok(), None);\n+    test_parse::<i32>(\"2147483647\", Ok(2_147_483_647));\n+    test_parse::<i32>(\"2147483648\", Err(IntErrorKind::PosOverflow));\n \n-    assert_eq!(\"-2147483648\".parse::<i32>().ok(), Some(-2_147_483_648i32));\n-    assert_eq!(\"-2147483649\".parse::<i32>().ok(), None);\n+    test_parse::<i32>(\"-2147483648\", Ok(-2_147_483_648));\n+    test_parse::<i32>(\"-2147483649\", Err(IntErrorKind::NegOverflow));\n \n-    assert_eq!(\"9223372036854775807\".parse::<i64>().ok(), Some(9_223_372_036_854_775_807i64));\n-    assert_eq!(\"9223372036854775808\".parse::<i64>().ok(), None);\n+    test_parse::<i64>(\"9223372036854775807\", Ok(9_223_372_036_854_775_807));\n+    test_parse::<i64>(\"9223372036854775808\", Err(IntErrorKind::PosOverflow));\n \n-    assert_eq!(\"-9223372036854775808\".parse::<i64>().ok(), Some(-9_223_372_036_854_775_808i64));\n-    assert_eq!(\"-9223372036854775809\".parse::<i64>().ok(), None);\n+    test_parse::<i64>(\"-9223372036854775808\", Ok(-9_223_372_036_854_775_808));\n+    test_parse::<i64>(\"-9223372036854775809\", Err(IntErrorKind::NegOverflow));\n }\n \n #[test]\n fn test_leading_plus() {\n-    assert_eq!(\"+127\".parse::<u8>().ok(), Some(127));\n-    assert_eq!(\"+9223372036854775807\".parse::<i64>().ok(), Some(9223372036854775807));\n+    test_parse::<u8>(\"+127\", Ok(127));\n+    test_parse::<i64>(\"+9223372036854775807\", Ok(9223372036854775807));\n }\n \n #[test]\n fn test_invalid() {\n-    assert_eq!(\"--129\".parse::<i8>().ok(), None);\n-    assert_eq!(\"++129\".parse::<i8>().ok(), None);\n-    assert_eq!(\"\u0421\u044a\u0435\u0448\u044c\".parse::<u8>().ok(), None);\n+    test_parse::<i8>(\"--129\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<i8>(\"++129\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<u8>(\"\u0421\u044a\u0435\u0448\u044c\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<u8>(\"123Hello\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<i8>(\"--\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<i8>(\"-\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<i8>(\"+\", Err(IntErrorKind::InvalidDigit));\n+    test_parse::<u8>(\"-1\", Err(IntErrorKind::InvalidDigit));\n }\n \n #[test]\n fn test_empty() {\n-    assert_eq!(\"-\".parse::<i8>().ok(), None);\n-    assert_eq!(\"+\".parse::<i8>().ok(), None);\n-    assert_eq!(\"\".parse::<u8>().ok(), None);\n+    test_parse::<u8>(\"\", Err(IntErrorKind::Empty));\n }\n \n #[test]"}]}