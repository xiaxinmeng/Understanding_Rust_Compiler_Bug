{"sha": "5472b0718f286266ab89acdf234c3552de7e973c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NzJiMDcxOGYyODYyNjZhYjg5YWNkZjIzNGMzNTUyZGU3ZTk3M2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-04T11:39:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-04T11:39:50Z"}, "message": "Auto merge of #54809 - pietroalbini:rollup, r=pietroalbini\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #53523 (Add doc for impl From for Std Error)\n - #54746 (simplify some unused lints code)\n - #54761 (Make spec_extend use for_each())\n - #54769 (Fix typo in CONTRIBUTING.md)\n - #54773 (Update a FIXME in memory.rs)\n - #54777 (abolish ICE when pretty-printing async block)\n - #54780 (Remove duplicate predicates in `explicit_predicates_of`)\n - #54788 (A handful of cleanups for rustc/mir)\n - #54789 (Introduce `TyKind::UnnormalizedProjection`)\n - #54795 (remove padding from multiline format string label)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "b458942ff0b20b422c1b3d9f288308ddd9d2e1bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b458942ff0b20b422c1b3d9f288308ddd9d2e1bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5472b0718f286266ab89acdf234c3552de7e973c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5472b0718f286266ab89acdf234c3552de7e973c", "html_url": "https://github.com/rust-lang/rust/commit/5472b0718f286266ab89acdf234c3552de7e973c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5472b0718f286266ab89acdf234c3552de7e973c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a0e5cbf124cea5254bb09111cae6af1b86b21e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a0e5cbf124cea5254bb09111cae6af1b86b21e4", "html_url": "https://github.com/rust-lang/rust/commit/8a0e5cbf124cea5254bb09111cae6af1b86b21e4"}, {"sha": "71aded852f42fa05d95f31e549b289eea591533c", "url": "https://api.github.com/repos/rust-lang/rust/commits/71aded852f42fa05d95f31e549b289eea591533c", "html_url": "https://github.com/rust-lang/rust/commit/71aded852f42fa05d95f31e549b289eea591533c"}], "stats": {"total": 380, "additions": 304, "deletions": 76}, "files": [{"sha": "49961d02ddab7731d835b059ed7459b75bb52e3e", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -566,7 +566,7 @@ labels to triage issues:\n   to fix the issue.\n \n * The dark blue **final-comment-period** label marks bugs that are using the\n-  RFC signoff functionality of [rfcbot][rfcbot] and are currenty in the final\n+  RFC signoff functionality of [rfcbot][rfcbot] and are currently in the final\n   comment period.\n \n * Red, **I**-prefixed labels indicate the **importance** of the issue. The"}, {"sha": "2bc037e3fee126343715212911c8b62e1d28867e", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -1822,12 +1822,12 @@ impl<T, I> SpecExtend<T, I> for Vec<T>\n             unsafe {\n                 let mut ptr = self.as_mut_ptr().add(self.len());\n                 let mut local_len = SetLenOnDrop::new(&mut self.len);\n-                for element in iterator {\n+                iterator.for_each(move |element| {\n                     ptr::write(ptr, element);\n                     ptr = ptr.offset(1);\n                     // NB can't overflow since we would have had to alloc the address space\n                     local_len.increment_len(1);\n-                }\n+                });\n             }\n         } else {\n             self.extend_desugared(iterator)"}, {"sha": "7d87c1839d78c7059e9fe49d8dacb404964d2efe", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -288,7 +288,7 @@ impl<'a> Parser<'a> {\n                 self.cur.next();\n                 Some(pos)\n             } else {\n-                let pos = pos + padding + 1;\n+                let pos = pos + raw + 1;\n                 self.err(format!(\"expected `{:?}`, found `{:?}`\", c, maybe),\n                          format!(\"expected `{}`\", c),\n                          pos,"}, {"sha": "388abc88cfd71dc3c9bf847320eaae20da85d269", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -873,8 +873,8 @@ for ty::TyKind<'gcx>\n             Tuple(inner_tys) => {\n                 inner_tys.hash_stable(hcx, hasher);\n             }\n-            Projection(ref projection_ty) => {\n-                projection_ty.hash_stable(hcx, hasher);\n+            Projection(ref data) | UnnormalizedProjection(ref data) => {\n+                data.hash_stable(hcx, hasher);\n             }\n             Opaque(def_id, substs) => {\n                 def_id.hash_stable(hcx, hasher);"}, {"sha": "6449227af4ab844f43075c4dde87a037bb31e31b", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -283,6 +283,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for Canonicalizer<'cx, 'gcx, 'tcx>\n             | ty::Never\n             | ty::Tuple(..)\n             | ty::Projection(..)\n+            | ty::UnnormalizedProjection(..)\n             | ty::Foreign(..)\n             | ty::Param(..)\n             | ty::Opaque(..) => {"}, {"sha": "e17e777332ec616446e7cd0bde048f6c1f801ddc", "filename": "src/librustc/infer/freshen.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Finfer%2Ffreshen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Finfer%2Ffreshen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffreshen.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -193,6 +193,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for TypeFreshener<'a, 'gcx, 'tcx> {\n             ty::Never |\n             ty::Tuple(..) |\n             ty::Projection(..) |\n+            ty::UnnormalizedProjection(..) |\n             ty::Foreign(..) |\n             ty::Param(..) |\n             ty::Closure(..) |"}, {"sha": "c81d55e69b61a124b380142c3c7cb7b99ef5f847", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -171,7 +171,7 @@ impl<'tcx> Scalar {\n     pub fn from_uint(i: impl Into<u128>, size: Size) -> Self {\n         let i = i.into();\n         debug_assert_eq!(truncate(i, size), i,\n-                    \"Unsigned value {} does not fit in {} bits\", i, size.bits());\n+                         \"Unsigned value {} does not fit in {} bits\", i, size.bits());\n         Scalar::Bits { bits: i, size: size.bytes() as u8 }\n     }\n \n@@ -181,7 +181,7 @@ impl<'tcx> Scalar {\n         // `into` performed sign extension, we have to truncate\n         let truncated = truncate(i as u128, size);\n         debug_assert_eq!(sign_extend(truncated, size) as i128, i,\n-                    \"Signed value {} does not fit in {} bits\", i, size.bits());\n+                         \"Signed value {} does not fit in {} bits\", i, size.bits());\n         Scalar::Bits { bits: truncated, size: size.bytes() as u8 }\n     }\n "}, {"sha": "30117f90dc69f99a0eb5d79be0751f686250198d", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 18, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -12,7 +12,6 @@\n //!\n //! [rustc guide]: https://rust-lang-nursery.github.io/rustc-guide/mir/index.html\n \n-use graphviz::IntoCow;\n use hir::def::CtorKind;\n use hir::def_id::DefId;\n use hir::{self, HirId, InlineAsm};\n@@ -327,22 +326,20 @@ impl<'tcx> Mir<'tcx> {\n         if idx < stmts.len() {\n             &stmts[idx].source_info\n         } else {\n-            assert!(idx == stmts.len());\n+            assert_eq!(idx, stmts.len());\n             &block.terminator().source_info\n         }\n     }\n \n     /// Check if `sub` is a sub scope of `sup`\n     pub fn is_sub_scope(&self, mut sub: SourceScope, sup: SourceScope) -> bool {\n-        loop {\n-            if sub == sup {\n-                return true;\n-            }\n+        while sub != sup {\n             match self.source_scopes[sub].parent_scope {\n                 None => return false,\n                 Some(p) => sub = p,\n             }\n         }\n+        true\n     }\n \n     /// Return the return type, it always return first element from `local_decls` array\n@@ -526,9 +523,7 @@ impl BorrowKind {\n     pub fn allows_two_phase_borrow(&self) -> bool {\n         match *self {\n             BorrowKind::Shared | BorrowKind::Shallow | BorrowKind::Unique => false,\n-            BorrowKind::Mut {\n-                allow_two_phase_borrow,\n-            } => allow_two_phase_borrow,\n+            BorrowKind::Mut { allow_two_phase_borrow } => allow_two_phase_borrow,\n         }\n     }\n }\n@@ -1574,42 +1569,42 @@ impl<'tcx> TerminatorKind<'tcx> {\n                         };\n                         fmt_const_val(&mut s, &c).unwrap();\n                         s.into()\n-                    }).chain(iter::once(String::from(\"otherwise\").into()))\n+                    }).chain(iter::once(\"otherwise\".into()))\n                     .collect()\n             }\n             Call {\n                 destination: Some(_),\n                 cleanup: Some(_),\n                 ..\n-            } => vec![\"return\".into_cow(), \"unwind\".into_cow()],\n+            } => vec![\"return\".into(), \"unwind\".into()],\n             Call {\n                 destination: Some(_),\n                 cleanup: None,\n                 ..\n-            } => vec![\"return\".into_cow()],\n+            } => vec![\"return\".into()],\n             Call {\n                 destination: None,\n                 cleanup: Some(_),\n                 ..\n-            } => vec![\"unwind\".into_cow()],\n+            } => vec![\"unwind\".into()],\n             Call {\n                 destination: None,\n                 cleanup: None,\n                 ..\n             } => vec![],\n-            Yield { drop: Some(_), .. } => vec![\"resume\".into_cow(), \"drop\".into_cow()],\n-            Yield { drop: None, .. } => vec![\"resume\".into_cow()],\n+            Yield { drop: Some(_), .. } => vec![\"resume\".into(), \"drop\".into()],\n+            Yield { drop: None, .. } => vec![\"resume\".into()],\n             DropAndReplace { unwind: None, .. } | Drop { unwind: None, .. } => {\n-                vec![\"return\".into_cow()]\n+                vec![\"return\".into()]\n             }\n             DropAndReplace {\n                 unwind: Some(_), ..\n             }\n             | Drop {\n                 unwind: Some(_), ..\n-            } => vec![\"return\".into_cow(), \"unwind\".into_cow()],\n+            } => vec![\"return\".into(), \"unwind\".into()],\n             Assert { cleanup: None, .. } => vec![\"\".into()],\n-            Assert { .. } => vec![\"success\".into_cow(), \"unwind\".into_cow()],\n+            Assert { .. } => vec![\"success\".into(), \"unwind\".into()],\n             FalseEdges {\n                 ref imaginary_targets,\n                 .."}, {"sha": "7520695a7cd90c8cc1c241ed0018be70809675a0", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -325,7 +325,7 @@ impl<'a, 'gcx: 'tcx, 'tcx: 'a> CodegenUnitNameBuilder<'a, 'gcx, 'tcx> {\n                 String::new()\n             };\n \n-            let crate_disambiguator = format!(\"{}\", tcx.crate_disambiguator(cnum));\n+            let crate_disambiguator = tcx.crate_disambiguator(cnum).to_string();\n             // Using a shortened disambiguator of about 40 bits\n             format!(\"{}.{}{}\",\n                 tcx.crate_name(cnum),"}, {"sha": "fc7b4862b0ae5d0d927962e78c2a332367079e5e", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -87,8 +87,8 @@ impl<'a, 'gcx, 'tcx> PlaceTy<'tcx> {\n                         assert!(index < adt_def.variants.len());\n                         assert_eq!(adt_def, adt_def1);\n                         PlaceTy::Downcast { adt_def,\n-                                             substs,\n-                                             variant_index: index }\n+                                            substs,\n+                                            variant_index: index }\n                     }\n                     _ => {\n                         bug!(\"cannot downcast non-ADT type: `{:?}`\", self)\n@@ -151,7 +151,7 @@ impl<'tcx> Place<'tcx> {\n                     }\n                 },\n                 _ => None,\n-            }\f\n+            }\n             _ => None,\n         }\n     }\n@@ -255,9 +255,9 @@ impl<'tcx> Operand<'tcx> {\n \n impl<'tcx> BinOp {\n       pub fn ty<'a, 'gcx>(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-                    lhs_ty: Ty<'tcx>,\n-                    rhs_ty: Ty<'tcx>)\n-                    -> Ty<'tcx> {\n+                          lhs_ty: Ty<'tcx>,\n+                          rhs_ty: Ty<'tcx>)\n+                          -> Ty<'tcx> {\n         // FIXME: handle SIMD correctly\n         match self {\n             &BinOp::Add | &BinOp::Sub | &BinOp::Mul | &BinOp::Div | &BinOp::Rem |"}, {"sha": "caf549e37a9078865b2aaccd337719d283fa80d8", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -475,6 +475,7 @@ fn ty_is_local_constructor(ty: Ty<'_>, in_crate: InCrate) -> bool {\n \n         ty::Error => true,\n \n+        ty::UnnormalizedProjection(..) |\n         ty::Closure(..) |\n         ty::Generator(..) |\n         ty::GeneratorWitness(..) |"}, {"sha": "3b3e38a8bb7cab761a70f7ca7b2bffb951b85738", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -269,7 +269,8 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 ty::Generator(..) => Some(18),\n                 ty::Foreign(..) => Some(19),\n                 ty::GeneratorWitness(..) => Some(20),\n-                ty::Infer(..) | ty::Error => None\n+                ty::Infer(..) | ty::Error => None,\n+                ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n             }\n         }\n "}, {"sha": "aaf03f8e7fb55b3bb82c5dfaf50896cc2e6d5b13", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -253,5 +253,7 @@ pub fn trivial_dropck_outlives<'tcx>(tcx: TyCtxt<'_, '_, 'tcx>, ty: Ty<'tcx>) ->\n         | ty::Opaque(..)\n         | ty::Infer(_)\n         | ty::Generator(..) => false,\n+\n+        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n     }\n }"}, {"sha": "c9fa960a365613f5d5d5c335dda20b5cf7220dce", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -2283,6 +2283,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => None,\n             ty::Infer(ty::TyVar(_)) => Ambiguous,\n \n+            ty::UnnormalizedProjection(..) |\n             ty::Infer(ty::CanonicalTy(_)) |\n             ty::Infer(ty::FreshTy(_)) |\n             ty::Infer(ty::FreshIntTy(_)) |\n@@ -2355,6 +2356,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Ambiguous\n             }\n \n+            ty::UnnormalizedProjection(..) |\n             ty::Infer(ty::CanonicalTy(_)) |\n             ty::Infer(ty::FreshTy(_)) |\n             ty::Infer(ty::FreshIntTy(_)) |\n@@ -2393,6 +2395,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Vec::new()\n             }\n \n+            ty::UnnormalizedProjection(..) |\n             ty::Dynamic(..) |\n             ty::Param(..) |\n             ty::Foreign(..) |"}, {"sha": "05b68b34989bf476803aa094e711cb34ee3da24c", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -2234,7 +2234,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n             self,\n             Adt, Array, Slice, RawPtr, Ref, FnDef, FnPtr,\n             Generator, GeneratorWitness, Dynamic, Closure, Tuple,\n-            Param, Infer, Projection, Opaque, Foreign);\n+            Param, Infer, UnnormalizedProjection, Projection, Opaque, Foreign);\n \n         println!(\"Substs interner: #{}\", self.interners.substs.borrow().len());\n         println!(\"Region interner: #{}\", self.interners.region.borrow().len());"}, {"sha": "b3a1b312ca1d38a40a9a04ab4674f4aa22a2301e", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -222,6 +222,7 @@ impl<'a, 'gcx, 'lcx, 'tcx> ty::TyS<'tcx> {\n             ty::Infer(ty::FreshIntTy(_)) => \"skolemized integral type\".to_string(),\n             ty::Infer(ty::FreshFloatTy(_)) => \"skolemized floating-point type\".to_string(),\n             ty::Projection(_) => \"associated type\".to_string(),\n+            ty::UnnormalizedProjection(_) => \"non-normalized associated type\".to_string(),\n             ty::Param(ref p) => {\n                 if p.is_self() {\n                     \"Self\".to_string()"}, {"sha": "0f68e7aba4defd062d37b05e57d5ee1181eda1a8", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -103,6 +103,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::FnPtr(ref f) => {\n             Some(FunctionSimplifiedType(f.skip_binder().inputs().len()))\n         }\n+        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n         ty::Projection(_) | ty::Param(_) => {\n             if can_simplify_params {\n                 // In normalized types, projections don't unify with"}, {"sha": "3ccc24e73a5c927343bc6718bad8797e42c1f945", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -150,6 +150,8 @@ impl FlagComputation {\n                 self.add_projection_ty(data);\n             }\n \n+            &ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n             &ty::Opaque(_, substs) => {\n                 self.add_flags(TypeFlags::HAS_PROJECTION);\n                 self.add_substs(substs);"}, {"sha": "46d133224f819e9a6f54d79b0471a6832d667ad7", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -463,6 +463,7 @@ pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n         ty::Str |\n         ty::FnPtr(_) |\n         ty::Projection(_) |\n+        ty::UnnormalizedProjection(..) |\n         ty::Param(_) |\n         ty::Opaque(..) |\n         ty::Infer(_) |"}, {"sha": "7df8af5fa2e7d894ff796f2858403576d94653d2", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -1123,7 +1123,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n                 }\n                 tcx.layout_raw(param_env.and(normalized))?\n             }\n-            ty::GeneratorWitness(..) | ty::Infer(_) => {\n+            ty::UnnormalizedProjection(..) | ty::GeneratorWitness(..) | ty::Infer(_) => {\n                 bug!(\"LayoutDetails::compute: unexpected type `{}`\", ty)\n             }\n             ty::Param(_) | ty::Error => {\n@@ -1702,8 +1702,8 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                 }\n             }\n \n-            ty::Projection(_) | ty::Opaque(..) | ty::Param(_) |\n-            ty::Infer(_) | ty::Error => {\n+            ty::Projection(_) | ty::UnnormalizedProjection(..) |\n+            ty::Opaque(..) | ty::Param(_) | ty::Infer(_) | ty::Error => {\n                 bug!(\"TyLayout::field_type: unexpected type `{}`\", this.ty)\n             }\n         })"}, {"sha": "72232084bf7ea3d4e23b4b98c9452cf4e48909db", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -2340,6 +2340,8 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 vec![ty]\n             }\n \n+            UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n             Param(..) => {\n                 // perf hack: if there is a `T: Sized` bound, then\n                 // we know that `T` is Sized and do not need to check"}, {"sha": "91eda66e08c6e335087ed7cb6ccf974d0c96b50f", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -124,6 +124,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n+            ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n             // We assume that inference variables are fully resolved.\n             // So, if we encounter an inference variable, just record\n             // the unresolved variable as a component."}, {"sha": "c3c4cbed89d889f46a4ed670c05f474f9147723e", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -876,6 +876,9 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::GeneratorWitness(types) => ty::GeneratorWitness(types.fold_with(folder)),\n             ty::Closure(did, substs) => ty::Closure(did, substs.fold_with(folder)),\n             ty::Projection(ref data) => ty::Projection(data.fold_with(folder)),\n+            ty::UnnormalizedProjection(ref data) => {\n+                ty::UnnormalizedProjection(data.fold_with(folder))\n+            }\n             ty::Opaque(did, substs) => ty::Opaque(did, substs.fold_with(folder)),\n             ty::Bool | ty::Char | ty::Str | ty::Int(_) |\n             ty::Uint(_) | ty::Float(_) | ty::Error | ty::Infer(_) |\n@@ -910,7 +913,9 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             }\n             ty::GeneratorWitness(ref types) => types.visit_with(visitor),\n             ty::Closure(_did, ref substs) => substs.visit_with(visitor),\n-            ty::Projection(ref data) => data.visit_with(visitor),\n+            ty::Projection(ref data) | ty::UnnormalizedProjection(ref data) => {\n+                data.visit_with(visitor)\n+            }\n             ty::Opaque(_, ref substs) => substs.visit_with(visitor),\n             ty::Bool | ty::Char | ty::Str | ty::Int(_) |\n             ty::Uint(_) | ty::Float(_) | ty::Error | ty::Infer(_) |"}, {"sha": "06d559fd9dbea1d0c2b0cf56b24ca5133767ad39", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -157,6 +157,11 @@ pub enum TyKind<'tcx> {\n     /// `<T as Trait<..>>::N`.\n     Projection(ProjectionTy<'tcx>),\n \n+    /// A placeholder type used when we do not have enough information\n+    /// to normalize the projection of an associated type to an\n+    /// existing concrete type. Currently only used with chalk-engine.\n+    UnnormalizedProjection(ProjectionTy<'tcx>),\n+\n     /// Opaque (`impl Trait`) type found in a return type.\n     /// The `DefId` comes either from\n     /// * the `impl Trait` ast::Ty node,\n@@ -1806,7 +1811,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             Generator(_, GeneratorSubsts { ref substs }, _) => {\n                 substs.regions().collect()\n             }\n-            Projection(ref data) => {\n+            Projection(ref data) | UnnormalizedProjection(ref data) => {\n                 data.substs.regions().collect()\n             }\n             FnDef(..) |\n@@ -1886,6 +1891,8 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n             ty::Projection(_) | ty::Param(_) | ty::Opaque(..) => false,\n \n+            ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n             ty::Infer(ty::TyVar(_)) => false,\n \n             ty::Infer(ty::CanonicalTy(_)) |"}, {"sha": "4d7bab3cf433b23fc611b2e3e8cab5ed210740c6", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -958,6 +958,8 @@ fn needs_drop_raw<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         ty::Dynamic(..) | ty::Projection(..) | ty::Param(_) |\n         ty::Opaque(..) | ty::Infer(_) | ty::Error => true,\n \n+        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n         // Structural recursion.\n         ty::Array(ty, _) | ty::Slice(ty) => needs_drop(ty),\n "}, {"sha": "d20c4f716429b89c9853d76cece5b3159bd3de38", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -97,7 +97,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::Ref(_, ty, _) => {\n             stack.push(ty);\n         }\n-        ty::Projection(ref data) => {\n+        ty::Projection(ref data) | ty::UnnormalizedProjection(ref data) => {\n             stack.extend(data.substs.types().rev());\n         }\n         ty::Dynamic(ref obj, ..) => {"}, {"sha": "397c63a149a4c5648f8220fb2e8e50e782cf9144", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -289,6 +289,8 @@ impl<'a, 'gcx, 'tcx> WfPredicates<'a, 'gcx, 'tcx> {\n                     self.compute_projection(data);\n                 }\n \n+                ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n                 ty::Adt(def, substs) => {\n                     // WfNominalType\n                     let obligations = self.nominal_obligations(def.did, substs);"}, {"sha": "814f8880bbf2f6a7f758054d536c5e98a70f7d63", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -18,7 +18,7 @@ use ty::{Bool, Char, Adt};\n use ty::{Error, Str, Array, Slice, Float, FnDef, FnPtr};\n use ty::{Param, RawPtr, Ref, Never, Tuple};\n use ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Opaque};\n-use ty::{Dynamic, Int, Uint, Infer};\n+use ty::{UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n use ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n use util::nodemap::FxHashSet;\n \n@@ -1143,6 +1143,11 @@ define_print! {\n                 }\n                 Foreign(def_id) => parameterized(f, subst::Substs::empty(), def_id, &[]),\n                 Projection(ref data) => data.print(f, cx),\n+                UnnormalizedProjection(ref data) => {\n+                    write!(f, \"Unnormalized(\")?;\n+                    data.print(f, cx)?;\n+                    write!(f, \")\")\n+                }\n                 Opaque(def_id, substs) => {\n                     if cx.is_verbose {\n                         return write!(f, \"Opaque({:?}, {:?})\", def_id, substs);"}, {"sha": "2f110fd552a8da8515449b7d46ac9a9a2c3cb094", "filename": "src/librustc_codegen_llvm/debuginfo/type_names.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Ftype_names.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -173,6 +173,7 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         }\n         ty::Error |\n         ty::Infer(_) |\n+        ty::UnnormalizedProjection(..) |\n         ty::Projection(..) |\n         ty::Opaque(..) |\n         ty::GeneratorWitness(..) |"}, {"sha": "a441f7a87f763c4bba857b80abbdf93153d51958", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -722,6 +722,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::Closure(..) |\n             ty::Generator(..) |\n             ty::GeneratorWitness(..) |\n+            ty::UnnormalizedProjection(..) |\n             ty::Projection(..) |\n             ty::Opaque(..) |\n             ty::FnDef(..) => bug!(\"Unexpected type in foreign function\"),"}, {"sha": "ae178888b6a1cda42a65a67f3ccddb11cbce2a4a", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 11, "deletions": 26, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -65,9 +65,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             ty::Adt(def, _) => {\n                 if def.variants.is_empty() {\n                     return;\n-                } else {\n-                    check_must_use(cx, def.did, s.span, \"\")\n                 }\n+                check_must_use(cx, def.did, s.span, \"\")\n             },\n             _ => false,\n         };\n@@ -337,21 +336,13 @@ impl EarlyLintPass for UnusedParens {\n             AssignOp(.., ref value) => (value, \"assigned value\", false),\n             // either function/method call, or something this lint doesn't care about\n             ref call_or_other => {\n-                let args_to_check;\n-                let call_kind;\n-                match *call_or_other {\n-                    Call(_, ref args) => {\n-                        call_kind = \"function\";\n-                        args_to_check = &args[..];\n-                    },\n-                    MethodCall(_, ref args) => {\n-                        call_kind = \"method\";\n-                        // first \"argument\" is self (which sometimes needs parens)\n-                        args_to_check = &args[1..];\n-                    }\n+                let (args_to_check, call_kind) = match *call_or_other {\n+                    Call(_, ref args) => (&args[..], \"function\"),\n+                    // first \"argument\" is self (which sometimes needs parens)\n+                    MethodCall(_, ref args) => (&args[1..], \"method\"),\n                     // actual catch-all arm\n                     _ => { return; }\n-                }\n+                };\n                 // Don't lint if this is a nested macro expansion: otherwise, the lint could\n                 // trigger in situations that macro authors shouldn't have to care about, e.g.,\n                 // when a parenthesized token tree matched in one macro expansion is matched as\n@@ -372,16 +363,11 @@ impl EarlyLintPass for UnusedParens {\n     }\n \n     fn check_stmt(&mut self, cx: &EarlyContext, s: &ast::Stmt) {\n-        let (value, msg) = match s.node {\n-            ast::StmtKind::Local(ref local) => {\n-                match local.init {\n-                    Some(ref value) => (value, \"assigned value\"),\n-                    None => return,\n-                }\n+        if let ast::StmtKind::Local(ref local) = s.node {\n+            if let Some(ref value) = local.init {\n+                self.check_unused_parens_core(cx, &value, \"assigned value\", false);\n             }\n-            _ => return,\n-        };\n-        self.check_unused_parens_core(cx, &value, msg, false);\n+        }\n     }\n }\n \n@@ -414,9 +400,8 @@ impl UnusedImportBraces {\n                     let orig_ident = items[0].0.prefix.segments.last().unwrap().ident;\n                     if orig_ident.name == keywords::SelfValue.name() {\n                         return;\n-                    } else {\n-                        node_ident = rename.unwrap_or(orig_ident);\n                     }\n+                    node_ident = rename.unwrap_or(orig_ident);\n                 }\n                 ast::UseTreeKind::Glob => {\n                     node_ident = ast::Ident::from_str(\"*\");"}, {"sha": "222d1164667d360177ac0a612d4fb8eaeea85a33", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -971,7 +971,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n \n /// Undefined bytes\n impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n-    // FIXME(solson): This is a very naive, slow version.\n+    // FIXME: Add a fast version for the common, nonoverlapping case\n     fn copy_undef_mask(\n         &mut self,\n         src: Pointer,"}, {"sha": "f0ea93bfffd3e7cbaebbdd72cebd2e8d78cacc80", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -382,6 +382,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n             }\n             ty::Error |\n             ty::Infer(_) |\n+            ty::UnnormalizedProjection(..) |\n             ty::Projection(..) |\n             ty::Param(_) |\n             ty::GeneratorWitness(_) |"}, {"sha": "2996fe03200428cb8ead7057131aa1f186bbf367", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -272,6 +272,8 @@ fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n             overflows: vec![],\n         }),\n \n+        ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n+\n         ty::Infer(..) | ty::Error => {\n             // By the time this code runs, all type variables ought to\n             // be fully resolved."}, {"sha": "285fed9544ddbe10c1645a6a1eaf11635d57d953", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -124,6 +124,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ty::Foreign(..) => Some(PointerKind::Thin),\n             // We should really try to normalize here.\n             ty::Projection(ref pi) => Some(PointerKind::OfProjection(pi)),\n+            ty::UnnormalizedProjection(..) => bug!(\"only used with chalk-engine\"),\n             ty::Opaque(def_id, substs) => Some(PointerKind::OfOpaque(def_id, substs)),\n             ty::Param(ref p) => Some(PointerKind::OfParam(p)),\n             // Insufficient type information."}, {"sha": "f96c85ae7ae3fc497036a0e1a19cb0ecfa097384", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -1637,9 +1637,39 @@ fn explicit_predicates_of<'a, 'tcx>(\n     def_id: DefId,\n ) -> ty::GenericPredicates<'tcx> {\n     use rustc::hir::*;\n+    use rustc_data_structures::fx::FxHashSet;\n \n     debug!(\"explicit_predicates_of(def_id={:?})\", def_id);\n \n+    /// A data structure with unique elements, which preserves order of insertion.\n+    /// Preserving the order of insertion is important here so as not to break\n+    /// compile-fail UI tests.\n+    struct UniquePredicates<'tcx> {\n+        predicates: Vec<(ty::Predicate<'tcx>, Span)>,\n+        uniques: FxHashSet<(ty::Predicate<'tcx>, Span)>,\n+    }\n+\n+    impl<'tcx> UniquePredicates<'tcx> {\n+        fn new() -> Self {\n+            UniquePredicates {\n+                predicates: vec![],\n+                uniques: FxHashSet::default(),\n+            }\n+        }\n+\n+        fn push(&mut self, value: (ty::Predicate<'tcx>, Span)) {\n+            if self.uniques.insert(value) {\n+                self.predicates.push(value);\n+            }\n+        }\n+\n+        fn extend<I: IntoIterator<Item = (ty::Predicate<'tcx>, Span)>>(&mut self, iter: I) {\n+            for value in iter {\n+                self.push(value);\n+            }\n+        }\n+    }\n+\n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n     let node = tcx.hir.get(node_id);\n \n@@ -1649,7 +1679,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n     let icx = ItemCtxt::new(tcx, def_id);\n     let no_generics = hir::Generics::empty();\n \n-    let mut predicates = vec![];\n+    let mut predicates = UniquePredicates::new();\n \n     let ast_generics = match node {\n         Node::TraitItem(item) => &item.generics,\n@@ -1744,7 +1774,7 @@ fn explicit_predicates_of<'a, 'tcx>(\n     // on a trait we need to add in the supertrait bounds and bounds found on\n     // associated types.\n     if let Some((_trait_ref, _)) = is_trait {\n-        predicates = tcx.super_predicates_of(def_id).predicates;\n+        predicates.extend(tcx.super_predicates_of(def_id).predicates);\n     }\n \n     // In default impls, we can assume that the self type implements\n@@ -1895,6 +1925,8 @@ fn explicit_predicates_of<'a, 'tcx>(\n         }))\n     }\n \n+    let mut predicates = predicates.predicates;\n+\n     // Subtle: before we store the predicates into the tcx, we\n     // sort them so that predicates like `T: Foo<Item=U>` come\n     // before uses of `U`.  This avoids false ambiguity errors"}, {"sha": "1125de55a0668834da79d60ab9a9b8ec63f191fb", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -336,6 +336,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 // types, where we use Error as the Self type\n             }\n \n+            ty::UnnormalizedProjection(..) |\n             ty::GeneratorWitness(..) |\n             ty::Infer(..) => {\n                 bug!(\"unexpected type encountered in \\"}, {"sha": "9b305ad03b056bfeb9fe83a77eeda6cb1ff11969", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -2737,6 +2737,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n             ty::Closure(..) | ty::Generator(..) => Tuple(vec![]), // FIXME(pcwalton)\n \n+            ty::UnnormalizedProjection(..) => panic!(\"UnnormalizedProjection\"),\n             ty::GeneratorWitness(..) => panic!(\"GeneratorWitness\"),\n             ty::Infer(..) => panic!(\"Infer\"),\n             ty::Error => panic!(\"Error\"),"}, {"sha": "7a5353bb60ff634c68c58cb65811abcaea1beda4", "filename": "src/libstd/error.rs", "status": "modified", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -217,20 +217,97 @@ pub trait Error: Debug + Display {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n+    /// Converts a type of [`Error`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    /// use std::mem;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct AnError;\n+    ///\n+    /// impl fmt::Display for AnError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f , \"An error\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for AnError {\n+    ///     fn description(&self) -> &str {\n+    ///         \"Description of an error\"\n+    ///     }\n+    /// }\n+    ///\n+    /// let an_error = AnError;\n+    /// assert!(0 == mem::size_of_val(&an_error));\n+    /// let a_boxed_error = Box::<Error>::from(an_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(err: E) -> Box<dyn Error + 'a> {\n         Box::new(err)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync + 'a> {\n+    /// Converts a type of [`Error`] + [`Send`] + [`Sync`] into a box of dyn [`Error`] +\n+    /// [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::fmt;\n+    /// use std::mem;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct AnError;\n+    ///\n+    /// impl fmt::Display for AnError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+    ///         write!(f , \"An error\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for AnError {\n+    ///     fn description(&self) -> &str {\n+    ///         \"Description of an error\"\n+    ///     }\n+    /// }\n+    ///\n+    /// unsafe impl Send for AnError {}\n+    ///\n+    /// unsafe impl Sync for AnError {}\n+    ///\n+    /// let an_error = AnError;\n+    /// assert!(0 == mem::size_of_val(&an_error));\n+    /// let a_boxed_error = Box::<Error + Send + Sync>::from(an_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(err: E) -> Box<dyn Error + Send + Sync + 'a> {\n         Box::new(err)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl From<String> for Box<dyn Error + Send + Sync> {\n+    /// Converts a [`String`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// let a_string_error = \"a string error\".to_string();\n+    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_string_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(err: String) -> Box<dyn Error + Send + Sync> {\n         #[derive(Debug)]\n         struct StringError(String);\n@@ -251,6 +328,18 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n \n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n impl From<String> for Box<dyn Error> {\n+    /// Converts a [`String`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// let a_string_error = \"a string error\".to_string();\n+    /// let a_boxed_error = Box::<Error>::from(a_string_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(str_err: String) -> Box<dyn Error> {\n         let err1: Box<dyn Error + Send + Sync> = From::from(str_err);\n         let err2: Box<dyn Error> = err1;\n@@ -260,27 +349,79 @@ impl From<String> for Box<dyn Error> {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<'a, 'b> From<&'b str> for Box<dyn Error + Send + Sync + 'a> {\n+    /// Converts a [`str`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// let a_str_error = \"a str error\";\n+    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_str_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(err: &'b str) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n     }\n }\n \n #[stable(feature = \"string_box_error\", since = \"1.6.0\")]\n impl<'a> From<&'a str> for Box<dyn Error> {\n+    /// Converts a [`str`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    ///\n+    /// let a_str_error = \"a str error\";\n+    /// let a_boxed_error = Box::<Error>::from(a_str_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(err: &'a str) -> Box<dyn Error> {\n         From::from(String::from(err))\n     }\n }\n \n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n+    /// Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    /// use std::borrow::Cow;\n+    ///\n+    /// let a_cow_str_error = Cow::from(\"a str error\");\n+    /// let a_boxed_error = Box::<Error + Send + Sync>::from(a_cow_str_error);\n+    /// assert!(\n+    ///     mem::size_of::<Box<dyn Error + Send + Sync>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(err: Cow<'b, str>) -> Box<dyn Error + Send + Sync + 'a> {\n         From::from(String::from(err))\n     }\n }\n \n #[stable(feature = \"cow_box_error\", since = \"1.22.0\")]\n impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n+    /// Converts a [`Cow`] into a box of dyn [`Error`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::error::Error;\n+    /// use std::mem;\n+    /// use std::borrow::Cow;\n+    ///\n+    /// let a_cow_str_error = Cow::from(\"a str error\");\n+    /// let a_boxed_error = Box::<Error>::from(a_cow_str_error);\n+    /// assert!(mem::size_of::<Box<dyn Error>>() == mem::size_of_val(&a_boxed_error))\n+    /// ```\n     fn from(err: Cow<'a, str>) -> Box<dyn Error> {\n         From::from(String::from(err))\n     }"}, {"sha": "83a05921510b4d2dcc37a0d9b1aabedf46a8156f", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -2228,6 +2228,9 @@ impl<'a> State<'a> {\n                 self.word_nbsp(\"async\")?;\n                 self.print_capture_clause(capture_clause)?;\n                 self.s.space()?;\n+                // cbox/ibox in analogy to the `ExprKind::Block` arm above\n+                self.cbox(INDENT_UNIT)?;\n+                self.ibox(0)?;\n                 self.print_block_with_attrs(blk, attrs)?;\n             }\n             ast::ExprKind::Assign(ref lhs, ref rhs) => {"}, {"sha": "6930ee1a386fe2d311d1f0d4578f02b4b70b795f", "filename": "src/test/pretty/issue-54752-async-block.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Ftest%2Fpretty%2Fissue-54752-async-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Ftest%2Fpretty%2Fissue-54752-async-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-54752-async-block.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -0,0 +1,7 @@\n+#![feature(async_await)]\n+#![allow(unused_parens)]\n+\n+// edition:2018\n+// pp-exact\n+\n+fn main() { let _a = (async  { }); }"}, {"sha": "4a3e14ac034721e712f53e07ad4fde770f20056f", "filename": "src/test/ui/chalkify/lower_env1.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env1.stderr?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -5,9 +5,8 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n-   = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n-   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo), WellFormed(Self: Foo).\n+   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo).\n \n error: program clause dump\n   --> $DIR/lower_env1.rs:19:1\n@@ -16,11 +15,10 @@ LL | #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n-   = note: FromEnv(Self: Foo) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Bar) :- FromEnv(Self: Bar).\n    = note: Implemented(Self: Foo) :- FromEnv(Self: Foo).\n    = note: Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized).\n-   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo), WellFormed(Self: Foo).\n+   = note: WellFormed(Self: Bar) :- Implemented(Self: Bar), WellFormed(Self: Foo).\n    = note: WellFormed(Self: Foo) :- Implemented(Self: Foo).\n    = note: WellFormed(Self: std::marker::Sized) :- Implemented(Self: std::marker::Sized).\n "}, {"sha": "6f051b40e8b65eaf2959e41f0ada2fc7625860b4", "filename": "src/test/ui/if/ifmt-bad-arg.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.rs?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -71,4 +71,18 @@ fn main() {\n \n     \"##);\n     //~^^^ ERROR: there is no argument named `foo`\n+\n+    // bad syntax in format string with multiple newlines, #53836\n+    format!(\"first number: {}\n+second number: {}\n+third number: {}\n+fourth number: {}\n+fifth number: {}\n+sixth number: {}\n+seventh number: {}\n+eighth number: {}\n+ninth number: {\n+tenth number: {}\",\n+        1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n+    //~^^ ERROR: invalid format string\n }"}, {"sha": "7e71707c22b16705c74bdd174d1e0f12fed88a9c", "filename": "src/test/ui/if/ifmt-bad-arg.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5472b0718f286266ab89acdf234c3552de7e973c/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5472b0718f286266ab89acdf234c3552de7e973c/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fifmt-bad-arg.stderr?ref=5472b0718f286266ab89acdf234c3552de7e973c", "patch": "@@ -204,5 +204,11 @@ error: there is no argument named `foo`\n LL |         {foo}\n    |         ^^^^^\n \n-error: aborting due to 27 previous errors\n+error: invalid format string: expected `'}'`, found `'t'`\n+  --> $DIR/ifmt-bad-arg.rs:85:1\n+   |\n+LL | tenth number: {}\",\n+   | ^ expected `}` in format string\n+\n+error: aborting due to 28 previous errors\n "}]}