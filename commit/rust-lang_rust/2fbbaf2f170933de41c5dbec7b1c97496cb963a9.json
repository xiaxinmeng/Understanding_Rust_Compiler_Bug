{"sha": "2fbbaf2f170933de41c5dbec7b1c97496cb963a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYmJhZjJmMTcwOTMzZGU0MWM1ZGJlYzdiMWM5NzQ5NmNiOTYzYTk=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-23T02:56:49Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-05-11T01:14:58Z"}, "message": "rustc: Use set recovery APIs in the TyCtxt interners.", "tree": {"sha": "60ef218308aa19970c8c30faacfce2de9a7626d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60ef218308aa19970c8c30faacfce2de9a7626d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fbbaf2f170933de41c5dbec7b1c97496cb963a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbbaf2f170933de41c5dbec7b1c97496cb963a9", "html_url": "https://github.com/rust-lang/rust/commit/2fbbaf2f170933de41c5dbec7b1c97496cb963a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fbbaf2f170933de41c5dbec7b1c97496cb963a9/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "513d392f7e66b416e5ba6f4f778ae2cfadb10832", "url": "https://api.github.com/repos/rust-lang/rust/commits/513d392f7e66b416e5ba6f4f778ae2cfadb10832", "html_url": "https://github.com/rust-lang/rust/commit/513d392f7e66b416e5ba6f4f778ae2cfadb10832"}], "stats": {"total": 85, "additions": 49, "deletions": 36}, "files": [{"sha": "f1929f60579fef07e1619f53b5e9c04e1be860b2", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 49, "deletions": 36, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/2fbbaf2f170933de41c5dbec7b1c97496cb963a9/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbbaf2f170933de41c5dbec7b1c97496cb963a9/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=2fbbaf2f170933de41c5dbec7b1c97496cb963a9", "patch": "@@ -35,7 +35,7 @@ use ty::layout::{Layout, TargetDataLayout};\n use ty::maps;\n use util::common::MemoizationMap;\n use util::nodemap::{NodeMap, NodeSet, DefIdMap, DefIdSet};\n-use util::nodemap::FnvHashMap;\n+use util::nodemap::{FnvHashMap, FnvHashSet};\n \n use arena::TypedArena;\n use std::borrow::Borrow;\n@@ -191,7 +191,7 @@ impl<'a, 'tcx> Tables<'tcx> {\n \n impl<'tcx> CommonTypes<'tcx> {\n     fn new(arena: &'tcx TypedArena<TyS<'tcx>>,\n-           interner: &RefCell<FnvHashMap<InternedTy<'tcx>, Ty<'tcx>>>)\n+           interner: &RefCell<FnvHashSet<InternedTy<'tcx>>>)\n            -> CommonTypes<'tcx>\n     {\n         let mk = |sty| TyCtxt::intern_ty(arena, interner, sty);\n@@ -220,7 +220,8 @@ impl<'tcx> CommonTypes<'tcx> {\n /// later on.\n #[derive(Copy, Clone)]\n pub struct TyCtxt<'a, 'tcx: 'a> {\n-    gcx: &'a GlobalCtxt<'tcx>\n+    gcx: &'a GlobalCtxt<'tcx>,\n+\n }\n \n impl<'a, 'tcx> Deref for TyCtxt<'a, 'tcx> {\n@@ -236,16 +237,12 @@ pub struct GlobalCtxt<'tcx> {\n \n     /// Specifically use a speedy hash algorithm for this hash map, it's used\n     /// quite often.\n-    // FIXME(eddyb) use a FnvHashSet<InternedTy<'tcx>> when equivalent keys can\n-    // queried from a HashSet.\n-    interner: RefCell<FnvHashMap<InternedTy<'tcx>, Ty<'tcx>>>,\n-\n-    // FIXME as above, use a hashset if equivalent elements can be queried.\n-    substs_interner: RefCell<FnvHashMap<&'tcx Substs<'tcx>, &'tcx Substs<'tcx>>>,\n-    bare_fn_interner: RefCell<FnvHashMap<&'tcx BareFnTy<'tcx>, &'tcx BareFnTy<'tcx>>>,\n-    region_interner: RefCell<FnvHashMap<&'tcx Region, &'tcx Region>>,\n-    stability_interner: RefCell<FnvHashMap<&'tcx attr::Stability, &'tcx attr::Stability>>,\n-    layout_interner: RefCell<FnvHashMap<&'tcx Layout, &'tcx Layout>>,\n+    interner: RefCell<FnvHashSet<InternedTy<'tcx>>>,\n+    substs_interner: RefCell<FnvHashSet<InternedSubsts<'tcx>>>,\n+    bare_fn_interner: RefCell<FnvHashSet<&'tcx BareFnTy<'tcx>>>,\n+    region_interner: RefCell<FnvHashSet<&'tcx Region>>,\n+    stability_interner: RefCell<FnvHashSet<&'tcx attr::Stability>>,\n+    layout_interner: RefCell<FnvHashSet<&'tcx Layout>>,\n \n     pub dep_graph: DepGraph,\n \n@@ -518,7 +515,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx> {\n         let interned = self.arenas.stability.alloc(stab);\n         if let Some(prev) = self.stability_interner\n                                 .borrow_mut()\n-                                .insert(interned, interned) {\n+                                .replace(interned) {\n             bug!(\"Tried to overwrite interned Stability: {:?}\", prev)\n         }\n         interned\n@@ -532,7 +529,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx> {\n         let interned = self.arenas.layout.alloc(layout);\n         if let Some(prev) = self.layout_interner\n                                 .borrow_mut()\n-                                .insert(interned, interned) {\n+                                .replace(interned) {\n             bug!(\"Tried to overwrite interned Layout: {:?}\", prev)\n         }\n         interned\n@@ -571,18 +568,18 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx> {\n                                   where F: for<'b> FnOnce(TyCtxt<'b, 'tcx>) -> R\n     {\n         let data_layout = TargetDataLayout::parse(s);\n-        let interner = RefCell::new(FnvHashMap());\n+        let interner = RefCell::new(FnvHashSet());\n         let common_types = CommonTypes::new(&arenas.type_, &interner);\n         let dep_graph = map.dep_graph.clone();\n         let fulfilled_predicates = traits::GlobalFulfilledPredicates::new(dep_graph.clone());\n         tls::enter(GlobalCtxt {\n             arenas: arenas,\n             interner: interner,\n-            substs_interner: RefCell::new(FnvHashMap()),\n-            bare_fn_interner: RefCell::new(FnvHashMap()),\n-            region_interner: RefCell::new(FnvHashMap()),\n-            stability_interner: RefCell::new(FnvHashMap()),\n-            layout_interner: RefCell::new(FnvHashMap()),\n+            substs_interner: RefCell::new(FnvHashSet()),\n+            bare_fn_interner: RefCell::new(FnvHashSet()),\n+            region_interner: RefCell::new(FnvHashSet()),\n+            stability_interner: RefCell::new(FnvHashSet()),\n+            layout_interner: RefCell::new(FnvHashSet()),\n             dep_graph: dep_graph.clone(),\n             types: common_types,\n             named_region_map: named_region_map,\n@@ -656,7 +653,7 @@ pub trait Lift<'tcx> {\n impl<'a, 'tcx> Lift<'tcx> for Ty<'a> {\n     type Lifted = Ty<'tcx>;\n     fn lift_to_tcx<'b>(&self, tcx: TyCtxt<'b, 'tcx>) -> Option<Ty<'tcx>> {\n-        if let Some(&ty) = tcx.interner.borrow().get(&self.sty) {\n+        if let Some(&InternedTy { ty }) = tcx.interner.borrow().get(&self.sty) {\n             if *self as *const _ == ty as *const _ {\n                 return Some(ty);\n             }\n@@ -668,7 +665,7 @@ impl<'a, 'tcx> Lift<'tcx> for Ty<'a> {\n impl<'a, 'tcx> Lift<'tcx> for &'a Substs<'a> {\n     type Lifted = &'tcx Substs<'tcx>;\n     fn lift_to_tcx<'b>(&self, tcx: TyCtxt<'b, 'tcx>) -> Option<&'tcx Substs<'tcx>> {\n-        if let Some(&substs) = tcx.substs_interner.borrow().get(*self) {\n+        if let Some(&InternedSubsts { substs }) = tcx.substs_interner.borrow().get(*self) {\n             if *self as *const _ == substs as *const _ {\n                 return Some(substs);\n             }\n@@ -745,6 +742,8 @@ macro_rules! sty_debug_print {\n         #[allow(non_snake_case)]\n         mod inner {\n             use ty::{self, TyCtxt};\n+            use ty::context::InternedTy;\n+\n             #[derive(Copy, Clone)]\n             struct DebugStat {\n                 total: usize,\n@@ -761,7 +760,7 @@ macro_rules! sty_debug_print {\n                 $(let mut $variant = total;)*\n \n \n-                for (_, t) in tcx.interner.borrow().iter() {\n+                for &InternedTy { ty: t } in tcx.interner.borrow().iter() {\n                     let variant = match t.sty {\n                         ty::TyBool | ty::TyChar | ty::TyInt(..) | ty::TyUint(..) |\n                             ty::TyFloat(..) | ty::TyStr => continue,\n@@ -817,7 +816,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx> {\n \n \n /// An entry in the type interner.\n-pub struct InternedTy<'tcx> {\n+struct InternedTy<'tcx> {\n     ty: Ty<'tcx>\n }\n \n@@ -836,12 +835,24 @@ impl<'tcx> Hash for InternedTy<'tcx> {\n     }\n }\n \n-impl<'tcx> Borrow<TypeVariants<'tcx>> for InternedTy<'tcx> {\n-    fn borrow<'a>(&'a self) -> &'a TypeVariants<'tcx> {\n+impl<'tcx: 'lcx, 'lcx> Borrow<TypeVariants<'lcx>> for InternedTy<'tcx> {\n+    fn borrow<'a>(&'a self) -> &'a TypeVariants<'lcx> {\n         &self.ty.sty\n     }\n }\n \n+/// An entry in the substs interner.\n+#[derive(PartialEq, Eq, Hash)]\n+struct InternedSubsts<'tcx> {\n+    substs: &'tcx Substs<'tcx>\n+}\n+\n+impl<'tcx: 'lcx, 'lcx> Borrow<Substs<'lcx>> for InternedSubsts<'tcx> {\n+    fn borrow<'a>(&'a self) -> &'a Substs<'lcx> {\n+        self.substs\n+    }\n+}\n+\n fn bound_list_is_sorted(bounds: &[ty::PolyProjectionPredicate]) -> bool {\n     bounds.is_empty() ||\n         bounds[1..].iter().enumerate().all(\n@@ -851,12 +862,14 @@ fn bound_list_is_sorted(bounds: &[ty::PolyProjectionPredicate]) -> bool {\n impl<'a, 'tcx> TyCtxt<'a, 'tcx> {\n     // Type constructors\n     pub fn mk_substs(self, substs: Substs<'tcx>) -> &'tcx Substs<'tcx> {\n-        if let Some(substs) = self.substs_interner.borrow().get(&substs) {\n-            return *substs;\n+        if let Some(interned) = self.substs_interner.borrow().get(&substs) {\n+            return interned.substs;\n         }\n \n         let substs = self.arenas.substs.alloc(substs);\n-        self.substs_interner.borrow_mut().insert(substs, substs);\n+        self.substs_interner.borrow_mut().insert(InternedSubsts {\n+            substs: substs\n+        });\n         substs\n     }\n \n@@ -876,7 +889,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx> {\n         }\n \n         let bare_fn = self.arenas.bare_fn.alloc(bare_fn);\n-        self.bare_fn_interner.borrow_mut().insert(bare_fn, bare_fn);\n+        self.bare_fn_interner.borrow_mut().insert(bare_fn);\n         bare_fn\n     }\n \n@@ -886,19 +899,19 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx> {\n         }\n \n         let region = self.arenas.region.alloc(region);\n-        self.region_interner.borrow_mut().insert(region, region);\n+        self.region_interner.borrow_mut().insert(region);\n         region\n     }\n \n     fn intern_ty(type_arena: &'tcx TypedArena<TyS<'tcx>>,\n-                 interner: &RefCell<FnvHashMap<InternedTy<'tcx>, Ty<'tcx>>>,\n+                 interner: &RefCell<FnvHashSet<InternedTy<'tcx>>>,\n                  st: TypeVariants<'tcx>)\n                  -> Ty<'tcx> {\n         let ty: Ty /* don't be &mut TyS */ = {\n             let mut interner = interner.borrow_mut();\n             match interner.get(&st) {\n-                Some(ty) => return *ty,\n-                _ => ()\n+                Some(&InternedTy { ty }) => return ty,\n+                None => ()\n             }\n \n             let flags = super::flags::FlagComputation::for_sty(&st);\n@@ -909,7 +922,7 @@ impl<'a, 'tcx> TyCtxt<'a, 'tcx> {\n                                              region_depth: flags.depth, }),\n             };\n \n-            interner.insert(InternedTy { ty: ty }, ty);\n+            interner.insert(InternedTy { ty: ty });\n             ty\n         };\n "}]}