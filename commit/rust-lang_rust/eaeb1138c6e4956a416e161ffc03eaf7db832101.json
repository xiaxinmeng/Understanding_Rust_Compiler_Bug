{"sha": "eaeb1138c6e4956a416e161ffc03eaf7db832101", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZWIxMTM4YzZlNDk1NmE0MTZlMTYxZmZjMDNlYWY3ZGI4MzIxMDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-22T01:40:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-22T01:40:04Z"}, "message": "Rollup merge of #67480 - rossmacarthur:fix-41260-avoid-issue-0-part-2, r=Centril\n\nRequire issue = \"none\" over issue = \"0\" in unstable attributes\n\nThese changes make the use of `issue = \"none\"` required in unstable attributes throughout the compiler.\n\nNotes:\n- #66299 is now in beta so `issue = \"none\"` is accepted.\n- The `tidy` tool now fails on `issue = \"0\"`.\n- Tests that used `issue = \"0\"` were changed to use `issue = \"none\"`, except for _one_ that asserts `issue = \"0\"` can still be used.\n- The compiler still allows `issue = \"0\"` because some submodules require it, this could be disallowed once these are updated.\n\nResolves #41260\n\nr? @varkor", "tree": {"sha": "38ba6a99e4e17147adca35c2543c1adf065a0ead", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38ba6a99e4e17147adca35c2543c1adf065a0ead"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaeb1138c6e4956a416e161ffc03eaf7db832101", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd/sl1CRBK7hj4Ov3rIwAAdHIIAG9dczD1Rwlmi51yrgbWnUeb\nhkWGST1XJdcPpkdlLruUZqmFoO2T5zyObwpJS7All5YqCITt459ZweL/NToPOF5J\nodVeLmNhk92H9MxffM40v8Upsc0j6pe5uLJIL5MKnzxGi8XoD0fN4SXRCp7VRobn\nXdsOIOkJjZzdCU5Um6yuyqTKTwXhyUhqBf84zNCFeAYl61sMvuVEASVDuz7oU7Ua\nNS6ekoXvGd3KYknR4Pb4s9i2nhUbB7xrHn/y7MFyHhs35CodooVOEkCFhFB1AIYp\nTaav5kHNJSv0K1RLMdgQ94dFDkGzPFcx6cD990ttuJh18T03hnDdM9pP/iiMNQw=\n=rXHk\n-----END PGP SIGNATURE-----\n", "payload": "tree 38ba6a99e4e17147adca35c2543c1adf065a0ead\nparent 877dc9daa8eebee7a6e4dc5fc7df6770a086df59\nparent 62714f8b170dadc381fd9883031d42ba2ee8ece9\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1576978804 +0100\ncommitter GitHub <noreply@github.com> 1576978804 +0100\n\nRollup merge of #67480 - rossmacarthur:fix-41260-avoid-issue-0-part-2, r=Centril\n\nRequire issue = \"none\" over issue = \"0\" in unstable attributes\n\nThese changes make the use of `issue = \"none\"` required in unstable attributes throughout the compiler.\n\nNotes:\n- #66299 is now in beta so `issue = \"none\"` is accepted.\n- The `tidy` tool now fails on `issue = \"0\"`.\n- Tests that used `issue = \"0\"` were changed to use `issue = \"none\"`, except for _one_ that asserts `issue = \"0\"` can still be used.\n- The compiler still allows `issue = \"0\"` because some submodules require it, this could be disallowed once these are updated.\n\nResolves #41260\n\nr? @varkor\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaeb1138c6e4956a416e161ffc03eaf7db832101", "html_url": "https://github.com/rust-lang/rust/commit/eaeb1138c6e4956a416e161ffc03eaf7db832101", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaeb1138c6e4956a416e161ffc03eaf7db832101/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "877dc9daa8eebee7a6e4dc5fc7df6770a086df59", "url": "https://api.github.com/repos/rust-lang/rust/commits/877dc9daa8eebee7a6e4dc5fc7df6770a086df59", "html_url": "https://github.com/rust-lang/rust/commit/877dc9daa8eebee7a6e4dc5fc7df6770a086df59"}, {"sha": "62714f8b170dadc381fd9883031d42ba2ee8ece9", "url": "https://api.github.com/repos/rust-lang/rust/commits/62714f8b170dadc381fd9883031d42ba2ee8ece9", "html_url": "https://github.com/rust-lang/rust/commit/62714f8b170dadc381fd9883031d42ba2ee8ece9"}], "stats": {"total": 769, "additions": 384, "deletions": 385}, "files": [{"sha": "3e4005acaf35c6aebf64d4043e0a72b37c297c16", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -476,7 +476,7 @@ impl<T: ?Sized> Box<T> {\n         Box::into_unique(b).into()\n     }\n \n-    #[unstable(feature = \"ptr_internals\", issue = \"0\", reason = \"use into_raw_non_null instead\")]\n+    #[unstable(feature = \"ptr_internals\", issue = \"none\", reason = \"use into_raw_non_null instead\")]\n     #[inline]\n     #[doc(hidden)]\n     pub fn into_unique(b: Box<T>) -> Unique<T> {\n@@ -830,7 +830,7 @@ impl From<Box<str>> for Box<[u8]> {\n     }\n }\n \n-#[unstable(feature = \"boxed_slice_try_from\", issue = \"0\")]\n+#[unstable(feature = \"boxed_slice_try_from\", issue = \"none\")]\n impl<T, const N: usize> TryFrom<Box<[T]>> for Box<[T; N]>\n where\n     [T; N]: LengthAtMost32,\n@@ -946,7 +946,7 @@ impl<T: ?Sized> DerefMut for Box<T> {\n     }\n }\n \n-#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+#[unstable(feature = \"receiver_trait\", issue = \"none\")]\n impl<T: ?Sized> Receiver for Box<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1040,7 +1040,7 @@ impl<A, F: Fn<A> + ?Sized> Fn<A> for Box<F> {\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Box<U>> for Box<T> {}\n \n-#[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Box<U>> for Box<T> {}\n \n #[stable(feature = \"boxed_slice_from_iter\", since = \"1.32.0\")]"}, {"sha": "390a48180c0a64b96f658a4c22a4469be0e0a02c", "filename": "src/liballoc/collections/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Fliballoc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Fliballoc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -57,7 +57,7 @@ pub enum TryReserveError {\n         layout: Layout,\n \n         #[doc(hidden)]\n-        #[unstable(feature = \"container_error_extra\", issue = \"0\", reason = \"\\\n+        #[unstable(feature = \"container_error_extra\", issue = \"none\", reason = \"\\\n             Enable exposing the allocator\u2019s custom error value \\\n             if an associated type is added in the future: \\\n             https://github.com/rust-lang/wg-allocators/issues/23\")]"}, {"sha": "01d4913665c07314bfd0ad8c7569f7bc2489a932", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -514,7 +514,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-#[unstable(feature = \"fmt_internals\", issue = \"0\")]\n+#[unstable(feature = \"fmt_internals\", issue = \"none\")]\n pub use core::fmt::rt;\n #[stable(feature = \"fmt_flags_align\", since = \"1.28.0\")]\n pub use core::fmt::Alignment;"}, {"sha": "b549fa1ef4fc9b5545a3e0a88758d7a065931605", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -171,7 +171,7 @@ mod std {\n }\n \n #[doc(hidden)]\n-#[unstable(feature = \"liballoc_internals\", issue = \"0\", reason = \"implementation detail\")]\n+#[unstable(feature = \"liballoc_internals\", issue = \"none\", reason = \"implementation detail\")]\n pub mod __export {\n     pub use core::format_args;\n }"}, {"sha": "444450f6628ef0280c8fd07c431835adce67e807", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(feature = \"raw_vec_internals\", reason = \"implementation detail\", issue = \"0\")]\n+#![unstable(feature = \"raw_vec_internals\", reason = \"implementation detail\", issue = \"none\")]\n #![doc(hidden)]\n \n use core::cmp;"}, {"sha": "9046403e9079c871b33aa717eefc165f95d25989", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -291,7 +291,7 @@ impl<T: ?Sized> !marker::Sync for Rc<T> {}\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Rc<U>> for Rc<T> {}\n \n-#[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Rc<U>> for Rc<T> {}\n \n impl<T: ?Sized> Rc<T> {\n@@ -1090,7 +1090,7 @@ impl<T: ?Sized> Deref for Rc<T> {\n     }\n }\n \n-#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+#[unstable(feature = \"receiver_trait\", issue = \"none\")]\n impl<T: ?Sized> Receiver for Rc<T> {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1471,7 +1471,7 @@ impl<T> From<Vec<T>> for Rc<[T]> {\n     }\n }\n \n-#[unstable(feature = \"boxed_slice_try_from\", issue = \"0\")]\n+#[unstable(feature = \"boxed_slice_try_from\", issue = \"none\")]\n impl<T, const N: usize> TryFrom<Rc<[T]>> for Rc<[T; N]>\n where\n     [T; N]: LengthAtMost32,\n@@ -1621,7 +1621,7 @@ impl<T: ?Sized> !marker::Sync for Weak<T> {}\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n \n-#[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Weak<U>> for Weak<T> {}\n \n impl<T> Weak<T> {"}, {"sha": "88027d48e8a218411493e549144df9b87a4e31a7", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -206,7 +206,7 @@ unsafe impl<T: ?Sized + Sync + Send> Sync for Arc<T> {}\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n \n-#[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Arc<U>> for Arc<T> {}\n \n impl<T: ?Sized> Arc<T> {\n@@ -263,7 +263,7 @@ unsafe impl<T: ?Sized + Sync + Send> Sync for Weak<T> {}\n \n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n-#[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Weak<U>> for Weak<T> {}\n \n #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n@@ -993,7 +993,7 @@ impl<T: ?Sized> Deref for Arc<T> {\n     }\n }\n \n-#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+#[unstable(feature = \"receiver_trait\", issue = \"none\")]\n impl<T: ?Sized> Receiver for Arc<T> {}\n \n impl<T: Clone> Arc<T> {\n@@ -2032,7 +2032,7 @@ impl<T> From<Vec<T>> for Arc<[T]> {\n     }\n }\n \n-#[unstable(feature = \"boxed_slice_try_from\", issue = \"0\")]\n+#[unstable(feature = \"boxed_slice_try_from\", issue = \"none\")]\n impl<T, const N: usize> TryFrom<Arc<[T]>> for Arc<[T; N]>\n where\n     [T; N]: LengthAtMost32,"}, {"sha": "fd80000b6fb8c4d7051ee5bfe5e635b0800e5e40", "filename": "src/libcore/array/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -74,7 +74,7 @@ impl TryFromSliceError {\n     #[unstable(feature = \"array_error_internals\",\n            reason = \"available through Error trait and this method should not \\\n                      be exposed publicly\",\n-           issue = \"0\")]\n+           issue = \"none\")]\n     #[inline]\n     #[doc(hidden)]\n     pub fn __description(&self) -> &str {\n@@ -388,14 +388,14 @@ where\n #[rustc_on_unimplemented(\n     message=\"arrays only have std trait implementations for lengths 0..=32\",\n )]\n-#[unstable(feature = \"const_generic_impls_guard\", issue = \"0\",\n+#[unstable(feature = \"const_generic_impls_guard\", issue = \"none\",\n     reason = \"will never be stable, just a temporary step until const generics are stable\")]\n pub trait LengthAtMost32 {}\n \n macro_rules! array_impls {\n     ($($N:literal)+) => {\n         $(\n-            #[unstable(feature = \"const_generic_impls_guard\", issue = \"0\")]\n+            #[unstable(feature = \"const_generic_impls_guard\", issue = \"none\")]\n             impl<T> LengthAtMost32 for [T; $N] {}\n         )+\n     }"}, {"sha": "315020bac585059edae97994d83a5f4329ba0d0c", "filename": "src/libcore/char/convert.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fconvert.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -169,7 +169,7 @@ impl ParseCharError {\n     #[unstable(\n         feature = \"char_error_internals\",\n         reason = \"this method should not be available publicly\",\n-        issue = \"0\"\n+        issue = \"none\"\n     )]\n     #[doc(hidden)]\n     pub fn __description(&self) -> &str {"}, {"sha": "9a412e57294277452e900c180e245d4121548913", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -150,7 +150,7 @@ pub macro Clone($item:item) {\n #[unstable(\n     feature = \"derive_clone_copy\",\n     reason = \"deriving hack, should not be public\",\n-    issue = \"0\"\n+    issue = \"none\"\n )]\n pub struct AssertParamIsClone<T: Clone + ?Sized> {\n     _field: crate::marker::PhantomData<T>,\n@@ -160,7 +160,7 @@ pub struct AssertParamIsClone<T: Clone + ?Sized> {\n #[unstable(\n     feature = \"derive_clone_copy\",\n     reason = \"deriving hack, should not be public\",\n-    issue = \"0\"\n+    issue = \"none\"\n )]\n pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n     _field: crate::marker::PhantomData<T>,"}, {"sha": "a0e72fb66b0a1668d147835834a3f38cb6527c38", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -288,7 +288,7 @@ pub macro Eq($item:item) { /* compiler built-in */ }\n #[allow(missing_debug_implementations)]\n #[unstable(feature = \"derive_eq\",\n            reason = \"deriving hack, should not be public\",\n-           issue = \"0\")]\n+           issue = \"none\")]\n pub struct AssertParamIsEq<T: Eq + ?Sized> { _field: crate::marker::PhantomData<T> }\n \n /// An `Ordering` is the result of a comparison between two values."}, {"sha": "6277da4f123f21cb3b558e1995740e518907e0ba", "filename": "src/libcore/ffi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fffi.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -38,14 +38,14 @@ pub enum c_void {\n     #[unstable(\n         feature = \"c_void_variant\",\n         reason = \"temporary implementation detail\",\n-        issue = \"0\"\n+        issue = \"none\"\n     )]\n     #[doc(hidden)]\n     __variant1,\n     #[unstable(\n         feature = \"c_void_variant\",\n         reason = \"temporary implementation detail\",\n-        issue = \"0\"\n+        issue = \"none\"\n     )]\n     #[doc(hidden)]\n     __variant2,"}, {"sha": "6c8d1626b09b6ebe94f85b5dc096fa9f931f026e", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -35,7 +35,7 @@ pub enum Alignment {\n #[stable(feature = \"debug_builders\", since = \"1.2.0\")]\n pub use self::builders::{DebugList, DebugMap, DebugSet, DebugStruct, DebugTuple};\n \n-#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"0\")]\n+#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n #[doc(hidden)]\n pub mod rt {\n     pub mod v1;\n@@ -259,7 +259,7 @@ struct Void {\n /// types, and then this struct is used to canonicalize arguments to one type.\n #[derive(Copy, Clone)]\n #[allow(missing_debug_implementations)]\n-#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"0\")]\n+#[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n #[doc(hidden)]\n pub struct ArgumentV1<'a> {\n     value: &'a Void,\n@@ -273,13 +273,13 @@ impl<'a> ArgumentV1<'a> {\n     }\n \n     #[doc(hidden)]\n-    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"0\")]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     pub fn new<'b, T>(x: &'b T, f: fn(&T, &mut Formatter<'_>) -> Result) -> ArgumentV1<'b> {\n         unsafe { ArgumentV1 { formatter: mem::transmute(f), value: mem::transmute(x) } }\n     }\n \n     #[doc(hidden)]\n-    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"0\")]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     pub fn from_usize(x: &usize) -> ArgumentV1<'_> {\n         ArgumentV1::new(x, ArgumentV1::show_usize)\n     }\n@@ -309,7 +309,7 @@ impl<'a> Arguments<'a> {\n     /// Arguments structure.\n     #[doc(hidden)]\n     #[inline]\n-    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"0\")]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     pub fn new_v1(pieces: &'a [&'a str], args: &'a [ArgumentV1<'a>]) -> Arguments<'a> {\n         Arguments { pieces, fmt: None, args }\n     }\n@@ -322,7 +322,7 @@ impl<'a> Arguments<'a> {\n     /// unsafety, but will ignore invalid .\n     #[doc(hidden)]\n     #[inline]\n-    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"0\")]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     pub fn new_v1_formatted(\n         pieces: &'a [&'a str],\n         args: &'a [ArgumentV1<'a>],\n@@ -337,7 +337,7 @@ impl<'a> Arguments<'a> {\n     /// when using `format!`. Note: this is neither the lower nor upper bound.\n     #[doc(hidden)]\n     #[inline]\n-    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"0\")]\n+    #[unstable(feature = \"fmt_internals\", reason = \"internal to format_args!\", issue = \"none\")]\n     pub fn estimated_capacity(&self) -> usize {\n         let pieces_length: usize = self.pieces.iter().map(|x| x.len()).sum();\n "}, {"sha": "2a7fa58dd30ec6308b5b1a10c1e0d8608cf356d0", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -90,7 +90,7 @@ use crate::marker;\n #[allow(deprecated)]\n pub use self::sip::SipHasher;\n \n-#[unstable(feature = \"hashmap_internals\", issue = \"0\")]\n+#[unstable(feature = \"hashmap_internals\", issue = \"none\")]\n #[allow(deprecated)]\n #[doc(hidden)]\n pub use self::sip::SipHasher13;"}, {"sha": "7ebe01e26dca1f0970d943677679280719456812", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -15,7 +15,7 @@ use crate::ptr;\n /// (e.g., `collections::HashMap` uses it by default).\n ///\n /// See: <https://131002.net/siphash>\n-#[unstable(feature = \"hashmap_internals\", issue = \"0\")]\n+#[unstable(feature = \"hashmap_internals\", issue = \"none\")]\n #[rustc_deprecated(\n     since = \"1.13.0\",\n     reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n@@ -29,7 +29,7 @@ pub struct SipHasher13 {\n /// An implementation of SipHash 2-4.\n ///\n /// See: <https://131002.net/siphash/>\n-#[unstable(feature = \"hashmap_internals\", issue = \"0\")]\n+#[unstable(feature = \"hashmap_internals\", issue = \"none\")]\n #[rustc_deprecated(\n     since = \"1.13.0\",\n     reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n@@ -172,7 +172,7 @@ impl SipHasher {\n impl SipHasher13 {\n     /// Creates a new `SipHasher13` with the two initial keys set to 0.\n     #[inline]\n-    #[unstable(feature = \"hashmap_internals\", issue = \"0\")]\n+    #[unstable(feature = \"hashmap_internals\", issue = \"none\")]\n     #[rustc_deprecated(\n         since = \"1.13.0\",\n         reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n@@ -183,7 +183,7 @@ impl SipHasher13 {\n \n     /// Creates a `SipHasher13` that is keyed off the provided keys.\n     #[inline]\n-    #[unstable(feature = \"hashmap_internals\", issue = \"0\")]\n+    #[unstable(feature = \"hashmap_internals\", issue = \"none\")]\n     #[rustc_deprecated(\n         since = \"1.13.0\",\n         reason = \"use `std::collections::hash_map::DefaultHasher` instead\"\n@@ -264,7 +264,7 @@ impl super::Hasher for SipHasher {\n     }\n }\n \n-#[unstable(feature = \"hashmap_internals\", issue = \"0\")]\n+#[unstable(feature = \"hashmap_internals\", issue = \"none\")]\n impl super::Hasher for SipHasher13 {\n     #[inline]\n     fn write(&mut self, msg: &[u8]) {"}, {"sha": "4ea7dfc0735546d1260baab8de9cdc3ea0184020", "filename": "src/libcore/internal_macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Finternal_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Finternal_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Finternal_macros.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -77,7 +77,7 @@ macro_rules! forward_ref_op_assign {\n }\n \n /// Create a zero-size type similar to a closure type, but named.\n-#[unstable(feature = \"std_internals\", issue = \"0\")]\n+#[unstable(feature = \"std_internals\", issue = \"none\")]\n macro_rules! impl_fn_for_zst {\n     ($(\n         $( #[$attr: meta] )*"}, {"sha": "e73d125c13f8998cd0499014f80ff44f24374e69", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -33,7 +33,7 @@\n             reason = \"intrinsics are unlikely to ever be stabilized, instead \\\n                       they should be used through stabilized interfaces \\\n                       in the rest of the standard library\",\n-            issue = \"0\")]\n+            issue = \"none\")]\n #![allow(missing_docs)]\n \n use crate::mem;\n@@ -709,7 +709,7 @@ extern \"rust-intrinsic\" {\n                reason = \"intrinsics are unlikely to ever be stabilized, instead \\\n                          they should be used through stabilized interfaces \\\n                          in the rest of the standard library\",\n-               issue = \"0\")]\n+               issue = \"none\")]\n     #[rustc_deprecated(reason = \"superseded by MaybeUninit, removal planned\",\n                        since = \"1.38.0\")]\n     pub fn init<T>() -> T;\n@@ -725,7 +725,7 @@ extern \"rust-intrinsic\" {\n                reason = \"intrinsics are unlikely to ever be stabilized, instead \\\n                          they should be used through stabilized interfaces \\\n                          in the rest of the standard library\",\n-               issue = \"0\")]\n+               issue = \"none\")]\n     #[rustc_deprecated(reason = \"superseded by MaybeUninit, removal planned\",\n                        since = \"1.38.0\")]\n     pub fn uninit<T>() -> T;"}, {"sha": "6c7ec2cbfe3219d744b45948a2a65fdc692c5833", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -799,7 +799,7 @@ pub(crate) mod builtin {\n     /// Same as `format_args`, but adds a newline in the end.\n     #[unstable(\n         feature = \"format_args_nl\",\n-        issue = \"0\",\n+        issue = \"none\",\n         reason = \"`format_args_nl` is only for internal \\\n                   language use and is subject to change\"\n     )]"}, {"sha": "de3b837fb686b6454f341677bfb3a4b70cbd68ef", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -301,7 +301,7 @@ impl<T> MaybeUninit<T> {\n     /// let mut buf: [MaybeUninit<u8>; 32] = MaybeUninit::uninit_array();\n     /// let data = read(&mut buf);\n     /// ```\n-    #[unstable(feature = \"maybe_uninit_uninit_array\", issue = \"0\")]\n+    #[unstable(feature = \"maybe_uninit_uninit_array\", issue = \"none\")]\n     #[inline(always)]\n     pub fn uninit_array<const LEN: usize>() -> [Self; LEN] {\n         unsafe {\n@@ -310,7 +310,7 @@ impl<T> MaybeUninit<T> {\n     }\n \n     /// A promotable constant, equivalent to `uninit()`.\n-    #[unstable(feature = \"internal_uninit_const\", issue = \"0\",\n+    #[unstable(feature = \"internal_uninit_const\", issue = \"none\",\n         reason = \"hack to work around promotability\")]\n     pub const UNINIT: Self = Self::uninit();\n \n@@ -749,7 +749,7 @@ impl<T> MaybeUninit<T> {\n     /// It is up to the caller to guarantee that the `MaybeUninit<T>` elements\n     /// really are in an initialized state.\n     /// Calling this when the content is not yet fully initialized causes undefined behavior.\n-    #[unstable(feature = \"maybe_uninit_slice_assume_init\", issue = \"0\")]\n+    #[unstable(feature = \"maybe_uninit_slice_assume_init\", issue = \"none\")]\n     #[inline(always)]\n     pub unsafe fn slice_get_ref(slice: &[Self]) -> &[T] {\n         &*(slice as *const [Self] as *const [T])\n@@ -762,7 +762,7 @@ impl<T> MaybeUninit<T> {\n     /// It is up to the caller to guarantee that the `MaybeUninit<T>` elements\n     /// really are in an initialized state.\n     /// Calling this when the content is not yet fully initialized causes undefined behavior.\n-    #[unstable(feature = \"maybe_uninit_slice_assume_init\", issue = \"0\")]\n+    #[unstable(feature = \"maybe_uninit_slice_assume_init\", issue = \"none\")]\n     #[inline(always)]\n     pub unsafe fn slice_get_mut(slice: &mut [Self]) -> &mut [T] {\n         &mut *(slice as *mut [Self] as *mut [T])"}, {"sha": "db5d2650331f47c92faed8d17e333f19cdb84714", "filename": "src/libcore/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -121,7 +121,7 @@ pub fn forget<T>(t: T) {\n ///\n /// [`forget`]: fn.forget.html\n #[inline]\n-#[unstable(feature = \"forget_unsized\", issue = \"0\")]\n+#[unstable(feature = \"forget_unsized\", issue = \"none\")]\n pub fn forget_unsized<T: ?Sized>(t: T) {\n     // SAFETY: the forget intrinsic could be safe, but there's no point in making it safe since\n     // we'll be implementing this function soon via `ManuallyDrop`"}, {"sha": "39cc381b64c74843cf2507d980cc34ec5635d891", "filename": "src/libcore/num/bignum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fbignum.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -15,7 +15,7 @@\n #![unstable(\n     feature = \"core_private_bignum\",\n     reason = \"internal routines only exposed for testing\",\n-    issue = \"0\"\n+    issue = \"none\"\n )]\n #![macro_use]\n "}, {"sha": "c83c6b0eccbc74a1d608bbc21f2aa86410c754ed", "filename": "src/libcore/num/dec2flt/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdec2flt%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -81,7 +81,7 @@\n #![unstable(\n     feature = \"dec2flt\",\n     reason = \"internal routines only exposed for testing\",\n-    issue = \"0\"\n+    issue = \"none\"\n )]\n \n use crate::fmt;\n@@ -187,7 +187,7 @@ impl ParseFloatError {\n         feature = \"int_error_internals\",\n         reason = \"available through Error trait and this method should \\\n                   not be exposed publicly\",\n-        issue = \"0\"\n+        issue = \"none\"\n     )]\n     #[doc(hidden)]\n     pub fn __description(&self) -> &str {"}, {"sha": "0a609417dcf4cbedf8fe12d92dd9078d9f852946", "filename": "src/libcore/num/diy_float.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fnum%2Fdiy_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fnum%2Fdiy_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fdiy_float.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -6,7 +6,7 @@\n #![unstable(\n     feature = \"core_private_diy_float\",\n     reason = \"internal routines only exposed for testing\",\n-    issue = \"0\"\n+    issue = \"none\"\n )]\n \n /// A custom 64-bit floating point type, representing `f * 2^e`."}, {"sha": "9e760c13c0cf0a55db5e50cb4be99f7640033102", "filename": "src/libcore/num/flt2dec/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fflt2dec%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -119,7 +119,7 @@ functions.\n #![unstable(\n     feature = \"flt2dec\",\n     reason = \"internal routines only exposed for testing\",\n-    issue = \"0\"\n+    issue = \"none\"\n )]\n \n pub use self::decoder::{decode, DecodableFloat, Decoded, FullDecoded};"}, {"sha": "8a32479b2ff7d8a9a20c0cddd8b726bf9f6bcc72", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -4769,7 +4769,7 @@ impl TryFromIntError {\n         feature = \"int_error_internals\",\n         reason = \"available through Error trait and this method should \\\n                   not be exposed publicly\",\n-        issue = \"0\"\n+        issue = \"none\"\n     )]\n     #[doc(hidden)]\n     pub fn __description(&self) -> &str {\n@@ -4968,7 +4968,7 @@ impl ParseIntError {\n         feature = \"int_error_internals\",\n         reason = \"available through Error trait and this method should \\\n                   not be exposed publicly\",\n-        issue = \"0\"\n+        issue = \"none\"\n     )]\n     #[doc(hidden)]\n     pub fn __description(&self) -> &str {"}, {"sha": "68244fdb38114dc1e8e04f106a2974a4da742f0e", "filename": "src/libcore/ops/deref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fops%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fops%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fderef.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -178,14 +178,14 @@ impl<T: ?Sized> DerefMut for &mut T {\n /// `arbitrary_self_types` feature. This is implemented by stdlib pointer types like `Box<T>`,\n /// `Rc<T>`, `&T`, and `Pin<P>`.\n #[lang = \"receiver\"]\n-#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+#[unstable(feature = \"receiver_trait\", issue = \"none\")]\n #[doc(hidden)]\n pub trait Receiver {\n     // Empty.\n }\n \n-#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+#[unstable(feature = \"receiver_trait\", issue = \"none\")]\n impl<T: ?Sized> Receiver for &T {}\n \n-#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+#[unstable(feature = \"receiver_trait\", issue = \"none\")]\n impl<T: ?Sized> Receiver for &mut T {}"}, {"sha": "77b92b6ccbdaa5bbdc8f8888112c6487733b2b47", "filename": "src/libcore/ops/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -168,7 +168,7 @@ pub use self::bit::{BitAndAssign, BitOrAssign, BitXorAssign, ShlAssign, ShrAssig\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::deref::{Deref, DerefMut};\n \n-#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+#[unstable(feature = \"receiver_trait\", issue = \"none\")]\n pub use self::deref::Receiver;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -195,5 +195,5 @@ pub use self::generator::{Generator, GeneratorState};\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n pub use self::unsize::CoerceUnsized;\n \n-#[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n pub use self::unsize::DispatchFromDyn;"}, {"sha": "95a4393592be911f6565f5a434063f535818903e", "filename": "src/libcore/ops/unsize.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fops%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fops%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops%2Funsize.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -81,21 +81,21 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n ///     T: Unsize<U>,\n /// {}\n /// ```\n-#[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n #[lang = \"dispatch_from_dyn\"]\n pub trait DispatchFromDyn<T> {\n     // Empty.\n }\n \n // &T -> &U\n-#[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<&'a U> for &'a T {}\n // &mut T -> &mut U\n-#[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<&'a mut U> for &'a mut T {}\n // *const T -> *const U\n-#[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<*const U> for *const T {}\n // *mut T -> *mut U\n-#[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<*mut U> for *mut T {}"}, {"sha": "a90b025c093517edfc8e9d63ce7dddee26fa6c1d", "filename": "src/libcore/panic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanic.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -40,7 +40,7 @@ impl<'a> PanicInfo<'a> {\n     #[unstable(feature = \"panic_internals\",\n                reason = \"internal details of the implementation of the `panic!` \\\n                          and related macros\",\n-               issue = \"0\")]\n+               issue = \"none\")]\n     #[doc(hidden)]\n     #[inline]\n     pub fn internal_constructor(\n@@ -58,7 +58,7 @@ impl<'a> PanicInfo<'a> {\n     #[unstable(feature = \"panic_internals\",\n                reason = \"internal details of the implementation of the `panic!` \\\n                          and related macros\",\n-               issue = \"0\")]\n+               issue = \"none\")]\n     #[doc(hidden)]\n     #[inline]\n     pub fn set_payload(&mut self, info: &'a (dyn Any + Send)) {\n@@ -235,7 +235,7 @@ impl<'a> Location<'a> {\n     #![unstable(feature = \"panic_internals\",\n                 reason = \"internal details of the implementation of the `panic!` \\\n                           and related macros\",\n-                issue = \"0\")]\n+                issue = \"none\")]\n     #[doc(hidden)]\n     pub const fn internal_constructor(file: &'a str, line: u32, col: u32) -> Self {\n         Location { file, line, col }\n@@ -318,7 +318,7 @@ impl fmt::Display for Location<'_> {\n /// An internal trait used by libstd to pass data from libstd to `panic_unwind`\n /// and other panic runtimes. Not intended to be stabilized any time soon, do\n /// not use.\n-#[unstable(feature = \"std_internals\", issue = \"0\")]\n+#[unstable(feature = \"std_internals\", issue = \"none\")]\n #[doc(hidden)]\n pub unsafe trait BoxMeUp {\n     /// Take full ownership of the contents."}, {"sha": "7ebb72e3ce7bae73b0377f7a59e3325860f7cf34", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -26,7 +26,7 @@\n     feature = \"core_panic\",\n     reason = \"internal details of the implementation of the `panic!` \\\n               and related macros\",\n-    issue = \"0\"\n+    issue = \"none\"\n )]\n \n use crate::fmt;"}, {"sha": "aca6fb201388177004801487ff47b002506a06d8", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -786,7 +786,7 @@ impl<P: DerefMut<Target: Unpin>> DerefMut for Pin<P> {\n     }\n }\n \n-#[unstable(feature = \"receiver_trait\", issue = \"0\")]\n+#[unstable(feature = \"receiver_trait\", issue = \"none\")]\n impl<P: Receiver> Receiver for Pin<P> {}\n \n #[stable(feature = \"pin\", since = \"1.33.0\")]"}, {"sha": "d42b673ff65966149c9c2b3b143f42b1d68e83ec", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -89,7 +89,7 @@ mod non_null;\n pub use non_null::NonNull;\n \n mod unique;\n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n pub use unique::Unique;\n \n mod const_ptr;"}, {"sha": "626e58d49306e1f6b76566e8a921283db7565211", "filename": "src/libcore/ptr/non_null.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fnon_null.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -149,7 +149,7 @@ impl<T: ?Sized> Copy for NonNull<T> {}\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<NonNull<U>> for NonNull<T> where T: Unsize<U> {}\n \n-#[unstable(feature = \"dispatch_from_dyn\", issue = \"0\")]\n+#[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n impl<T: ?Sized, U: ?Sized> DispatchFromDyn<NonNull<U>> for NonNull<T> where T: Unsize<U> {}\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n@@ -201,7 +201,7 @@ impl<T: ?Sized> hash::Hash for NonNull<T> {\n     }\n }\n \n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n     #[inline]\n     fn from(unique: Unique<T>) -> Self {"}, {"sha": "87b56d951c6ce080166d04a07830f6850d699612", "filename": "src/libcore/ptr/unique.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Funique.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -29,7 +29,7 @@ use crate::ptr::NonNull;\n /// for any type which upholds Unique's aliasing requirements.\n #[unstable(\n     feature = \"ptr_internals\",\n-    issue = \"0\",\n+    issue = \"none\",\n     reason = \"use `NonNull` instead and consider `PhantomData<T>` \\\n               (if you also use `#[may_dangle]`), `Send`, and/or `Sync`\"\n )]\n@@ -50,17 +50,17 @@ pub struct Unique<T: ?Sized> {\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n /// `Unique` must enforce it.\n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n unsafe impl<T: Send + ?Sized> Send for Unique<T> {}\n \n /// `Unique` pointers are `Sync` if `T` is `Sync` because the data they\n /// reference is unaliased. Note that this aliasing invariant is\n /// unenforced by the type system; the abstraction using the\n /// `Unique` must enforce it.\n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n unsafe impl<T: Sync + ?Sized> Sync for Unique<T> {}\n \n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: Sized> Unique<T> {\n     /// Creates a new `Unique` that is dangling, but well-aligned.\n     ///\n@@ -78,7 +78,7 @@ impl<T: Sized> Unique<T> {\n     }\n }\n \n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique`.\n     ///\n@@ -133,54 +133,54 @@ impl<T: ?Sized> Unique<T> {\n     }\n }\n \n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: ?Sized> Clone for Unique<T> {\n     #[inline]\n     fn clone(&self) -> Self {\n         *self\n     }\n }\n \n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: ?Sized> Copy for Unique<T> {}\n \n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<Unique<U>> for Unique<T> where T: Unsize<U> {}\n \n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Unique<U>> for Unique<T> where T: Unsize<U> {}\n \n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: ?Sized> fmt::Debug for Unique<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n \n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: ?Sized> fmt::Pointer for Unique<T> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Pointer::fmt(&self.as_ptr(), f)\n     }\n }\n \n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: ?Sized> From<&mut T> for Unique<T> {\n     #[inline]\n     fn from(reference: &mut T) -> Self {\n         unsafe { Unique { pointer: reference as *mut T, _marker: PhantomData } }\n     }\n }\n \n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: ?Sized> From<&T> for Unique<T> {\n     #[inline]\n     fn from(reference: &T) -> Self {\n         unsafe { Unique { pointer: reference as *const T, _marker: PhantomData } }\n     }\n }\n \n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: ?Sized> From<NonNull<T>> for Unique<T> {\n     #[inline]\n     fn from(p: NonNull<T>) -> Self {"}, {"sha": "68e12e877893de4edf9ab3322e543bc2a2566ae4", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -38,7 +38,7 @@ use crate::ptr;\n use crate::mem;\n use crate::marker::{Copy, Send, Sync, Sized, self};\n \n-#[unstable(feature = \"slice_internals\", issue = \"0\",\n+#[unstable(feature = \"slice_internals\", issue = \"none\",\n            reason = \"exposed from core to be reused in std; use the memchr crate\")]\n /// Pure rust memchr implementation, taken from rust-memchr\n pub mod memchr;\n@@ -2723,38 +2723,38 @@ pub trait SliceIndex<T: ?Sized>: private_slice_index::Sealed {\n \n     /// Returns a shared reference to the output at this location, if in\n     /// bounds.\n-    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n+    #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n     fn get(self, slice: &T) -> Option<&Self::Output>;\n \n     /// Returns a mutable reference to the output at this location, if in\n     /// bounds.\n-    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n+    #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n     fn get_mut(self, slice: &mut T) -> Option<&mut Self::Output>;\n \n     /// Returns a shared reference to the output at this location, without\n     /// performing any bounds checking.\n     /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n     /// even if the resulting reference is not used.\n     /// [undefined behavior]: ../../reference/behavior-considered-undefined.html\n-    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n+    #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n     unsafe fn get_unchecked(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, without\n     /// performing any bounds checking.\n     /// Calling this method with an out-of-bounds index is *[undefined behavior]*\n     /// even if the resulting reference is not used.\n     /// [undefined behavior]: ../../reference/behavior-considered-undefined.html\n-    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n+    #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n     unsafe fn get_unchecked_mut(self, slice: &mut T) -> &mut Self::Output;\n \n     /// Returns a shared reference to the output at this location, panicking\n     /// if out of bounds.\n-    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n+    #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n     fn index(self, slice: &T) -> &Self::Output;\n \n     /// Returns a mutable reference to the output at this location, panicking\n     /// if out of bounds.\n-    #[unstable(feature = \"slice_index_methods\", issue = \"0\")]\n+    #[unstable(feature = \"slice_index_methods\", issue = \"none\")]\n     fn index_mut(self, slice: &mut T) -> &mut Self::Output;\n }\n \n@@ -5382,7 +5382,7 @@ pub fn from_mut<T>(s: &mut T) -> &mut [T] {\n }\n \n // This function is public only because there is no other way to unit test heapsort.\n-#[unstable(feature = \"sort_internals\", reason = \"internal to sort module\", issue = \"0\")]\n+#[unstable(feature = \"sort_internals\", reason = \"internal to sort module\", issue = \"none\")]\n #[doc(hidden)]\n pub fn heapsort<T, F>(v: &mut [T], mut is_less: F)\n     where F: FnMut(&T, &T) -> bool"}, {"sha": "cf6ee6ed5935daa68574d4acec9c83987cee0f91", "filename": "src/libcore/str/lossy.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fstr%2Flossy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fstr%2Flossy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Flossy.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -6,7 +6,7 @@ use crate::mem;\n // ignore-tidy-undocumented-unsafe\n \n /// Lossy UTF-8 string.\n-#[unstable(feature = \"str_internals\", issue = \"0\")]\n+#[unstable(feature = \"str_internals\", issue = \"none\")]\n pub struct Utf8Lossy {\n     bytes: [u8]\n }\n@@ -27,13 +27,13 @@ impl Utf8Lossy {\n \n \n /// Iterator over lossy UTF-8 string\n-#[unstable(feature = \"str_internals\", issue = \"0\")]\n+#[unstable(feature = \"str_internals\", issue = \"none\")]\n #[allow(missing_debug_implementations)]\n pub struct Utf8LossyChunksIter<'a> {\n     source: &'a [u8],\n }\n \n-#[unstable(feature = \"str_internals\", issue = \"0\")]\n+#[unstable(feature = \"str_internals\", issue = \"none\")]\n #[derive(PartialEq, Eq, Debug)]\n pub struct Utf8LossyChunk<'a> {\n     /// Sequence of valid chars."}, {"sha": "15b65ed76555a3fb44f4b8601a29bf916b847062", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -21,7 +21,7 @@ use crate::option;\n \n pub mod pattern;\n \n-#[unstable(feature = \"str_internals\", issue = \"0\")]\n+#[unstable(feature = \"str_internals\", issue = \"none\")]\n #[allow(missing_docs)]\n pub mod lossy;\n \n@@ -496,7 +496,7 @@ fn unwrap_or_0(opt: Option<&u8>) -> u8 {\n \n /// Reads the next code point out of a byte iterator (assuming a\n /// UTF-8-like encoding).\n-#[unstable(feature = \"str_internals\", issue = \"0\")]\n+#[unstable(feature = \"str_internals\", issue = \"none\")]\n #[inline]\n pub fn next_code_point<'a, I: Iterator<Item = &'a u8>>(bytes: &mut I) -> Option<u32> {\n     // Decode UTF-8\n@@ -1583,7 +1583,7 @@ static UTF8_CHAR_WIDTH: [u8; 256] = [\n ];\n \n /// Given a first byte, determines how many bytes are in this UTF-8 character.\n-#[unstable(feature = \"str_internals\", issue = \"0\")]\n+#[unstable(feature = \"str_internals\", issue = \"none\")]\n #[inline]\n pub fn utf8_char_width(b: u8) -> usize {\n     UTF8_CHAR_WIDTH[b as usize] as usize"}, {"sha": "e424174f554697f133c40766b11f2838a37dd677", "filename": "src/libcore/unicode/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibcore%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(feature = \"unicode_internals\", issue = \"0\")]\n+#![unstable(feature = \"unicode_internals\", issue = \"none\")]\n #![allow(missing_docs)]\n \n mod bool_trie;"}, {"sha": "e503795c519d4fedc28ea32710b95325b456da1b", "filename": "src/libprofiler_builtins/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibprofiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibprofiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Flib.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -3,7 +3,7 @@\n #![profiler_runtime]\n #![unstable(feature = \"profiler_runtime_lib\",\n             reason = \"internal implementation detail of rustc right now\",\n-            issue = \"0\")]\n+            issue = \"none\")]\n #![allow(unused_features)]\n #![feature(nll)]\n #![feature(staged_api)]"}, {"sha": "4c8c9d15d56299c8f0ca4f8db062b47a403b545c", "filename": "src/librustc_asan/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibrustc_asan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibrustc_asan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_asan%2Flib.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -5,4 +5,4 @@\n #![no_std]\n #![unstable(feature = \"sanitizer_runtime_lib\",\n             reason = \"internal implementation detail of sanitizers\",\n-            issue = \"0\")]\n+            issue = \"none\")]"}, {"sha": "7506c8e693ed86b7c85fe9e46ddb017d5f1f4132", "filename": "src/librustc_error_codes/error_codes/E0734.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibrustc_error_codes%2Ferror_codes%2FE0734.md", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibrustc_error_codes%2Ferror_codes%2FE0734.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0734.md?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -5,7 +5,7 @@ Erroneous code examples:\n ```compile_fail,E0734\n #[rustc_deprecated(since = \"b\", reason = \"text\")] // invalid\n #[stable(feature = \"a\", since = \"b\")] // invalid\n-#[unstable(feature = \"b\", issue = \"0\")] // invalid\n+#[unstable(feature = \"b\", issue = \"none\")] // invalid\n fn foo(){}\n ```\n "}, {"sha": "4c8c9d15d56299c8f0ca4f8db062b47a403b545c", "filename": "src/librustc_lsan/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibrustc_lsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibrustc_lsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lsan%2Flib.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -5,4 +5,4 @@\n #![no_std]\n #![unstable(feature = \"sanitizer_runtime_lib\",\n             reason = \"internal implementation detail of sanitizers\",\n-            issue = \"0\")]\n+            issue = \"none\")]"}, {"sha": "4c8c9d15d56299c8f0ca4f8db062b47a403b545c", "filename": "src/librustc_msan/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibrustc_msan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibrustc_msan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_msan%2Flib.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -5,4 +5,4 @@\n #![no_std]\n #![unstable(feature = \"sanitizer_runtime_lib\",\n             reason = \"internal implementation detail of sanitizers\",\n-            issue = \"0\")]\n+            issue = \"none\")]"}, {"sha": "4c8c9d15d56299c8f0ca4f8db062b47a403b545c", "filename": "src/librustc_tsan/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibrustc_tsan%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibrustc_tsan%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_tsan%2Flib.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -5,4 +5,4 @@\n #![no_std]\n #![unstable(feature = \"sanitizer_runtime_lib\",\n             reason = \"internal implementation detail of sanitizers\",\n-            issue = \"0\")]\n+            issue = \"none\")]"}, {"sha": "eccf8cabf220658189ac5f5c5a6909a45bcd1d77", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -205,7 +205,7 @@ fn default_alloc_error_hook(layout: Layout) {\n #[cfg(not(test))]\n #[doc(hidden)]\n #[alloc_error_handler]\n-#[unstable(feature = \"alloc_internals\", issue = \"0\")]\n+#[unstable(feature = \"alloc_internals\", issue = \"none\")]\n pub fn rust_oom(layout: Layout) -> ! {\n     let hook = HOOK.load(Ordering::SeqCst);\n     let hook: fn(Layout) = if hook.is_null() {\n@@ -220,7 +220,7 @@ pub fn rust_oom(layout: Layout) -> ! {\n #[cfg(not(test))]\n #[doc(hidden)]\n #[allow(unused_attributes)]\n-#[unstable(feature = \"alloc_internals\", issue = \"0\")]\n+#[unstable(feature = \"alloc_internals\", issue = \"none\")]\n pub mod __default_lib_allocator {\n     use super::{System, Layout, GlobalAlloc};\n     // These magic symbol names are used as a fallback for implementing the"}, {"sha": "48ebb77cfb3793be4d608b81a2bf8146d024842d", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1065,7 +1065,7 @@ impl CStr {\n     /// ```\n     #[inline]\n     #[stable(feature = \"cstr_from_bytes\", since = \"1.10.0\")]\n-    #[rustc_const_unstable(feature = \"const_cstr_unchecked\", issue = \"0\")]\n+    #[rustc_const_unstable(feature = \"const_cstr_unchecked\", issue = \"none\")]\n     pub const unsafe fn from_bytes_with_nul_unchecked(bytes: &[u8]) -> &CStr {\n         &*(bytes as *const [u8] as *const CStr)\n     }"}, {"sha": "587ac24326742a6e9016520856001db824d6a769", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -280,7 +280,7 @@ pub use self::error::{Error, ErrorKind, Result};\n pub use self::stdio::{stderr, stdin, stdout, Stderr, Stdin, Stdout};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::stdio::{StderrLock, StdinLock, StdoutLock};\n-#[unstable(feature = \"print_internals\", issue = \"0\")]\n+#[unstable(feature = \"print_internals\", issue = \"none\")]\n pub use self::stdio::{_eprint, _print};\n #[unstable(feature = \"libstd_io_internals\", issue = \"42788\")]\n #[doc(no_inline, hidden)]"}, {"sha": "4aa35884fb4878cbbb314210b2dc92ab69b09c50", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -723,7 +723,7 @@ impl fmt::Debug for StderrLock<'_> {\n #[unstable(feature = \"set_stdio\",\n            reason = \"this function may disappear completely or be replaced \\\n                      with a more general mechanism\",\n-           issue = \"0\")]\n+           issue = \"none\")]\n #[doc(hidden)]\n pub fn set_panic(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {\n     use crate::mem;\n@@ -746,7 +746,7 @@ pub fn set_panic(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write +\n #[unstable(feature = \"set_stdio\",\n            reason = \"this function may disappear completely or be replaced \\\n                      with a more general mechanism\",\n-           issue = \"0\")]\n+           issue = \"none\")]\n #[doc(hidden)]\n pub fn set_print(sink: Option<Box<dyn Write + Send>>) -> Option<Box<dyn Write + Send>> {\n     use crate::mem;\n@@ -795,7 +795,7 @@ where\n \n #[unstable(feature = \"print_internals\",\n            reason = \"implementation detail which may disappear or be replaced at any time\",\n-           issue = \"0\")]\n+           issue = \"none\")]\n #[doc(hidden)]\n #[cfg(not(test))]\n pub fn _print(args: fmt::Arguments<'_>) {\n@@ -804,7 +804,7 @@ pub fn _print(args: fmt::Arguments<'_>) {\n \n #[unstable(feature = \"print_internals\",\n            reason = \"implementation detail which may disappear or be replaced at any time\",\n-           issue = \"0\")]\n+           issue = \"none\")]\n #[doc(hidden)]\n #[cfg(not(test))]\n pub fn _eprint(args: fmt::Arguments<'_>) {"}, {"sha": "6ad5519d34aa9f9392c64c30ba145202363548f3", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -205,7 +205,7 @@ impl<T: RefUnwindSafe + ?Sized> UnwindSafe for &T {}\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *const T {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for *mut T {}\n-#[unstable(feature = \"ptr_internals\", issue = \"0\")]\n+#[unstable(feature = \"ptr_internals\", issue = \"none\")]\n impl<T: UnwindSafe + ?Sized> UnwindSafe for Unique<T> {}\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for NonNull<T> {}"}, {"sha": "886acf1f95d1341a1b5d2ee4300192588dcd8598", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -214,7 +214,7 @@ fn default_hook(info: &PanicInfo<'_>) {\n \n #[cfg(not(test))]\n #[doc(hidden)]\n-#[unstable(feature = \"update_panic_count\", issue = \"0\")]\n+#[unstable(feature = \"update_panic_count\", issue = \"none\")]\n pub fn update_panic_count(amt: isize) -> usize {\n     use crate::cell::Cell;\n     thread_local! { static PANIC_COUNT: Cell<usize> = Cell::new(0) }\n@@ -307,7 +307,7 @@ pub fn panicking() -> bool {\n /// the actual formatting into this shared place.\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n-           issue = \"0\")]\n+           issue = \"none\")]\n #[cold]\n // If panic_immediate_abort, inline the abort call,\n // otherwise avoid inlining because of it is cold path.\n@@ -383,7 +383,7 @@ pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n /// arbitrary payloads, not just format strings.\n #[unstable(feature = \"libstd_sys_internals\",\n            reason = \"used by the panic! macro\",\n-           issue = \"0\")]\n+           issue = \"none\")]\n #[cfg_attr(not(test), lang = \"begin_panic\")] // lang item for CTFE panic support\n // never inline unless panic_immediate_abort to avoid code\n // bloat at the call sites as much as possible"}, {"sha": "2426b2dead71209db4b14842c6cf7e05171ead3c", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -10,7 +10,7 @@\n     feature = \"rt\",\n     reason = \"this public module should not exist and is highly likely \\\n               to disappear\",\n-    issue = \"0\"\n+    issue = \"none\"\n )]\n #![doc(hidden)]\n "}, {"sha": "1108e2545bdebacc3240150de63abc8889eec9f4", "filename": "src/libstd/sys/hermit/fast_thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fhermit%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fhermit%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Ffast_thread_local.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,4 +1,4 @@\n #![cfg(target_thread_local)]\n-#![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n+#![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n \n pub use crate::sys_common::thread_local::register_dtor_fallback as register_dtor;"}, {"sha": "97d1a38b41ab17eec4637c2532de60797e81333b", "filename": "src/libstd/sys/hermit/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fhermit%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fhermit%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fhermit%2Ffd.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(reason = \"not public\", issue = \"0\", feature = \"fd\")]\n+#![unstable(reason = \"not public\", issue = \"none\", feature = \"fd\")]\n \n use crate::io::{self, ErrorKind, Read};\n use crate::mem;"}, {"sha": "875ff1af92013b5e03b2b829970c760b4839f4cd", "filename": "src/libstd/sys/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -69,7 +69,7 @@ cfg_if::cfg_if! {\n         // On CloudABI and wasm right now the module below doesn't compile\n         // (missing things in `libc` which is empty) so just omit everything\n         // with an empty module\n-        #[unstable(issue = \"0\", feature = \"std_internals\")]\n+        #[unstable(issue = \"none\", feature = \"std_internals\")]\n         #[allow(missing_docs)]\n         pub mod unix_ext {}\n     } else {\n@@ -92,7 +92,7 @@ cfg_if::cfg_if! {\n                         all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n         // On CloudABI and wasm right now the shim below doesn't compile, so\n         // just omit it\n-        #[unstable(issue = \"0\", feature = \"std_internals\")]\n+        #[unstable(issue = \"none\", feature = \"std_internals\")]\n         #[allow(missing_docs)]\n         pub mod windows_ext {}\n     } else {"}, {"sha": "8730b4de8bed2fb368c7de0ad4dcd0dbfc5be5cc", "filename": "src/libstd/sys/unix/fast_thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,5 +1,5 @@\n #![cfg(target_thread_local)]\n-#![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n+#![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n \n // Since what appears to be glibc 2.18 this symbol has been shipped which\n // GCC and clang both use to invoke destructors in thread_local globals, so"}, {"sha": "8a99836912a335ca2d38618343b01733b9475214", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(reason = \"not public\", issue = \"0\", feature = \"fd\")]\n+#![unstable(reason = \"not public\", issue = \"none\", feature = \"fd\")]\n \n use crate::cmp;\n use crate::io::{self, Initializer, IoSlice, IoSliceMut, Read};"}, {"sha": "098668cf521dd2639327365a1a16274d62360ce9", "filename": "src/libstd/sys/vxworks/fast_thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fvxworks%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fvxworks%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ffast_thread_local.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,5 +1,5 @@\n #![cfg(target_thread_local)]\n-#![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n+#![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n \n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern \"C\" fn(*mut u8)) {\n     use crate::sys_common::thread_local::register_dtor_fallback;"}, {"sha": "65c67dabc1ad0075cc5befe58bcbbfedb8cc63b5", "filename": "src/libstd/sys/vxworks/fd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fvxworks%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fvxworks%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ffd.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(reason = \"not public\", issue = \"0\", feature = \"fd\")]\n+#![unstable(reason = \"not public\", issue = \"none\", feature = \"fd\")]\n \n use crate::cmp;\n use crate::io::{self, Initializer, IoSlice, IoSliceMut, Read};"}, {"sha": "6696efa8871c20a2ef6d06dd46393eb12d8d3c68", "filename": "src/libstd/sys/wasi/ext/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Ffs.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,6 +1,6 @@\n //! WASI-specific extensions to primitives in the `std::fs` module.\n \n-#![unstable(feature = \"wasi_ext\", issue = \"0\")]\n+#![unstable(feature = \"wasi_ext\", issue = \"none\")]\n \n use crate::fs::{self, File, Metadata, OpenOptions};\n use crate::io::{self, IoSlice, IoSliceMut};"}, {"sha": "be3c2d97a247efb6fd10751b0a2f3b1d72774d23", "filename": "src/libstd/sys/wasi/ext/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fext%2Fio.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,6 +1,6 @@\n //! WASI-specific extensions to general I/O primitives\n \n-#![unstable(feature = \"wasi_ext\", issue = \"0\")]\n+#![unstable(feature = \"wasi_ext\", issue = \"none\")]\n \n use crate::fs;\n use crate::io;"}, {"sha": "9bdc26ae7d68c31c9a12f1f5251d86760242356e", "filename": "src/libstd/sys/wasm/fast_thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwasm%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwasm%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ffast_thread_local.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n+#![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n \n pub unsafe fn register_dtor(_t: *mut u8, _dtor: unsafe extern fn(*mut u8)) {\n     // FIXME: right now there is no concept of \"thread exit\", but this is likely"}, {"sha": "4cdac89a86405237d3420abde7ea6f469a002fc1", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -2,7 +2,7 @@\n \n #![allow(nonstandard_style)]\n #![cfg_attr(test, allow(dead_code))]\n-#![unstable(issue = \"0\", feature = \"windows_c\")]\n+#![unstable(issue = \"none\", feature = \"windows_c\")]\n \n use crate::os::raw::{c_int, c_uint, c_ulong, c_long, c_longlong, c_ushort, c_char};\n use crate::ptr;"}, {"sha": "0462f889a8e54f1b8abbb5636717be284e2838bd", "filename": "src/libstd/sys/windows/ext/fs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fext%2Ffs.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -504,17 +504,17 @@ impl MetadataExt for Metadata {\n /// On Windows, a symbolic link knows whether it is a file or directory.\n ///\n /// [`FileType`]: ../../../../std/fs/struct.FileType.html\n-#[unstable(feature = \"windows_file_type_ext\", issue = \"0\")]\n+#[unstable(feature = \"windows_file_type_ext\", issue = \"none\")]\n pub trait FileTypeExt {\n     /// Returns `true` if this file type is a symbolic link that is also a directory.\n-    #[unstable(feature = \"windows_file_type_ext\", issue = \"0\")]\n+    #[unstable(feature = \"windows_file_type_ext\", issue = \"none\")]\n     fn is_symlink_dir(&self) -> bool;\n     /// Returns `true` if this file type is a symbolic link that is also a file.\n-    #[unstable(feature = \"windows_file_type_ext\", issue = \"0\")]\n+    #[unstable(feature = \"windows_file_type_ext\", issue = \"none\")]\n     fn is_symlink_file(&self) -> bool;\n }\n \n-#[unstable(feature = \"windows_file_type_ext\", issue = \"0\")]\n+#[unstable(feature = \"windows_file_type_ext\", issue = \"none\")]\n impl FileTypeExt for fs::FileType {\n     fn is_symlink_dir(&self) -> bool {\n         self.as_inner().is_symlink_dir()"}, {"sha": "191fa07f32a5543cf2fbcde89d0503683107c948", "filename": "src/libstd/sys/windows/fast_thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffast_thread_local.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n+#![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n #![cfg(target_thread_local)]\n \n pub use crate::sys_common::thread_local::register_dtor_fallback as register_dtor;"}, {"sha": "fd0c2350cb3ae8fffbf8acfdd3a38e80ed6e33be", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(issue = \"0\", feature = \"windows_handle\")]\n+#![unstable(issue = \"none\", feature = \"windows_handle\")]\n \n use crate::cmp;\n use crate::io::{self, ErrorKind, IoSlice, IoSliceMut, Read};"}, {"sha": "53e08d5000489d22b02da2a6c74a4019ab5ef204", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(issue = \"0\", feature = \"windows_net\")]\n+#![unstable(issue = \"none\", feature = \"windows_net\")]\n \n use crate::cmp;\n use crate::io::{self, Read, IoSlice, IoSliceMut};\n@@ -395,7 +395,7 @@ impl Socket {\n     }\n }\n \n-#[unstable(reason = \"not public\", issue = \"0\", feature = \"fd_read\")]\n+#[unstable(reason = \"not public\", issue = \"none\", feature = \"fd_read\")]\n impl<'a> Read for &'a Socket {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n         (**self).read(buf)"}, {"sha": "060997be97d23aad2c1594913b7e28e2ba55a693", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(feature = \"process_internals\", issue = \"0\")]\n+#![unstable(feature = \"process_internals\", issue = \"none\")]\n \n use crate::collections::BTreeMap;\n use crate::env::split_paths;"}, {"sha": "c84896296ecb930902e09d010d60c85d216c3c60", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(issue = \"0\", feature = \"windows_stdio\")]\n+#![unstable(issue = \"none\", feature = \"windows_stdio\")]\n \n use crate::char::decode_utf16;\n use crate::cmp;"}, {"sha": "5bdabf6d4b78efdaa81c74e514ce8076e459bf5e", "filename": "src/libstd/sys/windows/stdio_uwp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Fstdio_uwp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys%2Fwindows%2Fstdio_uwp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio_uwp.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,4 +1,4 @@\n-#![unstable(issue = \"0\", feature = \"windows_stdio\")]\n+#![unstable(issue = \"none\", feature = \"windows_stdio\")]\n \n use crate::io;\n use crate::mem::ManuallyDrop;"}, {"sha": "042641852b3e94b639bedb180c0c6e95ff9a7f84", "filename": "src/libstd/sys_common/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fprocess.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,5 +1,5 @@\n #![allow(dead_code)]\n-#![unstable(feature = \"process_internals\", issue = \"0\")]\n+#![unstable(feature = \"process_internals\", issue = \"none\")]\n \n use crate::collections::BTreeMap;\n use crate::env;"}, {"sha": "9596911fd4867b17e4615003fd15cd27385b46c8", "filename": "src/libstd/sys_common/thread_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys_common%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fsys_common%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fthread_local.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -45,7 +45,7 @@\n //! ```\n \n #![allow(non_camel_case_types)]\n-#![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n+#![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n #![allow(dead_code)] // sys isn't exported yet\n \n use crate::ptr;"}, {"sha": "1dd942e252f6bbc9a607fff04d57eaefdca843d0", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,6 +1,6 @@\n //! Thread local storage\n \n-#![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n+#![unstable(feature = \"thread_local_internals\", issue = \"none\")]\n \n use crate::error::Error;\n use crate::fmt;\n@@ -142,7 +142,7 @@ macro_rules! thread_local {\n }\n \n #[doc(hidden)]\n-#[unstable(feature = \"thread_local_internals\", reason = \"should not be necessary\", issue = \"0\")]\n+#[unstable(feature = \"thread_local_internals\", reason = \"should not be necessary\", issue = \"none\")]\n #[macro_export]\n #[allow_internal_unstable(thread_local_internals, cfg_target_thread_local, thread_local)]\n #[allow_internal_unsafe]\n@@ -215,7 +215,7 @@ impl<T: 'static> LocalKey<T> {\n     #[unstable(\n         feature = \"thread_local_internals\",\n         reason = \"recently added to create a key\",\n-        issue = \"0\"\n+        issue = \"none\"\n     )]\n     pub const unsafe fn new(inner: unsafe fn() -> Option<&'static T>) -> LocalKey<T> {\n         LocalKey { inner }"}, {"sha": "9df6af4c5d88713bdb54a968ec4ee5e03cd91889", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -194,13 +194,13 @@ pub use self::local::{LocalKey, AccessError};\n // where fast TLS was not available; end-user code is compiled with fast TLS\n // where available, but both are needed.\n \n-#[unstable(feature = \"libstd_thread_internals\", issue = \"0\")]\n+#[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n #[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n #[doc(hidden)] pub use self::local::statik::Key as __StaticLocalKeyInner;\n-#[unstable(feature = \"libstd_thread_internals\", issue = \"0\")]\n+#[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n #[cfg(target_thread_local)]\n #[doc(hidden)] pub use self::local::fast::Key as __FastLocalKeyInner;\n-#[unstable(feature = \"libstd_thread_internals\", issue = \"0\")]\n+#[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n #[doc(hidden)] pub use self::local::os::Key as __OsLocalKeyInner;\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "d780d0ad76488359c814797b36c59a65d5ed0767", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -376,11 +376,11 @@ fn find_stability_generic<'a, I>(sess: &ParseSess,\n                     match (feature, reason, issue) {\n                         (Some(feature), reason, Some(issue)) => {\n                             let issue = match &*issue.as_str() {\n-                                // FIXME(rossmacarthur): remove \"0\" because \"none\" should be used\n-                                // See #41260\n-                                \"none\" | \"0\" => None,\n+                                \"none\" => None,\n                                 issue => {\n                                     if let Ok(num) = issue.parse() {\n+                                        // FIXME(rossmacarthur): disallow 0\n+                                        // Disallowing this requires updates to some submodules\n                                         NonZeroU32::new(num)\n                                     } else {\n                                         span_err!("}, {"sha": "3dcfb9dadd804dd6d0e069b30aa8e39ddc6bb252", "filename": "src/test/run-make-fulldeps/allow-warnings-cmdline-stability/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fallow-warnings-cmdline-stability%2Fbar.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,5 +1,5 @@\n #![crate_type = \"lib\"]\n #![feature(staged_api)]\n-#![unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#![unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n \n pub fn baz() {}"}, {"sha": "8e0d230f7d0104f8b8dd1c9850cb5121b4e7247f", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -2,18 +2,18 @@\n \n #![unstable(feature = \"humans\",\n             reason = \"who ever let humans program computers, we're apparently really bad at it\",\n-            issue = \"0\")]\n+            issue = \"none\")]\n \n #![feature(foo, foo2)]\n #![feature(staged_api)]\n \n // @has 'foo/fn.foo.html' '//pre' 'pub unsafe fn foo() -> u32'\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature=\"foo\", issue = \"0\")]\n+#[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n pub const unsafe fn foo() -> u32 { 42 }\n \n // @has 'foo/fn.foo2.html' '//pre' 'pub fn foo2() -> u32'\n-#[unstable(feature = \"humans\", issue=\"0\")]\n+#[unstable(feature = \"humans\", issue = \"none\")]\n pub const fn foo2() -> u32 { 42 }\n \n // @has 'foo/fn.bar2.html' '//pre' 'pub const fn bar2() -> u32'\n@@ -22,7 +22,7 @@ pub const fn foo2() -> u32 { 42 }\n pub const fn bar2() -> u32 { 42 }\n \n // @has 'foo/fn.foo2_gated.html' '//pre' 'pub unsafe fn foo2_gated() -> u32'\n-#[unstable(feature = \"foo2\", issue=\"0\")]\n+#[unstable(feature = \"foo2\", issue = \"none\")]\n pub const unsafe fn foo2_gated() -> u32 { 42 }\n \n // @has 'foo/fn.bar2_gated.html' '//pre' 'pub const unsafe fn bar2_gated() -> u32'"}, {"sha": "2165be9745229f19d35bb5606388c6f3e1fcc1a3", "filename": "src/test/rustdoc/inline_cross/auxiliary/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fmacros.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -3,7 +3,7 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n /// docs for my_macro\n-#[unstable(feature = \"macro_test\", issue = \"0\")]\n+#[unstable(feature = \"macro_test\", issue = \"none\")]\n #[rustc_deprecated(since = \"1.2.3\", reason = \"text\")]\n #[macro_export]\n macro_rules! my_macro {"}, {"sha": "b1b97fe134e4c6208453b227c84d008136f3452a", "filename": "src/test/rustdoc/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Frustdoc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Frustdoc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstability.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,6 +1,6 @@\n #![feature(staged_api)]\n \n-#![unstable(feature = \"test\", issue = \"0\")]\n+#![unstable(feature = \"test\", issue = \"none\")]\n \n pub struct Unstable {\n     // @has stability/struct.Unstable.html \\"}, {"sha": "c995038e5a8a7271296466148f4186afe1483692", "filename": "src/test/ui/auxiliary/stability-cfg2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fauxiliary%2Fstability-cfg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fauxiliary%2Fstability-cfg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fauxiliary%2Fstability-cfg2.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:--cfg foo\n \n-#![cfg_attr(foo, unstable(feature = \"unstable_test_feature\", issue = \"0\"))]\n+#![cfg_attr(foo, unstable(feature = \"unstable_test_feature\", issue = \"none\"))]\n #![cfg_attr(not(foo), stable(feature = \"test_feature\", since = \"1.0.0\"))]\n #![feature(staged_api)]"}, {"sha": "70531114f21dcc018fa06a68dda332eecc637950", "filename": "src/test/ui/consts/const-eval/auxiliary/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fauxiliary%2Fstability.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -7,5 +7,5 @@\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature=\"foo\", issue = \"0\")]\n+#[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n pub const fn foo() -> u32 { 42 }"}, {"sha": "3729285956b4c4add58f71dfca359baf3dfb04fa", "filename": "src/test/ui/consts/const-eval/dont_promote_unstable_const_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdont_promote_unstable_const_fn.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,13 +1,13 @@\n #![unstable(feature = \"humans\",\n             reason = \"who ever let humans program computers,\n             we're apparently really bad at it\",\n-            issue = \"0\")]\n+            issue = \"none\")]\n \n #![feature(const_fn)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature=\"foo\", issue = \"0\")]\n+#[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n const fn foo() -> u32 { 42 }\n \n fn meh() -> u32 { 42 }"}, {"sha": "df10f3496c3c8e12310a95ccee608df0c1bfc3f3", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,21 +1,21 @@\n #![unstable(feature = \"humans\",\n             reason = \"who ever let humans program computers,\n             we're apparently really bad at it\",\n-            issue = \"0\")]\n+            issue = \"none\")]\n \n #![feature(const_fn, foo, foo2)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature=\"foo\", issue = \"0\")]\n+#[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n const fn foo() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n const fn bar() -> u32 { foo() } //~ ERROR can only call other `const fn`\n \n-#[unstable(feature = \"rust1\", issue=\"0\")]\n+#[unstable(feature = \"rust1\", issue = \"none\")]\n const fn foo2() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -29,7 +29,7 @@ const fn bar2() -> u32 { foo2() } //~ ERROR can only call other `const fn`\n const fn bar3() -> u32 { (5f32 + 6f32) as u32 } //~ ERROR only int, `bool` and `char` operations\n \n // check whether this function cannot be called even with the feature gate active\n-#[unstable(feature = \"foo2\", issue=\"0\")]\n+#[unstable(feature = \"foo2\", issue = \"none\")]\n const fn foo2_gated() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "12b41ee2b0d6a2454bf739b684030ad68ab1cabf", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,21 +1,21 @@\n #![unstable(feature = \"humans\",\n             reason = \"who ever let humans program computers,\n             we're apparently really bad at it\",\n-            issue = \"0\")]\n+            issue = \"none\")]\n \n #![feature(const_fn, foo, foo2)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature=\"foo\", issue = \"0\")]\n+#[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n const unsafe fn foo() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n const unsafe fn bar() -> u32 { unsafe { foo() } } //~ ERROR can only call other `const fn`\n \n-#[unstable(feature = \"rust1\", issue=\"0\")]\n+#[unstable(feature = \"rust1\", issue = \"none\")]\n const unsafe fn foo2() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -29,7 +29,7 @@ const unsafe fn bar2() -> u32 { unsafe { foo2() } } //~ ERROR can only call othe\n const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 } //~ ERROR only int, `bool` and `char` op\n \n // check whether this function cannot be called even with the feature gate active\n-#[unstable(feature = \"foo2\", issue=\"0\")]\n+#[unstable(feature = \"foo2\", issue = \"none\")]\n const unsafe fn foo2_gated() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "44a62094987373d2787b273d2a853d34f2749892", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,21 +1,21 @@\n #![unstable(feature = \"humans\",\n             reason = \"who ever let humans program computers,\n             we're apparently really bad at it\",\n-            issue = \"0\")]\n+            issue = \"none\")]\n \n #![feature(const_fn, foo, foo2)]\n #![feature(staged_api)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature=\"foo\", issue = \"0\")]\n+#[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n const fn foo() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n // can't call non-min_const_fn\n const unsafe fn bar() -> u32 { foo() } //~ ERROR can only call other `const fn`\n \n-#[unstable(feature = \"rust1\", issue=\"0\")]\n+#[unstable(feature = \"rust1\", issue = \"none\")]\n const fn foo2() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -24,7 +24,7 @@ const fn foo2() -> u32 { 42 }\n const unsafe fn bar2() -> u32 { foo2() } //~ ERROR can only call other `const fn`\n \n // check whether this function cannot be called even with the feature gate active\n-#[unstable(feature = \"foo2\", issue=\"0\")]\n+#[unstable(feature = \"foo2\", issue = \"none\")]\n const fn foo2_gated() -> u32 { 42 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "0b64786ccce5447826859841aaf8bf1a7764f4fe", "filename": "src/test/ui/consts/unstable-const-fn-in-libcore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Funstable-const-fn-in-libcore.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -14,7 +14,7 @@ enum Opt<T> {\n }\n \n impl<T> Opt<T> {\n-    #[rustc_const_unstable(feature = \"foo\", issue = \"0\")]\n+    #[rustc_const_unstable(feature = \"foo\", issue = \"none\")]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     const fn unwrap_or_else<F: FnOnce() -> T>(self, f: F) -> T {\n     //~^ ERROR destructors cannot be evaluated at compile-time"}, {"sha": "6ee7003c31ef7504a99cdd9e25f2e4d6f885432c", "filename": "src/test/ui/feature-gate/stability-attribute-consistency.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Ffeature-gate%2Fstability-attribute-consistency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Ffeature-gate%2Fstability-attribute-consistency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fstability-attribute-consistency.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -9,7 +9,7 @@ fn foo_stable_1_0_0() {}\n //~^ ERROR feature `foo` is declared stable since 1.29.0\n fn foo_stable_1_29_0() {}\n \n-#[unstable(feature = \"foo\", issue = \"0\")]\n+#[unstable(feature = \"foo\", issue = \"none\")]\n //~^ ERROR feature `foo` is declared unstable\n fn foo_unstable() {}\n "}, {"sha": "d49b44c8a3586c7e677ff76e8d0f42f154d12eaa", "filename": "src/test/ui/feature-gate/stability-attribute-consistency.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Ffeature-gate%2Fstability-attribute-consistency.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Ffeature-gate%2Fstability-attribute-consistency.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fstability-attribute-consistency.stderr?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -7,8 +7,8 @@ LL | #[stable(feature = \"foo\", since = \"1.29.0\")]\n error[E0711]: feature `foo` is declared unstable, but was previously declared stable\n   --> $DIR/stability-attribute-consistency.rs:12:1\n    |\n-LL | #[unstable(feature = \"foo\", issue = \"0\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[unstable(feature = \"foo\", issue = \"none\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "c8ad0d13a1413506ed9727a4fe1060cc83a2b60d", "filename": "src/test/ui/feature-gate/unstable-attribute-allow-issue-0.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,4 +1,4 @@\n-// Check that an issue value can be explicitly set to \"none\" instead of \"0\"\n+// Check that an issue value can be explicitly set to \"0\" instead of \"none\"\n #![crate_type = \"lib\"]\n #![feature(staged_api)]\n #![stable(feature = \"stable_test_feature\", since = \"1.0.0\")]", "previous_filename": "src/test/ui/feature-gate/unstable-attribute-allow-issue-none.rs"}, {"sha": "10bd6f373d928b85bc96d81ca4cc52c945e7ca31", "filename": "src/test/ui/feature-gate/unstable-attribute-allow-issue-0.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Funstable-attribute-allow-issue-0.stderr?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,5 +1,5 @@\n error[E0545]: incorrect 'issue'\n-  --> $DIR/unstable-attribute-allow-issue-none.rs:12:1\n+  --> $DIR/unstable-attribute-allow-issue-0.rs:12:1\n    |\n LL | #[unstable(feature = \"unstable_test_feature\", issue = \"something\")]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/feature-gate/unstable-attribute-allow-issue-none.stderr"}, {"sha": "148cbd1899eba85615f88a18892988abe6ec1773", "filename": "src/test/ui/internal/auxiliary/internal_unstable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Finternal%2Fauxiliary%2Finternal_unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Finternal%2Fauxiliary%2Finternal_unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Fauxiliary%2Finternal_unstable.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,24 +1,24 @@\n #![feature(staged_api, allow_internal_unstable)]\n #![stable(feature = \"stable\", since = \"1.0.0\")]\n \n-#[unstable(feature = \"function\", issue = \"0\")]\n+#[unstable(feature = \"function\", issue = \"none\")]\n pub fn unstable() {}\n \n \n #[stable(feature = \"stable\", since = \"1.0.0\")]\n pub struct Foo {\n-    #[unstable(feature = \"struct_field\", issue = \"0\")]\n+    #[unstable(feature = \"struct_field\", issue = \"none\")]\n     pub x: u8\n }\n \n impl Foo {\n-    #[unstable(feature = \"method\", issue = \"0\")]\n+    #[unstable(feature = \"method\", issue = \"none\")]\n     pub fn method(&self) {}\n }\n \n #[stable(feature = \"stable\", since = \"1.0.0\")]\n pub struct Bar {\n-    #[unstable(feature = \"struct2_field\", issue = \"0\")]\n+    #[unstable(feature = \"struct2_field\", issue = \"none\")]\n     pub x: u8\n }\n "}, {"sha": "f53bf7db52536404217f84ea57b1ff5d68179ef7", "filename": "src/test/ui/issues/auxiliary/issue-52489.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-52489.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-52489.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Fissue-52489.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,3 +1,3 @@\n #![crate_type = \"lib\"]\n-#![unstable(feature = \"issue_52489_unstable\", issue = \"0\")]\n+#![unstable(feature = \"issue_52489_unstable\", issue = \"none\")]\n #![feature(staged_api)]"}, {"sha": "de4058887cffd786bc2f9eb9cc09bf1673bcb94a", "filename": "src/test/ui/issues/auxiliary/lint-stability.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fauxiliary%2Flint-stability.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -15,16 +15,16 @@ pub fn deprecated_text() {}\n #[rustc_deprecated(since = \"99.99.99\", reason = \"text\")]\n pub fn deprecated_future() {}\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated_unstable() {}\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated_unstable_text() {}\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub fn unstable() {}\n-#[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n pub fn unstable_text() {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -43,16 +43,16 @@ impl MethodTester {\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_text(&self) {}\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_unstable(&self) {}\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_unstable_text(&self) {}\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub fn method_unstable(&self) {}\n-    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n     pub fn method_unstable_text(&self) {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -70,16 +70,16 @@ pub trait Trait {\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_text(&self) {}\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_unstable(&self) {}\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_unstable_text(&self) {}\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     fn trait_unstable(&self) {}\n-    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n     fn trait_unstable_text(&self) {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -90,7 +90,7 @@ pub trait Trait {\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub trait TraitWithAssociatedTypes {\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     type TypeUnstable = u8;\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n@@ -100,7 +100,7 @@ pub trait TraitWithAssociatedTypes {\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n impl Trait for MethodTester {}\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub trait UnstableTrait { fn dummy(&self) { } }\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n@@ -114,31 +114,31 @@ pub trait DeprecatedTrait {\n pub struct DeprecatedStruct {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnstableStruct {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub struct UnstableStruct {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableStruct {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub enum UnstableEnum {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum StableEnum {}\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnitStruct;\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnstableUnitStruct;\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub struct UnstableUnitStruct;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableUnitStruct;\n@@ -148,10 +148,10 @@ pub enum Enum {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     DeprecatedVariant,\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     DeprecatedUnstableVariant,\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     UnstableVariant,\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -161,10 +161,10 @@ pub enum Enum {\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub struct UnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);"}, {"sha": "65f2f8fc5ac6cce6be5596a61945bcd3902afc1e", "filename": "src/test/ui/issues/issue-17337.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fissues%2Fissue-17337.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fissues%2Fissue-17337.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17337.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,12 +1,12 @@\n #![feature(staged_api)]\n #![deny(deprecated)]\n \n-#![unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#![unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n \n struct Foo;\n \n impl Foo {\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn foo(self) {}\n }"}, {"sha": "1e7eb26fde2725abe6834b2d4d22e15b2bb7a41a", "filename": "src/test/ui/lint/auxiliary/inherited_stability.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Finherited_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Finherited_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Finherited_stability.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,6 +1,6 @@\n #![crate_name=\"inherited_stability\"]\n #![crate_type = \"lib\"]\n-#![unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#![unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n #![feature(staged_api)]\n \n pub fn unstable() {}\n@@ -10,14 +10,14 @@ pub fn stable() {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod stable_mod {\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub fn unstable() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn stable() {}\n }\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub mod unstable_mod {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n@@ -28,7 +28,7 @@ pub mod unstable_mod {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Stable {\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     fn unstable(&self);\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "58cae180196d360ea03b9511e4f57938feba8d52", "filename": "src/test/ui/lint/auxiliary/lint_output_format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_output_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_output_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_output_format.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,20 +1,20 @@\n #![crate_name=\"lint_output_format\"]\n #![crate_type = \"lib\"]\n #![feature(staged_api)]\n-#![unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#![unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn foo() -> usize {\n     20\n }\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub fn bar() -> usize {\n     40\n }\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub fn baz() -> usize {\n     30\n }"}, {"sha": "de4058887cffd786bc2f9eb9cc09bf1673bcb94a", "filename": "src/test/ui/lint/auxiliary/lint_stability.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_stability.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -15,16 +15,16 @@ pub fn deprecated_text() {}\n #[rustc_deprecated(since = \"99.99.99\", reason = \"text\")]\n pub fn deprecated_future() {}\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated_unstable() {}\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub fn deprecated_unstable_text() {}\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub fn unstable() {}\n-#[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n pub fn unstable_text() {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -43,16 +43,16 @@ impl MethodTester {\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_text(&self) {}\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_unstable(&self) {}\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn method_deprecated_unstable_text(&self) {}\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub fn method_unstable(&self) {}\n-    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n     pub fn method_unstable_text(&self) {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -70,16 +70,16 @@ pub trait Trait {\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_text(&self) {}\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_unstable(&self) {}\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn trait_deprecated_unstable_text(&self) {}\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     fn trait_unstable(&self) {}\n-    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n     fn trait_unstable_text(&self) {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -90,7 +90,7 @@ pub trait Trait {\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n pub trait TraitWithAssociatedTypes {\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     type TypeUnstable = u8;\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n@@ -100,7 +100,7 @@ pub trait TraitWithAssociatedTypes {\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n impl Trait for MethodTester {}\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub trait UnstableTrait { fn dummy(&self) { } }\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n@@ -114,31 +114,31 @@ pub trait DeprecatedTrait {\n pub struct DeprecatedStruct {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnstableStruct {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub struct UnstableStruct {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableStruct {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] pub i: isize\n }\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub enum UnstableEnum {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub enum StableEnum {}\n \n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnitStruct;\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnstableUnitStruct;\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub struct UnstableUnitStruct;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableUnitStruct;\n@@ -148,10 +148,10 @@ pub enum Enum {\n     #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     DeprecatedVariant,\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     DeprecatedUnstableVariant,\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     UnstableVariant,\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -161,10 +161,10 @@ pub enum Enum {\n #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct DeprecatedUnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub struct UnstableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StableTupleStruct(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub isize);"}, {"sha": "0efe7686ef76a43ea676b63e495d7e2d9f946071", "filename": "src/test/ui/lint/auxiliary/lint_stability_fields.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_stability_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_stability_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Flint_stability_fields.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -5,47 +5,47 @@\n pub struct Stable {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub inherit: u8, // it's a lie (stable doesn't inherit)\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub override1: u8,\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub override2: u8,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stable2(#[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n-                   #[unstable(feature = \"unstable_test_feature\", issue = \"0\")] pub u8,\n-                   #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+                   #[unstable(feature = \"unstable_test_feature\", issue = \"none\")] pub u8,\n+                   #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n                    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] pub u8);\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub struct Unstable {\n     pub inherit: u8,\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub override1: u8,\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub override2: u8,\n }\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub struct Unstable2(pub u8,\n                      #[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n-                     #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+                     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n                      #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] pub u8);\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct Deprecated {\n     pub inherit: u8,\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub override1: u8,\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub override2: u8,\n }\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n pub struct Deprecated2(pub u8,\n                        #[stable(feature = \"rust1\", since = \"1.0.0\")] pub u8,\n-                       #[unstable(feature = \"unstable_test_feature\", issue = \"0\")] pub u8);\n+                       #[unstable(feature = \"unstable_test_feature\", issue = \"none\")] pub u8);"}, {"sha": "c995038e5a8a7271296466148f4186afe1483692", "filename": "src/test/ui/lint/auxiliary/stability-cfg2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Fstability-cfg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Fstability-cfg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Fstability-cfg2.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:--cfg foo\n \n-#![cfg_attr(foo, unstable(feature = \"unstable_test_feature\", issue = \"0\"))]\n+#![cfg_attr(foo, unstable(feature = \"unstable_test_feature\", issue = \"none\"))]\n #![cfg_attr(not(foo), stable(feature = \"test_feature\", since = \"1.0.0\"))]\n #![feature(staged_api)]"}, {"sha": "c995038e5a8a7271296466148f4186afe1483692", "filename": "src/test/ui/lint/auxiliary/stability_cfg2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Fstability_cfg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Fstability_cfg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fauxiliary%2Fstability_cfg2.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -1,5 +1,5 @@\n // compile-flags:--cfg foo\n \n-#![cfg_attr(foo, unstable(feature = \"unstable_test_feature\", issue = \"0\"))]\n+#![cfg_attr(foo, unstable(feature = \"unstable_test_feature\", issue = \"none\"))]\n #![cfg_attr(not(foo), stable(feature = \"test_feature\", since = \"1.0.0\"))]\n #![feature(staged_api)]"}, {"sha": "2a4f95f555fd995a2428def9393f8cfc6c0f9e7c", "filename": "src/test/ui/lint/lint-stability-2.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Flint-stability-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Flint-stability-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-2.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -168,16 +168,16 @@ mod cross_crate {\n }\n \n mod this_crate {\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated() {}\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated_text() {}\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub fn unstable() {}\n-    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n     pub fn unstable_text() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -189,16 +189,16 @@ mod this_crate {\n     pub struct MethodTester;\n \n     impl MethodTester {\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated(&self) {}\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated_text(&self) {}\n \n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         pub fn method_unstable(&self) {}\n-        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n         pub fn method_unstable_text(&self) {}\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -208,16 +208,16 @@ mod this_crate {\n     }\n \n     pub trait Trait {\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated(&self) {}\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated_text(&self) {}\n \n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         fn trait_unstable(&self) {}\n-        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n         fn trait_unstable_text(&self) {}\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -228,12 +228,12 @@ mod this_crate {\n \n     impl Trait for MethodTester {}\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedStruct {\n         #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableStruct {\n         #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n@@ -242,29 +242,29 @@ mod this_crate {\n         #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedUnitStruct;\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableUnitStruct;\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableUnitStruct;\n \n     pub enum Enum {\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         DeprecatedVariant,\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         UnstableVariant,\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         StableVariant,\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedTupleStruct(isize);\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableTupleStruct(isize);\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableTupleStruct(isize);\n@@ -381,23 +381,23 @@ mod this_crate {\n         foo.trait_stable();\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n         fn_in_body();\n     }\n \n     impl MethodTester {\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n             fn_in_body();\n         }\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub trait DeprecatedTrait {\n         fn dummy(&self) { }"}, {"sha": "0585fec99b418c37ee7270587f62dbd65b70f4f4", "filename": "src/test/ui/lint/lint-stability-deprecated.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-deprecated.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -216,16 +216,16 @@ mod inheritance {\n }\n \n mod this_crate {\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated() {}\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated_text() {}\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub fn unstable() {}\n-    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n     pub fn unstable_text() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -237,16 +237,16 @@ mod this_crate {\n     pub struct MethodTester;\n \n     impl MethodTester {\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated(&self) {}\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated_text(&self) {}\n \n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         pub fn method_unstable(&self) {}\n-        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n         pub fn method_unstable_text(&self) {}\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -256,16 +256,16 @@ mod this_crate {\n     }\n \n     pub trait Trait {\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated(&self) {}\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated_text(&self) {}\n \n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         fn trait_unstable(&self) {}\n-        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n         fn trait_unstable_text(&self) {}\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -276,12 +276,12 @@ mod this_crate {\n \n     impl Trait for MethodTester {}\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedStruct {\n         #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableStruct {\n         #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n@@ -290,29 +290,29 @@ mod this_crate {\n         #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedUnitStruct;\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableUnitStruct;\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableUnitStruct;\n \n     pub enum Enum {\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         DeprecatedVariant,\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         UnstableVariant,\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         StableVariant,\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedTupleStruct(isize);\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableTupleStruct(isize);\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableTupleStruct(isize);\n@@ -430,23 +430,23 @@ mod this_crate {\n         foo.trait_stable();\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n         fn_in_body(); //~ WARN use of deprecated item 'this_crate::test_fn_body::fn_in_body': text\n     }\n \n     impl MethodTester {\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n             fn_in_body(); //~ WARN use of deprecated item 'this_crate::MethodTester::test_method_body::fn_in_body': text\n         }\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub trait DeprecatedTrait {\n         fn dummy(&self) { }"}, {"sha": "50e3970c7f0d479606b1140e23f82313b1195133", "filename": "src/test/ui/lint/lint-stability-fields-deprecated.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Flint-stability-fields-deprecated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Flint-stability-fields-deprecated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-fields-deprecated.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -153,50 +153,50 @@ mod this_crate {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     struct Stable {\n         inherit: u8,\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         override1: u8,\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         override2: u8,\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     struct Stable2(u8,\n                    #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                   #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+                   #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n                    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     struct Unstable {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         override1: u8,\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         override2: u8,\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     struct Unstable2(u8,\n                      #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                     #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+                     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n                      #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     struct Deprecated {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         override1: u8,\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         override2: u8,\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     struct Deprecated2(u8,\n                        #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                       #[unstable(feature = \"unstable_test_feature\", issue = \"0\")] u8);\n+                       #[unstable(feature = \"unstable_test_feature\", issue = \"none\")] u8);\n \n     pub fn foo() {\n         let x = Stable {"}, {"sha": "c5de5748aa300637cca4dd6762988ddc96ccc559", "filename": "src/test/ui/lint/lint-stability-fields.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Flint-stability-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Flint-stability-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability-fields.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -128,50 +128,50 @@ mod this_crate {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     struct Stable {\n         inherit: u8,\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         override1: u8,\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         override2: u8,\n     }\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     struct Stable2(u8,\n                    #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                   #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+                   #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n                    #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     struct Unstable {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         override1: u8,\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         override2: u8,\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     struct Unstable2(u8,\n                      #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                     #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+                     #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n                      #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")] u8);\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     struct Deprecated {\n         inherit: u8,\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         override1: u8,\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         override2: u8,\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     struct Deprecated2(u8,\n                        #[stable(feature = \"rust1\", since = \"1.0.0\")] u8,\n-                       #[unstable(feature = \"unstable_test_feature\", issue = \"0\")] u8);\n+                       #[unstable(feature = \"unstable_test_feature\", issue = \"none\")] u8);\n \n     pub fn foo() {\n         let x = Stable {"}, {"sha": "e5620a9f8e710d37de55464758315f8b15416dc0", "filename": "src/test/ui/lint/lint-stability.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Flint%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-stability.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -203,20 +203,20 @@ mod inheritance {\n }\n \n mod this_crate {\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated() {}\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub fn deprecated_text() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(since = \"99.99.99\", reason = \"text\")]\n     pub fn deprecated_future() {}\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub fn unstable() {}\n-    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n     pub fn unstable_text() {}\n \n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -228,16 +228,16 @@ mod this_crate {\n     pub struct MethodTester;\n \n     impl MethodTester {\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated(&self) {}\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         pub fn method_deprecated_text(&self) {}\n \n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         pub fn method_unstable(&self) {}\n-        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n         pub fn method_unstable_text(&self) {}\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -247,16 +247,16 @@ mod this_crate {\n     }\n \n     pub trait Trait {\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated(&self) {}\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn trait_deprecated_text(&self) {}\n \n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         fn trait_unstable(&self) {}\n-        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", reason = \"text\", issue = \"none\")]\n         fn trait_unstable_text(&self) {}\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -267,12 +267,12 @@ mod this_crate {\n \n     impl Trait for MethodTester {}\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedStruct {\n         #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableStruct {\n         #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n@@ -281,29 +281,29 @@ mod this_crate {\n         #[stable(feature = \"stable_test_feature\", since = \"1.0.0\")] i: isize\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedUnitStruct;\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableUnitStruct;\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableUnitStruct;\n \n     pub enum Enum {\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         DeprecatedVariant,\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         UnstableVariant,\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         StableVariant,\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub struct DeprecatedTupleStruct(isize);\n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     pub struct UnstableTupleStruct(isize);\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub struct StableTupleStruct(isize);\n@@ -422,23 +422,23 @@ mod this_crate {\n         foo.trait_stable();\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     fn test_fn_body() {\n         fn fn_in_body() {}\n         fn_in_body();\n     }\n \n     impl MethodTester {\n-        #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+        #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n         #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n         fn test_method_body(&self) {\n             fn fn_in_body() {}\n             fn_in_body();\n         }\n     }\n \n-    #[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+    #[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n     #[rustc_deprecated(since = \"1.0.0\", reason = \"text\")]\n     pub trait DeprecatedTrait {\n         fn dummy(&self) { }"}, {"sha": "123e244a53eb44dc220e5caa11bab06fa203184a", "filename": "src/test/ui/macros/auxiliary/unstable-macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Funstable-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Funstable-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fauxiliary%2Funstable-macros.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -2,7 +2,7 @@\n #![feature(staged_api)]\n #![stable(feature = \"unit_test\", since = \"1.0.0\")]\n \n-#[unstable(feature = \"unstable_macros\", issue = \"0\")]\n+#[unstable(feature = \"unstable_macros\", issue = \"none\")]\n #[macro_export]\n macro_rules! unstable_macro{ () => () }\n \n@@ -12,5 +12,5 @@ macro_rules! unstable_macro{ () => () }\n macro_rules! deprecated_macro{ () => () }\n \n // FIXME: Cannot use a `pub` macro 2.0 in a staged API crate due to reachability issues.\n-// #[unstable(feature = \"unstable_macros\", issue = \"0\")]\n+// #[unstable(feature = \"unstable_macros\", issue = \"none\")]\n // pub macro unstable_macro_modern() {}"}, {"sha": "a5f538ba6b36acae48dcc2598a99d04b059214b0", "filename": "src/test/ui/macros/macro-stability-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability-rpass.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -5,7 +5,7 @@\n \n #[macro_use] extern crate unstable_macros;\n \n-#[unstable(feature = \"local_unstable\", issue = \"0\")]\n+#[unstable(feature = \"local_unstable\", issue = \"none\")]\n macro_rules! local_unstable { () => () }\n \n fn main() {"}, {"sha": "755f55c28de4756d52e64bfa6cde8759113e00d5", "filename": "src/test/ui/macros/macro-stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-stability.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -4,10 +4,10 @@\n #![feature(staged_api)]\n #[macro_use] extern crate unstable_macros;\n \n-#[unstable(feature = \"local_unstable\", issue = \"0\")]\n+#[unstable(feature = \"local_unstable\", issue = \"none\")]\n macro_rules! local_unstable { () => () }\n \n-#[unstable(feature = \"local_unstable\", issue = \"0\")]\n+#[unstable(feature = \"local_unstable\", issue = \"none\")]\n macro local_unstable_modern() {}\n \n #[stable(feature = \"deprecated_macros\", since = \"1.0.0\")]"}, {"sha": "0da5808b47dc292d99e8e565bdc605e73f92b523", "filename": "src/test/ui/missing/missing-stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fmissing%2Fmissing-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fmissing%2Fmissing-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-stability.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -10,7 +10,7 @@ pub fn unmarked() {\n     ()\n }\n \n-#[unstable(feature = \"unstable_test_feature\", issue = \"0\")]\n+#[unstable(feature = \"unstable_test_feature\", issue = \"none\")]\n pub mod foo {\n     // #[unstable] is inherited\n     pub fn unmarked() {}"}, {"sha": "5db924642e59df3d1f021b83f2f240d0529eef56", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -22,7 +22,7 @@ mod bogus_attribute_types_1 {\n }\n \n mod missing_feature_names {\n-    #[unstable(issue = \"0\")] //~ ERROR missing 'feature' [E0546]\n+    #[unstable(issue = \"none\")] //~ ERROR missing 'feature' [E0546]\n     fn f1() { }\n \n     #[unstable(feature = \"b\")] //~ ERROR missing 'issue' [E0547]\n@@ -45,12 +45,12 @@ mod missing_version {\n     fn f3() { }\n }\n \n-#[unstable(feature = \"b\", issue = \"0\")]\n+#[unstable(feature = \"b\", issue = \"none\")]\n #[stable(feature = \"a\", since = \"b\")] //~ ERROR multiple stability levels [E0544]\n fn multiple1() { }\n \n-#[unstable(feature = \"b\", issue = \"0\")]\n-#[unstable(feature = \"b\", issue = \"0\")] //~ ERROR multiple stability levels [E0544]\n+#[unstable(feature = \"b\", issue = \"none\")]\n+#[unstable(feature = \"b\", issue = \"none\")] //~ ERROR multiple stability levels [E0544]\n fn multiple2() { }\n \n #[stable(feature = \"a\", since = \"b\")]\n@@ -60,8 +60,8 @@ fn multiple3() { }\n #[stable(feature = \"a\", since = \"b\")]\n #[rustc_deprecated(since = \"b\", reason = \"text\")]\n #[rustc_deprecated(since = \"b\", reason = \"text\")]\n-#[rustc_const_unstable(feature = \"c\", issue = \"0\")]\n-#[rustc_const_unstable(feature = \"d\", issue = \"0\")] //~ ERROR multiple stability levels\n+#[rustc_const_unstable(feature = \"c\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"d\", issue = \"none\")] //~ ERROR multiple stability levels\n pub const fn multiple4() { } //~ ERROR multiple rustc_deprecated attributes [E0540]\n //~^ ERROR Invalid stability or deprecation version found\n "}, {"sha": "d0ca1705037960bcd3ae03ac7d5cb9691211a706", "filename": "src/test/ui/stability-attribute/stability-attribute-sanity.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-sanity.stderr?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -31,8 +31,8 @@ LL |     #[stable(feature(b), since = \"a\")]\n error[E0546]: missing 'feature'\n   --> $DIR/stability-attribute-sanity.rs:25:5\n    |\n-LL |     #[unstable(issue = \"0\")]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[unstable(issue = \"none\")]\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0547]: missing 'issue'\n   --> $DIR/stability-attribute-sanity.rs:28:5\n@@ -73,8 +73,8 @@ LL | #[stable(feature = \"a\", since = \"b\")]\n error[E0544]: multiple stability levels\n   --> $DIR/stability-attribute-sanity.rs:53:1\n    |\n-LL | #[unstable(feature = \"b\", issue = \"0\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[unstable(feature = \"b\", issue = \"none\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0544]: multiple stability levels\n   --> $DIR/stability-attribute-sanity.rs:57:1\n@@ -91,8 +91,8 @@ LL | pub const fn multiple4() { }\n error[E0544]: multiple stability levels\n   --> $DIR/stability-attribute-sanity.rs:64:1\n    |\n-LL | #[rustc_const_unstable(feature = \"d\", issue = \"0\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #[rustc_const_unstable(feature = \"d\", issue = \"none\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: Invalid stability or deprecation version found\n   --> $DIR/stability-attribute-sanity.rs:65:1"}, {"sha": "82292a6912c646c92aed7e7ca6727d61b3f35d3b", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -12,6 +12,7 @@\n use std::collections::HashMap;\n use std::fmt;\n use std::fs;\n+use std::num::NonZeroU32;\n use std::path::Path;\n \n use regex::Regex;\n@@ -48,7 +49,7 @@ pub struct Feature {\n     pub level: Status,\n     pub since: Option<Version>,\n     pub has_gate_test: bool,\n-    pub tracking_issue: Option<u32>,\n+    pub tracking_issue: Option<NonZeroU32>,\n }\n \n pub type Features = HashMap<String, Feature>;\n@@ -396,6 +397,14 @@ fn map_lib_features(base_src_path: &Path,\n             return;\n         }\n \n+        let handle_issue_none = |s| match s {\n+            \"none\" => None,\n+            issue => {\n+                let n = issue.parse().expect(\"issue number is not a valid integer\");\n+                assert_ne!(n, 0, \"\\\"none\\\" should be used when there is no issue, not \\\"0\\\"\");\n+                NonZeroU32::new(n)\n+            }\n+        };\n         let mut becoming_feature: Option<(&str, Feature)> = None;\n         let mut iter_lines = contents.lines().enumerate().peekable();\n         while let Some((i, line)) = iter_lines.next() {\n@@ -407,8 +416,7 @@ fn map_lib_features(base_src_path: &Path,\n             };\n             if let Some((ref name, ref mut f)) = becoming_feature {\n                 if f.tracking_issue.is_none() {\n-                    f.tracking_issue = find_attr_val(line, \"issue\")\n-                    .map(|s| s.parse().unwrap());\n+                    f.tracking_issue = find_attr_val(line, \"issue\").and_then(handle_issue_none);\n                 }\n                 if line.ends_with(']') {\n                     mf(Ok((name, f.clone())), file, i + 1);\n@@ -439,7 +447,7 @@ fn map_lib_features(base_src_path: &Path,\n                     // FIXME(#57563): #57563 is now used as a common tracking issue,\n                     // although we would like to have specific tracking issues for each\n                     // `rustc_const_unstable` in the future.\n-                    tracking_issue: Some(57563),\n+                    tracking_issue: NonZeroU32::new(57563),\n                 };\n                 mf(Ok((feature_name, feature)), file, i + 1);\n                 continue;\n@@ -467,7 +475,7 @@ fn map_lib_features(base_src_path: &Path,\n                 }\n                 None => None,\n             };\n-            let tracking_issue = find_attr_val(line, \"issue\").map(|s| s.parse().unwrap());\n+            let tracking_issue = find_attr_val(line, \"issue\").and_then(handle_issue_none);\n \n             let feature = Feature {\n                 level,"}, {"sha": "39e8d61edeb09e54deb72202945a0ec7c120d365", "filename": "src/tools/unstable-book-gen/src/main.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaeb1138c6e4956a416e161ffc03eaf7db832101/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funstable-book-gen%2Fsrc%2Fmain.rs?ref=eaeb1138c6e4956a416e161ffc03eaf7db832101", "patch": "@@ -2,7 +2,7 @@\n \n #![deny(warnings)]\n \n-use tidy::features::{Feature, Features, collect_lib_features, collect_lang_features};\n+use tidy::features::{Features, collect_lib_features, collect_lang_features};\n use tidy::unstable_book::{collect_unstable_feature_names, collect_unstable_book_section_file_names,\n                           PATH_STR, LANG_FEATURES_DIR, LIB_FEATURES_DIR};\n use std::collections::BTreeSet;\n@@ -70,15 +70,6 @@ fn generate_summary(path: &Path, lang_features: &Features, lib_features: &Featur\n \n }\n \n-fn has_valid_tracking_issue(f: &Feature) -> bool {\n-    if let Some(n) = f.tracking_issue {\n-        if n > 0 {\n-            return true;\n-        }\n-    }\n-    false\n-}\n-\n fn generate_unstable_book_files(src :&Path, out: &Path, features :&Features) {\n     let unstable_features = collect_unstable_feature_names(features);\n     let unstable_section_file_names = collect_unstable_book_section_file_names(src);\n@@ -89,10 +80,10 @@ fn generate_unstable_book_files(src :&Path, out: &Path, features :&Features) {\n         let out_file_path = out.join(&file_name);\n         let feature = &features[&feature_name_underscore];\n \n-        if has_valid_tracking_issue(&feature) {\n+        if let Some(issue) = feature.tracking_issue {\n             generate_stub_issue(&out_file_path,\n                                 &feature_name_underscore,\n-                                feature.tracking_issue.unwrap());\n+                                issue.get());\n         } else {\n             generate_stub_no_issue(&out_file_path, &feature_name_underscore);\n         }"}]}