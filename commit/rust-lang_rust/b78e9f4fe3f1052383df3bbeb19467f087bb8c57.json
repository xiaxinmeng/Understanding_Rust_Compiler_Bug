{"sha": "b78e9f4fe3f1052383df3bbeb19467f087bb8c57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OGU5ZjRmZTNmMTA1MjM4M2RmM2JiZWIxOTQ2N2YwODdiYjhjNTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-24T04:55:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-24T04:55:58Z"}, "message": "Rollup merge of #58442 - cuviper:unix-weak, r=alexcrichton\n\nSimplify the unix `Weak` functionality\n\n- We can avoid allocation by adding a NUL to the function name.\n- We can get `Option<F>` directly, rather than aliasing the inner `AtomicUsize`.", "tree": {"sha": "eaf0722cdd54facdc63290ed6660b7ebef29b487", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eaf0722cdd54facdc63290ed6660b7ebef29b487"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b78e9f4fe3f1052383df3bbeb19467f087bb8c57", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcciPeCRBK7hj4Ov3rIwAAdHIIABNb4iG+LODjFMRybMXTFMu0\nN/kCGxFCch2Dkmz7SGkm7CDTy6rDP01jBUsn7KhTiXeKfDHPVzL344U0+24EI5f/\nEGNWtj786y/DNXW2O3RZDJ9U31yqC4VSe6qYCS1Z9EGMZBn/M5D+SCa7HCribbET\nEaUjt9CBQ6t8hVFTEkDHnPGMl8+wmHNjYZiQAesZ28XDadXrg3FXUt7J599766RG\nwKj/4A3HdbnovheGSSbzS1E1gGxGBgDTSilNE7a05XYzKnr8SbHc8PHNpmVnuBYf\naxSSTYyMYZZJUNngmgFFk2AHWkKsfPWRE+PI9AuHJ96AIHVZRgAz2sZkFIdt5I4=\n=UF8X\n-----END PGP SIGNATURE-----\n", "payload": "tree eaf0722cdd54facdc63290ed6660b7ebef29b487\nparent 55b5ab83592d607a6ba8793ac76bedadb05e5bab\nparent 33d80bfaa0f2a4ca996a942e6d65a932e72fec1b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550984158 +0100\ncommitter GitHub <noreply@github.com> 1550984158 +0100\n\nRollup merge of #58442 - cuviper:unix-weak, r=alexcrichton\n\nSimplify the unix `Weak` functionality\n\n- We can avoid allocation by adding a NUL to the function name.\n- We can get `Option<F>` directly, rather than aliasing the inner `AtomicUsize`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b78e9f4fe3f1052383df3bbeb19467f087bb8c57", "html_url": "https://github.com/rust-lang/rust/commit/b78e9f4fe3f1052383df3bbeb19467f087bb8c57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b78e9f4fe3f1052383df3bbeb19467f087bb8c57/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55b5ab83592d607a6ba8793ac76bedadb05e5bab", "url": "https://api.github.com/repos/rust-lang/rust/commits/55b5ab83592d607a6ba8793ac76bedadb05e5bab", "html_url": "https://github.com/rust-lang/rust/commit/55b5ab83592d607a6ba8793ac76bedadb05e5bab"}, {"sha": "33d80bfaa0f2a4ca996a942e6d65a932e72fec1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/33d80bfaa0f2a4ca996a942e6d65a932e72fec1b", "html_url": "https://github.com/rust-lang/rust/commit/33d80bfaa0f2a4ca996a942e6d65a932e72fec1b"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "b60e241f10ceee698ddfcf65acbad46ae76b967f", "filename": "src/libstd/sys/unix/weak.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b78e9f4fe3f1052383df3bbeb19467f087bb8c57/src%2Flibstd%2Fsys%2Funix%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78e9f4fe3f1052383df3bbeb19467f087bb8c57/src%2Flibstd%2Fsys%2Funix%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fweak.rs?ref=b78e9f4fe3f1052383df3bbeb19467f087bb8c57", "patch": "@@ -18,15 +18,15 @@\n \n use libc;\n \n-use ffi::CString;\n+use ffi::CStr;\n use marker;\n use mem;\n use sync::atomic::{AtomicUsize, Ordering};\n \n macro_rules! weak {\n     (fn $name:ident($($t:ty),*) -> $ret:ty) => (\n         static $name: ::sys::weak::Weak<unsafe extern fn($($t),*) -> $ret> =\n-            ::sys::weak::Weak::new(stringify!($name));\n+            ::sys::weak::Weak::new(concat!(stringify!($name), '\\0'));\n     )\n }\n \n@@ -45,23 +45,22 @@ impl<F> Weak<F> {\n         }\n     }\n \n-    pub fn get(&self) -> Option<&F> {\n+    pub fn get(&self) -> Option<F> {\n         assert_eq!(mem::size_of::<F>(), mem::size_of::<usize>());\n         unsafe {\n             if self.addr.load(Ordering::SeqCst) == 1 {\n                 self.addr.store(fetch(self.name), Ordering::SeqCst);\n             }\n-            if self.addr.load(Ordering::SeqCst) == 0 {\n-                None\n-            } else {\n-                mem::transmute::<&AtomicUsize, Option<&F>>(&self.addr)\n+            match self.addr.load(Ordering::SeqCst) {\n+                0 => None,\n+                addr => Some(mem::transmute_copy::<usize, F>(&addr)),\n             }\n         }\n     }\n }\n \n unsafe fn fetch(name: &str) -> usize {\n-    let name = match CString::new(name) {\n+    let name = match CStr::from_bytes_with_nul(name.as_bytes()) {\n         Ok(cstr) => cstr,\n         Err(..) => return 0,\n     };"}]}