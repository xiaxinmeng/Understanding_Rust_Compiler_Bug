{"sha": "caacef29e6ad63d6b588715e809e78286d29db3f", "node_id": "C_kwDOAAsO6NoAKGNhYWNlZjI5ZTZhZDYzZDZiNTg4NzE1ZTgwOWU3ODI4NmQyOWRiM2Y", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-11T14:14:14Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-11T14:14:14Z"}, "message": "Retry downloads on network failure\n\nFixes #1280", "tree": {"sha": "96556be9f7d9c996d6bece2da168ead4ee059bab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96556be9f7d9c996d6bece2da168ead4ee059bab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/caacef29e6ad63d6b588715e809e78286d29db3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/caacef29e6ad63d6b588715e809e78286d29db3f", "html_url": "https://github.com/rust-lang/rust/commit/caacef29e6ad63d6b588715e809e78286d29db3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/caacef29e6ad63d6b588715e809e78286d29db3f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb788e375ad110fdcf6b0333745bf2cab29054ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb788e375ad110fdcf6b0333745bf2cab29054ee", "html_url": "https://github.com/rust-lang/rust/commit/fb788e375ad110fdcf6b0333745bf2cab29054ee"}], "stats": {"total": 36, "additions": 33, "deletions": 3}, "files": [{"sha": "106b06296b4b902767cf37ddd58ddb3e0a5496dc", "filename": "build_system/prepare.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/caacef29e6ad63d6b588715e809e78286d29db3f/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caacef29e6ad63d6b588715e809e78286d29db3f/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=caacef29e6ad63d6b588715e809e78286d29db3f", "patch": "@@ -8,7 +8,7 @@ use crate::build_system::rustc_info::get_default_sysroot;\n use super::build_sysroot::{BUILD_SYSROOT, ORIG_BUILD_SYSROOT, SYSROOT_RUSTC_VERSION, SYSROOT_SRC};\n use super::path::{Dirs, RelPath};\n use super::rustc_info::{get_file_name, get_rustc_version};\n-use super::utils::{copy_dir_recursively, spawn_and_wait, Compiler};\n+use super::utils::{copy_dir_recursively, retry_spawn_and_wait, spawn_and_wait, Compiler};\n \n pub(crate) fn prepare(dirs: &Dirs) {\n     if RelPath::DOWNLOAD.to_path(dirs).exists() {\n@@ -140,8 +140,22 @@ fn clone_repo_shallow_github(dirs: &Dirs, download_dir: &Path, user: &str, repo:\n \n     // Download zip archive\n     let mut download_cmd = Command::new(\"curl\");\n-    download_cmd.arg(\"--location\").arg(\"--output\").arg(&archive_file).arg(archive_url);\n-    spawn_and_wait(download_cmd);\n+    download_cmd\n+        .arg(\"--max-time\")\n+        .arg(\"600\")\n+        .arg(\"-y\")\n+        .arg(\"30\")\n+        .arg(\"-Y\")\n+        .arg(\"10\")\n+        .arg(\"--connect-timeout\")\n+        .arg(\"30\")\n+        .arg(\"--continue-at\")\n+        .arg(\"-\")\n+        .arg(\"--location\")\n+        .arg(\"--output\")\n+        .arg(&archive_file)\n+        .arg(archive_url);\n+    retry_spawn_and_wait(5, download_cmd);\n \n     // Unpack tar archive\n     let mut unpack_cmd = Command::new(\"tar\");"}, {"sha": "3c27af0196e7fb3354db47e81671ccb8334ce1f1", "filename": "build_system/utils.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/caacef29e6ad63d6b588715e809e78286d29db3f/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/caacef29e6ad63d6b588715e809e78286d29db3f/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=caacef29e6ad63d6b588715e809e78286d29db3f", "patch": "@@ -188,6 +188,22 @@ pub(crate) fn spawn_and_wait(mut cmd: Command) {\n     }\n }\n \n+// Based on the retry function in rust's src/ci/shared.sh\n+#[track_caller]\n+pub(crate) fn retry_spawn_and_wait(tries: u64, mut cmd: Command) {\n+    for i in 1..tries+1 {\n+        if i != 1 {\n+            println!(\"Command failed. Attempt {i}/{tries}:\");\n+        }\n+        if cmd.spawn().unwrap().wait().unwrap().success() {\n+            return;\n+        }\n+        std::thread::sleep(std::time::Duration::from_secs(i * 5));\n+    }\n+    println!(\"The command has failed after {tries} attempts.\");\n+    process::exit(1);\n+}\n+\n #[track_caller]\n pub(crate) fn spawn_and_wait_with_input(mut cmd: Command, input: String) -> String {\n     let mut child = cmd"}]}