{"sha": "fdfb532d7829d6e5637ddffa6faff69e4312b0e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZmI1MzJkNzgyOWQ2ZTU2MzdkZGZmYTZmYWZmNjllNDMxMmIwZTA=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-17T15:41:40Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-24T12:16:02Z"}, "message": "tests: remove warnings from and rename const-polymorphic-paths to ufcs-polymorphic-paths.", "tree": {"sha": "f4fee013c3ee0a393d4b7f0af190c3c52920c012", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4fee013c3ee0a393d4b7f0af190c3c52920c012"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdfb532d7829d6e5637ddffa6faff69e4312b0e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdfb532d7829d6e5637ddffa6faff69e4312b0e0", "html_url": "https://github.com/rust-lang/rust/commit/fdfb532d7829d6e5637ddffa6faff69e4312b0e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdfb532d7829d6e5637ddffa6faff69e4312b0e0/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a6a9ed792dd2a716ef583a50051a52a17574efc", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6a9ed792dd2a716ef583a50051a52a17574efc", "html_url": "https://github.com/rust-lang/rust/commit/5a6a9ed792dd2a716ef583a50051a52a17574efc"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "277aaf086f4195b2b169230b4a36d130fc932dd9", "filename": "src/test/run-pass/ufcs-polymorphic-paths.rs", "status": "renamed", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fdfb532d7829d6e5637ddffa6faff69e4312b0e0/src%2Ftest%2Frun-pass%2Fufcs-polymorphic-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdfb532d7829d6e5637ddffa6faff69e4312b0e0/src%2Ftest%2Frun-pass%2Fufcs-polymorphic-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-polymorphic-paths.rs?ref=fdfb532d7829d6e5637ddffa6faff69e4312b0e0", "patch": "@@ -27,11 +27,11 @@ struct Newt<T>(T);\n fn id<T>(x: T) -> T { x }\n fn eq<T: Eq>(a: T, b: T) -> bool { a == b }\n fn u8_as_i8(x: u8) -> i8 { x as i8 }\n-fn odd(x: uint) -> bool { x % 2 == 1 }\n+fn odd(x: usize) -> bool { x % 2 == 1 }\n fn dummy_rng() -> DummyRng { DummyRng::new_unseeded() }\n \n trait Size: Sized {\n-    fn size() -> uint { std::mem::size_of::<Self>() }\n+    fn size() -> usize { std::mem::size_of::<Self>() }\n }\n impl<T> Size for T {}\n \n@@ -47,24 +47,24 @@ macro_rules! tests {\n \n tests! {\n     // Free function.\n-    id, fn(int) -> int, (5);\n-    id::<int>, fn(int) -> int, (5);\n+    id, fn(i32) -> i32, (5);\n+    id::<i32>, fn(i32) -> i32, (5);\n \n     // Enum variant constructor.\n-    Some, fn(int) -> Option<int>, (5);\n-    Some::<int>, fn(int) -> Option<int>, (5);\n+    Some, fn(i32) -> Option<i32>, (5);\n+    Some::<i32>, fn(i32) -> Option<i32>, (5);\n \n     // Tuple struct constructor.\n-    Newt, fn(int) -> Newt<int>, (5);\n-    Newt::<int>, fn(int) -> Newt<int>, (5);\n+    Newt, fn(i32) -> Newt<i32>, (5);\n+    Newt::<i32>, fn(i32) -> Newt<i32>, (5);\n \n     // Inherent static methods.\n     Vec::new, fn() -> Vec<()>, ();\n     Vec::<()>::new, fn() -> Vec<()>, ();\n-    Vec::with_capacity, fn(uint) -> Vec<()>, (5);\n-    Vec::<()>::with_capacity, fn(uint) -> Vec<()>, (5);\n-    BitVec::from_fn, fn(uint, fn(uint) -> bool) -> BitVec, (5, odd);\n-    BitVec::from_fn::<fn(uint) -> bool>, fn(uint, fn(uint) -> bool) -> BitVec, (5, odd);\n+    Vec::with_capacity, fn(usize) -> Vec<()>, (5);\n+    Vec::<()>::with_capacity, fn(usize) -> Vec<()>, (5);\n+    BitVec::from_fn, fn(usize, fn(usize) -> bool) -> BitVec, (5, odd);\n+    BitVec::from_fn::<fn(usize) -> bool>, fn(usize, fn(usize) -> bool) -> BitVec, (5, odd);\n \n     // Inherent non-static method.\n     Vec::map_in_place, fn(Vec<u8>, fn(u8) -> i8) -> Vec<i8>, (vec![b'f', b'o', b'o'], u8_as_i8);\n@@ -77,34 +77,34 @@ tests! {\n     //    , (vec![b'f', b'o', b'o'], u8_as_i8);\n \n     // Trait static methods.\n-    bool::size, fn() -> uint, ();\n-    <bool as Size>::size, fn() -> uint, ();\n+    bool::size, fn() -> usize, ();\n+    <bool as Size>::size, fn() -> usize, ();\n \n-    Default::default, fn() -> int, ();\n-    int::default, fn() -> int, ();\n-    <int as Default>::default, fn() -> int, ();\n+    Default::default, fn() -> i32, ();\n+    i32::default, fn() -> i32, ();\n+    <i32 as Default>::default, fn() -> i32, ();\n \n-    Rand::rand, fn(&mut DummyRng) -> int, (&mut dummy_rng());\n-    int::rand, fn(&mut DummyRng) -> int, (&mut dummy_rng());\n-    <int as Rand>::rand, fn(&mut DummyRng) -> int, (&mut dummy_rng());\n-    Rand::rand::<DummyRng>, fn(&mut DummyRng) -> int, (&mut dummy_rng());\n-    int::rand::<DummyRng>, fn(&mut DummyRng) -> int, (&mut dummy_rng());\n-    <int as Rand>::rand::<DummyRng>, fn(&mut DummyRng) -> int, (&mut dummy_rng());\n+    Rand::rand, fn(&mut DummyRng) -> i32, (&mut dummy_rng());\n+    i32::rand, fn(&mut DummyRng) -> i32, (&mut dummy_rng());\n+    <i32 as Rand>::rand, fn(&mut DummyRng) -> i32, (&mut dummy_rng());\n+    Rand::rand::<DummyRng>, fn(&mut DummyRng) -> i32, (&mut dummy_rng());\n+    i32::rand::<DummyRng>, fn(&mut DummyRng) -> i32, (&mut dummy_rng());\n+    <i32 as Rand>::rand::<DummyRng>, fn(&mut DummyRng) -> i32, (&mut dummy_rng());\n \n     // Trait non-static methods.\n-    Clone::clone, fn(&int) -> int, (&5);\n-    int::clone, fn(&int) -> int, (&5);\n-    <int as Clone>::clone, fn(&int) -> int, (&5);\n+    Clone::clone, fn(&i32) -> i32, (&5);\n+    i32::clone, fn(&i32) -> i32, (&5);\n+    <i32 as Clone>::clone, fn(&i32) -> i32, (&5);\n \n-    FromIterator::from_iter, fn(OptionIter<int>) -> Vec<int>, (Some(5).into_iter());\n-    Vec::from_iter, fn(OptionIter<int>) -> Vec<int>, (Some(5).into_iter());\n-    <Vec<_> as FromIterator<_>>::from_iter, fn(OptionIter<int>) -> Vec<int>,\n+    FromIterator::from_iter, fn(OptionIter<i32>) -> Vec<i32>, (Some(5).into_iter());\n+    Vec::from_iter, fn(OptionIter<i32>) -> Vec<i32>, (Some(5).into_iter());\n+    <Vec<_> as FromIterator<_>>::from_iter, fn(OptionIter<i32>) -> Vec<i32>,\n         (Some(5).into_iter());\n-    <Vec<int> as FromIterator<_>>::from_iter, fn(OptionIter<int>) -> Vec<int>,\n+    <Vec<i32> as FromIterator<_>>::from_iter, fn(OptionIter<i32>) -> Vec<i32>,\n         (Some(5).into_iter());\n-    FromIterator::from_iter::<OptionIter<int>>, fn(OptionIter<int>) -> Vec<int>,\n+    FromIterator::from_iter::<OptionIter<i32>>, fn(OptionIter<i32>) -> Vec<i32>,\n         (Some(5).into_iter());\n-    <Vec<int> as FromIterator<_>>::from_iter::<OptionIter<int>>, fn(OptionIter<int>) -> Vec<int>,\n+    <Vec<i32> as FromIterator<_>>::from_iter::<OptionIter<i32>>, fn(OptionIter<i32>) -> Vec<i32>,\n         (Some(5).into_iter());\n \n     Add::add, fn(i32, i32) -> i32, (5, 6);", "previous_filename": "src/test/run-pass/const-polymorphic-paths.rs"}]}