{"sha": "5206827933177ab83e91c38042597b9061c85b96", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMDY4Mjc5MzMxNzdhYjgzZTkxYzM4MDQyNTk3YjkwNjFjODViOTY=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-12T13:24:38Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-12T13:37:50Z"}, "message": "Address comments", "tree": {"sha": "aaafc901a2e0b8ae447a3db175a1dc371478515d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aaafc901a2e0b8ae447a3db175a1dc371478515d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5206827933177ab83e91c38042597b9061c85b96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5206827933177ab83e91c38042597b9061c85b96", "html_url": "https://github.com/rust-lang/rust/commit/5206827933177ab83e91c38042597b9061c85b96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5206827933177ab83e91c38042597b9061c85b96/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5de82b926486edc54d7183971fde901be9445c6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5de82b926486edc54d7183971fde901be9445c6b", "html_url": "https://github.com/rust-lang/rust/commit/5de82b926486edc54d7183971fde901be9445c6b"}], "stats": {"total": 45, "additions": 21, "deletions": 24}, "files": [{"sha": "8aae57e72cd527b4239a662b87ff6318f0d61618", "filename": "src/librustc/ty/query/job.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5206827933177ab83e91c38042597b9061c85b96/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5206827933177ab83e91c38042597b9061c85b96/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fjob.rs?ref=5206827933177ab83e91c38042597b9061c85b96", "patch": "@@ -7,6 +7,7 @@ use crate::ty::tls;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_span::Span;\n \n+use std::convert::TryFrom;\n use std::marker::PhantomData;\n use std::num::NonZeroU32;\n \n@@ -52,6 +53,10 @@ pub struct QueryJobId {\n }\n \n impl QueryJobId {\n+    pub fn new(job: QueryShardJobId, shard: usize, kind: DepKind) -> Self {\n+        QueryJobId { job, shard: u16::try_from(shard).unwrap(), kind }\n+    }\n+\n     fn query<'tcx>(self, map: &QueryMap<'tcx>) -> Query<'tcx> {\n         map.get(&self).unwrap().info.query.clone()\n     }"}, {"sha": "8b787915de605e56f4cdb7512ea0a2e1f18d47a3", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 16, "deletions": 24, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5206827933177ab83e91c38042597b9061c85b96/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5206827933177ab83e91c38042597b9061c85b96/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=5206827933177ab83e91c38042597b9061c85b96", "patch": "@@ -21,7 +21,6 @@ use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, FatalError, H\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::Span;\n use std::collections::hash_map::Entry;\n-use std::convert::TryFrom;\n use std::hash::{Hash, Hasher};\n use std::mem;\n use std::num::NonZeroU32;\n@@ -150,37 +149,30 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n                             }\n \n                             // Create the id of the job we're waiting for\n-                            let id = QueryJobId {\n-                                job: job.id,\n-                                shard: u16::try_from(shard).unwrap(),\n-                                kind: Q::dep_kind(),\n-                            };\n+                            let id = QueryJobId::new(job.id, shard, Q::dep_kind());\n \n                             job.latch(id)\n                         }\n                         QueryResult::Poisoned => FatalError.raise(),\n                     }\n                 }\n                 Entry::Vacant(entry) => {\n-                    let jobs = &mut lock.jobs;\n-\n                     // No job entry for this query. Return a new one to be started later.\n-                    return tls::with_related_context(tcx, |icx| {\n-                        // Generate an id unique within this shard.\n-                        let id = jobs.checked_add(1).unwrap();\n-                        *jobs = id;\n-                        let id = QueryShardJobId(NonZeroU32::new(id).unwrap());\n-\n-                        let global_id = QueryJobId {\n-                            job: id,\n-                            shard: u16::try_from(shard).unwrap(),\n-                            kind: Q::dep_kind(),\n-                        };\n-                        let job = QueryJob::new(id, span, icx.query);\n-                        let owner = JobOwner { cache, id: global_id, key: (*key).clone() };\n-                        entry.insert(QueryResult::Started(job));\n-                        TryGetJob::NotYetStarted(owner)\n-                    });\n+\n+                    // Generate an id unique within this shard.\n+                    let id = lock.jobs.checked_add(1).unwrap();\n+                    lock.jobs = id;\n+                    let id = QueryShardJobId(NonZeroU32::new(id).unwrap());\n+\n+                    let global_id = QueryJobId::new(id, shard, Q::dep_kind());\n+\n+                    let job =\n+                        tls::with_related_context(tcx, |icx| QueryJob::new(id, span, icx.query));\n+\n+                    entry.insert(QueryResult::Started(job));\n+\n+                    let owner = JobOwner { cache, id: global_id, key: (*key).clone() };\n+                    return TryGetJob::NotYetStarted(owner);\n                 }\n             };\n             mem::drop(lock_guard);"}]}