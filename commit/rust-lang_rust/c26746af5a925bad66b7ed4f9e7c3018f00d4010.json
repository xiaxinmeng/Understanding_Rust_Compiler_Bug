{"sha": "c26746af5a925bad66b7ed4f9e7c3018f00d4010", "node_id": "C_kwDOAAsO6NoAKGMyNjc0NmFmNWE5MjViYWQ2NmI3ZWQ0ZjllN2MzMDE4ZjAwZDQwMTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-15T16:10:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-11-15T16:10:19Z"}, "message": "Auto merge of #90473 - joshtriplett:stabilize-format-args-capture, r=Mark-Simulacrum\n\nstabilize format args capture\n\nWorks as expected, and there are widespread reports of success with it, as well as interest in it.\n\nRFC: rust-lang/rfcs#2795\nTracking issue: https://github.com/rust-lang/rust/issues/67984\n\nAddressing items from the tracking issue:\n\n- We don't support capturing arguments from a non-literal format string like `format_args!(concat!(...))`. We could add that in a future enhancement, or we can decide that it isn't supported (as suggested in https://github.com/rust-lang/rust/issues/67984#issuecomment-801394736 ).\n- I've updated the documentation.\n- `panic!` now supports capture as well.\n- There are potentially opportunities to further improve diagnostics for invalid usage, such as if it looks like the user tried to use an expression rather than a variable. However, such cases are all already caught and provide reasonable syntax errors now, and we can always provided even friendlier diagnostics in the future.", "tree": {"sha": "4ca03e28d3878887d0be3898d31dd4986d0c51a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ca03e28d3878887d0be3898d31dd4986d0c51a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c26746af5a925bad66b7ed4f9e7c3018f00d4010", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c26746af5a925bad66b7ed4f9e7c3018f00d4010", "html_url": "https://github.com/rust-lang/rust/commit/c26746af5a925bad66b7ed4f9e7c3018f00d4010", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c26746af5a925bad66b7ed4f9e7c3018f00d4010/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eab2d7519a3f1c11ddaff3d19f8b7727354c6362", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab2d7519a3f1c11ddaff3d19f8b7727354c6362", "html_url": "https://github.com/rust-lang/rust/commit/eab2d7519a3f1c11ddaff3d19f8b7727354c6362"}, {"sha": "afa719e2eed83d7a7820e3a26194a26d55029536", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa719e2eed83d7a7820e3a26194a26d55029536", "html_url": "https://github.com/rust-lang/rust/commit/afa719e2eed83d7a7820e3a26194a26d55029536"}], "stats": {"total": 250, "additions": 83, "deletions": 167}, "files": [{"sha": "76d3a83b48daa45d7a4da26c3b847ef5ccbdd0d1", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -3,7 +3,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n-#![feature(format_args_capture)]\n+#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(in_band_lifetimes)]\n #![feature(iter_zip)]\n #![feature(let_else)]"}, {"sha": "097eaddb874083ec2895f553eaf16fecfff555ef", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -527,17 +527,9 @@ impl<'a, 'b> Context<'a, 'b> {\n                         self.verify_arg_type(Exact(idx), ty)\n                     }\n                     None => {\n-                        let capture_feature_enabled = self\n-                            .ecx\n-                            .ecfg\n-                            .features\n-                            .map_or(false, |features| features.format_args_capture);\n-\n                         // For the moment capturing variables from format strings expanded from macros is\n                         // disabled (see RFC #2795)\n-                        let can_capture = capture_feature_enabled && self.is_literal;\n-\n-                        if can_capture {\n+                        if self.is_literal {\n                             // Treat this name as a variable to capture from the surrounding scope\n                             let idx = self.args.len();\n                             self.arg_types.push(Vec::new());\n@@ -559,23 +551,15 @@ impl<'a, 'b> Context<'a, 'b> {\n                             };\n                             let mut err = self.ecx.struct_span_err(sp, &msg[..]);\n \n-                            if capture_feature_enabled && !self.is_literal {\n-                                err.note(&format!(\n-                                    \"did you intend to capture a variable `{}` from \\\n-                                     the surrounding scope?\",\n-                                    name\n-                                ));\n-                                err.note(\n-                                    \"to avoid ambiguity, `format_args!` cannot capture variables \\\n-                                     when the format string is expanded from a macro\",\n-                                );\n-                            } else if self.ecx.parse_sess().unstable_features.is_nightly_build() {\n-                                err.help(&format!(\n-                                    \"if you intended to capture `{}` from the surrounding scope, add \\\n-                                     `#![feature(format_args_capture)]` to the crate attributes\",\n-                                    name\n-                                ));\n-                            }\n+                            err.note(&format!(\n+                                \"did you intend to capture a variable `{}` from \\\n+                                 the surrounding scope?\",\n+                                name\n+                            ));\n+                            err.note(\n+                                \"to avoid ambiguity, `format_args!` cannot capture variables \\\n+                                 when the format string is expanded from a macro\",\n+                            );\n \n                             err.emit();\n                         }"}, {"sha": "bb3d3a415e7d5c939a80234d32919a7f2bc346ba", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -6,7 +6,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(backtrace)]\n #![feature(if_let_guard)]\n-#![feature(format_args_capture)]\n+#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(nll)]"}, {"sha": "4e84a9df6c978ff2793787434b844da19bd0b34a", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -1,7 +1,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(destructuring_assignment)]\n-#![feature(format_args_capture)]\n+#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(if_let_guard)]\n #![feature(iter_zip)]\n #![feature(let_else)]"}, {"sha": "3cb543fe3ab98c006a9e420da0f8f1ed30d570e2", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -301,6 +301,8 @@ declare_features! (\n     (accepted, relaxed_struct_unsize, \"1.58.0\", Some(81793), None),\n     /// Allows dereferencing raw pointers during const eval.\n     (accepted, const_raw_ptr_deref, \"1.58.0\", Some(51911), None),\n+    /// Allows capturing variables in scope using format_args!\n+    (accepted, format_args_capture, \"1.58.0\", Some(67984), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "61dd505e1e912485eb85d859a101b82d0daa8844", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -539,9 +539,6 @@ declare_features! (\n     /// Be more precise when looking for live drops in a const context.\n     (active, const_precise_live_drops, \"1.46.0\", Some(73255), None),\n \n-    /// Allows capturing variables in scope using format_args!\n-    (active, format_args_capture, \"1.46.0\", Some(67984), None),\n-\n     /// Allows `if let` guard in match arms.\n     (active, if_let_guard, \"1.47.0\", Some(51114), None),\n "}, {"sha": "507b4421fa160266c860d468c0e5ec1f5eaed56f", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -30,7 +30,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n-#![feature(format_args_capture)]\n+#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(iter_order_by)]\n #![feature(iter_zip)]\n #![feature(never_type)]"}, {"sha": "af1c724410037e13c624891ea67d34cabc974fca", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -7,7 +7,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n-#![feature(format_args_capture)]\n+#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(iter_zip)]\n #![feature(map_try_insert)]\n #![feature(min_specialization)]"}, {"sha": "d17e8875a1ec0d9d58354143f6189a8a9ac3927a", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -13,7 +13,7 @@\n #![feature(drain_filter)]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n-#![feature(format_args_capture)]\n+#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(iter_zip)]\n #![feature(let_else)]\n #![feature(never_type)]"}, {"sha": "0881cf07586b367b88210919adef6be38f15c779", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -58,7 +58,7 @@ This API is completely unstable and subject to change.\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n-#![feature(format_args_capture)]\n+#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(if_let_guard)]\n #![feature(in_band_lifetimes)]\n #![feature(is_sorted)]"}, {"sha": "b4d16d74db48807c896e9437dae3d1124193b9e5", "filename": "library/alloc/src/fmt.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/library%2Falloc%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/library%2Falloc%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Ffmt.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -17,6 +17,8 @@\n //! format!(\"The number is {}\", 1);   // => \"The number is 1\"\n //! format!(\"{:?}\", (3, 4));          // => \"(3, 4)\"\n //! format!(\"{value}\", value=4);      // => \"4\"\n+//! let people = \"Rustaceans\";\n+//! format!(\"Hello {people}!\");       // => \"Hello Rustaceans!\"\n //! format!(\"{} {}\", 1, 2);           // => \"1 2\"\n //! format!(\"{:04}\", 42);             // => \"0042\" with leading zeros\n //! format!(\"{:#?}\", (100, 200));     // => \"(\n@@ -80,6 +82,19 @@\n //! format!(\"{a} {c} {b}\", a=\"a\", b='b', c=3);  // => \"a 3 b\"\n //! ```\n //!\n+//! If a named parameter does not appear in the argument list, `format!` will\n+//! reference a variable with that name in the current scope.\n+//!\n+//! ```\n+//! let argument = 2 + 2;\n+//! format!(\"{argument}\");   // => \"4\"\n+//!\n+//! fn make_string(a: u32, b: &str) -> String {\n+//!     format!(\"{b} {a}\")\n+//! }\n+//! make_string(927, \"label\"); // => \"label 927\"\n+//! ```\n+//!\n //! It is not valid to put positional parameters (those without names) after\n //! arguments that have names. Like with positional parameters, it is not\n //! valid to provide named parameters that are unused by the format string.\n@@ -98,6 +113,8 @@\n //! println!(\"Hello {:1$}!\", \"x\", 5);\n //! println!(\"Hello {1:0$}!\", 5, \"x\");\n //! println!(\"Hello {:width$}!\", \"x\", width = 5);\n+//! let width = 5;\n+//! println!(\"Hello {:width$}!\", \"x\");\n //! ```\n //!\n //! This is a parameter for the \"minimum width\" that the format should take up."}, {"sha": "4a66c3f6b2e26f71dd1ea13860a7bcd1d260f6ad", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -105,6 +105,7 @@\n #![feature(fmt_internals)]\n #![feature(fn_traits)]\n #![feature(inherent_ascii_escape)]\n+#![cfg_attr(bootstrap, feature(format_args_capture))]\n #![feature(inplace_iteration)]\n #![feature(iter_advance_by)]\n #![feature(iter_zip)]"}, {"sha": "64b1b3d81bd83ce7641905c906e9f92ce8d7b69a", "filename": "src/doc/unstable-book/src/library-features/format-args-capture.md", "status": "removed", "additions": 0, "deletions": 47, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/eab2d7519a3f1c11ddaff3d19f8b7727354c6362/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fformat-args-capture.md", "raw_url": "https://github.com/rust-lang/rust/raw/eab2d7519a3f1c11ddaff3d19f8b7727354c6362/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fformat-args-capture.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fformat-args-capture.md?ref=eab2d7519a3f1c11ddaff3d19f8b7727354c6362", "patch": "@@ -1,47 +0,0 @@\n-# `format_args_capture`\n-\n-The tracking issue for this feature is: [#67984]\n-\n-[#67984]: https://github.com/rust-lang/rust/issues/67984\n-\n-------------------------\n-\n-Enables `format_args!` (and macros which use `format_args!` in their implementation, such\n-as `format!`, `print!` and `panic!`) to capture variables from the surrounding scope.\n-This avoids the need to pass named parameters when the binding in question\n-already exists in scope.\n-\n-```rust\n-#![feature(format_args_capture)]\n-\n-let (person, species, name) = (\"Charlie Brown\", \"dog\", \"Snoopy\");\n-\n-// captures named argument `person`\n-print!(\"Hello {person}\");\n-\n-// captures named arguments `species` and `name`\n-format!(\"The {species}'s name is {name}.\");\n-```\n-\n-This also works for formatting parameters such as width and precision:\n-\n-```rust\n-#![feature(format_args_capture)]\n-\n-let precision = 2;\n-let s = format!(\"{:.precision$}\", 1.324223);\n-\n-assert_eq!(&s, \"1.32\");\n-```\n-\n-A non-exhaustive list of macros which benefit from this functionality include:\n-- `format!`\n-- `print!` and `println!`\n-- `eprint!` and `eprintln!`\n-- `write!` and `writeln!`\n-- `panic!`\n-- `unreachable!`\n-- `unimplemented!`\n-- `todo!`\n-- `assert!` and similar\n-- macros in many thirdparty crates, such as `log`"}, {"sha": "21af91610915fb59e5cf24e0cfbfa217534e3ccd", "filename": "src/test/ui/fmt/feature-gate-format-args-capture.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eab2d7519a3f1c11ddaff3d19f8b7727354c6362/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eab2d7519a3f1c11ddaff3d19f8b7727354c6362/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.rs?ref=eab2d7519a3f1c11ddaff3d19f8b7727354c6362", "patch": "@@ -1,6 +0,0 @@\n-fn main() {\n-    format!(\"{foo}\");                //~ ERROR: there is no argument named `foo`\n-\n-    // panic! doesn't hit format_args! unless there are two or more arguments.\n-    panic!(\"{foo} {bar}\", bar=1);    //~ ERROR: there is no argument named `foo`\n-}"}, {"sha": "f08f1651cb62260237cc5f88e50df0fcf106a072", "filename": "src/test/ui/fmt/feature-gate-format-args-capture.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eab2d7519a3f1c11ddaff3d19f8b7727354c6362/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eab2d7519a3f1c11ddaff3d19f8b7727354c6362/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Ffeature-gate-format-args-capture.stderr?ref=eab2d7519a3f1c11ddaff3d19f8b7727354c6362", "patch": "@@ -1,18 +0,0 @@\n-error: there is no argument named `foo`\n-  --> $DIR/feature-gate-format-args-capture.rs:2:14\n-   |\n-LL |     format!(\"{foo}\");\n-   |              ^^^^^\n-   |\n-   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n-\n-error: there is no argument named `foo`\n-  --> $DIR/feature-gate-format-args-capture.rs:5:13\n-   |\n-LL |     panic!(\"{foo} {bar}\", bar=1);\n-   |             ^^^^^\n-   |\n-   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "fdbd93836ef9fde7eea50622464bced7cdcbbefc", "filename": "src/test/ui/fmt/format-args-capture-macro-hygiene.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -1,5 +1,3 @@\n-#![feature(format_args_capture)]\n-\n fn main() {\n     format!(concat!(\"{foo}\"));         //~ ERROR: there is no argument named `foo`\n     format!(concat!(\"{ba\", \"r} {}\"), 1);     //~ ERROR: there is no argument named `bar`"}, {"sha": "9423e8c819d7a9188f8206c1dcd7985dab990d67", "filename": "src/test/ui/fmt/format-args-capture-macro-hygiene.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-macro-hygiene.stderr?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -1,5 +1,5 @@\n error: there is no argument named `foo`\n-  --> $DIR/format-args-capture-macro-hygiene.rs:4:13\n+  --> $DIR/format-args-capture-macro-hygiene.rs:2:13\n    |\n LL |     format!(concat!(\"{foo}\"));\n    |             ^^^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL |     format!(concat!(\"{foo}\"));\n    = note: this error originates in the macro `concat` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: there is no argument named `bar`\n-  --> $DIR/format-args-capture-macro-hygiene.rs:5:13\n+  --> $DIR/format-args-capture-macro-hygiene.rs:3:13\n    |\n LL |     format!(concat!(\"{ba\", \"r} {}\"), 1);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "46fc083cb7301f8f2284203255442a8bad4e1a72", "filename": "src/test/ui/fmt/format-args-capture-missing-variables.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -1,5 +1,3 @@\n-#![feature(format_args_capture)]\n-\n fn main() {\n     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n     //~^ ERROR: cannot find value `foo` in this scope"}, {"sha": "d53c206003f94391b45bd886c64b94cfd4234775", "filename": "src/test/ui/fmt/format-args-capture-missing-variables.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture-missing-variables.stderr?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -1,43 +1,43 @@\n error: named argument never used\n-  --> $DIR/format-args-capture-missing-variables.rs:10:51\n+  --> $DIR/format-args-capture-missing-variables.rs:8:51\n    |\n LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n    |             -------------------                   ^ named argument never used\n    |             |\n    |             formatting specifier missing\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:4:17\n+  --> $DIR/format-args-capture-missing-variables.rs:2:17\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n    |                 ^^^^^ not found in this scope\n \n error[E0425]: cannot find value `bar` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:4:26\n+  --> $DIR/format-args-capture-missing-variables.rs:2:26\n    |\n LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n    |                          ^^^^^ not found in this scope\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:8:14\n+  --> $DIR/format-args-capture-missing-variables.rs:6:14\n    |\n LL |     format!(\"{foo}\");\n    |              ^^^^^ not found in this scope\n \n error[E0425]: cannot find value `valueb` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:10:23\n+  --> $DIR/format-args-capture-missing-variables.rs:8:23\n    |\n LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n    |                       ^^^^^^^^ not found in this scope\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:16:9\n+  --> $DIR/format-args-capture-missing-variables.rs:14:9\n    |\n LL |         {foo}\n    |         ^^^^^ not found in this scope\n \n error[E0425]: cannot find value `foo` in this scope\n-  --> $DIR/format-args-capture-missing-variables.rs:21:13\n+  --> $DIR/format-args-capture-missing-variables.rs:19:13\n    |\n LL |     panic!(\"{foo} {bar}\", bar=1);\n    |             ^^^^^ not found in this scope"}, {"sha": "e830a5bc9c5c86947d40cbb331377b23beb9b233", "filename": "src/test/ui/fmt/format-args-capture.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fformat-args-capture.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -1,5 +1,4 @@\n // run-pass\n-#![feature(format_args_capture)]\n #![feature(cfg_panic)]\n \n fn main() {"}, {"sha": "b3e54ed32aac7477cafd60a72464d0c3300faa0c", "filename": "src/test/ui/fmt/ifmt-bad-arg.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.rs?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -25,10 +25,10 @@ fn main() {\n     //~^ ERROR: invalid reference to positional arguments 3, 4 and 5 (there are 3 arguments)\n \n     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n-    //~^ ERROR: there is no argument named `foo`\n-    //~^^ ERROR: there is no argument named `bar`\n+    //~^ ERROR: cannot find value `foo` in this scope\n+    //~^^ ERROR: cannot find value `bar` in this scope\n \n-    format!(\"{foo}\");                //~ ERROR: no argument named `foo`\n+    format!(\"{foo}\");                //~ ERROR: cannot find value `foo` in this scope\n     format!(\"\", 1, 2);               //~ ERROR: multiple unused formatting arguments\n     format!(\"{}\", 1, 2);             //~ ERROR: argument never used\n     format!(\"{1}\", 1, 2);            //~ ERROR: argument never used\n@@ -43,7 +43,7 @@ fn main() {\n     // bad named arguments, #35082\n \n     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n-    //~^ ERROR there is no argument named `valueb`\n+    //~^ ERROR cannot find value `valueb` in this scope\n     //~^^ ERROR named argument never used\n \n     // bad syntax of the format string\n@@ -60,7 +60,7 @@ fn main() {\n         {foo}\n \n     \"##);\n-    //~^^^ ERROR: there is no argument named `foo`\n+    //~^^^ ERROR: cannot find value `foo` in this scope\n \n     // bad syntax in format string with multiple newlines, #53836\n     format!(\"first number: {}"}, {"sha": "acc4e95f5bb7ef2d0519b432c6f26225070fceca", "filename": "src/test/ui/fmt/ifmt-bad-arg.stderr", "status": "modified", "additions": 32, "deletions": 41, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c26746af5a925bad66b7ed4f9e7c3018f00d4010/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c26746af5a925bad66b7ed4f9e7c3018f00d4010/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffmt%2Fifmt-bad-arg.stderr?ref=c26746af5a925bad66b7ed4f9e7c3018f00d4010", "patch": "@@ -58,30 +58,6 @@ LL |     format!(\"{name} {value} {} {} {} {} {} {}\", 0, name=1, value=2);\n    |\n    = note: positional arguments are zero-based\n \n-error: there is no argument named `foo`\n-  --> $DIR/ifmt-bad-arg.rs:27:17\n-   |\n-LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n-   |                 ^^^^^\n-   |\n-   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n-\n-error: there is no argument named `bar`\n-  --> $DIR/ifmt-bad-arg.rs:27:26\n-   |\n-LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n-   |                          ^^^^^\n-   |\n-   = help: if you intended to capture `bar` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n-\n-error: there is no argument named `foo`\n-  --> $DIR/ifmt-bad-arg.rs:31:14\n-   |\n-LL |     format!(\"{foo}\");\n-   |              ^^^^^\n-   |\n-   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n-\n error: multiple unused formatting arguments\n   --> $DIR/ifmt-bad-arg.rs:32:17\n    |\n@@ -156,14 +132,6 @@ LL |     format!(\"{foo} {} {}\", foo=1, 2);\n    |                                |\n    |                                named argument\n \n-error: there is no argument named `valueb`\n-  --> $DIR/ifmt-bad-arg.rs:45:23\n-   |\n-LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n-   |                       ^^^^^^^^\n-   |\n-   = help: if you intended to capture `valueb` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n-\n error: named argument never used\n   --> $DIR/ifmt-bad-arg.rs:45:51\n    |\n@@ -208,14 +176,6 @@ LL |     format!(\"foo %s baz\", \"bar\");\n    |\n    = note: printf formatting not supported; see the documentation for `std::fmt`\n \n-error: there is no argument named `foo`\n-  --> $DIR/ifmt-bad-arg.rs:60:9\n-   |\n-LL |         {foo}\n-   |         ^^^^^\n-   |\n-   = help: if you intended to capture `foo` from the surrounding scope, add `#![feature(format_args_capture)]` to the crate attributes\n-\n error: invalid format string: expected `'}'`, found `'t'`\n   --> $DIR/ifmt-bad-arg.rs:75:1\n    |\n@@ -302,6 +262,36 @@ LL |     println!(\"{:.*}\");\n    = note: positional arguments are zero-based\n    = note: for information about formatting flags, visit https://doc.rust-lang.org/std/fmt/index.html\n \n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/ifmt-bad-arg.rs:27:17\n+   |\n+LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n+   |                 ^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `bar` in this scope\n+  --> $DIR/ifmt-bad-arg.rs:27:26\n+   |\n+LL |     format!(\"{} {foo} {} {bar} {}\", 1, 2, 3);\n+   |                          ^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/ifmt-bad-arg.rs:31:14\n+   |\n+LL |     format!(\"{foo}\");\n+   |              ^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `valueb` in this scope\n+  --> $DIR/ifmt-bad-arg.rs:45:23\n+   |\n+LL |     format!(\"{valuea} {valueb}\", valuea=5, valuec=7);\n+   |                       ^^^^^^^^ not found in this scope\n+\n+error[E0425]: cannot find value `foo` in this scope\n+  --> $DIR/ifmt-bad-arg.rs:60:9\n+   |\n+LL |         {foo}\n+   |         ^^^^^ not found in this scope\n+\n error[E0308]: mismatched types\n   --> $DIR/ifmt-bad-arg.rs:78:32\n    |\n@@ -324,4 +314,5 @@ LL |     println!(\"{} {:07$.*} {}\", 1, 3.2, 4);\n \n error: aborting due to 36 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors have detailed explanations: E0308, E0425.\n+For more information about an error, try `rustc --explain E0308`."}]}