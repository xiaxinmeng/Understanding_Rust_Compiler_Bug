{"sha": "e6984eee6f04a63dea3441dd1aec7d2f81e98e6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2OTg0ZWVlNmYwNGE2M2RlYTM0NDFkZDFhZWM3ZDJmODFlOThlNmQ=", "commit": {"author": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-08-23T12:34:12Z"}, "committer": {"name": "LinkTed", "email": "LinkTed@users.noreply.github.com", "date": "2020-10-10T13:19:11Z"}, "message": "Add UCred struct", "tree": {"sha": "5f81a53469cc01bee459b00000a3cd836f13de2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f81a53469cc01bee459b00000a3cd836f13de2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6984eee6f04a63dea3441dd1aec7d2f81e98e6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6984eee6f04a63dea3441dd1aec7d2f81e98e6d", "html_url": "https://github.com/rust-lang/rust/commit/e6984eee6f04a63dea3441dd1aec7d2f81e98e6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6984eee6f04a63dea3441dd1aec7d2f81e98e6d/comments", "author": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LinkTed", "id": 6806266, "node_id": "MDQ6VXNlcjY4MDYyNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/6806266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LinkTed", "html_url": "https://github.com/LinkTed", "followers_url": "https://api.github.com/users/LinkTed/followers", "following_url": "https://api.github.com/users/LinkTed/following{/other_user}", "gists_url": "https://api.github.com/users/LinkTed/gists{/gist_id}", "starred_url": "https://api.github.com/users/LinkTed/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LinkTed/subscriptions", "organizations_url": "https://api.github.com/users/LinkTed/orgs", "repos_url": "https://api.github.com/users/LinkTed/repos", "events_url": "https://api.github.com/users/LinkTed/events{/privacy}", "received_events_url": "https://api.github.com/users/LinkTed/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f82ddf18e3c13a79e3188591a2c386fc052aed1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f82ddf18e3c13a79e3188591a2c386fc052aed1", "html_url": "https://github.com/rust-lang/rust/commit/6f82ddf18e3c13a79e3188591a2c386fc052aed1"}], "stats": {"total": 62, "additions": 53, "deletions": 9}, "files": [{"sha": "7d0f43ab87f811b208cabc4303266f7a6361c460", "filename": "library/std/src/sys/unix/ext/net/ancillary.rs", "status": "modified", "additions": 45, "deletions": 4, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/e6984eee6f04a63dea3441dd1aec7d2f81e98e6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6984eee6f04a63dea3441dd1aec7d2f81e98e6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Fancillary.rs?ref=e6984eee6f04a63dea3441dd1aec7d2f81e98e6d", "patch": "@@ -64,6 +64,47 @@ pub(super) fn send_vectored_with_ancillary_to(\n     }\n }\n \n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+#[derive(Clone)]\n+pub struct UCred(libc::ucred);\n+\n+impl UCred {\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    pub fn new() -> UCred {\n+        UCred(libc::ucred { pid: 0, uid: 0, gid: 0 })\n+    }\n+\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    pub fn set_pid(&mut self, pid: i32) {\n+        self.0.pid = pid;\n+    }\n+\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    pub fn get_pid(&self) -> i32 {\n+        self.0.pid\n+    }\n+\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    pub fn set_uid(&mut self, uid: u32) {\n+        self.0.uid = uid;\n+    }\n+\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    pub fn get_uid(&self) -> u32 {\n+        self.0.uid\n+    }\n+\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    pub fn set_gid(&mut self, gid: u32) {\n+        self.0.gid = gid;\n+    }\n+\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n+    pub fn get_gid(&self) -> u32 {\n+        self.0.gid\n+    }\n+}\n+\n #[cfg(any(\n     target_os = \"haiku\",\n     target_os = \"solaris\",\n@@ -139,10 +180,10 @@ pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::ucred>);\n ))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n impl<'a> Iterator for ScmCredentials<'a> {\n-    type Item = libc::ucred;\n+    type Item = UCred;\n \n-    fn next(&mut self) -> Option<libc::ucred> {\n-        self.0.next()\n+    fn next(&mut self) -> Option<UCred> {\n+        Some(UCred(self.0.next()?))\n     }\n }\n \n@@ -550,7 +591,7 @@ impl<'a> SocketAncillary<'a> {\n         target_env = \"uclibc\",\n     ))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"none\")]\n-    pub fn add_creds(&mut self, creds: &[libc::ucred]) -> bool {\n+    pub fn add_creds(&mut self, creds: &[UCred]) -> bool {\n         self.truncated = false;\n         add_to_ancillary_data(\n             &mut self.buffer,"}, {"sha": "a39b97f2c31b9481efa6b1816739db3ef386dc9b", "filename": "library/std/src/sys/unix/ext/net/test.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e6984eee6f04a63dea3441dd1aec7d2f81e98e6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6984eee6f04a63dea3441dd1aec7d2f81e98e6d/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fext%2Fnet%2Ftest.rs?ref=e6984eee6f04a63dea3441dd1aec7d2f81e98e6d", "patch": "@@ -529,8 +529,11 @@ fn test_send_vectored_with_ancillary_to_unix_datagram() {\n \n     let mut ancillary1_buffer = [0; 128];\n     let mut ancillary1 = SocketAncillary::new(&mut ancillary1_buffer[..]);\n-    let cred1 = libc::ucred { pid: getpid(), uid: getuid(), gid: getgid() };\n-    assert!(ancillary1.add_creds(&[cred1][..]));\n+    let mut cred1 = UCred::new();\n+    cred1.set_pid(getpid());\n+    cred1.set_uid(getuid());\n+    cred1.set_gid(getgid());\n+    assert!(ancillary1.add_creds(&[cred1.clone()][..]));\n \n     let usize =\n         or_panic!(bsock1.send_vectored_with_ancillary_to(&mut bufs_send, &mut ancillary1, &path2));\n@@ -556,9 +559,9 @@ fn test_send_vectored_with_ancillary_to_unix_datagram() {\n     {\n         let cred_vec = Vec::from_iter(scm_credentials);\n         assert_eq!(cred_vec.len(), 1);\n-        assert_eq!(cred1.pid, cred_vec[0].pid);\n-        assert_eq!(cred1.uid, cred_vec[0].uid);\n-        assert_eq!(cred1.gid, cred_vec[0].gid);\n+        assert_eq!(cred1.get_pid(), cred_vec[0].get_pid());\n+        assert_eq!(cred1.get_uid(), cred_vec[0].get_uid());\n+        assert_eq!(cred1.get_gid(), cred_vec[0].get_gid());\n     } else {\n         assert!(false);\n     }"}]}