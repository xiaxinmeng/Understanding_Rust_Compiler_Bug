{"sha": "d9aa28767287670df6cf823b94629122e04442c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YWEyODc2NzI4NzY3MGRmNmNmODIzYjk0NjI5MTIyZTA0NDQyYzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-24T20:01:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-24T20:01:51Z"}, "message": "Auto merge of #86580 - BoxyUwU:cgd-subst-ice, r=nikomatsakis\n\ndont provide fwd declared params to cg defaults\n\nFixes #83938\n\n```rust\n#![feature(const_evaluatable_checked, const_generics, const_generics_defaults)]\n#![allow(incomplete_features)]\n\npub struct Bar<const N: usize, const M: usize = { N + 1 }>;\npub fn foo<const N1: usize>() -> Bar<N1> { loop {} }\n\nfn main() {}\n```\nThis PR makes this code no longer ICE, it was ICE'ing previously because when building substs for `Bar<N1>` we would subst the anon ct: `ConstKind::Unevaluated({N + 1}, substs: [N, M])` with substs of `[N1]`. the anon const has forward declared params supplied though so we end up trying to substitute the provided `M` param which causes the ICE.\n\nThis PR doesn't handle the predicates of the const so\n```rust\ntrait Foo<const N: usize> { const Assoc: usize; }\npub struct Bar<const N: usize = { <()>::Assoc }> where (): Foo<N>;\n```\nResolves to `<() as Foo<N>>::Assoc` which can allow for using fwd declared params indirectly.\n\n```rust\ntrait Foo<const N: usize> {}\nstruct Bar<const N: usize = { 2 + 3 }> where (): Foo<N>;\n```\nThis code also ICEs under this PR because instantiating the default's predicates causes an ICE as predicates_of contains predicates with fwd declared params\n\nPR was briefly discussed [in this zulip thread](https://rust-lang.zulipchat.com/#narrow/stream/260443-project-const-generics/topic/evil.20preds.20in.20param.20env.20.2386580)", "tree": {"sha": "65a1904d98acc4b5afd896d93652ae506ece8e3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65a1904d98acc4b5afd896d93652ae506ece8e3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9aa28767287670df6cf823b94629122e04442c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9aa28767287670df6cf823b94629122e04442c0", "html_url": "https://github.com/rust-lang/rust/commit/d9aa28767287670df6cf823b94629122e04442c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9aa28767287670df6cf823b94629122e04442c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bddb59cf07efcf6e606f16b87f85e3ecd2c1ca69", "url": "https://api.github.com/repos/rust-lang/rust/commits/bddb59cf07efcf6e606f16b87f85e3ecd2c1ca69", "html_url": "https://github.com/rust-lang/rust/commit/bddb59cf07efcf6e606f16b87f85e3ecd2c1ca69"}, {"sha": "d1e5e72f7d25cc60ccfc54d3cd3e1ef3efa3dab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1e5e72f7d25cc60ccfc54d3cd3e1ef3efa3dab9", "html_url": "https://github.com/rust-lang/rust/commit/d1e5e72f7d25cc60ccfc54d3cd3e1ef3efa3dab9"}], "stats": {"total": 202, "additions": 201, "deletions": 1}, "files": [{"sha": "cacf1aeacd4f236ab3d071dd5a4935a8424d57ba", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9aa28767287670df6cf823b94629122e04442c0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aa28767287670df6cf823b94629122e04442c0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=d9aa28767287670df6cf823b94629122e04442c0", "patch": "@@ -1422,6 +1422,9 @@ pub type Lit = Spanned<LitKind>;\n /// These are usually found nested inside types (e.g., array lengths)\n /// or expressions (e.g., repeat counts), and also used to define\n /// explicit discriminant values for enum variants.\n+///\n+/// You can check if this anon const is a default in a const param\n+/// `const N: usize = { ... }` with `tcx.hir().opt_const_param_default_param_hir_id(..)`\n #[derive(Copy, Clone, PartialEq, Eq, Encodable, Debug, HashStable_Generic)]\n pub struct AnonConst {\n     pub hir_id: HirId,"}, {"sha": "ecd370b240467b6fd5ff4b8d9859597eddbd5d52", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d9aa28767287670df6cf823b94629122e04442c0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aa28767287670df6cf823b94629122e04442c0/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=d9aa28767287670df6cf823b94629122e04442c0", "patch": "@@ -919,6 +919,19 @@ impl<'hir> Map<'hir> {\n     pub fn node_to_string(&self, id: HirId) -> String {\n         hir_id_to_string(self, id)\n     }\n+\n+    /// Returns the HirId of `N` in `struct Foo<const N: usize = { ... }>` when\n+    /// called with the HirId for the `{ ... }` anon const\n+    pub fn opt_const_param_default_param_hir_id(&self, anon_const: HirId) -> Option<HirId> {\n+        match self.get(self.get_parent_node(anon_const)) {\n+            Node::GenericParam(GenericParam {\n+                hir_id: param_id,\n+                kind: GenericParamKind::Const { .. },\n+                ..\n+            }) => Some(*param_id),\n+            _ => None,\n+        }\n+    }\n }\n \n impl<'hir> intravisit::Map<'hir> for Map<'hir> {"}, {"sha": "46b3ec5cf40c774ce5259e3892b9c62c7918c3d0", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 68, "deletions": 1, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d9aa28767287670df6cf823b94629122e04442c0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aa28767287670df6cf823b94629122e04442c0/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=d9aa28767287670df6cf823b94629122e04442c0", "patch": "@@ -1437,6 +1437,52 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n                 // of a const parameter type, e.g. `struct Foo<const N: usize, const M: [u8; N]>` is not allowed.\n                 None\n             } else if tcx.lazy_normalization() {\n+                if let Some(param_id) = tcx.hir().opt_const_param_default_param_hir_id(hir_id) {\n+                    // If the def_id we are calling generics_of on is an anon ct default i.e:\n+                    //\n+                    // struct Foo<const N: usize = { .. }>;\n+                    //        ^^^       ^          ^^^^^^ def id of this anon const\n+                    //        ^         ^ param_id\n+                    //        ^ parent_def_id\n+                    //\n+                    // then we only want to return generics for params to the left of `N`. If we don't do that we\n+                    // end up with that const looking like: `ty::ConstKind::Unevaluated(def_id, substs: [N#0])`.\n+                    //\n+                    // This causes ICEs (#86580) when building the substs for Foo in `fn foo() -> Foo { .. }` as\n+                    // we substitute the defaults with the partially built substs when we build the substs. Subst'ing\n+                    // the `N#0` on the unevaluated const indexes into the empty substs we're in the process of building.\n+                    //\n+                    // We fix this by having this function return the parent's generics ourselves and truncating the\n+                    // generics to only include non-forward declared params (with the exception of the `Self` ty)\n+                    //\n+                    // For the above code example that means we want `substs: []`\n+                    // For the following struct def we want `substs: [N#0]` when generics_of is called on\n+                    // the def id of the `{ N + 1 }` anon const\n+                    // struct Foo<const N: usize, const M: usize = { N + 1 }>;\n+                    //\n+                    // This has some implications for how we get the predicates available to the anon const\n+                    // see `explicit_predicates_of` for more information on this\n+                    let generics = tcx.generics_of(parent_def_id.to_def_id());\n+                    let param_def = tcx.hir().local_def_id(param_id).to_def_id();\n+                    let param_def_idx = generics.param_def_id_to_index[&param_def];\n+                    // In the above example this would be .params[..N#0]\n+                    let params = generics.params[..param_def_idx as usize].to_owned();\n+                    let param_def_id_to_index =\n+                        params.iter().map(|param| (param.def_id, param.index)).collect();\n+\n+                    return ty::Generics {\n+                        // we set the parent of these generics to be our parent's parent so that we\n+                        // dont end up with substs: [N, M, N] for the const default on a struct like this:\n+                        // struct Foo<const N: usize, const M: usize = { ... }>;\n+                        parent: generics.parent,\n+                        parent_count: generics.parent_count,\n+                        params,\n+                        param_def_id_to_index,\n+                        has_self: generics.has_self,\n+                        has_late_bound_regions: generics.has_late_bound_regions,\n+                    };\n+                }\n+\n                 // HACK(eddyb) this provides the correct generics when\n                 // `feature(const_generics)` is enabled, so that const expressions\n                 // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n@@ -2355,7 +2401,8 @@ fn trait_explicit_predicates_and_bounds(\n }\n \n fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicates<'_> {\n-    if let DefKind::Trait = tcx.def_kind(def_id) {\n+    let def_kind = tcx.def_kind(def_id);\n+    if let DefKind::Trait = def_kind {\n         // Remove bounds on associated types from the predicates, they will be\n         // returned by `explicit_item_bounds`.\n         let predicates_and_bounds = tcx.trait_explicit_predicates_and_bounds(def_id.expect_local());\n@@ -2400,6 +2447,26 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n             }\n         }\n     } else {\n+        if matches!(def_kind, DefKind::AnonConst) && tcx.lazy_normalization() {\n+            let hir_id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n+            if let Some(_) = tcx.hir().opt_const_param_default_param_hir_id(hir_id) {\n+                // In `generics_of` we set the generics' parent to be our parent's parent which means that\n+                // we lose out on the predicates of our actual parent if we dont return those predicates here.\n+                // (See comment in `generics_of` for more information on why the parent shenanigans is necessary)\n+                //\n+                // struct Foo<T, const N: usize = { <T as Trait>::ASSOC }>(T) where T: Trait;\n+                //        ^^^                     ^^^^^^^^^^^^^^^^^^^^^^^ the def id we are calling\n+                //        ^^^                                             explicit_predicates_of on\n+                //        parent item we dont have set as the\n+                //        parent of generics returned by `generics_of`\n+                //\n+                // In the above code we want the anon const to have predicates in its param env for `T: Trait`\n+                let item_id = tcx.hir().get_parent_item(hir_id);\n+                let item_def_id = tcx.hir().local_def_id(item_id).to_def_id();\n+                // In the above code example we would be calling `explicit_predicates_of(Foo)` here\n+                return tcx.explicit_predicates_of(item_def_id);\n+            }\n+        }\n         gather_explicit_predicates_of(tcx, def_id)\n     }\n }"}, {"sha": "70a2ba7fcd9d9cc5e2c54238246e21b2d2ec86f0", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d9aa28767287670df6cf823b94629122e04442c0/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aa28767287670df6cf823b94629122e04442c0/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=d9aa28767287670df6cf823b94629122e04442c0", "patch": "@@ -20,6 +20,27 @@ pub fn provide(providers: &mut Providers) {\n fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate<'_>, Span)] {\n     let id = tcx.hir().local_def_id_to_hir_id(item_def_id.expect_local());\n \n+    if matches!(tcx.def_kind(item_def_id), hir::def::DefKind::AnonConst) && tcx.lazy_normalization()\n+    {\n+        if let Some(_) = tcx.hir().opt_const_param_default_param_hir_id(id) {\n+            // In `generics_of` we set the generics' parent to be our parent's parent which means that\n+            // we lose out on the predicates of our actual parent if we dont return those predicates here.\n+            // (See comment in `generics_of` for more information on why the parent shenanigans is necessary)\n+            //\n+            // struct Foo<'a, 'b, const N: usize = { ... }>(&'a &'b ());\n+            //        ^^^                          ^^^^^^^ the def id we are calling\n+            //        ^^^                                  inferred_outlives_of on\n+            //        parent item we dont have set as the\n+            //        parent of generics returned by `generics_of`\n+            //\n+            // In the above code we want the anon const to have predicates in its param env for `'b: 'a`\n+            let item_id = tcx.hir().get_parent_item(id);\n+            let item_def_id = tcx.hir().local_def_id(item_id).to_def_id();\n+            // In the above code example we would be calling `inferred_outlives_of(Foo)` here\n+            return tcx.inferred_outlives_of(item_def_id);\n+        }\n+    }\n+\n     match tcx.hir().get(id) {\n         Node::Item(item) => match item.kind {\n             hir::ItemKind::Struct(..) | hir::ItemKind::Enum(..) | hir::ItemKind::Union(..) => {"}, {"sha": "c2a41cf2ad7ddc2c2599c99ccc6db1e59b50c7e2", "filename": "src/test/ui/const-generics/defaults/cec-concrete-default.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d9aa28767287670df6cf823b94629122e04442c0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-concrete-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aa28767287670df6cf823b94629122e04442c0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-concrete-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-concrete-default.rs?ref=d9aa28767287670df6cf823b94629122e04442c0", "patch": "@@ -0,0 +1,14 @@\n+#![feature(const_generics, const_evaluatable_checked, const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: usize, const M: usize = { N + 1 }>;\n+fn no_constraining() -> Foo<10> {\n+    Foo::<10, 11>\n+}\n+\n+pub fn different_than_default() -> Foo<10> {\n+    Foo::<10, 12>\n+    //~^ error: mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "090e507b7f34e41655771cc7fb8b4dc60059dd27", "filename": "src/test/ui/const-generics/defaults/cec-concrete-default.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d9aa28767287670df6cf823b94629122e04442c0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-concrete-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9aa28767287670df6cf823b94629122e04442c0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-concrete-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-concrete-default.stderr?ref=d9aa28767287670df6cf823b94629122e04442c0", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/cec-concrete-default.rs:10:5\n+   |\n+LL |     Foo::<10, 12>\n+   |     ^^^^^^^^^^^^^ expected `11_usize`, found `12_usize`\n+   |\n+   = note: expected type `11_usize`\n+              found type `12_usize`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "15822dfac1c5af5b1474a4455806408bfee862a9", "filename": "src/test/ui/const-generics/defaults/cec-generic-default-mismatched-types.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d9aa28767287670df6cf823b94629122e04442c0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default-mismatched-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aa28767287670df6cf823b94629122e04442c0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default-mismatched-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default-mismatched-types.rs?ref=d9aa28767287670df6cf823b94629122e04442c0", "patch": "@@ -0,0 +1,16 @@\n+#![feature(const_generics, const_evaluatable_checked, const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+struct Foo<const N: usize, const M: usize = { N + 1 }>;\n+fn should_unify<const N: usize>() -> Foo<N> where [(); { N + 1 }]: {\n+    Foo::<N, { N + 1 }>\n+}\n+pub fn shouldnt_unify<const N: usize>() -> Foo<N>\n+where\n+    [(); { N + 1 }]:,\n+    [(); { N + 2 }]:, {\n+    Foo::<N, { N + 2 }>\n+    //~^ error: mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "f97fc26a0732183c79336fd5e885d1d788ffe6a6", "filename": "src/test/ui/const-generics/defaults/cec-generic-default-mismatched-types.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d9aa28767287670df6cf823b94629122e04442c0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default-mismatched-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9aa28767287670df6cf823b94629122e04442c0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default-mismatched-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default-mismatched-types.stderr?ref=d9aa28767287670df6cf823b94629122e04442c0", "patch": "@@ -0,0 +1,12 @@\n+error[E0308]: mismatched types\n+  --> $DIR/cec-generic-default-mismatched-types.rs:12:5\n+   |\n+LL |     Foo::<N, { N + 2 }>\n+   |     ^^^^^^^^^^^^^^^^^^^ expected `{ N + 1 }`, found `{ N + 2 }`\n+   |\n+   = note: expected type `{ N + 1 }`\n+              found type `{ N + 2 }`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "76ff7c7801b0623f4dad588dba1949e6672e8f2e", "filename": "src/test/ui/const-generics/defaults/cec-generic-default.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d9aa28767287670df6cf823b94629122e04442c0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9aa28767287670df6cf823b94629122e04442c0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default.rs?ref=d9aa28767287670df6cf823b94629122e04442c0", "patch": "@@ -0,0 +1,24 @@\n+#![feature(const_evaluatable_checked, const_generics, const_generics_defaults)]\n+#![allow(incomplete_features)]\n+\n+pub struct Foo<const N: usize, const M: usize = { N + 1 }>;\n+pub fn needs_evaluatable_bound<const N1: usize>() -> Foo<N1> {\n+    //~^ error: unconstrained generic constant\n+    loop {}\n+}\n+pub fn has_evaluatable_bound<const N1: usize>() -> Foo<N1> where [(); N1 + 1]: {\n+    loop {}\n+}\n+\n+type FooAlias<const N: usize, const NP: usize = { N + 1 }> = [(); NP];\n+fn needs_evaluatable_bound_alias<T, const N: usize>() -> FooAlias<N>\n+{\n+    //~^^ error: unconstrained generic constant\n+    todo!()\n+}\n+fn has_evaluatable_bound_alias<const N: usize>() -> FooAlias<N>\n+where [(); N + 1]: {\n+    todo!()\n+}\n+\n+fn main() {}"}, {"sha": "0234ea8b9a4a9aa44933093da97d6efcf2e5f3fb", "filename": "src/test/ui/const-generics/defaults/cec-generic-default.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d9aa28767287670df6cf823b94629122e04442c0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d9aa28767287670df6cf823b94629122e04442c0/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fcec-generic-default.stderr?ref=d9aa28767287670df6cf823b94629122e04442c0", "patch": "@@ -0,0 +1,18 @@\n+error: unconstrained generic constant\n+  --> $DIR/cec-generic-default.rs:5:54\n+   |\n+LL | pub fn needs_evaluatable_bound<const N1: usize>() -> Foo<N1> {\n+   |                                                      ^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { N + 1 }]:`\n+\n+error: unconstrained generic constant\n+  --> $DIR/cec-generic-default.rs:14:58\n+   |\n+LL | fn needs_evaluatable_bound_alias<T, const N: usize>() -> FooAlias<N>\n+   |                                                          ^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { N + 1 }]:`\n+\n+error: aborting due to 2 previous errors\n+"}]}