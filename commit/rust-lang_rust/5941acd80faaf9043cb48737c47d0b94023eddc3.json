{"sha": "5941acd80faaf9043cb48737c47d0b94023eddc3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NDFhY2Q4MGZhYWY5MDQzY2I0ODczN2M0N2QwYjk0MDIzZWRkYzM=", "commit": {"author": {"name": "Marco A L Barbosa", "email": "malbarbo@gmail.com", "date": "2019-07-30T19:31:26Z"}, "committer": {"name": "Marco A L Barbosa", "email": "malbarbo@gmail.com", "date": "2019-08-15T11:45:10Z"}, "message": "Use libunwind from llvm-project submodule for musl targets", "tree": {"sha": "619cc4340ee548f6acc0075a111f534d7ab2b955", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/619cc4340ee548f6acc0075a111f534d7ab2b955"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5941acd80faaf9043cb48737c47d0b94023eddc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5941acd80faaf9043cb48737c47d0b94023eddc3", "html_url": "https://github.com/rust-lang/rust/commit/5941acd80faaf9043cb48737c47d0b94023eddc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5941acd80faaf9043cb48737c47d0b94023eddc3/comments", "author": {"login": "malbarbo", "id": 1678126, "node_id": "MDQ6VXNlcjE2NzgxMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1678126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/malbarbo", "html_url": "https://github.com/malbarbo", "followers_url": "https://api.github.com/users/malbarbo/followers", "following_url": "https://api.github.com/users/malbarbo/following{/other_user}", "gists_url": "https://api.github.com/users/malbarbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/malbarbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/malbarbo/subscriptions", "organizations_url": "https://api.github.com/users/malbarbo/orgs", "repos_url": "https://api.github.com/users/malbarbo/repos", "events_url": "https://api.github.com/users/malbarbo/events{/privacy}", "received_events_url": "https://api.github.com/users/malbarbo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "malbarbo", "id": 1678126, "node_id": "MDQ6VXNlcjE2NzgxMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1678126?v=4", "gravatar_id": "", "url": "https://api.github.com/users/malbarbo", "html_url": "https://github.com/malbarbo", "followers_url": "https://api.github.com/users/malbarbo/followers", "following_url": "https://api.github.com/users/malbarbo/following{/other_user}", "gists_url": "https://api.github.com/users/malbarbo/gists{/gist_id}", "starred_url": "https://api.github.com/users/malbarbo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/malbarbo/subscriptions", "organizations_url": "https://api.github.com/users/malbarbo/orgs", "repos_url": "https://api.github.com/users/malbarbo/repos", "events_url": "https://api.github.com/users/malbarbo/events{/privacy}", "received_events_url": "https://api.github.com/users/malbarbo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "url": "https://api.github.com/repos/rust-lang/rust/commits/082cf2f9d136166cd1d552d3fb5abb1c46c99a14", "html_url": "https://github.com/rust-lang/rust/commit/082cf2f9d136166cd1d552d3fb5abb1c46c99a14"}], "stats": {"total": 76, "additions": 16, "deletions": 60}, "files": [{"sha": "bffe748f37cc16270661c756ffa9b0099bb61be7", "filename": "src/bootstrap/sanity.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5941acd80faaf9043cb48737c47d0b94023eddc3/src%2Fbootstrap%2Fsanity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5941acd80faaf9043cb48737c47d0b94023eddc3/src%2Fbootstrap%2Fsanity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsanity.rs?ref=5941acd80faaf9043cb48737c47d0b94023eddc3", "patch": "@@ -202,10 +202,6 @@ pub fn check(build: &mut Build) {\n                         panic!(\"couldn't find libc.a in musl dir: {}\",\n                                root.join(\"lib\").display());\n                     }\n-                    if fs::metadata(root.join(\"lib/libunwind.a\")).is_err() {\n-                        panic!(\"couldn't find libunwind.a in musl dir: {}\",\n-                               root.join(\"lib\").display());\n-                    }\n                 }\n                 None => {\n                     panic!(\"when targeting MUSL either the rust.musl-root \\"}, {"sha": "74ba2f0eadb25602f8718520f1fa08e0ed0e981f", "filename": "src/ci/docker/scripts/musl-toolchain.sh", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5941acd80faaf9043cb48737c47d0b94023eddc3/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5941acd80faaf9043cb48737c47d0b94023eddc3/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmusl-toolchain.sh?ref=5941acd80faaf9043cb48737c47d0b94023eddc3", "patch": "@@ -54,29 +54,3 @@ if [ \"$REPLACE_CC\" = \"1\" ]; then\n         ln -s $TARGET-g++ /usr/local/bin/$exec\n     done\n fi\n-\n-export CC=$TARGET-gcc\n-export CXX=$TARGET-g++\n-\n-LLVM=70\n-\n-# may have been downloaded in a previous run\n-if [ ! -d libunwind-release_$LLVM ]; then\n-  curl -L https://github.com/llvm-mirror/llvm/archive/release_$LLVM.tar.gz | tar xzf -\n-  curl -L https://github.com/llvm-mirror/libunwind/archive/release_$LLVM.tar.gz | tar xzf -\n-fi\n-\n-# fixme(mati865): Replace it with https://github.com/rust-lang/rust/pull/59089\n-mkdir libunwind-build\n-cd libunwind-build\n-cmake ../libunwind-release_$LLVM \\\n-          -DLLVM_PATH=/build/llvm-release_$LLVM \\\n-          -DLIBUNWIND_ENABLE_SHARED=0 \\\n-          -DCMAKE_C_COMPILER=$CC \\\n-          -DCMAKE_CXX_COMPILER=$CXX \\\n-          -DCMAKE_C_FLAGS=\"$CFLAGS\" \\\n-          -DCMAKE_CXX_FLAGS=\"$CXXFLAGS\"\n-\n-hide_output make -j$(nproc)\n-cp lib/libunwind.a $OUTPUT/$TARGET/lib\n-cd - && rm -rf libunwind-build"}, {"sha": "d847c407aba679135ca14c7b56cf50b0ca3ed0b3", "filename": "src/ci/docker/scripts/musl.sh", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5941acd80faaf9043cb48737c47d0b94023eddc3/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5941acd80faaf9043cb48737c47d0b94023eddc3/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fmusl.sh?ref=5941acd80faaf9043cb48737c47d0b94023eddc3", "patch": "@@ -20,6 +20,8 @@ exit 1\n TAG=$1\n shift\n \n+# Ancient binutils versions don't understand debug symbols produced by more recent tools.\n+# Apparently applying `-fPIC` everywhere allows them to link successfully.\n export CFLAGS=\"-fPIC $CFLAGS\"\n \n MUSL=musl-1.1.22\n@@ -38,27 +40,3 @@ else\n fi\n hide_output make install\n hide_output make clean\n-\n-cd ..\n-\n-LLVM=70\n-\n-# may have been downloaded in a previous run\n-if [ ! -d libunwind-release_$LLVM ]; then\n-  curl -L https://github.com/llvm-mirror/llvm/archive/release_$LLVM.tar.gz | tar xzf -\n-  curl -L https://github.com/llvm-mirror/libunwind/archive/release_$LLVM.tar.gz | tar xzf -\n-fi\n-\n-mkdir libunwind-build\n-cd libunwind-build\n-cmake ../libunwind-release_$LLVM \\\n-          -DLLVM_PATH=/build/llvm-release_$LLVM \\\n-          -DLIBUNWIND_ENABLE_SHARED=0 \\\n-          -DCMAKE_C_COMPILER=$CC \\\n-          -DCMAKE_CXX_COMPILER=$CXX \\\n-          -DCMAKE_C_FLAGS=\"$CFLAGS\" \\\n-          -DCMAKE_CXX_FLAGS=\"$CXXFLAGS\"\n-\n-hide_output make -j$(nproc)\n-cp lib/libunwind.a /musl-$TAG/lib\n-cd ../ && rm -rf libunwind-build"}, {"sha": "f10df8c85ba0a66e85acdd72d65b1b3a7e54ec0f", "filename": "src/libunwind/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5941acd80faaf9043cb48737c47d0b94023eddc3/src%2Flibunwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5941acd80faaf9043cb48737c47d0b94023eddc3/src%2Flibunwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2FCargo.toml?ref=5941acd80faaf9043cb48737c47d0b94023eddc3", "patch": "@@ -22,7 +22,7 @@ compiler_builtins = \"0.1.0\"\n cfg-if = \"0.1.8\"\n \n [build-dependencies]\n-cc = { optional = true, version = \"1.0.1\" }\n+cc = { version = \"1.0.1\" }\n \n [features]\n-llvm-libunwind = [\"cc\"]\n+llvm-libunwind = []"}, {"sha": "a266407c60294152fe9dedcbf4aaf30a6f5083b5", "filename": "src/libunwind/build.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5941acd80faaf9043cb48737c47d0b94023eddc3/src%2Flibunwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5941acd80faaf9043cb48737c47d0b94023eddc3/src%2Flibunwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Fbuild.rs?ref=5941acd80faaf9043cb48737c47d0b94023eddc3", "patch": "@@ -5,14 +5,14 @@ fn main() {\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n \n     if cfg!(feature = \"llvm-libunwind\") &&\n-        (target.contains(\"linux\") ||\n+        ((target.contains(\"linux\") && !target.contains(\"musl\")) ||\n          target.contains(\"fuchsia\")) {\n         // Build the unwinding from libunwind C/C++ source code.\n-        #[cfg(feature = \"llvm-libunwind\")]\n         llvm_libunwind::compile();\n     } else if target.contains(\"linux\") {\n         if target.contains(\"musl\") {\n-            // musl is handled in lib.rs\n+            // linking for musl is handled in lib.rs\n+            llvm_libunwind::compile();\n         } else if !target.contains(\"android\") {\n             println!(\"cargo:rustc-link-lib=gcc_s\");\n         }\n@@ -44,7 +44,6 @@ fn main() {\n     }\n }\n \n-#[cfg(feature = \"llvm-libunwind\")]\n mod llvm_libunwind {\n     use std::env;\n     use std::path::Path;\n@@ -96,6 +95,15 @@ mod llvm_libunwind {\n             cfg.file(root.join(\"src\").join(src));\n         }\n \n+        if target_env == \"musl\" {\n+            // use the same C compiler command to compile C++ code so we do not need to setup the\n+            // C++ compiler env variables on the builders\n+            cfg.cpp(false);\n+            // linking for musl is handled in lib.rs\n+            cfg.cargo_metadata(false);\n+            println!(\"cargo:rustc-link-search=native={}\", env::var(\"OUT_DIR\").unwrap());\n+        }\n+\n         cfg.compile(\"unwind\");\n     }\n }"}]}