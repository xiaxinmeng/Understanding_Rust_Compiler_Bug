{"sha": "42d4e261a170377fefb49516405445f9a27c0df5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZDRlMjYxYTE3MDM3N2ZlZmI0OTUxNjQwNTQ0NWY5YTI3YzBkZjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-29T03:08:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-29T03:08:18Z"}, "message": "Rollup merge of #65294 - varkor:lint-inline-prototype, r=matthewjasper\n\nLint ignored `#[inline]` on function prototypes\n\nFixes https://github.com/rust-lang/rust/issues/51280.\n\n- Adds a `unused_attribute` lint for `#[inline]` on function prototypes.\n- As a consequence, foreign items, impl items and trait items now have their attributes checked, which could cause some code to no longer compile (it was previously erroneously ignored).", "tree": {"sha": "c89eb796dbc30ab12f85db50770a2fd53c5b572c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c89eb796dbc30ab12f85db50770a2fd53c5b572c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42d4e261a170377fefb49516405445f9a27c0df5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdt60iCRBK7hj4Ov3rIwAAdHIIAH/kMiaVfheg0TLvKz7nMuJO\n/RbvsSu0cLhch7kCO05i2Ndf0dcvCdyssprWbnh/EDvGuPQQU/RDL57HuB66Jlz4\ndVe4oIudugv18LybuTjUG9wVJDsc6NEZHCcBmgbXCF365iz/e/ZdsIVQbeWgh/8t\nVWdM9O2WioHDhphoal2TKr0KmiuB9g+XVORvOts/JUEE3Hcm3JVbCeG0Ve6Mpj6P\nYlPJGWB8wPSsLyB9JqDp9pX8MbmMYv3mTz1Ny1D2b3DwiVkjhj7oCCLWBHfkn+8Q\nUbkFeZ/9dlhPeAzTWc0ddQl7WeW1qyMyT4s0hvYh+hN5WLF/DvCh7nNrVpMpbnw=\n=usGk\n-----END PGP SIGNATURE-----\n", "payload": "tree c89eb796dbc30ab12f85db50770a2fd53c5b572c\nparent cac68218105f1ba8b6a2a0b21b791951ff02f75d\nparent f47f53078c7477d2a2f7739c8f0e295125dd6bd3\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1572318498 +0100\ncommitter GitHub <noreply@github.com> 1572318498 +0100\n\nRollup merge of #65294 - varkor:lint-inline-prototype, r=matthewjasper\n\nLint ignored `#[inline]` on function prototypes\n\nFixes https://github.com/rust-lang/rust/issues/51280.\n\n- Adds a `unused_attribute` lint for `#[inline]` on function prototypes.\n- As a consequence, foreign items, impl items and trait items now have their attributes checked, which could cause some code to no longer compile (it was previously erroneously ignored).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42d4e261a170377fefb49516405445f9a27c0df5", "html_url": "https://github.com/rust-lang/rust/commit/42d4e261a170377fefb49516405445f9a27c0df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42d4e261a170377fefb49516405445f9a27c0df5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cac68218105f1ba8b6a2a0b21b791951ff02f75d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cac68218105f1ba8b6a2a0b21b791951ff02f75d", "html_url": "https://github.com/rust-lang/rust/commit/cac68218105f1ba8b6a2a0b21b791951ff02f75d"}, {"sha": "f47f53078c7477d2a2f7739c8f0e295125dd6bd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f47f53078c7477d2a2f7739c8f0e295125dd6bd3", "html_url": "https://github.com/rust-lang/rust/commit/f47f53078c7477d2a2f7739c8f0e295125dd6bd3"}], "stats": {"total": 668, "additions": 461, "deletions": 207}, "files": [{"sha": "00466d3d731847abe51b0eb504c87272a0308c09", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -150,9 +150,9 @@ dependencies = [\n \n [[package]]\n name = \"bitflags\"\n-version = \"1.1.0\"\n+version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3d155346769a6855b86399e9bc3814ab343cd3d62c7e985113d46a0ec3c281fd\"\n+checksum = \"cf1de2fe8c75bc145a2f577add951f8134889b4795d47466a54a5c846d691693\"\n \n [[package]]\n name = \"blake2-rfc\""}, {"sha": "812111a2e72559d1d925647a62834c0e688caed7", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -11,7 +11,7 @@ doctest = false\n \n [dependencies]\n arena = { path = \"../libarena\" }\n-bitflags = \"1.0\"\n+bitflags = \"1.2.1\"\n fmt_macros = { path = \"../libfmt_macros\" }\n graphviz = { path = \"../libgraphviz\" }\n jobserver = \"0.1\""}, {"sha": "3e35add9616bd676144310764dc1e8af0b4e9c1b", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -2219,7 +2219,7 @@ rejected in your own crates.\n \"##,\n \n E0736: r##\"\n-#[track_caller] and #[naked] cannot be applied to the same function.\n+`#[track_caller]` and `#[naked]` cannot both be applied to the same function.\n \n Erroneous code example:\n \n@@ -2237,6 +2237,57 @@ See [RFC 2091] for details on this and other limitations.\n [RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n \"##,\n \n+E0738: r##\"\n+`#[track_caller]` cannot be used in traits yet. This is due to limitations in\n+the compiler which are likely to be temporary. See [RFC 2091] for details on\n+this and other restrictions.\n+\n+Erroneous example with a trait method implementation:\n+\n+```compile_fail,E0738\n+#![feature(track_caller)]\n+\n+trait Foo {\n+    fn bar(&self);\n+}\n+\n+impl Foo for u64 {\n+    #[track_caller]\n+    fn bar(&self) {}\n+}\n+```\n+\n+Erroneous example with a blanket trait method implementation:\n+\n+```compile_fail,E0738\n+#![feature(track_caller)]\n+\n+trait Foo {\n+    #[track_caller]\n+    fn bar(&self) {}\n+    fn baz(&self);\n+}\n+```\n+\n+Erroneous example with a trait method declaration:\n+\n+```compile_fail,E0738\n+#![feature(track_caller)]\n+\n+trait Foo {\n+    fn bar(&self) {}\n+\n+    #[track_caller]\n+    fn baz(&self);\n+}\n+```\n+\n+Note that while the compiler may be able to support the attribute in traits in\n+the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n+\n+[RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n+\"##,\n+\n ;\n //  E0006, // merged with E0005\n //  E0101, // replaced with E0282"}, {"sha": "96562002aa070240c1cffeee6b91d7bf7e91fe5a", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 219, "deletions": 86, "changes": 305, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -4,16 +4,24 @@\n //! conflicts between multiple such attributes attached to the same\n //! item.\n \n-use crate::hir;\n+use crate::hir::{self, HirId, HirVec, Attribute, Item, ItemKind, TraitItem, TraitItemKind};\n+use crate::hir::DUMMY_HIR_ID;\n use crate::hir::def_id::DefId;\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n+use crate::lint::builtin::UNUSED_ATTRIBUTES;\n use crate::ty::TyCtxt;\n use crate::ty::query::Providers;\n \n use std::fmt::{self, Display};\n use syntax::{attr, symbol::sym};\n use syntax_pos::Span;\n \n+#[derive(Copy, Clone, PartialEq)]\n+pub(crate) enum MethodKind {\n+    Trait { body: bool },\n+    Inherent,\n+}\n+\n #[derive(Copy, Clone, PartialEq)]\n pub(crate) enum Target {\n     ExternCrate,\n@@ -35,6 +43,12 @@ pub(crate) enum Target {\n     Impl,\n     Expression,\n     Statement,\n+    AssocConst,\n+    Method(MethodKind),\n+    AssocTy,\n+    ForeignFn,\n+    ForeignStatic,\n+    ForeignTy,\n }\n \n impl Display for Target {\n@@ -59,29 +73,76 @@ impl Display for Target {\n             Target::Impl => \"item\",\n             Target::Expression => \"expression\",\n             Target::Statement => \"statement\",\n+            Target::AssocConst => \"associated const\",\n+            Target::Method(_) => \"method\",\n+            Target::AssocTy => \"associated type\",\n+            Target::ForeignFn => \"foreign function\",\n+            Target::ForeignStatic => \"foreign static item\",\n+            Target::ForeignTy => \"foreign type\",\n         })\n     }\n }\n \n impl Target {\n-    pub(crate) fn from_item(item: &hir::Item) -> Target {\n+    pub(crate) fn from_item(item: &Item) -> Target {\n         match item.kind {\n-            hir::ItemKind::ExternCrate(..) => Target::ExternCrate,\n-            hir::ItemKind::Use(..) => Target::Use,\n-            hir::ItemKind::Static(..) => Target::Static,\n-            hir::ItemKind::Const(..) => Target::Const,\n-            hir::ItemKind::Fn(..) => Target::Fn,\n-            hir::ItemKind::Mod(..) => Target::Mod,\n-            hir::ItemKind::ForeignMod(..) => Target::ForeignMod,\n-            hir::ItemKind::GlobalAsm(..) => Target::GlobalAsm,\n-            hir::ItemKind::TyAlias(..) => Target::TyAlias,\n-            hir::ItemKind::OpaqueTy(..) => Target::OpaqueTy,\n-            hir::ItemKind::Enum(..) => Target::Enum,\n-            hir::ItemKind::Struct(..) => Target::Struct,\n-            hir::ItemKind::Union(..) => Target::Union,\n-            hir::ItemKind::Trait(..) => Target::Trait,\n-            hir::ItemKind::TraitAlias(..) => Target::TraitAlias,\n-            hir::ItemKind::Impl(..) => Target::Impl,\n+            ItemKind::ExternCrate(..) => Target::ExternCrate,\n+            ItemKind::Use(..) => Target::Use,\n+            ItemKind::Static(..) => Target::Static,\n+            ItemKind::Const(..) => Target::Const,\n+            ItemKind::Fn(..) => Target::Fn,\n+            ItemKind::Mod(..) => Target::Mod,\n+            ItemKind::ForeignMod(..) => Target::ForeignMod,\n+            ItemKind::GlobalAsm(..) => Target::GlobalAsm,\n+            ItemKind::TyAlias(..) => Target::TyAlias,\n+            ItemKind::OpaqueTy(..) => Target::OpaqueTy,\n+            ItemKind::Enum(..) => Target::Enum,\n+            ItemKind::Struct(..) => Target::Struct,\n+            ItemKind::Union(..) => Target::Union,\n+            ItemKind::Trait(..) => Target::Trait,\n+            ItemKind::TraitAlias(..) => Target::TraitAlias,\n+            ItemKind::Impl(..) => Target::Impl,\n+        }\n+    }\n+\n+    fn from_trait_item(trait_item: &TraitItem) -> Target {\n+        match trait_item.kind {\n+            TraitItemKind::Const(..) => Target::AssocConst,\n+            TraitItemKind::Method(_, hir::TraitMethod::Required(_)) => {\n+                Target::Method(MethodKind::Trait { body: false })\n+            }\n+            TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => {\n+                Target::Method(MethodKind::Trait { body: true })\n+            }\n+            TraitItemKind::Type(..) => Target::AssocTy,\n+        }\n+    }\n+\n+    fn from_foreign_item(foreign_item: &hir::ForeignItem) -> Target {\n+        match foreign_item.kind {\n+            hir::ForeignItemKind::Fn(..) => Target::ForeignFn,\n+            hir::ForeignItemKind::Static(..) => Target::ForeignStatic,\n+            hir::ForeignItemKind::Type => Target::ForeignTy,\n+        }\n+    }\n+\n+    fn from_impl_item<'tcx>(tcx: TyCtxt<'tcx>, impl_item: &hir::ImplItem) -> Target {\n+        match impl_item.kind {\n+            hir::ImplItemKind::Const(..) => Target::AssocConst,\n+            hir::ImplItemKind::Method(..) => {\n+                let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id);\n+                let containing_item = tcx.hir().expect_item(parent_hir_id);\n+                let containing_impl_is_for_trait = match &containing_item.kind {\n+                    hir::ItemKind::Impl(_, _, _, _, tr, _, _) => tr.is_some(),\n+                    _ => bug!(\"parent of an ImplItem must be an Impl\"),\n+                };\n+                if containing_impl_is_for_trait {\n+                    Target::Method(MethodKind::Trait { body: true })\n+                } else {\n+                    Target::Method(MethodKind::Inherent)\n+                }\n+            }\n+            hir::ImplItemKind::TyAlias(..) | hir::ImplItemKind::OpaqueTy(..) => Target::AssocTy,\n         }\n     }\n }\n@@ -92,19 +153,26 @@ struct CheckAttrVisitor<'tcx> {\n \n impl CheckAttrVisitor<'tcx> {\n     /// Checks any attribute.\n-    fn check_attributes(&self, item: &hir::Item, target: Target) {\n+    fn check_attributes(\n+        &self,\n+        hir_id: HirId,\n+        attrs: &HirVec<Attribute>,\n+        span: &Span,\n+        target: Target,\n+        item: Option<&Item>,\n+    ) {\n         let mut is_valid = true;\n-        for attr in &item.attrs {\n+        for attr in attrs {\n             is_valid &= if attr.check_name(sym::inline) {\n-                self.check_inline(attr, &item.span, target)\n+                self.check_inline(hir_id, attr, span, target)\n             } else if attr.check_name(sym::non_exhaustive) {\n-                self.check_non_exhaustive(attr, item, target)\n+                self.check_non_exhaustive(attr, span, target)\n             } else if attr.check_name(sym::marker) {\n-                self.check_marker(attr, item, target)\n+                self.check_marker(attr, span, target)\n             } else if attr.check_name(sym::target_feature) {\n-                self.check_target_feature(attr, item, target)\n+                self.check_target_feature(attr, span, target)\n             } else if attr.check_name(sym::track_caller) {\n-                self.check_track_caller(attr, &item, target)\n+                self.check_track_caller(&attr.span, attrs, span, target)\n             } else {\n                 true\n             };\n@@ -115,59 +183,105 @@ impl CheckAttrVisitor<'tcx> {\n         }\n \n         if target == Target::Fn {\n-            self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(item.hir_id));\n+            self.tcx.codegen_fn_attrs(self.tcx.hir().local_def_id(hir_id));\n         }\n \n-        self.check_repr(item, target);\n-        self.check_used(item, target);\n+        self.check_repr(attrs, span, target, item);\n+        self.check_used(attrs, target);\n     }\n \n     /// Checks if an `#[inline]` is applied to a function or a closure. Returns `true` if valid.\n-    fn check_inline(&self, attr: &hir::Attribute, span: &Span, target: Target) -> bool {\n-        if target != Target::Fn && target != Target::Closure {\n-            struct_span_err!(self.tcx.sess,\n-                             attr.span,\n-                             E0518,\n-                             \"attribute should be applied to function or closure\")\n-                .span_label(*span, \"not a function or closure\")\n+    fn check_inline(&self, hir_id: HirId, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        match target {\n+            Target::Fn | Target::Closure | Target::Method(MethodKind::Trait { body: true })\n+            | Target::Method(MethodKind::Inherent) => true,\n+            Target::Method(MethodKind::Trait { body: false }) | Target::ForeignFn => {\n+                self.tcx.struct_span_lint_hir(\n+                    UNUSED_ATTRIBUTES,\n+                    hir_id,\n+                    attr.span,\n+                    \"`#[inline]` is ignored on function prototypes\",\n+                ).emit();\n+                true\n+            }\n+            // FIXME(#65833): We permit associated consts to have an `#[inline]` attribute with\n+            // just a lint, because we previously erroneously allowed it and some crates used it\n+            // accidentally, to to be compatible with crates depending on them, we can't throw an\n+            // error here.\n+            Target::AssocConst => {\n+                self.tcx.struct_span_lint_hir(\n+                    UNUSED_ATTRIBUTES,\n+                    hir_id,\n+                    attr.span,\n+                    \"`#[inline]` is ignored on constants\",\n+                ).warn(\"this was previously accepted by the compiler but is \\\n+                       being phased out; it will become a hard error in \\\n+                       a future release!\")\n+                .note(\"for more information, see issue #65833 \\\n+                       <https://github.com/rust-lang/rust/issues/65833>\")\n                 .emit();\n-            false\n-        } else {\n-            true\n+                true\n+            }\n+            _ => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    attr.span,\n+                    E0518,\n+                    \"attribute should be applied to function or closure\",\n+                ).span_label(*span, \"not a function or closure\")\n+                    .emit();\n+                false\n+            }\n         }\n     }\n \n     /// Checks if a `#[track_caller]` is applied to a non-naked function. Returns `true` if valid.\n-    fn check_track_caller(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) -> bool {\n-        if target != Target::Fn {\n-            struct_span_err!(\n-                self.tcx.sess,\n-                attr.span,\n-                E0739,\n-                \"attribute should be applied to function\"\n-            )\n-            .span_label(item.span, \"not a function\")\n-            .emit();\n-            false\n-        } else if attr::contains_name(&item.attrs, sym::naked) {\n-            struct_span_err!(\n-                self.tcx.sess,\n-                attr.span,\n-                E0736,\n-                \"cannot use `#[track_caller]` with `#[naked]`\",\n-            )\n-            .emit();\n-            false\n-        } else {\n-            true\n+    fn check_track_caller(\n+        &self,\n+        attr_span: &Span,\n+        attrs: &HirVec<Attribute>,\n+        span: &Span,\n+        target: Target,\n+    ) -> bool {\n+        match target {\n+            Target::Fn if attr::contains_name(attrs, sym::naked) => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    *attr_span,\n+                    E0736,\n+                    \"cannot use `#[track_caller]` with `#[naked]`\",\n+                ).emit();\n+                false\n+            }\n+            Target::Fn | Target::Method(MethodKind::Inherent) => true,\n+            Target::Method(_) => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    *attr_span,\n+                    E0738,\n+                    \"`#[track_caller]` may not be used on trait methods\",\n+                ).emit();\n+                false\n+            }\n+            _ => {\n+                struct_span_err!(\n+                    self.tcx.sess,\n+                    *attr_span,\n+                    E0739,\n+                    \"attribute should be applied to function\"\n+                )\n+                .span_label(*span, \"not a function\")\n+                .emit();\n+                false\n+            }\n         }\n     }\n \n     /// Checks if the `#[non_exhaustive]` attribute on an `item` is valid. Returns `true` if valid.\n     fn check_non_exhaustive(\n         &self,\n-        attr: &hir::Attribute,\n-        item: &hir::Item,\n+        attr: &Attribute,\n+        span: &Span,\n         target: Target,\n     ) -> bool {\n         match target {\n@@ -177,54 +291,56 @@ impl CheckAttrVisitor<'tcx> {\n                                  attr.span,\n                                  E0701,\n                                  \"attribute can only be applied to a struct or enum\")\n-                    .span_label(item.span, \"not a struct or enum\")\n+                    .span_label(*span, \"not a struct or enum\")\n                     .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if the `#[marker]` attribute on an `item` is valid. Returns `true` if valid.\n-    fn check_marker(&self, attr: &hir::Attribute, item: &hir::Item, target: Target) -> bool {\n+    fn check_marker(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n             Target::Trait => true,\n             _ => {\n                 self.tcx.sess\n                     .struct_span_err(attr.span, \"attribute can only be applied to a trait\")\n-                    .span_label(item.span, \"not a trait\")\n+                    .span_label(*span, \"not a trait\")\n                     .emit();\n                 false\n             }\n         }\n     }\n \n     /// Checks if the `#[target_feature]` attribute on `item` is valid. Returns `true` if valid.\n-    fn check_target_feature(\n-        &self,\n-        attr: &hir::Attribute,\n-        item: &hir::Item,\n-        target: Target,\n-    ) -> bool {\n+    fn check_target_feature(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n         match target {\n-            Target::Fn => true,\n+            Target::Fn | Target::Method(MethodKind::Trait { body: true })\n+            | Target::Method(MethodKind::Inherent) => true,\n             _ => {\n                 self.tcx.sess\n                     .struct_span_err(attr.span, \"attribute should be applied to a function\")\n-                    .span_label(item.span, \"not a function\")\n+                    .span_label(*span, \"not a function\")\n                     .emit();\n                 false\n             },\n         }\n     }\n \n     /// Checks if the `#[repr]` attributes on `item` are valid.\n-    fn check_repr(&self, item: &hir::Item, target: Target) {\n+    fn check_repr(\n+        &self,\n+        attrs: &HirVec<Attribute>,\n+        span: &Span,\n+        target: Target,\n+        item: Option<&Item>,\n+    ) {\n         // Extract the names of all repr hints, e.g., [foo, bar, align] for:\n         // ```\n         // #[repr(foo)]\n         // #[repr(bar, align(8))]\n         // ```\n-        let hints: Vec<_> = item.attrs\n+        let hints: Vec<_> = attrs\n             .iter()\n             .filter(|attr| attr.check_name(sym::repr))\n             .filter_map(|attr| attr.meta_item_list())\n@@ -282,7 +398,7 @@ impl CheckAttrVisitor<'tcx> {\n             };\n             self.emit_repr_error(\n                 hint.span(),\n-                item.span,\n+                *span,\n                 &format!(\"attribute should be applied to {}\", allowed_targets),\n                 &format!(\"not {} {}\", article, allowed_targets),\n             )\n@@ -301,7 +417,7 @@ impl CheckAttrVisitor<'tcx> {\n         // Warn on repr(u8, u16), repr(C, simd), and c-like-enum-repr(C, u8)\n         if (int_reprs > 1)\n            || (is_simd && is_c)\n-           || (int_reprs == 1 && is_c && is_c_like_enum(item)) {\n+           || (int_reprs == 1 && is_c && item.map_or(false, |item| is_c_like_enum(item))) {\n             let hint_spans: Vec<_> = hint_spans.collect();\n             span_warn!(self.tcx.sess, hint_spans, E0566,\n                        \"conflicting representation hints\");\n@@ -325,7 +441,7 @@ impl CheckAttrVisitor<'tcx> {\n         if let hir::StmtKind::Local(ref l) = stmt.kind {\n             for attr in l.attrs.iter() {\n                 if attr.check_name(sym::inline) {\n-                    self.check_inline(attr, &stmt.span, Target::Statement);\n+                    self.check_inline(DUMMY_HIR_ID, attr, &stmt.span, Target::Statement);\n                 }\n                 if attr.check_name(sym::repr) {\n                     self.emit_repr_error(\n@@ -346,7 +462,7 @@ impl CheckAttrVisitor<'tcx> {\n         };\n         for attr in expr.attrs.iter() {\n             if attr.check_name(sym::inline) {\n-                self.check_inline(attr, &expr.span, target);\n+                self.check_inline(DUMMY_HIR_ID, attr, &expr.span, target);\n             }\n             if attr.check_name(sym::repr) {\n                 self.emit_repr_error(\n@@ -359,8 +475,8 @@ impl CheckAttrVisitor<'tcx> {\n         }\n     }\n \n-    fn check_used(&self, item: &hir::Item, target: Target) {\n-        for attr in &item.attrs {\n+    fn check_used(&self, attrs: &HirVec<Attribute>, target: Target) {\n+        for attr in attrs {\n             if attr.check_name(sym::used) && target != Target::Static {\n                 self.tcx.sess\n                     .span_err(attr.span, \"attribute must be applied to a `static` variable\");\n@@ -374,12 +490,29 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         NestedVisitorMap::OnlyBodies(&self.tcx.hir())\n     }\n \n-    fn visit_item(&mut self, item: &'tcx hir::Item) {\n+    fn visit_item(&mut self, item: &'tcx Item) {\n         let target = Target::from_item(item);\n-        self.check_attributes(item, target);\n+        self.check_attributes(item.hir_id, &item.attrs, &item.span, target, Some(item));\n         intravisit::walk_item(self, item)\n     }\n \n+    fn visit_trait_item(&mut self, trait_item: &'tcx TraitItem) {\n+        let target = Target::from_trait_item(trait_item);\n+        self.check_attributes(trait_item.hir_id, &trait_item.attrs, &trait_item.span, target, None);\n+        intravisit::walk_trait_item(self, trait_item)\n+    }\n+\n+    fn visit_foreign_item(&mut self, f_item: &'tcx hir::ForeignItem) {\n+        let target = Target::from_foreign_item(f_item);\n+        self.check_attributes(f_item.hir_id, &f_item.attrs, &f_item.span, target, None);\n+        intravisit::walk_foreign_item(self, f_item)\n+    }\n+\n+    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n+        let target = Target::from_impl_item(self.tcx, impl_item);\n+        self.check_attributes(impl_item.hir_id, &impl_item.attrs, &impl_item.span, target, None);\n+        intravisit::walk_impl_item(self, impl_item)\n+    }\n \n     fn visit_stmt(&mut self, stmt: &'tcx hir::Stmt) {\n         self.check_stmt_attributes(stmt);\n@@ -392,12 +525,12 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n     }\n }\n \n-fn is_c_like_enum(item: &hir::Item) -> bool {\n-    if let hir::ItemKind::Enum(ref def, _) = item.kind {\n+fn is_c_like_enum(item: &Item) -> bool {\n+    if let ItemKind::Enum(ref def, _) = item.kind {\n         for variant in &def.variants {\n             match variant.data {\n                 hir::VariantData::Unit(..) => { /* continue */ }\n-                _ => { return false; }\n+                _ => return false,\n             }\n         }\n         true"}, {"sha": "920635d838738f2e96fa63c6fef8ef44b38c77a0", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -203,7 +203,7 @@ pub trait Visitor<'v>: Sized {\n \n     /// Invoked to visit the body of a function, method or closure. Like\n     /// visit_nested_item, does nothing by default unless you override\n-    /// `nested_visit_map` to return other htan `None`, in which case it will walk\n+    /// `nested_visit_map` to return other than `None`, in which case it will walk\n     /// the body.\n     fn visit_nested_body(&mut self, id: BodyId) {\n         let opt_body = self.nested_visit_map().intra().map(|map| map.body(id));"}, {"sha": "0edc41e6b4881390b8134d6244c73fc01ebbeea9", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -2512,7 +2512,7 @@ pub enum ItemKind {\n     Fn(P<FnDecl>, FnHeader, Generics, BodyId),\n     /// A module.\n     Mod(Mod),\n-    /// An external module.\n+    /// An external module, e.g. `extern { .. }`.\n     ForeignMod(ForeignMod),\n     /// Module-level inline assembly (from `global_asm!`).\n     GlobalAsm(P<GlobalAsm>),\n@@ -2756,10 +2756,10 @@ bitflags! {\n         /// `#[used]`: indicates that LLVM can't eliminate this function (but the\n         /// linker can!).\n         const USED                      = 1 << 9;\n-        /// #[ffi_returns_twice], indicates that an extern function can return\n+        /// `#[ffi_returns_twice]`, indicates that an extern function can return\n         /// multiple times\n         const FFI_RETURNS_TWICE         = 1 << 10;\n-        /// #[track_caller]: allow access to the caller location\n+        /// `#[track_caller]`: allow access to the caller location\n         const TRACK_CALLER              = 1 << 11;\n     }\n }"}, {"sha": "5c871bb6b698899bf904e31a7a15aa130bea2b3a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -68,6 +68,12 @@ declare_lint! {\n     \"detect unused, unexported items\"\n }\n \n+declare_lint! {\n+    pub UNUSED_ATTRIBUTES,\n+    Warn,\n+    \"detects attributes that were not used by the compiler\"\n+}\n+\n declare_lint! {\n     pub UNREACHABLE_CODE,\n     Warn,"}, {"sha": "4fc15f99e484e3d282f48d7285e0f3e7d92f6688", "filename": "src/librustc_apfloat/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_apfloat%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_apfloat%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2FCargo.toml?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -9,5 +9,5 @@ name = \"rustc_apfloat\"\n path = \"lib.rs\"\n \n [dependencies]\n-bitflags = \"1.0\"\n+bitflags = \"1.2.1\"\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }"}, {"sha": "2eaae50591673ad63c0f482d52419610fdf9da20", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -10,7 +10,7 @@ path = \"lib.rs\"\n test = false\n \n [dependencies]\n-bitflags = \"1.0.4\"\n+bitflags = \"1.2.1\"\n cc = \"1.0.1\"\n num_cpus = \"1.0\"\n memmap = \"0.6\""}, {"sha": "9a826de4b6eafb86ff8642c6ffbde9cf351da1d5", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -1,6 +1,7 @@\n use rustc::hir::def::{Res, DefKind};\n use rustc::hir::def_id::DefId;\n use rustc::lint;\n+use rustc::lint::builtin::UNUSED_ATTRIBUTES;\n use rustc::ty::{self, Ty};\n use rustc::ty::adjustment;\n use rustc_data_structures::fx::FxHashMap;\n@@ -277,12 +278,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PathStatements {\n     }\n }\n \n-declare_lint! {\n-    pub UNUSED_ATTRIBUTES,\n-    Warn,\n-    \"detects attributes that were not used by the compiler\"\n-}\n-\n #[derive(Copy, Clone)]\n pub struct UnusedAttributes {\n     builtin_attributes: &'static FxHashMap<Symbol, &'static BuiltinAttribute>,"}, {"sha": "08ce7fd520e3040d0c2a7f6e088f1ebbd1be3b7e", "filename": "src/librustc_resolve/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_resolve%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_resolve%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2FCargo.toml?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -11,7 +11,7 @@ test = false\n doctest = false\n \n [dependencies]\n-bitflags = \"1.0\"\n+bitflags = \"1.2.1\"\n log = \"0.4\"\n syntax = { path = \"../libsyntax\" }\n syntax_expand = { path = \"../libsyntax_expand\" }"}, {"sha": "c73d0adea38da79490443e2d073a25ee3115206e", "filename": "src/librustc_target/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_target%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_target%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2FCargo.toml?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -9,7 +9,7 @@ name = \"rustc_target\"\n path = \"lib.rs\"\n \n [dependencies]\n-bitflags = \"1.0\"\n+bitflags = \"1.2.1\"\n log = \"0.4\"\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }"}, {"sha": "49b33ad466834ebd3c0daa209e7d5d5873dbdd5f", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -172,18 +172,6 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n         _ => None\n     };\n     check_associated_item(tcx, trait_item.hir_id, trait_item.span, method_sig);\n-\n-    // Prohibits applying `#[track_caller]` to trait decls\n-    for attr in &trait_item.attrs {\n-        if attr.check_name(sym::track_caller) {\n-            struct_span_err!(\n-                tcx.sess,\n-                attr.span,\n-                E0738,\n-                \"`#[track_caller]` is not supported in trait declarations.\"\n-            ).emit();\n-        }\n-    }\n }\n \n pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n@@ -195,29 +183,6 @@ pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: DefId) {\n         _ => None\n     };\n \n-    // Prohibits applying `#[track_caller]` to trait impls\n-    if method_sig.is_some() {\n-        let track_caller_attr = impl_item.attrs.iter()\n-            .find(|a| a.check_name(sym::track_caller));\n-        if let Some(tc_attr) = track_caller_attr {\n-            let parent_hir_id = tcx.hir().get_parent_item(hir_id);\n-            let containing_item = tcx.hir().expect_item(parent_hir_id);\n-            let containing_impl_is_for_trait = match &containing_item.kind {\n-                hir::ItemKind::Impl(_, _, _, _, tr, _, _) => tr.is_some(),\n-                _ => bug!(\"parent of an ImplItem must be an Impl\"),\n-            };\n-\n-            if containing_impl_is_for_trait {\n-                struct_span_err!(\n-                    tcx.sess,\n-                    tc_attr.span,\n-                    E0738,\n-                    \"`#[track_caller]` is not supported in traits yet.\"\n-                ).emit();\n-            }\n-        }\n-    }\n-\n     check_associated_item(tcx, impl_item.hir_id, impl_item.span, method_sig);\n }\n "}, {"sha": "001d98aece2a088c8cd8065640ce840214c9146d", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -2641,7 +2641,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                     tcx.sess,\n                     attr.span,\n                     E0737,\n-                    \"rust ABI is required to use `#[track_caller]`\"\n+                    \"Rust ABI is required to use `#[track_caller]`\"\n                 ).emit();\n             }\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::TRACK_CALLER;"}, {"sha": "f21fc2df8b91388ac65a68b6e2382558a79c67df", "filename": "src/librustc_typeck/error_codes.rs", "status": "modified", "additions": 1, "deletions": 52, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_typeck%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibrustc_typeck%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Ferror_codes.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -4958,7 +4958,7 @@ and the pin is required to keep it in the same place in memory.\n \"##,\n \n E0737: r##\"\n-#[track_caller] requires functions to have the \"Rust\" ABI for implicitly\n+`#[track_caller]` requires functions to have the `\"Rust\"` ABI for implicitly\n receiving caller location. See [RFC 2091] for details on this and other\n restrictions.\n \n@@ -4974,57 +4974,6 @@ extern \"C\" fn foo() {}\n [RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n \"##,\n \n-E0738: r##\"\n-#[track_caller] cannot be used in traits yet.  This is due to limitations in the\n-compiler which are likely to be temporary. See [RFC 2091] for details on this\n-and other restrictions.\n-\n-Erroneous example with a trait method implementation:\n-\n-```compile_fail,E0738\n-#![feature(track_caller)]\n-\n-trait Foo {\n-    fn bar(&self);\n-}\n-\n-impl Foo for u64 {\n-    #[track_caller]\n-    fn bar(&self) {}\n-}\n-```\n-\n-Erroneous example with a blanket trait method implementation:\n-\n-```compile_fail,E0738\n-#![feature(track_caller)]\n-\n-trait Foo {\n-    #[track_caller]\n-    fn bar(&self) {}\n-    fn baz(&self);\n-}\n-```\n-\n-Erroneous example with a trait method declaration:\n-\n-```compile_fail,E0738\n-#![feature(track_caller)]\n-\n-trait Foo {\n-    fn bar(&self) {}\n-\n-    #[track_caller]\n-    fn baz(&self);\n-}\n-```\n-\n-Note that while the compiler may be able to support the attribute in traits in\n-the future, [RFC 2091] prohibits their implementation without a follow-up RFC.\n-\n-[RFC 2091]: https://github.com/rust-lang/rfcs/blob/master/text/2091-inline-semantic.md\n-\"##,\n-\n E0741: r##\"\n Only `structural_match` types (that is, types that derive `PartialEq` and `Eq`)\n may be used as the types of const generic parameters."}, {"sha": "3ce47e6a7b8cddd86c9fe85f8be3c47f9139c5d4", "filename": "src/libsyntax/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibsyntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Flibsyntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2FCargo.toml?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -10,7 +10,7 @@ path = \"lib.rs\"\n doctest = false\n \n [dependencies]\n-bitflags = \"1.0\"\n+bitflags = \"1.2.1\"\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n log = \"0.4\"\n scoped-tls = \"1.0\""}, {"sha": "33b79dba73e0eb087d0ba3ee125b12d43c701344", "filename": "src/test/ui/issues/issue-52057.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Fissues%2Fissue-52057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Fissues%2Fissue-52057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-52057.stderr?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -0,0 +1,8 @@\n+warning: `#[inline]` is ignored on function prototypes\n+  --> $DIR/issue-52057.rs:10:5\n+   |\n+LL |     #[inline(always)]\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unused_attributes)]` on by default\n+"}, {"sha": "8bdefbb36ae5f21c955bd9edba77e6a02b63f119", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -0,0 +1,37 @@\n+#![feature(extern_types)]\n+#![feature(type_alias_impl_trait)]\n+\n+#![warn(unused_attributes)]\n+\n+trait Trait {\n+    #[inline] //~ WARN `#[inline]` is ignored on constants\n+    //~^ WARN this was previously accepted\n+    const X: u32;\n+\n+    #[inline] //~ ERROR attribute should be applied to function or closure\n+    type T;\n+\n+    type U;\n+}\n+\n+impl Trait for () {\n+    #[inline] //~ WARN `#[inline]` is ignored on constants\n+    //~^ WARN this was previously accepted\n+    const X: u32 = 0;\n+\n+    #[inline] //~ ERROR attribute should be applied to function or closure\n+    type T = Self;\n+\n+    #[inline] //~ ERROR attribute should be applied to function or closure\n+    type U = impl Trait; //~ ERROR could not find defining uses\n+}\n+\n+extern {\n+    #[inline] //~ ERROR attribute should be applied to function or closure\n+    static X: u32;\n+\n+    #[inline] //~ ERROR attribute should be applied to function or closure\n+    type T;\n+}\n+\n+fn main() {}"}, {"sha": "6c94f88f139485efc3b77271e95b22ac8de4fd4d", "filename": "src/test/ui/lint/inline-trait-and-foreign-items.stderr", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finline-trait-and-foreign-items.stderr?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -0,0 +1,72 @@\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:30:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     static X: u32;\n+   |     -------------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:33:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type T;\n+   |     ------- not a function or closure\n+\n+warning: `#[inline]` is ignored on constants\n+  --> $DIR/inline-trait-and-foreign-items.rs:7:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/inline-trait-and-foreign-items.rs:4:9\n+   |\n+LL | #![warn(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #65833 <https://github.com/rust-lang/rust/issues/65833>\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:11:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type T;\n+   |     ------- not a function or closure\n+\n+warning: `#[inline]` is ignored on constants\n+  --> $DIR/inline-trait-and-foreign-items.rs:18:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+   |\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n+   = note: for more information, see issue #65833 <https://github.com/rust-lang/rust/issues/65833>\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:22:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type T = Self;\n+   |     -------------- not a function or closure\n+\n+error[E0518]: attribute should be applied to function or closure\n+  --> $DIR/inline-trait-and-foreign-items.rs:25:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+LL |     type U = impl Trait;\n+   |     -------------------- not a function or closure\n+\n+error: could not find defining uses\n+  --> $DIR/inline-trait-and-foreign-items.rs:26:5\n+   |\n+LL |     type U = impl Trait;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 6 previous errors\n+\n+For more information about this error, try `rustc --explain E0518`."}, {"sha": "21097197499ddb369a0c8579329e3e7a68e58264", "filename": "src/test/ui/lint/warn-unused-inline-on-fn-prototypes.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -0,0 +1,13 @@\n+#![deny(unused_attributes)]\n+\n+trait Trait {\n+    #[inline] //~ ERROR `#[inline]` is ignored on function prototypes\n+    fn foo();\n+}\n+\n+extern {\n+    #[inline] //~ ERROR `#[inline]` is ignored on function prototypes\n+    fn foo();\n+}\n+\n+fn main() {}"}, {"sha": "006cc6c80a64e9722d411c92337135155164bdd0", "filename": "src/test/ui/lint/warn-unused-inline-on-fn-prototypes.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fwarn-unused-inline-on-fn-prototypes.stderr?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -0,0 +1,20 @@\n+error: `#[inline]` is ignored on function prototypes\n+  --> $DIR/warn-unused-inline-on-fn-prototypes.rs:9:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/warn-unused-inline-on-fn-prototypes.rs:1:9\n+   |\n+LL | #![deny(unused_attributes)]\n+   |         ^^^^^^^^^^^^^^^^^\n+\n+error: `#[inline]` is ignored on function prototypes\n+  --> $DIR/warn-unused-inline-on-fn-prototypes.rs:4:5\n+   |\n+LL |     #[inline]\n+   |     ^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "162c6387088e76f9a472c713045affe4d5b54b65", "filename": "src/test/ui/rfc-2091-track-caller/error-with-invalid-abi.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -1,7 +1,6 @@\n #![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n \n-#[track_caller]\n+#[track_caller] //~ ERROR Rust ABI is required to use `#[track_caller]`\n extern \"C\" fn f() {}\n-//~^^ ERROR rust ABI is required to use `#[track_caller]`\n \n fn main() {}"}, {"sha": "ad89b142f0ec8b0b0e19bf36c78c5c72ec9e53b2", "filename": "src/test/ui/rfc-2091-track-caller/error-with-invalid-abi.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-invalid-abi.stderr?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -6,7 +6,7 @@ LL | #![feature(track_caller)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0737]: rust ABI is required to use `#[track_caller]`\n+error[E0737]: Rust ABI is required to use `#[track_caller]`\n   --> $DIR/error-with-invalid-abi.rs:3:1\n    |\n LL | #[track_caller]"}, {"sha": "4fd768d640a551532802cc0d74134a7fa4565d20", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-decl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -1,9 +1,8 @@\n #![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n \n trait Trait {\n-    #[track_caller]\n+    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n     fn unwrap(&self);\n-    //~^^ ERROR: `#[track_caller]` is not supported in trait declarations.\n }\n \n impl Trait for u64 {"}, {"sha": "72ed6f89faa964bfdc232e81a8f56a2d8175f5ff", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-decl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-decl.stderr?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -6,7 +6,7 @@ LL | #![feature(track_caller)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0738]: `#[track_caller]` is not supported in trait declarations.\n+error[E0738]: `#[track_caller]` may not be used on trait methods\n   --> $DIR/error-with-trait-decl.rs:4:5\n    |\n LL |     #[track_caller]"}, {"sha": "2139ba5de10c364f26ab55b39a8408fcc9d215f6", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-default-impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -1,9 +1,8 @@\n #![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n \n trait Trait {\n-    #[track_caller]\n+    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n     fn unwrap(&self) {}\n-    //~^^ ERROR: `#[track_caller]` is not supported in trait declarations.\n }\n \n fn main() {}"}, {"sha": "05689c9468becf6d6074161f0a4b875fb0960e9c", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-default-impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-default-impl.stderr?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -6,7 +6,7 @@ LL | #![feature(track_caller)]\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0738]: `#[track_caller]` is not supported in trait declarations.\n+error[E0738]: `#[track_caller]` may not be used on trait methods\n   --> $DIR/error-with-trait-default-impl.rs:4:5\n    |\n LL |     #[track_caller]"}, {"sha": "b565e11f55b2a22ff9fbca3b21ad0fb38252d54b", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.rs?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -1,13 +1,21 @@\n+// check-fail\n+\n #![feature(track_caller)] //~ WARN the feature `track_caller` is incomplete\n \n trait Trait {\n     fn unwrap(&self);\n }\n \n impl Trait for u64 {\n-    #[track_caller]\n+    #[track_caller] //~ ERROR: `#[track_caller]` may not be used on trait methods\n     fn unwrap(&self) {}\n-    //~^^ ERROR: `#[track_caller]` is not supported in traits yet.\n+}\n+\n+struct S;\n+\n+impl S {\n+    #[track_caller] // ok\n+    fn foo() {}\n }\n \n fn main() {}"}, {"sha": "707b367484c2cfb7f55daa79dcdcbb31d5927fec", "filename": "src/test/ui/rfc-2091-track-caller/error-with-trait-fn-impl.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42d4e261a170377fefb49516405445f9a27c0df5/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2091-track-caller%2Ferror-with-trait-fn-impl.stderr?ref=42d4e261a170377fefb49516405445f9a27c0df5", "patch": "@@ -1,13 +1,13 @@\n warning: the feature `track_caller` is incomplete and may cause the compiler to crash\n-  --> $DIR/error-with-trait-fn-impl.rs:1:12\n+  --> $DIR/error-with-trait-fn-impl.rs:3:12\n    |\n LL | #![feature(track_caller)]\n    |            ^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n-error[E0738]: `#[track_caller]` is not supported in traits yet.\n-  --> $DIR/error-with-trait-fn-impl.rs:8:5\n+error[E0738]: `#[track_caller]` may not be used on trait methods\n+  --> $DIR/error-with-trait-fn-impl.rs:10:5\n    |\n LL |     #[track_caller]\n    |     ^^^^^^^^^^^^^^^"}]}