{"sha": "0f3f292b4c7a15b656a925e7ebe5f2d3955b8553", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmM2YyOTJiNGM3YTE1YjY1NmE5MjVlN2ViZTVmMmQzOTU1Yjg1NTM=", "commit": {"author": {"name": "Christopher Durham", "email": "cad97@cad97.com", "date": "2018-07-11T02:47:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-11T02:47:59Z"}, "message": "remove sync::Once::call_once 'static\n\n- [std: Rewrite the `sync` modulehttps://github.com/rust-lang/rust/commit/71d4e77db8ad4b6d821da7e5d5300134ac95974e) (Nov 2014)\r\n\r\n    ```diff\r\n    -    pub fn doit(&self, f: ||) {\r\n    +    pub fn doit(&'static self, f: ||) {\r\n    ```\r\n\r\n    > ```text\r\n    >  The second layer is the layer provided by `std::sync` which is intended to be\r\n    >  the thinnest possible layer on top of `sys_common` which is entirely safe to\r\n    >  use. There are a few concerns which need to be addressed when making these\r\n    >  system primitives safe:\r\n    >\r\n    >    * Once used, the OS primitives can never be **moved**. This means that they\r\n    >      essentially need to have a stable address. The static primitives use\r\n    >      `&'static self` to enforce this, and the non-static primitives all use a\r\n    >      `Box` to provide this guarantee.\r\n    > ```\r\n\r\nThe author of this diff is @alexcrichton. `sync::Once` contains only a pointer to (privately hidden) `Waiter`s, which are all stack-allocated. The `'static` bound to `sync::Once` is thus unnecessary to guarantee that any OS primitives are non-relocatable.\r\n\r\nSee https://internals.rust-lang.org/t/sync-once-per-instance/7918 for more context.", "tree": {"sha": "6973f0d21fcb31e4d4eb70563f9ce44b76b71922", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6973f0d21fcb31e4d4eb70563f9ce44b76b71922"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f3f292b4c7a15b656a925e7ebe5f2d3955b8553", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbRW/fCRBK7hj4Ov3rIwAAdHIIADYWNosCT9hJd35o1bulhKp0\n4p9d+7n98mRdQBdVfol4wnY2yUiSYAcsjYRiaxn60+h+A+DoyI7wVP73EW7n63Sq\nbymDSCDzEcyFTsd7O3HJQYST6Ipms6vdKGVOejGmYBGHg5LY8nCadqx800pStPsM\nJqskAYPL/TeiFjjxKOJqQcaemtnkezQi97gkCr+pWE8H0jWRTjCxDYHwcQBR6KwB\nFUty94dgosN7sNoapecDQDrCfbZUULpVVqJAXkmxQN/TnS6zXfUPFv4gbtYYXBrG\nxXgfeAuSpEtJ38s4s7iICWQr1oDpRWQH/oMgz+eApoSe02mIlACLsOrWyJA7s2w=\n=BJhb\n-----END PGP SIGNATURE-----\n", "payload": "tree 6973f0d21fcb31e4d4eb70563f9ce44b76b71922\nparent 4700e1188f66fdb4086b7593416b678b8fe935f4\nauthor Christopher Durham <cad97@cad97.com> 1531277279 -0400\ncommitter GitHub <noreply@github.com> 1531277279 -0400\n\nremove sync::Once::call_once 'static\n\n- [std: Rewrite the `sync` modulehttps://github.com/rust-lang/rust/commit/71d4e77db8ad4b6d821da7e5d5300134ac95974e) (Nov 2014)\r\n\r\n    ```diff\r\n    -    pub fn doit(&self, f: ||) {\r\n    +    pub fn doit(&'static self, f: ||) {\r\n    ```\r\n\r\n    > ```text\r\n    >  The second layer is the layer provided by `std::sync` which is intended to be\r\n    >  the thinnest possible layer on top of `sys_common` which is entirely safe to\r\n    >  use. There are a few concerns which need to be addressed when making these\r\n    >  system primitives safe:\r\n    >\r\n    >    * Once used, the OS primitives can never be **moved**. This means that they\r\n    >      essentially need to have a stable address. The static primitives use\r\n    >      `&'static self` to enforce this, and the non-static primitives all use a\r\n    >      `Box` to provide this guarantee.\r\n    > ```\r\n\r\nThe author of this diff is @alexcrichton. `sync::Once` contains only a pointer to (privately hidden) `Waiter`s, which are all stack-allocated. The `'static` bound to `sync::Once` is thus unnecessary to guarantee that any OS primitives are non-relocatable.\r\n\r\nSee https://internals.rust-lang.org/t/sync-once-per-instance/7918 for more context."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f3f292b4c7a15b656a925e7ebe5f2d3955b8553", "html_url": "https://github.com/rust-lang/rust/commit/0f3f292b4c7a15b656a925e7ebe5f2d3955b8553", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f3f292b4c7a15b656a925e7ebe5f2d3955b8553/comments", "author": {"login": "CAD97", "id": 5992217, "node_id": "MDQ6VXNlcjU5OTIyMTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5992217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CAD97", "html_url": "https://github.com/CAD97", "followers_url": "https://api.github.com/users/CAD97/followers", "following_url": "https://api.github.com/users/CAD97/following{/other_user}", "gists_url": "https://api.github.com/users/CAD97/gists{/gist_id}", "starred_url": "https://api.github.com/users/CAD97/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CAD97/subscriptions", "organizations_url": "https://api.github.com/users/CAD97/orgs", "repos_url": "https://api.github.com/users/CAD97/repos", "events_url": "https://api.github.com/users/CAD97/events{/privacy}", "received_events_url": "https://api.github.com/users/CAD97/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4700e1188f66fdb4086b7593416b678b8fe935f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/4700e1188f66fdb4086b7593416b678b8fe935f4", "html_url": "https://github.com/rust-lang/rust/commit/4700e1188f66fdb4086b7593416b678b8fe935f4"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "51c42995d5e71947c60783b12935bc17e9940eb1", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0f3f292b4c7a15b656a925e7ebe5f2d3955b8553/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f3f292b4c7a15b656a925e7ebe5f2d3955b8553/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=0f3f292b4c7a15b656a925e7ebe5f2d3955b8553", "patch": "@@ -149,9 +149,9 @@ struct Waiter {\n \n // Helper struct used to clean up after a closure call with a `Drop`\n // implementation to also run on panic.\n-struct Finish {\n+struct Finish<'a> {\n     panicked: bool,\n-    me: &'static Once,\n+    me: &'a Once,\n }\n \n impl Once {\n@@ -218,7 +218,7 @@ impl Once {\n     ///\n     /// [poison]: struct.Mutex.html#poisoning\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn call_once<F>(&'static self, f: F) where F: FnOnce() {\n+    pub fn call_once<F>(&self, f: F) where F: FnOnce() {\n         // Fast path, just see if we've completed initialization.\n         if self.state.load(Ordering::SeqCst) == COMPLETE {\n             return\n@@ -275,7 +275,7 @@ impl Once {\n     /// INIT.call_once(|| {});\n     /// ```\n     #[unstable(feature = \"once_poison\", issue = \"33577\")]\n-    pub fn call_once_force<F>(&'static self, f: F) where F: FnOnce(&OnceState) {\n+    pub fn call_once_force<F>(&self, f: F) where F: FnOnce(&OnceState) {\n         // same as above, just with a different parameter to `call_inner`.\n         if self.state.load(Ordering::SeqCst) == COMPLETE {\n             return\n@@ -299,7 +299,7 @@ impl Once {\n     // currently no way to take an `FnOnce` and call it via virtual dispatch\n     // without some allocation overhead.\n     #[cold]\n-    fn call_inner(&'static self,\n+    fn call_inner(&self,\n                   ignore_poisoning: bool,\n                   init: &mut FnMut(bool)) {\n         let mut state = self.state.load(Ordering::SeqCst);\n@@ -390,7 +390,7 @@ impl fmt::Debug for Once {\n     }\n }\n \n-impl Drop for Finish {\n+impl<'a> Drop for Finish<'a> {\n     fn drop(&mut self) {\n         // Swap out our state with however we finished. We should only ever see\n         // an old state which was RUNNING."}]}