{"sha": "b271ef8fd1a37c2eb1bdf0f1dd025d94c887fb81", "node_id": "C_kwDOAAsO6NoAKGIyNzFlZjhmZDFhMzdjMmViMWJkZjBmMWRkMDI1ZDk0Yzg4N2ZiODE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-10T19:14:22Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-10T19:14:22Z"}, "message": "fix: Fix config patching failing when appending suffixes", "tree": {"sha": "1563e81ca846a3bc989e30cbb7b32011a3dc2f66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1563e81ca846a3bc989e30cbb7b32011a3dc2f66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b271ef8fd1a37c2eb1bdf0f1dd025d94c887fb81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b271ef8fd1a37c2eb1bdf0f1dd025d94c887fb81", "html_url": "https://github.com/rust-lang/rust/commit/b271ef8fd1a37c2eb1bdf0f1dd025d94c887fb81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b271ef8fd1a37c2eb1bdf0f1dd025d94c887fb81/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d94cf34b8f53edb4a45e0301f7a9b6a735326e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d94cf34b8f53edb4a45e0301f7a9b6a735326e2", "html_url": "https://github.com/rust-lang/rust/commit/4d94cf34b8f53edb4a45e0301f7a9b6a735326e2"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "ff0cb2b6398526e4f82485e796cd675eec8e3cff", "filename": "crates/rust-analyzer/src/config/patch_old_style.rs", "status": "modified", "additions": 25, "deletions": 7, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b271ef8fd1a37c2eb1bdf0f1dd025d94c887fb81/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b271ef8fd1a37c2eb1bdf0f1dd025d94c887fb81/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs?ref=b271ef8fd1a37c2eb1bdf0f1dd025d94c887fb81", "patch": "@@ -11,13 +11,16 @@ pub(super) fn patch_json_for_outdated_configs(json: &mut Value) {\n         ($(\n             $($src:ident).+ -> $($dst:ident).+ ;\n         )+) => { $(\n-            if let Some(it) = copy.pointer(concat!($(\"/\", stringify!($src)),+)).cloned() {\n-                let mut last = it;\n-                for segment in [$(stringify!($dst)),+].into_iter().rev() {\n-                    last = Value::Object(serde_json::Map::from_iter(std::iter::once((segment.to_string(), last))));\n-                }\n+            match copy.pointer(concat!($(\"/\", stringify!($src)),+)).cloned() {\n+                Some(Value::Object(_)) | None => (),\n+                Some(it) => {\n+                    let mut last = it;\n+                    for segment in [$(stringify!($dst)),+].into_iter().rev() {\n+                        last = Value::Object(serde_json::Map::from_iter(std::iter::once((segment.to_string(), last))));\n+                    }\n \n-                merge(json, last);\n+                    merge(json, last);\n+                },\n             }\n         )+ };\n     }\n@@ -36,7 +39,6 @@ pub(super) fn patch_json_for_outdated_configs(json: &mut Value) {\n         cargo.runBuildScripts -> cargo.runBuildScripts.overrideCommand;\n         cargo.runBuildScriptsCommand -> cargo.runBuildScripts.overrideCommand;\n         cargo.useRustcWrapperForBuildScripts -> cargo.runBuildScripts.useRustcWrapper;\n-        completion.snippets -> completion.snippets.custom;\n         diagnostics.enableExperimental -> diagnostics.experimental.enable;\n         experimental.procAttrMacros -> procMacro.attributes.enable;\n         highlighting.strings -> semanticHighlighting.strings.enable;\n@@ -66,6 +68,22 @@ pub(super) fn patch_json_for_outdated_configs(json: &mut Value) {\n         rustfmt.enableRangeFormatting -> rustfmt.rangeFormatting.enable;\n     }\n \n+    // completion.snippets -> completion.snippets.custom;\n+    if let Some(Value::Object(obj)) = copy.pointer(\"/completion/snippets\").cloned() {\n+        if obj.len() != 1 || obj.get(\"custom\").is_none() {\n+            merge(\n+                json,\n+                json! {{\n+                    \"completion\": {\n+                        \"snippets\": {\n+                            \"custom\": obj\n+                        },\n+                    },\n+                }},\n+            );\n+        }\n+    }\n+\n     // callInfo_full -> signatureInfo_detail, signatureInfo_documentation_enable\n     if let Some(Value::Bool(b)) = copy.pointer(\"/callInfo/full\") {\n         let sig_info = match b {"}]}