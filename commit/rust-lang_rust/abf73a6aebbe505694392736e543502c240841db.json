{"sha": "abf73a6aebbe505694392736e543502c240841db", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiZjczYTZhZWJiZTUwNTY5NDM5MjczNmU1NDM1MDJjMjQwODQxZGI=", "commit": {"author": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2019-04-29T00:55:43Z"}, "committer": {"name": "Tim Diekmann", "email": "tim.diekmann@3dvision.de", "date": "2019-04-29T12:03:40Z"}, "message": "Support ZSTs in DispatchFromDyn", "tree": {"sha": "8428afcae617e818b9df4c8ba8b98cbfb73a20c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8428afcae617e818b9df4c8ba8b98cbfb73a20c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/abf73a6aebbe505694392736e543502c240841db", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEELQoiL21itfwzY62qWM12+I31Y+AFAlzG6BwACgkQWM12+I31\nY+AQVwgA02Iqd3hN2a85No+tnQ8Ks5oN49FekUJQTdaXsHqaJsfr4dtc71/xCUM7\nwTiI3vuZ/3uKH8Rri7jOBfyw4yntPiRo5UqSjQxlPDqnEOe5MES6kxp+PjKd6gOS\nEcFpqXuiaRamU1gwlFFdIYa5vccOeKQ8AUckUcdU8uwJ6YfPlB3WERtL52+UpK83\nGcG69+DSj6Bz1N9wudAHDXVWLyTA0qG59Bt6BnJL8GjDLNV8jggrWZyIzqP/3VSS\niDHyN1mnNXi6T4kil4DthjCVVGmaraiULd/z/Voak+dXLEdeLNmI4l4fWr2nAn8u\nmIK8XDudETGU5MyTycw76iTfTcIEgA==\n=Tqlb\n-----END PGP SIGNATURE-----", "payload": "tree 8428afcae617e818b9df4c8ba8b98cbfb73a20c0\nparent 1b6caa7cd6ae86b580e691b3f075d946800ee51b\nauthor Tim Diekmann <tim.diekmann@3dvision.de> 1556499343 +0200\ncommitter Tim Diekmann <tim.diekmann@3dvision.de> 1556539420 +0200\n\nSupport ZSTs in DispatchFromDyn\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/abf73a6aebbe505694392736e543502c240841db", "html_url": "https://github.com/rust-lang/rust/commit/abf73a6aebbe505694392736e543502c240841db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/abf73a6aebbe505694392736e543502c240841db/comments", "author": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TimDiekmann", "id": 21277928, "node_id": "MDQ6VXNlcjIxMjc3OTI4", "avatar_url": "https://avatars.githubusercontent.com/u/21277928?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TimDiekmann", "html_url": "https://github.com/TimDiekmann", "followers_url": "https://api.github.com/users/TimDiekmann/followers", "following_url": "https://api.github.com/users/TimDiekmann/following{/other_user}", "gists_url": "https://api.github.com/users/TimDiekmann/gists{/gist_id}", "starred_url": "https://api.github.com/users/TimDiekmann/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TimDiekmann/subscriptions", "organizations_url": "https://api.github.com/users/TimDiekmann/orgs", "repos_url": "https://api.github.com/users/TimDiekmann/repos", "events_url": "https://api.github.com/users/TimDiekmann/events{/privacy}", "received_events_url": "https://api.github.com/users/TimDiekmann/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b6caa7cd6ae86b580e691b3f075d946800ee51b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b6caa7cd6ae86b580e691b3f075d946800ee51b", "html_url": "https://github.com/rust-lang/rust/commit/1b6caa7cd6ae86b580e691b3f075d946800ee51b"}], "stats": {"total": 66, "additions": 59, "deletions": 7}, "files": [{"sha": "dc5b461ac142908a55dbe79cecb6ac07acb2b321", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/abf73a6aebbe505694392736e543502c240841db/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf73a6aebbe505694392736e543502c240841db/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=abf73a6aebbe505694392736e543502c240841db", "patch": "@@ -223,19 +223,22 @@ fn visit_implementation_of_dispatch_from_dyn<'a, 'tcx>(\n                     let fields = &def_a.non_enum_variant().fields;\n \n                     let coerced_fields = fields.iter().filter_map(|field| {\n-                        if tcx.type_of(field.did).is_phantom_data() {\n-                            // ignore PhantomData fields\n-                            return None\n-                        }\n-\n                         let ty_a = field.ty(tcx, substs_a);\n                         let ty_b = field.ty(tcx, substs_b);\n+\n+                        if let Ok(layout) = tcx.layout_of(param_env.and(ty_a)) {\n+                            if layout.is_zst() {\n+                                // ignore ZST fields\n+                                return None;\n+                            }\n+                        }\n+\n                         if let Ok(ok) = infcx.at(&cause, param_env).eq(ty_a, ty_b) {\n                             if ok.obligations.is_empty() {\n                                 create_err(\n                                     \"the trait `DispatchFromDyn` may only be implemented \\\n                                      for structs containing the field being coerced, \\\n-                                     `PhantomData` fields, and nothing else\"\n+                                     ZST fields, and nothing else\"\n                                 ).note(\n                                     &format!(\n                                         \"extra field `{}` of type `{}` is not allowed\","}, {"sha": "a2181336e00f518d9332b1369217790008e7c53a", "filename": "src/test/run-pass/dispatch_from_dyn_zst.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/abf73a6aebbe505694392736e543502c240841db/src%2Ftest%2Frun-pass%2Fdispatch_from_dyn_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/abf73a6aebbe505694392736e543502c240841db/src%2Ftest%2Frun-pass%2Fdispatch_from_dyn_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdispatch_from_dyn_zst.rs?ref=abf73a6aebbe505694392736e543502c240841db", "patch": "@@ -0,0 +1,49 @@\n+#![feature(unsize, dispatch_from_dyn, never_type)]\n+\n+#![allow(dead_code)]\n+\n+use std::{\n+    ops::DispatchFromDyn,\n+    marker::{Unsize, PhantomData},\n+};\n+\n+struct Zst;\n+struct NestedZst(PhantomData<()>, Zst);\n+\n+\n+struct WithUnit<T: ?Sized>(Box<T>, ());\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<WithUnit<U>> for WithUnit<T>\n+    where T: Unsize<U> {}\n+\n+struct WithPhantom<T: ?Sized>(Box<T>, PhantomData<()>);\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<WithPhantom<U>> for WithPhantom<T>\n+    where T: Unsize<U> {}\n+\n+struct WithNever<T: ?Sized>(Box<T>, !);\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<WithNever<U>> for WithNever<T>\n+    where T: Unsize<U> {}\n+\n+struct WithZst<T: ?Sized>(Box<T>, Zst);\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<WithZst<U>> for WithZst<T>\n+    where T: Unsize<U> {}\n+\n+struct WithNestedZst<T: ?Sized>(Box<T>, NestedZst);\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<WithNestedZst<U>> for WithNestedZst<T>\n+    where T: Unsize<U> {}\n+\n+\n+struct Generic<T: ?Sized, A>(Box<T>, A);\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Generic<U, ()>> for Generic<T, ()>\n+    where T: Unsize<U> {}\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Generic<U, PhantomData<()>>>\n+    for Generic<T, PhantomData<()>>\n+    where T: Unsize<U> {}\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Generic<U, !>> for Generic<T, !>\n+    where T: Unsize<U> {}\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Generic<U, Zst>> for Generic<T, Zst>\n+    where T: Unsize<U> {}\n+impl<T: ?Sized, U: ?Sized> DispatchFromDyn<Generic<U, NestedZst>> for Generic<T, NestedZst>\n+    where T: Unsize<U> {}\n+\n+\n+fn main() {}"}, {"sha": "624f35d062cc57212c6bcbc2e9746370baf8ad9e", "filename": "src/test/ui/invalid_dispatch_from_dyn_impls.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/abf73a6aebbe505694392736e543502c240841db/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/abf73a6aebbe505694392736e543502c240841db/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid_dispatch_from_dyn_impls.stderr?ref=abf73a6aebbe505694392736e543502c240841db", "patch": "@@ -1,4 +1,4 @@\n-error[E0378]: the trait `DispatchFromDyn` may only be implemented for structs containing the field being coerced, `PhantomData` fields, and nothing else\n+error[E0378]: the trait `DispatchFromDyn` may only be implemented for structs containing the field being coerced, ZST fields, and nothing else\n   --> $DIR/invalid_dispatch_from_dyn_impls.rs:10:1\n    |\n LL | / impl<T, U> DispatchFromDyn<WrapperWithExtraField<U>> for WrapperWithExtraField<T>"}]}