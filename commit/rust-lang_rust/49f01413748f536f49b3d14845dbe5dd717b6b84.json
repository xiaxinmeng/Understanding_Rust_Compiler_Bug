{"sha": "49f01413748f536f49b3d14845dbe5dd717b6b84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5ZjAxNDEzNzQ4ZjUzNmY0OWIzZDE0ODQ1ZGJlNWRkNzE3YjZiODQ=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-01T23:07:44Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-02T20:52:43Z"}, "message": "Implement base_local iteratively", "tree": {"sha": "d489b0e7eb6dba88270c07608c3023b95d7747b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d489b0e7eb6dba88270c07608c3023b95d7747b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49f01413748f536f49b3d14845dbe5dd717b6b84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49f01413748f536f49b3d14845dbe5dd717b6b84", "html_url": "https://github.com/rust-lang/rust/commit/49f01413748f536f49b3d14845dbe5dd717b6b84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49f01413748f536f49b3d14845dbe5dd717b6b84/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f7b953a7e691139ada3f390cd6f8ee9e5279642", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7b953a7e691139ada3f390cd6f8ee9e5279642", "html_url": "https://github.com/rust-lang/rust/commit/9f7b953a7e691139ada3f390cd6f8ee9e5279642"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "f23ff47b5ff660635ef19b3ffd435986f5064f21", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/49f01413748f536f49b3d14845dbe5dd717b6b84/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49f01413748f536f49b3d14845dbe5dd717b6b84/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=49f01413748f536f49b3d14845dbe5dd717b6b84", "patch": "@@ -2055,10 +2055,13 @@ impl<'tcx> Place<'tcx> {\n \n     /// Finds the innermost `Local` from this `Place`.\n     pub fn base_local(&self) -> Option<Local> {\n-        match self {\n-            Place::Base(PlaceBase::Local(local)) => Some(*local),\n-            Place::Projection(box Projection { base, elem: _ }) => base.base_local(),\n-            Place::Base(PlaceBase::Static(..)) => None,\n+        let mut place = self;\n+        loop {\n+            match place {\n+                Place::Projection(proj) => place = &proj.base,\n+                Place::Base(PlaceBase::Static(_)) => return None,\n+                Place::Base(PlaceBase::Local(local)) => return Some(*local),\n+            }\n         }\n     }\n "}]}