{"sha": "7b9f64475ed51fbf8221ecb8c7f4fc9e71fa1d53", "node_id": "C_kwDOAAsO6NoAKDdiOWY2NDQ3NWVkNTFmYmY4MjIxZWNiOGM3ZjRmYzllNzFmYTFkNTM", "commit": {"author": {"name": "Mikail Bagishov", "email": "bagishov.mikail@yandex.ru", "date": "2023-01-08T19:53:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-08T19:53:51Z"}, "message": "Change memory ordering in System wrapper example\n\nCurrently, the `SeqCst` ordering is used, which seems unnecessary:\r\n+ Even `Relaxed` ordering guarantees that all updates are atomic and are executed in total order\r\n+ User code only reads atomic for monitoring purposes, no \"happens-before\" relationships with actual allocations and deallocations are needed for this\r\n\r\nIf argumentation above is correct, I propose changing ordering to `Relaxed` to clarify that no synchronization is required here, and improve performance (if somebody copy-pastes this example into their code).", "tree": {"sha": "a0e24b38968398b29659f56801e047b04f8757b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0e24b38968398b29659f56801e047b04f8757b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b9f64475ed51fbf8221ecb8c7f4fc9e71fa1d53", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjux9QCRBK7hj4Ov3rIwAAwK0IAI/r4sf2/k3yql6CUq8hHxg5\nnyGCyiiJ882QgCrtLd8kVIrF5hZaaCggluBlKL0fFzVUqc9gw10mzBECk9VG3rZM\nCMyCVvqTjmzT3iC8so8rA65vPC6SGiwBu/DkTzpR1K5GL+/JHKZtX+urhr/ckRy/\nKqCNnuFcTDnNvzfa/eDN4UzfJMVzfBt1FfOGRPPqR9jsUOoXMiMBYXZRm7eKCwDC\noCvCZ18b01X31Y5ADbLDfBVztDqD6woW47oWAbkkkhD39dptsLcX6JNhz8DbByGS\npO5VursX/U4wU6k3z+iJvEoiOEK0tbVGbGzdyUlJYSnmaAg8d7m31JFjnN228hA=\n=iz+N\n-----END PGP SIGNATURE-----\n", "payload": "tree a0e24b38968398b29659f56801e047b04f8757b2\nparent fa51fc01ca3d654d08d627b1d1482d1b77e5ed8b\nauthor Mikail Bagishov <bagishov.mikail@yandex.ru> 1673207631 +0300\ncommitter GitHub <noreply@github.com> 1673207631 +0300\n\nChange memory ordering in System wrapper example\n\nCurrently, the `SeqCst` ordering is used, which seems unnecessary:\r\n+ Even `Relaxed` ordering guarantees that all updates are atomic and are executed in total order\r\n+ User code only reads atomic for monitoring purposes, no \"happens-before\" relationships with actual allocations and deallocations are needed for this\r\n\r\nIf argumentation above is correct, I propose changing ordering to `Relaxed` to clarify that no synchronization is required here, and improve performance (if somebody copy-pastes this example into their code)."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b9f64475ed51fbf8221ecb8c7f4fc9e71fa1d53", "html_url": "https://github.com/rust-lang/rust/commit/7b9f64475ed51fbf8221ecb8c7f4fc9e71fa1d53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b9f64475ed51fbf8221ecb8c7f4fc9e71fa1d53/comments", "author": {"login": "MikailBag", "id": 11889433, "node_id": "MDQ6VXNlcjExODg5NDMz", "avatar_url": "https://avatars.githubusercontent.com/u/11889433?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MikailBag", "html_url": "https://github.com/MikailBag", "followers_url": "https://api.github.com/users/MikailBag/followers", "following_url": "https://api.github.com/users/MikailBag/following{/other_user}", "gists_url": "https://api.github.com/users/MikailBag/gists{/gist_id}", "starred_url": "https://api.github.com/users/MikailBag/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MikailBag/subscriptions", "organizations_url": "https://api.github.com/users/MikailBag/orgs", "repos_url": "https://api.github.com/users/MikailBag/repos", "events_url": "https://api.github.com/users/MikailBag/events{/privacy}", "received_events_url": "https://api.github.com/users/MikailBag/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa51fc01ca3d654d08d627b1d1482d1b77e5ed8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa51fc01ca3d654d08d627b1d1482d1b77e5ed8b", "html_url": "https://github.com/rust-lang/rust/commit/fa51fc01ca3d654d08d627b1d1482d1b77e5ed8b"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "ec774e62debbff1a881c2fe94ad5b7f90e232bcd", "filename": "library/std/src/alloc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b9f64475ed51fbf8221ecb8c7f4fc9e71fa1d53/library%2Fstd%2Fsrc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b9f64475ed51fbf8221ecb8c7f4fc9e71fa1d53/library%2Fstd%2Fsrc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Falloc.rs?ref=7b9f64475ed51fbf8221ecb8c7f4fc9e71fa1d53", "patch": "@@ -93,7 +93,7 @@ pub use alloc_crate::alloc::*;\n ///\n /// ```rust\n /// use std::alloc::{System, GlobalAlloc, Layout};\n-/// use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n+/// use std::sync::atomic::{AtomicUsize, Ordering::Relaxed};\n ///\n /// struct Counter;\n ///\n@@ -103,22 +103,22 @@ pub use alloc_crate::alloc::*;\n ///     unsafe fn alloc(&self, layout: Layout) -> *mut u8 {\n ///         let ret = System.alloc(layout);\n ///         if !ret.is_null() {\n-///             ALLOCATED.fetch_add(layout.size(), SeqCst);\n+///             ALLOCATED.fetch_add(layout.size(), Relaxed);\n ///         }\n ///         ret\n ///     }\n ///\n ///     unsafe fn dealloc(&self, ptr: *mut u8, layout: Layout) {\n ///         System.dealloc(ptr, layout);\n-///         ALLOCATED.fetch_sub(layout.size(), SeqCst);\n+///         ALLOCATED.fetch_sub(layout.size(), Relaxed);\n ///     }\n /// }\n ///\n /// #[global_allocator]\n /// static A: Counter = Counter;\n ///\n /// fn main() {\n-///     println!(\"allocated bytes before main: {}\", ALLOCATED.load(SeqCst));\n+///     println!(\"allocated bytes before main: {}\", ALLOCATED.load(Relaxed));\n /// }\n /// ```\n ///"}]}