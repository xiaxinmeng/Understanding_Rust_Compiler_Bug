{"sha": "fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiZTdkNWJjZThmNjE4Y2UwZmM4ZDc4ZDQxNTNjMDVkYzg1ZTYyYmI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-05-31T10:46:43Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-06-06T20:42:27Z"}, "message": "When NLL has illegal move due to borrowed content, provide feedback about why the move wasn't a copy.\n\nThis should address #51190.", "tree": {"sha": "f2f130fd1fd29b931066929538dfac60a7befd4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2f130fd1fd29b931066929538dfac60a7befd4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb", "html_url": "https://github.com/rust-lang/rust/commit/fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb8ab33ed29544973da866bdc3eff509b3c3e789", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb8ab33ed29544973da866bdc3eff509b3c3e789", "html_url": "https://github.com/rust-lang/rust/commit/cb8ab33ed29544973da866bdc3eff509b3c3e789"}], "stats": {"total": 48, "additions": 37, "deletions": 11}, "files": [{"sha": "84931907964354acdd54a91f82643373f75dbe95", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb", "patch": "@@ -147,7 +147,7 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &'a BorrowckCtxt<'a, 'tcx>,\n         }\n         Categorization::Interior(ref b, mc::InteriorElement(ik)) => {\n             bccx.cannot_move_out_of_interior_noncopy(\n-                move_from.span, b.ty, ik == Kind::Index, Origin::Ast)\n+                move_from.span, b.ty, Some(ik == Kind::Index), Origin::Ast)\n         }\n \n         Categorization::Downcast(ref b, _) |"}, {"sha": "ba0557d062f2427d8a633e8697ee2165db92c6b1", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb", "patch": "@@ -132,14 +132,21 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n                     IllegalMoveOriginKind::Static => {\n                         tcx.cannot_move_out_of(span, \"static item\", origin)\n                     }\n-                    IllegalMoveOriginKind::BorrowedContent => {\n-                        tcx.cannot_move_out_of(span, \"borrowed content\", origin)\n+                    IllegalMoveOriginKind::BorrowedContent { target_ty: ty } => {\n+                        // Inspect the type of the content behind the\n+                        // borrow to provide feedback about why this\n+                        // was a move rather than a copy.\n+                        match ty.sty {\n+                            ty::TyArray(..) | ty::TySlice(..) =>\n+                                tcx.cannot_move_out_of_interior_noncopy(span, ty, None, origin),\n+                            _ => tcx.cannot_move_out_of(span, \"borrowed content\", origin)\n+                        }\n                     }\n                     IllegalMoveOriginKind::InteriorOfTypeWithDestructor { container_ty: ty } => {\n                         tcx.cannot_move_out_of_interior_of_drop(span, ty, origin)\n                     }\n                     IllegalMoveOriginKind::InteriorOfSliceOrArray { ty, is_index } => {\n-                        tcx.cannot_move_out_of_interior_noncopy(span, ty, is_index, origin)\n+                        tcx.cannot_move_out_of_interior_noncopy(span, ty, Some(is_index), origin)\n                     }\n                 };\n                 err.emit();"}, {"sha": "590f9917015dc9bd021dd07d9333faa0ebf881b8", "filename": "src/librustc_mir/dataflow/move_paths/builder.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fbuilder.rs?ref=fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb", "patch": "@@ -119,8 +119,8 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n     }\n \n     fn create_move_path(&mut self, place: &Place<'tcx>) {\n-        // This is an assignment, not a move, so this not being a valid\n-        // move path is OK.\n+        // This is an non-moving access (such as an overwrite or\n+        // drop), so this not being a valid move path is OK.\n         let _ = self.move_path_for(place);\n     }\n \n@@ -135,8 +135,9 @@ impl<'b, 'a, 'gcx, 'tcx> Gatherer<'b, 'a, 'gcx, 'tcx> {\n         let place_ty = proj.base.ty(mir, tcx).to_ty(tcx);\n         match place_ty.sty {\n             ty::TyRef(..) | ty::TyRawPtr(..) =>\n-                return Err(MoveError::cannot_move_out_of(mir.source_info(self.loc).span,\n-                                                         BorrowedContent)),\n+                return Err(MoveError::cannot_move_out_of(\n+                    mir.source_info(self.loc).span,\n+                    BorrowedContent { target_ty: place.ty(mir, tcx).to_ty(tcx) })),\n             ty::TyAdt(adt, _) if adt.has_dtor(tcx) && !adt.is_box() =>\n                 return Err(MoveError::cannot_move_out_of(mir.source_info(self.loc).span,\n                                                          InteriorOfTypeWithDestructor {"}, {"sha": "a73e47bc16ab297b018ba41a685f52d0830d1a83", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb", "patch": "@@ -277,9 +277,23 @@ pub struct IllegalMoveOrigin<'tcx> {\n \n #[derive(Debug)]\n pub(crate) enum IllegalMoveOriginKind<'tcx> {\n+    /// Illegal move due to attempt to move from `static` variable.\n     Static,\n-    BorrowedContent,\n+\n+    /// Illegal move due to attempt to move from behind a reference.\n+    BorrowedContent {\n+        /// The content's type: if erroneous code was trying to move\n+        /// from `*x` where `x: &T`, then this will be `T`.\n+        target_ty: ty::Ty<'tcx>,\n+    },\n+\n+    /// Illegal move due to attempt to move from field of an ADT that\n+    /// implements `Drop`. Rust maintains invariant that all `Drop`\n+    /// ADT's remain fully-initialized so that user-defined destructor\n+    /// can safely read from all of the ADT's fields.\n     InteriorOfTypeWithDestructor { container_ty: ty::Ty<'tcx> },\n+\n+    /// Illegal move due to attempt to move out of a slice or array.\n     InteriorOfSliceOrArray { ty: ty::Ty<'tcx>, is_index: bool, },\n }\n "}, {"sha": "d01b90ad2628e02eb683b2396a6cc08972e51a54", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=fbe7d5bce8f618ce0fc8d78d4153c05dc85e62bb", "patch": "@@ -312,15 +312,19 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         self.cancel_if_wrong_origin(err, o)\n     }\n \n+    /// Signal an error due to an attempt to move out of the interior\n+    /// of an array or slice. `is_index` is None when error origin\n+    /// didn't capture whether there was an indexing operation or not.\n     fn cannot_move_out_of_interior_noncopy(self,\n                                            move_from_span: Span,\n                                            ty: ty::Ty,\n-                                           is_index: bool,\n+                                           is_index: Option<bool>,\n                                            o: Origin)\n                                            -> DiagnosticBuilder<'cx>\n     {\n         let type_name = match (&ty.sty, is_index) {\n-            (&ty::TyArray(_, _), true) => \"array\",\n+            (&ty::TyArray(_, _), Some(true)) |\n+            (&ty::TyArray(_, _), None) => \"array\",\n             (&ty::TySlice(_),    _) => \"slice\",\n             _ => span_bug!(move_from_span, \"this path should not cause illegal move\"),\n         };"}]}