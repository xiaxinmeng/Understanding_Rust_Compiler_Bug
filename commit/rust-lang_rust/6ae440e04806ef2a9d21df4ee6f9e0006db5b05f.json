{"sha": "6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhZTQ0MGUwNDgwNmVmMmE5ZDIxZGY0ZWU2ZjllMDAwNmRiNWIwNWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-10-27T06:21:22Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-11-02T09:19:41Z"}, "message": "Make the difference between lint codes and error codes explicit", "tree": {"sha": "9e32f9822b288a844c88833d0e1b1d8294def353", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e32f9822b288a844c88833d0e1b1d8294def353"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAln64y0ACgkQpp+NIls6\n19nJFw//XfQ9gaGe9ZrVssQ7qfsf1jzSg4EYC7PL60Cp/Cn0pq0vn24sh4Xlq6RW\nxKfCZLTQmvoizOAj+fzKovbGuaRvsy3zdBM3s3ou9l+zGvx4AuZvVjfdmZQok2kG\nVoKRxEcO+YkPmlOoICsApRHsHmKLVXrVb9EhXGzG/E8TkSXhOVTfmlkqWcxY9gvU\nHGyr4Z5QwKgs4rJHR5sGurc1BBaXwg7Ia3jjFnPi6FaY5Ifhzt55gC77GtVszxdO\nfuYKNK5JAzbuUnDu2Sq59o0oCeINQh0vTOXkFxfAE1vKpSPEo/hsZAD8bHCJPPPi\n1Wjqp1/eFQnKSxH1wcHmoMq8exHNCZq3Hfq2LqzolZdDNmnAhOSOZebbrNJPCWyD\nDHmS7mI00VEkYaHF7EdpqWk/lK008CLn2JTnO5A0mY9cCcL8CUQBIvZUzaFKV1f6\nkANbo4FiBeDU1OJXZGsrvf8Lmie1V69lLWTQzl3QIqVkpkv1VrOpmME1g2ReUbW+\nJlWVkS/FNYM3UkP2Od+dguRN9/yKXDpKxgaWOktzzMJyTTerYzz4JDu9oihZ5GRc\nqKiFZodtV2R1P8qEpsxtsF8cMxGLcyrioJT5K6463SHp9pBSHkoVunjEx+Vg+Td7\nuz+0lSKuvSPlDG6nGSWV8l3uwVMZuxfSpBaAcsOM4zZZaQmJfjg=\n=lD/Q\n-----END PGP SIGNATURE-----", "payload": "tree 9e32f9822b288a844c88833d0e1b1d8294def353\nparent 88fb4c4fdad1b97c3499a26e24dcbc60c6853a80\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1509085282 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1509614381 +0100\n\nMake the difference between lint codes and error codes explicit\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "html_url": "https://github.com/rust-lang/rust/commit/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88fb4c4fdad1b97c3499a26e24dcbc60c6853a80", "url": "https://api.github.com/repos/rust-lang/rust/commits/88fb4c4fdad1b97c3499a26e24dcbc60c6853a80", "html_url": "https://github.com/rust-lang/rust/commit/88fb4c4fdad1b97c3499a26e24dcbc60c6853a80"}], "stats": {"total": 212, "additions": 143, "deletions": 69}, "files": [{"sha": "bca4dad220fcdcb978b4d1fcbace544dec3541ee", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "patch": "@@ -33,7 +33,7 @@ pub use self::LintSource::*;\n \n use std::rc::Rc;\n \n-use errors::DiagnosticBuilder;\n+use errors::{DiagnosticBuilder, DiagnosticId};\n use hir::def_id::{CrateNum, LOCAL_CRATE};\n use hir::intravisit::{self, FnKind};\n use hir;\n@@ -463,7 +463,7 @@ pub fn struct_lint_level<'a>(sess: &'a Session,\n         }\n     }\n \n-    err.code(name);\n+    err.code(DiagnosticId::Lint(name));\n \n     // Check for future incompatibility lints and issue a stronger warning.\n     let lints = sess.lint_store.borrow();"}, {"sha": "a15a9a84580b307ea6adde1b4ef9107a094fc800", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 17, "deletions": 8, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "patch": "@@ -24,7 +24,7 @@ use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n \n use syntax::ast::NodeId;\n-use errors::{self, DiagnosticBuilder};\n+use errors::{self, DiagnosticBuilder, DiagnosticId};\n use errors::emitter::{Emitter, EmitterWriter};\n use syntax::json::JsonEmitter;\n use syntax::feature_gate;\n@@ -187,7 +187,7 @@ impl Session {\n     pub fn struct_span_warn_with_code<'a, S: Into<MultiSpan>>(&'a self,\n                                                               sp: S,\n                                                               msg: &str,\n-                                                              code: &str)\n+                                                              code: DiagnosticId)\n                                                               -> DiagnosticBuilder<'a> {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n@@ -203,15 +203,19 @@ impl Session {\n     pub fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(&'a self,\n                                                              sp: S,\n                                                              msg: &str,\n-                                                             code: &str)\n+                                                             code: DiagnosticId)\n                                                              -> DiagnosticBuilder<'a> {\n         self.diagnostic().struct_span_err_with_code(sp, msg, code)\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n     pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n         self.diagnostic().struct_err(msg)\n     }\n-    pub fn struct_err_with_code<'a>(&'a self, msg: &str, code: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_err_with_code<'a>(\n+        &'a self,\n+        msg: &str,\n+        code: DiagnosticId,\n+    ) -> DiagnosticBuilder<'a> {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n     pub fn struct_span_fatal<'a, S: Into<MultiSpan>>(&'a self,\n@@ -223,7 +227,7 @@ impl Session {\n     pub fn struct_span_fatal_with_code<'a, S: Into<MultiSpan>>(&'a self,\n                                                                sp: S,\n                                                                msg: &str,\n-                                                               code: &str)\n+                                                               code: DiagnosticId)\n                                                                -> DiagnosticBuilder<'a> {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n@@ -234,7 +238,12 @@ impl Session {\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n         panic!(self.diagnostic().span_fatal(sp, msg))\n     }\n-    pub fn span_fatal_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: &str) -> ! {\n+    pub fn span_fatal_with_code<S: Into<MultiSpan>>(\n+        &self,\n+        sp: S,\n+        msg: &str,\n+        code: DiagnosticId,\n+    ) -> ! {\n         panic!(self.diagnostic().span_fatal_with_code(sp, msg, code))\n     }\n     pub fn fatal(&self, msg: &str) -> ! {\n@@ -250,7 +259,7 @@ impl Session {\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.diagnostic().span_err(sp, msg)\n     }\n-    pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: &str) {\n+    pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: DiagnosticId) {\n         self.diagnostic().span_err_with_code(sp, &msg, code)\n     }\n     pub fn err(&self, msg: &str) {\n@@ -283,7 +292,7 @@ impl Session {\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.diagnostic().span_warn(sp, msg)\n     }\n-    pub fn span_warn_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: &str) {\n+    pub fn span_warn_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: DiagnosticId) {\n         self.diagnostic().span_warn_with_code(sp, msg, code)\n     }\n     pub fn warn(&self, msg: &str) {"}, {"sha": "6be07878487b920fd89d28013399933551d072cf", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "patch": "@@ -47,7 +47,7 @@ use std::rc::Rc;\n use std::hash::{Hash, Hasher};\n use syntax::ast;\n use syntax_pos::{MultiSpan, Span};\n-use errors::DiagnosticBuilder;\n+use errors::{DiagnosticBuilder, DiagnosticId};\n \n use rustc::hir;\n use rustc::hir::intravisit::{self, Visitor};\n@@ -256,7 +256,7 @@ impl<'b, 'tcx: 'b> BorrowckErrors for BorrowckCtxt<'b, 'tcx> {\n     fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(&'a self,\n                                                          sp: S,\n                                                          msg: &str,\n-                                                         code: &str)\n+                                                         code: DiagnosticId)\n                                                          -> DiagnosticBuilder<'a>\n     {\n         self.tcx.sess.struct_span_err_with_code(sp, msg, code)\n@@ -755,12 +755,17 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(&self,\n                                                          s: S,\n                                                          msg: &str,\n-                                                         code: &str)\n+                                                         code: DiagnosticId)\n                                                          -> DiagnosticBuilder<'a> {\n         self.tcx.sess.struct_span_err_with_code(s, msg, code)\n     }\n \n-    pub fn span_err_with_code<S: Into<MultiSpan>>(&self, s: S, msg: &str, code: &str) {\n+    pub fn span_err_with_code<S: Into<MultiSpan>>(\n+        &self,\n+        s: S,\n+        msg: &str,\n+        code: DiagnosticId,\n+    ) {\n         self.tcx.sess.span_err_with_code(s, msg, code);\n     }\n "}, {"sha": "2d70de89355ee2a729d2e30885e45811c273fd1f", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "patch": "@@ -21,12 +21,18 @@ use snippet::Style;\n pub struct Diagnostic {\n     pub level: Level,\n     pub message: Vec<(String, Style)>,\n-    pub code: Option<String>,\n+    pub code: Option<DiagnosticId>,\n     pub span: MultiSpan,\n     pub children: Vec<SubDiagnostic>,\n     pub suggestions: Vec<CodeSuggestion>,\n }\n \n+#[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n+pub enum DiagnosticId {\n+    Error(String),\n+    Lint(String),\n+}\n+\n /// For example a note attached to an error.\n #[derive(Clone, Debug, PartialEq, Hash, RustcEncodable, RustcDecodable)]\n pub struct SubDiagnostic {\n@@ -81,7 +87,7 @@ impl Diagnostic {\n         Diagnostic::new_with_code(level, None, message)\n     }\n \n-    pub fn new_with_code(level: Level, code: Option<String>, message: &str) -> Self {\n+    pub fn new_with_code(level: Level, code: Option<DiagnosticId>, message: &str) -> Self {\n         Diagnostic {\n             level,\n             message: vec![(message.to_owned(), Style::NoStyle)],\n@@ -267,7 +273,7 @@ impl Diagnostic {\n         self\n     }\n \n-    pub fn code(&mut self, s: String) -> &mut Self {\n+    pub fn code(&mut self, s: DiagnosticId) -> &mut Self {\n         self.code = Some(s);\n         self\n     }"}, {"sha": "40b5810454b9ac25550ab3e64a4a331bc7c29db6", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use Diagnostic;\n+use DiagnosticId;\n use DiagnosticStyledString;\n \n use Level;\n@@ -192,7 +193,7 @@ impl<'a> DiagnosticBuilder<'a> {\n                                      suggestions: Vec<String>)\n                                      -> &mut Self);\n     forward!(pub fn set_span<S: Into<MultiSpan>>(&mut self, sp: S) -> &mut Self);\n-    forward!(pub fn code(&mut self, s: String) -> &mut Self);\n+    forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);\n \n     /// Convenience function for internal use, clients should use one of the\n     /// struct_* methods on Handler.\n@@ -204,7 +205,7 @@ impl<'a> DiagnosticBuilder<'a> {\n     /// struct_* methods on Handler.\n     pub fn new_with_code(handler: &'a Handler,\n                          level: Level,\n-                         code: Option<String>,\n+                         code: Option<DiagnosticId>,\n                          message: &str)\n                          -> DiagnosticBuilder<'a> {\n         let diagnostic = Diagnostic::new_with_code(level, code, message);"}, {"sha": "011be74ee7c453d2acc05507f37509cd39583f00", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "patch": "@@ -12,7 +12,7 @@ use self::Destination::*;\n \n use syntax_pos::{DUMMY_SP, FileMap, Span, MultiSpan, CharPos};\n \n-use {Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic, CodeMapper};\n+use {Level, CodeSuggestion, DiagnosticBuilder, SubDiagnostic, CodeMapper, DiagnosticId};\n use RenderSpan::*;\n use snippet::{Annotation, AnnotationType, Line, MultilineAnnotation, StyledString, Style};\n use styled_buffer::StyledBuffer;\n@@ -886,7 +886,7 @@ impl EmitterWriter {\n     fn emit_message_default(&mut self,\n                             msp: &MultiSpan,\n                             msg: &Vec<(String, Style)>,\n-                            code: &Option<String>,\n+                            code: &Option<DiagnosticId>,\n                             level: &Level,\n                             max_line_num_len: usize,\n                             is_secondary: bool)\n@@ -905,14 +905,11 @@ impl EmitterWriter {\n             self.msg_to_buffer(&mut buffer, msg, max_line_num_len, \"note\", None);\n         } else {\n             buffer.append(0, &level.to_string(), Style::Level(level.clone()));\n-            match code {\n-                // only render error codes, not lint codes\n-                &Some(ref code) if code.starts_with(\"E\") && code.len() == 5 => {\n-                    buffer.append(0, \"[\", Style::Level(level.clone()));\n-                    buffer.append(0, &code, Style::Level(level.clone()));\n-                    buffer.append(0, \"]\", Style::Level(level.clone()));\n-                }\n-                _ => {}\n+            // only render error codes, not lint codes\n+            if let Some(DiagnosticId::Error(ref code)) = *code {\n+                buffer.append(0, \"[\", Style::Level(level.clone()));\n+                buffer.append(0, &code, Style::Level(level.clone()));\n+                buffer.append(0, \"]\", Style::Level(level.clone()));\n             }\n             buffer.append(0, \": \", Style::HeaderMsg);\n             for &(ref text, _) in msg.iter() {\n@@ -1175,7 +1172,7 @@ impl EmitterWriter {\n     fn emit_messages_default(&mut self,\n                              level: &Level,\n                              message: &Vec<(String, Style)>,\n-                             code: &Option<String>,\n+                             code: &Option<DiagnosticId>,\n                              span: &MultiSpan,\n                              children: &Vec<SubDiagnostic>) {\n         let max_line_num = self.get_max_line_num(span, children);"}, {"sha": "b30ee7016ab1cee7a7dbb1d237b0719ba58a5613", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 18, "deletions": 14, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "patch": "@@ -262,7 +262,7 @@ impl error::Error for ExplicitBug {\n     }\n }\n \n-pub use diagnostic::{Diagnostic, SubDiagnostic, DiagnosticStyledString};\n+pub use diagnostic::{Diagnostic, SubDiagnostic, DiagnosticStyledString, DiagnosticId};\n pub use diagnostic_builder::DiagnosticBuilder;\n \n /// A handler deals with errors; certain errors\n@@ -337,11 +337,11 @@ impl Handler {\n     pub fn struct_span_warn_with_code<'a, S: Into<MultiSpan>>(&'a self,\n                                                               sp: S,\n                                                               msg: &str,\n-                                                              code: &str)\n+                                                              code: DiagnosticId)\n                                                               -> DiagnosticBuilder<'a> {\n         let mut result = DiagnosticBuilder::new(self, Level::Warning, msg);\n         result.set_span(sp);\n-        result.code(code.to_owned());\n+        result.code(code);\n         if !self.can_emit_warnings {\n             result.cancel();\n         }\n@@ -365,20 +365,24 @@ impl Handler {\n     pub fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(&'a self,\n                                                              sp: S,\n                                                              msg: &str,\n-                                                             code: &str)\n+                                                             code: DiagnosticId)\n                                                              -> DiagnosticBuilder<'a> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n         result.set_span(sp);\n-        result.code(code.to_owned());\n+        result.code(code);\n         result\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n     pub fn struct_err<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n         DiagnosticBuilder::new(self, Level::Error, msg)\n     }\n-    pub fn struct_err_with_code<'a>(&'a self, msg: &str, code: &str) -> DiagnosticBuilder<'a> {\n+    pub fn struct_err_with_code<'a>(\n+        &'a self,\n+        msg: &str,\n+        code: DiagnosticId,\n+    ) -> DiagnosticBuilder<'a> {\n         let mut result = DiagnosticBuilder::new(self, Level::Error, msg);\n-        result.code(code.to_owned());\n+        result.code(code);\n         result\n     }\n     pub fn struct_span_fatal<'a, S: Into<MultiSpan>>(&'a self,\n@@ -392,11 +396,11 @@ impl Handler {\n     pub fn struct_span_fatal_with_code<'a, S: Into<MultiSpan>>(&'a self,\n                                                                sp: S,\n                                                                msg: &str,\n-                                                               code: &str)\n+                                                               code: DiagnosticId)\n                                                                -> DiagnosticBuilder<'a> {\n         let mut result = DiagnosticBuilder::new(self, Level::Fatal, msg);\n         result.set_span(sp);\n-        result.code(code.to_owned());\n+        result.code(code);\n         result\n     }\n     pub fn struct_fatal<'a>(&'a self, msg: &str) -> DiagnosticBuilder<'a> {\n@@ -420,7 +424,7 @@ impl Handler {\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(&self,\n                                                     sp: S,\n                                                     msg: &str,\n-                                                    code: &str)\n+                                                    code: DiagnosticId)\n                                                     -> FatalError {\n         self.emit_with_code(&sp.into(), msg, code, Fatal);\n         FatalError\n@@ -436,13 +440,13 @@ impl Handler {\n         result.set_span(sp);\n         result\n     }\n-    pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: &str) {\n+    pub fn span_err_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: DiagnosticId) {\n         self.emit_with_code(&sp.into(), msg, code, Error);\n     }\n     pub fn span_warn<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Warning);\n     }\n-    pub fn span_warn_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: &str) {\n+    pub fn span_warn_with_code<S: Into<MultiSpan>>(&self, sp: S, msg: &str, code: DiagnosticId) {\n         self.emit_with_code(&sp.into(), msg, code, Warning);\n     }\n     pub fn span_bug<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> ! {\n@@ -546,11 +550,11 @@ impl Handler {\n             self.abort_if_errors();\n         }\n     }\n-    pub fn emit_with_code(&self, msp: &MultiSpan, msg: &str, code: &str, lvl: Level) {\n+    pub fn emit_with_code(&self, msp: &MultiSpan, msg: &str, code: DiagnosticId, lvl: Level) {\n         if lvl == Warning && !self.can_emit_warnings {\n             return;\n         }\n-        let mut db = DiagnosticBuilder::new_with_code(self, lvl, Some(code.to_owned()), msg);\n+        let mut db = DiagnosticBuilder::new_with_code(self, lvl, Some(code), msg);\n         db.set_span(msp.clone());\n         db.emit();\n         if !self.continue_after_error.get() {"}, {"sha": "2f29b79eeb6cc49bd05d30e05a5d5c28fa0ed9ed", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use rustc::ty::{self, TyCtxt};\n-use rustc_errors::DiagnosticBuilder;\n+use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use syntax_pos::{MultiSpan, Span};\n \n use std::fmt;\n@@ -41,7 +41,7 @@ pub trait BorrowckErrors {\n     fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(&'a self,\n                                                          sp: S,\n                                                          msg: &str,\n-                                                         code: &str)\n+                                                         code: DiagnosticId)\n                                                          -> DiagnosticBuilder<'a>;\n \n     fn struct_span_err<'a, S: Into<MultiSpan>>(&'a self,\n@@ -445,7 +445,7 @@ impl<'b, 'gcx, 'tcx> BorrowckErrors for TyCtxt<'b, 'gcx, 'tcx> {\n     fn struct_span_err_with_code<'a, S: Into<MultiSpan>>(&'a self,\n                                                          sp: S,\n                                                          msg: &str,\n-                                                         code: &str)\n+                                                         code: DiagnosticId)\n                                                          -> DiagnosticBuilder<'a>\n     {\n         self.sess.struct_span_err_with_code(sp, msg, code)"}, {"sha": "c7ead3c6bb59a546f22cd7b668743fa3aa439c6c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "patch": "@@ -59,7 +59,7 @@ use syntax::ast::{QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n use syntax::feature_gate::{feature_err, emit_feature_err, GateIssue};\n \n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n-use errors::DiagnosticBuilder;\n+use errors::{DiagnosticBuilder, DiagnosticId};\n \n use std::cell::{Cell, RefCell};\n use std::cmp;\n@@ -223,7 +223,11 @@ fn resolve_struct_error<'sess, 'a>(resolver: &'sess Resolver,\n             let target_sp = binding_error.target.iter().map(|x| *x).collect::<Vec<_>>();\n             let msp = MultiSpan::from_spans(target_sp.clone());\n             let msg = format!(\"variable `{}` is not bound in all patterns\", binding_error.name);\n-            let mut err = resolver.session.struct_span_err_with_code(msp, &msg, \"E0408\");\n+            let mut err = resolver.session.struct_span_err_with_code(\n+                msp,\n+                &msg,\n+                DiagnosticId::Error(\"E0408\".into()),\n+            );\n             for sp in target_sp {\n                 err.span_label(sp, format!(\"pattern doesn't bind `{}`\", binding_error.name));\n             }\n@@ -2490,18 +2494,19 @@ impl<'a> Resolver<'a> {\n                 (format!(\"cannot find {} `{}` in {}{}\", expected, item_str, mod_prefix, mod_str),\n                  format!(\"not found in {}\", mod_str), item_span)\n             };\n+            let code = DiagnosticId::Error(code.into());\n             let mut err = this.session.struct_span_err_with_code(base_span, &base_msg, code);\n \n             // Emit special messages for unresolved `Self` and `self`.\n             if is_self_type(path, ns) {\n                 __diagnostic_used!(E0411);\n-                err.code(\"E0411\".into());\n+                err.code(DiagnosticId::Error(\"E0411\".into()));\n                 err.span_label(span, \"`Self` is only available in traits and impls\");\n                 return (err, Vec::new());\n             }\n             if is_self_value(path, ns) {\n                 __diagnostic_used!(E0424);\n-                err.code(\"E0424\".into());\n+                err.code(DiagnosticId::Error(\"E0424\".into()));\n                 err.span_label(span, format!(\"`self` value is only available in \\\n                                                methods with `self` parameter\"));\n                 return (err, Vec::new());"}, {"sha": "10475a2b1b1a06fa98ff3b2a99a73d84d969fdd3", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "patch": "@@ -32,7 +32,7 @@ use rustc::hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc::ty::TyCtxt;\n use rustc::util::common::{time, time_depth, set_time_depth, path2cstr, print_time_passes_entry};\n use rustc::util::fs::{link_or_copy, rename_or_copy_remove};\n-use errors::{self, Handler, Level, DiagnosticBuilder, FatalError};\n+use errors::{self, Handler, Level, DiagnosticBuilder, FatalError, DiagnosticId};\n use errors::emitter::{Emitter};\n use syntax::attr;\n use syntax::ext::hygiene::Mark;\n@@ -1262,7 +1262,7 @@ enum Message {\n \n struct Diagnostic {\n     msg: String,\n-    code: Option<String>,\n+    code: Option<DiagnosticId>,\n     lvl: Level,\n }\n \n@@ -2015,7 +2015,7 @@ impl SharedEmitterMain {\n                         Some(ref code) => {\n                             handler.emit_with_code(&MultiSpan::new(),\n                                                    &diag.msg,\n-                                                   &code,\n+                                                   code.clone(),\n                                                    diag.lvl);\n                         }\n                         None => {"}, {"sha": "d942c1176aa6946d744a12ca639dd87432871852", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "patch": "@@ -100,7 +100,7 @@ use rustc::ty::adjustment::{Adjust, Adjustment, AutoBorrow};\n use rustc::ty::fold::{BottomUpFolder, TypeFoldable};\n use rustc::ty::maps::Providers;\n use rustc::ty::util::{Representability, IntTypeExt};\n-use errors::DiagnosticBuilder;\n+use errors::{DiagnosticBuilder, DiagnosticId};\n use require_c_abi_if_variadic;\n use session::{CompileIncomplete, Session};\n use TypeAndSubsts;\n@@ -2467,7 +2467,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     if expected_count == 1 {\"\"} else {\"s\"},\n                     arg_count,\n                     if arg_count == 1 {\" was\"} else {\"s were\"}),\n-                error_code);\n+                DiagnosticId::Error(error_code.to_owned()));\n \n             if let Some(def_s) = def_span {\n                 err.span_label(def_s, \"defined here\");"}, {"sha": "c01836b6194113b3097a4429df1e547f840410a8", "filename": "src/libsyntax/diagnostics/macros.rs", "status": "modified", "additions": 54, "deletions": 11, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fmacros.rs?ref=6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "patch": "@@ -18,31 +18,46 @@ macro_rules! register_diagnostic {\n macro_rules! span_fatal {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n         __diagnostic_used!($code);\n-        $session.span_fatal_with_code($span, &format!($($message)*), stringify!($code))\n+        $session.span_fatal_with_code(\n+            $span,\n+            &format!($($message)*),\n+            $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n+        )\n     })\n }\n \n #[macro_export]\n macro_rules! span_err {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n         __diagnostic_used!($code);\n-        $session.span_err_with_code($span, &format!($($message)*), stringify!($code))\n+        $session.span_err_with_code(\n+            $span,\n+            &format!($($message)*),\n+            $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n+        )\n     })\n }\n \n #[macro_export]\n macro_rules! span_warn {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n         __diagnostic_used!($code);\n-        $session.span_warn_with_code($span, &format!($($message)*), stringify!($code))\n+        $session.span_warn_with_code(\n+            $span,\n+            &format!($($message)*),\n+            $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n+        )\n     })\n }\n \n #[macro_export]\n macro_rules! struct_err {\n     ($session:expr, $code:ident, $($message:tt)*) => ({\n         __diagnostic_used!($code);\n-        $session.struct_err_with_code(&format!($($message)*), stringify!($code))\n+        $session.struct_err_with_code(\n+            &format!($($message)*),\n+            $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n+        )\n     })\n }\n \n@@ -51,9 +66,17 @@ macro_rules! span_err_or_warn {\n     ($is_warning:expr, $session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n         __diagnostic_used!($code);\n         if $is_warning {\n-            $session.span_warn_with_code($span, &format!($($message)*), stringify!($code))\n+            $session.span_warn_with_code(\n+                $span,\n+                &format!($($message)*),\n+                $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n+            )\n         } else {\n-            $session.span_err_with_code($span, &format!($($message)*), stringify!($code))\n+            $session.span_err_with_code(\n+                $span,\n+                &format!($($message)*),\n+                $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n+            )\n         }\n     })\n }\n@@ -62,15 +85,23 @@ macro_rules! span_err_or_warn {\n macro_rules! struct_span_fatal {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n         __diagnostic_used!($code);\n-        $session.struct_span_fatal_with_code($span, &format!($($message)*), stringify!($code))\n+        $session.struct_span_fatal_with_code(\n+            $span,\n+            &format!($($message)*),\n+            $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n+        )\n     })\n }\n \n #[macro_export]\n macro_rules! struct_span_err {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n         __diagnostic_used!($code);\n-        $session.struct_span_err_with_code($span, &format!($($message)*), stringify!($code))\n+        $session.struct_span_err_with_code(\n+            $span,\n+            &format!($($message)*),\n+            $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n+        )\n     })\n }\n \n@@ -89,7 +120,11 @@ macro_rules! type_error_struct {\n macro_rules! struct_span_warn {\n     ($session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n         __diagnostic_used!($code);\n-        $session.struct_span_warn_with_code($span, &format!($($message)*), stringify!($code))\n+        $session.struct_span_warn_with_code(\n+            $span,\n+            &format!($($message)*),\n+            $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n+        )\n     })\n }\n \n@@ -98,9 +133,17 @@ macro_rules! struct_span_err_or_warn {\n     ($is_warning:expr, $session:expr, $span:expr, $code:ident, $($message:tt)*) => ({\n         __diagnostic_used!($code);\n         if $is_warning {\n-            $session.struct_span_warn_with_code($span, &format!($($message)*), stringify!($code))\n+            $session.struct_span_warn_with_code(\n+                $span,\n+                &format!($($message)*),\n+                $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n+            )\n         } else {\n-            $session.struct_span_err_with_code($span, &format!($($message)*), stringify!($code))\n+            $session.struct_span_err_with_code(\n+                $span,\n+                &format!($($message)*),\n+                $crate::errors::DiagnosticId::Error(stringify!($code).to_owned()),\n+            )\n         }\n     })\n }"}, {"sha": "31fe0c234e8d3c45957be7ff1f40c040246f6c1a", "filename": "src/libsyntax/json.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibsyntax%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ae440e04806ef2a9d21df4ee6f9e0006db5b05f/src%2Flibsyntax%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fjson.rs?ref=6ae440e04806ef2a9d21df4ee6f9e0006db5b05f", "patch": "@@ -23,6 +23,7 @@ use codemap::{CodeMap, FilePathMapping};\n use syntax_pos::{self, MacroBacktrace, Span, SpanLabel, MultiSpan};\n use errors::registry::Registry;\n use errors::{DiagnosticBuilder, SubDiagnostic, RenderSpan, CodeSuggestion, CodeMapper};\n+use errors::DiagnosticId;\n use errors::emitter::Emitter;\n \n use std::rc::Rc;\n@@ -340,9 +341,12 @@ impl DiagnosticSpanLine {\n }\n \n impl DiagnosticCode {\n-    fn map_opt_string(s: Option<String>, je: &JsonEmitter) -> Option<DiagnosticCode> {\n+    fn map_opt_string(s: Option<DiagnosticId>, je: &JsonEmitter) -> Option<DiagnosticCode> {\n         s.map(|s| {\n-\n+            let s = match s {\n+                DiagnosticId::Error(s) => s,\n+                DiagnosticId::Lint(s) => s,\n+            };\n             let explanation = je.registry\n                                 .as_ref()\n                                 .and_then(|registry| registry.find_description(&s));"}]}