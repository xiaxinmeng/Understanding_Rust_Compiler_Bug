{"sha": "213d57983d1640d22bd69e7351731fd1adcbf9b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxM2Q1Nzk4M2QxNjQwZDIyYmQ2OWU3MzUxNzMxZmQxYWRjYmY5YjI=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-01-25T13:11:51Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2016-03-21T17:36:22Z"}, "message": "Expose attached attributes to `FnKind` abstraction so that I can look at them in borrowck.", "tree": {"sha": "d22218f2c054e04ec287d3236304618cc4c2604e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d22218f2c054e04ec287d3236304618cc4c2604e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/213d57983d1640d22bd69e7351731fd1adcbf9b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/213d57983d1640d22bd69e7351731fd1adcbf9b2", "html_url": "https://github.com/rust-lang/rust/commit/213d57983d1640d22bd69e7351731fd1adcbf9b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/213d57983d1640d22bd69e7351731fd1adcbf9b2/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baeae780e054865d1bfb11de0eb7b294a9390599", "url": "https://api.github.com/repos/rust-lang/rust/commits/baeae780e054865d1bfb11de0eb7b294a9390599", "html_url": "https://github.com/rust-lang/rust/commit/baeae780e054865d1bfb11de0eb7b294a9390599"}], "stats": {"total": 141, "additions": 84, "deletions": 57}, "files": [{"sha": "976a8c6dda0461f8e344acb22a5c87a2b7a3b850", "filename": "src/librustc/front/map/blocks.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs?ref=213d57983d1640d22bd69e7351731fd1adcbf9b2", "patch": "@@ -26,7 +26,8 @@ pub use self::Code::*;\n use front::map::{self, Node};\n use syntax::abi;\n use rustc_front::hir::{Block, FnDecl};\n-use syntax::ast::{Name, NodeId};\n+use syntax::ast::{Attribute, Name, NodeId};\n+use syntax::attr::ThinAttributesExt;\n use rustc_front::hir as ast;\n use syntax::codemap::Span;\n use rustc_front::intravisit::FnKind;\n@@ -116,7 +117,8 @@ struct ItemFnParts<'a> {\n     generics: &'a ast::Generics,\n     body:     &'a Block,\n     id:       NodeId,\n-    span:     Span\n+    span:     Span,\n+    attrs:    &'a [Attribute],\n }\n \n /// These are all the components one can extract from a closure expr\n@@ -125,12 +127,13 @@ struct ClosureParts<'a> {\n     decl: &'a FnDecl,\n     body: &'a Block,\n     id: NodeId,\n-    span: Span\n+    span: Span,\n+    attrs: &'a [Attribute],\n }\n \n impl<'a> ClosureParts<'a> {\n-    fn new(d: &'a FnDecl, b: &'a Block, id: NodeId, s: Span) -> ClosureParts<'a> {\n-        ClosureParts { decl: d, body: b, id: id, span: s }\n+    fn new(d: &'a FnDecl, b: &'a Block, id: NodeId, s: Span, attrs: &'a [Attribute]) -> Self {\n+        ClosureParts { decl: d, body: b, id: id, span: s, attrs: attrs }\n     }\n }\n \n@@ -165,37 +168,37 @@ impl<'a> FnLikeNode<'a> {\n \n     pub fn body(self) -> &'a Block {\n         self.handle(|i: ItemFnParts<'a>|  &*i.body,\n-                    |_, _, _: &'a ast::MethodSig, _, body: &'a ast::Block, _|  body,\n+                    |_, _, _: &'a ast::MethodSig, _, body: &'a ast::Block, _, _|  body,\n                     |c: ClosureParts<'a>| c.body)\n     }\n \n     pub fn decl(self) -> &'a FnDecl {\n         self.handle(|i: ItemFnParts<'a>|  &*i.decl,\n-                    |_, _, sig: &'a ast::MethodSig, _, _, _|  &sig.decl,\n+                    |_, _, sig: &'a ast::MethodSig, _, _, _, _|  &sig.decl,\n                     |c: ClosureParts<'a>| c.decl)\n     }\n \n     pub fn span(self) -> Span {\n         self.handle(|i: ItemFnParts|     i.span,\n-                    |_, _, _: &'a ast::MethodSig, _, _, span| span,\n+                    |_, _, _: &'a ast::MethodSig, _, _, span, _| span,\n                     |c: ClosureParts|    c.span)\n     }\n \n     pub fn id(self) -> NodeId {\n         self.handle(|i: ItemFnParts|     i.id,\n-                    |id, _, _: &'a ast::MethodSig, _, _, _| id,\n+                    |id, _, _: &'a ast::MethodSig, _, _, _, _| id,\n                     |c: ClosureParts|    c.id)\n     }\n \n     pub fn kind(self) -> FnKind<'a> {\n         let item = |p: ItemFnParts<'a>| -> FnKind<'a> {\n-            FnKind::ItemFn(p.name, p.generics, p.unsafety, p.constness, p.abi, p.vis)\n+            FnKind::ItemFn(p.name, p.generics, p.unsafety, p.constness, p.abi, p.vis, p.attrs)\n         };\n-        let closure = |_: ClosureParts| {\n-            FnKind::Closure\n+        let closure = |c: ClosureParts<'a>| {\n+            FnKind::Closure(c.attrs)\n         };\n-        let method = |_, name: Name, sig: &'a ast::MethodSig, vis, _, _| {\n-            FnKind::Method(name, sig, vis)\n+        let method = |_, name: Name, sig: &'a ast::MethodSig, vis, _, _, attrs| {\n+            FnKind::Method(name, sig, vis, attrs)\n         };\n         self.handle(item, method, closure)\n     }\n@@ -207,7 +210,8 @@ impl<'a> FnLikeNode<'a> {\n                   &'a ast::MethodSig,\n                   Option<ast::Visibility>,\n                   &'a ast::Block,\n-                  Span)\n+                  Span,\n+                  &'a [Attribute])\n                   -> A,\n         C: FnOnce(ClosureParts<'a>) -> A,\n     {\n@@ -224,20 +228,21 @@ impl<'a> FnLikeNode<'a> {\n                         abi: abi,\n                         vis: i.vis,\n                         constness: constness,\n-                        span: i.span\n+                        span: i.span,\n+                        attrs: &i.attrs,\n                     }),\n                 _ => panic!(\"item FnLikeNode that is not fn-like\"),\n             },\n             map::NodeTraitItem(ti) => match ti.node {\n                 ast::MethodTraitItem(ref sig, Some(ref body)) => {\n-                    method(ti.id, ti.name, sig, None, body, ti.span)\n+                    method(ti.id, ti.name, sig, None, body, ti.span, &ti.attrs)\n                 }\n                 _ => panic!(\"trait method FnLikeNode that is not fn-like\"),\n             },\n             map::NodeImplItem(ii) => {\n                 match ii.node {\n                     ast::ImplItemKind::Method(ref sig, ref body) => {\n-                        method(ii.id, ii.name, sig, Some(ii.vis), body, ii.span)\n+                        method(ii.id, ii.name, sig, Some(ii.vis), body, ii.span, &ii.attrs)\n                     }\n                     _ => {\n                         panic!(\"impl method FnLikeNode that is not fn-like\")\n@@ -246,7 +251,11 @@ impl<'a> FnLikeNode<'a> {\n             }\n             map::NodeExpr(e) => match e.node {\n                 ast::ExprClosure(_, ref decl, ref block) =>\n-                    closure(ClosureParts::new(&decl, &block, e.id, e.span)),\n+                    closure(ClosureParts::new(&decl,\n+                                              &block,\n+                                              e.id,\n+                                              e.span,\n+                                              e.attrs.as_attr_slice())),\n                 _ => panic!(\"expr FnLikeNode that is not fn-like\"),\n             },\n             _ => panic!(\"other FnLikeNode that is not fn-like\"),"}, {"sha": "b456291b17a0ac6c418aaffdd964d6999cb61ba0", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=213d57983d1640d22bd69e7351731fd1adcbf9b2", "patch": "@@ -1017,7 +1017,7 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n             sp: Span,\n             fn_id: NodeId) {\n     match kind {\n-        FnKind::Closure => {}\n+        FnKind::Closure(_) => {}\n         _ => cx.param_env = ParameterEnvironment::for_item(cx.tcx, fn_id),\n     }\n "}, {"sha": "228a7d21007e50f28c236c7c063fc5151cef0cb1", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=213d57983d1640d22bd69e7351731fd1adcbf9b2", "patch": "@@ -226,10 +226,10 @@ pub fn lookup_const_fn_by_id<'tcx>(tcx: &TyCtxt<'tcx>, def_id: DefId)\n     };\n \n     match fn_like.kind() {\n-        FnKind::ItemFn(_, _, _, hir::Constness::Const, _, _) => {\n+        FnKind::ItemFn(_, _, _, hir::Constness::Const, _, _, _) => {\n             Some(fn_like)\n         }\n-        FnKind::Method(_, m, _) => {\n+        FnKind::Method(_, m, _, _) => {\n             if m.constness == hir::Constness::Const {\n                 Some(fn_like)\n             } else {"}, {"sha": "d4ff4b797c839861d1cba34a989e4474d6bf96dc", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=213d57983d1640d22bd69e7351731fd1adcbf9b2", "patch": "@@ -82,9 +82,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n                 block: &'v hir::Block, span: Span, _: ast::NodeId) {\n \n         let (is_item_fn, is_unsafe_fn) = match fn_kind {\n-            FnKind::ItemFn(_, _, unsafety, _, _, _) =>\n+            FnKind::ItemFn(_, _, unsafety, _, _, _, _) =>\n                 (true, unsafety == hir::Unsafety::Unsafe),\n-            FnKind::Method(_, sig, _) =>\n+            FnKind::Method(_, sig, _, _) =>\n                 (true, sig.unsafety == hir::Unsafety::Unsafe),\n             _ => (false, false),\n         };"}, {"sha": "233e55cdbb5dde2afc897a2d4787655b8c62cea9", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=213d57983d1640d22bd69e7351731fd1adcbf9b2", "patch": "@@ -226,7 +226,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for IntrinsicCheckingVisitor<'a, 'tcx> {\n                 intravisit::walk_fn(self, fk, fd, b, s);\n                 self.param_envs.pop();\n             }\n-            FnKind::Closure => {\n+            FnKind::Closure(..) => {\n                 intravisit::walk_fn(self, fk, fd, b, s);\n             }\n         }"}, {"sha": "b5ea365f880a2e3efc32ef4b1271642291a76ede", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=213d57983d1640d22bd69e7351731fd1adcbf9b2", "patch": "@@ -182,17 +182,17 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n     fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v hir::FnDecl,\n                 b: &'v hir::Block, s: Span, fn_id: ast::NodeId) {\n         match fk {\n-            FnKind::ItemFn(_, generics, _, _, _, _) => {\n+            FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n                 self.visit_early_late(subst::FnSpace, generics, |this| {\n                     this.add_scope_and_walk_fn(fk, fd, b, s, fn_id)\n                 })\n             }\n-            FnKind::Method(_, sig, _) => {\n+            FnKind::Method(_, sig, _, _) => {\n                 self.visit_early_late(subst::FnSpace, &sig.generics, |this| {\n                     this.add_scope_and_walk_fn(fk, fd, b, s, fn_id)\n                 })\n             }\n-            FnKind::Closure => {\n+            FnKind::Closure(_) => {\n                 self.add_scope_and_walk_fn(fk, fd, b, s, fn_id)\n             }\n         }\n@@ -471,16 +471,16 @@ impl<'a> LifetimeContext<'a> {\n                                  fn_id: ast::NodeId) {\n \n         match fk {\n-            FnKind::ItemFn(_, generics, _, _, _, _) => {\n+            FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n                 intravisit::walk_fn_decl(self, fd);\n                 self.visit_generics(generics);\n             }\n-            FnKind::Method(_, sig, _) => {\n+            FnKind::Method(_, sig, _, _) => {\n                 intravisit::walk_fn_decl(self, fd);\n                 self.visit_generics(&sig.generics);\n                 self.visit_explicit_self(&sig.explicit_self);\n             }\n-            FnKind::Closure => {\n+            FnKind::Closure(_) => {\n                 intravisit::walk_fn_decl(self, fd);\n             }\n         }"}, {"sha": "139c881dc1d58352409c4fa62a08d6cf5a495a68", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=213d57983d1640d22bd69e7351731fd1adcbf9b2", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n                 self.free_region_map = old_free_region_map;\n             }\n \n-            FnKind::Closure => {\n+            FnKind::Closure(..) => {\n                 borrowck_fn(self, fk, fd, b, s, id);\n             }\n         }"}, {"sha": "be1cc528d889e59134bf8f67449153f3548b99c5", "filename": "src/librustc_front/intravisit.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_front%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_front%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fintravisit.rs?ref=213d57983d1640d22bd69e7351731fd1adcbf9b2", "patch": "@@ -27,19 +27,30 @@\n \n use syntax::abi::Abi;\n use syntax::ast::{NodeId, CRATE_NODE_ID, Name, Attribute};\n+use syntax::attr::ThinAttributesExt;\n use syntax::codemap::Span;\n use hir::*;\n \n #[derive(Copy, Clone, PartialEq, Eq)]\n pub enum FnKind<'a> {\n     /// fn foo() or extern \"Abi\" fn foo()\n-    ItemFn(Name, &'a Generics, Unsafety, Constness, Abi, Visibility),\n+    ItemFn(Name, &'a Generics, Unsafety, Constness, Abi, Visibility, &'a [Attribute]),\n \n     /// fn foo(&self)\n-    Method(Name, &'a MethodSig, Option<Visibility>),\n+    Method(Name, &'a MethodSig, Option<Visibility>, &'a [Attribute]),\n \n     /// |x, y| {}\n-    Closure,\n+    Closure(&'a [Attribute]),\n+}\n+\n+impl<'a> FnKind<'a> {\n+    pub fn attrs(&self) -> &'a [Attribute] {\n+        match *self {\n+            FnKind::ItemFn(_, _, _, _, _, _, attrs) => attrs,\n+            FnKind::Method(_, _, _, attrs) => attrs,\n+            FnKind::Closure(attrs) => attrs,\n+        }\n+    }\n }\n \n /// Each method of the Visitor trait is a hook to be potentially\n@@ -310,7 +321,8 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n                                             unsafety,\n                                             constness,\n                                             abi,\n-                                            item.vis),\n+                                            item.vis,\n+                                            &item.attrs),\n                              declaration,\n                              body,\n                              item.span,\n@@ -595,14 +607,14 @@ pub fn walk_fn_decl_nopat<'v, V: Visitor<'v>>(visitor: &mut V, function_declarat\n \n pub fn walk_fn_kind<'v, V: Visitor<'v>>(visitor: &mut V, function_kind: FnKind<'v>) {\n     match function_kind {\n-        FnKind::ItemFn(_, generics, _, _, _, _) => {\n+        FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n             visitor.visit_generics(generics);\n         }\n-        FnKind::Method(_, sig, _) => {\n+        FnKind::Method(_, sig, _, _) => {\n             visitor.visit_generics(&sig.generics);\n             visitor.visit_explicit_self(&sig.explicit_self);\n         }\n-        FnKind::Closure => {}\n+        FnKind::Closure(_) => {}\n     }\n }\n \n@@ -630,7 +642,10 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n             walk_fn_decl(visitor, &sig.decl);\n         }\n         MethodTraitItem(ref sig, Some(ref body)) => {\n-            visitor.visit_fn(FnKind::Method(trait_item.name, sig, None),\n+            visitor.visit_fn(FnKind::Method(trait_item.name,\n+                                            sig,\n+                                            None,\n+                                            &trait_item.attrs),\n                              &sig.decl,\n                              body,\n                              trait_item.span,\n@@ -652,7 +667,10 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n             visitor.visit_expr(expr);\n         }\n         ImplItemKind::Method(ref sig, ref body) => {\n-            visitor.visit_fn(FnKind::Method(impl_item.name, sig, Some(impl_item.vis)),\n+            visitor.visit_fn(FnKind::Method(impl_item.name,\n+                                            sig,\n+                                            Some(impl_item.vis),\n+                                            &impl_item.attrs),\n                              &sig.decl,\n                              body,\n                              impl_item.span,\n@@ -758,7 +776,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             walk_list!(visitor, visit_arm, arms);\n         }\n         ExprClosure(_, ref function_declaration, ref body) => {\n-            visitor.visit_fn(FnKind::Closure,\n+            visitor.visit_fn(FnKind::Closure(expression.attrs.as_attr_slice()),\n                              function_declaration,\n                              body,\n                              expression.span,"}, {"sha": "f4f9cb75eaf36efc361e3c4be218ca58884cb33d", "filename": "src/librustc_front/util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_front%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_front%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Futil.rs?ref=213d57983d1640d22bd69e7351731fd1adcbf9b2", "patch": "@@ -254,13 +254,13 @@ impl<'a, 'v, O: ast_util::IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O>\n         self.operation.visit_id(node_id);\n \n         match function_kind {\n-            FnKind::ItemFn(_, generics, _, _, _, _) => {\n+            FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n                 self.visit_generics_helper(generics)\n             }\n-            FnKind::Method(_, sig, _) => {\n+            FnKind::Method(_, sig, _, _) => {\n                 self.visit_generics_helper(&sig.generics)\n             }\n-            FnKind::Closure => {}\n+            FnKind::Closure(_) => {}\n         }\n \n         for argument in &function_declaration.inputs {"}, {"sha": "e399270197e2b6626683b21270b002ed93594302", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=213d57983d1640d22bd69e7351731fd1adcbf9b2", "patch": "@@ -237,7 +237,7 @@ impl LateLintPass for NonSnakeCase {\n                 fk: FnKind, _: &hir::FnDecl,\n                 _: &hir::Block, span: Span, id: ast::NodeId) {\n         match fk {\n-            FnKind::Method(name, _, _) => match method_context(cx, id, span) {\n+            FnKind::Method(name, _, _, _) => match method_context(cx, id, span) {\n                 MethodLateContext::PlainImpl => {\n                     self.check_snake_case(cx, \"method\", &name.as_str(), Some(span))\n                 },\n@@ -246,10 +246,10 @@ impl LateLintPass for NonSnakeCase {\n                 },\n                 _ => (),\n             },\n-            FnKind::ItemFn(name, _, _, _, _, _) => {\n+            FnKind::ItemFn(name, _, _, _, _, _, _) => {\n                 self.check_snake_case(cx, \"function\", &name.as_str(), Some(span))\n             },\n-            _ => (),\n+            FnKind::Closure(_) => (),\n         }\n     }\n "}, {"sha": "2ccb905b6ecdf1cd90158863e8c526a3fce6a3d5", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=213d57983d1640d22bd69e7351731fd1adcbf9b2", "patch": "@@ -223,10 +223,10 @@ impl LateLintPass for UnsafeCode {\n     fn check_fn(&mut self, cx: &LateContext, fk: FnKind, _: &hir::FnDecl,\n                 _: &hir::Block, span: Span, _: ast::NodeId) {\n         match fk {\n-            FnKind::ItemFn(_, _, hir::Unsafety::Unsafe, _, _, _) =>\n+            FnKind::ItemFn(_, _, hir::Unsafety::Unsafe, _, _, _, _) =>\n                 cx.span_lint(UNSAFE_CODE, span, \"declaration of an `unsafe` function\"),\n \n-            FnKind::Method(_, sig, _) => {\n+            FnKind::Method(_, sig, _, _) => {\n                 if sig.unsafety == hir::Unsafety::Unsafe {\n                     cx.span_lint(UNSAFE_CODE, span, \"implementation of an `unsafe` method\")\n                 }\n@@ -670,7 +670,7 @@ impl LateLintPass for UnconditionalRecursion {\n                 cx.tcx.impl_or_trait_item(cx.tcx.map.local_def_id(id)).as_opt_method()\n             }\n             // closures can't recur, so they don't matter.\n-            FnKind::Closure => return\n+            FnKind::Closure(_) => return\n         };\n \n         // Walk through this function (say `f`) looking to see if"}, {"sha": "05dbd63ef1a4221b827ba4486878e614ae5c5f36", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=213d57983d1640d22bd69e7351731fd1adcbf9b2", "patch": "@@ -132,7 +132,7 @@ impl<'a, 'm, 'tcx> Visitor<'tcx> for InnerDump<'a,'m,'tcx> {\n                 body: &'tcx hir::Block,\n                 span: Span,\n                 id: ast::NodeId) {\n-        let implicit_arg_tys = if let intravisit::FnKind::Closure = fk {\n+        let implicit_arg_tys = if let intravisit::FnKind::Closure(..) = fk {\n             vec![closure_self_ty(&self.tcx, id, body.id)]\n         } else {\n             vec![]"}, {"sha": "c2b764594180cfeb4eacdfa2d0aa94b74e4a2455", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=213d57983d1640d22bd69e7351731fd1adcbf9b2", "patch": "@@ -132,10 +132,10 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n         }\n \n         let mode = match fk {\n-            FnKind::ItemFn(_, _, _, hir::Constness::Const, _, _) => {\n+            FnKind::ItemFn(_, _, _, hir::Constness::Const, _, _, _) => {\n                 Mode::ConstFn\n             }\n-            FnKind::Method(_, m, _) => {\n+            FnKind::Method(_, m, _, _) => {\n                 if m.constness == hir::Constness::Const {\n                     Mode::ConstFn\n                 } else {"}, {"sha": "af8c9d81687421457d089e80ed7cd1e90c040006", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/213d57983d1640d22bd69e7351731fd1adcbf9b2/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=213d57983d1640d22bd69e7351731fd1adcbf9b2", "patch": "@@ -634,16 +634,16 @@ impl<'a, 'v, 'tcx> Visitor<'v> for Resolver<'a, 'tcx> {\n                 _: Span,\n                 node_id: NodeId) {\n         let rib_kind = match function_kind {\n-            FnKind::ItemFn(_, generics, _, _, _, _) => {\n+            FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n                 self.visit_generics(generics);\n                 ItemRibKind\n             }\n-            FnKind::Method(_, sig, _) => {\n+            FnKind::Method(_, sig, _, _) => {\n                 self.visit_generics(&sig.generics);\n                 self.visit_explicit_self(&sig.explicit_self);\n                 MethodRibKind\n             }\n-            FnKind::Closure => ClosureRibKind(node_id),\n+            FnKind::Closure(_) => ClosureRibKind(node_id),\n         };\n         self.resolve_function(rib_kind, declaration, block);\n     }"}]}