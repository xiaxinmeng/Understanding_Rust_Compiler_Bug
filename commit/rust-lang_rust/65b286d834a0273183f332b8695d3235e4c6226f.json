{"sha": "65b286d834a0273183f332b8695d3235e4c6226f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1YjI4NmQ4MzRhMDI3MzE4M2YzMzJiODY5NWQzMjM1ZTRjNjIyNmY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:11:48Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-15T22:11:48Z"}, "message": "rollup merge of #21109: steveklabnik/gh17224\n\nFixes #17224", "tree": {"sha": "81db73a8e93dcaf03661af08bf5333c4345293a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81db73a8e93dcaf03661af08bf5333c4345293a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65b286d834a0273183f332b8695d3235e4c6226f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65b286d834a0273183f332b8695d3235e4c6226f", "html_url": "https://github.com/rust-lang/rust/commit/65b286d834a0273183f332b8695d3235e4c6226f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65b286d834a0273183f332b8695d3235e4c6226f/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "692d9426e77757c976cfb841105c159af2385d36", "url": "https://api.github.com/repos/rust-lang/rust/commits/692d9426e77757c976cfb841105c159af2385d36", "html_url": "https://github.com/rust-lang/rust/commit/692d9426e77757c976cfb841105c159af2385d36"}, {"sha": "ad0ce88c6cceec7a5cc3efc91b9447b05fd578a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad0ce88c6cceec7a5cc3efc91b9447b05fd578a1", "html_url": "https://github.com/rust-lang/rust/commit/ad0ce88c6cceec7a5cc3efc91b9447b05fd578a1"}], "stats": {"total": 79, "additions": 76, "deletions": 3}, "files": [{"sha": "023143ae64e264b90b2df1977fa08a46a81c32bb", "filename": "src/doc/trpl/generics.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/65b286d834a0273183f332b8695d3235e4c6226f/src%2Fdoc%2Ftrpl%2Fgenerics.md", "raw_url": "https://github.com/rust-lang/rust/raw/65b286d834a0273183f332b8695d3235e4c6226f/src%2Fdoc%2Ftrpl%2Fgenerics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fgenerics.md?ref=65b286d834a0273183f332b8695d3235e4c6226f", "patch": "@@ -88,9 +88,9 @@ enum Result<H, N> {\n if we wanted to. Convention says that the first generic parameter should be\n `T`, for 'type,' and that we use `E` for 'error.' Rust doesn't care, however.\n \n-The `Result<T, E>` type is intended to\n-be used to return the result of a computation, and to have the ability to\n-return an error if it didn't work out. Here's an example:\n+The `Result<T, E>` type is intended to be used to return the result of a\n+computation, and to have the ability to return an error if it didn't work out.\n+Here's an example:\n \n ```{rust}\n let x: Result<f64, String> = Ok(2.3f64);"}, {"sha": "96322296407f366773c3f46944230b58c208a4cc", "filename": "src/doc/trpl/traits.md", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/65b286d834a0273183f332b8695d3235e4c6226f/src%2Fdoc%2Ftrpl%2Ftraits.md", "raw_url": "https://github.com/rust-lang/rust/raw/65b286d834a0273183f332b8695d3235e4c6226f/src%2Fdoc%2Ftrpl%2Ftraits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ftraits.md?ref=65b286d834a0273183f332b8695d3235e4c6226f", "patch": "@@ -315,3 +315,76 @@ The names don't actually change to this, it's just for illustration. But\n as you can see, there's no overhead of deciding which version to call here,\n hence *statically dispatched*. The downside is that we have two copies of\n the same function, so our binary is a little bit larger.\n+\n+## Our `inverse` Example\n+\n+Back in [Generics](generics.html), we were trying to write code like this:\n+\n+```{rust,ignore}\n+fn inverse<T>(x: T) -> Result<T, String> {\n+    if x == 0.0 { return Err(\"x cannot be zero!\".to_string()); }\n+\n+    Ok(1.0 / x)\n+}\n+```\n+\n+If we try to compile it, we get this error:\n+\n+```text\n+error: binary operation `==` cannot be applied to type `T`\n+```\n+\n+This is because `T` is too generic: we don't know if a random `T` can be\n+compared. For that, we can use trait bounds. It doesn't quite work, but try\n+this:\n+\n+```{rust,ignore}\n+fn inverse<T: PartialEq>(x: T) -> Result<T, String> {\n+    if x == 0.0 { return Err(\"x cannot be zero!\".to_string()); }\n+\n+    Ok(1.0 / x)\n+}\n+```\n+\n+You should get this error:\n+\n+```text\n+error: mismatched types:\n+ expected `T`,\n+    found `_`\n+(expected type parameter,\n+    found floating-point variable)\n+```\n+\n+So this won't work. While our `T` is `PartialEq`, we expected to have another `T`,\n+but instead, we found a floating-point variable. We need a different bound. `Float`\n+to the rescue:\n+\n+```\n+use std::num::Float;\n+\n+fn inverse<T: Float>(x: T) -> Result<T, String> {\n+    if x == Float::zero() { return Err(\"x cannot be zero!\".to_string()) }\n+\n+    let one: T = Float::one();\n+    Ok(one / x)\n+}\n+```\n+\n+We've had to replace our generic `0.0` and `1.0` with the appropriate methods\n+from the `Float` trait. Both `f32` and `f64` implement `Float`, so our function\n+works just fine:\n+\n+```\n+# use std::num::Float;\n+# fn inverse<T: Float>(x: T) -> Result<T, String> {\n+#     if x == Float::zero() { return Err(\"x cannot be zero!\".to_string()) }\n+#     let one: T = Float::one();\n+#     Ok(one / x)\n+# }\n+println!(\"the inverse of {} is {:?}\", 2.0f32, inverse(2.0f32));\n+println!(\"the inverse of {} is {:?}\", 2.0f64, inverse(2.0f64));\n+\n+println!(\"the inverse of {} is {:?}\", 0.0f32, inverse(0.0f32));\n+println!(\"the inverse of {} is {:?}\", 0.0f64, inverse(0.0f64));\n+```"}]}