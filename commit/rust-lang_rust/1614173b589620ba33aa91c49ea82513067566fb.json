{"sha": "1614173b589620ba33aa91c49ea82513067566fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2MTQxNzNiNTg5NjIwYmEzM2FhOTFjNDllYTgyNTEzMDY3NTY2ZmI=", "commit": {"author": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-15T13:11:07Z"}, "committer": {"name": "Andrea Canciani", "email": "ranma42@gmail.com", "date": "2015-09-16T09:26:56Z"}, "message": "Specialize `PartialOrd` for totally ordered primitive types\n\nKnowing the result of equality comparison can enable additional\noptimizations in LLVM.\n\nAdditionally, this makes it obvious that `partial_cmp` on totally\nordered types cannot return `None`.", "tree": {"sha": "1c234a55dfad5ab123761d8d04f3a55de2820d2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c234a55dfad5ab123761d8d04f3a55de2820d2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1614173b589620ba33aa91c49ea82513067566fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1614173b589620ba33aa91c49ea82513067566fb", "html_url": "https://github.com/rust-lang/rust/commit/1614173b589620ba33aa91c49ea82513067566fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1614173b589620ba33aa91c49ea82513067566fb/comments", "author": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ranma42", "id": 1506030, "node_id": "MDQ6VXNlcjE1MDYwMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1506030?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ranma42", "html_url": "https://github.com/ranma42", "followers_url": "https://api.github.com/users/ranma42/followers", "following_url": "https://api.github.com/users/ranma42/following{/other_user}", "gists_url": "https://api.github.com/users/ranma42/gists{/gist_id}", "starred_url": "https://api.github.com/users/ranma42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ranma42/subscriptions", "organizations_url": "https://api.github.com/users/ranma42/orgs", "repos_url": "https://api.github.com/users/ranma42/repos", "events_url": "https://api.github.com/users/ranma42/events{/privacy}", "received_events_url": "https://api.github.com/users/ranma42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f1f5fc746919b15e619cfcfd4cd939ef47f58bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f1f5fc746919b15e619cfcfd4cd939ef47f58bd", "html_url": "https://github.com/rust-lang/rust/commit/0f1f5fc746919b15e619cfcfd4cd939ef47f58bd"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "dc550fc2173afecf4f651b657a8ebf17301329a7", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1614173b589620ba33aa91c49ea82513067566fb/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1614173b589620ba33aa91c49ea82513067566fb/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=1614173b589620ba33aa91c49ea82513067566fb", "patch": "@@ -463,17 +463,35 @@ mod impls {\n         }\n     }\n \n-    partial_ord_impl! { char usize u8 u16 u32 u64 isize i8 i16 i32 i64 f32 f64 }\n+    partial_ord_impl! { f32 f64 }\n \n     macro_rules! ord_impl {\n         ($($t:ty)*) => ($(\n+            #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            impl PartialOrd for $t {\n+                #[inline]\n+                fn partial_cmp(&self, other: &$t) -> Option<Ordering> {\n+                    if *self == *other { Some(Equal) }\n+                    else if *self < *other { Some(Less) }\n+                    else { Some(Greater) }\n+                }\n+                #[inline]\n+                fn lt(&self, other: &$t) -> bool { (*self) < (*other) }\n+                #[inline]\n+                fn le(&self, other: &$t) -> bool { (*self) <= (*other) }\n+                #[inline]\n+                fn ge(&self, other: &$t) -> bool { (*self) >= (*other) }\n+                #[inline]\n+                fn gt(&self, other: &$t) -> bool { (*self) > (*other) }\n+            }\n+\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n             impl Ord for $t {\n                 #[inline]\n                 fn cmp(&self, other: &$t) -> Ordering {\n-                    if *self < *other { Less }\n-                    else if *self > *other { Greater }\n-                    else { Equal }\n+                    if *self == *other { Equal }\n+                    else if *self < *other { Less }\n+                    else { Greater }\n                 }\n             }\n         )*)"}]}