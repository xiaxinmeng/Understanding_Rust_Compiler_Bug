{"sha": "4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNGNhMjdlYWJhYzZhOWM5N2RjMDdiYWY5YTA2N2VmZGZjNjMzODQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-21T23:28:47Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-12-21T23:28:47Z"}, "message": "Merge #319\n\n319: Completion icons r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "83c75bdefa688a220054bf671ffe1692887d6dd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83c75bdefa688a220054bf671ffe1692887d6dd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "html_url": "https://github.com/rust-lang/rust/commit/4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "e4d0930d9c6478f7aa069401fb7e28ab7c80fd14", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d0930d9c6478f7aa069401fb7e28ab7c80fd14", "html_url": "https://github.com/rust-lang/rust/commit/e4d0930d9c6478f7aa069401fb7e28ab7c80fd14"}, {"sha": "ea763c73b8d89edbf716805c62cf31b00e2e1a4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea763c73b8d89edbf716805c62cf31b00e2e1a4f", "html_url": "https://github.com/rust-lang/rust/commit/ea763c73b8d89edbf716805c62cf31b00e2e1a4f"}], "stats": {"total": 222, "additions": 136, "deletions": 86}, "files": [{"sha": "9776a82e375e435eb72cad431d55dae48cb86e24", "filename": "crates/gen_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fgen_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fgen_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2FCargo.toml?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -12,5 +12,5 @@ languageserver-types = \"0.53.0\"\n log = \"0.4.3\"\n failure = \"0.1.2\"\n serde_json = \"1.0.24\"\n-serde = \"1.0.71\"\n+serde = { version = \"1.0.71\", features = [\"derive\"] }\n crossbeam-channel = \"0.2.4\""}, {"sha": "af901d0d29667a1692102682098f775566a05c97", "filename": "crates/gen_lsp_server/src/msg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fgen_lsp_server%2Fsrc%2Fmsg.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -7,7 +7,7 @@ use failure::{bail, format_err};\n \n use crate::Result;\n \n-#[derive(Debug, Serialize, Deserialize, Clone)]\n+#[derive(Serialize, Deserialize, Debug, Clone)]\n #[serde(untagged)]\n pub enum RawMessage {\n     Request(RawRequest),"}, {"sha": "d742d62955a05ed186d825d3de43db1c9dfa14d6", "filename": "crates/ra_analysis/src/completion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -18,7 +18,7 @@ use crate::{\n     },\n };\n \n-pub use crate::completion::completion_item::{CompletionItem, InsertText};\n+pub use crate::completion::completion_item::{CompletionItem, InsertText, CompletionItemKind};\n \n /// Main entry point for copmletion. We run comletion as a two-phase process.\n ///"}, {"sha": "bb5fdfda0418ac61f29366d5f161b2679f2cd138", "filename": "crates/ra_analysis/src/completion/complete_fn_param.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -34,9 +34,8 @@ pub(super) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n             }\n         })\n         .for_each(|(label, lookup)| {\n-            CompletionItem::new(label)\n+            CompletionItem::new(CompletionKind::Magic, label)\n                 .lookup_by(lookup)\n-                .kind(CompletionKind::Magic)\n                 .add_to(acc)\n         });\n "}, {"sha": "5427fcb11f2f0759b8f786b0c9dc5d6e160062d0", "filename": "crates/ra_analysis/src/completion/complete_keyword.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -5,7 +5,14 @@ use ra_syntax::{\n     SyntaxKind::*, SyntaxNodeRef,\n };\n \n-use crate::completion::{CompletionContext, CompletionItem, Completions, CompletionKind::*};\n+use crate::completion::{CompletionContext, CompletionItem, Completions, CompletionKind, CompletionItemKind};\n+\n+fn keyword(kw: &str, snippet: &str) -> CompletionItem {\n+    CompletionItem::new(CompletionKind::Keyword, kw)\n+        .kind(CompletionItemKind::Keyword)\n+        .snippet(snippet)\n+        .build()\n+}\n \n pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_trivial_path {\n@@ -60,13 +67,6 @@ fn complete_return(fn_def: ast::FnDef, is_stmt: bool) -> Option<CompletionItem>\n     Some(keyword(\"return\", snip))\n }\n \n-fn keyword(kw: &str, snippet: &str) -> CompletionItem {\n-    CompletionItem::new(kw)\n-        .kind(Keyword)\n-        .snippet(snippet)\n-        .build()\n-}\n-\n #[cfg(test)]\n mod tests {\n     use crate::completion::{CompletionKind, check_completion};"}, {"sha": "ad4d68a3326b123185d1296a43175d803467019f", "filename": "crates/ra_analysis/src/completion/complete_path.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -1,6 +1,6 @@\n use crate::{\n     Cancelable,\n-    completion::{CompletionItem, Completions, CompletionKind::*, CompletionContext},\n+    completion::{CompletionItem, Completions, CompletionKind, CompletionContext},\n };\n \n pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) -> Cancelable<()> {\n@@ -17,9 +17,9 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) -> C\n         _ => return Ok(()),\n     };\n     let module_scope = target_module.scope(ctx.db)?;\n-    module_scope.entries().for_each(|(name, _res)| {\n-        CompletionItem::new(name.to_string())\n-            .kind(Reference)\n+    module_scope.entries().for_each(|(name, res)| {\n+        CompletionItem::new(CompletionKind::Reference, name.to_string())\n+            .from_resolution(ctx.db, res)\n             .add_to(acc)\n     });\n     Ok(())"}, {"sha": "82610d63f136866bfdcbc125b955abff6a1cfb12", "filename": "crates/ra_analysis/src/completion/complete_scope.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -3,7 +3,7 @@ use ra_syntax::TextUnit;\n \n use crate::{\n     Cancelable,\n-    completion::{CompletionItem, Completions, CompletionKind::*, CompletionContext},\n+    completion::{CompletionItem, CompletionItemKind, Completions, CompletionKind, CompletionContext},\n };\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) -> Cancelable<()> {\n@@ -29,9 +29,9 @@ pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) ->\n                     }\n                 }\n             })\n-            .for_each(|(name, _res)| {\n-                CompletionItem::new(name.to_string())\n-                    .kind(Reference)\n+            .for_each(|(name, res)| {\n+                CompletionItem::new(CompletionKind::Reference, name.to_string())\n+                    .from_resolution(ctx.db, res)\n                     .add_to(acc)\n             });\n     }\n@@ -46,12 +46,12 @@ fn complete_fn(acc: &mut Completions, scopes: &hir::FnScopes, offset: TextUnit)\n         .flat_map(|scope| scopes.entries(scope).iter())\n         .filter(|entry| shadowed.insert(entry.name()))\n         .for_each(|entry| {\n-            CompletionItem::new(entry.name().to_string())\n-                .kind(Reference)\n+            CompletionItem::new(CompletionKind::Reference, entry.name().to_string())\n+                .kind(CompletionItemKind::Binding)\n                 .add_to(acc)\n         });\n     if scopes.self_param.is_some() {\n-        CompletionItem::new(\"self\").kind(Reference).add_to(acc);\n+        CompletionItem::new(CompletionKind::Reference, \"self\").add_to(acc);\n     }\n }\n "}, {"sha": "fb9da0a4f8d556be567ce86beae0a43e8e168ed9", "filename": "crates/ra_analysis/src/completion/complete_snippet.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_snippet.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -1,38 +1,35 @@\n-use crate::completion::{CompletionItem, Completions, CompletionKind::*, CompletionContext};\n+use crate::completion::{CompletionItem, Completions, CompletionKind, CompletionItemKind, CompletionContext, completion_item::Builder};\n+\n+fn snippet(label: &str, snippet: &str) -> Builder {\n+    CompletionItem::new(CompletionKind::Snippet, label)\n+        .snippet(snippet)\n+        .kind(CompletionItemKind::Snippet)\n+}\n \n pub(super) fn complete_expr_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n     if !(ctx.is_trivial_path && ctx.enclosing_fn.is_some()) {\n         return;\n     }\n-    CompletionItem::new(\"pd\")\n-        .snippet(\"eprintln!(\\\"$0 = {:?}\\\", $0);\")\n-        .kind(Snippet)\n-        .add_to(acc);\n-    CompletionItem::new(\"ppd\")\n-        .snippet(\"eprintln!(\\\"$0 = {:#?}\\\", $0);\")\n-        .kind(Snippet)\n-        .add_to(acc);\n+    snippet(\"pd\", \"eprintln!(\\\"$0 = {:?}\\\", $0);\").add_to(acc);\n+    snippet(\"ppd\", \"eprintln!(\\\"$0 = {:#?}\\\", $0);\").add_to(acc);\n }\n \n pub(super) fn complete_item_snippet(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_new_item {\n         return;\n     }\n-    CompletionItem::new(\"Test function\")\n-        .lookup_by(\"tfn\")\n-        .snippet(\n-            \"\\\n+    snippet(\n+        \"Test function\",\n+        \"\\\n #[test]\n fn ${1:feature}() {\n     $0\n }\",\n-        )\n-        .kind(Snippet)\n-        .add_to(acc);\n-    CompletionItem::new(\"pub(crate)\")\n-        .snippet(\"pub(crate) $0\")\n-        .kind(Snippet)\n-        .add_to(acc);\n+    )\n+    .lookup_by(\"tfn\")\n+    .add_to(acc);\n+\n+    snippet(\"pub(crate)\", \"pub(crate) $0\").add_to(acc);\n }\n \n #[cfg(test)]"}, {"sha": "911f08468ea40b4b384e47ce85d8378b172456b7", "filename": "crates/ra_analysis/src/completion/completion_item.rs", "status": "modified", "additions": 45, "deletions": 9, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -1,20 +1,33 @@\n+use crate::db;\n+\n /// `CompletionItem` describes a single completion variant in the editor pop-up.\n /// It is basically a POD with various properties. To construct a\n /// `CompletionItem`, use `new` method and the `Builder` struct.\n #[derive(Debug)]\n pub struct CompletionItem {\n+    /// Used only internally in tests, to check only specific kind of\n+    /// completion.\n+    completion_kind: CompletionKind,\n     label: String,\n     lookup: Option<String>,\n     snippet: Option<String>,\n-    /// Used only internally in test, to check only specific kind of completion.\n-    kind: CompletionKind,\n+    kind: Option<CompletionItemKind>,\n }\n \n pub enum InsertText {\n     PlainText { text: String },\n     Snippet { text: String },\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub enum CompletionItemKind {\n+    Snippet,\n+    Keyword,\n+    Module,\n+    Function,\n+    Binding,\n+}\n+\n #[derive(Debug, PartialEq, Eq)]\n pub(crate) enum CompletionKind {\n     /// Parser-based keyword completion.\n@@ -24,17 +37,17 @@ pub(crate) enum CompletionKind {\n     /// \"Secret sauce\" completions.\n     Magic,\n     Snippet,\n-    Unspecified,\n }\n \n impl CompletionItem {\n-    pub(crate) fn new(label: impl Into<String>) -> Builder {\n+    pub(crate) fn new(completion_kind: CompletionKind, label: impl Into<String>) -> Builder {\n         let label = label.into();\n         Builder {\n+            completion_kind,\n             label,\n             lookup: None,\n             snippet: None,\n-            kind: CompletionKind::Unspecified,\n+            kind: None,\n         }\n     }\n     /// What user sees in pop-up in the UI.\n@@ -57,15 +70,20 @@ impl CompletionItem {\n             Some(it) => InsertText::Snippet { text: it.clone() },\n         }\n     }\n+\n+    pub fn kind(&self) -> Option<CompletionItemKind> {\n+        self.kind\n+    }\n }\n \n /// A helper to make `CompletionItem`s.\n #[must_use]\n pub(crate) struct Builder {\n+    completion_kind: CompletionKind,\n     label: String,\n     lookup: Option<String>,\n     snippet: Option<String>,\n-    kind: CompletionKind,\n+    kind: Option<CompletionItemKind>,\n }\n \n impl Builder {\n@@ -79,6 +97,7 @@ impl Builder {\n             lookup: self.lookup,\n             snippet: self.snippet,\n             kind: self.kind,\n+            completion_kind: self.completion_kind,\n         }\n     }\n     pub(crate) fn lookup_by(mut self, lookup: impl Into<String>) -> Builder {\n@@ -89,8 +108,25 @@ impl Builder {\n         self.snippet = Some(snippet.into());\n         self\n     }\n-    pub(crate) fn kind(mut self, kind: CompletionKind) -> Builder {\n-        self.kind = kind;\n+    pub(crate) fn kind(mut self, kind: CompletionItemKind) -> Builder {\n+        self.kind = Some(kind);\n+        self\n+    }\n+    pub(crate) fn from_resolution(\n+        mut self,\n+        db: &db::RootDatabase,\n+        resolution: &hir::Resolution,\n+    ) -> Builder {\n+        if let Some(def_id) = resolution.def_id {\n+            if let Ok(def) = def_id.resolve(db) {\n+                let kind = match def {\n+                    hir::Def::Module(..) => CompletionItemKind::Module,\n+                    hir::Def::Function(..) => CompletionItemKind::Function,\n+                    _ => return self,\n+                };\n+                self.kind = Some(kind);\n+            }\n+        }\n         self\n     }\n }\n@@ -154,7 +190,7 @@ impl Completions {\n     fn debug_render(&self, kind: CompletionKind) -> String {\n         let mut res = String::new();\n         for c in self.buf.iter() {\n-            if c.kind == kind {\n+            if c.completion_kind == kind {\n                 if let Some(lookup) = &c.lookup {\n                     res.push_str(lookup);\n                     res.push_str(&format!(\" {:?}\", c.label));"}, {"sha": "6fd1578801e067457a549d8f595a9f104930c97c", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -30,7 +30,7 @@ use crate::{\n };\n \n pub use crate::{\n-    completion::{CompletionItem, InsertText},\n+    completion::{CompletionItem, CompletionItemKind, InsertText},\n };\n pub use ra_editor::{\n     FileSymbol, Fold, FoldKind, HighlightedRange, LineIndex, Runnable, RunnableKind, StructureNode,"}, {"sha": "77be25f1a8bcd3af41591f1541e335805b14f5a5", "filename": "crates/ra_hir/src/function/scope.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_hir%2Fsrc%2Ffunction%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_hir%2Fsrc%2Ffunction%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffunction%2Fscope.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -95,7 +95,7 @@ impl FnScopes {\n                     r1.start().cmp(&r2.start())\n                 }\n             })\n-            .map(|(ptr, scope)| *scope)\n+            .map(|(_ptr, scope)| *scope)\n             .unwrap_or(original_scope)\n     }\n \n@@ -209,7 +209,6 @@ fn compute_block_scopes(block: ast::Block, scopes: &mut FnScopes, mut scope: Sco\n         }\n     }\n     if let Some(expr) = block.expr() {\n-        eprintln!(\"{:?}\", expr);\n         scopes.set_scope(expr.syntax(), scope);\n         compute_expr_scopes(expr, scopes, scope);\n     }"}, {"sha": "f56214b47a7ea06fc1333e43919cb9fc6b678013", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -39,7 +39,7 @@ use crate::{\n pub use self::{\n     path::{Path, PathKind},\n     krate::Crate,\n-    module::{Module, ModuleId, Problem, nameres::ItemMap},\n+    module::{Module, ModuleId, Problem, nameres::ItemMap, ModuleScope, Resolution},\n     function::{Function, FnScopes},\n };\n "}, {"sha": "cd31e8cfe647c032a988db5b6dafdc287671171e", "filename": "crates/ra_hir/src/module.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_hir%2Fsrc%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -16,7 +16,7 @@ use crate::{\n     arena::{Arena, Id},\n };\n \n-pub use self::nameres::ModuleScope;\n+pub use self::nameres::{ModuleScope, Resolution};\n \n /// `Module` is API entry point to get all the information\n /// about a particular module."}, {"sha": "39e891cda5a6c6a12bc4b10186fb13d73c4c76e0", "filename": "crates/ra_hir/src/module/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -49,7 +49,7 @@ pub struct ModuleScope {\n }\n \n impl ModuleScope {\n-    pub fn entries<'a>(&'a self) -> impl Iterator<Item = (&'a SmolStr, &Resolution)> + 'a {\n+    pub fn entries<'a>(&'a self) -> impl Iterator<Item = (&'a SmolStr, &'a Resolution)> + 'a {\n         self.items.iter()\n     }\n     pub fn get(&self, name: &SmolStr) -> Option<&Resolution> {"}, {"sha": "051f1f995b3c920badd995c9326408fc83dee76d", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -1,8 +1,8 @@\n use languageserver_types::{\n     self, Location, Position, Range, SymbolKind, TextDocumentEdit, TextDocumentIdentifier,\n-    TextDocumentItem, TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier,\n+    TextDocumentItem, TextDocumentPositionParams, Url, VersionedTextDocumentIdentifier, InsertTextFormat,\n };\n-use ra_analysis::{FileId, FileSystemEdit, SourceChange, SourceFileEdit, FilePosition};\n+use ra_analysis::{FileId, FileSystemEdit, SourceChange, SourceFileEdit, FilePosition, CompletionItem, CompletionItemKind, InsertText};\n use ra_editor::{LineCol, LineIndex};\n use ra_text_edit::{AtomTextEdit, TextEdit};\n use ra_syntax::{SyntaxKind, TextRange, TextUnit};\n@@ -45,6 +45,46 @@ impl Conv for SyntaxKind {\n     }\n }\n \n+impl Conv for CompletionItemKind {\n+    type Output = ::languageserver_types::CompletionItemKind;\n+\n+    fn conv(self) -> <Self as Conv>::Output {\n+        use ::languageserver_types::CompletionItemKind::*;\n+        match self {\n+            CompletionItemKind::Keyword => Keyword,\n+            CompletionItemKind::Snippet => Snippet,\n+            CompletionItemKind::Module => Module,\n+            CompletionItemKind::Function => Function,\n+            CompletionItemKind::Binding => Variable,\n+        }\n+    }\n+}\n+\n+impl Conv for CompletionItem {\n+    type Output = ::languageserver_types::CompletionItem;\n+\n+    fn conv(self) -> <Self as Conv>::Output {\n+        let mut res = ::languageserver_types::CompletionItem {\n+            label: self.label().to_string(),\n+            filter_text: Some(self.lookup().to_string()),\n+            kind: self.kind().map(|it| it.conv()),\n+            ..Default::default()\n+        };\n+        match self.insert_text() {\n+            InsertText::PlainText { text } => {\n+                res.insert_text = Some(text);\n+                res.insert_text_format = Some(InsertTextFormat::PlainText);\n+            }\n+            InsertText::Snippet { text } => {\n+                res.insert_text = Some(text);\n+                res.insert_text_format = Some(InsertTextFormat::Snippet);\n+                res.kind = Some(languageserver_types::CompletionItemKind::Keyword);\n+            }\n+        }\n+        res\n+    }\n+}\n+\n impl ConvWith for Position {\n     type Ctx = LineIndex;\n     type Output = TextUnit;"}, {"sha": "252d1ba3ead1301dda7c755be21404deda4b44a6", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e4ca27eabac6a9c97dc07baf9a067efdfc63384/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=4e4ca27eabac6a9c97dc07baf9a067efdfc63384", "patch": "@@ -2,13 +2,13 @@ use std::collections::HashMap;\n \n use gen_lsp_server::ErrorCode;\n use languageserver_types::{\n-    CodeActionResponse, Command, CompletionItem, CompletionItemKind, Diagnostic,\n+    CodeActionResponse, Command, Diagnostic,\n     DiagnosticSeverity, DocumentSymbol, Documentation, FoldingRange, FoldingRangeKind,\n-    FoldingRangeParams, InsertTextFormat, Location, MarkupContent, MarkupKind, MarkedString, Position,\n+    FoldingRangeParams, Location, MarkupContent, MarkupKind, MarkedString, Position,\n     PrepareRenameResponse, RenameParams, SymbolInformation, TextDocumentIdentifier, TextEdit,\n     WorkspaceEdit, ParameterInformation, ParameterLabel, SignatureInformation, Hover, HoverContents,\n };\n-use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FilePosition, InsertText};\n+use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FilePosition};\n use ra_syntax::{TextUnit, text_utils::intersect};\n use ra_text_edit::text_utils::contains_offset_nonstrict;\n use rustc_hash::FxHashMap;\n@@ -419,28 +419,7 @@ pub fn handle_completion(\n         None => return Ok(None),\n         Some(items) => items,\n     };\n-    let items = items\n-        .into_iter()\n-        .map(|item| {\n-            let mut res = CompletionItem {\n-                label: item.label().to_string(),\n-                filter_text: Some(item.lookup().to_string()),\n-                ..Default::default()\n-            };\n-            match item.insert_text() {\n-                InsertText::PlainText { text } => {\n-                    res.insert_text = Some(text);\n-                    res.insert_text_format = Some(InsertTextFormat::PlainText);\n-                }\n-                InsertText::Snippet { text } => {\n-                    res.insert_text = Some(text);\n-                    res.insert_text_format = Some(InsertTextFormat::Snippet);\n-                    res.kind = Some(CompletionItemKind::Keyword);\n-                }\n-            }\n-            res\n-        })\n-        .collect();\n+    let items = items.into_iter().map(|item| item.conv()).collect();\n \n     Ok(Some(req::CompletionResponse::Array(items)))\n }"}]}