{"sha": "c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYmYxNTMwNDljZDc4OTdiMzJiYTA5NjlmMWU5ZmM1Y2NkZDJiNDI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-22T13:20:37Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-22T13:20:37Z"}, "message": "Rustup to rustc 1.43.0-nightly (8aa9d2014 2020-02-21)", "tree": {"sha": "3b666f7cc1f7ace55a7712409f17a3b64a4d7789", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b666f7cc1f7ace55a7712409f17a3b64a4d7789"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42", "html_url": "https://github.com/rust-lang/rust/commit/c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2714068b9709e3e1d13a55f6c442afaecbc08d90", "url": "https://api.github.com/repos/rust-lang/rust/commits/2714068b9709e3e1d13a55f6c442afaecbc08d90", "html_url": "https://github.com/rust-lang/rust/commit/2714068b9709e3e1d13a55f6c442afaecbc08d90"}], "stats": {"total": 62, "additions": 18, "deletions": 44}, "files": [{"sha": "292e9dbf723bd26dc41725ead2f336d56d2659de", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42", "patch": "@@ -1 +1 @@\n-nightly-2020-02-14\n+nightly-2020-02-22"}, {"sha": "c741d02b8d752e2e3d701083784931ef31fdf2e6", "filename": "src/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42", "patch": "@@ -632,7 +632,8 @@ fn codegen_array_len<'tcx>(\n ) -> Value {\n     match place.layout().ty.kind {\n         ty::Array(_elem_ty, len) => {\n-            let len = crate::constant::force_eval_const(fx, len)\n+            let len = fx.monomorphize(&len)\n+                .eval(fx.tcx, ParamEnv::reveal_all())\n                 .eval_usize(fx.tcx, ParamEnv::reveal_all()) as i64;\n             fx.bcx.ins().iconst(fx.pointer_type, len)\n         }"}, {"sha": "d9659f42d6fcddda707039d89a002fd7e1947e21", "filename": "src/common.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42", "patch": "@@ -374,7 +374,10 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n             caller.line as u32,\n             caller.col_display as u32 + 1,\n         ));\n-        crate::constant::trans_const_value(self, const_loc)\n+        crate::constant::trans_const_value(\n+            self,\n+            ty::Const::from_value(self.tcx, const_loc, self.tcx.caller_location_ty()),\n+        )\n     }\n \n     pub fn triple(&self) -> &target_lexicon::Triple {"}, {"sha": "47e949021dfd16fde85854f93b7d637bbc46382e", "filename": "src/constant.rs", "status": "modified", "additions": 7, "deletions": 40, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42", "patch": "@@ -69,47 +69,12 @@ pub fn trans_constant<'tcx>(\n                 fx.layout_of(fx.monomorphize(&constant.literal.ty)),\n             ).to_cvalue(fx);\n         }\n-        ConstKind::Unevaluated(def_id, ref substs, promoted) => {\n-            let substs = fx.monomorphize(substs);\n-            fx.tcx.const_eval_resolve(\n-                ParamEnv::reveal_all(),\n-                def_id,\n-                substs,\n-                promoted,\n-                None, // FIXME use correct span\n-            ).unwrap_or_else(|_| {\n-                fx.tcx.sess.abort_if_errors();\n-                unreachable!();\n-            })\n-        }\n-        _ => fx.monomorphize(&constant.literal),\n+        _ => fx.monomorphize(&constant.literal).eval(fx.tcx, ParamEnv::reveal_all()),\n     };\n \n     trans_const_value(fx, const_)\n }\n \n-pub fn force_eval_const<'tcx>(\n-    fx: &FunctionCx<'_, 'tcx, impl Backend>,\n-    const_: &'tcx Const,\n-) -> &'tcx Const<'tcx> {\n-    match const_.val {\n-        ConstKind::Unevaluated(def_id, ref substs, promoted) => {\n-            let substs = fx.monomorphize(substs);\n-            fx.tcx.const_eval_resolve(\n-                ParamEnv::reveal_all(),\n-                def_id,\n-                substs,\n-                promoted,\n-                None, // FIXME pass correct span\n-            ).unwrap_or_else(|_| {\n-                fx.tcx.sess.abort_if_errors();\n-                unreachable!();\n-            })\n-        }\n-        _ => fx.monomorphize(&const_),\n-    }\n-}\n-\n pub fn trans_const_value<'tcx>(\n     fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n     const_: &'tcx Const<'tcx>,\n@@ -338,8 +303,8 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut Module<impl Backend>, cx: &mu\n \n                 let const_ = tcx.const_eval_poly(def_id).unwrap();\n \n-                let alloc = match const_.val {\n-                    ConstKind::Value(ConstValue::ByRef { alloc, offset }) if offset.bytes() == 0 => alloc,\n+                let alloc = match const_ {\n+                    ConstValue::ByRef { alloc, offset } if offset.bytes() == 0 => alloc,\n                     _ => bug!(\"static const eval returned {:#?}\", const_),\n                 };\n \n@@ -537,7 +502,9 @@ pub fn mir_operand_get_const_val<'tcx>(\n     operand: &Operand<'tcx>,\n ) -> Option<&'tcx Const<'tcx>> {\n     match operand {\n-        Operand::Copy(_) | Operand::Move(_) => return None,\n-        Operand::Constant(const_) => return Some(force_eval_const(fx, const_.literal)),\n+        Operand::Copy(_) | Operand::Move(_) => None,\n+        Operand::Constant(const_) => {\n+            Some(fx.monomorphize(&const_.literal).eval(fx.tcx, ParamEnv::reveal_all()))\n+        }\n     }\n }"}, {"sha": "c8f23555952b8470b8e5fcce45cf635db6bdccdd", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=c1bf153049cd7897b32ba0969f1e9fc5ccdd2b42", "patch": "@@ -835,7 +835,10 @@ pub fn codegen_intrinsic_call<'tcx>(\n         size_of | pref_align_of | min_align_of | needs_drop | type_id | type_name, () {\n             let const_val =\n                 fx.tcx.const_eval_instance(ParamEnv::reveal_all(), instance, None).unwrap();\n-            let val = crate::constant::trans_const_value(fx, const_val);\n+            let val = crate::constant::trans_const_value(\n+                fx,\n+                ty::Const::from_value(fx.tcx, const_val, ret.layout().ty),\n+            );\n             ret.write_cvalue(fx, val);\n         };\n "}]}