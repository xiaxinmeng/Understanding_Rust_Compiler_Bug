{"sha": "b75b0f79235c919b3ab959fb79247d2997bd63e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NWIwZjc5MjM1YzkxOWIzYWI5NTlmYjc5MjQ3ZDI5OTdiZDYzZTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-17T01:16:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-09-17T01:16:14Z"}, "message": "auto merge of #17223 : retep998/rust/into_string, r=huonw\n\nReplaces some usage of `.to_string()` with `.into_string()`", "tree": {"sha": "f0eec84856b18dda238f45616093fa0f4c0a4b2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0eec84856b18dda238f45616093fa0f4c0a4b2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b75b0f79235c919b3ab959fb79247d2997bd63e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b75b0f79235c919b3ab959fb79247d2997bd63e0", "html_url": "https://github.com/rust-lang/rust/commit/b75b0f79235c919b3ab959fb79247d2997bd63e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b75b0f79235c919b3ab959fb79247d2997bd63e0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e784e16840e8a0c623cc6166de26da9334db3d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e784e16840e8a0c623cc6166de26da9334db3d6", "html_url": "https://github.com/rust-lang/rust/commit/0e784e16840e8a0c623cc6166de26da9334db3d6"}, {"sha": "bcad3a581663e84694e99300349341822b8e8f6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcad3a581663e84694e99300349341822b8e8f6e", "html_url": "https://github.com/rust-lang/rust/commit/bcad3a581663e84694e99300349341822b8e8f6e"}], "stats": {"total": 84, "additions": 42, "deletions": 42}, "files": [{"sha": "5a0aeece27237efe9141a964ce0b33a699769484", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/b75b0f79235c919b3ab959fb79247d2997bd63e0/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75b0f79235c919b3ab959fb79247d2997bd63e0/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=b75b0f79235c919b3ab959fb79247d2997bd63e0", "patch": "@@ -165,45 +165,45 @@ pub fn binop_to_string(o: BinOp) -> &'static str {\n \n pub fn to_string(t: &Token) -> String {\n     match *t {\n-      EQ => \"=\".to_string(),\n-      LT => \"<\".to_string(),\n-      LE => \"<=\".to_string(),\n-      EQEQ => \"==\".to_string(),\n-      NE => \"!=\".to_string(),\n-      GE => \">=\".to_string(),\n-      GT => \">\".to_string(),\n-      NOT => \"!\".to_string(),\n-      TILDE => \"~\".to_string(),\n-      OROR => \"||\".to_string(),\n-      ANDAND => \"&&\".to_string(),\n-      BINOP(op) => binop_to_string(op).to_string(),\n+      EQ => \"=\".into_string(),\n+      LT => \"<\".into_string(),\n+      LE => \"<=\".into_string(),\n+      EQEQ => \"==\".into_string(),\n+      NE => \"!=\".into_string(),\n+      GE => \">=\".into_string(),\n+      GT => \">\".into_string(),\n+      NOT => \"!\".into_string(),\n+      TILDE => \"~\".into_string(),\n+      OROR => \"||\".into_string(),\n+      ANDAND => \"&&\".into_string(),\n+      BINOP(op) => binop_to_string(op).into_string(),\n       BINOPEQ(op) => {\n-          let mut s = binop_to_string(op).to_string();\n+          let mut s = binop_to_string(op).into_string();\n           s.push_str(\"=\");\n           s\n       }\n \n       /* Structural symbols */\n-      AT => \"@\".to_string(),\n-      DOT => \".\".to_string(),\n-      DOTDOT => \"..\".to_string(),\n-      DOTDOTDOT => \"...\".to_string(),\n-      COMMA => \",\".to_string(),\n-      SEMI => \";\".to_string(),\n-      COLON => \":\".to_string(),\n-      MOD_SEP => \"::\".to_string(),\n-      RARROW => \"->\".to_string(),\n-      LARROW => \"<-\".to_string(),\n-      FAT_ARROW => \"=>\".to_string(),\n-      LPAREN => \"(\".to_string(),\n-      RPAREN => \")\".to_string(),\n-      LBRACKET => \"[\".to_string(),\n-      RBRACKET => \"]\".to_string(),\n-      LBRACE => \"{\".to_string(),\n-      RBRACE => \"}\".to_string(),\n-      POUND => \"#\".to_string(),\n-      DOLLAR => \"$\".to_string(),\n-      QUESTION => \"?\".to_string(),\n+      AT => \"@\".into_string(),\n+      DOT => \".\".into_string(),\n+      DOTDOT => \"..\".into_string(),\n+      DOTDOTDOT => \"...\".into_string(),\n+      COMMA => \",\".into_string(),\n+      SEMI => \";\".into_string(),\n+      COLON => \":\".into_string(),\n+      MOD_SEP => \"::\".into_string(),\n+      RARROW => \"->\".into_string(),\n+      LARROW => \"<-\".into_string(),\n+      FAT_ARROW => \"=>\".into_string(),\n+      LPAREN => \"(\".into_string(),\n+      RPAREN => \")\".into_string(),\n+      LBRACKET => \"[\".into_string(),\n+      RBRACKET => \"]\".into_string(),\n+      LBRACE => \"{\".into_string(),\n+      RBRACE => \"}\".into_string(),\n+      POUND => \"#\".into_string(),\n+      DOLLAR => \"$\".into_string(),\n+      QUESTION => \"?\".into_string(),\n \n       /* Literals */\n       LIT_BYTE(b) => {\n@@ -213,7 +213,7 @@ pub fn to_string(t: &Token) -> String {\n           format!(\"'{}'\", c.as_str())\n       }\n       LIT_INTEGER(c) | LIT_FLOAT(c) => {\n-          c.as_str().to_string()\n+          c.as_str().into_string()\n       }\n \n       LIT_STR(s) => {\n@@ -232,17 +232,17 @@ pub fn to_string(t: &Token) -> String {\n       }\n \n       /* Name components */\n-      IDENT(s, _) => get_ident(s).get().to_string(),\n+      IDENT(s, _) => get_ident(s).get().into_string(),\n       LIFETIME(s) => {\n           format!(\"{}\", get_ident(s))\n       }\n-      UNDERSCORE => \"_\".to_string(),\n+      UNDERSCORE => \"_\".into_string(),\n \n       /* Other */\n-      DOC_COMMENT(s) => s.as_str().to_string(),\n-      EOF => \"<eof>\".to_string(),\n-      WS => \" \".to_string(),\n-      COMMENT => \"/* */\".to_string(),\n+      DOC_COMMENT(s) => s.as_str().into_string(),\n+      EOF => \"<eof>\".into_string(),\n+      WS => \" \".into_string(),\n+      COMMENT => \"/* */\".into_string(),\n       SHEBANG(s) => format!(\"/* shebang: {}*/\", s.as_str()),\n \n       INTERPOLATED(ref nt) => {\n@@ -252,7 +252,7 @@ pub fn to_string(t: &Token) -> String {\n             &NtTy(ref e) => ::print::pprust::ty_to_string(&**e),\n             &NtPath(ref e) => ::print::pprust::path_to_string(&**e),\n             _ => {\n-                let mut s = \"an interpolated \".to_string();\n+                let mut s = \"an interpolated \".into_string();\n                 match *nt {\n                     NtItem(..) => s.push_str(\"item\"),\n                     NtBlock(..) => s.push_str(\"block\"),"}, {"sha": "c22bdde74a47c22d3073552a4336aaeff8198017", "filename": "src/libsyntax/util/interner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b75b0f79235c919b3ab959fb79247d2997bd63e0/src%2Flibsyntax%2Futil%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b75b0f79235c919b3ab959fb79247d2997bd63e0/src%2Flibsyntax%2Futil%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Finterner.rs?ref=b75b0f79235c919b3ab959fb79247d2997bd63e0", "patch": "@@ -120,7 +120,7 @@ impl fmt::Show for RcStr {\n impl RcStr {\n     pub fn new(string: &str) -> RcStr {\n         RcStr {\n-            string: Rc::new(string.to_string()),\n+            string: Rc::new(string.into_string()),\n         }\n     }\n }"}]}