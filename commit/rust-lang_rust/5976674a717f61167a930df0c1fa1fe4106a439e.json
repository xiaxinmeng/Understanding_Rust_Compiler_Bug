{"sha": "5976674a717f61167a930df0c1fa1fe4106a439e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5NzY2NzRhNzE3ZjYxMTY3YTkzMGRmMGMxZmExZmU0MTA2YTQzOWU=", "commit": {"author": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-09-25T10:54:23Z"}, "committer": {"name": "gnzlbg", "email": "gonzalobg88@gmail.com", "date": "2019-09-25T10:54:23Z"}, "message": "Refactor", "tree": {"sha": "1f2366a6c40556976eff5785d5116ed71f8531b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f2366a6c40556976eff5785d5116ed71f8531b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5976674a717f61167a930df0c1fa1fe4106a439e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5976674a717f61167a930df0c1fa1fe4106a439e", "html_url": "https://github.com/rust-lang/rust/commit/5976674a717f61167a930df0c1fa1fe4106a439e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5976674a717f61167a930df0c1fa1fe4106a439e/comments", "author": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gnzlbg", "id": 904614, "node_id": "MDQ6VXNlcjkwNDYxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/904614?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gnzlbg", "html_url": "https://github.com/gnzlbg", "followers_url": "https://api.github.com/users/gnzlbg/followers", "following_url": "https://api.github.com/users/gnzlbg/following{/other_user}", "gists_url": "https://api.github.com/users/gnzlbg/gists{/gist_id}", "starred_url": "https://api.github.com/users/gnzlbg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gnzlbg/subscriptions", "organizations_url": "https://api.github.com/users/gnzlbg/orgs", "repos_url": "https://api.github.com/users/gnzlbg/repos", "events_url": "https://api.github.com/users/gnzlbg/events{/privacy}", "received_events_url": "https://api.github.com/users/gnzlbg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02b3234a7766694616e3396c17e9ff08859a785d", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b3234a7766694616e3396c17e9ff08859a785d", "html_url": "https://github.com/rust-lang/rust/commit/02b3234a7766694616e3396c17e9ff08859a785d"}], "stats": {"total": 134, "additions": 76, "deletions": 58}, "files": [{"sha": "586611397e34432200e940cdd255ae6043980124", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 44, "deletions": 13, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=5976674a717f61167a930df0c1fa1fe4106a439e", "patch": "@@ -240,24 +240,55 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 self.copy_op_transmute(args[0], dest)?;\n             }\n             \"simd_insert\" => {\n-                let mut vector = self.read_vector(args[0])?;\n-                let index = self.read_scalar(args[1])?.to_u32()? as usize;\n+                let index = self.read_scalar(args[1])?.to_u32()? as u64;\n                 let scalar = self.read_immediate(args[2])?;\n-                if vector[index].layout.size == scalar.layout.size {\n-                    vector[index] = scalar;\n-                } else {\n-                    throw_ub_format!(\n-                        \"Inserting `{}` with size `{}` to a vector element place of size `{}`\",\n-                        scalar.layout.ty,\n-                        scalar.layout.size.bytes(), vector[index].layout.size.bytes()\n-                    );\n+                let input = args[0];\n+                let (len, e_ty) = self.read_vector_ty(input);\n+                assert!(\n+                    index < len,\n+                    \"index `{}` must be in bounds of vector type `{}`: `[0, {})`\",\n+                    index, e_ty, len\n+                );\n+                assert_eq!(\n+                    args[0].layout, dest.layout,\n+                    \"Return type `{}` must match vector type `{}`\",\n+                    dest.layout.ty, input.layout.ty\n+                );\n+                assert_eq!(\n+                    scalar.layout.ty, e_ty,\n+                    \"Scalar type `{}` must match vector element type `{}`\",\n+                    scalar.layout.ty, e_ty\n+                );\n+\n+                for i in 0..len {\n+                    let place = self.place_field(dest, index)?;\n+                    if i == index {\n+                        self.write_immediate(*scalar, place)?;\n+                    } else {\n+                        self.write_immediate(\n+                            *self.read_immediate(self.operand_field(input, index)?)?,\n+                            place\n+                        )?;\n+                    };\n                 }\n-                self.write_vector(vector, dest)?;\n             }\n             \"simd_extract\" => {\n                 let index = self.read_scalar(args[1])?.to_u32()? as _;\n-                let scalar = self.read_immediate(self.operand_field(args[0], index)?)?;\n-                self.write_immediate(*scalar, dest)?;\n+                let (len, e_ty) = self.read_vector_ty(args[0]);\n+                assert!(\n+                    index < len,\n+                    \"index `{}` must be in bounds of vector type `{}`: `[0, {})`\",\n+                    index, e_ty, len\n+                );\n+                assert_eq!(\n+                    e_ty, dest.layout.ty,\n+                    \"Return type `{}` must match vector element type `{}`\",\n+                    dest.layout.ty, e_ty\n+                );\n+                self.write_immediate(\n+                    *self.read_immediate(self.operand_field(args[0], index)?)?,\n+                    dest\n+                )?;\n             }\n             _ => return Ok(false),\n         }"}, {"sha": "c5771e4f34378125768fa932525f704ceb8336c3", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=5976674a717f61167a930df0c1fa1fe4106a439e", "patch": "@@ -335,18 +335,15 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         }\n     }\n \n-    /// Read vector from operand `op`\n-    pub fn read_vector(&self, op: OpTy<'tcx, M::PointerTag>)\n-                       -> InterpResult<'tcx, Vec<ImmTy<'tcx, M::PointerTag>>> {\n-        if let layout::Abi::Vector { count, .. } = op.layout.abi {\n-            assert_ne!(count, 0);\n-            let mut scalars = Vec::new();\n-            for index in 0..count {\n-                scalars.push(self.read_immediate(self.operand_field(op, index as _)?)?);\n-            }\n-            Ok(scalars)\n+    /// Read vector length and element type\n+    pub fn read_vector_ty(\n+        &self, op: OpTy<'tcx, M::PointerTag>\n+    )\n+        -> (u64, &rustc::ty::TyS<'tcx>) {\n+        if let layout::Abi::Vector { .. } = op.layout.abi {\n+            (op.layout.ty.simd_size(*self.tcx) as _, op.layout.ty.simd_type(*self.tcx))\n         } else {\n-            bug!(\"type is not a vector: {:?}, abi: {:?}\", op.layout.ty, op.layout.abi);\n+            bug!(\"Type `{}` is not a SIMD vector type\", op.layout.ty)\n         }\n     }\n "}, {"sha": "c3660fb7a2e28ffe07758838cbd994fb904ece10", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=5976674a717f61167a930df0c1fa1fe4106a439e", "patch": "@@ -696,40 +696,6 @@ where\n         Ok(())\n     }\n \n-    /// Writes the `scalar` to the `index`-th element of the `vector`.\n-    pub fn write_scalar_to_vector(\n-        &mut self,\n-        scalar: ImmTy<'tcx, M::PointerTag>,\n-        vector: PlaceTy<'tcx, M::PointerTag>,\n-        index: usize,\n-    ) -> InterpResult<'tcx> {\n-        let index = index as u64;\n-        let place = self.place_field(vector, index)?;\n-        self.write_immediate(*scalar, place)?;\n-        Ok(())\n-    }\n-\n-    /// Writes the `scalars` to the `vector`.\n-    pub fn write_vector(\n-        &mut self,\n-        scalars: Vec<ImmTy<'tcx, M::PointerTag>>,\n-        vector: PlaceTy<'tcx, M::PointerTag>,\n-    ) -> InterpResult<'tcx> {\n-        assert_ne!(scalars.len(), 0);\n-        match vector.layout.ty.sty {\n-            ty::Adt(def, ..) if def.repr.simd() => {\n-                let tcx = &*self.tcx;\n-                let count = vector.layout.ty.simd_size(*tcx);\n-                assert_eq!(count, scalars.len());\n-                for index in 0..scalars.len() {\n-                    self.write_scalar_to_vector(scalars[index], vector, index)?;\n-                }\n-            }\n-            _ => bug!(\"not a vector\"),\n-        }\n-        Ok(())\n-    }\n-\n     /// Write an `Immediate` to memory.\n     #[inline(always)]\n     pub fn write_immediate_to_mplace("}, {"sha": "1d1df8d25a406e285f355bdfa6447e3e7a6338fa", "filename": "src/test/ui/consts/const-eval/simd/insert_extract-fail.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract-fail.rs?ref=5976674a717f61167a930df0c1fa1fe4106a439e", "patch": "@@ -7,14 +7,21 @@\n \n extern \"platform-intrinsic\" {\n     fn simd_insert<T, U>(x: T, idx: u32, val: U) -> T;\n+    fn simd_extract<T, U>(x: T, idx: u32) -> U;\n }\n \n const fn foo(x: i8x1) -> i8 {\n     // 42 is a i16 that does not fit in a i8\n     unsafe { simd_insert(x, 0_u32, 42_i16) }.0  //~ ERROR\n }\n \n+const fn bar(x: i8x1) -> i16 {\n+    // the i8 is not a i16:\n+    unsafe { simd_extract(x, 0_u32) }  //~ ERROR\n+}\n+\n fn main() {\n     const V: i8x1 = i8x1(13);\n     const X: i8 = foo(V);\n+    const Y: i16 = bar(V);\n }"}, {"sha": "c5109c16e4c6dcd570fdb12ef6b2c43836f4be62", "filename": "src/test/ui/consts/const-eval/simd/read_fail.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fread_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5976674a717f61167a930df0c1fa1fe4106a439e/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fread_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Fread_fail.rs?ref=5976674a717f61167a930df0c1fa1fe4106a439e", "patch": "@@ -0,0 +1,17 @@\n+#![feature(const_fn)]\n+#![feature(platform_intrinsics)]\n+#![allow(non_camel_case_types)]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_extract<T, U>(x: T, idx: u32) -> U;\n+}\n+\n+const fn foo(x: i8) -> i8 {\n+    // i8 is not a vector type:\n+    unsafe { simd_extract(x, 0_u32) }  //~ ERROR\n+}\n+\n+fn main() {\n+    const V: i8 = 13;\n+    const X: i8 = foo(V);\n+}"}]}