{"sha": "3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNmM0ZmU0NjViY2I4YzQ3YTZiNjUzMGQ3Njg3YTE5ZTc4YjJmNDE=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-10-24T11:04:52Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-10-24T13:24:37Z"}, "message": "BTreeMap: stop mistaking node::MIN_LEN as a node level constraint", "tree": {"sha": "173d70c5023bfbec35293630ec094c64994ddc27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/173d70c5023bfbec35293630ec094c64994ddc27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41", "html_url": "https://github.com/rust-lang/rust/commit/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e8a54af60df63034e41359acfc923e5c5769a91", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e8a54af60df63034e41359acfc923e5c5769a91", "html_url": "https://github.com/rust-lang/rust/commit/2e8a54af60df63034e41359acfc923e5c5769a91"}], "stats": {"total": 110, "additions": 55, "deletions": 55}, "files": [{"sha": "4f9aa44b6b510b78d7dbc9ebaf5f0a998d3f7a1b", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41", "patch": "@@ -17,6 +17,10 @@ mod entry;\n pub use entry::{Entry, OccupiedEntry, VacantEntry};\n use Entry::*;\n \n+/// Minimum number of elements in nodes that are not a root.\n+/// We might temporarily have fewer elements during methods.\n+pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n+\n /// A map based on a B-Tree.\n ///\n /// B-Trees represent a fundamental compromise between cache-efficiency and actually minimizing\n@@ -1094,13 +1098,13 @@ impl<K: Ord, V> BTreeMap<K, V> {\n             // Check if right-most child is underfull.\n             let mut last_edge = internal.last_edge();\n             let right_child_len = last_edge.reborrow().descend().len();\n-            if right_child_len < node::MIN_LEN {\n+            if right_child_len < MIN_LEN {\n                 // We need to steal.\n                 let mut last_kv = match last_edge.left_kv() {\n                     Ok(left) => left,\n                     Err(_) => unreachable!(),\n                 };\n-                last_kv.bulk_steal_left(node::MIN_LEN - right_child_len);\n+                last_kv.bulk_steal_left(MIN_LEN - right_child_len);\n                 last_edge = last_kv.right_edge();\n             }\n "}, {"sha": "adb94972f5bb63de616f644fe79aaac7d564d2dd", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41", "patch": "@@ -50,10 +50,15 @@ impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n     {\n         if let Some(root) = &self.root {\n             let root_node = root.node_as_ref();\n+\n             assert!(root_node.ascend().is_err());\n             root_node.assert_back_pointers();\n-            root_node.assert_ascending();\n-            assert_eq!(self.length, root_node.assert_and_add_lengths());\n+\n+            let counted = root_node.assert_ascending();\n+            assert_eq!(self.length, counted);\n+            assert_eq!(self.length, root_node.calc_length());\n+\n+            root_node.assert_min_len(if root_node.height() > 0 { 1 } else { 0 });\n         } else {\n             assert_eq!(self.length, 0);\n         }\n@@ -76,6 +81,18 @@ impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n     }\n }\n \n+impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal> {\n+    pub fn assert_min_len(self, min_len: usize) {\n+        assert!(self.len() >= min_len, \"{} < {}\", self.len(), min_len);\n+        if let node::ForceResult::Internal(node) = self.force() {\n+            for idx in 0..=node.len() {\n+                let edge = unsafe { Handle::new_edge(node, idx) };\n+                edge.descend().assert_min_len(MIN_LEN);\n+            }\n+        }\n+    }\n+}\n+\n // Test our value of MIN_INSERTS_HEIGHT_2. It may change according to the\n // implementation of insertion, but it's best to be aware of when it does.\n #[test]"}, {"sha": "f5aff9bf494e9d0ca4f6adb95cedf5f656e6dec0", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41", "patch": "@@ -38,8 +38,8 @@ use crate::alloc::{AllocRef, Global, Layout};\n use crate::boxed::Box;\n \n const B: usize = 6;\n-pub const MIN_LEN: usize = B - 1;\n pub const CAPACITY: usize = 2 * B - 1;\n+pub const MIN_LEN_AFTER_SPLIT: usize = B - 1;\n const KV_IDX_CENTER: usize = B - 1;\n const EDGE_IDX_LEFT_OF_CENTER: usize = B - 1;\n const EDGE_IDX_RIGHT_OF_CENTER: usize = B;"}, {"sha": "d6527057c5d772f9789f20d9fb53474d8cad8f7d", "filename": "library/alloc/src/collections/btree/node/tests.rs", "status": "modified", "additions": 16, "deletions": 40, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs?ref=3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41", "patch": "@@ -5,25 +5,26 @@ use crate::string::String;\n use core::cmp::Ordering::*;\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal> {\n+    /// Asserts that the back pointer in each reachable node points to its parent.\n     pub fn assert_back_pointers(self) {\n-        match self.force() {\n-            ForceResult::Leaf(_) => {}\n-            ForceResult::Internal(node) => {\n-                for idx in 0..=node.len() {\n-                    let edge = unsafe { Handle::new_edge(node, idx) };\n-                    let child = edge.descend();\n-                    assert!(child.ascend().ok() == Some(edge));\n-                    child.assert_back_pointers();\n-                }\n+        if let ForceResult::Internal(node) = self.force() {\n+            for idx in 0..=node.len() {\n+                let edge = unsafe { Handle::new_edge(node, idx) };\n+                let child = edge.descend();\n+                assert!(child.ascend().ok() == Some(edge));\n+                child.assert_back_pointers();\n             }\n         }\n     }\n \n-    pub fn assert_ascending(self)\n+    /// Asserts that the keys are in strictly ascending order.\n+    /// Returns how many keys it encountered.\n+    pub fn assert_ascending(self) -> usize\n     where\n         K: Copy + Debug + Ord,\n     {\n         struct SeriesChecker<T> {\n+            num_seen: usize,\n             previous: Option<T>,\n         }\n         impl<T: Copy + Debug + Ord> SeriesChecker<T> {\n@@ -32,10 +33,11 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>\n                     assert!(previous < next, \"{:?} >= {:?}\", previous, next);\n                 }\n                 self.previous = Some(next);\n+                self.num_seen += 1;\n             }\n         }\n \n-        let mut checker = SeriesChecker { previous: None };\n+        let mut checker = SeriesChecker { num_seen: 0, previous: None };\n         self.visit_nodes_in_order(|pos| match pos {\n             navigate::Position::Leaf(node) => {\n                 for idx in 0..node.len() {\n@@ -49,33 +51,7 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>\n             }\n             navigate::Position::Internal(_) => {}\n         });\n-    }\n-\n-    pub fn assert_and_add_lengths(self) -> usize {\n-        let mut internal_length = 0;\n-        let mut internal_kv_count = 0;\n-        let mut leaf_length = 0;\n-        self.visit_nodes_in_order(|pos| match pos {\n-            navigate::Position::Leaf(node) => {\n-                let is_root = self.height() == 0;\n-                let min_len = if is_root { 0 } else { MIN_LEN };\n-                assert!(node.len() >= min_len, \"{} < {}\", node.len(), min_len);\n-                leaf_length += node.len();\n-            }\n-            navigate::Position::Internal(node) => {\n-                let is_root = self.height() == node.height();\n-                let min_len = if is_root { 1 } else { MIN_LEN };\n-                assert!(node.len() >= min_len, \"{} < {}\", node.len(), min_len);\n-                internal_length += node.len();\n-            }\n-            navigate::Position::InternalKV(_) => {\n-                internal_kv_count += 1;\n-            }\n-        });\n-        assert_eq!(internal_length, internal_kv_count);\n-        let total = internal_length + leaf_length;\n-        assert_eq!(self.calc_length(), total);\n-        total\n+        checker.num_seen\n     }\n \n     pub fn dump_keys(self) -> String\n@@ -124,8 +100,8 @@ fn test_splitpoint() {\n                 right_len += 1;\n             }\n         }\n-        assert!(left_len >= MIN_LEN);\n-        assert!(right_len >= MIN_LEN);\n+        assert!(left_len >= MIN_LEN_AFTER_SPLIT);\n+        assert!(right_len >= MIN_LEN_AFTER_SPLIT);\n         assert!(left_len + right_len == CAPACITY);\n     }\n }"}, {"sha": "99655d3e2bf64f35c2bc0f52b1427f7e81b92fa1", "filename": "library/alloc/src/collections/btree/remove.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fremove.rs?ref=3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41", "patch": "@@ -1,4 +1,5 @@\n-use super::node::{self, marker, ForceResult, Handle, NodeRef};\n+use super::map::MIN_LEN;\n+use super::node::{marker, ForceResult, Handle, NodeRef};\n use super::unwrap_unchecked;\n use core::mem;\n use core::ptr;\n@@ -40,7 +41,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::LeafOrInter\n         // Handle underflow\n         let mut cur_node = unsafe { ptr::read(&pos).into_node().forget_type() };\n         let mut at_leaf = true;\n-        while cur_node.len() < node::MIN_LEN {\n+        while cur_node.len() < MIN_LEN {\n             match handle_underfull_node(cur_node) {\n                 UnderflowResult::AtRoot => break,\n                 UnderflowResult::Merged(edge, merged_with_left, offset) => {"}, {"sha": "5f00a5a25abad5bf2a091c8f9ea024b6e304a713", "filename": "library/alloc/src/collections/btree/split.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fsplit.rs?ref=3b6c4fe465bcb8c47a6b6530d7687a19e78b2f41", "patch": "@@ -1,5 +1,6 @@\n-use super::node::{self, ForceResult::*, Root};\n-use super::search::{self, SearchResult::*};\n+use super::map::MIN_LEN;\n+use super::node::{ForceResult::*, Root};\n+use super::search::{search_node, SearchResult::*};\n use core::borrow::Borrow;\n \n impl<K, V> Root<K, V> {\n@@ -20,7 +21,7 @@ impl<K, V> Root<K, V> {\n             let mut right_node = right_root.node_as_mut();\n \n             loop {\n-                let mut split_edge = match search::search_node(left_node, key) {\n+                let mut split_edge = match search_node(left_node, key) {\n                     // key is going to the right tree\n                     Found(handle) => handle.left_edge(),\n                     GoDown(handle) => handle,\n@@ -65,9 +66,9 @@ impl<K, V> Root<K, V> {\n                     cur_node = last_kv.merge().descend();\n                 } else {\n                     let right_len = last_kv.reborrow().right_edge().descend().len();\n-                    // `MINLEN + 1` to avoid readjust if merge happens on the next level.\n-                    if right_len < node::MIN_LEN + 1 {\n-                        last_kv.bulk_steal_left(node::MIN_LEN + 1 - right_len);\n+                    // `MIN_LEN + 1` to avoid readjust if merge happens on the next level.\n+                    if right_len < MIN_LEN + 1 {\n+                        last_kv.bulk_steal_left(MIN_LEN + 1 - right_len);\n                     }\n                     cur_node = last_kv.right_edge().descend();\n                 }\n@@ -91,8 +92,9 @@ impl<K, V> Root<K, V> {\n                     cur_node = first_kv.merge().descend();\n                 } else {\n                     let left_len = first_kv.reborrow().left_edge().descend().len();\n-                    if left_len < node::MIN_LEN + 1 {\n-                        first_kv.bulk_steal_right(node::MIN_LEN + 1 - left_len);\n+                    // `MIN_LEN + 1` to avoid readjust if merge happens on the next level.\n+                    if left_len < MIN_LEN + 1 {\n+                        first_kv.bulk_steal_right(MIN_LEN + 1 - left_len);\n                     }\n                     cur_node = first_kv.left_edge().descend();\n                 }"}]}