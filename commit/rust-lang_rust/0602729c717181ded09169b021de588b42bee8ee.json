{"sha": "0602729c717181ded09169b021de588b42bee8ee", "node_id": "C_kwDOAAsO6NoAKDA2MDI3MjljNzE3MTgxZGVkMDkxNjliMDIxZGU1ODhiNDJiZWU4ZWU", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-28T08:59:30Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-06-30T07:59:21Z"}, "message": "lint: port atomic ordering diagnostics\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "bce63720494833ac9f60b0d5ca95b2098cc33841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bce63720494833ac9f60b0d5ca95b2098cc33841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0602729c717181ded09169b021de588b42bee8ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0602729c717181ded09169b021de588b42bee8ee", "html_url": "https://github.com/rust-lang/rust/commit/0602729c717181ded09169b021de588b42bee8ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0602729c717181ded09169b021de588b42bee8ee/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c3016583a0aad3e7a7dd87b2a13807b420b4e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c3016583a0aad3e7a7dd87b2a13807b420b4e7", "html_url": "https://github.com/rust-lang/rust/commit/14c3016583a0aad3e7a7dd87b2a13807b420b4e7"}], "stats": {"total": 68, "additions": 43, "deletions": 25}, "files": [{"sha": "80e8723312e08c10dc75a502d2b5f6944789c2b1", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0602729c717181ded09169b021de588b42bee8ee/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0602729c717181ded09169b021de588b42bee8ee/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=0602729c717181ded09169b021de588b42bee8ee", "patch": "@@ -233,3 +233,21 @@ lint-improper-ctypes-only-phantomdata = composed only of `PhantomData`\n \n lint-variant-size-differences =\n     enum variant is more than three times larger ({$largest} bytes) than the next largest\n+\n+lint-atomic-ordering-load = atomic loads cannot have `Release` or `AcqRel` ordering\n+    .help = consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\n+\n+lint-atomic-ordering-store = atomic stores cannot have `Acquire` or `AcqRel` ordering\n+    .help = consider using ordering modes `Release`, `SeqCst` or `Relaxed`\n+\n+lint-atomic-ordering-fence = memory fences cannot have `Relaxed` ordering\n+    .help = consider using ordering modes `Acquire`, `Release`, `AcqRel` or `SeqCst`\n+\n+lint-atomic-ordering-invalid = `{$method}`'s failure ordering may not be `Release` or `AcqRel`, since a failed `{$method}` does not result in a write\n+    .label = invalid failure ordering\n+    .help = consider using `Acquire` or `Relaxed` failure ordering instead\n+\n+lint-atomic-ordering-invalid-fail-success = `{$method}`'s success ordering must be at least as strong as its failure ordering\n+    .fail-label = `{$fail_ordering}` failure ordering\n+    .success-label = `{$success_ordering}` success ordering\n+    .suggestion = consider using `{$success_suggestion}` success ordering instead"}, {"sha": "0056872ee44c30e27cebaffa46fc80a081991329", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/0602729c717181ded09169b021de588b42bee8ee/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0602729c717181ded09169b021de588b42bee8ee/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=0602729c717181ded09169b021de588b42bee8ee", "patch": "@@ -1512,13 +1512,13 @@ impl InvalidAtomicOrdering {\n         {\n             cx.struct_span_lint(INVALID_ATOMIC_ORDERING, ordering_arg.span, |diag| {\n                 if method == sym::load {\n-                    diag.build(\"atomic loads cannot have `Release` or `AcqRel` ordering\")\n-                        .help(\"consider using ordering modes `Acquire`, `SeqCst` or `Relaxed`\")\n+                    diag.build(fluent::lint::atomic_ordering_load)\n+                        .help(fluent::lint::help)\n                         .emit()\n                 } else {\n                     debug_assert_eq!(method, sym::store);\n-                    diag.build(\"atomic stores cannot have `Acquire` or `AcqRel` ordering\")\n-                        .help(\"consider using ordering modes `Release`, `SeqCst` or `Relaxed`\")\n+                    diag.build(fluent::lint::atomic_ordering_store)\n+                        .help(fluent::lint::help)\n                         .emit();\n                 }\n             });\n@@ -1533,8 +1533,8 @@ impl InvalidAtomicOrdering {\n             && Self::match_ordering(cx, &args[0]) == Some(sym::Relaxed)\n         {\n             cx.struct_span_lint(INVALID_ATOMIC_ORDERING, args[0].span, |diag| {\n-                diag.build(\"memory fences cannot have `Relaxed` ordering\")\n-                    .help(\"consider using ordering modes `Acquire`, `Release`, `AcqRel` or `SeqCst`\")\n+                diag.build(fluent::lint::atomic_ordering_fence)\n+                    .help(fluent::lint::help)\n                     .emit();\n             });\n         }\n@@ -1554,13 +1554,11 @@ impl InvalidAtomicOrdering {\n \n         if matches!(fail_ordering, sym::Release | sym::AcqRel) {\n             cx.struct_span_lint(INVALID_ATOMIC_ORDERING, fail_order_arg.span, |diag| {\n-                diag.build(&format!(\n-                    \"`{method}`'s failure ordering may not be `Release` or `AcqRel`, \\\n-                    since a failed `{method}` does not result in a write\",\n-                ))\n-                .span_label(fail_order_arg.span, \"invalid failure ordering\")\n-                .help(\"consider using `Acquire` or `Relaxed` failure ordering instead\")\n-                .emit();\n+                diag.build(fluent::lint::atomic_ordering_invalid)\n+                    .set_arg(\"method\", method)\n+                    .span_label(fail_order_arg.span, fluent::lint::label)\n+                    .help(fluent::lint::help)\n+                    .emit();\n             });\n         }\n \n@@ -1578,18 +1576,20 @@ impl InvalidAtomicOrdering {\n                     fail_ordering\n                 };\n             cx.struct_span_lint(INVALID_ATOMIC_ORDERING, success_order_arg.span, |diag| {\n-                diag.build(&format!(\n-                    \"`{method}`'s success ordering must be at least as strong as its failure ordering\"\n-                ))\n-                .span_label(fail_order_arg.span, format!(\"`{fail_ordering}` failure ordering\"))\n-                .span_label(success_order_arg.span, format!(\"`{success_ordering}` success ordering\"))\n-                .span_suggestion_short(\n-                    success_order_arg.span,\n-                    format!(\"consider using `{success_suggestion}` success ordering instead\"),\n-                    format!(\"std::sync::atomic::Ordering::{success_suggestion}\"),\n-                    Applicability::MaybeIncorrect,\n-                )\n-                .emit();\n+                diag.build(fluent::lint::atomic_ordering_invalid_fail_success)\n+                    .set_arg(\"method\", method)\n+                    .set_arg(\"fail_ordering\", fail_ordering)\n+                    .set_arg(\"success_ordering\", success_ordering)\n+                    .set_arg(\"success_suggestion\", success_suggestion)\n+                    .span_label(fail_order_arg.span, fluent::lint::fail_label)\n+                    .span_label(success_order_arg.span, fluent::lint::success_label)\n+                    .span_suggestion_short(\n+                        success_order_arg.span,\n+                        fluent::lint::suggestion,\n+                        format!(\"std::sync::atomic::Ordering::{success_suggestion}\"),\n+                        Applicability::MaybeIncorrect,\n+                    )\n+                    .emit();\n             });\n         }\n     }"}]}