{"sha": "f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5", "node_id": "C_kwDOAAsO6NoAKGY3ZDhmNWIxZTE5ZjBmOGNiNDVmODA4NWFiM2EzOTMzMzU5YWE0ZDU", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-19T20:57:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-19T20:57:42Z"}, "message": "Rollup merge of #96162 - RalfJung:mark-uninit, r=oli-obk\n\ninterpret: Fix writing uninit to an allocation\n\nWhen calling `mark_init`, we need to also be mindful of what happens with the relocations! Specifically, when we de-init memory, we need to clear relocations in that range as well or else strange things will happen (and printing will not show the de-init, since relocations take precedence there).\n\nFixes https://github.com/rust-lang/miri/issues/2068.\n\nHere's the Miri testcase that this fixes (requires `-Zmiri-disable-validation`):\n```rust\nuse std::mem::MaybeUninit;\n\nfn main() { unsafe {\n    let mut x = MaybeUninit::<i64>::uninit();\n    // Put in a ptr.\n    x.as_mut_ptr().cast::<&i32>().write_unaligned(&0);\n    // Overwrite parts of that pointer with 'uninit' through a Scalar.\n    let ptr = x.as_mut_ptr().cast::<i32>();\n    *ptr = MaybeUninit::uninit().assume_init();\n    // Reading this back should hence work fine.\n    let _c = *ptr;\n} }\n```\nPreviously this failed with\n```\nerror: unsupported operation: unable to turn pointer into raw bytes\n  --> ../miri/uninit.rs:11:14\n   |\n11 |     let _c = *ptr;\n   |              ^^^^ unable to turn pointer into raw bytes\n   |\n   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n\n   = note: inside `main` at ../miri/uninit.rs:11:14\n```", "tree": {"sha": "588e9c8e8baa8ef27a7b281481791050f891e614", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/588e9c8e8baa8ef27a7b281481791050f891e614"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiXyJGCRBK7hj4Ov3rIwAAiXsIABdZPh7qY8tbo7TKSxGqQfMH\npbFZsWhfgSWj/QZ9FdN8m5Mzx6W7ooExEaYR00BA+jc5HZ1Fnkw4IYbTtWiE0gku\nOqR++9TQLXTdsz3k9DUBxmMS8BMecGxwiDxStFlpQNDq1+6qo3AJgRKpOCGkijWl\n22acmJjkwkxWyu/fI0Gln5fcPy1zC+16MDwaEWWpR4Yas9aRGI7MPW7VYwodTnjD\nKrsmwKAf2GyqM+MpSuU/K7oIVnm0KA4SuGZHcsPK54dJxzQCIwZO82HPVO3vzpXT\nbWOG5JHTEWpDCY5pOno8gTtMrfiwGNhWB3JBQGzGXJysEAfUs6WYf0rJIctI9vs=\n=aI5h\n-----END PGP SIGNATURE-----\n", "payload": "tree 588e9c8e8baa8ef27a7b281481791050f891e614\nparent 113f079a97ac3a1ab2fabbae274508cbcb248060\nparent 05489e7ec8ee4cdf83b819dac3de83ef6515c98a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1650401862 +0200\ncommitter GitHub <noreply@github.com> 1650401862 +0200\n\nRollup merge of #96162 - RalfJung:mark-uninit, r=oli-obk\n\ninterpret: Fix writing uninit to an allocation\n\nWhen calling `mark_init`, we need to also be mindful of what happens with the relocations! Specifically, when we de-init memory, we need to clear relocations in that range as well or else strange things will happen (and printing will not show the de-init, since relocations take precedence there).\n\nFixes https://github.com/rust-lang/miri/issues/2068.\n\nHere's the Miri testcase that this fixes (requires `-Zmiri-disable-validation`):\n```rust\nuse std::mem::MaybeUninit;\n\nfn main() { unsafe {\n    let mut x = MaybeUninit::<i64>::uninit();\n    // Put in a ptr.\n    x.as_mut_ptr().cast::<&i32>().write_unaligned(&0);\n    // Overwrite parts of that pointer with 'uninit' through a Scalar.\n    let ptr = x.as_mut_ptr().cast::<i32>();\n    *ptr = MaybeUninit::uninit().assume_init();\n    // Reading this back should hence work fine.\n    let _c = *ptr;\n} }\n```\nPreviously this failed with\n```\nerror: unsupported operation: unable to turn pointer into raw bytes\n  --> ../miri/uninit.rs:11:14\n   |\n11 |     let _c = *ptr;\n   |              ^^^^ unable to turn pointer into raw bytes\n   |\n   = help: this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\n\n   = note: inside `main` at ../miri/uninit.rs:11:14\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5", "html_url": "https://github.com/rust-lang/rust/commit/f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "113f079a97ac3a1ab2fabbae274508cbcb248060", "url": "https://api.github.com/repos/rust-lang/rust/commits/113f079a97ac3a1ab2fabbae274508cbcb248060", "html_url": "https://github.com/rust-lang/rust/commit/113f079a97ac3a1ab2fabbae274508cbcb248060"}, {"sha": "05489e7ec8ee4cdf83b819dac3de83ef6515c98a", "url": "https://api.github.com/repos/rust-lang/rust/commits/05489e7ec8ee4cdf83b819dac3de83ef6515c98a", "html_url": "https://github.com/rust-lang/rust/commit/05489e7ec8ee4cdf83b819dac3de83ef6515c98a"}], "stats": {"total": 51, "additions": 38, "deletions": 13}, "files": [{"sha": "9ae50d0df80d7aea63a815a8eafe3cd3c2ca2525", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5", "patch": "@@ -892,8 +892,11 @@ impl<'tcx, 'a, Tag: Provenance, Extra> AllocRefMut<'a, 'tcx, Tag, Extra> {\n     }\n \n     /// Mark the entire referenced range as uninitalized\n-    pub fn write_uninit(&mut self) {\n-        self.alloc.mark_init(self.range, false);\n+    pub fn write_uninit(&mut self) -> InterpResult<'tcx> {\n+        Ok(self\n+            .alloc\n+            .write_uninit(&self.tcx, self.range)\n+            .map_err(|e| e.to_interp_error(self.alloc_id))?)\n     }\n }\n \n@@ -1053,8 +1056,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // This also avoids writing to the target bytes so that the backing allocation is never\n             // touched if the bytes stay uninitialized for the whole interpreter execution. On contemporary\n             // operating system this can avoid physically allocating the page.\n-            dest_alloc.mark_init(dest_range, false); // `Size` multiplication\n-            dest_alloc.mark_relocation_range(relocations);\n+            dest_alloc\n+                .write_uninit(&tcx, dest_range)\n+                .map_err(|e| e.to_interp_error(dest_alloc_id))?;\n+            // We can forget about the relocations, this is all not initialized anyway.\n             return Ok(());\n         }\n "}, {"sha": "e4660fe090ce5fb4900d9c350908103866906a1d", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5", "patch": "@@ -823,7 +823,7 @@ where\n             // Zero-sized access\n             return Ok(());\n         };\n-        alloc.write_uninit();\n+        alloc.write_uninit()?;\n         Ok(())\n     }\n "}, {"sha": "7723f7a64f7691e0bcb53ad367560e9309a9d6cd", "filename": "compiler/rustc_middle/src/mir/interpret/allocation.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation.rs?ref=f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5", "patch": "@@ -269,7 +269,7 @@ impl<Tag: Provenance, Extra> Allocation<Tag, Extra> {\n     /// `get_bytes_with_uninit_and_ptr` instead,\n     ///\n     /// This function also guarantees that the resulting pointer will remain stable\n-    /// even when new allocations are pushed to the `HashMap`. `copy_repeatedly` relies\n+    /// even when new allocations are pushed to the `HashMap`. `mem_copy_repeatedly` relies\n     /// on that.\n     ///\n     /// It is the caller's responsibility to check bounds and alignment beforehand.\n@@ -429,8 +429,7 @@ impl<Tag: Provenance, Extra> Allocation<Tag, Extra> {\n         let val = match val {\n             ScalarMaybeUninit::Scalar(scalar) => scalar,\n             ScalarMaybeUninit::Uninit => {\n-                self.mark_init(range, false);\n-                return Ok(());\n+                return self.write_uninit(cx, range);\n             }\n         };\n \n@@ -455,6 +454,13 @@ impl<Tag: Provenance, Extra> Allocation<Tag, Extra> {\n \n         Ok(())\n     }\n+\n+    /// Write \"uninit\" to the given memory range.\n+    pub fn write_uninit(&mut self, cx: &impl HasDataLayout, range: AllocRange) -> AllocResult {\n+        self.mark_init(range, false);\n+        self.clear_relocations(cx, range)?;\n+        return Ok(());\n+    }\n }\n \n /// Relocations.\n@@ -561,8 +567,10 @@ impl<Tag> Deref for Relocations<Tag> {\n }\n \n /// A partial, owned list of relocations to transfer into another allocation.\n+///\n+/// Offsets are already adjusted to the destination allocation.\n pub struct AllocationRelocations<Tag> {\n-    relative_relocations: Vec<(Size, Tag)>,\n+    dest_relocations: Vec<(Size, Tag)>,\n }\n \n impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n@@ -575,12 +583,17 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n     ) -> AllocationRelocations<Tag> {\n         let relocations = self.get_relocations(cx, src);\n         if relocations.is_empty() {\n-            return AllocationRelocations { relative_relocations: Vec::new() };\n+            return AllocationRelocations { dest_relocations: Vec::new() };\n         }\n \n         let size = src.size;\n         let mut new_relocations = Vec::with_capacity(relocations.len() * (count as usize));\n \n+        // If `count` is large, this is rather wasteful -- we are allocating a big array here, which\n+        // is mostly filled with redundant information since it's just N copies of the same `Tag`s\n+        // at slightly adjusted offsets. The reason we do this is so that in `mark_relocation_range`\n+        // we can use `insert_presorted`. That wouldn't work with an `Iterator` that just produces\n+        // the right sequence of relocations for all N copies.\n         for i in 0..count {\n             new_relocations.extend(relocations.iter().map(|&(offset, reloc)| {\n                 // compute offset for current repetition\n@@ -593,14 +606,17 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n             }));\n         }\n \n-        AllocationRelocations { relative_relocations: new_relocations }\n+        AllocationRelocations { dest_relocations: new_relocations }\n     }\n \n     /// Applies a relocation copy.\n     /// The affected range, as defined in the parameters to `prepare_relocation_copy` is expected\n     /// to be clear of relocations.\n+    ///\n+    /// This is dangerous to use as it can violate internal `Allocation` invariants!\n+    /// It only exists to support an efficient implementation of `mem_copy_repeatedly`.\n     pub fn mark_relocation_range(&mut self, relocations: AllocationRelocations<Tag>) {\n-        self.relocations.0.insert_presorted(relocations.relative_relocations);\n+        self.relocations.0.insert_presorted(relocations.dest_relocations);\n     }\n }\n \n@@ -1056,7 +1072,7 @@ impl<Tag: Copy, Extra> Allocation<Tag, Extra> {\n         })\n     }\n \n-    pub fn mark_init(&mut self, range: AllocRange, is_init: bool) {\n+    fn mark_init(&mut self, range: AllocRange, is_init: bool) {\n         if range.size.bytes() == 0 {\n             return;\n         }\n@@ -1118,6 +1134,9 @@ impl<Tag, Extra> Allocation<Tag, Extra> {\n     }\n \n     /// Applies multiple instances of the run-length encoding to the initialization mask.\n+    ///\n+    /// This is dangerous to use as it can violate internal `Allocation` invariants!\n+    /// It only exists to support an efficient implementation of `mem_copy_repeatedly`.\n     pub fn mark_compressed_init_range(\n         &mut self,\n         defined: &InitMaskCompressed,"}, {"sha": "b7f695da544f1db26a260a1c26d2e3a63cf42b64", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=f7d8f5b1e19f0f8cb45f8085ab3a3933359aa4d5", "patch": "@@ -851,6 +851,7 @@ fn write_allocation_bytes<'tcx, Tag: Provenance, Extra>(\n         }\n         if let Some(&tag) = alloc.relocations().get(&i) {\n             // Memory with a relocation must be defined\n+            assert!(alloc.init_mask().is_range_initialized(i, i + ptr_size).is_ok());\n             let j = i.bytes_usize();\n             let offset = alloc\n                 .inspect_with_uninit_and_ptr_outside_interpreter(j..j + ptr_size.bytes_usize());"}]}