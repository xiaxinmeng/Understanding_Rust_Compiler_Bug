{"sha": "4bfb0453f537b2927574f29bdf90c9a22ea98add", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiZmIwNDUzZjUzN2IyOTI3NTc0ZjI5YmRmOTBjOWEyMmVhOThhZGQ=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-03-30T22:54:29Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-21T18:37:38Z"}, "message": "Give match arms an HirId and a Span", "tree": {"sha": "9b1cef2e6ae38d055ee3a31f2dee48c25264030e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b1cef2e6ae38d055ee3a31f2dee48c25264030e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bfb0453f537b2927574f29bdf90c9a22ea98add", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bfb0453f537b2927574f29bdf90c9a22ea98add", "html_url": "https://github.com/rust-lang/rust/commit/4bfb0453f537b2927574f29bdf90c9a22ea98add", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bfb0453f537b2927574f29bdf90c9a22ea98add/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "615c23f6ecc07e87501f2f52190e3fb08b50a17e", "url": "https://api.github.com/repos/rust-lang/rust/commits/615c23f6ecc07e87501f2f52190e3fb08b50a17e", "html_url": "https://github.com/rust-lang/rust/commit/615c23f6ecc07e87501f2f52190e3fb08b50a17e"}], "stats": {"total": 63, "additions": 53, "deletions": 10}, "files": [{"sha": "517c99f99efea1e257339c96ca398c644e1b68a5", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=4bfb0453f537b2927574f29bdf90c9a22ea98add", "patch": "@@ -1102,6 +1102,7 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n }\n \n pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) {\n+    visitor.visit_id(arm.hir_id);\n     walk_list!(visitor, visit_pat, &arm.pats);\n     if let Some(ref g) = arm.guard {\n         match g {"}, {"sha": "8dba7491bf5047046e85d34657890faccc6643df", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=4bfb0453f537b2927574f29bdf90c9a22ea98add", "patch": "@@ -1313,14 +1313,18 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn lower_arm(&mut self, arm: &Arm) -> hir::Arm {\n+        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n+\n         hir::Arm {\n+            hir_id,\n             attrs: self.lower_attrs(&arm.attrs),\n             pats: arm.pats.iter().map(|x| self.lower_pat(x)).collect(),\n             guard: match arm.guard {\n                 Some(Guard::If(ref x)) => Some(hir::Guard::If(P(self.lower_expr(x)))),\n                 _ => None,\n             },\n             body: P(self.lower_expr(&arm.body)),\n+            span: arm.span,\n         }\n     }\n \n@@ -5023,10 +5027,14 @@ impl<'a> LoweringContext<'a> {\n     // Helper methods for building HIR.\n \n     fn arm(&mut self, pats: hir::HirVec<P<hir::Pat>>, expr: P<hir::Expr>) -> hir::Arm {\n+        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n+\n         hir::Arm {\n+            hir_id,\n             attrs: hir_vec![],\n             pats,\n             guard: None,\n+            span: expr.span,\n             body: expr,\n         }\n     }"}, {"sha": "b5203f9ec1f72b030f68ce025ec7f68d3c273e06", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=4bfb0453f537b2927574f29bdf90c9a22ea98add", "patch": "@@ -430,6 +430,16 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n+    fn visit_arm(&mut self, arm: &'hir Arm) {\n+        let node = Node::Arm(arm);\n+\n+        self.insert(arm.span, arm.hir_id, node);\n+\n+        self.with_parent(arm.hir_id, |this| {\n+            intravisit::walk_arm(this, arm);\n+        });\n+    }\n+\n     fn visit_anon_const(&mut self, constant: &'hir AnonConst) {\n         self.insert(DUMMY_SP, constant.hir_id, Node::AnonConst(constant));\n "}, {"sha": "d8fe90d40481bb9154d8f84986a8669ed82d5744", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=4bfb0453f537b2927574f29bdf90c9a22ea98add", "patch": "@@ -373,6 +373,7 @@ impl<'hir> Map<'hir> {\n             Node::Pat(_) |\n             Node::Binding(_) |\n             Node::Local(_) |\n+            Node::Arm(_) |\n             Node::Lifetime(_) |\n             Node::Visibility(_) |\n             Node::Block(_) |\n@@ -1000,6 +1001,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::Field(ref f)) => Some(&f.attrs[..]),\n             Some(Node::Expr(ref e)) => Some(&*e.attrs),\n             Some(Node::Stmt(ref s)) => Some(s.node.attrs()),\n+            Some(Node::Arm(ref a)) => Some(&*a.attrs),\n             Some(Node::GenericParam(param)) => Some(&param.attrs[..]),\n             // Unit/tuple structs/variants take the attributes straight from\n             // the struct/variant definition.\n@@ -1073,6 +1075,7 @@ impl<'hir> Map<'hir> {\n             Some(Node::TraitRef(tr)) => tr.path.span,\n             Some(Node::Binding(pat)) => pat.span,\n             Some(Node::Pat(pat)) => pat.span,\n+            Some(Node::Arm(arm)) => arm.span,\n             Some(Node::Block(block)) => block.span,\n             Some(Node::Ctor(..)) => match self.find_by_hir_id(\n                 self.get_parent_node_by_hir_id(hir_id))\n@@ -1288,6 +1291,7 @@ impl<'a> print::State<'a> {\n             Node::TraitRef(a)     => self.print_trait_ref(&a),\n             Node::Binding(a)      |\n             Node::Pat(a)          => self.print_pat(&a),\n+            Node::Arm(a)          => self.print_arm(&a),\n             Node::Block(a)        => {\n                 use syntax::print::pprust::PrintState;\n \n@@ -1417,6 +1421,9 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n         Some(Node::Pat(_)) => {\n             format!(\"pat {}{}\", map.hir_to_pretty_string(id), id_str)\n         }\n+        Some(Node::Arm(_)) => {\n+            format!(\"arm {}{}\", map.hir_to_pretty_string(id), id_str)\n+        }\n         Some(Node::Block(_)) => {\n             format!(\"block {}{}\", map.hir_to_pretty_string(id), id_str)\n         }"}, {"sha": "08feea3ccce42ff80d87bde8af839daea1e2f68b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=4bfb0453f537b2927574f29bdf90c9a22ea98add", "patch": "@@ -1228,6 +1228,9 @@ pub struct Local {\n /// `<pats> (if <guard>) => <body>`.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct Arm {\n+    #[stable_hasher(ignore)]\n+    pub hir_id: HirId,\n+    pub span: Span,\n     pub attrs: HirVec<Attribute>,\n     /// Multiple patterns can be combined with `|`\n     pub pats: HirVec<P<Pat>>,\n@@ -2656,6 +2659,7 @@ pub enum Node<'hir> {\n     TraitRef(&'hir TraitRef),\n     Binding(&'hir Pat),\n     Pat(&'hir Pat),\n+    Arm(&'hir Arm),\n     Block(&'hir Block),\n     Local(&'hir Local),\n     MacroDef(&'hir MacroDef),"}, {"sha": "ef9fee5cab6947a1573530690b3a71f2447664ea", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=4bfb0453f537b2927574f29bdf90c9a22ea98add", "patch": "@@ -1862,7 +1862,7 @@ impl<'a> State<'a> {\n         self.ann.post(self, AnnNode::Pat(pat))\n     }\n \n-    fn print_arm(&mut self, arm: &hir::Arm) -> io::Result<()> {\n+    pub fn print_arm(&mut self, arm: &hir::Arm) -> io::Result<()> {\n         // I have no idea why this check is necessary, but here it\n         // is :(\n         if arm.attrs.is_empty() {"}, {"sha": "0088c97679c6666f13e1d05731a1cdf2ebfb3779", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=4bfb0453f537b2927574f29bdf90c9a22ea98add", "patch": "@@ -149,7 +149,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n     }\n \n     fn visit_arm(&mut self, a: &'v hir::Arm) {\n-        self.record(\"Arm\", Id::None, a);\n+        self.record(\"Arm\", Id::Node(a.hir_id), a);\n         hir_visit::walk_arm(self, a)\n     }\n "}, {"sha": "99b350b833274ddb78e68d0673bd3870ad155d43", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=4bfb0453f537b2927574f29bdf90c9a22ea98add", "patch": "@@ -781,14 +781,17 @@ https://doc.rust-lang.org/reference/types.html#trait-objects\");\n     fn maybe_get_coercion_reason(&self, hir_id: hir::HirId, span: Span) -> Option<(Span, String)> {\n         use hir::Node::{Block, Item, Local};\n \n-        let node = self.tcx.hir().get_by_hir_id(self.tcx.hir().get_parent_node_by_hir_id(\n-            self.tcx.hir().get_parent_node_by_hir_id(hir_id),\n-        ));\n+        let hir = self.tcx.hir();\n+        let arm_id = hir.get_parent_node_by_hir_id(hir_id);\n+        let match_id = hir.get_parent_node_by_hir_id(arm_id);\n+        let containing_id = hir.get_parent_node_by_hir_id(match_id);\n+\n+        let node = hir.get_by_hir_id(containing_id);\n         if let Block(block) = node {\n             // check that the body's parent is an fn\n-            let parent = self.tcx.hir().get_by_hir_id(\n-                self.tcx.hir().get_parent_node_by_hir_id(\n-                    self.tcx.hir().get_parent_node_by_hir_id(block.hir_id),\n+            let parent = hir.get_by_hir_id(\n+                hir.get_parent_node_by_hir_id(\n+                    hir.get_parent_node_by_hir_id(block.hir_id),\n                 ),\n             );\n             if let (Some(expr), Item(hir::Item {"}, {"sha": "e2c2c46abf6b25d21c2312d2945dc4f276f06d3a", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4bfb0453f537b2927574f29bdf90c9a22ea98add", "patch": "@@ -908,6 +908,7 @@ pub struct Arm {\n     pub pats: Vec<P<Pat>>,\n     pub guard: Option<Guard>,\n     pub body: P<Expr>,\n+    pub span: Span,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]"}, {"sha": "cb967a76822c9a2d0ace5cfbcfcd1840a0d1a4d9", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=4bfb0453f537b2927574f29bdf90c9a22ea98add", "patch": "@@ -890,12 +890,13 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         self.pat_tuple_struct(span, path, vec![pat])\n     }\n \n-    fn arm(&self, _span: Span, pats: Vec<P<ast::Pat>>, expr: P<ast::Expr>) -> ast::Arm {\n+    fn arm(&self, span: Span, pats: Vec<P<ast::Pat>>, expr: P<ast::Expr>) -> ast::Arm {\n         ast::Arm {\n             attrs: vec![],\n             pats,\n             guard: None,\n             body: expr,\n+            span,\n         }\n     }\n "}, {"sha": "cb21014ec764635c276521ff7c99c6a29d278ae4", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=4bfb0453f537b2927574f29bdf90c9a22ea98add", "patch": "@@ -392,11 +392,15 @@ pub fn noop_visit_use_tree<T: MutVisitor>(use_tree: &mut UseTree, vis: &mut T) {\n     vis.visit_span(span);\n }\n \n-pub fn noop_visit_arm<T: MutVisitor>(Arm { attrs, pats, guard, body }: &mut Arm, vis: &mut T) {\n+pub fn noop_visit_arm<T: MutVisitor>(\n+    Arm { attrs, pats, guard, body, span }: &mut Arm,\n+    vis: &mut T,\n+) {\n     visit_attrs(attrs, vis);\n     visit_vec(pats, |pat| vis.visit_pat(pat));\n     visit_opt(guard, |guard| vis.visit_guard(guard));\n     vis.visit_expr(body);\n+    vis.visit_span(span);\n }\n \n pub fn noop_visit_guard<T: MutVisitor>(g: &mut Guard, vis: &mut T) {"}, {"sha": "ba36783e11e95698a20828eacd99cb0ec186c904", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bfb0453f537b2927574f29bdf90c9a22ea98add/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4bfb0453f537b2927574f29bdf90c9a22ea98add", "patch": "@@ -3946,6 +3946,7 @@ impl<'a> Parser<'a> {\n \n     crate fn parse_arm(&mut self) -> PResult<'a, Arm> {\n         let attrs = self.parse_outer_attributes()?;\n+        let lo = self.span;\n         let pats = self.parse_pats()?;\n         let guard = if self.eat_keyword(keywords::If) {\n             Some(Guard::If(self.parse_expr()?))\n@@ -3965,6 +3966,8 @@ impl<'a> Parser<'a> {\n         let require_comma = classify::expr_requires_semi_to_be_stmt(&expr)\n             && self.token != token::CloseDelim(token::Brace);\n \n+        let hi = self.span;\n+\n         if require_comma {\n             let cm = self.sess.source_map();\n             self.expect_one_of(&[token::Comma], &[token::CloseDelim(token::Brace)])\n@@ -4008,6 +4011,7 @@ impl<'a> Parser<'a> {\n             pats,\n             guard,\n             body: expr,\n+            span: lo.to(hi),\n         })\n     }\n "}]}