{"sha": "e694b63cd147512ad5e73ff4f9bee057e0c27c19", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2OTRiNjNjZDE0NzUxMmFkNWU3M2ZmNGY5YmVlMDU3ZTBjMjdjMTk=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-04-03T13:29:31Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-25T08:07:01Z"}, "message": "Don't use `ty::Const` without immediately interning", "tree": {"sha": "bdf2dad3178352604ed4ea3d1f8b6923125c70e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdf2dad3178352604ed4ea3d1f8b6923125c70e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e694b63cd147512ad5e73ff4f9bee057e0c27c19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e694b63cd147512ad5e73ff4f9bee057e0c27c19", "html_url": "https://github.com/rust-lang/rust/commit/e694b63cd147512ad5e73ff4f9bee057e0c27c19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e694b63cd147512ad5e73ff4f9bee057e0c27c19/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d82107f16185987048fdf06dae59efe3cf60924", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d82107f16185987048fdf06dae59efe3cf60924", "html_url": "https://github.com/rust-lang/rust/commit/9d82107f16185987048fdf06dae59efe3cf60924"}], "stats": {"total": 296, "additions": 114, "deletions": 182}, "files": [{"sha": "9c2fd399ee029bf73e3cd3ad646e6347eb27c5e0", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -38,7 +38,7 @@ impl ErrorHandled {\n }\n \n pub type ConstEvalRawResult<'tcx> = Result<RawConst<'tcx>, ErrorHandled>;\n-pub type ConstEvalResult<'tcx> = Result<ty::Const<'tcx>, ErrorHandled>;\n+pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ErrorHandled>;\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ConstEvalErr<'tcx> {"}, {"sha": "84aff8101a09d99c3ed55111ba46572bc30ad713", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -1660,25 +1660,25 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 switch_ty,\n                 ..\n             } => {\n-                let size = ty::tls::with(|tcx| {\n+                ty::tls::with(|tcx| {\n                     let param_env = ty::ParamEnv::empty();\n                     let switch_ty = tcx.lift_to_global(&switch_ty).unwrap();\n-                    tcx.layout_of(param_env.and(switch_ty)).unwrap().size\n-                });\n-                values\n-                    .iter()\n-                    .map(|&u| {\n-                        (&ty::Const {\n-                            val: ConstValue::Scalar(\n-                                Scalar::Bits {\n-                                    bits: u,\n-                                    size: size.bytes() as u8,\n-                                }.into(),\n-                            ),\n-                            ty: switch_ty,\n-                        }).to_string().into()\n-                    }).chain(iter::once(\"otherwise\".into()))\n-                    .collect()\n+                    let size = tcx.layout_of(param_env.and(switch_ty)).unwrap().size;\n+                    values\n+                        .iter()\n+                        .map(|&u| {\n+                            tcx.mk_const(ty::Const {\n+                                val: ConstValue::Scalar(\n+                                    Scalar::Bits {\n+                                        bits: u,\n+                                        size: size.bytes() as u8,\n+                                    }.into(),\n+                                ),\n+                                ty: switch_ty,\n+                            }).to_string().into()\n+                        }).chain(iter::once(\"otherwise\".into()))\n+                        .collect()\n+                })\n             }\n             Call {\n                 destination: Some(_),\n@@ -2326,9 +2326,7 @@ impl<'tcx> Operand<'tcx> {\n             span,\n             ty,\n             user_ty: None,\n-            literal: tcx.mk_const(\n-                ty::Const::zero_sized(ty),\n-            ),\n+            literal: ty::Const::zero_sized(tcx, ty),\n         })\n     }\n "}, {"sha": "b1c4e4091128015b66a2a879c752f4081fe3c793", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -412,7 +412,6 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n                         };\n                         if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n                             let substs = tcx.lift_to_global(&substs).unwrap();\n-                            let evaluated = tcx.mk_const(evaluated);\n                             let evaluated = evaluated.subst(tcx, substs);\n                             return evaluated;\n                         }\n@@ -426,7 +425,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for AssociatedTypeNormalizer<'a,\n                                 promoted: None\n                             };\n                             if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n-                                return tcx.mk_const(evaluated);\n+                                return evaluated;\n                             }\n                         }\n                     }"}, {"sha": "d09a9c107869b603bbfd3f33f47cbc4847ed9809", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -202,7 +202,6 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n                         };\n                         if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n                             let substs = tcx.lift_to_global(&substs).unwrap();\n-                            let evaluated = tcx.mk_const(evaluated);\n                             let evaluated = evaluated.subst(tcx, substs);\n                             return evaluated;\n                         }\n@@ -216,7 +215,7 @@ impl<'cx, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for QueryNormalizer<'cx, 'gcx, 'tcx\n                                 promoted: None,\n                             };\n                             if let Ok(evaluated) = tcx.const_eval(param_env.and(cid)) {\n-                                return tcx.mk_const(evaluated);\n+                                return evaluated;\n                             }\n                         }\n                     }"}, {"sha": "a56fe7d7003a1b0e31d1abce55b2fb1f0f78859e", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -24,7 +24,7 @@ use crate::middle::lang_items;\n use crate::middle::resolve_lifetime::{self, ObjectLifetimeDefault};\n use crate::middle::stability;\n use crate::mir::{self, Mir, interpret, ProjectionKind};\n-use crate::mir::interpret::{ConstValue, Allocation};\n+use crate::mir::interpret::{ConstValue, Allocation, Scalar};\n use crate::ty::subst::{Kind, InternalSubsts, SubstsRef, Subst};\n use crate::ty::ReprOptions;\n use crate::traits;\n@@ -1000,7 +1000,10 @@ impl<'tcx> CommonConsts<'tcx> {\n         };\n \n         CommonConsts {\n-            err: mk_const(ty::Const::zero_sized(types.err)),\n+            err: mk_const(ty::Const {\n+                val: ConstValue::Scalar(Scalar::Bits { bits: 0, size: 0 }),\n+                ty: types.err,\n+            }),\n         }\n     }\n }\n@@ -1822,14 +1825,6 @@ nop_list_lift!{ProjectionKind => ProjectionKind}\n // this is the impl for `&'a InternalSubsts<'a>`\n nop_list_lift!{Kind<'a> => Kind<'tcx>}\n \n-impl<'a, 'tcx> Lift<'tcx> for &'a mir::interpret::Allocation {\n-    type Lifted = &'tcx mir::interpret::Allocation;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        assert!(tcx.global_arenas.const_allocs.in_arena(*self as *const _));\n-        Some(unsafe { mem::transmute(*self) })\n-    }\n-}\n-\n pub mod tls {\n     use super::{GlobalCtxt, TyCtxt, ptr_eq};\n \n@@ -2594,9 +2589,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     #[inline]\n     pub fn mk_array(self, ty: Ty<'tcx>, n: u64) -> Ty<'tcx> {\n-        self.mk_ty(Array(ty, self.mk_const(\n-            ty::Const::from_usize(self.global_tcx(), n)\n-        )))\n+        self.mk_ty(Array(ty, ty::Const::from_usize(self.global_tcx(), n)))\n     }\n \n     #[inline]"}, {"sha": "7b363ad6ac490d336d44e7dea48c35e10d4e5376", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -1536,7 +1536,7 @@ define_print_and_forward_display! {\n         p!(print_def_path(self.def_id, self.substs));\n     }\n \n-    ty::Const<'tcx> {\n+    &'tcx ty::Const<'tcx> {\n         match (self.val, &self.ty.sty) {\n             | (ConstValue::Unevaluated(..), _)\n             | (ConstValue::Infer(..), _)"}, {"sha": "86883a14f687c2cfcfd65e2e821d7707a01f9178", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 45, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -6,15 +6,14 @@\n use crate::hir::def::Namespace;\n use crate::mir::ProjectionKind;\n use crate::mir::interpret::ConstValue;\n-use crate::ty::{self, Lift, Ty, TyCtxt, ConstVid, InferConst};\n+use crate::ty::{self, Lift, Ty, TyCtxt, InferConst};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::ty::print::{FmtPrinter, Printer};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use smallvec::SmallVec;\n use crate::mir::interpret;\n \n use std::fmt;\n-use std::marker::PhantomData;\n use std::rc::Rc;\n \n impl fmt::Debug for ty::GenericParamDef {\n@@ -295,9 +294,6 @@ CloneTypeFoldableAndLiftImpls! {\n     (),\n     bool,\n     usize,\n-    u32,\n-    crate::ty::BoundVar,\n-    crate::ty::DebruijnIndex,\n     crate::ty::layout::VariantIdx,\n     u64,\n     String,\n@@ -314,8 +310,6 @@ CloneTypeFoldableAndLiftImpls! {\n     ::rustc_target::spec::abi::Abi,\n     crate::mir::Local,\n     crate::mir::Promoted,\n-    crate::mir::interpret::Scalar,\n-    crate::mir::interpret::Pointer,\n     crate::traits::Reveal,\n     crate::ty::adjustment::AutoBorrowMutability,\n     crate::ty::AdtKind,\n@@ -793,44 +787,6 @@ BraceStructLiftImpl! {\n     }\n }\n \n-BraceStructLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for ty::Const<'a> {\n-        type Lifted = ty::Const<'tcx>;\n-        val, ty\n-    }\n-}\n-\n-EnumLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for interpret::ConstValue<'a> {\n-        type Lifted = interpret::ConstValue<'tcx>;\n-        (interpret::ConstValue::Unevaluated)(a, b),\n-        (interpret::ConstValue::Param)(a),\n-        (interpret::ConstValue::Infer)(a),\n-        (interpret::ConstValue::Scalar)(a),\n-        (interpret::ConstValue::Slice)(a, b),\n-        (interpret::ConstValue::ByRef)(a, b),\n-    }\n-}\n-\n-EnumLiftImpl! {\n-    impl<'a, 'tcx> Lift<'tcx> for ty::InferConst<'a> {\n-        type Lifted = ty::InferConst<'tcx>;\n-        (ty::InferConst::Var)(a),\n-        (ty::InferConst::Fresh)(a),\n-        (ty::InferConst::Canonical)(a, b),\n-    }\n-}\n-\n-impl<'a, 'tcx> Lift<'tcx> for ConstVid<'a> {\n-    type Lifted = ConstVid<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, _: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        Some(ConstVid {\n-            index: self.index,\n-            phantom: PhantomData,\n-        })\n-    }\n-}\n-\n ///////////////////////////////////////////////////////////////////////////\n // TypeFoldable implementations.\n //"}, {"sha": "b2ac40f845a7539bafe68a191cdc7463dff2d7eb", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -2212,42 +2212,43 @@ static_assert_size!(Const<'_>, 48);\n impl<'tcx> Const<'tcx> {\n     #[inline]\n     pub fn from_scalar(\n+        tcx: TyCtxt<'_, '_, 'tcx>,\n         val: Scalar,\n         ty: Ty<'tcx>,\n-    ) -> Self {\n-        Self {\n+    ) -> &'tcx Self {\n+        tcx.mk_const(Self {\n             val: ConstValue::Scalar(val),\n             ty,\n-        }\n+        })\n     }\n \n     #[inline]\n     pub fn from_bits(\n         tcx: TyCtxt<'_, '_, 'tcx>,\n         bits: u128,\n         ty: ParamEnvAnd<'tcx, Ty<'tcx>>,\n-    ) -> Self {\n+    ) -> &'tcx Self {\n         let ty = tcx.lift_to_global(&ty).unwrap();\n         let size = tcx.layout_of(ty).unwrap_or_else(|e| {\n             panic!(\"could not compute layout for {:?}: {:?}\", ty, e)\n         }).size;\n         let truncated = truncate(bits, size);\n         assert_eq!(truncated, bits, \"from_bits called with untruncated value\");\n-        Self::from_scalar(Scalar::Bits { bits, size: size.bytes() as u8 }, ty.value)\n+        Self::from_scalar(tcx, Scalar::Bits { bits, size: size.bytes() as u8 }, ty.value)\n     }\n \n     #[inline]\n-    pub fn zero_sized(ty: Ty<'tcx>) -> Self {\n-        Self::from_scalar(Scalar::Bits { bits: 0, size: 0 }, ty)\n+    pub fn zero_sized(tcx: TyCtxt<'_, '_, 'tcx>, ty: Ty<'tcx>) -> &'tcx Self {\n+        Self::from_scalar(tcx, Scalar::Bits { bits: 0, size: 0 }, ty)\n     }\n \n     #[inline]\n-    pub fn from_bool(tcx: TyCtxt<'_, '_, 'tcx>, v: bool) -> Self {\n+    pub fn from_bool(tcx: TyCtxt<'_, '_, 'tcx>, v: bool) -> &'tcx Self {\n         Self::from_bits(tcx, v as u128, ParamEnv::empty().and(tcx.types.bool))\n     }\n \n     #[inline]\n-    pub fn from_usize(tcx: TyCtxt<'_, '_, 'tcx>, n: u64) -> Self {\n+    pub fn from_usize(tcx: TyCtxt<'_, '_, 'tcx>, n: u64) -> &'tcx Self {\n         Self::from_bits(tcx, n as u128, ParamEnv::empty().and(tcx.types.usize))\n     }\n "}, {"sha": "eaa1dd186a536c39667e4bd3120a36f5719dba99", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -13,7 +13,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn eval_mir_constant(\n         &mut self,\n         constant: &mir::Constant<'tcx>,\n-    ) -> Result<ty::Const<'tcx>, ErrorHandled> {\n+    ) -> Result<&'tcx ty::Const<'tcx>, ErrorHandled> {\n         match constant.literal.val {\n             mir::interpret::ConstValue::Unevaluated(def_id, ref substs) => {\n                 let substs = self.monomorphize(substs);\n@@ -26,7 +26,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 };\n                 self.cx.tcx().const_eval(ty::ParamEnv::reveal_all().and(cid))\n             },\n-            _ => Ok(*self.monomorphize(&constant.literal)),\n+            _ => Ok(self.monomorphize(&constant.literal)),\n         }\n     }\n \n@@ -36,7 +36,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx: &Bx,\n         span: Span,\n         ty: Ty<'tcx>,\n-        constant: Result<ty::Const<'tcx>, ErrorHandled>,\n+        constant: Result<&'tcx ty::Const<'tcx>, ErrorHandled>,\n     ) -> (Bx::Value, Ty<'tcx>) {\n         constant\n             .map(|c| {"}, {"sha": "75f0c6a6c53bf35aa14fa4650d71515fe6b369b5", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -67,7 +67,7 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n \n     pub fn from_const<Bx: BuilderMethods<'a, 'tcx, Value = V>>(\n         bx: &mut Bx,\n-        val: ty::Const<'tcx>\n+        val: &'tcx ty::Const<'tcx>\n     ) -> Result<Self, ErrorHandled> {\n         let layout = bx.layout_of(val.ty);\n "}, {"sha": "8c2ef082c339fc2af044a52323bf30709c692f7a", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -737,12 +737,12 @@ enum TestKind<'tcx> {\n     SwitchInt {\n         switch_ty: Ty<'tcx>,\n         options: Vec<u128>,\n-        indices: FxHashMap<ty::Const<'tcx>, usize>,\n+        indices: FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n     },\n \n     // test for equality\n     Eq {\n-        value: ty::Const<'tcx>,\n+        value: &'tcx ty::Const<'tcx>,\n         ty: Ty<'tcx>,\n     },\n "}, {"sha": "0995a2f7fdf491ec37bf0cb0adc4453e5e4f0c1d", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -98,7 +98,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                      candidate: &Candidate<'pat, 'tcx>,\n                                      switch_ty: Ty<'tcx>,\n                                      options: &mut Vec<u128>,\n-                                     indices: &mut FxHashMap<ty::Const<'tcx>, usize>)\n+                                     indices: &mut FxHashMap<&'tcx ty::Const<'tcx>, usize>)\n                                      -> bool\n     {\n         let match_pair = match candidate.match_pairs.iter().find(|mp| mp.place == *test_place) {\n@@ -305,7 +305,6 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     }\n                     let eq_def_id = self.hir.tcx().lang_items().eq_trait().unwrap();\n                     let (mty, method) = self.hir.trait_method(eq_def_id, \"eq\", ty, &[ty.into()]);\n-                    let method = self.hir.tcx().mk_const(method);\n \n                     let re_erased = self.hir.tcx().lifetimes.re_erased;\n                     // take the argument by reference\n@@ -371,8 +370,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             TestKind::Range(PatternRange { ref lo, ref hi, ty, ref end }) => {\n                 // Test `val` by computing `lo <= val && val <= hi`, using primitive comparisons.\n-                let lo = self.literal_operand(test.span, ty.clone(), lo.clone());\n-                let hi = self.literal_operand(test.span, ty.clone(), hi.clone());\n+                let lo = self.literal_operand(test.span, ty, lo);\n+                let hi = self.literal_operand(test.span, ty, hi);\n                 let val = Operand::Copy(place.clone());\n \n                 let fail = self.cfg.start_new_block();\n@@ -724,7 +723,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     fn const_range_contains(\n         &self,\n         range: PatternRange<'tcx>,\n-        value: ty::Const<'tcx>,\n+        value: &'tcx ty::Const<'tcx>,\n     ) -> Option<bool> {\n         use std::cmp::Ordering::*;\n \n@@ -744,7 +743,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     fn values_not_contained_in_range(\n         &self,\n         range: PatternRange<'tcx>,\n-        indices: &FxHashMap<ty::Const<'tcx>, usize>,\n+        indices: &FxHashMap<&'tcx ty::Const<'tcx>, usize>,\n     ) -> Option<bool> {\n         for &val in indices.keys() {\n             if self.const_range_contains(range, val)? {"}, {"sha": "daf59d7a1353c1f70913c51ebf5d343b18b88643", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -27,13 +27,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub fn literal_operand(&mut self,\n                            span: Span,\n                            ty: Ty<'tcx>,\n-                           literal: ty::Const<'tcx>)\n+                           literal: &'tcx ty::Const<'tcx>)\n                            -> Operand<'tcx> {\n         let constant = box Constant {\n             span,\n             ty,\n             user_ty: None,\n-            literal: self.hir.tcx().mk_const(literal),\n+            literal,\n         };\n         Operand::Constant(constant)\n     }"}, {"sha": "2bfc10f8e8c4e331979bc290fbf6969e7976b79c", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -65,7 +65,7 @@ pub(crate) fn eval_promoted<'a, 'mir, 'tcx>(\n fn mplace_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, '_, 'tcx>,\n     mplace: MPlaceTy<'tcx>,\n-) -> ty::Const<'tcx> {\n+) -> &'tcx ty::Const<'tcx> {\n     let MemPlace { ptr, align, meta } = *mplace;\n     // extract alloc-offset pair\n     assert!(meta.is_none());\n@@ -79,13 +79,13 @@ fn mplace_to_const<'tcx>(\n     // interned this?  I thought that is the entire point of that `FinishStatic` stuff?\n     let alloc = ecx.tcx.intern_const_alloc(alloc);\n     let val = ConstValue::ByRef(ptr, alloc);\n-    ty::Const { val, ty: mplace.layout.ty }\n+    ecx.tcx.mk_const(ty::Const { val, ty: mplace.layout.ty })\n }\n \n fn op_to_const<'tcx>(\n     ecx: &CompileTimeEvalContext<'_, '_, 'tcx>,\n     op: OpTy<'tcx>,\n-) -> ty::Const<'tcx> {\n+) -> &'tcx ty::Const<'tcx> {\n     // We do not normalize just any data.  Only non-union scalars and slices.\n     let normalize = match op.layout.abi {\n         layout::Abi::Scalar(..) => op.layout.ty.ty_adt_def().map_or(true, |adt| !adt.is_union()),\n@@ -104,7 +104,7 @@ fn op_to_const<'tcx>(\n         Err(Immediate::ScalarPair(a, b)) =>\n             ConstValue::Slice(a.not_undef().unwrap(), b.to_usize(ecx).unwrap()),\n     };\n-    ty::Const { val, ty: op.layout.ty }\n+    ecx.tcx.mk_const(ty::Const { val, ty: op.layout.ty })\n }\n \n // Returns a pointer to where the result lives\n@@ -450,8 +450,8 @@ pub fn const_field<'a, 'tcx>(\n     param_env: ty::ParamEnv<'tcx>,\n     variant: Option<VariantIdx>,\n     field: mir::Field,\n-    value: ty::Const<'tcx>,\n-) -> ty::Const<'tcx> {\n+    value: &'tcx ty::Const<'tcx>,\n+) -> &'tcx ty::Const<'tcx> {\n     trace!(\"const_field: {:?}, {:?}\", field, value);\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env);\n     // get the operand again\n@@ -473,7 +473,7 @@ pub fn const_field<'a, 'tcx>(\n pub fn const_variant_index<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n-    val: ty::Const<'tcx>,\n+    val: &'tcx ty::Const<'tcx>,\n ) -> VariantIdx {\n     trace!(\"const_variant_index: {:?}\", val);\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env);"}, {"sha": "5ed16abb9a67290eb54999182a55f6b33a9d9c25", "filename": "src/librustc_mir/hair/constant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fhair%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fconstant.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -14,7 +14,7 @@ crate fn lit_to_const<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     ty: Ty<'tcx>,\n     neg: bool,\n-) -> Result<ty::Const<'tcx>, LitToConstError> {\n+) -> Result<&'tcx ty::Const<'tcx>, LitToConstError> {\n     use syntax::ast::*;\n \n     let trunc = |n| {\n@@ -39,10 +39,10 @@ crate fn lit_to_const<'a, 'gcx, 'tcx>(\n         LitKind::Err(ref s) => {\n             let s = s.as_str();\n             let id = tcx.allocate_bytes(s.as_bytes());\n-            return Ok(ty::Const {\n+            return Ok(tcx.mk_const(ty::Const {\n                 val: ConstValue::new_slice(Scalar::Ptr(id.into()), s.len() as u64),\n                 ty: tcx.types.err,\n-            });\n+            }));\n         },\n         LitKind::ByteStr(ref data) => {\n             let id = tcx.allocate_bytes(data);\n@@ -71,7 +71,7 @@ crate fn lit_to_const<'a, 'gcx, 'tcx>(\n         LitKind::Bool(b) => ConstValue::Scalar(Scalar::from_bool(b)),\n         LitKind::Char(c) => ConstValue::Scalar(Scalar::from_char(c)),\n     };\n-    Ok(ty::Const { val: lit, ty })\n+    Ok(tcx.mk_const(ty::Const { val: lit, ty }))\n }\n \n fn parse_float<'tcx>("}, {"sha": "ca457b0ac7c727374129907b2bf334379fc40db9", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -329,9 +329,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         }\n \n         hir::ExprKind::Lit(ref lit) => ExprKind::Literal {\n-            literal: cx.tcx.mk_const(\n-                cx.const_eval_literal(&lit.node, expr_ty, lit.span, false)\n-            ),\n+            literal: cx.const_eval_literal(&lit.node, expr_ty, lit.span, false),\n             user_ty: None,\n         },\n \n@@ -429,9 +427,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             } else {\n                 if let hir::ExprKind::Lit(ref lit) = arg.node {\n                     ExprKind::Literal {\n-                        literal: cx.tcx.mk_const(\n-                            cx.const_eval_literal(&lit.node, expr_ty, lit.span, true)\n-                        ),\n+                        literal: cx.const_eval_literal(&lit.node, expr_ty, lit.span, true),\n                         user_ty: None,\n                     }\n                 } else {\n@@ -680,7 +676,7 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                         ty: var_ty,\n                         span: expr.span,\n                         kind: ExprKind::Literal {\n-                            literal: cx.tcx.mk_const(literal),\n+                            literal,\n                             user_ty: None\n                         },\n                     }.to_ref();\n@@ -694,10 +690,10 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n                             // in case we are offsetting from a computed discriminant\n                             // and not the beginning of discriminants (which is always `0`)\n                             let substs = InternalSubsts::identity_for_item(cx.tcx(), did);\n-                            let lhs = mk_const(ty::Const {\n+                            let lhs = mk_const(cx.tcx().mk_const(ty::Const {\n                                 val: ConstValue::Unevaluated(did, substs),\n                                 ty: var_ty,\n-                            });\n+                            }));\n                             let bin = ExprKind::Binary {\n                                 op: BinOp::Add,\n                                 lhs,\n@@ -837,9 +833,7 @@ fn method_callee<'a, 'gcx, 'tcx>(\n         ty,\n         span,\n         kind: ExprKind::Literal {\n-            literal: cx.tcx().mk_const(\n-                ty::Const::zero_sized(ty)\n-            ),\n+            literal: ty::Const::zero_sized(cx.tcx(), ty),\n             user_ty,\n         },\n     }\n@@ -902,9 +896,10 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let user_ty = user_substs_applied_to_res(cx, expr.hir_id, res);\n             debug!(\"convert_path_expr: user_ty={:?}\", user_ty);\n             ExprKind::Literal {\n-                literal: cx.tcx.mk_const(ty::Const::zero_sized(\n+                literal: ty::Const::zero_sized(\n+                    cx.tcx,\n                     cx.tables().node_type(expr.hir_id),\n-                )),\n+                ),\n                 user_ty,\n             }\n         }"}, {"sha": "c993a02a6decc2391df6326cddd9d6ce47921904", "filename": "src/librustc_mir/hair/cx/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fmod.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn usize_literal(&mut self, value: u64) -> &'tcx ty::Const<'tcx> {\n-        self.tcx.mk_const(ty::Const::from_usize(self.tcx, value))\n+        ty::Const::from_usize(self.tcx, value)\n     }\n \n     pub fn bool_ty(&mut self) -> Ty<'tcx> {\n@@ -118,11 +118,11 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn true_literal(&mut self) -> &'tcx ty::Const<'tcx> {\n-        self.tcx.mk_const(ty::Const::from_bool(self.tcx, true))\n+        ty::Const::from_bool(self.tcx, true)\n     }\n \n     pub fn false_literal(&mut self) -> &'tcx ty::Const<'tcx> {\n-        self.tcx.mk_const(ty::Const::from_bool(self.tcx, false))\n+        ty::Const::from_bool(self.tcx, false)\n     }\n \n     pub fn const_eval_literal(\n@@ -131,7 +131,7 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n         ty: Ty<'tcx>,\n         sp: Span,\n         neg: bool,\n-    ) -> ty::Const<'tcx> {\n+    ) -> &'tcx ty::Const<'tcx> {\n         trace!(\"const_eval_literal: {:#?}, {:?}, {:?}, {:?}\", lit, ty, sp, neg);\n \n         match lit_to_const(lit, self.tcx, ty, neg) {\n@@ -166,14 +166,14 @@ impl<'a, 'gcx, 'tcx> Cx<'a, 'gcx, 'tcx> {\n                         method_name: &str,\n                         self_ty: Ty<'tcx>,\n                         params: &[Kind<'tcx>])\n-                        -> (Ty<'tcx>, ty::Const<'tcx>) {\n+                        -> (Ty<'tcx>, &'tcx ty::Const<'tcx>) {\n         let method_name = Symbol::intern(method_name);\n         let substs = self.tcx.mk_substs_trait(self_ty, params);\n         for item in self.tcx.associated_items(trait_def_id) {\n             if item.kind == ty::AssociatedKind::Method && item.ident.name == method_name {\n                 let method_ty = self.tcx.type_of(item.def_id);\n                 let method_ty = method_ty.subst(self.tcx, substs);\n-                return (method_ty, ty::Const::zero_sized(method_ty));\n+                return (method_ty, ty::Const::zero_sized(self.tcx, method_ty));\n             }\n         }\n "}, {"sha": "83e17514c08f8c79e9ab304dbcca3e0dfed713e2", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -255,10 +255,10 @@ impl<'a, 'tcx> PatternFolder<'tcx> for LiteralExpander<'a, 'tcx> {\n                         subpattern: Pattern {\n                             ty: rty,\n                             span: pat.span,\n-                            kind: box PatternKind::Constant { value: Const {\n-                                val: self.fold_const_value_deref(val, rty, crty),\n+                            kind: box PatternKind::Constant { value: self.tcx.mk_const(Const {\n+                                val: self.fold_const_value_deref(*val, rty, crty),\n                                 ty: rty,\n-                            } },\n+                            }) },\n                         }\n                     }\n                 }\n@@ -423,7 +423,7 @@ enum Constructor<'tcx> {\n     /// Enum variants.\n     Variant(DefId),\n     /// Literal values.\n-    ConstantValue(ty::Const<'tcx>),\n+    ConstantValue(&'tcx ty::Const<'tcx>),\n     /// Ranges of literal values (`2...5` and `2..5`).\n     ConstantRange(u128, u128, Ty<'tcx>, RangeEnd),\n     /// Array patterns of length n.\n@@ -1424,7 +1424,7 @@ fn constructor_sub_pattern_tys<'a, 'tcx: 'a>(cx: &MatchCheckCtxt<'a, 'tcx>,\n fn slice_pat_covered_by_const<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, '_>,\n     _span: Span,\n-    const_val: ty::Const<'tcx>,\n+    const_val: &'tcx ty::Const<'tcx>,\n     prefix: &[Pattern<'tcx>],\n     slice: &Option<Pattern<'tcx>>,\n     suffix: &[Pattern<'tcx>]\n@@ -1824,7 +1824,7 @@ fn specialize<'p, 'a: 'p, 'tcx: 'a>(\n                                         &cx.tcx, ptr, layout.size,\n                                     ).ok()?;\n                                     let scalar = scalar.not_undef().ok()?;\n-                                    let value = ty::Const::from_scalar(scalar, ty);\n+                                    let value = ty::Const::from_scalar(cx.tcx, scalar, ty);\n                                     let pattern = Pattern {\n                                         ty,\n                                         span: pat.span,"}, {"sha": "4cc42e3ee0e62bc8988787a23029c770920c6f05", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -152,7 +152,7 @@ pub enum PatternKind<'tcx> {\n     },\n \n     Constant {\n-        value: ty::Const<'tcx>,\n+        value: &'tcx ty::Const<'tcx>,\n     },\n \n     Range(PatternRange<'tcx>),\n@@ -176,8 +176,8 @@ pub enum PatternKind<'tcx> {\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n pub struct PatternRange<'tcx> {\n-    pub lo: ty::Const<'tcx>,\n-    pub hi: ty::Const<'tcx>,\n+    pub lo: &'tcx ty::Const<'tcx>,\n+    pub hi: &'tcx ty::Const<'tcx>,\n     pub ty: Ty<'tcx>,\n     pub end: RangeEnd,\n }\n@@ -291,15 +291,15 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n                 write!(f, \"{}\", subpattern)\n             }\n             PatternKind::Constant { value } => {\n-                write!(f, \"{}\", &value)\n+                write!(f, \"{}\", value)\n             }\n             PatternKind::Range(PatternRange { lo, hi, ty: _, end }) => {\n-                write!(f, \"{}\", &lo)?;\n+                write!(f, \"{}\", lo)?;\n                 match end {\n                     RangeEnd::Included => write!(f, \"..=\")?,\n                     RangeEnd::Excluded => write!(f, \"..\")?,\n                 }\n-                write!(f, \"{}\", &hi)\n+                write!(f, \"{}\", hi)\n             }\n             PatternKind::Slice { ref prefix, ref slice, ref suffix } |\n             PatternKind::Array { ref prefix, ref slice, ref suffix } => {\n@@ -942,7 +942,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n     fn const_to_pat(\n         &self,\n         instance: ty::Instance<'tcx>,\n-        cv: ty::Const<'tcx>,\n+        cv: &'tcx ty::Const<'tcx>,\n         id: hir::HirId,\n         span: Span,\n     ) -> Pattern<'tcx> {\n@@ -1205,16 +1205,16 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n             PatternKind::Constant {\n                 value\n             } => PatternKind::Constant {\n-                value: value.fold_with(folder)\n+                value,\n             },\n             PatternKind::Range(PatternRange {\n                 lo,\n                 hi,\n                 ty,\n                 end,\n             }) => PatternKind::Range(PatternRange {\n-                lo: lo.fold_with(folder),\n-                hi: hi.fold_with(folder),\n+                lo,\n+                hi,\n                 ty: ty.fold_with(folder),\n                 end,\n             }),\n@@ -1242,8 +1242,8 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n \n pub fn compare_const_vals<'a, 'gcx, 'tcx>(\n     tcx: TyCtxt<'a, 'gcx, 'tcx>,\n-    a: ty::Const<'tcx>,\n-    b: ty::Const<'tcx>,\n+    a: &'tcx ty::Const<'tcx>,\n+    b: &'tcx ty::Const<'tcx>,\n     ty: ty::ParamEnvAnd<'tcx, Ty<'tcx>>,\n ) -> Option<Ordering> {\n     trace!(\"compare_const_vals: {:?}, {:?}\", a, b);"}, {"sha": "9481dd3cb8f8f689424fad32174d170db8ea5d3d", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -500,7 +500,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n             Move(ref place) =>\n                 self.eval_place_to_op(place, layout)?,\n \n-            Constant(ref constant) => self.eval_const_to_op(*constant.literal, layout)?,\n+            Constant(ref constant) => self.eval_const_to_op(constant.literal, layout)?,\n         };\n         trace!(\"{:?}: {:?}\", mir_op, *op);\n         Ok(op)\n@@ -520,7 +520,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n     // in patterns via the `const_eval` module\n     crate fn eval_const_to_op(\n         &self,\n-        val: ty::Const<'tcx>,\n+        val: &'tcx ty::Const<'tcx>,\n         layout: Option<TyLayout<'tcx>>,\n     ) -> EvalResult<'tcx, OpTy<'tcx, M::PointerTag>> {\n         let op = match val.val {"}, {"sha": "e0d6784789e2d0ed8b8623f98c16ede71ba73111", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -609,7 +609,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n     fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, location: Location) {\n         debug!(\"visiting const {:?} @ {:?}\", *constant, location);\n \n-        collect_const(self.tcx, **constant, self.param_substs, self.output);\n+        collect_const(self.tcx, *constant, self.param_substs, self.output);\n \n         self.super_const(constant);\n     }\n@@ -1248,7 +1248,7 @@ fn def_id_to_string<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n fn collect_const<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    constant: ty::Const<'tcx>,\n+    constant: &'tcx ty::Const<'tcx>,\n     param_substs: SubstsRef<'tcx>,\n     output: &mut Vec<MonoItem<'tcx>>,\n ) {"}, {"sha": "8be660ae17ae90ebfe5ba564d29d4655dadcb76a", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -458,9 +458,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             span: self.span,\n             ty: func_ty,\n             user_ty: None,\n-            literal: tcx.mk_const(\n-                ty::Const::zero_sized(func_ty),\n-            ),\n+            literal: ty::Const::zero_sized(tcx, func_ty),\n         });\n \n         let ref_loc = self.make_place(\n@@ -520,9 +518,7 @@ impl<'a, 'tcx> CloneShimBuilder<'a, 'tcx> {\n             span: self.span,\n             ty: self.tcx.types.usize,\n             user_ty: None,\n-            literal: self.tcx.mk_const(\n-                ty::Const::from_usize(self.tcx, value),\n-            ),\n+            literal: ty::Const::from_usize(self.tcx, value),\n         }\n     }\n \n@@ -762,9 +758,7 @@ fn build_call_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 span,\n                 ty,\n                 user_ty: None,\n-                literal: tcx.mk_const(\n-                    ty::Const::zero_sized(ty)\n-                ),\n+                literal: ty::Const::zero_sized(tcx, ty),\n              }),\n              vec![rcvr])\n         }"}, {"sha": "05518ca48d30e6b92e515b1911362af1d7c8fc80", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -282,7 +282,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n         c: &Constant<'tcx>,\n     ) -> Option<Const<'tcx>> {\n         self.ecx.tcx.span = c.span;\n-        match self.ecx.eval_const_to_op(*c.literal, None) {\n+        match self.ecx.eval_const_to_op(c.literal, None) {\n             Ok(op) => {\n                 Some(op)\n             },"}, {"sha": "6320cb442481448da19a9385b22d3dbce41a3c78", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -533,9 +533,7 @@ impl<'b, 'tcx> ElaborateDropsCtxt<'b, 'tcx> {\n             span,\n             ty: self.tcx.types.bool,\n             user_ty: None,\n-            literal: self.tcx.mk_const(\n-                ty::Const::from_bool(self.tcx, val),\n-            ),\n+            literal: ty::Const::from_bool(self.tcx, val),\n         })))\n     }\n "}, {"sha": "ab2f2933a969e62519c2e65714d10a0db0b7f6e9", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -757,9 +757,7 @@ fn insert_panic_block<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             span: mir.span,\n             ty: tcx.types.bool,\n             user_ty: None,\n-            literal: tcx.mk_const(\n-                ty::Const::from_bool(tcx, false),\n-            ),\n+            literal: ty::Const::from_bool(tcx, false),\n         }),\n         expected: true,\n         msg: message,"}, {"sha": "ac5ebc5e2512a9de4b668b184ca70a7442751404", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -975,9 +975,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             span: self.source_info.span,\n             ty: self.tcx().types.usize,\n             user_ty: None,\n-            literal: self.tcx().mk_const(\n-                ty::Const::from_usize(self.tcx(), val.into())\n-            ),\n+            literal: ty::Const::from_usize(self.tcx(), val.into()),\n         })\n     }\n "}, {"sha": "b5bb62a0f460c73b19bcee881be94099eac232a3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -4441,7 +4441,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 if element_ty.references_error() {\n                     tcx.types.err\n                 } else if let Ok(count) = count {\n-                    tcx.mk_ty(ty::Array(t, tcx.mk_const(count)))\n+                    tcx.mk_ty(ty::Array(t, count))\n                 } else {\n                     tcx.types.err\n                 }"}, {"sha": "fb0caa55ffbb496671b1ecf58b964ed2a4de82e1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e694b63cd147512ad5e73ff4f9bee057e0c27c19/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=e694b63cd147512ad5e73ff4f9bee057e0c27c19", "patch": "@@ -2956,7 +2956,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             ty::Str => Primitive(PrimitiveType::Str),\n             ty::Slice(ty) => Slice(box ty.clean(cx)),\n             ty::Array(ty, n) => {\n-                let mut n = *cx.tcx.lift(&n).expect(\"array lift failed\");\n+                let mut n = cx.tcx.lift(&n).expect(\"array lift failed\");\n                 if let ConstValue::Unevaluated(def_id, substs) = n.val {\n                     let param_env = cx.tcx.param_env(def_id);\n                     let cid = GlobalId {\n@@ -4126,7 +4126,7 @@ fn name_from_pat(p: &hir::Pat) -> String {\n     }\n }\n \n-fn print_const(cx: &DocContext<'_>, n: ty::Const<'_>) -> String {\n+fn print_const(cx: &DocContext<'_>, n: &ty::Const<'_>) -> String {\n     match n.val {\n         ConstValue::Unevaluated(def_id, _) => {\n             if let Some(hir_id) = cx.tcx.hir().as_local_hir_id(def_id) {\n@@ -4141,6 +4141,10 @@ fn print_const(cx: &DocContext<'_>, n: ty::Const<'_>) -> String {\n             if s.ends_with(\"usize\") {\n                 let n = s.len() - \"usize\".len();\n                 s.truncate(n);\n+                if s.ends_with(\": \") {\n+                    let n = s.len() - \": \".len();\n+                    s.truncate(n);\n+                }\n             }\n             s\n         },"}]}