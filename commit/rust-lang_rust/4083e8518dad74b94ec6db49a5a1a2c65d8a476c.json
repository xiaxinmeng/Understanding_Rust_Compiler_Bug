{"sha": "4083e8518dad74b94ec6db49a5a1a2c65d8a476c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwODNlODUxOGRhZDc0Yjk0ZWM2ZGI0OWE1YTFhMmM2NWQ4YTQ3NmM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-08T00:54:13Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-07-08T00:54:13Z"}, "message": "tutorial: Add a section on common vector methods", "tree": {"sha": "b8e348a50261dcdc75965d81c4c73c527bef437b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8e348a50261dcdc75965d81c4c73c527bef437b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4083e8518dad74b94ec6db49a5a1a2c65d8a476c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4083e8518dad74b94ec6db49a5a1a2c65d8a476c", "html_url": "https://github.com/rust-lang/rust/commit/4083e8518dad74b94ec6db49a5a1a2c65d8a476c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4083e8518dad74b94ec6db49a5a1a2c65d8a476c/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f46e4ba1fba82137500db9ab2d95e5c8bfb4a8bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/f46e4ba1fba82137500db9ab2d95e5c8bfb4a8bf", "html_url": "https://github.com/rust-lang/rust/commit/f46e4ba1fba82137500db9ab2d95e5c8bfb4a8bf"}], "stats": {"total": 44, "additions": 44, "deletions": 0}, "files": [{"sha": "437f07830c3d1f966c9d39e41a256c7abab80fdf", "filename": "doc/tutorial.md", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/4083e8518dad74b94ec6db49a5a1a2c65d8a476c/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/4083e8518dad74b94ec6db49a5a1a2c65d8a476c/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=4083e8518dad74b94ec6db49a5a1a2c65d8a476c", "patch": "@@ -1477,6 +1477,50 @@ there are core library functions available.\n > ***Note:*** like vectors, strings will soon be allocatable in\n > the local heap and on the stack, in addition to the exchange heap.\n \n+## Vector and string methods\n+\n+Both vectors and strings support a number of useful\n+[methods](#implementation).  While we haven't covered methods yet,\n+most vector functionality is provided by methods, so let's have a\n+brief look at a few common ones.\n+\n+~~~\n+# import io::println;\n+# enum crayon {\n+#     almond, antique_brass, apricot,\n+#     aquamarine, asparagus, atomic_tangerine,\n+#     banana_mania, beaver, bittersweet\n+# }\n+# fn unwrap_crayon(c: crayon) -> int { 0 }\n+# fn eat_crayon_wax(i: int) { }\n+# fn store_crayon_in_nasal_cavity(i: uint, c: crayon) { }\n+# fn crayon_to_str(c: crayon) -> str { \"\" }\n+\n+let crayons = ~[almond, antique_brass, apricot];\n+\n+// Check the length of the vector\n+assert crayons.len() == 3;\n+assert !crayons.is_empty();\n+\n+// Iterate over a vector\n+for crayons.each |crayon| {\n+    let delicious_crayon_wax = unwrap_crayon(crayon);\n+    eat_crayon_wax(delicious_crayon_wax);\n+}\n+\n+// Map vector elements\n+let crayon_names = crayons.map(crayon_to_str);\n+let favorite_crayon_name = crayon_names[0];\n+\n+// Remove whitespace from before and after the string\n+let new_favorite_crayon_name = favorite_crayon_name.trim();\n+\n+if favorite_crayon_name.len() > 5 {\n+   // Create a substring\n+   println(favorite_crayon_name.substr(0, 5));\n+}\n+~~~\n+\n # Closures\n \n Named functions, like those in the previous section, may not refer"}]}