{"sha": "10d284360466f937c4ec5487a536079445702a7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwZDI4NDM2MDQ2NmY5MzdjNGVjNTQ4N2E1MzYwNzk0NDU3MDJhN2E=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-11-05T09:29:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-05T09:29:38Z"}, "message": "Rollup merge of #78093 - camelid:as-cleanup, r=jyn514\n\nClean up docs for 'as' keyword", "tree": {"sha": "cd6694dc22f83aa6ca2122e69a0c94515c03e735", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd6694dc22f83aa6ca2122e69a0c94515c03e735"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10d284360466f937c4ec5487a536079445702a7a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfo8YDCRBK7hj4Ov3rIwAAdHIIADtN0u8QqHVf74TNGRXfPWNG\nhlQHiy5lXJAi1R1+Krs6v/4FsFHHb6wwoGW+srlSCj5PXkdzFTAZRxRAiG9eGzAW\n7hSELKFO2FmzF3gsk3e9oxOy9VLKnBAKOezeaRq+bdLZGw4wmfb3hz9JJ3IEOXhU\neU/cOx6KU8MUTjiHCC40AznLCeh6Y/mDoe3eeqvcanGNVbQ3DIEsbwwvKelHnM2A\n4L75HAMT4yADgJzyrxsrvFO4Pb75MIip2QU8jZgxSeOo3qoWVrqyurAAQaJrjs3z\n6+wPyWR2+diRNlkZvmc7G21bC45qFlKdDsED/5bksH7O6C2Q75MQ4yZKAd4+xQo=\n=bvPi\n-----END PGP SIGNATURE-----\n", "payload": "tree cd6694dc22f83aa6ca2122e69a0c94515c03e735\nparent 55f4b802fb91ee366ebca8a333dc01f04e0d71e5\nparent d8afe98eba85f2f8033d98ef1fdd030c6032b6e5\nauthor Mara Bos <m-ou.se@m-ou.se> 1604568578 +0100\ncommitter GitHub <noreply@github.com> 1604568578 +0100\n\nRollup merge of #78093 - camelid:as-cleanup, r=jyn514\n\nClean up docs for 'as' keyword\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10d284360466f937c4ec5487a536079445702a7a", "html_url": "https://github.com/rust-lang/rust/commit/10d284360466f937c4ec5487a536079445702a7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10d284360466f937c4ec5487a536079445702a7a/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55f4b802fb91ee366ebca8a333dc01f04e0d71e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/55f4b802fb91ee366ebca8a333dc01f04e0d71e5", "html_url": "https://github.com/rust-lang/rust/commit/55f4b802fb91ee366ebca8a333dc01f04e0d71e5"}, {"sha": "d8afe98eba85f2f8033d98ef1fdd030c6032b6e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8afe98eba85f2f8033d98ef1fdd030c6032b6e5", "html_url": "https://github.com/rust-lang/rust/commit/d8afe98eba85f2f8033d98ef1fdd030c6032b6e5"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "b990b78570393f4f441381b0541dbf36a1612cd0", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/10d284360466f937c4ec5487a536079445702a7a/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10d284360466f937c4ec5487a536079445702a7a/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=10d284360466f937c4ec5487a536079445702a7a", "patch": "@@ -15,18 +15,24 @@\n /// ```\n ///\n /// In general, any cast that can be performed via ascribing the type can also be done using `as`,\n-/// so instead of writing `let x: u32 = 123`, you can write `let x = 123 as u32` (Note: `let x: u32\n-/// = 123` would be best in that situation). The same is not true in the other direction, however,\n+/// so instead of writing `let x: u32 = 123`, you can write `let x = 123 as u32` (note: `let x: u32\n+/// = 123` would be best in that situation). The same is not true in the other direction, however;\n /// explicitly using `as` allows a few more coercions that aren't allowed implicitly, such as\n /// changing the type of a raw pointer or turning closures into raw pointers.\n ///\n-/// Other places `as` is used include as extra syntax for [`crate`] and `use`, to change the name\n-/// something is imported as.\n+/// `as` is also used to rename imports in [`use`] and [`extern crate`] statements:\n ///\n-/// For more information on what `as` is capable of, see the [Reference]\n+/// ```\n+/// # #[allow(unused_imports)]\n+/// use std::{mem as memory, net as network};\n+/// // Now you can use the names `memory` and `network` to refer to `std::mem` and `std::net`.\n+/// ```\n+///\n+/// For more information on what `as` is capable of, see the [Reference].\n ///\n /// [Reference]: ../reference/expressions/operator-expr.html#type-cast-expressions\n-/// [`crate`]: keyword.crate.html\n+/// [`use`]: keyword.use.html\n+/// [`extern crate`]: keyword.crate.html\n mod as_keyword {}\n \n #[doc(keyword = \"break\")]\n@@ -397,6 +403,7 @@ mod enum_keyword {}\n /// [Rust book]:\n /// ../book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\n /// [Reference]: ../reference/items/external-blocks.html\n+/// [`crate`]: keyword.crate.html\n mod extern_keyword {}\n \n #[doc(keyword = \"false\")]"}]}