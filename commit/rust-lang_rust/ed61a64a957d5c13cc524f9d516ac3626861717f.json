{"sha": "ed61a64a957d5c13cc524f9d516ac3626861717f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNjFhNjRhOTU3ZDVjMTNjYzUyNGY5ZDUxNmFjMzYyNjg2MTcxN2Y=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-15T05:31:33Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-09-17T00:16:46Z"}, "message": "rebasing", "tree": {"sha": "b2a8bc22315e8c1ed7765303f6b5813afa2e890b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2a8bc22315e8c1ed7765303f6b5813afa2e890b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed61a64a957d5c13cc524f9d516ac3626861717f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed61a64a957d5c13cc524f9d516ac3626861717f", "html_url": "https://github.com/rust-lang/rust/commit/ed61a64a957d5c13cc524f9d516ac3626861717f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed61a64a957d5c13cc524f9d516ac3626861717f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a642d853aa29f8ec8486e736be551cf77f34e219", "url": "https://api.github.com/repos/rust-lang/rust/commits/a642d853aa29f8ec8486e736be551cf77f34e219", "html_url": "https://github.com/rust-lang/rust/commit/a642d853aa29f8ec8486e736be551cf77f34e219"}], "stats": {"total": 36, "additions": 13, "deletions": 23}, "files": [{"sha": "9a736747d5291ea00e5c92e9da328810aaf0bd6b", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 13, "deletions": 21, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ed61a64a957d5c13cc524f9d516ac3626861717f/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed61a64a957d5c13cc524f9d516ac3626861717f/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=ed61a64a957d5c13cc524f9d516ac3626861717f", "patch": "@@ -408,8 +408,8 @@ pub trait LintContext: Sized {\n     fn lints(&self) -> &LintStore;\n     fn mut_lints(&mut self) -> &mut LintStore;\n     fn level_stack(&mut self) -> &mut Vec<(LintId, LevelSource)>;\n-    fn enter_attrs(&mut self, attrs: &[hir::Attribute]);\n-    fn exit_attrs(&mut self, attrs: &[hir::Attribute]);\n+    fn enter_attrs(&mut self, attrs: &[ast::Attribute]);\n+    fn exit_attrs(&mut self, attrs: &[ast::Attribute]);\n \n     /// Get the level of `lint` at the current position of the lint\n     /// traversal.\n@@ -510,14 +510,6 @@ pub trait LintContext: Sized {\n             self.mut_lints().set_level(lint, lvlsrc);\n         }\n     }\n-\n-    fn with_ast_lint_attrs<F>(&mut self,\n-                          attrs: &[ast::Attribute],\n-                          f: F)\n-        where F: FnOnce(&mut Self),\n-    {\n-        self.with_lint_attrs(&lower_attrs(attrs), f)\n-    }\n }\n \n \n@@ -596,11 +588,11 @@ impl<'a, 'tcx> LintContext for LateContext<'a, 'tcx> {\n         &mut self.level_stack\n     }\n \n-    fn enter_attrs(&mut self, attrs: &[hir::Attribute]) {\n+    fn enter_attrs(&mut self, attrs: &[ast::Attribute]) {\n         run_lints!(self, enter_lint_attrs, late_passes, attrs);\n     }\n \n-    fn exit_attrs(&mut self, attrs: &[hir::Attribute]) {\n+    fn exit_attrs(&mut self, attrs: &[ast::Attribute]) {\n         run_lints!(self, exit_lint_attrs, late_passes, attrs);\n     }\n }\n@@ -623,11 +615,11 @@ impl<'a> LintContext for EarlyContext<'a> {\n         &mut self.level_stack\n     }\n \n-    fn enter_attrs(&mut self, attrs: &[hir::Attribute]) {\n+    fn enter_attrs(&mut self, attrs: &[ast::Attribute]) {\n         run_lints!(self, enter_lint_attrs, early_passes, attrs);\n     }\n \n-    fn exit_attrs(&mut self, attrs: &[hir::Attribute]) {\n+    fn exit_attrs(&mut self, attrs: &[ast::Attribute]) {\n         run_lints!(self, exit_lint_attrs, early_passes, attrs);\n     }\n }\n@@ -782,15 +774,15 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n \n impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n     fn visit_item(&mut self, it: &ast::Item) {\n-        self.with_ast_lint_attrs(&it.attrs, |cx| {\n+        self.with_lint_attrs(&it.attrs, |cx| {\n             run_lints!(cx, check_item, early_passes, it);\n             cx.visit_ids(|v| v.visit_item(it));\n             ast_visit::walk_item(cx, it);\n         })\n     }\n \n     fn visit_foreign_item(&mut self, it: &ast::ForeignItem) {\n-        self.with_ast_lint_attrs(&it.attrs, |cx| {\n+        self.with_lint_attrs(&it.attrs, |cx| {\n             run_lints!(cx, check_foreign_item, early_passes, it);\n             ast_visit::walk_foreign_item(cx, it);\n         })\n@@ -828,14 +820,14 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n     }\n \n     fn visit_struct_field(&mut self, s: &ast::StructField) {\n-        self.with_ast_lint_attrs(&s.node.attrs, |cx| {\n+        self.with_lint_attrs(&s.node.attrs, |cx| {\n             run_lints!(cx, check_struct_field, early_passes, s);\n             ast_visit::walk_struct_field(cx, s);\n         })\n     }\n \n     fn visit_variant(&mut self, v: &ast::Variant, g: &ast::Generics) {\n-        self.with_ast_lint_attrs(&v.node.attrs, |cx| {\n+        self.with_lint_attrs(&v.node.attrs, |cx| {\n             run_lints!(cx, check_variant, early_passes, v, g);\n             ast_visit::walk_variant(cx, v, g);\n             run_lints!(cx, check_variant_post, early_passes, v, g);\n@@ -886,15 +878,15 @@ impl<'a, 'v> ast_visit::Visitor<'v> for EarlyContext<'a> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &ast::TraitItem) {\n-        self.with_ast_lint_attrs(&trait_item.attrs, |cx| {\n+        self.with_lint_attrs(&trait_item.attrs, |cx| {\n             run_lints!(cx, check_trait_item, early_passes, trait_item);\n             cx.visit_ids(|v| v.visit_trait_item(trait_item));\n             ast_visit::walk_trait_item(cx, trait_item);\n         });\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &ast::ImplItem) {\n-        self.with_ast_lint_attrs(&impl_item.attrs, |cx| {\n+        self.with_lint_attrs(&impl_item.attrs, |cx| {\n             run_lints!(cx, check_impl_item, early_passes, impl_item);\n             cx.visit_ids(|v| v.visit_impl_item(impl_item));\n             ast_visit::walk_impl_item(cx, impl_item);\n@@ -1027,7 +1019,7 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n     let mut cx = EarlyContext::new(sess, krate);\n \n     // Visit the whole crate.\n-    cx.with_ast_lint_attrs(&krate.attrs, |cx| {\n+    cx.with_lint_attrs(&krate.attrs, |cx| {\n         cx.visit_id(ast::CRATE_NODE_ID);\n         cx.visit_ids(|v| {\n             v.visited_outermost = true;"}, {"sha": "972f7242808b63c48322560f002e26669a52c209", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed61a64a957d5c13cc524f9d516ac3626861717f/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed61a64a957d5c13cc524f9d516ac3626861717f/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=ed61a64a957d5c13cc524f9d516ac3626861717f", "patch": "@@ -2089,8 +2089,6 @@ impl<'tcx> ctxt<'tcx> {\n             hir::ExprCast(..) => {\n                 false\n             }\n-\n-            hir::ExprParen(ref e) => self.expr_is_lval(e),\n         }\n     }\n "}]}