{"sha": "f69a0999e742a6fc45fd4b962c30c56d04c2245c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2OWEwOTk5ZTc0MmE2ZmM0NWZkNGI5NjJjMzBjNTZkMDRjMjI0NWM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-06T01:00:53Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-03-06T01:14:38Z"}, "message": "Remove IdxSet::elems", "tree": {"sha": "cffd54da1d3f05a76b3ab77ac8767464c2ab14b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cffd54da1d3f05a76b3ab77ac8767464c2ab14b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f69a0999e742a6fc45fd4b962c30c56d04c2245c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f69a0999e742a6fc45fd4b962c30c56d04c2245c", "html_url": "https://github.com/rust-lang/rust/commit/f69a0999e742a6fc45fd4b962c30c56d04c2245c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f69a0999e742a6fc45fd4b962c30c56d04c2245c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89d12478ac4f56e45da7ece5d5cac983897653d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/89d12478ac4f56e45da7ece5d5cac983897653d6", "html_url": "https://github.com/rust-lang/rust/commit/89d12478ac4f56e45da7ece5d5cac983897653d6"}], "stats": {"total": 50, "additions": 11, "deletions": 39}, "files": [{"sha": "7ab6a2691488ed148aa388b2478470ef7a1d89ff", "filename": "src/librustc_data_structures/indexed_set.rs", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f69a0999e742a6fc45fd4b962c30c56d04c2245c/src%2Flibrustc_data_structures%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69a0999e742a6fc45fd4b962c30c56d04c2245c/src%2Flibrustc_data_structures%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_set.rs?ref=f69a0999e742a6fc45fd4b962c30c56d04c2245c", "patch": "@@ -224,32 +224,6 @@ impl<T: Idx> IdxSet<T> {\n             _pd: PhantomData,\n         }\n     }\n-\n-    pub fn elems(&self, universe_size: usize) -> Elems<T> {\n-        Elems { i: 0, set: self, universe_size: universe_size }\n-    }\n-}\n-\n-pub struct Elems<'a, T: Idx> { i: usize, set: &'a IdxSet<T>, universe_size: usize }\n-\n-impl<'a, T: Idx> Iterator for Elems<'a, T> {\n-    type Item = T;\n-    fn next(&mut self) -> Option<T> {\n-        if self.i >= self.universe_size { return None; }\n-        let mut i = self.i;\n-        loop {\n-            if i >= self.universe_size {\n-                self.i = i; // (mark iteration as complete.)\n-                return None;\n-            }\n-            if self.set.contains(&T::new(i)) {\n-                self.i = i + 1; // (next element to start at.)\n-                return Some(T::new(i));\n-            }\n-            i = i + 1;\n-        }\n-    }\n-}\n }\n \n pub struct Iter<'a, T: Idx> {"}, {"sha": "f0304ccd0405e7e216427f5e43ff316de5d0e3e0", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f69a0999e742a6fc45fd4b962c30c56d04c2245c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69a0999e742a6fc45fd4b962c30c56d04c2245c/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=f69a0999e742a6fc45fd4b962c30c56d04c2245c", "patch": "@@ -555,7 +555,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                     // Look for any active borrows to locals\n                     let domain = flow_state.borrows.operator();\n                     let data = domain.borrows();\n-                    flow_state.borrows.with_elems_outgoing(|borrows| {\n+                    flow_state.borrows.with_iter_outgoing(|borrows| {\n                         for i in borrows {\n                             let borrow = &data[i.borrow_index()];\n                             self.check_for_local_borrow(borrow, span);\n@@ -571,7 +571,7 @@ impl<'cx, 'gcx, 'tcx> DataflowResultsConsumer<'cx, 'tcx> for MirBorrowckCtxt<'cx\n                 // so this \"extra check\" serves as a kind of backup.\n                 let domain = flow_state.borrows.operator();\n                 let data = domain.borrows();\n-                flow_state.borrows.with_elems_outgoing(|borrows| {\n+                flow_state.borrows.with_iter_outgoing(|borrows| {\n                     for i in borrows {\n                         let borrow = &data[i.borrow_index()];\n                         let context = ContextKind::StorageDead.new(loc);\n@@ -1310,7 +1310,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             place\n         );\n \n-        for i in flow_state.ever_inits.elems_incoming() {\n+        for i in flow_state.ever_inits.iter_incoming() {\n             let init = self.move_data.inits[i];\n             let init_place = &self.move_data.move_paths[init.path].place;\n             if self.places_conflict(&init_place, place, Deep) {\n@@ -2155,8 +2155,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n         // check for loan restricting path P being used. Accounts for\n         // borrows of P, P.a.b, etc.\n-        let mut elems_incoming = flow_state.borrows.elems_incoming();\n-        while let Some(i) = elems_incoming.next() {\n+        let mut iter_incoming = flow_state.borrows.iter_incoming();\n+        while let Some(i) = iter_incoming.next() {\n             let borrowed = &data[i.borrow_index()];\n \n             if self.places_conflict(&borrowed.borrowed_place, place, access) {"}, {"sha": "0fbb54e8e0a089abb88178c82b1b9b3cf4b58343", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f69a0999e742a6fc45fd4b962c30c56d04c2245c/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69a0999e742a6fc45fd4b962c30c56d04c2245c/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=f69a0999e742a6fc45fd4b962c30c56d04c2245c", "patch": "@@ -12,7 +12,7 @@\n //! locations.\n \n use rustc::mir::{BasicBlock, Location};\n-use rustc_data_structures::indexed_set::{self, IdxSetBuf};\n+use rustc_data_structures::indexed_set::{IdxSetBuf, Iter};\n use rustc_data_structures::indexed_vec::Idx;\n \n use dataflow::{BitDenotation, BlockSets, DataflowResults};\n@@ -117,23 +117,21 @@ where\n     }\n \n     /// Returns an iterator over the elements present in the current state.\n-    pub fn elems_incoming(&self) -> iter::Peekable<indexed_set::Elems<BD::Idx>> {\n-        let univ = self.base_results.sets().bits_per_block();\n-        self.curr_state.elems(univ).peekable()\n+    pub fn iter_incoming(&self) -> iter::Peekable<Iter<BD::Idx>> {\n+        self.curr_state.iter().peekable()\n     }\n \n     /// Creates a clone of the current state and applies the local\n     /// effects to the clone (leaving the state of self intact).\n     /// Invokes `f` with an iterator over the resulting state.\n-    pub fn with_elems_outgoing<F>(&self, f: F)\n+    pub fn with_iter_outgoing<F>(&self, f: F)\n     where\n-        F: FnOnce(indexed_set::Elems<BD::Idx>),\n+        F: FnOnce(Iter<BD::Idx>),\n     {\n         let mut curr_state = self.curr_state.clone();\n         curr_state.union(&self.stmt_gen);\n         curr_state.subtract(&self.stmt_kill);\n-        let univ = self.base_results.sets().bits_per_block();\n-        f(curr_state.elems(univ));\n+        f(curr_state.iter());\n     }\n }\n "}]}