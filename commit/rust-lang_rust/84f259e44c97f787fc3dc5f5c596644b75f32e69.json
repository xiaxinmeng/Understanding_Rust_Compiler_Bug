{"sha": "84f259e44c97f787fc3dc5f5c596644b75f32e69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZjI1OWU0NGM5N2Y3ODdmYzNkYzVmNWM1OTY2NDRiNzVmMzJlNjk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-05T09:00:27Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2021-07-07T09:30:08Z"}, "message": "Unify macro source display", "tree": {"sha": "329fd717ba489941a12be9e031938e36267dee20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/329fd717ba489941a12be9e031938e36267dee20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84f259e44c97f787fc3dc5f5c596644b75f32e69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84f259e44c97f787fc3dc5f5c596644b75f32e69", "html_url": "https://github.com/rust-lang/rust/commit/84f259e44c97f787fc3dc5f5c596644b75f32e69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84f259e44c97f787fc3dc5f5c596644b75f32e69/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c70250dfbdce688654e08cdb7a83c519f623ebda", "url": "https://api.github.com/repos/rust-lang/rust/commits/c70250dfbdce688654e08cdb7a83c519f623ebda", "html_url": "https://github.com/rust-lang/rust/commit/c70250dfbdce688654e08cdb7a83c519f623ebda"}], "stats": {"total": 106, "additions": 48, "deletions": 58}, "files": [{"sha": "f71720af7eff93e75f08190217741bae3c8ea3ab", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 7, "deletions": 31, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/84f259e44c97f787fc3dc5f5c596644b75f32e69/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f259e44c97f787fc3dc5f5c596644b75f32e69/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=84f259e44c97f787fc3dc5f5c596644b75f32e69", "patch": "@@ -543,39 +543,15 @@ fn build_static(cx: &mut DocContext<'_>, did: DefId, mutable: bool) -> clean::St\n     }\n }\n \n-fn build_macro(cx: &mut DocContext<'_>, did: DefId, name: Symbol) -> clean::ItemKind {\n-    let imported_from = cx.tcx.crate_name(did.krate);\n-    match cx.enter_resolver(|r| r.cstore().load_macro_untracked(did, cx.sess())) {\n+fn build_macro(cx: &mut DocContext<'_>, def_id: DefId, name: Symbol) -> clean::ItemKind {\n+    let imported_from = cx.tcx.crate_name(def_id.krate);\n+    match cx.enter_resolver(|r| r.cstore().load_macro_untracked(def_id, cx.sess())) {\n         LoadedMacro::MacroDef(item_def, _) => {\n             if let ast::ItemKind::MacroDef(ref def) = item_def.kind {\n-                let tts: Vec<_> = def.body.inner_tokens().into_trees().collect();\n-                let matchers = tts.chunks(4).map(|arm| &arm[0]);\n-                let source = if def.macro_rules {\n-                    format!(\n-                        \"macro_rules! {} {{\\n{}}}\",\n-                        name,\n-                        utils::render_macro_arms(matchers, \";\")\n-                    )\n-                } else {\n-                    let vis = item_def.vis.clean(cx);\n-\n-                    if matchers.len() <= 1 {\n-                        format!(\n-                            \"{}macro {}{} {{\\n    ...\\n}}\",\n-                            vis.to_src_with_space(cx.tcx, did),\n-                            name,\n-                            matchers.map(utils::render_macro_matcher).collect::<String>(),\n-                        )\n-                    } else {\n-                        format!(\n-                            \"{}macro {} {{\\n{}}}\",\n-                            vis.to_src_with_space(cx.tcx, did),\n-                            name,\n-                            utils::render_macro_arms(matchers, \";\"),\n-                        )\n-                    }\n-                };\n-                clean::MacroItem(clean::Macro { source, imported_from: Some(imported_from) })\n+                clean::MacroItem(clean::Macro {\n+                    source: utils::display_macro_source(cx, name, def, def_id, item_def.vis),\n+                    imported_from: Some(imported_from),\n+                })\n             } else {\n                 unreachable!()\n             }"}, {"sha": "7b359ee42c187e6dcd7262889f591ae7e820816a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 27, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/84f259e44c97f787fc3dc5f5c596644b75f32e69/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f259e44c97f787fc3dc5f5c596644b75f32e69/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=84f259e44c97f787fc3dc5f5c596644b75f32e69", "patch": "@@ -2175,37 +2175,15 @@ impl Clean<Item> for (&hir::MacroDef<'_>, Option<Symbol>) {\n     fn clean(&self, cx: &mut DocContext<'_>) -> Item {\n         let (item, renamed) = self;\n         let name = renamed.unwrap_or(item.ident.name);\n-        let tts = item.ast.body.inner_tokens().trees().collect::<Vec<_>>();\n-        // Extract the macro's matchers. They represent the \"interface\" of the macro.\n-        let matchers = tts.chunks(4).map(|arm| &arm[0]);\n-\n-        let source = if item.ast.macro_rules {\n-            format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(matchers, \";\"))\n-        } else {\n-            let vis = item.vis.clean(cx);\n-            let def_id = item.def_id.to_def_id();\n-\n-            if matchers.len() <= 1 {\n-                format!(\n-                    \"{}macro {}{} {{\\n    ...\\n}}\",\n-                    vis.to_src_with_space(cx.tcx, def_id),\n-                    name,\n-                    matchers.map(render_macro_matcher).collect::<String>(),\n-                )\n-            } else {\n-                format!(\n-                    \"{}macro {} {{\\n{}}}\",\n-                    vis.to_src_with_space(cx.tcx, def_id),\n-                    name,\n-                    render_macro_arms(matchers, \",\"),\n-                )\n-            }\n-        };\n+        let def_id = item.def_id.to_def_id();\n \n         Item::from_hir_id_and_parts(\n             item.hir_id(),\n             Some(name),\n-            MacroItem(Macro { source, imported_from: None }),\n+            MacroItem(Macro {\n+                source: display_macro_source(cx, name, &item.ast, def_id, &item.vis),\n+                imported_from: None,\n+            }),\n             cx,\n         )\n     }"}, {"sha": "7ae602c8033f8f65530936397aca0a6553b3d557", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/84f259e44c97f787fc3dc5f5c596644b75f32e69/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84f259e44c97f787fc3dc5f5c596644b75f32e69/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=84f259e44c97f787fc3dc5f5c596644b75f32e69", "patch": "@@ -3,10 +3,12 @@ use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n     inline, Clean, Crate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime,\n     Path, PathSegment, PolyTrait, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n+    Visibility,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n \n+use rustc_ast as ast;\n use rustc_ast::tokenstream::TokenTree;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -577,3 +579,37 @@ pub(super) fn render_macro_arms<'a>(\n pub(super) fn render_macro_matcher(matcher: &TokenTree) -> String {\n     rustc_ast_pretty::pprust::tt_to_string(matcher)\n }\n+\n+pub(super) fn display_macro_source(\n+    cx: &mut DocContext<'_>,\n+    name: Symbol,\n+    def: &ast::MacroDef,\n+    def_id: DefId,\n+    vis: impl Clean<Visibility>,\n+) -> String {\n+    let tts: Vec<_> = def.body.inner_tokens().into_trees().collect();\n+    // Extract the spans of all matchers. They represent the \"interface\" of the macro.\n+    let matchers = tts.chunks(4).map(|arm| &arm[0]);\n+\n+    if def.macro_rules {\n+        format!(\"macro_rules! {} {{\\n{}}}\", name, render_macro_arms(matchers, \";\"))\n+    } else {\n+        let vis = vis.clean(cx);\n+\n+        if matchers.len() <= 1 {\n+            format!(\n+                \"{}macro {}{} {{\\n    ...\\n}}\",\n+                vis.to_src_with_space(cx.tcx, def_id),\n+                name,\n+                matchers.map(render_macro_matcher).collect::<String>(),\n+            )\n+        } else {\n+            format!(\n+                \"{}macro {} {{\\n{}}}\",\n+                vis.to_src_with_space(cx.tcx, def_id),\n+                name,\n+                render_macro_arms(matchers, \",\"),\n+            )\n+        }\n+    }\n+}"}]}