{"sha": "d2e1e6dc759ef6c56e68382a148ed7181ab3a18f", "node_id": "C_kwDOAAsO6NoAKGQyZTFlNmRjNzU5ZWY2YzU2ZTY4MzgyYTE0OGVkNzE4MWFiM2ExOGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-05T20:58:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-05T20:58:54Z"}, "message": "Rollup merge of #88025 - devnexen:netbsd_scm_creds, r=Amanieu\n\nScmCredentials netbsd implementation.", "tree": {"sha": "32b27de4f33c898d5a2b0de8ea8812375d1dabe1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32b27de4f33c898d5a2b0de8ea8812375d1dabe1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2e1e6dc759ef6c56e68382a148ed7181ab3a18f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiTK2PCRBK7hj4Ov3rIwAAmXsIAJQYeh16ddIN0sdQLwaZOfFZ\n/HvuztzF6vzKtw7pHti6j7Zsuq+Jj8ydbbDNzXItN4OibMAu2b7sZ2A0XenKzT2Z\niHvy9tHuR0vA5YXUIaEccNYNLRlp3e9kqpJiobviI74ul42ZqmvI1hPBCQcY2eFa\nsMkF8skYTqHfj/v0liQz5qAYU+vzzrjyenEPnnqlfY7o2Z7o4PU2M+FLNdc5tqJl\nCE22MjBMFXAN76rUEO1tR/hRoNLVpePq7b055haXBODhGpxFgNjgh4iFvzFM6N9W\n0b8RqACeU1/eOdvJGPeX4hT2fFHq+/LAwYk2zv0y53GW9RERkGRImi9Lgj2MFqo=\n=xYTp\n-----END PGP SIGNATURE-----\n", "payload": "tree 32b27de4f33c898d5a2b0de8ea8812375d1dabe1\nparent f262ca12aac76152c4b46cefcf8300f0249a5eb2\nparent 23e6314a31383d69038314a926626e3d8a4056e7\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649192334 +0200\ncommitter GitHub <noreply@github.com> 1649192334 +0200\n\nRollup merge of #88025 - devnexen:netbsd_scm_creds, r=Amanieu\n\nScmCredentials netbsd implementation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2e1e6dc759ef6c56e68382a148ed7181ab3a18f", "html_url": "https://github.com/rust-lang/rust/commit/d2e1e6dc759ef6c56e68382a148ed7181ab3a18f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2e1e6dc759ef6c56e68382a148ed7181ab3a18f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f262ca12aac76152c4b46cefcf8300f0249a5eb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f262ca12aac76152c4b46cefcf8300f0249a5eb2", "html_url": "https://github.com/rust-lang/rust/commit/f262ca12aac76152c4b46cefcf8300f0249a5eb2"}, {"sha": "23e6314a31383d69038314a926626e3d8a4056e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/23e6314a31383d69038314a926626e3d8a4056e7", "html_url": "https://github.com/rust-lang/rust/commit/23e6314a31383d69038314a926626e3d8a4056e7"}], "stats": {"total": 116, "additions": 103, "deletions": 13}, "files": [{"sha": "658c79896eb2e58747f20c5c165989dd86c98748", "filename": "library/std/src/os/unix/net/ancillary.rs", "status": "modified", "additions": 88, "deletions": 9, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1e6dc759ef6c56e68382a148ed7181ab3a18f/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1e6dc759ef6c56e68382a148ed7181ab3a18f/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fancillary.rs?ref=d2e1e6dc759ef6c56e68382a148ed7181ab3a18f", "patch": "@@ -10,7 +10,7 @@ use crate::slice::from_raw_parts;\n use crate::sys::net::Socket;\n \n // FIXME(#43348): Make libc adapt #[doc(cfg(...))] so we don't need these fake definitions here?\n-#[cfg(all(doc, not(target_os = \"linux\"), not(target_os = \"android\")))]\n+#[cfg(all(doc, not(target_os = \"linux\"), not(target_os = \"android\"), not(target_os = \"netbsd\")))]\n #[allow(non_camel_case_types)]\n mod libc {\n     pub use libc::c_int;\n@@ -177,13 +177,24 @@ impl<'a, T> Iterator for AncillaryDataIter<'a, T> {\n     }\n }\n \n+#[cfg(all(doc, not(target_os = \"android\"), not(target_os = \"linux\"), not(target_os = \"netbsd\")))]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+#[derive(Clone)]\n+pub struct SocketCred(());\n+\n /// Unix credential.\n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n #[derive(Clone)]\n pub struct SocketCred(libc::ucred);\n \n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(target_os = \"netbsd\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+#[derive(Clone)]\n+pub struct SocketCred(libc::sockcred);\n+\n+#[doc(cfg(any(target_os = \"android\", target_os = \"linux\")))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\"))]\n impl SocketCred {\n     /// Create a Unix credential struct.\n     ///\n@@ -234,6 +245,61 @@ impl SocketCred {\n     }\n }\n \n+#[cfg(target_os = \"netbsd\")]\n+impl SocketCred {\n+    /// Create a Unix credential struct.\n+    ///\n+    /// PID, UID and GID is set to 0.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn new() -> SocketCred {\n+        SocketCred(libc::sockcred {\n+            sc_pid: 0,\n+            sc_uid: 0,\n+            sc_euid: 0,\n+            sc_gid: 0,\n+            sc_egid: 0,\n+            sc_ngroups: 0,\n+            sc_groups: [0u32; 1],\n+        })\n+    }\n+\n+    /// Set the PID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_pid(&mut self, pid: libc::pid_t) {\n+        self.0.sc_pid = pid;\n+    }\n+\n+    /// Get the current PID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_pid(&self) -> libc::pid_t {\n+        self.0.sc_pid\n+    }\n+\n+    /// Set the UID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_uid(&mut self, uid: libc::uid_t) {\n+        self.0.sc_uid = uid;\n+    }\n+\n+    /// Get the current UID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_uid(&self) -> libc::uid_t {\n+        self.0.sc_uid\n+    }\n+\n+    /// Set the GID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn set_gid(&mut self, gid: libc::gid_t) {\n+        self.0.sc_gid = gid;\n+    }\n+\n+    /// Get the current GID.\n+    #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+    pub fn get_gid(&self) -> libc::gid_t {\n+        self.0.sc_gid\n+    }\n+}\n+\n /// This control message contains file descriptors.\n ///\n /// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_RIGHTS`.\n@@ -249,14 +315,22 @@ impl<'a> Iterator for ScmRights<'a> {\n     }\n }\n \n+#[cfg(all(doc, not(target_os = \"android\"), not(target_os = \"linux\"), not(target_os = \"netbsd\")))]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+pub struct ScmCredentials<'a>(AncillaryDataIter<'a, ()>);\n+\n /// This control message contains unix credentials.\n ///\n /// The level is equal to `SOL_SOCKET` and the type is equal to `SCM_CREDENTIALS` or `SCM_CREDS`.\n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::ucred>);\n \n-#[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+#[cfg(target_os = \"netbsd\")]\n+#[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n+pub struct ScmCredentials<'a>(AncillaryDataIter<'a, libc::sockcred>);\n+\n+#[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n impl<'a> Iterator for ScmCredentials<'a> {\n     type Item = SocketCred;\n@@ -278,7 +352,7 @@ pub enum AncillaryError {\n #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n pub enum AncillaryData<'a> {\n     ScmRights(ScmRights<'a>),\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     ScmCredentials(ScmCredentials<'a>),\n }\n \n@@ -300,8 +374,8 @@ impl<'a> AncillaryData<'a> {\n     /// # Safety\n     ///\n     /// `data` must contain a valid control message and the control message must be type of\n-    /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDENTIALS`.\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    /// `SOL_SOCKET` and level of `SCM_CREDENTIALS` or `SCM_CREDS`.\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     unsafe fn as_credentials(data: &'a [u8]) -> Self {\n         let ancillary_data_iter = AncillaryDataIter::new(data);\n         let scm_credentials = ScmCredentials(ancillary_data_iter);\n@@ -320,6 +394,8 @@ impl<'a> AncillaryData<'a> {\n                     libc::SCM_RIGHTS => Ok(AncillaryData::as_rights(data)),\n                     #[cfg(any(target_os = \"android\", target_os = \"linux\",))]\n                     libc::SCM_CREDENTIALS => Ok(AncillaryData::as_credentials(data)),\n+                    #[cfg(target_os = \"netbsd\")]\n+                    libc::SCM_CREDS => Ok(AncillaryData::as_credentials(data)),\n                     cmsg_type => {\n                         Err(AncillaryError::Unknown { cmsg_level: libc::SOL_SOCKET, cmsg_type })\n                     }\n@@ -531,7 +607,7 @@ impl<'a> SocketAncillary<'a> {\n     /// Technically, that means this operation adds a control message with the level `SOL_SOCKET`\n     /// and type `SCM_CREDENTIALS` or `SCM_CREDS`.\n     ///\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn add_creds(&mut self, creds: &[SocketCred]) -> bool {\n         self.truncated = false;\n@@ -540,7 +616,10 @@ impl<'a> SocketAncillary<'a> {\n             &mut self.length,\n             creds,\n             libc::SOL_SOCKET,\n+            #[cfg(not(target_os = \"netbsd\"))]\n             libc::SCM_CREDENTIALS,\n+            #[cfg(target_os = \"netbsd\")]\n+            libc::SCM_CREDS,\n         )\n     }\n "}, {"sha": "872058b36e62f198a4e2c5a0e63c4ed3c1f744e2", "filename": "library/std/src/os/unix/net/datagram.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1e6dc759ef6c56e68382a148ed7181ab3a18f/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1e6dc759ef6c56e68382a148ed7181ab3a18f/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fdatagram.rs?ref=d2e1e6dc759ef6c56e68382a148ed7181ab3a18f", "patch": "@@ -865,7 +865,7 @@ impl UnixDatagram {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         self.0.set_passcred(passcred)\n@@ -877,7 +877,7 @@ impl UnixDatagram {\n     /// Get the socket option `SO_PASSCRED`.\n     ///\n     /// [`set_passcred`]: UnixDatagram::set_passcred\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn passcred(&self) -> io::Result<bool> {\n         self.0.passcred()"}, {"sha": "cd1aa01fa0f1986f7783ca34d11161f7b66920f7", "filename": "library/std/src/os/unix/net/stream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1e6dc759ef6c56e68382a148ed7181ab3a18f/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1e6dc759ef6c56e68382a148ed7181ab3a18f/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fnet%2Fstream.rs?ref=d2e1e6dc759ef6c56e68382a148ed7181ab3a18f", "patch": "@@ -415,7 +415,7 @@ impl UnixStream {\n     ///     Ok(())\n     /// }\n     /// ```\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n         self.0.set_passcred(passcred)\n@@ -427,7 +427,7 @@ impl UnixStream {\n     /// Get the socket option `SO_PASSCRED`.\n     ///\n     /// [`set_passcred`]: UnixStream::set_passcred\n-    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\",))]\n+    #[cfg(any(doc, target_os = \"android\", target_os = \"linux\", target_os = \"netbsd\",))]\n     #[unstable(feature = \"unix_socket_ancillary_data\", issue = \"76915\")]\n     pub fn passcred(&self) -> io::Result<bool> {\n         self.0.passcred()"}, {"sha": "9bf9607a63e4d1b35f5209a86154e8cd51681e7b", "filename": "library/std/src/sys/unix/net.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d2e1e6dc759ef6c56e68382a148ed7181ab3a18f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2e1e6dc759ef6c56e68382a148ed7181ab3a18f/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fnet.rs?ref=d2e1e6dc759ef6c56e68382a148ed7181ab3a18f", "patch": "@@ -419,6 +419,17 @@ impl Socket {\n         Ok(passcred != 0)\n     }\n \n+    #[cfg(target_os = \"netbsd\")]\n+    pub fn set_passcred(&self, passcred: bool) -> io::Result<()> {\n+        setsockopt(self, 0 as libc::c_int, libc::LOCAL_CREDS, passcred as libc::c_int)\n+    }\n+\n+    #[cfg(target_os = \"netbsd\")]\n+    pub fn passcred(&self) -> io::Result<bool> {\n+        let passcred: libc::c_int = getsockopt(self, 0 as libc::c_int, libc::LOCAL_CREDS)?;\n+        Ok(passcred != 0)\n+    }\n+\n     #[cfg(not(any(target_os = \"solaris\", target_os = \"illumos\")))]\n     pub fn set_nonblocking(&self, nonblocking: bool) -> io::Result<()> {\n         let mut nonblocking = nonblocking as libc::c_int;"}]}