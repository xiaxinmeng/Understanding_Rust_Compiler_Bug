{"sha": "5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViZmVlZTVmZTAxNDBiMGMyZTVjOTZiMzIwOGMwMmM0YWIwNGY4YjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-25T01:56:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-25T01:56:06Z"}, "message": "Auto merge of #77172 - jonas-schievink:rollup-a041rou, r=jonas-schievink\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #75438 (Use adaptive SVG favicon for rustdoc like other rust sites)\n - #76304 (Make delegation methods of `std::net::IpAddr` unstably const)\n - #76724 (Allow a unique name to be assigned to dataflow graphviz output)\n - #76978 (Documented From impls in std/sync/mpsc/mod.rs)\n - #77044 (Liballoc bench vec use mem take not replace)\n - #77050 (Typo fix: \"satsify\" -> \"satisfy\")\n - #77074 (add array::from_ref)\n - #77078 (Don't use an if guard to check equality with a constant)\n - #77079 (Use `Self` in docs when possible)\n - #77081 (Merge two almost identical match arms)\n - #77121 (Updated html_root_url for compiler crates)\n - #77136 (Suggest `const_mut_refs`, not `const_fn` for mutable references in `const fn`)\n - #77160 (Suggest `const_fn_transmute`, not `const_fn`)\n - #77164 (Remove workaround for deref issue that no longer exists.)\n - #77165 (Followup to #76673)\n\nFailed merges:\n\nr? `@ghost`", "tree": {"sha": "4e1be7a9d1e489062747d0d9057a6608dfc046f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e1be7a9d1e489062747d0d9057a6608dfc046f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "html_url": "https://github.com/rust-lang/rust/commit/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b5c98f6406acb8b86375c45b16bca51441c59dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5c98f6406acb8b86375c45b16bca51441c59dd", "html_url": "https://github.com/rust-lang/rust/commit/9b5c98f6406acb8b86375c45b16bca51441c59dd"}, {"sha": "8515efb19315130dfabde72705686565da239e9f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8515efb19315130dfabde72705686565da239e9f", "html_url": "https://github.com/rust-lang/rust/commit/8515efb19315130dfabde72705686565da239e9f"}], "stats": {"total": 579, "additions": 365, "deletions": 214}, "files": [{"sha": "4a845fcb6917b76f57e7d6474cba13ede8ff805c", "filename": "compiler/rustc_apfloat/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -30,7 +30,7 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![no_std]\n #![forbid(unsafe_code)]\n #![feature(nll)]"}, {"sha": "b4bf31b1abae58231596ec8bf091faad1cc70310", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -8,7 +8,7 @@\n //! This crate implements several kinds of arena.\n \n #![doc(\n-    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+    html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\",\n     test(no_crate_inject, attr(deny(warnings)))\n )]\n #![feature(dropck_eyepatch)]"}, {"sha": "6e47ff7d740810bde946274239b707f571f8b3d4", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -4,7 +4,10 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\", test(attr(deny(warnings))))]\n+#![doc(\n+    html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\",\n+    test(attr(deny(warnings)))\n+)]\n #![feature(box_syntax)]\n #![feature(const_fn)] // For the `transmute` in `P::new`\n #![feature(const_fn_transmute)]"}, {"sha": "1808eb270baa9cd81e35491ea19507dc49919304", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -301,7 +301,7 @@ where\n                                                 .emit();\n                                             };\n                                             match issue.parse() {\n-                                                Ok(num) if num == 0 => {\n+                                                Ok(0) => {\n                                                     emit_diag(\n                                                         \"`issue` must not be \\\"0\\\", \\\n                                                         use \\\"none\\\" instead\","}, {"sha": "ff81b5eca13a7e397c257fb2211197b59d6022d1", "filename": "compiler/rustc_builtin_macros/src/format_foreign.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat_foreign.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -518,8 +518,7 @@ pub mod printf {\n                         .and_then(|end| end.at_next_cp())\n                         .map(|end| (next.slice_between(end).unwrap(), end));\n                     let end = match end {\n-                        Some((\"32\", end)) => end,\n-                        Some((\"64\", end)) => end,\n+                        Some((\"32\" | \"64\", end)) => end,\n                         _ => next,\n                     };\n                     state = Type;"}, {"sha": "97cadb913cacff2d60c172df9954dd78c5f47a31", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,7 +1,7 @@\n //! This crate contains implementations of built-in macros and other code generating facilities\n //! injecting code into the crate before it is lowered to HIR.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]"}, {"sha": "456e9c7ce75fa220f57b72d0c2f12c155d87db1f", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -4,7 +4,7 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(const_cstr_unchecked)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "8568bd64f4c4f48adda8e3c83f223524b21051d9", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,4 +1,4 @@\n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(option_expect_none)]\n #![feature(box_patterns)]"}, {"sha": "9ded10e9c26ac9ef02200645db7b12b75cf315ec", "filename": "compiler/rustc_data_structures/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -6,7 +6,7 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![allow(incomplete_features)]\n #![feature(array_windows)]\n #![feature(control_flow_enum)]"}, {"sha": "7118437c0c8500cdf0072a71495215dcdad7e87d", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -4,7 +4,7 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(nll)]\n #![feature(once_cell)]\n #![recursion_limit = \"256\"]"}, {"sha": "2e8a4ef327ac4474751025d59cf8f2fd9c6a9b4d", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -2,7 +2,7 @@\n //!\n //! This module contains the code for creating and emitting diagnostics.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(crate_visibility_modifier)]\n #![feature(backtrace)]\n #![feature(nll)]"}, {"sha": "76e33bed97f27f3999da68b8970e8695a2e97b1a", "filename": "compiler/rustc_graphviz/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_graphviz%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -272,7 +272,7 @@\n //! * [DOT language](http://www.graphviz.org/doc/info/lang.html)\n \n #![doc(\n-    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+    html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\",\n     test(attr(allow(unused_variables), deny(warnings)))\n )]\n #![feature(nll)]"}, {"sha": "a80c4be3e93352aeca28814bbc463a6ae977a301", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,6 +1,6 @@\n //! Support for serializing the dep-graph and reloading it.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]"}, {"sha": "ea9a46613484ab983a551c0b9c8d476a38e8a4b2", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -12,7 +12,7 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]"}, {"sha": "7f7472d9283b8dd7658c034c1f069b5dbe33cb7f", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -25,7 +25,7 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![cfg_attr(test, feature(test))]\n #![feature(array_windows)]\n #![feature(bool_to_option)]"}, {"sha": "a7a10b91b4eca1b77b7d173026cadcdb7cf382af", "filename": "compiler/rustc_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,6 +1,6 @@\n #![feature(nll)]\n #![feature(static_nobundle)]\n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n \n // NOTE: This crate only exists to allow linking on mingw targets.\n "}, {"sha": "77766be7397c7468306b1beb3f5a974045a3b4f3", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,4 +1,4 @@\n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(core_intrinsics)]\n #![feature(crate_visibility_modifier)]"}, {"sha": "fa885ce2e7cdfb4ded4be2cd0090a3cc352746e7", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -22,7 +22,7 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n #![feature(backtrace)]\n #![feature(bool_to_option)]"}, {"sha": "8909f02270cb36c33b07dcac63887a5272b4d2fd", "filename": "compiler/rustc_middle/src/mir/terminator/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fterminator%2Fmod.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -96,6 +96,8 @@ pub enum TerminatorKind<'tcx> {\n     ///   P <- V\n     /// }\n     /// ```\n+    ///\n+    /// Note that DropAndReplace is eliminated as part of the `ElaborateDrops` pass.\n     DropAndReplace {\n         place: Place<'tcx>,\n         value: Operand<'tcx>,"}, {"sha": "e4237482f47fa8efabc4e737a24dff1d27c968a0", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -205,6 +205,7 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     let mut flow_inits = MaybeInitializedPlaces::new(tcx, &body, &mdpe)\n         .into_engine(tcx, &body, def.did.to_def_id())\n+        .pass_name(\"borrowck\")\n         .iterate_to_fixpoint()\n         .into_results_cursor(&body);\n \n@@ -264,12 +265,15 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     let flow_borrows = Borrows::new(tcx, &body, regioncx.clone(), &borrow_set)\n         .into_engine(tcx, &body, def.did.to_def_id())\n+        .pass_name(\"borrowck\")\n         .iterate_to_fixpoint();\n     let flow_uninits = MaybeUninitializedPlaces::new(tcx, &body, &mdpe)\n         .into_engine(tcx, &body, def.did.to_def_id())\n+        .pass_name(\"borrowck\")\n         .iterate_to_fixpoint();\n     let flow_ever_inits = EverInitializedPlaces::new(tcx, &body, &mdpe)\n         .into_engine(tcx, &body, def.did.to_def_id())\n+        .pass_name(\"borrowck\")\n         .iterate_to_fixpoint();\n \n     let movable_generator = match tcx.hir().get(id) {"}, {"sha": "f39c78f503daed8aff0461584a715fdd38a6620f", "filename": "compiler/rustc_mir/src/dataflow/framework/engine.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fengine.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -84,6 +84,7 @@ where\n     def_id: DefId,\n     dead_unwinds: Option<&'a BitSet<BasicBlock>>,\n     entry_sets: IndexVec<BasicBlock, A::Domain>,\n+    pass_name: Option<&'static str>,\n     analysis: A,\n \n     /// Cached, cumulative transfer functions for each block.\n@@ -174,6 +175,7 @@ where\n             body,\n             def_id,\n             dead_unwinds: None,\n+            pass_name: None,\n             entry_sets,\n             apply_trans_for_block,\n         }\n@@ -189,6 +191,15 @@ where\n         self\n     }\n \n+    /// Adds an identifier to the graphviz output for this particular run of a dataflow analysis.\n+    ///\n+    /// Some analyses are run multiple times in the compilation pipeline. Give them a `pass_name`\n+    /// to differentiate them. Otherwise, only the results for the latest run will be saved.\n+    pub fn pass_name(mut self, name: &'static str) -> Self {\n+        self.pass_name = Some(name);\n+        self\n+    }\n+\n     /// Computes the fixpoint for this dataflow problem and returns it.\n     pub fn iterate_to_fixpoint(self) -> Results<'tcx, A>\n     where\n@@ -202,6 +213,7 @@ where\n             mut entry_sets,\n             tcx,\n             apply_trans_for_block,\n+            pass_name,\n             ..\n         } = self;\n \n@@ -249,7 +261,7 @@ where\n \n         let results = Results { analysis, entry_sets };\n \n-        let res = write_graphviz_results(tcx, def_id, &body, &results);\n+        let res = write_graphviz_results(tcx, def_id, &body, &results, pass_name);\n         if let Err(e) = res {\n             warn!(\"Failed to write graphviz dataflow results: {}\", e);\n         }\n@@ -267,6 +279,7 @@ fn write_graphviz_results<A>(\n     def_id: DefId,\n     body: &mir::Body<'tcx>,\n     results: &Results<'tcx, A>,\n+    pass_name: Option<&'static str>,\n ) -> std::io::Result<()>\n where\n     A: Analysis<'tcx>,\n@@ -285,12 +298,17 @@ where\n         None if tcx.sess.opts.debugging_opts.dump_mir_dataflow\n             && dump_enabled(tcx, A::NAME, def_id) =>\n         {\n+            // FIXME: Use some variant of `pretty::dump_path` for this\n             let mut path = PathBuf::from(&tcx.sess.opts.debugging_opts.dump_mir_dir);\n \n+            let crate_name = tcx.crate_name(def_id.krate);\n             let item_name = ty::print::with_forced_impl_filename_line(|| {\n                 tcx.def_path(def_id).to_filename_friendly_no_crate()\n             });\n-            path.push(format!(\"rustc.{}.{}.dot\", item_name, A::NAME));\n+\n+            let pass_name = pass_name.map(|s| format!(\".{}\", s)).unwrap_or_default();\n+\n+            path.push(format!(\"{}.{}.{}{}.dot\", crate_name, item_name, A::NAME, pass_name));\n             path\n         }\n "}, {"sha": "496e620dd9df61d10b53e061b1eee67008561b04", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -489,7 +489,14 @@ impl NonConstOp for Transmute {\n     }\n \n     fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-        mcf_emit_error(ccx, span, \"can only call `transmute` from const items, not `const fn`\");\n+        feature_err(\n+            &ccx.tcx.sess.parse_sess,\n+            sym::const_fn_transmute,\n+            span,\n+            &format!(\"`transmute` is not allowed in {}s\", ccx.const_kind()),\n+        )\n+        .note(\"`transmute` is only allowed in constants and statics for now\")\n+        .emit();\n     }\n }\n \n@@ -535,6 +542,7 @@ impl NonConstOp for UnsizingCast {\n     }\n }\n \n+// Types that cannot appear in the signature or locals of a `const fn`.\n pub mod ty {\n     use super::*;\n \n@@ -548,7 +556,13 @@ pub mod ty {\n         }\n \n         fn emit_error(&self, ccx: &ConstCx<'_, '_>, span: Span) {\n-            mcf_emit_error(ccx, span, \"mutable references in const fn are unstable\");\n+            feature_err(\n+                &ccx.tcx.sess.parse_sess,\n+                sym::const_mut_refs,\n+                span,\n+                &format!(\"mutable references are not allowed in {}s\", ccx.const_kind()),\n+            )\n+            .emit()\n         }\n     }\n "}, {"sha": "dc28ba46d7cbbe0cf7fca6a3c9e1e24fbd34c7b3", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -59,6 +59,7 @@ impl Qualifs<'mir, 'tcx> {\n             MaybeMutBorrowedLocals::mut_borrows_only(tcx, &body, param_env)\n                 .unsound_ignore_borrow_on_drop()\n                 .into_engine(tcx, &body, def_id.to_def_id())\n+                .pass_name(\"const_qualification\")\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(&body)\n         });"}, {"sha": "a8b2ee5705f1f16590bae7f2e681f0ca1e3cd272", "filename": "compiler/rustc_mir/src/transform/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Felaborate_drops.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -44,13 +44,15 @@ impl<'tcx> MirPass<'tcx> for ElaborateDrops {\n             let inits = MaybeInitializedPlaces::new(tcx, body, &env)\n                 .into_engine(tcx, body, def_id)\n                 .dead_unwinds(&dead_unwinds)\n+                .pass_name(\"elaborate_drops\")\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(body);\n \n             let uninits = MaybeUninitializedPlaces::new(tcx, body, &env)\n                 .mark_inactive_variants_as_uninit()\n                 .into_engine(tcx, body, def_id)\n                 .dead_unwinds(&dead_unwinds)\n+                .pass_name(\"elaborate_drops\")\n                 .iterate_to_fixpoint()\n                 .into_results_cursor(body);\n \n@@ -83,6 +85,7 @@ fn find_dead_unwinds<'tcx>(\n     let mut dead_unwinds = BitSet::new_empty(body.basic_blocks().len());\n     let mut flow_inits = MaybeInitializedPlaces::new(tcx, body, &env)\n         .into_engine(tcx, body, def_id)\n+        .pass_name(\"find_dead_unwinds\")\n         .iterate_to_fixpoint()\n         .into_results_cursor(body);\n     for (bb, bb_data) in body.basic_blocks().iter_enumerated() {"}, {"sha": "1fffcf81515377dcc039e80e1bb863c5de6b7f2e", "filename": "compiler/rustc_mir/src/transform/generator.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fgenerator.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -467,8 +467,10 @@ fn locals_live_across_suspend_points(\n \n     // Calculate the MIR locals which have been previously\n     // borrowed (even if they are still active).\n-    let borrowed_locals_results =\n-        MaybeBorrowedLocals::all_borrows().into_engine(tcx, body_ref, def_id).iterate_to_fixpoint();\n+    let borrowed_locals_results = MaybeBorrowedLocals::all_borrows()\n+        .into_engine(tcx, body_ref, def_id)\n+        .pass_name(\"generator\")\n+        .iterate_to_fixpoint();\n \n     let mut borrowed_locals_cursor =\n         dataflow::ResultsCursor::new(body_ref, &borrowed_locals_results);\n@@ -484,6 +486,7 @@ fn locals_live_across_suspend_points(\n     // Calculate the liveness of MIR locals ignoring borrows.\n     let mut liveness = MaybeLiveLocals\n         .into_engine(tcx, body_ref, def_id)\n+        .pass_name(\"generator\")\n         .iterate_to_fixpoint()\n         .into_results_cursor(body_ref);\n "}, {"sha": "b9f29786c64ea2c2a803645ad02971e05e17e31c", "filename": "compiler/rustc_mir/src/transform/remove_unneeded_drops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fremove_unneeded_drops.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -38,8 +38,7 @@ impl<'tcx> MirPass<'tcx> for RemoveUnneededDrops {\n impl<'a, 'tcx> Visitor<'tcx> for RemoveUnneededDropsOptimizationFinder<'a, 'tcx> {\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         match terminator.kind {\n-            TerminatorKind::Drop { place, target, .. }\n-            | TerminatorKind::DropAndReplace { place, target, .. } => {\n+            TerminatorKind::Drop { place, target, .. } => {\n                 let ty = place.ty(self.body, self.tcx);\n                 let needs_drop = ty.ty.needs_drop(self.tcx, self.tcx.param_env(self.def_id));\n                 if !needs_drop {"}, {"sha": "25e3e67e28e6c9811e028d27bd054e5049ccb0c6", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -5,7 +5,7 @@\n //! generated instead.\n \n #![doc(\n-    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+    html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\",\n     html_playground_url = \"https://play.rust-lang.org/\",\n     test(attr(deny(warnings)))\n )]"}, {"sha": "c14d6aace87e0d07dead622c3413f8d87e819937", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -4,7 +4,7 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(or_patterns)]"}, {"sha": "5bf4d300e9e54e991b02de9f8925cb7591d956c6", "filename": "compiler/rustc_plugin_impl/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_plugin_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_plugin_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_plugin_impl%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -6,7 +6,7 @@\n //! feature](https://doc.rust-lang.org/nightly/unstable-book/language-features/plugin.html)\n //! of the Unstable Book for some examples.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "8d1b826ea3595e5251acc05f5e2e7dbee5a8a5e3", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,4 +1,4 @@\n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]"}, {"sha": "283db1404d0a4eb591f2818b97bdeaf72f1e1811", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -8,7 +8,7 @@\n //!\n //! Type-relative name resolution (methods, fields, associated items) happens in `librustc_typeck`.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(nll)]"}, {"sha": "f6434689fec0174a1f95a4c4d71e6949b0509cea", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,4 +1,4 @@\n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(nll)]\n #![feature(or_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "ed48fbf40ac1fe2002665e230feb77a3aa636d21", "filename": "compiler/rustc_serialize/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_serialize%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -5,7 +5,7 @@ Core encoding and decoding interfaces.\n */\n \n #![doc(\n-    html_root_url = \"https://doc.rust-lang.org/nightly/\",\n+    html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\",\n     html_playground_url = \"https://play.rust-lang.org/\",\n     test(attr(allow(unused_variables), deny(warnings)))\n )]"}, {"sha": "96a6956a40c54a7b13d5352e9c06e362d19d03e7", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -4,7 +4,7 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(array_windows)]\n #![feature(crate_visibility_modifier)]\n #![feature(const_fn)]"}, {"sha": "75150a56c43bef02b4c2f15b49aee302425f586a", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -87,7 +87,7 @@\n //! virtually impossible. Thus, symbol hash generation exclusively relies on\n //! DefPaths which are much more robust in the face of changes to the code base.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(or_patterns)]"}, {"sha": "fb747dfcbd337a4eb4b045711c2504d4f8a3e2d3", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -7,7 +7,7 @@\n //! more 'stuff' here in the future. It does not have a dependency on\n //! LLVM.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(const_fn)]\n #![feature(const_panic)]"}, {"sha": "ddeab340f381b5193d238cdc03c5239e59a497ec", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -10,7 +10,7 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(drain_filter)]"}, {"sha": "904c0062a926fae436baeca592d1db14ecabd351", "filename": "compiler/rustc_ty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -4,7 +4,7 @@\n //!\n //! This API is completely unstable and subject to change.\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(nll)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "84efb92582ed2ae521011de7e0af7f4bb28f26af", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -55,7 +55,7 @@ This API is completely unstable and subject to change.\n \n */\n \n-#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n+#![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![allow(non_camel_case_types)]\n #![feature(bool_to_option)]\n #![feature(box_syntax)]"}, {"sha": "687efa8e9e777241f2df6e49a1fcacf9b6c29805", "filename": "library/alloc/benches/vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Falloc%2Fbenches%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Falloc%2Fbenches%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fbenches%2Fvec.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -241,7 +241,7 @@ fn bench_extend_recycle(b: &mut Bencher) {\n     let mut data = vec![0; 1000];\n \n     b.iter(|| {\n-        let tmp = std::mem::replace(&mut data, Vec::new());\n+        let tmp = std::mem::take(&mut data);\n         let mut to_extend = black_box(Vec::new());\n         to_extend.extend(tmp.into_iter());\n         data = black_box(to_extend);\n@@ -500,7 +500,7 @@ fn bench_in_place_recycle(b: &mut Bencher) {\n     let mut data = vec![0; 1000];\n \n     b.iter(|| {\n-        let tmp = std::mem::replace(&mut data, Vec::new());\n+        let tmp = std::mem::take(&mut data);\n         data = black_box(\n             tmp.into_iter()\n                 .enumerate()\n@@ -520,7 +520,7 @@ fn bench_in_place_zip_recycle(b: &mut Bencher) {\n     rng.fill_bytes(&mut subst[..]);\n \n     b.iter(|| {\n-        let tmp = std::mem::replace(&mut data, Vec::new());\n+        let tmp = std::mem::take(&mut data);\n         let mangled = tmp\n             .into_iter()\n             .zip(subst.iter().copied())"}, {"sha": "f2852b1cc2b8099c4b51ffbedbf69f9e893480e0", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -30,7 +30,7 @@\n //! // Explicitly implement the trait so the queue becomes a min-heap\n //! // instead of a max-heap.\n //! impl Ord for State {\n-//!     fn cmp(&self, other: &State) -> Ordering {\n+//!     fn cmp(&self, other: &Self) -> Ordering {\n //!         // Notice that the we flip the ordering on costs.\n //!         // In case of a tie we compare positions - this step is necessary\n //!         // to make implementations of `PartialEq` and `Ord` consistent.\n@@ -41,7 +41,7 @@\n //!\n //! // `PartialOrd` needs to be implemented as well.\n //! impl PartialOrd for State {\n-//!     fn partial_cmp(&self, other: &State) -> Option<Ordering> {\n+//!     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n //!         Some(self.cmp(other))\n //!     }\n //! }"}, {"sha": "c54b3aef95ed401d294a22a5a2884add30c8d1ba", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -412,7 +412,7 @@ impl<T> Vec<T> {\n     ///   (at least, it's highly likely to be incorrect if it wasn't).\n     /// * `T` needs to have the same size and alignment as what `ptr` was allocated with.\n     ///   (`T` having a less strict alignment is not sufficient, the alignment really\n-    ///   needs to be equal to satsify the [`dealloc`] requirement that memory must be\n+    ///   needs to be equal to satisfy the [`dealloc`] requirement that memory must be\n     ///   allocated and deallocated with the same layout.)\n     /// * `length` needs to be less than or equal to `capacity`.\n     /// * `capacity` needs to be the capacity that the pointer was allocated with."}, {"sha": "966272ca115491005ba2747be6cd067b207023d1", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -19,6 +19,20 @@ mod iter;\n #[unstable(feature = \"array_value_iter\", issue = \"65798\")]\n pub use iter::IntoIter;\n \n+/// Converts a reference to `T` into a reference to an array of length 1 (without copying).\n+#[unstable(feature = \"array_from_ref\", issue = \"77101\")]\n+pub fn from_ref<T>(s: &T) -> &[T; 1] {\n+    // SAFETY: Converting `&T` to `&[T; 1]` is sound.\n+    unsafe { &*(s as *const T).cast::<[T; 1]>() }\n+}\n+\n+/// Converts a mutable reference to `T` into a mutable reference to an array of length 1 (without copying).\n+#[unstable(feature = \"array_from_ref\", issue = \"77101\")]\n+pub fn from_mut<T>(s: &mut T) -> &mut [T; 1] {\n+    // SAFETY: Converting `&mut T` to `&mut [T; 1]` is sound.\n+    unsafe { &mut *(s as *mut T).cast::<[T; 1]>() }\n+}\n+\n /// Utility trait implemented only on arrays of fixed size\n ///\n /// This trait can be used to implement other traits on fixed-size arrays"}, {"sha": "ee79a94cc66ab6b1da732740e733f664a24bfb88", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -726,19 +726,19 @@ impl PartialOrd for Ordering {\n /// }\n ///\n /// impl PartialOrd for Person {\n-///     fn partial_cmp(&self, other: &Person) -> Option<Ordering> {\n+///     fn partial_cmp(&self, other: &Self) -> Option<Ordering> {\n ///         Some(self.cmp(other))\n ///     }\n /// }\n ///\n /// impl Ord for Person {\n-///     fn cmp(&self, other: &Person) -> Ordering {\n+///     fn cmp(&self, other: &Self) -> Ordering {\n ///         self.height.cmp(&other.height)\n ///     }\n /// }\n ///\n /// impl PartialEq for Person {\n-///     fn eq(&self, other: &Person) -> bool {\n+///     fn eq(&self, other: &Self) -> bool {\n ///         self.height == other.height\n ///     }\n /// }"}, {"sha": "cdf742057b7b6f37458e1a009f774f2815dd6127", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -643,9 +643,9 @@ macro_rules! impls {\n /// }\n ///\n /// impl<R: ResType> ExternalResource<R> {\n-///     fn new() -> ExternalResource<R> {\n+///     fn new() -> Self {\n ///         let size_of_res = mem::size_of::<R>();\n-///         ExternalResource {\n+///         Self {\n ///             resource_handle: foreign_lib::new(size_of_res),\n ///             resource_type: PhantomData,\n ///         }"}, {"sha": "19f86ced5007ceb72e5de4647cb363b21732c231", "filename": "library/core/src/ops/arith.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Fsrc%2Fops%2Farith.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Farith.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -128,10 +128,10 @@ add_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n /// }\n ///\n /// impl Sub for Point {\n-///     type Output = Point;\n+///     type Output = Self;\n ///\n-///     fn sub(self, other: Point) -> Point {\n-///         Point {\n+///     fn sub(self, other: Self) -> Self::Output {\n+///         Self {\n ///             x: self.x - other.x,\n ///             y: self.y - other.y,\n ///         }\n@@ -241,7 +241,7 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n ///         // Reduce to lowest terms by dividing by the greatest common\n ///         // divisor.\n ///         let gcd = gcd(numerator, denominator);\n-///         Rational {\n+///         Self {\n ///             numerator: numerator / gcd,\n ///             denominator: denominator / gcd,\n ///         }\n@@ -255,7 +255,7 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n ///     fn mul(self, rhs: Self) -> Self {\n ///         let numerator = self.numerator * rhs.numerator;\n ///         let denominator = self.denominator * rhs.denominator;\n-///         Rational::new(numerator, denominator)\n+///         Self::new(numerator, denominator)\n ///     }\n /// }\n ///\n@@ -291,7 +291,7 @@ sub_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n ///     type Output = Self;\n ///\n ///     fn mul(self, rhs: Scalar) -> Self::Output {\n-///         Vector { value: self.value.iter().map(|v| v * rhs.value).collect() }\n+///         Self { value: self.value.iter().map(|v| v * rhs.value).collect() }\n ///     }\n /// }\n ///\n@@ -369,7 +369,7 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n ///         // Reduce to lowest terms by dividing by the greatest common\n ///         // divisor.\n ///         let gcd = gcd(numerator, denominator);\n-///         Rational {\n+///         Self {\n ///             numerator: numerator / gcd,\n ///             denominator: denominator / gcd,\n ///         }\n@@ -387,7 +387,7 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n ///\n ///         let numerator = self.numerator * rhs.denominator;\n ///         let denominator = self.denominator * rhs.numerator;\n-///         Rational::new(numerator, denominator)\n+///         Self::new(numerator, denominator)\n ///     }\n /// }\n ///\n@@ -423,7 +423,7 @@ mul_impl! { usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 f32 f64 }\n ///     type Output = Self;\n ///\n ///     fn div(self, rhs: Scalar) -> Self::Output {\n-///         Vector { value: self.value.iter().map(|v| v / rhs.value).collect() }\n+///         Self { value: self.value.iter().map(|v| v / rhs.value).collect() }\n ///     }\n /// }\n ///\n@@ -515,7 +515,7 @@ div_impl_float! { f32 f64 }\n ///         let len = self.slice.len();\n ///         let rem = len % modulus;\n ///         let start = len - rem;\n-///         SplitSlice {slice: &self.slice[start..]}\n+///         Self {slice: &self.slice[start..]}\n ///     }\n /// }\n ///\n@@ -615,7 +615,7 @@ rem_impl_float! { f32 f64 }\n /// }\n ///\n /// impl Neg for Sign {\n-///     type Output = Sign;\n+///     type Output = Self;\n ///\n ///     fn neg(self) -> Self::Output {\n ///         match self {"}, {"sha": "6120da50c3cdfe4036a3d8c0d1b68cc760fd2eba", "filename": "library/core/src/ops/bit.rs", "status": "modified", "additions": 36, "deletions": 33, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fbit.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -15,7 +15,7 @@\n /// }\n ///\n /// impl Not for Answer {\n-///     type Output = Answer;\n+///     type Output = Self;\n ///\n ///     fn not(self) -> Self::Output {\n ///         match self {\n@@ -85,7 +85,7 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n ///\n ///     // rhs is the \"right-hand side\" of the expression `a & b`\n ///     fn bitand(self, rhs: Self) -> Self::Output {\n-///         Scalar(self.0 & rhs.0)\n+///         Self(self.0 & rhs.0)\n ///     }\n /// }\n ///\n@@ -106,10 +106,13 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// impl BitAnd for BooleanVector {\n ///     type Output = Self;\n ///\n-///     fn bitand(self, BooleanVector(rhs): Self) -> Self::Output {\n-///         let BooleanVector(lhs) = self;\n+///     fn bitand(self, Self(rhs): Self) -> Self::Output {\n+///         let Self(lhs) = self;\n ///         assert_eq!(lhs.len(), rhs.len());\n-///         BooleanVector(lhs.iter().zip(rhs.iter()).map(|(x, y)| *x && *y).collect())\n+///         Self(lhs.iter()\n+///                 .zip(rhs.iter())\n+///                 .map(|(x, y)| *x && *y)\n+///                 .collect())\n ///     }\n /// }\n ///\n@@ -179,8 +182,8 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n ///     type Output = Self;\n ///\n ///     // rhs is the \"right-hand side\" of the expression `a | b`\n-///     fn bitor(self, rhs: Self) -> Self {\n-///         Scalar(self.0 | rhs.0)\n+///     fn bitor(self, rhs: Self) -> Self::Output {\n+///         Self(self.0 | rhs.0)\n ///     }\n /// }\n ///\n@@ -201,10 +204,10 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// impl BitOr for BooleanVector {\n ///     type Output = Self;\n ///\n-///     fn bitor(self, BooleanVector(rhs): Self) -> Self::Output {\n-///         let BooleanVector(lhs) = self;\n+///     fn bitor(self, Self(rhs): Self) -> Self::Output {\n+///         let Self(lhs) = self;\n ///         assert_eq!(lhs.len(), rhs.len());\n-///         BooleanVector(lhs.iter().zip(rhs.iter()).map(|(x, y)| *x || *y).collect())\n+///         Self(lhs.iter().zip(rhs.iter()).map(|(x, y)| *x || *y).collect())\n ///     }\n /// }\n ///\n@@ -275,7 +278,7 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n ///\n ///     // rhs is the \"right-hand side\" of the expression `a ^ b`\n ///     fn bitxor(self, rhs: Self) -> Self::Output {\n-///         Scalar(self.0 ^ rhs.0)\n+///         Self(self.0 ^ rhs.0)\n ///     }\n /// }\n ///\n@@ -296,13 +299,13 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// impl BitXor for BooleanVector {\n ///     type Output = Self;\n ///\n-///     fn bitxor(self, BooleanVector(rhs): Self) -> Self::Output {\n-///         let BooleanVector(lhs) = self;\n+///     fn bitxor(self, Self(rhs): Self) -> Self::Output {\n+///         let Self(lhs) = self;\n ///         assert_eq!(lhs.len(), rhs.len());\n-///         BooleanVector(lhs.iter()\n-///                          .zip(rhs.iter())\n-///                          .map(|(x, y)| (*x || *y) && !(*x && *y))\n-///                          .collect())\n+///         Self(lhs.iter()\n+///                 .zip(rhs.iter())\n+///                 .map(|(x, y)| (*x || *y) && !(*x && *y))\n+///                 .collect())\n ///     }\n /// }\n ///\n@@ -375,9 +378,9 @@ bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n /// impl Shl<Scalar> for Scalar {\n ///     type Output = Self;\n ///\n-///     fn shl(self, Scalar(rhs): Self) -> Scalar {\n-///         let Scalar(lhs) = self;\n-///         Scalar(lhs << rhs)\n+///     fn shl(self, Self(rhs): Self) -> Self::Output {\n+///         let Self(lhs) = self;\n+///         Self(lhs << rhs)\n ///     }\n /// }\n ///\n@@ -400,10 +403,10 @@ bitxor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n ///     fn shl(self, rhs: usize) -> Self::Output {\n ///         // Rotate the vector by `rhs` places.\n ///         let (a, b) = self.vec.split_at(rhs);\n-///         let mut spun_vector: Vec<T> = vec![];\n+///         let mut spun_vector = vec![];\n ///         spun_vector.extend_from_slice(b);\n ///         spun_vector.extend_from_slice(a);\n-///         SpinVector { vec: spun_vector }\n+///         Self { vec: spun_vector }\n ///     }\n /// }\n ///\n@@ -493,9 +496,9 @@ shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n /// impl Shr<Scalar> for Scalar {\n ///     type Output = Self;\n ///\n-///     fn shr(self, Scalar(rhs): Self) -> Scalar {\n-///         let Scalar(lhs) = self;\n-///         Scalar(lhs >> rhs)\n+///     fn shr(self, Self(rhs): Self) -> Self::Output {\n+///         let Self(lhs) = self;\n+///         Self(lhs >> rhs)\n ///     }\n /// }\n ///\n@@ -518,10 +521,10 @@ shl_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 isize i128 }\n ///     fn shr(self, rhs: usize) -> Self::Output {\n ///         // Rotate the vector by `rhs` places.\n ///         let (a, b) = self.vec.split_at(self.vec.len() - rhs);\n-///         let mut spun_vector: Vec<T> = vec![];\n+///         let mut spun_vector = vec![];\n ///         spun_vector.extend_from_slice(b);\n ///         spun_vector.extend_from_slice(a);\n-///         SpinVector { vec: spun_vector }\n+///         Self { vec: spun_vector }\n ///     }\n /// }\n ///\n@@ -606,7 +609,7 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n /// impl BitAndAssign for Scalar {\n ///     // rhs is the \"right-hand side\" of the expression `a &= b`\n ///     fn bitand_assign(&mut self, rhs: Self) {\n-///         *self = Scalar(self.0 & rhs.0)\n+///         *self = Self(self.0 & rhs.0)\n ///     }\n /// }\n ///\n@@ -640,11 +643,11 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n ///     // `rhs` is the \"right-hand side\" of the expression `a &= b`.\n ///     fn bitand_assign(&mut self, rhs: Self) {\n ///         assert_eq!(self.0.len(), rhs.0.len());\n-///         *self = BooleanVector(self.0\n-///                                   .iter()\n-///                                   .zip(rhs.0.iter())\n-///                                   .map(|(x, y)| *x && *y)\n-///                                   .collect());\n+///         *self = Self(self.0\n+///                          .iter()\n+///                          .zip(rhs.0.iter())\n+///                          .map(|(x, y)| *x && *y)\n+///                          .collect());\n ///     }\n /// }\n ///"}, {"sha": "354ad6b7b7333b0cc4a2b42083db8dca7b808738", "filename": "library/core/src/ops/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fmod.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -49,18 +49,18 @@\n //! }\n //!\n //! impl Add for Point {\n-//!     type Output = Point;\n+//!     type Output = Self;\n //!\n-//!     fn add(self, other: Point) -> Point {\n-//!         Point {x: self.x + other.x, y: self.y + other.y}\n+//!     fn add(self, other: Self) -> Self {\n+//!         Self {x: self.x + other.x, y: self.y + other.y}\n //!     }\n //! }\n //!\n //! impl Sub for Point {\n-//!     type Output = Point;\n+//!     type Output = Self;\n //!\n-//!     fn sub(self, other: Point) -> Point {\n-//!         Point {x: self.x - other.x, y: self.y - other.y}\n+//!     fn sub(self, other: Self) -> Self {\n+//!         Self {x: self.x - other.x, y: self.y - other.y}\n //!     }\n //! }\n //!"}, {"sha": "09209306c9d0f75eb08706e68e89d2b36e62ecaa", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,5 +1,6 @@\n //! Free functions to create `&[T]` and `&mut [T]`.\n \n+use crate::array;\n use crate::intrinsics::is_aligned_and_not_null;\n use crate::mem;\n use crate::ptr;\n@@ -140,19 +141,11 @@ pub unsafe fn from_raw_parts_mut<'a, T>(data: *mut T, len: usize) -> &'a mut [T]\n /// Converts a reference to T into a slice of length 1 (without copying).\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n pub fn from_ref<T>(s: &T) -> &[T] {\n-    // SAFETY: a reference is guaranteed to be valid for reads. The returned\n-    // reference cannot be mutated as it is an immutable reference.\n-    // `mem::size_of::<T>()` cannot be larger than `isize::MAX`.\n-    // Thus the call to `from_raw_parts` is safe.\n-    unsafe { from_raw_parts(s, 1) }\n+    array::from_ref(s)\n }\n \n /// Converts a reference to T into a slice of length 1 (without copying).\n #[stable(feature = \"from_ref\", since = \"1.28.0\")]\n pub fn from_mut<T>(s: &mut T) -> &mut [T] {\n-    // SAFETY: a mutable reference is guaranteed to be valid for writes.\n-    // The reference cannot be accessed by another pointer as it is an mutable reference.\n-    // `mem::size_of::<T>()` cannot be larger than `isize::MAX`.\n-    // Thus the call to `from_raw_parts_mut` is safe.\n-    unsafe { from_raw_parts_mut(s, 1) }\n+    array::from_mut(s)\n }"}, {"sha": "dbcea2747a00d5bacbc005f78e57a6543df76841", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,4 +1,4 @@\n-use core::array::{FixedSizeArray, IntoIter};\n+use core::array::{self, FixedSizeArray, IntoIter};\n use core::convert::TryFrom;\n \n #[test]\n@@ -19,6 +19,21 @@ fn fixed_size_array() {\n     assert_eq!(FixedSizeArray::as_mut_slice(&mut empty_zero_sized).len(), 0);\n }\n \n+#[test]\n+fn array_from_ref() {\n+    let value: String = \"Hello World!\".into();\n+    let arr: &[String; 1] = array::from_ref(&value);\n+    assert_eq!(&[value.clone()], arr);\n+}\n+\n+#[test]\n+fn array_from_mut() {\n+    let mut value: String = \"Hello World\".into();\n+    let arr: &mut [String; 1] = array::from_mut(&mut value);\n+    arr[0].push_str(\"!\");\n+    assert_eq!(&value, \"Hello World!\");\n+}\n+\n #[test]\n fn array_try_from() {\n     macro_rules! test {"}, {"sha": "d8b36beb3e0856585939f7e91f7b24497751fc3f", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,5 +1,6 @@\n #![feature(alloc_layout_extra)]\n #![feature(array_chunks)]\n+#![feature(array_from_ref)]\n #![feature(array_methods)]\n #![feature(array_map)]\n #![feature(array_windows)]"}, {"sha": "ac0075ad129c5778e0fe27ace2057edfac1366f1", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -238,6 +238,7 @@\n #![feature(const_cstr_unchecked)]\n #![feature(const_fn_transmute)]\n #![feature(const_fn)]\n+#![feature(const_ip)]\n #![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_ipv4)]"}, {"sha": "f01a7b72a655959da76a24b202535e0ad63fee37", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -148,8 +148,9 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(0, 0, 0, 0)).is_unspecified(), true);\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0)).is_unspecified(), true);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n-    pub fn is_unspecified(&self) -> bool {\n+    pub const fn is_unspecified(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_unspecified(),\n             IpAddr::V6(ip) => ip.is_unspecified(),\n@@ -169,8 +170,9 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)).is_loopback(), true);\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0, 0, 0, 0, 0, 0x1)).is_loopback(), true);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n-    pub fn is_loopback(&self) -> bool {\n+    pub const fn is_loopback(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_loopback(),\n             IpAddr::V6(ip) => ip.is_loopback(),\n@@ -192,7 +194,8 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(80, 9, 12, 3)).is_global(), true);\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0, 0, 0x1c9, 0, 0, 0xafc8, 0, 0x1)).is_global(), true);\n     /// ```\n-    pub fn is_global(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    pub const fn is_global(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_global(),\n             IpAddr::V6(ip) => ip.is_global(),\n@@ -212,8 +215,9 @@ impl IpAddr {\n     /// assert_eq!(IpAddr::V4(Ipv4Addr::new(224, 254, 0, 0)).is_multicast(), true);\n     /// assert_eq!(IpAddr::V6(Ipv6Addr::new(0xff00, 0, 0, 0, 0, 0, 0, 0)).is_multicast(), true);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n-    pub fn is_multicast(&self) -> bool {\n+    pub const fn is_multicast(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_multicast(),\n             IpAddr::V6(ip) => ip.is_multicast(),\n@@ -238,7 +242,8 @@ impl IpAddr {\n     ///     true\n     /// );\n     /// ```\n-    pub fn is_documentation(&self) -> bool {\n+    #[rustc_const_unstable(feature = \"const_ip\", issue = \"76205\")]\n+    pub const fn is_documentation(&self) -> bool {\n         match self {\n             IpAddr::V4(ip) => ip.is_documentation(),\n             IpAddr::V6(ip) => ip.is_documentation(),"}, {"sha": "d9fbdd1b5e7945732835493c49b63a674788963d", "filename": "library/std/src/net/ip/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip%2Ftests.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -918,3 +918,22 @@ fn ipv6_const() {\n     const IP_V4: Option<Ipv4Addr> = IP_ADDRESS.to_ipv4();\n     assert_eq!(IP_V4.unwrap(), Ipv4Addr::new(0, 0, 0, 1));\n }\n+\n+#[test]\n+fn ip_const() {\n+    // test that the methods of `IpAddr` are usable in a const context\n+\n+    const IP_ADDRESS: IpAddr = IpAddr::V4(Ipv4Addr::LOCALHOST);\n+\n+    const IS_UNSPECIFIED: bool = IP_ADDRESS.is_unspecified();\n+    assert!(!IS_UNSPECIFIED);\n+\n+    const IS_LOOPBACK: bool = IP_ADDRESS.is_loopback();\n+    assert!(IS_LOOPBACK);\n+\n+    const IS_GLOBAL: bool = IP_ADDRESS.is_global();\n+    assert!(!IS_GLOBAL);\n+\n+    const IS_MULTICAST: bool = IP_ADDRESS.is_multicast();\n+    assert!(!IS_MULTICAST);\n+}"}, {"sha": "dc13c9433f121d7fe0ddbb5f44ef8a018f28a41a", "filename": "library/std/src/sync/mpsc/mod.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsync%2Fmpsc%2Fmod.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1531,6 +1531,11 @@ impl<T: Send> error::Error for TrySendError<T> {\n \n #[stable(feature = \"mpsc_error_conversions\", since = \"1.24.0\")]\n impl<T> From<SendError<T>> for TrySendError<T> {\n+    /// Converts a `SendError<T>` into a `TrySendError<T>`.\n+    ///\n+    /// This conversion always returns a `TrySendError::Disconnected` containing the data in the `SendError<T>`.\n+    ///\n+    /// No data is allocated on the heap.\n     fn from(err: SendError<T>) -> TrySendError<T> {\n         match err {\n             SendError(t) => TrySendError::Disconnected(t),\n@@ -1576,6 +1581,11 @@ impl error::Error for TryRecvError {\n \n #[stable(feature = \"mpsc_error_conversions\", since = \"1.24.0\")]\n impl From<RecvError> for TryRecvError {\n+    /// Converts a `RecvError` into a `TryRecvError`.\n+    ///\n+    /// This conversion always returns `TryRecvError::Disconnected`.\n+    ///\n+    /// No data is allocated on the heap.\n     fn from(err: RecvError) -> TryRecvError {\n         match err {\n             RecvError => TryRecvError::Disconnected,\n@@ -1606,6 +1616,11 @@ impl error::Error for RecvTimeoutError {\n \n #[stable(feature = \"mpsc_error_conversions\", since = \"1.24.0\")]\n impl From<RecvError> for RecvTimeoutError {\n+    /// Converts a `RecvError` into a `RecvTimeoutError`.\n+    ///\n+    /// This conversion always returns `RecvTimeoutError::Disconnected`.\n+    ///\n+    /// No data is allocated on the heap.\n     fn from(err: RecvError) -> RecvTimeoutError {\n         match err {\n             RecvError => RecvTimeoutError::Disconnected,"}, {"sha": "162eab2388d554e905c684bcd7ad4b2948f8a6aa", "filename": "library/std/src/sys_common/remutex.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fremutex.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -37,9 +37,7 @@ impl<T> RefUnwindSafe for ReentrantMutex<T> {}\n /// guarded data.\n #[must_use = \"if unused the ReentrantMutex will immediately unlock\"]\n pub struct ReentrantMutexGuard<'a, T: 'a> {\n-    // funny underscores due to how Deref currently works (it disregards field\n-    // privacy).\n-    __lock: &'a ReentrantMutex<T>,\n+    lock: &'a ReentrantMutex<T>,\n }\n \n impl<T> !marker::Send for ReentrantMutexGuard<'_, T> {}\n@@ -129,23 +127,23 @@ impl<T: fmt::Debug + 'static> fmt::Debug for ReentrantMutex<T> {\n \n impl<'mutex, T> ReentrantMutexGuard<'mutex, T> {\n     fn new(lock: &'mutex ReentrantMutex<T>) -> ReentrantMutexGuard<'mutex, T> {\n-        ReentrantMutexGuard { __lock: lock }\n+        ReentrantMutexGuard { lock }\n     }\n }\n \n impl<T> Deref for ReentrantMutexGuard<'_, T> {\n     type Target = T;\n \n     fn deref(&self) -> &T {\n-        &self.__lock.data\n+        &self.lock.data\n     }\n }\n \n impl<T> Drop for ReentrantMutexGuard<'_, T> {\n     #[inline]\n     fn drop(&mut self) {\n         unsafe {\n-            self.__lock.inner.unlock();\n+            self.lock.inner.unlock();\n         }\n     }\n }"}, {"sha": "7239b3c5ba2f6aa38e4c1700066d56b08289833c", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -158,7 +158,9 @@ pub fn render<T: Print, S: Print>(\n         keywords = page.keywords,\n         favicon = if layout.favicon.is_empty() {\n             format!(\n-                r#\"<link rel=\"shortcut icon\" href=\"{static_root_path}favicon{suffix}.ico\">\"#,\n+                r##\"<link rel=\"icon\" type=\"image/svg+xml\" href=\"{static_root_path}favicon{suffix}.svg\">\n+<link rel=\"alternate icon\" type=\"image/png\" href=\"{static_root_path}favicon-16x16{suffix}.png\">\n+<link rel=\"alternate icon\" type=\"image/png\" href=\"{static_root_path}favicon-32x32{suffix}.png\">\"##,\n                 static_root_path = static_root_path,\n                 suffix = page.resource_suffix\n             )"}, {"sha": "8b5ba7a239c5f75009de02706539db9a8f7021e3", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -754,7 +754,9 @@ fn write_shared(\n         write(cx.path(\"rust-logo.png\"), static_files::RUST_LOGO)?;\n     }\n     if (*cx.shared).layout.favicon.is_empty() {\n-        write(cx.path(\"favicon.ico\"), static_files::RUST_FAVICON)?;\n+        write(cx.path(\"favicon.svg\"), static_files::RUST_FAVICON_SVG)?;\n+        write(cx.path(\"favicon-16x16.png\"), static_files::RUST_FAVICON_PNG_16)?;\n+        write(cx.path(\"favicon-32x32.png\"), static_files::RUST_FAVICON_PNG_32)?;\n     }\n     write(cx.path(\"brush.svg\"), static_files::BRUSH_SVG)?;\n     write(cx.path(\"wheel.svg\"), static_files::WHEEL_SVG)?;"}, {"sha": "7cfe6c13550d31bc31355616bbb9cb77fd1b25ef", "filename": "src/librustdoc/html/static/favicon-16x16.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffavicon-16x16.png", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffavicon-16x16.png", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffavicon-16x16.png?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5"}, {"sha": "5109c1de8bea744180448b347fb44ddef23b90f4", "filename": "src/librustdoc/html/static/favicon-32x32.png", "status": "added", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffavicon-32x32.png", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffavicon-32x32.png", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffavicon-32x32.png?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5"}, {"sha": "b8ad23769ac8d06eb5973bfb3d2acbf385240f98", "filename": "src/librustdoc/html/static/favicon.ico", "status": "removed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9b5c98f6406acb8b86375c45b16bca51441c59dd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffavicon.ico", "raw_url": "https://github.com/rust-lang/rust/raw/9b5c98f6406acb8b86375c45b16bca51441c59dd/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffavicon.ico", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffavicon.ico?ref=9b5c98f6406acb8b86375c45b16bca51441c59dd"}, {"sha": "8b34b511989e1d9f1a5f741b75d3b41698048455", "filename": "src/librustdoc/html/static/favicon.svg", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffavicon.svg", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffavicon.svg", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Ffavicon.svg?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -0,0 +1,24 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\"><svg width=\"100%\" height=\"100%\" viewBox=\"0 0 32 32\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xml:space=\"preserve\" xmlns:serif=\"http://www.serif.com/\" style=\"fill-rule:evenodd;clip-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;\">\n+<defs>\n+  <style type=\"text/css\"><![CDATA[\n+    #logo {\n+      fill-rule: nonzero;\n+    }\n+    #logo-teeth {\n+      stroke: #000000;\n+      stroke-width: 0.92px;\n+    }\n+    @media (prefers-color-scheme: dark) {\n+      #logo {\n+        fill: #FFFFFF;\n+        fill-rule: nonzero;\n+      }\n+      #logo-teeth {\n+        fill: #FFFFFF;\n+        stroke: #FFFFFF;\n+        stroke-width: 0.92px;\n+      }\n+    }\n+  ]]></style>\n+</defs>\n+<path id=\"logo\" d=\"M15.993,1.54c-7.972,0 -14.461,6.492 -14.461,14.462c0,7.969 6.492,14.461 14.461,14.461c7.97,0 14.462,-6.492 14.462,-14.461c0,-7.97 -6.492,-14.462 -14.462,-14.462Zm-0.021,1.285c0.511,0.013 0.924,0.439 0.924,0.951c0,0.522 -0.43,0.952 -0.952,0.952c-0.522,0 -0.951,-0.43 -0.951,-0.952c0,0 0,0 0,0c0,-0.522 0.429,-0.952 0.951,-0.952c0.01,0 0.019,0.001 0.028,0.001Zm2.178,1.566c3.379,0.633 6.313,2.723 8.016,5.709l-1.123,2.533c-0.193,0.438 0.006,0.952 0.44,1.147l2.16,0.958c0.067,0.675 0.076,1.355 0.025,2.031l-1.202,0c-0.12,0 -0.169,0.08 -0.169,0.196l0,0.551c0,1.297 -0.731,1.582 -1.373,1.652c-0.612,0.07 -1.288,-0.257 -1.374,-0.63c-0.361,-2.029 -0.961,-2.46 -1.909,-3.21c1.178,-0.746 2.401,-1.85 2.401,-3.325c0,-1.594 -1.092,-2.597 -1.835,-3.09c-1.046,-0.688 -2.203,-0.826 -2.515,-0.826l-12.421,0c1.717,-1.918 4.02,-3.218 6.55,-3.696l1.466,1.536c0.33,0.346 0.878,0.361 1.223,0.028l1.64,-1.564Zm-13.522,7.043c0.511,0.015 0.924,0.44 0.924,0.951c0,0.522 -0.43,0.952 -0.952,0.952c-0.522,0 -0.951,-0.43 -0.951,-0.952c0,0 0,0 0,0c0,-0.522 0.429,-0.951 0.951,-0.951c0.009,0 0.019,0 0.028,0Zm22.685,0.043c0.511,0.015 0.924,0.44 0.924,0.951c0,0.522 -0.43,0.952 -0.952,0.952c-0.522,0 -0.951,-0.43 -0.951,-0.952c0,0 0,0 0,0c0,-0.522 0.429,-0.952 0.951,-0.952c0.01,0 0.019,0 0.028,0.001Zm-20.892,0.153l1.658,0l0,7.477l-3.347,0c-0.414,-1.452 -0.542,-2.97 -0.38,-4.47l2.05,-0.912c0.438,-0.195 0.637,-0.706 0.441,-1.144l-0.422,-0.951Zm6.92,0.079l3.949,0c0.205,0 1.441,0.236 1.441,1.163c0,0.768 -0.948,1.043 -1.728,1.043l-3.665,0l0.003,-2.206Zm0,5.373l3.026,0c0.275,0 1.477,0.079 1.86,1.615c0.119,0.471 0.385,2.007 0.566,2.499c0.18,0.551 0.911,1.652 1.691,1.652l4.938,0c-0.331,0.444 -0.693,0.863 -1.083,1.255l-2.01,-0.432c-0.468,-0.101 -0.93,0.199 -1.031,0.667l-0.477,2.228c-3.104,1.406 -6.672,1.389 -9.762,-0.046l-0.478,-2.228c-0.101,-0.468 -0.56,-0.767 -1.028,-0.667l-1.967,0.423c-0.365,-0.377 -0.704,-0.778 -1.016,-1.2l9.567,0c0.107,0 0.181,-0.018 0.181,-0.119l0,-3.384c0,-0.097 -0.074,-0.119 -0.181,-0.119l-2.799,0l0.003,-2.144Zm-4.415,7.749c0.512,0.015 0.924,0.44 0.924,0.951c0,0.522 -0.429,0.952 -0.951,0.952c-0.522,0 -0.952,-0.43 -0.952,-0.952c0,0 0,0 0,0c0,-0.522 0.43,-0.952 0.952,-0.952c0.009,0 0.018,0.001 0.027,0.001Zm14.089,0.043c0.511,0.015 0.924,0.439 0.923,0.951c0,0.522 -0.429,0.952 -0.951,0.952c-0.522,0 -0.951,-0.43 -0.951,-0.952c0,0 0,0 0,0c0,-0.522 0.429,-0.952 0.951,-0.952c0.009,0 0.018,0 0.028,0.001Z\"/><path id=\"logo-teeth\" d=\"M29.647,16.002c0,7.49 -6.163,13.653 -13.654,13.653c-7.49,0 -13.654,-6.163 -13.654,-13.653c0,-7.491 6.164,-13.654 13.654,-13.654c7.491,0 13.654,6.163 13.654,13.654Zm-0.257,-1.319l2.13,1.319l-2.13,1.318l1.83,1.71l-2.344,0.878l1.463,2.035l-2.475,0.404l1.04,2.282l-2.506,-0.089l0.575,2.442l-2.441,-0.576l0.089,2.506l-2.283,-1.04l-0.403,2.475l-2.035,-1.462l-0.878,2.343l-1.71,-1.829l-1.319,2.129l-1.318,-2.129l-1.71,1.829l-0.878,-2.343l-2.035,1.462l-0.404,-2.475l-2.282,1.04l0.089,-2.506l-2.442,0.576l0.575,-2.442l-2.505,0.089l1.04,-2.282l-2.475,-0.404l1.462,-2.035l-2.343,-0.878l1.829,-1.71l-2.129,-1.318l2.129,-1.319l-1.829,-1.71l2.343,-0.878l-1.462,-2.035l2.475,-0.404l-1.04,-2.282l2.505,0.089l-0.575,-2.441l2.442,0.575l-0.089,-2.506l2.282,1.04l0.404,-2.475l2.035,1.463l0.878,-2.344l1.71,1.83l1.318,-2.13l1.319,2.13l1.71,-1.83l0.878,2.344l2.035,-1.463l0.403,2.475l2.283,-1.04l-0.089,2.506l2.441,-0.575l-0.575,2.441l2.506,-0.089l-1.04,2.282l2.475,0.404l-1.463,2.035l2.344,0.878l-1.83,1.71Z\"/></svg>"}, {"sha": "213c7f3aab8b65ac46b1e039d4e5eaaa3762d4bc", "filename": "src/librustdoc/html/static_files.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic_files.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -53,8 +53,10 @@ pub static LICENSE_MIT: &[u8] = include_bytes!(\"static/LICENSE-MIT.txt\");\n \n /// The contents of `rust-logo.png`, the default icon of the documentation.\n pub static RUST_LOGO: &[u8] = include_bytes!(\"static/rust-logo.png\");\n-/// The contents of `favicon.ico`, the default favicon of the documentation.\n-pub static RUST_FAVICON: &[u8] = include_bytes!(\"static/favicon.ico\");\n+/// The default documentation favicons (SVG and PNG fallbacks)\n+pub static RUST_FAVICON_SVG: &[u8] = include_bytes!(\"static/favicon.svg\");\n+pub static RUST_FAVICON_PNG_16: &[u8] = include_bytes!(\"static/favicon-16x16.png\");\n+pub static RUST_FAVICON_PNG_32: &[u8] = include_bytes!(\"static/favicon-32x32.png\");\n \n /// The built-in themes given to every documentation site.\n pub mod themes {"}, {"sha": "ce9be4ac5c2af5abfb35ad62c70f058e5e96074c", "filename": "src/test/ui/consts/const-mut-refs/feature-gate-const_mut_refs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -2,7 +2,7 @@ fn main() {\n     foo(&mut 5);\n }\n \n-const fn foo(x: &mut i32) -> i32 { //~ ERROR mutable references in const fn\n+const fn foo(x: &mut i32) -> i32 { //~ ERROR mutable references\n     *x + 1\n \n }"}, {"sha": "3f9bd37053a0ebca11af6ebf5779dff881c1df3a", "filename": "src/test/ui/consts/const-mut-refs/feature-gate-const_mut_refs.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Ffeature-gate-const_mut_refs.stderr?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,12 +1,12 @@\n-error[E0723]: mutable references in const fn are unstable\n+error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/feature-gate-const_mut_refs.rs:5:14\n    |\n LL | const fn foo(x: &mut i32) -> i32 {\n    |              ^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "15badea003736ebd785215dd2553f193fcc8cc16", "filename": "src/test/ui/consts/const_let_assign3.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_let_assign3.stderr?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,11 +1,11 @@\n-error[E0723]: mutable references in const fn are unstable\n+error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/const_let_assign3.rs:8:18\n    |\n LL |     const fn foo(&mut self, x: u32) {\n    |                  ^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0764]: mutable references are not allowed in constants\n   --> $DIR/const_let_assign3.rs:16:5\n@@ -29,5 +29,5 @@ LL |     *y = 42;\n \n error: aborting due to 4 previous errors\n \n-Some errors have detailed explanations: E0019, E0723, E0764.\n+Some errors have detailed explanations: E0019, E0658, E0764.\n For more information about an error, try `rustc --explain E0019`."}, {"sha": "336d754b06a735472df01db6c7cbec586d085458", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -37,26 +37,26 @@ impl<T> Foo<T> {\n     const fn into_inner(self) -> T { self.0 } //~ destructors cannot be evaluated\n     const fn get(&self) -> &T { &self.0 }\n     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n-    //~^ mutable references in const fn are unstable\n+    //~^ mutable references\n }\n impl<'a, T> Foo<T> {\n     const fn new_lt(t: T) -> Self { Foo(t) }\n     const fn into_inner_lt(self) -> T { self.0 } //~ destructors cannot be evaluated\n     const fn get_lt(&'a self) -> &T { &self.0 }\n     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n-    //~^ mutable references in const fn are unstable\n+    //~^ mutable references\n }\n impl<T: Sized> Foo<T> {\n     const fn new_s(t: T) -> Self { Foo(t) }\n     const fn into_inner_s(self) -> T { self.0 } //~ ERROR destructors\n     const fn get_s(&self) -> &T { &self.0 }\n     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n-    //~^ mutable references in const fn are unstable\n+    //~^ mutable references\n }\n impl<T: ?Sized> Foo<T> {\n     const fn get_sq(&self) -> &T { &self.0 }\n     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n-    //~^ mutable references in const fn are unstable\n+    //~^ mutable references\n }\n \n \n@@ -99,7 +99,7 @@ const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize } }\n //~^ ERROR casting pointers to integers\n const fn foo30_6() -> bool { let x = true; x }\n const fn inc(x: &mut i32) { *x += 1 }\n-//~^ ERROR mutable references in const fn are unstable\n+//~^ ERROR mutable references\n \n // ok\n const fn foo36(a: bool, b: bool) -> bool { a && b }"}, {"sha": "c96500e38ec83de39d413bb6075c8994dfec5ae9", "filename": "src/test/ui/consts/min_const_fn/min_const_fn.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn.stderr?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -6,14 +6,14 @@ LL |     const fn into_inner(self) -> T { self.0 }\n    |                         |\n    |                         constant functions cannot evaluate destructors\n \n-error[E0723]: mutable references in const fn are unstable\n+error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/min_const_fn.rs:39:36\n    |\n LL |     const fn get_mut(&mut self) -> &mut T { &mut self.0 }\n    |                                    ^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:44:28\n@@ -23,14 +23,14 @@ LL |     const fn into_inner_lt(self) -> T { self.0 }\n    |                            |\n    |                            constant functions cannot evaluate destructors\n \n-error[E0723]: mutable references in const fn are unstable\n+error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/min_const_fn.rs:46:42\n    |\n LL |     const fn get_mut_lt(&'a mut self) -> &mut T { &mut self.0 }\n    |                                          ^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0493]: destructors cannot be evaluated at compile-time\n   --> $DIR/min_const_fn.rs:51:27\n@@ -40,23 +40,23 @@ LL |     const fn into_inner_s(self) -> T { self.0 }\n    |                           |\n    |                           constant functions cannot evaluate destructors\n \n-error[E0723]: mutable references in const fn are unstable\n+error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/min_const_fn.rs:53:38\n    |\n LL |     const fn get_mut_s(&mut self) -> &mut T { &mut self.0 }\n    |                                      ^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0723]: mutable references in const fn are unstable\n+error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/min_const_fn.rs:58:39\n    |\n LL |     const fn get_mut_sq(&mut self) -> &mut T { &mut self.0 }\n    |                                       ^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:76:16\n@@ -164,14 +164,14 @@ LL | const fn foo30_2_with_unsafe(x: *mut u32) -> usize { unsafe { x as usize }\n    = note: see issue #51910 <https://github.com/rust-lang/rust/issues/51910> for more information\n    = help: add `#![feature(const_raw_ptr_to_usize_cast)]` to the crate attributes to enable\n \n-error[E0723]: mutable references in const fn are unstable\n+error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/min_const_fn.rs:101:14\n    |\n LL | const fn inc(x: &mut i32) { *x += 1 }\n    |              ^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0723]: trait bounds other than `Sized` on const fn parameters are unstable\n   --> $DIR/min_const_fn.rs:110:6"}, {"sha": "580b1d50f774e4923825905e2d8c7cf66dedfbe5", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,6 +1,6 @@\n const fn mutable_ref_in_const() -> u8 {\n     let mut a = 0;\n-    let b = &mut a; //~ ERROR mutable references in const fn\n+    let b = &mut a; //~ ERROR mutable references\n     *b\n }\n \n@@ -9,7 +9,7 @@ struct X;\n impl X {\n     const fn inherent_mutable_ref_in_const() -> u8 {\n         let mut a = 0;\n-        let b = &mut a; //~ ERROR mutable references in const fn\n+        let b = &mut a; //~ ERROR mutable references\n         *b\n     }\n }"}, {"sha": "4e5cdbb18aae3649c117018539ef957de66d4d5c", "filename": "src/test/ui/consts/min_const_fn/mutable_borrow.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmutable_borrow.stderr?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,21 +1,21 @@\n-error[E0723]: mutable references in const fn are unstable\n+error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/mutable_borrow.rs:3:9\n    |\n LL |     let b = &mut a;\n    |         ^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0723]: mutable references in const fn are unstable\n+error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/mutable_borrow.rs:12:13\n    |\n LL |         let b = &mut a;\n    |             ^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "9007e501bc2bf958877e08c92f11c343fb7af35a", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -6,33 +6,33 @@ struct Foo(u32);\n const TRANSMUTED_U32: u32 = unsafe { mem::transmute(Foo(3)) };\n \n const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n-//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~^ ERROR `transmute`\n \n const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transmute(Foo(3)) } }\n-//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~^ ERROR `transmute`\n \n const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::transmute(Foo(3)) } }\n-//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~^ ERROR `transmute`\n \n const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n-//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~^ ERROR `transmute`\n \n const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n-//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~^ ERROR `transmute`\n \n const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n-//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~^ ERROR `transmute`\n \n const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n-//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~^ ERROR `transmute`\n //~| ERROR call to unsafe function is unsafe and requires unsafe function or block\n \n const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n-//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~^ ERROR `transmute`\n //~| ERROR call to unsafe function is unsafe and requires unsafe function or block\n \n const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n-//~^ ERROR can only call `transmute` from const items, not `const fn`\n+//~^ ERROR `transmute`\n //~| ERROR call to unsafe function is unsafe and requires unsafe function or block\n \n fn main() {}"}, {"sha": "08ba14dc40e86844b98ce5abf04e81753e8c8a1b", "filename": "src/test/ui/feature-gates/feature-gate-const_fn_transmute.stderr", "status": "modified", "additions": 37, "deletions": 28, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-const_fn_transmute.stderr?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,83 +1,92 @@\n-error[E0723]: can only call `transmute` from const items, not `const fn`\n+error[E0658]: `transmute` is not allowed in constant functions\n   --> $DIR/feature-gate-const_fn_transmute.rs:8:43\n    |\n LL | const fn transmute_fn() -> u32 { unsafe { mem::transmute(Foo(3)) } }\n    |                                           ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n \n-error[E0723]: can only call `transmute` from const items, not `const fn`\n+error[E0658]: `transmute` is not allowed in constant functions\n   --> $DIR/feature-gate-const_fn_transmute.rs:11:53\n    |\n LL | const fn transmute_fn_intrinsic() -> u32 { unsafe { std::intrinsics::transmute(Foo(3)) } }\n    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n \n-error[E0723]: can only call `transmute` from const items, not `const fn`\n+error[E0658]: `transmute` is not allowed in constant functions\n   --> $DIR/feature-gate-const_fn_transmute.rs:14:58\n    |\n LL | const fn transmute_fn_core_intrinsic() -> u32 { unsafe { core::intrinsics::transmute(Foo(3)) } }\n    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n \n-error[E0723]: can only call `transmute` from const items, not `const fn`\n+error[E0658]: `transmute` is not allowed in constant functions\n   --> $DIR/feature-gate-const_fn_transmute.rs:17:48\n    |\n LL | const unsafe fn unsafe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n    |                                                ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n \n-error[E0723]: can only call `transmute` from const items, not `const fn`\n+error[E0658]: `transmute` is not allowed in constant functions\n   --> $DIR/feature-gate-const_fn_transmute.rs:20:58\n    |\n LL | const unsafe fn unsafe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n \n-error[E0723]: can only call `transmute` from const items, not `const fn`\n+error[E0658]: `transmute` is not allowed in constant functions\n   --> $DIR/feature-gate-const_fn_transmute.rs:23:63\n    |\n LL | const unsafe fn unsafe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n    |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n \n-error[E0723]: can only call `transmute` from const items, not `const fn`\n+error[E0658]: `transmute` is not allowed in constant functions\n   --> $DIR/feature-gate-const_fn_transmute.rs:26:39\n    |\n LL | const fn safe_transmute_fn() -> u32 { mem::transmute(Foo(3)) }\n    |                                       ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n \n-error[E0723]: can only call `transmute` from const items, not `const fn`\n+error[E0658]: `transmute` is not allowed in constant functions\n   --> $DIR/feature-gate-const_fn_transmute.rs:30:49\n    |\n LL | const fn safe_transmute_fn_intrinsic() -> u32 { std::intrinsics::transmute(Foo(3)) }\n    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n \n-error[E0723]: can only call `transmute` from const items, not `const fn`\n+error[E0658]: `transmute` is not allowed in constant functions\n   --> $DIR/feature-gate-const_fn_transmute.rs:34:54\n    |\n LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::transmute(Foo(3)) }\n    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n   --> $DIR/feature-gate-const_fn_transmute.rs:26:39\n@@ -105,5 +114,5 @@ LL | const fn safe_transmute_fn_core_intrinsic() -> u32 { core::intrinsics::tran\n \n error: aborting due to 12 previous errors\n \n-Some errors have detailed explanations: E0133, E0723.\n+Some errors have detailed explanations: E0133, E0658.\n For more information about an error, try `rustc --explain E0133`."}, {"sha": "554c67be4e0b04ef6cf4b3f61c1fcc5272d208ec", "filename": "src/test/ui/internal/internal-unstable-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -8,7 +8,7 @@\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const fn foo() -> i32 {\n-    unsafe { std::mem::transmute(4u32) } //~ ERROR can only call `transmute` from const items\n+    unsafe { std::mem::transmute(4u32) } //~ ERROR `transmute`\n }\n \n fn main() {}"}, {"sha": "adfb8dc36918dccfd0863eb9f6467f9517deab92", "filename": "src/test/ui/internal/internal-unstable-const.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finternal%2Finternal-unstable-const.stderr?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,12 +1,13 @@\n-error[E0723]: can only call `transmute` from const items, not `const fn`\n+error[E0658]: `transmute` is not allowed in constant functions\n   --> $DIR/internal-unstable-const.rs:11:14\n    |\n LL |     unsafe { std::mem::transmute(4u32) }\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #53605 <https://github.com/rust-lang/rust/issues/53605> for more information\n+   = help: add `#![feature(const_fn_transmute)]` to the crate attributes to enable\n+   = note: `transmute` is only allowed in constants and statics for now\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0723`.\n+For more information about this error, try `rustc --explain E0658`."}, {"sha": "1a6bcd36ee15719dadc460080cb48307913a9385", "filename": "src/test/ui/unsafe/ranged_ints2_const.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints2_const.stderr?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -1,20 +1,20 @@\n-error[E0723]: mutable references in const fn are unstable\n+error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/ranged_ints2_const.rs:11:9\n    |\n LL |     let y = &mut x.0;\n    |         ^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0723]: mutable references in const fn are unstable\n+error[E0658]: mutable references are not allowed in constant functions\n   --> $DIR/ranged_ints2_const.rs:18:9\n    |\n LL |     let y = unsafe { &mut x.0 };\n    |         ^\n    |\n-   = note: see issue #57563 <https://github.com/rust-lang/rust/issues/57563> for more information\n-   = help: add `#![feature(const_fn)]` to the crate attributes to enable\n+   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n+   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n error[E0133]: mutation of layout constrained field is unsafe and requires unsafe function or block\n   --> $DIR/ranged_ints2_const.rs:11:13\n@@ -26,5 +26,5 @@ LL |     let y = &mut x.0;\n \n error: aborting due to 3 previous errors\n \n-Some errors have detailed explanations: E0133, E0723.\n+Some errors have detailed explanations: E0133, E0658.\n For more information about an error, try `rustc --explain E0133`."}, {"sha": "1615f19237096f4c2816a28673f53b6012fdbd96", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=5bfeee5fe0140b0c2e5c96b3208c02c4ab04f8b5", "patch": "@@ -87,6 +87,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n \n         let maybe_storage_live_result = MaybeStorageLive\n             .into_engine(cx.tcx, mir, def_id.to_def_id())\n+            .pass_name(\"redundant_clone\")\n             .iterate_to_fixpoint()\n             .into_results_cursor(mir);\n         let mut possible_borrower = {"}]}