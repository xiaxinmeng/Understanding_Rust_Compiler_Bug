{"sha": "136798319874ee368f7a111332b5f14545c233f3", "node_id": "C_kwDOAAsO6NoAKDEzNjc5ODMxOTg3NGVlMzY4ZjdhMTExMzMyYjVmMTQ1NDVjMjMzZjM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-27T18:09:57Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-27T18:09:57Z"}, "message": "Begin implementing llvm simd intrinsics for aarch64", "tree": {"sha": "0120d89eb481cc13b4deeecf8626f2db3922eb45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0120d89eb481cc13b4deeecf8626f2db3922eb45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/136798319874ee368f7a111332b5f14545c233f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/136798319874ee368f7a111332b5f14545c233f3", "html_url": "https://github.com/rust-lang/rust/commit/136798319874ee368f7a111332b5f14545c233f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/136798319874ee368f7a111332b5f14545c233f3/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef6400d6bed54cb2a83732a9e0c6c78e9e4bc246", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef6400d6bed54cb2a83732a9e0c6c78e9e4bc246", "html_url": "https://github.com/rust-lang/rust/commit/ef6400d6bed54cb2a83732a9e0c6c78e9e4bc246"}], "stats": {"total": 138, "additions": 137, "deletions": 1}, "files": [{"sha": "f722e52284fe8205f269103a620fec33015ef9a4", "filename": "src/intrinsics/llvm.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/136798319874ee368f7a111332b5f14545c233f3/src%2Fintrinsics%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136798319874ee368f7a111332b5f14545c233f3/src%2Fintrinsics%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm.rs?ref=136798319874ee368f7a111332b5f14545c233f3", "patch": "@@ -13,11 +13,32 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n     ret: CPlace<'tcx>,\n     target: Option<BasicBlock>,\n ) {\n+    if intrinsic.starts_with(\"llvm.aarch64\") {\n+        return llvm_aarch64::codegen_aarch64_llvm_intrinsic_call(\n+            fx, intrinsic, substs, args, ret, target,\n+        );\n+    }\n     if intrinsic.starts_with(\"llvm.x86\") {\n         return llvm_x86::codegen_x86_llvm_intrinsic_call(fx, intrinsic, substs, args, ret, target);\n     }\n \n     match intrinsic {\n+        _ if intrinsic.starts_with(\"llvm.ctlz.v\") => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n+                fx.bcx.ins().clz(lane)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.ctpop.v\") => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n+                fx.bcx.ins().popcnt(lane)\n+            });\n+        }\n+\n         _ => {\n             fx.tcx\n                 .sess\n@@ -31,4 +52,3 @@ pub(crate) fn codegen_llvm_intrinsic_call<'tcx>(\n     let ret_block = fx.get_block(dest);\n     fx.bcx.ins().jump(ret_block, &[]);\n }\n-"}, {"sha": "f9f34e16aec1bf1625986ba4dd7589a9c8997da3", "filename": "src/intrinsics/llvm_aarch64.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/136798319874ee368f7a111332b5f14545c233f3/src%2Fintrinsics%2Fllvm_aarch64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136798319874ee368f7a111332b5f14545c233f3/src%2Fintrinsics%2Fllvm_aarch64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fllvm_aarch64.rs?ref=136798319874ee368f7a111332b5f14545c233f3", "patch": "@@ -0,0 +1,115 @@\n+//! Emulate AArch64 LLVM intrinsics\n+\n+use crate::intrinsics::*;\n+use crate::prelude::*;\n+\n+use rustc_middle::ty::subst::SubstsRef;\n+\n+pub(crate) fn codegen_aarch64_llvm_intrinsic_call<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    intrinsic: &str,\n+    _substs: SubstsRef<'tcx>,\n+    args: &[mir::Operand<'tcx>],\n+    ret: CPlace<'tcx>,\n+    target: Option<BasicBlock>,\n+) {\n+    // llvm.aarch64.neon.sqshl.v*i*\n+\n+    match intrinsic {\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.abs.v\") => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n+                fx.bcx.ins().iabs(lane)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.cls.v\") => {\n+            intrinsic_args!(fx, args => (a); intrinsic);\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| {\n+                fx.bcx.ins().cls(lane)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.sqadd.v\") => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            simd_pair_for_each_lane_typed(fx, x, y, ret, &|fx, x_lane, y_lane| {\n+                crate::num::codegen_saturating_int_binop(fx, BinOp::Add, x_lane, y_lane)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.sqsub.v\") => {\n+            intrinsic_args!(fx, args => (x, y); intrinsic);\n+\n+            simd_pair_for_each_lane_typed(fx, x, y, ret, &|fx, x_lane, y_lane| {\n+                crate::num::codegen_saturating_int_binop(fx, BinOp::Sub, x_lane, y_lane)\n+            });\n+        }\n+\n+        /*\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.sshl.v\")\n+            || intrinsic.starts_with(\"llvm.aarch64.neon.sqshl.v\")\n+            // FIXME split this one out once saturating is implemented\n+            || intrinsic.starts_with(\"llvm.aarch64.neon.sqshlu.v\") =>\n+        {\n+            intrinsic_args!(fx, args => (a, b); intrinsic);\n+\n+            simd_pair_for_each_lane(fx, a, b, ret, &|fx, _lane_ty, _res_lane_ty, a, b| {\n+                // FIXME saturate?\n+                fx.bcx.ins().ishl(a, b)\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.sqshrn.v\") => {\n+            let (a, imm32) = match args {\n+                [a, imm32] => (a, imm32),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm32 = crate::constant::mir_operand_get_const_val(fx, imm32)\n+                .expect(\"llvm.aarch64.neon.sqshrn.v* imm32 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm32\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm32 not scalar: {:?}\", imm32))\n+            {\n+                imm32 if imm32 < 32 => fx.bcx.ins().sshr_imm(lane, i64::from(imm32 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n+            });\n+        }\n+\n+        _ if intrinsic.starts_with(\"llvm.aarch64.neon.sqshrun.v\") => {\n+            let (a, imm32) = match args {\n+                [a, imm32] => (a, imm32),\n+                _ => bug!(\"wrong number of args for intrinsic {intrinsic}\"),\n+            };\n+            let a = codegen_operand(fx, a);\n+            let imm32 = crate::constant::mir_operand_get_const_val(fx, imm32)\n+                .expect(\"llvm.aarch64.neon.sqshrn.v* imm32 not const\");\n+\n+            simd_for_each_lane(fx, a, ret, &|fx, _lane_ty, _res_lane_ty, lane| match imm32\n+                .try_to_bits(Size::from_bytes(4))\n+                .unwrap_or_else(|| panic!(\"imm32 not scalar: {:?}\", imm32))\n+            {\n+                imm32 if imm32 < 32 => fx.bcx.ins().ushr_imm(lane, i64::from(imm32 as u8)),\n+                _ => fx.bcx.ins().iconst(types::I32, 0),\n+            });\n+        }\n+        */\n+\n+        _ => {\n+            fx.tcx.sess.warn(&format!(\n+                \"unsupported AArch64 llvm intrinsic {}; replacing with trap\",\n+                intrinsic\n+            ));\n+            crate::trap::trap_unimplemented(fx, intrinsic);\n+            return;\n+        }\n+    }\n+\n+    let dest = target.expect(\"all llvm intrinsics used by stdlib should return\");\n+    let ret_block = fx.get_block(dest);\n+    fx.bcx.ins().jump(ret_block, &[]);\n+}"}, {"sha": "8f13af8154e9ec8d97be33b4f145da31568eb2b1", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/136798319874ee368f7a111332b5f14545c233f3/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/136798319874ee368f7a111332b5f14545c233f3/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=136798319874ee368f7a111332b5f14545c233f3", "patch": "@@ -14,6 +14,7 @@ macro_rules! intrinsic_args {\n \n mod cpuid;\n mod llvm;\n+mod llvm_aarch64;\n mod llvm_x86;\n mod simd;\n "}]}