{"sha": "ae237098f8af22bd44ee3808cce97f1782eb4e18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlMjM3MDk4ZjhhZjIyYmQ0NGVlMzgwOGNjZTk3ZjE3ODJlYjRlMTg=", "commit": {"author": {"name": "Lander Brandt", "email": "labrandt@microsoft.com", "date": "2021-05-26T23:29:01Z"}, "committer": {"name": "Lander Brandt", "email": "labrandt@microsoft.com", "date": "2021-06-07T22:21:53Z"}, "message": "Add support for panicking in the emulated application when unsupported syscalls are encountered", "tree": {"sha": "414c23c496a36992bc4b962a4289109b42d5277a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/414c23c496a36992bc4b962a4289109b42d5277a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae237098f8af22bd44ee3808cce97f1782eb4e18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae237098f8af22bd44ee3808cce97f1782eb4e18", "html_url": "https://github.com/rust-lang/rust/commit/ae237098f8af22bd44ee3808cce97f1782eb4e18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae237098f8af22bd44ee3808cce97f1782eb4e18/comments", "author": {"login": "landaire", "id": 1313522, "node_id": "MDQ6VXNlcjEzMTM1MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1313522?v=4", "gravatar_id": "", "url": "https://api.github.com/users/landaire", "html_url": "https://github.com/landaire", "followers_url": "https://api.github.com/users/landaire/followers", "following_url": "https://api.github.com/users/landaire/following{/other_user}", "gists_url": "https://api.github.com/users/landaire/gists{/gist_id}", "starred_url": "https://api.github.com/users/landaire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/landaire/subscriptions", "organizations_url": "https://api.github.com/users/landaire/orgs", "repos_url": "https://api.github.com/users/landaire/repos", "events_url": "https://api.github.com/users/landaire/events{/privacy}", "received_events_url": "https://api.github.com/users/landaire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "landaire", "id": 1313522, "node_id": "MDQ6VXNlcjEzMTM1MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/1313522?v=4", "gravatar_id": "", "url": "https://api.github.com/users/landaire", "html_url": "https://github.com/landaire", "followers_url": "https://api.github.com/users/landaire/followers", "following_url": "https://api.github.com/users/landaire/following{/other_user}", "gists_url": "https://api.github.com/users/landaire/gists{/gist_id}", "starred_url": "https://api.github.com/users/landaire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/landaire/subscriptions", "organizations_url": "https://api.github.com/users/landaire/orgs", "repos_url": "https://api.github.com/users/landaire/repos", "events_url": "https://api.github.com/users/landaire/events{/privacy}", "received_events_url": "https://api.github.com/users/landaire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81ee877f712748345fd3153cb27e9eb3de4ac6af", "url": "https://api.github.com/repos/rust-lang/rust/commits/81ee877f712748345fd3153cb27e9eb3de4ac6af", "html_url": "https://github.com/rust-lang/rust/commit/81ee877f712748345fd3153cb27e9eb3de4ac6af"}], "stats": {"total": 70, "additions": 64, "deletions": 6}, "files": [{"sha": "2e24402450fd469c9d50e904062b193f5feca725", "filename": "README.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae237098f8af22bd44ee3808cce97f1782eb4e18/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/ae237098f8af22bd44ee3808cce97f1782eb4e18/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=ae237098f8af22bd44ee3808cce97f1782eb4e18", "patch": "@@ -228,6 +228,11 @@ environment variable:\n    This can be used to find which parts of your program are executing slowly under Miri.\n    The profile is written out to a file with the prefix `<name>`, and can be processed\n    using the tools in the repository https://github.com/rust-lang/measureme.\n+* `-Zmiri-panic-on-unsupported` will makes some forms of unsupported functionality,\n+  such as FFI and unsupported syscalls, panic within the context of the emulated\n+  application instead of raising an error within the context of Miri (and halting\n+  execution). Note that code might not expect these operations to ever panic, so\n+  this flag can lead to strange (mis)behavior.\n * `-Zmiri-seed=<hex>` configures the seed of the RNG that Miri uses to resolve\n   non-determinism.  This RNG is used to pick base addresses for allocations.\n   When isolation is enabled (the default), this is also used to emulate system"}, {"sha": "7fd6d85cffdea4ab740f38cdcdc7ae0671efc14f", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=ae237098f8af22bd44ee3808cce97f1782eb4e18", "patch": "@@ -296,6 +296,9 @@ fn main() {\n                 \"-Zmiri-ignore-leaks\" => {\n                     miri_config.ignore_leaks = true;\n                 }\n+                \"-Zmiri-panic-on-unsupported\" => {\n+                    miri_config.panic_on_unsupported = true;\n+                }\n                 \"-Zmiri-track-raw-pointers\" => {\n                     miri_config.track_raw = true;\n                 }"}, {"sha": "8d5876d777183963a6a398872284a1da4afe7e2b", "filename": "src/eval.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=ae237098f8af22bd44ee3808cce97f1782eb4e18", "patch": "@@ -59,6 +59,8 @@ pub struct MiriConfig {\n     /// If `Some`, enable the `measureme` profiler, writing results to a file\n     /// with the specified prefix.\n     pub measureme_out: Option<String>,\n+    /// Panic when unsupported functionality is encountered\n+    pub panic_on_unsupported: bool,\n }\n \n impl Default for MiriConfig {\n@@ -80,6 +82,7 @@ impl Default for MiriConfig {\n             data_race_detector: true,\n             cmpxchg_weak_failure_rate: 0.8,\n             measureme_out: None,\n+            panic_on_unsupported: false,\n         }\n     }\n }"}, {"sha": "c8e1d6c880223f13e32f0920aa24b7e909ea7357", "filename": "src/helpers.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=ae237098f8af22bd44ee3808cce97f1782eb4e18", "patch": "@@ -636,6 +636,23 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 == this.tcx.def_path(start_fn).krate\n         })\n     }\n+\n+    /// Handler that should be called when unsupported functionality is encountered.\n+    /// This function will either panic within the context of the emulated application\n+    /// or return an error in the Miri process context\n+    ///\n+    /// Return value of `Ok(bool)` indicates whether execution should continue.\n+    fn handle_unsupported<S: AsRef<str>>(&mut self, error_msg: S) -> InterpResult<'tcx, ()> {\n+        let this = self.eval_context_mut();\n+        if this.machine.panic_on_unsupported {\n+            // message is slightly different here to make automated analysis easier\n+            let error_msg = format!(\"unsupported Miri functionality: {}\", error_msg.as_ref());\n+            this.start_panic(error_msg.as_ref(), StackPopUnwind::Skip)?;\n+            return Ok(());\n+        } else {\n+            throw_unsup_format!(\"{}\", error_msg.as_ref());\n+        }\n+    }\n }\n \n /// Check that the number of args is what we expect."}, {"sha": "f25c1b9720dc83281ff378487a5bb1ea17d60004", "filename": "src/machine.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=ae237098f8af22bd44ee3808cce97f1782eb4e18", "patch": "@@ -297,6 +297,11 @@ pub struct Evaluator<'mir, 'tcx> {\n \n     /// Cache of `Instance` exported under the given `Symbol` name.\n     pub(crate) exported_symbols_cache: FxHashMap<Symbol, Instance<'tcx>>,\n+\n+    /// Whether to raise a panic in the context of the evaluated process when unsupported\n+    /// functionality is encountered. If `false`, an error is propagated in the Miri application context\n+    /// instead (default behavior)\n+    pub(crate) panic_on_unsupported: bool,\n }\n \n impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n@@ -326,6 +331,7 @@ impl<'mir, 'tcx> Evaluator<'mir, 'tcx> {\n             profiler,\n             string_cache: Default::default(),\n             exported_symbols_cache: FxHashMap::default(),\n+            panic_on_unsupported: config.panic_on_unsupported,\n         }\n     }\n }"}, {"sha": "8f3dfdc4f81fa92447e97fbe68d5e8714191315b", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=ae237098f8af22bd44ee3808cce97f1782eb4e18", "patch": "@@ -259,7 +259,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     if let Some(body) = this.lookup_exported_symbol(link_name_sym)? {\n                         return Ok(Some(body));\n                     }\n-                    throw_unsup_format!(\"can't call (diverging) foreign function: {}\", link_name);\n+                    this.handle_unsupported(format!(\n+                        \"can't call (diverging) foreign function: {}\",\n+                        link_name\n+                    ))?;\n+                    return Ok(None);\n                 }\n             },\n             Some(p) => p,\n@@ -276,7 +280,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 if let Some(body) = this.lookup_exported_symbol(link_name_sym)? {\n                     return Ok(Some(body));\n                 }\n-                throw_unsup_format!(\"can't call foreign function: {}\", link_name);\n+\n+                this.handle_unsupported(format!(\"can't call foreign function: {}\", link_name))?;\n+                return Ok(None);\n             }\n         }\n "}, {"sha": "15620c73f0dab856de4a88bbc983a4164d7e1b7d", "filename": "src/shims/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Fshims%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Fshims%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fpanic.rs?ref=ae237098f8af22bd44ee3808cce97f1782eb4e18", "patch": "@@ -161,7 +161,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n     }\n \n-    /// Starta a panic in the interpreter with the given message as payload.\n+    /// Start a panic in the interpreter with the given message as payload.\n     fn start_panic(&mut self, msg: &str, unwind: StackPopUnwind) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n "}, {"sha": "68ae704fb04f20be40b0f19bf76730c74079379d", "filename": "src/shims/posix/linux/foreign_items.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Flinux%2Fforeign_items.rs?ref=ae237098f8af22bd44ee3808cce97f1782eb4e18", "patch": "@@ -183,7 +183,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     id if id == sys_futex => {\n                         futex(this, args, dest)?;\n                     }\n-                    id => throw_unsup_format!(\"Miri does not support syscall ID {}\", id),\n+                    id => {\n+                        this.handle_unsupported(format!(\"can't execute syscall with ID {}\", id))?;\n+                        return Ok(EmulateByNameResult::NotSupported);\n+                    }\n                 }\n             }\n "}, {"sha": "02f9bb8fff2008f00bfffd4443bcdd06d9079a9e", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae237098f8af22bd44ee3808cce97f1782eb4e18/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=ae237098f8af22bd44ee3808cce97f1782eb4e18", "patch": "@@ -343,7 +343,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // Better error for attempts to create a thread\n             \"CreateThread\" => {\n                 this.check_abi(abi, Abi::System { unwind: false })?;\n-                throw_unsup_format!(\"Miri does not support concurrency on Windows\");\n+\n+                this.handle_unsupported(\"can't create threads on Windows\")?;\n+                return Ok(EmulateByNameResult::AlreadyJumped);\n             }\n \n             // Incomplete shims that we \"stub out\" just to get pre-main initialization code to work."}, {"sha": "6f07d083a0e5155c684381320c7d1b399c919097", "filename": "tests/compile-fail/concurrency/thread-spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae237098f8af22bd44ee3808cce97f1782eb4e18/tests%2Fcompile-fail%2Fconcurrency%2Fthread-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae237098f8af22bd44ee3808cce97f1782eb4e18/tests%2Fcompile-fail%2Fconcurrency%2Fthread-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fconcurrency%2Fthread-spawn.rs?ref=ae237098f8af22bd44ee3808cce97f1782eb4e18", "patch": "@@ -3,7 +3,7 @@\n \n use std::thread;\n \n-// error-pattern: Miri does not support concurrency on Windows\n+// error-pattern: can't create threads on Windows\n \n fn main() {\n     thread::spawn(|| {});"}, {"sha": "bc3d02c5f27951071c89c26fcb65b6145aca337d", "filename": "tests/run-pass/panic/unsupported_foreign_function.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ae237098f8af22bd44ee3808cce97f1782eb4e18/tests%2Frun-pass%2Fpanic%2Funsupported_foreign_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae237098f8af22bd44ee3808cce97f1782eb4e18/tests%2Frun-pass%2Fpanic%2Funsupported_foreign_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Funsupported_foreign_function.rs?ref=ae237098f8af22bd44ee3808cce97f1782eb4e18", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: -Zmiri-panic-on-unsupported\n+\n+fn main() {\n+    extern \"Rust\" {\n+        fn foo();\n+    }\n+\n+    unsafe {\n+        foo();\n+    }\n+}"}, {"sha": "bd7f3490d809d53f5258396368f9edc0aafd4c01", "filename": "tests/run-pass/panic/unsupported_foreign_function.stderr", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae237098f8af22bd44ee3808cce97f1782eb4e18/tests%2Frun-pass%2Fpanic%2Funsupported_foreign_function.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ae237098f8af22bd44ee3808cce97f1782eb4e18/tests%2Frun-pass%2Fpanic%2Funsupported_foreign_function.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpanic%2Funsupported_foreign_function.stderr?ref=ae237098f8af22bd44ee3808cce97f1782eb4e18", "patch": "@@ -0,0 +1,2 @@\n+thread 'main' panicked at 'unsupported Miri functionality: can't call foreign function: foo', $DIR/unsupported_foreign_function.rs:9:9\n+note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace"}]}