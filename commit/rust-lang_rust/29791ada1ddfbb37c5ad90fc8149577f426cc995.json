{"sha": "29791ada1ddfbb37c5ad90fc8149577f426cc995", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NzkxYWRhMWRkZmJiMzdjNWFkOTBmYzgxNDk1NzdmNDI2Y2M5OTU=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-27T10:27:41Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-11-30T21:19:46Z"}, "message": "Minor cleanup.", "tree": {"sha": "7e616de63d4708df6dd1ade63aa05119ac2ac3e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e616de63d4708df6dd1ade63aa05119ac2ac3e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29791ada1ddfbb37c5ad90fc8149577f426cc995", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29791ada1ddfbb37c5ad90fc8149577f426cc995", "html_url": "https://github.com/rust-lang/rust/commit/29791ada1ddfbb37c5ad90fc8149577f426cc995", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29791ada1ddfbb37c5ad90fc8149577f426cc995/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a0248068c693c64f74623e9a6f7504b900df8a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0248068c693c64f74623e9a6f7504b900df8a6", "html_url": "https://github.com/rust-lang/rust/commit/5a0248068c693c64f74623e9a6f7504b900df8a6"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "7bcc543023e789fda0f2c1db396cfc15954315b5", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29791ada1ddfbb37c5ad90fc8149577f426cc995/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29791ada1ddfbb37c5ad90fc8149577f426cc995/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=29791ada1ddfbb37c5ad90fc8149577f426cc995", "patch": "@@ -501,11 +501,9 @@ impl<'b> Resolver<'b> {\n         })\n     }\n \n-    pub fn get_macro(&mut self, binding: &'b NameBinding<'b>) -> Rc<SyntaxExtension> {\n-        let def_id = match binding.kind {\n-            NameBindingKind::Def(Def::Macro(def_id)) => def_id,\n-            NameBindingKind::Import { binding, .. } => return self.get_macro(binding),\n-            NameBindingKind::Ambiguity { b1, .. } => return self.get_macro(b1),\n+    pub fn get_macro(&mut self, def: Def) -> Rc<SyntaxExtension> {\n+        let def_id = match def {\n+            Def::Macro(def_id) => def_id,\n             _ => panic!(\"Expected Def::Macro(..)\"),\n         };\n         if let Some(ext) = self.macro_map.get(&def_id) {"}, {"sha": "1c8c77a13d91625088a71086f83de35caa200a54", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/29791ada1ddfbb37c5ad90fc8149577f426cc995/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29791ada1ddfbb37c5ad90fc8149577f426cc995/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=29791ada1ddfbb37c5ad90fc8149577f426cc995", "patch": "@@ -925,6 +925,14 @@ impl<'a> NameBinding<'a> {\n         }\n     }\n \n+    fn get_macro(&self, resolver: &mut Resolver<'a>) -> Rc<SyntaxExtension> {\n+        match self.kind {\n+            NameBindingKind::Import { binding, .. } => binding.get_macro(resolver),\n+            NameBindingKind::Ambiguity { b1, .. } => b1.get_macro(resolver),\n+            _ => resolver.get_macro(self.def()),\n+        }\n+    }\n+\n     // We sometimes need to treat variants as `pub` for backwards compatibility\n     fn pseudo_vis(&self) -> ty::Visibility {\n         if self.is_variant() { ty::Visibility::Public } else { self.vis }"}, {"sha": "ff91e7dc971c1096c2bd8db07a1108f7352bf6b0", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29791ada1ddfbb37c5ad90fc8149577f426cc995/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29791ada1ddfbb37c5ad90fc8149577f426cc995/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=29791ada1ddfbb37c5ad90fc8149577f426cc995", "patch": "@@ -193,7 +193,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n     fn find_attr_invoc(&mut self, attrs: &mut Vec<ast::Attribute>) -> Option<ast::Attribute> {\n         for i in 0..attrs.len() {\n             match self.builtin_macros.get(&attrs[i].name()).cloned() {\n-                Some(binding) => match *self.get_macro(binding) {\n+                Some(binding) => match *binding.get_macro(self) {\n                     MultiModifier(..) | MultiDecorator(..) | SyntaxExtension::AttrProcMacro(..) => {\n                         return Some(attrs.remove(i))\n                     }\n@@ -215,11 +215,11 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n         let invocation = self.invocations[&scope];\n         self.current_module = invocation.module.get();\n-        let result = match self.resolve_legacy_scope(&invocation.legacy_scope, name, false) {\n-            Some(MacroBinding::Legacy(binding)) => Ok(binding.ext.clone()),\n-            Some(MacroBinding::Modern(binding)) => Ok(self.get_macro(binding)),\n+        let ext = match self.resolve_legacy_scope(&invocation.legacy_scope, name, false) {\n+            Some(MacroBinding::Legacy(binding)) => binding.ext.clone(),\n+            Some(MacroBinding::Modern(binding)) => binding.get_macro(self),\n             None => match self.resolve_in_item_lexical_scope(name, MacroNS, None) {\n-                Some(binding) => Ok(self.get_macro(binding)),\n+                Some(binding) => binding.get_macro(self),\n                 None => return Err(if force {\n                     let msg = format!(\"macro undefined: '{}!'\", name);\n                     let mut err = self.session.struct_span_err(path.span, &msg);\n@@ -236,7 +236,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n             self.current_module.legacy_macro_resolutions.borrow_mut()\n                 .push((scope, name, path.span));\n         }\n-        result\n+        Ok(ext)\n     }\n }\n "}]}