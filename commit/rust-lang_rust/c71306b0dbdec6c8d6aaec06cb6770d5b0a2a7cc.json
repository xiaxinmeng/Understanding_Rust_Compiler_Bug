{"sha": "c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3MTMwNmIwZGJkZWM2YzhkNmFhZWMwNmNiNjc3MGQ1YjBhMmE3Y2M=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-07T11:54:00Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-08T20:17:32Z"}, "message": "Explicitly store self_ids use for self locals in methods\n\nThis makes it possible to move them between crates without confusion,\nand to instantiate them at a point where the monomorphizing\nsubstitutions are known.\n\nIssue #1944", "tree": {"sha": "4b3a69f7b3e8af17f7049e4f3b48b1dbfa327579", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b3a69f7b3e8af17f7049e4f3b48b1dbfa327579"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "html_url": "https://github.com/rust-lang/rust/commit/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd465f91a89450b7daebecdde9c280a923bbe394", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd465f91a89450b7daebecdde9c280a923bbe394", "html_url": "https://github.com/rust-lang/rust/commit/fd465f91a89450b7daebecdde9c280a923bbe394"}], "stats": {"total": 104, "additions": 62, "deletions": 42}, "files": [{"sha": "88b70a67fbd118ab0710e5eeebf2a90df6013ffa", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "patch": "@@ -191,10 +191,13 @@ fn visit_ids(item: ast::inlined_item, vfn: fn@(ast::node_id)) {\n \n             alt fk {\n               visit::fk_item_fn(_, tps) |\n-              visit::fk_method(_, tps) |\n               visit::fk_res(_, tps) {\n                 vec::iter(tps) {|tp| vfn(tp.id)}\n               }\n+              visit::fk_method(_, tps, m) {\n+                vfn(m.self_id);\n+                vec::iter(tps) {|tp| vfn(tp.id)}\n+              }\n               visit::fk_anon(_) |\n               visit::fk_fn_block {\n               }"}, {"sha": "9cd3fb062295008f93c87ad6e481abe7af261be9", "filename": "src/rustc/metadata/astencode_gen.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmetadata%2Fastencode_gen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmetadata%2Fastencode_gen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode_gen.rs?ref=c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "patch": "@@ -3938,7 +3938,7 @@ fn serialize_163<S: std::serialization::serializer>(s: S,\n     s.emit_rec(/*syntax::ast::ident*//*[syntax::ast::attribute]*/\n                /*[syntax::ast::ty_param]*//*syntax::ast::fn_decl*/\n                /*syntax::ast::blk*//*syntax::ast::node_id*/\n-               /*syntax::codemap::span*/\n+               /*syntax::codemap::span*//*syntax::ast::node_id*/\n                {||\n                    {\n                        s.emit_rec_field(\"ident\", 0u,\n@@ -3954,7 +3954,9 @@ fn serialize_163<S: std::serialization::serializer>(s: S,\n                        s.emit_rec_field(\"id\", 5u,\n                                         {|| serialize_27(s, v.id) });\n                        s.emit_rec_field(\"span\", 6u,\n-                                        {|| serialize_19(s, v.span) })\n+                                        {|| serialize_19(s, v.span) });\n+                       s.emit_rec_field(\"self_id\", 7u,\n+                                        {|| serialize_27(s, v.self_id) })\n                    }\n                });\n }\n@@ -7845,6 +7847,8 @@ fn deserialize_163<S: std::serialization::deserializer>(s: S) ->\n \n                /*syntax::codemap::span*/\n \n+               /*syntax::ast::node_id*/\n+\n                {||\n                    {ident:\n                         s.read_rec_field(\"ident\", 0u, {|| deserialize_1(s) }),\n@@ -7858,8 +7862,10 @@ fn deserialize_163<S: std::serialization::deserializer>(s: S) ->\n                         s.read_rec_field(\"body\", 4u, {|| deserialize_82(s) }),\n                     id: s.read_rec_field(\"id\", 5u, {|| deserialize_27(s) }),\n                     span:\n-                        s.read_rec_field(\"span\", 6u,\n-                                         {|| deserialize_19(s) }),}\n+                        s.read_rec_field(\"span\", 6u, {|| deserialize_19(s) }),\n+                    self_id:\n+                        s.read_rec_field(\"self_id\", 7u,\n+                                         {|| deserialize_27(s) }),}\n                })\n \n }\n@@ -8165,7 +8171,7 @@ fn serialize_164<S: std::serialization::serializer>(s: S,\n \n     s.emit_enum(\"syntax::ast::def\",\n                 /*syntax::ast::def_id*//*syntax::ast::purity*/\n-                /*syntax::ast::node_id*/\n+                /*syntax::ast::def_id*/\n                 /*syntax::ast::def_id*/\n                 /*syntax::ast::def_id*/\n                 /*syntax::ast::def_id*/\n@@ -8528,7 +8534,7 @@ fn deserialize_164<S: std::serialization::deserializer>(s: S) ->\n     s.read_enum(\"syntax::ast::def\",\n                 /*syntax::ast::def_id*//*syntax::ast::purity*/\n \n-                /*syntax::ast::node_id*/\n+                /*syntax::ast::def_id*/\n \n                 /*syntax::ast::def_id*/\n "}, {"sha": "8ea337bde1f5e901de7ddb5a766174e2293ff0ae", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "patch": "@@ -442,9 +442,11 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n             ebml_w.end_tag();\n         }\n         alt ifce {\n-          some(_) {\n+          some(t) {\n             encode_symbol(ecx, ebml_w, item.id);\n-            let i_ty = ty::lookup_item_type(tcx, local_def(item.id)).ty;\n+            let i_ty = alt check t.node {\n+              ty_path(_, id) { ty::node_id_to_type(tcx, id) }\n+            };\n             ebml_w.start_tag(tag_impl_iface);\n             write_type(ecx, ebml_w, i_ty);\n             ebml_w.end_tag();"}, {"sha": "d1c80090e8ce246b84b55001269e6654ad79a9ad", "filename": "src/rustc/middle/ast_map.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmiddle%2Fast_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmiddle%2Fast_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fast_map.rs?ref=c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "patch": "@@ -132,6 +132,8 @@ fn map_arm(arm: arm, cx: ctx, v: vt) {\n fn map_method(impl_did: def_id, impl_path: @path,\n               m: @method, cx: ctx) {\n     cx.map.insert(m.id, node_method(m, impl_did, impl_path));\n+    cx.map.insert(m.self_id, node_local(cx.local_id));\n+    cx.local_id += 1u;\n }\n \n fn map_item(i: @item, cx: ctx, v: vt) {"}, {"sha": "c440574334ed6fd1da84ab21a000814573a451fc", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "patch": "@@ -530,8 +530,8 @@ fn visit_item_with_scope(e: @env, i: @ast::item, sc: scopes, v: vt<scopes>) {\n         v.visit_ty(sty, sc, v);\n         for m in methods {\n             v.visit_ty_params(m.tps, sc, v);\n-            let msc = cons(scope_method(i.id, tps + m.tps), @sc);\n-            v.visit_fn(visit::fk_method(m.ident, []),\n+            let msc = cons(scope_method(m.self_id, tps + m.tps), @sc);\n+            v.visit_fn(visit::fk_method(m.ident, [], m),\n                        m.decl, m.body, m.span, m.id, msc, v);\n         }\n       }\n@@ -590,7 +590,7 @@ fn visit_fn_with_scope(e: @env, fk: visit::fn_kind, decl: ast::fn_decl,\n     for c: @ast::constr in decl.constraints { resolve_constr(e, c, sc, v); }\n     let scope = alt fk {\n       visit::fk_item_fn(_, tps) | visit::fk_res(_, tps) |\n-      visit::fk_method(_, tps) { scope_bare_fn(decl, id, tps) }\n+      visit::fk_method(_, tps, _) { scope_bare_fn(decl, id, tps) }\n       visit::fk_anon(ast::proto_bare) { scope_bare_fn(decl, id, []) }\n       visit::fk_anon(_) | visit::fk_fn_block { scope_fn_expr(decl, id, []) }\n     };"}, {"sha": "95597bac309c97cf5b2dc05bf278ba7917c9e47c", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "patch": "@@ -2136,7 +2136,7 @@ fn monomorphic_fn(ccx: crate_ctxt, fn_id: ast::def_id, substs: [ty::t],\n                            (*tvs).len() == 1u, [], psubsts, lldecl);\n       }\n       ast_map::node_method(mth, impl_def_id, _) {\n-        let selfty = ty::lookup_item_type(ccx.tcx, impl_def_id).ty;\n+        let selfty = ty::node_id_to_type(ccx.tcx, mth.self_id);\n         let selfty = ty::substitute_type_params(ccx.tcx, substs, selfty);\n         trans_fn(ccx, pt, mth.decl, mth.body, lldecl,\n                  impl_self(selfty), [], psubsts, fn_id.node, none);\n@@ -2315,7 +2315,7 @@ fn trans_local_var(cx: block, def: ast::def) -> local_var_result {\n         assert (cx.fcx.lllocals.contains_key(nid));\n         ret take_local(cx.fcx.lllocals, nid);\n       }\n-      ast::def_self(nid) {\n+      ast::def_self(_) {\n         let slf = option::get(cx.fcx.llself);\n         let ptr = PointerCast(cx, slf.v,\n                               T_ptr(type_of_or_i8(cx.ccx(), slf.t)));\n@@ -4343,7 +4343,7 @@ fn trans_item(ccx: crate_ctxt, item: ast::item) {\n         }\n       }\n       ast::item_impl(tps, _, _, ms) {\n-        impl::trans_impl(ccx, *path, item.ident, ms, item.id, tps);\n+        impl::trans_impl(ccx, *path, item.ident, ms, tps);\n       }\n       ast::item_res(decl, tps, body, dtor_id, ctor_id) {\n         let llctor_decl = get_item_val(ccx, ctor_id);"}, {"sha": "1af4a13331b9ca2eb55ce88c1248e6b081394c4e", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "patch": "@@ -44,14 +44,13 @@ import std::map::hashmap;\n // are referenced (ccx.method_map and ccx.dict_map).\n \n fn trans_impl(ccx: crate_ctxt, path: path, name: ast::ident,\n-              methods: [@ast::method], id: ast::node_id,\n-              tps: [ast::ty_param]) {\n+              methods: [@ast::method], tps: [ast::ty_param]) {\n     let sub_path = path + [path_name(name)];\n     for m in methods {\n         let llfn = get_item_val(ccx, m.id);\n         let m_bounds = param_bounds(ccx, tps + m.tps);\n         trans_fn(ccx, sub_path + [path_name(m.ident)], m.decl, m.body,\n-                 llfn, impl_self(ty::node_id_to_type(ccx.tcx, id)),\n+                 llfn, impl_self(ty::node_id_to_type(ccx.tcx, m.self_id)),\n                  m_bounds, none, m.id, none);\n     }\n }"}, {"sha": "9d4dbec782c9f3f4a196c5851c1cad309a54950c", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "patch": "@@ -2157,8 +2157,13 @@ fn iface_methods(cx: ctxt, id: ast::def_id) -> @[method] {\n \n fn impl_iface(cx: ctxt, id: ast::def_id) -> option<t> {\n     if id.crate == ast::local_crate {\n-        let t = cx.tcache.get(id).ty;\n-        if get(t).struct == ty_nil { none } else { some(t) }\n+        alt cx.items.get(id.node) {\n+          ast_map::node_item(@{node: ast::item_impl(\n+              _, some(@{node: ast::ty_path(_, id), _}), _, _), _}, _) {\n+            some(node_id_to_type(cx, id))\n+          }\n+          _ { none }\n+        }\n     } else {\n         csearch::get_impl_iface(cx, id)\n     }"}, {"sha": "275bb862b844f11f579ad52f9f8bbdb1fe24778e", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "patch": "@@ -106,7 +106,7 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, nid));\n         ret {bounds: @[], ty: typ};\n       }\n-      ast::def_self(id) {\n+      ast::def_self(_) {\n         alt get_self_info(fcx.ccx) {\n           some(self_impl(impl_t)) {\n             ret {bounds: @[], ty: impl_t};\n@@ -362,8 +362,8 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n             }\n             ty::mk_param(tcx, n, id)\n           }\n-          ast::def_self(iface_id) {\n-            alt check tcx.items.get(iface_id) {\n+          ast::def_self(self_id) {\n+            alt check tcx.items.get(self_id) {\n               ast_map::node_item(@{node: ast::item_iface(tps, _), _}, _) {\n                 if vec::len(tps) != vec::len(path.node.types) {\n                     tcx.sess.span_err(ast_ty.span, \"incorrect number of type \\\n@@ -850,7 +850,12 @@ mod collect {\n           ast::item_impl(tps, ifce, selfty, ms) {\n             let i_bounds = ty_param_bounds(tcx, m_collect, tps);\n             let my_methods = [];\n+            let selfty = ast_ty_to_ty(tcx, m_collect, selfty);\n+            write_ty(tcx, it.id, selfty);\n+            tcx.tcache.insert(local_def(it.id), {bounds: i_bounds,\n+                                                 ty: selfty});\n             for m in ms {\n+                write_ty(tcx, m.self_id, selfty);\n                 let bounds = ty_param_bounds(tcx, m_collect, m.tps);\n                 let mty = ty_of_method(tcx, m_collect, m);\n                 my_methods += [{mty: mty, id: m.id, span: m.span}];\n@@ -860,15 +865,15 @@ mod collect {\n                                       ty: fty});\n                 write_ty(tcx, m.id, fty);\n             }\n-            let selfty = ast_ty_to_ty(tcx, m_collect, selfty);\n-            write_ty(tcx, it.id, selfty);\n             alt ifce {\n               some(t) {\n                 let iface_ty = ast_ty_to_ty(tcx, m_collect, t);\n-                tcx.tcache.insert(local_def(it.id),\n-                                     {bounds: i_bounds, ty: iface_ty});\n                 alt ty::get(iface_ty).struct {\n                   ty::ty_iface(did, tys) {\n+                    // Store the iface type in the type node\n+                    alt check t.node {\n+                      ast::ty_path(_, t_id) { write_ty(tcx, t_id, iface_ty); }\n+                    }\n                     if did.crate == ast::local_crate {\n                         ensure_iface_methods(tcx, did.node);\n                     }\n@@ -906,11 +911,7 @@ mod collect {\n                   }\n                 }\n               }\n-              _ {\n-                // Store the bounds with a nil type.\n-                tcx.tcache.insert(local_def(it.id), {bounds: i_bounds,\n-                                                     ty: ty::mk_nil(tcx)});\n-              }\n+              _ {}\n             }\n           }\n           ast::item_res(decl, tps, _, dtor_id, ctor_id) {\n@@ -1665,8 +1666,8 @@ fn impl_self_ty(tcx: ty::ctxt, did: ast::def_id) -> {n_tps: uint, ty: ty::t} {\n           }\n         }\n     } else {\n-        let tpt = csearch::get_type(tcx, did);\n-        {n_tps: vec::len(*tpt.bounds), ty: tpt.ty}\n+        let ity = ty::lookup_item_type(tcx, did);\n+        {n_tps: vec::len(*ity.bounds), ty: ity.ty}\n     }\n }\n "}, {"sha": "e29b80f8d462a2ad12315e112a7124440fc98a42", "filename": "src/rustc/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fast.rs?ref=c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "patch": "@@ -424,7 +424,7 @@ enum ret_style {\n \n type method = {ident: ident, attrs: [attribute],\n                tps: [ty_param], decl: fn_decl, body: blk,\n-               id: node_id, span: span};\n+               id: node_id, span: span, self_id: node_id};\n \n type _mod = {view_items: [@view_item], items: [@item]};\n "}, {"sha": "98f87008a60badbfb1f6e35e47b384e8d185bc1f", "filename": "src/rustc/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fast_util.rs?ref=c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "patch": "@@ -41,7 +41,7 @@ fn def_id_of_def(d: def) -> def_id {\n       def_use(id) |\n       def_class(id) | def_class_field(_, id) | def_class_method(_, id) { id }\n \n-      def_self(id) | def_arg(id, _) | def_local(id, _) |\n+      def_arg(id, _) | def_local(id, _) | def_self(id) |\n       def_upvar(id, _, _) | def_binding(id) {\n         local_def(id)\n       }"}, {"sha": "25e6219161f61b196dfe8ba7f832c44abf1d8577", "filename": "src/rustc/syntax/fold.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Ffold.rs?ref=c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "patch": "@@ -301,7 +301,8 @@ fn noop_fold_method(&&m: @method, fld: ast_fold) -> @method {\n           decl: fold_fn_decl(m.decl, fld),\n           body: fld.fold_block(m.body),\n           id: fld.new_id(m.id),\n-          span: fld.new_span(m.span)};\n+          span: fld.new_span(m.span),\n+          self_id: fld.new_id(m.self_id)};\n }\n \n "}, {"sha": "69c28c3c904ad9a9912b23b97a976a6026d06c39", "filename": "src/rustc/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs?ref=c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "patch": "@@ -1931,7 +1931,8 @@ fn parse_method(p: parser) -> @ast::method {\n     let (inner_attrs, body) = parse_inner_attrs_and_block(p, true);\n     let attrs = attrs + inner_attrs;\n     @{ident: ident, attrs: attrs, tps: tps, decl: decl, body: body,\n-      id: p.get_id(), span: ast_util::mk_sp(lo, body.span.hi)}\n+      id: p.get_id(), span: ast_util::mk_sp(lo, body.span.hi),\n+      self_id: p.get_id()}\n }\n \n fn parse_item_iface(p: parser, attrs: [ast::attribute]) -> @ast::item {"}, {"sha": "dd39028aab366aa2f83ad99cee9f4e62ab59d705", "filename": "src/rustc/syntax/visit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc/src%2Frustc%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fvisit.rs?ref=c71306b0dbdec6c8d6aaec06cb6770d5b0a2a7cc", "patch": "@@ -14,22 +14,22 @@ enum vt<E> { mk_vt(visitor<E>), }\n \n enum fn_kind {\n     fk_item_fn(ident, [ty_param]), //< an item declared with fn()\n-    fk_method(ident, [ty_param]),\n+    fk_method(ident, [ty_param], @method),\n     fk_res(ident, [ty_param]),\n     fk_anon(proto),  //< an anonymous function like fn@(...)\n     fk_fn_block,     //< a block {||...}\n }\n \n fn name_of_fn(fk: fn_kind) -> ident {\n     alt fk {\n-      fk_item_fn(name, _) | fk_method(name, _) | fk_res(name, _) { name }\n+      fk_item_fn(name, _) | fk_method(name, _, _) | fk_res(name, _) { name }\n       fk_anon(_) | fk_fn_block { \"anon\" }\n     }\n }\n \n fn tps_of_fn(fk: fn_kind) -> [ty_param] {\n     alt fk {\n-      fk_item_fn(_, tps) | fk_method(_, tps) | fk_res(_, tps) { tps }\n+      fk_item_fn(_, tps) | fk_method(_, tps, _) | fk_res(_, tps) { tps }\n       fk_anon(_) | fk_fn_block { [] }\n     }\n }\n@@ -256,7 +256,7 @@ fn visit_fn_decl<E>(fd: fn_decl, e: E, v: vt<E>) {\n // because it is not a default impl of any method, though I doubt that really\n // clarifies anything. - Niko\n fn visit_method_helper<E>(m: @method, e: E, v: vt<E>) {\n-    v.visit_fn(fk_method(m.ident, m.tps), m.decl, m.body, m.span,\n+    v.visit_fn(fk_method(m.ident, m.tps, m), m.decl, m.body, m.span,\n                m.id, e, v);\n }\n "}]}