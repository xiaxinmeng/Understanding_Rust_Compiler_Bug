{"sha": "e243be6adad16ad65c3349e476d528d1f416ed59", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNDNiZTZhZGFkMTZhZDY1YzMzNDllNDc2ZDUyOGQxZjQxNmVkNTk=", "commit": {"author": {"name": "jedel1043", "email": "jedel0124@gmail.com", "date": "2021-05-17T03:13:38Z"}, "committer": {"name": "jedel1043", "email": "jedel0124@gmail.com", "date": "2021-05-17T03:13:38Z"}, "message": "Allow formatting `Anonymous{Struct, Union}` declarations", "tree": {"sha": "04143f8bd05648f4e1a9a95d8fbb9f9ac5838a3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04143f8bd05648f4e1a9a95d8fbb9f9ac5838a3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e243be6adad16ad65c3349e476d528d1f416ed59", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e243be6adad16ad65c3349e476d528d1f416ed59", "html_url": "https://github.com/rust-lang/rust/commit/e243be6adad16ad65c3349e476d528d1f416ed59", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e243be6adad16ad65c3349e476d528d1f416ed59/comments", "author": {"login": "jedel1043", "id": 38230983, "node_id": "MDQ6VXNlcjM4MjMwOTgz", "avatar_url": "https://avatars.githubusercontent.com/u/38230983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedel1043", "html_url": "https://github.com/jedel1043", "followers_url": "https://api.github.com/users/jedel1043/followers", "following_url": "https://api.github.com/users/jedel1043/following{/other_user}", "gists_url": "https://api.github.com/users/jedel1043/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedel1043/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedel1043/subscriptions", "organizations_url": "https://api.github.com/users/jedel1043/orgs", "repos_url": "https://api.github.com/users/jedel1043/repos", "events_url": "https://api.github.com/users/jedel1043/events{/privacy}", "received_events_url": "https://api.github.com/users/jedel1043/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jedel1043", "id": 38230983, "node_id": "MDQ6VXNlcjM4MjMwOTgz", "avatar_url": "https://avatars.githubusercontent.com/u/38230983?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jedel1043", "html_url": "https://github.com/jedel1043", "followers_url": "https://api.github.com/users/jedel1043/followers", "following_url": "https://api.github.com/users/jedel1043/following{/other_user}", "gists_url": "https://api.github.com/users/jedel1043/gists{/gist_id}", "starred_url": "https://api.github.com/users/jedel1043/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jedel1043/subscriptions", "organizations_url": "https://api.github.com/users/jedel1043/orgs", "repos_url": "https://api.github.com/users/jedel1043/repos", "events_url": "https://api.github.com/users/jedel1043/events{/privacy}", "received_events_url": "https://api.github.com/users/jedel1043/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d67f1a48efbcdc689c69b6218ec55b541ebf8c7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d67f1a48efbcdc689c69b6218ec55b541ebf8c7a", "html_url": "https://github.com/rust-lang/rust/commit/d67f1a48efbcdc689c69b6218ec55b541ebf8c7a"}], "stats": {"total": 75, "additions": 64, "deletions": 11}, "files": [{"sha": "420484c0ba11e50e5529cdc4ffbd13ea6fa752f0", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e243be6adad16ad65c3349e476d528d1f416ed59/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243be6adad16ad65c3349e476d528d1f416ed59/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=e243be6adad16ad65c3349e476d528d1f416ed59", "patch": "@@ -6,7 +6,7 @@ use std::cmp::{max, min, Ordering};\n use regex::Regex;\n use rustc_ast::visit;\n use rustc_ast::{ast, ptr};\n-use rustc_span::{symbol, BytePos, Span, DUMMY_SP};\n+use rustc_span::{symbol, BytePos, Span};\n \n use crate::attr::filter_inline_attrs;\n use crate::comment::{\n@@ -31,12 +31,7 @@ use crate::stmt::Stmt;\n use crate::utils::*;\n use crate::vertical::rewrite_with_alignment;\n use crate::visitor::FmtVisitor;\n-\n-const DEFAULT_VISIBILITY: ast::Visibility = ast::Visibility {\n-    kind: ast::VisibilityKind::Inherited,\n-    span: DUMMY_SP,\n-    tokens: None,\n-};\n+use crate::DEFAULT_VISIBILITY;\n \n fn type_annotation_separator(config: &Config) -> &str {\n     colon_spaces(config)\n@@ -976,7 +971,7 @@ impl<'a> StructParts<'a> {\n         format_header(context, self.prefix, self.ident, self.vis, offset)\n     }\n \n-    fn from_variant(variant: &'a ast::Variant) -> Self {\n+    pub(crate) fn from_variant(variant: &'a ast::Variant) -> Self {\n         StructParts {\n             prefix: \"\",\n             ident: variant.ident,"}, {"sha": "cde5d390cf259ed5e2947a85f2ec83c19898a763", "filename": "src/lib.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e243be6adad16ad65c3349e476d528d1f416ed59/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243be6adad16ad65c3349e476d528d1f416ed59/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e243be6adad16ad65c3349e476d528d1f416ed59", "patch": "@@ -31,7 +31,7 @@ use std::rc::Rc;\n \n use ignore;\n use rustc_ast::ast;\n-use rustc_span::symbol;\n+use rustc_span::{symbol, DUMMY_SP};\n use thiserror::Error;\n \n use crate::comment::LineClasses;\n@@ -95,6 +95,11 @@ mod types;\n mod vertical;\n pub(crate) mod visitor;\n \n+const DEFAULT_VISIBILITY: ast::Visibility = ast::Visibility {\n+    kind: ast::VisibilityKind::Inherited,\n+    span: DUMMY_SP,\n+    tokens: None,\n+};\n /// The various errors that can occur during formatting. Note that not all of\n /// these can currently be propagated to clients.\n #[derive(Error, Debug)]"}, {"sha": "5597af9ee320cbe67ec82f37d6bb9a01ce073b3c", "filename": "src/types.rs", "status": "modified", "additions": 55, "deletions": 2, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/e243be6adad16ad65c3349e476d528d1f416ed59/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e243be6adad16ad65c3349e476d528d1f416ed59/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=e243be6adad16ad65c3349e476d528d1f416ed59", "patch": "@@ -2,14 +2,14 @@ use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n use rustc_ast::ast::{self, FnRetTy, Mutability};\n-use rustc_span::{symbol::kw, BytePos, Pos, Span};\n+use rustc_span::{symbol::kw, symbol::Ident, BytePos, Pos, Span};\n \n-use crate::comment::{combine_strs_with_missing_comments, contains_comment};\n use crate::config::lists::*;\n use crate::config::{IndentStyle, TypeDensity, Version};\n use crate::expr::{\n     format_expr, rewrite_assign_rhs, rewrite_call, rewrite_tuple, rewrite_unary_prefix, ExprType,\n };\n+use crate::items::StructParts;\n use crate::lists::{\n     definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n };\n@@ -24,6 +24,11 @@ use crate::utils::{\n     colon_spaces, extra_offset, first_line_width, format_extern, format_mutability,\n     last_line_extendable, last_line_width, mk_sp, rewrite_ident,\n };\n+use crate::DEFAULT_VISIBILITY;\n+use crate::{\n+    comment::{combine_strs_with_missing_comments, contains_comment},\n+    items::format_struct_struct,\n+};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(crate) enum PathContext {\n@@ -764,6 +769,54 @@ impl Rewrite for ast::Ty {\n             ast::TyKind::Tup(ref items) => {\n                 rewrite_tuple(context, items.iter(), self.span, shape, items.len() == 1)\n             }\n+            ast::TyKind::AnonymousStruct(ref fields, recovered) => {\n+                let ident = Ident::new(\n+                    kw::Struct,\n+                    mk_sp(self.span.lo(), self.span.lo() + BytePos(6)),\n+                );\n+                let data = ast::VariantData::Struct(fields.clone(), recovered);\n+                let variant = ast::Variant {\n+                    attrs: vec![],\n+                    id: self.id,\n+                    span: self.span,\n+                    vis: DEFAULT_VISIBILITY,\n+                    ident,\n+                    data,\n+                    disr_expr: None,\n+                    is_placeholder: false,\n+                };\n+                format_struct_struct(\n+                    &context,\n+                    &StructParts::from_variant(&variant),\n+                    fields,\n+                    shape.indent,\n+                    None,\n+                )\n+            }\n+            ast::TyKind::AnonymousUnion(ref fields, recovered) => {\n+                let ident = Ident::new(\n+                    kw::Union,\n+                    mk_sp(self.span.lo(), self.span.lo() + BytePos(5)),\n+                );\n+                let data = ast::VariantData::Struct(fields.clone(), recovered);\n+                let variant = ast::Variant {\n+                    attrs: vec![],\n+                    id: self.id,\n+                    span: self.span,\n+                    vis: DEFAULT_VISIBILITY,\n+                    ident,\n+                    data,\n+                    disr_expr: None,\n+                    is_placeholder: false,\n+                };\n+                format_struct_struct(\n+                    &context,\n+                    &StructParts::from_variant(&variant),\n+                    fields,\n+                    shape.indent,\n+                    None,\n+                )\n+            }\n             ast::TyKind::Path(ref q_self, ref path) => {\n                 rewrite_path(context, PathContext::Type, q_self.as_ref(), path, shape)\n             }"}]}