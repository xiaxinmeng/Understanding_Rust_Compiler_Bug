{"sha": "221bdb62a23f54a32b56b55a6578646f3594fd3b", "node_id": "C_kwDOAAsO6NoAKDIyMWJkYjYyYTIzZjU0YTMyYjU2YjU1YTY1Nzg2NDZmMzU5NGZkM2I", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-27T00:27:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-27T00:27:40Z"}, "message": "Auto merge of #98212 - petrochenkov:addlinkargs, r=lqd\n\nrustc_target: Add convenience functions for adding linker arguments\n\nThey ensure that lld and non-lld linker flavors get the same set of arguments.\n\nThe second commit also adds some tests checking for linker argument inconsistencies, and tweaks some arguments to fix those inconsistencies.", "tree": {"sha": "2399dd952543d5d43ac5388ffeb05772e0cd47e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2399dd952543d5d43ac5388ffeb05772e0cd47e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/221bdb62a23f54a32b56b55a6578646f3594fd3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/221bdb62a23f54a32b56b55a6578646f3594fd3b", "html_url": "https://github.com/rust-lang/rust/commit/221bdb62a23f54a32b56b55a6578646f3594fd3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/221bdb62a23f54a32b56b55a6578646f3594fd3b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b0d4813ab461ec81eab8980bb884691c97c5a35", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0d4813ab461ec81eab8980bb884691c97c5a35", "html_url": "https://github.com/rust-lang/rust/commit/3b0d4813ab461ec81eab8980bb884691c97c5a35"}, {"sha": "456f65ec8b7ec815cab39929b31f4b6e181651c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/456f65ec8b7ec815cab39929b31f4b6e181651c2", "html_url": "https://github.com/rust-lang/rust/commit/456f65ec8b7ec815cab39929b31f4b6e181651c2"}], "stats": {"total": 902, "additions": 459, "deletions": 443}, "files": [{"sha": "59dbea705344775dd515a990495a643a596ca150", "filename": "compiler/rustc_target/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Flib.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -8,6 +8,7 @@\n //! LLVM.\n \n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n+#![feature(assert_matches)]\n #![feature(associated_type_bounds)]\n #![feature(exhaustive_patterns)]\n #![feature(let_else)]"}, {"sha": "9d36e37d7b82ec5dccc3eb1f7f22d62afad7bacf", "filename": "compiler/rustc_target/src/spec/aarch64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_apple_darwin.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -8,7 +8,7 @@ pub fn target() -> Target {\n     // FIXME: The leak sanitizer currently fails the tests, see #88132.\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI | SanitizerSet::THREAD;\n \n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-arch\".into(), \"arm64\".into()]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-arch\", \"arm64\"]);\n     base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n \n     // Clang automatically chooses a more specific target based on"}, {"sha": "162b091b269abcca601a4606133b7b7c5627ad5a", "filename": "compiler/rustc_target/src/spec/aarch64_unknown_uefi.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Faarch64_unknown_uefi.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -2,20 +2,13 @@\n // uefi-base module for generic UEFI options.\n \n use super::uefi_msvc_base;\n-use crate::spec::{LinkerFlavor, LldFlavor, Target};\n+use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = uefi_msvc_base::opts();\n \n     base.max_atomic_width = Some(64);\n-\n-    let pre_link_args_msvc = vec![\"/machine:arm64\".into()];\n-\n-    base.pre_link_args.get_mut(&LinkerFlavor::Msvc).unwrap().extend(pre_link_args_msvc.clone());\n-    base.pre_link_args\n-        .get_mut(&LinkerFlavor::Lld(LldFlavor::Link))\n-        .unwrap()\n-        .extend(pre_link_args_msvc);\n+    base.add_pre_link_args(LinkerFlavor::Msvc, &[\"/machine:arm64\"]);\n \n     Target {\n         llvm_target: \"aarch64-unknown-windows\".into(),"}, {"sha": "8c2a9bcfde66a5e98766eee0bf7ce7875093b234", "filename": "compiler/rustc_target/src/spec/armv6k_nintendo_3ds.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,19 +1,13 @@\n-use crate::spec::{cvs, LinkArgs, LinkerFlavor, RelocModel, Target, TargetOptions};\n+use crate::spec::{cvs, LinkerFlavor, RelocModel, Target, TargetOptions};\n \n /// A base target for Nintendo 3DS devices using the devkitARM toolchain.\n ///\n /// Requires the devkitARM toolchain for 3DS targets on the host system.\n \n pub fn target() -> Target {\n-    let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(\n+    let pre_link_args = TargetOptions::link_args(\n         LinkerFlavor::Gcc,\n-        vec![\n-            \"-specs=3dsx.specs\".into(),\n-            \"-mtune=mpcore\".into(),\n-            \"-mfloat-abi=hard\".into(),\n-            \"-mtp=soft\".into(),\n-        ],\n+        &[\"-specs=3dsx.specs\", \"-mtune=mpcore\", \"-mfloat-abi=hard\", \"-mtp=soft\"],\n     );\n \n     Target {"}, {"sha": "38c117a495e6096c333c6a165d1f768d603e8dad", "filename": "compiler/rustc_target/src/spec/armv7_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv7_linux_androideabi.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -10,7 +10,7 @@ use crate::spec::{LinkerFlavor, SanitizerSet, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-march=armv7-a\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-march=armv7-a\"]);\n     Target {\n         llvm_target: \"armv7-none-linux-android\".into(),\n         pointer_width: 32,"}, {"sha": "b4cf2c5ee229496f71f65ba2eebb2af13b208913", "filename": "compiler/rustc_target/src/spec/asmjs_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fasmjs_unknown_emscripten.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -2,10 +2,6 @@ use super::{wasm32_unknown_emscripten, LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut target = wasm32_unknown_emscripten::target();\n-    target.post_link_args.entry(LinkerFlavor::Em).or_default().extend(vec![\n-        \"-sWASM=0\".into(),\n-        \"--memory-init-file\".into(),\n-        \"0\".into(),\n-    ]);\n+    target.add_post_link_args(LinkerFlavor::Em, &[\"-sWASM=0\", \"--memory-init-file\", \"0\"]);\n     target\n }"}, {"sha": "4fd6c06394dafb41c45cb1bdd85d2c4a7498d564", "filename": "compiler/rustc_target/src/spec/avr_gnu_base.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_gnu_base.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -3,7 +3,8 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n /// A base target for AVR devices using the GNU toolchain.\n ///\n /// Requires GNU avr-gcc and avr-binutils on the host system.\n-pub fn target(target_cpu: &'static str) -> Target {\n+/// FIXME: Remove the second parameter when const string concatenation is possible.\n+pub fn target(target_cpu: &'static str, mmcu: &'static str) -> Target {\n     Target {\n         arch: \"avr\".into(),\n         data_layout: \"e-P1-p:16:8-i8:8-i16:8-i32:8-i64:8-f32:8-f64:8-n8-a:8\".into(),\n@@ -17,10 +18,8 @@ pub fn target(target_cpu: &'static str) -> Target {\n             linker: Some(\"avr-gcc\".into()),\n             executables: true,\n             eh_frame_header: false,\n-            pre_link_args: [(LinkerFlavor::Gcc, vec![format!(\"-mmcu={}\", target_cpu).into()])]\n-                .into_iter()\n-                .collect(),\n-            late_link_args: [(LinkerFlavor::Gcc, vec![\"-lgcc\".into()])].into_iter().collect(),\n+            pre_link_args: TargetOptions::link_args(LinkerFlavor::Gcc, &[mmcu]),\n+            late_link_args: TargetOptions::link_args(LinkerFlavor::Gcc, &[\"-lgcc\"]),\n             max_atomic_width: Some(0),\n             atomic_cas: false,\n             ..TargetOptions::default()"}, {"sha": "6c16b03cc283d5f7101df4a09cf0985ab3a70273", "filename": "compiler/rustc_target/src/spec/avr_unknown_gnu_atmega328.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_unknown_gnu_atmega328.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_unknown_gnu_atmega328.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Favr_unknown_gnu_atmega328.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,5 +1,5 @@\n use crate::spec::Target;\n \n pub fn target() -> Target {\n-    super::avr_gnu_base::target(\"atmega328\")\n+    super::avr_gnu_base::target(\"atmega328\", \"-mmcu=atmega328\")\n }"}, {"sha": "b02b70f76eefa6625016035a3c919adaa0067097", "filename": "compiler/rustc_target/src/spec/fuchsia_base.rs", "status": "modified", "additions": 15, "deletions": 18, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ffuchsia_base.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,23 +1,20 @@\n-use crate::spec::{\n-    crt_objects, cvs, LinkArgs, LinkOutputKind, LinkerFlavor, LldFlavor, TargetOptions,\n-};\n+use crate::spec::{crt_objects, cvs, LinkOutputKind, LinkerFlavor, LldFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(\n-        LinkerFlavor::Lld(LldFlavor::Ld),\n-        vec![\n-            \"--build-id\".into(),\n-            \"--hash-style=gnu\".into(),\n-            \"-z\".into(),\n-            \"max-page-size=4096\".into(),\n-            \"-z\".into(),\n-            \"now\".into(),\n-            \"-z\".into(),\n-            \"rodynamic\".into(),\n-            \"-z\".into(),\n-            \"separate-loadable-segments\".into(),\n-            \"--pack-dyn-relocs=relr\".into(),\n+    let pre_link_args = TargetOptions::link_args(\n+        LinkerFlavor::Ld,\n+        &[\n+            \"--build-id\",\n+            \"--hash-style=gnu\",\n+            \"-z\",\n+            \"max-page-size=4096\",\n+            \"-z\",\n+            \"now\",\n+            \"-z\",\n+            \"rodynamic\",\n+            \"-z\",\n+            \"separate-loadable-segments\",\n+            \"--pack-dyn-relocs=relr\",\n         ],\n     );\n "}, {"sha": "e43153177f03c24021d1ebbe8dd26cf4a87dce17", "filename": "compiler/rustc_target/src/spec/hermit_base.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fhermit_base.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,10 +1,9 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions, TlsModel};\n+use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, TargetOptions, TlsModel};\n \n pub fn opts() -> TargetOptions {\n-    let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(\n-        LinkerFlavor::Lld(LldFlavor::Ld),\n-        vec![\"--build-id\".into(), \"--hash-style=gnu\".into(), \"--Bstatic\".into()],\n+    let pre_link_args = TargetOptions::link_args(\n+        LinkerFlavor::Ld,\n+        &[\"--build-id\", \"--hash-style=gnu\", \"--Bstatic\"],\n     );\n \n     TargetOptions {"}, {"sha": "1718bd77b868fc9a72ff1004c171cb8f6ffcc6a7", "filename": "compiler/rustc_target/src/spec/i686_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_apple_darwin.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::apple_base::opts(\"macos\");\n     base.cpu = \"yonah\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".into()]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n     base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;"}, {"sha": "6318654399c47bbb9e87f177dffdbb65c909818e", "filename": "compiler/rustc_target/src/spec/i686_pc_windows_gnu.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_gnu.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,19 +1,16 @@\n-use crate::spec::{FramePointer, LinkerFlavor, LldFlavor, Target};\n+use crate::spec::{FramePointer, LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"pentium4\".into();\n-    base.pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".into(), \"i386pe\".into()]);\n     base.max_atomic_width = Some(64);\n     base.frame_pointer = FramePointer::Always; // Required for backtraces\n     base.linker = Some(\"i686-w64-mingw32-gcc\".into());\n \n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64.\n-    base.pre_link_args\n-        .entry(LinkerFlavor::Gcc)\n-        .or_default()\n-        .push(\"-Wl,--large-address-aware\".into());\n+    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pe\", \"--large-address-aware\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-Wl,--large-address-aware\"]);\n \n     Target {\n         llvm_target: \"i686-pc-windows-gnu\".into(),"}, {"sha": "f4ceaa1ca4bb85c98e9459bf44fdaef3162c95be", "filename": "compiler/rustc_target/src/spec/i686_pc_windows_msvc.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_pc_windows_msvc.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,24 +1,22 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target};\n+use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n \n-    let pre_link_args_msvc = vec![\n-        // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n-        // space available to x86 Windows binaries on x86_64.\n-        \"/LARGEADDRESSAWARE\".into(),\n-        // Ensure the linker will only produce an image if it can also produce a table of\n-        // the image's safe exception handlers.\n-        // https://docs.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers\n-        \"/SAFESEH\".into(),\n-    ];\n-    base.pre_link_args.entry(LinkerFlavor::Msvc).or_default().extend(pre_link_args_msvc.clone());\n-    base.pre_link_args\n-        .entry(LinkerFlavor::Lld(LldFlavor::Link))\n-        .or_default()\n-        .extend(pre_link_args_msvc);\n+    base.add_pre_link_args(\n+        LinkerFlavor::Msvc,\n+        &[\n+            // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n+            // space available to x86 Windows binaries on x86_64.\n+            \"/LARGEADDRESSAWARE\",\n+            // Ensure the linker will only produce an image if it can also produce a table of\n+            // the image's safe exception handlers.\n+            // https://docs.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers\n+            \"/SAFESEH\",\n+        ],\n+    );\n     // Workaround for #95429\n     base.has_thread_local = false;\n "}, {"sha": "aff284bf2bcf7af8be18bc1b722bdc9081a77b6f", "filename": "compiler/rustc_target/src/spec/i686_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_freebsd.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,9 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    let pre_link_args = base.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n-    pre_link_args.push(\"-m32\".into());\n-    pre_link_args.push(\"-Wl,-znotext\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"-Wl,-znotext\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n "}, {"sha": "87aa74e406c97c3642f72527b4c55457aa400b54", "filename": "compiler/rustc_target/src/spec/i686_unknown_haiku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_haiku.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::haiku_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m32\".into()]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n "}, {"sha": "765803d169280c47f55b1e3d9d263b283e467268", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_gnu.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n "}, {"sha": "d9492804349b30c94d78d3f8d3dfe19a123c08db", "filename": "compiler/rustc_target/src/spec/i686_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_linux_musl.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,8 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-Wl,-melf_i386\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"-Wl,-melf_i386\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n "}, {"sha": "8de698b51f0871809b80a27ad5affa9569bc8ff3", "filename": "compiler/rustc_target/src/spec/i686_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_netbsd.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n "}, {"sha": "7f25a1a16c179249f96a1a4c4475c4e8392f04cf", "filename": "compiler/rustc_target/src/spec/i686_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_unknown_openbsd.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,8 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-fuse-ld=lld\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"-fuse-ld=lld\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n "}, {"sha": "d52810d2fb08b3e2651eb771b0d13a4ab7a4039f", "filename": "compiler/rustc_target/src/spec/i686_uwp_windows_gnu.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_uwp_windows_gnu.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,18 +1,15 @@\n-use crate::spec::{FramePointer, LinkerFlavor, LldFlavor, Target};\n+use crate::spec::{FramePointer, LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"pentium4\".into();\n-    base.pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".into(), \"i386pe\".into()]);\n     base.max_atomic_width = Some(64);\n     base.frame_pointer = FramePointer::Always; // Required for backtraces\n \n     // Mark all dynamic libraries and executables as compatible with the larger 4GiB address\n     // space available to x86 Windows binaries on x86_64.\n-    base.pre_link_args\n-        .entry(LinkerFlavor::Gcc)\n-        .or_default()\n-        .push(\"-Wl,--large-address-aware\".into());\n+    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pe\", \"--large-address-aware\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-Wl,--large-address-aware\"]);\n \n     Target {\n         llvm_target: \"i686-pc-windows-gnu\".into(),"}, {"sha": "f62404e827936f3be59f86b97853889c4d742073", "filename": "compiler/rustc_target/src/spec/i686_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fi686_wrs_vxworks.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"pentium4\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n "}, {"sha": "b0e1b109be1dbe55320166b6ee64b895a4c96495", "filename": "compiler/rustc_target/src/spec/illumos_base.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fillumos_base.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,10 +1,9 @@\n-use crate::spec::{cvs, FramePointer, LinkArgs, LinkerFlavor, TargetOptions};\n+use crate::spec::{cvs, FramePointer, LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let mut late_link_args = LinkArgs::new();\n-    late_link_args.insert(\n+    let late_link_args = TargetOptions::link_args(\n         LinkerFlavor::Gcc,\n-        vec![\n+        &[\n             // The illumos libc contains a stack unwinding implementation, as\n             // does libgcc_s.  The latter implementation includes several\n             // additional symbols that are not always in base libc.  To force\n@@ -15,13 +14,13 @@ pub fn opts() -> TargetOptions {\n             // FIXME: This should be replaced by a more complete and generic\n             // mechanism for controlling the order of library arguments passed\n             // to the linker.\n-            \"-lc\".into(),\n+            \"-lc\",\n             // LLVM will insert calls to the stack protector functions\n             // \"__stack_chk_fail\" and \"__stack_chk_guard\" into code in native\n             // object files.  Some platforms include these symbols directly in\n             // libc, but at least historically these have been provided in\n             // libssp.so on illumos and Solaris systems.\n-            \"-lssp\".into(),\n+            \"-lssp\",\n         ],\n     );\n "}, {"sha": "e3522de6de0952cd2e97a6105ed28ad9f9d9cc68", "filename": "compiler/rustc_target/src/spec/mipsel_sony_psp.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmipsel_sony_psp.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,13 +1,11 @@\n use crate::spec::{cvs, Target, TargetOptions};\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, RelocModel};\n+use crate::spec::{LinkerFlavor, LldFlavor, RelocModel};\n \n // The PSP has custom linker requirements.\n const LINKER_SCRIPT: &str = include_str!(\"./mipsel_sony_psp_linker_script.ld\");\n \n pub fn target() -> Target {\n-    let mut pre_link_args = LinkArgs::new();\n-    pre_link_args\n-        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"--emit-relocs\".into(), \"--nmagic\".into()]);\n+    let pre_link_args = TargetOptions::link_args(LinkerFlavor::Ld, &[\"--emit-relocs\", \"--nmagic\"]);\n \n     Target {\n         llvm_target: \"mipsel-sony-psp\".into(),"}, {"sha": "a08603da04095c8cd57f68662fd475e88faff6ab", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1459,6 +1459,44 @@ pub struct TargetOptions {\n     pub supports_stack_protector: bool,\n }\n \n+/// Add arguments for the given flavor and also for its \"twin\" flavors\n+/// that have a compatible command line interface.\n+fn add_link_args(link_args: &mut LinkArgs, flavor: LinkerFlavor, args: &[&'static str]) {\n+    let mut insert = |flavor| {\n+        link_args.entry(flavor).or_default().extend(args.iter().copied().map(Cow::Borrowed))\n+    };\n+    insert(flavor);\n+    match flavor {\n+        LinkerFlavor::Ld => insert(LinkerFlavor::Lld(LldFlavor::Ld)),\n+        LinkerFlavor::Msvc => insert(LinkerFlavor::Lld(LldFlavor::Link)),\n+        LinkerFlavor::Lld(LldFlavor::Wasm) => {}\n+        LinkerFlavor::Lld(lld_flavor) => {\n+            panic!(\"add_link_args: use non-LLD flavor for {:?}\", lld_flavor)\n+        }\n+        LinkerFlavor::Gcc\n+        | LinkerFlavor::Em\n+        | LinkerFlavor::L4Bender\n+        | LinkerFlavor::BpfLinker\n+        | LinkerFlavor::PtxLinker => {}\n+    }\n+}\n+\n+impl TargetOptions {\n+    fn link_args(flavor: LinkerFlavor, args: &[&'static str]) -> LinkArgs {\n+        let mut link_args = LinkArgs::new();\n+        add_link_args(&mut link_args, flavor, args);\n+        link_args\n+    }\n+\n+    fn add_pre_link_args(&mut self, flavor: LinkerFlavor, args: &[&'static str]) {\n+        add_link_args(&mut self.pre_link_args, flavor, args);\n+    }\n+\n+    fn add_post_link_args(&mut self, flavor: LinkerFlavor, args: &[&'static str]) {\n+        add_link_args(&mut self.post_link_args, flavor, args);\n+    }\n+}\n+\n impl Default for TargetOptions {\n     /// Creates a set of \"sane defaults\" for any target. This is still\n     /// incomplete, and if used for compilation, will certainly not work."}, {"sha": "c4df4b546e3299335aad8f4b39983acc1b51cf53", "filename": "compiler/rustc_target/src/spec/msvc_base.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmsvc_base.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,14 +1,9 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, SplitDebuginfo, TargetOptions};\n+use crate::spec::{LinkerFlavor, LldFlavor, SplitDebuginfo, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let pre_link_args_msvc = vec![\n-        // Suppress the verbose logo and authorship debugging output, which would needlessly\n-        // clog any log files.\n-        \"/NOLOGO\".into(),\n-    ];\n-    let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(LinkerFlavor::Msvc, pre_link_args_msvc.clone());\n-    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Link), pre_link_args_msvc);\n+    // Suppress the verbose logo and authorship debugging output, which would needlessly\n+    // clog any log files.\n+    let pre_link_args = TargetOptions::link_args(LinkerFlavor::Msvc, &[\"/NOLOGO\"]);\n \n     TargetOptions {\n         linker_flavor: LinkerFlavor::Msvc,"}, {"sha": "803453c4ac4117724f0ef09fc44ff5d96fb7e3e0", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_freebsd.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"ppc64\".into();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "5413c4f33ff615526030d0b88e646ffa5a94bf10", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_gnu.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ use crate::spec::{LinkerFlavor, RelroLevel, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"ppc64\".into();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n \n     // ld.so in at least RHEL6 on ppc64 has a bug related to BIND_NOW, so only enable partial RELRO"}, {"sha": "159335eb60735f11d195fbf78665b3f926743ee9", "filename": "compiler/rustc_target/src/spec/powerpc64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_unknown_linux_musl.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"ppc64\".into();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "b7420d232ca8012a418fa985affe96dc1f4332c9", "filename": "compiler/rustc_target/src/spec/powerpc64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64_wrs_vxworks.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"ppc64\".into();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "a3d18004371395406ab00290436f118b38a42627", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_freebsd.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"ppc64le\".into();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "e18ff3be4485a1ad47361304de950cb37422c5e7", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_gnu.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"ppc64le\".into();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "b84943d23a9613955af9393852702922e4e2d727", "filename": "compiler/rustc_target/src/spec/powerpc64le_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc64le_unknown_linux_musl.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"ppc64le\".into();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "516b2de37eaa7cc77afb068592b08fd5065f705f", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_freebsd.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -3,12 +3,8 @@ use crate::spec::{LinkerFlavor, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n     // Extra hint to linker that we are generating secure-PLT code.\n-    base.pre_link_args\n-        .entry(LinkerFlavor::Gcc)\n-        .or_default()\n-        .push(\"--target=powerpc-unknown-freebsd13.0\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"--target=powerpc-unknown-freebsd13.0\"]);\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "6686a0bbf04aa66dec9907d9352da2be4f4af499", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnu.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "6a250f4b51c90974f8c0882ab652ecbcae6b7bcb", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_gnuspe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_gnuspe.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mspe\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-mspe\"]);\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "34200c6790670a25f53b4e065778351ae30b08eb", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_linux_musl.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "60661ef9b5d4f8bd2cd2a65a047c58ce97ee5d7a", "filename": "compiler/rustc_target/src/spec/powerpc_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_unknown_netbsd.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -3,7 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\"]);\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "3f24966e06ec74eb50900e9204a8d34bf993ba56", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -3,8 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m32\".into());\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"--secure-plt\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m32\", \"--secure-plt\"]);\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "0f04f41f9e5920d22ac1d7ec25699d38fe90a796", "filename": "compiler/rustc_target/src/spec/powerpc_wrs_vxworks_spe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fpowerpc_wrs_vxworks_spe.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -3,8 +3,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mspe\".into());\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"--secure-plt\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-mspe\", \"--secure-plt\"]);\n     base.max_atomic_width = Some(32);\n \n     Target {"}, {"sha": "836ab0e37283aab567a23f781b40d14e7ef00d1a", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_netbsd.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"v9\".into();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "4a192df392fa3ee04facc6e7195dfd4ab2049dd1", "filename": "compiler/rustc_target/src/spec/sparc64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc64_unknown_openbsd.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -5,7 +5,7 @@ pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.endian = Endian::Big;\n     base.cpu = \"v9\".into();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "ea4fafa4b065484746bc3d5b216872ab2ad26820", "filename": "compiler/rustc_target/src/spec/sparc_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparc_unknown_linux_gnu.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -6,7 +6,7 @@ pub fn target() -> Target {\n     base.endian = Endian::Big;\n     base.cpu = \"v9\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mv8plus\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-mv8plus\"]);\n \n     Target {\n         llvm_target: \"sparc-unknown-linux-gnu\".into(),"}, {"sha": "aac09181a74d1bb6e10d48067731f1440d96f293", "filename": "compiler/rustc_target/src/spec/sparcv9_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ use crate::spec::{LinkerFlavor, Target};\n pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n     base.endian = Endian::Big;\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".into()]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     // llvm calls this \"v9\"\n     base.cpu = \"v9\".into();\n     base.vendor = \"sun\".into();"}, {"sha": "c7c5a23190102c4c67f1c234df95f1ff0d4bfaf4", "filename": "compiler/rustc_target/src/spec/tests/tests_impl.rs", "status": "modified", "additions": 84, "deletions": 13, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Ftests%2Ftests_impl.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,4 +1,5 @@\n use super::super::*;\n+use std::assert_matches::assert_matches;\n \n // Test target self-consistency and JSON encoding/decoding roundtrip.\n pub(super) fn test_target(target: Target) {\n@@ -14,35 +15,105 @@ impl Target {\n         assert_eq!(self.is_like_wasm, self.arch == \"wasm32\" || self.arch == \"wasm64\");\n         assert!(self.is_like_windows || !self.is_like_msvc);\n \n-        // Check that LLD with the given flavor is treated identically to the linker it emulates.\n-        // If your target really needs to deviate from the rules below, except it and document the\n-        // reasons.\n-        assert_eq!(\n-            self.linker_flavor == LinkerFlavor::Msvc\n-                || self.linker_flavor == LinkerFlavor::Lld(LldFlavor::Link),\n-            self.lld_flavor == LldFlavor::Link,\n-        );\n-        assert_eq!(self.is_like_msvc, self.lld_flavor == LldFlavor::Link);\n-        for args in &[\n+        // Check that default linker flavor and lld flavor are compatible\n+        // with some other key properties.\n+        assert_eq!(self.is_like_osx, matches!(self.lld_flavor, LldFlavor::Ld64));\n+        assert_eq!(self.is_like_msvc, matches!(self.lld_flavor, LldFlavor::Link));\n+        assert_eq!(self.is_like_wasm, matches!(self.lld_flavor, LldFlavor::Wasm));\n+        assert_eq!(self.os == \"l4re\", matches!(self.linker_flavor, LinkerFlavor::L4Bender));\n+        assert_eq!(self.os == \"emscripten\", matches!(self.linker_flavor, LinkerFlavor::Em));\n+        assert_eq!(self.arch == \"bpf\", matches!(self.linker_flavor, LinkerFlavor::BpfLinker));\n+        assert_eq!(self.arch == \"nvptx64\", matches!(self.linker_flavor, LinkerFlavor::PtxLinker));\n+\n+        for args in [\n             &self.pre_link_args,\n             &self.late_link_args,\n             &self.late_link_args_dynamic,\n             &self.late_link_args_static,\n             &self.post_link_args,\n         ] {\n+            for (&flavor, flavor_args) in args {\n+                assert!(!flavor_args.is_empty());\n+                // Check that flavors mentioned in link args are compatible with the default flavor.\n+                match (self.linker_flavor, self.lld_flavor) {\n+                    (\n+                        LinkerFlavor::Ld | LinkerFlavor::Lld(LldFlavor::Ld) | LinkerFlavor::Gcc,\n+                        LldFlavor::Ld,\n+                    ) => {\n+                        assert_matches!(\n+                            flavor,\n+                            LinkerFlavor::Ld | LinkerFlavor::Lld(LldFlavor::Ld) | LinkerFlavor::Gcc\n+                        )\n+                    }\n+                    (LinkerFlavor::Gcc, LldFlavor::Ld64) => {\n+                        assert_matches!(flavor, LinkerFlavor::Gcc)\n+                    }\n+                    (LinkerFlavor::Msvc | LinkerFlavor::Lld(LldFlavor::Link), LldFlavor::Link) => {\n+                        assert_matches!(\n+                            flavor,\n+                            LinkerFlavor::Msvc | LinkerFlavor::Lld(LldFlavor::Link)\n+                        )\n+                    }\n+                    (LinkerFlavor::Lld(LldFlavor::Wasm) | LinkerFlavor::Gcc, LldFlavor::Wasm) => {\n+                        assert_matches!(\n+                            flavor,\n+                            LinkerFlavor::Lld(LldFlavor::Wasm) | LinkerFlavor::Gcc\n+                        )\n+                    }\n+                    (LinkerFlavor::L4Bender, LldFlavor::Ld) => {\n+                        assert_matches!(flavor, LinkerFlavor::L4Bender)\n+                    }\n+                    (LinkerFlavor::Em, LldFlavor::Wasm) => {\n+                        assert_matches!(flavor, LinkerFlavor::Em)\n+                    }\n+                    (LinkerFlavor::BpfLinker, LldFlavor::Ld) => {\n+                        assert_matches!(flavor, LinkerFlavor::BpfLinker)\n+                    }\n+                    (LinkerFlavor::PtxLinker, LldFlavor::Ld) => {\n+                        assert_matches!(flavor, LinkerFlavor::PtxLinker)\n+                    }\n+                    flavors => unreachable!(\"unexpected flavor combination: {:?}\", flavors),\n+                }\n+\n+                // Check that link args for cc and non-cc versions of flavors are consistent.\n+                let check_noncc = |noncc_flavor| {\n+                    if let Some(noncc_args) = args.get(&noncc_flavor) {\n+                        for arg in flavor_args {\n+                            if let Some(suffix) = arg.strip_prefix(\"-Wl,\") {\n+                                assert!(noncc_args.iter().any(|a| a == suffix));\n+                            }\n+                        }\n+                    }\n+                };\n+                match self.linker_flavor {\n+                    LinkerFlavor::Gcc => match self.lld_flavor {\n+                        LldFlavor::Ld => {\n+                            check_noncc(LinkerFlavor::Ld);\n+                            check_noncc(LinkerFlavor::Lld(LldFlavor::Ld));\n+                        }\n+                        LldFlavor::Wasm => check_noncc(LinkerFlavor::Lld(LldFlavor::Wasm)),\n+                        LldFlavor::Ld64 | LldFlavor::Link => {}\n+                    },\n+                    _ => {}\n+                }\n+            }\n+\n+            // Check that link args for lld and non-lld versions of flavors are consistent.\n+            assert_eq!(args.get(&LinkerFlavor::Ld), args.get(&LinkerFlavor::Lld(LldFlavor::Ld)));\n             assert_eq!(\n                 args.get(&LinkerFlavor::Msvc),\n                 args.get(&LinkerFlavor::Lld(LldFlavor::Link)),\n             );\n-            if args.contains_key(&LinkerFlavor::Msvc) {\n-                assert_eq!(self.lld_flavor, LldFlavor::Link);\n-            }\n         }\n+\n         assert!(\n             (self.pre_link_objects_fallback.is_empty()\n                 && self.post_link_objects_fallback.is_empty())\n                 || self.crt_objects_fallback.is_some()\n         );\n+\n+        // If your target really needs to deviate from the rules below,\n+        // except it and document the reasons.\n         // Keep the default \"unknown\" vendor instead.\n         assert_ne!(self.vendor, \"\");\n         if !self.can_use_os_unknown() {"}, {"sha": "4d09d3a4d106f3ad08a4240f5d97d21d29d79705", "filename": "compiler/rustc_target/src/spec/thumbv7a_pc_windows_msvc.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7a_pc_windows_msvc.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,4 +1,4 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};\n+use crate::spec::{LinkerFlavor, PanicStrategy, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::windows_msvc_base::opts();\n@@ -9,12 +9,7 @@ pub fn target() -> Target {\n     // should be smart enough to insert branch islands only\n     // where necessary, but this is not the observed behavior.\n     // Disabling the LBR optimization works around the issue.\n-    let pre_link_args_msvc = \"/OPT:NOLBR\";\n-    base.pre_link_args.entry(LinkerFlavor::Msvc).or_default().push(pre_link_args_msvc.into());\n-    base.pre_link_args\n-        .entry(LinkerFlavor::Lld(LldFlavor::Link))\n-        .or_default()\n-        .push(pre_link_args_msvc.into());\n+    base.add_pre_link_args(LinkerFlavor::Msvc, &[\"/OPT:NOLBR\"]);\n \n     Target {\n         llvm_target: \"thumbv7a-pc-windows-msvc\".into(),"}, {"sha": "4cad9e1837010e0a6c02dcac4b66504d7fb7fdc5", "filename": "compiler/rustc_target/src/spec/thumbv7neon_linux_androideabi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fthumbv7neon_linux_androideabi.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -10,7 +10,7 @@ use crate::spec::{LinkerFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n     let mut base = super::android_base::opts();\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-march=armv7-a\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-march=armv7-a\"]);\n     Target {\n         llvm_target: \"armv7-none-linux-android\".into(),\n         pointer_width: 32,"}, {"sha": "aee8eb2e31c7ab4ab0a9483281f0a556b3a4c709", "filename": "compiler/rustc_target/src/spec/uefi_msvc_base.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fuefi_msvc_base.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -14,27 +14,25 @@ use crate::spec::{LinkerFlavor, LldFlavor, PanicStrategy, StackProbeType, Target\n pub fn opts() -> TargetOptions {\n     let mut base = super::msvc_base::opts();\n \n-    let pre_link_args_msvc = vec![\n-        // Non-standard subsystems have no default entry-point in PE+ files. We have to define\n-        // one. \"efi_main\" seems to be a common choice amongst other implementations and the\n-        // spec.\n-        \"/entry:efi_main\".into(),\n-        // COFF images have a \"Subsystem\" field in their header, which defines what kind of\n-        // program it is. UEFI has 3 fields reserved, which are EFI_APPLICATION,\n-        // EFI_BOOT_SERVICE_DRIVER, and EFI_RUNTIME_DRIVER. We default to EFI_APPLICATION,\n-        // which is very likely the most common option. Individual projects can override this\n-        // with custom linker flags.\n-        // The subsystem-type only has minor effects on the application. It defines the memory\n-        // regions the application is loaded into (runtime-drivers need to be put into\n-        // reserved areas), as well as whether a return from the entry-point is treated as\n-        // exit (default for applications).\n-        \"/subsystem:efi_application\".into(),\n-    ];\n-    base.pre_link_args.entry(LinkerFlavor::Msvc).or_default().extend(pre_link_args_msvc.clone());\n-    base.pre_link_args\n-        .entry(LinkerFlavor::Lld(LldFlavor::Link))\n-        .or_default()\n-        .extend(pre_link_args_msvc);\n+    base.add_pre_link_args(\n+        LinkerFlavor::Msvc,\n+        &[\n+            // Non-standard subsystems have no default entry-point in PE+ files. We have to define\n+            // one. \"efi_main\" seems to be a common choice amongst other implementations and the\n+            // spec.\n+            \"/entry:efi_main\",\n+            // COFF images have a \"Subsystem\" field in their header, which defines what kind of\n+            // program it is. UEFI has 3 fields reserved, which are EFI_APPLICATION,\n+            // EFI_BOOT_SERVICE_DRIVER, and EFI_RUNTIME_DRIVER. We default to EFI_APPLICATION,\n+            // which is very likely the most common option. Individual projects can override this\n+            // with custom linker flags.\n+            // The subsystem-type only has minor effects on the application. It defines the memory\n+            // regions the application is loaded into (runtime-drivers need to be put into\n+            // reserved areas), as well as whether a return from the entry-point is treated as\n+            // exit (default for applications).\n+            \"/subsystem:efi_application\",\n+        ],\n+    );\n \n     TargetOptions {\n         os: \"uefi\".into(),"}, {"sha": "c7e7d22108656ffab3264bc5263cb0a2575e9f12", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -2,21 +2,11 @@ use super::{cvs, wasm_base};\n use super::{LinkArgs, LinkerFlavor, PanicStrategy, RelocModel, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    let mut options = wasm_base::options();\n-\n-    let clang_args = options.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n-\n-    // Rust really needs a way for users to specify exports and imports in\n-    // the source code. --export-dynamic isn't the right tool for this job,\n-    // however it does have the side effect of automatically exporting a lot\n-    // of symbols, which approximates what people want when compiling for\n-    // wasm32-unknown-unknown expect, so use it for now.\n-    clang_args.push(\"--export-dynamic\".into());\n-\n-    let mut post_link_args = LinkArgs::new();\n-    post_link_args.insert(\n+    // Reset flags for non-Em flavors back to empty to satisfy sanity checking tests.\n+    let pre_link_args = LinkArgs::new();\n+    let post_link_args = TargetOptions::link_args(\n         LinkerFlavor::Em,\n-        vec![\"-sABORTING_MALLOC=0\".into(), \"-Wl,--fatal-warnings\".into()],\n+        &[\"-sABORTING_MALLOC=0\", \"-Wl,--fatal-warnings\"],\n     );\n \n     let opts = TargetOptions {\n@@ -26,12 +16,13 @@ pub fn target() -> Target {\n         // functionality, and a .wasm file.\n         exe_suffix: \".js\".into(),\n         linker: None,\n+        pre_link_args,\n+        post_link_args,\n         relocation_model: RelocModel::Pic,\n         panic_strategy: PanicStrategy::Unwind,\n         no_default_libraries: false,\n-        post_link_args,\n         families: cvs![\"unix\", \"wasm\"],\n-        ..options\n+        ..wasm_base::options()\n     };\n     Target {\n         llvm_target: \"wasm32-unknown-emscripten\".into(),"}, {"sha": "4e2927dd913c235f36119fcf4c3d756375e172db", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_unknown.rs", "status": "modified", "additions": 24, "deletions": 21, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_unknown.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -29,27 +29,30 @@ pub fn target() -> Target {\n     // code on this target due to this ABI mismatch.\n     options.default_adjusted_cabi = Some(Abi::Wasm);\n \n-    let clang_args = options.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n-\n-    // Make sure clang uses LLD as its linker and is configured appropriately\n-    // otherwise\n-    clang_args.push(\"--target=wasm32-unknown-unknown\".into());\n-\n-    // For now this target just never has an entry symbol no matter the output\n-    // type, so unconditionally pass this.\n-    clang_args.push(\"-Wl,--no-entry\".into());\n-\n-    // Rust really needs a way for users to specify exports and imports in\n-    // the source code. --export-dynamic isn't the right tool for this job,\n-    // however it does have the side effect of automatically exporting a lot\n-    // of symbols, which approximates what people want when compiling for\n-    // wasm32-unknown-unknown expect, so use it for now.\n-    clang_args.push(\"-Wl,--export-dynamic\".into());\n-\n-    // Add the flags to wasm-ld's args too.\n-    let lld_args = options.pre_link_args.entry(LinkerFlavor::Lld(LldFlavor::Wasm)).or_default();\n-    lld_args.push(\"--no-entry\".into());\n-    lld_args.push(\"--export-dynamic\".into());\n+    options.add_pre_link_args(\n+        LinkerFlavor::Lld(LldFlavor::Wasm),\n+        &[\n+            // For now this target just never has an entry symbol no matter the output\n+            // type, so unconditionally pass this.\n+            \"--no-entry\",\n+            // Rust really needs a way for users to specify exports and imports in\n+            // the source code. --export-dynamic isn't the right tool for this job,\n+            // however it does have the side effect of automatically exporting a lot\n+            // of symbols, which approximates what people want when compiling for\n+            // wasm32-unknown-unknown expect, so use it for now.\n+            \"--export-dynamic\",\n+        ],\n+    );\n+    options.add_pre_link_args(\n+        LinkerFlavor::Gcc,\n+        &[\n+            // Make sure clang uses LLD as its linker and is configured appropriately\n+            // otherwise\n+            \"--target=wasm32-unknown-unknown\",\n+            \"-Wl,--no-entry\",\n+            \"-Wl,--export-dynamic\",\n+        ],\n+    );\n \n     Target {\n         llvm_target: \"wasm32-unknown-unknown\".into(),"}, {"sha": "280457d68b99e436502f18986b3bdc49a06c1705", "filename": "compiler/rustc_target/src/spec/wasm32_wasi.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_wasi.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -80,11 +80,7 @@ pub fn target() -> Target {\n \n     options.os = \"wasi\".into();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n-    options\n-        .pre_link_args\n-        .entry(LinkerFlavor::Gcc)\n-        .or_insert(Vec::new())\n-        .push(\"--target=wasm32-wasi\".into());\n+    options.add_pre_link_args(LinkerFlavor::Gcc, &[\"--target=wasm32-wasi\"]);\n \n     options.pre_link_objects_fallback = crt_objects::pre_wasi_fallback();\n     options.post_link_objects_fallback = crt_objects::post_wasi_fallback();"}, {"sha": "5211f7707fbb2705a574401b61f914da46a9939d", "filename": "compiler/rustc_target/src/spec/wasm64_unknown_unknown.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -14,19 +14,25 @@ pub fn target() -> Target {\n     let mut options = wasm_base::options();\n     options.os = \"unknown\".into();\n     options.linker_flavor = LinkerFlavor::Lld(LldFlavor::Wasm);\n-    let clang_args = options.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap();\n \n-    // Make sure clang uses LLD as its linker and is configured appropriately\n-    // otherwise\n-    clang_args.push(\"--target=wasm64-unknown-unknown\".into());\n-\n-    // For now this target just never has an entry symbol no matter the output\n-    // type, so unconditionally pass this.\n-    clang_args.push(\"-Wl,--no-entry\".into());\n-\n-    let lld_args = options.pre_link_args.get_mut(&LinkerFlavor::Lld(LldFlavor::Wasm)).unwrap();\n-    lld_args.push(\"--no-entry\".into());\n-    lld_args.push(\"-mwasm64\".into());\n+    options.add_pre_link_args(\n+        LinkerFlavor::Lld(LldFlavor::Wasm),\n+        &[\n+            // For now this target just never has an entry symbol no matter the output\n+            // type, so unconditionally pass this.\n+            \"--no-entry\",\n+            \"-mwasm64\",\n+        ],\n+    );\n+    options.add_pre_link_args(\n+        LinkerFlavor::Gcc,\n+        &[\n+            // Make sure clang uses LLD as its linker and is configured appropriately\n+            // otherwise\n+            \"--target=wasm64-unknown-unknown\",\n+            \"-Wl,--no-entry\",\n+        ],\n+    );\n \n     // Any engine that implements wasm64 will surely implement the rest of these\n     // features since they were all merged into the official spec by the time"}, {"sha": "5736402ae14ef1dbe93bd535c0538959019712f7", "filename": "compiler/rustc_target/src/spec/wasm_base.rs", "status": "modified", "additions": 49, "deletions": 56, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm_base.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,63 +1,56 @@\n use super::crt_objects::CrtObjectsFallback;\n use super::{cvs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, TargetOptions, TlsModel};\n-use std::collections::BTreeMap;\n \n pub fn options() -> TargetOptions {\n-    let mut lld_args = Vec::new();\n-    let mut clang_args = Vec::new();\n-    let mut arg = |arg: &'static str| {\n-        lld_args.push(arg.into());\n-        clang_args.push(format!(\"-Wl,{}\", arg).into());\n-    };\n-\n-    // By default LLD only gives us one page of stack (64k) which is a\n-    // little small. Default to a larger stack closer to other PC platforms\n-    // (1MB) and users can always inject their own link-args to override this.\n-    arg(\"-z\");\n-    arg(\"stack-size=1048576\");\n-\n-    // By default LLD's memory layout is:\n-    //\n-    // 1. First, a blank page\n-    // 2. Next, all static data\n-    // 3. Finally, the main stack (which grows down)\n-    //\n-    // This has the unfortunate consequence that on stack overflows you\n-    // corrupt static data and can cause some exceedingly weird bugs. To\n-    // help detect this a little sooner we instead request that the stack is\n-    // placed before static data.\n-    //\n-    // This means that we'll generate slightly larger binaries as references\n-    // to static data will take more bytes in the ULEB128 encoding, but\n-    // stack overflow will be guaranteed to trap as it underflows instead of\n-    // corrupting static data.\n-    arg(\"--stack-first\");\n-\n-    // FIXME we probably shouldn't pass this but instead pass an explicit list\n-    // of symbols we'll allow to be undefined. We don't currently have a\n-    // mechanism of knowing, however, which symbols are intended to be imported\n-    // from the environment and which are intended to be imported from other\n-    // objects linked elsewhere. This is a coarse approximation but is sure to\n-    // hide some bugs and frustrate someone at some point, so we should ideally\n-    // work towards a world where we can explicitly list symbols that are\n-    // supposed to be imported and have all other symbols generate errors if\n-    // they remain undefined.\n-    arg(\"--allow-undefined\");\n-\n-    // Rust code should never have warnings, and warnings are often\n-    // indicative of bugs, let's prevent them.\n-    arg(\"--fatal-warnings\");\n-\n-    // LLD only implements C++-like demangling, which doesn't match our own\n-    // mangling scheme. Tell LLD to not demangle anything and leave it up to\n-    // us to demangle these symbols later. Currently rustc does not perform\n-    // further demangling, but tools like twiggy and wasm-bindgen are intended\n-    // to do so.\n-    arg(\"--no-demangle\");\n-\n-    let mut pre_link_args = BTreeMap::new();\n-    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Wasm), lld_args);\n-    pre_link_args.insert(LinkerFlavor::Gcc, clang_args);\n+    macro_rules! args {\n+        ($prefix:literal) => {\n+            &[\n+                // By default LLD only gives us one page of stack (64k) which is a\n+                // little small. Default to a larger stack closer to other PC platforms\n+                // (1MB) and users can always inject their own link-args to override this.\n+                concat!($prefix, \"-z\"),\n+                concat!($prefix, \"stack-size=1048576\"),\n+                // By default LLD's memory layout is:\n+                //\n+                // 1. First, a blank page\n+                // 2. Next, all static data\n+                // 3. Finally, the main stack (which grows down)\n+                //\n+                // This has the unfortunate consequence that on stack overflows you\n+                // corrupt static data and can cause some exceedingly weird bugs. To\n+                // help detect this a little sooner we instead request that the stack is\n+                // placed before static data.\n+                //\n+                // This means that we'll generate slightly larger binaries as references\n+                // to static data will take more bytes in the ULEB128 encoding, but\n+                // stack overflow will be guaranteed to trap as it underflows instead of\n+                // corrupting static data.\n+                concat!($prefix, \"--stack-first\"),\n+                // FIXME we probably shouldn't pass this but instead pass an explicit list\n+                // of symbols we'll allow to be undefined. We don't currently have a\n+                // mechanism of knowing, however, which symbols are intended to be imported\n+                // from the environment and which are intended to be imported from other\n+                // objects linked elsewhere. This is a coarse approximation but is sure to\n+                // hide some bugs and frustrate someone at some point, so we should ideally\n+                // work towards a world where we can explicitly list symbols that are\n+                // supposed to be imported and have all other symbols generate errors if\n+                // they remain undefined.\n+                concat!($prefix, \"--allow-undefined\"),\n+                // Rust code should never have warnings, and warnings are often\n+                // indicative of bugs, let's prevent them.\n+                concat!($prefix, \"--fatal-warnings\"),\n+                // LLD only implements C++-like demangling, which doesn't match our own\n+                // mangling scheme. Tell LLD to not demangle anything and leave it up to\n+                // us to demangle these symbols later. Currently rustc does not perform\n+                // further demangling, but tools like twiggy and wasm-bindgen are intended\n+                // to do so.\n+                concat!($prefix, \"--no-demangle\"),\n+            ]\n+        };\n+    }\n+\n+    let mut pre_link_args = TargetOptions::link_args(LinkerFlavor::Lld(LldFlavor::Wasm), args!(\"\"));\n+    super::add_link_args(&mut pre_link_args, LinkerFlavor::Gcc, args!(\"-Wl,\"));\n \n     TargetOptions {\n         is_like_wasm: true,"}, {"sha": "a0480f386f74e0fa3c0572824ee45819b981ff63", "filename": "compiler/rustc_target/src/spec/windows_gnu_base.rs", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnu_base.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,63 +1,63 @@\n use crate::spec::crt_objects::{self, CrtObjectsFallback};\n-use crate::spec::{cvs, LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n+use crate::spec::{cvs, LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let mut pre_link_args = LinkArgs::new();\n-    pre_link_args.insert(\n+    let mut pre_link_args = TargetOptions::link_args(\n+        LinkerFlavor::Ld,\n+        &[\n+            // Enable ASLR\n+            \"--dynamicbase\",\n+            // ASLR will rebase it anyway so leaving that option enabled only leads to confusion\n+            \"--disable-auto-image-base\",\n+        ],\n+    );\n+    super::add_link_args(\n+        &mut pre_link_args,\n         LinkerFlavor::Gcc,\n-        vec![\n+        &[\n             // Tell GCC to avoid linker plugins, because we are not bundling\n             // them with Windows installer, and Rust does its own LTO anyways.\n-            \"-fno-use-linker-plugin\".into(),\n-            // Enable ASLR\n-            \"-Wl,--dynamicbase\".into(),\n-            // ASLR will rebase it anyway so leaving that option enabled only leads to confusion\n-            \"-Wl,--disable-auto-image-base\".into(),\n+            \"-fno-use-linker-plugin\",\n+            \"-Wl,--dynamicbase\",\n+            \"-Wl,--disable-auto-image-base\",\n         ],\n     );\n \n-    let mut late_link_args = LinkArgs::new();\n-    let mut late_link_args_dynamic = LinkArgs::new();\n-    let mut late_link_args_static = LinkArgs::new();\n     // Order of `late_link_args*` was found through trial and error to work with various\n     // mingw-w64 versions (not tested on the CI). It's expected to change from time to time.\n-    let mingw_libs = vec![\n-        \"-lmsvcrt\".into(),\n-        \"-lmingwex\".into(),\n-        \"-lmingw32\".into(),\n-        \"-lgcc\".into(), // alas, mingw* libraries above depend on libgcc\n+    let mingw_libs = &[\n+        \"-lmsvcrt\",\n+        \"-lmingwex\",\n+        \"-lmingw32\",\n+        \"-lgcc\", // alas, mingw* libraries above depend on libgcc\n         // mingw's msvcrt is a weird hybrid import library and static library.\n         // And it seems that the linker fails to use import symbols from msvcrt\n         // that are required from functions in msvcrt in certain cases. For example\n         // `_fmode` that is used by an implementation of `__p__fmode` in x86_64.\n         // The library is purposely listed twice to fix that.\n         //\n         // See https://github.com/rust-lang/rust/pull/47483 for some more details.\n-        \"-lmsvcrt\".into(),\n-        \"-luser32\".into(),\n-        \"-lkernel32\".into(),\n-    ];\n-    late_link_args.insert(LinkerFlavor::Gcc, mingw_libs.clone());\n-    late_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), mingw_libs);\n-    let dynamic_unwind_libs = vec![\n-        // If any of our crates are dynamically linked then we need to use\n-        // the shared libgcc_s-dw2-1.dll. This is required to support\n-        // unwinding across DLL boundaries.\n-        \"-lgcc_s\".into(),\n-    ];\n-    late_link_args_dynamic.insert(LinkerFlavor::Gcc, dynamic_unwind_libs.clone());\n-    late_link_args_dynamic.insert(LinkerFlavor::Lld(LldFlavor::Ld), dynamic_unwind_libs);\n-    let static_unwind_libs = vec![\n-        // If all of our crates are statically linked then we can get away\n-        // with statically linking the libgcc unwinding code. This allows\n-        // binaries to be redistributed without the libgcc_s-dw2-1.dll\n-        // dependency, but unfortunately break unwinding across DLL\n-        // boundaries when unwinding across FFI boundaries.\n-        \"-lgcc_eh\".into(),\n-        \"-l:libpthread.a\".into(),\n+        \"-lmsvcrt\",\n+        \"-luser32\",\n+        \"-lkernel32\",\n     ];\n-    late_link_args_static.insert(LinkerFlavor::Gcc, static_unwind_libs.clone());\n-    late_link_args_static.insert(LinkerFlavor::Lld(LldFlavor::Ld), static_unwind_libs);\n+    let mut late_link_args = TargetOptions::link_args(LinkerFlavor::Ld, mingw_libs);\n+    super::add_link_args(&mut late_link_args, LinkerFlavor::Gcc, mingw_libs);\n+    // If any of our crates are dynamically linked then we need to use\n+    // the shared libgcc_s-dw2-1.dll. This is required to support\n+    // unwinding across DLL boundaries.\n+    let dynamic_unwind_libs = &[\"-lgcc_s\"];\n+    let mut late_link_args_dynamic =\n+        TargetOptions::link_args(LinkerFlavor::Ld, dynamic_unwind_libs);\n+    super::add_link_args(&mut late_link_args_dynamic, LinkerFlavor::Gcc, dynamic_unwind_libs);\n+    // If all of our crates are statically linked then we can get away\n+    // with statically linking the libgcc unwinding code. This allows\n+    // binaries to be redistributed without the libgcc_s-dw2-1.dll\n+    // dependency, but unfortunately break unwinding across DLL\n+    // boundaries when unwinding across FFI boundaries.\n+    let static_unwind_libs = &[\"-lgcc_eh\", \"-l:libpthread.a\"];\n+    let mut late_link_args_static = TargetOptions::link_args(LinkerFlavor::Ld, static_unwind_libs);\n+    super::add_link_args(&mut late_link_args_static, LinkerFlavor::Gcc, static_unwind_libs);\n \n     TargetOptions {\n         os: \"windows\".into(),"}, {"sha": "30f995007a9c6b3f598585028a81d0bcc11fca38", "filename": "compiler/rustc_target/src/spec/windows_gnullvm_base.rs", "status": "modified", "additions": 11, "deletions": 22, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_gnullvm_base.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,28 +1,17 @@\n-use crate::spec::{cvs, LinkArgs, LinkerFlavor, TargetOptions};\n+use crate::spec::{cvs, LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n-    let pre_link_args = LinkArgs::from([(\n+    // We cannot use `-nodefaultlibs` because compiler-rt has to be passed\n+    // as a path since it's not added to linker search path by the default.\n+    // There were attemts to make it behave like libgcc (so one can just use -l<name>)\n+    // but LLVM maintainers rejected it: https://reviews.llvm.org/D51440\n+    let pre_link_args =\n+        TargetOptions::link_args(LinkerFlavor::Gcc, &[\"-nolibc\", \"--unwindlib=none\"]);\n+    // Order of `late_link_args*` does not matter with LLD.\n+    let late_link_args = TargetOptions::link_args(\n         LinkerFlavor::Gcc,\n-        vec![\n-            // We cannot use `-nodefaultlibs` because compiler-rt has to be passed\n-            // as a path since it's not added to linker search path by the default.\n-            // There were attemts to make it behave like libgcc (so one can just use -l<name>)\n-            // but LLVM maintainers rejected it: https://reviews.llvm.org/D51440\n-            \"-nolibc\".into(),\n-            \"--unwindlib=none\".into(),\n-        ],\n-    )]);\n-    let late_link_args = LinkArgs::from([(\n-        LinkerFlavor::Gcc,\n-        // Order of `late_link_args*` does not matter with LLD.\n-        vec![\n-            \"-lmingw32\".into(),\n-            \"-lmingwex\".into(),\n-            \"-lmsvcrt\".into(),\n-            \"-lkernel32\".into(),\n-            \"-luser32\".into(),\n-        ],\n-    )]);\n+        &[\"-lmingw32\", \"-lmingwex\", \"-lmsvcrt\", \"-lkernel32\", \"-luser32\"],\n+    );\n \n     TargetOptions {\n         os: \"windows\".into(),"}, {"sha": "334dec43ef7e047e024deff832f8614f672779c6", "filename": "compiler/rustc_target/src/spec/windows_uwp_gnu_base.rs", "status": "modified", "additions": 14, "deletions": 17, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_gnu_base.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,28 +1,25 @@\n-use crate::spec::{LinkArgs, LinkerFlavor, LldFlavor, TargetOptions};\n+use crate::spec::{LinkArgs, LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let base = super::windows_gnu_base::opts();\n \n     // FIXME: This should be updated for the exception machinery changes from #67502\n     // and inherit from `windows_gnu_base`, at least partially.\n-    let mut late_link_args = LinkArgs::new();\n+    let mingw_libs = &[\n+        \"-lwinstorecompat\",\n+        \"-lruntimeobject\",\n+        \"-lsynchronization\",\n+        \"-lvcruntime140_app\",\n+        \"-lucrt\",\n+        \"-lwindowsapp\",\n+        \"-lmingwex\",\n+        \"-lmingw32\",\n+    ];\n+    let mut late_link_args = TargetOptions::link_args(LinkerFlavor::Ld, mingw_libs);\n+    super::add_link_args(&mut late_link_args, LinkerFlavor::Gcc, mingw_libs);\n+    // Reset the flags back to empty until the FIXME above is addressed.\n     let late_link_args_dynamic = LinkArgs::new();\n     let late_link_args_static = LinkArgs::new();\n-    let mingw_libs = vec![\n-        //\"-lwinstorecompat\".into(),\n-        //\"-lmingwex\".into(),\n-        //\"-lwinstorecompat\".into(),\n-        \"-lwinstorecompat\".into(),\n-        \"-lruntimeobject\".into(),\n-        \"-lsynchronization\".into(),\n-        \"-lvcruntime140_app\".into(),\n-        \"-lucrt\".into(),\n-        \"-lwindowsapp\".into(),\n-        \"-lmingwex\".into(),\n-        \"-lmingw32\".into(),\n-    ];\n-    late_link_args.insert(LinkerFlavor::Gcc, mingw_libs.clone());\n-    late_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), mingw_libs);\n \n     TargetOptions {\n         abi: \"uwp\".into(),"}, {"sha": "f2573fc2d21158df7ae976667ba5c4684184cb16", "filename": "compiler/rustc_target/src/spec/windows_uwp_msvc_base.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwindows_uwp_msvc_base.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,16 +1,11 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, TargetOptions};\n+use crate::spec::{LinkerFlavor, TargetOptions};\n \n pub fn opts() -> TargetOptions {\n     let mut opts = super::windows_msvc_base::opts();\n \n     opts.abi = \"uwp\".into();\n     opts.vendor = \"uwp\".into();\n-    let pre_link_args_msvc = vec![\"/APPCONTAINER\".into(), \"mincore.lib\".into()];\n-    opts.pre_link_args.entry(LinkerFlavor::Msvc).or_default().extend(pre_link_args_msvc.clone());\n-    opts.pre_link_args\n-        .entry(LinkerFlavor::Lld(LldFlavor::Link))\n-        .or_default()\n-        .extend(pre_link_args_msvc);\n+    opts.add_pre_link_args(LinkerFlavor::Msvc, &[\"/APPCONTAINER\", \"mincore.lib\"]);\n \n     opts\n }"}, {"sha": "dbd26899c1899e2a02562690e188ec4b0ef5fb73", "filename": "compiler/rustc_target/src/spec/x86_64_apple_darwin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_apple_darwin.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -6,8 +6,7 @@ pub fn target() -> Target {\n     base.cpu = \"core2\".into();\n     base.max_atomic_width = Some(128); // core2 support cmpxchg16b\n     base.frame_pointer = FramePointer::Always;\n-    base.pre_link_args\n-        .insert(LinkerFlavor::Gcc, vec![\"-m64\".into(), \"-arch\".into(), \"x86_64\".into()]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\", \"-arch\", \"x86_64\"]);\n     base.link_env_remove.to_mut().extend(super::apple_base::macos_link_env_remove());\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;"}, {"sha": "4348d9245794585297fc409241b0b7d48d8aca7d", "filename": "compiler/rustc_target/src/spec/x86_64_fortanix_unknown_sgx.rs", "status": "modified", "additions": 36, "deletions": 37, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_fortanix_unknown_sgx.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,41 +1,44 @@\n-use std::{borrow::Cow, iter};\n+use std::borrow::Cow;\n \n use crate::spec::cvs;\n \n use super::{LinkerFlavor, LldFlavor, Target, TargetOptions};\n \n pub fn target() -> Target {\n-    const PRE_LINK_ARGS: &[&str] = &[\n-        \"-e\",\n-        \"elf_entry\",\n-        \"-Bstatic\",\n-        \"--gc-sections\",\n-        \"-z\",\n-        \"text\",\n-        \"-z\",\n-        \"norelro\",\n-        \"--no-undefined\",\n-        \"--error-unresolved-symbols\",\n-        \"--no-undefined-version\",\n-        \"-Bsymbolic\",\n-        \"--export-dynamic\",\n-        // The following symbols are needed by libunwind, which is linked after\n-        // libstd. Make sure they're included in the link.\n-        \"-u\",\n-        \"__rust_abort\",\n-        \"-u\",\n-        \"__rust_c_alloc\",\n-        \"-u\",\n-        \"__rust_c_dealloc\",\n-        \"-u\",\n-        \"__rust_print_err\",\n-        \"-u\",\n-        \"__rust_rwlock_rdlock\",\n-        \"-u\",\n-        \"__rust_rwlock_unlock\",\n-        \"-u\",\n-        \"__rust_rwlock_wrlock\",\n-    ];\n+    let pre_link_args = TargetOptions::link_args(\n+        LinkerFlavor::Ld,\n+        &[\n+            \"-e\",\n+            \"elf_entry\",\n+            \"-Bstatic\",\n+            \"--gc-sections\",\n+            \"-z\",\n+            \"text\",\n+            \"-z\",\n+            \"norelro\",\n+            \"--no-undefined\",\n+            \"--error-unresolved-symbols\",\n+            \"--no-undefined-version\",\n+            \"-Bsymbolic\",\n+            \"--export-dynamic\",\n+            // The following symbols are needed by libunwind, which is linked after\n+            // libstd. Make sure they're included in the link.\n+            \"-u\",\n+            \"__rust_abort\",\n+            \"-u\",\n+            \"__rust_c_alloc\",\n+            \"-u\",\n+            \"__rust_c_dealloc\",\n+            \"-u\",\n+            \"__rust_print_err\",\n+            \"-u\",\n+            \"__rust_rwlock_rdlock\",\n+            \"-u\",\n+            \"__rust_rwlock_unlock\",\n+            \"-u\",\n+            \"__rust_rwlock_wrlock\",\n+        ],\n+    );\n \n     const EXPORT_SYMBOLS: &[&str] = &[\n         \"sgx_entry\",\n@@ -66,11 +69,7 @@ pub fn target() -> Target {\n         features: \"+rdrnd,+rdseed,+lvi-cfi,+lvi-load-hardening\".into(),\n         llvm_args: cvs![\"--x86-experimental-lvi-inline-asm-hardening\"],\n         position_independent_executables: true,\n-        pre_link_args: iter::once((\n-            LinkerFlavor::Lld(LldFlavor::Ld),\n-            PRE_LINK_ARGS.iter().cloned().map(Cow::from).collect(),\n-        ))\n-        .collect(),\n+        pre_link_args,\n         override_export_symbols: Some(EXPORT_SYMBOLS.iter().cloned().map(Cow::from).collect()),\n         relax_elf_relocations: true,\n         ..Default::default()"}, {"sha": "6d19cf265744ea88038359ea7982053c5c38dd9c", "filename": "compiler/rustc_target/src/spec/x86_64_linux_android.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_linux_android.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -6,7 +6,7 @@ pub fn target() -> Target {\n     // https://developer.android.com/ndk/guides/abis.html#86-64\n     base.features = \"+mmx,+sse,+sse2,+sse3,+ssse3,+sse4.1,+sse4.2,+popcnt\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n "}, {"sha": "0550b221fd9ea1d877baf8c57b9692fb2222efb7", "filename": "compiler/rustc_target/src/spec/x86_64_pc_solaris.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{LinkerFlavor, SanitizerSet, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".into()]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.cpu = \"x86-64\".into();\n     base.vendor = \"pc\".into();\n     base.max_atomic_width = Some(64);"}, {"sha": "59a8cffca480ae7f838c1b3530f548fdd90c32dc", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_gnu.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnu.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,14 +1,11 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target};\n+use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_gnu_base::opts();\n     base.cpu = \"x86-64\".into();\n-    let gcc_pre_link_args = base.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n-    gcc_pre_link_args.push(\"-m64\".into());\n     // Use high-entropy 64 bit address space for ASLR\n-    gcc_pre_link_args.push(\"-Wl,--high-entropy-va\".into());\n-    base.pre_link_args\n-        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".into(), \"i386pep\".into()]);\n+    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pep\", \"--high-entropy-va\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\", \"-Wl,--high-entropy-va\"]);\n     base.max_atomic_width = Some(64);\n     base.linker = Some(\"x86_64-w64-mingw32-gcc\".into());\n "}, {"sha": "d3909b3895e52f18a08e86707c7c37d0a694feb9", "filename": "compiler/rustc_target/src/spec/x86_64_pc_windows_gnullvm.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnullvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnullvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_windows_gnullvm.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -3,8 +3,7 @@ use crate::spec::{LinkerFlavor, Target};\n pub fn target() -> Target {\n     let mut base = super::windows_gnullvm_base::opts();\n     base.cpu = \"x86-64\".into();\n-    let gcc_pre_link_args = base.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n-    gcc_pre_link_args.push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.max_atomic_width = Some(64);\n     base.linker = Some(\"x86_64-w64-mingw32-clang\".into());\n "}, {"sha": "cbe87589a702ddfbe1f0cea19ecb091b3e4bc438", "filename": "compiler/rustc_target/src/spec/x86_64_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{LinkerFlavor, StackProbeType, Target};\n \n pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".into()]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     base.cpu = \"x86-64\".into();\n     base.vendor = \"sun\".into();\n     base.max_atomic_width = Some(64);"}, {"sha": "746f647817801cfbe7cfe5b31f06e3587942acac", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_dragonfly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_dragonfly.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::dragonfly_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n "}, {"sha": "b30784ed692915b51d13c9ffcdd8f9622a3b2683", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_freebsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_freebsd.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::freebsd_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.supported_sanitizers ="}, {"sha": "d6d0336298281fc73a7421fa773413f93c9c4dd8", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_haiku.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_haiku.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::haiku_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".into()]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     // This option is required to build executables on Haiku x86_64"}, {"sha": "9f19c3a2b2a912e125f9d648feee9afa29a1235b", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_illumos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_illumos.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -2,7 +2,7 @@ use crate::spec::{LinkerFlavor, SanitizerSet, Target};\n \n pub fn target() -> Target {\n     let mut base = super::illumos_base::opts();\n-    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".into(), \"-std=c99\".into()]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\", \"-std=c99\"]);\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n     base.supported_sanitizers = SanitizerSet::ADDRESS | SanitizerSet::CFI;"}, {"sha": "956be0353fa392ab76c5e88e3022f7ffa463bcf3", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnu.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnu.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::linux_gnu_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.static_position_independent_executables = true;"}, {"sha": "140882747c2828a40a7a690e0af5c1f5cba3ac5f", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -5,7 +5,7 @@ pub fn target() -> Target {\n     base.cpu = \"x86-64\".into();\n     base.abi = \"x32\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-mx32\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-mx32\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.has_thread_local = false;"}, {"sha": "87e7784d1f9e9006b76056ab81b61c7db6c35842", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_linux_musl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_linux_musl.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::linux_musl_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.static_position_independent_executables = true;"}, {"sha": "d3a67619aa86e937be7086d13a5a4aea8a4f5f7b", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_netbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_netbsd.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::netbsd_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.supported_sanitizers = SanitizerSet::ADDRESS"}, {"sha": "593345a5f1d8c24caf56de95e5c8088920152d75", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_none_linuxkernel.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_none_linuxkernel.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -10,7 +10,7 @@ pub fn target() -> Target {\n     base.features =\n         \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\".into();\n     base.code_model = Some(CodeModel::Kernel);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n \n     Target {\n         // FIXME: Some dispute, the linux-on-clang folks think this should use"}, {"sha": "f50c6bceec94223718f4064a6e7a6dc2681bd7ad", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_openbsd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_openbsd.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::openbsd_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n "}, {"sha": "668ae9054171117b55346220f1484ec52fd98fbd", "filename": "compiler/rustc_target/src/spec/x86_64_unknown_redox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_unknown_redox.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::redox_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n "}, {"sha": "76d2013cf7fdc6021748c627db3930ee353c19e0", "filename": "compiler/rustc_target/src/spec/x86_64_uwp_windows_gnu.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_uwp_windows_gnu.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -1,14 +1,11 @@\n-use crate::spec::{LinkerFlavor, LldFlavor, Target};\n+use crate::spec::{LinkerFlavor, Target};\n \n pub fn target() -> Target {\n     let mut base = super::windows_uwp_gnu_base::opts();\n     base.cpu = \"x86-64\".into();\n-    let gcc_pre_link_args = base.pre_link_args.entry(LinkerFlavor::Gcc).or_default();\n-    gcc_pre_link_args.push(\"-m64\".into());\n     // Use high-entropy 64 bit address space for ASLR\n-    gcc_pre_link_args.push(\"-Wl,--high-entropy-va\".into());\n-    base.pre_link_args\n-        .insert(LinkerFlavor::Lld(LldFlavor::Ld), vec![\"-m\".into(), \"i386pep\".into()]);\n+    base.add_pre_link_args(LinkerFlavor::Ld, &[\"-m\", \"i386pep\", \"--high-entropy-va\"]);\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\", \"-Wl,--high-entropy-va\"]);\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "1298974952f9469279e560c8696a06bf189e7b42", "filename": "compiler/rustc_target/src/spec/x86_64_wrs_vxworks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/221bdb62a23f54a32b56b55a6578646f3594fd3b/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_wrs_vxworks.rs?ref=221bdb62a23f54a32b56b55a6578646f3594fd3b", "patch": "@@ -4,7 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::vxworks_base::opts();\n     base.cpu = \"x86-64\".into();\n     base.max_atomic_width = Some(64);\n-    base.pre_link_args.entry(LinkerFlavor::Gcc).or_default().push(\"-m64\".into());\n+    base.add_pre_link_args(LinkerFlavor::Gcc, &[\"-m64\"]);\n     // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved\n     base.stack_probes = StackProbeType::Call;\n     base.disable_redzone = true;"}]}