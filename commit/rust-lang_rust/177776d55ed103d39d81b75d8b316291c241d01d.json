{"sha": "177776d55ed103d39d81b75d8b316291c241d01d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3Nzc3NmQ1NWVkMTAzZDM5ZDgxYjc1ZDhiMzE2MjkxYzI0MWQwMWQ=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-05-30T03:12:49Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-08-02T22:57:24Z"}, "message": "Basic incremental stats", "tree": {"sha": "1440ed8111bb9cf438caf86d7733b5962505269d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1440ed8111bb9cf438caf86d7733b5962505269d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/177776d55ed103d39d81b75d8b316291c241d01d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/177776d55ed103d39d81b75d8b316291c241d01d", "html_url": "https://github.com/rust-lang/rust/commit/177776d55ed103d39d81b75d8b316291c241d01d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/177776d55ed103d39d81b75d8b316291c241d01d/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45482c6f994b5fd3b9a10c4d463dd80aa1f72d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/45482c6f994b5fd3b9a10c4d463dd80aa1f72d5c", "html_url": "https://github.com/rust-lang/rust/commit/45482c6f994b5fd3b9a10c4d463dd80aa1f72d5c"}], "stats": {"total": 64, "additions": 55, "deletions": 9}, "files": [{"sha": "3a07f4859d2fe422f91982cf430f80dc08106e7e", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/177776d55ed103d39d81b75d8b316291c241d01d/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177776d55ed103d39d81b75d8b316291c241d01d/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=177776d55ed103d39d81b75d8b316291c241d01d", "patch": "@@ -118,6 +118,11 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n             let mut lock = cache.borrow_mut();\n             if let Some(value) = lock.results.get(key) {\n                 profq_msg!(tcx, ProfileQueriesMsg::CacheHit);\n+                tcx.sess.profiler(|p| {\n+                    p.record_query(Q::CATEGORY);\n+                    p.record_query_hit(Q::CATEGORY);\n+                });\n+\n                 let result = Ok((value.value.clone(), value.index));\n                 return TryGetJob::JobCompleted(result);\n             }\n@@ -379,7 +384,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         if dep_node.kind.is_anon() {\n             profq_msg!(self, ProfileQueriesMsg::ProviderBegin);\n-            self.sess.profiler(|p| p.start_activity(Q::CATEGORY));\n+            self.sess.profiler(|p| {\n+                p.start_activity(Q::CATEGORY);\n+                p.record_query(Q::CATEGORY);\n+            });\n \n             let res = job.start(self, |tcx| {\n                 tcx.dep_graph.with_anon_task(dep_node.kind, || {\n@@ -404,6 +412,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         if !dep_node.kind.is_input() {\n             if let Some(dep_node_index) = self.try_mark_green_and_read(&dep_node) {\n                 profq_msg!(self, ProfileQueriesMsg::CacheHit);\n+                self.sess.profiler(|p| p.record_query_hit(Q::CATEGORY));\n+\n                 return self.load_from_disk_and_cache_in_memory::<Q>(key,\n                                                                     job,\n                                                                     dep_node_index,\n@@ -525,7 +535,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 key, dep_node);\n \n         profq_msg!(self, ProfileQueriesMsg::ProviderBegin);\n-        self.sess.profiler(|p| p.start_activity(Q::CATEGORY));\n+        self.sess.profiler(|p| {\n+            p.start_activity(Q::CATEGORY);\n+            p.record_query(Q::CATEGORY);\n+        });\n \n         let res = job.start(self, |tcx| {\n             if dep_node.kind.is_eval_always() {"}, {"sha": "d8eb5308ed1eca08bae2ef7f3efbfea5145479e3", "filename": "src/librustc/util/profiling.rs", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/177776d55ed103d39d81b75d8b316291c241d01d/src%2Flibrustc%2Futil%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/177776d55ed103d39d81b75d8b316291c241d01d/src%2Flibrustc%2Futil%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fprofiling.rs?ref=177776d55ed103d39d81b75d8b316291c241d01d", "patch": "@@ -76,23 +76,46 @@ impl<T> Categories<T> {\n \n struct CategoryData {\n     times: Categories<u64>,\n+    query_counts: Categories<(u64, u64)>,\n }\n \n impl CategoryData {\n     fn new() -> CategoryData {\n         CategoryData {\n             times: Categories::new(),\n+            query_counts: Categories::new(),\n         }\n     }\n \n     fn print(&self, lock: &mut StdoutLock) {\n-        writeln!(lock, \"{0: <15} \\t\\t {1: <15}\", \"Parsing\", self.times.parsing / 1_000_000).unwrap();\n-        writeln!(lock, \"{0: <15} \\t\\t {1: <15}\", \"Expansion\", self.times.expansion / 1_000_000).unwrap();\n-        writeln!(lock, \"{0: <15} \\t\\t {1: <15}\", \"TypeChecking\", self.times.type_checking / 1_000_000).unwrap();\n-        writeln!(lock, \"{0: <15} \\t\\t {1: <15}\", \"BorrowChecking\", self.times.borrow_checking / 1_000_000).unwrap();\n-        writeln!(lock, \"{0: <15} \\t\\t {1: <15}\", \"Codegen\", self.times.codegen / 1_000_000).unwrap();\n-        writeln!(lock, \"{0: <15} \\t\\t {1: <15}\", \"Linking\", self.times.linking / 1_000_000).unwrap();\n-        writeln!(lock, \"{0: <15} \\t\\t {1: <15}\", \"Other\", self.times.other / 1_000_000).unwrap();\n+        macro_rules! p {\n+            ($name:tt, $rustic_name:ident) => {\n+                writeln!(\n+                   lock,\n+                   \"{0: <15} \\t\\t {1: <15}\",\n+                   $name,\n+                   self.times.$rustic_name / 1_000_000\n+                ).unwrap();\n+                \n+                let (hits, total) = self.query_counts.$rustic_name;\n+                if total > 0 {\n+                    writeln!(\n+                        lock,\n+                        \"\\t{} hits {} queries\",\n+                        hits,\n+                        total\n+                    ).unwrap();\n+                }\n+            };\n+        }\n+\n+        p!(\"Parsing\", parsing);\n+        p!(\"Expansion\", expansion);\n+        p!(\"TypeChecking\", type_checking);\n+        p!(\"BorrowChecking\", borrow_checking);\n+        p!(\"Codegen\", codegen);\n+        p!(\"Linking\", linking);\n+        p!(\"Other\", other);\n     }\n }\n \n@@ -147,6 +170,16 @@ impl SelfProfiler {\n         self.timer_stack.push(category);\n     }\n \n+    pub fn record_query(&mut self, category: ProfileCategory) {\n+        let (hits, total) = *self.data.query_counts.get(category);\n+        self.data.query_counts.set(category, (hits, total + 1));\n+    }\n+\n+    pub fn record_query_hit(&mut self, category: ProfileCategory) {\n+        let (hits, total) = *self.data.query_counts.get(category);\n+        self.data.query_counts.set(category, (hits + 1, total));\n+    }\n+\n     pub fn end_activity(&mut self, category: ProfileCategory) {\n         match self.timer_stack.pop() {\n             None => bug!(\"end_activity() was called but there was no running activity\"),"}]}