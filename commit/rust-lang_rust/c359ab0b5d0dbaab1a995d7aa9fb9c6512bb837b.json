{"sha": "c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b", "node_id": "C_kwDOAAsO6NoAKGMzNTlhYjBiNWQwZGJhYWIxYTk5NWQ3YWE5ZmI5YzY1MTJiYjgzN2I", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-12-06T09:18:24Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2022-12-21T22:59:55Z"}, "message": "Retag argument to `drop_in_place` unconditionally", "tree": {"sha": "a91cdcddc1574428355322b1869fbde9f50d837d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a91cdcddc1574428355322b1869fbde9f50d837d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b", "html_url": "https://github.com/rust-lang/rust/commit/c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "102040ce76d588c0605e29577cdf8307acb4bb10", "url": "https://api.github.com/repos/rust-lang/rust/commits/102040ce76d588c0605e29577cdf8307acb4bb10", "html_url": "https://github.com/rust-lang/rust/commit/102040ce76d588c0605e29577cdf8307acb4bb10"}], "stats": {"total": 81, "additions": 34, "deletions": 47}, "files": [{"sha": "dace540fa29d2596739379f140d446909c08cc5f", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 29, "deletions": 28, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b", "patch": "@@ -174,35 +174,36 @@ fn build_drop_shim<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId, ty: Option<Ty<'tcx>>)\n     let mut body =\n         new_body(source, blocks, local_decls_for_sig(&sig, span), sig.inputs().len(), span);\n \n-    if ty.is_some() {\n-        // The first argument (index 0), but add 1 for the return value.\n-        let mut dropee_ptr = Place::from(Local::new(1 + 0));\n-        if tcx.sess.opts.unstable_opts.mir_emit_retag {\n-            // We want to treat the function argument as if it was passed by `&mut`. As such, we\n-            // generate\n-            // ```\n-            // temp = &mut *arg;\n-            // Retag(temp, FnEntry)\n-            // ```\n-            // It's important that we do this first, before anything that depends on `dropee_ptr`\n-            // has been put into the body.\n-            let reborrow = Rvalue::Ref(\n-                tcx.lifetimes.re_erased,\n-                BorrowKind::Mut { allow_two_phase_borrow: false },\n-                tcx.mk_place_deref(dropee_ptr),\n-            );\n-            let ref_ty = reborrow.ty(body.local_decls(), tcx);\n-            dropee_ptr = body.local_decls.push(LocalDecl::new(ref_ty, span)).into();\n-            let new_statements = [\n-                StatementKind::Assign(Box::new((dropee_ptr, reborrow))),\n-                StatementKind::Retag(RetagKind::FnEntry, Box::new(dropee_ptr)),\n-            ];\n-            for s in new_statements {\n-                body.basic_blocks_mut()[START_BLOCK]\n-                    .statements\n-                    .push(Statement { source_info, kind: s });\n-            }\n+    // The first argument (index 0), but add 1 for the return value.\n+    let mut dropee_ptr = Place::from(Local::new(1 + 0));\n+    if tcx.sess.opts.unstable_opts.mir_emit_retag {\n+        // We want to treat the function argument as if it was passed by `&mut`. As such, we\n+        // generate\n+        // ```\n+        // temp = &mut *arg;\n+        // Retag(temp, FnEntry)\n+        // ```\n+        // It's important that we do this first, before anything that depends on `dropee_ptr`\n+        // has been put into the body.\n+        let reborrow = Rvalue::Ref(\n+            tcx.lifetimes.re_erased,\n+            BorrowKind::Mut { allow_two_phase_borrow: false },\n+            tcx.mk_place_deref(dropee_ptr),\n+        );\n+        let ref_ty = reborrow.ty(body.local_decls(), tcx);\n+        dropee_ptr = body.local_decls.push(LocalDecl::new(ref_ty, span)).into();\n+        let new_statements = [\n+            StatementKind::Assign(Box::new((dropee_ptr, reborrow))),\n+            StatementKind::Retag(RetagKind::FnEntry, Box::new(dropee_ptr)),\n+        ];\n+        for s in new_statements {\n+            body.basic_blocks_mut()[START_BLOCK]\n+                .statements\n+                .push(Statement { source_info, kind: s });\n         }\n+    }\n+\n+    if ty.is_some() {\n         let patch = {\n             let param_env = tcx.param_env_reveal_all_normalized(def_id);\n             let mut elaborator ="}, {"sha": "8cf63ee700b8552bf62f581a98147e62336eed72", "filename": "src/tools/miri/tests/fail/stacked_borrows/drop_in_place_protector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_protector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_protector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_protector.rs?ref=c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b", "patch": "@@ -10,7 +10,7 @@ impl Drop for HasDrop {\n     fn drop(&mut self) {\n         unsafe {\n             let _val = *P;\n-            //~^ ERROR: /not granting access .* because that would remove .* which is protected/\n+            //~^ ERROR: /not granting access .* because that would remove .* which is strongly protected/\n         }\n     }\n }"}, {"sha": "8b1740cd81be36a602054a34db119d477de4495a", "filename": "src/tools/miri/tests/fail/stacked_borrows/drop_in_place_protector.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_protector.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_protector.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_protector.stderr?ref=c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b", "patch": "@@ -1,8 +1,8 @@\n-error: Undefined Behavior: not granting access to tag <TAG> because that would remove [Unique for <TAG>] which is protected because it is an argument of call ID\n+error: Undefined Behavior: not granting access to tag <TAG> because that would remove [Unique for <TAG>] which is strongly protected because it is an argument of call ID\n   --> $DIR/drop_in_place_protector.rs:LL:CC\n    |\n LL |             let _val = *P;\n-   |                        ^^ not granting access to tag <TAG> because that would remove [Unique for <TAG>] which is protected because it is an argument of call ID\n+   |                        ^^ not granting access to tag <TAG> because that would remove [Unique for <TAG>] which is strongly protected because it is an argument of call ID\n    |\n    = help: this indicates a potential bug in the program: it performed an invalid operation, but the Stacked Borrows rules it violated are still experimental\n    = help: see https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md for further information"}, {"sha": "e7d256b686d1d92dff494a369437cbf7ae1b644e", "filename": "src/tools/miri/tests/fail/stacked_borrows/drop_in_place_retag.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.rs?ref=c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b", "patch": "@@ -3,16 +3,9 @@\n \n //@error-pattern: /retag .* for Unique permission .* only grants SharedReadOnly permission/\n \n-#[repr(transparent)]\n-struct HasDrop;\n-\n-impl Drop for HasDrop {\n-    fn drop(&mut self) {}\n-}\n-\n fn main() {\n     unsafe {\n-        let x = (0u8, HasDrop);\n+        let x = 0u8;\n         let x = core::ptr::addr_of!(x);\n         core::ptr::drop_in_place(x.cast_mut());\n     }"}, {"sha": "05648e44be97e6b002ab6da0059bd3c2f4e871cd", "filename": "src/tools/miri/tests/fail/stacked_borrows/drop_in_place_retag.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Ffail%2Fstacked_borrows%2Fdrop_in_place_retag.stderr?ref=c359ab0b5d0dbaab1a995d7aa9fb9c6512bb837b", "patch": "@@ -15,7 +15,7 @@ help: <TAG> was created by a SharedReadOnly retag at offsets [0x0..0x1]\n LL |         let x = core::ptr::addr_of!(x);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^\n    = note: BACKTRACE:\n-   = note: inside `std::ptr::drop_in_place::<(u8, HasDrop)> - shim(Some((u8, HasDrop)))` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n+   = note: inside `std::ptr::drop_in_place::<u8> - shim(None)` at RUSTLIB/core/src/ptr/mod.rs:LL:CC\n note: inside `main` at $DIR/drop_in_place_retag.rs:LL:CC\n   --> $DIR/drop_in_place_retag.rs:LL:CC\n    |"}, {"sha": "aab070b69757c1f6d5ddb759c31087d1d5090e27", "filename": "src/tools/miri/tests/pass/drop_in_place_null.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdrop_in_place_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/102040ce76d588c0605e29577cdf8307acb4bb10/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdrop_in_place_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fdrop_in_place_null.rs?ref=102040ce76d588c0605e29577cdf8307acb4bb10", "patch": "@@ -1,7 +0,0 @@\n-// Make sure that dropping types with no drop glue is DB even for invalid pointers.\n-\n-fn main() {\n-    unsafe {\n-        core::ptr::drop_in_place::<u8>(core::ptr::null_mut());\n-    }\n-}"}]}