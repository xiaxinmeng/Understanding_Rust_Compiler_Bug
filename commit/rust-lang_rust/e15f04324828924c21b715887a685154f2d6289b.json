{"sha": "e15f04324828924c21b715887a685154f2d6289b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxNWYwNDMyNDgyODkyNGMyMWI3MTU4ODdhNjg1MTU0ZjJkNjI4OWI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-07T04:21:09Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-07T22:21:04Z"}, "message": "Show, String, Eq impls for Ranges", "tree": {"sha": "93340d2db9495f14931d698dad1d6ce073caa3cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93340d2db9495f14931d698dad1d6ce073caa3cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e15f04324828924c21b715887a685154f2d6289b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e15f04324828924c21b715887a685154f2d6289b", "html_url": "https://github.com/rust-lang/rust/commit/e15f04324828924c21b715887a685154f2d6289b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e15f04324828924c21b715887a685154f2d6289b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a8cb678e61e91c160d80794b5fdd723d0d4211c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a8cb678e61e91c160d80794b5fdd723d0d4211c", "html_url": "https://github.com/rust-lang/rust/commit/2a8cb678e61e91c160d80794b5fdd723d0d4211c"}], "stats": {"total": 88, "additions": 84, "deletions": 4}, "files": [{"sha": "8d86252e051975dc6d711c8398ca5328257e1337", "filename": "src/libcore/ops.rs", "status": "modified", "additions": 84, "deletions": 4, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e15f04324828924c21b715887a685154f2d6289b/src%2Flibcore%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e15f04324828924c21b715887a685154f2d6289b/src%2Flibcore%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fops.rs?ref=e15f04324828924c21b715887a685154f2d6289b", "patch": "@@ -65,6 +65,7 @@ use clone::Clone;\n use iter::{Step, Iterator,DoubleEndedIterator,ExactSizeIterator};\n use marker::Sized;\n use option::Option::{self, Some, None};\n+use fmt;\n \n /// The `Drop` trait is used to run some code when a value goes out of scope. This\n /// is sometimes called a 'destructor'.\n@@ -847,13 +848,27 @@ pub trait IndexMut<Index: ?Sized> {\n }\n \n /// An unbounded range.\n-#[derive(Copy)]\n+#[derive(Copy, PartialEq, Eq)]\n #[lang=\"full_range\"]\n #[unstable = \"API still in development\"]\n pub struct FullRange;\n \n+#[unstable = \"API still in development\"]\n+impl fmt::Show for FullRange {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::Show::fmt(\"..\", fmt)\n+    }\n+}\n+\n+#[unstable = \"API still in development\"]\n+impl fmt::String for FullRange {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::String::fmt(\"..\", fmt)\n+    }\n+}\n+\n /// A (half-open) range which is bounded at both ends.\n-#[derive(Copy)]\n+#[derive(Copy, PartialEq, Eq)]\n #[lang=\"range\"]\n #[unstable = \"API still in development\"]\n pub struct Range<Idx> {\n@@ -904,8 +919,29 @@ impl<Idx: Clone + Step> DoubleEndedIterator for Range<Idx> {\n #[unstable = \"API still in development\"]\n impl<Idx: Clone + Step> ExactSizeIterator for Range<Idx> {}\n \n+#[unstable = \"API still in development\"]\n+impl<Idx: fmt::Show> fmt::Show for Range<Idx> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"{:?}..{:?}\", self.start, self.end)\n+    }\n+}\n+#[cfg(stage0)]\n+#[unstable = \"API still in development\"]\n+impl<Idx: fmt::String + fmt::Show> fmt::String for Range<Idx> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"{}..{}\", self.start, self.end)\n+    }\n+}\n+#[cfg(not(stage0))]\n+#[unstable = \"API still in development\"]\n+impl<Idx: fmt::String> fmt::String for Range<Idx> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"{}..{}\", self.start, self.end)\n+    }\n+}\n+\n /// A range which is only bounded below.\n-#[derive(Copy)]\n+#[derive(Copy, PartialEq, Eq)]\n #[lang=\"range_from\"]\n #[unstable = \"API still in development\"]\n pub struct RangeFrom<Idx> {\n@@ -926,15 +962,59 @@ impl<Idx: Clone + Step> Iterator for RangeFrom<Idx> {\n     }\n }\n \n+#[unstable = \"API still in development\"]\n+impl<Idx: fmt::Show> fmt::Show for RangeFrom<Idx> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"{:?}..\", self.start)\n+    }\n+}\n+\n+#[cfg(stage0)]\n+#[unstable = \"API still in development\"]\n+impl<Idx: fmt::String + fmt::Show> fmt::String for RangeFrom<Idx> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"{}..\", self.start)\n+    }\n+}\n+#[cfg(not(stage0))]\n+#[unstable = \"API still in development\"]\n+impl<Idx: fmt::String> fmt::String for RangeFrom<Idx> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"{}..\", self.start)\n+    }\n+}\n+\n /// A range which is only bounded above.\n-#[derive(Copy)]\n+#[derive(Copy, PartialEq, Eq)]\n #[lang=\"range_to\"]\n #[unstable = \"API still in development\"]\n pub struct RangeTo<Idx> {\n     /// The upper bound of the range (exclusive).\n     pub end: Idx,\n }\n \n+#[unstable = \"API still in development\"]\n+impl<Idx: fmt::Show> fmt::Show for RangeTo<Idx> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"..{:?}\", self.end)\n+    }\n+}\n+\n+#[cfg(stage0)]\n+#[unstable = \"API still in development\"]\n+impl<Idx: fmt::String + fmt::Show> fmt::String for RangeTo<Idx> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"..{}\", self.end)\n+    }\n+}\n+#[cfg(not(stage0))]\n+#[unstable = \"API still in development\"]\n+impl<Idx: fmt::String> fmt::String for RangeTo<Idx> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        write!(fmt, \"..{}\", self.end)\n+    }\n+}\n+\n \n /// The `Deref` trait is used to specify the functionality of dereferencing\n /// operations like `*v`."}]}