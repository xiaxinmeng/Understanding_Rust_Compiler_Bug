{"sha": "f2c6cbd98fa8be80951385f789f49d560916c726", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYzZjYmQ5OGZhOGJlODA5NTEzODVmNzg5ZjQ5ZDU2MDkxNmM3MjY=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-01T13:16:17Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2020-05-01T14:24:59Z"}, "message": "Prevent calls to functions with `#[target_feature]` in safe contexts", "tree": {"sha": "af19c86afa886f276ea26cd35cd58d869e9ea850", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af19c86afa886f276ea26cd35cd58d869e9ea850"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2c6cbd98fa8be80951385f789f49d560916c726", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2c6cbd98fa8be80951385f789f49d560916c726", "html_url": "https://github.com/rust-lang/rust/commit/f2c6cbd98fa8be80951385f789f49d560916c726", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2c6cbd98fa8be80951385f789f49d560916c726/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2474f0ed88bc1a06e02230619b18e7bc8bb673fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2474f0ed88bc1a06e02230619b18e7bc8bb673fc", "html_url": "https://github.com/rust-lang/rust/commit/2474f0ed88bc1a06e02230619b18e7bc8bb673fc"}], "stats": {"total": 26, "additions": 25, "deletions": 1}, "files": [{"sha": "a015dc603520bae3eb7dfffe7d799e807eb5b837", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f2c6cbd98fa8be80951385f789f49d560916c726/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2c6cbd98fa8be80951385f789f49d560916c726/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=f2c6cbd98fa8be80951385f789f49d560916c726", "patch": "@@ -19,6 +19,7 @@ use crate::util;\n \n pub struct UnsafetyChecker<'a, 'tcx> {\n     body: &'a Body<'tcx>,\n+    body_did: LocalDefId,\n     const_context: bool,\n     min_const_fn: bool,\n     violations: Vec<UnsafetyViolation>,\n@@ -35,6 +36,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         const_context: bool,\n         min_const_fn: bool,\n         body: &'a Body<'tcx>,\n+        body_did: LocalDefId,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n@@ -44,6 +46,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         }\n         Self {\n             body,\n+            body_did,\n             const_context,\n             min_const_fn,\n             violations: vec![],\n@@ -87,6 +90,10 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         UnsafetyViolationKind::GeneralAndConstFn,\n                     )\n                 }\n+\n+                if let ty::FnDef(func_id, _) = func_ty.kind {\n+                    self.check_target_features(func_id);\n+                }\n             }\n         }\n         self.super_terminator(terminator, location);\n@@ -436,6 +443,22 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n             }\n         }\n     }\n+\n+    /// Checks whether calling `func_did` needs an `unsafe` context or not, i.e. whether\n+    /// the called function has target features the calling function hasn't.\n+    fn check_target_features(&mut self, func_did: DefId) {\n+        let callee_features = &self.tcx.codegen_fn_attrs(func_did).target_features;\n+        let self_features = &self.tcx.codegen_fn_attrs(self.body_did).target_features;\n+\n+        // Is `callee_features` a subset of `calling_features`?\n+        if !callee_features.iter().all(|feature| self_features.contains(feature)) {\n+            self.require_unsafe(\n+                \"call to function with `#[target_feature]`\",\n+                \"can only be called if the required target features are available\",\n+                UnsafetyViolationKind::GeneralAndConstFn,\n+            )\n+        }\n+    }\n }\n \n pub(crate) fn provide(providers: &mut Providers<'_>) {\n@@ -502,7 +525,8 @@ fn unsafety_check_result(tcx: TyCtxt<'_>, def_id: LocalDefId) -> UnsafetyCheckRe\n         }\n         hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) => (true, false),\n     };\n-    let mut checker = UnsafetyChecker::new(const_context, min_const_fn, body, tcx, param_env);\n+    let mut checker =\n+        UnsafetyChecker::new(const_context, min_const_fn, body, def_id, tcx, param_env);\n     checker.visit_body(&body);\n \n     check_unused_unsafe(tcx, def_id, &checker.used_unsafe, &mut checker.inherited_blocks);"}]}