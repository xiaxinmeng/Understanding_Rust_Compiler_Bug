{"sha": "21c5ccab10b30085479a7189ee555f77c47c79e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYzVjY2FiMTBiMzAwODU0NzlhNzE4OWVlNTU1Zjc3YzQ3Yzc5ZTc=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-27T20:55:15Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-03-31T17:01:48Z"}, "message": "fix internal lint fallout", "tree": {"sha": "3e89a06aaa51337ae24f1d81da57aa00f3603339", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e89a06aaa51337ae24f1d81da57aa00f3603339"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21c5ccab10b30085479a7189ee555f77c47c79e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21c5ccab10b30085479a7189ee555f77c47c79e7", "html_url": "https://github.com/rust-lang/rust/commit/21c5ccab10b30085479a7189ee555f77c47c79e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21c5ccab10b30085479a7189ee555f77c47c79e7/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3d744c9f51b6bb42c7cebeb8f7fcefac8778d1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3d744c9f51b6bb42c7cebeb8f7fcefac8778d1e", "html_url": "https://github.com/rust-lang/rust/commit/b3d744c9f51b6bb42c7cebeb8f7fcefac8778d1e"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "f6b8d4ba081467647534044fe3dbbfe4428f4d3d", "filename": "src/libcore/array/iter.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/21c5ccab10b30085479a7189ee555f77c47c79e7/src%2Flibcore%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c5ccab10b30085479a7189ee555f77c47c79e7/src%2Flibcore%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray%2Fiter.rs?ref=21c5ccab10b30085479a7189ee555f77c47c79e7", "patch": "@@ -39,7 +39,7 @@ where\n     alive: Range<usize>,\n }\n \n-impl<T, const N: usize> IntoIter<T, { N }>\n+impl<T, const N: usize> IntoIter<T, N>\n where\n     [T; N]: LengthAtMost32,\n {\n@@ -99,7 +99,7 @@ where\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-impl<T, const N: usize> Iterator for IntoIter<T, { N }>\n+impl<T, const N: usize> Iterator for IntoIter<T, N>\n where\n     [T; N]: LengthAtMost32,\n {\n@@ -146,7 +146,7 @@ where\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-impl<T, const N: usize> DoubleEndedIterator for IntoIter<T, { N }>\n+impl<T, const N: usize> DoubleEndedIterator for IntoIter<T, N>\n where\n     [T; N]: LengthAtMost32,\n {\n@@ -182,7 +182,7 @@ where\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-impl<T, const N: usize> Drop for IntoIter<T, { N }>\n+impl<T, const N: usize> Drop for IntoIter<T, N>\n where\n     [T; N]: LengthAtMost32,\n {\n@@ -195,7 +195,7 @@ where\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-impl<T, const N: usize> ExactSizeIterator for IntoIter<T, { N }>\n+impl<T, const N: usize> ExactSizeIterator for IntoIter<T, N>\n where\n     [T; N]: LengthAtMost32,\n {\n@@ -210,17 +210,17 @@ where\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-impl<T, const N: usize> FusedIterator for IntoIter<T, { N }> where [T; N]: LengthAtMost32 {}\n+impl<T, const N: usize> FusedIterator for IntoIter<T, N> where [T; N]: LengthAtMost32 {}\n \n // The iterator indeed reports the correct length. The number of \"alive\"\n // elements (that will still be yielded) is the length of the range `alive`.\n // This range is decremented in length in either `next` or `next_back`. It is\n // always decremented by 1 in those methods, but only if `Some(_)` is returned.\n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-unsafe impl<T, const N: usize> TrustedLen for IntoIter<T, { N }> where [T; N]: LengthAtMost32 {}\n+unsafe impl<T, const N: usize> TrustedLen for IntoIter<T, N> where [T; N]: LengthAtMost32 {}\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-impl<T: Clone, const N: usize> Clone for IntoIter<T, { N }>\n+impl<T: Clone, const N: usize> Clone for IntoIter<T, N>\n where\n     [T; N]: LengthAtMost32,\n {\n@@ -249,7 +249,7 @@ where\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-impl<T: fmt::Debug, const N: usize> fmt::Debug for IntoIter<T, { N }>\n+impl<T: fmt::Debug, const N: usize> fmt::Debug for IntoIter<T, N>\n where\n     [T; N]: LengthAtMost32,\n {"}, {"sha": "33bcd9456c33b51447be2f934a0687ce91e9f402", "filename": "src/librustc_macros/src/query.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/21c5ccab10b30085479a7189ee555f77c47c79e7/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c5ccab10b30085479a7189ee555f77c47c79e7/src%2Flibrustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_macros%2Fsrc%2Fquery.rs?ref=21c5ccab10b30085479a7189ee555f77c47c79e7", "patch": "@@ -356,9 +356,11 @@ fn add_query_description_impl(\n                 quote! { #t }\n             })\n             .unwrap_or(quote! { _ });\n+        // expr is a `Block`, meaning that `{ #expr }` gets expanded\n+        // to `{ { stmts... } }`, which triggers the `unused_braces` lint.\n         quote! {\n             #[inline]\n-            #[allow(unused_variables)]\n+            #[allow(unused_variables, unused_braces)]\n             fn cache_on_disk(\n                 #tcx: TyCtxt<'tcx>,\n                 #key: Self::Key,"}, {"sha": "aba1567e6ef6b0bcfae17daacacda3720ef38366", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21c5ccab10b30085479a7189ee555f77c47c79e7/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c5ccab10b30085479a7189ee555f77c47c79e7/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=21c5ccab10b30085479a7189ee555f77c47c79e7", "patch": "@@ -2807,7 +2807,7 @@ impl<'a> Resolver<'a> {\n             ast::Path {\n                 span,\n                 segments: iter::once(Ident::with_dummy_span(kw::PathRoot))\n-                    .chain({ path_str.split(\"::\").skip(1).map(Ident::from_str) })\n+                    .chain(path_str.split(\"::\").skip(1).map(Ident::from_str))\n                     .map(|i| self.new_ast_path_segment(i))\n                     .collect(),\n             }"}, {"sha": "d00381792e351dfe185f54adad843c6c0bc53ec7", "filename": "src/libstd/sys/windows/handle.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/21c5ccab10b30085479a7189ee555f77c47c79e7/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21c5ccab10b30085479a7189ee555f77c47c79e7/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fhandle.rs?ref=21c5ccab10b30085479a7189ee555f77c47c79e7", "patch": "@@ -115,8 +115,7 @@ impl RawHandle {\n     ) -> io::Result<Option<usize>> {\n         let len = cmp::min(buf.len(), <c::DWORD>::max_value() as usize) as c::DWORD;\n         let mut amt = 0;\n-        let res =\n-            cvt({ c::ReadFile(self.0, buf.as_ptr() as c::LPVOID, len, &mut amt, overlapped) });\n+        let res = cvt(c::ReadFile(self.0, buf.as_ptr() as c::LPVOID, len, &mut amt, overlapped));\n         match res {\n             Ok(_) => Ok(Some(amt as usize)),\n             Err(e) => {\n@@ -139,7 +138,7 @@ impl RawHandle {\n         unsafe {\n             let mut bytes = 0;\n             let wait = if wait { c::TRUE } else { c::FALSE };\n-            let res = cvt({ c::GetOverlappedResult(self.raw(), overlapped, &mut bytes, wait) });\n+            let res = cvt(c::GetOverlappedResult(self.raw(), overlapped, &mut bytes, wait));\n             match res {\n                 Ok(_) => Ok(bytes as usize),\n                 Err(e) => {"}]}