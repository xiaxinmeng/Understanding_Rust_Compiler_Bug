{"sha": "144281c53751422e026bb4a1036491e405a5364e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NDI4MWM1Mzc1MTQyMmUwMjZiYjRhMTAzNjQ5MWU0MDVhNTM2NGU=", "commit": {"author": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-09-14T10:39:15Z"}, "committer": {"name": "flip1995", "email": "9744647+flip1995@users.noreply.github.com", "date": "2018-09-15T09:02:00Z"}, "message": "Formatting", "tree": {"sha": "72d79753ca10d8d1b79f9bad27c73470a18847c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72d79753ca10d8d1b79f9bad27c73470a18847c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/144281c53751422e026bb4a1036491e405a5364e", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE8rLaPclMjvVJWRZHnxhOEWSDEYEFAlucyogACgkQnxhOEWSD\nEYHGCA/9F3xSyQlac0p1d+d4wRaLJ99OxcLBkJa0JrUUvzvyNBQ8UwcayTeNBIPx\nFIyXm2CnmQoqbJT2sTr5KvrE/mNrhlKCcmNXMpoz44ywcu42/Zq80MsdjYm15Gam\nG9moa6SHhTmQdX+LpZeT+wIAYPDRbAdBvKl5RORYFYWYzaM4qlO9skqIydaYw79c\n7Ug/so+TWtMG8O8diR3X3WSV7SUBIUjuyXMLgDctyZEmeOMCE5J/GVoDuqyJj03/\no34HCjj46tQ5KSD/N2poN1sUgfJJ0MjgBjm2MO31A3n6sqQA4bOsXK9sgBSyy6PX\n4XfICwSNwl+wElaW0CSp++e3u3fyElvFIg3+oNRy1Rz8Myjnl6fp78FNrbZrz5IZ\ncjUGGiDOoxkY5hxOY75oWxBEM734EYA0WGq4TYmUrlPhEkn/1ObFbwlN85Pk4pNi\nFiDyCejIa2NPMzqKH42N8W2jjsYc0f/wPynkRRJcFhBW+EKWv6CBwU1XiWtpm3mZ\nSKkcodUHK/EKO4XtgqArNhV+fHZC+ruFaEyUpwCGcgkLU/HC48WWEAdEK6jzP4tq\nRpn8fRQ44bJ1xn51MW/FYL/rIS/Iq9QWdMhx1az/wYMb57xp4+u1RzfH1m4h5MN1\nKulFtAEjDIXCAnu9FKzCHZu9ihJ04VpG3L9wdBQ3qcPBE3L1OOE=\n=HoeW\n-----END PGP SIGNATURE-----", "payload": "tree 72d79753ca10d8d1b79f9bad27c73470a18847c4\nparent a4e1a90705259ebd4fb0f8e476366b07a1d6b669\nauthor flip1995 <9744647+flip1995@users.noreply.github.com> 1536921555 +0200\ncommitter flip1995 <9744647+flip1995@users.noreply.github.com> 1537002120 +0200\n\nFormatting\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/144281c53751422e026bb4a1036491e405a5364e", "html_url": "https://github.com/rust-lang/rust/commit/144281c53751422e026bb4a1036491e405a5364e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/144281c53751422e026bb4a1036491e405a5364e/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4e1a90705259ebd4fb0f8e476366b07a1d6b669", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4e1a90705259ebd4fb0f8e476366b07a1d6b669", "html_url": "https://github.com/rust-lang/rust/commit/a4e1a90705259ebd4fb0f8e476366b07a1d6b669"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "058f7ee2fab2cf3cbda557b9751cfd4bec49edb3", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/144281c53751422e026bb4a1036491e405a5364e/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144281c53751422e026bb4a1036491e405a5364e/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=144281c53751422e026bb4a1036491e405a5364e", "patch": "@@ -25,7 +25,6 @@ declare_clippy_lint! {\n     \"various things that will negatively affect your clippy experience\"\n }\n \n-\n /// **What it does:** Ensures every lint is associated to a `LintPass`.\n ///\n /// **Why is this bad?** The compiler only knows lints via a `LintPass`. Without\n@@ -55,7 +54,6 @@ declare_clippy_lint! {\n     \"declaring a lint without associating it in a LintPass\"\n }\n \n-\n /// **What it does:** Checks for the presence of the default hash types \"HashMap\" or \"HashSet\"\n /// and recommends the FxHash* variants.\n ///\n@@ -144,7 +142,6 @@ pub struct LintWithoutLintPass {\n     registered_lints: FxHashSet<Name>,\n }\n \n-\n impl LintPass for LintWithoutLintPass {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(LINT_WITHOUT_LINT_PASS)\n@@ -196,7 +193,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LintWithoutLintPass {\n     }\n }\n \n-\n fn is_lint_ref_type(ty: &Ty) -> bool {\n     if let TyKind::Rptr(\n         _,\n@@ -213,7 +209,6 @@ fn is_lint_ref_type(ty: &Ty) -> bool {\n     false\n }\n \n-\n fn is_lint_array_type(ty: &Ty) -> bool {\n     if let TyKind::Path(ref path) = ty.node {\n         match_qpath(path, &paths::LINT_ARRAY)\n@@ -249,8 +244,8 @@ pub struct DefaultHashTypes {\n impl DefaultHashTypes {\n     pub fn default() -> Self {\n         let mut map = FxHashMap::default();\n-        map.insert(\"HashMap\".to_owned(), \"FxHashMap\".to_owned());\n-        map.insert(\"HashSet\".to_owned(), \"FxHashSet\".to_owned());\n+        map.insert(\"HashMap\".to_string(), \"FxHashMap\".to_string());\n+        map.insert(\"HashSet\".to_string(), \"FxHashSet\".to_string());\n         Self { map }\n     }\n }\n@@ -265,8 +260,17 @@ impl EarlyLintPass for DefaultHashTypes {\n     fn check_ident(&mut self, cx: &EarlyContext<'_>, ident: Ident) {\n         let ident_string = ident.to_string();\n         if let Some(replace) = self.map.get(&ident_string) {\n-            let msg = format!(\"Prefer {} over {}, it has better performance and we don't need any collision prevention in clippy\", replace, ident_string);\n-            span_lint_and_sugg(cx, DEFAULT_HASH_TYPES, ident.span, &msg, \"use\", replace.to_owned());\n+            let msg = format!(\"Prefer {} over {}, it has better performance \\\n+                              and we don't need any collision prevention in clippy\",\n+                              replace, ident_string);\n+            span_lint_and_sugg(\n+                cx,\n+                DEFAULT_HASH_TYPES,\n+                ident.span,\n+                &msg,\n+                \"use\",\n+                replace.to_string(),\n+            );\n         }\n     }\n }"}]}