{"sha": "7472cd46aa6c004568d12a71ecd90c9c45b69fb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NzJjZDQ2YWE2YzAwNDU2OGQxMmE3MWVjZDkwYzljNDViNjlmYjA=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-10-23T13:30:04Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-10-23T13:35:36Z"}, "message": "Move the `matches!` macro to the prelude", "tree": {"sha": "212e6e6c7e21d9c9fdd6c9163ffa8edf2585ede1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/212e6e6c7e21d9c9fdd6c9163ffa8edf2585ede1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7472cd46aa6c004568d12a71ecd90c9c45b69fb0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7472cd46aa6c004568d12a71ecd90c9c45b69fb0", "html_url": "https://github.com/rust-lang/rust/commit/7472cd46aa6c004568d12a71ecd90c9c45b69fb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f69293ae808dea61a2dacee6057ca5bb0d7dc817", "url": "https://api.github.com/repos/rust-lang/rust/commits/f69293ae808dea61a2dacee6057ca5bb0d7dc817", "html_url": "https://github.com/rust-lang/rust/commit/f69293ae808dea61a2dacee6057ca5bb0d7dc817"}], "stats": {"total": 127, "additions": 29, "deletions": 98}, "files": [{"sha": "3f37a1b7eb091f33db682c387400095f1e30d3ef", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7472cd46aa6c004568d12a71ecd90c9c45b69fb0", "patch": "@@ -585,7 +585,6 @@ checksum = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n name = \"core\"\n version = \"0.0.0\"\n dependencies = [\n- \"matches_macro\",\n  \"rand 0.7.0\",\n ]\n \n@@ -1901,10 +1900,6 @@ version = \"0.1.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n \n-[[package]]\n-name = \"matches_macro\"\n-version = \"0.0.0\"\n-\n [[package]]\n name = \"mdbook\"\n version = \"0.3.1\""}, {"sha": "ac07ffb14febdd8ba0f74a7d1a319b1f0ea5f1f4", "filename": "src/libcore/Cargo.toml", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/src%2Flibcore%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/src%2Flibcore%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2FCargo.toml?ref=7472cd46aa6c004568d12a71ecd90c9c45b69fb0", "patch": "@@ -20,9 +20,6 @@ path = \"../libcore/tests/lib.rs\"\n name = \"corebenches\"\n path = \"../libcore/benches/lib.rs\"\n \n-[dependencies]\n-matches_macro = { path = \"../libmatches_macro\" }\n-\n [dev-dependencies]\n rand = \"0.7\"\n "}, {"sha": "30e8dddff85ad47617060586fe10fd6b1fa9e047", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=7472cd46aa6c004568d12a71ecd90c9c45b69fb0", "patch": "@@ -85,7 +85,6 @@\n #![feature(iter_once_with)]\n #![feature(lang_items)]\n #![feature(link_llvm_intrinsics)]\n-#![feature(matches_macro)]\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(exhaustive_patterns)]\n@@ -135,16 +134,7 @@\n use prelude::v1::*;\n \n #[macro_use]\n-#[path = \"macros.rs\"]\n-mod prelude_macros;\n-\n-/// Macros that are not in the prelude and need to be imported explicitly\n-#[unstable(feature = \"matches_macro\", issue = \"0\")]\n-pub mod macros {\n-    #[unstable(feature = \"matches_macro\", issue = \"0\")]\n-    #[doc(inline)]\n-    pub use matches_macro::matches;\n-}\n+mod macros;\n \n #[macro_use]\n mod internal_macros;"}, {"sha": "f2775ffa7ca94e967cde337e29db90ab0d6a9a9c", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=7472cd46aa6c004568d12a71ecd90c9c45b69fb0", "patch": "@@ -238,6 +238,30 @@ macro_rules! debug_assert_ne {\n     ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_ne!($($arg)*); })\n }\n \n+/// Returns whether the given expression matches (any of) the given pattern(s).\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(matches_macro)]\n+///\n+/// let foo = 'f';\n+/// assert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n+///\n+/// let bar = Some(4);\n+/// assert!(matches!(bar, Some(x) if x > 2));\n+/// ```\n+#[macro_export]\n+#[unstable(feature = \"matches_macro\", issue = \"0\")]\n+macro_rules! matches {\n+    ($expression:expr, $( $pattern:pat )|+ $( if $guard: expr )?) => {\n+        match $expression {\n+            $( $pattern )|+ $( if $guard )? => true,\n+            _ => false\n+        }\n+    }\n+}\n+\n /// Unwraps a result or propagates its error.\n ///\n /// The `?` operator was added to replace `try!` and should be used instead."}, {"sha": "7cc279a9ef2ecb83ce3ac3916b6f0b9273617861", "filename": "src/libcore/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/src%2Flibcore%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/src%2Flibcore%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude%2Fv1.rs?ref=7472cd46aa6c004568d12a71ecd90c9c45b69fb0", "patch": "@@ -82,7 +82,7 @@ pub use crate::{\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n #[allow(deprecated)]\n #[doc(no_inline)]\n-pub use crate::prelude_macros::builtin::{\n+pub use crate::macros::builtin::{\n     RustcDecodable,\n     RustcEncodable,\n     bench,"}, {"sha": "3ed0aa60350df86c6acf22fe7e10834a264b4d32", "filename": "src/libmatches_macro/Cargo.toml", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibmatches_macro%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibmatches_macro%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibmatches_macro%2FCargo.toml?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -1,10 +0,0 @@\n-[package]\n-authors = [\"The Rust Project Developers\"]\n-name = \"matches_macro\"\n-version = \"0.0.0\"\n-autotests = false\n-autobenches = false\n-edition = \"2018\"\n-\n-[lib]\n-path = \"lib.rs\""}, {"sha": "0e3552ed4ea98d59ac4b0d4d58f5f6689fc63d2d", "filename": "src/libmatches_macro/lib.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibmatches_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Flibmatches_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibmatches_macro%2Flib.rs?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -1,29 +0,0 @@\n-#![no_core]\n-#![feature(no_core)]\n-#![feature(staged_api)]\n-#![doc(test(no_crate_inject))]\n-\n-/// Returns whether the given expression matches (any of) the given pattern(s).\n-///\n-/// # Examples\n-///\n-/// ```\n-/// #![feature(matches_macro)]\n-/// use std::macros::matches;\n-///\n-/// let foo = 'f';\n-/// assert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n-///\n-/// let bar = Some(4);\n-/// assert!(matches!(bar, Some(x) if x > 2));\n-/// ```\n-#[macro_export]\n-#[unstable(feature = \"matches_macro\", issue = \"0\")]\n-macro_rules! matches {\n-    ($expression:expr, $( $pattern:pat )|+ $( if $guard: expr )?) => {\n-        match $expression {\n-            $( $pattern )|+ $( if $guard )? => true,\n-            _ => false\n-        }\n-    }\n-}"}, {"sha": "d0cb0104f6cbad23d2058345d3397041a07b48e8", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=7472cd46aa6c004568d12a71ecd90c9c45b69fb0", "patch": "@@ -354,16 +354,7 @@ extern crate cfg_if;\n \n // The standard macros that are not built-in to the compiler.\n #[macro_use]\n-#[path = \"macros.rs\"]\n-mod prelude_macros;\n-\n-/// Macros that are not in the prelude and need to be imported explicitly\n-#[unstable(feature = \"matches_macro\", issue = \"0\")]\n-pub mod macros {\n-    #[unstable(feature = \"matches_macro\", issue = \"0\")]\n-    #[doc(inline)]\n-    pub use core::macros::matches;\n-}\n+mod macros;\n \n // The Rust prelude\n pub mod prelude;\n@@ -537,6 +528,7 @@ pub use core::{\n     writeln,\n     // Unstable\n     todo,\n+    matches,\n };\n \n // Re-export built-in macros defined through libcore."}, {"sha": "33b7b055b4e4b6d27d4fb37c69b6f818ce587f44", "filename": "src/test/ui/macros/unknown-builtin.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7472cd46aa6c004568d12a71ecd90c9c45b69fb0/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Funknown-builtin.stderr?ref=7472cd46aa6c004568d12a71ecd90c9c45b69fb0", "patch": "@@ -5,7 +5,7 @@ LL | macro_rules! unknown { () => () }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: cannot find a built-in macro with name `line`\n-  --> <::core::prelude_macros::builtin::line macros>:1:1\n+  --> <::core::macros::builtin::line macros>:1:1\n    |\n LL | () => { }\n    | ^^^^^^^^^"}, {"sha": "76b7e692ceea3d5837cd3de6d8d7010c83da4e1c", "filename": "src/test/ui/matches_macro_imported.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Ftest%2Fui%2Fmatches_macro_imported.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Ftest%2Fui%2Fmatches_macro_imported.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatches_macro_imported.rs?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -1,13 +0,0 @@\n-// run-pass\n-\n-#![feature(matches_macro)]\n-\n-use std::macros::matches;\n-\n-fn main() {\n-    let foo = 'f';\n-    assert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n-\n-    let foo = '_';\n-    assert!(!matches!(foo, 'A'..='Z' | 'a'..='z'));\n-}"}, {"sha": "489c7b866459fbde2bf3f571a29331bd01637b96", "filename": "src/test/ui/matches_macro_not_in_the_prelude.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Ftest%2Fui%2Fmatches_macro_not_in_the_prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Ftest%2Fui%2Fmatches_macro_not_in_the_prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatches_macro_not_in_the_prelude.rs?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -1,7 +0,0 @@\n-#![feature(matches_macro)]\n-\n-fn main() {\n-    let foo = 'f';\n-    assert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n-    //~^ Error: cannot find macro `matches` in this scope\n-}"}, {"sha": "0abe29a835b85798c3f0ff7efaeafbd187b0e448", "filename": "src/test/ui/matches_macro_not_in_the_prelude.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Ftest%2Fui%2Fmatches_macro_not_in_the_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f69293ae808dea61a2dacee6057ca5bb0d7dc817/src%2Ftest%2Fui%2Fmatches_macro_not_in_the_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatches_macro_not_in_the_prelude.stderr?ref=f69293ae808dea61a2dacee6057ca5bb0d7dc817", "patch": "@@ -1,8 +0,0 @@\n-error: cannot find macro `matches` in this scope\n-  --> $DIR/matches_macro_not_in_the_prelude.rs:5:13\n-   |\n-LL |     assert!(matches!(foo, 'A'..='Z' | 'a'..='z'));\n-   |             ^^^^^^^\n-\n-error: aborting due to previous error\n-"}]}