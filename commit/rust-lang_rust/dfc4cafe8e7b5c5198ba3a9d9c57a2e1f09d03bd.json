{"sha": "dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYzRjYWZlOGU3YjVjNTE5OGJhM2E5ZDljNTdhMmUxZjA5ZDAzYmQ=", "commit": {"author": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-03-18T20:50:28Z"}, "committer": {"name": "Nikita Popov", "email": "nikita.ppv@gmail.com", "date": "2021-03-21T19:10:53Z"}, "message": "Move decision aboute noalias into codegen_llvm\n\nThe frontend shouldn't be deciding whether or not to use mutable\nnoalias attributes, as this is a pure LLVM concern. Only provide\nthe necessary information and do the actual decision in\ncodegen_llvm.", "tree": {"sha": "046a10c5a9fdce4babdfa73e18f9ce442e138c51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/046a10c5a9fdce4babdfa73e18f9ce442e138c51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd", "html_url": "https://github.com/rust-lang/rust/commit/dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f82664191d0e8764b7435b9d72eb0e366b8b1464", "url": "https://api.github.com/repos/rust-lang/rust/commits/f82664191d0e8764b7435b9d72eb0e366b8b1464", "html_url": "https://github.com/rust-lang/rust/commit/f82664191d0e8764b7435b9d72eb0e366b8b1464"}], "stats": {"total": 105, "additions": 65, "deletions": 40}, "files": [{"sha": "46e8e2a71cbe2f1936f079c84c7a15e33851233b", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd", "patch": "@@ -41,12 +41,32 @@ impl ArgAttributeExt for ArgAttribute {\n }\n \n pub trait ArgAttributesExt {\n-    fn apply_attrs_to_llfn(&self, idx: AttributePlace, llfn: &Value);\n-    fn apply_attrs_to_callsite(&self, idx: AttributePlace, callsite: &Value);\n+    fn apply_attrs_to_llfn(&self, idx: AttributePlace, cx: &CodegenCx<'_, '_>, llfn: &Value);\n+    fn apply_attrs_to_callsite(\n+        &self,\n+        idx: AttributePlace,\n+        cx: &CodegenCx<'_, '_>,\n+        callsite: &Value,\n+    );\n+}\n+\n+fn should_use_mutable_noalias(cx: &CodegenCx<'_, '_>) -> bool {\n+    // Previously we would only emit noalias annotations for LLVM >= 6 or in\n+    // panic=abort mode. That was deemed right, as prior versions had many bugs\n+    // in conjunction with unwinding, but later versions didn\u2019t seem to have\n+    // said issues. See issue #31681.\n+    //\n+    // Alas, later on we encountered a case where noalias would generate wrong\n+    // code altogether even with recent versions of LLVM in *safe* code with no\n+    // unwinding involved. See #54462.\n+    //\n+    // For now, do not enable mutable_noalias by default at all, while the\n+    // issue is being figured out.\n+    cx.tcx.sess.opts.debugging_opts.mutable_noalias\n }\n \n impl ArgAttributesExt for ArgAttributes {\n-    fn apply_attrs_to_llfn(&self, idx: AttributePlace, llfn: &Value) {\n+    fn apply_attrs_to_llfn(&self, idx: AttributePlace, cx: &CodegenCx<'_, '_>, llfn: &Value) {\n         let mut regular = self.regular;\n         unsafe {\n             let deref = self.pointee_size.bytes();\n@@ -62,6 +82,9 @@ impl ArgAttributesExt for ArgAttributes {\n                 llvm::LLVMRustAddAlignmentAttr(llfn, idx.as_uint(), align.bytes() as u32);\n             }\n             regular.for_each_kind(|attr| attr.apply_llfn(idx, llfn));\n+            if regular.contains(ArgAttribute::NoAliasMutRef) && should_use_mutable_noalias(cx) {\n+                llvm::Attribute::NoAlias.apply_llfn(idx, llfn);\n+            }\n             match self.arg_ext {\n                 ArgExtension::None => {}\n                 ArgExtension::Zext => {\n@@ -74,7 +97,12 @@ impl ArgAttributesExt for ArgAttributes {\n         }\n     }\n \n-    fn apply_attrs_to_callsite(&self, idx: AttributePlace, callsite: &Value) {\n+    fn apply_attrs_to_callsite(\n+        &self,\n+        idx: AttributePlace,\n+        cx: &CodegenCx<'_, '_>,\n+        callsite: &Value,\n+    ) {\n         let mut regular = self.regular;\n         unsafe {\n             let deref = self.pointee_size.bytes();\n@@ -98,6 +126,9 @@ impl ArgAttributesExt for ArgAttributes {\n                 );\n             }\n             regular.for_each_kind(|attr| attr.apply_callsite(idx, callsite));\n+            if regular.contains(ArgAttribute::NoAliasMutRef) && should_use_mutable_noalias(cx) {\n+                llvm::Attribute::NoAlias.apply_callsite(idx, callsite);\n+            }\n             match self.arg_ext {\n                 ArgExtension::None => {}\n                 ArgExtension::Zext => {\n@@ -419,13 +450,13 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n \n         let mut i = 0;\n         let mut apply = |attrs: &ArgAttributes| {\n-            attrs.apply_attrs_to_llfn(llvm::AttributePlace::Argument(i), llfn);\n+            attrs.apply_attrs_to_llfn(llvm::AttributePlace::Argument(i), cx, llfn);\n             i += 1;\n             i - 1\n         };\n         match self.ret.mode {\n             PassMode::Direct(ref attrs) => {\n-                attrs.apply_attrs_to_llfn(llvm::AttributePlace::ReturnValue, llfn);\n+                attrs.apply_attrs_to_llfn(llvm::AttributePlace::ReturnValue, cx, llfn);\n             }\n             PassMode::Indirect { ref attrs, extra_attrs: _, on_stack } => {\n                 assert!(!on_stack);\n@@ -480,18 +511,18 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n         // FIXME(wesleywiser, eddyb): We should apply `nounwind` and `noreturn` as appropriate to this callsite.\n \n         let mut i = 0;\n-        let mut apply = |attrs: &ArgAttributes| {\n-            attrs.apply_attrs_to_callsite(llvm::AttributePlace::Argument(i), callsite);\n+        let mut apply = |cx: &CodegenCx<'_, '_>, attrs: &ArgAttributes| {\n+            attrs.apply_attrs_to_callsite(llvm::AttributePlace::Argument(i), cx, callsite);\n             i += 1;\n             i - 1\n         };\n         match self.ret.mode {\n             PassMode::Direct(ref attrs) => {\n-                attrs.apply_attrs_to_callsite(llvm::AttributePlace::ReturnValue, callsite);\n+                attrs.apply_attrs_to_callsite(llvm::AttributePlace::ReturnValue, &bx.cx, callsite);\n             }\n             PassMode::Indirect { ref attrs, extra_attrs: _, on_stack } => {\n                 assert!(!on_stack);\n-                let i = apply(attrs);\n+                let i = apply(bx.cx, attrs);\n                 unsafe {\n                     llvm::LLVMRustAddStructRetCallSiteAttr(\n                         callsite,\n@@ -517,12 +548,12 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n         }\n         for arg in &self.args {\n             if arg.pad.is_some() {\n-                apply(&ArgAttributes::new());\n+                apply(bx.cx, &ArgAttributes::new());\n             }\n             match arg.mode {\n                 PassMode::Ignore => {}\n                 PassMode::Indirect { ref attrs, extra_attrs: None, on_stack: true } => {\n-                    let i = apply(attrs);\n+                    let i = apply(bx.cx, attrs);\n                     unsafe {\n                         llvm::LLVMRustAddByValCallSiteAttr(\n                             callsite,\n@@ -533,22 +564,22 @@ impl<'tcx> FnAbiLlvmExt<'tcx> for FnAbi<'tcx, Ty<'tcx>> {\n                 }\n                 PassMode::Direct(ref attrs)\n                 | PassMode::Indirect { ref attrs, extra_attrs: None, on_stack: false } => {\n-                    apply(attrs);\n+                    apply(bx.cx, attrs);\n                 }\n                 PassMode::Indirect {\n                     ref attrs,\n                     extra_attrs: Some(ref extra_attrs),\n                     on_stack: _,\n                 } => {\n-                    apply(attrs);\n-                    apply(extra_attrs);\n+                    apply(bx.cx, attrs);\n+                    apply(bx.cx, extra_attrs);\n                 }\n                 PassMode::Pair(ref a, ref b) => {\n-                    apply(a);\n-                    apply(b);\n+                    apply(bx.cx, a);\n+                    apply(bx.cx, b);\n                 }\n                 PassMode::Cast(_) => {\n-                    apply(&ArgAttributes::new());\n+                    apply(bx.cx, &ArgAttributes::new());\n                 }\n             }\n         }"}, {"sha": "0ddc1093a483c83935a29bbc9bfdd19d536104d1", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd", "patch": "@@ -2327,24 +2327,7 @@ where\n                             PointerKind::Shared\n                         }\n                     }\n-                    hir::Mutability::Mut => {\n-                        // Previously we would only emit noalias annotations for LLVM >= 6 or in\n-                        // panic=abort mode. That was deemed right, as prior versions had many bugs\n-                        // in conjunction with unwinding, but later versions didn\u2019t seem to have\n-                        // said issues. See issue #31681.\n-                        //\n-                        // Alas, later on we encountered a case where noalias would generate wrong\n-                        // code altogether even with recent versions of LLVM in *safe* code with no\n-                        // unwinding involved. See #54462.\n-                        //\n-                        // For now, do not enable mutable_noalias by default at all, while the\n-                        // issue is being figured out.\n-                        if tcx.sess.opts.debugging_opts.mutable_noalias {\n-                            PointerKind::UniqueBorrowed\n-                        } else {\n-                            PointerKind::Shared\n-                        }\n-                    }\n+                    hir::Mutability::Mut => PointerKind::UniqueBorrowed,\n                 };\n \n                 cx.layout_of(ty).to_result().ok().map(|layout| PointeeInfo {\n@@ -2775,10 +2758,14 @@ where\n                     // and can be marked as both `readonly` and `noalias`, as\n                     // LLVM's definition of `noalias` is based solely on memory\n                     // dependencies rather than pointer equality\n+                    //\n+                    // Due to miscompiles in LLVM < 12, we apply a separate NoAliasMutRef attribute\n+                    // for UniqueBorrowed arguments, so that the codegen backend can decide\n+                    // whether or not to actually emit the attribute.\n                     let no_alias = match kind {\n-                        PointerKind::Shared => false,\n+                        PointerKind::Shared | PointerKind::UniqueBorrowed => false,\n                         PointerKind::UniqueOwned => true,\n-                        PointerKind::Frozen | PointerKind::UniqueBorrowed => !is_return,\n+                        PointerKind::Frozen => !is_return,\n                     };\n                     if no_alias {\n                         attrs.set(ArgAttribute::NoAlias);\n@@ -2787,6 +2774,10 @@ where\n                     if kind == PointerKind::Frozen && !is_return {\n                         attrs.set(ArgAttribute::ReadOnly);\n                     }\n+\n+                    if kind == PointerKind::UniqueBorrowed && !is_return {\n+                        attrs.set(ArgAttribute::NoAliasMutRef);\n+                    }\n                 }\n             }\n         };"}, {"sha": "2c3f7762759bfe0c187708335c9386aaa828280f", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd", "patch": "@@ -65,7 +65,10 @@ mod attr_impl {\n             const NoCapture = 1 << 2;\n             const NonNull   = 1 << 3;\n             const ReadOnly  = 1 << 4;\n-            const InReg     = 1 << 8;\n+            const InReg     = 1 << 5;\n+            // NoAlias on &mut arguments can only be used with LLVM >= 12 due to miscompiles\n+            // in earlier versions. FIXME: Remove this distinction once possible.\n+            const NoAliasMutRef = 1 << 6;\n         }\n     }\n }"}, {"sha": "e2618da749fb34105767a8610bb9b1fe20103f61", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=dfc4cafe8e7b5c5198ba3a9d9c57a2e1f09d03bd", "patch": "@@ -1112,7 +1112,7 @@ pub enum PointerKind {\n     /// `&T` where `T` contains no `UnsafeCell`, is `noalias` and `readonly`.\n     Frozen,\n \n-    /// `&mut T`, when we know `noalias` is safe for LLVM.\n+    /// `&mut T` which is `noalias` but not `readonly`.\n     UniqueBorrowed,\n \n     /// `Box<T>`, unlike `UniqueBorrowed`, it also has `noalias` on returns."}]}