{"sha": "effcd29652bbf16981d9cd0d8a578681b2ed55bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZmNkMjk2NTJiYmYxNjk4MWQ5Y2QwZDhhNTc4NjgxYjJlZDU1YmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-04T20:39:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-04T20:39:49Z"}, "message": "Auto merge of #29543 - Amanieu:asm_mem_constraint, r=alexcrichton\n\nThe \"m\" memory constraint in inline assembly is broken (generates incorrect code or triggers LLVM asserts) and should not be used. Instead, indirect memory operands should be used with \"\\*m\", \"=\\*m\" and \"+\\*m\".\n\nClang does this transparently by transforming \"m\" constraints into \"\\*m\" indirect constraints, but for now just being able to use \"\\*m\" directly is enough since asm! isn't stable.\n\nWhile \"\\*m\" works fine as an input operand, \"=\\*m\" and \"+\\*m\" need to be specified as input operands because they take a pointer value as an input. This PR relaxes the constraint checker to allow constraints starting with \"=\" or \"+\" if the constraint string contains a \"\\*\", which indicates an indirect operand.\n\nThis (indirectly) fixes these issues: #29382, #16383 and #13366. The code will need to be changed to use \"\\*m\" instead of \"m\".", "tree": {"sha": "0c5991d752c859eb48c499d3850b6ed7419ad718", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c5991d752c859eb48c499d3850b6ed7419ad718"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/effcd29652bbf16981d9cd0d8a578681b2ed55bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/effcd29652bbf16981d9cd0d8a578681b2ed55bb", "html_url": "https://github.com/rust-lang/rust/commit/effcd29652bbf16981d9cd0d8a578681b2ed55bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/effcd29652bbf16981d9cd0d8a578681b2ed55bb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ee11cd210ccb9a9be04ccab731cdaac5f4dea4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ee11cd210ccb9a9be04ccab731cdaac5f4dea4c", "html_url": "https://github.com/rust-lang/rust/commit/4ee11cd210ccb9a9be04ccab731cdaac5f4dea4c"}, {"sha": "59c5191c211711c8f51daa4911b1b734393a4011", "url": "https://api.github.com/repos/rust-lang/rust/commits/59c5191c211711c8f51daa4911b1b734393a4011", "html_url": "https://github.com/rust-lang/rust/commit/59c5191c211711c8f51daa4911b1b734393a4011"}], "stats": {"total": 43, "additions": 41, "deletions": 2}, "files": [{"sha": "bdfbb7a49330e1b71e80155f4726641b99184733", "filename": "src/libsyntax/ext/asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/effcd29652bbf16981d9cd0d8a578681b2ed55bb/src%2Flibsyntax%2Fext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effcd29652bbf16981d9cd0d8a578681b2ed55bb/src%2Flibsyntax%2Fext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fasm.rs?ref=effcd29652bbf16981d9cd0d8a578681b2ed55bb", "patch": "@@ -139,9 +139,9 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n \n                     let (constraint, _str_style) = panictry!(p.parse_str());\n \n-                    if constraint.starts_with(\"=\") {\n+                    if constraint.starts_with(\"=\") && !constraint.contains(\"*\") {\n                         cx.span_err(p.last_span, \"input operand constraint contains '='\");\n-                    } else if constraint.starts_with(\"+\") {\n+                    } else if constraint.starts_with(\"+\") && !constraint.contains(\"*\") {\n                         cx.span_err(p.last_span, \"input operand constraint contains '+'\");\n                     }\n "}, {"sha": "80fd548dfe3540bbd3341e63969f149d425d9ce1", "filename": "src/test/run-pass/asm-indirect-memory.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/effcd29652bbf16981d9cd0d8a578681b2ed55bb/src%2Ftest%2Frun-pass%2Fasm-indirect-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/effcd29652bbf16981d9cd0d8a578681b2ed55bb/src%2Ftest%2Frun-pass%2Fasm-indirect-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-indirect-memory.rs?ref=effcd29652bbf16981d9cd0d8a578681b2ed55bb", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(asm)]\n+\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn read(ptr: &u32) -> u32 {\n+    let out: u32;\n+    unsafe {\n+        asm!(\"mov $1, $0\" : \"=r\" (out) : \"*m\" (ptr));\n+    }\n+    out\n+}\n+\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn write(ptr: &mut u32, val: u32) {\n+    unsafe {\n+        asm!(\"mov $1, $0\" :: \"=*m\" (ptr), \"r\" (val));\n+    }\n+}\n+\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+pub fn main() {\n+    let a = 1;\n+    let mut b = 2;\n+    assert_eq!(read(&a), 1);\n+    write(&mut b, 3);\n+    assert_eq!(b, 3);\n+}\n+\n+#[cfg(not(any(target_arch = \"x86\", target_arch = \"x86_64\")))]\n+pub fn main() {}"}]}