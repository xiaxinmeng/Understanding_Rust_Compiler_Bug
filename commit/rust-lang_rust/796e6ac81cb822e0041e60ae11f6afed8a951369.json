{"sha": "796e6ac81cb822e0041e60ae11f6afed8a951369", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5NmU2YWM4MWNiODIyZTAwNDFlNjBhZTExZjZhZmVkOGE5NTEzNjk=", "commit": {"author": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-10-06T19:47:19Z"}, "committer": {"name": "Rich Kadel", "email": "richkadel@google.com", "date": "2020-10-08T18:28:01Z"}, "message": "rust-demangler tool strips crate disambiguators with < 16 digits\n\nAddresses Issue #77615.", "tree": {"sha": "f6f0c285503e61294e613761c8433159e3b61401", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6f0c285503e61294e613761c8433159e3b61401"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/796e6ac81cb822e0041e60ae11f6afed8a951369", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/796e6ac81cb822e0041e60ae11f6afed8a951369", "html_url": "https://github.com/rust-lang/rust/commit/796e6ac81cb822e0041e60ae11f6afed8a951369", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/796e6ac81cb822e0041e60ae11f6afed8a951369/comments", "author": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richkadel", "id": 3827298, "node_id": "MDQ6VXNlcjM4MjcyOTg=", "avatar_url": "https://avatars.githubusercontent.com/u/3827298?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richkadel", "html_url": "https://github.com/richkadel", "followers_url": "https://api.github.com/users/richkadel/followers", "following_url": "https://api.github.com/users/richkadel/following{/other_user}", "gists_url": "https://api.github.com/users/richkadel/gists{/gist_id}", "starred_url": "https://api.github.com/users/richkadel/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richkadel/subscriptions", "organizations_url": "https://api.github.com/users/richkadel/orgs", "repos_url": "https://api.github.com/users/richkadel/repos", "events_url": "https://api.github.com/users/richkadel/events{/privacy}", "received_events_url": "https://api.github.com/users/richkadel/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f627663a755fb1795a725c1b89d2d83be5096f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f627663a755fb1795a725c1b89d2d83be5096f9", "html_url": "https://github.com/rust-lang/rust/commit/6f627663a755fb1795a725c1b89d2d83be5096f9"}], "stats": {"total": 66, "additions": 62, "deletions": 4}, "files": [{"sha": "fd031ccb25249312d6f4db9101634178d2ff1c97", "filename": "src/tools/rust-demangler/main.rs", "status": "modified", "additions": 62, "deletions": 4, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/796e6ac81cb822e0041e60ae11f6afed8a951369/src%2Ftools%2Frust-demangler%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/796e6ac81cb822e0041e60ae11f6afed8a951369/src%2Ftools%2Frust-demangler%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frust-demangler%2Fmain.rs?ref=796e6ac81cb822e0041e60ae11f6afed8a951369", "patch": "@@ -21,6 +21,41 @@\n //! $ \"${TARGET}\"/llvm/bin/llvm-cov show --Xdemangler=\"${TARGET}\"/stage0-tools-bin/rust-demangler \\\n //!   --instr-profile=main.profdata ./main --show-line-counts-or-regions\n //! ```\n+//!\n+//! Note regarding crate disambiguators:\n+//!\n+//! Some demangled symbol paths can include \"crate disambiguator\" suffixes, represented as a large\n+//! hexadecimal value enclosed in square braces, and appended to the name of the crate. a suffix to the\n+//! original crate name. For example, the `core` crate, here, includes a disambiguator:\n+//!\n+//! ```rust\n+//!     <generics::Firework<f64> as core[a7a74cee373f048]::ops::drop::Drop>::drop\n+//! ```\n+//!\n+//! These disambiguators are known to vary depending on environmental circumstances. As a result,\n+//! tests that compare results including demangled names can fail across development environments,\n+//! particularly with cross-platform testing. Also, the resulting crate paths are not syntactically\n+//! valid, and don't match the original source symbol paths, which can impact development tools.\n+//!\n+//! For these reasons, by default, `rust-demangler` uses a heuristic to remove crate disambiguators\n+//! from their original demangled representation before printing them to standard output. If crate\n+//! disambiguators are required, add the `-d` (or `--disambiguators`) flag, and the disambiguators\n+//! will not be removed.\n+//!\n+//! Also note that the disambiguators are stripped by a Regex pattern that is tolerant to some\n+//! variation in the number of hexadecimal digits. The disambiguators come from a hash value, which\n+//! typically generates a 16-digit hex representation on a 64-bit architecture; however, leading\n+//! zeros are not included, which can shorten the hex digit length, and a different hash algorithm\n+//! that might also be dependent on the architecture, might shorten the length even further. A\n+//! minimum length of 5 digits is assumed, which should be more than sufficient to support hex\n+//! representations that generate only 8-digits of precision with an extremely rare (but not\n+//! impossible) result with up to 3 leading zeros.\n+//!\n+//! Using a minimum number of digits less than 5 risks the possibility of stripping demangled name\n+//! components with a similar pattern. For example, some closures instantiated multiple times\n+//! include their own disambiguators, demangled as non-hashed zero-based indexes in square brackets.\n+//! These disambiguators seem to have more analytical value (for instance, in coverage analysis), so\n+//! they are not removed.\n \n use regex::Regex;\n use rustc_demangle::demangle;\n@@ -29,7 +64,25 @@ use std::io::{self, Read, Write};\n const REPLACE_COLONS: &str = \"::\";\n \n fn main() -> io::Result<()> {\n-    let mut strip_crate_disambiguators = Some(Regex::new(r\"\\[[a-f0-9]{16}\\]::\").unwrap());\n+    // FIXME(richkadel): In Issue #77615 discussed updating the `rustc-demangle` library, to provide\n+    // an option to generate demangled names without including crate disambiguators. If that\n+    // happens, update this tool to use that option (if the `-d` flag is not set) instead stripping\n+    // them via the Regex heuristic. The update the doc comments and help.\n+\n+    // Strip hashed hexadecimal crate disambiguators. Leading zeros are not enforced, and can be\n+    // different across different platform/architecture types, so while 16 hex digits are common,\n+    // they can also be shorter.\n+    //\n+    // Also note that a demangled symbol path may include the `[<digits>]` pattern, with zero-based\n+    // indexes (such as for closures, and possibly for types defined in anonymous scopes). Preferably\n+    // these should not be stripped.\n+    //\n+    // The minimum length of 5 digits supports the possibility that some target architecture (maybe\n+    // a 32-bit or smaller architecture) could generate a hash value with a maximum of 8 digits,\n+    // and more than three leading zeros should be extremely unlikely. Conversely, it should be\n+    // sufficient to assume the zero-based indexes for closures and anonymous scopes will never\n+    // exceed the value 9999.\n+    let mut strip_crate_disambiguators = Some(Regex::new(r\"\\[[a-f0-9]{5,16}\\]::\").unwrap());\n \n     let mut args = std::env::args();\n     let progname = args.next().unwrap();\n@@ -41,14 +94,19 @@ fn main() -> io::Result<()> {\n             eprintln!(\"Usage: {} [-d|--disambiguators]\", progname);\n             eprintln!();\n             eprintln!(\n-                \"This tool converts a list of Rust mangled symbols (one per line) into a\\n\n+                \"This tool converts a list of Rust mangled symbols (one per line) into a\\n\\\n                 corresponding list of demangled symbols.\"\n             );\n             eprintln!();\n             eprintln!(\n                 \"With -d (--disambiguators), Rust symbols mangled with the v0 symbol mangler may\\n\\\n-                include crate disambiguators (a 16 character hex value in square brackets).\\n\\\n-                Crate disambiguators are removed by default.\"\n+                include crate disambiguators (a hexadecimal hash value, typically up to 16 digits\\n\\\n+                long, enclosed in square brackets).\"\n+            );\n+            eprintln!();\n+            eprintln!(\n+                \"By default, crate disambiguators are removed, using a heuristics-based regular\\n\\\n+                expression. (See the `rust-demangler` doc comments for more information.)\"\n             );\n             eprintln!();\n             std::process::exit(1)"}]}