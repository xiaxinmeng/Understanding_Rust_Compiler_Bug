{"sha": "df10715463d27830b155edb571cb80ebb479e4d2", "node_id": "C_kwDOAAsO6NoAKGRmMTA3MTU0NjNkMjc4MzBiMTU1ZWRiNTcxY2I4MGViYjQ3OWU0ZDI", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-04-07T20:47:40Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-04-08T16:00:23Z"}, "message": "remove CheckVisitor, CollectExternCrateVisitor and ItemLikeVisitor impls\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "30ab525f5a7fd78de8699cb028e3136faaa1c3a6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30ab525f5a7fd78de8699cb028e3136faaa1c3a6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df10715463d27830b155edb571cb80ebb479e4d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df10715463d27830b155edb571cb80ebb479e4d2", "html_url": "https://github.com/rust-lang/rust/commit/df10715463d27830b155edb571cb80ebb479e4d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df10715463d27830b155edb571cb80ebb479e4d2/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d6f4c85adcd78c3274e4117e379c57c6a38909c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d6f4c85adcd78c3274e4117e379c57c6a38909c", "html_url": "https://github.com/rust-lang/rust/commit/3d6f4c85adcd78c3274e4117e379c57c6a38909c"}], "stats": {"total": 121, "additions": 46, "deletions": 75}, "files": [{"sha": "4f792fa25a12b88e7f2600d452e580061e9ff264", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 42, "deletions": 75, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/df10715463d27830b155edb571cb80ebb479e4d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df10715463d27830b155edb571cb80ebb479e4d2/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=df10715463d27830b155edb571cb80ebb479e4d2", "patch": "@@ -1,76 +1,58 @@\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::lint;\n use rustc_span::{Span, Symbol};\n \n pub fn check_crate(tcx: TyCtxt<'_>) {\n-    let mut used_trait_imports = FxHashSet::default();\n+    let mut used_trait_imports: FxHashSet<LocalDefId> = FxHashSet::default();\n+\n     for item_def_id in tcx.hir().body_owners() {\n         let imports = tcx.used_trait_imports(item_def_id);\n         debug!(\"GatherVisitor: item_def_id={:?} with imports {:#?}\", item_def_id, imports);\n         used_trait_imports.extend(imports.iter());\n     }\n \n-    let mut visitor = CheckVisitor { tcx, used_trait_imports };\n-\n     for id in tcx.hir().items() {\n-        let item = tcx.hir().item(id);\n-        visitor.visit_item(item);\n-    }\n-\n-    unused_crates_lint(tcx);\n-}\n-\n-impl<'tcx> ItemLikeVisitor<'_> for CheckVisitor<'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        if item.vis.node.is_pub() || item.span.is_dummy() {\n-            return;\n-        }\n-        if let hir::ItemKind::Use(path, _) = item.kind {\n-            self.check_import(item.item_id(), path.span);\n+        if matches!(tcx.hir().def_kind(id.def_id), DefKind::Use) {\n+            let item = tcx.hir().item(id);\n+            if item.vis.node.is_pub() || item.span.is_dummy() {\n+                continue;\n+            }\n+            if let hir::ItemKind::Use(path, _) = item.kind {\n+                check_import(tcx, &mut used_trait_imports, item.item_id(), path.span);\n+            }\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n-\n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n-\n-    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n+    unused_crates_lint(tcx);\n }\n \n-struct CheckVisitor<'tcx> {\n+fn check_import<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    used_trait_imports: FxHashSet<LocalDefId>,\n-}\n-\n-impl<'tcx> CheckVisitor<'tcx> {\n-    fn check_import(&self, item_id: hir::ItemId, span: Span) {\n-        if !self.tcx.maybe_unused_trait_import(item_id.def_id) {\n-            return;\n-        }\n-\n-        if self.used_trait_imports.contains(&item_id.def_id) {\n-            return;\n-        }\n+    used_trait_imports: &mut FxHashSet<LocalDefId>,\n+    item_id: hir::ItemId,\n+    span: Span,\n+) {\n+    if !tcx.maybe_unused_trait_import(item_id.def_id) {\n+        return;\n+    }\n \n-        self.tcx.struct_span_lint_hir(\n-            lint::builtin::UNUSED_IMPORTS,\n-            item_id.hir_id(),\n-            span,\n-            |lint| {\n-                let msg = if let Ok(snippet) = self.tcx.sess.source_map().span_to_snippet(span) {\n-                    format!(\"unused import: `{}`\", snippet)\n-                } else {\n-                    \"unused import\".to_owned()\n-                };\n-                lint.build(&msg).emit();\n-            },\n-        );\n+    if used_trait_imports.contains(&item_id.def_id) {\n+        return;\n     }\n+\n+    tcx.struct_span_lint_hir(lint::builtin::UNUSED_IMPORTS, item_id.hir_id(), span, |lint| {\n+        let msg = if let Ok(snippet) = tcx.sess.source_map().span_to_snippet(span) {\n+            format!(\"unused import: `{}`\", snippet)\n+        } else {\n+            \"unused import\".to_owned()\n+        };\n+        lint.build(&msg).emit();\n+    });\n }\n \n fn unused_crates_lint(tcx: TyCtxt<'_>) {\n@@ -114,11 +96,19 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n \n     // Collect all the extern crates (in a reliable order).\n     let mut crates_to_lint = vec![];\n-    let mut visitor = CollectExternCrateVisitor { crates_to_lint: &mut crates_to_lint };\n \n     for id in tcx.hir().items() {\n-        let item = tcx.hir().item(id);\n-        visitor.visit_item(item);\n+        if matches!(tcx.hir().def_kind(id.def_id), DefKind::ExternCrate) {\n+            let item = tcx.hir().item(id);\n+            if let hir::ItemKind::ExternCrate(orig_name) = item.kind {\n+                crates_to_lint.push(ExternCrateToLint {\n+                    def_id: item.def_id.to_def_id(),\n+                    span: item.span,\n+                    orig_name,\n+                    warn_if_unused: !item.ident.as_str().starts_with('_'),\n+                });\n+            }\n+        }\n     }\n \n     let extern_prelude = &tcx.resolutions(()).extern_prelude;\n@@ -200,10 +190,6 @@ fn unused_crates_lint(tcx: TyCtxt<'_>) {\n     }\n }\n \n-struct CollectExternCrateVisitor<'a> {\n-    crates_to_lint: &'a mut Vec<ExternCrateToLint>,\n-}\n-\n struct ExternCrateToLint {\n     /// `DefId` of the extern crate\n     def_id: DefId,\n@@ -220,22 +206,3 @@ struct ExternCrateToLint {\n     /// about it going unused (but we should still emit idiom lints).\n     warn_if_unused: bool,\n }\n-\n-impl<'a, 'v> ItemLikeVisitor<'v> for CollectExternCrateVisitor<'a> {\n-    fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        if let hir::ItemKind::ExternCrate(orig_name) = item.kind {\n-            self.crates_to_lint.push(ExternCrateToLint {\n-                def_id: item.def_id.to_def_id(),\n-                span: item.span,\n-                orig_name,\n-                warn_if_unused: !item.ident.as_str().starts_with('_'),\n-            });\n-        }\n-    }\n-\n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n-\n-    fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem<'_>) {}\n-\n-    fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n-}"}, {"sha": "a01e2f2db3afb2ee9c52ff3e6645c37ebaef4fe6", "filename": "src/tools/clippy/clippy_lints/src/same_name_method.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df10715463d27830b155edb571cb80ebb479e4d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsame_name_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df10715463d27830b155edb571cb80ebb479e4d2/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsame_name_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsame_name_method.rs?ref=df10715463d27830b155edb571cb80ebb479e4d2", "patch": "@@ -51,6 +51,10 @@ impl<'tcx> LateLintPass<'tcx> for SameNameMethod {\n         let mut map = FxHashMap::<Res, ExistingName>::default();\n \n         for id in cx.tcx.hir().items() {\n+            if !matches!(cx.tcx.hir().def_kind(id.def_id), DefKind::Impl) {\n+                continue;\n+            }\n+\n             let item = cx.tcx.hir().item(id);\n             if let ItemKind::Impl(Impl {\n                 items,"}]}