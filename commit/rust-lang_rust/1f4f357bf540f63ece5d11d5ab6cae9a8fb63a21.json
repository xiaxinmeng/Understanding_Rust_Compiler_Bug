{"sha": "1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNGYzNTdiZjU0MGY2M2VjZTVkMTFkNWFiNmNhZTlhOGZiNjNhMjE=", "commit": {"author": {"name": "Krishna Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2019-12-15T04:10:23Z"}, "committer": {"name": "Krishna Sai Veera Reddy", "email": "veerareddy@email.arizona.edu", "date": "2020-02-24T06:20:33Z"}, "message": "Consolidate the accuracy and efficiency lints\n\nMerge the accuracy and efficiency lints into a single lint that\nchecks for improvements to accuracy, efficiency and readability\nof floating-point expressions.", "tree": {"sha": "fe1591b9b76b8f806e31a11e7b09a857e36621dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe1591b9b76b8f806e31a11e7b09a857e36621dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21", "html_url": "https://github.com/rust-lang/rust/commit/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21/comments", "author": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "krishna-veerareddy", "id": 41484652, "node_id": "MDQ6VXNlcjQxNDg0NjUy", "avatar_url": "https://avatars.githubusercontent.com/u/41484652?v=4", "gravatar_id": "", "url": "https://api.github.com/users/krishna-veerareddy", "html_url": "https://github.com/krishna-veerareddy", "followers_url": "https://api.github.com/users/krishna-veerareddy/followers", "following_url": "https://api.github.com/users/krishna-veerareddy/following{/other_user}", "gists_url": "https://api.github.com/users/krishna-veerareddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/krishna-veerareddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/krishna-veerareddy/subscriptions", "organizations_url": "https://api.github.com/users/krishna-veerareddy/orgs", "repos_url": "https://api.github.com/users/krishna-veerareddy/repos", "events_url": "https://api.github.com/users/krishna-veerareddy/events{/privacy}", "received_events_url": "https://api.github.com/users/krishna-veerareddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c636c6a55b92daef5af4e1c459c0eaf3f5787945", "url": "https://api.github.com/repos/rust-lang/rust/commits/c636c6a55b92daef5af4e1c459c0eaf3f5787945", "html_url": "https://github.com/rust-lang/rust/commit/c636c6a55b92daef5af4e1c459c0eaf3f5787945"}], "stats": {"total": 181, "additions": 76, "deletions": 105}, "files": [{"sha": "4e99342e4a42881f90509838f415ef0b97bd85b4", "filename": "CHANGELOG.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21", "patch": "@@ -1169,7 +1169,6 @@ Released 2018-09-13\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n [`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher\n [`implicit_return`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return\n-[`inaccurate_floating_point_computation`]: https://rust-lang.github.io/rust-clippy/master/index.html#inaccurate_floating_point_computation\n [`inconsistent_digit_grouping`]: https://rust-lang.github.io/rust-clippy/master/index.html#inconsistent_digit_grouping\n [`indexing_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing\n [`ineffective_bit_mask`]: https://rust-lang.github.io/rust-clippy/master/index.html#ineffective_bit_mask"}, {"sha": "da55f1e5f4e38abd91f9847d4945bbc8f29c456a", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 37, "deletions": 52, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21", "patch": "@@ -13,11 +13,12 @@ use std::f32::consts as f32_consts;\n use std::f64::consts as f64_consts;\n \n declare_clippy_lint! {\n-    /// **What it does:** Looks for numerically unstable floating point\n-    /// computations and suggests better alternatives.\n+    /// **What it does:** Looks for floating-point expressions that\n+    /// can be expressed using built-in methods to improve accuracy,\n+    /// performance and/or succinctness.\n     ///\n-    /// **Why is this bad?** Numerically unstable floating point computations\n-    /// cause rounding errors to magnify and distorts the results strongly.\n+    /// **Why is this bad?** Negatively affects accuracy, performance\n+    /// and/or readability.\n     ///\n     /// **Known problems:** None\n     ///\n@@ -26,59 +27,43 @@ declare_clippy_lint! {\n     /// ```rust\n     /// use std::f32::consts::E;\n     ///\n-    /// let a = 1f32.log(2.0);\n-    /// let b = 1f32.log(10.0);\n-    /// let c = 1f32.log(E);\n+    /// let a = 3f32;\n+    /// let _ = (2f32).powf(a);\n+    /// let _ = E.powf(a);\n+    /// let _ = a.powf(1.0 / 2.0);\n+    /// let _ = a.powf(1.0 / 3.0);\n+    /// let _ = a.log(2.0);\n+    /// let _ = a.log(10.0);\n+    /// let _ = a.log(E);\n+    /// let _ = (1.0 + a).ln();\n+    /// let _ = a.exp() - 1.0;\n     /// ```\n     ///\n     /// is better expressed as\n     ///\n     /// ```rust\n-    /// let a = 1f32.log2();\n-    /// let b = 1f32.log10();\n-    /// let c = 1f32.ln();\n-    /// ```\n-    pub INACCURATE_FLOATING_POINT_COMPUTATION,\n-    nursery,\n-    \"checks for numerically unstable floating point computations\"\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Looks for inefficient floating point computations\n-    /// and suggests faster alternatives.\n-    ///\n-    /// **Why is this bad?** Lower performance.\n-    ///\n-    /// **Known problems:** None\n-    ///\n-    /// **Example:**\n-    ///\n-    /// ```rust\n     /// use std::f32::consts::E;\n     ///\n-    /// let a = (2f32).powf(3.0);\n-    /// let c = E.powf(3.0);\n-    /// ```\n-    ///\n-    /// is better expressed as\n-    ///\n-    /// ```rust\n-    /// let a = (3f32).exp2();\n-    /// let b = (3f32).exp();\n+    /// let a = 3f32;\n+    /// let _ = a.exp2();\n+    /// let _ = a.exp();\n+    /// let _ = a.sqrt();\n+    /// let _ = a.cbrt();\n+    /// let _ = a.log2();\n+    /// let _ = a.log10();\n+    /// let _ = a.ln();\n+    /// let _ = a.ln_1p();\n+    /// let _ = a.exp_m1();\n     /// ```\n-    pub SLOW_FLOATING_POINT_COMPUTATION,\n+    pub FLOATING_POINT_IMPROVEMENTS,\n     nursery,\n-    \"checks for inefficient floating point computations\"\n+    \"looks for improvements to floating-point expressions\"\n }\n \n-declare_lint_pass!(FloatingPointArithmetic => [\n-    INACCURATE_FLOATING_POINT_COMPUTATION,\n-    SLOW_FLOATING_POINT_COMPUTATION\n-]);\n+declare_lint_pass!(FloatingPointArithmetic => [FLOATING_POINT_IMPROVEMENTS]);\n \n fn check_log_base(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n-    let recv = &args[0];\n-    let arg = sugg::Sugg::hir(cx, recv, \"..\").maybe_par();\n+    let arg = sugg::Sugg::hir(cx, &args[0], \"..\").maybe_par();\n \n     if let Some((value, _)) = constant(cx, cx.tables, &args[1]) {\n         let method;\n@@ -95,7 +80,7 @@ fn check_log_base(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n \n         span_lint_and_sugg(\n             cx,\n-            INACCURATE_FLOATING_POINT_COMPUTATION,\n+            FLOATING_POINT_IMPROVEMENTS,\n             expr.span,\n             \"logarithm for bases 2, 10 and e can be computed more accurately\",\n             \"consider using\",\n@@ -118,7 +103,7 @@ fn check_ln1p(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n \n             span_lint_and_sugg(\n                 cx,\n-                INACCURATE_FLOATING_POINT_COMPUTATION,\n+                FLOATING_POINT_IMPROVEMENTS,\n                 expr.span,\n                 \"ln(1 + x) can be computed more accurately\",\n                 \"consider using\",\n@@ -144,9 +129,9 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n \n         span_lint_and_sugg(\n             cx,\n-            SLOW_FLOATING_POINT_COMPUTATION,\n+            FLOATING_POINT_IMPROVEMENTS,\n             expr.span,\n-            \"exponent for bases 2 and e can be computed more efficiently\",\n+            \"exponent for bases 2 and e can be computed more accurately\",\n             \"consider using\",\n             format!(\"{}.{}()\", sugg::Sugg::hir(cx, &args[1], \"..\").maybe_par(), method),\n             Applicability::MachineApplicable,\n@@ -159,18 +144,18 @@ fn check_powf(cx: &LateContext<'_, '_>, expr: &Expr, args: &HirVec<Expr>) {\n         let method;\n \n         if F32(1.0 / 2.0) == value || F64(1.0 / 2.0) == value {\n-            help = \"square-root of a number can be computer more efficiently\";\n+            help = \"square-root of a number can be computed more efficiently and accurately\";\n             method = \"sqrt\";\n         } else if F32(1.0 / 3.0) == value || F64(1.0 / 3.0) == value {\n-            help = \"cube-root of a number can be computer more efficiently\";\n+            help = \"cube-root of a number can be computed more accurately\";\n             method = \"cbrt\";\n         } else {\n             return;\n         }\n \n         span_lint_and_sugg(\n             cx,\n-            SLOW_FLOATING_POINT_COMPUTATION,\n+            FLOATING_POINT_IMPROVEMENTS,\n             expr.span,\n             help,\n             \"consider using\",\n@@ -194,7 +179,7 @@ fn check_expm1(cx: &LateContext<'_, '_>, expr: &Expr) {\n         then {\n             span_lint_and_sugg(\n                 cx,\n-                INACCURATE_FLOATING_POINT_COMPUTATION,\n+                FLOATING_POINT_IMPROVEMENTS,\n                 expr.span,\n                 \"(e.pow(x) - 1) can be computed more accurately\",\n                 \"consider using\","}, {"sha": "9154a0dc3fff22ef6fe3270842b427ba9c17feb6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21", "patch": "@@ -1649,8 +1649,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_group(true, \"clippy::nursery\", Some(\"clippy_nursery\"), vec![\n         LintId::of(&attrs::EMPTY_LINE_AFTER_OUTER_ATTR),\n         LintId::of(&fallible_impl_from::FALLIBLE_IMPL_FROM),\n-        LintId::of(&floating_point_arithmetic::INACCURATE_FLOATING_POINT_COMPUTATION),\n-        LintId::of(&floating_point_arithmetic::SLOW_FLOATING_POINT_COMPUTATION),\n+        LintId::of(&floating_point_arithmetic::FLOATING_POINT_IMPROVEMENTS),\n         LintId::of(&missing_const_for_fn::MISSING_CONST_FOR_FN),\n         LintId::of(&mul_add::MANUAL_MUL_ADD),\n         LintId::of(&mutable_debug_assertion::DEBUG_ASSERT_WITH_MUT_CALL),"}, {"sha": "29b5a7ba08a2cdab6f8cd82c59842b2562b27536", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21", "patch": "@@ -749,13 +749,6 @@ pub const ALL_LINTS: [Lint; 357] = [\n         deprecation: None,\n         module: \"implicit_return\",\n     },\n-    Lint {\n-        name: \"inaccurate_floating_point_computation\",\n-        group: \"nursery\",\n-        desc: \"checks for numerically unstable floating point computations\",\n-        deprecation: None,\n-        module: \"floating_point_arithmetic\",\n-    },\n     Lint {\n         name: \"inconsistent_digit_grouping\",\n         group: \"style\","}, {"sha": "1feeb827621a53088467cd7ea8a15446e1add301", "filename": "tests/ui/floating_point_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21/tests%2Fui%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21/tests%2Fui%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_arithmetic.rs?ref=1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21", "patch": "@@ -1,8 +1,5 @@\n #![allow(dead_code)]\n-#![warn(\n-    clippy::inaccurate_floating_point_computation,\n-    clippy::slow_floating_point_computation\n-)]\n+#![warn(clippy::floating_point_improvements)]\n \n const TWO: f32 = 2.0;\n const E: f32 = std::f32::consts::E;"}, {"sha": "a7db1669745af41f63006569e6f08415ac3a5345", "filename": "tests/ui/floating_point_arithmetic.stderr", "status": "modified", "additions": 37, "deletions": 39, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21/tests%2Fui%2Ffloating_point_arithmetic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21/tests%2Fui%2Ffloating_point_arithmetic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffloating_point_arithmetic.stderr?ref=1f4f357bf540f63ece5d11d5ab6cae9a8fb63a21", "patch": "@@ -1,171 +1,169 @@\n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:12:13\n+  --> $DIR/floating_point_arithmetic.rs:9:13\n    |\n LL |     let _ = x.log(2f32);\n    |             ^^^^^^^^^^^ help: consider using: `x.log2()`\n    |\n-   = note: `-D clippy::inaccurate-floating-point-computation` implied by `-D warnings`\n+   = note: `-D clippy::floating-point-improvements` implied by `-D warnings`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:13:13\n+  --> $DIR/floating_point_arithmetic.rs:10:13\n    |\n LL |     let _ = x.log(10f32);\n    |             ^^^^^^^^^^^^ help: consider using: `x.log10()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:14:13\n+  --> $DIR/floating_point_arithmetic.rs:11:13\n    |\n LL |     let _ = x.log(std::f32::consts::E);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.ln()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:15:13\n+  --> $DIR/floating_point_arithmetic.rs:12:13\n    |\n LL |     let _ = x.log(TWO);\n    |             ^^^^^^^^^^ help: consider using: `x.log2()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:16:13\n+  --> $DIR/floating_point_arithmetic.rs:13:13\n    |\n LL |     let _ = x.log(E);\n    |             ^^^^^^^^ help: consider using: `x.ln()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:19:13\n+  --> $DIR/floating_point_arithmetic.rs:16:13\n    |\n LL |     let _ = x.log(2f64);\n    |             ^^^^^^^^^^^ help: consider using: `x.log2()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:20:13\n+  --> $DIR/floating_point_arithmetic.rs:17:13\n    |\n LL |     let _ = x.log(10f64);\n    |             ^^^^^^^^^^^^ help: consider using: `x.log10()`\n \n error: logarithm for bases 2, 10 and e can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:21:13\n+  --> $DIR/floating_point_arithmetic.rs:18:13\n    |\n LL |     let _ = x.log(std::f64::consts::E);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.ln()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:26:13\n+  --> $DIR/floating_point_arithmetic.rs:23:13\n    |\n LL |     let _ = (1.0 + x).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:27:13\n+  --> $DIR/floating_point_arithmetic.rs:24:13\n    |\n LL |     let _ = (1.0 + x * 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:28:13\n+  --> $DIR/floating_point_arithmetic.rs:25:13\n    |\n LL |     let _ = (1.0 + x.powi(2)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:29:13\n+  --> $DIR/floating_point_arithmetic.rs:26:13\n    |\n LL |     let _ = (1.0 + x.powi(2) * 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x.powi(2) * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:30:13\n+  --> $DIR/floating_point_arithmetic.rs:27:13\n    |\n LL |     let _ = (1.0 + (std::f32::consts::E - 1.0)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `((std::f32::consts::E - 1.0)).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:37:13\n+  --> $DIR/floating_point_arithmetic.rs:34:13\n    |\n LL |     let _ = (1.0 + x).ln();\n    |             ^^^^^^^^^^^^^^ help: consider using: `x.ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:38:13\n+  --> $DIR/floating_point_arithmetic.rs:35:13\n    |\n LL |     let _ = (1.0 + x * 2.0).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^ help: consider using: `(x * 2.0).ln_1p()`\n \n error: ln(1 + x) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:39:13\n+  --> $DIR/floating_point_arithmetic.rs:36:13\n    |\n LL |     let _ = (1.0 + x.powi(2)).ln();\n    |             ^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.powi(2).ln_1p()`\n \n-error: exponent for bases 2 and e can be computed more efficiently\n-  --> $DIR/floating_point_arithmetic.rs:48:13\n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_arithmetic.rs:45:13\n    |\n LL |     let _ = 2f32.powf(x);\n    |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n-   |\n-   = note: `-D clippy::slow-floating-point-computation` implied by `-D warnings`\n \n-error: exponent for bases 2 and e can be computed more efficiently\n-  --> $DIR/floating_point_arithmetic.rs:49:13\n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_arithmetic.rs:46:13\n    |\n LL |     let _ = std::f32::consts::E.powf(x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n \n-error: square-root of a number can be computer more efficiently\n-  --> $DIR/floating_point_arithmetic.rs:50:13\n+error: square-root of a number can be computed more efficiently and accurately\n+  --> $DIR/floating_point_arithmetic.rs:47:13\n    |\n LL |     let _ = x.powf(1.0 / 2.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n \n-error: cube-root of a number can be computer more efficiently\n-  --> $DIR/floating_point_arithmetic.rs:51:13\n+error: cube-root of a number can be computed more accurately\n+  --> $DIR/floating_point_arithmetic.rs:48:13\n    |\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n \n-error: exponent for bases 2 and e can be computed more efficiently\n-  --> $DIR/floating_point_arithmetic.rs:54:13\n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_arithmetic.rs:51:13\n    |\n LL |     let _ = 2f64.powf(x);\n    |             ^^^^^^^^^^^^ help: consider using: `x.exp2()`\n \n-error: exponent for bases 2 and e can be computed more efficiently\n-  --> $DIR/floating_point_arithmetic.rs:55:13\n+error: exponent for bases 2 and e can be computed more accurately\n+  --> $DIR/floating_point_arithmetic.rs:52:13\n    |\n LL |     let _ = std::f64::consts::E.powf(x);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `x.exp()`\n \n-error: square-root of a number can be computer more efficiently\n-  --> $DIR/floating_point_arithmetic.rs:56:13\n+error: square-root of a number can be computed more efficiently and accurately\n+  --> $DIR/floating_point_arithmetic.rs:53:13\n    |\n LL |     let _ = x.powf(1.0 / 2.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.sqrt()`\n \n-error: cube-root of a number can be computer more efficiently\n-  --> $DIR/floating_point_arithmetic.rs:57:13\n+error: cube-root of a number can be computed more accurately\n+  --> $DIR/floating_point_arithmetic.rs:54:13\n    |\n LL |     let _ = x.powf(1.0 / 3.0);\n    |             ^^^^^^^^^^^^^^^^^ help: consider using: `x.cbrt()`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:62:13\n+  --> $DIR/floating_point_arithmetic.rs:59:13\n    |\n LL |     let _ = x.exp() - 1.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:63:13\n+  --> $DIR/floating_point_arithmetic.rs:60:13\n    |\n LL |     let _ = x.exp() - 1.0 + 2.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:69:13\n+  --> $DIR/floating_point_arithmetic.rs:66:13\n    |\n LL |     let _ = x.exp() - 1.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`\n \n error: (e.pow(x) - 1) can be computed more accurately\n-  --> $DIR/floating_point_arithmetic.rs:70:13\n+  --> $DIR/floating_point_arithmetic.rs:67:13\n    |\n LL |     let _ = x.exp() - 1.0 + 2.0;\n    |             ^^^^^^^^^^^^^ help: consider using: `x.exp_m1()`"}]}