{"sha": "e65385fbfa72995b27ec64aa54f330cf503dfc03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NTM4NWZiZmE3Mjk5NWIyN2VjNjRhYTU0ZjMzMGNmNTAzZGZjMDM=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-01-05T18:11:20Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-01-05T18:43:42Z"}, "message": "Fix broken links to `Drop` that used to point to `Drop::drop` due to the markdown link definition names being case insensitive.", "tree": {"sha": "2a7fd67beb0c4d5f807069d637c73592bc12a790", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a7fd67beb0c4d5f807069d637c73592bc12a790"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e65385fbfa72995b27ec64aa54f330cf503dfc03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e65385fbfa72995b27ec64aa54f330cf503dfc03", "html_url": "https://github.com/rust-lang/rust/commit/e65385fbfa72995b27ec64aa54f330cf503dfc03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e65385fbfa72995b27ec64aa54f330cf503dfc03/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87ac118ba3d0c8268e043fadbd63b51e06904795", "url": "https://api.github.com/repos/rust-lang/rust/commits/87ac118ba3d0c8268e043fadbd63b51e06904795", "html_url": "https://github.com/rust-lang/rust/commit/87ac118ba3d0c8268e043fadbd63b51e06904795"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "b4a3bffff5a2130c9972b96d82e445aa9ae45621", "filename": "library/core/src/pin.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e65385fbfa72995b27ec64aa54f330cf503dfc03/library%2Fcore%2Fsrc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e65385fbfa72995b27ec64aa54f330cf503dfc03/library%2Fcore%2Fsrc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpin.rs?ref=e65385fbfa72995b27ec64aa54f330cf503dfc03", "patch": "@@ -129,7 +129,7 @@\n //!\n //! To make this work, every element has pointers to its predecessor and successor in\n //! the list. Elements can only be added when they are pinned, because moving the elements\n-//! around would invalidate the pointers. Moreover, the [`Drop`] implementation of a linked\n+//! around would invalidate the pointers. Moreover, the [`Drop`][Drop] implementation of a linked\n //! list element will patch the pointers of its predecessor and successor to remove itself\n //! from the list.\n //!\n@@ -165,18 +165,18 @@\n //! # `Drop` implementation\n //!\n //! If your type uses pinning (such as the two examples above), you have to be careful\n-//! when implementing [`Drop`]. The [`drop`] function takes <code>[&mut] self</code>, but this\n+//! when implementing [`Drop`][Drop]. The [`drop`] function takes <code>[&mut] self</code>, but this\n //! is called *even if your type was previously pinned*! It is as if the\n //! compiler automatically called [`Pin::get_unchecked_mut`].\n //!\n //! This can never cause a problem in safe code because implementing a type that\n //! relies on pinning requires unsafe code, but be aware that deciding to make\n //! use of pinning in your type (for example by implementing some operation on\n-//! <code>[Pin]<[&]Self></code> or <code>[Pin]<[&mut] Self></code>) has consequences for your [`Drop`]\n+//! <code>[Pin]<[&]Self></code> or <code>[Pin]<[&mut] Self></code>) has consequences for your [`Drop`][Drop]\n //! implementation as well: if an element of your type could have been pinned,\n-//! you must treat [`Drop`] as implicitly taking <code>[Pin]<[&mut] Self></code>.\n+//! you must treat [`Drop`][Drop] as implicitly taking <code>[Pin]<[&mut] Self></code>.\n //!\n-//! For example, you could implement [`Drop`] as follows:\n+//! For example, you could implement [`Drop`][Drop] as follows:\n //!\n //! ```rust,no_run\n //! # use std::pin::Pin;\n@@ -284,7 +284,7 @@\n //! 2.  The destructor of the struct must not move structural fields out of its argument. This\n //!     is the exact point that was raised in the [previous section][drop-impl]: [`drop`] takes\n //!     <code>[&mut] self</code>, but the struct (and hence its fields) might have been pinned before.\n-//!     You have to guarantee that you do not move a field inside your [`Drop`] implementation.\n+//!     You have to guarantee that you do not move a field inside your [`Drop`][Drop] implementation.\n //!     In particular, as explained previously, this means that your struct must *not*\n //!     be `#[repr(packed)]`.\n //!     See that section for how to write [`drop`] in a way that the compiler can help you\n@@ -294,7 +294,7 @@\n //!     content is not overwritten or deallocated without calling the content's destructors.\n //!     This can be tricky, as witnessed by <code>[VecDeque]\\<T></code>: the destructor of <code>[VecDeque]\\<T></code>\n //!     can fail to call [`drop`] on all elements if one of the destructors panics. This violates\n-//!     the [`Drop`] guarantee, because it can lead to elements being deallocated without\n+//!     the [`Drop`][Drop] guarantee, because it can lead to elements being deallocated without\n //!     their destructor being called. (<code>[VecDeque]\\<T></code> has no pinning projections, so this\n //!     does not cause unsoundness.)\n //! 4.  You must not offer any other operations that could lead to data being moved out of"}]}