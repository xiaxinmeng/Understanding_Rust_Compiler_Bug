{"sha": "c1b97f1440f370e23de861e9d20745cd829abc27", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYjk3ZjE0NDBmMzcwZTIzZGU4NjFlOWQyMDc0NWNkODI5YWJjMjc=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-16T08:12:26Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-10-16T08:12:26Z"}, "message": "Pass thin self ptr to virtual calls.", "tree": {"sha": "884f052708266cf1f381445c13e3b52a7ebd04e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/884f052708266cf1f381445c13e3b52a7ebd04e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1b97f1440f370e23de861e9d20745cd829abc27", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1b97f1440f370e23de861e9d20745cd829abc27", "html_url": "https://github.com/rust-lang/rust/commit/c1b97f1440f370e23de861e9d20745cd829abc27", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1b97f1440f370e23de861e9d20745cd829abc27/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "268bf9c185c59063d0847d4817a82c6c71723971", "url": "https://api.github.com/repos/rust-lang/rust/commits/268bf9c185c59063d0847d4817a82c6c71723971", "html_url": "https://github.com/rust-lang/rust/commit/268bf9c185c59063d0847d4817a82c6c71723971"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "49cef471dab15ea1a8bbdf9a88676368d8d73dd3", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1b97f1440f370e23de861e9d20745cd829abc27/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b97f1440f370e23de861e9d20745cd829abc27/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=c1b97f1440f370e23de861e9d20745cd829abc27", "patch": "@@ -352,7 +352,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     }\n                 }\n                 ty::TyTrait(..) => {\n-                    let vtable = value.expect_vtable(&self.memory)?;\n+                    let (_, vtable) = value.expect_ptr_vtable_pair(&self.memory)?;\n                     // the second entry in the vtable is the dynamic size of the object.\n                     let size = self.memory.read_usize(vtable.offset(pointer_size as isize))?;\n                     let align = self.memory.read_usize(vtable.offset(pointer_size as isize * 2))?;"}, {"sha": "1555f22efb23ceda359fd4872484f1ecee58f671", "filename": "src/interpreter/terminator/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1b97f1440f370e23de861e9d20745cd829abc27/src%2Finterpreter%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b97f1440f370e23de861e9d20745cd829abc27/src%2Finterpreter%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fmod.rs?ref=c1b97f1440f370e23de861e9d20745cd829abc27", "patch": "@@ -452,7 +452,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             traits::VtableObject(ref data) => {\n                 let idx = self.tcx.get_vtable_index_of_object_method(data, def_id);\n                 if let Some(&mut(ref mut first_arg, ref mut first_ty)) = args.get_mut(0) {\n-                    let vtable = first_arg.expect_vtable(&self.memory)?;\n+                    let (self_ptr, vtable) = first_arg.expect_ptr_vtable_pair(&self.memory)?;\n+                    *first_arg = Value::ByVal(PrimVal::Ptr(self_ptr));\n                     let idx = idx + 3;\n                     let offset = idx * self.memory.pointer_size();\n                     let fn_ptr = self.memory.read_ptr(vtable.offset(offset as isize))?;"}, {"sha": "b89210c065d3840ada53abfed5cf6b776ce46bc6", "filename": "src/interpreter/value.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c1b97f1440f370e23de861e9d20745cd829abc27/src%2Finterpreter%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1b97f1440f370e23de861e9d20745cd829abc27/src%2Finterpreter%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fvalue.rs?ref=c1b97f1440f370e23de861e9d20745cd829abc27", "patch": "@@ -29,12 +29,19 @@ impl<'a, 'tcx: 'a> Value {\n         }\n     }\n \n-    pub(super) fn expect_vtable(&self, mem: &Memory<'a, 'tcx>) -> EvalResult<'tcx, Pointer> {\n+    pub(super) fn expect_ptr_vtable_pair(\n+        &self,\n+        mem: &Memory<'a, 'tcx>\n+    ) -> EvalResult<'tcx, (Pointer, Pointer)> {\n         use self::Value::*;\n         match *self {\n-            ByRef(ptr) => mem.read_ptr(ptr.offset(mem.pointer_size() as isize)),\n-            ByValPair(_, PrimVal::Ptr(vtable)) => Ok(vtable),\n-            _ => unimplemented!(),\n+            ByRef(ptr) => {\n+                let ptr = mem.read_ptr(ptr)?;\n+                let vtable = mem.read_ptr(ptr.offset(mem.pointer_size() as isize))?;\n+                Ok((ptr, vtable))\n+            }\n+            ByValPair(PrimVal::Ptr(ptr), PrimVal::Ptr(vtable)) => Ok((ptr, vtable)),\n+            _ => bug!(\"expected ptr and vtable, got {:?}\", self),\n         }\n     }\n "}]}