{"sha": "0ee96de4ee21643546908065fbf3bc7a3f436a3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZTk2ZGU0ZWUyMTY0MzU0NjkwODA2NWZiZjNiYzdhM2Y0MzZhM2Y=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T00:27:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-06T01:05:20Z"}, "message": "rustc: Lower case error messages", "tree": {"sha": "c59e98ddc8504c23aa2eea3b11801475e9186cb6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c59e98ddc8504c23aa2eea3b11801475e9186cb6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ee96de4ee21643546908065fbf3bc7a3f436a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee96de4ee21643546908065fbf3bc7a3f436a3f", "html_url": "https://github.com/rust-lang/rust/commit/0ee96de4ee21643546908065fbf3bc7a3f436a3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ee96de4ee21643546908065fbf3bc7a3f436a3f/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13a07ce1d4df500d18ce393a7b46775174560d01", "url": "https://api.github.com/repos/rust-lang/rust/commits/13a07ce1d4df500d18ce393a7b46775174560d01", "html_url": "https://github.com/rust-lang/rust/commit/13a07ce1d4df500d18ce393a7b46775174560d01"}], "stats": {"total": 215, "additions": 107, "deletions": 108}, "files": [{"sha": "4e54a57a1f75db3edee75d70a706383be56eaa75", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -439,7 +439,7 @@ fn build_link_meta(sess: session, c: ast::crate, output: str,\n                     {\n                         let os = str::split_char(fs::basename(output), '.');\n                         if (vec::len(os) < 2u) {\n-                            sess.fatal(#fmt(\"Output file name %s doesn't\\\n+                            sess.fatal(#fmt(\"output file name %s doesn't\\\n                               appear to have an extension\", output));\n                         }\n                         vec::pop(os);"}, {"sha": "acc2e201e97c12e9876dfdca916791bd7a641d63", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -309,12 +309,12 @@ fn build_target_config(sopts: @session::options,\n                        demitter: diagnostic::emitter) -> @session::config {\n     let os = alt get_os(sopts.target_triple) {\n       some(os) { os }\n-      none { early_error(demitter, \"Unknown operating system!\") }\n+      none { early_error(demitter, \"unknown operating system\") }\n     };\n     let arch = alt get_arch(sopts.target_triple) {\n       some(arch) { arch }\n       none { early_error(demitter,\n-                          \"Unknown architecture! \" + sopts.target_triple) }\n+                          \"unknown architecture: \" + sopts.target_triple) }\n     };\n     let (int_type, uint_type, float_type) = alt arch {\n       session::arch_x86 {(ast::ty_i32, ast::ty_u32, ast::ty_f64)}\n@@ -607,7 +607,7 @@ fn build_output_filenames(ifile: str,\n         }\n \n         if odir != none {\n-            sess.warn(\"Ignoring --out-dir flag due to -o flag.\");\n+            sess.warn(\"ignoring --out-dir flag due to -o flag.\");\n         }\n       }\n     }"}, {"sha": "a6351f824b4f9131e6d135e2fc836cf161d42354", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -93,9 +93,9 @@ fn run_compiler(args: [str], demitter: diagnostic::emitter) {\n         ret;\n     }\n     let ifile = alt vec::len(match.free) {\n-      0u { early_error(demitter, \"No input filename given.\") }\n+      0u { early_error(demitter, \"o input filename given\") }\n       1u { match.free[0] }\n-      _ { early_error(demitter, \"Multiple input filenames provided.\") }\n+      _ { early_error(demitter, \"multiple input filenames provided\") }\n     };\n \n     let sopts = build_session_options(match, demitter);"}, {"sha": "87e2138a2476ac420074c3e9d23bf29c78cbdf1d", "filename": "src/rustc/metadata/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmetadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmetadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fastencode.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -823,7 +823,7 @@ fn decode_side_tables(xcx: extended_decode_ctxt,\n                                          val_dsr.read_dict_res(xcx));\n             } else {\n                 xcx.dcx.tcx.sess.bug(\n-                    #fmt[\"Unknown tag found in side tables: %x\", tag]);\n+                    #fmt[\"unknown tag found in side tables: %x\", tag]);\n             }\n         }\n "}, {"sha": "cfa16a38b4faa92a68527d04462166f17325da65", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -96,7 +96,7 @@ fn list_file_metadata(sess: session::session, path: str, out: io::writer) {\n     alt get_metadata_section(sess, path) {\n       option::some(bytes) { decoder::list_crate_metadata(bytes, out); }\n       option::none {\n-        out.write_str(\"Could not find metadata in \" + path + \".\\n\");\n+        out.write_str(\"could not find metadata in \" + path + \".\\n\");\n       }\n     }\n }"}, {"sha": "3ec56c620776befd46695cd21b6f74190c296e93", "filename": "src/rustc/middle/capture.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcapture.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -40,15 +40,15 @@ fn check_capture_clause(tcx: ty::ctxt,\n         if !vec::any(*freevars, {|fv| fv.def == cap_def}) {\n             tcx.sess.span_warn(\n                 cap_item.span,\n-                #fmt(\"Captured variable '%s' not used in closure\",\n+                #fmt(\"captured variable '%s' not used in closure\",\n                      cap_item.name));\n         }\n \n         let cap_def_id = ast_util::def_id_of_def(cap_def).node;\n         if !seen_defs.insert(cap_def_id, ()) {\n             tcx.sess.span_err(\n                 cap_item.span,\n-                #fmt(\"Variable '%s' captured more than once\",\n+                #fmt(\"variable '%s' captured more than once\",\n                      cap_item.name));\n         }\n     };\n@@ -58,7 +58,7 @@ fn check_capture_clause(tcx: ty::ctxt,\n           ast::def_upvar(_, _, _) {\n             tcx.sess.span_err(\n                 cap_item.span,\n-                #fmt(\"Upvars (like '%s') cannot be moved into a closure\",\n+                #fmt(\"upvars (like '%s') cannot be moved into a closure\",\n                      cap_item.name));\n           }\n           _ {}\n@@ -70,7 +70,7 @@ fn check_capture_clause(tcx: ty::ctxt,\n             let cap_item0 = vec::head(v);\n             tcx.sess.span_err(\n                 cap_item0.span,\n-                \"Cannot capture values explicitly with a block closure\");\n+                \"cannot capture values explicitly with a block closure\");\n         }\n     };\n "}, {"sha": "e7999f04caddbf65bf89ee7b3be43663d7cf4494", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -150,7 +150,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n             let t = ty::expr_ty(cx.tcx, ex);\n             let ty_fields = alt ty::get(t).struct {\n               ty::ty_rec(f) { f }\n-              _ { cx.tcx.sess.span_bug(ex.span, \"Bad expr type in record\"); }\n+              _ { cx.tcx.sess.span_bug(ex.span, \"bad expr type in record\"); }\n             };\n             for tf in ty_fields {\n                 if !vec::any(fields, {|f| f.node.ident == tf.ident}) &&"}, {"sha": "bf51f7d3764d61febdaf20a90ebcbef4946af134", "filename": "src/rustc/middle/mutbl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Fmutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Fmutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fmutbl.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -98,7 +98,7 @@ fn expr_root(tcx: ty::ctxt, ex: @expr, autoderef: bool) ->\n                     is_mutbl = mt.mutbl == m_mutbl;\n                     ptr = true;\n                   }\n-                  _ { tcx.sess.span_bug(base.span, \"Ill-typed base \\\n+                  _ { tcx.sess.span_bug(base.span, \"ill-typed base \\\n                         expression in deref\"); }\n                 }\n                 ds += [@{mutbl: is_mutbl, kind: unbox(ptr && is_mutbl),"}, {"sha": "28d9414beb44ba6b3f406a114ca694dc18b94463", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -329,7 +329,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n                         e.mod_map.get(ast::crate_node_id).glob_imports\n                             += [glob];\n                       }\n-                      _ { e.sess.span_bug(vi.span, \"Unexpected scope in a \\\n+                      _ { e.sess.span_bug(vi.span, \"unexpected scope in a \\\n                                                     glob import\"); }\n                     }\n                   }\n@@ -376,7 +376,7 @@ fn resolve_imports(e: env) {\n             resolve_import(e, local_def(node_id), name, *path, span, scopes);\n           }\n           resolved(_, _, _, _, _, _) | is_glob(_, _, _) { }\n-          _ { e.sess.bug(\"Shouldn't see a resolving in resolve_imports\"); }\n+          _ { e.sess.bug(\"shouldn't see a resolving in resolve_imports\"); }\n         }\n     };\n     e.used_imports.track = false;\n@@ -658,7 +658,7 @@ fn visit_local_with_scope(e: @env, loc: @local, sc:scopes, v:vt<scopes>) {\n                   // Declaration shadows a enum that's in scope.\n                   // That's an error.\n                   e.sess.span_err(loc.span,\n-                    #fmt(\"Declaration of %s shadows a enum that's in scope\",\n+                    #fmt(\"declaration of `%s` shadows a enum that's in scope\",\n                          path_to_ident(an_ident)));\n                   }\n               _ {}\n@@ -1324,7 +1324,7 @@ fn lookup_in_block(e: env, name: ident, sp: span, b: ast::blk_, pos: uint,\n                 }\n             }\n           }\n-          _ { e.sess.span_bug(vi.span, \"Unexpected view_item in block\"); }\n+          _ { e.sess.span_bug(vi.span, \"unexpected view_item in block\"); }\n         }\n     }\n     ret none;"}, {"sha": "cebc29543322aab263000b17a2c8c2cbc8302a53", "filename": "src/rustc/middle/trans/alt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Falt.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -428,7 +428,7 @@ fn compile_submatch(bcx: block, m: match, vals: [ValueRef], f: mk_fail,\n         let tup_ty = node_id_type(bcx, pat_id);\n         let n_tup_elts = alt ty::get(tup_ty).struct {\n           ty::ty_tup(elts) { elts.len() }\n-          _ { ccx.sess.bug(\"Non-tuple type in tuple pattern\"); }\n+          _ { ccx.sess.bug(\"non-tuple type in tuple pattern\"); }\n         };\n         let tup_vals = [], i = 0u;\n         while i < n_tup_elts {\n@@ -588,7 +588,7 @@ fn make_phi_bindings(bcx: block, map: [exit_node],\n             if bcx.ccx().maps.copy_map.contains_key(node_id) {\n                 let local = alt bcx.fcx.lllocals.find(node_id) {\n                   some(local_mem(x)) { x }\n-                  _ { bcx.tcx().sess.bug(\"Someone \\\n+                  _ { bcx.tcx().sess.bug(\"someone \\\n                         forgot to document an invariant in \\\n                         make_phi_bindings\"); }\n                 };"}, {"sha": "9baae720f47c4f09cd74de2ae41cca785ee3d53b", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1957,7 +1957,7 @@ fn trans_if(cx: block, cond: @ast::expr, thn: ast::blk,\n             trans_block(else_cx, blk, else_dest)\n           }\n           // would be nice to have a constraint on ifs\n-          _ { cx.tcx().sess.bug(\"Strange alternative in if\"); }\n+          _ { cx.tcx().sess.bug(\"strange alternative in if\"); }\n         }\n       }\n       _ { else_cx }\n@@ -2119,7 +2119,7 @@ fn monomorphic_fn(ccx: crate_ctxt, fn_id: ast::def_id, substs: [ty::t],\n       ast_map::node_method(m, _, pt) { (pt, m.ident) }\n       // We can't monomorphize native functions\n       ast_map::node_native_item(_, _) { ret none; }\n-      _ { fail \"Unexpected node type\"; }\n+      _ { fail \"unexpected node type\"; }\n     };\n     let pt = *pt + [path_name(ccx.names(name))];\n     let s = mangle_exported_name(ccx, pt, mono_ty);\n@@ -2614,10 +2614,10 @@ fn trans_cast(cx: block, e: @ast::expr, id: ast::node_id,\n               integral {int_cast(e_res.bcx, ll_t_out,\n                                   val_ty(lldiscrim_a), lldiscrim_a, true)}\n               float {SIToFP(e_res.bcx, lldiscrim_a, ll_t_out)}\n-              _ { ccx.sess.bug(\"Translating unsupported cast.\") }\n+              _ { ccx.sess.bug(\"translating unsupported cast.\") }\n             }\n           }\n-          _ { ccx.sess.bug(\"Translating unsupported cast.\") }\n+          _ { ccx.sess.bug(\"translating unsupported cast.\") }\n         };\n     ret store_in_dest(e_res.bcx, newval, dest);\n }\n@@ -3139,7 +3139,7 @@ fn trans_expr(bcx: block, e: @ast::expr, dest: dest) -> block {\n                 bcx, proto, decl, body, e.span, e.id, cap_clause, dest);\n           }\n           _ {\n-            fail \"Type of fn block is not a function!\";\n+            fail \"type of fn block is not a function!\";\n           }\n         }\n       }\n@@ -3993,7 +3993,7 @@ fn copy_args_to_allocas(fcx: fn_ctxt, bcx: block, args: [ast::arg],\n     let tcx = bcx.tcx();\n     let arg_n: uint = 0u, bcx = bcx;\n     let epic_fail = fn@() -> ! {\n-        tcx.sess.bug(\"Someone forgot\\\n+        tcx.sess.bug(\"someone forgot\\\n                 to document an invariant in copy_args_to_allocas!\");\n     };\n     for arg in arg_tys {\n@@ -4306,7 +4306,7 @@ fn trans_const(cx: crate_ctxt, e: @ast::expr, id: ast::node_id) {\n         llvm::LLVMSetInitializer(g, v);\n         llvm::LLVMSetGlobalConstant(g, True);\n       }\n-      _ { cx.sess.span_fatal(e.span, \"Unbound const in trans_const\"); }\n+      _ { cx.sess.span_bug(e.span, \"unbound const in trans_const\"); }\n     }\n }\n \n@@ -4319,7 +4319,7 @@ fn trans_item(ccx: crate_ctxt, item: ast::item) {\n         let llfndecl = alt ccx.item_ids.find(item.id) {\n           some(llfndecl) { llfndecl }\n           _ {\n-            ccx.sess.span_fatal(item.span,\n+            ccx.sess.span_bug(item.span,\n                                 \"unbound function item in trans_item\");\n           }\n         };"}, {"sha": "f11dbae04b8049b8a0d38a313f5ee6d3c2372443", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -325,7 +325,7 @@ fn store_environment(\n             bcx = base::copy_val(bcx, INIT, bound_data, val, ty);\n           }\n           env_copy(_, _, temporary) {\n-            fail \"Cannot capture temporary upvar\";\n+            fail \"cannot capture temporary upvar\";\n           }\n           env_move(val, ty, kind) {\n             let src = {bcx:bcx, val:val, kind:kind};\n@@ -339,7 +339,7 @@ fn store_environment(\n             Store(bcx, addr, bound_data);\n           }\n           env_ref(_, _, temporary) {\n-            fail \"Cannot capture temporary upvar\";\n+            fail \"cannot capture temporary upvar\";\n           }\n         }\n     }"}, {"sha": "e4e1859e87d4cff2696ab4d9a7a44854746336e9", "filename": "src/rustc/middle/trans/impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fimpl.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -55,7 +55,7 @@ fn trans_impl(ccx: crate_ctxt, path: path, name: ast::ident,\n                      m_bounds, none, m.id, none);\n           }\n           _ {\n-            ccx.sess.bug(\"Unbound id in trans_impl\");\n+            ccx.sess.bug(\"unbound id in trans_impl\");\n           }\n         }\n     }\n@@ -347,7 +347,7 @@ fn trans_impl_vtable(ccx: crate_ctxt, pt: path,\n                                extra_tps, target)\n           }\n           _ {\n-            ccx.sess.span_bug(it.span, \"No matching method \\\n+            ccx.sess.span_bug(it.span, \"no matching method \\\n                in trans_impl_vtable\");\n           }\n         }\n@@ -459,7 +459,7 @@ fn dict_id(tcx: ty::ctxt, origin: typeck::dict_origin) -> dict_id {\n         @{def: did, params: []}\n       }\n       _ {\n-        tcx.sess.bug(\"Unexpected dict_param in dict_id\");\n+        tcx.sess.bug(\"unexpected dict_param in dict_id\");\n       }\n     }\n }\n@@ -523,7 +523,7 @@ fn get_dict_ptrs(bcx: block, origin: typeck::dict_origin)\n         {bcx: bcx, ptrs: [get_vtable(ccx, did)]}\n       }\n       _ {\n-        bcx.tcx().sess.bug(\"Unexpected dict_param in get_dict_ptrs\");\n+        bcx.tcx().sess.bug(\"unexpected dict_param in get_dict_ptrs\");\n       }\n     }\n }"}, {"sha": "89fce0ddb705e5f04ecde15e1e06dcd62e563927", "filename": "src/rustc/middle/tstate/auxiliary.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -596,7 +596,7 @@ fn expr_to_constr_arg(tcx: ty::ctxt, e: @expr) -> @constr_arg_use {\n       expr_lit(l) { ret @respan(e.span, carg_lit(l)); }\n       _ {\n         tcx.sess.span_fatal(e.span,\n-                            \"Arguments to constrained functions must be \" +\n+                            \"arguments to constrained functions must be \" +\n                                 \"literals or local variables\");\n       }\n     }\n@@ -619,16 +619,13 @@ fn expr_to_constr(tcx: ty::ctxt, e: @expr) -> sp_constr {\n                              exprs_to_constr_args(tcx, args)));\n           }\n           _ {\n-            tcx.sess.span_fatal(operator.span,\n-                                \"Internal error: \" +\n-                                    \" ill-formed operator \\\n-                                            in predicate\");\n+            tcx.sess.span_bug(operator.span,\n+                              \"ill-formed operator in predicate\");\n           }\n         }\n       }\n       _ {\n-        tcx.sess.span_fatal(e.span,\n-                            \"Internal error: \" + \" ill-formed predicate\");\n+        tcx.sess.span_bug(e.span, \"ill-formed predicate\");\n       }\n     }\n }\n@@ -656,7 +653,7 @@ fn substitute_arg(cx: ty::ctxt, actuals: [@expr], a: @constr_arg) ->\n         if i < num_actuals {\n             ret expr_to_constr_arg(cx, actuals[i]);\n         } else {\n-            cx.sess.span_fatal(a.span, \"Constraint argument out of bounds\");\n+            cx.sess.span_fatal(a.span, \"constraint argument out of bounds\");\n         }\n       }\n       carg_base { ret @respan(a.span, carg_base); }\n@@ -1029,7 +1026,7 @@ fn args_to_constr_args(tcx: ty::ctxt, args: [arg],\n                                          node: args[i].id})\n                          } else {\n                              tcx.sess.span_bug(a.span,\n-                                               \"Index out of bounds in \\\n+                                               \"index out of bounds in \\\n                   constraint arg\");\n                          }\n                        }"}, {"sha": "357d43edc8e871c2b86f1f6b61097a01ab6ee318", "filename": "src/rustc/middle/tstate/ck.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fck.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -51,12 +51,12 @@ fn check_states_expr(e: @expr, fcx: fn_ctxt, v: visit::vt<fn_ctxt>) {\n         let s = \"\";\n         let diff = first_difference_string(fcx, prec, pres);\n         s +=\n-            \"Unsatisfied precondition constraint (for example, \" + diff +\n+            \"unsatisfied precondition constraint (for example, \" + diff +\n                 \") for expression:\\n\";\n         s += syntax::print::pprust::expr_to_str(e);\n-        s += \"\\nPrecondition:\\n\";\n+        s += \"\\nprecondition:\\n\";\n         s += tritv_to_str(fcx, prec);\n-        s += \"\\nPrestate:\\n\";\n+        s += \"\\nprestate:\\n\";\n         s += tritv_to_str(fcx, pres);\n         fcx.ccx.tcx.sess.span_fatal(e.span, s);\n     }\n@@ -81,12 +81,12 @@ fn check_states_stmt(s: @stmt, fcx: fn_ctxt, v: visit::vt<fn_ctxt>) {\n         let ss = \"\";\n         let diff = first_difference_string(fcx, prec, pres);\n         ss +=\n-            \"Unsatisfied precondition constraint (for example, \" + diff +\n+            \"unsatisfied precondition constraint (for example, \" + diff +\n                 \") for statement:\\n\";\n         ss += syntax::print::pprust::stmt_to_str(*s);\n-        ss += \"\\nPrecondition:\\n\";\n+        ss += \"\\nprecondition:\\n\";\n         ss += tritv_to_str(fcx, prec);\n-        ss += \"\\nPrestate: \\n\";\n+        ss += \"\\nprestate: \\n\";\n         ss += tritv_to_str(fcx, pres);\n         fcx.ccx.tcx.sess.span_fatal(s.span, ss);\n     }\n@@ -115,7 +115,7 @@ fn check_states_against_conditions(fcx: fn_ctxt,\n            fcx.ccx.tcx, id))) &&\n        f_decl.cf == return_val {\n         fcx.ccx.tcx.sess.span_err(f_body.span,\n-                                  \"In function \" + fcx.name +\n+                                  \"in function \" + fcx.name +\n                                       \", not all control paths \\\n                                         return a value\");\n         fcx.ccx.tcx.sess.span_fatal(f_decl.output.span,\n@@ -129,7 +129,7 @@ fn check_states_against_conditions(fcx: fn_ctxt,\n \n         if !promises(fcx, post, fcx.enclosing.i_diverge) {\n             fcx.ccx.tcx.sess.span_fatal(f_body.span,\n-                                        \"In non-returning function \" +\n+                                        \"in non-returning function \" +\n                                         fcx.name +\n                                         \", some control paths may \\\n                                          return to the caller\");"}, {"sha": "adb8624804786e4f6b42fedf0b2f5cccf135c4e5", "filename": "src/rustc/middle/tstate/states.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fstates.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -17,7 +17,7 @@ fn forbid_upvar(fcx: fn_ctxt, rhs_id: node_id, sp: span, t: oper_type) {\n         alt local_node_id_to_def(fcx, rhs_id) {\n           some(def_upvar(_, _, _)) {\n             fcx.ccx.tcx.sess.span_err(sp,\n-                                      \"Tried to deinitialize a variable \\\n+                                      \"tried to deinitialize a variable \\\n               declared in a different scope\");\n           }\n           _ { }"}, {"sha": "f841b9e0ed3463ef0f503c6712419860bda705f6", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -608,7 +608,7 @@ fn fold_ty(cx: ctxt, fld: fold_mode, ty_0: t) -> t {\n           ty = mk_constr(cx, fold_ty(cx, fld, subty), cs);\n       }\n       _ {\n-          cx.sess.fatal(\"Unsupported sort of type in fold_ty\");\n+          cx.sess.bug(\"unsupported sort of type in fold_ty\");\n       }\n     }\n     alt tb.o_def_id {\n@@ -868,7 +868,7 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n           param_bounds_to_kind(cx.ty_param_bounds.get(did.node))\n       }\n       ty_constr(t, _) { type_kind(cx, t) }\n-      _ { cx.sess.bug(\"Bad type in type_kind\"); }\n+      _ { cx.sess.bug(\"bad type in type_kind\"); }\n     };\n \n     cx.kind_cache.insert(ty, result);\n@@ -1408,11 +1408,11 @@ fn occurs_check_fails(tcx: ctxt, sp: option<span>, vid: int, rt: t) ->\n             // assertion later on that the type doesn't contain\n             // variables, so in this case we have to be sure to die.\n             tcx.sess.span_fatal\n-                (s, \"Type inference failed because I \\\n+                (s, \"type inference failed because I \\\n                      could not find a type\\n that's both of the form \"\n                  + ty_to_str(tcx, mk_var(tcx, vid)) +\n                  \" and of the form \" + ty_to_str(tcx, rt) +\n-                 \". Such a type would have to be infinitely large.\");\n+                 \" - such a type would have to be infinitely large.\");\n           }\n           _ { ret true; }\n         }\n@@ -1533,7 +1533,7 @@ mod unify {\n              variance: variance) -> union_result {\n         let vb = alt cx.st {\n             in_bindings(vb) { vb }\n-            _ { cx.tcx.sess.bug(\"Someone forgot to document an invariant \\\n+            _ { cx.tcx.sess.bug(\"someone forgot to document an invariant \\\n                          in union\"); }\n         };\n         ufind::grow(vb.sets, math::max(set_a, set_b) + 1u);\n@@ -2113,12 +2113,12 @@ fn type_err_to_str(err: type_err) -> str {\n                 mode_to_str(a_mode);\n       }\n       terr_constr_len(e_len, a_len) {\n-        ret \"Expected a type with \" + uint::str(e_len) +\n+        ret \"expected a type with \" + uint::str(e_len) +\n                 \" constraints, but found one with \" + uint::str(a_len) +\n                 \" constraints\";\n       }\n       terr_constr_mismatch(e_constr, a_constr) {\n-        ret \"Expected a type with constraint \" + ty_constr_to_str(e_constr) +\n+        ret \"expected a type with constraint \" + ty_constr_to_str(e_constr) +\n                 \" but found one with constraint \" +\n                 ty_constr_to_str(a_constr);\n       }\n@@ -2438,7 +2438,7 @@ fn ast_constr_to_constr<T>(tcx: ctxt, c: @ast::constr_general<T>) ->\n       }\n       _ {\n         tcx.sess.span_fatal(c.span,\n-                            \"Predicate \" + path_to_str(c.node.path) +\n+                            \"predicate \" + path_to_str(c.node.path) +\n                             \" is unbound or bound to a non-function or an \\\n             impure function\");\n       }"}, {"sha": "3787328b5d96558ab55073f1802fabbc8d28b775", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -262,7 +262,7 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n                     ty_of_native_item(tcx, mode, native_item)\n                   }\n                   _ {\n-                    tcx.sess.bug(\"Unexpected sort of item in ast_ty_to_ty\");\n+                    tcx.sess.bug(\"unexpected sort of item in ast_ty_to_ty\");\n                   }\n                 }\n             }\n@@ -293,7 +293,7 @@ fn ast_ty_to_ty(tcx: ty::ctxt, mode: mode, &&ast_ty: @ast::ty) -> ty::t {\n         // The typedef is type-parametric. Do the type substitution.\n         let param_bindings: [ty::t] = [];\n         if vec::len(args) != vec::len(*ty_param_bounds_and_ty.bounds) {\n-            tcx.sess.span_fatal(sp, \"Wrong number of type arguments for a \\\n+            tcx.sess.span_fatal(sp, \"wrong number of type arguments for a \\\n                                      polymorphic type\");\n         }\n         for ast_ty: @ast::ty in args {\n@@ -1611,7 +1611,7 @@ fn require_impure(sess: session, f_purity: ast::purity, sp: span) {\n       ast::unsafe_fn { ret; }\n       ast::impure_fn | ast::crust_fn { ret; }\n       ast::pure_fn {\n-        sess.span_err(sp, \"Found impure expression in pure function decl\");\n+        sess.span_err(sp, \"found impure expression in pure function decl\");\n       }\n     }\n }\n@@ -1847,7 +1847,7 @@ fn lookup_field_ty(cx: ty::ctxt, items:[@ast::class_item],\n           ast::instance_var(declname, t, _, _) if declname == fieldname {\n              alt item.node.privacy {\n                 ast::priv {\n-                    cx.sess.span_fatal(sp, \"Accessed private field outside \\\n+                    cx.sess.span_fatal(sp, \"accessed private field outside \\\n                        its enclosing class\");\n                 }\n                 ast::pub {\n@@ -1858,7 +1858,7 @@ fn lookup_field_ty(cx: ty::ctxt, items:[@ast::class_item],\n           _ { /* do nothing */ }\n         }\n     }\n-    cx.sess.span_fatal(sp, #fmt(\"Unbound field %s\", fieldname));\n+    cx.sess.span_fatal(sp, #fmt(\"unbound field %s\", fieldname));\n }\n \n fn check_expr_fn_with_unifier(fcx: @fn_ctxt,\n@@ -2843,20 +2843,20 @@ fn check_pred_expr(fcx: @fn_ctxt, e: @ast::expr) -> bool {\n               }\n               _ {\n                 fcx.ccx.tcx.sess.span_err(operator.span,\n-                                            \"Impure function as operator \\\n+                                            \"impure function as operator \\\n                                              in constraint\");\n               }\n             }\n             for operand: @ast::expr in operands {\n                 if !ast_util::is_constraint_arg(operand) {\n                     let s =\n-                        \"Constraint args must be slot variables or literals\";\n+                        \"constraint args must be slot variables or literals\";\n                     fcx.ccx.tcx.sess.span_err(e.span, s);\n                 }\n             }\n           }\n           _ {\n-            let s = \"In a constraint, expected the \\\n+            let s = \"in a constraint, expected the \\\n                      constraint name to be an explicit name\";\n             fcx.ccx.tcx.sess.span_err(e.span, s);\n           }"}, {"sha": "216c9bb9df957c04383665b7923ade6d80978119", "filename": "src/rustc/syntax/parse/parser.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fparse%2Fparser.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -312,7 +312,7 @@ fn parse_ty_field(p: parser) -> ast::ty_field {\n fn ident_index(p: parser, args: [ast::arg], i: ast::ident) -> uint {\n     let j = 0u;\n     for a: ast::arg in args { if a.ident == i { ret j; } j += 1u; }\n-    p.fatal(\"Unbound variable \" + i + \" in constraint arg\");\n+    p.fatal(\"unbound variable `\" + i + \"` in constraint arg\");\n }\n \n fn parse_type_constr_arg(p: parser) -> @ast::ty_constr_arg {\n@@ -918,7 +918,7 @@ fn parse_bottom_expr(p: parser) -> pexpr {\n         if /*check*/ast_util::is_call_expr(e) {\n             hi = e.span.hi;\n             ex = ast::expr_be(e);\n-        } else { p.fatal(\"Non-call expression in tail call\"); }\n+        } else { p.fatal(\"non-call expression in tail call\"); }\n     } else if eat_word(p, \"copy\") {\n         let e = parse_expr(p);\n         ex = ast::expr_copy(e);\n@@ -2008,7 +2008,9 @@ fn parse_item_class(p: parser, attrs: [ast::attribute]) -> @ast::item {\n        /*\n          Is it strange for the parser to check this?\n        */\n-       none { /* parse error */ fail \"Class with no ctor\"; }\n+       none {\n+         p.fatal(\"class with no ctor\");\n+       }\n     }\n }\n "}, {"sha": "c053180bf438cac9fab851d2eb7de92c3b1aa689", "filename": "src/test/compile-fail/and-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fand-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fand-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fand-init.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: Unsatisfied precondition constraint (for example, init(i\n+// error-pattern:unsatisfied precondition constraint (for example, init(i\n \n fn main() {\n     let i: int;"}, {"sha": "f8434dfd9f9d0227ed808630dffa9bb9bd19aa78", "filename": "src/test/compile-fail/block-deinitializes-upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fblock-deinitializes-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fblock-deinitializes-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-deinitializes-upvar.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Tried to deinitialize a variable declared in a different\n+// error-pattern:tried to deinitialize a variable declared in a different\n fn force(f: fn()) { f(); }\n fn main() {\n     let x = @{x: 17, y: 2};"}, {"sha": "99b8346166a16f3b65716d5bf4dcaa0ab375cb07", "filename": "src/test/compile-fail/block-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fblock-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fblock-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-uninit.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: Unsatisfied precondition constraint\n+// error-pattern:unsatisfied precondition constraint\n \n fn force(f: fn()) { f(); }\n fn main() { let x: int; force(fn&() { log(error, x); }); }"}, {"sha": "294b51337252f12b62ec727922bee7fbda47becb", "filename": "src/test/compile-fail/break-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-uninit.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Unsatisfied precondition\n+// error-pattern:unsatisfied precondition\n \n fn foo() -> int {\n     let x: int;"}, {"sha": "8c882fa0c847b35ea376c6c7d997f67d5cd9e826", "filename": "src/test/compile-fail/break-uninit2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbreak-uninit2.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Unsatisfied precondition\n+// error-pattern:unsatisfied precondition\n \n fn foo() -> int {\n     let x: int;"}, {"sha": "033f4e6230a38c1e63b8a881791c7f51e16918c5", "filename": "src/test/compile-fail/cap-clause-both-copy-and-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fcap-clause-both-copy-and-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fcap-clause-both-copy-and-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-both-copy-and-move.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Variable 'x' captured more than once\n+// error-pattern:variable 'x' captured more than once\n fn main() {\n     let x = 5;\n     let y = fn~[move x; copy x]() -> int { x };"}, {"sha": "8c22a4381eaf563a11281a6685c26028c2e0351b", "filename": "src/test/compile-fail/cap-clause-double-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-copy.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Variable 'x' captured more than once\n+// error-pattern:variable 'x' captured more than once\n fn main() {\n     let x = 5;\n     let y = fn~[copy x, x]() -> int { x };"}, {"sha": "bd00726c97b37542edaa55ede34fdc5100c2aa48", "filename": "src/test/compile-fail/cap-clause-double-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-double-move.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Variable 'x' captured more than once\n+// error-pattern:variable 'x' captured more than once\n fn main() {\n     let x = 5;\n     let y = fn~[move x, x]() -> int { x };"}, {"sha": "bb0ddcd3cf7ab2c4ce42f27ac4463b2d258bd253", "filename": "src/test/compile-fail/cap-clause-move-upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fcap-clause-move-upvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fcap-clause-move-upvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcap-clause-move-upvar.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Upvars (like 'x') cannot be moved into a closure\n+// error-pattern:upvars (like 'x') cannot be moved into a closure\n fn main() {\n     let x = 5;\n     let _y = fn~[move x]() -> int {"}, {"sha": "5464738294f284140754844d2debb1f87123afef", "filename": "src/test/compile-fail/do-while-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fdo-while-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fdo-while-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo-while-constraints.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: Unsatisfied precondition constraint (for example, init(y\n+// error-pattern:unsatisfied precondition constraint (for example, init(y\n fn main() {\n \n     let y: int = 42;"}, {"sha": "027574c024c57512078150604618a5a2c5c8d826", "filename": "src/test/compile-fail/do-while-pred-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdo-while-pred-constraints.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: Unsatisfied precondition constraint (for example, even(y\n+// error-pattern:unsatisfied precondition constraint (for example, even(y\n \n fn print_even(y: int) : even(y) { log(debug, y); }\n "}, {"sha": "ab3f1dd1087e7db37bf236d0c8f08a7e40a8ca46", "filename": "src/test/compile-fail/fn-expr-type-state.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-expr-type-state.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Unsatisfied precondition\n+// error-pattern:unsatisfied precondition\n \n fn main() {\n     // Typestate should work even in a fn@. we should reject this program."}, {"sha": "75682c8ddf8fd1a337658fbe59083bb002d4c826", "filename": "src/test/compile-fail/fn-expr-typestate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Ffn-expr-typestate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Ffn-expr-typestate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffn-expr-typestate-2.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Unsatisfied precondition\n+// error-pattern:unsatisfied precondition\n \n fn main() {\n     let j = fn@() -> int { let i: int; ret i; }();"}, {"sha": "4545277e18d6921309bc02d15a9a644644354518", "filename": "src/test/compile-fail/if-check-precond-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fif-check-precond-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fif-check-precond-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fif-check-precond-fail.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Unsatisfied precondition constraint\n+// error-pattern:unsatisfied precondition constraint\n pure fn even(x: uint) -> bool {\n     if x < 2u {\n         ret false;"}, {"sha": "b2b0c0d3597d464fd432e3b708ec39674d8363f5", "filename": "src/test/compile-fail/issue-897-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: In non-returning function f, some control paths may return\n+// error-pattern:in non-returning function f, some control paths may return\n fn g() -> ! { fail; }\n fn f() -> ! { ret 42; g(); }\n fn main() { }"}, {"sha": "7a27b0e51fd5d19c1d911a62e3c99bf5daad4de8", "filename": "src/test/compile-fail/issue-897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fissue-897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern: In non-returning function f, some control paths may return\n+// error-pattern:in non-returning function f, some control paths may return\n fn f() -> ! { ret 42; fail; }\n fn main() { }"}, {"sha": "512cd44e2065a59c2678ae595d35eb1297020804", "filename": "src/test/compile-fail/move-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fmove-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fmove-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-arg.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: Unsatisfied precondition constraint\n+// error-pattern:unsatisfied precondition constraint\n fn test(-foo: int) { assert (foo == 10); }\n \n fn main() { let x = 10; test(x); log(debug, x); }"}, {"sha": "7626c8028712302c1846616c1e1d0e778901569a", "filename": "src/test/compile-fail/name-clash-nullary-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary-2.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Declaration of thpppt shadows\n+// error-pattern:declaration of `thpppt` shadows\n enum ack { thpppt, ffff, }\n \n fn main() {"}, {"sha": "87af60ebcaa38fb035582ad11223f1c343e2fa34", "filename": "src/test/compile-fail/name-clash-nullary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Declaration of none shadows\n+// error-pattern:declaration of `none` shadows\n import option::*;\n \n fn main() {"}, {"sha": "ec7f807689248487159c4c680f4f871f48a77aed", "filename": "src/test/compile-fail/no-constraint-prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fno-constraint-prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fno-constraint-prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-constraint-prop.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Unsatisfied precondition constraint (for example, uint::le\n+// error-pattern:unsatisfied precondition constraint (for example, uint::le\n \n fn main() unsafe {\n     fn foo(_a: uint, _b: uint) : uint::le(_a, _b) {}"}, {"sha": "24016a70b2d5dd2ee3ca48283b770205347bd23d", "filename": "src/test/compile-fail/not-a-pred-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fnot-a-pred-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fnot-a-pred-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-a-pred-check.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,5 +1,5 @@\n // -*- rust -*-\n-// error-pattern: Impure function as operator\n+// error-pattern:impure function as operator\n \n fn f(q: int) -> bool { ret true; }\n "}, {"sha": "6fb5273e1e76d330cf39b2f551682ac2ae1697e8", "filename": "src/test/compile-fail/not-pred-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fnot-pred-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fnot-pred-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnot-pred-args.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,6 +1,6 @@\n // -*- rust -*-\n \n-// error-pattern: Constraint args must be\n+// error-pattern:constraint args must be\n \n pure fn f(q: int) -> bool { ret true; }\n "}, {"sha": "0bc339904ba2b2990f5a20ac65720e7e0d76dd90", "filename": "src/test/compile-fail/or-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2For-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2For-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2For-init.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: Unsatisfied precondition constraint (for example, init(i\n+// error-pattern:unsatisfied precondition constraint (for example, init(i\n \n fn main() {\n     let i: int;"}, {"sha": "8a7810cabb085d9ce6d3dd96e033974da1eba3e7", "filename": "src/test/compile-fail/pred-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fpred-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fpred-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpred-assign.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,6 +1,6 @@\n // -*- rust -*-\n \n-// error-pattern: Unsatisfied precondition constraint (for example, lt(a, b)\n+// error-pattern:unsatisfied precondition constraint (for example, lt(a, b)\n \n fn f(a: int, b: int) : lt(a, b) { }\n "}, {"sha": "3f506edc8a6fd6132d7c80cf9265b7858c91b6e2", "filename": "src/test/compile-fail/pred-swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fpred-swap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fpred-swap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpred-swap.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,6 +1,6 @@\n // -*- rust -*-\n \n-// error-pattern: Unsatisfied precondition constraint (for example, lt(a, b)\n+// error-pattern:unsatisfied precondition constraint (for example, lt(a, b)\n \n fn f(a: int, b: int) : lt(a, b) { }\n "}, {"sha": "fbf400db08aa6242929a002fc74c1b4b87497e3c", "filename": "src/test/compile-fail/swap-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fswap-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fswap-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fswap-uninit.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:Unsatisfied precondition\n+// error-pattern:unsatisfied precondition\n \n fn main() { let x = 3; let y; x <-> y; }"}, {"sha": "fb434a1f4377aea7097a56cc0d6c03c36ea0af7f", "filename": "src/test/compile-fail/tag-type-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-type-args.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: Wrong number of type arguments\n+// error-pattern:wrong number of type arguments\n \n enum quux<T> { bar }\n "}, {"sha": "f2622bc4dfa18aff25782386f2d2a9a77f68b18e", "filename": "src/test/compile-fail/tail-non-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Ftail-non-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Ftail-non-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftail-non-call.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: Non-call expression in tail call\n+// error-pattern:non-call expression in tail call\n \n fn f() -> int {\n   let x = 1;"}, {"sha": "560c855a7e66dac7730d16636d8c582a303407fd", "filename": "src/test/compile-fail/uninit-after-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Funinit-after-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Funinit-after-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funinit-after-item.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Unsatisfied precondition constraint (for example, init(bar\n+// error-pattern:unsatisfied precondition constraint (for example, init(bar\n fn main() {\n     let bar;\n     fn baz(x: int) { }"}, {"sha": "177ad0010befa849ca269ae50b7366e6a4aaa0d9", "filename": "src/test/compile-fail/use-after-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fuse-after-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fuse-after-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-move.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern: Unsatisfied precondition constraint (for example, init(x\n+// error-pattern:unsatisfied precondition constraint (for example, init(x\n fn main() { let x = @5; let y <- x; log(debug, *x); }"}, {"sha": "3f1c0ab41e6bd69df4409b231902d2b58e320286", "filename": "src/test/compile-fail/use-after-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-after-send.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: Unsatisfied precondition constraint\n+// error-pattern:unsatisfied precondition constraint\n fn send<T: send>(ch: _chan<T>, -data: T) {\n     log(debug, ch);\n     log(debug, data);"}, {"sha": "82946cf022a5214ac723de169adf4d83864e90e7", "filename": "src/test/compile-fail/use-uninit-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fuse-uninit-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fuse-uninit-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-uninit-2.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Unsatisfied precondition\n+// error-pattern:unsatisfied precondition\n \n fn foo(x: int) { log(debug, x); }\n "}, {"sha": "2a6522ab40729c835d5a3316ce0fd687576e0e0b", "filename": "src/test/compile-fail/use-uninit-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fuse-uninit-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fuse-uninit-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-uninit-3.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Unsatisfied precondition\n+// error-pattern:unsatisfied precondition\n \n fn foo(x: int) { log(debug, x); }\n "}, {"sha": "3ad93fe0a08a849fa5bbb9a30ebc9ce29d8bd6ed", "filename": "src/test/compile-fail/use-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fuse-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fuse-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-uninit.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern:Unsatisfied precondition\n+// error-pattern:unsatisfied precondition\n \n fn foo(x: int) { log(debug, x); }\n "}, {"sha": "58757c8bfdd633df3df04e5145e68b4bb47cb011", "filename": "src/test/compile-fail/while-loop-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-loop-constraints.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: Unsatisfied precondition constraint (for example, init(y\n+// error-pattern:unsatisfied precondition constraint (for example, init(y\n fn main() {\n \n     let y: int = 42;"}, {"sha": "ea58c8377e00bbb9ef02963dec73c347dda3d50f", "filename": "src/test/compile-fail/while-loop-pred-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhile-loop-pred-constraints.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: Unsatisfied precondition constraint (for example, even(y\n+// error-pattern:unsatisfied precondition constraint (for example, even(y\n \n fn print_even(y: int) : even(y) { log(debug, y); }\n "}, {"sha": "283e925e20782df161dce19861786b1bcae2c6e3", "filename": "src/test/compile-fail/writing-through-uninit-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fwriting-through-uninit-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ee96de4ee21643546908065fbf3bc7a3f436a3f/src%2Ftest%2Fcompile-fail%2Fwriting-through-uninit-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwriting-through-uninit-vec.rs?ref=0ee96de4ee21643546908065fbf3bc7a3f436a3f", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: Unsatisfied precondition constraint\n+// error-pattern:unsatisfied precondition constraint\n \n fn test() { let w: [int]; w[5] = 0; }\n "}]}