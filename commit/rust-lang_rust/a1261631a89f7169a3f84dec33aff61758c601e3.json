{"sha": "a1261631a89f7169a3f84dec33aff61758c601e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExMjYxNjMxYTg5ZjcxNjlhM2Y4NGRlYzMzYWZmNjE3NThjNjAxZTM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-09-12T10:53:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-12T10:53:29Z"}, "message": "Merge #1818\n\n1818: Infer box expression r=matklad a=uHOOCCOOHu\n\nInfer `box e` to be `std::boxed::Box<T>` where `e: T`\n\nCo-authored-by: uHOOCCOOHu <hooccooh1896@gmail.com>", "tree": {"sha": "773c687fe89b8cec009de17142b3a59e80468b21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/773c687fe89b8cec009de17142b3a59e80468b21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1261631a89f7169a3f84dec33aff61758c601e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdeiOpCRBK7hj4Ov3rIwAAdHIIADGnj8SyhbxF/siJ8aP5yL2j\nb1BRkuyM+WSMuuEJa5RolMYLc+RU7iOVmoMnBcBi1g5oWBmGF3pCwb/r/Uax1E/M\n6h/oloo6DG25XNnW+Zp8QrxTPR0p/WA0jC1xoQ1kyF45j3pGNIe58K6l6sNhGTos\nzmns/3VA1fwFlYGvwDwnryQDbmJoN3hrh+hAGaRk8XG4GbuRHtnt9+Lc2RJxOk71\ndT+JiORYUDzzj2NYAie4eQnyM8EEf26q8C5Q6O9bplzjQIDqZeLsOIk3mx/Ny2j1\nryLWG9dsFh5kEwkDhC2n+vKkHJMTIG9VcfH2AwKQSX/GZ8A8B1yYvSl3E0zqBoQ=\n=mqr/\n-----END PGP SIGNATURE-----\n", "payload": "tree 773c687fe89b8cec009de17142b3a59e80468b21\nparent 561e7aea5bdaf6c51e0a87da9ff1d73e2df52be1\nparent 8c078a01641518a6b093922d4b1d27d1a98bad08\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1568285609 +0000\ncommitter GitHub <noreply@github.com> 1568285609 +0000\n\nMerge #1818\n\n1818: Infer box expression r=matklad a=uHOOCCOOHu\n\nInfer `box e` to be `std::boxed::Box<T>` where `e: T`\n\nCo-authored-by: uHOOCCOOHu <hooccooh1896@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1261631a89f7169a3f84dec33aff61758c601e3", "html_url": "https://github.com/rust-lang/rust/commit/a1261631a89f7169a3f84dec33aff61758c601e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1261631a89f7169a3f84dec33aff61758c601e3/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "561e7aea5bdaf6c51e0a87da9ff1d73e2df52be1", "url": "https://api.github.com/repos/rust-lang/rust/commits/561e7aea5bdaf6c51e0a87da9ff1d73e2df52be1", "html_url": "https://github.com/rust-lang/rust/commit/561e7aea5bdaf6c51e0a87da9ff1d73e2df52be1"}, {"sha": "8c078a01641518a6b093922d4b1d27d1a98bad08", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c078a01641518a6b093922d4b1d27d1a98bad08", "html_url": "https://github.com/rust-lang/rust/commit/8c078a01641518a6b093922d4b1d27d1a98bad08"}], "stats": {"total": 111, "additions": 107, "deletions": 4}, "files": [{"sha": "b1bec2a68d7cf01887e0fa7f116d6fa7370776ea", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a1261631a89f7169a3f84dec33aff61758c601e3/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1261631a89f7169a3f84dec33aff61758c601e3/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=a1261631a89f7169a3f84dec33aff61758c601e3", "patch": "@@ -237,6 +237,9 @@ pub enum Expr {\n         expr: ExprId,\n         mutability: Mutability,\n     },\n+    Box {\n+        expr: ExprId,\n+    },\n     UnaryOp {\n         expr: ExprId,\n         op: UnaryOp,\n@@ -413,7 +416,8 @@ impl Expr {\n             | Expr::Try { expr }\n             | Expr::Cast { expr, .. }\n             | Expr::Ref { expr, .. }\n-            | Expr::UnaryOp { expr, .. } => {\n+            | Expr::UnaryOp { expr, .. }\n+            | Expr::Box { expr } => {\n                 f(*expr);\n             }\n             Expr::Tuple { exprs } => {"}, {"sha": "2be6f5421b5313645ce596a62a62641e08c98478", "filename": "crates/ra_hir/src/expr/lower.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a1261631a89f7169a3f84dec33aff61758c601e3/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1261631a89f7169a3f84dec33aff61758c601e3/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Flower.rs?ref=a1261631a89f7169a3f84dec33aff61758c601e3", "patch": "@@ -389,6 +389,10 @@ where\n                 let exprs = e.exprs().map(|expr| self.collect_expr(expr)).collect();\n                 self.alloc_expr(Expr::Tuple { exprs }, syntax_ptr)\n             }\n+            ast::Expr::BoxExpr(e) => {\n+                let expr = self.collect_expr_opt(e.expr());\n+                self.alloc_expr(Expr::Box { expr }, syntax_ptr)\n+            }\n \n             ast::Expr::ArrayExpr(e) => {\n                 let kind = e.kind();"}, {"sha": "abdfec296f70f3bf1650adb9a5614fcbfad63a6f", "filename": "crates/ra_hir/src/name.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1261631a89f7169a3f84dec33aff61758c601e3/crates%2Fra_hir%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1261631a89f7169a3f84dec33aff61758c601e3/crates%2Fra_hir%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fname.rs?ref=a1261631a89f7169a3f84dec33aff61758c601e3", "patch": "@@ -119,6 +119,8 @@ pub(crate) const RESULT_MOD: Name = Name::new(SmolStr::new_inline_from_ascii(6,\n pub(crate) const RESULT_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Result\"));\n pub(crate) const OUTPUT: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Output\"));\n pub(crate) const TARGET: Name = Name::new(SmolStr::new_inline_from_ascii(6, b\"Target\"));\n+pub(crate) const BOXED_MOD: Name = Name::new(SmolStr::new_inline_from_ascii(5, b\"boxed\"));\n+pub(crate) const BOX_TYPE: Name = Name::new(SmolStr::new_inline_from_ascii(3, b\"Box\"));\n \n fn resolve_name(text: &SmolStr) -> SmolStr {\n     let raw_start = \"r#\";"}, {"sha": "1057bbbec6bece59300251257663bc29a208b5dc", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a1261631a89f7169a3f84dec33aff61758c601e3/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1261631a89f7169a3f84dec33aff61758c601e3/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=a1261631a89f7169a3f84dec33aff61758c601e3", "patch": "@@ -1259,6 +1259,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let inner_ty = self.infer_expr(*expr, &expectation);\n                 Ty::apply_one(TypeCtor::Ref(*mutability), inner_ty)\n             }\n+            Expr::Box { expr } => {\n+                let inner_ty = self.infer_expr(*expr, &Expectation::none());\n+                if let Some(box_) = self.resolve_boxed_box() {\n+                    Ty::apply_one(TypeCtor::Adt(box_), inner_ty)\n+                } else {\n+                    Ty::Unknown\n+                }\n+            }\n             Expr::UnaryOp { expr, op } => {\n                 let inner_ty = self.infer_expr(*expr, &Expectation::none());\n                 match op {\n@@ -1499,6 +1507,24 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             _ => None,\n         }\n     }\n+\n+    fn resolve_boxed_box(&self) -> Option<AdtDef> {\n+        let boxed_box_path = Path {\n+            kind: PathKind::Abs,\n+            segments: vec![\n+                PathSegment { name: name::STD, args_and_bindings: None },\n+                PathSegment { name: name::BOXED_MOD, args_and_bindings: None },\n+                PathSegment { name: name::BOX_TYPE, args_and_bindings: None },\n+            ],\n+        };\n+\n+        match self.resolver.resolve_path_segments(self.db, &boxed_box_path).into_fully_resolved() {\n+            PerNs { types: Some(Def(ModuleDef::Struct(struct_))), .. } => {\n+                Some(AdtDef::Struct(struct_))\n+            }\n+            _ => None,\n+        }\n+    }\n }\n \n /// The ID of a type variable."}, {"sha": "9a5f6949db15077ce51a7095a4c8b5e1e08e6be9", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a1261631a89f7169a3f84dec33aff61758c601e3/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1261631a89f7169a3f84dec33aff61758c601e3/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=a1261631a89f7169a3f84dec33aff61758c601e3", "patch": "@@ -55,6 +55,37 @@ mod future {\n     assert_eq!(\"u64\", type_at_pos(&db, pos));\n }\n \n+#[test]\n+fn infer_box() {\n+    let (mut db, pos) = MockDatabase::with_position(\n+        r#\"\n+//- /main.rs\n+\n+fn test() {\n+    let x = box 1;\n+    let t = (x, box x, box &1, box [1]);\n+    t<|>;\n+}\n+\n+//- /std.rs\n+#[prelude_import] use prelude::*;\n+mod prelude {}\n+\n+mod boxed {\n+    pub struct Box<T: ?Sized> {\n+        inner: *mut T,\n+    }\n+}\n+\n+\"#,\n+    );\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"main\": (\"/main.rs\", [\"std\"]),\n+        \"std\": (\"/std.rs\", []),\n+    });\n+    assert_eq!(\"(Box<i32>, Box<Box<i32>>, Box<&i32>, Box<[i32;_]>)\", type_at_pos(&db, pos));\n+}\n+\n #[test]\n fn infer_try() {\n     let (mut db, pos) = MockDatabase::with_position("}, {"sha": "a8a231ef32530bd6e6997b59abce640a020eaf50", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a1261631a89f7169a3f84dec33aff61758c601e3/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1261631a89f7169a3f84dec33aff61758c601e3/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=a1261631a89f7169a3f84dec33aff61758c601e3", "patch": "@@ -307,6 +307,33 @@ impl BlockExpr {\n     }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct BoxExpr {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl AstNode for BoxExpr {\n+    fn can_cast(kind: SyntaxKind) -> bool {\n+        match kind {\n+            BOX_EXPR => true,\n+            _ => false,\n+        }\n+    }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode {\n+        &self.syntax\n+    }\n+}\n+impl BoxExpr {\n+    pub fn expr(&self) -> Option<Expr> {\n+        AstChildren::new(&self.syntax).next()\n+    }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct BoxPat {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -649,6 +676,7 @@ pub enum Expr {\n     BinExpr(BinExpr),\n     Literal(Literal),\n     MacroCall(MacroCall),\n+    BoxExpr(BoxExpr),\n }\n impl From<TupleExpr> for Expr {\n     fn from(node: TupleExpr) -> Expr {\n@@ -800,16 +828,20 @@ impl From<MacroCall> for Expr {\n         Expr::MacroCall(node)\n     }\n }\n+impl From<BoxExpr> for Expr {\n+    fn from(node: BoxExpr) -> Expr {\n+        Expr::BoxExpr(node)\n+    }\n+}\n impl AstNode for Expr {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             TUPLE_EXPR | ARRAY_EXPR | PAREN_EXPR | PATH_EXPR | LAMBDA_EXPR | IF_EXPR\n             | LOOP_EXPR | FOR_EXPR | WHILE_EXPR | CONTINUE_EXPR | BREAK_EXPR | LABEL\n             | BLOCK_EXPR | RETURN_EXPR | MATCH_EXPR | RECORD_LIT | CALL_EXPR | INDEX_EXPR\n             | METHOD_CALL_EXPR | FIELD_EXPR | AWAIT_EXPR | TRY_EXPR | TRY_BLOCK_EXPR\n-            | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL => {\n-                true\n-            }\n+            | CAST_EXPR | REF_EXPR | PREFIX_EXPR | RANGE_EXPR | BIN_EXPR | LITERAL | MACRO_CALL\n+            | BOX_EXPR => true,\n             _ => false,\n         }\n     }\n@@ -845,6 +877,7 @@ impl AstNode for Expr {\n             BIN_EXPR => Expr::BinExpr(BinExpr { syntax }),\n             LITERAL => Expr::Literal(Literal { syntax }),\n             MACRO_CALL => Expr::MacroCall(MacroCall { syntax }),\n+            BOX_EXPR => Expr::BoxExpr(BoxExpr { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -881,6 +914,7 @@ impl AstNode for Expr {\n             Expr::BinExpr(it) => &it.syntax,\n             Expr::Literal(it) => &it.syntax,\n             Expr::MacroCall(it) => &it.syntax,\n+            Expr::BoxExpr(it) => &it.syntax,\n         }\n     }\n }"}, {"sha": "8f064711def85172e0999de48426be3e3dc77464", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a1261631a89f7169a3f84dec33aff61758c601e3/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/a1261631a89f7169a3f84dec33aff61758c601e3/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=a1261631a89f7169a3f84dec33aff61758c601e3", "patch": "@@ -483,6 +483,7 @@ Grammar(\n         \"CastExpr\": (options: [\"Expr\", \"TypeRef\"]),\n         \"RefExpr\": (options: [\"Expr\"]),\n         \"PrefixExpr\": (options: [\"Expr\"]),\n+        \"BoxExpr\": (options: [\"Expr\"]),\n         \"RangeExpr\": (),\n         \"BinExpr\": (),\n \n@@ -520,6 +521,7 @@ Grammar(\n                 \"BinExpr\",\n                 \"Literal\",\n                 \"MacroCall\",\n+                \"BoxExpr\",\n             ],\n         ),\n "}]}