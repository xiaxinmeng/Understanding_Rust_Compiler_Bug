{"sha": "55c07b39ae89408c08de4781b2051cc4c7cc7b20", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1YzA3YjM5YWU4OTQwOGMwOGRlNDc4MWIyMDUxY2M0YzdjYzdiMjA=", "commit": {"author": {"name": "Kornel", "email": "kornel@geekhood.net", "date": "2019-07-27T20:46:18Z"}, "committer": {"name": "Kornel", "email": "kornel@geekhood.net", "date": "2019-07-28T10:08:39Z"}, "message": "SystemTime docs: recommend Instant for elapsed time", "tree": {"sha": "5646e6b97772cb6d35316616ab248e4e65238af7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5646e6b97772cb6d35316616ab248e4e65238af7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55c07b39ae89408c08de4781b2051cc4c7cc7b20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55c07b39ae89408c08de4781b2051cc4c7cc7b20", "html_url": "https://github.com/rust-lang/rust/commit/55c07b39ae89408c08de4781b2051cc4c7cc7b20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55c07b39ae89408c08de4781b2051cc4c7cc7b20/comments", "author": {"login": "kornelski", "id": 72159, "node_id": "MDQ6VXNlcjcyMTU5", "avatar_url": "https://avatars.githubusercontent.com/u/72159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kornelski", "html_url": "https://github.com/kornelski", "followers_url": "https://api.github.com/users/kornelski/followers", "following_url": "https://api.github.com/users/kornelski/following{/other_user}", "gists_url": "https://api.github.com/users/kornelski/gists{/gist_id}", "starred_url": "https://api.github.com/users/kornelski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kornelski/subscriptions", "organizations_url": "https://api.github.com/users/kornelski/orgs", "repos_url": "https://api.github.com/users/kornelski/repos", "events_url": "https://api.github.com/users/kornelski/events{/privacy}", "received_events_url": "https://api.github.com/users/kornelski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kornelski", "id": 72159, "node_id": "MDQ6VXNlcjcyMTU5", "avatar_url": "https://avatars.githubusercontent.com/u/72159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kornelski", "html_url": "https://github.com/kornelski", "followers_url": "https://api.github.com/users/kornelski/followers", "following_url": "https://api.github.com/users/kornelski/following{/other_user}", "gists_url": "https://api.github.com/users/kornelski/gists{/gist_id}", "starred_url": "https://api.github.com/users/kornelski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kornelski/subscriptions", "organizations_url": "https://api.github.com/users/kornelski/orgs", "repos_url": "https://api.github.com/users/kornelski/repos", "events_url": "https://api.github.com/users/kornelski/events{/privacy}", "received_events_url": "https://api.github.com/users/kornelski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a239ef4ded03d155c72b68b5a2dd7aff013e141", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a239ef4ded03d155c72b68b5a2dd7aff013e141", "html_url": "https://github.com/rust-lang/rust/commit/9a239ef4ded03d155c72b68b5a2dd7aff013e141"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "98371b9ba3d7e5b52624e368a8d032b44bae20bb", "filename": "src/libstd/time.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55c07b39ae89408c08de4781b2051cc4c7cc7b20/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55c07b39ae89408c08de4781b2051cc4c7cc7b20/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=55c07b39ae89408c08de4781b2051cc4c7cc7b20", "patch": "@@ -396,6 +396,7 @@ impl SystemTime {\n     /// This function may fail because measurements taken earlier are not\n     /// guaranteed to always be before later measurements (due to anomalies such\n     /// as the system clock being adjusted either forwards or backwards).\n+    /// [`Instant`] can be used to measure elapsed time without this risk of failure.\n     ///\n     /// If successful, [`Ok`]`(`[`Duration`]`)` is returned where the duration represents\n     /// the amount of time elapsed from the specified measurement to this one.\n@@ -406,6 +407,7 @@ impl SystemTime {\n     /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n     /// [`Duration`]: ../../std/time/struct.Duration.html\n     /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`Instant`]: ../../std/time/struct.Instant.html\n     ///\n     /// # Examples\n     ///\n@@ -414,7 +416,7 @@ impl SystemTime {\n     ///\n     /// let sys_time = SystemTime::now();\n     /// let difference = sys_time.duration_since(sys_time)\n-    ///                          .expect(\"SystemTime::duration_since failed\");\n+    ///                          .expect(\"Clock may have gone backwards\");\n     /// println!(\"{:?}\", difference);\n     /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n@@ -423,20 +425,24 @@ impl SystemTime {\n         self.0.sub_time(&earlier.0).map_err(SystemTimeError)\n     }\n \n-    /// Returns the amount of time elapsed since this system time was created.\n+    /// Returns the difference between the clock time when this\n+    /// system time was created, and the current clock time.\n     ///\n     /// This function may fail as the underlying system clock is susceptible to\n     /// drift and updates (e.g., the system clock could go backwards), so this\n     /// function may not always succeed. If successful, [`Ok`]`(`[`Duration`]`)` is\n     /// returned where the duration represents the amount of time elapsed from\n     /// this time measurement to the current time.\n     ///\n+    /// To measure elapsed time reliably, use [`Instant`] instead.\n+    ///\n     /// Returns an [`Err`] if `self` is later than the current system time, and\n     /// the error contains how far from the current system time `self` is.\n     ///\n     /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n     /// [`Duration`]: ../../std/time/struct.Duration.html\n     /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`Instant`]: ../../std/time/struct.Instant.html\n     ///\n     /// # Examples\n     ///"}]}