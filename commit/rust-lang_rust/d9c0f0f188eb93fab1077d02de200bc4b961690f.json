{"sha": "d9c0f0f188eb93fab1077d02de200bc4b961690f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YzBmMGYxODhlYjkzZmFiMTA3N2QwMmRlMjAwYmM0Yjk2MTY5MGY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-24T22:05:27Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-05-26T14:26:03Z"}, "message": "add memset32/memset64", "tree": {"sha": "bb4a1bf091b3be377ae5672d74422e69d790111b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb4a1bf091b3be377ae5672d74422e69d790111b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9c0f0f188eb93fab1077d02de200bc4b961690f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9c0f0f188eb93fab1077d02de200bc4b961690f", "html_url": "https://github.com/rust-lang/rust/commit/d9c0f0f188eb93fab1077d02de200bc4b961690f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9c0f0f188eb93fab1077d02de200bc4b961690f/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2eaa5dbb6033a19ab03d40d01e90511b28015d0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2eaa5dbb6033a19ab03d40d01e90511b28015d0f", "html_url": "https://github.com/rust-lang/rust/commit/2eaa5dbb6033a19ab03d40d01e90511b28015d0f"}], "stats": {"total": 87, "additions": 86, "deletions": 1}, "files": [{"sha": "7bfec9c89cbf70638474264da874a5bb7e3b08e5", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d9c0f0f188eb93fab1077d02de200bc4b961690f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c0f0f188eb93fab1077d02de200bc4b961690f/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=d9c0f0f188eb93fab1077d02de200bc4b961690f", "patch": "@@ -897,6 +897,32 @@ pub fn trans_intrinsic(ccx: @CrateContext,\n             let llfn = *bcx.ccx().intrinsics.get(&~\"llvm.memmove.p0i8.p0i8.i64\");\n             Call(bcx, llfn, [dst_ptr, src_ptr, Mul(bcx, size, count), align, volatile]);\n         }\n+        ~\"memset32\" => {\n+            let tp_ty = substs.tys[0];\n+            let lltp_ty = type_of::type_of(ccx, tp_ty);\n+            let align = C_i32(machine::llalign_of_min(ccx, lltp_ty) as i32);\n+            let size = C_i32(machine::llsize_of_real(ccx, lltp_ty) as i32);\n+\n+            let dst_ptr = PointerCast(bcx, get_param(decl, first_real_arg), T_ptr(T_i8()));\n+            let val = get_param(decl, first_real_arg + 1);\n+            let count = get_param(decl, first_real_arg + 2);\n+            let volatile = C_i1(false);\n+            let llfn = *bcx.ccx().intrinsics.get(&~\"llvm.memset.p0i8.i32\");\n+            Call(bcx, llfn, [dst_ptr, val, Mul(bcx, size, count), align, volatile]);\n+        }\n+        ~\"memset64\" => {\n+            let tp_ty = substs.tys[0];\n+            let lltp_ty = type_of::type_of(ccx, tp_ty);\n+            let align = C_i32(machine::llalign_of_min(ccx, lltp_ty) as i32);\n+            let size = C_i64(machine::llsize_of_real(ccx, lltp_ty) as i64);\n+\n+            let dst_ptr = PointerCast(bcx, get_param(decl, first_real_arg), T_ptr(T_i8()));\n+            let val = get_param(decl, first_real_arg + 1);\n+            let count = get_param(decl, first_real_arg + 2);\n+            let volatile = C_i1(false);\n+            let llfn = *bcx.ccx().intrinsics.get(&~\"llvm.memset.p0i8.i64\");\n+            Call(bcx, llfn, [dst_ptr, val, Mul(bcx, size, count), align, volatile]);\n+        }\n         ~\"sqrtf32\" => {\n             let x = get_param(decl, first_real_arg);\n             let sqrtf = *ccx.intrinsics.get(&~\"llvm.sqrt.f32\");"}, {"sha": "ceb229c79bd9828d4a459c6a179bd4b10d21626a", "filename": "src/librustc/middle/trans/type_use.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d9c0f0f188eb93fab1077d02de200bc4b961690f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c0f0f188eb93fab1077d02de200bc4b961690f/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=d9c0f0f188eb93fab1077d02de200bc4b961690f", "patch": "@@ -135,7 +135,8 @@ pub fn type_uses_for(ccx: @CrateContext, fn_id: def_id, n_tps: uint)\n                 ~\"visit_tydesc\"  | ~\"forget\" | ~\"frame_address\" |\n                 ~\"morestack_addr\" => 0,\n \n-                ~\"memcpy32\" | ~\"memcpy64\" | ~\"memmove32\" | ~\"memmove64\" => use_repr,\n+                ~\"memcpy32\" | ~\"memcpy64\" | ~\"memmove32\" | ~\"memmove64\" |\n+                ~\"memset32\" | ~\"memset64\" => use_repr,\n \n                 ~\"sqrtf32\" | ~\"sqrtf64\" | ~\"powif32\" | ~\"powif64\" |\n                 ~\"sinf32\"  | ~\"sinf64\"  | ~\"cosf32\"  | ~\"cosf64\"  |"}, {"sha": "d1714555f201cad2175ec6723e5ec8e105f746cc", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d9c0f0f188eb93fab1077d02de200bc4b961690f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c0f0f188eb93fab1077d02de200bc4b961690f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=d9c0f0f188eb93fab1077d02de200bc4b961690f", "patch": "@@ -3597,6 +3597,30 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n            ],\n            ty::mk_nil())\n         }\n+        ~\"memset32\" => {\n+          (1,\n+           ~[\n+              ty::mk_ptr(tcx, ty::mt {\n+                  ty: param(ccx, 0),\n+                  mutbl: ast::m_mutbl\n+              }),\n+              ty::mk_u8(),\n+              ty::mk_u32()\n+           ],\n+           ty::mk_nil())\n+        }\n+        ~\"memset64\" => {\n+          (1,\n+           ~[\n+              ty::mk_ptr(tcx, ty::mt {\n+                  ty: param(ccx, 0),\n+                  mutbl: ast::m_mutbl\n+              }),\n+              ty::mk_u8(),\n+              ty::mk_u64()\n+           ],\n+           ty::mk_nil())\n+        }\n         ~\"sqrtf32\" => (0, ~[ ty::mk_f32() ], ty::mk_f32()),\n         ~\"sqrtf64\" => (0, ~[ ty::mk_f64() ], ty::mk_f64()),\n         ~\"powif32\" => {"}, {"sha": "e787558c6e4d6a69a1ba2b8ea91b533f61645030", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d9c0f0f188eb93fab1077d02de200bc4b961690f/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c0f0f188eb93fab1077d02de200bc4b961690f/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=d9c0f0f188eb93fab1077d02de200bc4b961690f", "patch": "@@ -19,6 +19,7 @@ use sys;\n #[cfg(not(test))] use cmp::{Eq, Ord};\n use uint;\n \n+#[cfg(stage0)]\n pub mod libc_ {\n     use libc::c_void;\n     use libc;\n@@ -157,11 +158,26 @@ pub unsafe fn copy_nonoverlapping_memory<T>(dst: *mut T, src: *const T, count: u\n }\n \n #[inline(always)]\n+#[cfg(stage0)]\n pub unsafe fn set_memory<T>(dst: *mut T, c: int, count: uint) {\n     let n = count * sys::size_of::<T>();\n     libc_::memset(dst as *mut c_void, c as libc::c_int, n as size_t);\n }\n \n+#[inline(always)]\n+#[cfg(target_word_size = \"32\", not(stage0))]\n+pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n+    use unstable::intrinsics::memset32;\n+    memset32(dst, c, count as u32);\n+}\n+\n+#[inline(always)]\n+#[cfg(target_word_size = \"64\", not(stage0))]\n+pub unsafe fn set_memory<T>(dst: *mut T, c: u8, count: uint) {\n+    use unstable::intrinsics::memset64;\n+    memset64(dst, c, count as u64);\n+}\n+\n /**\n   Transform a region pointer - &T - to an unsafe pointer - *T.\n   This is safe, but is implemented with an unsafe block due to\n@@ -603,4 +619,12 @@ pub mod ptr_tests {\n             });\n         }\n     }\n+\n+    #[test]\n+    fn test_set_memory() {\n+        let mut xs = [0u8, ..20];\n+        let ptr = vec::raw::to_mut_ptr(xs);\n+        unsafe { set_memory(ptr, 5u8, xs.len()); }\n+        assert_eq!(xs, [5u8, ..20]);\n+    }\n }"}, {"sha": "908c5e23ab070c567275c9e08b69fbed2767eeec", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9c0f0f188eb93fab1077d02de200bc4b961690f/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9c0f0f188eb93fab1077d02de200bc4b961690f/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=d9c0f0f188eb93fab1077d02de200bc4b961690f", "patch": "@@ -31,6 +31,7 @@ A quick refresher on memory ordering:\n   with atomic types and is equivalent to Java's `volatile`.\n \n */\n+\n #[abi = \"rust-intrinsic\"]\n pub extern \"rust-intrinsic\" {\n \n@@ -152,6 +153,15 @@ pub extern \"rust-intrinsic\" {\n     #[cfg(not(stage0))]\n     pub fn memmove64<T>(dst: *mut T, src: *T, count: u64);\n \n+    /// Equivalent to the `llvm.memset.p0i8.i32` intrinsic, with a size of\n+    /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n+    #[cfg(not(stage0))]\n+    pub fn memset32<T>(dst: *mut T, val: u8, count: u32);\n+    /// Equivalent to the `llvm.memset.p0i8.i64` intrinsic, with a size of\n+    /// `count` * `size_of::<T>()` and an alignment of `min_align_of::<T>()`\n+    #[cfg(not(stage0))]\n+    pub fn memset64<T>(dst: *mut T, val: u8, count: u64);\n+\n     pub fn sqrtf32(x: f32) -> f32;\n     pub fn sqrtf64(x: f64) -> f64;\n "}]}