{"sha": "a9f9e80de5df8bf30e24a6521d5853660c1823d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ZjllODBkZTVkZjhiZjMwZTI0YTY1MjFkNTg1MzY2MGMxODIzZDU=", "commit": {"author": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-16T09:22:35Z"}, "committer": {"name": "Jakub Bukaj", "email": "jakub@jakub.cc", "date": "2014-11-16T09:22:35Z"}, "message": "rollup merge of #18989: alex/fix-typos", "tree": {"sha": "7ca4803e6e6222fa1373f36e7204e3ff9ca4577c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ca4803e6e6222fa1373f36e7204e3ff9ca4577c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9f9e80de5df8bf30e24a6521d5853660c1823d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9f9e80de5df8bf30e24a6521d5853660c1823d5", "html_url": "https://github.com/rust-lang/rust/commit/a9f9e80de5df8bf30e24a6521d5853660c1823d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9f9e80de5df8bf30e24a6521d5853660c1823d5/comments", "author": null, "committer": null, "parents": [{"sha": "086b2974decd4a71c38a40035125259a06650e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/086b2974decd4a71c38a40035125259a06650e7d", "html_url": "https://github.com/rust-lang/rust/commit/086b2974decd4a71c38a40035125259a06650e7d"}, {"sha": "e94cd40f7ebb8fccf84cebdf050c57426eed0158", "url": "https://api.github.com/repos/rust-lang/rust/commits/e94cd40f7ebb8fccf84cebdf050c57426eed0158", "html_url": "https://github.com/rust-lang/rust/commit/e94cd40f7ebb8fccf84cebdf050c57426eed0158"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "071c9ff013c59d248237af77ed2201436b02cffb", "filename": "src/doc/guide-strings.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a9f9e80de5df8bf30e24a6521d5853660c1823d5/src%2Fdoc%2Fguide-strings.md", "raw_url": "https://github.com/rust-lang/rust/raw/a9f9e80de5df8bf30e24a6521d5853660c1823d5/src%2Fdoc%2Fguide-strings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-strings.md?ref=a9f9e80de5df8bf30e24a6521d5853660c1823d5", "patch": "@@ -155,7 +155,7 @@ println!(\"{}\", s[0]);\n This does not compile. This is on purpose. In the world of UTF-8, direct\n indexing is basically never what you want to do. The reason is that each\n character can be a variable number of bytes. This means that you have to iterate\n-through the characters anyway, which is a O(n) operation. \n+through the characters anyway, which is an O(n) operation.\n \n There's 3 basic levels of unicode (and its encodings):\n "}, {"sha": "5d1401e27ba4aa4ce771739f4560dfc31dd68fd9", "filename": "src/doc/reference.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a9f9e80de5df8bf30e24a6521d5853660c1823d5/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/a9f9e80de5df8bf30e24a6521d5853660c1823d5/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=a9f9e80de5df8bf30e24a6521d5853660c1823d5", "patch": "@@ -2526,7 +2526,7 @@ The currently implemented features of the reference compiler are:\n \n * `plugin_registrar` - Indicates that a crate has [compiler plugins][plugin] that it\n                        wants to load. As with `phase`, the implementation is\n-                       in need of a overhaul, and it is not clear that plugins\n+                       in need of an overhaul, and it is not clear that plugins\n                        defined using this will continue to work.\n \n * `quote` - Allows use of the `quote_*!` family of macros, which are\n@@ -2583,7 +2583,7 @@ there isn't a parser error first). The directive in this case is no longer\n necessary, and it's likely that existing code will break if the feature isn't\n removed.\n \n-If a unknown feature is found in a directive, it results in a compiler error.\n+If an unknown feature is found in a directive, it results in a compiler error.\n An unknown feature is one which has never been recognized by the compiler.\n \n # Statements and expressions\n@@ -2685,7 +2685,7 @@ When an lvalue is evaluated in an _lvalue context_, it denotes a memory\n location; when evaluated in an _rvalue context_, it denotes the value held _in_\n that memory location.\n \n-When an rvalue is used in lvalue context, a temporary un-named lvalue is\n+When an rvalue is used in an lvalue context, a temporary un-named lvalue is\n created and used instead. A temporary's lifetime equals the largest lifetime\n of any reference that points to it.\n \n@@ -2833,7 +2833,7 @@ foo().x;\n ```\n \n A field access is an [lvalue](#lvalues,-rvalues-and-temporaries) referring to\n-the value of that field. When the type providing the field inherits mutabilty,\n+the value of that field. When the type providing the field inherits mutability,\n it can be [assigned](#assignment-expressions) to.\n \n Also, if the type of the expression to the left of the dot is a pointer, it is\n@@ -3320,7 +3320,7 @@ between `_` and `..` is that the pattern `C(_)` is only type-correct if `C` has\n exactly one argument, while the pattern `C(..)` is type-correct for any enum\n variant `C`, regardless of how many arguments `C` has.\n \n-Used inside a array pattern, `..` stands for any number of elements, when the\n+Used inside an array pattern, `..` stands for any number of elements, when the\n `advanced_slice_patterns` feature gate is turned on. This wildcard can be used\n at most once for a given array, which implies that it cannot be used to\n specifically match elements that are at an unknown distance from both ends of a\n@@ -3583,7 +3583,7 @@ is not a surrogate), represented as a 32-bit unsigned word in the 0x0000 to\n 0xD7FF or 0xE000 to 0x10FFFF range. A `[char]` array is effectively an UCS-4 /\n UTF-32 string.\n \n-A value of type `str` is a Unicode string, represented as a array of 8-bit\n+A value of type `str` is a Unicode string, represented as an array of 8-bit\n unsigned bytes holding a sequence of UTF-8 codepoints. Since `str` is of\n unknown size, it is not a _first class_ type, but can only be instantiated\n through a pointer type, such as `&str` or `String`."}]}