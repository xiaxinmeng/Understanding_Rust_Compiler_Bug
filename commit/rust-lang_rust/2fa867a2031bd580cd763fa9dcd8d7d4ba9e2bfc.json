{"sha": "2fa867a2031bd580cd763fa9dcd8d7d4ba9e2bfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYTg2N2EyMDMxYmQ1ODBjZDc2M2ZhOWRjZDhkN2Q0YmE5ZTJiZmM=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-25T19:58:30Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-31T20:04:23Z"}, "message": "librustc: replace unimplemented!() with bug!()", "tree": {"sha": "7d2e02198f34b9b05d864207bc332f80ddec194c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d2e02198f34b9b05d864207bc332f80ddec194c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fa867a2031bd580cd763fa9dcd8d7d4ba9e2bfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa867a2031bd580cd763fa9dcd8d7d4ba9e2bfc", "html_url": "https://github.com/rust-lang/rust/commit/2fa867a2031bd580cd763fa9dcd8d7d4ba9e2bfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fa867a2031bd580cd763fa9dcd8d7d4ba9e2bfc/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734", "html_url": "https://github.com/rust-lang/rust/commit/dfd0e937acb4d07fbdc6d95d5d8d6e852f7ef734"}], "stats": {"total": 140, "additions": 71, "deletions": 69}, "files": [{"sha": "305b64f3320c91865dcb1a3175d2a34b1bb93c75", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 70, "deletions": 68, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/2fa867a2031bd580cd763fa9dcd8d7d4ba9e2bfc/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa867a2031bd580cd763fa9dcd8d7d4ba9e2bfc/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=2fa867a2031bd580cd763fa9dcd8d7d4ba9e2bfc", "patch": "@@ -336,121 +336,123 @@ pub struct DummyCrateStore;\n #[allow(unused_variables)]\n impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     // item info\n-    fn stability(&self, def: DefId) -> Option<attr::Stability> { unimplemented!() }\n-    fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> { unimplemented!() }\n-    fn visibility(&self, def: DefId) -> hir::Visibility { unimplemented!() }\n+    fn stability(&self, def: DefId) -> Option<attr::Stability> { bug!(\"stability\") }\n+    fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> { bug!(\"deprecation\") }\n+    fn visibility(&self, def: DefId) -> hir::Visibility { bug!(\"visibility\") }\n     fn closure_kind(&self, tcx: &TyCtxt<'tcx>, def_id: DefId)\n-                    -> ty::ClosureKind  { unimplemented!() }\n+                    -> ty::ClosureKind  { bug!(\"closure_kind\") }\n     fn closure_ty(&self, tcx: &TyCtxt<'tcx>, def_id: DefId)\n-                  -> ty::ClosureTy<'tcx>  { unimplemented!() }\n-    fn item_variances(&self, def: DefId) -> ty::ItemVariances { unimplemented!() }\n-    fn repr_attrs(&self, def: DefId) -> Vec<attr::ReprAttr> { unimplemented!() }\n+                  -> ty::ClosureTy<'tcx>  { bug!(\"closure_ty\") }\n+    fn item_variances(&self, def: DefId) -> ty::ItemVariances { bug!(\"item_variances\") }\n+    fn repr_attrs(&self, def: DefId) -> Vec<attr::ReprAttr> { bug!(\"repr_attrs\") }\n     fn item_type(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n-                 -> ty::TypeScheme<'tcx> { unimplemented!() }\n-    fn relative_item_path(&self, def: DefId) -> Vec<hir_map::PathElem> { unimplemented!() }\n+                 -> ty::TypeScheme<'tcx> { bug!(\"item_type\") }\n+    fn relative_item_path(&self, def: DefId)\n+                          -> Vec<hir_map::PathElem> { bug!(\"relative_item_path\") }\n     fn visible_parent_map<'a>(&'a self) -> ::std::cell::RefMut<'a, DefIdMap<DefId>> {\n-        unimplemented!()\n+        bug!(\"visible_parent_map\")\n     }\n-    fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem> { unimplemented!() }\n-    fn item_name(&self, def: DefId) -> ast::Name { unimplemented!() }\n+    fn extern_item_path(&self, def: DefId) -> Vec<hir_map::PathElem> { bug!(\"extern_item_path\") }\n+    fn item_name(&self, def: DefId) -> ast::Name { bug!(\"item_name\") }\n     fn item_predicates(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n-                       -> ty::GenericPredicates<'tcx> { unimplemented!() }\n+                       -> ty::GenericPredicates<'tcx> { bug!(\"item_predicates\") }\n     fn item_super_predicates(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n-                             -> ty::GenericPredicates<'tcx> { unimplemented!() }\n-    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute> { unimplemented!() }\n-    fn item_symbol(&self, def: DefId) -> String { unimplemented!() }\n+                             -> ty::GenericPredicates<'tcx> { bug!(\"item_super_predicates\") }\n+    fn item_attrs(&self, def_id: DefId) -> Vec<ast::Attribute> { bug!(\"item_attrs\") }\n+    fn item_symbol(&self, def: DefId) -> String { bug!(\"item_symbol\") }\n     fn trait_def(&self, tcx: &TyCtxt<'tcx>, def: DefId)-> ty::TraitDef<'tcx>\n-        { unimplemented!() }\n+        { bug!(\"trait_def\") }\n     fn adt_def(&self, tcx: &TyCtxt<'tcx>, def: DefId) -> ty::AdtDefMaster<'tcx>\n-        { unimplemented!() }\n-    fn method_arg_names(&self, did: DefId) -> Vec<String> { unimplemented!() }\n+        { bug!(\"adt_def\") }\n+    fn method_arg_names(&self, did: DefId) -> Vec<String> { bug!(\"method_arg_names\") }\n     fn inherent_implementations_for_type(&self, def_id: DefId) -> Vec<DefId> { vec![] }\n \n     // trait info\n     fn implementations_of_trait(&self, def_id: DefId) -> Vec<DefId> { vec![] }\n     fn provided_trait_methods(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n-                              -> Vec<Rc<ty::Method<'tcx>>> { unimplemented!() }\n+                              -> Vec<Rc<ty::Method<'tcx>>> { bug!(\"provided_trait_methods\") }\n     fn trait_item_def_ids(&self, def: DefId)\n-                          -> Vec<ty::ImplOrTraitItemId> { unimplemented!() }\n+                          -> Vec<ty::ImplOrTraitItemId> { bug!(\"trait_item_def_ids\") }\n \n     // impl info\n     fn impl_items(&self, impl_def_id: DefId) -> Vec<ty::ImplOrTraitItemId>\n-        { unimplemented!() }\n+        { bug!(\"impl_items\") }\n     fn impl_trait_ref(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n-                      -> Option<ty::TraitRef<'tcx>> { unimplemented!() }\n-    fn impl_polarity(&self, def: DefId) -> Option<hir::ImplPolarity> { unimplemented!() }\n+                      -> Option<ty::TraitRef<'tcx>> { bug!(\"impl_trait_ref\") }\n+    fn impl_polarity(&self, def: DefId) -> Option<hir::ImplPolarity> { bug!(\"impl_polarity\") }\n     fn custom_coerce_unsized_kind(&self, def: DefId)\n                                   -> Option<ty::adjustment::CustomCoerceUnsized>\n-        { unimplemented!() }\n+        { bug!(\"custom_coerce_unsized_kind\") }\n     fn associated_consts(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n-                         -> Vec<Rc<ty::AssociatedConst<'tcx>>> { unimplemented!() }\n-    fn impl_parent(&self, def: DefId) -> Option<DefId> { unimplemented!() }\n+                         -> Vec<Rc<ty::AssociatedConst<'tcx>>> { bug!(\"associated_consts\") }\n+    fn impl_parent(&self, def: DefId) -> Option<DefId> { bug!(\"impl_parent\") }\n \n     // trait/impl-item info\n     fn trait_of_item(&self, tcx: &TyCtxt<'tcx>, def_id: DefId)\n-                     -> Option<DefId> { unimplemented!() }\n+                     -> Option<DefId> { bug!(\"trait_of_item\") }\n     fn impl_or_trait_item(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n-                          -> Option<ty::ImplOrTraitItem<'tcx>> { unimplemented!() }\n+                          -> Option<ty::ImplOrTraitItem<'tcx>> { bug!(\"impl_or_trait_item\") }\n \n     // flags\n-    fn is_const_fn(&self, did: DefId) -> bool { unimplemented!() }\n-    fn is_defaulted_trait(&self, did: DefId) -> bool { unimplemented!() }\n-    fn is_impl(&self, did: DefId) -> bool { unimplemented!() }\n-    fn is_default_impl(&self, impl_did: DefId) -> bool { unimplemented!() }\n-    fn is_extern_item(&self, tcx: &TyCtxt<'tcx>, did: DefId) -> bool { unimplemented!() }\n-    fn is_static_method(&self, did: DefId) -> bool { unimplemented!() }\n+    fn is_const_fn(&self, did: DefId) -> bool { bug!(\"is_const_fn\") }\n+    fn is_defaulted_trait(&self, did: DefId) -> bool { bug!(\"is_defaulted_trait\") }\n+    fn is_impl(&self, did: DefId) -> bool { bug!(\"is_impl\") }\n+    fn is_default_impl(&self, impl_did: DefId) -> bool { bug!(\"is_default_impl\") }\n+    fn is_extern_item(&self, tcx: &TyCtxt<'tcx>, did: DefId) -> bool { bug!(\"is_extern_item\") }\n+    fn is_static_method(&self, did: DefId) -> bool { bug!(\"is_static_method\") }\n     fn is_statically_included_foreign_item(&self, id: ast::NodeId) -> bool { false }\n-    fn is_typedef(&self, did: DefId) -> bool { unimplemented!() }\n+    fn is_typedef(&self, did: DefId) -> bool { bug!(\"is_typedef\") }\n \n     // crate metadata\n     fn dylib_dependency_formats(&self, cnum: ast::CrateNum)\n                                     -> Vec<(ast::CrateNum, LinkagePreference)>\n-        { unimplemented!() }\n+        { bug!(\"dylib_dependency_formats\") }\n     fn lang_items(&self, cnum: ast::CrateNum) -> Vec<(DefIndex, usize)>\n-        { unimplemented!() }\n+        { bug!(\"lang_items\") }\n     fn missing_lang_items(&self, cnum: ast::CrateNum) -> Vec<lang_items::LangItem>\n-        { unimplemented!() }\n-    fn is_staged_api(&self, cnum: ast::CrateNum) -> bool { unimplemented!() }\n-    fn is_explicitly_linked(&self, cnum: ast::CrateNum) -> bool { unimplemented!() }\n-    fn is_allocator(&self, cnum: ast::CrateNum) -> bool { unimplemented!() }\n-    fn extern_crate(&self, cnum: ast::CrateNum) -> Option<ExternCrate> { unimplemented!() }\n+        { bug!(\"missing_lang_items\") }\n+    fn is_staged_api(&self, cnum: ast::CrateNum) -> bool { bug!(\"is_staged_api\") }\n+    fn is_explicitly_linked(&self, cnum: ast::CrateNum) -> bool { bug!(\"is_explicitly_linked\") }\n+    fn is_allocator(&self, cnum: ast::CrateNum) -> bool { bug!(\"is_allocator\") }\n+    fn extern_crate(&self, cnum: ast::CrateNum) -> Option<ExternCrate> { bug!(\"extern_crate\") }\n     fn crate_attrs(&self, cnum: ast::CrateNum) -> Vec<ast::Attribute>\n-        { unimplemented!() }\n-    fn crate_name(&self, cnum: ast::CrateNum) -> InternedString { unimplemented!() }\n+        { bug!(\"crate_attrs\") }\n+    fn crate_name(&self, cnum: ast::CrateNum) -> InternedString { bug!(\"crate_name\") }\n     fn original_crate_name(&self, cnum: ast::CrateNum) -> InternedString {\n-        unimplemented!()\n+        bug!(\"original_crate_name\")\n     }\n-    fn crate_hash(&self, cnum: ast::CrateNum) -> Svh { unimplemented!() }\n-    fn crate_disambiguator(&self, cnum: ast::CrateNum) -> InternedString { unimplemented!() }\n+    fn crate_hash(&self, cnum: ast::CrateNum) -> Svh { bug!(\"crate_hash\") }\n+    fn crate_disambiguator(&self, cnum: ast::CrateNum)\n+                           -> InternedString { bug!(\"crate_disambiguator\") }\n     fn crate_struct_field_attrs(&self, cnum: ast::CrateNum)\n                                 -> FnvHashMap<DefId, Vec<ast::Attribute>>\n-        { unimplemented!() }\n+        { bug!(\"crate_struct_field_attrs\") }\n     fn plugin_registrar_fn(&self, cnum: ast::CrateNum) -> Option<DefId>\n-        { unimplemented!() }\n+        { bug!(\"plugin_registrar_fn\") }\n     fn native_libraries(&self, cnum: ast::CrateNum) -> Vec<(NativeLibraryKind, String)>\n-        { unimplemented!() }\n-    fn reachable_ids(&self, cnum: ast::CrateNum) -> Vec<DefId> { unimplemented!() }\n+        { bug!(\"native_libraries\") }\n+    fn reachable_ids(&self, cnum: ast::CrateNum) -> Vec<DefId> { bug!(\"reachable_ids\") }\n \n     // resolve\n-    fn def_key(&self, def: DefId) -> hir_map::DefKey { unimplemented!() }\n-    fn relative_def_path(&self, def: DefId) -> hir_map::DefPath { unimplemented!() }\n-    fn variant_kind(&self, def_id: DefId) -> Option<VariantKind> { unimplemented!() }\n+    fn def_key(&self, def: DefId) -> hir_map::DefKey { bug!(\"def_key\") }\n+    fn relative_def_path(&self, def: DefId) -> hir_map::DefPath { bug!(\"relative_def_path\") }\n+    fn variant_kind(&self, def_id: DefId) -> Option<VariantKind> { bug!(\"variant_kind\") }\n     fn struct_ctor_def_id(&self, struct_def_id: DefId) -> Option<DefId>\n-        { unimplemented!() }\n+        { bug!(\"struct_ctor_def_id\") }\n     fn tuple_struct_definition_if_ctor(&self, did: DefId) -> Option<DefId>\n-        { unimplemented!() }\n-    fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { unimplemented!() }\n-    fn item_children(&self, did: DefId) -> Vec<ChildItem> { unimplemented!() }\n+        { bug!(\"tuple_struct_definition_if_ctor\") }\n+    fn struct_field_names(&self, def: DefId) -> Vec<ast::Name> { bug!(\"struct_field_names\") }\n+    fn item_children(&self, did: DefId) -> Vec<ChildItem> { bug!(\"item_children\") }\n     fn crate_top_level_items(&self, cnum: ast::CrateNum) -> Vec<ChildItem>\n-        { unimplemented!() }\n+        { bug!(\"crate_top_level_items\") }\n \n     // misc. metadata\n     fn maybe_get_item_ast(&'tcx self, tcx: &TyCtxt<'tcx>, def: DefId)\n-                          -> FoundAst<'tcx> { unimplemented!() }\n+                          -> FoundAst<'tcx> { bug!(\"maybe_get_item_ast\") }\n     fn maybe_get_item_mir(&self, tcx: &TyCtxt<'tcx>, def: DefId)\n-                          -> Option<Mir<'tcx>> { unimplemented!() }\n+                          -> Option<Mir<'tcx>> { bug!(\"maybe_get_item_mir\") }\n     fn is_item_mir_available(&self, def: DefId) -> bool {\n-        unimplemented!()\n+        bug!(\"is_item_mir_available\")\n     }\n \n     // This is basically a 1-based range of ints, which is a little\n@@ -460,18 +462,18 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n     fn used_link_args(&self) -> Vec<String> { vec![] }\n \n     // utility functions\n-    fn metadata_filename(&self) -> &str { unimplemented!() }\n-    fn metadata_section_name(&self, target: &Target) -> &str { unimplemented!() }\n+    fn metadata_filename(&self) -> &str { bug!(\"metadata_filename\") }\n+    fn metadata_section_name(&self, target: &Target) -> &str { bug!(\"metadata_section_name\") }\n     fn encode_type(&self,\n                    tcx: &TyCtxt<'tcx>,\n                    ty: Ty<'tcx>,\n                    def_id_to_string: fn(&TyCtxt<'tcx>, DefId) -> String)\n                    -> Vec<u8> {\n-        unimplemented!()\n+        bug!(\"encode_type\")\n     }\n     fn used_crates(&self, prefer: LinkagePreference) -> Vec<(ast::CrateNum, Option<PathBuf>)>\n         { vec![] }\n-    fn used_crate_source(&self, cnum: ast::CrateNum) -> CrateSource { unimplemented!() }\n+    fn used_crate_source(&self, cnum: ast::CrateNum) -> CrateSource { bug!(\"used_crate_source\") }\n     fn extern_mod_stmt_cnum(&self, emod_id: ast::NodeId) -> Option<ast::CrateNum> { None }\n     fn encode_metadata(&self,\n                        tcx: &TyCtxt<'tcx>,\n@@ -481,7 +483,7 @@ impl<'tcx> CrateStore<'tcx> for DummyCrateStore {\n                        reachable: &NodeSet,\n                        mir_map: &MirMap<'tcx>,\n                        krate: &hir::Crate) -> Vec<u8> { vec![] }\n-    fn metadata_encoding_version(&self) -> &[u8] { unimplemented!() }\n+    fn metadata_encoding_version(&self) -> &[u8] { bug!(\"metadata_encoding_version\") }\n }\n \n "}, {"sha": "d3757629d30de5300391076f3f8375823afa71dd", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2fa867a2031bd580cd763fa9dcd8d7d4ba9e2bfc/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fa867a2031bd580cd763fa9dcd8d7d4ba9e2bfc/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=2fa867a2031bd580cd763fa9dcd8d7d4ba9e2bfc", "patch": "@@ -822,7 +822,7 @@ fn early_bound_lifetime_names(generics: &hir::Generics) -> Vec<ast::Name> {\n                         collector.visit_lifetime(bound);\n                     }\n                 }\n-                &hir::WherePredicate::EqPredicate(_) => unimplemented!()\n+                &hir::WherePredicate::EqPredicate(_) => bug!(\"unimplemented\")\n             }\n         }\n     }"}]}