{"sha": "110e59e70e21b2c93dc0cd48f22dea292cf62b75", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMGU1OWU3MGUyMWIyYzkzZGMwY2Q0OGYyMmRlYTI5MmNmNjJiNzU=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-17T18:02:56Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-22T17:05:58Z"}, "message": "Update library functions with stability attributes\n\nThis may not be strictly minimal, but all unstable functions also need a\n`rustc_const_unstable` attribute.", "tree": {"sha": "cb451a819e223065d7909b2460c670bc0bfea91e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb451a819e223065d7909b2460c670bc0bfea91e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/110e59e70e21b2c93dc0cd48f22dea292cf62b75", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/110e59e70e21b2c93dc0cd48f22dea292cf62b75", "html_url": "https://github.com/rust-lang/rust/commit/110e59e70e21b2c93dc0cd48f22dea292cf62b75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/110e59e70e21b2c93dc0cd48f22dea292cf62b75/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dd28c78c3c3f0fad72bfa41dd9655ce9d7b4bd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dd28c78c3c3f0fad72bfa41dd9655ce9d7b4bd5", "html_url": "https://github.com/rust-lang/rust/commit/3dd28c78c3c3f0fad72bfa41dd9655ce9d7b4bd5"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "f801c1ac75bc38af2383d67af98258c991b6dcb4", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=110e59e70e21b2c93dc0cd48f22dea292cf62b75", "patch": "@@ -217,6 +217,7 @@ impl<B: ?Sized + ToOwned> Cow<'_, B> {\n     /// assert!(!bull.is_borrowed());\n     /// ```\n     #[unstable(feature = \"cow_is_borrowed\", issue = \"65143\")]\n+    #[rustc_const_unstable(feature = \"const_cow_is_borrowed\", issue = \"65143\")]\n     pub const fn is_borrowed(&self) -> bool {\n         match *self {\n             Borrowed(_) => true,\n@@ -239,6 +240,7 @@ impl<B: ?Sized + ToOwned> Cow<'_, B> {\n     /// assert!(!bull.is_owned());\n     /// ```\n     #[unstable(feature = \"cow_is_borrowed\", issue = \"65143\")]\n+    #[rustc_const_unstable(feature = \"const_cow_is_borrowed\", issue = \"65143\")]\n     pub const fn is_owned(&self) -> bool {\n         !self.is_borrowed()\n     }"}, {"sha": "b33cb3ad8e8399486561f98f065615dcdb706d57", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=110e59e70e21b2c93dc0cd48f22dea292cf62b75", "patch": "@@ -86,9 +86,11 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n #![feature(const_btree_new)]\n+#![feature(const_fn)]\n #![feature(const_generics)]\n #![feature(const_in_array_repeat_expressions)]\n #![feature(cow_is_borrowed)]\n+#![feature(const_cow_is_borrowed)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]"}, {"sha": "e6da599006000dbdeef4f570fc993cab3d45372d", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=110e59e70e21b2c93dc0cd48f22dea292cf62b75", "patch": "@@ -150,6 +150,7 @@ impl<T> RawVec<T, Global> {\n impl<T, A: AllocRef> RawVec<T, A> {\n     /// Like `new`, but parameterized over the choice of allocator for\n     /// the returned `RawVec`.\n+    #[allow_internal_unstable(const_fn)]\n     pub const fn new_in(alloc: A) -> Self {\n         // `cap: 0` means \"unallocated\". zero-sized types are ignored.\n         Self { ptr: Unique::dangling(), cap: 0, alloc }"}, {"sha": "cff8ff9ac7ad9a20bcdddab15ef4a0b09523577c", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=110e59e70e21b2c93dc0cd48f22dea292cf62b75", "patch": "@@ -1,6 +1,7 @@\n #![feature(allocator_api)]\n #![feature(box_syntax)]\n #![feature(cow_is_borrowed)]\n+#![feature(const_cow_is_borrowed)]\n #![feature(drain_filter)]\n #![feature(exact_size_is_empty)]\n #![feature(new_uninit)]"}, {"sha": "a3fbed2ec1254d09c8aca3d891d0127acfe2105b", "filename": "library/core/src/alloc/layout.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Falloc%2Flayout.rs?ref=110e59e70e21b2c93dc0cd48f22dea292cf62b75", "patch": "@@ -177,6 +177,7 @@ impl Layout {\n     /// sentinel value. Types that lazily allocate must track initialization by\n     /// some other means.\n     #[unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n+    #[rustc_const_unstable(feature = \"alloc_layout_extra\", issue = \"55724\")]\n     #[inline]\n     pub const fn dangling(&self) -> NonNull<u8> {\n         // SAFETY: align is guaranteed to be non-zero"}, {"sha": "fa5655ca35f41b2f97e14ded32efd1ee464b1869", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=110e59e70e21b2c93dc0cd48f22dea292cf62b75", "patch": "@@ -56,6 +56,7 @@ unsafe impl Sync for ResumeTy {}\n #[lang = \"from_generator\"]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n+#[rustc_const_unstable(feature = \"gen_future\", issue = \"50547\")]\n #[inline]\n pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n where"}, {"sha": "86eda843c5bc32903d6187d4b74e595d6da07cbf", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=110e59e70e21b2c93dc0cd48f22dea292cf62b75", "patch": "@@ -75,11 +75,13 @@\n #![feature(const_float_bits_conv)]\n #![feature(const_overflowing_int_methods)]\n #![feature(const_int_unchecked_arith)]\n+#![feature(const_mut_refs)]\n #![feature(const_int_pow)]\n #![feature(constctlz)]\n #![feature(const_panic)]\n #![feature(const_pin)]\n #![feature(const_fn_union)]\n+#![feature(const_fn)]\n #![feature(const_generics)]\n #![feature(const_option)]\n #![feature(const_precise_live_drops)]"}, {"sha": "ba3d4c075e11f9e2830a8ea97c73361abac6ed78", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=110e59e70e21b2c93dc0cd48f22dea292cf62b75", "patch": "@@ -401,6 +401,7 @@ fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(\n }\n \n impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n+    #[allow_internal_unstable(const_fn)]\n     pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {\n         extern \"C\" fn run(\n             bridge: Bridge<'_>,\n@@ -413,6 +414,7 @@ impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n }\n \n impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {\n+    #[allow_internal_unstable(const_fn)]\n     pub const fn expand2(\n         f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n@@ -457,6 +459,7 @@ impl ProcMacro {\n         }\n     }\n \n+    #[allow_internal_unstable(const_fn)]\n     pub const fn custom_derive(\n         trait_name: &'static str,\n         attributes: &'static [&'static str],\n@@ -465,13 +468,15 @@ impl ProcMacro {\n         ProcMacro::CustomDerive { trait_name, attributes, client: Client::expand1(expand) }\n     }\n \n+    #[allow_internal_unstable(const_fn)]\n     pub const fn attr(\n         name: &'static str,\n         expand: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n         ProcMacro::Attr { name, client: Client::expand2(expand) }\n     }\n \n+    #[allow_internal_unstable(const_fn)]\n     pub const fn bang(\n         name: &'static str,\n         expand: fn(crate::TokenStream) -> crate::TokenStream,"}, {"sha": "daa577f74bac3af4de376dbc8d8de2f6a234a1a5", "filename": "library/proc_macro/src/bridge/scoped_cell.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs?ref=110e59e70e21b2c93dc0cd48f22dea292cf62b75", "patch": "@@ -35,6 +35,7 @@ impl<'a, 'b, T: LambdaL> DerefMut for RefMutL<'a, 'b, T> {\n pub struct ScopedCell<T: LambdaL>(Cell<<T as ApplyL<'static>>::Out>);\n \n impl<T: LambdaL> ScopedCell<T> {\n+    #[allow_internal_unstable(const_fn)]\n     pub const fn new(value: <T as ApplyL<'static>>::Out) -> Self {\n         ScopedCell(Cell::new(value))\n     }"}, {"sha": "f81ffd2bb9429811b26d67c77e16f9db2735ca97", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=110e59e70e21b2c93dc0cd48f22dea292cf62b75", "patch": "@@ -20,6 +20,7 @@\n )]\n #![feature(nll)]\n #![feature(staged_api)]\n+#![feature(const_fn)]\n #![feature(allow_internal_unstable)]\n #![feature(decl_macro)]\n #![feature(extern_types)]"}, {"sha": "309657e70424b1e5b0ff9df86181088cd1eb5dfd", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=110e59e70e21b2c93dc0cd48f22dea292cf62b75", "patch": "@@ -237,6 +237,7 @@\n #![feature(concat_idents)]\n #![feature(const_cstr_unchecked)]\n #![feature(const_fn_transmute)]\n+#![feature(const_fn)]\n #![feature(const_ipv6)]\n #![feature(const_raw_ptr_deref)]\n #![feature(const_ipv4)]\n@@ -306,6 +307,7 @@\n #![feature(str_internals)]\n #![feature(test)]\n #![feature(thread_local)]\n+#![feature(thread_local_internals)]\n #![feature(toowned_clone_into)]\n #![feature(total_cmp)]\n #![feature(trace_macros)]"}, {"sha": "676eadd1fac3b56cee5363441cd6c17ddc11e5c3", "filename": "library/std/src/sys_common/thread_local_key.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fthread_local_key.rs?ref=110e59e70e21b2c93dc0cd48f22dea292cf62b75", "patch": "@@ -117,6 +117,7 @@ pub struct Key {\n pub const INIT: StaticKey = StaticKey::new(None);\n \n impl StaticKey {\n+    #[rustc_const_unstable(feature = \"thread_local_internals\", issue = \"none\")]\n     pub const fn new(dtor: Option<unsafe extern \"C\" fn(*mut u8)>) -> StaticKey {\n         StaticKey { key: atomic::AtomicUsize::new(0), dtor }\n     }"}, {"sha": "784b376fcdc06185fa8aca1f8094806eaf266639", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/110e59e70e21b2c93dc0cd48f22dea292cf62b75/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=110e59e70e21b2c93dc0cd48f22dea292cf62b75", "patch": "@@ -225,6 +225,7 @@ impl<T: 'static> LocalKey<T> {\n         reason = \"recently added to create a key\",\n         issue = \"none\"\n     )]\n+    #[rustc_const_unstable(feature = \"thread_local_internals\", issue = \"none\")]\n     pub const unsafe fn new(inner: unsafe fn() -> Option<&'static T>) -> LocalKey<T> {\n         LocalKey { inner }\n     }\n@@ -497,6 +498,7 @@ pub mod os {\n     }\n \n     impl<T: 'static> Key<T> {\n+        #[rustc_const_unstable(feature = \"thread_local_internals\", issue = \"none\")]\n         pub const fn new() -> Key<T> {\n             Key { os: OsStaticKey::new(Some(destroy_value::<T>)), marker: marker::PhantomData }\n         }"}]}