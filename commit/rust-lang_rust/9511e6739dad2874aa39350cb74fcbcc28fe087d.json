{"sha": "9511e6739dad2874aa39350cb74fcbcc28fe087d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1MTFlNjczOWRhZDI4NzRhYTM5MzUwY2I3NGZjYmNjMjhmZTA4N2Q=", "commit": {"author": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-11-19T14:51:30Z"}, "committer": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2015-11-19T14:51:30Z"}, "message": "Update to latest rust nightly", "tree": {"sha": "9311a5bc77afb18fef6f3a106796b2dc4fda8ae0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9311a5bc77afb18fef6f3a106796b2dc4fda8ae0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9511e6739dad2874aa39350cb74fcbcc28fe087d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9511e6739dad2874aa39350cb74fcbcc28fe087d", "html_url": "https://github.com/rust-lang/rust/commit/9511e6739dad2874aa39350cb74fcbcc28fe087d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9511e6739dad2874aa39350cb74fcbcc28fe087d/comments", "author": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31969a388e61f019564ed67da20f3ad49d7ec7b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/31969a388e61f019564ed67da20f3ad49d7ec7b1", "html_url": "https://github.com/rust-lang/rust/commit/31969a388e61f019564ed67da20f3ad49d7ec7b1"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "a0101688668223bcf37f6d4b2f8e6f0b43910ed4", "filename": "src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattrs.rs?ref=9511e6739dad2874aa39350cb74fcbcc28fe087d", "patch": "@@ -49,7 +49,7 @@ fn is_relevant_item(item: &Item) -> bool {\n \n fn is_relevant_impl(item: &ImplItem) -> bool {\n     match item.node {\n-        MethodImplItem(_, ref block) => is_relevant_block(block),\n+        ImplItemKind::Method(_, ref block) => is_relevant_block(block),\n         _ => false\n     }\n }"}, {"sha": "1d2146537c98424b42a8fb1fde0f55044e2dc1ef", "filename": "src/eq_op.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feq_op.rs?ref=9511e6739dad2874aa39350cb74fcbcc28fe087d", "patch": "@@ -105,7 +105,6 @@ fn is_cast_ty_equal(left: &Ty, right: &Ty) -> bool {\n             is_cast_ty_equal(&*lrmut.ty, &*rrmut.ty),\n         (&TyPath(ref lq, ref lpath), &TyPath(ref rq, ref rpath)) =>\n             both(lq, rq, is_qself_equal) && is_path_equal(lpath, rpath),\n-        (&TyParen(ref lty), &TyParen(ref rty)) => is_cast_ty_equal(lty, rty),\n         (&TyInfer, &TyInfer) => true,\n         _ => false\n     }"}, {"sha": "25645ea87423cd577f36c7864a41f89e3e408c73", "filename": "src/len_zero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flen_zero.rs?ref=9511e6739dad2874aa39350cb74fcbcc28fe087d", "patch": "@@ -71,7 +71,7 @@ fn check_trait_items(cx: &LateContext, item: &Item, trait_items: &[P<TraitItem>]\n \n fn check_impl_items(cx: &LateContext, item: &Item, impl_items: &[P<ImplItem>]) {\n     fn is_named_self(item: &ImplItem, name: &str) -> bool {\n-        item.name.as_str() == name && if let MethodImplItem(ref sig, _) =\n+        item.name.as_str() == name && if let ImplItemKind::Method(ref sig, _) =\n             item.node { is_self_sig(sig) } else { false }\n     }\n "}, {"sha": "9b47a4d830f6883cebf1608d99e15d741806c301", "filename": "src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flifetimes.rs?ref=9511e6739dad2874aa39350cb74fcbcc28fe087d", "patch": "@@ -2,7 +2,7 @@ use rustc_front::hir::*;\n use reexport::*;\n use rustc::lint::*;\n use syntax::codemap::Span;\n-use rustc_front::visit::{Visitor, walk_ty, walk_ty_param_bound};\n+use rustc_front::intravisit::{Visitor, walk_ty, walk_ty_param_bound};\n use rustc::middle::def::Def::{DefTy, DefTrait};\n use std::collections::HashSet;\n \n@@ -29,7 +29,7 @@ impl LateLintPass for LifetimePass {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext, item: &ImplItem) {\n-        if let MethodImplItem(ref sig, _) = item.node {\n+        if let ImplItemKind::Method(ref sig, _) = item.node {\n             check_fn_inner(cx, &sig.decl, Some(&sig.explicit_self),\n                            &sig.generics, item.span);\n         }"}, {"sha": "92dff3a7d931f4fa3819c9158a947fd39ca7346f", "filename": "src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=9511e6739dad2874aa39350cb74fcbcc28fe087d", "patch": "@@ -1,7 +1,7 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n use reexport::*;\n-use rustc_front::visit::{Visitor, walk_expr, walk_block, walk_decl};\n+use rustc_front::intravisit::{Visitor, walk_expr, walk_block, walk_decl};\n use rustc::middle::ty;\n use rustc::middle::def::DefLocal;\n use consts::{constant_simple, Constant};"}, {"sha": "275de8d8ebdc8ddae2a57ad4f83fd7af6fcf5d61", "filename": "src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=9511e6739dad2874aa39350cb74fcbcc28fe087d", "patch": "@@ -77,7 +77,7 @@ impl LateLintPass for MethodsPass {\n         if let ItemImpl(_, _, _, None, ref ty, ref items) = item.node {\n             for implitem in items {\n                 let name = implitem.name;\n-                if let MethodImplItem(ref sig, _) = implitem.node {\n+                if let ImplItemKind::Method(ref sig, _) = implitem.node {\n                     // check missing trait implementations\n                     for &(method_name, n_args, self_kind, out_type, trait_name) in &TRAIT_METHODS {\n                         if_let_chain! {"}, {"sha": "9a8ce74e997b7e19157552c072c0d6d708c7b578", "filename": "src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=9511e6739dad2874aa39350cb74fcbcc28fe087d", "patch": "@@ -4,7 +4,7 @@ use rustc_front::hir::*;\n use reexport::*;\n use rustc_front::util::{is_comparison_binop, binop_to_string};\n use syntax::codemap::{Span, Spanned};\n-use rustc_front::visit::FnKind;\n+use rustc_front::intravisit::FnKind;\n use rustc::middle::ty;\n use rustc::middle::const_eval::ConstVal::Float;\n use rustc::middle::const_eval::eval_const_expr_partial;"}, {"sha": "78be2af121754c3cfbf15de54edfcc03e7cc78c2", "filename": "src/ptr_arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fptr_arg.rs?ref=9511e6739dad2874aa39350cb74fcbcc28fe087d", "patch": "@@ -34,7 +34,7 @@ impl LateLintPass for PtrArg {\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext, item: &ImplItem) {\n-        if let &MethodImplItem(ref sig, _) = &item.node {\n+        if let &ImplItemKind::Method(ref sig, _) = &item.node {\n             if let Some(Node::NodeItem(it)) = cx.tcx.map.find(cx.tcx.map.get_parent(item.id)) {\n                 if let ItemImpl(_, _, _, Some(_), _, _) = it.node {\n                     return; // ignore trait impls"}, {"sha": "3f72722333b1fe57f961563f85add3841ad9e2d8", "filename": "src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshadow.rs?ref=9511e6739dad2874aa39350cb74fcbcc28fe087d", "patch": "@@ -2,7 +2,7 @@ use std::ops::Deref;\n use rustc_front::hir::*;\n use reexport::*;\n use syntax::codemap::Span;\n-use rustc_front::visit::{Visitor, FnKind};\n+use rustc_front::intravisit::{Visitor, FnKind};\n \n use rustc::lint::*;\n use rustc::middle::def::Def::{DefVariant, DefStruct};\n@@ -237,7 +237,7 @@ fn check_expr(cx: &LateContext, expr: &Expr, bindings: &mut Vec<(Name, Span)>) {\n \n fn check_ty(cx: &LateContext, ty: &Ty, bindings: &mut Vec<(Name, Span)>) {\n     match ty.node {\n-        TyParen(ref sty) | TyObjectSum(ref sty, _) |\n+        TyObjectSum(ref sty, _) |\n         TyVec(ref sty) => check_ty(cx, sty, bindings),\n         TyFixedLengthVec(ref fty, ref expr) => {\n             check_ty(cx, fty, bindings);"}, {"sha": "506509cdfedcfca765c4d7cdd4983fe8d6b7da9b", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9511e6739dad2874aa39350cb74fcbcc28fe087d/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=9511e6739dad2874aa39350cb74fcbcc28fe087d", "patch": "@@ -3,7 +3,7 @@ use rustc_front::hir::*;\n use reexport::*;\n use rustc_front::util::{is_comparison_binop, binop_to_string};\n use syntax::codemap::Span;\n-use rustc_front::visit::{FnKind, Visitor, walk_ty};\n+use rustc_front::intravisit::{FnKind, Visitor, walk_ty};\n use rustc::middle::ty;\n use syntax::ast::IntTy::*;\n use syntax::ast::UintTy::*;\n@@ -305,8 +305,8 @@ impl LateLintPass for TypeComplexityPass {\n \n     fn check_impl_item(&mut self, cx: &LateContext, item: &ImplItem) {\n         match item.node {\n-            ConstImplItem(ref ty, _) |\n-            TypeImplItem(ref ty) => check_type(cx, ty),\n+            ImplItemKind::Const(ref ty, _) |\n+            ImplItemKind::Type(ref ty) => check_type(cx, ty),\n             // methods are covered by check_fn\n             _ => ()\n         }"}]}