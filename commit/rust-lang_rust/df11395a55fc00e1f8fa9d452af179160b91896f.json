{"sha": "df11395a55fc00e1f8fa9d452af179160b91896f", "node_id": "C_kwDOAAsO6NoAKGRmMTEzOTVhNTVmYzAwZTFmOGZhOWQ0NTJhZjE3OTE2MGI5MTg5NmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-03T18:58:55Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-03T18:58:55Z"}, "message": "Rollup merge of #101040 - danielhenrymantilla:no-bounds-for-default-annotated-derive, r=joshtriplett\n\nFix `#[derive(Default)]` on a generic `#[default]` enum adding unnecessary `Default` bounds\n\nThat is, given something like:\n\n```rs\n// #[default] on a generic enum does not add `Default` bounds to the type params.\n#[derive(Default)]\nenum MyOption<T> {\n    #[default]\n    None,\n    Some(T),\n}\n```\n\nthen `MyOption<T> : Default`_as currently implemented_ only holds when `T : Default`, as reported by ```@5225225``` [over Zulip](https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/.23.5Bderive.28Default.29.5D.20for.20enums.20with.20fields).\n\nThis is contrary to [what the accepted RFC proposes](https://rust-lang.github.io/rfcs/3107-derive-default-enum.html#generated-bounds) (_i.e._, that `T` be allowed not to be itself `Default`), and indeed seems to be a rather unnecessary limitation.", "tree": {"sha": "c1c189f5f5cbffd859b041958f508c22190df221", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1c189f5f5cbffd859b041958f508c22190df221"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df11395a55fc00e1f8fa9d452af179160b91896f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjOzDvCRBK7hj4Ov3rIwAAxBgIAHW0xZBBTASGiDRcfnFjfPnq\nufs+AYIdIkLuiA5HD+Tnew74z2ZWa0MjJirfgL0SaJgjIUWTkJfTwwSRUevVvDGW\nSc9JaE4TwU27A4UFkxmCikRWyz3RDNsdzjnKD4Orrc6U0XgEn1gBPSxeTMCSjlDo\nze9re8GufxaniydrorS/0S1zkya4jUAAs2heFHWqSJydu2y07ztfErHWPfjjVZPs\n0nQH0CLf4y7c2Ej6t+p2Hsb5yjmkTMTWzYBxUkPJuqNcrI0iOrZDSc03pXBRjYEd\n8rV2Oa0KSQ90jjZk4PBa36euCdRju57OES0vfUsjDbFZFJDKH3hyLexOfatT6hw=\n=31kd\n-----END PGP SIGNATURE-----\n", "payload": "tree c1c189f5f5cbffd859b041958f508c22190df221\nparent c7f1b8e41d45f54b080c9e816565d72756bf2416\nparent 3d4980bc8d8a58df217a6b659b9353a11ce4cd29\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1664823535 +0200\ncommitter GitHub <noreply@github.com> 1664823535 +0200\n\nRollup merge of #101040 - danielhenrymantilla:no-bounds-for-default-annotated-derive, r=joshtriplett\n\nFix `#[derive(Default)]` on a generic `#[default]` enum adding unnecessary `Default` bounds\n\nThat is, given something like:\n\n```rs\n// #[default] on a generic enum does not add `Default` bounds to the type params.\n#[derive(Default)]\nenum MyOption<T> {\n    #[default]\n    None,\n    Some(T),\n}\n```\n\nthen `MyOption<T> : Default`_as currently implemented_ only holds when `T : Default`, as reported by ```@5225225``` [over Zulip](https://rust-lang.zulipchat.com/#narrow/stream/122651-general/topic/.23.5Bderive.28Default.29.5D.20for.20enums.20with.20fields).\n\nThis is contrary to [what the accepted RFC proposes](https://rust-lang.github.io/rfcs/3107-derive-default-enum.html#generated-bounds) (_i.e._, that `T` be allowed not to be itself `Default`), and indeed seems to be a rather unnecessary limitation.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df11395a55fc00e1f8fa9d452af179160b91896f", "html_url": "https://github.com/rust-lang/rust/commit/df11395a55fc00e1f8fa9d452af179160b91896f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df11395a55fc00e1f8fa9d452af179160b91896f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7f1b8e41d45f54b080c9e816565d72756bf2416", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7f1b8e41d45f54b080c9e816565d72756bf2416", "html_url": "https://github.com/rust-lang/rust/commit/c7f1b8e41d45f54b080c9e816565d72756bf2416"}, {"sha": "3d4980bc8d8a58df217a6b659b9353a11ce4cd29", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d4980bc8d8a58df217a6b659b9353a11ce4cd29", "html_url": "https://github.com/rust-lang/rust/commit/3d4980bc8d8a58df217a6b659b9353a11ce4cd29"}], "stats": {"total": 79, "additions": 77, "deletions": 2}, "files": [{"sha": "7bd344467d03213130aa32ae46fad4f47875d853", "filename": "compiler/rustc_builtin_macros/src/deriving/bounds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -16,6 +16,7 @@ pub fn expand_deriving_copy(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(marker::Copy),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: true,"}, {"sha": "fa8685f5f4e5650882fa957c2368faa80e0abc0e", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -72,6 +72,7 @@ pub fn expand_deriving_clone(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(clone::Clone),\n+        skip_path_as_bound: false,\n         additional_bounds: bounds,\n         generics: Bounds::empty(),\n         supports_unions: true,"}, {"sha": "eab67b0d354cf7dd18be1b785c514c4debe47517", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -25,6 +25,7 @@ pub fn expand_deriving_eq(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::Eq),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: true,"}, {"sha": "7f117981a9a2fe73fdece52da04079838e815e0f", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -19,6 +19,7 @@ pub fn expand_deriving_ord(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::Ord),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "236cbccaf9fee6286494c1bfc08173c01f04716f", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -83,6 +83,7 @@ pub fn expand_deriving_partial_eq(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::PartialEq),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "4173403a1b84a4f4007d77aae5376ffc3e63a109", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -37,6 +37,7 @@ pub fn expand_deriving_partial_ord(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(cmp::PartialOrd),\n+        skip_path_as_bound: false,\n         additional_bounds: vec![],\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "2cf614ed9476c9435b50d7aaced16f097bb3cc39", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -20,6 +20,7 @@ pub fn expand_deriving_debug(\n     let trait_def = TraitDef {\n         span,\n         path: path_std!(fmt::Debug),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "d669f616802feda4bf06d489b3eaf7966977dd1a", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -23,6 +23,7 @@ pub fn expand_deriving_rustc_decodable(\n     let trait_def = TraitDef {\n         span,\n         path: Path::new_(vec![krate, sym::Decodable], vec![], PathKind::Global),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "17df9fb279ad6b808e57840c5d417e1639d8a144", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -24,6 +24,7 @@ pub fn expand_deriving_default(\n     let trait_def = TraitDef {\n         span,\n         path: Path::new(vec![kw::Default, sym::Default]),\n+        skip_path_as_bound: has_a_default_variant(item),\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,\n@@ -262,3 +263,22 @@ impl<'a, 'b> rustc_ast::visit::Visitor<'a> for DetectNonVariantDefaultAttr<'a, '\n         }\n     }\n }\n+\n+fn has_a_default_variant(item: &Annotatable) -> bool {\n+    struct HasDefaultAttrOnVariant {\n+        found: bool,\n+    }\n+\n+    impl<'ast> rustc_ast::visit::Visitor<'ast> for HasDefaultAttrOnVariant {\n+        fn visit_variant(&mut self, v: &'ast rustc_ast::Variant) {\n+            if v.attrs.iter().any(|attr| attr.has_name(kw::Default)) {\n+                self.found = true;\n+            }\n+            // no need to subrecurse.\n+        }\n+    }\n+\n+    let mut visitor = HasDefaultAttrOnVariant { found: false };\n+    item.visit_with(&mut visitor);\n+    visitor.found\n+}"}, {"sha": "f83f58b97d38ffb3566af5ad883ca3984e69b2aa", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -107,6 +107,7 @@ pub fn expand_deriving_rustc_encodable(\n     let trait_def = TraitDef {\n         span,\n         path: Path::new_(vec![krate, sym::Encodable], vec![], PathKind::Global),\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "6fbd99b5c71c5c4c44726b3be09fe22cf19be683", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -174,6 +174,7 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use std::cell::RefCell;\n use std::iter;\n+use std::ops::Not;\n use std::vec;\n use thin_vec::thin_vec;\n use ty::{Bounds, Path, Ref, Self_, Ty};\n@@ -187,6 +188,9 @@ pub struct TraitDef<'a> {\n     /// Path of the trait, including any type parameters\n     pub path: Path,\n \n+    /// Whether to skip adding the current trait as a bound to the type parameters of the type.\n+    pub skip_path_as_bound: bool,\n+\n     /// Additional bounds required of any type parameters of the type,\n     /// other than the current trait\n     pub additional_bounds: Vec<Ty>,\n@@ -596,7 +600,7 @@ impl<'a> TraitDef<'a> {\n                         cx.trait_bound(p.to_path(cx, self.span, type_ident, generics))\n                     }).chain(\n                         // require the current trait\n-                        iter::once(cx.trait_bound(trait_path.clone()))\n+                        self.skip_path_as_bound.not().then(|| cx.trait_bound(trait_path.clone()))\n                     ).chain(\n                         // also add in any bounds from the declaration\n                         param.bounds.iter().cloned()"}, {"sha": "6e9d5f08b9443dd22cc0ec40d828e6070306f405", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -22,6 +22,7 @@ pub fn expand_deriving_hash(\n     let hash_trait_def = TraitDef {\n         span,\n         path,\n+        skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n         generics: Bounds::empty(),\n         supports_unions: false,"}, {"sha": "1c7a501edc7055b30032b44f164c1e514bd15428", "filename": "src/test/ui/deriving/deriving-default-enum.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/src%2Ftest%2Fui%2Fderiving%2Fderiving-default-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/src%2Ftest%2Fui%2Fderiving%2Fderiving-default-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderiving%2Fderiving-default-enum.rs?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -12,6 +12,16 @@ enum Foo {\n     Beta(NotDefault),\n }\n \n+// #[default] on a generic enum does not add `Default` bounds to the type params.\n+#[derive(Default)]\n+enum MyOption<T> {\n+    #[default]\n+    None,\n+    #[allow(dead_code)]\n+    Some(T),\n+}\n+\n fn main() {\n     assert_eq!(Foo::default(), Foo::Alpha);\n+    assert!(matches!(MyOption::<NotDefault>::default(), MyOption::None));\n }"}, {"sha": "140cc5b0fd808fa21ec35ec19102744fed6dd7e0", "filename": "src/test/ui/macros/macros-nonfatal-errors.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.rs?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -116,3 +116,24 @@ fn main() {\n \n     trace_macros!(invalid); //~ ERROR\n }\n+\n+/// Check that `#[derive(Default)]` does use a `T : Default` bound when the\n+/// `#[default]` variant is `#[non_exhaustive]` (should this end up allowed).\n+const _: () = {\n+    #[derive(Default)]\n+    enum NonExhaustiveDefaultGeneric<T> {\n+        #[default]\n+        #[non_exhaustive]\n+        Foo, //~ ERROR default variant must be exhaustive\n+        Bar(T),\n+    }\n+\n+    fn assert_impls_default<T: Default>() {}\n+\n+    enum NotDefault {}\n+\n+    // Note: the `derive(Default)` currently bails early enough for trait-checking\n+    // not to happen. Should it bail late enough, or even pass, make sure to\n+    // assert that the following line fails.\n+    let _ = assert_impls_default::<NonExhaustiveDefaultGeneric<NotDefault>>;\n+};"}, {"sha": "d42f6c179b7ef1702cc267557def28279b7dba8e", "filename": "src/test/ui/macros/macros-nonfatal-errors.stderr", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df11395a55fc00e1f8fa9d452af179160b91896f/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df11395a55fc00e1f8fa9d452af179160b91896f/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacros-nonfatal-errors.stderr?ref=df11395a55fc00e1f8fa9d452af179160b91896f", "patch": "@@ -215,11 +215,21 @@ error: trace_macros! accepts only `true` or `false`\n LL |     trace_macros!(invalid);\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n+error: default variant must be exhaustive\n+  --> $DIR/macros-nonfatal-errors.rs:127:9\n+   |\n+LL |         #[non_exhaustive]\n+   |         ----------------- declared `#[non_exhaustive]` here\n+LL |         Foo,\n+   |         ^^^\n+   |\n+   = help: consider a manual implementation of `Default`\n+\n error: cannot find macro `llvm_asm` in this scope\n   --> $DIR/macros-nonfatal-errors.rs:99:5\n    |\n LL |     llvm_asm!(invalid);\n    |     ^^^^^^^^\n \n-error: aborting due to 27 previous errors\n+error: aborting due to 28 previous errors\n "}]}