{"sha": "592fecbafb9c2fe7f793bdb0529fcb25032bda6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MmZlY2JhZmI5YzJmZTdmNzkzYmRiMDUyOWZjYjI1MDMyYmRhNmU=", "commit": {"author": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-15T13:26:28Z"}, "committer": {"name": "LeSeulArtichaut", "email": "leseulartichaut@gmail.com", "date": "2021-05-21T16:29:51Z"}, "message": "Check for initialization of layout-restricted types", "tree": {"sha": "06f8e73374deda6bc0e003e22cda0ab9ca0e9dd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06f8e73374deda6bc0e003e22cda0ab9ca0e9dd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/592fecbafb9c2fe7f793bdb0529fcb25032bda6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/592fecbafb9c2fe7f793bdb0529fcb25032bda6e", "html_url": "https://github.com/rust-lang/rust/commit/592fecbafb9c2fe7f793bdb0529fcb25032bda6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7787bbaeffefc4c89910b1aac2cd370c2c27955", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7787bbaeffefc4c89910b1aac2cd370c2c27955", "html_url": "https://github.com/rust-lang/rust/commit/d7787bbaeffefc4c89910b1aac2cd370c2c27955"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "2eae6ec9e3bcd270a976da9399543d3a95fbed79", "filename": "compiler/rustc_mir_build/src/check_unsafety.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fcheck_unsafety.rs?ref=592fecbafb9c2fe7f793bdb0529fcb25032bda6e", "patch": "@@ -10,6 +10,8 @@ use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::symbol::Symbol;\n use rustc_span::Span;\n \n+use std::ops::Bound;\n+\n struct UnsafetyVisitor<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     thir: &'a Thir<'tcx>,\n@@ -174,6 +176,17 @@ impl<'a, 'tcx> Visitor<'a, 'tcx> for UnsafetyVisitor<'a, 'tcx> {\n                     self.requires_unsafe(expr.span, DerefOfRawPointer);\n                 }\n             }\n+            ExprKind::Adt {\n+                adt_def,\n+                variant_index: _,\n+                substs: _,\n+                user_ty: _,\n+                fields: _,\n+                base: _,\n+            } => match self.tcx.layout_scalar_valid_range(adt_def.did) {\n+                (Bound::Unbounded, Bound::Unbounded) => {}\n+                _ => self.requires_unsafe(expr.span, InitializingTypeWith),\n+            },\n             _ => {}\n         }\n \n@@ -216,7 +229,6 @@ impl BodyUnsafety {\n enum UnsafeOpKind {\n     CallToUnsafeFunction,\n     UseOfInlineAssembly,\n-    #[allow(dead_code)] // FIXME\n     InitializingTypeWith,\n     #[allow(dead_code)] // FIXME\n     CastOfPointerToInt,"}, {"sha": "f9ef7834e1e50068d51ab30f28470a6d45969a4f", "filename": "src/test/ui/unsafe/ranged_ints.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/src%2Ftest%2Fui%2Funsafe%2Franged_ints.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/src%2Ftest%2Fui%2Funsafe%2Franged_ints.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints.mir.stderr?ref=592fecbafb9c2fe7f793bdb0529fcb25032bda6e", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe function or block\n-  --> $DIR/ranged_ints.rs:7:14\n+  --> $DIR/ranged_ints.rs:10:14\n    |\n LL |     let _x = NonZero(0);\n    |              ^^^^^^^^^^ initializing type with `rustc_layout_scalar_valid_range` attr", "previous_filename": "src/test/ui/unsafe/ranged_ints.stderr"}, {"sha": "05efe87ba6e0352cf7ee2c0ebd95baab83be5d85", "filename": "src/test/ui/unsafe/ranged_ints.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/src%2Ftest%2Fui%2Funsafe%2Franged_ints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/src%2Ftest%2Fui%2Funsafe%2Franged_ints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints.rs?ref=592fecbafb9c2fe7f793bdb0529fcb25032bda6e", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(rustc_attrs)]\n \n #[rustc_layout_scalar_valid_range_start(1)]"}, {"sha": "f9ef7834e1e50068d51ab30f28470a6d45969a4f", "filename": "src/test/ui/unsafe/ranged_ints.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/src%2Ftest%2Fui%2Funsafe%2Franged_ints.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/src%2Ftest%2Fui%2Funsafe%2Franged_ints.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints.thir.stderr?ref=592fecbafb9c2fe7f793bdb0529fcb25032bda6e", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints.rs:10:14\n+   |\n+LL |     let _x = NonZero(0);\n+   |              ^^^^^^^^^^ initializing type with `rustc_layout_scalar_valid_range` attr\n+   |\n+   = note: initializing a layout restricted type's field with a value outside the valid range is undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "33d134c7ce59e8b7d2111d704d8de7ef91e77199", "filename": "src/test/ui/unsafe/ranged_ints_const.mir.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.mir.stderr?ref=592fecbafb9c2fe7f793bdb0529fcb25032bda6e", "patch": "@@ -1,5 +1,5 @@\n error[E0133]: initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe function or block\n-  --> $DIR/ranged_ints_const.rs:8:34\n+  --> $DIR/ranged_ints_const.rs:11:34\n    |\n LL | const fn foo() -> NonZero<u32> { NonZero(0) }\n    |                                  ^^^^^^^^^^ initializing type with `rustc_layout_scalar_valid_range` attr", "previous_filename": "src/test/ui/unsafe/ranged_ints_const.stderr"}, {"sha": "472b09681507591db8d42bf05c9b95b18e9ddda6", "filename": "src/test/ui/unsafe/ranged_ints_const.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.rs?ref=592fecbafb9c2fe7f793bdb0529fcb25032bda6e", "patch": "@@ -1,3 +1,6 @@\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(rustc_attrs)]\n \n #[rustc_layout_scalar_valid_range_start(1)]"}, {"sha": "33d134c7ce59e8b7d2111d704d8de7ef91e77199", "filename": "src/test/ui/unsafe/ranged_ints_const.thir.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.thir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.thir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints_const.thir.stderr?ref=592fecbafb9c2fe7f793bdb0529fcb25032bda6e", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: initializing type with `rustc_layout_scalar_valid_range` attr is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints_const.rs:11:34\n+   |\n+LL | const fn foo() -> NonZero<u32> { NonZero(0) }\n+   |                                  ^^^^^^^^^^ initializing type with `rustc_layout_scalar_valid_range` attr\n+   |\n+   = note: initializing a layout restricted type's field with a value outside the valid range is undefined behavior\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}, {"sha": "8293d029951faf0f219eef181b49f5136e12a347", "filename": "src/test/ui/unsafe/ranged_ints_macro.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/src%2Ftest%2Fui%2Funsafe%2Franged_ints_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/592fecbafb9c2fe7f793bdb0529fcb25032bda6e/src%2Ftest%2Fui%2Funsafe%2Franged_ints_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints_macro.rs?ref=592fecbafb9c2fe7f793bdb0529fcb25032bda6e", "patch": "@@ -1,4 +1,7 @@\n // build-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n #![feature(rustc_attrs)]\n \n macro_rules! apply {"}]}