{"sha": "248745ab0c67c86b7ef810d22a386b005c9a093b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ODc0NWFiMGM2N2M4NmI3ZWY4MTBkMjJhMzg2YjAwNWM5YTA5M2I=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-04T22:56:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-11-04T22:56:23Z"}, "message": "Auto merge of #55569 - durka:must-use-external-macro, r=alexcrichton\n\nenforce unused-must-use lint in macros\n\nFixes #55516 by turning on the UNUSED_MUST_USE lint within macros.", "tree": {"sha": "3688ad64e5b2fee5315ecd2825c4822a56765590", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3688ad64e5b2fee5315ecd2825c4822a56765590"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/248745ab0c67c86b7ef810d22a386b005c9a093b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/248745ab0c67c86b7ef810d22a386b005c9a093b", "html_url": "https://github.com/rust-lang/rust/commit/248745ab0c67c86b7ef810d22a386b005c9a093b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/248745ab0c67c86b7ef810d22a386b005c9a093b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6c5cf923489f4aed6c9e36a170fab9b6179d8da", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c5cf923489f4aed6c9e36a170fab9b6179d8da", "html_url": "https://github.com/rust-lang/rust/commit/e6c5cf923489f4aed6c9e36a170fab9b6179d8da"}, {"sha": "706a1cc0f21bb3212e1e1f9987f5be543ae12f6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/706a1cc0f21bb3212e1e1f9987f5be543ae12f6e", "html_url": "https://github.com/rust-lang/rust/commit/706a1cc0f21bb3212e1e1f9987f5be543ae12f6e"}], "stats": {"total": 60, "additions": 44, "deletions": 16}, "files": [{"sha": "6d365e6d1ecbf1c7d0066b342df471aed461454d", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/248745ab0c67c86b7ef810d22a386b005c9a093b/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248745ab0c67c86b7ef810d22a386b005c9a093b/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=248745ab0c67c86b7ef810d22a386b005c9a093b", "patch": "@@ -29,7 +29,8 @@ use rustc::hir;\n declare_lint! {\n     pub UNUSED_MUST_USE,\n     Warn,\n-    \"unused result of a type flagged as #[must_use]\"\n+    \"unused result of a type flagged as #[must_use]\",\n+    report_in_external_macro: true\n }\n \n declare_lint! {"}, {"sha": "a3694cd73ad53e7411f57e9aff07e2d4b20b737e", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/248745ab0c67c86b7ef810d22a386b005c9a093b/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248745ab0c67c86b7ef810d22a386b005c9a093b/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=248745ab0c67c86b7ef810d22a386b005c9a093b", "patch": "@@ -36,7 +36,6 @@ use syntax_pos::{MultiSpan, Span};\n \n use std::cell::{Cell, RefCell};\n use std::collections::BTreeMap;\n-use std::fmt::Write;\n use std::{mem, ptr};\n \n /// Contains data for specific types of import directives.\n@@ -780,17 +779,14 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n \n             let msg = format!(\"`{}` import is ambiguous\", name);\n             let mut err = self.session.struct_span_err(span, &msg);\n-            let mut suggestion_choices = String::new();\n+            let mut suggestion_choices = vec![];\n             if external_crate.is_some() {\n-                write!(suggestion_choices, \"`::{}`\", name);\n+                suggestion_choices.push(format!(\"`::{}`\", name));\n                 err.span_label(span,\n                     format!(\"can refer to external crate `::{}`\", name));\n             }\n             if let Some(result) = results.module_scope {\n-                if !suggestion_choices.is_empty() {\n-                    suggestion_choices.push_str(\" or \");\n-                }\n-                write!(suggestion_choices, \"`self::{}`\", name);\n+                suggestion_choices.push(format!(\"`self::{}`\", name));\n                 if uniform_paths_feature {\n                     err.span_label(result.span,\n                         format!(\"can refer to `self::{}`\", name));\n@@ -803,7 +799,7 @@ impl<'a, 'b:'a, 'c: 'b> ImportResolver<'a, 'b, 'c> {\n                 err.span_label(result.span,\n                     format!(\"shadowed by block-scoped `{}`\", name));\n             }\n-            err.help(&format!(\"write {} explicitly instead\", suggestion_choices));\n+            err.help(&format!(\"write {} explicitly instead\", suggestion_choices.join(\" or \")));\n             if uniform_paths_feature {\n                 err.note(\"relative `use` paths enabled by `#![feature(uniform_paths)]`\");\n             } else {"}, {"sha": "e6dd421f48f51dce9e782843955475e66fc6b734", "filename": "src/test/run-pass/impl-trait/example-calendar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/248745ab0c67c86b7ef810d22a386b005c9a093b/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248745ab0c67c86b7ef810d22a386b005c9a093b/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimpl-trait%2Fexample-calendar.rs?ref=248745ab0c67c86b7ef810d22a386b005c9a093b", "patch": "@@ -310,10 +310,10 @@ trait IteratorExt: Iterator + Sized {\n     where Self::Item: std::fmt::Display {\n         let mut s = String::new();\n         if let Some(e) = self.next() {\n-            write!(s, \"{}\", e);\n+            write!(s, \"{}\", e).unwrap();\n             for e in self {\n                 s.push_str(sep);\n-                write!(s, \"{}\", e);\n+                write!(s, \"{}\", e).unwrap();\n             }\n         }\n         s\n@@ -537,7 +537,7 @@ fn format_weeks(it: impl Iterator<Item = impl DateIterator>) -> impl Iterator<It\n                 first = false;\n             }\n \n-            write!(buf, \" {:>2}\", d.day());\n+            write!(buf, \" {:>2}\", d.day()).unwrap();\n         }\n \n         // Insert more filler at the end to fill up the remainder of the week,"}, {"sha": "ee597f11c6a9de1f355f95326af84b1e3f3a9d1e", "filename": "src/test/run-pass/macros/colorful-write-macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/248745ab0c67c86b7ef810d22a386b005c9a093b/src%2Ftest%2Frun-pass%2Fmacros%2Fcolorful-write-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248745ab0c67c86b7ef810d22a386b005c9a093b/src%2Ftest%2Frun-pass%2Fmacros%2Fcolorful-write-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacros%2Fcolorful-write-macros.rs?ref=248745ab0c67c86b7ef810d22a386b005c9a093b", "patch": "@@ -27,18 +27,18 @@ impl fmt::Write for Bar {\n }\n \n fn borrowing_writer_from_struct_and_formatting_struct_field(foo: Foo) {\n-    write!(foo.writer, \"{}\", foo.other);\n+    write!(foo.writer, \"{}\", foo.other).unwrap();\n }\n \n fn main() {\n     let mut w = Vec::new();\n-    write!(&mut w as &mut Write, \"\");\n-    write!(&mut w, \"\"); // should coerce\n+    write!(&mut w as &mut Write, \"\").unwrap();\n+    write!(&mut w, \"\").unwrap(); // should coerce\n     println!(\"ok\");\n \n     let mut s = Bar;\n     {\n         use std::fmt::Write;\n-        write!(&mut s, \"test\");\n+        write!(&mut s, \"test\").unwrap();\n     }\n }"}, {"sha": "ad7cc37da52ca3b3a6b7791ed4764fdc1ccfbb96", "filename": "src/test/ui/macros/must-use-in-macro-55516.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/248745ab0c67c86b7ef810d22a386b005c9a093b/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.rs", "raw_url": "https://github.com/rust-lang/rust/raw/248745ab0c67c86b7ef810d22a386b005c9a093b/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.rs?ref=248745ab0c67c86b7ef810d22a386b005c9a093b", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+// compile-flags: -Wunused\n+\n+// make sure write!() can't hide its unused Result\n+\n+fn main() {\n+    use std::fmt::Write;\n+    let mut example = String::new();\n+    write!(&mut example, \"{}\", 42); //~WARN must be used\n+}\n+"}, {"sha": "b03a5806da5c3d28837c0947fc95a85e69937581", "filename": "src/test/ui/macros/must-use-in-macro-55516.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/248745ab0c67c86b7ef810d22a386b005c9a093b/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/248745ab0c67c86b7ef810d22a386b005c9a093b/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmust-use-in-macro-55516.stderr?ref=248745ab0c67c86b7ef810d22a386b005c9a093b", "patch": "@@ -0,0 +1,10 @@\n+warning: unused `std::result::Result` that must be used\n+  --> $DIR/must-use-in-macro-55516.rs:19:5\n+   |\n+LL |     write!(&mut example, \"{}\", 42); //~WARN must be used\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-W unused-must-use` implied by `-W unused`\n+   = note: this `Result` may be an `Err` variant, which should be handled\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+"}]}