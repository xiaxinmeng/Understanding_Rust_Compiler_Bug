{"sha": "e7fa117ff8d9c9f6b82aa94dcfbef3ac05cbe68a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZmExMTdmZjhkOWM5ZjZiODJhYTk0ZGNmYmVmM2FjMDVjYmU2OGE=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-04T15:27:03Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-03-04T15:27:03Z"}, "message": "simplify cyclomatic complexity auxiliarly value computation\n\npreviously the HIR was unnecessarily traversed twice", "tree": {"sha": "a8579a2dd0435bc161131e91afdf3c236f849c46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8579a2dd0435bc161131e91afdf3c236f849c46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7fa117ff8d9c9f6b82aa94dcfbef3ac05cbe68a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7fa117ff8d9c9f6b82aa94dcfbef3ac05cbe68a", "html_url": "https://github.com/rust-lang/rust/commit/e7fa117ff8d9c9f6b82aa94dcfbef3ac05cbe68a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7fa117ff8d9c9f6b82aa94dcfbef3ac05cbe68a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0c2f61d7daf796302e39fd5c7ccb5cca0097e96", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0c2f61d7daf796302e39fd5c7ccb5cca0097e96", "html_url": "https://github.com/rust-lang/rust/commit/c0c2f61d7daf796302e39fd5c7ccb5cca0097e96"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "05f633ee0e404f0fbec7da72546e5161d512d35f", "filename": "src/cyclomatic_complexity.rs", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e7fa117ff8d9c9f6b82aa94dcfbef3ac05cbe68a/src%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7fa117ff8d9c9f6b82aa94dcfbef3ac05cbe68a/src%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcyclomatic_complexity.rs?ref=e7fa117ff8d9c9f6b82aa94dcfbef3ac05cbe68a", "patch": "@@ -48,18 +48,22 @@ impl CyclomaticComplexity {\n         let n = cfg.graph.len_nodes() as u64;\n         let e = cfg.graph.len_edges() as u64;\n         let cc = e + 2 - n;\n-        let mut arm_counter = MatchArmCounter(0);\n-        arm_counter.visit_block(block);\n-        let narms = arm_counter.0;\n-\n-        let mut diverge_counter = DivergenceCounter(0, &cx.tcx);\n-        diverge_counter.visit_block(block);\n-        let divergence = diverge_counter.0;\n-\n-        if cc + divergence < narms {\n-            report_cc_bug(cx, cc, narms, divergence, span);\n+        let mut helper = CCHelper {\n+            match_arms: 0,\n+            divergence: 0,\n+            tcx: &cx.tcx,\n+        };\n+        helper.visit_block(block);\n+        let CCHelper {\n+            match_arms,\n+            divergence,\n+            ..\n+        } = helper;\n+\n+        if cc + divergence < match_arms {\n+            report_cc_bug(cx, cc, match_arms, divergence, span);\n         } else {\n-            let rust_cc = cc + divergence - narms;\n+            let rust_cc = cc + divergence - match_arms;\n             if rust_cc > self.limit.limit() {\n                 span_help_and_lint(cx,\n                                    CYCLOMATIC_COMPLEXITY,\n@@ -98,35 +102,28 @@ impl LateLintPass for CyclomaticComplexity {\n     }\n }\n \n-struct MatchArmCounter(u64);\n+struct CCHelper<'a, 'tcx: 'a> {\n+    match_arms: u64,\n+    divergence: u64,\n+    tcx: &'a ty::TyCtxt<'tcx>,\n+}\n \n-impl<'a> Visitor<'a> for MatchArmCounter {\n+impl<'a, 'b, 'tcx> Visitor<'a> for CCHelper<'b, 'tcx> {\n     fn visit_expr(&mut self, e: &'a Expr) {\n         match e.node {\n             ExprMatch(_, ref arms, _) => {\n                 walk_expr(self, e);\n                 let arms_n: u64 = arms.iter().map(|arm| arm.pats.len() as u64).sum();\n                 if arms_n > 1 {\n-                    self.0 += arms_n - 2;\n+                    self.match_arms += arms_n - 2;\n                 }\n             }\n-            ExprClosure(..) => {}\n-            _ => walk_expr(self, e),\n-        }\n-    }\n-}\n-\n-struct DivergenceCounter<'a, 'tcx: 'a>(u64, &'a ty::TyCtxt<'tcx>);\n-\n-impl<'a, 'b, 'tcx> Visitor<'a> for DivergenceCounter<'b, 'tcx> {\n-    fn visit_expr(&mut self, e: &'a Expr) {\n-        match e.node {\n             ExprCall(ref callee, _) => {\n                 walk_expr(self, e);\n-                let ty = self.1.node_id_to_type(callee.id);\n+                let ty = self.tcx.node_id_to_type(callee.id);\n                 if let ty::TyBareFn(_, ty) = ty.sty {\n                     if ty.sig.skip_binder().output.diverges() {\n-                        self.0 += 1;\n+                        self.divergence += 1;\n                     }\n                 }\n             }"}]}