{"sha": "2dd268b652cb42f4ebaa145c9e50cc6509c47d26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZDI2OGI2NTJjYjQyZjRlYmFhMTQ1YzllNTBjYzY1MDljNDdkMjY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-20T14:42:34Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-11-20T15:22:17Z"}, "message": "alloc_jemalloc: don\u2019t assume MIN_ALIGN for small sizes\n\nSee previous commit\u2019s message for what is expected of allocators\nin general, and https://github.com/jemalloc/jemalloc/issues/1072\nfor discussion of what jemalloc does specifically.", "tree": {"sha": "b717ecc7302b1453a6f649d15fef33216be78411", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b717ecc7302b1453a6f649d15fef33216be78411"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dd268b652cb42f4ebaa145c9e50cc6509c47d26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dd268b652cb42f4ebaa145c9e50cc6509c47d26", "html_url": "https://github.com/rust-lang/rust/commit/2dd268b652cb42f4ebaa145c9e50cc6509c47d26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dd268b652cb42f4ebaa145c9e50cc6509c47d26/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21d899272a7fb39a497424e3260ddab773af7983", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d899272a7fb39a497424e3260ddab773af7983", "html_url": "https://github.com/rust-lang/rust/commit/21d899272a7fb39a497424e3260ddab773af7983"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "d3ce12056bb49e0d8114e5655872a87265f7cdb9", "filename": "src/liballoc/tests/heap.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2dd268b652cb42f4ebaa145c9e50cc6509c47d26/src%2Fliballoc%2Ftests%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd268b652cb42f4ebaa145c9e50cc6509c47d26/src%2Fliballoc%2Ftests%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fheap.rs?ref=2dd268b652cb42f4ebaa145c9e50cc6509c47d26", "patch": "@@ -20,6 +20,11 @@ fn alloc_system_overaligned_request() {\n     check_overalign_requests(System)\n }\n \n+#[test]\n+fn std_heap_overaligned_request() {\n+    check_overalign_requests(Heap)\n+}\n+\n fn check_overalign_requests<T: Alloc>(mut allocator: T) {\n     let size = 8;\n     let align = 16; // greater than size"}, {"sha": "e8a844228ba1432be51550a26ef38e47a554da2b", "filename": "src/liballoc_jemalloc/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2dd268b652cb42f4ebaa145c9e50cc6509c47d26/src%2Fliballoc_jemalloc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dd268b652cb42f4ebaa145c9e50cc6509c47d26/src%2Fliballoc_jemalloc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Flib.rs?ref=2dd268b652cb42f4ebaa145c9e50cc6509c47d26", "patch": "@@ -92,8 +92,8 @@ mod contents {\n         a.trailing_zeros() as c_int\n     }\n \n-    fn align_to_flags(align: usize) -> c_int {\n-        if align <= MIN_ALIGN {\n+    fn align_to_flags(align: usize, size: usize) -> c_int {\n+        if align <= MIN_ALIGN && align <= size {\n             0\n         } else {\n             mallocx_align(align)\n@@ -111,7 +111,7 @@ mod contents {\n     pub unsafe extern fn __rde_alloc(size: usize,\n                                      align: usize,\n                                      err: *mut u8) -> *mut u8 {\n-        let flags = align_to_flags(align);\n+        let flags = align_to_flags(align, size);\n         let ptr = mallocx(size as size_t, flags) as *mut u8;\n         if ptr.is_null() {\n             let layout = Layout::from_size_align_unchecked(size, align);\n@@ -132,7 +132,7 @@ mod contents {\n     pub unsafe extern fn __rde_dealloc(ptr: *mut u8,\n                                        size: usize,\n                                        align: usize) {\n-        let flags = align_to_flags(align);\n+        let flags = align_to_flags(align, size);\n         sdallocx(ptr as *mut c_void, size, flags);\n     }\n \n@@ -142,7 +142,7 @@ mod contents {\n                                            min: *mut usize,\n                                            max: *mut usize) {\n         let layout = &*(layout as *const Layout);\n-        let flags = align_to_flags(layout.align());\n+        let flags = align_to_flags(layout.align(), layout.size());\n         let size = nallocx(layout.size(), flags) as usize;\n         *min = layout.size();\n         if size > 0 {\n@@ -166,7 +166,7 @@ mod contents {\n             return 0 as *mut u8\n         }\n \n-        let flags = align_to_flags(new_align);\n+        let flags = align_to_flags(new_align, new_size);\n         let ptr = rallocx(ptr as *mut c_void, new_size, flags) as *mut u8;\n         if ptr.is_null() {\n             let layout = Layout::from_size_align_unchecked(new_size, new_align);\n@@ -181,10 +181,10 @@ mod contents {\n     pub unsafe extern fn __rde_alloc_zeroed(size: usize,\n                                             align: usize,\n                                             err: *mut u8) -> *mut u8 {\n-        let ptr = if align <= MIN_ALIGN {\n+        let ptr = if align <= MIN_ALIGN && align <= size {\n             calloc(size as size_t, 1) as *mut u8\n         } else {\n-            let flags = align_to_flags(align) | MALLOCX_ZERO;\n+            let flags = align_to_flags(align, size) | MALLOCX_ZERO;\n             mallocx(size as size_t, flags) as *mut u8\n         };\n         if ptr.is_null() {\n@@ -203,7 +203,7 @@ mod contents {\n                                             err: *mut u8) -> *mut u8 {\n         let p = __rde_alloc(size, align, err);\n         if !p.is_null() {\n-            let flags = align_to_flags(align);\n+            let flags = align_to_flags(align, size);\n             *excess = nallocx(size, flags) as usize;\n         }\n         return p\n@@ -220,7 +220,7 @@ mod contents {\n                                               err: *mut u8) -> *mut u8 {\n         let p = __rde_realloc(ptr, old_size, old_align, new_size, new_align, err);\n         if !p.is_null() {\n-            let flags = align_to_flags(new_align);\n+            let flags = align_to_flags(new_align, new_size);\n             *excess = nallocx(new_size, flags) as usize;\n         }\n         p\n@@ -244,7 +244,7 @@ mod contents {\n                                                new_size: usize,\n                                                new_align: usize) -> u8 {\n         if old_align == new_align {\n-            let flags = align_to_flags(new_align);\n+            let flags = align_to_flags(new_align, new_size);\n             (xallocx(ptr as *mut c_void, new_size, 0, flags) == new_size) as u8\n         } else {\n             0"}]}