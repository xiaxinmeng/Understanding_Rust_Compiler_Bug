{"sha": "dfd0afb991d4bfbd6fdf86adb631e428c185ac89", "node_id": "C_kwDOAAsO6NoAKGRmZDBhZmI5OTFkNGJmYmQ2ZmRmODZhZGI2MzFlNDI4YzE4NWFjODk", "commit": {"author": {"name": "Chris Denton", "email": "chris@chrisdenton.dev", "date": "2023-02-14T19:32:32Z"}, "committer": {"name": "Chris Denton", "email": "chris@chrisdenton.dev", "date": "2023-02-14T19:37:05Z"}, "message": "Revert to using `RtlGenRandom`\n\nThis is required due to `BCryptGenRandom` failing to load the necessary dll on some systems.", "tree": {"sha": "b005842305870ee38978cbf17f6cde3885f34b71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b005842305870ee38978cbf17f6cde3885f34b71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfd0afb991d4bfbd6fdf86adb631e428c185ac89", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmPr4uIACgkQcTRy8vRW\nJ97VFRAAsOjBuWKW30yODNABigwQkhMWjoUoK7j/dfiP1OVZVaED8D71J1HfQSOl\n31QgDssFF6cNjupr94fVgviF7W+2FaulIRwKw+koReXZO/iI8Rl3uLkwJEVP6Uh1\nxxpia1SSTQ9EWg0sE74h5mEn1uC50n6AV6Yj6lxMtB8VRs7OZZogOu5F1NXcKZM3\n6lVUhgLIXyPMyCNxuSxCFtAANnxpiQ+ZbATyW/kAOrmhhYCkTsYKUifxSg00W06I\nhyhtmmDS4qwRkoBRRV3M7sXOlADvbD7xG4v2sq4Gf4k4WxCyOooA6dVKtQOZLpSO\nssvW5unDLahdO2N6ZfCeBwIwq3AHEHwgs9b1Go7LE/CInPccT6qa0MeEstF0ilZN\n7KeoAnSrLLC3V4cgU+sSBWUeb/1OVecrsxyfh8vA8eiLCPPNY21B1pEbYVRPWhrd\nJW1dVMqExqIlqUGeFI+LJxnk0zVWhu6O4uG4gySlSIY2uS6AZGD1UE0J+cd3CPxZ\nGkPb3cPGRWTt1kK/cu19d3VqN3Nga9+VeSk4RAsSREyZ2oKaLDsxF1Ze4uTFdQVJ\nCDSFG9WXnIsU5zNDGbwZeIKe0qqCKqrPr+HZEfZi0Yh+9jSIdX7pgU2r+GSBrAdh\nyjgSAQ9S/7EtooLx5J2K/hXI2pvJMYzSjHaMZ6IgQsaayFEA1Ik=\n=SvIY\n-----END PGP SIGNATURE-----", "payload": "tree b005842305870ee38978cbf17f6cde3885f34b71\nparent 9bb6e60d1f1360234aae90c97964c0fa5524f141\nauthor Chris Denton <chris@chrisdenton.dev> 1676403152 +0000\ncommitter Chris Denton <chris@chrisdenton.dev> 1676403425 +0000\n\nRevert to using `RtlGenRandom`\n\nThis is required due to `BCryptGenRandom` failing to load the necessary dll on some systems.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfd0afb991d4bfbd6fdf86adb631e428c185ac89", "html_url": "https://github.com/rust-lang/rust/commit/dfd0afb991d4bfbd6fdf86adb631e428c185ac89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfd0afb991d4bfbd6fdf86adb631e428c185ac89/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bb6e60d1f1360234aae90c97964c0fa5524f141", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bb6e60d1f1360234aae90c97964c0fa5524f141", "html_url": "https://github.com/rust-lang/rust/commit/9bb6e60d1f1360234aae90c97964c0fa5524f141"}], "stats": {"total": 134, "additions": 31, "deletions": 103}, "files": [{"sha": "f58dcf1287bef02b2c4e9bb19d90782b7c1d04eb", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dfd0afb991d4bfbd6fdf86adb631e428c185ac89/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd0afb991d4bfbd6fdf86adb631e428c185ac89/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=dfd0afb991d4bfbd6fdf86adb631e428c185ac89", "patch": "@@ -295,8 +295,6 @@ pub fn nt_success(status: NTSTATUS) -> bool {\n     status >= 0\n }\n \n-// \"RNG\\0\"\n-pub const BCRYPT_RNG_ALGORITHM: &[u16] = &[b'R' as u16, b'N' as u16, b'G' as u16, 0];\n pub const BCRYPT_USE_SYSTEM_PREFERRED_RNG: DWORD = 0x00000002;\n \n #[repr(C)]\n@@ -834,6 +832,10 @@ if #[cfg(not(target_vendor = \"uwp\"))] {\n \n     #[link(name = \"advapi32\")]\n     extern \"system\" {\n+        // Forbidden when targeting UWP\n+        #[link_name = \"SystemFunction036\"]\n+        pub fn RtlGenRandom(RandomBuffer: *mut u8, RandomBufferLength: ULONG) -> BOOLEAN;\n+\n         // Allowed but unused by UWP\n         pub fn OpenProcessToken(\n             ProcessHandle: HANDLE,\n@@ -1258,13 +1260,6 @@ extern \"system\" {\n         cbBuffer: ULONG,\n         dwFlags: ULONG,\n     ) -> NTSTATUS;\n-    pub fn BCryptOpenAlgorithmProvider(\n-        phalgorithm: *mut BCRYPT_ALG_HANDLE,\n-        pszAlgId: LPCWSTR,\n-        pszimplementation: LPCWSTR,\n-        dwflags: ULONG,\n-    ) -> NTSTATUS;\n-    pub fn BCryptCloseAlgorithmProvider(hAlgorithm: BCRYPT_ALG_HANDLE, dwFlags: ULONG) -> NTSTATUS;\n }\n \n // Functions that aren't available on every version of Windows that we support,"}, {"sha": "cdf37cfe9117bfaffbaa29a3d38092b6eafd3ce1", "filename": "library/std/src/sys/windows/rand.rs", "status": "modified", "additions": 27, "deletions": 94, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/dfd0afb991d4bfbd6fdf86adb631e428c185ac89/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfd0afb991d4bfbd6fdf86adb631e428c185ac89/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Frand.rs?ref=dfd0afb991d4bfbd6fdf86adb631e428c185ac89", "patch": "@@ -1,106 +1,39 @@\n-//! # Random key generation\n-//!\n-//! This module wraps the RNG provided by the OS. There are a few different\n-//! ways to interface with the OS RNG so it's worth exploring each of the options.\n-//! Note that at the time of writing these all go through the (undocumented)\n-//! `bcryptPrimitives.dll` but they use different route to get there.\n-//!\n-//! Originally we were using [`RtlGenRandom`], however that function is\n-//! deprecated and warns it \"may be altered or unavailable in subsequent versions\".\n-//!\n-//! So we switched to [`BCryptGenRandom`] with the `BCRYPT_USE_SYSTEM_PREFERRED_RNG`\n-//! flag to query and find the system configured RNG. However, this change caused a small\n-//! but significant number of users to experience panics caused by a failure of\n-//! this function. See [#94098].\n-//!\n-//! The current version falls back to using `BCryptOpenAlgorithmProvider` if\n-//! `BCRYPT_USE_SYSTEM_PREFERRED_RNG` fails for any reason.\n-//!\n-//! [#94098]: https://github.com/rust-lang/rust/issues/94098\n-//! [`RtlGenRandom`]: https://docs.microsoft.com/en-us/windows/win32/api/ntsecapi/nf-ntsecapi-rtlgenrandom\n-//! [`BCryptGenRandom`]: https://docs.microsoft.com/en-us/windows/win32/api/bcrypt/nf-bcrypt-bcryptgenrandom\n+use crate::io;\n use crate::mem;\n use crate::ptr;\n use crate::sys::c;\n \n-/// Generates high quality secure random keys for use by [`HashMap`].\n-///\n-/// This is used to seed the default [`RandomState`].\n-///\n-/// [`HashMap`]: crate::collections::HashMap\n-/// [`RandomState`]: crate::collections::hash_map::RandomState\n pub fn hashmap_random_keys() -> (u64, u64) {\n-    Rng::SYSTEM.gen_random_keys().unwrap_or_else(fallback_rng)\n+    let mut v = (0, 0);\n+    let ret = unsafe {\n+        c::BCryptGenRandom(\n+            ptr::null_mut(),\n+            &mut v as *mut _ as *mut u8,\n+            mem::size_of_val(&v) as c::ULONG,\n+            c::BCRYPT_USE_SYSTEM_PREFERRED_RNG,\n+        )\n+    };\n+    if c::nt_success(ret) { v } else { fallback_rng() }\n }\n \n-struct Rng {\n-    algorithm: c::BCRYPT_ALG_HANDLE,\n-    flags: u32,\n-}\n-impl Rng {\n-    const SYSTEM: Self = unsafe { Self::new(ptr::null_mut(), c::BCRYPT_USE_SYSTEM_PREFERRED_RNG) };\n-\n-    /// Create the RNG from an existing algorithm handle.\n-    ///\n-    /// # Safety\n-    ///\n-    /// The handle must either be null or a valid algorithm handle.\n-    const unsafe fn new(algorithm: c::BCRYPT_ALG_HANDLE, flags: u32) -> Self {\n-        Self { algorithm, flags }\n-    }\n-\n-    /// Open a handle to the RNG algorithm.\n-    fn open() -> Result<Self, c::NTSTATUS> {\n-        use crate::sync::atomic::AtomicPtr;\n-        use crate::sync::atomic::Ordering::{Acquire, Release};\n-\n-        // An atomic is used so we don't need to reopen the handle every time.\n-        static HANDLE: AtomicPtr<crate::ffi::c_void> = AtomicPtr::new(ptr::null_mut());\n-\n-        let mut handle = HANDLE.load(Acquire);\n-        if handle.is_null() {\n-            let status = unsafe {\n-                c::BCryptOpenAlgorithmProvider(\n-                    &mut handle,\n-                    c::BCRYPT_RNG_ALGORITHM.as_ptr(),\n-                    ptr::null(),\n-                    0,\n-                )\n-            };\n-            if c::nt_success(status) {\n-                // If another thread opens a handle first then use that handle instead.\n-                let result = HANDLE.compare_exchange(ptr::null_mut(), handle, Release, Acquire);\n-                if let Err(previous_handle) = result {\n-                    // Close our handle and return the previous one.\n-                    unsafe { c::BCryptCloseAlgorithmProvider(handle, 0) };\n-                    handle = previous_handle;\n-                }\n-                Ok(unsafe { Self::new(handle, 0) })\n-            } else {\n-                Err(status)\n-            }\n-        } else {\n-            Ok(unsafe { Self::new(handle, 0) })\n-        }\n-    }\n+/// Generate random numbers using the fallback RNG function (RtlGenRandom)\n+///\n+/// This is necessary because of a failure to load the SysWOW64 variant of the\n+/// bcryptprimitives.dll library from code that lives in bcrypt.dll\n+/// See <https://bugzilla.mozilla.org/show_bug.cgi?id=1788004#c9>\n+#[cfg(not(target_vendor = \"uwp\"))]\n+#[inline(never)]\n+fn fallback_rng() -> (u64, u64) {\n+    let mut v = (0, 0);\n+    let ret =\n+        unsafe { c::RtlGenRandom(&mut v as *mut _ as *mut u8, mem::size_of_val(&v) as c::ULONG) };\n \n-    fn gen_random_keys(self) -> Result<(u64, u64), c::NTSTATUS> {\n-        let mut v = (0, 0);\n-        let status = unsafe {\n-            let size = mem::size_of_val(&v).try_into().unwrap();\n-            c::BCryptGenRandom(self.algorithm, ptr::addr_of_mut!(v).cast(), size, self.flags)\n-        };\n-        if c::nt_success(status) { Ok(v) } else { Err(status) }\n-    }\n+    if ret != 0 { v } else { panic!(\"fallback RNG broken: {}\", io::Error::last_os_error()) }\n }\n \n-/// Generate random numbers using the fallback RNG function\n+/// We can't use RtlGenRandom with UWP, so there is no fallback\n+#[cfg(target_vendor = \"uwp\")]\n #[inline(never)]\n-fn fallback_rng(rng_status: c::NTSTATUS) -> (u64, u64) {\n-    match Rng::open().and_then(|rng| rng.gen_random_keys()) {\n-        Ok(keys) => keys,\n-        Err(status) => {\n-            panic!(\"RNG broken: {rng_status:#x}, fallback RNG broken: {status:#x}\")\n-        }\n-    }\n+fn fallback_rng() -> (u64, u64) {\n+    panic!(\"fallback RNG broken: RtlGenRandom() not supported on UWP\");\n }"}]}