{"sha": "b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0MGVhMjA5ZTdmMTRjODE5M2RkZmM5ODE0Mzk2N2I2YTJmNGY1Yzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-08T15:46:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-08T15:46:38Z"}, "message": "Auto merge of #7051 - flip1995:rustup, r=flip1995\n\nRustup\n\nchangelog: none\n\nr? `@ghost`", "tree": {"sha": "e04978c50f11654d377ec4458e26771116805262", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e04978c50f11654d377ec4458e26771116805262"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "html_url": "https://github.com/rust-lang/rust/commit/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db6ea84f8790e9e8488ee917ab72af28a4eccf61", "url": "https://api.github.com/repos/rust-lang/rust/commits/db6ea84f8790e9e8488ee917ab72af28a4eccf61", "html_url": "https://github.com/rust-lang/rust/commit/db6ea84f8790e9e8488ee917ab72af28a4eccf61"}, {"sha": "61eafbb1e04582717d3564c6b565dbb456396a91", "url": "https://api.github.com/repos/rust-lang/rust/commits/61eafbb1e04582717d3564c6b565dbb456396a91", "html_url": "https://github.com/rust-lang/rust/commit/61eafbb1e04582717d3564c6b565dbb456396a91"}], "stats": {"total": 126, "additions": 65, "deletions": 61}, "files": [{"sha": "6e88394268042b5e69be6bafc87e48ac11e97297", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -13,6 +13,7 @@ use rustc_middle::{\n     ty::{self, FloatTy, IntTy, PolyFnSig, Ty},\n };\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use std::iter;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of unconstrained numeric literals which may cause default numeric fallback in type\n@@ -107,7 +108,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n         match &expr.kind {\n             ExprKind::Call(func, args) => {\n                 if let Some(fn_sig) = fn_sig_opt(self.cx, func.hir_id) {\n-                    for (expr, bound) in args.iter().zip(fn_sig.skip_binder().inputs().iter()) {\n+                    for (expr, bound) in iter::zip(*args, fn_sig.skip_binder().inputs()) {\n                         // Push found arg type, then visit arg.\n                         self.ty_bounds.push(TyBound::Ty(bound));\n                         self.visit_expr(expr);\n@@ -120,7 +121,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n             ExprKind::MethodCall(_, _, args, _) => {\n                 if let Some(def_id) = self.cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n                     let fn_sig = self.cx.tcx.fn_sig(def_id).skip_binder();\n-                    for (expr, bound) in args.iter().zip(fn_sig.inputs().iter()) {\n+                    for (expr, bound) in iter::zip(*args, fn_sig.inputs()) {\n                         self.ty_bounds.push(TyBound::Ty(bound));\n                         self.visit_expr(expr);\n                         self.ty_bounds.pop();"}, {"sha": "20288427b4a74550d2594ff36e4e3d2b284bf821", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -115,7 +115,7 @@ fn check_needless_must_use(\n                 );\n             },\n         );\n-    } else if !attr.is_value_str() && is_must_use_ty(cx, return_ty(cx, item_id)) {\n+    } else if attr.value_str().is_none() && is_must_use_ty(cx, return_ty(cx, item_id)) {\n         span_lint_and_help(\n             cx,\n             DOUBLE_MUST_USE,"}, {"sha": "7abd02c53f137343718fea62d8030a74a5259f58", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -4,6 +4,7 @@\n #![feature(box_syntax)]\n #![feature(drain_filter)]\n #![feature(in_band_lifetimes)]\n+#![feature(iter_zip)]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "e93b2e36b860ad234f0b57a5178f9ff48bf50702", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -13,6 +13,7 @@ use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use std::iter;\n \n declare_clippy_lint! {\n     /// **What it does:** Warns if a long integral or floating-point constant does\n@@ -349,7 +350,7 @@ impl LiteralDigitGrouping {\n \n         let group_sizes: Vec<usize> = num_lit.integer.split('_').map(str::len).collect();\n         if UUID_GROUP_LENS.len() == group_sizes.len() {\n-            UUID_GROUP_LENS.iter().zip(&group_sizes).all(|(&a, &b)| a == b)\n+            iter::zip(&UUID_GROUP_LENS, &group_sizes).all(|(&a, &b)| a == b)\n         } else {\n             false\n         }"}, {"sha": "3065bcc3e6c81e2b70baa3d3f69a92fa9c85524d", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -17,7 +17,7 @@ use rustc_middle::hir::map::Map;\n use rustc_middle::middle::region;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::{sym, Symbol};\n-use std::iter::Iterator;\n+use std::iter::{self, Iterator};\n use std::mem;\n \n /// Checks for looping over a range and then indexing a sequence with it.\n@@ -367,7 +367,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             },\n             ExprKind::MethodCall(_, _, args, _) => {\n                 let def_id = self.cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();\n-                for (ty, expr) in self.cx.tcx.fn_sig(def_id).inputs().skip_binder().iter().zip(args) {\n+                for (ty, expr) in iter::zip(self.cx.tcx.fn_sig(def_id).inputs().skip_binder(), args) {\n                     self.prefer_mutable = false;\n                     if let ty::Ref(_, _, mutbl) = *ty.kind() {\n                         if mutbl == Mutability::Mut {"}, {"sha": "96720764e1658979b5563f811a19bfa09df7cb42", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -142,12 +142,12 @@ fn never_loop_expr(expr: &Expr<'_>, main_loop_id: HirId) -> NeverLoopResult {\n             .map(|(o, _)| match o {\n                 InlineAsmOperand::In { expr, .. }\n                 | InlineAsmOperand::InOut { expr, .. }\n-                | InlineAsmOperand::Const { expr }\n                 | InlineAsmOperand::Sym { expr } => never_loop_expr(expr, main_loop_id),\n                 InlineAsmOperand::Out { expr, .. } => never_loop_expr_all(&mut expr.iter(), main_loop_id),\n                 InlineAsmOperand::SplitInOut { in_expr, out_expr, .. } => {\n                     never_loop_expr_all(&mut once(in_expr).chain(out_expr.iter()), main_loop_id)\n                 },\n+                InlineAsmOperand::Const { .. } => NeverLoopResult::Otherwise,\n             })\n             .fold(NeverLoopResult::Otherwise, combine_both),\n         ExprKind::Struct(_, _, None)"}, {"sha": "c8ee0abd3dfefa81cf6db517adbaba50ea815628", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -29,6 +29,7 @@ use rustc_span::source_map::{Span, Spanned};\n use rustc_span::sym;\n use std::cmp::Ordering;\n use std::collections::hash_map::Entry;\n+use std::iter;\n use std::ops::Bound;\n \n declare_clippy_lint! {\n@@ -1670,7 +1671,7 @@ where\n \n     values.sort();\n \n-    for (a, b) in values.iter().zip(values.iter().skip(1)) {\n+    for (a, b) in iter::zip(&values, values.iter().skip(1)) {\n         match (a, b) {\n             (&Kind::Start(_, ra), &Kind::End(_, rb)) => {\n                 if ra.node != rb.node {"}, {"sha": "dfab3e8a93112b447bed16a486dce483a2031333", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -93,9 +93,9 @@ impl MissingDoc {\n             return;\n         }\n \n-        let has_doc = attrs\n-            .iter()\n-            .any(|a| a.is_doc_comment() || a.doc_str().is_some() || a.is_value_str() || Self::has_include(a.meta()));\n+        let has_doc = attrs.iter().any(|a| {\n+            a.is_doc_comment() || a.doc_str().is_some() || a.value_str().is_some() || Self::has_include(a.meta())\n+        });\n         if !has_doc {\n             span_lint(\n                 cx,\n@@ -121,7 +121,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n         let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n-        self.check_missing_docs_attrs(cx, attrs, krate.item.span, \"the\", \"crate\");\n+        self.check_missing_docs_attrs(cx, attrs, krate.item.inner, \"the\", \"crate\");\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, it: &'tcx hir::Item<'_>) {"}, {"sha": "1786d5805d78b342dfa1b5c693d76b8db1aeae62", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -6,6 +6,7 @@ use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{Adt, Array, RawPtr, Ref, Slice, Tuple, Ty, TypeAndMut};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use std::iter;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for sets/maps with mutable key types.\n@@ -87,7 +88,7 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n fn check_sig<'tcx>(cx: &LateContext<'tcx>, item_hir_id: hir::HirId, decl: &hir::FnDecl<'_>) {\n     let fn_def_id = cx.tcx.hir().local_def_id(item_hir_id);\n     let fn_sig = cx.tcx.fn_sig(fn_def_id);\n-    for (hir_ty, ty) in decl.inputs.iter().zip(fn_sig.inputs().skip_binder().iter()) {\n+    for (hir_ty, ty) in iter::zip(decl.inputs, fn_sig.inputs().skip_binder()) {\n         check_ty(cx, hir_ty.span, ty);\n     }\n     check_ty(cx, decl.output.span(), cx.tcx.erase_late_bound_regions(fn_sig.output()));"}, {"sha": "cea6fce119561225d5e7dab1d527aff3f089fff6", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -4,6 +4,7 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::Subst;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use std::iter;\n \n declare_clippy_lint! {\n     /// **What it does:** Detects passing a mutable reference to a function that only\n@@ -64,7 +65,7 @@ fn check_arguments<'tcx>(\n     match type_definition.kind() {\n         ty::FnDef(..) | ty::FnPtr(_) => {\n             let parameters = type_definition.fn_sig(cx.tcx).skip_binder().inputs();\n-            for (argument, parameter) in arguments.iter().zip(parameters.iter()) {\n+            for (argument, parameter) in iter::zip(arguments, parameters) {\n                 match parameter.kind() {\n                     ty::Ref(_, _, Mutability::Not)\n                     | ty::RawPtr(ty::TypeAndMut {"}, {"sha": "6f80e447c7ddd71fd99a21e8d69a4f2890d860af", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -1,4 +1,5 @@\n use std::cmp;\n+use std::iter;\n \n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::is_self_ty;\n@@ -122,7 +123,7 @@ impl<'tcx> PassByRefOrValue {\n \n         let fn_body = cx.enclosing_body.map(|id| cx.tcx.hir().body(id));\n \n-        for (index, (input, &ty)) in decl.inputs.iter().zip(fn_sig.inputs()).enumerate() {\n+        for (index, (input, &ty)) in iter::zip(decl.inputs, fn_sig.inputs()).enumerate() {\n             // All spans generated from a proc-macro invocation are the same...\n             match span {\n                 Some(s) if s == input.span => return,"}, {"sha": "9bab783998aa5693088f8352a3319e55f23086a1", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{AdtDef, FieldDef, Ty, TyKind, VariantDef};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n+use std::iter;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for patterns that aren't exact representations of the types\n@@ -134,7 +135,7 @@ impl<'tcx> LateLintPass<'tcx> for PatternTypeMismatch {\n         hir_id: HirId,\n     ) {\n         if let Some(fn_sig) = cx.typeck_results().liberated_fn_sigs().get(hir_id) {\n-            for (param, ty) in body.params.iter().zip(fn_sig.inputs().iter()) {\n+            for (param, ty) in iter::zip(body.params, fn_sig.inputs()) {\n                 apply_lint(cx, param.pat, ty, DerefPossible::Impossible);\n             }\n         }"}, {"sha": "1c420a504272126ae8ad69d3830f75789933821d", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -44,7 +44,7 @@ fn get_trait_predicates_for_trait_id<'tcx>(\n     for (pred, _) in generics.predicates {\n         if_chain! {\n             if let PredicateKind::Trait(poly_trait_pred, _) = pred.kind().skip_binder();\n-            let trait_pred = cx.tcx.erase_late_bound_regions(ty::Binder::bind(poly_trait_pred));\n+            let trait_pred = cx.tcx.erase_late_bound_regions(pred.kind().rebind(poly_trait_pred));\n             if let Some(trait_def_id) = trait_id;\n             if trait_def_id == trait_pred.trait_ref.def_id;\n             then {\n@@ -58,12 +58,12 @@ fn get_trait_predicates_for_trait_id<'tcx>(\n fn get_projection_pred<'tcx>(\n     cx: &LateContext<'tcx>,\n     generics: GenericPredicates<'tcx>,\n-    pred: TraitPredicate<'tcx>,\n+    trait_pred: TraitPredicate<'tcx>,\n ) -> Option<ProjectionPredicate<'tcx>> {\n     generics.predicates.iter().find_map(|(proj_pred, _)| {\n-        if let ty::PredicateKind::Projection(proj_pred) = proj_pred.kind().skip_binder() {\n-            let projection_pred = cx.tcx.erase_late_bound_regions(ty::Binder::bind(proj_pred));\n-            if projection_pred.projection_ty.substs == pred.trait_ref.substs {\n+        if let ty::PredicateKind::Projection(pred) = proj_pred.kind().skip_binder() {\n+            let projection_pred = cx.tcx.erase_late_bound_regions(proj_pred.kind().rebind(pred));\n+            if projection_pred.projection_ty.substs == trait_pred.trait_ref.substs {\n                 return Some(projection_pred);\n             }\n         }"}, {"sha": "347d858b640264caed856933662baee8e59f7e94", "filename": "clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -9,6 +9,7 @@ use rustc_middle::ty::{self, subst::GenericArgKind};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n use rustc_span::symbol::Ident;\n+use std::iter;\n \n declare_clippy_lint! {\n     /// **What it does:**\n@@ -79,17 +80,14 @@ fn mirrored_exprs(\n             mirrored_exprs(cx, left_expr, a_ident, right_expr, b_ident)\n         },\n         // Two arrays with mirrored contents\n-        (ExprKind::Array(left_exprs), ExprKind::Array(right_exprs)) => left_exprs\n-            .iter()\n-            .zip(right_exprs.iter())\n-            .all(|(left, right)| mirrored_exprs(cx, left, a_ident, right, b_ident)),\n+        (ExprKind::Array(left_exprs), ExprKind::Array(right_exprs)) => {\n+            iter::zip(*left_exprs, *right_exprs).all(|(left, right)| mirrored_exprs(cx, left, a_ident, right, b_ident))\n+        },\n         // The two exprs are function calls.\n         // Check to see that the function itself and its arguments are mirrored\n         (ExprKind::Call(left_expr, left_args), ExprKind::Call(right_expr, right_args)) => {\n             mirrored_exprs(cx, left_expr, a_ident, right_expr, b_ident)\n-                && left_args\n-                    .iter()\n-                    .zip(right_args.iter())\n+                && iter::zip(*left_args, *right_args)\n                     .all(|(left, right)| mirrored_exprs(cx, left, a_ident, right, b_ident))\n         },\n         // The two exprs are method calls.\n@@ -100,16 +98,13 @@ fn mirrored_exprs(\n             ExprKind::MethodCall(right_segment, _, right_args, _),\n         ) => {\n             left_segment.ident == right_segment.ident\n-                && left_args\n-                    .iter()\n-                    .zip(right_args.iter())\n+                && iter::zip(*left_args, *right_args)\n                     .all(|(left, right)| mirrored_exprs(cx, left, a_ident, right, b_ident))\n         },\n         // Two tuples with mirrored contents\n-        (ExprKind::Tup(left_exprs), ExprKind::Tup(right_exprs)) => left_exprs\n-            .iter()\n-            .zip(right_exprs.iter())\n-            .all(|(left, right)| mirrored_exprs(cx, left, a_ident, right, b_ident)),\n+        (ExprKind::Tup(left_exprs), ExprKind::Tup(right_exprs)) => {\n+            iter::zip(*left_exprs, *right_exprs).all(|(left, right)| mirrored_exprs(cx, left, a_ident, right, b_ident))\n+        },\n         // Two binary ops, which are the same operation and which have mirrored arguments\n         (ExprKind::Binary(left_op, left_left, left_right), ExprKind::Binary(right_op, right_left, right_right)) => {\n             left_op.node == right_op.node\n@@ -146,10 +141,7 @@ fn mirrored_exprs(\n                 },\n             )),\n         ) => {\n-            (left_segments\n-                .iter()\n-                .zip(right_segments.iter())\n-                .all(|(left, right)| left.ident == right.ident)\n+            (iter::zip(*left_segments, *right_segments).all(|(left, right)| left.ident == right.ident)\n                 && left_segments\n                     .iter()\n                     .all(|seg| &seg.ident != a_ident && &seg.ident != b_ident))"}, {"sha": "4665eeeff7b21c2264c1469d0966cad2e7c780f7", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -306,7 +306,6 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n                 match op {\n                     hir::InlineAsmOperand::In { expr, .. }\n                     | hir::InlineAsmOperand::InOut { expr, .. }\n-                    | hir::InlineAsmOperand::Const { expr }\n                     | hir::InlineAsmOperand::Sym { expr } => print_expr(cx, expr, indent + 1),\n                     hir::InlineAsmOperand::Out { expr, .. } => {\n                         if let Some(expr) = expr {\n@@ -319,6 +318,10 @@ fn print_expr(cx: &LateContext<'_>, expr: &hir::Expr<'_>, indent: usize) {\n                             print_expr(cx, out_expr, indent + 1);\n                         }\n                     },\n+                    hir::InlineAsmOperand::Const { anon_const } => {\n+                        println!(\"{}anon_const:\", ind);\n+                        print_expr(cx, &cx.tcx.hir().body(anon_const.body).value, indent + 1);\n+                    },\n                 }\n             }\n         },"}, {"sha": "2a305d8bcbe0d1682b06840d864aac361df9d93d", "filename": "clippy_utils/src/consts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fconsts.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -15,6 +15,7 @@ use rustc_span::symbol::Symbol;\n use std::cmp::Ordering::{self, Equal};\n use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n+use std::iter;\n \n /// A `LitKind`-like enum to fold constant `Expr`s into.\n #[derive(Debug, Clone)]\n@@ -139,9 +140,7 @@ impl Constant {\n             (&Self::F64(l), &Self::F64(r)) => l.partial_cmp(&r),\n             (&Self::F32(l), &Self::F32(r)) => l.partial_cmp(&r),\n             (&Self::Bool(ref l), &Self::Bool(ref r)) => Some(l.cmp(r)),\n-            (&Self::Tuple(ref l), &Self::Tuple(ref r)) | (&Self::Vec(ref l), &Self::Vec(ref r)) => l\n-                .iter()\n-                .zip(r.iter())\n+            (&Self::Tuple(ref l), &Self::Tuple(ref r)) | (&Self::Vec(ref l), &Self::Vec(ref r)) => iter::zip(l, r)\n                 .map(|(li, ri)| Self::partial_cmp(tcx, cmp_type, li, ri))\n                 .find(|r| r.map_or(true, |o| o != Ordering::Equal))\n                 .unwrap_or_else(|| Some(l.len().cmp(&r.len()))),"}, {"sha": "f695f1a61e716c19ef909b9d86b09018e845783c", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -675,7 +675,8 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n                                 self.hash_expr(out_expr);\n                             }\n                         },\n-                        InlineAsmOperand::Const { expr } | InlineAsmOperand::Sym { expr } => self.hash_expr(expr),\n+                        InlineAsmOperand::Const { anon_const } => self.hash_body(anon_const.body),\n+                        InlineAsmOperand::Sym { expr } => self.hash_expr(expr),\n                     }\n                 }\n             },"}, {"sha": "185ef296f3f2c1c755e73b9675c99dfa8c2d3681", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -1,5 +1,6 @@\n #![feature(box_patterns)]\n #![feature(in_band_lifetimes)]\n+#![feature(iter_zip)]\n #![feature(rustc_private)]\n #![recursion_limit = \"512\"]\n #![allow(clippy::missing_errors_doc, clippy::missing_panics_doc, clippy::must_use_candidate)]"}, {"sha": "268bc5b320533536ea5fba32dd5d7bcf8c0ce9bf", "filename": "clippy_utils/src/numeric_literal.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_utils%2Fsrc%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fnumeric_literal.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -1,4 +1,5 @@\n use rustc_ast::ast::{Lit, LitFloatType, LitIntType, LitKind};\n+use std::iter;\n \n #[derive(Debug, PartialEq, Copy, Clone)]\n pub enum Radix {\n@@ -192,7 +193,7 @@ impl<'a> NumericLiteral<'a> {\n             }\n         }\n \n-        for (c, i) in digits.zip((0..group_size).cycle()) {\n+        for (c, i) in iter::zip(digits, (0..group_size).cycle()) {\n             if i == 0 {\n                 output.push('_');\n             }"}, {"sha": "b52cbf31e35aad71c4f8a31c704633e6b5dab059", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -210,21 +210,19 @@ fn check_statement(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, def_id: DefId, statemen\n         StatementKind::Assign(box (place, rval)) => {\n             check_place(tcx, *place, span, body)?;\n             check_rvalue(tcx, body, def_id, rval, span)\n-        }\n+        },\n \n-        StatementKind::FakeRead(_, place) |\n+        StatementKind::FakeRead(box (_, place)) => check_place(tcx, *place, span, body),\n         // just an assignment\n         StatementKind::SetDiscriminant { place, .. } => check_place(tcx, **place, span, body),\n \n         StatementKind::LlvmInlineAsm { .. } => Err((span, \"cannot use inline assembly in const fn\".into())),\n \n-        StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping{\n-          dst, src, count,\n-        }) => {\n-          check_operand(tcx, dst, span, body)?;\n-          check_operand(tcx, src, span, body)?;\n-          check_operand(tcx, count, span, body)\n-        }\n+        StatementKind::CopyNonOverlapping(box rustc_middle::mir::CopyNonOverlapping { dst, src, count }) => {\n+            check_operand(tcx, dst, span, body)?;\n+            check_operand(tcx, src, span, body)?;\n+            check_operand(tcx, count, span, body)\n+        },\n         // These are all NOPs\n         StatementKind::StorageLive(_)\n         | StatementKind::StorageDead(_)"}, {"sha": "7e4d12b8632be48d274287e40f5e14a853687759", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-03-25\"\n+channel = \"nightly-2021-04-08\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "be4348e2bb71c96912d90bd4b558c79232eaa0a6", "filename": "tests/ui/crate_level_checks/no_std_main_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/tests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/tests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrate_level_checks%2Fno_std_main_recursion.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -1,8 +1,8 @@\n+// compile-flags: -Clink-arg=-nostartfiles\n // ignore-macos\n // ignore-windows\n \n-#![feature(lang_items, link_args, start, libc)]\n-#![link_args = \"-nostartfiles\"]\n+#![feature(lang_items, start, libc)]\n #![no_std]\n \n use core::panic::PanicInfo;"}, {"sha": "235e0fc51799fad3d001e5b80cb54c481e164d77", "filename": "tests/ui/empty_loop_no_std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/tests%2Fui%2Fempty_loop_no_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/tests%2Fui%2Fempty_loop_no_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_loop_no_std.rs?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -1,9 +1,9 @@\n+// compile-flags: -Clink-arg=-nostartfiles\n // ignore-macos\n // ignore-windows\n \n #![warn(clippy::empty_loop)]\n-#![feature(lang_items, link_args, start, libc)]\n-#![link_args = \"-nostartfiles\"]\n+#![feature(lang_items, start, libc)]\n #![no_std]\n \n use core::panic::PanicInfo;"}, {"sha": "0aa1b55e58c56c9196adfced013db68df75b384a", "filename": "tests/ui/write_literal_2.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/tests%2Fui%2Fwrite_literal_2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b40ea209e7f14c8193ddfc98143967b6a2f4f5c9/tests%2Fui%2Fwrite_literal_2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwrite_literal_2.stderr?ref=b40ea209e7f14c8193ddfc98143967b6a2f4f5c9", "patch": "@@ -75,8 +75,9 @@ LL |         \"1\", \"2\", \"3\",\n    |\n help: try this\n    |\n-LL |         \"some 1{} / {}\", \"2\", \"3\",\n-   |               ^        --\n+LL |         \"some 1/\n+LL |         {} / {}\", \"2\", \"3\",\n+   |\n \n error: literal with an empty format string\n   --> $DIR/write_literal_2.rs:25:14"}]}