{"sha": "a4df35f2bcb9a399b2d4a1aa3c1def7682f9cb62", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0ZGYzNWYyYmNiOWEzOTliMmQ0YTFhYTNjMWRlZjc2ODJmOWNiNjI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-23T16:39:24Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-24T00:57:07Z"}, "message": "cleanup warnings from libsyntax", "tree": {"sha": "60562a6b2d88d860ea8412b31da889a0e89e62e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60562a6b2d88d860ea8412b31da889a0e89e62e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4df35f2bcb9a399b2d4a1aa3c1def7682f9cb62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4df35f2bcb9a399b2d4a1aa3c1def7682f9cb62", "html_url": "https://github.com/rust-lang/rust/commit/a4df35f2bcb9a399b2d4a1aa3c1def7682f9cb62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4df35f2bcb9a399b2d4a1aa3c1def7682f9cb62/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "609a9e69e1c1def4d570cfb3c31640200ef738c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/609a9e69e1c1def4d570cfb3c31640200ef738c9", "html_url": "https://github.com/rust-lang/rust/commit/609a9e69e1c1def4d570cfb3c31640200ef738c9"}], "stats": {"total": 11, "additions": 4, "deletions": 7}, "files": [{"sha": "a71f0ef20647fb7638f19dd70f6418780b53e3bc", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a4df35f2bcb9a399b2d4a1aa3c1def7682f9cb62/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4df35f2bcb9a399b2d4a1aa3c1def7682f9cb62/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a4df35f2bcb9a399b2d4a1aa3c1def7682f9cb62", "patch": "@@ -17,9 +17,8 @@ use abi::AbiSet;\n use opt_vec::OptVec;\n use parse::token::get_ident_interner;\n \n-use core::cast;\n use core::hashmap::HashMap;\n-use core::option::{Option};\n+use core::option::Option;\n use core::to_bytes::IterBytes;\n use core::to_bytes;\n use core::to_str::ToStr;"}, {"sha": "da59059a0cc4104b45c1bd51cad63eb4901a6613", "filename": "src/libsyntax/ext/pipes/ast_builder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4df35f2bcb9a399b2d4a1aa3c1def7682f9cb62/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4df35f2bcb9a399b2d4a1aa3c1def7682f9cb62/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes%2Fast_builder.rs?ref=a4df35f2bcb9a399b2d4a1aa3c1def7682f9cb62", "patch": "@@ -15,11 +15,9 @@\n \n use core::prelude::*;\n \n-use abi::AbiSet;\n use ast::ident;\n use ast;\n use codemap::span;\n-// use ext::quote::rt::*;\n \n // Transitional reexports so qquote can find the paths it is looking for\n mod syntax {"}, {"sha": "b8993520ae4cca15b774dc66bfba44071d10fb8b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a4df35f2bcb9a399b2d4a1aa3c1def7682f9cb62/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4df35f2bcb9a399b2d4a1aa3c1def7682f9cb62/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a4df35f2bcb9a399b2d4a1aa3c1def7682f9cb62", "patch": "@@ -2752,7 +2752,7 @@ pub impl Parser {\n             match *self.token {\n                 token::SEMI => {\n                     if !vec::is_empty(attributes_box) {\n-                        self.span_err(*self.last_span,~\"expected item after attributes\");\n+                        self.span_err(*self.last_span, \"expected item after attributes\");\n                         attributes_box = ~[];\n                     }\n                     self.bump(); // empty\n@@ -2823,7 +2823,7 @@ pub impl Parser {\n         }\n \n         if !vec::is_empty(attributes_box) {\n-            self.span_err(*self.last_span,~\"expected item after attributes\");\n+            self.span_err(*self.last_span, \"expected item after attributes\");\n         }\n \n         let hi = self.span.hi;\n@@ -3742,7 +3742,7 @@ pub impl Parser {\n         } = self.parse_foreign_items(first_item_attrs, true);\n         if (! attrs_remaining.is_empty()) {\n             self.span_err(*self.last_span,\n-                          ~\"expected item after attributes\");\n+                          \"expected item after attributes\");\n         }\n         assert!(*self.token == token::RBRACE);\n         ast::foreign_mod {"}]}