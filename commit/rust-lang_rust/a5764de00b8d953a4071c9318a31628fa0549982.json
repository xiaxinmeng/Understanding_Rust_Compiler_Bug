{"sha": "a5764de00b8d953a4071c9318a31628fa0549982", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NzY0ZGUwMGI4ZDk1M2E0MDcxYzkzMThhMzE2MjhmYTA1NDk5ODI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-06-14T11:30:42Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-07-01T10:13:21Z"}, "message": "expand: Stop using nonterminals for passing tokens to attribute and derive macros", "tree": {"sha": "441f95269c020d306200131097ad7e34bdf7d2ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/441f95269c020d306200131097ad7e34bdf7d2ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5764de00b8d953a4071c9318a31628fa0549982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5764de00b8d953a4071c9318a31628fa0549982", "html_url": "https://github.com/rust-lang/rust/commit/a5764de00b8d953a4071c9318a31628fa0549982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5764de00b8d953a4071c9318a31628fa0549982/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d462551a8600e57d8b6f87e71ea56868bc5da6cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/d462551a8600e57d8b6f87e71ea56868bc5da6cf", "html_url": "https://github.com/rust-lang/rust/commit/d462551a8600e57d8b6f87e71ea56868bc5da6cf"}], "stats": {"total": 206, "additions": 118, "deletions": 88}, "files": [{"sha": "34b8e6a285cd57572c5027f4b214603ab2d98368", "filename": "src/librustc_ast/token.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Flibrustc_ast%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Flibrustc_ast%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Ftoken.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -11,7 +11,7 @@ use crate::tokenstream::TokenTree;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_macros::HashStable_Generic;\n-use rustc_span::symbol::kw;\n+use rustc_span::symbol::{kw, sym};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{self, Span, DUMMY_SP};\n use std::borrow::Cow;\n@@ -785,6 +785,26 @@ impl Nonterminal {\n             NtTT(tt) => tt.span(),\n         }\n     }\n+\n+    /// This nonterminal looks like some specific enums from\n+    /// `proc-macro-hack` and `procedural-masquerade` crates.\n+    /// We need to maintain some special pretty-printing behavior for them due to incorrect\n+    /// asserts in old versions of those crates and their wide use in the ecosystem.\n+    /// See issue #73345 for more details.\n+    /// FIXME: Remove this eventually.\n+    pub fn pretty_printing_compatibility_hack(&self) -> bool {\n+        if let NtItem(item) = self {\n+            let name = item.ident.name;\n+            if name == sym::ProceduralMasqueradeDummyType || name == sym::ProcMacroHack {\n+                if let ast::ItemKind::Enum(enum_def, _) = &item.kind {\n+                    if let [variant] = &*enum_def.variants {\n+                        return variant.ident.name == sym::Input;\n+                    }\n+                }\n+            }\n+        }\n+        false\n+    }\n }\n \n impl PartialEq for Nonterminal {"}, {"sha": "4740b2d9cce81a8db86b55af5d43b5abda29d864", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -148,9 +148,14 @@ pub fn to_string(f: impl FnOnce(&mut State<'_>)) -> String {\n     printer.s.eof()\n }\n \n-// This makes comma-separated lists look slightly nicer,\n-// and also addresses a specific regression described in issue #63896.\n+// This makes printed token streams look slightly nicer,\n+// and also addresses some specific regressions described in #63896 and #73345.\n fn tt_prepend_space(tt: &TokenTree, prev: &TokenTree) -> bool {\n+    if let TokenTree::Token(token) = prev {\n+        if let token::DocComment(s) = token.kind {\n+            return !s.as_str().starts_with(\"//\");\n+        }\n+    }\n     match tt {\n         TokenTree::Token(token) => match token.kind {\n             token::Comma => false,\n@@ -163,7 +168,14 @@ fn tt_prepend_space(tt: &TokenTree, prev: &TokenTree) -> bool {\n             },\n             _ => true,\n         },\n-        _ => true,\n+        TokenTree::Delimited(_, DelimToken::Bracket, _) => match prev {\n+            TokenTree::Token(token) => match token.kind {\n+                token::Pound => false,\n+                _ => true,\n+            },\n+            _ => true,\n+        },\n+        TokenTree::Delimited(..) => true,\n     }\n }\n "}, {"sha": "82f199be6c62dc2b9ffe9e315c13bb9ed39a7aa1", "filename": "src/librustc_expand/base.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Flibrustc_expand%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Flibrustc_expand%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fbase.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -4,14 +4,14 @@ use crate::module::DirectoryOwnership;\n use rustc_ast::ast::{self, Attribute, NodeId, PatKind};\n use rustc_ast::mut_visit::{self, MutVisitor};\n use rustc_ast::ptr::P;\n-use rustc_ast::token::{self, FlattenGroup};\n-use rustc_ast::tokenstream::{self, TokenStream, TokenTree};\n+use rustc_ast::token;\n+use rustc_ast::tokenstream::{self, TokenStream};\n use rustc_ast::visit::{AssocCtxt, Visitor};\n use rustc_attr::{self as attr, Deprecation, HasAttrs, Stability};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_errors::{DiagnosticBuilder, ErrorReported};\n-use rustc_parse::{self, parser, MACRO_ARGUMENTS};\n+use rustc_parse::{self, nt_to_tokenstream, parser, MACRO_ARGUMENTS};\n use rustc_session::{parse::ParseSess, Limit};\n use rustc_span::def_id::DefId;\n use rustc_span::edition::Edition;\n@@ -120,10 +120,7 @@ impl Annotatable {\n         }\n     }\n \n-    crate fn into_tokens(self) -> TokenStream {\n-        // `Annotatable` can be converted into tokens directly, but we\n-        // are packing it into a nonterminal as a piece of AST to make\n-        // the produced token stream look nicer in pretty-printed form.\n+    crate fn into_tokens(self, sess: &ParseSess) -> TokenStream {\n         let nt = match self {\n             Annotatable::Item(item) => token::NtItem(item),\n             Annotatable::TraitItem(item) | Annotatable::ImplItem(item) => {\n@@ -142,7 +139,7 @@ impl Annotatable {\n             | Annotatable::StructField(..)\n             | Annotatable::Variant(..) => panic!(\"unexpected annotatable\"),\n         };\n-        TokenTree::token(token::Interpolated(Lrc::new(nt), FlattenGroup::Yes), DUMMY_SP).into()\n+        nt_to_tokenstream(&nt, sess, DUMMY_SP)\n     }\n \n     pub fn expect_item(self) -> P<ast::Item> {"}, {"sha": "bd7a094c5e355737280dade8ea08d0a9748c6f39", "filename": "src/librustc_expand/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Flibrustc_expand%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Flibrustc_expand%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fexpand.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -705,7 +705,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 SyntaxExtensionKind::Attr(expander) => {\n                     self.gate_proc_macro_input(&item);\n                     self.gate_proc_macro_attr_item(span, &item);\n-                    let tokens = item.into_tokens();\n+                    let tokens = item.into_tokens(self.cx.parse_sess);\n                     let attr_item = attr.unwrap_normal_item();\n                     if let MacArgs::Eq(..) = attr_item.args {\n                         self.cx.span_err(span, \"key-value macro attributes are not supported\");"}, {"sha": "8fae64161e7fdc7e1b4921acecb3925986b390b6", "filename": "src/librustc_expand/proc_macro.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Flibrustc_expand%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Flibrustc_expand%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -3,9 +3,10 @@ use crate::proc_macro_server;\n \n use rustc_ast::ast::{self, ItemKind, MetaItemKind, NestedMetaItem};\n use rustc_ast::token::{self, FlattenGroup};\n-use rustc_ast::tokenstream::{self, TokenStream};\n+use rustc_ast::tokenstream::{TokenStream, TokenTree};\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, ErrorReported};\n+use rustc_parse::nt_to_tokenstream;\n use rustc_span::symbol::sym;\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -102,8 +103,13 @@ impl MultiItemModifier for ProcMacroDerive {\n             }\n         }\n \n-        let token = token::Interpolated(Lrc::new(token::NtItem(item)), FlattenGroup::Yes);\n-        let input = tokenstream::TokenTree::token(token, DUMMY_SP).into();\n+        let item = token::NtItem(item);\n+        let input = if item.pretty_printing_compatibility_hack() {\n+            TokenTree::token(token::Interpolated(Lrc::new(item), FlattenGroup::Yes), DUMMY_SP)\n+                .into()\n+        } else {\n+            nt_to_tokenstream(&item, ecx.parse_sess, DUMMY_SP)\n+        };\n \n         let server = proc_macro_server::Rustc::new(ecx);\n         let stream = match self.client.run(&EXEC_STRATEGY, server, input) {"}, {"sha": "29f954b41b504e61632b341ac8ffcbe2618aa844", "filename": "src/librustc_expand/proc_macro_server.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Flibrustc_expand%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Flibrustc_expand%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_expand%2Fproc_macro_server.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -180,13 +180,17 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n                 tt!(Punct::new('#', false))\n             }\n \n-            Interpolated(nt, flatten) => {\n+            Interpolated(nt, _) => {\n                 let stream = nt_to_tokenstream(&nt, sess, span);\n                 TokenTree::Group(Group {\n                     delimiter: Delimiter::None,\n                     stream,\n                     span: DelimSpan::from_single(span),\n-                    flatten,\n+                    flatten: if nt.pretty_printing_compatibility_hack() {\n+                        FlattenGroup::Yes\n+                    } else {\n+                        FlattenGroup::No\n+                    },\n                 })\n             }\n "}, {"sha": "9b51d5dccb4a33696b70008bea1071656bbf157b", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -401,6 +401,7 @@ symbols! {\n         infer_outlives_requirements,\n         infer_static_outlives_requirements,\n         inline,\n+        Input,\n         intel,\n         into_iter,\n         IntoIterator,\n@@ -588,6 +589,8 @@ symbols! {\n         proc_macro_mod,\n         proc_macro_non_items,\n         proc_macro_path_invoc,\n+        ProceduralMasqueradeDummyType,\n+        ProcMacroHack,\n         profiler_builtins,\n         profiler_runtime,\n         ptr_guaranteed_eq,"}, {"sha": "66db1a21736659d15fd909df19c8a9e4b22f23b0", "filename": "src/test/run-make/rustc-macro-dep-files/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustc-macro-dep-files%2Ffoo.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -7,6 +7,6 @@ use proc_macro::TokenStream;\n #[proc_macro_derive(A)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n-    assert!(input.contains(\"struct A;\"));\n+    assert!(input.contains(\"struct A ;\"));\n     \"struct B;\".parse().unwrap()\n }"}, {"sha": "395d9e21b3848a1b953baf4ef1a5429f1a003242", "filename": "src/test/ui/async-await/issues/issue-60674.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-60674.stdout?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -1,3 +1,3 @@\n-async fn f(mut x: u8) { }\n-async fn g((mut x, y, mut z): (u8, u8, u8)) { }\n-async fn g(mut x: u8, (a, mut b, c): (u8, u8, u8), y: u8) { }\n+async fn f(mut x : u8) { }\n+async fn g((mut x, y, mut z) : (u8, u8, u8)) { }\n+async fn g(mut x : u8, (a, mut b, c) : (u8, u8, u8), y : u8) { }"}, {"sha": "2f0054cc14aa6454005f2889292acc42824b2c9f", "filename": "src/test/ui/proc-macro/auxiliary/attr-cfg.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-cfg.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -11,11 +11,9 @@ use proc_macro::TokenStream;\n pub fn attr_cfg(args: TokenStream, input: TokenStream) -> TokenStream {\n     let input_str = input.to_string();\n \n-    assert_eq!(input_str, \"fn outer() -> u8 {\n-    #[cfg(foo)]\n-    fn inner() -> u8 { 1 }\n-    #[cfg(bar)]\n-    fn inner() -> u8 { 2 }\n+    assert_eq!(input_str, \"fn outer() -> u8\n+{\n+    #[cfg(foo)] fn inner() -> u8 { 1 } #[cfg(bar)] fn inner() -> u8 { 2 }\n     inner()\n }\");\n "}, {"sha": "e056bd32d2d0e9c0045e0dcb8e0fc81460963175", "filename": "src/test/ui/proc-macro/auxiliary/attr-stmt-expr-rpass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr-rpass.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -10,14 +10,14 @@ use proc_macro::TokenStream;\n #[proc_macro_attribute]\n pub fn expect_let(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert!(attr.to_string().is_empty());\n-    assert_eq!(item.to_string(), \"let string = \\\"Hello, world!\\\";\");\n+    assert_eq!(item.to_string(), \"let string = \\\"Hello, world!\\\" ;\");\n     item\n }\n \n #[proc_macro_attribute]\n pub fn expect_print_stmt(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert!(attr.to_string().is_empty());\n-    assert_eq!(item.to_string(), \"println!(\\\"{}\\\", string);\");\n+    assert_eq!(item.to_string(), \"println ! (\\\"{}\\\", string) ;\");\n     item\n }\n \n@@ -31,7 +31,7 @@ pub fn expect_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n #[proc_macro_attribute]\n pub fn expect_print_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert!(attr.to_string().is_empty());\n-    assert_eq!(item.to_string(), \"println!(\\\"{}\\\", string)\");\n+    assert_eq!(item.to_string(), \"println ! (\\\"{}\\\", string)\");\n     item\n }\n "}, {"sha": "213f999e9d0eaa080783f80d99fec8f9258ddcda", "filename": "src/test/ui/proc-macro/auxiliary/attr-stmt-expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -10,14 +10,14 @@ use proc_macro::TokenStream;\n #[proc_macro_attribute]\n pub fn expect_let(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert!(attr.to_string().is_empty());\n-    assert_eq!(item.to_string(), \"let string = \\\"Hello, world!\\\";\");\n+    assert_eq!(item.to_string(), \"let string = \\\"Hello, world!\\\" ;\");\n     item\n }\n \n #[proc_macro_attribute]\n pub fn expect_print_stmt(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert!(attr.to_string().is_empty());\n-    assert_eq!(item.to_string(), \"println!(\\\"{}\\\", string);\");\n+    assert_eq!(item.to_string(), \"println ! (\\\"{}\\\", string) ;\");\n     item\n }\n \n@@ -31,7 +31,7 @@ pub fn expect_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n #[proc_macro_attribute]\n pub fn expect_print_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert!(attr.to_string().is_empty());\n-    assert_eq!(item.to_string(), \"println!(\\\"{}\\\", string)\");\n+    assert_eq!(item.to_string(), \"println ! (\\\"{}\\\", string)\");\n     item\n }\n "}, {"sha": "79a3864bf991d8f31144a71b6fae5ca299853e99", "filename": "src/test/ui/proc-macro/auxiliary/derive-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-a.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -10,6 +10,6 @@ use proc_macro::TokenStream;\n #[proc_macro_derive(A)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n-    assert!(input.contains(\"struct A;\"));\n+    assert!(input.contains(\"struct A ;\"));\n     \"\".parse().unwrap()\n }"}, {"sha": "207b7fd3203601eb7fee5be0deb814aaf24fe870", "filename": "src/test/ui/proc-macro/auxiliary/derive-atob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-atob.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -10,6 +10,6 @@ use proc_macro::TokenStream;\n #[proc_macro_derive(AToB)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n-    assert_eq!(input, \"struct A;\");\n+    assert_eq!(input, \"struct A ;\");\n     \"struct B;\".parse().unwrap()\n }"}, {"sha": "641a95f78c112a92d66c81388ca45ce88f4e1e5b", "filename": "src/test/ui/proc-macro/auxiliary/derive-b-rpass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-b-rpass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-b-rpass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-b-rpass.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -10,7 +10,7 @@ use proc_macro::TokenStream;\n #[proc_macro_derive(B, attributes(B, C))]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n-    assert!(input.contains(\"#[B[arbitrary tokens]]\"));\n+    assert!(input.contains(\"#[B [arbitrary tokens]]\"));\n     assert!(input.contains(\"struct B {\"));\n     assert!(input.contains(\"#[C]\"));\n     \"\".parse().unwrap()"}, {"sha": "2efe5a9134054de27130795bb380866ad91e49d6", "filename": "src/test/ui/proc-macro/auxiliary/derive-ctod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-ctod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-ctod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-ctod.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -10,6 +10,6 @@ use proc_macro::TokenStream;\n #[proc_macro_derive(CToD)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n-    assert_eq!(input, \"struct C;\");\n+    assert_eq!(input, \"struct C ;\");\n     \"struct D;\".parse().unwrap()\n }"}, {"sha": "7598d632cb6d57f396db1019b5e8784ed73b2b98", "filename": "src/test/ui/proc-macro/auxiliary/derive-same-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-same-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-same-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-same-struct.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -10,12 +10,12 @@ use proc_macro::TokenStream;\n #[proc_macro_derive(AToB)]\n pub fn derive1(input: TokenStream) -> TokenStream {\n     println!(\"input1: {:?}\", input.to_string());\n-    assert_eq!(input.to_string(), \"struct A;\");\n+    assert_eq!(input.to_string(), \"struct A ;\");\n     \"#[derive(BToC)] struct B;\".parse().unwrap()\n }\n \n #[proc_macro_derive(BToC)]\n pub fn derive2(input: TokenStream) -> TokenStream {\n-    assert_eq!(input.to_string(), \"struct B;\");\n+    assert_eq!(input.to_string(), \"struct B ;\");\n     \"struct C;\".parse().unwrap()\n }"}, {"sha": "05883170c6c48006c771e8e4b327272a9c90f1ba", "filename": "src/test/ui/proc-macro/auxiliary/derive-union.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-union.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-union.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fderive-union.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -12,7 +12,7 @@ pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n     assert!(input.contains(\"#[repr(C)]\"));\n     assert!(input.contains(\"union Test {\"));\n-    assert!(input.contains(\"a: u8,\"));\n+    assert!(input.contains(\"a : u8,\"));\n     assert!(input.contains(\"}\"));\n     \"\".parse().unwrap()\n }"}, {"sha": "99eb4e3754672e05e01b48f86eade2eb5aaf8e59", "filename": "src/test/ui/proc-macro/auxiliary/double.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdouble.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdouble.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fdouble.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -1,15 +1,16 @@\n // force-host\n // no-prefer-dynamic\n \n+#![feature(proc_macro_quote)]\n+\n #![crate_type = \"proc-macro\"]\n \n extern crate proc_macro;\n-\n-use proc_macro::TokenStream;\n+use proc_macro::*;\n \n // Outputs another copy of the struct.  Useful for testing the tokens\n // seen by the proc_macro.\n #[proc_macro_derive(Double)]\n pub fn derive(input: TokenStream) -> TokenStream {\n-    format!(\"mod foo {{ {} }}\", input.to_string()).parse().unwrap()\n+    quote!(mod foo { $input })\n }"}, {"sha": "d779d57af14c7a12ccde94871c96176a69cad71e", "filename": "src/test/ui/proc-macro/auxiliary/expand-with-a-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fexpand-with-a-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fexpand-with-a-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fexpand-with-a-macro.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -11,7 +11,7 @@ use proc_macro::TokenStream;\n #[proc_macro_derive(A)]\n pub fn derive(input: TokenStream) -> TokenStream {\n     let input = input.to_string();\n-    assert!(input.contains(\"struct A;\"));\n+    assert!(input.contains(\"struct A ;\"));\n     r#\"\n         impl A {\n             fn a(&self) {"}, {"sha": "7478d9741409bb8e6f52896bfa41a2831e8df69c", "filename": "src/test/ui/proc-macro/derive-same-struct.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fderive-same-struct.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fderive-same-struct.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fderive-same-struct.stdout?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -1 +1 @@\n-input1: \"struct A;\"\n+input1: \"struct A ;\""}, {"sha": "5d93144b445530ddf79b355c2ca14a278179ebd2", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.stdout", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -38,8 +38,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         span: #3 bytes(LO..HI),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): struct A(crate::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A($crate :: S) ;\n+PRINT-ATTR INPUT (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "e4212377626ca7fdccc575b5388a59ac039dee1c", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.stdout", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -1,5 +1,4 @@\n-PRINT-ATTR INPUT (DISPLAY): struct A(identity!(crate :: S));\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A(identity ! ($crate :: S)) ;\n+PRINT-ATTR INPUT (DISPLAY): struct A(identity ! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -54,8 +53,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: #3 bytes(LO..HI),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): struct B(identity!(::dollar_crate_external :: S));\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct B(identity ! ($crate :: S)) ;\n+PRINT-ATTR INPUT (DISPLAY): struct B(identity ! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "8a7406b1a3d134350ed110566dc505911311d0dc", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -38,8 +38,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         span: #3 bytes(LO..HI),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): struct A(crate::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A($crate :: S) ;\n+PRINT-ATTR INPUT (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -79,8 +78,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: #3 bytes(LO..HI),\n     },\n ]\n-PRINT-DERIVE INPUT (DISPLAY): struct D(crate::S);\n-PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D($crate :: S) ;\n+PRINT-DERIVE INPUT (DISPLAY): struct D($crate :: S) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -160,8 +158,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         span: #13 bytes(LO..HI),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): struct A(::dollar_crate_external::S);\n-PRINT-ATTR RE-COLLECTED (DISPLAY): struct A($crate :: S) ;\n+PRINT-ATTR INPUT (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n@@ -201,8 +198,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: #13 bytes(LO..HI),\n     },\n ]\n-PRINT-DERIVE INPUT (DISPLAY): struct D(::dollar_crate_external::S);\n-PRINT-DERIVE RE-COLLECTED (DISPLAY): struct D($crate :: S) ;\n+PRINT-DERIVE INPUT (DISPLAY): struct D($crate :: S) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "72e40b8a33e0bd4f393c1634e8726adf7618de3c", "filename": "src/test/ui/proc-macro/input-interpolated.stdout", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -12,8 +12,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         span: #3 bytes(269..271),\n     },\n ]\n-PRINT-ATTR INPUT (DISPLAY): const A: u8 = 0;\n-PRINT-ATTR RE-COLLECTED (DISPLAY): const A : u8 = 0 ;\n+PRINT-ATTR INPUT (DISPLAY): const A : u8 = 0 ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"const\",\n@@ -49,9 +48,7 @@ PRINT-ATTR INPUT (DEBUG): TokenStream [\n         span: #0 bytes(0..0),\n     },\n ]\n-PRINT-DERIVE INPUT (DISPLAY): struct A {\n-}\n-PRINT-DERIVE RE-COLLECTED (DISPLAY): struct A { }\n+PRINT-DERIVE INPUT (DISPLAY): struct A { }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\","}, {"sha": "2a172c8458d71462493c1cb4a7b26d03c3e231b2", "filename": "src/test/ui/rfc-2565-param-attrs/auxiliary/param-attrs.rs", "status": "modified", "additions": 23, "deletions": 24, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5764de00b8d953a4071c9318a31628fa0549982/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2565-param-attrs%2Fauxiliary%2Fparam-attrs.rs?ref=a5764de00b8d953a4071c9318a31628fa0549982", "patch": "@@ -17,28 +17,27 @@ macro_rules! checker {\n     }\n }\n \n-checker!(attr_extern, r#\"extern \"C\" {\n-    fn ffi(#[a1] arg1: i32, #[a2] ...);\n-}\"#);\n-checker!(attr_extern_cvar, r#\"unsafe extern \"C\" fn cvar(arg1: i32, #[a1] mut args: ...) { }\"#);\n-checker!(attr_alias, \"type Alias = fn(#[a1] u8, #[a2] ...);\");\n-checker!(attr_free, \"fn free(#[a1] arg1: u8) { let lam = |#[a2] W(x), #[a3] y| (); }\");\n-checker!(attr_inherent_1, \"fn inherent1(#[a1] self, #[a2] arg1: u8) { }\");\n-checker!(attr_inherent_2, \"fn inherent2(#[a1] &self, #[a2] arg1: u8) { }\");\n-checker!(attr_inherent_3, \"fn inherent3<'a>(#[a1] &'a mut self, #[a2] arg1: u8) { }\");\n-checker!(attr_inherent_4, \"fn inherent4<'a>(#[a1] self: Box<Self>, #[a2] arg1: u8) { }\");\n-checker!(attr_inherent_issue_64682, \"fn inherent5(#[a1] #[a2] arg1: u8, #[a3] arg2: u8) { }\");\n-checker!(attr_trait_1, \"fn trait1(#[a1] self, #[a2] arg1: u8);\");\n-checker!(attr_trait_2, \"fn trait2(#[a1] &self, #[a2] arg1: u8);\");\n-checker!(attr_trait_3, \"fn trait3<'a>(#[a1] &'a mut self, #[a2] arg1: u8);\");\n-checker!(attr_trait_4, \"fn trait4<'a>(#[a1] self: Box<Self>, #[a2] arg1: u8, #[a3] Vec<u8>);\");\n-checker!(attr_trait_issue_64682, \"fn trait5(#[a1] #[a2] arg1: u8, #[a3] arg2: u8);\");\n-checker!(rename_params, r#\"impl Foo {\n-    fn hello(#[angery(true)] a: i32, #[a2] b: i32, #[what = \"how\"] c: u32) { }\n-    fn hello2(#[a1] #[a2] a: i32, #[what = \"how\"] b: i32,\n-              #[angery(true)] c: u32) {\n-    }\n-    fn hello_self(#[a1] #[a2] &self, #[a1] #[a2] a: i32,\n-                  #[what = \"how\"] b: i32, #[angery(true)] c: u32) {\n-    }\n+checker!(attr_extern, r#\"extern \"C\" { fn ffi(#[a1] arg1 : i32, #[a2] ...) ; }\"#);\n+checker!(attr_extern_cvar, r#\"unsafe extern \"C\" fn cvar(arg1 : i32, #[a1] mut args : ...) { }\"#);\n+checker!(attr_alias, \"type Alias = fn(#[a1] u8, #[a2] ...) ;\");\n+checker!(attr_free, \"fn free(#[a1] arg1 : u8) { let lam = | #[a2] W(x), #[a3] y | () ; }\");\n+checker!(attr_inherent_1, \"fn inherent1(#[a1] self, #[a2] arg1 : u8) { }\");\n+checker!(attr_inherent_2, \"fn inherent2(#[a1] & self, #[a2] arg1 : u8) { }\");\n+checker!(attr_inherent_3, \"fn inherent3 < 'a > (#[a1] & 'a mut self, #[a2] arg1 : u8) { }\");\n+checker!(attr_inherent_4, \"fn inherent4 < 'a > (#[a1] self : Box < Self >, #[a2] arg1 : u8) { }\");\n+checker!(attr_inherent_issue_64682, \"fn inherent5(#[a1] #[a2] arg1 : u8, #[a3] arg2 : u8) { }\");\n+checker!(attr_trait_1, \"fn trait1(#[a1] self, #[a2] arg1 : u8) ;\");\n+checker!(attr_trait_2, \"fn trait2(#[a1] & self, #[a2] arg1 : u8) ;\");\n+checker!(attr_trait_3, \"fn trait3 < 'a > (#[a1] & 'a mut self, #[a2] arg1 : u8) ;\");\n+checker!(attr_trait_4, r#\"fn trait4 < 'a >\n+(#[a1] self : Box < Self >, #[a2] arg1 : u8, #[a3] Vec < u8 >) ;\"#);\n+checker!(attr_trait_issue_64682, \"fn trait5(#[a1] #[a2] arg1 : u8, #[a3] arg2 : u8) ;\");\n+checker!(rename_params, r#\"impl Foo\n+{\n+    fn hello(#[angery(true)] a : i32, #[a2] b : i32, #[what = \"how\"] c : u32)\n+    { } fn\n+    hello2(#[a1] #[a2] a : i32, #[what = \"how\"] b : i32, #[angery(true)] c :\n+           u32) { } fn\n+    hello_self(#[a1] #[a2] & self, #[a1] #[a2] a : i32, #[what = \"how\"] b :\n+               i32, #[angery(true)] c : u32) { }\n }\"#);"}]}