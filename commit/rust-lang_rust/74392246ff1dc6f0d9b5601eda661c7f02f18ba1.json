{"sha": "74392246ff1dc6f0d9b5601eda661c7f02f18ba1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MzkyMjQ2ZmYxZGM2ZjBkOWI1NjAxZWRhNjYxYzdmMDJmMThiYTE=", "commit": {"author": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-05-03T20:24:06Z"}, "committer": {"name": "Kevin Butler", "email": "haqkrs@gmail.com", "date": "2014-05-03T20:24:06Z"}, "message": "Remove comment about semicolons for inner attributes from docs and adjust comments.", "tree": {"sha": "d728b8a59833200579ec67d932d442eac27d909c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d728b8a59833200579ec67d932d442eac27d909c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74392246ff1dc6f0d9b5601eda661c7f02f18ba1", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74392246ff1dc6f0d9b5601eda661c7f02f18ba1", "html_url": "https://github.com/rust-lang/rust/commit/74392246ff1dc6f0d9b5601eda661c7f02f18ba1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74392246ff1dc6f0d9b5601eda661c7f02f18ba1/comments", "author": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Ryman", "id": 994978, "node_id": "MDQ6VXNlcjk5NDk3OA==", "avatar_url": "https://avatars.githubusercontent.com/u/994978?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Ryman", "html_url": "https://github.com/Ryman", "followers_url": "https://api.github.com/users/Ryman/followers", "following_url": "https://api.github.com/users/Ryman/following{/other_user}", "gists_url": "https://api.github.com/users/Ryman/gists{/gist_id}", "starred_url": "https://api.github.com/users/Ryman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Ryman/subscriptions", "organizations_url": "https://api.github.com/users/Ryman/orgs", "repos_url": "https://api.github.com/users/Ryman/repos", "events_url": "https://api.github.com/users/Ryman/events{/privacy}", "received_events_url": "https://api.github.com/users/Ryman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c691df8acaf10aa3721476e5d7fafcee11b0aaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c691df8acaf10aa3721476e5d7fafcee11b0aaa", "html_url": "https://github.com/rust-lang/rust/commit/0c691df8acaf10aa3721476e5d7fafcee11b0aaa"}], "stats": {"total": 15, "additions": 8, "deletions": 7}, "files": [{"sha": "fa813073cd9840b45c52a2590fcdc5a0727719c4", "filename": "src/doc/guide-pointers.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74392246ff1dc6f0d9b5601eda661c7f02f18ba1/src%2Fdoc%2Fguide-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/74392246ff1dc6f0d9b5601eda661c7f02f18ba1/src%2Fdoc%2Fguide-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-pointers.md?ref=74392246ff1dc6f0d9b5601eda661c7f02f18ba1", "patch": "@@ -186,7 +186,7 @@ enum List<T> {\n     Nil,\n     Cons(T, ~List<T>),\n }\n-    \n+\n fn main() {\n     let list: List<int> = Cons(1, ~Cons(2, ~Cons(3, ~Nil)));\n     println!(\"{:?}\", list);\n@@ -251,7 +251,7 @@ struct.\n \n > **Note**: the `@` form of managed pointers is deprecated and behind a\n > feature gate (it requires a `#![feature(managed_pointers)]` attribute on\n-> the crate root; remember the semicolon!). There are replacements, currently \n+> the crate root). There are replacements, currently\n > there is `std::rc::Rc` and `std::gc::Gc` for shared ownership via reference\n > counting and garbage collection respectively.\n \n@@ -266,7 +266,7 @@ struct Point {\n     x: int,\n     y: int,\n }\n-    \n+\n fn main() {\n     let a = ~Point { x: 10, y: 20 };\n     let b = a;\n@@ -297,7 +297,7 @@ struct Point {\n     x: int,\n     y: int,\n }\n-    \n+\n fn main() {\n     let a = @Point { x: 10, y: 20 };\n     let b = a;\n@@ -361,7 +361,7 @@ So how is this hard? Well, because we're ignoring ownership, the compiler needs\n to take great care to make sure that everything is safe. Despite their complete\n safety, a reference's representation at runtime is the same as that of\n an ordinary pointer in a C program. They introduce zero overhead. The compiler\n-does all safety checks at compile time. \n+does all safety checks at compile time.\n \n This theory is called 'region pointers,' and involve a concept called\n 'lifetimes'. Here's the simple explanation: would you expect this code to\n@@ -477,7 +477,7 @@ fn main() {\n You may think that this gives us terrible performance: return a value and then\n immediately box it up?!?! Isn't that the worst of both worlds? Rust is smarter\n than that. There is no copy in this code. `main` allocates enough room for the\n-`@int`, passes a pointer to that memory into `foo` as `x`, and then `foo` writes \n+`@int`, passes a pointer to that memory into `foo` as `x`, and then `foo` writes\n the value straight into that pointer. This writes the return value directly into\n the allocated box.\n "}, {"sha": "80ee459a62d6fea0b9e0ea7618c28554f9ad5119", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74392246ff1dc6f0d9b5601eda661c7f02f18ba1/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74392246ff1dc6f0d9b5601eda661c7f02f18ba1/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=74392246ff1dc6f0d9b5601eda661c7f02f18ba1", "patch": "@@ -108,7 +108,8 @@ impl<'a> ParserAttr for Parser<'a> {\n         };\n     }\n \n-    // Parse attributes that appear after the opening of an item, each\n+    // Parse attributes that appear after the opening of an item. These should\n+    // be preceded by an exclaimation mark, but we accept and warn about one\n     // terminated by a semicolon. In addition to a vector of inner attributes,\n     // this function also returns a vector that may contain the first outer\n     // attribute of the next item (since we can't know whether the attribute"}]}