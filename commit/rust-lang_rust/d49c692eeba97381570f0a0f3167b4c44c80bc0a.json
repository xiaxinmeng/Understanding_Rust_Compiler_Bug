{"sha": "d49c692eeba97381570f0a0f3167b4c44c80bc0a", "node_id": "C_kwDOAAsO6NoAKGQ0OWM2OTJlZWJhOTczODE1NzBmMGEwZjMxNjdiNGM0NGM4MGJjMGE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-04T20:23:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-04T20:23:05Z"}, "message": "Rollup merge of #91587 - nrc:dispatchfromdyn-docs, r=yaahc\n\ncore::ops::unsize: improve docs for DispatchFromDyn\n\nDocs-only PR, improves documentation for DispatchFromDyn.", "tree": {"sha": "7092086977493ce0513adcb22730aac8204cc65b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7092086977493ce0513adcb22730aac8204cc65b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d49c692eeba97381570f0a0f3167b4c44c80bc0a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh1KypCRBK7hj4Ov3rIwAAo2YIAFR5/ZrbScVu8ubaQbzsNQhU\nUZ9ZPwhbSeCM+ksbLFqooz6eVVXNgCTPO5zJYhJtG9Uzu2xJtGiRPI9JspTcZCps\n9+Rxev5K4MIejts9+NZ8QaWHPnfjnRJ1r3JbPqiivd2lx9OXUdH5BHSudjX6ILtH\nNZRMBZBtpBJ1ykUyiY4uTbBDpb/1JA9TtTVIopAsBnkKXik9cBeWVaoBRBQOuHVN\nEIxuVIS5BRu/p8DOE1s3+QSDONhupbeYJQ0atT06+5h55TvXw8DmQoJu50/u4kdR\nBBA3KtkRlWNEmeGVMGzL5CwvRrICGithd16tlW89lmhJMAmu/pDiNFh7td2H8do=\n=NkAa\n-----END PGP SIGNATURE-----\n", "payload": "tree 7092086977493ce0513adcb22730aac8204cc65b\nparent 2b681ac06b1a6b7ea39525e59363ffee0d1a68e5\nparent b3573c5e6383242828972874614f80bac7ce8726\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1641327785 +0100\ncommitter GitHub <noreply@github.com> 1641327785 +0100\n\nRollup merge of #91587 - nrc:dispatchfromdyn-docs, r=yaahc\n\ncore::ops::unsize: improve docs for DispatchFromDyn\n\nDocs-only PR, improves documentation for DispatchFromDyn.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d49c692eeba97381570f0a0f3167b4c44c80bc0a", "html_url": "https://github.com/rust-lang/rust/commit/d49c692eeba97381570f0a0f3167b4c44c80bc0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d49c692eeba97381570f0a0f3167b4c44c80bc0a/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b681ac06b1a6b7ea39525e59363ffee0d1a68e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b681ac06b1a6b7ea39525e59363ffee0d1a68e5", "html_url": "https://github.com/rust-lang/rust/commit/2b681ac06b1a6b7ea39525e59363ffee0d1a68e5"}, {"sha": "b3573c5e6383242828972874614f80bac7ce8726", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3573c5e6383242828972874614f80bac7ce8726", "html_url": "https://github.com/rust-lang/rust/commit/b3573c5e6383242828972874614f80bac7ce8726"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "a920b9165c18e2dc86bf1af173cb9746d79881a8", "filename": "library/core/src/ops/unsize.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d49c692eeba97381570f0a0f3167b4c44c80bc0a/library%2Fcore%2Fsrc%2Fops%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d49c692eeba97381570f0a0f3167b4c44c80bc0a/library%2Fcore%2Fsrc%2Fops%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Funsize.rs?ref=d49c692eeba97381570f0a0f3167b4c44c80bc0a", "patch": "@@ -68,7 +68,38 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *mut T {}\n #[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n \n-/// This is used for object safety, to check that a method's receiver type can be dispatched on.\n+/// `DispatchFromDyn` is used in the implementation of object safety checks (specifically allowing\n+/// arbitrary self types), to guarantee that a method's receiver type can be dispatched on.\n+///\n+/// Note: `DispatchFromDyn` was briefly named `CoerceSized` (and had a slightly different\n+/// interpretation).\n+///\n+/// Imagine we have a trait object `t` with type `&dyn Tr`, where `Tr` is some trait with a method\n+/// `m` defined as `fn m(&self);`. When calling `t.m()`, the receiver `t` is a wide pointer, but an\n+/// implementation of `m` will expect a narrow pointer as `&self` (a reference to the concrete\n+/// type). The compiler must generate an implicit conversion from the trait object/wide pointer to\n+/// the concrete reference/narrow pointer. Implementing `DispatchFromDyn` indicates that that\n+/// conversion is allowed and thus that the type implementing `DispatchFromDyn` is safe to use as\n+/// the self type in an object-safe method. (in the above example, the compiler will require\n+/// `DispatchFromDyn` is implemented for `&'a U`).\n+///\n+/// `DispatchFromDyn` does not specify the conversion from wide pointer to narrow pointer; the\n+/// conversion is hard-wired into the compiler. For the conversion to work, the following\n+/// properties must hold (i.e., it is only safe to implement `DispatchFromDyn` for types which have\n+/// these properties, these are also checked by the compiler):\n+///\n+/// * EITHER `Self` and `T` are either both references or both raw pointers; in either case, with\n+///   the same mutability.\n+/// * OR, all of the following hold\n+///   - `Self` and `T` must have the same type constructor, and only vary in a single type parameter\n+///     formal (the *coerced type*, e.g., `impl DispatchFromDyn<Rc<T>> for Rc<U>` is ok and the\n+///     single type parameter (instantiated with `T` or `U`) is the coerced type,\n+///     `impl DispatchFromDyn<Arc<T>> for Rc<U>` is not ok).\n+///   - The definition for `Self` must be a struct.\n+///   - The definition for `Self` must not be `#[repr(packed)]` or `#[repr(C)]`.\n+///   - Other than one-aligned, zero-sized fields, the definition for `Self` must have exactly one\n+///     field and that field's type must be the coerced type. Furthermore, `Self`'s field type must\n+///     implement `DispatchFromDyn<F>` where `F` is the type of `T`'s field type.\n ///\n /// An example implementation of the trait:\n ///"}]}