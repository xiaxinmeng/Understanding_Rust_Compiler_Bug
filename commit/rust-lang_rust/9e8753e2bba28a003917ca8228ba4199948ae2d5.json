{"sha": "9e8753e2bba28a003917ca8228ba4199948ae2d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllODc1M2UyYmJhMjhhMDAzOTE3Y2E4MjI4YmE0MTk5OTQ4YWUyZDU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-02-01T13:29:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-01T13:29:35Z"}, "message": "Rollup merge of #81463 - matsujika:nll-ensure-c-case, r=varkor\n\nRename NLL* to Nll* accordingly to C-CASE\n\nGiven [C-CASE](https://rust-lang.github.io/api-guidelines/naming.html#casing-conforms-to-rfc-430-c-case), `NLLRegionVariableOrigin` and `NLL` are encouraged to be `NllRegionVariableOrigin` and `Nll` respectively.", "tree": {"sha": "776dad2ba4cf7b2c34fb08b1259996d3529675b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/776dad2ba4cf7b2c34fb08b1259996d3529675b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e8753e2bba28a003917ca8228ba4199948ae2d5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgGAI/CRBK7hj4Ov3rIwAAdHIIAAde6XI1Aieg1pNZjIXeyaRf\nJRjLjiCyFJBb4D/tjun6I7wubXSTleNHQbGW4zMbOEO+evdoZK/fBAcYluFiQPu3\nvE5ApFfz2bz1SKrkI421CCB+JOxGuDweUSVQ37JDsKv9Xsb4r8NE4JnAGsnnS9m9\n54Gd1MLIMwCs46yv2z1hIeBeCxasY6k3DpQpaA9UT7+gY8SzbZyE1vnAB1bGNcON\n59kFuMs51m4mb/F/HMV0PbVDjDYWyEWGmhzC5VQH48f518dY4snzAAyYyWFKuEDb\nlr9k5mlWF2/GTUetlZ1l92IEVH7it7OljjuJZaG2SN6Bcvy8C03iMUgGZhMgInY=\n=qXfb\n-----END PGP SIGNATURE-----\n", "payload": "tree 776dad2ba4cf7b2c34fb08b1259996d3529675b3\nparent c99ec7f724dfbff1be487ff3b3fc8733fb4474cb\nparent f8e0e78d75b98c63ecfe511d60dacc1b8ff902c0\nauthor Jonas Schievink <jonasschievink@gmail.com> 1612186175 +0100\ncommitter GitHub <noreply@github.com> 1612186175 +0100\n\nRollup merge of #81463 - matsujika:nll-ensure-c-case, r=varkor\n\nRename NLL* to Nll* accordingly to C-CASE\n\nGiven [C-CASE](https://rust-lang.github.io/api-guidelines/naming.html#casing-conforms-to-rfc-430-c-case), `NLLRegionVariableOrigin` and `NLL` are encouraged to be `NllRegionVariableOrigin` and `Nll` respectively.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8753e2bba28a003917ca8228ba4199948ae2d5", "html_url": "https://github.com/rust-lang/rust/commit/9e8753e2bba28a003917ca8228ba4199948ae2d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e8753e2bba28a003917ca8228ba4199948ae2d5/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c99ec7f724dfbff1be487ff3b3fc8733fb4474cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/c99ec7f724dfbff1be487ff3b3fc8733fb4474cb", "html_url": "https://github.com/rust-lang/rust/commit/c99ec7f724dfbff1be487ff3b3fc8733fb4474cb"}, {"sha": "f8e0e78d75b98c63ecfe511d60dacc1b8ff902c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8e0e78d75b98c63ecfe511d60dacc1b8ff902c0", "html_url": "https://github.com/rust-lang/rust/commit/f8e0e78d75b98c63ecfe511d60dacc1b8ff902c0"}], "stats": {"total": 142, "additions": 71, "deletions": 71}, "files": [{"sha": "1546c1e559f5765ece48462a571be4f77f4e7d55", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=9e8753e2bba28a003917ca8228ba4199948ae2d5", "patch": "@@ -14,7 +14,7 @@ use crate::infer::canonical::{\n };\n use crate::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n-use crate::infer::{InferCtxt, InferOk, InferResult, NLLRegionVariableOrigin};\n+use crate::infer::{InferCtxt, InferOk, InferResult, NllRegionVariableOrigin};\n use crate::traits::query::{Fallible, NoSolution};\n use crate::traits::TraitEngine;\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n@@ -644,7 +644,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n     }\n \n     fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n-        let origin = NLLRegionVariableOrigin::Existential { from_forall };\n+        let origin = NllRegionVariableOrigin::Existential { from_forall };\n         self.infcx.next_nll_region_var(origin)\n     }\n \n@@ -654,7 +654,7 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n \n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n         self.infcx.next_nll_region_var_in_universe(\n-            NLLRegionVariableOrigin::Existential { from_forall: false },\n+            NllRegionVariableOrigin::Existential { from_forall: false },\n             universe,\n         )\n     }"}, {"sha": "a5f1f878e19318bd710ccb840a8bc2388045c0aa", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9e8753e2bba28a003917ca8228ba4199948ae2d5", "patch": "@@ -2342,7 +2342,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 let var_name = self.tcx.hir().name(upvar_id.var_path.hir_id);\n                 format!(\" for capture of `{}` by closure\", var_name)\n             }\n-            infer::NLL(..) => bug!(\"NLL variable found in lexical phase\"),\n+            infer::Nll(..) => bug!(\"NLL variable found in lexical phase\"),\n         };\n \n         struct_span_err!("}, {"sha": "09eecd715f03b3809d1741cf6a84a70fc0aa2b50", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=9e8753e2bba28a003917ca8228ba4199948ae2d5", "patch": "@@ -458,11 +458,11 @@ pub enum RegionVariableOrigin {\n \n     /// This origin is used for the inference variables that we create\n     /// during NLL region processing.\n-    NLL(NLLRegionVariableOrigin),\n+    Nll(NllRegionVariableOrigin),\n }\n \n #[derive(Copy, Clone, Debug)]\n-pub enum NLLRegionVariableOrigin {\n+pub enum NllRegionVariableOrigin {\n     /// During NLL region processing, we create variables for free\n     /// regions that we encounter in the function signature and\n     /// elsewhere. This origin indices we've got one of those.\n@@ -1078,17 +1078,17 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     /// Just a convenient wrapper of `next_region_var` for using during NLL.\n-    pub fn next_nll_region_var(&self, origin: NLLRegionVariableOrigin) -> ty::Region<'tcx> {\n-        self.next_region_var(RegionVariableOrigin::NLL(origin))\n+    pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {\n+        self.next_region_var(RegionVariableOrigin::Nll(origin))\n     }\n \n     /// Just a convenient wrapper of `next_region_var` for using during NLL.\n     pub fn next_nll_region_var_in_universe(\n         &self,\n-        origin: NLLRegionVariableOrigin,\n+        origin: NllRegionVariableOrigin,\n         universe: ty::UniverseIndex,\n     ) -> ty::Region<'tcx> {\n-        self.next_region_var_in_universe(RegionVariableOrigin::NLL(origin), universe)\n+        self.next_region_var_in_universe(RegionVariableOrigin::Nll(origin), universe)\n     }\n \n     pub fn var_for_def(&self, span: Span, param: &ty::GenericParamDef) -> GenericArg<'tcx> {\n@@ -1770,7 +1770,7 @@ impl RegionVariableOrigin {\n             | LateBoundRegion(a, ..)\n             | UpvarRegion(_, a) => a,\n             BoundRegionInCoherence(_) => rustc_span::DUMMY_SP,\n-            NLL(..) => bug!(\"NLL variable used with `span`\"),\n+            Nll(..) => bug!(\"NLL variable used with `span`\"),\n         }\n     }\n }"}, {"sha": "06e3f4b91f61facac2bb585cf37f34e8cf84ae33", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=9e8753e2bba28a003917ca8228ba4199948ae2d5", "patch": "@@ -5,7 +5,7 @@ use std::collections::VecDeque;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_index::vec::IndexVec;\n-use rustc_infer::infer::NLLRegionVariableOrigin;\n+use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::mir::{\n     Body, CastKind, ConstraintCategory, FakeReadCause, Local, Location, Operand, Place, Rvalue,\n     Statement, StatementKind, TerminatorKind,\n@@ -258,7 +258,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         let (category, from_closure, span) = self.regioncx.best_blame_constraint(\n             &self.body,\n             borrow_region,\n-            NLLRegionVariableOrigin::FreeRegion,\n+            NllRegionVariableOrigin::FreeRegion,\n             |r| self.regioncx.provides_universal_region(r, borrow_region, outlived_region),\n         );\n "}, {"sha": "058986593a41b9759c4c7f8c3e66a60cf2700361", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/region_errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fregion_errors.rs?ref=9e8753e2bba28a003917ca8228ba4199948ae2d5", "patch": "@@ -3,7 +3,7 @@\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_infer::infer::{\n     error_reporting::nice_region_error::NiceRegionError,\n-    error_reporting::unexpected_hidden_region_diagnostic, NLLRegionVariableOrigin,\n+    error_reporting::unexpected_hidden_region_diagnostic, NllRegionVariableOrigin,\n };\n use rustc_middle::mir::{ConstraintCategory, ReturnConstraint};\n use rustc_middle::ty::subst::Subst;\n@@ -75,13 +75,13 @@ crate enum RegionErrorKind<'tcx> {\n         /// The region element that erroneously must be outlived by `longer_fr`.\n         error_element: RegionElement,\n         /// The origin of the placeholder region.\n-        fr_origin: NLLRegionVariableOrigin,\n+        fr_origin: NllRegionVariableOrigin,\n     },\n \n     /// Any other lifetime error.\n     RegionError {\n         /// The origin of the region.\n-        fr_origin: NLLRegionVariableOrigin,\n+        fr_origin: NllRegionVariableOrigin,\n         /// The region that should outlive `shorter_fr`.\n         longer_fr: RegionVid,\n         /// The region that should be shorter, but we can't prove it.\n@@ -269,7 +269,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n     pub(in crate::borrow_check) fn report_region_error(\n         &mut self,\n         fr: RegionVid,\n-        fr_origin: NLLRegionVariableOrigin,\n+        fr_origin: NllRegionVariableOrigin,\n         outlived_fr: RegionVid,\n         outlives_suggestion: &mut OutlivesSuggestionBuilder,\n     ) {"}, {"sha": "86d9db294bf713d52e3b9a16eaa825e3eda1afba", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/dump_mir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fdump_mir.rs?ref=9e8753e2bba28a003917ca8228ba4199948ae2d5", "patch": "@@ -5,7 +5,7 @@\n \n use super::{OutlivesConstraint, RegionInferenceContext};\n use crate::borrow_check::type_check::Locations;\n-use rustc_infer::infer::NLLRegionVariableOrigin;\n+use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::ty::TyCtxt;\n use std::io::{self, Write};\n \n@@ -20,7 +20,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         writeln!(out, \"| Free Region Mapping\")?;\n \n         for region in self.regions() {\n-            if let NLLRegionVariableOrigin::FreeRegion = self.definitions[region].origin {\n+            if let NllRegionVariableOrigin::FreeRegion = self.definitions[region].origin {\n                 let classification = self.universal_regions.region_classification(region).unwrap();\n                 let outlived_by = self.universal_region_relations.regions_outlived_by(region);\n                 writeln!("}, {"sha": "bbd512fd36050aebcd2d7fafff603deaa4734124", "filename": "compiler/rustc_mir/src/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=9e8753e2bba28a003917ca8228ba4199948ae2d5", "patch": "@@ -9,7 +9,7 @@ use rustc_hir::def_id::DefId;\n use rustc_index::vec::IndexVec;\n use rustc_infer::infer::canonical::QueryOutlivesConstraint;\n use rustc_infer::infer::region_constraints::{GenericKind, VarInfos, VerifyBound};\n-use rustc_infer::infer::{InferCtxt, NLLRegionVariableOrigin, RegionVariableOrigin};\n+use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin, RegionVariableOrigin};\n use rustc_middle::mir::{\n     Body, ClosureOutlivesRequirement, ClosureOutlivesSubject, ClosureRegionRequirements,\n     ConstraintCategory, Local, Location, ReturnConstraint,\n@@ -143,9 +143,9 @@ pub(crate) struct AppliedMemberConstraint {\n \n pub(crate) struct RegionDefinition<'tcx> {\n     /// What kind of variable is this -- a free region? existential\n-    /// variable? etc. (See the `NLLRegionVariableOrigin` for more\n+    /// variable? etc. (See the `NllRegionVariableOrigin` for more\n     /// info.)\n-    pub(in crate::borrow_check) origin: NLLRegionVariableOrigin,\n+    pub(in crate::borrow_check) origin: NllRegionVariableOrigin,\n \n     /// Which universe is this region variable defined in? This is\n     /// most often `ty::UniverseIndex::ROOT`, but when we encounter\n@@ -451,7 +451,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             let scc = self.constraint_sccs.scc(variable);\n \n             match self.definitions[variable].origin {\n-                NLLRegionVariableOrigin::FreeRegion => {\n+                NllRegionVariableOrigin::FreeRegion => {\n                     // For each free, universally quantified region X:\n \n                     // Add all nodes in the CFG to liveness constraints\n@@ -462,7 +462,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     self.scc_values.add_element(scc, variable);\n                 }\n \n-                NLLRegionVariableOrigin::Placeholder(placeholder) => {\n+                NllRegionVariableOrigin::Placeholder(placeholder) => {\n                     // Each placeholder region is only visible from\n                     // its universe `ui` and its extensions. So we\n                     // can't just add it into `scc` unless the\n@@ -480,8 +480,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     }\n                 }\n \n-                NLLRegionVariableOrigin::RootEmptyRegion\n-                | NLLRegionVariableOrigin::Existential { .. } => {\n+                NllRegionVariableOrigin::RootEmptyRegion\n+                | NllRegionVariableOrigin::Existential { .. } => {\n                     // For existential, regions, nothing to do.\n                 }\n             }\n@@ -1348,7 +1348,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ) {\n         for (fr, fr_definition) in self.definitions.iter_enumerated() {\n             match fr_definition.origin {\n-                NLLRegionVariableOrigin::FreeRegion => {\n+                NllRegionVariableOrigin::FreeRegion => {\n                     // Go through each of the universal regions `fr` and check that\n                     // they did not grow too large, accumulating any requirements\n                     // for our caller into the `outlives_requirements` vector.\n@@ -1360,12 +1360,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     );\n                 }\n \n-                NLLRegionVariableOrigin::Placeholder(placeholder) => {\n+                NllRegionVariableOrigin::Placeholder(placeholder) => {\n                     self.check_bound_universal_region(fr, placeholder, errors_buffer);\n                 }\n \n-                NLLRegionVariableOrigin::RootEmptyRegion\n-                | NLLRegionVariableOrigin::Existential { .. } => {\n+                NllRegionVariableOrigin::RootEmptyRegion\n+                | NllRegionVariableOrigin::Existential { .. } => {\n                     // nothing to check here\n                 }\n             }\n@@ -1449,7 +1449,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 errors_buffer.push(RegionErrorKind::RegionError {\n                     longer_fr: *longer_fr,\n                     shorter_fr: *shorter_fr,\n-                    fr_origin: NLLRegionVariableOrigin::FreeRegion,\n+                    fr_origin: NllRegionVariableOrigin::FreeRegion,\n                     is_reported: true,\n                 });\n             }\n@@ -1459,16 +1459,16 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         // a more complete picture on how to separate this responsibility.\n         for (fr, fr_definition) in self.definitions.iter_enumerated() {\n             match fr_definition.origin {\n-                NLLRegionVariableOrigin::FreeRegion => {\n+                NllRegionVariableOrigin::FreeRegion => {\n                     // handled by polonius above\n                 }\n \n-                NLLRegionVariableOrigin::Placeholder(placeholder) => {\n+                NllRegionVariableOrigin::Placeholder(placeholder) => {\n                     self.check_bound_universal_region(fr, placeholder, errors_buffer);\n                 }\n \n-                NLLRegionVariableOrigin::RootEmptyRegion\n-                | NLLRegionVariableOrigin::Existential { .. } => {\n+                NllRegionVariableOrigin::RootEmptyRegion\n+                | NllRegionVariableOrigin::Existential { .. } => {\n                     // nothing to check here\n                 }\n             }\n@@ -1516,7 +1516,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 errors_buffer.push(RegionErrorKind::RegionError {\n                     longer_fr,\n                     shorter_fr: representative,\n-                    fr_origin: NLLRegionVariableOrigin::FreeRegion,\n+                    fr_origin: NllRegionVariableOrigin::FreeRegion,\n                     is_reported: true,\n                 });\n             }\n@@ -1539,7 +1539,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 errors_buffer.push(RegionErrorKind::RegionError {\n                     longer_fr,\n                     shorter_fr,\n-                    fr_origin: NLLRegionVariableOrigin::FreeRegion,\n+                    fr_origin: NllRegionVariableOrigin::FreeRegion,\n                     is_reported: !error_reported,\n                 });\n \n@@ -1597,7 +1597,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 let blame_span_category = self.find_outlives_blame_span(\n                     body,\n                     longer_fr,\n-                    NLLRegionVariableOrigin::FreeRegion,\n+                    NllRegionVariableOrigin::FreeRegion,\n                     shorter_fr,\n                 );\n \n@@ -1656,7 +1656,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         errors_buffer.push(RegionErrorKind::BoundUniversalRegionError {\n             longer_fr,\n             error_element,\n-            fr_origin: NLLRegionVariableOrigin::Placeholder(placeholder),\n+            fr_origin: NllRegionVariableOrigin::Placeholder(placeholder),\n         });\n     }\n \n@@ -1732,7 +1732,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         debug!(\"cannot_name_value_of(r1={:?}, r2={:?})\", r1, r2);\n \n         match self.definitions[r2].origin {\n-            NLLRegionVariableOrigin::Placeholder(placeholder) => {\n+            NllRegionVariableOrigin::Placeholder(placeholder) => {\n                 let universe1 = self.definitions[r1].universe;\n                 debug!(\n                     \"cannot_name_value_of: universe1={:?} placeholder={:?}\",\n@@ -1741,9 +1741,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 universe1.cannot_name(placeholder.universe)\n             }\n \n-            NLLRegionVariableOrigin::RootEmptyRegion\n-            | NLLRegionVariableOrigin::FreeRegion\n-            | NLLRegionVariableOrigin::Existential { .. } => false,\n+            NllRegionVariableOrigin::RootEmptyRegion\n+            | NllRegionVariableOrigin::FreeRegion\n+            | NllRegionVariableOrigin::Existential { .. } => false,\n         }\n     }\n \n@@ -1771,7 +1771,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         body: &Body<'tcx>,\n         fr1: RegionVid,\n-        fr1_origin: NLLRegionVariableOrigin,\n+        fr1_origin: NllRegionVariableOrigin,\n         fr2: RegionVid,\n     ) -> (ConstraintCategory, Span) {\n         let (category, _, span) = self.best_blame_constraint(body, fr1, fr1_origin, |r| {\n@@ -1933,7 +1933,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 .definitions\n                 .iter_enumerated()\n                 .find_map(|(r, definition)| match definition.origin {\n-                    NLLRegionVariableOrigin::Placeholder(p) if p == error_placeholder => Some(r),\n+                    NllRegionVariableOrigin::Placeholder(p) if p == error_placeholder => Some(r),\n                     _ => None,\n                 })\n                 .unwrap(),\n@@ -1965,7 +1965,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         &self,\n         body: &Body<'tcx>,\n         from_region: RegionVid,\n-        from_region_origin: NLLRegionVariableOrigin,\n+        from_region_origin: NllRegionVariableOrigin,\n         target_test: impl Fn(RegionVid) -> bool,\n     ) -> (ConstraintCategory, bool, Span) {\n         debug!(\n@@ -2059,11 +2059,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         //\n         // and here we prefer to blame the source (the y = x statement).\n         let blame_source = match from_region_origin {\n-            NLLRegionVariableOrigin::FreeRegion\n-            | NLLRegionVariableOrigin::Existential { from_forall: false } => true,\n-            NLLRegionVariableOrigin::RootEmptyRegion\n-            | NLLRegionVariableOrigin::Placeholder(_)\n-            | NLLRegionVariableOrigin::Existential { from_forall: true } => false,\n+            NllRegionVariableOrigin::FreeRegion\n+            | NllRegionVariableOrigin::Existential { from_forall: false } => true,\n+            NllRegionVariableOrigin::RootEmptyRegion\n+            | NllRegionVariableOrigin::Placeholder(_)\n+            | NllRegionVariableOrigin::Existential { from_forall: true } => false,\n         };\n \n         let find_region = |i: &usize| {\n@@ -2144,8 +2144,8 @@ impl<'tcx> RegionDefinition<'tcx> {\n         // `init_universal_regions`.\n \n         let origin = match rv_origin {\n-            RegionVariableOrigin::NLL(origin) => origin,\n-            _ => NLLRegionVariableOrigin::Existential { from_forall: false },\n+            RegionVariableOrigin::Nll(origin) => origin,\n+            _ => NllRegionVariableOrigin::Existential { from_forall: false },\n         };\n \n         Self { origin, universe, external_name: None }"}, {"sha": "9377473befe32c011b7c92d8374972222ae3c666", "filename": "compiler/rustc_mir/src/borrow_check/renumber.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Frenumber.rs?ref=9e8753e2bba28a003917ca8228ba4199948ae2d5", "patch": "@@ -1,5 +1,5 @@\n use rustc_index::vec::IndexVec;\n-use rustc_infer::infer::{InferCtxt, NLLRegionVariableOrigin};\n+use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n use rustc_middle::mir::visit::{MutVisitor, TyContext};\n use rustc_middle::mir::{Body, Location, PlaceElem, Promoted};\n use rustc_middle::ty::subst::SubstsRef;\n@@ -15,7 +15,7 @@ pub fn renumber_mir<'tcx>(\n     debug!(\"renumber_mir()\");\n     debug!(\"renumber_mir: body.arg_count={:?}\", body.arg_count);\n \n-    let mut visitor = NLLVisitor { infcx };\n+    let mut visitor = NllVisitor { infcx };\n \n     for body in promoted.iter_mut() {\n         visitor.visit_body(body);\n@@ -33,16 +33,16 @@ where\n     debug!(\"renumber_regions(value={:?})\", value);\n \n     infcx.tcx.fold_regions(value, &mut false, |_region, _depth| {\n-        let origin = NLLRegionVariableOrigin::Existential { from_forall: false };\n+        let origin = NllRegionVariableOrigin::Existential { from_forall: false };\n         infcx.next_nll_region_var(origin)\n     })\n }\n \n-struct NLLVisitor<'a, 'tcx> {\n+struct NllVisitor<'a, 'tcx> {\n     infcx: &'a InferCtxt<'a, 'tcx>,\n }\n \n-impl<'a, 'tcx> NLLVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> NllVisitor<'a, 'tcx> {\n     fn renumber_regions<T>(&mut self, value: T) -> T\n     where\n         T: TypeFoldable<'tcx>,\n@@ -51,7 +51,7 @@ impl<'a, 'tcx> NLLVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n+impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.infcx.tcx\n     }"}, {"sha": "3ba06bdd6e05f9b97a06d5199634cb9354e48ffc", "filename": "compiler/rustc_mir/src/borrow_check/type_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=9e8753e2bba28a003917ca8228ba4199948ae2d5", "patch": "@@ -16,7 +16,7 @@ use rustc_infer::infer::canonical::QueryRegionConstraints;\n use rustc_infer::infer::outlives::env::RegionBoundPairs;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::{\n-    InferCtxt, InferOk, LateBoundRegionConversionTime, NLLRegionVariableOrigin,\n+    InferCtxt, InferOk, LateBoundRegionConversionTime, NllRegionVariableOrigin,\n };\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::visit::{NonMutatingUseContext, PlaceContext, Visitor};\n@@ -872,7 +872,7 @@ impl MirTypeckRegionConstraints<'tcx> {\n         match self.placeholder_index_to_region.get(placeholder_index) {\n             Some(&v) => v,\n             None => {\n-                let origin = NLLRegionVariableOrigin::Placeholder(placeholder);\n+                let origin = NllRegionVariableOrigin::Placeholder(placeholder);\n                 let region = infcx.next_nll_region_var_in_universe(origin, placeholder.universe);\n                 self.placeholder_index_to_region.push(region);\n                 region"}, {"sha": "6665eb5ad5fffcc21d2200ba9fe6caba1a360e88", "filename": "compiler/rustc_mir/src/borrow_check/type_check/relate_tys.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Ftype_check%2Frelate_tys.rs?ref=9e8753e2bba28a003917ca8228ba4199948ae2d5", "patch": "@@ -1,5 +1,5 @@\n use rustc_infer::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n-use rustc_infer::infer::{InferCtxt, NLLRegionVariableOrigin};\n+use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Const, Ty};\n@@ -64,7 +64,7 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n \n     fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n         if self.borrowck_context.is_some() {\n-            let origin = NLLRegionVariableOrigin::Existential { from_forall };\n+            let origin = NllRegionVariableOrigin::Existential { from_forall };\n             self.infcx.next_nll_region_var(origin)\n         } else {\n             self.infcx.tcx.lifetimes.re_erased\n@@ -81,7 +81,7 @@ impl TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx> {\n \n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n         self.infcx.next_nll_region_var_in_universe(\n-            NLLRegionVariableOrigin::Existential { from_forall: false },\n+            NllRegionVariableOrigin::Existential { from_forall: false },\n             universe,\n         )\n     }"}, {"sha": "4b1acc1cd105e5efdedcf488cdb2d8767ed27cb7", "filename": "compiler/rustc_mir/src/borrow_check/universal_regions.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e8753e2bba28a003917ca8228ba4199948ae2d5/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs?ref=9e8753e2bba28a003917ca8228ba4199948ae2d5", "patch": "@@ -20,7 +20,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{BodyOwnerKind, HirId};\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_infer::infer::{InferCtxt, NLLRegionVariableOrigin};\n+use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::subst::{InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::{self, RegionVid, Ty, TyCtxt};\n@@ -393,7 +393,7 @@ struct UniversalRegionsBuilder<'cx, 'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n-const FR: NLLRegionVariableOrigin = NLLRegionVariableOrigin::FreeRegion;\n+const FR: NllRegionVariableOrigin = NllRegionVariableOrigin::FreeRegion;\n \n impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n     fn build(self) -> UniversalRegions<'tcx> {\n@@ -486,7 +486,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n         let root_empty = self\n             .infcx\n-            .next_nll_region_var(NLLRegionVariableOrigin::RootEmptyRegion)\n+            .next_nll_region_var(NllRegionVariableOrigin::RootEmptyRegion)\n             .to_region_vid();\n \n         UniversalRegions {\n@@ -647,15 +647,15 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n trait InferCtxtExt<'tcx> {\n     fn replace_free_regions_with_nll_infer_vars<T>(\n         &self,\n-        origin: NLLRegionVariableOrigin,\n+        origin: NllRegionVariableOrigin,\n         value: T,\n     ) -> T\n     where\n         T: TypeFoldable<'tcx>;\n \n     fn replace_bound_regions_with_nll_infer_vars<T>(\n         &self,\n-        origin: NLLRegionVariableOrigin,\n+        origin: NllRegionVariableOrigin,\n         all_outlive_scope: LocalDefId,\n         value: ty::Binder<T>,\n         indices: &mut UniversalRegionIndices<'tcx>,\n@@ -673,7 +673,7 @@ trait InferCtxtExt<'tcx> {\n impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n     fn replace_free_regions_with_nll_infer_vars<T>(\n         &self,\n-        origin: NLLRegionVariableOrigin,\n+        origin: NllRegionVariableOrigin,\n         value: T,\n     ) -> T\n     where\n@@ -684,7 +684,7 @@ impl<'cx, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'cx, 'tcx> {\n \n     fn replace_bound_regions_with_nll_infer_vars<T>(\n         &self,\n-        origin: NLLRegionVariableOrigin,\n+        origin: NllRegionVariableOrigin,\n         all_outlive_scope: LocalDefId,\n         value: ty::Binder<T>,\n         indices: &mut UniversalRegionIndices<'tcx>,"}]}