{"sha": "d37e2f74afd131cda7b08520d37426bfbb622b5c", "node_id": "C_kwDOAAsO6NoAKGQzN2UyZjc0YWZkMTMxY2RhN2IwODUyMGQzNzQyNmJmYmI2MjJiNWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-13T07:02:53Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-13T07:02:53Z"}, "message": "Auto merge of #109786 - estebank:tweak-add-line-sugg, r=compiler-errors\n\nTweak output for 'add line' suggestion\n\nCloses #108174", "tree": {"sha": "bb0098aae948e2e63dc7631385c80806ab7dc13d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb0098aae948e2e63dc7631385c80806ab7dc13d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d37e2f74afd131cda7b08520d37426bfbb622b5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d37e2f74afd131cda7b08520d37426bfbb622b5c", "html_url": "https://github.com/rust-lang/rust/commit/d37e2f74afd131cda7b08520d37426bfbb622b5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d37e2f74afd131cda7b08520d37426bfbb622b5c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a29dada983fa8d44f789d3a64408b7ad4f4c3487", "url": "https://api.github.com/repos/rust-lang/rust/commits/a29dada983fa8d44f789d3a64408b7ad4f4c3487", "html_url": "https://github.com/rust-lang/rust/commit/a29dada983fa8d44f789d3a64408b7ad4f4c3487"}, {"sha": "9fadcc143a49a124fa1d0d3261593defb986a987", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fadcc143a49a124fa1d0d3261593defb986a987", "html_url": "https://github.com/rust-lang/rust/commit/9fadcc143a49a124fa1d0d3261593defb986a987"}], "stats": {"total": 754, "additions": 458, "deletions": 296}, "files": [{"sha": "fe44799efdb6a946b9daa54c714e58a55c1a3513", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -1832,6 +1832,12 @@ impl EmitterWriter {\n             }\n             let show_code_change = if has_deletion && !is_multiline {\n                 DisplaySuggestion::Diff\n+            } else if let [part] = &parts[..]\n+                && part.snippet.ends_with('\\n')\n+                && part.snippet.trim() == complete.trim()\n+            {\n+                // We are adding a line(s) of code before code that was already there.\n+                DisplaySuggestion::Add\n             } else if (parts.len() != 1 || parts[0].snippet.trim() != complete.trim())\n                 && !is_multiline\n             {\n@@ -1879,14 +1885,23 @@ impl EmitterWriter {\n                 row_num += line_end - line_start;\n             }\n             let mut unhighlighted_lines = Vec::new();\n+            let mut last_pos = 0;\n+            let mut is_item_attribute = false;\n             for (line_pos, (line, highlight_parts)) in lines.by_ref().zip(highlights).enumerate() {\n+                last_pos = line_pos;\n                 debug!(%line_pos, %line, ?highlight_parts);\n \n                 // Remember lines that are not highlighted to hide them if needed\n                 if highlight_parts.is_empty() {\n                     unhighlighted_lines.push((line_pos, line));\n                     continue;\n                 }\n+                if highlight_parts.len() == 1\n+                    && line.trim().starts_with(\"#[\")\n+                    && line.trim().ends_with(']')\n+                {\n+                    is_item_attribute = true;\n+                }\n \n                 match unhighlighted_lines.len() {\n                     0 => (),\n@@ -1963,13 +1978,41 @@ impl EmitterWriter {\n                     is_multiline,\n                 )\n             }\n+            if let DisplaySuggestion::Add = show_code_change && is_item_attribute {\n+                // The suggestion adds an entire line of code, ending on a newline, so we'll also\n+                // print the *following* line, to provide context of what we're advicing people to\n+                // do. Otherwise you would only see contextless code that can be confused for\n+                // already existing code, despite the colors and UI elements.\n+                // We special case `#[derive(_)]\\n` and other attribute suggestions, because those\n+                // are the ones where context is most useful.\n+                let file_lines = sm\n+                    .span_to_lines(span.primary_span().unwrap().shrink_to_hi())\n+                    .expect(\"span_to_lines failed when emitting suggestion\");\n+                let line_num = sm.lookup_char_pos(parts[0].span.lo()).line;\n+                if let Some(line) = file_lines.file.get_line(line_num - 1) {\n+                    let line = normalize_whitespace(&line);\n+                    self.draw_code_line(\n+                        &mut buffer,\n+                        &mut row_num,\n+                        &[],\n+                        line_num + last_pos + 1,\n+                        &line,\n+                        DisplaySuggestion::None,\n+                        max_line_num_len,\n+                        &file_lines,\n+                        is_multiline,\n+                    )\n+                }\n+            }\n \n             // This offset and the ones below need to be signed to account for replacement code\n             // that is shorter than the original code.\n             let mut offsets: Vec<(usize, isize)> = Vec::new();\n             // Only show an underline in the suggestions if the suggestion is not the\n             // entirety of the code being shown and the displayed code is not multiline.\n-            if let DisplaySuggestion::Diff | DisplaySuggestion::Underline = show_code_change {\n+            if let DisplaySuggestion::Diff | DisplaySuggestion::Underline | DisplaySuggestion::Add =\n+                show_code_change\n+            {\n                 draw_col_separator_no_space(&mut buffer, row_num, max_line_num_len + 1);\n                 for part in parts {\n                     let span_start_pos = sm.lookup_char_pos(part.span.lo()).col_display;\n@@ -2247,6 +2290,10 @@ impl EmitterWriter {\n                 }\n             }\n             buffer.append(*row_num, &normalize_whitespace(line_to_add), Style::NoStyle);\n+        } else if let DisplaySuggestion::Add = show_code_change {\n+            buffer.puts(*row_num, 0, &self.maybe_anonymized(line_num), Style::LineNumber);\n+            buffer.puts(*row_num, max_line_num_len + 1, \"+ \", Style::Addition);\n+            buffer.append(*row_num, &normalize_whitespace(line_to_add), Style::NoStyle);\n         } else {\n             buffer.puts(*row_num, 0, &self.maybe_anonymized(line_num), Style::LineNumber);\n             draw_col_separator(buffer, *row_num, max_line_num_len + 1);\n@@ -2281,6 +2328,7 @@ enum DisplaySuggestion {\n     Underline,\n     Diff,\n     None,\n+    Add,\n }\n \n impl FileWithAnnotatedLines {"}, {"sha": "4787282f504a6c58959a7b9fdcaab60d943fe86a", "filename": "src/tools/clippy/tests/ui/crashes/ice-6252.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6252.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,11 +6,11 @@ LL |     _n: PhantomData,\n    |\n help: consider importing one of these items\n    |\n-LL | use core::marker::PhantomData;\n+LL + use core::marker::PhantomData;\n    |\n-LL | use serde::__private::PhantomData;\n+LL + use serde::__private::PhantomData;\n    |\n-LL | use std::marker::PhantomData;\n+LL + use std::marker::PhantomData;\n    |\n \n error[E0412]: cannot find type `VAL` in this scope"}, {"sha": "8089f5ea0fcb2ec15891dc4fdb4b77ffa11074e8", "filename": "src/tools/clippy/tests/ui/derivable_impls.stderr", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -14,7 +14,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct FooDefault<'a> {\n    |\n \n error: this `impl` can be derived\n@@ -30,7 +31,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct TupleDefault(bool, i32, u64);\n    |\n \n error: this `impl` can be derived\n@@ -46,7 +48,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct StrDefault<'a>(&'a str);\n    |\n \n error: this `impl` can be derived\n@@ -62,7 +65,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct Y(u32);\n    |\n \n error: this `impl` can be derived\n@@ -78,7 +82,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct WithoutSelfCurly {\n    |\n \n error: this `impl` can be derived\n@@ -94,7 +99,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct WithoutSelfParan(bool);\n    |\n \n error: this `impl` can be derived\n@@ -110,7 +116,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | pub struct RepeatDefault1 {\n    |\n \n error: this `impl` can be derived\n@@ -126,7 +133,8 @@ LL | | }\n    = help: remove the manual implementation...\n help: ...and instead derive it...\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | pub enum SimpleEnum {\n    |\n help: ...and mark the default variant\n    |"}, {"sha": "e8bac04ac4503547005bbb800efb0fd152494575", "filename": "tests/ui/array-slice-vec/repeat_empty_ok.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -7,7 +7,8 @@ LL |     let headers = [Header{value: &[]}; 128];\n    = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Header<'_>` with `#[derive(Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL + #[derive(Copy)]\n+LL | pub struct Header<'a> {\n    |\n \n error[E0277]: the trait bound `Header<'_>: Copy` is not satisfied\n@@ -19,7 +20,8 @@ LL |     let headers = [Header{value: &[0]}; 128];\n    = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Header<'_>` with `#[derive(Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL + #[derive(Copy)]\n+LL | pub struct Header<'a> {\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "4b2094691f8cc350a8a3834dcaa434ff641ef7b6", "filename": "tests/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -11,7 +11,8 @@ LL |     type Ty: Clone = NotClone;\n    |              ^^^^^ required by this bound in `Tr::Ty`\n help: consider annotating `NotClone` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct NotClone;\n    |\n \n error[E0277]: the trait bound `NotClone: Clone` is not satisfied\n@@ -30,7 +31,8 @@ LL |     type Ty = NotClone;\n    |          -- required by a bound in this associated type\n help: consider annotating `NotClone` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct NotClone;\n    |\n \n error[E0277]: the trait bound `T: Clone` is not satisfied"}, {"sha": "bb9f3b8af0ff17dd5be9eb685a87fe0c509d7c4e", "filename": "tests/ui/binop/issue-28837.stderr", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fbinop%2Fissue-28837.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fbinop%2Fissue-28837.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbinop%2Fissue-28837.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -157,7 +157,8 @@ LL | struct A;\n    | ^^^^^^^^ must implement `PartialEq<_>`\n help: consider annotating `A` with `#[derive(PartialEq)]`\n    |\n-LL | #[derive(PartialEq)]\n+LL + #[derive(PartialEq)]\n+LL | struct A;\n    |\n \n error[E0369]: binary operation `!=` cannot be applied to type `A`\n@@ -175,7 +176,8 @@ LL | struct A;\n    | ^^^^^^^^ must implement `PartialEq<_>`\n help: consider annotating `A` with `#[derive(PartialEq)]`\n    |\n-LL | #[derive(PartialEq)]\n+LL + #[derive(PartialEq)]\n+LL | struct A;\n    |\n \n error[E0369]: binary operation `<` cannot be applied to type `A`\n@@ -193,7 +195,8 @@ LL | struct A;\n    | ^^^^^^^^ must implement `PartialOrd<_>`\n help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialEq, PartialOrd)]\n+LL + #[derive(PartialEq, PartialOrd)]\n+LL | struct A;\n    |\n \n error[E0369]: binary operation `<=` cannot be applied to type `A`\n@@ -211,7 +214,8 @@ LL | struct A;\n    | ^^^^^^^^ must implement `PartialOrd<_>`\n help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialEq, PartialOrd)]\n+LL + #[derive(PartialEq, PartialOrd)]\n+LL | struct A;\n    |\n \n error[E0369]: binary operation `>` cannot be applied to type `A`\n@@ -229,7 +233,8 @@ LL | struct A;\n    | ^^^^^^^^ must implement `PartialOrd<_>`\n help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialEq, PartialOrd)]\n+LL + #[derive(PartialEq, PartialOrd)]\n+LL | struct A;\n    |\n \n error[E0369]: binary operation `>=` cannot be applied to type `A`\n@@ -247,7 +252,8 @@ LL | struct A;\n    | ^^^^^^^^ must implement `PartialOrd<_>`\n help: consider annotating `A` with `#[derive(PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(PartialEq, PartialOrd)]\n+LL + #[derive(PartialEq, PartialOrd)]\n+LL | struct A;\n    |\n \n error: aborting due to 15 previous errors"}, {"sha": "2fd5b0d82e8fab5521f1b7343101984b43a27a77", "filename": "tests/ui/box/unit/unique-pinned-nocopy.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fbox%2Funit%2Funique-pinned-nocopy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fbox%2Funit%2Funique-pinned-nocopy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbox%2Funit%2Funique-pinned-nocopy.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -19,7 +19,8 @@ LL |       let _j = i.clone();\n            candidate #1: `Clone`\n help: consider annotating `R` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct R {\n    |\n \n error: aborting due to previous error"}, {"sha": "b381b0680734f4a3b1c8fc126a89a474a5179b3c", "filename": "tests/ui/coherence/coherence_inherent.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fcoherence%2Fcoherence_inherent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fcoherence%2Fcoherence_inherent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence_inherent.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -7,7 +7,7 @@ LL |         s.the_fn();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL |     use Lib::TheTrait;\n+LL +     use Lib::TheTrait;\n    |\n \n error: aborting due to previous error"}, {"sha": "7b6cb7d4390b42ae72ba7e41ce1e2069c06e9688", "filename": "tests/ui/coherence/coherence_inherent_cc.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence_inherent_cc.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -7,7 +7,7 @@ LL |         s.the_fn();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL |     use coherence_inherent_cc_lib::TheTrait;\n+LL +     use coherence_inherent_cc_lib::TheTrait;\n    |\n \n error: aborting due to previous error"}, {"sha": "dc7d0c54fcc9add69193b01f1de5e39cbff0b9e8", "filename": "tests/ui/const-generics/generic_const_exprs/issue-94287.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-94287.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -8,7 +8,7 @@ LL |     If<{ FRAC <= 32 }>: True,\n help: consider enabling this feature\n   --> $DIR/issue-94287.rs:1:1\n    |\n-LL | #![feature(generic_const_exprs)]\n+LL + #![feature(generic_const_exprs)]\n    |\n \n error: aborting due to previous error"}, {"sha": "d70c8d0bfbf3497c4542a7d62d12186d7cd36d40", "filename": "tests/ui/const-generics/issues/issue-82956.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,13 +6,13 @@ LL |         let mut iter = IntoIter::new(self);\n    |\n help: consider importing one of these items\n    |\n-LL | use std::array::IntoIter;\n+LL + use std::array::IntoIter;\n    |\n-LL | use std::collections::binary_heap::IntoIter;\n+LL + use std::collections::binary_heap::IntoIter;\n    |\n-LL | use std::collections::btree_map::IntoIter;\n+LL + use std::collections::btree_map::IntoIter;\n    |\n-LL | use std::collections::btree_set::IntoIter;\n+LL + use std::collections::btree_set::IntoIter;\n    |\n      and 8 other candidates\n "}, {"sha": "174103eeba4c4d37c948d12db26939f18ea3d320", "filename": "tests/ui/consts/const-blocks/fn-call-in-non-const.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |     let _: [Option<Bar>; 2] = [no_copy(); 2];\n    = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n help: consider annotating `Bar` with `#[derive(Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL + #[derive(Copy)]\n+LL | struct Bar;\n    |\n \n error: aborting due to previous error"}, {"sha": "d1896f755d53044c4137cc9f37d08fd22e7668be", "filename": "tests/ui/consts/const-blocks/migrate-fail.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -8,7 +8,8 @@ LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Bar` with `#[derive(Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL + #[derive(Copy)]\n+LL | struct Bar;\n    |\n \n error[E0277]: the trait bound `Bar: Copy` is not satisfied\n@@ -21,7 +22,8 @@ LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Bar` with `#[derive(Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL + #[derive(Copy)]\n+LL | struct Bar;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "807c964a51d6f905dcf9c3d4ab6c65ecbe596207", "filename": "tests/ui/consts/const-blocks/nll-fail.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -8,7 +8,8 @@ LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Bar` with `#[derive(Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL + #[derive(Copy)]\n+LL | struct Bar;\n    |\n \n error[E0277]: the trait bound `Bar: Copy` is not satisfied\n@@ -21,7 +22,8 @@ LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Bar` with `#[derive(Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL + #[derive(Copy)]\n+LL | struct Bar;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "7ec2508ca93a61980bee0511c011a814618f55a5", "filename": "tests/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -22,11 +22,13 @@ LL | const fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |\n help: if it is not part of the public API, make this function unstably const\n    |\n-LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n+LL + #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n+LL | const fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |\n help: otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n    |\n-LL | #[rustc_allow_const_fn_unstable(const_fn_floating_point_arithmetic)]\n+LL + #[rustc_allow_const_fn_unstable(const_fn_floating_point_arithmetic)]\n+LL | const fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |\n \n error: `foo2_gated` is not yet stable as a const fn"}, {"sha": "72c1f175d1d6b68b0af11a8baa0c5422f2c886c5", "filename": "tests/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -22,11 +22,13 @@ LL | const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |\n help: if it is not part of the public API, make this function unstably const\n    |\n-LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n+LL + #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n+LL | const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |\n help: otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n    |\n-LL | #[rustc_allow_const_fn_unstable(const_fn_floating_point_arithmetic)]\n+LL + #[rustc_allow_const_fn_unstable(const_fn_floating_point_arithmetic)]\n+LL | const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 }\n    |\n \n error: `foo2_gated` is not yet stable as a const fn"}, {"sha": "a0262f4c1e597c86e408f22ba49f4e8bd20c1fc1", "filename": "tests/ui/derived-errors/issue-31997-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderived-errors%2Fissue-31997-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderived-errors%2Fissue-31997-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderived-errors%2Fissue-31997-1.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |     let mut map = HashMap::new();\n    |\n help: consider importing this struct\n    |\n-LL | use std::collections::HashMap;\n+LL + use std::collections::HashMap;\n    |\n \n error: aborting due to previous error"}, {"sha": "9f17c76c2ec6d89e5b91aa676fed5b505e9af90d", "filename": "tests/ui/derives/derive-assoc-type-not-impl.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderive-assoc-type-not-impl.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -23,7 +23,8 @@ LL | #[derive(Clone)]\n            candidate #1: `Clone`\n help: consider annotating `NotClone` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct NotClone;\n    |\n \n error: aborting due to previous error"}, {"sha": "31ab589cf385a20918f45fdca0cc5c8ba832a5f6", "filename": "tests/ui/derives/derives-span-Clone-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Clone-enum-struct-variant.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |      x: Error\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "b5580c02f38f354d82691abccce2083dcf574e4c", "filename": "tests/ui/derives/derives-span-Clone-enum.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Clone-enum.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |      Error\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "fbe7e3f8479dab2a36092b31bd5842fcb8791577", "filename": "tests/ui/derives/derives-span-Clone-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Clone-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |     x: Error\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "639f4d54254783ce7c00106fb01d392b4d285ce2", "filename": "tests/ui/derives/derives-span-Clone-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Clone-tuple-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |     Error\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "7ff6851f6555b533c5d0c6f50334805fd100586b", "filename": "tests/ui/derives/derives-span-Debug-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Debug-enum-struct-variant.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,8 @@ LL |      x: Error\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Debug)]`\n    |\n-LL | #[derive(Debug)]\n+LL + #[derive(Debug)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "346cbec90a94026b2813ec970f2922eb204e09c0", "filename": "tests/ui/derives/derives-span-Debug-enum.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Debug-enum.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,8 @@ LL |      Error\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Debug)]`\n    |\n-LL | #[derive(Debug)]\n+LL + #[derive(Debug)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "4b39eeb09ee8a896197640e80fef609089479566", "filename": "tests/ui/derives/derives-span-Debug-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Debug-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,8 @@ LL |     x: Error\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Debug)]`\n    |\n-LL | #[derive(Debug)]\n+LL + #[derive(Debug)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "f3043abcadd223c80dea3997c556036e06a6079e", "filename": "tests/ui/derives/derives-span-Debug-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Debug-tuple-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,8 @@ LL |     Error\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Debug)]`\n    |\n-LL | #[derive(Debug)]\n+LL + #[derive(Debug)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "4844b635924028b352cfc2dc0a7df19de12f8da2", "filename": "tests/ui/derives/derives-span-Default-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Default-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Default-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |     x: Error\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Default)]`\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "9cac7f10780ff20c4965272fff4331c138457ef9", "filename": "tests/ui/derives/derives-span-Default-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Default-tuple-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |     Error\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Default)]`\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "1a9ff9832557dfc1f2188c89d4b7d7703dd2af91", "filename": "tests/ui/derives/derives-span-Eq-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Eq-enum-struct-variant.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,8 @@ note: required by a bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Eq)]`\n    |\n-LL | #[derive(Eq)]\n+LL + #[derive(Eq)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "8205657bb7104efa7a402431ae87c8d7e4bf3e21", "filename": "tests/ui/derives/derives-span-Eq-enum.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Eq-enum.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,8 @@ note: required by a bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Eq)]`\n    |\n-LL | #[derive(Eq)]\n+LL + #[derive(Eq)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "af510181df7dbb15a27e3764d47f444826d1d704", "filename": "tests/ui/derives/derives-span-Eq-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Eq-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,8 @@ note: required by a bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Eq)]`\n    |\n-LL | #[derive(Eq)]\n+LL + #[derive(Eq)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "f7c371d7d05ace17acd0274ea7fc985933cbeaa7", "filename": "tests/ui/derives/derives-span-Eq-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Eq-tuple-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,8 @@ note: required by a bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Eq)]`\n    |\n-LL | #[derive(Eq)]\n+LL + #[derive(Eq)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "311edade0f3d80fffed52a3440236ebe6e38e7b8", "filename": "tests/ui/derives/derives-span-Hash-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Hash-enum-struct-variant.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |      x: Error\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Hash)]`\n    |\n-LL | #[derive(Hash)]\n+LL + #[derive(Hash)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "043aa954bfa1057be373666c90211cb1b1213574", "filename": "tests/ui/derives/derives-span-Hash-enum.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Hash-enum.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |      Error\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Hash)]`\n    |\n-LL | #[derive(Hash)]\n+LL + #[derive(Hash)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "26d31b6613fe70991fe37683e275d548f051da72", "filename": "tests/ui/derives/derives-span-Hash-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Hash-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |     x: Error\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Hash)]`\n    |\n-LL | #[derive(Hash)]\n+LL + #[derive(Hash)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "3155a023ce8a9fbe7c51aa6b0029578264c0ec45", "filename": "tests/ui/derives/derives-span-Hash-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Hash-tuple-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |     Error\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Hash)]`\n    |\n-LL | #[derive(Hash)]\n+LL + #[derive(Hash)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "1a06aee5235ad100b8671e395b686b9ba18e32f8", "filename": "tests/ui/derives/derives-span-Ord-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Ord-enum-struct-variant.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |      x: Error\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Ord)]`\n    |\n-LL | #[derive(Ord)]\n+LL + #[derive(Ord)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "377728e8a7f668707350cd4b56f776a9d34a8789", "filename": "tests/ui/derives/derives-span-Ord-enum.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Ord-enum.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |      Error\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Ord)]`\n    |\n-LL | #[derive(Ord)]\n+LL + #[derive(Ord)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "e00e990da2a5b25670287153cd47a5d99d423092", "filename": "tests/ui/derives/derives-span-Ord-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Ord-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |     x: Error\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Ord)]`\n    |\n-LL | #[derive(Ord)]\n+LL + #[derive(Ord)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "959d0b96404080c6be70c1ce26106997d2fddb51", "filename": "tests/ui/derives/derives-span-Ord-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-Ord-tuple-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ LL |     Error\n    = note: this error originates in the derive macro `Ord` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(Ord)]`\n    |\n-LL | #[derive(Ord)]\n+LL + #[derive(Ord)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "9fc25f2ade426e879c4842b09743f13d1966284a", "filename": "tests/ui/derives/derives-span-PartialEq-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-PartialEq-enum-struct-variant.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -15,7 +15,8 @@ LL | struct Error;\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |\n-LL | #[derive(PartialEq)]\n+LL + #[derive(PartialEq)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "f56e784478d5f853b609d0a5fef37826abdfe34a", "filename": "tests/ui/derives/derives-span-PartialEq-enum.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-PartialEq-enum.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -15,7 +15,8 @@ LL | struct Error;\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |\n-LL | #[derive(PartialEq)]\n+LL + #[derive(PartialEq)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "76c0b0104afb65bcde31b69c7c5d6560957f7b50", "filename": "tests/ui/derives/derives-span-PartialEq-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-PartialEq-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -15,7 +15,8 @@ LL | struct Error;\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |\n-LL | #[derive(PartialEq)]\n+LL + #[derive(PartialEq)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "7dae01dbb99166e63f3fe1fee9b026dca844ebed", "filename": "tests/ui/derives/derives-span-PartialEq-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-PartialEq-tuple-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -15,7 +15,8 @@ LL | struct Error;\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialEq)]`\n    |\n-LL | #[derive(PartialEq)]\n+LL + #[derive(PartialEq)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "746c1d5d21fd4f9d05f65f9f6b9503a675119b8b", "filename": "tests/ui/derives/derives-span-PartialOrd-enum-struct-variant.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-PartialOrd-enum-struct-variant.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -11,7 +11,8 @@ LL |      x: Error\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL + #[derive(PartialOrd)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "8af1776dac87bd8224608f8e7e37997cc920398c", "filename": "tests/ui/derives/derives-span-PartialOrd-enum.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-PartialOrd-enum.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -11,7 +11,8 @@ LL |      Error\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL + #[derive(PartialOrd)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "11ea7f9dc31beaa79162f8e71aef8cc81f378660", "filename": "tests/ui/derives/derives-span-PartialOrd-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-PartialOrd-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -11,7 +11,8 @@ LL |     x: Error\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL + #[derive(PartialOrd)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "0a41a3db31eac03850490d4046d8dce7a0f87265", "filename": "tests/ui/derives/derives-span-PartialOrd-tuple-struct.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderives-span-PartialOrd-tuple-struct.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -11,7 +11,8 @@ LL |     Error\n    = note: this error originates in the derive macro `PartialOrd` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Error` with `#[derive(PartialOrd)]`\n    |\n-LL | #[derive(PartialOrd)]\n+LL + #[derive(PartialOrd)]\n+LL | struct Error;\n    |\n \n error: aborting due to previous error"}, {"sha": "10af5d36ed93697263d04316b4ca048045d15542", "filename": "tests/ui/derives/deriving-no-inner-impl-error-message.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderiving-no-inner-impl-error-message.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -15,7 +15,8 @@ LL | struct NoCloneOrEq;\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `NoCloneOrEq` with `#[derive(PartialEq)]`\n    |\n-LL | #[derive(PartialEq)]\n+LL + #[derive(PartialEq)]\n+LL | struct NoCloneOrEq;\n    |\n \n error[E0277]: the trait bound `NoCloneOrEq: Clone` is not satisfied\n@@ -30,7 +31,8 @@ LL |     x: NoCloneOrEq\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `NoCloneOrEq` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct NoCloneOrEq;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "afeca9fec2b840ac9a7d1b3c5de31548aa29ef7f", "filename": "tests/ui/derives/deriving-with-repr-packed-2.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderiving-with-repr-packed-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fderiving-with-repr-packed-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fderiving-with-repr-packed-2.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -25,7 +25,8 @@ LL | #[derive(Copy, Clone, Default, PartialEq, Eq)]\n    |                ^^^^^ unsatisfied trait bound introduced in this `derive` macro\n help: consider annotating `NonCopy` with `#[derive(Clone, Copy)]`\n    |\n-LL | #[derive(Clone, Copy)]\n+LL + #[derive(Clone, Copy)]\n+LL | struct NonCopy;\n    |\n \n error: aborting due to previous error"}, {"sha": "fc64828b1533cbcdda264576bffc4919a9e741e0", "filename": "tests/ui/derives/issue-91492.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fissue-91492.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fissue-91492.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fissue-91492.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -11,7 +11,8 @@ LL |     foo.extend_from_slice(bar);\n            `NoDerives: Clone`\n help: consider annotating `NoDerives` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | pub struct NoDerives;\n    |\n \n error[E0599]: the method `extend_from_slice` exists for mutable reference `&mut Vec<SomeDerives>`, but its trait bounds were not satisfied\n@@ -27,7 +28,8 @@ LL |     foo.extend_from_slice(bar);\n            `SomeDerives: Clone`\n help: consider annotating `SomeDerives` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | pub struct SomeDerives;\n    |\n \n error[E0599]: the method `use_clone` exists for struct `Object<NoDerives, SomeDerives>`, but its trait bounds were not satisfied\n@@ -51,7 +53,8 @@ LL | impl<T: Clone, A: Default> Object<T, A> {\n    |         unsatisfied trait bound introduced here\n help: consider annotating `NoDerives` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | pub struct NoDerives;\n    |\n \n error: aborting due to 3 previous errors"}, {"sha": "1324b80b5fcdb901b6685074f0eaa070c6e8282d", "filename": "tests/ui/derives/issue-91550.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fissue-91550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fderives%2Fissue-91550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderives%2Fissue-91550.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -18,7 +18,8 @@ LL |     hs.insert(Value(0));\n            `Value: Hash`\n help: consider annotating `Value` with `#[derive(Eq, Hash, PartialEq)]`\n    |\n-LL | #[derive(Eq, Hash, PartialEq)]\n+LL + #[derive(Eq, Hash, PartialEq)]\n+LL | struct Value(u32);\n    |\n \n error[E0599]: the method `use_eq` exists for struct `Object<NoDerives>`, but its trait bounds were not satisfied\n@@ -48,7 +49,8 @@ LL | impl<T: Eq> Object<T> {\n            which is required by `NoDerives: Eq`\n help: consider annotating `NoDerives` with `#[derive(Eq, PartialEq)]`\n    |\n-LL | #[derive(Eq, PartialEq)]\n+LL + #[derive(Eq, PartialEq)]\n+LL | pub struct NoDerives;\n    |\n \n error[E0599]: the method `use_ord` exists for struct `Object<NoDerives>`, but its trait bounds were not satisfied\n@@ -84,7 +86,8 @@ LL | impl<T: Ord> Object<T> {\n            which is required by `NoDerives: Ord`\n help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]\n+LL + #[derive(Eq, Ord, PartialEq, PartialOrd)]\n+LL | pub struct NoDerives;\n    |\n \n error[E0599]: the method `use_ord_and_partial_ord` exists for struct `Object<NoDerives>`, but its trait bounds were not satisfied\n@@ -123,7 +126,8 @@ LL | impl<T: Ord + PartialOrd> Object<T> {\n            which is required by `NoDerives: PartialOrd`\n help: consider annotating `NoDerives` with `#[derive(Eq, Ord, PartialEq, PartialOrd)]`\n    |\n-LL | #[derive(Eq, Ord, PartialEq, PartialOrd)]\n+LL + #[derive(Eq, Ord, PartialEq, PartialOrd)]\n+LL | pub struct NoDerives;\n    |\n \n error: aborting due to 4 previous errors"}, {"sha": "5c610f36322dca7d681e01f6740fd4a4b78b883a", "filename": "tests/ui/did_you_mean/issue-56028-there-is-an-enum-variant.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdid_you_mean%2Fissue-56028-there-is-an-enum-variant.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -24,13 +24,13 @@ LL | fn setup() -> Set { Set }\n    |\n help: consider importing one of these items\n    |\n-LL | use AffixHeart::Set;\n+LL + use AffixHeart::Set;\n    |\n-LL | use CauseToBe::Set;\n+LL + use CauseToBe::Set;\n    |\n-LL | use Determine::Set;\n+LL + use Determine::Set;\n    |\n-LL | use PutDown::Set;\n+LL + use PutDown::Set;\n    |\n      and 3 other candidates\n "}, {"sha": "0d4782935df415ce45d19a326fa834dc0eeecd6e", "filename": "tests/ui/error-codes/E0277-3.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ferror-codes%2FE0277-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ferror-codes%2FE0277-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ferror-codes%2FE0277-3.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -14,7 +14,8 @@ LL | fn foo<T: PartialEq>(_: T) {}\n    |           ^^^^^^^^^ required by this bound in `foo`\n help: consider annotating `S` with `#[derive(PartialEq)]`\n    |\n-LL | #[derive(PartialEq)]\n+LL + #[derive(PartialEq)]\n+LL | struct S;\n    |\n \n error: aborting due to previous error"}, {"sha": "4e2702383d6cb53f0eabee702da00de43ab3e9af", "filename": "tests/ui/fmt/format-args-argument-span.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ffmt%2Fformat-args-argument-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ffmt%2Fformat-args-argument-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffmt%2Fformat-args-argument-span.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -29,7 +29,8 @@ LL |     println!(\"{x} {x:?} {x}\");\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `DisplayOnly` with `#[derive(Debug)]`\n    |\n-LL | #[derive(Debug)]\n+LL + #[derive(Debug)]\n+LL | struct DisplayOnly;\n    |\n \n error[E0277]: `DisplayOnly` doesn't implement `Debug`\n@@ -43,7 +44,8 @@ LL |     println!(\"{x} {x:?} {x}\", x = DisplayOnly);\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `DisplayOnly` with `#[derive(Debug)]`\n    |\n-LL | #[derive(Debug)]\n+LL + #[derive(Debug)]\n+LL | struct DisplayOnly;\n    |\n \n error: aborting due to 4 previous errors"}, {"sha": "64eb47c1a5a03d9750c56176c506ebd49643b36c", "filename": "tests/ui/generator/clone-impl.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fgenerator%2Fclone-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fgenerator%2Fclone-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fclone-impl.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -110,7 +110,8 @@ LL | fn check_copy<T: Copy>(_x: &T) {}\n    |                  ^^^^ required by this bound in `check_copy`\n help: consider annotating `NonClone` with `#[derive(Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL + #[derive(Copy)]\n+LL | struct NonClone;\n    |\n \n error[E0277]: the trait bound `NonClone: Clone` is not satisfied in `[generator@$DIR/clone-impl.rs:62:25: 62:32]`\n@@ -134,7 +135,8 @@ LL | fn check_clone<T: Clone>(_x: &T) {}\n    |                   ^^^^^ required by this bound in `check_clone`\n help: consider annotating `NonClone` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct NonClone;\n    |\n \n error: aborting due to 6 previous errors"}, {"sha": "a44bb6993d49d357d2a24f8007c1fab66f168e8a", "filename": "tests/ui/generic-associated-types/issue-87429-associated-type-default.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-87429-associated-type-default.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,8 @@ LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>> = Foo;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Family2::Member`\n help: consider annotating `Foo` with `#[derive(PartialEq)]`\n    |\n-LL | #[derive(PartialEq)]\n+LL + #[derive(PartialEq)]\n+LL | struct Foo;\n    |\n \n error: aborting due to previous error"}, {"sha": "c259c89a712ec6620edec0f00c43de48757d31e4", "filename": "tests/ui/generic-associated-types/issue-87429-specialization.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-87429-specialization.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -22,7 +22,8 @@ LL |     type Member<'a>: for<'b> PartialEq<Self::Member<'b>>;\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `Family::Member`\n help: consider annotating `Foo` with `#[derive(PartialEq)]`\n    |\n-LL | #[derive(PartialEq)]\n+LL + #[derive(PartialEq)]\n+LL | struct Foo;\n    |\n \n error: aborting due to previous error; 1 warning emitted"}, {"sha": "180172644402be756f864e97ac29021ea19b574a", "filename": "tests/ui/hygiene/globs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fhygiene%2Fglobs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fhygiene%2Fglobs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fglobs.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -13,7 +13,7 @@ LL |         g();\n    |         ~\n help: consider importing this function\n    |\n-LL | use foo::f;\n+LL + use foo::f;\n    |\n \n error[E0425]: cannot find function `g` in this scope\n@@ -39,7 +39,7 @@ LL |     f();\n    |     ~\n help: consider importing this function\n    |\n-LL | use bar::g;\n+LL + use bar::g;\n    |\n \n error[E0425]: cannot find function `f` in this scope"}, {"sha": "96187b1c50161e21ea46f94c14f6c34e9fd6d538", "filename": "tests/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,7 @@ LL |         Vec::new();\n    = note: this error originates in the macro `::bar::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider importing this struct\n    |\n-LL |     use std::vec::Vec;\n+LL +     use std::vec::Vec;\n    |\n \n error[E0599]: no method named `clone` found for unit type `()` in the current scope\n@@ -26,7 +26,7 @@ LL |         ().clone()\n    = note: this error originates in the macro `::bar::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL |     use std::clone::Clone;\n+LL +     use std::clone::Clone;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "f303534c709fc600d6c5ade959d576c41dc105cc", "filename": "tests/ui/hygiene/trait_items.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fhygiene%2Ftrait_items.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fhygiene%2Ftrait_items.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhygiene%2Ftrait_items.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -14,7 +14,7 @@ LL |     pub macro m() { ().f() }\n    = note: this error originates in the macro `::baz::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL |     use foo::T;\n+LL +     use foo::T;\n    |\n \n error: aborting due to previous error"}, {"sha": "160cc044078ed6debbd927e96527b954c55cd548", "filename": "tests/ui/impl-trait/no-method-suggested-traits.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fno-method-suggested-traits.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -7,13 +7,13 @@ LL |     1u32.method();\n    = help: items from traits can only be used if the trait is in scope\n help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n    |\n-LL | use foo::Bar;\n+LL + use foo::Bar;\n    |\n-LL | use no_method_suggested_traits::Reexported;\n+LL + use no_method_suggested_traits::Reexported;\n    |\n-LL | use no_method_suggested_traits::foo::PubPub;\n+LL + use no_method_suggested_traits::foo::PubPub;\n    |\n-LL | use no_method_suggested_traits::qux::PrivPub;\n+LL + use no_method_suggested_traits::qux::PrivPub;\n    |\n \n error[E0599]: no method named `method` found for struct `Rc<&mut Box<&u32>>` in the current scope\n@@ -25,13 +25,13 @@ LL |     std::rc::Rc::new(&mut Box::new(&1u32)).method();\n    = help: items from traits can only be used if the trait is in scope\n help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n    |\n-LL | use foo::Bar;\n+LL + use foo::Bar;\n    |\n-LL | use no_method_suggested_traits::Reexported;\n+LL + use no_method_suggested_traits::Reexported;\n    |\n-LL | use no_method_suggested_traits::foo::PubPub;\n+LL + use no_method_suggested_traits::foo::PubPub;\n    |\n-LL | use no_method_suggested_traits::qux::PrivPub;\n+LL + use no_method_suggested_traits::qux::PrivPub;\n    |\n \n error[E0599]: no method named `method` found for type `char` in the current scope\n@@ -46,7 +46,7 @@ LL |     'a'.method();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use foo::Bar;\n+LL + use foo::Bar;\n    |\n \n error[E0599]: no method named `method` found for struct `Rc<&mut Box<&char>>` in the current scope\n@@ -58,7 +58,7 @@ LL |     std::rc::Rc::new(&mut Box::new(&'a')).method();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use foo::Bar;\n+LL + use foo::Bar;\n    |\n \n error[E0599]: no method named `method` found for type `i32` in the current scope\n@@ -75,7 +75,7 @@ LL |         fn method(&self) {}\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use no_method_suggested_traits::foo::PubPub;\n+LL + use no_method_suggested_traits::foo::PubPub;\n    |\n \n error[E0599]: no method named `method` found for struct `Rc<&mut Box<&i32>>` in the current scope\n@@ -87,7 +87,7 @@ LL |     std::rc::Rc::new(&mut Box::new(&1i32)).method();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use no_method_suggested_traits::foo::PubPub;\n+LL + use no_method_suggested_traits::foo::PubPub;\n    |\n \n error[E0599]: no method named `method` found for struct `Foo` in the current scope"}, {"sha": "464d689589e914e313f00a40b62db576eea04644", "filename": "tests/ui/impl-trait/universal_wrong_bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Funiversal_wrong_bounds.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL | fn wants_debug(g: impl Debug) { }\n    |\n help: consider importing this trait instead\n    |\n-LL | use std::fmt::Debug;\n+LL + use std::fmt::Debug;\n    |\n \n error[E0404]: expected trait, found derive macro `Debug`\n@@ -17,7 +17,7 @@ LL | fn wants_display(g: impl Debug) { }\n    |\n help: consider importing this trait instead\n    |\n-LL | use std::fmt::Debug;\n+LL + use std::fmt::Debug;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "4401ef58732e8a003d85ad9a87bc06c64fe1ec33", "filename": "tests/ui/imports/glob-resolve1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimports%2Fglob-resolve1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimports%2Fglob-resolve1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fglob-resolve1.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -60,7 +60,7 @@ LL |     import();\n    |\n help: consider importing this function\n    |\n-LL | use other::import;\n+LL + use other::import;\n    |\n \n error[E0412]: cannot find type `A` in this scope"}, {"sha": "1bb7ae29e108382b76eedfbe3ed3727ba28abda5", "filename": "tests/ui/imports/issue-38293.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimports%2Fissue-38293.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimports%2Fissue-38293.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-38293.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,7 @@ LL |     baz();\n    |\n help: consider importing this function instead\n    |\n-LL | use bar::baz;\n+LL + use bar::baz;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "412423f4d595e6bd3410d8905f2d15517880455c", "filename": "tests/ui/imports/issue-4366-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimports%2Fissue-4366-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimports%2Fissue-4366-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-4366-2.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -18,7 +18,7 @@ LL |     foo();\n    |\n help: consider importing this function instead\n    |\n-LL | use foo::foo;\n+LL + use foo::foo;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "4d5b392a7e104725a23d4b2b9d19cd1b844230f8", "filename": "tests/ui/imports/issue-4366.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimports%2Fissue-4366.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimports%2Fissue-4366.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Fissue-4366.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |         fn sub() -> isize { foo(); 1 }\n    |\n help: consider importing this function\n    |\n-LL |         use foo::foo;\n+LL +         use foo::foo;\n    |\n \n error: aborting due to previous error"}, {"sha": "490dccd3e808e2ea3482a6b81a087ebc5c6468d2", "filename": "tests/ui/imports/overlapping_pub_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimports%2Foverlapping_pub_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimports%2Foverlapping_pub_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Foverlapping_pub_trait.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,7 @@ LL |     pub trait Tr { fn method(&self); }\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use overlapping_pub_trait_source::m::Tr;\n+LL + use overlapping_pub_trait_source::m::Tr;\n    |\n \n error: aborting due to previous error"}, {"sha": "5133273c22f6c75192b997d694d2ac051caa38b1", "filename": "tests/ui/imports/unnamed_pub_trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimports%2Funnamed_pub_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fimports%2Funnamed_pub_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimports%2Funnamed_pub_trait.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,7 @@ LL |     pub trait Tr { fn method(&self); }\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use unnamed_pub_trait_source::prelude::*; // trait Tr\n+LL + use unnamed_pub_trait_source::prelude::*; // trait Tr\n    |\n \n error: aborting due to previous error"}, {"sha": "5c63992d819858bc43ecc9daf406aeadd5413a26", "filename": "tests/ui/internal/internal-unstable-const.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Finternal%2Finternal-unstable-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Finternal%2Finternal-unstable-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finternal%2Finternal-unstable-const.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,11 +6,13 @@ LL |     1.0 + 1.0\n    |\n help: if it is not part of the public API, make this function unstably const\n    |\n-LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n+LL + #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n+LL | pub const fn foo() -> f32 {\n    |\n help: otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n    |\n-LL | #[rustc_allow_const_fn_unstable(const_fn_floating_point_arithmetic)]\n+LL + #[rustc_allow_const_fn_unstable(const_fn_floating_point_arithmetic)]\n+LL | pub const fn foo() -> f32 {\n    |\n \n error: aborting due to previous error"}, {"sha": "1b7b9d5909ebbc51618f77b29209b2f6c59d5b3a", "filename": "tests/ui/issues/issue-10465.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-10465.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-10465.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-10465.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -7,7 +7,7 @@ LL |             b.foo();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL |         use a::A;\n+LL +         use a::A;\n    |\n \n error: aborting due to previous error"}, {"sha": "cf7ed1bbd6682fa285b206765a4f1a85f56a1735", "filename": "tests/ui/issues/issue-17546.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-17546.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-17546.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-17546.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -24,13 +24,13 @@ LL |     fn new() -> Result<foo::MyEnum, String> {\n    |\n help: consider importing one of these items instead\n    |\n-LL |     use std::fmt::Result;\n+LL +     use std::fmt::Result;\n    |\n-LL |     use std::io::Result;\n+LL +     use std::io::Result;\n    |\n-LL |     use std::result::Result;\n+LL +     use std::result::Result;\n    |\n-LL |     use std::thread::Result;\n+LL +     use std::thread::Result;\n    |\n \n error[E0573]: expected type, found variant `Result`\n@@ -41,13 +41,13 @@ LL | fn new() -> Result<foo::MyEnum, String> {\n    |\n help: consider importing one of these items instead\n    |\n-LL | use std::fmt::Result;\n+LL + use std::fmt::Result;\n    |\n-LL | use std::io::Result;\n+LL + use std::io::Result;\n    |\n-LL | use std::result::Result;\n+LL + use std::result::Result;\n    |\n-LL | use std::thread::Result;\n+LL + use std::thread::Result;\n    |\n \n error[E0573]: expected type, found variant `NoResult`"}, {"sha": "ebdf2528fe1f211651b252fde4891201f504483f", "filename": "tests/ui/issues/issue-20162.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-20162.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-20162.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-20162.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -8,7 +8,8 @@ note: required by a bound in `slice::<impl [T]>::sort`\n   --> $SRC_DIR/alloc/src/slice.rs:LL:COL\n help: consider annotating `X` with `#[derive(Ord)]`\n    |\n-LL | #[derive(Ord)]\n+LL + #[derive(Ord)]\n+LL | struct X { x: i32 }\n    |\n \n error: aborting due to previous error"}, {"sha": "b39a3aad37198f81dffcfd8ab395844c94742776", "filename": "tests/ui/issues/issue-21160.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-21160.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-21160.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-21160.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -9,7 +9,8 @@ LL | struct Foo(Bar);\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Bar` with `#[derive(Hash)]`\n    |\n-LL | #[derive(Hash)]\n+LL + #[derive(Hash)]\n+LL | struct Bar;\n    |\n \n error: aborting due to previous error"}, {"sha": "b31d2a31551ef687a469c72159021f84f7afbab9", "filename": "tests/ui/issues/issue-35976.unimported.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-35976.unimported.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-35976.unimported.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-35976.unimported.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -9,7 +9,7 @@ LL |     arg.wait();\n    |\n help: another candidate was found in the following trait, perhaps add a `use` for it:\n    |\n-LL | use private::Future;\n+LL + use private::Future;\n    |\n \n error: aborting due to previous error"}, {"sha": "7d3dd8800bd3462afb7614b93821ba0c74bc6a6b", "filename": "tests/ui/issues/issue-37534.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-37534.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-37534.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-37534.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL | struct Foo<T: ?Hash> { }\n    |\n help: consider importing this trait instead\n    |\n-LL | use std::hash::Hash;\n+LL + use std::hash::Hash;\n    |\n \n warning: default bound relaxed for a type parameter, but this does nothing because the given bound is not a default; only `?Sized` is supported"}, {"sha": "3a1476ac0e3afb650b7549419d5d9c2e823987e6", "filename": "tests/ui/issues/issue-39175.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-39175.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-39175.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-39175.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -7,7 +7,7 @@ LL |     Command::new(\"echo\").arg(\"hello\").exec();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use std::os::unix::process::CommandExt;\n+LL + use std::os::unix::process::CommandExt;\n    |\n \n error: aborting due to previous error"}, {"sha": "1ddee1f4895bb0ee796418c152a45dcaaec586c2", "filename": "tests/ui/issues/issue-56175.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-56175.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-56175.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-56175.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,7 @@ LL |         fn trait_method(&self) {\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use reexported_trait::Trait;\n+LL + use reexported_trait::Trait;\n    |\n \n error[E0599]: no method named `trait_method_b` found for struct `FooStruct` in the current scope\n@@ -29,7 +29,7 @@ LL |         fn trait_method_b(&self) {\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use reexported_trait::TraitBRename;\n+LL + use reexported_trait::TraitBRename;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "a6fd3700edda835e333bb22c433ff6c1949e5b0a", "filename": "tests/ui/issues/issue-62375.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-62375.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-62375.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-62375.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -13,7 +13,8 @@ LL | enum A {\n    | ^^^^^^ must implement `PartialEq<_>`\n help: consider annotating `A` with `#[derive(PartialEq)]`\n    |\n-LL | #[derive(PartialEq)]\n+LL + #[derive(PartialEq)]\n+LL | enum A {\n    |\n \n error: aborting due to previous error"}, {"sha": "d6dcc8997b9ab6857366e93c69a34ec6bdf618f2", "filename": "tests/ui/issues/issue-77919.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-77919.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fissues%2Fissue-77919.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-77919.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |     _n: PhantomData,\n    |\n help: consider importing this struct\n    |\n-LL | use std::marker::PhantomData;\n+LL + use std::marker::PhantomData;\n    |\n \n error[E0412]: cannot find type `VAL` in this scope"}, {"sha": "efb25bf83e1df7bafc7620def16b0706134d9bf9", "filename": "tests/ui/kindck/kindck-impl-type-params.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fkindck%2Fkindck-impl-type-params.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -107,7 +107,8 @@ LL | impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n    = note: required for the cast from `S<Foo>` to the object type `dyn Gettable<Foo>`\n help: consider annotating `Foo` with `#[derive(Copy)]`\n    |\n-LL |     #[derive(Copy)]\n+LL +     #[derive(Copy)]\n+LL |     struct Foo; // does not impl Copy\n    |\n \n error: aborting due to 6 previous errors"}, {"sha": "5ad450bed0781a7d4b4385b5fb56e10de8301ee2", "filename": "tests/ui/layout/issue-84108.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Flayout%2Fissue-84108.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Flayout%2Fissue-84108.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flayout%2Fissue-84108.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL | static FOO: (dyn AsRef<OsStr>, u8) = (\"hello\", 42);\n    |\n help: consider importing this struct\n    |\n-LL | use std::ffi::OsStr;\n+LL + use std::ffi::OsStr;\n    |\n \n error[E0412]: cannot find type `Path` in this scope\n@@ -17,7 +17,7 @@ LL | const BAR: (&Path, [u8], usize) = (\"hello\", [], 42);\n    |\n help: consider importing this struct\n    |\n-LL | use std::path::Path;\n+LL + use std::path::Path;\n    |\n \n error[E0277]: the size for values of type `[u8]` cannot be known at compilation time"}, {"sha": "89a6f585ce4150fbe6010ecc249b562a6c788548", "filename": "tests/ui/macros/issue-100199.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fmacros%2Fissue-100199.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fmacros%2Fissue-100199.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fissue-100199.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -7,7 +7,7 @@ LL | #[issue_100199::struct_with_bound]\n    = note: this error originates in the attribute macro `issue_100199::struct_with_bound` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider importing this trait\n    |\n-LL | use traits::MyTrait;\n+LL + use traits::MyTrait;\n    |\n \n error: aborting due to previous error"}, {"sha": "0bdc3416f807ea37e1a4b763f734e2a251be8ec4", "filename": "tests/ui/macros/macro-outer-attributes.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fmacro-outer-attributes.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |     a::bar();\n    |\n help: consider importing this function\n    |\n-LL | use b::bar;\n+LL + use b::bar;\n    |\n help: if you import `bar`, refer to it directly\n    |"}, {"sha": "3059d75d718a537463657a86418825aa010dcb7c", "filename": "tests/ui/malformed/malformed-derive-entry.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmalformed%2Fmalformed-derive-entry.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -27,7 +27,8 @@ note: required by a bound in `Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Test1` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct Test1;\n    |\n \n error[E0277]: the trait bound `Test2: Clone` is not satisfied\n@@ -41,7 +42,8 @@ note: required by a bound in `Copy`\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Test2` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct Test2;\n    |\n \n error: aborting due to 5 previous errors"}, {"sha": "9dab3e5225570284978a814d7639baf2b446ac1e", "filename": "tests/ui/mismatched_types/method-help-unsatisfied-bound.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fmethod-help-unsatisfied-bound.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ note: required by a bound in `Result::<T, E>::unwrap`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n help: consider annotating `Foo` with `#[derive(Debug)]`\n    |\n-LL | #[derive(Debug)]\n+LL + #[derive(Debug)]\n+LL | struct Foo;\n    |\n \n error: aborting due to previous error"}, {"sha": "38a910b57b4740af75f7b14c4a2223f9fa977888", "filename": "tests/ui/modules/issue-107649.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fmodules%2Fissue-107649.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fmodules%2Fissue-107649.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmodules%2Fissue-107649.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,8 @@ error[E0277]: `Dummy` doesn't implement `Debug`\n help: consider annotating `Dummy` with `#[derive(Debug)]`\n    --> $DIR/auxiliary/dummy_lib.rs:2:1\n     |\n-2   | #[derive(Debug)]\n+2   + #[derive(Debug)]\n+3   | #[path = \"auxiliary/dummy_lib.rs\"]\n     |\n \n error: aborting due to previous error"}, {"sha": "3ac5e96c5742badc70d43a9def22256e40eb2865", "filename": "tests/ui/namespace/namespace-mix.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fnamespace%2Fnamespace-mix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnamespace%2Fnamespace-mix.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -14,9 +14,9 @@ LL |     check(m1::TS);\n    |               ~~\n help: consider importing one of these items instead\n    |\n-LL | use m2::S;\n+LL + use m2::S;\n    |\n-LL | use xm2::S;\n+LL + use xm2::S;\n    |\n help: if you import `S`, refer to it directly\n    |\n@@ -42,9 +42,9 @@ LL |     check(xm1::TS);\n    |                ~~\n help: consider importing one of these items instead\n    |\n-LL | use m2::S;\n+LL + use m2::S;\n    |\n-LL | use xm2::S;\n+LL + use xm2::S;\n    |\n help: if you import `S`, refer to it directly\n    |\n@@ -68,9 +68,9 @@ LL |     check(m7::TV);\n    |               ~~\n help: consider importing one of these items instead\n    |\n-LL | use m8::V;\n+LL + use m8::V;\n    |\n-LL | use xm8::V;\n+LL + use xm8::V;\n    |\n help: if you import `V`, refer to it directly\n    |\n@@ -96,9 +96,9 @@ LL |     check(xm7::TV);\n    |                ~~\n help: consider importing one of these items instead\n    |\n-LL | use m8::V;\n+LL + use m8::V;\n    |\n-LL | use xm8::V;\n+LL + use xm8::V;\n    |\n help: if you import `V`, refer to it directly\n    |"}, {"sha": "db9307c61853f038095f49bf635bdac9a481ec74", "filename": "tests/ui/not-clone-closure.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnot-clone-closure.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -14,7 +14,8 @@ LL |     let hello = move || {\n    |                 ^^^^^^^\n help: consider annotating `S` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct S(i32);\n    |\n \n error: aborting due to previous error"}, {"sha": "97d67dbd82e772536ac7e6254e545330b715eca5", "filename": "tests/ui/on-unimplemented/no-debug.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fon-unimplemented%2Fno-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fon-unimplemented%2Fno-debug.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -9,7 +9,8 @@ LL |     println!(\"{:?} {:?}\", Foo, Bar);\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Foo` with `#[derive(Debug)]`\n    |\n-LL | #[derive(Debug)]\n+LL + #[derive(Debug)]\n+LL | struct Foo;\n    |\n \n error[E0277]: `Bar` doesn't implement `Debug`"}, {"sha": "2de70789358b06f1c64c7a1206b35f9e816f07a1", "filename": "tests/ui/parser/circular_modules_main.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fparser%2Fcircular_modules_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fparser%2Fcircular_modules_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fcircular_modules_main.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,7 @@ LL |     println!(\"{}\", circular_modules_main::hi_str());\n    |\n help: consider importing this function\n    |\n-LL | use hi_str;\n+LL + use hi_str;\n    |\n help: if you import `hi_str`, refer to it directly\n    |"}, {"sha": "9710cc48637bc0793e93a328f45b105bbe40b202", "filename": "tests/ui/privacy/privacy-ns1.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fprivacy%2Fprivacy-ns1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivacy-ns1.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -13,7 +13,7 @@ LL |     Baz();\n    |     ~~~\n help: consider importing this function instead\n    |\n-LL | use foo2::Bar;\n+LL + use foo2::Bar;\n    |\n \n error[E0425]: cannot find function, tuple struct or tuple variant `Bar` in this scope\n@@ -31,7 +31,7 @@ LL |     Baz();\n    |     ~~~\n help: consider importing this function\n    |\n-LL | use foo2::Bar;\n+LL + use foo2::Bar;\n    |\n \n error[E0412]: cannot find type `Bar` in this scope\n@@ -49,7 +49,7 @@ LL |     let _x: Box<Baz>;\n    |                 ~~~\n help: consider importing this trait\n    |\n-LL | use foo1::Bar;\n+LL + use foo1::Bar;\n    |\n \n error[E0747]: constant provided when a type was expected"}, {"sha": "75e735e1e6a28c5d859b0898c946a704865a0ae2", "filename": "tests/ui/privacy/privacy-ns2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fprivacy%2Fprivacy-ns2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fprivacy%2Fprivacy-ns2.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |     Bar();\n    |\n help: consider importing this function instead\n    |\n-LL | use foo2::Bar;\n+LL + use foo2::Bar;\n    |\n \n error[E0423]: expected function, tuple struct or tuple variant, found trait `Bar`\n@@ -24,7 +24,7 @@ LL |     Baz();\n    |     ~~~\n help: consider importing this function instead\n    |\n-LL | use foo2::Bar;\n+LL + use foo2::Bar;\n    |\n \n error[E0573]: expected type, found function `Bar`\n@@ -39,7 +39,7 @@ LL |     let _x = Bar();\n    |            ~\n help: consider importing this trait instead\n    |\n-LL | use foo1::Bar;\n+LL + use foo1::Bar;\n    |\n \n error[E0603]: trait `Bar` is private"}, {"sha": "aa797339be4671b2306bf6cb71c5b55f0338ab47", "filename": "tests/ui/proc-macro/amputate-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fproc-macro%2Famputate-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fproc-macro%2Famputate-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Famputate-span.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |     Command::new(\"git\");\n    |\n help: consider importing this struct\n    |\n-LL | use std::process::Command;\n+LL + use std::process::Command;\n    |\n \n error[E0433]: failed to resolve: use of undeclared type `Command`\n@@ -17,7 +17,7 @@ LL |         Command::new(\"git\");\n    |\n help: consider importing this struct\n    |\n-LL |     use std::process::Command;\n+LL +     use std::process::Command;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "97521f23aeef3a6ad26202b8cb16a2dcae87c026", "filename": "tests/ui/proc-macro/attributes-on-modules-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fproc-macro%2Fattributes-on-modules-fail.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -50,7 +50,7 @@ LL |     type A = Y;\n    |\n help: consider importing this struct\n    |\n-LL |     use Y;\n+LL +     use Y;\n    |\n \n error[E0412]: cannot find type `X` in this scope\n@@ -61,7 +61,7 @@ LL | type A = X;\n    |\n help: consider importing this struct\n    |\n-LL | use m::X;\n+LL + use m::X;\n    |\n \n error: aborting due to 7 previous errors"}, {"sha": "1bf8e6e062f2e26d4f871ba1e8a054d84a109501", "filename": "tests/ui/repeat-expr/repeat-to-run-dtor-twice.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Frepeat-expr%2Frepeat-to-run-dtor-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Frepeat-expr%2Frepeat-to-run-dtor-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frepeat-expr%2Frepeat-to-run-dtor-twice.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -7,7 +7,8 @@ LL |     let _ = [ a; 5 ];\n    = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Foo` with `#[derive(Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL + #[derive(Copy)]\n+LL | struct Foo {\n    |\n \n error: aborting due to previous error"}, {"sha": "07fb5dcc035c18dbe52f6bb5f8c5b8c221b22626", "filename": "tests/ui/resolve/crate-in-paths.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fcrate-in-paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fcrate-in-paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fcrate-in-paths.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |     Foo;\n    |\n help: consider importing this unit struct\n    |\n-LL | use crate::bar::Foo;\n+LL + use crate::bar::Foo;\n    |\n \n error: aborting due to previous error"}, {"sha": "5af6cb04275b8517f719d7731c6ad29c8a4eecf5", "filename": "tests/ui/resolve/enums-are-namespaced-xc.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |     let _ = namespaced_enums::A;\n    |\n help: consider importing this unit variant\n    |\n-LL | use namespaced_enums::Foo::A;\n+LL + use namespaced_enums::Foo::A;\n    |\n help: if you import `A`, refer to it directly\n    |\n@@ -22,7 +22,7 @@ LL |     let _ = namespaced_enums::B(10);\n    |\n help: consider importing this tuple variant\n    |\n-LL | use namespaced_enums::Foo::B;\n+LL + use namespaced_enums::Foo::B;\n    |\n help: if you import `B`, refer to it directly\n    |\n@@ -38,7 +38,7 @@ LL |     let _ = namespaced_enums::C { a: 10 };\n    |\n help: consider importing this variant\n    |\n-LL | use namespaced_enums::Foo::C;\n+LL + use namespaced_enums::Foo::C;\n    |\n help: if you import `C`, refer to it directly\n    |"}, {"sha": "cc1092dd0cfa8c15282db60c888e5d4c721a30e4", "filename": "tests/ui/resolve/filter-intrinsics.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Ffilter-intrinsics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Ffilter-intrinsics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Ffilter-intrinsics.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |     let _ = size_of::<usize>();\n    |\n help: consider importing this function\n    |\n-LL | use std::mem::size_of;\n+LL + use std::mem::size_of;\n    |\n \n error[E0425]: cannot find function `fabsf64` in this scope\n@@ -17,7 +17,7 @@ LL |     let _ = fabsf64(1.0);\n    |\n help: consider importing this function\n    |\n-LL | use std::intrinsics::fabsf64;\n+LL + use std::intrinsics::fabsf64;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "b2cdcb25c3f96138d5ce402a2d353335fb74299d", "filename": "tests/ui/resolve/issue-102946.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-102946.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-102946.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-102946.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL | impl Error for str::Utf8Error {\n    |\n help: consider importing this trait\n    |\n-LL | use std::error::Error;\n+LL + use std::error::Error;\n    |\n \n error[E0223]: ambiguous associated type"}, {"sha": "710002a154efdd43a4a333cfcd31b1151a3575dd", "filename": "tests/ui/resolve/issue-16058.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-16058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-16058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-16058.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,11 +6,11 @@ LL |         Result {\n    |\n help: consider importing one of these items instead\n    |\n-LL | use std::fmt::Result;\n+LL + use std::fmt::Result;\n    |\n-LL | use std::io::Result;\n+LL + use std::io::Result;\n    |\n-LL | use std::thread::Result;\n+LL + use std::thread::Result;\n    |\n \n error: aborting due to previous error"}, {"sha": "492e3b34a1798f5f232a13ed01aa710ba8c2216d", "filename": "tests/ui/resolve/issue-17518.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-17518.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-17518.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-17518.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |     E { name: \"foobar\" };\n    |\n help: consider importing this variant\n    |\n-LL | use SomeEnum::E;\n+LL + use SomeEnum::E;\n    |\n \n error: aborting due to previous error"}, {"sha": "a38116cd7287a23563b3d85541472f07b582534f", "filename": "tests/ui/resolve/issue-21221-1.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-21221-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-21221-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-21221-1.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,11 +6,11 @@ LL | impl Mul for Foo {\n    |\n help: consider importing one of these items\n    |\n-LL | use mul1::Mul;\n+LL + use mul1::Mul;\n    |\n-LL | use mul2::Mul;\n+LL + use mul2::Mul;\n    |\n-LL | use std::ops::Mul;\n+LL + use std::ops::Mul;\n    |\n \n error[E0412]: cannot find type `Mul` in this scope\n@@ -21,11 +21,11 @@ LL | fn getMul() -> Mul {\n    |\n help: consider importing one of these items\n    |\n-LL | use mul1::Mul;\n+LL + use mul1::Mul;\n    |\n-LL | use mul2::Mul;\n+LL + use mul2::Mul;\n    |\n-LL | use std::ops::Mul;\n+LL + use std::ops::Mul;\n    |\n \n error[E0405]: cannot find trait `ThisTraitReallyDoesntExistInAnyModuleReally` in this scope\n@@ -42,7 +42,7 @@ LL | impl Div for Foo {\n    |\n help: consider importing this trait\n    |\n-LL | use std::ops::Div;\n+LL + use std::ops::Div;\n    |\n \n error: aborting due to 4 previous errors"}, {"sha": "9beb626623e4ef7e11ae069815769dfe7ed124ee", "filename": "tests/ui/resolve/issue-21221-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-21221-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-21221-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-21221-2.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,9 +6,9 @@ LL | impl T for Foo { }\n    |\n help: consider importing one of these items\n    |\n-LL | use baz::T;\n+LL + use baz::T;\n    |\n-LL | use foo::bar::T;\n+LL + use foo::bar::T;\n    |\n \n error: aborting due to previous error"}, {"sha": "0dabdfd9b39003933b4c2d813be550de8792b263", "filename": "tests/ui/resolve/issue-21221-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-21221-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-21221-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-21221-3.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL | impl OuterTrait for Foo {}\n    |\n help: consider importing this trait\n    |\n-LL | use issue_21221_3::outer::OuterTrait;\n+LL + use issue_21221_3::outer::OuterTrait;\n    |\n \n error: aborting due to previous error"}, {"sha": "5af14b1b68d365c3b762ff3fbc0605c4f84530af", "filename": "tests/ui/resolve/issue-21221-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-21221-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-21221-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-21221-4.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL | impl T for Foo {}\n    |\n help: consider importing this trait\n    |\n-LL | use issue_21221_4::T;\n+LL + use issue_21221_4::T;\n    |\n \n error: aborting due to previous error"}, {"sha": "313b3e30dd956b1aa888886e1401bcaa5baeb8de", "filename": "tests/ui/resolve/issue-2356.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-2356.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,7 @@ LL |     Self::default();\n    |     ~~~~~~~~~~~~~\n help: consider importing this function\n    |\n-LL | use std::default::default;\n+LL + use std::default::default;\n    |\n \n error[E0425]: cannot find value `whiskers` in this scope"}, {"sha": "42a7531c5b940828c28aefcf2045d6f4add42ebe", "filename": "tests/ui/resolve/issue-26545.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-26545.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-26545.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-26545.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |         B(());\n    |\n help: consider importing this tuple struct\n    |\n-LL |     use foo::B;\n+LL +     use foo::B;\n    |\n \n error: aborting due to previous error"}, {"sha": "44af65b0768a8be1dad48a1140f6243d6e987b7f", "filename": "tests/ui/resolve/issue-35675.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-35675.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -17,7 +17,7 @@ LL |     Apple(5)\n    |\n help: consider importing this tuple variant\n    |\n-LL | use Fruit::Apple;\n+LL + use Fruit::Apple;\n    |\n \n error[E0573]: expected type, found variant `Fruit::Apple`\n@@ -37,7 +37,7 @@ LL |     Apple(5)\n    |\n help: consider importing this tuple variant\n    |\n-LL | use Fruit::Apple;\n+LL + use Fruit::Apple;\n    |\n \n error[E0573]: expected type, found variant `Ok`"}, {"sha": "70631a13cdf86d69b6808e6e11640ea59e5329c4", "filename": "tests/ui/resolve/issue-3907.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-3907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-3907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-3907.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,7 @@ LL | trait Foo = dyn issue_3907::Foo;\n    |\n help: consider importing this trait instead\n    |\n-LL | use issue_3907::Foo;\n+LL + use issue_3907::Foo;\n    |\n \n error: aborting due to previous error"}, {"sha": "d7419b64facd2d645beb4bccc22e37709047d4cc", "filename": "tests/ui/resolve/issue-50599.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-50599.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,9 +6,9 @@ LL |     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize;\n    |\n help: consider importing one of these items\n    |\n-LL | use std::f32::consts::LOG10_2;\n+LL + use std::f32::consts::LOG10_2;\n    |\n-LL | use std::f64::consts::LOG10_2;\n+LL + use std::f64::consts::LOG10_2;\n    |\n help: if you import `LOG10_2`, refer to it directly\n    |"}, {"sha": "622de9b39bde78da6244f5951ea00489f048f351", "filename": "tests/ui/resolve/issue-73427.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-73427.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-73427.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-73427.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -107,9 +107,9 @@ LL |     (E::TupleWithFields(/* fields */)).foo();\n    |     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n help: consider importing one of these items instead\n    |\n-LL | use std::f32::consts::E;\n+LL + use std::f32::consts::E;\n    |\n-LL | use std::f64::consts::E;\n+LL + use std::f64::consts::E;\n    |\n \n error[E0532]: expected tuple struct or tuple variant, found enum `A`"}, {"sha": "5f55d9c241a582b460964523271189855cc593fd", "filename": "tests/ui/resolve/issue-90113.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-90113.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fissue-90113.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fissue-90113.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |         Cons(..) => {}\n    |\n help: consider importing this tuple variant\n    |\n-LL | use list::List::Cons;\n+LL + use list::List::Cons;\n    |\n \n error: aborting due to previous error"}, {"sha": "7a7b749aebb7b678747426fc7a1c90ef22cd46cb", "filename": "tests/ui/resolve/missing-in-namespace.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fmissing-in-namespace.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |     let _map = std::hahmap::HashMap::new();\n    |\n help: consider importing this struct\n    |\n-LL | use std::collections::HashMap;\n+LL + use std::collections::HashMap;\n    |\n help: if you import `HashMap`, refer to it directly\n    |"}, {"sha": "49cf72bfee2d62fa58531f30ae6f5bc65f3a9fa5", "filename": "tests/ui/resolve/no-implicit-prelude-nested.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fno-implicit-prelude-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fno-implicit-prelude-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fno-implicit-prelude-nested.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |         impl Add for Test {}\n    |\n help: consider importing this trait\n    |\n-LL |         use std::ops::Add;\n+LL +         use std::ops::Add;\n    |\n \n error[E0404]: expected trait, found derive macro `Clone`\n@@ -17,7 +17,7 @@ LL |         impl Clone for Test {}\n    |\n help: consider importing this trait instead\n    |\n-LL |         use std::clone::Clone;\n+LL +         use std::clone::Clone;\n    |\n \n error[E0405]: cannot find trait `Iterator` in this scope\n@@ -28,7 +28,7 @@ LL |         impl Iterator for Test {}\n    |\n help: consider importing this trait\n    |\n-LL |         use std::iter::Iterator;\n+LL +         use std::iter::Iterator;\n    |\n \n error[E0405]: cannot find trait `ToString` in this scope\n@@ -39,7 +39,7 @@ LL |         impl ToString for Test {}\n    |\n help: consider importing this trait\n    |\n-LL |         use std::string::ToString;\n+LL +         use std::string::ToString;\n    |\n \n error[E0405]: cannot find trait `Writer` in this scope\n@@ -56,7 +56,7 @@ LL |             drop(2)\n    |\n help: consider importing this function\n    |\n-LL |         use std::mem::drop;\n+LL +         use std::mem::drop;\n    |\n \n error[E0405]: cannot find trait `Add` in this scope\n@@ -67,7 +67,7 @@ LL |     impl Add for Test {}\n    |\n help: consider importing this trait\n    |\n-LL |     use std::ops::Add;\n+LL +     use std::ops::Add;\n    |\n \n error[E0404]: expected trait, found derive macro `Clone`\n@@ -78,7 +78,7 @@ LL |     impl Clone for Test {}\n    |\n help: consider importing this trait instead\n    |\n-LL |     use std::clone::Clone;\n+LL +     use std::clone::Clone;\n    |\n \n error[E0405]: cannot find trait `Iterator` in this scope\n@@ -89,7 +89,7 @@ LL |     impl Iterator for Test {}\n    |\n help: consider importing this trait\n    |\n-LL |     use std::iter::Iterator;\n+LL +     use std::iter::Iterator;\n    |\n \n error[E0405]: cannot find trait `ToString` in this scope\n@@ -100,7 +100,7 @@ LL |     impl ToString for Test {}\n    |\n help: consider importing this trait\n    |\n-LL |     use std::string::ToString;\n+LL +     use std::string::ToString;\n    |\n \n error[E0405]: cannot find trait `Writer` in this scope\n@@ -117,7 +117,7 @@ LL |         drop(2)\n    |\n help: consider importing this function\n    |\n-LL |     use std::mem::drop;\n+LL +     use std::mem::drop;\n    |\n \n error[E0405]: cannot find trait `Add` in this scope\n@@ -128,7 +128,7 @@ LL |         impl Add for Test {}\n    |\n help: consider importing this trait\n    |\n-LL |         use std::ops::Add;\n+LL +         use std::ops::Add;\n    |\n \n error[E0404]: expected trait, found derive macro `Clone`\n@@ -139,7 +139,7 @@ LL |         impl Clone for Test {}\n    |\n help: consider importing this trait instead\n    |\n-LL |         use std::clone::Clone;\n+LL +         use std::clone::Clone;\n    |\n \n error[E0405]: cannot find trait `Iterator` in this scope\n@@ -150,7 +150,7 @@ LL |         impl Iterator for Test {}\n    |\n help: consider importing this trait\n    |\n-LL |         use std::iter::Iterator;\n+LL +         use std::iter::Iterator;\n    |\n \n error[E0405]: cannot find trait `ToString` in this scope\n@@ -161,7 +161,7 @@ LL |         impl ToString for Test {}\n    |\n help: consider importing this trait\n    |\n-LL |         use std::string::ToString;\n+LL +         use std::string::ToString;\n    |\n \n error[E0405]: cannot find trait `Writer` in this scope\n@@ -178,7 +178,7 @@ LL |             drop(2)\n    |\n help: consider importing this function\n    |\n-LL |         use std::mem::drop;\n+LL +         use std::mem::drop;\n    |\n \n error: aborting due to 18 previous errors"}, {"sha": "5a759743f72588d7e39757b9865ea425e2d4ba57", "filename": "tests/ui/resolve/no-implicit-prelude.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fno-implicit-prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fno-implicit-prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fno-implicit-prelude.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL | impl Add for Test {}\n    |\n help: consider importing this trait\n    |\n-LL | use std::ops::Add;\n+LL + use std::ops::Add;\n    |\n \n error[E0404]: expected trait, found derive macro `Clone`\n@@ -17,7 +17,7 @@ LL | impl Clone for Test {}\n    |\n help: consider importing this trait instead\n    |\n-LL | use std::clone::Clone;\n+LL + use std::clone::Clone;\n    |\n \n error[E0405]: cannot find trait `Iterator` in this scope\n@@ -28,7 +28,7 @@ LL | impl Iterator for Test {}\n    |\n help: consider importing this trait\n    |\n-LL | use std::iter::Iterator;\n+LL + use std::iter::Iterator;\n    |\n \n error[E0405]: cannot find trait `ToString` in this scope\n@@ -39,7 +39,7 @@ LL | impl ToString for Test {}\n    |\n help: consider importing this trait\n    |\n-LL | use std::string::ToString;\n+LL + use std::string::ToString;\n    |\n \n error[E0405]: cannot find trait `Writer` in this scope\n@@ -56,7 +56,7 @@ LL |     drop(2)\n    |\n help: consider importing this function\n    |\n-LL | use std::mem::drop;\n+LL + use std::mem::drop;\n    |\n \n error: aborting due to 6 previous errors"}, {"sha": "0bb09090569cbc20084320ac2a35558d2371dc38", "filename": "tests/ui/resolve/privacy-enum-ctor.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fprivacy-enum-ctor.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -84,9 +84,9 @@ LL |     let _: E = m::f;\n    |                   ~\n help: consider importing one of these items instead\n    |\n-LL | use std::f32::consts::E;\n+LL + use std::f32::consts::E;\n    |\n-LL | use std::f64::consts::E;\n+LL + use std::f64::consts::E;\n    |\n help: if you import `E`, refer to it directly\n    |\n@@ -121,9 +121,9 @@ LL |     let _: E = (E::Fn(/* fields */));\n    |                ~~~~~~~~~~~~~~~~~~~~~\n help: consider importing one of these items instead\n    |\n-LL | use std::f32::consts::E;\n+LL + use std::f32::consts::E;\n    |\n-LL | use std::f64::consts::E;\n+LL + use std::f64::consts::E;\n    |\n \n error[E0412]: cannot find type `Z` in this scope"}, {"sha": "e3a5d4edcf1024f98f192b81fe1c72299524e7a8", "filename": "tests/ui/resolve/resolve-primitive-fallback.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fresolve-primitive-fallback.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,7 @@ LL |     let _: ::u8;\n    |\n help: consider importing this builtin type\n    |\n-LL | use std::primitive::u8;\n+LL + use std::primitive::u8;\n    |\n help: if you import `u8`, refer to it directly\n    |"}, {"sha": "1155f5caa1739ba2ab1538fa0286c8f83e0fa26d", "filename": "tests/ui/resolve/use_suggestion.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fuse_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fuse_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fuse_suggestion.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |     let x1 = HashMap::new();\n    |\n help: consider importing this struct\n    |\n-LL | use std::collections::HashMap;\n+LL + use std::collections::HashMap;\n    |\n \n error[E0412]: cannot find type `HashMap` in this scope\n@@ -17,7 +17,7 @@ LL |     let y1: HashMap;\n    |\n help: consider importing this struct\n    |\n-LL | use std::collections::HashMap;\n+LL + use std::collections::HashMap;\n    |\n \n error[E0412]: cannot find type `GooMap` in this scope"}, {"sha": "3611f9ae6b4edd09d159f26a64c4f4bce4d3f651", "filename": "tests/ui/resolve/use_suggestion_placement.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fresolve%2Fuse_suggestion_placement.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |     type Bar = Path;\n    |\n help: consider importing this struct\n    |\n-LL |     use std::path::Path;\n+LL +     use std::path::Path;\n    |\n \n error[E0425]: cannot find value `A` in this scope\n@@ -17,7 +17,7 @@ LL |     let _ = A;\n    |\n help: consider importing this constant\n    |\n-LL | use m::A;\n+LL + use m::A;\n    |\n \n error[E0412]: cannot find type `HashMap` in this scope\n@@ -28,7 +28,7 @@ LL |     type Dict<K, V> = HashMap<K, V>;\n    |\n help: consider importing this struct\n    |\n-LL | use std::collections::HashMap;\n+LL + use std::collections::HashMap;\n    |\n \n error: aborting due to 3 previous errors"}, {"sha": "ce165e64632922a7aeeb8efeba0e066d858b1155", "filename": "tests/ui/rfc-2361-dbg-macro/dbg-macro-requires-debug.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2361-dbg-macro%2Fdbg-macro-requires-debug.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -9,7 +9,8 @@ LL |     let _: NotDebug = dbg!(NotDebug);\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `dbg` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `NotDebug` with `#[derive(Debug)]`\n    |\n-LL | #[derive(Debug)]\n+LL + #[derive(Debug)]\n+LL | struct NotDebug;\n    |\n \n error: aborting due to previous error"}, {"sha": "653037ef39895c0b69cae9b562f569e307e652b6", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-non-const-type.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-non-const-type.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -16,7 +16,8 @@ LL | pub struct S(A);\n    = note: this error originates in the derive macro `Default` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `A` with `#[derive(Default)]`\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | pub struct A;\n    |\n \n error[E0015]: cannot call non-const fn `<A as Default>::default` in constant functions"}, {"sha": "9933b92439c1387b8db922df126973921268dc9c", "filename": "tests/ui/rust-2018/issue-52202-use-suggestions.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Fissue-52202-use-suggestions.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,13 +6,13 @@ LL |     let _d = Drain {};\n    |\n help: consider importing one of these items\n    |\n-LL | use crate::plumbing::Drain;\n+LL + use crate::plumbing::Drain;\n    |\n-LL | use std::collections::binary_heap::Drain;\n+LL + use std::collections::binary_heap::Drain;\n    |\n-LL | use std::collections::hash_map::Drain;\n+LL + use std::collections::hash_map::Drain;\n    |\n-LL | use std::collections::hash_set::Drain;\n+LL + use std::collections::hash_set::Drain;\n    |\n      and 3 other candidates\n "}, {"sha": "325c5976e7c89de10f1c6393d99f3c653a57214c", "filename": "tests/ui/rust-2018/trait-import-suggestions.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Ftrait-import-suggestions.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,7 @@ LL |         x.foobar();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL |     use crate::foo::foobar::Foobar;\n+LL +     use crate::foo::foobar::Foobar;\n    |\n \n error[E0599]: no method named `bar` found for type `u32` in the current scope\n@@ -25,7 +25,7 @@ LL |     x.bar();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use crate::foo::Bar;\n+LL + use crate::foo::Bar;\n    |\n \n error[E0599]: no method named `baz` found for type `u32` in the current scope\n@@ -43,7 +43,7 @@ LL |     let y = u32::from_str(\"33\");\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use std::str::FromStr;\n+LL + use std::str::FromStr;\n    |\n help: there is an associated function with a similar name\n    |"}, {"sha": "ac2baa3595bd3a926e4cf91a815d83f37dad2a90", "filename": "tests/ui/rust-2018/uniform-paths/issue-87932.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2018%2Funiform-paths%2Fissue-87932.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,7 @@ LL |     A::deserialize();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use <crate::A as issue_87932_a::Deserialize>::deserialize::_a::Deserialize;\n+LL + use <crate::A as issue_87932_a::Deserialize>::deserialize::_a::Deserialize;\n    |\n \n error: aborting due to previous error"}, {"sha": "9dfaf13e2ecdc83faed9b37eaa16e66cd035fc2d", "filename": "tests/ui/rust-2021/future-prelude-collision-shadow.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -8,9 +8,9 @@ LL |         let _: u32 = 3u8.try_into().unwrap();\n    = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n    |\n-LL |     use crate::m::TryIntoU32;\n+LL +     use crate::m::TryIntoU32;\n    |\n-LL |     use std::convert::TryInto;\n+LL +     use std::convert::TryInto;\n    |\n \n error: aborting due to previous error"}, {"sha": "3c37d8197432c68f757238cd85be6bf3756eca10", "filename": "tests/ui/self/class-missing-self.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fself%2Fclass-missing-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fself%2Fclass-missing-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Fclass-missing-self.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -16,7 +16,7 @@ LL |       self.sleep();\n    |       +++++\n help: consider importing this function\n    |\n-LL | use std::thread::sleep;\n+LL + use std::thread::sleep;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "1af0400c88619e458265a545919f89eb5f3d1b35", "filename": "tests/ui/shadowed/shadowed-trait-methods.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fshadowed%2Fshadowed-trait-methods.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,7 @@ LL |     ().f()\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use foo::T;\n+LL + use foo::T;\n    |\n \n error: aborting due to previous error"}, {"sha": "60433e1c28467c7ba95800198a121adb003356a0", "filename": "tests/ui/span/drop-location-span-error-rust-2021-incompatible-closure-captures-96258.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-96258.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-96258.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fdrop-location-span-error-rust-2021-incompatible-closure-captures-96258.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -15,7 +15,7 @@ LL |         interval: Duration,\n    |\n help: consider importing this struct\n    |\n-LL | use std::time::Duration;\n+LL + use std::time::Duration;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "88c86d2a91b58f72eade83fe35bbbdd2cbc763de", "filename": "tests/ui/span/issue-35987.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fspan%2Fissue-35987.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fspan%2Fissue-35987.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-35987.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -11,7 +11,7 @@ LL | impl<T: Clone, Add> Add for Foo<T> {\n    |\n help: consider importing this trait instead\n    |\n-LL | use std::ops::Add;\n+LL + use std::ops::Add;\n    |\n \n error: aborting due to previous error"}, {"sha": "90b623e89cffa04a9d0375f2461ba2494c250287", "filename": "tests/ui/span/issue-71363.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fspan%2Fissue-71363.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fspan%2Fissue-71363.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspan%2Fissue-71363.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -21,7 +21,8 @@ note: required by a bound in `std::error::Error`\n  --> $SRC_DIR/core/src/error.rs:LL:COL\n help: consider annotating `MyError` with `#[derive(Debug)]`\n   |\n-3 | #[derive(Debug)]\n+3 + #[derive(Debug)]\n+4 | struct MyError;\n   |\n \n error: aborting due to 2 previous errors"}, {"sha": "e8a12e4d928e1e014fae77425c6846b13f4a14f9", "filename": "tests/ui/specialization/issue-59435.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fspecialization%2Fissue-59435.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fspecialization%2Fissue-59435.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fissue-59435.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -11,7 +11,8 @@ LL |     type MyType: Default;\n    |                  ^^^^^^^ required by this bound in `MyTrait::MyType`\n help: consider annotating `MyStruct` with `#[derive(Default)]`\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct MyStruct {}\n    |\n \n error: aborting due to previous error"}, {"sha": "5b01208c56fbfa18278f61f5aaaa2b171a36275d", "filename": "tests/ui/structs/struct-path-alias-bounds.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fstructs%2Fstruct-path-alias-bounds.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -11,7 +11,8 @@ LL | struct S<T: Clone> { a: T }\n    |             ^^^^^ required by this bound in `S`\n help: consider annotating `NoClone` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct NoClone;\n    |\n \n error: aborting due to previous error"}, {"sha": "0716005c679a6e3dd64a3a7a084eb882075301f7", "filename": "tests/ui/suggestions/clone-on-unconstrained-borrowed-type-param.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fclone-on-unconstrained-borrowed-type-param.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -35,7 +35,8 @@ LL |     t.clone()\n    |     ^\n help: consider annotating `Foo` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct Foo;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "48ee44a74f2d3976e95cf75cdcd1245a6121564e", "filename": "tests/ui/suggestions/core-std-import-order-issue-83564.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fcore-std-import-order-issue-83564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fcore-std-import-order-issue-83564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fcore-std-import-order-issue-83564.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,9 +6,9 @@ LL |     let _x = NonZeroU32::new(5).unwrap();\n    |\n help: consider importing one of these items\n    |\n-LL | use core::num::NonZeroU32;\n+LL + use core::num::NonZeroU32;\n    |\n-LL | use std::num::NonZeroU32;\n+LL + use std::num::NonZeroU32;\n    |\n \n error: aborting due to previous error"}, {"sha": "c3f305c1770acbc171468e381e972b0433cc3186", "filename": "tests/ui/suggestions/derive-macro-missing-bounds.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fderive-macro-missing-bounds.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -11,7 +11,8 @@ LL |     struct Outer<T>(Inner<T>);\n    = note: this error originates in the derive macro `Debug` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `a::Inner<T>` with `#[derive(Debug)]`\n    |\n-LL |     #[derive(Debug)]\n+LL +     #[derive(Debug)]\n+LL |     struct Inner<T>(T);\n    |\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |"}, {"sha": "e2db0da74f022824cd9e1b4295fea296ab7e433e", "filename": "tests/ui/suggestions/derive-trait-for-method-call.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fderive-trait-for-method-call.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -32,7 +32,8 @@ note: the trait `Default` must be implemented\n   --> $SRC_DIR/core/src/default.rs:LL:COL\n help: consider annotating `Enum` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | enum Enum {\n    |\n \n error[E0599]: the method `test` exists for struct `Foo<Struct, CloneStruct>`, but its trait bounds were not satisfied\n@@ -67,11 +68,13 @@ LL | impl<X: Clone + Default + , Y: Clone + Default> Foo<X, Y> {\n    |         unsatisfied trait bound introduced here\n help: consider annotating `CloneStruct` with `#[derive(Default)]`\n    |\n-LL | #[derive(Default)]\n+LL + #[derive(Default)]\n+LL | struct CloneStruct {\n    |\n help: consider annotating `Struct` with `#[derive(Clone, Default)]`\n    |\n-LL | #[derive(Clone, Default)]\n+LL + #[derive(Clone, Default)]\n+LL | struct Struct {\n    |\n \n error[E0599]: the method `test` exists for struct `Foo<Vec<Enum>, Instant>`, but its trait bounds were not satisfied"}, {"sha": "85fbb8b88e81a4ca28bc079f4445ffa0d3ad3c64", "filename": "tests/ui/suggestions/dont-wrap-ambiguous-receivers.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,9 +10,9 @@ LL |     banana::Chaenomeles.pick()\n    = help: items from traits can only be used if the trait is in scope\n help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n    |\n-LL | use banana::Apple;\n+LL + use banana::Apple;\n    |\n-LL | use banana::Peach;\n+LL + use banana::Peach;\n    |\n \n error: aborting due to previous error"}, {"sha": "3f54daf136f6d5411552366631bd342c2c6b1d23", "filename": "tests/ui/suggestions/import-trait-for-method-call.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fimport-trait-for-method-call.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,7 @@ LL |     h.finish()\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use std::hash::Hasher;\n+LL + use std::hash::Hasher;\n    |\n \n error[E0599]: the method `as_ref` exists for reference `&dyn Bar`, but its trait bounds were not satisfied"}, {"sha": "e291cedb8357e30e5e3330fbf403820ac127ef03", "filename": "tests/ui/suggestions/invalid-bin-op.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Finvalid-bin-op.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Finvalid-bin-op.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Finvalid-bin-op.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -13,7 +13,8 @@ LL | struct S<T>(T);\n    | ^^^^^^^^^^^ must implement `PartialEq<_>`\n help: consider annotating `S<T>` with `#[derive(PartialEq)]`\n    |\n-LL | #[derive(PartialEq)]\n+LL + #[derive(PartialEq)]\n+LL | struct S<T>(T);\n    |\n help: consider introducing a `where` clause, but there might be an alternative better way to express this requirement\n    |"}, {"sha": "1e243f81b10ee076534dea40d2f7daf6de5e0cb0", "filename": "tests/ui/suggestions/issue-84973-blacklist.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-84973-blacklist.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -27,7 +27,8 @@ LL | fn f_clone<T: Clone>(t: T) {}\n    |               ^^^^^ required by this bound in `f_clone`\n help: consider annotating `S` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct S;\n    |\n \n error[E0277]: `[static generator@$DIR/issue-84973-blacklist.rs:17:13: 17:22]` cannot be unpinned"}, {"sha": "68100e56cbc82a767e4da13c8a753c5b1a72fc45", "filename": "tests/ui/suggestions/no-extern-crate-in-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fno-extern-crate-in-type.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL | type Output = Option<Foo>;\n    |\n help: consider importing this struct\n    |\n-LL | use foo::Foo;\n+LL + use foo::Foo;\n    |\n \n error: aborting due to previous error"}, {"sha": "fb070ffc33230b46919f13629c7254f70faa2f16", "filename": "tests/ui/suggestions/raw-name-use-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fraw-name-use-suggestion.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -28,7 +28,7 @@ LL |     r#break();\n    |\n help: consider importing this function\n    |\n-LL | use foo::r#break;\n+LL + use foo::r#break;\n    |\n \n error: aborting due to 3 previous errors"}, {"sha": "671f5efddd979d34b29bc4e5605a33fe81128331", "filename": "tests/ui/suggestions/suggest-tryinto-edition-change.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -8,9 +8,9 @@ LL |     let _i: i16 = TryFrom::try_from(0_i32).unwrap();\n    = note: 'core::convert::TryFrom' is included in the prelude starting in Edition 2021\n help: consider importing one of these items\n    |\n-LL | use core::convert::TryFrom;\n+LL + use core::convert::TryFrom;\n    |\n-LL | use std::convert::TryFrom;\n+LL + use std::convert::TryFrom;\n    |\n \n error[E0433]: failed to resolve: use of undeclared type `TryInto`\n@@ -23,9 +23,9 @@ LL |     let _i: i16 = TryInto::try_into(0_i32).unwrap();\n    = note: 'core::convert::TryInto' is included in the prelude starting in Edition 2021\n help: consider importing one of these items\n    |\n-LL | use core::convert::TryInto;\n+LL + use core::convert::TryInto;\n    |\n-LL | use std::convert::TryInto;\n+LL + use std::convert::TryInto;\n    |\n \n error[E0433]: failed to resolve: use of undeclared type `FromIterator`\n@@ -42,9 +42,9 @@ LL |     let _v: Vec<_> = IntoIterator::from_iter(&[1]);\n    |                      ~~~~~~~~~~~~\n help: consider importing one of these items\n    |\n-LL | use core::iter::FromIterator;\n+LL + use core::iter::FromIterator;\n    |\n-LL | use std::iter::FromIterator;\n+LL + use std::iter::FromIterator;\n    |\n \n error[E0599]: no method named `try_into` found for type `i32` in the current scope\n@@ -60,7 +60,7 @@ LL |     let _i: i16 = 0_i32.try_into().unwrap();\n    = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use std::convert::TryInto;\n+LL + use std::convert::TryInto;\n    |\n \n error: aborting due to 4 previous errors"}, {"sha": "77724e7e2a479dabb9b8df7de754520a0f0e08e3", "filename": "tests/ui/suggestions/use-placement-resolve.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fuse-placement-resolve.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fuse-placement-resolve.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fuse-placement-resolve.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL | fn foobar<T: Debug>(x: T) {}\n    |\n help: consider importing this trait instead\n    |\n-LL | use std::fmt::Debug;\n+LL + use std::fmt::Debug;\n    |\n \n error: aborting due to previous error"}, {"sha": "e900e12b7df0f3d70c0283186cbb1e86243eea92", "filename": "tests/ui/suggestions/use-placement-typeck.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fuse-placement-typeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fsuggestions%2Fuse-placement-typeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fuse-placement-typeck.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -13,7 +13,7 @@ LL |     pub struct S;\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use m::Foo;\n+LL + use m::Foo;\n    |\n \n error: aborting due to previous error"}, {"sha": "b114d295d7816edd6c9b721495a4767d600ff411", "filename": "tests/ui/trait-bounds/impl-bound-with-references-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftrait-bounds%2Fimpl-bound-with-references-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftrait-bounds%2Fimpl-bound-with-references-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Fimpl-bound-with-references-error.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |     T: Into<Cow<'static, str>>,\n    |\n help: consider importing this enum\n    |\n-LL | use std::borrow::Cow;\n+LL + use std::borrow::Cow;\n    |\n \n error[E0119]: conflicting implementations of trait `From<LabelText>` for type `LabelText`"}, {"sha": "4547e1c984c053b1d849fc793b202feac4714479", "filename": "tests/ui/trait-bounds/shadowed-path-in-trait-bound-suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftrait-bounds%2Fshadowed-path-in-trait-bound-suggestion.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL |     pub struct A<H: A::Trait>(pub H);\n    |\n help: consider importing this trait\n    |\n-LL |     use A::Trait;\n+LL +     use A::Trait;\n    |\n help: if you import `Trait`, refer to it directly\n    |"}, {"sha": "e723c7c51814aace6bd8aa472b39ac90eca3110a", "filename": "tests/ui/traits/inductive-overflow/supertrait-auto-trait.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Finductive-overflow%2Fsupertrait-auto-trait.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -26,7 +26,8 @@ LL | fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n    |            ^^^^^ required by this bound in `copy`\n help: consider annotating `NoClone` with `#[derive(Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL + #[derive(Copy)]\n+LL | struct NoClone;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "ef55796187ee7ac9886bfb24ae013f1309a2d35e", "filename": "tests/ui/traits/issue-71136.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftraits%2Fissue-71136.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftraits%2Fissue-71136.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-71136.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -11,7 +11,8 @@ LL |     the_foos: Vec<Foo>,\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `Foo` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct Foo(u8);\n    |\n \n error: aborting due to previous error"}, {"sha": "ec692ff911df57f04170e14394386a8abf8ead73", "filename": "tests/ui/traits/issue-78372.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftraits%2Fissue-78372.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftraits%2Fissue-78372.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fissue-78372.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -6,7 +6,7 @@ LL | struct Smaht<T, MISC>(PhantomData);\n    |\n help: consider importing this struct\n    |\n-LL | use std::marker::PhantomData;\n+LL + use std::marker::PhantomData;\n    |\n \n error[E0412]: cannot find type `U` in this scope"}, {"sha": "f538131892546e0501529636e63e72a9bd25ab55", "filename": "tests/ui/traits/item-privacy.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftraits%2Fitem-privacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftraits%2Fitem-privacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fitem-privacy.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -29,7 +29,7 @@ LL |     S.b();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use method::B;\n+LL + use method::B;\n    |\n \n error[E0624]: method `a` is private\n@@ -69,7 +69,7 @@ LL |     S::b(&S);\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use method::B;\n+LL + use method::B;\n    |\n \n error[E0624]: method `a` is private\n@@ -109,7 +109,7 @@ LL |     S::B;\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use assoc_const::B;\n+LL + use assoc_const::B;\n    |\n \n error[E0624]: associated constant `A` is private"}, {"sha": "e11799308c5c7ef41f38c6acd858306a2ac2296a", "filename": "tests/ui/traits/method-private.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftraits%2Fmethod-private.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftraits%2Fmethod-private.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fmethod-private.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -10,7 +10,7 @@ LL |     foo.method();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use inner::Bar;\n+LL + use inner::Bar;\n    |\n \n error: aborting due to previous error"}, {"sha": "38cb7fe551841ac72dfe22b5ba4a6ca96f33c770", "filename": "tests/ui/typeck/explain_clone_autoref.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fexplain_clone_autoref.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -14,7 +14,8 @@ LL |     nc.clone()\n    |     ^^\n help: consider annotating `NotClone` with `#[derive(Clone)]`\n    |\n-LL | #[derive(Clone)]\n+LL + #[derive(Clone)]\n+LL | struct NotClone;\n    |\n \n error: aborting due to previous error"}, {"sha": "c072e6a08ba0b0032e3c3848a01b733816db2289", "filename": "tests/ui/typeck/issue-43189.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftypeck%2Fissue-43189.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Ftypeck%2Fissue-43189.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-43189.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,7 @@ LL |     fn a(&self) {}\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL | use xcrate_issue_43189_b::xcrate_issue_43189_a::A;\n+LL + use xcrate_issue_43189_b::xcrate_issue_43189_a::A;\n    |\n \n error: aborting due to previous error"}, {"sha": "f2c19405bbb8bce7fd729b5ae9d4eac9450e914b", "filename": "tests/ui/underscore-imports/shadow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Funderscore-imports%2Fshadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Funderscore-imports%2Fshadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funderscore-imports%2Fshadow.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -7,7 +7,7 @@ LL |         x.deref();\n    = help: items from traits can only be used if the trait is in scope\n help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n    |\n-LL |     use std::ops::Deref;\n+LL +     use std::ops::Deref;\n    |\n \n error: aborting due to previous error"}, {"sha": "4d23d230fa3f6b8e1c8c9c84e9682c31b35fa21a", "filename": "tests/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -9,7 +9,8 @@ note: required by a bound in `AssertParamIsCopy`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `U1` with `#[derive(Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL + #[derive(Copy)]\n+LL | union U1 {\n    |\n \n error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its trait bounds were not satisfied\n@@ -34,7 +35,8 @@ LL | #[derive(Clone, Copy)]\n    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro\n help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n-LL | #[derive(Clone, Copy)]\n+LL + #[derive(Clone, Copy)]\n+LL | struct CloneNoCopy;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "4d23d230fa3f6b8e1c8c9c84e9682c31b35fa21a", "filename": "tests/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -9,7 +9,8 @@ note: required by a bound in `AssertParamIsCopy`\n    = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `U1` with `#[derive(Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL + #[derive(Copy)]\n+LL | union U1 {\n    |\n \n error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its trait bounds were not satisfied\n@@ -34,7 +35,8 @@ LL | #[derive(Clone, Copy)]\n    |          ^^^^^ unsatisfied trait bound introduced in this `derive` macro\n help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n    |\n-LL | #[derive(Clone, Copy)]\n+LL + #[derive(Clone, Copy)]\n+LL | struct CloneNoCopy;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "136cd883e26ce7fe8e570f39ca0ac472f688bd69", "filename": "tests/ui/union/union-derive-eq.mirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-derive-eq.mirunsafeck.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,8 @@ note: required by a bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `PartialEqNotEq` with `#[derive(Eq)]`\n    |\n-LL | #[derive(Eq)]\n+LL + #[derive(Eq)]\n+LL | struct PartialEqNotEq;\n    |\n \n error: aborting due to previous error"}, {"sha": "136cd883e26ce7fe8e570f39ca0ac472f688bd69", "filename": "tests/ui/union/union-derive-eq.thirunsafeck.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funion%2Funion-derive-eq.thirunsafeck.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,8 @@ note: required by a bound in `AssertParamIsEq`\n    = note: this error originates in the derive macro `Eq` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider annotating `PartialEqNotEq` with `#[derive(Eq)]`\n    |\n-LL | #[derive(Eq)]\n+LL + #[derive(Eq)]\n+LL | struct PartialEqNotEq;\n    |\n \n error: aborting due to previous error"}, {"sha": "7ef2f6b1a292255df26c924f645b0e5757593f33", "filename": "tests/ui/unresolved/unresolved-candidates.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Funresolved%2Funresolved-candidates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Funresolved%2Funresolved-candidates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funresolved%2Funresolved-candidates.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -17,7 +17,7 @@ LL |     impl Trait for () {}\n    |\n help: consider importing this trait\n    |\n-LL |     use a::Trait;\n+LL +     use a::Trait;\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "617969720a60aa55ba9ee46bbd23e14d1e8f9bc0", "filename": "tests/ui/wf/wf-const-type.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fwf%2Fwf-const-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fwf%2Fwf-const-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fwf-const-type.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,8 @@ LL | struct IsCopy<T:Copy> { t: T }\n    |                 ^^^^ required by this bound in `IsCopy`\n help: consider annotating `NotCopy` with `#[derive(Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL + #[derive(Copy)]\n+LL | struct NotCopy;\n    |\n \n error: aborting due to previous error"}, {"sha": "bb5a57834ebd20cdfa260acafd001a79a8c95c07", "filename": "tests/ui/wf/wf-static-type.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fwf%2Fwf-static-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fwf%2Fwf-static-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwf%2Fwf-static-type.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -12,7 +12,8 @@ LL | struct IsCopy<T:Copy> { t: T }\n    |                 ^^^^ required by this bound in `IsCopy`\n help: consider annotating `NotCopy` with `#[derive(Copy)]`\n    |\n-LL | #[derive(Copy)]\n+LL + #[derive(Copy)]\n+LL | struct NotCopy;\n    |\n \n error: aborting due to previous error"}, {"sha": "6cf717295141b68654c8cb4bf12f940f7493beeb", "filename": "tests/ui/where-clauses/where-clauses-method-unsatisfied.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhere-clauses%2Fwhere-clauses-method-unsatisfied.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -11,7 +11,8 @@ LL |     fn equals(&self, u: &Foo<T>) -> bool where T : Eq {\n    |                                                    ^^ required by this bound in `Foo::<T>::equals`\n help: consider annotating `Bar` with `#[derive(Eq)]`\n    |\n-LL | #[derive(Eq)]\n+LL + #[derive(Eq)]\n+LL | struct Bar; // does not implement Eq\n    |\n \n error: aborting due to previous error"}, {"sha": "4d239bf43079f96a7f5cad0dbf3232292a274d04", "filename": "tests/ui/where-clauses/where-clauses-unsatisfied.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37e2f74afd131cda7b08520d37426bfbb622b5c/tests%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhere-clauses%2Fwhere-clauses-unsatisfied.stderr?ref=d37e2f74afd131cda7b08520d37426bfbb622b5c", "patch": "@@ -11,7 +11,8 @@ LL | fn equal<T>(a: &T, b: &T) -> bool where T : Eq { a == b }\n    |                                             ^^ required by this bound in `equal`\n help: consider annotating `Struct` with `#[derive(Eq)]`\n    |\n-LL | #[derive(Eq)]\n+LL + #[derive(Eq)]\n+LL | struct Struct;\n    |\n \n error: aborting due to previous error"}]}