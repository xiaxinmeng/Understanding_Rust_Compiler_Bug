{"sha": "25e9acb2533b2d8b1f15bb80eba0b7e79a18d292", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1ZTlhY2IyNTMzYjJkOGIxZjE1YmI4MGViYTBiN2U3OWExOGQyOTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-22T12:06:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-22T12:06:08Z"}, "message": "Auto merge of #6476 - 1c3t3a:1c3t3a-from-over-into, r=llogiq\n\nAdded from_over_into lint\n\nCloses #6456\nAdded a lint that searches for implementations of `Into<..>` and suggests to implement `From<..>` instead, as it comes with a default implementation of `Into`. Category: style.\n\nchangelog: added `from_over_into` lint", "tree": {"sha": "6e4af3ce4ea9379bf142e6692224be414df51e6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e4af3ce4ea9379bf142e6692224be414df51e6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292", "html_url": "https://github.com/rust-lang/rust/commit/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b233c83a42217158fbb444cdbcb973d87beeb19", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b233c83a42217158fbb444cdbcb973d87beeb19", "html_url": "https://github.com/rust-lang/rust/commit/4b233c83a42217158fbb444cdbcb973d87beeb19"}, {"sha": "53f4d437f4c448c4382a99c2b7ff03f104cf7368", "url": "https://api.github.com/repos/rust-lang/rust/commits/53f4d437f4c448c4382a99c2b7ff03f104cf7368", "html_url": "https://github.com/rust-lang/rust/commit/53f4d437f4c448c4382a99c2b7ff03f104cf7368"}], "stats": {"total": 181, "additions": 158, "deletions": 23}, "files": [{"sha": "de8da99cdee12385b27570510ace9d77e5c54979", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=25e9acb2533b2d8b1f15bb80eba0b7e79a18d292", "patch": "@@ -1841,6 +1841,7 @@ Released 2018-09-13\n [`forget_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_copy\n [`forget_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_ref\n [`from_iter_instead_of_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_iter_instead_of_collect\n+[`from_over_into`]: https://rust-lang.github.io/rust-clippy/master/index.html#from_over_into\n [`future_not_send`]: https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\n [`get_last_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_last_with_len\n [`get_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap"}, {"sha": "1e7e5f53cc2a35dcbcaf2b6586871e52445ed158", "filename": "clippy_lints/src/from_over_into.rs", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=25e9acb2533b2d8b1f15bb80eba0b7e79a18d292", "patch": "@@ -0,0 +1,83 @@\n+use crate::utils::paths::INTO;\n+use crate::utils::{match_def_path, meets_msrv, span_lint_and_help};\n+use if_chain::if_chain;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+const FROM_OVER_INTO_MSRV: RustcVersion = RustcVersion::new(1, 41, 0);\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Searches for implementations of the `Into<..>` trait and suggests to implement `From<..>` instead.\n+    ///\n+    /// **Why is this bad?** According the std docs implementing `From<..>` is preferred since it gives you `Into<..>` for free where the reverse isn't true.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// struct StringWrapper(String);\n+    ///\n+    /// impl Into<StringWrapper> for String {\n+    ///     fn into(self) -> StringWrapper {\n+    ///         StringWrapper(self)\n+    ///     }\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct StringWrapper(String);\n+    ///\n+    /// impl From<String> for StringWrapper {\n+    ///     fn from(s: String) -> StringWrapper {\n+    ///         StringWrapper(s)\n+    ///     }\n+    /// }\n+    /// ```\n+    pub FROM_OVER_INTO,\n+    style,\n+    \"Warns on implementations of `Into<..>` to use `From<..>`\"\n+}\n+\n+pub struct FromOverInto {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl FromOverInto {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        FromOverInto { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(FromOverInto => [FROM_OVER_INTO]);\n+\n+impl LateLintPass<'_> for FromOverInto {\n+    fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n+        if !meets_msrv(self.msrv.as_ref(), &FROM_OVER_INTO_MSRV) {\n+            return;\n+        }\n+\n+        let impl_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n+        if_chain! {\n+            if let hir::ItemKind::Impl{ .. } = &item.kind;\n+            if let Some(impl_trait_ref) = cx.tcx.impl_trait_ref(impl_def_id);\n+            if match_def_path(cx, impl_trait_ref.def_id, &INTO);\n+\n+            then {\n+                span_lint_and_help(\n+                    cx,\n+                    FROM_OVER_INTO,\n+                    item.span,\n+                    \"an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\",\n+                    None,\n+                    \"consider to implement `From` instead\",\n+                );\n+            }\n+        }\n+    }\n+\n+    extract_msrv_attr!(LateContext);\n+}"}, {"sha": "35b057d7b6a4153b7d0372b5c40b3fe9f9544bc6", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=25e9acb2533b2d8b1f15bb80eba0b7e79a18d292", "patch": "@@ -207,6 +207,7 @@ mod float_literal;\n mod floating_point_arithmetic;\n mod format;\n mod formatting;\n+mod from_over_into;\n mod functions;\n mod future_not_send;\n mod get_last_with_len;\n@@ -614,6 +615,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n         &formatting::SUSPICIOUS_ELSE_FORMATTING,\n         &formatting::SUSPICIOUS_UNARY_OP_FORMATTING,\n+        &from_over_into::FROM_OVER_INTO,\n         &functions::DOUBLE_MUST_USE,\n         &functions::MUST_USE_CANDIDATE,\n         &functions::MUST_USE_UNIT,\n@@ -1014,6 +1016,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(move || box checked_conversions::CheckedConversions::new(msrv));\n     store.register_late_pass(move || box mem_replace::MemReplace::new(msrv));\n     store.register_late_pass(move || box ranges::Ranges::new(msrv));\n+    store.register_late_pass(move || box from_over_into::FromOverInto::new(msrv));\n     store.register_late_pass(move || box use_self::UseSelf::new(msrv));\n     store.register_late_pass(move || box missing_const_for_fn::MissingConstForFn::new(msrv));\n \n@@ -1417,6 +1420,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_ELSE_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n+        LintId::of(&from_over_into::FROM_OVER_INTO),\n         LintId::of(&functions::DOUBLE_MUST_USE),\n         LintId::of(&functions::MUST_USE_UNIT),\n         LintId::of(&functions::NOT_UNSAFE_PTR_ARG_DEREF),\n@@ -1663,6 +1667,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_ELSE_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n+        LintId::of(&from_over_into::FROM_OVER_INTO),\n         LintId::of(&functions::DOUBLE_MUST_USE),\n         LintId::of(&functions::MUST_USE_UNIT),\n         LintId::of(&functions::RESULT_UNIT_ERR),"}, {"sha": "292d0924fb17a4ca1b32bf0a39fa6a81fdc68e82", "filename": "tests/ui/from_over_into.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/tests%2Fui%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/tests%2Fui%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.rs?ref=25e9acb2533b2d8b1f15bb80eba0b7e79a18d292", "patch": "@@ -0,0 +1,21 @@\n+#![warn(clippy::from_over_into)]\n+\n+// this should throw an error\n+struct StringWrapper(String);\n+\n+impl Into<StringWrapper> for String {\n+    fn into(self) -> StringWrapper {\n+        StringWrapper(self)\n+    }\n+}\n+\n+// this is fine\n+struct A(String);\n+\n+impl From<String> for A {\n+    fn from(s: String) -> A {\n+        A(s)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "18f56f854329e364a2c3e526c254a9e1b5eda0da", "filename": "tests/ui/from_over_into.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/tests%2Fui%2Ffrom_over_into.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/tests%2Fui%2Ffrom_over_into.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffrom_over_into.stderr?ref=25e9acb2533b2d8b1f15bb80eba0b7e79a18d292", "patch": "@@ -0,0 +1,15 @@\n+error: an implementation of `From` is preferred since it gives you `Into<_>` for free where the reverse isn't true\n+  --> $DIR/from_over_into.rs:6:1\n+   |\n+LL | / impl Into<StringWrapper> for String {\n+LL | |     fn into(self) -> StringWrapper {\n+LL | |         StringWrapper(self)\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = note: `-D clippy::from-over-into` implied by `-D warnings`\n+   = help: consider to implement `From` instead\n+\n+error: aborting due to previous error\n+"}, {"sha": "0f47f1cbc4026cb77c88eb4e70612e83ba70a60c", "filename": "tests/ui/min_rust_version_attr.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/tests%2Fui%2Fmin_rust_version_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/tests%2Fui%2Fmin_rust_version_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.rs?ref=25e9acb2533b2d8b1f15bb80eba0b7e79a18d292", "patch": "@@ -57,6 +57,14 @@ pub fn checked_conversion() {\n     let _ = value <= (u32::MAX as i64) && value >= 0;\n }\n \n+pub struct FromOverInto(String);\n+\n+impl Into<FromOverInto> for String {\n+    fn into(self) -> FromOverInto {\n+        FromOverInto(self)\n+    }\n+}\n+\n pub fn filter_map_next() {\n     let a = [\"1\", \"lol\", \"3\", \"NaN\", \"5\"];\n "}, {"sha": "e3e3b335cbe165721ed9ea5260dbe9f71dcd2bb4", "filename": "tests/ui/min_rust_version_attr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/tests%2Fui%2Fmin_rust_version_attr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/tests%2Fui%2Fmin_rust_version_attr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmin_rust_version_attr.stderr?ref=25e9acb2533b2d8b1f15bb80eba0b7e79a18d292", "patch": "@@ -1,12 +1,12 @@\n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:142:24\n+  --> $DIR/min_rust_version_attr.rs:150:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::manual-strip` implied by `-D warnings`\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:141:9\n+  --> $DIR/min_rust_version_attr.rs:149:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,13 +17,13 @@ LL |             assert_eq!(<stripped>.to_uppercase(), \"WORLD!\");\n    |\n \n error: stripping a prefix manually\n-  --> $DIR/min_rust_version_attr.rs:154:24\n+  --> $DIR/min_rust_version_attr.rs:162:24\n    |\n LL |             assert_eq!(s[\"hello, \".len()..].to_uppercase(), \"WORLD!\");\n    |                        ^^^^^^^^^^^^^^^^^^^^\n    |\n note: the prefix was tested here\n-  --> $DIR/min_rust_version_attr.rs:153:9\n+  --> $DIR/min_rust_version_attr.rs:161:9\n    |\n LL |         if s.starts_with(\"hello, \") {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a192ebde3ebf4e73047dde8152c6dee234cf6bfc", "filename": "tests/ui/unused_unit.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/tests%2Fui%2Funused_unit.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/tests%2Fui%2Funused_unit.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.fixed?ref=25e9acb2533b2d8b1f15bb80eba0b7e79a18d292", "patch": "@@ -11,6 +11,7 @@\n \n #![deny(clippy::unused_unit)]\n #![allow(dead_code)]\n+#![allow(clippy::from_over_into)]\n \n struct Unitter;\n impl Unitter {"}, {"sha": "96041a7dd850e3807504697a84b87026447a5955", "filename": "tests/ui/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/tests%2Fui%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/tests%2Fui%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.rs?ref=25e9acb2533b2d8b1f15bb80eba0b7e79a18d292", "patch": "@@ -11,6 +11,7 @@\n \n #![deny(clippy::unused_unit)]\n #![allow(dead_code)]\n+#![allow(clippy::from_over_into)]\n \n struct Unitter;\n impl Unitter {"}, {"sha": "02038b5fb6b5a7ed56ce688bdf1e01834d0a68c6", "filename": "tests/ui/unused_unit.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/tests%2Fui%2Funused_unit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25e9acb2533b2d8b1f15bb80eba0b7e79a18d292/tests%2Fui%2Funused_unit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funused_unit.stderr?ref=25e9acb2533b2d8b1f15bb80eba0b7e79a18d292", "patch": "@@ -1,5 +1,5 @@\n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:18:28\n+  --> $DIR/unused_unit.rs:19:28\n    |\n LL |     pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) -> ()\n    |                            ^^^^^^ help: remove the `-> ()`\n@@ -11,109 +11,109 @@ LL | #![deny(clippy::unused_unit)]\n    |         ^^^^^^^^^^^^^^^^^^^\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:19:18\n+  --> $DIR/unused_unit.rs:20:18\n    |\n LL |     where G: Fn() -> () {\n    |                  ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:18:58\n+  --> $DIR/unused_unit.rs:19:58\n    |\n LL |     pub fn get_unit<F: Fn() -> (), G>(&self, f: F, _g: G) -> ()\n    |                                                          ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:20:26\n+  --> $DIR/unused_unit.rs:21:26\n    |\n LL |         let _y: &dyn Fn() -> () = &f;\n    |                          ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:27:18\n+  --> $DIR/unused_unit.rs:28:18\n    |\n LL |     fn into(self) -> () {\n    |                  ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit expression\n-  --> $DIR/unused_unit.rs:28:9\n+  --> $DIR/unused_unit.rs:29:9\n    |\n LL |         ()\n    |         ^^ help: remove the final `()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:33:29\n+  --> $DIR/unused_unit.rs:34:29\n    |\n LL |     fn redundant<F: FnOnce() -> (), G, H>(&self, _f: F, _g: G, _h: H)\n    |                             ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:35:19\n+  --> $DIR/unused_unit.rs:36:19\n    |\n LL |         G: FnMut() -> (),\n    |                   ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:36:16\n+  --> $DIR/unused_unit.rs:37:16\n    |\n LL |         H: Fn() -> ();\n    |                ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:40:29\n+  --> $DIR/unused_unit.rs:41:29\n    |\n LL |     fn redundant<F: FnOnce() -> (), G, H>(&self, _f: F, _g: G, _h: H)\n    |                             ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:42:19\n+  --> $DIR/unused_unit.rs:43:19\n    |\n LL |         G: FnMut() -> (),\n    |                   ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:43:16\n+  --> $DIR/unused_unit.rs:44:16\n    |\n LL |         H: Fn() -> () {}\n    |                ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:46:17\n+  --> $DIR/unused_unit.rs:47:17\n    |\n LL | fn return_unit() -> () { () }\n    |                 ^^^^^^ help: remove the `-> ()`\n \n error: unneeded unit expression\n-  --> $DIR/unused_unit.rs:46:26\n+  --> $DIR/unused_unit.rs:47:26\n    |\n LL | fn return_unit() -> () { () }\n    |                          ^^ help: remove the final `()`\n \n error: unneeded `()`\n-  --> $DIR/unused_unit.rs:56:14\n+  --> $DIR/unused_unit.rs:57:14\n    |\n LL |         break();\n    |              ^^ help: remove the `()`\n \n error: unneeded `()`\n-  --> $DIR/unused_unit.rs:58:11\n+  --> $DIR/unused_unit.rs:59:11\n    |\n LL |     return();\n    |           ^^ help: remove the `()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:75:10\n+  --> $DIR/unused_unit.rs:76:10\n    |\n LL | fn test()->(){}\n    |          ^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:78:11\n+  --> $DIR/unused_unit.rs:79:11\n    |\n LL | fn test2() ->(){}\n    |           ^^^^^ help: remove the `-> ()`\n \n error: unneeded unit return type\n-  --> $DIR/unused_unit.rs:81:11\n+  --> $DIR/unused_unit.rs:82:11\n    |\n LL | fn test3()-> (){}\n    |           ^^^^^ help: remove the `-> ()`"}]}