{"sha": "422208ae52564c3b8cbf8416ffd1c92e9c80a3c0", "node_id": "C_kwDOAAsO6NoAKDQyMjIwOGFlNTI1NjRjM2I4Y2JmODQxNmZmZDFjOTJlOWM4MGEzYzA", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-02-21T14:18:10Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2023-03-01T09:20:43Z"}, "message": "Use UnordSet instead of FxHashSet for names_imported_by_glob_use query.", "tree": {"sha": "9c1d62c9b938641cf27bcfa688cf4a3571e74276", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c1d62c9b938641cf27bcfa688cf4a3571e74276"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0", "html_url": "https://github.com/rust-lang/rust/commit/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969", "html_url": "https://github.com/rust-lang/rust/commit/ee8bc5b0b21ab1aac0e9db76f94aadca1076f969"}], "stats": {"total": 54, "additions": 42, "deletions": 12}, "files": [{"sha": "5c2435a0122ebeb161cf75f2ff8636a224b4f09c", "filename": "compiler/rustc_data_structures/src/unord.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs?ref=422208ae52564c3b8cbf8416ffd1c92e9c80a3c0", "patch": "@@ -109,6 +109,12 @@ impl<T, I: Iterator<Item = T>> UnordItems<T, I> {\n     }\n }\n \n+impl<T> UnordItems<T, std::iter::Empty<T>> {\n+    pub fn empty() -> Self {\n+        UnordItems(std::iter::empty())\n+    }\n+}\n+\n impl<'a, T: Clone + 'a, I: Iterator<Item = &'a T>> UnordItems<&'a T, I> {\n     #[inline]\n     pub fn cloned(self) -> UnordItems<T, impl Iterator<Item = T>> {\n@@ -133,6 +139,20 @@ impl<T: Ord, I: Iterator<Item = T>> UnordItems<T, I> {\n         items\n     }\n \n+    #[inline]\n+    pub fn into_sorted_stable_ord(self, use_stable_sort: bool) -> Vec<T>\n+    where\n+        T: Ord + StableOrd,\n+    {\n+        let mut items: Vec<T> = self.0.collect();\n+        if use_stable_sort {\n+            items.sort();\n+        } else {\n+            items.sort_unstable()\n+        }\n+        items\n+    }\n+\n     pub fn into_sorted_small_vec<HCX, const LEN: usize>(self, hcx: &HCX) -> SmallVec<[T; LEN]>\n     where\n         T: ToStableHashKey<HCX>,\n@@ -175,6 +195,11 @@ impl<V: Eq + Hash> UnordSet<V> {\n         self.inner.len()\n     }\n \n+    #[inline]\n+    pub fn is_empty(&self) -> bool {\n+        self.inner.is_empty()\n+    }\n+\n     #[inline]\n     pub fn insert(&mut self, v: V) -> bool {\n         self.inner.insert(v)\n@@ -253,7 +278,7 @@ impl<V: Eq + Hash> UnordSet<V> {\n     // We can safely extend this UnordSet from a set of unordered values because that\n     // won't expose the internal ordering anywhere.\n     #[inline]\n-    pub fn extend<I: Iterator<Item = V>>(&mut self, items: UnordItems<V, I>) {\n+    pub fn extend_unord<I: Iterator<Item = V>>(&mut self, items: UnordItems<V, I>) {\n         self.inner.extend(items.0)\n     }\n \n@@ -277,6 +302,12 @@ impl<V: Hash + Eq> FromIterator<V> for UnordSet<V> {\n     }\n }\n \n+impl<V: Hash + Eq> From<FxHashSet<V>> for UnordSet<V> {\n+    fn from(value: FxHashSet<V>) -> Self {\n+        UnordSet { inner: value }\n+    }\n+}\n+\n impl<HCX, V: Hash + Eq + HashStable<HCX>> HashStable<HCX> for UnordSet<V> {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut HCX, hasher: &mut StableHasher) {"}, {"sha": "9f25d0b2e43c5f22f12332bbf078924408bae872", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=422208ae52564c3b8cbf8416ffd1c92e9c80a3c0", "patch": "@@ -1826,7 +1826,7 @@ rustc_queries! {\n     query maybe_unused_trait_imports(_: ()) -> &'tcx FxIndexSet<LocalDefId> {\n         desc { \"fetching potentially unused trait imports\" }\n     }\n-    query names_imported_by_glob_use(def_id: LocalDefId) -> &'tcx FxHashSet<Symbol> {\n+    query names_imported_by_glob_use(def_id: LocalDefId) -> &'tcx UnordSet<Symbol> {\n         desc { |tcx| \"finding names imported by glob use for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n     }\n "}, {"sha": "4c3525d8a11a67e7f6624532aa79cbb6469b5822", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=422208ae52564c3b8cbf8416ffd1c92e9c80a3c0", "patch": "@@ -37,6 +37,7 @@ use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{self, Lock, Lrc, MappedReadGuard, ReadGuard, WorkerLocal};\n+use rustc_data_structures::unord::UnordSet;\n use rustc_errors::{\n     DecorateLint, DiagnosticBuilder, DiagnosticMessage, ErrorGuaranteed, MultiSpan,\n };\n@@ -2488,7 +2489,9 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     providers.maybe_unused_trait_imports =\n         |tcx, ()| &tcx.resolutions(()).maybe_unused_trait_imports;\n     providers.names_imported_by_glob_use = |tcx, id| {\n-        tcx.arena.alloc(tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default())\n+        tcx.arena.alloc(UnordSet::from(\n+            tcx.resolutions(()).glob_map.get(&id).cloned().unwrap_or_default(),\n+        ))\n     };\n \n     providers.extern_mod_stmt_cnum ="}, {"sha": "3c18591277643f13a38885826f022c971473c570", "filename": "compiler/rustc_middle/src/ty/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery.rs?ref=422208ae52564c3b8cbf8416ffd1c92e9c80a3c0", "patch": "@@ -41,7 +41,7 @@ use rustc_arena::TypedArena;\n use rustc_ast as ast;\n use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_attr as attr;\n-use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n+use rustc_data_structures::fx::{FxHashMap, FxIndexMap, FxIndexSet};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::Lrc;"}, {"sha": "75273d1fb7d65da5704d695567c881b29cf46a79", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=422208ae52564c3b8cbf8416ffd1c92e9c80a3c0", "patch": "@@ -371,7 +371,7 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n             }\n             if tcx.visibility(def_id).is_public() { Some(def_id) } else { None }\n         });\n-        Extend::extend(&mut self.live_symbols, live_fields);\n+        self.live_symbols.extend(live_fields);\n \n         intravisit::walk_struct_def(self, def);\n     }"}, {"sha": "e105452e1c5f3a3bc0c95f3b05e01a1e07f13dcc", "filename": "src/tools/clippy/clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/422208ae52564c3b8cbf8416ffd1c92e9c80a3c0/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=422208ae52564c3b8cbf8416ffd1c92e9c80a3c0", "patch": "@@ -155,14 +155,10 @@ impl LateLintPass<'_> for WildcardImports {\n                     )\n                 };\n \n-                let imports_string = if used_imports.len() == 1 {\n-                    used_imports.iter().next().unwrap().to_string()\n+                let mut imports = used_imports.items().map(ToString::to_string).into_sorted_stable_ord(false);\n+                let imports_string = if imports.len() == 1 {\n+                    imports.pop().unwrap()\n                 } else {\n-                    let mut imports = used_imports\n-                        .iter()\n-                        .map(ToString::to_string)\n-                        .collect::<Vec<_>>();\n-                    imports.sort();\n                     if braced_glob {\n                         imports.join(\", \")\n                     } else {"}]}