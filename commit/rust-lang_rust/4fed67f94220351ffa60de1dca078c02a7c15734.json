{"sha": "4fed67f94220351ffa60de1dca078c02a7c15734", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZWQ2N2Y5NDIyMDM1MWZmYTYwZGUxZGNhMDc4YzAyYTdjMTU3MzQ=", "commit": {"author": {"name": "Matthieu M", "email": "matthieum.147192@gmail.com", "date": "2019-02-09T17:42:34Z"}, "committer": {"name": "Matthieu M", "email": "matthieum.147192@gmail.com", "date": "2019-02-09T17:42:34Z"}, "message": "Fix exhaustion of inclusive range try_fold and try_rfold", "tree": {"sha": "8acf231c15665348ae59f9a49ca38f8b8362842d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8acf231c15665348ae59f9a49ca38f8b8362842d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fed67f94220351ffa60de1dca078c02a7c15734", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fed67f94220351ffa60de1dca078c02a7c15734", "html_url": "https://github.com/rust-lang/rust/commit/4fed67f94220351ffa60de1dca078c02a7c15734", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fed67f94220351ffa60de1dca078c02a7c15734/comments", "author": {"login": "matthieu-m", "id": 2420441, "node_id": "MDQ6VXNlcjI0MjA0NDE=", "avatar_url": "https://avatars.githubusercontent.com/u/2420441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthieu-m", "html_url": "https://github.com/matthieu-m", "followers_url": "https://api.github.com/users/matthieu-m/followers", "following_url": "https://api.github.com/users/matthieu-m/following{/other_user}", "gists_url": "https://api.github.com/users/matthieu-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthieu-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthieu-m/subscriptions", "organizations_url": "https://api.github.com/users/matthieu-m/orgs", "repos_url": "https://api.github.com/users/matthieu-m/repos", "events_url": "https://api.github.com/users/matthieu-m/events{/privacy}", "received_events_url": "https://api.github.com/users/matthieu-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthieu-m", "id": 2420441, "node_id": "MDQ6VXNlcjI0MjA0NDE=", "avatar_url": "https://avatars.githubusercontent.com/u/2420441?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthieu-m", "html_url": "https://github.com/matthieu-m", "followers_url": "https://api.github.com/users/matthieu-m/followers", "following_url": "https://api.github.com/users/matthieu-m/following{/other_user}", "gists_url": "https://api.github.com/users/matthieu-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthieu-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthieu-m/subscriptions", "organizations_url": "https://api.github.com/users/matthieu-m/orgs", "repos_url": "https://api.github.com/users/matthieu-m/repos", "events_url": "https://api.github.com/users/matthieu-m/events{/privacy}", "received_events_url": "https://api.github.com/users/matthieu-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb5b09688696562d08ebb35e34ded723e6e44277", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb5b09688696562d08ebb35e34ded723e6e44277", "html_url": "https://github.com/rust-lang/rust/commit/eb5b09688696562d08ebb35e34ded723e6e44277"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "f0ed88c3dfd858f5881857ab98f33185b8c8d193", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4fed67f94220351ffa60de1dca078c02a7c15734/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fed67f94220351ffa60de1dca078c02a7c15734/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=4fed67f94220351ffa60de1dca078c02a7c15734", "patch": "@@ -389,6 +389,10 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n     {\n         self.compute_is_empty();\n \n+        if self.is_empty() {\n+            return Try::from_ok(init);\n+        }\n+\n         let mut accum = init;\n \n         while self.start < self.end {\n@@ -397,11 +401,12 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n             accum = f(accum, n)?;\n         }\n \n+        self.is_empty = Some(true);\n+\n         if self.start == self.end {\n             accum = f(accum, self.start.clone())?;\n         }\n \n-        self.is_empty = Some(true);\n         Try::from_ok(accum)\n     }\n \n@@ -445,6 +450,10 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n     {\n         self.compute_is_empty();\n \n+        if self.is_empty() {\n+            return Try::from_ok(init);\n+        }\n+\n         let mut accum = init;\n \n         while self.start < self.end {\n@@ -453,11 +462,12 @@ impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n             accum = f(accum, n)?;\n         }\n \n+        self.is_empty = Some(true);\n+\n         if self.start == self.end {\n             accum = f(accum, self.start.clone())?;\n         }\n \n-        self.is_empty = Some(true);\n         Try::from_ok(accum)\n     }\n }"}, {"sha": "89e190e074f1a91aa1db6970d0d5941281624ff0", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4fed67f94220351ffa60de1dca078c02a7c15734/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fed67f94220351ffa60de1dca078c02a7c15734/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=4fed67f94220351ffa60de1dca078c02a7c15734", "patch": "@@ -1738,19 +1738,37 @@ fn test_range_inclusive_folds() {\n     assert_eq!((1..=10).sum::<i32>(), 55);\n     assert_eq!((1..=10).rev().sum::<i32>(), 55);\n \n-    let mut it = 40..=50;\n+    let mut it = 44..=50;\n     assert_eq!(it.try_fold(0, i8::checked_add), None);\n-    assert_eq!(it, 44..=50);\n+    assert_eq!(it, 47..=50);\n+    assert_eq!(it.try_fold(0, i8::checked_add), None);\n+    assert_eq!(it, 50..=50);\n+    assert_eq!(it.try_fold(0, i8::checked_add), Some(50));\n+    assert!(it.is_empty());\n+    assert_eq!(it.try_fold(0, i8::checked_add), Some(0));\n+    assert!(it.is_empty());\n+\n+    let mut it = 40..=47;\n+    assert_eq!(it.try_rfold(0, i8::checked_add), None);\n+    assert_eq!(it, 40..=44);\n     assert_eq!(it.try_rfold(0, i8::checked_add), None);\n-    assert_eq!(it, 44..=47);\n+    assert_eq!(it, 40..=41);\n+    assert_eq!(it.try_rfold(0, i8::checked_add), Some(81));\n+    assert!(it.is_empty());\n+    assert_eq!(it.try_rfold(0, i8::checked_add), Some(0));\n+    assert!(it.is_empty());\n \n     let mut it = 10..=20;\n     assert_eq!(it.try_fold(0, |a,b| Some(a+b)), Some(165));\n     assert!(it.is_empty());\n+    assert_eq!(it.try_fold(0, |a,b| Some(a+b)), Some(0));\n+    assert!(it.is_empty());\n \n     let mut it = 10..=20;\n     assert_eq!(it.try_rfold(0, |a,b| Some(a+b)), Some(165));\n     assert!(it.is_empty());\n+    assert_eq!(it.try_rfold(0, |a,b| Some(a+b)), Some(0));\n+    assert!(it.is_empty());\n }\n \n #[test]"}]}