{"sha": "661cc7f0c865bad772fda41647219e47ad113d3c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2MWNjN2YwYzg2NWJhZDc3MmZkYTQxNjQ3MjE5ZTQ3YWQxMTNkM2M=", "commit": {"author": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-13T16:31:52Z"}, "committer": {"name": "ivan770", "email": "leshenko.ivan770@gmail.com", "date": "2021-03-13T16:31:52Z"}, "message": "Added both references and original matches to tests", "tree": {"sha": "139f396cbc80485261771f505f2ca1f49405bc30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/139f396cbc80485261771f505f2ca1f49405bc30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/661cc7f0c865bad772fda41647219e47ad113d3c", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEcPkYW+t8+2SKgl5T2MS9WuTZzE0FAmBM6PgACgkQ2MS9WuTZ\nzE1oWggAtpTGaM/oOhY4TunaFg5/jeg31C6eQa/UTeHBSvRr7vljz9yrvAWUO/h/\nEmbAfGUG/tZBlDzmlaFi8OO7Zjd2JvFs2GV0jEiQhm9BsLGs/MeKSer9sXrS4B0v\n9hbxskH4olY47ULaN/3z5GRr312OPZYCLcokUel7Qj5WgfZEzczuWAl2OI20+Qba\nXaNrSHWzXUY0R2rTW9xumMhrbJghA4meaZpcXk9Chketgc57WbTTVDyrJIa91n2E\nFhqVbXjz+dQnAtqwtz+uj7pGc2GtFgXoKChWVTnM6PDY871qT8AUPEAWWNaPyOPu\nUuFaqVEMg8UsW2ljrcMMf1w2tkchxg==\n=AWXg\n-----END PGP SIGNATURE-----", "payload": "tree 139f396cbc80485261771f505f2ca1f49405bc30\nparent 32ad929b82b64a49c0c4df891967ac82786c6682\nauthor ivan770 <leshenko.ivan770@gmail.com> 1615653112 +0200\ncommitter ivan770 <leshenko.ivan770@gmail.com> 1615653112 +0200\n\nAdded both references and original matches to tests\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/661cc7f0c865bad772fda41647219e47ad113d3c", "html_url": "https://github.com/rust-lang/rust/commit/661cc7f0c865bad772fda41647219e47ad113d3c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/661cc7f0c865bad772fda41647219e47ad113d3c/comments", "author": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ivan770", "id": 14003886, "node_id": "MDQ6VXNlcjE0MDAzODg2", "avatar_url": "https://avatars.githubusercontent.com/u/14003886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ivan770", "html_url": "https://github.com/ivan770", "followers_url": "https://api.github.com/users/ivan770/followers", "following_url": "https://api.github.com/users/ivan770/following{/other_user}", "gists_url": "https://api.github.com/users/ivan770/gists{/gist_id}", "starred_url": "https://api.github.com/users/ivan770/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ivan770/subscriptions", "organizations_url": "https://api.github.com/users/ivan770/orgs", "repos_url": "https://api.github.com/users/ivan770/repos", "events_url": "https://api.github.com/users/ivan770/events{/privacy}", "received_events_url": "https://api.github.com/users/ivan770/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32ad929b82b64a49c0c4df891967ac82786c6682", "url": "https://api.github.com/repos/rust-lang/rust/commits/32ad929b82b64a49c0c4df891967ac82786c6682", "html_url": "https://github.com/rust-lang/rust/commit/32ad929b82b64a49c0c4df891967ac82786c6682"}], "stats": {"total": 76, "additions": 42, "deletions": 34}, "files": [{"sha": "ede4aa807cfa21fceaea65978522f97a24a6c62f", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 42, "deletions": 34, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/661cc7f0c865bad772fda41647219e47ad113d3c/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/661cc7f0c865bad772fda41647219e47ad113d3c/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=661cc7f0c865bad772fda41647219e47ad113d3c", "patch": "@@ -343,7 +343,6 @@ mod tests {\n     use std::cmp::Reverse;\n \n     use expect_test::{expect, Expect};\n-    use hir::Mutability;\n \n     use crate::{\n         test_utils::{check_edit, do_completion, get_all_items, TEST_CONFIG},\n@@ -367,33 +366,39 @@ mod tests {\n             }\n         }\n \n-        fn display_label(label: &str, mutability: Option<Mutability>) -> String {\n-            let mutability_label = match mutability {\n-                Some(Mutability::Shared) => \"&\",\n-                Some(Mutability::Mut) => \"&mut \",\n-                None => \"\",\n-            };\n-\n-            format!(\"{}{}\", mutability_label, label)\n-        }\n-\n         let mut completions = get_all_items(TEST_CONFIG, ra_fixture);\n         completions.sort_by_key(|it| {\n-            (Reverse(it.ref_match().map(|m| m.1).unwrap_or(it.relevance())), it.label().to_string())\n+            // (Reverse(it.ref_match().map(|m| m.1).unwrap_or(it.relevance())), it.label().to_string())\n+            if let Some((mutability, relevance)) = it.ref_match() {\n+                let label = format!(\"&{}{}\", mutability.as_keyword_for_ref(), it.label());\n+\n+                Reverse((relevance, label))\n+            } else {\n+                Reverse((it.relevance(), it.label().to_string()))\n+            }\n         });\n+\n         let actual = completions\n             .into_iter()\n             .filter(|it| it.completion_kind == CompletionKind::Reference)\n-            .map(|it| {\n+            .flat_map(|it| {\n+                let mut items = vec![];\n+\n                 let tag = it.kind().unwrap().tag();\n-                let (mutability, relevance) = it\n-                    .ref_match()\n-                    .map(|(mutability, relevance)| (Some(mutability), relevance))\n-                    .unwrap_or((None, it.relevance()));\n-                let relevance = display_relevance(relevance);\n-                format!(\"{} {} {}\\n\", tag, display_label(it.label(), mutability), relevance)\n+                let relevance = display_relevance(it.relevance());\n+                items.push(format!(\"{} {} {}\\n\", tag, it.label(), relevance));\n+\n+                if let Some((mutability, relevance)) = it.ref_match() {\n+                    let label = format!(\"&{}{}\", mutability.as_keyword_for_ref(), it.label());\n+                    let relevance = display_relevance(relevance);\n+\n+                    items.push(format!(\"{} {} {}\\n\", tag, label, relevance));\n+                }\n+\n+                items\n             })\n             .collect::<String>();\n+\n         expect.assert_eq(&actual);\n     }\n \n@@ -898,8 +903,8 @@ fn foo(a: A) { B { bar: f(a.$0) }; }\n \"#,\n             expect![[r#\"\n                 fd foo [type+name]\n-                fd bar []\n                 fd baz []\n+                fd bar []\n             \"#]],\n         );\n         check_relevance(\n@@ -925,9 +930,10 @@ struct WorldSnapshot { _f: () };\n fn go(world: &WorldSnapshot) { go(w$0) }\n \"#,\n             expect![[r#\"\n+                lc world [type+name]\n                 lc &world [type+name]\n-                st WorldSnapshot []\n                 fn go(\u2026) []\n+                st WorldSnapshot []\n             \"#]],\n         );\n     }\n@@ -940,9 +946,9 @@ struct Foo;\n fn f(foo: &Foo) { f(foo, w$0) }\n \"#,\n             expect![[r#\"\n-                st Foo []\n-                fn f(\u2026) []\n                 lc foo []\n+                fn f(\u2026) []\n+                st Foo []\n             \"#]],\n         );\n     }\n@@ -1044,13 +1050,14 @@ fn main() {\n }\n             \"#,\n             expect![[r#\"\n+                lc t []\n                 lc &t [type]\n-                tt Deref []\n-                st S []\n-                st T []\n-                fn foo(\u2026) []\n-                lc m []\n                 fn main() []\n+                lc m []\n+                fn foo(\u2026) []\n+                st T []\n+                st S []\n+                tt Deref []\n             \"#]],\n         )\n     }\n@@ -1097,14 +1104,15 @@ fn main() {\n }\n             \"#,\n             expect![[r#\"\n+                lc t []\n                 lc &mut t [type]\n-                tt Deref []\n-                tt DerefMut []\n-                st S []\n-                st T []\n-                fn foo(\u2026) []\n-                lc m []\n                 fn main() []\n+                lc m []\n+                fn foo(\u2026) []\n+                st T []\n+                st S []\n+                tt DerefMut []\n+                tt Deref []\n             \"#]],\n         )\n     }"}]}