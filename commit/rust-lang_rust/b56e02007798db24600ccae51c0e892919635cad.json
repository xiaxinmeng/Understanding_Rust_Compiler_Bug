{"sha": "b56e02007798db24600ccae51c0e892919635cad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1NmUwMjAwNzc5OGRiMjQ2MDBjY2FlNTFjMGU4OTI5MTk2MzVjYWQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-19T15:53:41Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-19T15:53:41Z"}, "message": "Apply couple of rule of thumbs to simplify highlighting code\n\nMain one: instead of adding a parameter to function to handle special\ncase, make the caller handle it.\n\nSecond main one: make sure that function does a reasonable thing.\n`highlight_def` picks  a color for def, *regardless* of the context\nthe def is use. Feeding an info from the call-site muddies the\nresponsibilities here.\n\nMinor smells, flagging the function as having space for improvement in\nthe first place:\n\n* many parameters, some of which are set as constants on most\ncall-sites (introduce severalfunction instad)\n* boolean param (add two functions instead)", "tree": {"sha": "100c26d33895d03ecf2ea03659657d4904e8f130", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/100c26d33895d03ecf2ea03659657d4904e8f130"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b56e02007798db24600ccae51c0e892919635cad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b56e02007798db24600ccae51c0e892919635cad", "html_url": "https://github.com/rust-lang/rust/commit/b56e02007798db24600ccae51c0e892919635cad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b56e02007798db24600ccae51c0e892919635cad/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11a1bb1c3ec02456813ccb5cb0bdb76f9d39b2ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/11a1bb1c3ec02456813ccb5cb0bdb76f9d39b2ec", "html_url": "https://github.com/rust-lang/rust/commit/11a1bb1c3ec02456813ccb5cb0bdb76f9d39b2ec"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "db8aaed48c9c68a607339fb340febc7d37b990bb", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b56e02007798db24600ccae51c0e892919635cad/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b56e02007798db24600ccae51c0e892919635cad/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=b56e02007798db24600ccae51c0e892919635cad", "patch": "@@ -484,9 +484,9 @@ fn highlight_element(\n             match name_kind {\n                 Some(NameClass::ExternCrate(_)) => HighlightTag::Module.into(),\n                 Some(NameClass::Definition(def)) => {\n-                    highlight_def(sema, db, def, None, false) | HighlightModifier::Definition\n+                    highlight_def(sema, db, def, None) | HighlightModifier::Definition\n                 }\n-                Some(NameClass::ConstReference(def)) => highlight_def(sema, db, def, None, false),\n+                Some(NameClass::ConstReference(def)) => highlight_def(sema, db, def, None),\n                 Some(NameClass::FieldShorthand { field, .. }) => {\n                     let mut h = HighlightTag::Field.into();\n                     if let Definition::Field(field) = field {\n@@ -519,13 +519,20 @@ fn highlight_element(\n                                     binding_hash = Some(calc_binding_hash(&name, *shadow_count))\n                                 }\n                             };\n-                            let possibly_unsafe = match name_ref.syntax().parent() {\n-                                Some(parent) => {\n-                                    matches!(parent.kind(), FIELD_EXPR | RECORD_PAT_FIELD)\n+\n+                            let mut h = highlight_def(sema, db, def, Some(name_ref.clone()));\n+\n+                            if let Some(parent) = name_ref.syntax().parent() {\n+                                if matches!(parent.kind(), FIELD_EXPR | RECORD_PAT_FIELD) {\n+                                    if let Definition::Field(field) = def {\n+                                        if let VariantDef::Union(_) = field.parent_def(db) {\n+                                            h |= HighlightModifier::Unsafe;\n+                                        }\n+                                    }\n                                 }\n-                                None => false,\n-                            };\n-                            highlight_def(sema, db, def, Some(name_ref), possibly_unsafe)\n+                            }\n+\n+                            h\n                         }\n                         NameRefClass::FieldShorthand { .. } => HighlightTag::Field.into(),\n                     },\n@@ -734,20 +741,10 @@ fn highlight_def(\n     db: &RootDatabase,\n     def: Definition,\n     name_ref: Option<ast::NameRef>,\n-    possibly_unsafe: bool,\n ) -> Highlight {\n     match def {\n         Definition::Macro(_) => HighlightTag::Macro,\n-        Definition::Field(field) => {\n-            let mut h = HighlightTag::Field.into();\n-            if possibly_unsafe {\n-                if let VariantDef::Union(_) = field.parent_def(db) {\n-                    h |= HighlightModifier::Unsafe;\n-                }\n-            }\n-\n-            return h;\n-        }\n+        Definition::Field(_) => HighlightTag::Field,\n         Definition::ModuleDef(def) => match def {\n             hir::ModuleDef::Module(_) => HighlightTag::Module,\n             hir::ModuleDef::Function(func) => {"}]}