{"sha": "6d186ec3beff14bc161d1c7b7c98b412c4f833d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMTg2ZWMzYmVmZjE0YmMxNjFkMWM3YjdjOThiNDEyYzRmODMzZDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-24T10:41:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-10-24T10:41:25Z"}, "message": "add search scope stuct", "tree": {"sha": "948bfd9f761a16d8843ca7e4701f543cd00117f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/948bfd9f761a16d8843ca7e4701f543cd00117f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d186ec3beff14bc161d1c7b7c98b412c4f833d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d186ec3beff14bc161d1c7b7c98b412c4f833d9", "html_url": "https://github.com/rust-lang/rust/commit/6d186ec3beff14bc161d1c7b7c98b412c4f833d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d186ec3beff14bc161d1c7b7c98b412c4f833d9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "018b621f613e87af26d8f7880ea1012cb374216c", "url": "https://api.github.com/repos/rust-lang/rust/commits/018b621f613e87af26d8f7880ea1012cb374216c", "html_url": "https://github.com/rust-lang/rust/commit/018b621f613e87af26d8f7880ea1012cb374216c"}], "stats": {"total": 43, "additions": 30, "deletions": 13}, "files": [{"sha": "1c4fb742fecba4d50df8e510caf3527f97d1f471", "filename": "crates/ra_ide_api/src/references/search_scope.rs", "status": "modified", "additions": 30, "deletions": 13, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6d186ec3beff14bc161d1c7b7c98b412c4f833d9/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d186ec3beff14bc161d1c7b7c98b412c4f833d9/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=6d186ec3beff14bc161d1c7b7c98b412c4f833d9", "patch": "@@ -13,8 +13,26 @@ use crate::db::RootDatabase;\n \n use super::{NameDefinition, NameKind};\n \n+pub struct SearchScope {\n+    entries: FxHashSet<(FileId, Option<TextRange>)>,\n+}\n+\n+impl SearchScope {\n+    fn new(entries: FxHashSet<(FileId, Option<TextRange>)>) -> SearchScope {\n+        SearchScope { entries }\n+    }\n+}\n+\n+impl IntoIterator for SearchScope {\n+    type Item = (FileId, Option<TextRange>);\n+    type IntoIter = std::collections::hash_set::IntoIter<Self::Item>;\n+    fn into_iter(self) -> Self::IntoIter {\n+        self.entries.into_iter()\n+    }\n+}\n+\n impl NameDefinition {\n-    pub(crate) fn search_scope(&self, db: &RootDatabase) -> FxHashSet<(FileId, Option<TextRange>)> {\n+    pub(crate) fn search_scope(&self, db: &RootDatabase) -> SearchScope {\n         let _p = profile(\"search_scope\");\n \n         let module_src = self.container.definition_source(db);\n@@ -28,45 +46,44 @@ impl NameDefinition {\n                 DefWithBody::Static(s) => s.source(db).ast.syntax().text_range(),\n             };\n             res.insert((file_id, Some(range)));\n-            return res;\n+            return SearchScope::new(res);\n         }\n \n         let vis =\n             self.visibility.as_ref().map(|v| v.syntax().to_string()).unwrap_or(\"\".to_string());\n \n         if vis.as_str() == \"pub(super)\" {\n             if let Some(parent_module) = self.container.parent(db) {\n-                let mut files = FxHashSet::default();\n+                let mut res = FxHashSet::default();\n                 let parent_src = parent_module.definition_source(db);\n                 let file_id = parent_src.file_id.original_file(db);\n \n                 match parent_src.ast {\n                     ModuleSource::Module(m) => {\n                         let range = Some(m.syntax().text_range());\n-                        files.insert((file_id, range));\n+                        res.insert((file_id, range));\n                     }\n                     ModuleSource::SourceFile(_) => {\n-                        files.insert((file_id, None));\n-                        files.extend(parent_module.children(db).map(|m| {\n+                        res.insert((file_id, None));\n+                        res.extend(parent_module.children(db).map(|m| {\n                             let src = m.definition_source(db);\n                             (src.file_id.original_file(db), None)\n                         }));\n                     }\n                 }\n-                return files;\n+                return SearchScope::new(res);\n             }\n         }\n \n         if vis.as_str() != \"\" {\n             let source_root_id = db.file_source_root(file_id);\n             let source_root = db.source_root(source_root_id);\n-            let mut files =\n-                source_root.walk().map(|id| (id.into(), None)).collect::<FxHashSet<_>>();\n+            let mut res = source_root.walk().map(|id| (id.into(), None)).collect::<FxHashSet<_>>();\n \n             // FIXME: add \"pub(in path)\"\n \n             if vis.as_str() == \"pub(crate)\" {\n-                return files;\n+                return SearchScope::new(res);\n             }\n             if vis.as_str() == \"pub\" {\n                 let krate = self.container.krate(db).unwrap();\n@@ -77,10 +94,10 @@ impl NameDefinition {\n                         let root_file = crate_graph.crate_root(crate_id);\n                         let source_root_id = db.file_source_root(root_file);\n                         let source_root = db.source_root(source_root_id);\n-                        files.extend(source_root.walk().map(|id| (id.into(), None)));\n+                        res.extend(source_root.walk().map(|id| (id.into(), None)));\n                     }\n                 }\n-                return files;\n+                return SearchScope::new(res);\n             }\n         }\n \n@@ -90,6 +107,6 @@ impl NameDefinition {\n             ModuleSource::SourceFile(_) => None,\n         };\n         res.insert((file_id, range));\n-        res\n+        SearchScope::new(res)\n     }\n }"}]}