{"sha": "903d815228d6d3a0afdce19defe5beafe9b039da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwM2Q4MTUyMjhkNmQzYTBhZmRjZTE5ZGVmZTViZWFmZTliMDM5ZGE=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-06T10:30:51Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-09-06T10:30:51Z"}, "message": "Clean up", "tree": {"sha": "c653b536a9278dc36e867506f6e460319dfd1f29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c653b536a9278dc36e867506f6e460319dfd1f29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/903d815228d6d3a0afdce19defe5beafe9b039da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/903d815228d6d3a0afdce19defe5beafe9b039da", "html_url": "https://github.com/rust-lang/rust/commit/903d815228d6d3a0afdce19defe5beafe9b039da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/903d815228d6d3a0afdce19defe5beafe9b039da/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4dbda0662964e02e02c2b1891cd1332966fef658", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dbda0662964e02e02c2b1891cd1332966fef658", "html_url": "https://github.com/rust-lang/rust/commit/4dbda0662964e02e02c2b1891cd1332966fef658"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "aff768f450c026fbf1df2a466f83d977a8a584c8", "filename": "src/visitor.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/903d815228d6d3a0afdce19defe5beafe9b039da/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/903d815228d6d3a0afdce19defe5beafe9b039da/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=903d815228d6d3a0afdce19defe5beafe9b039da", "patch": "@@ -22,8 +22,9 @@ use comment::{contains_comment, recover_missing_comment_in_span, CodeCharKind, C\n               FindUncommented};\n use comment::rewrite_comment;\n use config::{BraceStyle, Config};\n-use items::{format_impl, format_trait, rewrite_associated_impl_type, rewrite_associated_type,\n-            rewrite_static, rewrite_type_alias};\n+use items::{format_impl, format_struct, format_struct_struct, format_trait,\n+            rewrite_associated_impl_type, rewrite_associated_type, rewrite_static,\n+            rewrite_type_alias};\n use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorPlace,\n             SeparatorTactic};\n use macros::{rewrite_macro, MacroPosition};\n@@ -361,22 +362,20 @@ impl<'a> FmtVisitor<'a> {\n                 self.push_rewrite(item.span, rw);\n             }\n             ast::ItemKind::Struct(ref def, ref generics) => {\n-                let rewrite = {\n-                    ::items::format_struct(\n-                        &self.get_context(),\n-                        \"struct \",\n-                        item.ident,\n-                        &item.vis,\n-                        def,\n-                        Some(generics),\n-                        item.span,\n-                        self.block_indent,\n-                        None,\n-                    ).map(|s| match *def {\n-                        ast::VariantData::Tuple(..) => s + \";\",\n-                        _ => s,\n-                    })\n-                };\n+                let rewrite = format_struct(\n+                    &self.get_context(),\n+                    \"struct \",\n+                    item.ident,\n+                    &item.vis,\n+                    def,\n+                    Some(generics),\n+                    item.span,\n+                    self.block_indent,\n+                    None,\n+                ).map(|s| match *def {\n+                    ast::VariantData::Tuple(..) => s + \";\",\n+                    _ => s,\n+                });\n                 self.push_rewrite(item.span, rewrite);\n             }\n             ast::ItemKind::Enum(ref def, ref generics) => {\n@@ -457,7 +456,7 @@ impl<'a> FmtVisitor<'a> {\n                 self.push_rewrite(item.span, rewrite);\n             }\n             ast::ItemKind::Union(ref def, ref generics) => {\n-                let rewrite = ::items::format_struct_struct(\n+                let rewrite = format_struct_struct(\n                     &self.get_context(),\n                     \"union \",\n                     item.ident,"}]}