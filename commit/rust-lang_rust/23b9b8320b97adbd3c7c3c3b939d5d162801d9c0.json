{"sha": "23b9b8320b97adbd3c7c3c3b939d5d162801d9c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzYjliODMyMGI5N2FkYmQzYzdjM2MzYjkzOWQ1ZDE2MjgwMWQ5YzA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-29T06:15:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-29T06:15:51Z"}, "message": "Rollup merge of #60555 - timvermeulen:rchunks_nth_back, r=scottmcm\n\nImplement nth_back for RChunks(Exact)(Mut)\n\nPart of #54054.\n\nThese implementations may not be optimal because of the use of `self.len()`, but it's quite cheap and simplifies the code a lot.\n\nThere's quite some duplication going on here, I wouldn't mind cleaning this up later. A good next step would probably be to add private `split_off_up_to`/`split_off_from` helper methods for slices since their behavior is commonly useful throughout the `Chunks` types.\n\nr? @scottmcm", "tree": {"sha": "3a940440fd604d12df0eec8aded5bbf5054516ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a940440fd604d12df0eec8aded5bbf5054516ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/23b9b8320b97adbd3c7c3c3b939d5d162801d9c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc7iOXCRBK7hj4Ov3rIwAAdHIIACyC0wBX2J4b0BvFsjBMLfXv\nE+e/5IjgMC5FuoZ9F4uvm3g3LHkOMOAF1cbdxSNs/16JiQaMOhKUY/QlkeEqoyJB\nlSKGUPMoq0Z5APII53Xg2yJ24BaGhoC56XZp3CiAf131nDcwEnBufivOeWqerOrD\nntfSLkwNaks2douNcGQXaOlAQi5Hn3hcHZgxSsAzbQl+yvp+d7PVMwU43AgBPOAu\ng47nEra6+1uicK3v0Z5aDeF1whqgJ+iyhYr7dA7fNrgeJya1kyCMXXqY2Y2Oh+gf\nVvd2hZKrjcxf6Bfun+ufq9CY/2jCjZ4AG5hHiy0cWyhOeqTEuJp1rp3qsWg9OjM=\n=F40g\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a940440fd604d12df0eec8aded5bbf5054516ea\nparent 61545b697568a9e590e89585961b5f78b3a7df53\nparent 5eb0e08d0feab69f9e5f3b6881bde328a9105c96\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559110551 +0200\ncommitter GitHub <noreply@github.com> 1559110551 +0200\n\nRollup merge of #60555 - timvermeulen:rchunks_nth_back, r=scottmcm\n\nImplement nth_back for RChunks(Exact)(Mut)\n\nPart of #54054.\n\nThese implementations may not be optimal because of the use of `self.len()`, but it's quite cheap and simplifies the code a lot.\n\nThere's quite some duplication going on here, I wouldn't mind cleaning this up later. A good next step would probably be to add private `split_off_up_to`/`split_off_from` helper methods for slices since their behavior is commonly useful throughout the `Chunks` types.\n\nr? @scottmcm\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/23b9b8320b97adbd3c7c3c3b939d5d162801d9c0", "html_url": "https://github.com/rust-lang/rust/commit/23b9b8320b97adbd3c7c3c3b939d5d162801d9c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/23b9b8320b97adbd3c7c3c3b939d5d162801d9c0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61545b697568a9e590e89585961b5f78b3a7df53", "url": "https://api.github.com/repos/rust-lang/rust/commits/61545b697568a9e590e89585961b5f78b3a7df53", "html_url": "https://github.com/rust-lang/rust/commit/61545b697568a9e590e89585961b5f78b3a7df53"}, {"sha": "5eb0e08d0feab69f9e5f3b6881bde328a9105c96", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eb0e08d0feab69f9e5f3b6881bde328a9105c96", "html_url": "https://github.com/rust-lang/rust/commit/5eb0e08d0feab69f9e5f3b6881bde328a9105c96"}], "stats": {"total": 124, "additions": 124, "deletions": 0}, "files": [{"sha": "1c67e750e4022f2804e6ae1f12374b156be93ac1", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/23b9b8320b97adbd3c7c3c3b939d5d162801d9c0/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b9b8320b97adbd3c7c3c3b939d5d162801d9c0/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=23b9b8320b97adbd3c7c3c3b939d5d162801d9c0", "patch": "@@ -4649,6 +4649,23 @@ impl<'a, T> DoubleEndedIterator for RChunks<'a, T> {\n             Some(fst)\n         }\n     }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n+        let len = self.len();\n+        if n >= len {\n+            self.v = &[];\n+            None\n+        } else {\n+            // can't underflow because `n < len`\n+            let offset_from_end = (len - 1 - n) * self.chunk_size;\n+            let end = self.v.len() - offset_from_end;\n+            let start = end.saturating_sub(self.chunk_size);\n+            let nth_back = &self.v[start..end];\n+            self.v = &self.v[end..];\n+            Some(nth_back)\n+        }\n+    }\n }\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -4774,6 +4791,24 @@ impl<'a, T> DoubleEndedIterator for RChunksMut<'a, T> {\n             Some(head)\n         }\n     }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n+        let len = self.len();\n+        if n >= len {\n+            self.v = &mut [];\n+            None\n+        } else {\n+            // can't underflow because `n < len`\n+            let offset_from_end = (len - 1 - n) * self.chunk_size;\n+            let end = self.v.len() - offset_from_end;\n+            let start = end.saturating_sub(self.chunk_size);\n+            let (tmp, tail) = mem::replace(&mut self.v, &mut []).split_at_mut(end);\n+            let (_, nth_back) = tmp.split_at_mut(start);\n+            self.v = tail;\n+            Some(nth_back)\n+        }\n+    }\n }\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -4898,6 +4933,24 @@ impl<'a, T> DoubleEndedIterator for RChunksExact<'a, T> {\n             Some(fst)\n         }\n     }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n+        let len = self.len();\n+        if n >= len {\n+            self.v = &[];\n+            None\n+        } else {\n+            // now that we know that `n` corresponds to a chunk,\n+            // none of these operations can underflow/overflow\n+            let offset = (len - n) * self.chunk_size;\n+            let start = self.v.len() - offset;\n+            let end = start + self.chunk_size;\n+            let nth_back = &self.v[start..end];\n+            self.v = &self.v[end..];\n+            Some(nth_back)\n+        }\n+    }\n }\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n@@ -5016,6 +5069,25 @@ impl<'a, T> DoubleEndedIterator for RChunksExactMut<'a, T> {\n             Some(head)\n         }\n     }\n+\n+    #[inline]\n+    fn nth_back(&mut self, n: usize) -> Option<Self::Item> {\n+        let len = self.len();\n+        if n >= len {\n+            self.v = &mut [];\n+            None\n+        } else {\n+            // now that we know that `n` corresponds to a chunk,\n+            // none of these operations can underflow/overflow\n+            let offset = (len - n) * self.chunk_size;\n+            let start = self.v.len() - offset;\n+            let end = start + self.chunk_size;\n+            let (tmp, tail) = mem::replace(&mut self.v, &mut []).split_at_mut(end);\n+            let (_, nth_back) = tmp.split_at_mut(start);\n+            self.v = tail;\n+            Some(nth_back)\n+        }\n+    }\n }\n \n #[stable(feature = \"rchunks\", since = \"1.31.0\")]"}, {"sha": "cd520a052a0059a30c36221503d650d954eaf9f5", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/23b9b8320b97adbd3c7c3c3b939d5d162801d9c0/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/23b9b8320b97adbd3c7c3c3b939d5d162801d9c0/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=23b9b8320b97adbd3c7c3c3b939d5d162801d9c0", "patch": "@@ -356,6 +356,19 @@ fn test_rchunks_nth() {\n     assert_eq!(c2.next(), None);\n }\n \n+#[test]\n+fn test_rchunks_nth_back() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let mut c = v.rchunks(2);\n+    assert_eq!(c.nth_back(1).unwrap(), &[2, 3]);\n+    assert_eq!(c.next_back().unwrap(), &[4, 5]);\n+\n+    let v2: &[i32] = &[0, 1, 2, 3, 4];\n+    let mut c2 = v2.rchunks(3);\n+    assert_eq!(c2.nth_back(1).unwrap(), &[2, 3, 4]);\n+    assert_eq!(c2.next_back(), None);\n+}\n+\n #[test]\n fn test_rchunks_last() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n@@ -407,6 +420,19 @@ fn test_rchunks_mut_nth() {\n     assert_eq!(c2.next(), None);\n }\n \n+#[test]\n+fn test_rchunks_mut_nth_back() {\n+    let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n+    let mut c = v.rchunks_mut(2);\n+    assert_eq!(c.nth_back(1).unwrap(), &[2, 3]);\n+    assert_eq!(c.next_back().unwrap(), &[4, 5]);\n+\n+    let v2: &mut [i32] = &mut [0, 1, 2, 3, 4];\n+    let mut c2 = v2.rchunks_mut(3);\n+    assert_eq!(c2.nth_back(1).unwrap(), &[2, 3, 4]);\n+    assert_eq!(c2.next_back(), None);\n+}\n+\n #[test]\n fn test_rchunks_mut_last() {\n     let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n@@ -460,6 +486,19 @@ fn test_rchunks_exact_nth() {\n     assert_eq!(c2.next(), None);\n }\n \n+#[test]\n+fn test_rchunks_exact_nth_back() {\n+    let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n+    let mut c = v.rchunks_exact(2);\n+    assert_eq!(c.nth_back(1).unwrap(), &[2, 3]);\n+    assert_eq!(c.next_back().unwrap(), &[4, 5]);\n+\n+    let v2: &[i32] = &[0, 1, 2, 3, 4, 5, 6];\n+    let mut c2 = v2.rchunks_exact(3);\n+    assert_eq!(c2.nth_back(1).unwrap(), &[4, 5, 6]);\n+    assert_eq!(c2.next(), None);\n+}\n+\n #[test]\n fn test_rchunks_exact_last() {\n     let v: &[i32] = &[0, 1, 2, 3, 4, 5];\n@@ -518,6 +557,19 @@ fn test_rchunks_exact_mut_nth() {\n     assert_eq!(c2.next(), None);\n }\n \n+#[test]\n+fn test_rchunks_exact_mut_nth_back() {\n+    let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];\n+    let mut c = v.rchunks_exact_mut(2);\n+    assert_eq!(c.nth_back(1).unwrap(), &[2, 3]);\n+    assert_eq!(c.next_back().unwrap(), &[4, 5]);\n+\n+    let v2: &mut [i32] = &mut [0, 1, 2, 3, 4, 5, 6];\n+    let mut c2 = v2.rchunks_exact_mut(3);\n+    assert_eq!(c2.nth_back(1).unwrap(), &[4, 5, 6]);\n+    assert_eq!(c2.next(), None);\n+}\n+\n #[test]\n fn test_rchunks_exact_mut_last() {\n     let v: &mut [i32] = &mut [0, 1, 2, 3, 4, 5];"}]}