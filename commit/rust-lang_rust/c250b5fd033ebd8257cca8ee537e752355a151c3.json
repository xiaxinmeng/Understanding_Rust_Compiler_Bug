{"sha": "c250b5fd033ebd8257cca8ee537e752355a151c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNTBiNWZkMDMzZWJkODI1N2NjYThlZTUzN2U3NTIzNTVhMTUxYzM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-10T22:27:17Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-08-11T14:36:46Z"}, "message": "Remove fmt::Display impls on Markdown structs\n\nThese impls prevent ergonomic use of the config (e.g., forcing us to use\nRefCell) despite all usecases for these structs only using their Display\nimpls once.", "tree": {"sha": "1edf97de939a736831aa0f50986cf14077726956", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1edf97de939a736831aa0f50986cf14077726956"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c250b5fd033ebd8257cca8ee537e752355a151c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c250b5fd033ebd8257cca8ee537e752355a151c3", "html_url": "https://github.com/rust-lang/rust/commit/c250b5fd033ebd8257cca8ee537e752355a151c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c250b5fd033ebd8257cca8ee537e752355a151c3/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbad77ffdd59e54b3f496cfbdb7909a6bbd03031", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031", "html_url": "https://github.com/rust-lang/rust/commit/dbad77ffdd59e54b3f496cfbdb7909a6bbd03031"}], "stats": {"total": 73, "additions": 34, "deletions": 39}, "files": [{"sha": "5d953eec31ec36eeba4ffc15f7177948da79d135", "filename": "src/librustdoc/externalfiles.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c250b5fd033ebd8257cca8ee537e752355a151c3/src%2Flibrustdoc%2Fexternalfiles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250b5fd033ebd8257cca8ee537e752355a151c3/src%2Flibrustdoc%2Fexternalfiles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fexternalfiles.rs?ref=c250b5fd033ebd8257cca8ee537e752355a151c3", "patch": "@@ -36,7 +36,7 @@ impl ExternalHtml {\n                 load_external_files(md_before_content, diag)\n                     .map(|m_bc| (ih,\n                             format!(\"{}{}\", bc, Markdown(&m_bc, &[], RefCell::new(id_map),\n-                                    codes, edition, playground))))\n+                                    codes, edition, playground).to_string())))\n             )\n             .and_then(|(ih, bc)|\n                 load_external_files(after_content, diag)\n@@ -46,7 +46,7 @@ impl ExternalHtml {\n                 load_external_files(md_after_content, diag)\n                     .map(|m_ac| (ih, bc,\n                             format!(\"{}{}\", ac, Markdown(&m_ac, &[], RefCell::new(id_map),\n-                                    codes, edition, playground))))\n+                                    codes, edition, playground).to_string())))\n             )\n             .map(|(ih, bc, ac)|\n                 ExternalHtml {"}, {"sha": "753832305f9ea01584ecb78eb2e16ce30cea06d8", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c250b5fd033ebd8257cca8ee537e752355a151c3/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250b5fd033ebd8257cca8ee537e752355a151c3/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=c250b5fd033ebd8257cca8ee537e752355a151c3", "patch": "@@ -1,9 +1,6 @@\n //! Markdown formatting for rustdoc.\n //!\n-//! This module implements markdown formatting through the pulldown-cmark\n-//! rust-library. This module exposes all of the\n-//! functionality through a unit struct, `Markdown`, which has an implementation\n-//! of `fmt::Display`. Example usage:\n+//! This module implements markdown formatting through the pulldown-cmark library.\n //!\n //! ```\n //! #![feature(rustc_private)]\n@@ -16,8 +13,9 @@\n //!\n //! let s = \"My *markdown* _text_\";\n //! let mut id_map = IdMap::new();\n-//! let html = format!(\"{}\", Markdown(s, &[], RefCell::new(&mut id_map),\n-//!                                   ErrorCodes::Yes, Edition::Edition2015, None));\n+//! let md = Markdown(s, &[], RefCell::new(&mut id_map),\n+//!                                   ErrorCodes::Yes, Edition::Edition2015, None);\n+//! let html = md.to_string();\n //! // ... something using html\n //! ```\n \n@@ -27,7 +25,7 @@ use rustc_data_structures::fx::FxHashMap;\n use std::cell::RefCell;\n use std::collections::VecDeque;\n use std::default::Default;\n-use std::fmt::{self, Write};\n+use std::fmt::Write;\n use std::borrow::Cow;\n use std::ops::Range;\n use std::str;\n@@ -46,9 +44,8 @@ fn opts() -> Options {\n     Options::ENABLE_TABLES | Options::ENABLE_FOOTNOTES\n }\n \n-/// A tuple struct that has the `fmt::Display` trait implemented.\n-/// When formatted, this struct will emit the HTML corresponding to the rendered\n-/// version of the contained markdown string.\n+/// When `to_string` is called, this struct will emit the HTML corresponding to\n+/// the rendered version of the contained markdown string.\n pub struct Markdown<'a>(\n     pub &'a str,\n     /// A list of link replacements.\n@@ -691,13 +688,13 @@ impl LangString {\n     }\n }\n \n-impl<'a> fmt::Display for Markdown<'a> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let Markdown(md, links, ref ids, codes, edition, playground) = *self;\n+impl Markdown<'_> {\n+    pub fn to_string(self) -> String {\n+        let Markdown(md, links, ids, codes, edition, playground) = self;\n         let mut ids = ids.borrow_mut();\n \n         // This is actually common enough to special-case\n-        if md.is_empty() { return Ok(()) }\n+        if md.is_empty() { return String::new(); }\n         let replacer = |_: &str, s: &str| {\n             if let Some(&(_, ref replace)) = links.into_iter().find(|link| &*link.0 == s) {\n                 Some((replace.clone(), s.to_owned()))\n@@ -716,13 +713,13 @@ impl<'a> fmt::Display for Markdown<'a> {\n         let p = Footnotes::new(p);\n         html::push_html(&mut s, p);\n \n-        fmt.write_str(&s)\n+        s\n     }\n }\n \n-impl<'a> fmt::Display for MarkdownWithToc<'a> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let MarkdownWithToc(md, ref ids, codes, edition, playground) = *self;\n+impl MarkdownWithToc<'_> {\n+    pub fn to_string(self) -> String {\n+        let MarkdownWithToc(md, ref ids, codes, edition, playground) = self;\n         let mut ids = ids.borrow_mut();\n \n         let p = Parser::new_ext(md, opts());\n@@ -738,19 +735,17 @@ impl<'a> fmt::Display for MarkdownWithToc<'a> {\n             html::push_html(&mut s, p);\n         }\n \n-        write!(fmt, \"<nav id=\\\"TOC\\\">{}</nav>\", toc.into_toc())?;\n-\n-        fmt.write_str(&s)\n+        format!(\"<nav id=\\\"TOC\\\">{}</nav>{}\", toc.into_toc(), s)\n     }\n }\n \n-impl<'a> fmt::Display for MarkdownHtml<'a> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let MarkdownHtml(md, ref ids, codes, edition, playground) = *self;\n+impl MarkdownHtml<'_> {\n+    pub fn to_string(self) -> String {\n+        let MarkdownHtml(md, ref ids, codes, edition, playground) = self;\n         let mut ids = ids.borrow_mut();\n \n         // This is actually common enough to special-case\n-        if md.is_empty() { return Ok(()) }\n+        if md.is_empty() { return String::new(); }\n         let p = Parser::new_ext(md, opts());\n \n         // Treat inline HTML as plain text.\n@@ -766,15 +761,15 @@ impl<'a> fmt::Display for MarkdownHtml<'a> {\n         let p = Footnotes::new(p);\n         html::push_html(&mut s, p);\n \n-        fmt.write_str(&s)\n+        s\n     }\n }\n \n-impl<'a> fmt::Display for MarkdownSummaryLine<'a> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let MarkdownSummaryLine(md, links) = *self;\n+impl MarkdownSummaryLine<'_> {\n+    pub fn to_string(self) -> String {\n+        let MarkdownSummaryLine(md, links) = self;\n         // This is actually common enough to special-case\n-        if md.is_empty() { return Ok(()) }\n+        if md.is_empty() { return String::new(); }\n \n         let replacer = |_: &str, s: &str| {\n             if let Some(&(_, ref replace)) = links.into_iter().find(|link| &*link.0 == s) {\n@@ -790,7 +785,7 @@ impl<'a> fmt::Display for MarkdownSummaryLine<'a> {\n \n         html::push_html(&mut s, LinkReplacer::new(SummaryLine::new(p), links));\n \n-        fmt.write_str(&s)\n+        s\n     }\n }\n "}, {"sha": "fc4e25e3d7ff67e9a38b1a41360d784b17c63f69", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c250b5fd033ebd8257cca8ee537e752355a151c3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250b5fd033ebd8257cca8ee537e752355a151c3/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=c250b5fd033ebd8257cca8ee537e752355a151c3", "patch": "@@ -2596,7 +2596,7 @@ fn render_markdown(w: &mut fmt::Formatter<'_>,\n            if is_hidden { \" hidden\" } else { \"\" },\n            prefix,\n            Markdown(md_text, &links, RefCell::new(&mut ids),\n-           cx.codes, cx.edition, &cx.playground))\n+           cx.codes, cx.edition, &cx.playground).to_string())\n }\n \n fn document_short(\n@@ -2866,7 +2866,7 @@ fn item_module(w: &mut fmt::Formatter<'_>, cx: &Context,\n                        </tr>\",\n                        name = *myitem.name.as_ref().unwrap(),\n                        stab_tags = stability_tags(myitem),\n-                       docs = MarkdownSummaryLine(doc_value, &myitem.links()),\n+                       docs = MarkdownSummaryLine(doc_value, &myitem.links()).to_string(),\n                        class = myitem.type_(),\n                        add = add,\n                        stab = stab.unwrap_or_else(|| String::new()),\n@@ -2963,7 +2963,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n             let mut ids = cx.id_map.borrow_mut();\n             let html = MarkdownHtml(\n                 &note, RefCell::new(&mut ids), error_codes, cx.edition, &cx.playground);\n-            message.push_str(&format!(\": {}\", html));\n+            message.push_str(&format!(\": {}\", html.to_string()));\n         }\n         stability.push(format!(\"<div class='stab deprecated'>{}</div>\", message));\n     }\n@@ -3017,7 +3017,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n                     error_codes,\n                     cx.edition,\n                     &cx.playground,\n-                )\n+                ).to_string()\n             );\n         }\n \n@@ -4248,7 +4248,7 @@ fn render_impl(w: &mut fmt::Formatter<'_>, cx: &Context, i: &Impl, link: AssocIt\n             let mut ids = cx.id_map.borrow_mut();\n             write!(w, \"<div class='docblock'>{}</div>\",\n                    Markdown(&*dox, &i.impl_item.links(), RefCell::new(&mut ids),\n-                            cx.codes, cx.edition, &cx.playground))?;\n+                            cx.codes, cx.edition, &cx.playground).to_string())?;\n         }\n     }\n "}, {"sha": "89b545fb7e4134dbddf6a4b1fe513eb2714225fe", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c250b5fd033ebd8257cca8ee537e752355a151c3/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c250b5fd033ebd8257cca8ee537e752355a151c3/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=c250b5fd033ebd8257cca8ee537e752355a151c3", "patch": "@@ -101,7 +101,7 @@ impl Formatter for HTMLFormatter {\n                 };\n                 write!(output, \"{}\",\n                     Markdown(desc, &[], RefCell::new(&mut id_map),\n-                             ErrorCodes::Yes, DEFAULT_EDITION, &Some(playground)))?\n+                             ErrorCodes::Yes, DEFAULT_EDITION, &Some(playground)).to_string())?\n             },\n             None => write!(output, \"<p>No description.</p>\\n\")?,\n         }"}]}