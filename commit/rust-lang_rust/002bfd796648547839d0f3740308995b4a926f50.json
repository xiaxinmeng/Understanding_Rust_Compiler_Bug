{"sha": "002bfd796648547839d0f3740308995b4a926f50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMmJmZDc5NjY0ODU0NzgzOWQwZjM3NDAzMDg5OTViNGE5MjZmNTA=", "commit": {"author": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-12T00:07:57Z"}, "committer": {"name": "Michael Sullivan", "email": "sully@msully.net", "date": "2013-07-18T20:56:15Z"}, "message": "Export information about used default methods instead of regenerating it. Closes #7862.", "tree": {"sha": "7246f701fe535ba330867ae9cb25f512c6c04f45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7246f701fe535ba330867ae9cb25f512c6c04f45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/002bfd796648547839d0f3740308995b4a926f50", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/002bfd796648547839d0f3740308995b4a926f50", "html_url": "https://github.com/rust-lang/rust/commit/002bfd796648547839d0f3740308995b4a926f50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/002bfd796648547839d0f3740308995b4a926f50/comments", "author": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "msullivan", "id": 340349, "node_id": "MDQ6VXNlcjM0MDM0OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/340349?v=4", "gravatar_id": "", "url": "https://api.github.com/users/msullivan", "html_url": "https://github.com/msullivan", "followers_url": "https://api.github.com/users/msullivan/followers", "following_url": "https://api.github.com/users/msullivan/following{/other_user}", "gists_url": "https://api.github.com/users/msullivan/gists{/gist_id}", "starred_url": "https://api.github.com/users/msullivan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/msullivan/subscriptions", "organizations_url": "https://api.github.com/users/msullivan/orgs", "repos_url": "https://api.github.com/users/msullivan/repos", "events_url": "https://api.github.com/users/msullivan/events{/privacy}", "received_events_url": "https://api.github.com/users/msullivan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e714fa8d8d02bf6a892a65a7b91c0e352a285fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e714fa8d8d02bf6a892a65a7b91c0e352a285fd", "html_url": "https://github.com/rust-lang/rust/commit/8e714fa8d8d02bf6a892a65a7b91c0e352a285fd"}], "stats": {"total": 102, "additions": 82, "deletions": 20}, "files": [{"sha": "a77c6c6ab5223bbe855902ec08805ee7ca93a969", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/002bfd796648547839d0f3740308995b4a926f50/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002bfd796648547839d0f3740308995b4a926f50/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=002bfd796648547839d0f3740308995b4a926f50", "patch": "@@ -185,6 +185,12 @@ fn item_def_id(d: ebml::Doc, cdata: cmd) -> ast::def_id {\n     return translate_def_id(cdata, reader::with_doc_data(tagdoc, parse_def_id));\n }\n \n+fn get_provided_source(d: ebml::Doc, cdata: cmd) -> Option<ast::def_id> {\n+    do reader::maybe_get_doc(d, tag_item_method_provided_source).map |doc| {\n+        translate_def_id(cdata, reader::with_doc_data(*doc, parse_def_id))\n+    }\n+}\n+\n fn each_reexport(d: ebml::Doc, f: &fn(ebml::Doc) -> bool) -> bool {\n     for reader::tagged_docs(d, tag_items_data_item_reexport) |reexport_doc| {\n         if !f(reexport_doc) {\n@@ -844,6 +850,7 @@ pub fn get_method(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n     let fty = doc_method_fty(method_doc, tcx, cdata);\n     let vis = item_visibility(method_doc);\n     let explicit_self = get_explicit_self(method_doc);\n+    let provided_source = get_provided_source(method_doc, cdata);\n \n     ty::Method::new(\n         name,\n@@ -857,7 +864,7 @@ pub fn get_method(intr: @ident_interner, cdata: cmd, id: ast::node_id,\n         vis,\n         def_id,\n         container_id,\n-        None\n+        provided_source\n     )\n }\n "}, {"sha": "2ef00a2167f0154dee09801d4049fc218f806936", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 23, "deletions": 5, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/002bfd796648547839d0f3740308995b4a926f50/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002bfd796648547839d0f3740308995b4a926f50/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=002bfd796648547839d0f3740308995b4a926f50", "patch": "@@ -650,6 +650,16 @@ fn encode_method_sort(ebml_w: &mut writer::Encoder, sort: char) {\n     ebml_w.end_tag();\n }\n \n+fn encode_provided_source(ebml_w: &mut writer::Encoder,\n+                          source_opt: Option<def_id>) {\n+    for source_opt.iter().advance |source| {\n+        ebml_w.start_tag(tag_item_method_provided_source);\n+        let s = def_to_str(*source);\n+        ebml_w.writer.write(s.as_bytes());\n+        ebml_w.end_tag();\n+    }\n+}\n+\n /* Returns an index of items in this class */\n fn encode_info_for_struct(ecx: &EncodeContext,\n                           ebml_w: &mut writer::Encoder,\n@@ -726,6 +736,7 @@ fn encode_method_ty_fields(ecx: &EncodeContext,\n         }\n         _ => encode_family(ebml_w, purity_fn_family(purity))\n     }\n+    encode_provided_source(ebml_w, method_ty.provided_source);\n }\n \n fn encode_info_for_method(ecx: &EncodeContext,\n@@ -987,7 +998,6 @@ fn encode_info_for_item(ecx: &EncodeContext,\n             _ => {}\n         }\n         for imp.methods.iter().advance |method| {\n-            if method.provided_source.is_some() { loop; }\n             ebml_w.start_tag(tag_item_impl_method);\n             let s = def_to_str(method.def_id);\n             ebml_w.writer.write(s.as_bytes());\n@@ -1005,16 +1015,24 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         let mut impl_path = vec::append(~[], path);\n         impl_path.push(ast_map::path_name(item.ident));\n \n-        for ast_methods.iter().advance |ast_method| {\n-            let m = ty::method(ecx.tcx, local_def(ast_method.id));\n+        // Iterate down the methods, emitting them. We rely on the\n+        // assumption that all of the actually implemented methods\n+        // appear first in the impl structure, in the same order they do\n+        // in the ast. This is a little sketchy.\n+        let num_implemented_methods = ast_methods.len();\n+        for imp.methods.iter().enumerate().advance |(i, m)| {\n+            let ast_method = if i < num_implemented_methods {\n+                Some(ast_methods[i])\n+            } else { None };\n+\n             index.push(entry {val: m.def_id.node, pos: ebml_w.writer.tell()});\n             encode_info_for_method(ecx,\n                                    ebml_w,\n-                                   m,\n+                                   *m,\n                                    impl_path,\n                                    false,\n                                    item.id,\n-                                   Some(*ast_method));\n+                                   ast_method)\n         }\n       }\n       item_trait(_, ref super_traits, ref ms) => {"}, {"sha": "c822536586453ed12eabfc415f4d1300293f6909", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/002bfd796648547839d0f3740308995b4a926f50/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002bfd796648547839d0f3740308995b4a926f50/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=002bfd796648547839d0f3740308995b4a926f50", "patch": "@@ -664,7 +664,7 @@ impl CoherenceChecker {\n                              impls_seen: &mut HashSet<def_id>,\n                              impl_def_id: def_id) {\n         let tcx = self.crate_context.tcx;\n-        let implementation = csearch::get_impl(tcx, impl_def_id);\n+        let implementation = @csearch::get_impl(tcx, impl_def_id);\n \n         debug!(\"coherence: adding impl from external crate: %s\",\n                ty::item_path_str(tcx, implementation.did));\n@@ -697,21 +697,16 @@ impl CoherenceChecker {\n         }\n \n         // Record all the trait methods.\n-        let mut implementation = @implementation;\n         for associated_traits.iter().advance |trait_ref| {\n-            // XXX(sully): We could probably avoid this copy if there are no\n-            // default methods.\n-            let mut methods = implementation.methods.clone();\n-            self.instantiate_default_methods(implementation.did,\n-                                             *trait_ref,\n-                                             &mut methods);\n-\n-            implementation = @Impl {\n-                methods: methods,\n-                ..*implementation\n-            };\n+              self.add_trait_impl(trait_ref.def_id, implementation);\n+        }\n \n-            self.add_trait_impl(trait_ref.def_id, implementation);\n+        // For any methods that use a default implementation, add them to\n+        // the map. This is a bit unfortunate.\n+        for implementation.methods.iter().advance |method| {\n+            for method.provided_source.iter().advance |source| {\n+                tcx.provided_method_sources.insert(method.def_id, *source);\n+            }\n         }\n \n         // Add the implementation to the mapping from implementation to base"}, {"sha": "2d4f539f82bbdd40faeca00314a101081328beab", "filename": "src/test/auxiliary/trait_default_method_xc_aux_2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/002bfd796648547839d0f3740308995b4a926f50/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002bfd796648547839d0f3740308995b4a926f50/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_default_method_xc_aux_2.rs?ref=002bfd796648547839d0f3740308995b4a926f50", "patch": "@@ -0,0 +1,17 @@\n+// aux-build:trait_default_method_xc_aux.rs\n+\n+extern mod aux(name = \"trait_default_method_xc_aux\");\n+use aux::A;\n+\n+pub struct a_struct { x: int }\n+\n+impl A for a_struct {\n+    fn f(&self) -> int { 10 }\n+}\n+\n+// This function will need to get inlined, and badness may result.\n+pub fn welp<A>(x: A) -> A {\n+    let a = a_struct { x: 0 };\n+    a.g();\n+    x\n+}"}, {"sha": "1dad5d23b8823205c269dfc376b89d05a1e8717d", "filename": "src/test/run-pass/trait-default-method-xc-2.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/002bfd796648547839d0f3740308995b4a926f50/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/002bfd796648547839d0f3740308995b4a926f50/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-default-method-xc-2.rs?ref=002bfd796648547839d0f3740308995b4a926f50", "patch": "@@ -0,0 +1,25 @@\n+// xfail-fast\n+// aux-build:trait_default_method_xc_aux.rs\n+// aux-build:trait_default_method_xc_aux_2.rs\n+\n+\n+extern mod aux(name = \"trait_default_method_xc_aux\");\n+extern mod aux2(name = \"trait_default_method_xc_aux_2\");\n+use aux::A;\n+use aux2::{a_struct, welp};\n+\n+\n+fn main () {\n+\n+    let a = a_struct { x: 0 };\n+    let b = a_struct { x: 1 };\n+\n+    assert_eq!(0i.g(), 10);\n+    assert_eq!(a.g(), 10);\n+    assert_eq!(a.h(), 11);\n+    assert_eq!(b.g(), 10);\n+    assert_eq!(b.h(), 11);\n+    assert_eq!(A::lurr(&a, &b), 21);\n+\n+    welp(&0);\n+}"}]}