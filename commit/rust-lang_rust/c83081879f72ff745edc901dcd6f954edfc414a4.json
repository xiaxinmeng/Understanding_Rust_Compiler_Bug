{"sha": "c83081879f72ff745edc901dcd6f954edfc414a4", "node_id": "C_kwDOAAsO6NoAKGM4MzA4MTg3OWY3MmZmNzQ1ZWRjOTAxZGNkNmY5NTRlZGZjNDE0YTQ", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-03T15:29:23Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-02-03T15:33:42Z"}, "message": "Add abi string completions", "tree": {"sha": "f82cbd9b6f6ef72ffc0484442f3bfad4626c132c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f82cbd9b6f6ef72ffc0484442f3bfad4626c132c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c83081879f72ff745edc901dcd6f954edfc414a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c83081879f72ff745edc901dcd6f954edfc414a4", "html_url": "https://github.com/rust-lang/rust/commit/c83081879f72ff745edc901dcd6f954edfc414a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c83081879f72ff745edc901dcd6f954edfc414a4/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3f3b6a87fb5b2a7fb305896a05bd65c7b53b099", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3f3b6a87fb5b2a7fb305896a05bd65c7b53b099", "html_url": "https://github.com/rust-lang/rust/commit/d3f3b6a87fb5b2a7fb305896a05bd65c7b53b099"}], "stats": {"total": 106, "additions": 106, "deletions": 0}, "files": [{"sha": "c11a1efce4f44d135fbf4903ab72e88822ec5bf9", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c83081879f72ff745edc901dcd6f954edfc414a4/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83081879f72ff745edc901dcd6f954edfc414a4/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=c83081879f72ff745edc901dcd6f954edfc414a4", "patch": "@@ -2,6 +2,7 @@\n \n pub(crate) mod attribute;\n pub(crate) mod dot;\n+pub(crate) mod extern_abi;\n pub(crate) mod flyimport;\n pub(crate) mod fn_param;\n pub(crate) mod format_string;"}, {"sha": "87fccec008e0a168deec7671490988f5e16310ce", "filename": "crates/ide_completion/src/completions/extern_abi.rs", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/c83081879f72ff745edc901dcd6f954edfc414a4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fextern_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83081879f72ff745edc901dcd6f954edfc414a4/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fextern_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fextern_abi.rs?ref=c83081879f72ff745edc901dcd6f954edfc414a4", "patch": "@@ -0,0 +1,104 @@\n+//! Completes function abi strings.\n+use syntax::{\n+    ast::{self, IsString},\n+    AstNode, AstToken,\n+};\n+\n+use crate::{\n+    completions::Completions, context::CompletionContext, CompletionItem, CompletionItemKind,\n+};\n+\n+// Most of these are feature gated, we should filter/add feature gate completions once we have them.\n+const SUPPORTED_CALLING_CONVENTIONS: &[&str] = &[\n+    \"Rust\",\n+    \"C\",\n+    \"C-unwind\",\n+    \"cdecl\",\n+    \"stdcall\",\n+    \"stdcall-unwind\",\n+    \"fastcall\",\n+    \"vectorcall\",\n+    \"thiscall\",\n+    \"thiscall-unwind\",\n+    \"aapcs\",\n+    \"win64\",\n+    \"sysv64\",\n+    \"ptx-kernel\",\n+    \"msp430-interrupt\",\n+    \"x86-interrupt\",\n+    \"amdgpu-kernel\",\n+    \"efiapi\",\n+    \"avr-interrupt\",\n+    \"avr-non-blocking-interrupt\",\n+    \"C-cmse-nonsecure-call\",\n+    \"wasm\",\n+    \"system\",\n+    \"system-unwind\",\n+    \"rust-intrinsic\",\n+    \"rust-call\",\n+    \"platform-intrinsic\",\n+    \"unadjusted\",\n+];\n+\n+pub(crate) fn complete_extern_abi(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n+    if ctx.token.parent().and_then(ast::Abi::cast).is_none() {\n+        return None;\n+    }\n+    let abi_str = ast::String::cast(ctx.token.clone())?;\n+    let source_range = abi_str.text_range_between_quotes()?;\n+    for &abi in SUPPORTED_CALLING_CONVENTIONS {\n+        CompletionItem::new(CompletionItemKind::Keyword, source_range, abi).add_to(acc);\n+    }\n+    Some(())\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use expect_test::{expect, Expect};\n+\n+    use crate::tests::{check_edit, completion_list_no_kw};\n+\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list_no_kw(ra_fixture);\n+        expect.assert_eq(&actual);\n+    }\n+\n+    #[test]\n+    fn only_completes_in_string_literals() {\n+        check(\n+            r#\"\n+$0 fn foo {}\n+\"#,\n+            expect![[]],\n+        );\n+    }\n+\n+    #[test]\n+    fn requires_extern_prefix() {\n+        check(\n+            r#\"\n+\"$0\" fn foo {}\n+\"#,\n+            expect![[]],\n+        );\n+    }\n+\n+    #[test]\n+    fn works() {\n+        check(\n+            r#\"\n+extern \"$0\" fn foo {}\n+\"#,\n+            expect![[]],\n+        );\n+        check_edit(\n+            \"Rust\",\n+            r#\"\n+extern \"$0\" fn foo {}\n+\"#,\n+            r#\"\n+extern \"Rust\" fn foo {}\n+\"#,\n+        );\n+    }\n+}"}, {"sha": "9f6f6592de50e2786a7b2812c0f34433831139a1", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c83081879f72ff745edc901dcd6f954edfc414a4/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c83081879f72ff745edc901dcd6f954edfc414a4/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=c83081879f72ff745edc901dcd6f954edfc414a4", "patch": "@@ -154,6 +154,7 @@ pub fn completions(\n     completions::attribute::complete_attribute(&mut acc, &ctx);\n     completions::attribute::complete_known_attribute_input(&mut acc, &ctx);\n     completions::dot::complete_dot(&mut acc, &ctx);\n+    completions::extern_abi::complete_extern_abi(&mut acc, &ctx);\n     completions::flyimport::import_on_the_fly(&mut acc, &ctx);\n     completions::fn_param::complete_fn_param(&mut acc, &ctx);\n     completions::format_string::format_string(&mut acc, &ctx);"}]}