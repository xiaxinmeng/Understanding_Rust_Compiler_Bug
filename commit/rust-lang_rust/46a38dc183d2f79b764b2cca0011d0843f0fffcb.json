{"sha": "46a38dc183d2f79b764b2cca0011d0843f0fffcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2YTM4ZGMxODNkMmY3OWI3NjRiMmNjYTAwMTFkMDg0M2YwZmZmY2I=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-26T06:01:01Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-27T16:34:51Z"}, "message": "Account for tail expressions when pointing at return type\n\nWhen there's a type mismatch we make an effort to check if it was\ncaused by a function's return type. This logic now makes sure to\nonly point at the return type if the error happens in a tail\nexpression.", "tree": {"sha": "4bd1f375d6a1c3c99cedc1309da696af25d37649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bd1f375d6a1c3c99cedc1309da696af25d37649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46a38dc183d2f79b764b2cca0011d0843f0fffcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46a38dc183d2f79b764b2cca0011d0843f0fffcb", "html_url": "https://github.com/rust-lang/rust/commit/46a38dc183d2f79b764b2cca0011d0843f0fffcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46a38dc183d2f79b764b2cca0011d0843f0fffcb/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faee8e1756dbdfbe0752a8006e952395c0cd7a67", "url": "https://api.github.com/repos/rust-lang/rust/commits/faee8e1756dbdfbe0752a8006e952395c0cd7a67", "html_url": "https://github.com/rust-lang/rust/commit/faee8e1756dbdfbe0752a8006e952395c0cd7a67"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "9854d8b04fd984ebd89313db4c32cefcdd56858d", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/46a38dc183d2f79b764b2cca0011d0843f0fffcb/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a38dc183d2f79b764b2cca0011d0843f0fffcb/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=46a38dc183d2f79b764b2cca0011d0843f0fffcb", "patch": "@@ -741,7 +741,28 @@ impl<'hir> Map<'hir> {\n     /// }\n     /// ```\n     pub fn get_return_block(&self, id: HirId) -> Option<HirId> {\n-        for (hir_id, node) in ParentHirIterator::new(id, &self) {\n+        let mut iter = ParentHirIterator::new(id, &self).peekable();\n+        let mut ignore_tail = false;\n+        if let Some(entry) = self.find_entry(id) {\n+            if let Node::Expr(Expr { node: ExprKind::Ret(_), .. }) = entry.node {\n+                // When dealing with `return` statements, we don't care about climbing only tail\n+                // expressions.\n+                ignore_tail = true;\n+            }\n+        }\n+        while let Some((hir_id, node)) = iter.next() {\n+            if let (Some((_, next_node)), false) = (iter.peek(), ignore_tail) {\n+                match next_node {\n+                    Node::Block(Block { expr: None, .. }) => return None,\n+                    Node::Block(Block { expr: Some(expr), .. }) => {\n+                        if hir_id != expr.hir_id {\n+                            // The current node is not the tail expression of its parent.\n+                            return None;\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n             match node {\n                 Node::Item(_) |\n                 Node::ForeignItem(_) |\n@@ -750,10 +771,12 @@ impl<'hir> Map<'hir> {\n                 Node::ImplItem(_) => return Some(hir_id),\n                 Node::Expr(ref expr) => {\n                     match expr.kind {\n+                        // Ignore `return`s on the first iteration\n                         ExprKind::Loop(..) | ExprKind::Ret(..) => return None,\n                         _ => {}\n                     }\n                 }\n+                Node::Local(_) => return None,\n                 _ => {}\n             }\n         }"}, {"sha": "0b1fcd0da3a9c215aeef04895a10a48f022998eb", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46a38dc183d2f79b764b2cca0011d0843f0fffcb/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a38dc183d2f79b764b2cca0011d0843f0fffcb/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=46a38dc183d2f79b764b2cca0011d0843f0fffcb", "patch": "@@ -1563,7 +1563,7 @@ pub enum ExprKind {\n     /// Thus, `x.foo::<Bar, Baz>(a, b, c, d)` is represented as\n     /// `ExprKind::MethodCall(PathSegment { foo, [Bar, Baz] }, [x, a, b, c, d])`.\n     MethodCall(P<PathSegment>, Span, HirVec<Expr>),\n-    /// A tuple (e.g., `(a, b, c ,d)`).\n+    /// A tuple (e.g., `(a, b, c, d)`).\n     Tup(HirVec<Expr>),\n     /// A binary operation (e.g., `a + b`, `a * b`).\n     Binary(BinOp, P<Expr>, P<Expr>),"}, {"sha": "317d829d135bf0b1842ca1ad0bfabf2a80d6c204", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/46a38dc183d2f79b764b2cca0011d0843f0fffcb/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46a38dc183d2f79b764b2cca0011d0843f0fffcb/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=46a38dc183d2f79b764b2cca0011d0843f0fffcb", "patch": "@@ -620,8 +620,12 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expr: &'tcx hir::Expr\n     ) -> Ty<'tcx> {\n         if self.ret_coercion.is_none() {\n-            struct_span_err!(self.tcx.sess, expr.span, E0572,\n-                                \"return statement outside of function body\").emit();\n+            struct_span_err!(\n+                self.tcx.sess,\n+                expr.span,\n+                E0572,\n+                \"return statement outside of function body\",\n+            ).emit();\n         } else if let Some(ref e) = expr_opt {\n             if self.ret_coercion_span.borrow().is_none() {\n                 *self.ret_coercion_span.borrow_mut() = Some(e.span);"}, {"sha": "85cbc787bc2db5b50e5156a3d4dd075572afb02a", "filename": "src/test/ui/struct-literal-variant-in-if.stderr", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/46a38dc183d2f79b764b2cca0011d0843f0fffcb/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46a38dc183d2f79b764b2cca0011d0843f0fffcb/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstruct-literal-variant-in-if.stderr?ref=46a38dc183d2f79b764b2cca0011d0843f0fffcb", "patch": "@@ -49,9 +49,6 @@ LL |     if x == E::V { field } {}\n error[E0308]: mismatched types\n   --> $DIR/struct-literal-variant-in-if.rs:10:20\n    |\n-LL | fn test_E(x: E) {\n-   |                 - help: try adding a return type: `-> bool`\n-LL |     let field = true;\n LL |     if x == E::V { field } {}\n    |                    ^^^^^ expected (), found bool\n    |"}]}