{"sha": "50d8656945513c6b327122e5a40650c66baa87cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZDg2NTY5NDU1MTNjNmIzMjcxMjJlNWE0MDY1MGM2NmJhYTg3Y2I=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-07T16:39:21Z"}, "committer": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-07-07T16:39:21Z"}, "message": "void types", "tree": {"sha": "92ab7c1dc8e1886f4a7abdda55da1806add6f21f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92ab7c1dc8e1886f4a7abdda55da1806add6f21f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50d8656945513c6b327122e5a40650c66baa87cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50d8656945513c6b327122e5a40650c66baa87cb", "html_url": "https://github.com/rust-lang/rust/commit/50d8656945513c6b327122e5a40650c66baa87cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50d8656945513c6b327122e5a40650c66baa87cb/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "987a8687db1a2a5a9388265a6bb5a1590a05dd69", "url": "https://api.github.com/repos/rust-lang/rust/commits/987a8687db1a2a5a9388265a6bb5a1590a05dd69", "html_url": "https://github.com/rust-lang/rust/commit/987a8687db1a2a5a9388265a6bb5a1590a05dd69"}], "stats": {"total": 24, "additions": 21, "deletions": 3}, "files": [{"sha": "ea8dc86d1f0acace49a456a9cf8219aaba5a71ba", "filename": "exotic-sizes.md", "status": "modified", "additions": 21, "deletions": 3, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/50d8656945513c6b327122e5a40650c66baa87cb/exotic-sizes.md", "raw_url": "https://github.com/rust-lang/rust/raw/50d8656945513c6b327122e5a40650c66baa87cb/exotic-sizes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/exotic-sizes.md?ref=50d8656945513c6b327122e5a40650c66baa87cb", "patch": "@@ -3,6 +3,10 @@\n Most of the time, we think in terms of types with a fixed, positive size. This\n is not always the case, however.\n \n+\n+\n+\n+\n # Dynamically Sized Types (DSTs)\n \n Rust also supports types without a statically known size. On the surface,\n@@ -34,19 +38,20 @@ a variable position based on its alignment.**\n \n \n \n+\n+\n # Zero Sized Types (ZSTs)\n \n Rust actually allows types to be specified that occupy *no* space:\n \n ```rust\n struct Foo; // No fields = no size\n-enum Bar; // No variants = no size\n \n // All fields have no size = no size\n struct Baz {\n     foo: Foo,\n-    bar: Bar,\n-    qux: (), // empty tuple has no size\n+    qux: (), \t  // empty tuple has no size\n+    baz: [u8; 0], // empty array has no size\n }\n ```\n \n@@ -67,3 +72,16 @@ standard allocators (including jemalloc, the one used by Rust) generally conside\n passing in `0` as Undefined Behaviour.\n \n \n+\n+\n+\n+# Void Types\n+\n+Rust also enables types to be declared that *cannot even be instantiated*. These\n+types can only be talked about at the type level, and never at the value level.\n+\n+```rust\n+enum Foo { } // No variants = VOID\n+```\n+\n+TODO: WHY?!\n\\ No newline at end of file"}]}