{"sha": "a6ff05cd8387efbb0286e9e35d11111c3b6380fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZmYwNWNkODM4N2VmYmIwMjg2ZTllMzVkMTExMTFjM2I2MzgwZmU=", "commit": {"author": {"name": "Zhen Zhang", "email": "izgzhen@gmail.com", "date": "2016-07-09T03:47:36Z"}, "committer": {"name": "Zhen Zhang", "email": "izgzhen@gmail.com", "date": "2016-07-12T00:25:49Z"}, "message": "Improve arc doc, fixing #32905", "tree": {"sha": "3b63d034a550c7a1ad5fa221ea53d94d44271677", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b63d034a550c7a1ad5fa221ea53d94d44271677"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6ff05cd8387efbb0286e9e35d11111c3b6380fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6ff05cd8387efbb0286e9e35d11111c3b6380fe", "html_url": "https://github.com/rust-lang/rust/commit/a6ff05cd8387efbb0286e9e35d11111c3b6380fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6ff05cd8387efbb0286e9e35d11111c3b6380fe/comments", "author": {"login": "izgzhen", "id": 7168454, "node_id": "MDQ6VXNlcjcxNjg0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7168454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izgzhen", "html_url": "https://github.com/izgzhen", "followers_url": "https://api.github.com/users/izgzhen/followers", "following_url": "https://api.github.com/users/izgzhen/following{/other_user}", "gists_url": "https://api.github.com/users/izgzhen/gists{/gist_id}", "starred_url": "https://api.github.com/users/izgzhen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izgzhen/subscriptions", "organizations_url": "https://api.github.com/users/izgzhen/orgs", "repos_url": "https://api.github.com/users/izgzhen/repos", "events_url": "https://api.github.com/users/izgzhen/events{/privacy}", "received_events_url": "https://api.github.com/users/izgzhen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "izgzhen", "id": 7168454, "node_id": "MDQ6VXNlcjcxNjg0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7168454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/izgzhen", "html_url": "https://github.com/izgzhen", "followers_url": "https://api.github.com/users/izgzhen/followers", "following_url": "https://api.github.com/users/izgzhen/following{/other_user}", "gists_url": "https://api.github.com/users/izgzhen/gists{/gist_id}", "starred_url": "https://api.github.com/users/izgzhen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/izgzhen/subscriptions", "organizations_url": "https://api.github.com/users/izgzhen/orgs", "repos_url": "https://api.github.com/users/izgzhen/repos", "events_url": "https://api.github.com/users/izgzhen/events{/privacy}", "received_events_url": "https://api.github.com/users/izgzhen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d11936251a93d7395169dfab9088c4dde0cca180", "url": "https://api.github.com/repos/rust-lang/rust/commits/d11936251a93d7395169dfab9088c4dde0cca180", "html_url": "https://github.com/rust-lang/rust/commit/d11936251a93d7395169dfab9088c4dde0cca180"}], "stats": {"total": 89, "additions": 46, "deletions": 43}, "files": [{"sha": "e762e4d8ce9a26a2d3690a40839d6e47ae280bd5", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 46, "deletions": 43, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/a6ff05cd8387efbb0286e9e35d11111c3b6380fe/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6ff05cd8387efbb0286e9e35d11111c3b6380fe/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=a6ff05cd8387efbb0286e9e35d11111c3b6380fe", "patch": "@@ -12,23 +12,11 @@\n \n //! Threadsafe reference-counted boxes (the `Arc<T>` type).\n //!\n-//! The `Arc<T>` type provides shared ownership of an immutable value.\n-//! Destruction is deterministic, and will occur as soon as the last owner is\n-//! gone. It is marked as `Send` because it uses atomic reference counting.\n-//!\n-//! If you do not need thread-safety, and just need shared ownership, consider\n-//! the [`Rc<T>` type](../rc/struct.Rc.html). It is the same as `Arc<T>`, but\n-//! does not use atomics, making it both thread-unsafe as well as significantly\n-//! faster when updating the reference count.\n-//!\n-//! The `downgrade` method can be used to create a non-owning `Weak<T>` pointer\n-//! to the box. A `Weak<T>` pointer can be upgraded to an `Arc<T>` pointer, but\n-//! will return `None` if the value has already been dropped.\n-//!\n-//! For example, a tree with parent pointers can be represented by putting the\n-//! nodes behind strong `Arc<T>` pointers, and then storing the parent pointers\n-//! as `Weak<T>` pointers.\n+//! The `Arc<T>` type provides shared ownership of an immutable value through\n+//! atomic reference counting.\n //!\n+//! `Weak<T>` is a weak reference to the `Arc<T>` box, and it is created by\n+//! the `downgrade` method.\n //! # Examples\n //!\n //! Sharing some immutable data between threads:\n@@ -47,27 +35,6 @@\n //!     });\n //! }\n //! ```\n-//!\n-//! Sharing mutable data safely between threads with a `Mutex`:\n-//!\n-//! ```no_run\n-//! use std::sync::{Arc, Mutex};\n-//! use std::thread;\n-//!\n-//! let five = Arc::new(Mutex::new(5));\n-//!\n-//! for _ in 0..10 {\n-//!     let five = five.clone();\n-//!\n-//!     thread::spawn(move || {\n-//!         let mut number = five.lock().unwrap();\n-//!\n-//!         *number += 1;\n-//!\n-//!         println!(\"{}\", *number); // prints 6\n-//!     });\n-//! }\n-//! ```\n \n use boxed::Box;\n \n@@ -92,15 +59,19 @@ use heap::deallocate;\n const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n \n /// An atomically reference counted wrapper for shared state.\n+/// Destruction is deterministic, and will occur as soon as the last owner is\n+/// gone. It is marked as `Send` because it uses atomic reference counting.\n ///\n-/// # Examples\n+/// If you do not need thread-safety, and just need shared ownership, consider\n+/// the [`Rc<T>` type](../rc/struct.Rc.html). It is the same as `Arc<T>`, but\n+/// does not use atomics, making it both thread-unsafe as well as significantly\n+/// faster when updating the reference count.\n ///\n-/// In this example, a large vector is shared between several threads.\n-/// With simple pipes, without `Arc`, a copy would have to be made for each\n-/// thread.\n+/// # Examples\n ///\n-/// When you clone an `Arc<T>`, it will create another pointer to the data and\n-/// increase the reference counter.\n+/// In this example, a large vector of data will be shared by several threads. First we\n+/// wrap it with a `Arc::new` and then clone the `Arc<T>` reference for every thread (which will\n+/// increase the reference count atomically).\n ///\n /// ```\n /// use std::sync::Arc;\n@@ -111,6 +82,7 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n ///     let shared_numbers = Arc::new(numbers);\n ///\n ///     for _ in 0..10 {\n+///         // prepare a copy of reference here and it will be moved to the thread\n ///         let child_numbers = shared_numbers.clone();\n ///\n ///         thread::spawn(move || {\n@@ -121,6 +93,29 @@ const MAX_REFCOUNT: usize = (isize::MAX) as usize;\n ///     }\n /// }\n /// ```\n+/// You can also share mutable data between threads safely\n+/// by putting it inside `Mutex` and then share `Mutex` immutably\n+/// with `Arc<T>` as shown below.\n+///\n+/// ```\n+/// use std::sync::{Arc, Mutex};\n+/// use std::thread;\n+///\n+/// let five = Arc::new(Mutex::new(5));\n+///\n+/// for _ in 0..10 {\n+///     let five = five.clone();\n+///\n+///     thread::spawn(move || {\n+///         let mut number = five.lock().unwrap();\n+///\n+///         *number += 1;\n+///\n+///         println!(\"{}\", *number); // prints 6\n+///     });\n+/// }\n+/// ```\n+\n #[unsafe_no_drop_flag]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Arc<T: ?Sized> {\n@@ -139,6 +134,14 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n ///\n /// Weak pointers will not keep the data inside of the `Arc` alive, and can be\n /// used to break cycles between `Arc` pointers.\n+///\n+/// A `Weak<T>` pointer can be upgraded to an `Arc<T>` pointer, but\n+/// will return `None` if the value has already been dropped.\n+///\n+/// For example, a tree with parent pointers can be represented by putting the\n+/// nodes behind strong `Arc<T>` pointers, and then storing the parent pointers\n+/// as `Weak<T>` pointers.\n+\n #[unsafe_no_drop_flag]\n #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n pub struct Weak<T: ?Sized> {"}]}