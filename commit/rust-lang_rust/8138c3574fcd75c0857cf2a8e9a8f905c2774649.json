{"sha": "8138c3574fcd75c0857cf2a8e9a8f905c2774649", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMzhjMzU3NGZjZDc1YzA4NTdjZjJhOGU5YThmOTA1YzI3NzQ2NDk=", "commit": {"author": {"name": "Vinzent Steinberg", "email": "Vinzent.Steinberg@gmail.com", "date": "2014-08-29T15:24:15Z"}, "committer": {"name": "Vinzent Steinberg", "email": "Vinzent.Steinberg@gmail.com", "date": "2014-08-29T17:39:17Z"}, "message": "num: implement `Hash` for `Complex` and `Ratio`", "tree": {"sha": "5eaa15ad4aaf74690035d9195c1089691010678f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eaa15ad4aaf74690035d9195c1089691010678f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8138c3574fcd75c0857cf2a8e9a8f905c2774649", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8138c3574fcd75c0857cf2a8e9a8f905c2774649", "html_url": "https://github.com/rust-lang/rust/commit/8138c3574fcd75c0857cf2a8e9a8f905c2774649", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8138c3574fcd75c0857cf2a8e9a8f905c2774649/comments", "author": {"login": "vks", "id": 33460, "node_id": "MDQ6VXNlcjMzNDYw", "avatar_url": "https://avatars.githubusercontent.com/u/33460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vks", "html_url": "https://github.com/vks", "followers_url": "https://api.github.com/users/vks/followers", "following_url": "https://api.github.com/users/vks/following{/other_user}", "gists_url": "https://api.github.com/users/vks/gists{/gist_id}", "starred_url": "https://api.github.com/users/vks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vks/subscriptions", "organizations_url": "https://api.github.com/users/vks/orgs", "repos_url": "https://api.github.com/users/vks/repos", "events_url": "https://api.github.com/users/vks/events{/privacy}", "received_events_url": "https://api.github.com/users/vks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vks", "id": 33460, "node_id": "MDQ6VXNlcjMzNDYw", "avatar_url": "https://avatars.githubusercontent.com/u/33460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vks", "html_url": "https://github.com/vks", "followers_url": "https://api.github.com/users/vks/followers", "following_url": "https://api.github.com/users/vks/following{/other_user}", "gists_url": "https://api.github.com/users/vks/gists{/gist_id}", "starred_url": "https://api.github.com/users/vks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vks/subscriptions", "organizations_url": "https://api.github.com/users/vks/orgs", "repos_url": "https://api.github.com/users/vks/repos", "events_url": "https://api.github.com/users/vks/events{/privacy}", "received_events_url": "https://api.github.com/users/vks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6a7ab40e84d80990ceaf7755e30a575367e5c32", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a7ab40e84d80990ceaf7755e30a575367e5c32", "html_url": "https://github.com/rust-lang/rust/commit/f6a7ab40e84d80990ceaf7755e30a575367e5c32"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "0fcb7436b9973243fc1c5551195d36405b7b42c6", "filename": "src/libnum/complex.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8138c3574fcd75c0857cf2a8e9a8f905c2774649/src%2Flibnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8138c3574fcd75c0857cf2a8e9a8f905c2774649/src%2Flibnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fcomplex.rs?ref=8138c3574fcd75c0857cf2a8e9a8f905c2774649", "patch": "@@ -12,13 +12,13 @@\n //! Complex numbers.\n \n use std::fmt;\n-use std::num::{Zero,One,ToStrRadix};\n+use std::num::{Zero, One, ToStrRadix};\n \n // FIXME #1284: handle complex NaN & infinity etc. This\n // probably doesn't map to C's _Complex correctly.\n \n /// A complex number in Cartesian form.\n-#[deriving(PartialEq,Clone)]\n+#[deriving(PartialEq, Clone, Hash)]\n pub struct Complex<T> {\n     /// Real portion of the complex number\n     pub re: T,\n@@ -193,7 +193,8 @@ mod test {\n     #![allow(non_uppercase_statics)]\n \n     use super::{Complex64, Complex};\n-    use std::num::{Zero,One,Float};\n+    use std::num::{Zero, One, Float};\n+    use std::hash::hash;\n \n     pub static _0_0i : Complex64 = Complex { re: 0.0, im: 0.0 };\n     pub static _1_0i : Complex64 = Complex { re: 1.0, im: 0.0 };\n@@ -367,4 +368,14 @@ mod test {\n         test(-_neg1_1i, \"1-1i\".to_string());\n         test(_05_05i, \"0.5+0.5i\".to_string());\n     }\n+\n+    #[test]\n+    fn test_hash() {\n+        let a = Complex::new(0i32, 0i32);\n+        let b = Complex::new(1i32, 0i32);\n+        let c = Complex::new(0i32, 1i32);\n+        assert!(hash(&a) != hash(&b));\n+        assert!(hash(&b) != hash(&c));\n+        assert!(hash(&c) != hash(&a));\n+    }\n }"}, {"sha": "499c9afb83422e8ffa065312efe43f60c446d745", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8138c3574fcd75c0857cf2a8e9a8f905c2774649/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8138c3574fcd75c0857cf2a8e9a8f905c2774649/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=8138c3574fcd75c0857cf2a8e9a8f905c2774649", "patch": "@@ -21,7 +21,7 @@ use std::num::{Zero, One, ToStrRadix, FromStrRadix};\n use bigint::{BigInt, BigUint, Sign, Plus, Minus};\n \n /// Represents the ratio between 2 numbers.\n-#[deriving(Clone)]\n+#[deriving(Clone, Hash)]\n #[allow(missing_doc)]\n pub struct Ratio<T> {\n     numer: T,\n@@ -381,6 +381,7 @@ mod test {\n     use super::{Ratio, Rational, BigRational};\n     use std::num::{Zero, One, FromStrRadix, FromPrimitive, ToStrRadix};\n     use std::from_str::FromStr;\n+    use std::hash::hash;\n     use std::num;\n \n     pub static _0 : Rational = Ratio { numer: 0, denom: 1};\n@@ -728,4 +729,10 @@ mod test {\n         assert!(! _neg1_2.is_positive());\n         assert!(! _1_2.is_negative());\n     }\n+\n+    #[test]\n+    fn test_hash() {\n+        assert!(hash(&_0) != hash(&_1));\n+        assert!(hash(&_0) != hash(&_3_2));\n+    }\n }"}]}