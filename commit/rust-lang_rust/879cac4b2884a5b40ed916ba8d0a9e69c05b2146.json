{"sha": "879cac4b2884a5b40ed916ba8d0a9e69c05b2146", "node_id": "C_kwDOAAsO6NoAKDg3OWNhYzRiMjg4NGE1YjQwZWQ5MTZiYThkMGE5ZTY5YzA1YjIxNDY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-09T14:40:51Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-09T14:40:51Z"}, "message": "minor: Remove dead code", "tree": {"sha": "7e82ede864427d2f18e7524861c7516811a44bfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e82ede864427d2f18e7524861c7516811a44bfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/879cac4b2884a5b40ed916ba8d0a9e69c05b2146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/879cac4b2884a5b40ed916ba8d0a9e69c05b2146", "html_url": "https://github.com/rust-lang/rust/commit/879cac4b2884a5b40ed916ba8d0a9e69c05b2146", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/879cac4b2884a5b40ed916ba8d0a9e69c05b2146/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3427d36d0e47a5266feb2e501876c60584600974", "url": "https://api.github.com/repos/rust-lang/rust/commits/3427d36d0e47a5266feb2e501876c60584600974", "html_url": "https://github.com/rust-lang/rust/commit/3427d36d0e47a5266feb2e501876c60584600974"}], "stats": {"total": 58, "additions": 7, "deletions": 51}, "files": [{"sha": "3be477d48774adb80d5c4cf4ae74510b4a38693e", "filename": "crates/hir-def/src/body.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/879cac4b2884a5b40ed916ba8d0a9e69c05b2146/crates%2Fhir-def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879cac4b2884a5b40ed916ba8d0a9e69c05b2146/crates%2Fhir-def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody.rs?ref=879cac4b2884a5b40ed916ba8d0a9e69c05b2146", "patch": "@@ -271,7 +271,6 @@ pub struct Body {\n     pub exprs: Arena<Expr>,\n     pub pats: Arena<Pat>,\n     pub bindings: Arena<Binding>,\n-    pub or_pats: FxHashMap<PatId, Arc<[PatId]>>,\n     pub labels: Arena<Label>,\n     /// The patterns for the function's parameters. While the parameter types are\n     /// part of the function signature, the patterns are not (they don't change\n@@ -410,18 +409,6 @@ impl Body {\n             .map(move |&block| (block, db.block_def_map(block).expect(\"block ID without DefMap\")))\n     }\n \n-    pub fn pattern_representative(&self, pat: PatId) -> PatId {\n-        self.or_pats.get(&pat).and_then(|pats| pats.first().copied()).unwrap_or(pat)\n-    }\n-\n-    /// Retrieves all ident patterns this pattern shares the ident with.\n-    pub fn ident_patterns_for<'slf>(&'slf self, pat: &'slf PatId) -> &'slf [PatId] {\n-        match self.or_pats.get(pat) {\n-            Some(pats) => pats,\n-            None => std::slice::from_ref(pat),\n-        }\n-    }\n-\n     pub fn pretty_print(&self, db: &dyn DefDatabase, owner: DefWithBodyId) -> String {\n         pretty::print_body_hir(db, self, owner)\n     }\n@@ -436,19 +423,9 @@ impl Body {\n     }\n \n     fn shrink_to_fit(&mut self) {\n-        let Self {\n-            _c: _,\n-            body_expr: _,\n-            block_scopes,\n-            or_pats,\n-            exprs,\n-            labels,\n-            params,\n-            pats,\n-            bindings,\n-        } = self;\n+        let Self { _c: _, body_expr: _, block_scopes, exprs, labels, params, pats, bindings } =\n+            self;\n         block_scopes.shrink_to_fit();\n-        or_pats.shrink_to_fit();\n         exprs.shrink_to_fit();\n         labels.shrink_to_fit();\n         params.shrink_to_fit();\n@@ -464,7 +441,6 @@ impl Default for Body {\n             exprs: Default::default(),\n             pats: Default::default(),\n             bindings: Default::default(),\n-            or_pats: Default::default(),\n             labels: Default::default(),\n             params: Default::default(),\n             block_scopes: Default::default(),"}, {"sha": "83ce9b6acbba88643829ee3b9870235ab9b06fbb", "filename": "crates/hir-def/src/body/lower.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/879cac4b2884a5b40ed916ba8d0a9e69c05b2146/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879cac4b2884a5b40ed916ba8d0a9e69c05b2146/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fbody%2Flower.rs?ref=879cac4b2884a5b40ed916ba8d0a9e69c05b2146", "patch": "@@ -94,11 +94,8 @@ pub(super) fn lower(\n             body_expr: dummy_expr_id(),\n             block_scopes: Vec::new(),\n             _c: Count::new(),\n-            or_pats: Default::default(),\n         },\n         expander,\n-        name_to_pat_grouping: Default::default(),\n-        is_lowering_inside_or_pat: false,\n         is_lowering_assignee_expr: false,\n         is_lowering_generator: false,\n     }\n@@ -111,9 +108,6 @@ struct ExprCollector<'a> {\n     ast_id_map: Arc<AstIdMap>,\n     body: Body,\n     source_map: BodySourceMap,\n-    // a poor-mans union-find?\n-    name_to_pat_grouping: FxHashMap<Name, Vec<PatId>>,\n-    is_lowering_inside_or_pat: bool,\n     is_lowering_assignee_expr: bool,\n     is_lowering_generator: bool,\n }\n@@ -824,13 +818,7 @@ impl ExprCollector<'_> {\n     }\n \n     fn collect_pat(&mut self, pat: ast::Pat) -> PatId {\n-        let pat_id = self.collect_pat_(pat, &mut BindingList::default());\n-        for (_, pats) in self.name_to_pat_grouping.drain() {\n-            let pats = Arc::<[_]>::from(pats);\n-            self.body.or_pats.extend(pats.iter().map(|&pat| (pat, pats.clone())));\n-        }\n-        self.is_lowering_inside_or_pat = false;\n-        pat_id\n+        self.collect_pat_(pat, &mut BindingList::default())\n     }\n \n     fn collect_pat_opt(&mut self, pat: Option<ast::Pat>) -> PatId {\n@@ -845,13 +833,13 @@ impl ExprCollector<'_> {\n             ast::Pat::IdentPat(bp) => {\n                 let name = bp.name().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n \n-                let key = self.is_lowering_inside_or_pat.then(|| name.clone());\n                 let annotation =\n                     BindingAnnotation::new(bp.mut_token().is_some(), bp.ref_token().is_some());\n                 let subpat = bp.pat().map(|subpat| self.collect_pat_(subpat, binding_list));\n-                let (binding, pattern) = if annotation == BindingAnnotation::Unannotated\n-                    && subpat.is_none()\n-                {\n+\n+                let is_simple_ident_pat =\n+                    annotation == BindingAnnotation::Unannotated && subpat.is_none();\n+                let (binding, pattern) = if is_simple_ident_pat {\n                     // This could also be a single-segment path pattern. To\n                     // decide that, we need to try resolving the name.\n                     let (resolved, _) = self.expander.def_map.resolve_path(\n@@ -892,9 +880,6 @@ impl ExprCollector<'_> {\n                 if let Some(binding_id) = binding {\n                     self.add_definition_to_binding(binding_id, pat);\n                 }\n-                if let Some(key) = key {\n-                    self.name_to_pat_grouping.entry(key).or_default().push(pat);\n-                }\n                 return pat;\n             }\n             ast::Pat::TupleStructPat(p) => {\n@@ -914,7 +899,6 @@ impl ExprCollector<'_> {\n                 path.map(Pat::Path).unwrap_or(Pat::Missing)\n             }\n             ast::Pat::OrPat(p) => {\n-                self.is_lowering_inside_or_pat = true;\n                 let pats = p.pats().map(|p| self.collect_pat_(p, binding_list)).collect();\n                 Pat::Or(pats)\n             }"}, {"sha": "74dce1cca2d253bc6a53e698efe1d8badc9f6aa4", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/879cac4b2884a5b40ed916ba8d0a9e69c05b2146/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/879cac4b2884a5b40ed916ba8d0a9e69c05b2146/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=879cac4b2884a5b40ed916ba8d0a9e69c05b2146", "patch": "@@ -2501,10 +2501,6 @@ impl GenericDef {\n }\n \n /// A single local definition.\n-///\n-/// If the definition of this is part of a \"MultiLocal\", that is a local that has multiple declarations due to or-patterns\n-/// then this only references a single one of those.\n-/// To retrieve the other locals you should use [`Local::associated_locals`]\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct Local {\n     pub(crate) parent: DefWithBodyId,"}]}