{"sha": "602b3957f152a486e57f7fbaa15265d8a81017bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMmIzOTU3ZjE1MmE0ODZlNTdmN2ZiYWExNTI2NWQ4YTgxMDE3YmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-15T09:14:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-15T09:14:43Z"}, "message": "Auto merge of #49885 - spastorino:fn_ref_unsound, r=nikomatsakis\n\nFix unsoundness bug in functions input references\n\nFixes #48803\n\nr? @nikomatsakis", "tree": {"sha": "031ef25c436812794776c1a37ddf84f0c62a298a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/031ef25c436812794776c1a37ddf84f0c62a298a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/602b3957f152a486e57f7fbaa15265d8a81017bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/602b3957f152a486e57f7fbaa15265d8a81017bc", "html_url": "https://github.com/rust-lang/rust/commit/602b3957f152a486e57f7fbaa15265d8a81017bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/602b3957f152a486e57f7fbaa15265d8a81017bc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "56109dbf709c2e4f6ca27d79feba2155b7f66e03", "url": "https://api.github.com/repos/rust-lang/rust/commits/56109dbf709c2e4f6ca27d79feba2155b7f66e03", "html_url": "https://github.com/rust-lang/rust/commit/56109dbf709c2e4f6ca27d79feba2155b7f66e03"}, {"sha": "55fb12c274898b56d05e4ee8c97d4417e38e8ecc", "url": "https://api.github.com/repos/rust-lang/rust/commits/55fb12c274898b56d05e4ee8c97d4417e38e8ecc", "html_url": "https://github.com/rust-lang/rust/commit/55fb12c274898b56d05e4ee8c97d4417e38e8ecc"}], "stats": {"total": 95, "additions": 75, "deletions": 20}, "files": [{"sha": "faa382738b06f6fe071b0545ebed0533946a225e", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 35, "deletions": 20, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/602b3957f152a486e57f7fbaa15265d8a81017bc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/602b3957f152a486e57f7fbaa15265d8a81017bc/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=602b3957f152a486e57f7fbaa15265d8a81017bc", "patch": "@@ -14,20 +14,20 @@\n use borrow_check::nll::region_infer::Cause;\n use borrow_check::nll::region_infer::ClosureRegionRequirementsExt;\n use borrow_check::nll::universal_regions::UniversalRegions;\n+use dataflow::move_paths::MoveData;\n use dataflow::FlowAtLocation;\n use dataflow::MaybeInitializedPlaces;\n-use dataflow::move_paths::MoveData;\n use rustc::hir::def_id::DefId;\n-use rustc::infer::{InferCtxt, InferOk, InferResult, LateBoundRegionConversionTime, UnitResult};\n use rustc::infer::region_constraints::{GenericKind, RegionConstraintData};\n-use rustc::traits::{self, Normalized, TraitEngine};\n+use rustc::infer::{InferCtxt, InferOk, InferResult, LateBoundRegionConversionTime, UnitResult};\n+use rustc::mir::tcx::PlaceTy;\n+use rustc::mir::visit::{PlaceContext, Visitor};\n+use rustc::mir::*;\n use rustc::traits::query::NoSolution;\n+use rustc::traits::{self, Normalized, TraitEngine};\n use rustc::ty::error::TypeError;\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::{self, ToPolyTraitRef, Ty, TyCtxt, TypeVariants};\n-use rustc::mir::*;\n-use rustc::mir::tcx::PlaceTy;\n-use rustc::mir::visit::{PlaceContext, Visitor};\n use std::fmt;\n use syntax::ast;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -61,8 +61,8 @@ macro_rules! span_mirbug_and_err {\n     })\n }\n \n-mod liveness;\n mod input_output;\n+mod liveness;\n \n /// Type checks the given `mir` in the context of the inference\n /// context `infcx`. Returns any region constraints that have yet to\n@@ -275,7 +275,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                         tcx.predicates_of(def_id).instantiate(tcx, substs);\n                     let predicates =\n                         type_checker.normalize(&instantiated_predicates.predicates, location);\n-                    type_checker.prove_predicates(&predicates, location);\n+                    type_checker.prove_predicates(predicates.iter().cloned(), location);\n                 }\n \n                 value.ty\n@@ -763,9 +763,12 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             }\n             StatementKind::UserAssertTy(ref c_ty, ref local) => {\n                 let local_ty = mir.local_decls()[*local].ty;\n-                let (ty, _) = self.infcx.instantiate_canonical_with_fresh_inference_vars(\n-                    stmt.source_info.span, c_ty);\n-                debug!(\"check_stmt: user_assert_ty ty={:?} local_ty={:?}\", ty, local_ty);\n+                let (ty, _) = self.infcx\n+                    .instantiate_canonical_with_fresh_inference_vars(stmt.source_info.span, c_ty);\n+                debug!(\n+                    \"check_stmt: user_assert_ty ty={:?} local_ty={:?}\",\n+                    ty, local_ty\n+                );\n                 if let Err(terr) = self.eq_types(ty, local_ty, location.at_self()) {\n                     span_mirbug!(\n                         self,\n@@ -895,6 +898,11 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 let sig = self.normalize(&sig, term_location);\n                 self.check_call_dest(mir, term, &sig, destination, term_location);\n \n+                self.prove_predicates(\n+                    sig.inputs().iter().map(|ty| ty::Predicate::WellFormed(ty)),\n+                    term_location,\n+                );\n+\n                 // The ordinary liveness rules will ensure that all\n                 // regions in the type of the callee are live here. We\n                 // then further constrain the late-bound regions that\n@@ -1508,28 +1516,35 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n \n         let predicates = self.normalize(&instantiated_predicates.predicates, location);\n         debug!(\"prove_aggregate_predicates: predicates={:?}\", predicates);\n-        self.prove_predicates(&predicates, location);\n+        self.prove_predicates(predicates.iter().cloned(), location);\n     }\n \n     fn prove_trait_ref(&mut self, trait_ref: ty::TraitRef<'tcx>, location: Location) {\n         self.prove_predicates(\n-            &[\n-                ty::Predicate::Trait(trait_ref.to_poly_trait_ref().to_poly_trait_predicate()),\n-            ],\n+            [ty::Predicate::Trait(\n+                trait_ref.to_poly_trait_ref().to_poly_trait_predicate(),\n+            )].iter()\n+                .cloned(),\n             location,\n         );\n     }\n \n-    fn prove_predicates(&mut self, predicates: &[ty::Predicate<'tcx>], location: Location) {\n+    fn prove_predicates(\n+        &mut self,\n+        predicates: impl IntoIterator<Item = ty::Predicate<'tcx>>,\n+        location: Location,\n+    ) {\n+        let mut predicates_iter = predicates.into_iter();\n+\n         debug!(\n             \"prove_predicates(predicates={:?}, location={:?})\",\n-            predicates, location\n+            predicates_iter.by_ref().collect::<Vec<_>>(),\n+            location\n         );\n         self.fully_perform_op(location.at_self(), |this| {\n             let cause = this.misc(this.last_span);\n-            let obligations = predicates\n-                .iter()\n-                .map(|&p| traits::Obligation::new(cause.clone(), this.param_env, p))\n+            let obligations = predicates_iter\n+                .map(|p| traits::Obligation::new(cause.clone(), this.param_env, p))\n                 .collect();\n             Ok(InferOk {\n                 value: (),"}, {"sha": "c6d14ace8b3440c5687c01afe225f903ced056b0", "filename": "src/test/ui/issue-48803.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/602b3957f152a486e57f7fbaa15265d8a81017bc/src%2Ftest%2Fui%2Fissue-48803.rs", "raw_url": "https://github.com/rust-lang/rust/raw/602b3957f152a486e57f7fbaa15265d8a81017bc/src%2Ftest%2Fui%2Fissue-48803.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-48803.rs?ref=602b3957f152a486e57f7fbaa15265d8a81017bc", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(nll)]\n+\n+fn flatten<'a, 'b, T>(x: &'a &'b T) -> &'a T {\n+    x\n+}\n+\n+fn main() {\n+    let mut x = \"original\";\n+    let y = &x;\n+    let z = &y;\n+    let w = flatten(z);\n+    x = \"modified\";\n+    //~^ ERROR cannot assign to `x` because it is borrowed [E0506]\n+    println!(\"{}\", w); // prints \"modified\"\n+}"}, {"sha": "b37e2c07d23d7894c40612d85d860880ecdb1e55", "filename": "src/test/ui/issue-48803.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/602b3957f152a486e57f7fbaa15265d8a81017bc/src%2Ftest%2Fui%2Fissue-48803.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/602b3957f152a486e57f7fbaa15265d8a81017bc/src%2Ftest%2Fui%2Fissue-48803.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-48803.stderr?ref=602b3957f152a486e57f7fbaa15265d8a81017bc", "patch": "@@ -0,0 +1,15 @@\n+error[E0506]: cannot assign to `x` because it is borrowed\n+  --> $DIR/issue-48803.rs:22:5\n+   |\n+LL |     let y = &x;\n+   |             -- borrow of `x` occurs here\n+...\n+LL |     x = \"modified\";\n+   |     ^^^^^^^^^^^^^^ assignment to borrowed `x` occurs here\n+LL |     //~^ ERROR cannot assign to `x` because it is borrowed [E0506]\n+LL |     println!(\"{}\", w); // prints \"modified\"\n+   |                    - borrow later used here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0506`."}]}