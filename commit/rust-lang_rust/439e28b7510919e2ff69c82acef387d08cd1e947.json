{"sha": "439e28b7510919e2ff69c82acef387d08cd1e947", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzOWUyOGI3NTEwOTE5ZTJmZjY5YzgyYWNlZjM4N2QwOGNkMWU5NDc=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-01-03T23:50:05Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-01-03T23:50:05Z"}, "message": "Add missing ty_constr cases to trans::type_of_inner and ty::fold_ty.\n\nCloses #970", "tree": {"sha": "71c18208b0761660ce537dff9d8f68ec75c9ee3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71c18208b0761660ce537dff9d8f68ec75c9ee3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/439e28b7510919e2ff69c82acef387d08cd1e947", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/439e28b7510919e2ff69c82acef387d08cd1e947", "html_url": "https://github.com/rust-lang/rust/commit/439e28b7510919e2ff69c82acef387d08cd1e947", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/439e28b7510919e2ff69c82acef387d08cd1e947/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72a3667eb30705826a99bfa2b9478c4037589dbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/72a3667eb30705826a99bfa2b9478c4037589dbc", "html_url": "https://github.com/rust-lang/rust/commit/72a3667eb30705826a99bfa2b9478c4037589dbc"}], "stats": {"total": 17, "additions": 17, "deletions": 0}, "files": [{"sha": "709a5e637929b54f7643b3a2ac652f1c6e2ee51d", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/439e28b7510919e2ff69c82acef387d08cd1e947/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439e28b7510919e2ff69c82acef387d08cd1e947/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=439e28b7510919e2ff69c82acef387d08cd1e947", "patch": "@@ -208,6 +208,11 @@ fn type_of_inner(cx: @crate_ctxt, sp: span, t: ty::t)\n       ty::ty_opaque_closure. {\n         T_opaque_closure(cx)\n       }\n+      ty::ty_constr(subt,_) {\n+        // FIXME: could be a constraint on ty_fn\n+          check non_ty_var(cx, subt);\n+          type_of_inner(cx, sp, subt)\n+      }\n       _ {\n         fail \"type_of_inner not implemented for this kind of type\";\n       }"}, {"sha": "31c5755c6e02c576c9c5572e63e980d671a33c99", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/439e28b7510919e2ff69c82acef387d08cd1e947/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439e28b7510919e2ff69c82acef387d08cd1e947/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=439e28b7510919e2ff69c82acef387d08cd1e947", "patch": "@@ -818,6 +818,12 @@ fn fold_ty(cx: ctxt, fld: fold_mode, ty_0: t) -> t {\n       ty_param(id, did) {\n         alt fld { fm_param(folder) { ty = folder(id, did); } _ {} }\n       }\n+      ty_constr(subty, cs) {\n+          ty = mk_constr(cx, fold_ty(cx, fld, subty), cs);\n+      }\n+      _ {\n+          cx.sess.fatal(\"Unsupported sort of type in fold_ty\");\n+      }\n     }\n \n     // If this is a general type fold, then we need to run it now."}, {"sha": "a19b6ccbc7ba0cb5df9c6b252e27e31607accea4", "filename": "src/test/run-pass/issue-970.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/439e28b7510919e2ff69c82acef387d08cd1e947/src%2Ftest%2Frun-pass%2Fissue-970.rs", "raw_url": "https://github.com/rust-lang/rust/raw/439e28b7510919e2ff69c82acef387d08cd1e947/src%2Ftest%2Frun-pass%2Fissue-970.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-970.rs?ref=439e28b7510919e2ff69c82acef387d08cd1e947", "patch": "@@ -0,0 +1,6 @@\n+tag maybe_ordered_pair {\n+    yes({low: int, high: int} : less_than(*.low, *.high));\n+    no;\n+}\n+pure fn less_than(x: int, y: int) -> bool { ret x < y; }\n+fn main() { }"}]}