{"sha": "7777f952f0905e299dc95e4adfca7d4ef38b7168", "node_id": "C_kwDOAAsO6NoAKDc3NzdmOTUyZjA5MDVlMjk5ZGM5NWU0YWRmY2E3ZDRlZjM4YjcxNjg", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-09-26T01:22:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-26T01:22:17Z"}, "message": "Rollup merge of #88895 - camelid:cleanup-pt2, r=jyn514\n\nrustdoc: Cleanup `clean` part 2\n\nSplit out from #88379. This contains the following commits from that PR:\n\n- Remove `Type::ResolvedPath.is_generic`\n- Rename `is_generic()` to `is_assoc_ty()`\n\nr? `@jyn514`", "tree": {"sha": "891c2dfb8bbb28a8be03a4a72c496edbb3093273", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/891c2dfb8bbb28a8be03a4a72c496edbb3093273"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7777f952f0905e299dc95e4adfca7d4ef38b7168", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhT8tJCRBK7hj4Ov3rIwAAU1IIAKalW+TWN4MZPq0JQ0VKCvGN\n0JYLaNNYZjh+QOwWFRfPws+z7TUKTfkeP3peAZ4R32/5wDxVv2r1BRZaZxfUI2y7\nMSFv2NeEeOUX0z1AQOqU4Wr7u5Ziddfnhyux0nsHyzAIOlY1m+gglOWU+t1PNT8E\nSGJP1IOs0+70OnuGmzOv3tjpy/QxwmZ1rT3oCQ8AC0nkl73Yr5LAMthf7eJJmW04\n1OOY7yaDFbBxn8sj7KKkaZhnCk+LZSvZLfujdOSK9DybCpETxifT+d15Vuypuddc\nUo3lKQu0zlPsl22qLooParHg9BAVr5x8qBGXXaqmeQ0dON4UVOpg96whP9vGIbI=\n=kJiu\n-----END PGP SIGNATURE-----\n", "payload": "tree 891c2dfb8bbb28a8be03a4a72c496edbb3093273\nparent addb4da686a97da46159f0123cb6cdc2ce3d7fdb\nparent dace2ee674da9550618563babe351f313ede799d\nauthor Manish Goregaokar <manishsmail@gmail.com> 1632619337 -0700\ncommitter GitHub <noreply@github.com> 1632619337 -0700\n\nRollup merge of #88895 - camelid:cleanup-pt2, r=jyn514\n\nrustdoc: Cleanup `clean` part 2\n\nSplit out from #88379. This contains the following commits from that PR:\n\n- Remove `Type::ResolvedPath.is_generic`\n- Rename `is_generic()` to `is_assoc_ty()`\n\nr? `@jyn514`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7777f952f0905e299dc95e4adfca7d4ef38b7168", "html_url": "https://github.com/rust-lang/rust/commit/7777f952f0905e299dc95e4adfca7d4ef38b7168", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7777f952f0905e299dc95e4adfca7d4ef38b7168/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "addb4da686a97da46159f0123cb6cdc2ce3d7fdb", "url": "https://api.github.com/repos/rust-lang/rust/commits/addb4da686a97da46159f0123cb6cdc2ce3d7fdb", "html_url": "https://github.com/rust-lang/rust/commit/addb4da686a97da46159f0123cb6cdc2ce3d7fdb"}, {"sha": "dace2ee674da9550618563babe351f313ede799d", "url": "https://api.github.com/repos/rust-lang/rust/commits/dace2ee674da9550618563babe351f313ede799d", "html_url": "https://github.com/rust-lang/rust/commit/dace2ee674da9550618563babe351f313ede799d"}], "stats": {"total": 135, "additions": 56, "deletions": 79}, "files": [{"sha": "1436e51f31820b27c11003960e1fae161f9a4bc3", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=7777f952f0905e299dc95e4adfca7d4ef38b7168", "patch": "@@ -354,7 +354,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     let (poly_trait, output) =\n                         (data.0.as_ref().unwrap().clone(), data.1.as_ref().cloned().map(Box::new));\n                     let new_ty = match poly_trait.trait_ {\n-                        Type::ResolvedPath { ref path, ref did, ref is_generic } => {\n+                        Type::ResolvedPath { ref path, ref did } => {\n                             let mut new_path = path.clone();\n                             let last_segment =\n                                 new_path.segments.pop().expect(\"segments were empty\");\n@@ -389,11 +389,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                 .segments\n                                 .push(PathSegment { name: last_segment.name, args: new_params });\n \n-                            Type::ResolvedPath {\n-                                path: new_path,\n-                                did: *did,\n-                                is_generic: *is_generic,\n-                            }\n+                            Type::ResolvedPath { path: new_path, did: *did }\n                         }\n                         _ => panic!(\"Unexpected data: {:?}, {:?}\", ty, data),\n                     };\n@@ -563,11 +559,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                         Type::QPath { name: left_name, ref self_type, ref trait_, .. } => {\n                             let ty = &*self_type;\n                             match **trait_ {\n-                                Type::ResolvedPath {\n-                                    path: ref trait_path,\n-                                    ref did,\n-                                    ref is_generic,\n-                                } => {\n+                                Type::ResolvedPath { path: ref trait_path, ref did } => {\n                                     let mut new_trait_path = trait_path.clone();\n \n                                     if self.is_fn_ty(trait_) && left_name == sym::Output {\n@@ -612,7 +604,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                             trait_: Type::ResolvedPath {\n                                                 path: new_trait_path,\n                                                 did: *did,\n-                                                is_generic: *is_generic,\n                                             },\n                                             generic_params: Vec::new(),\n                                         },"}, {"sha": "611a4d08ab2255ee6612a4e81ab583bfd034748d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7777f952f0905e299dc95e4adfca7d4ef38b7168", "patch": "@@ -168,7 +168,7 @@ impl Clean<Type> for (ty::TraitRef<'_>, &[TypeBinding]) {\n \n         debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n \n-        ResolvedPath { path, did: trait_ref.def_id, is_generic: false }\n+        ResolvedPath { path, did: trait_ref.def_id }\n     }\n }\n \n@@ -1440,12 +1440,12 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n                 let path = external_path(cx, did, false, vec![], substs);\n-                ResolvedPath { path, did, is_generic: false }\n+                ResolvedPath { path, did }\n             }\n             ty::Foreign(did) => {\n                 inline::record_extern_fqn(cx, did, ItemType::ForeignType);\n                 let path = external_path(cx, did, false, vec![], InternalSubsts::empty());\n-                ResolvedPath { path, did, is_generic: false }\n+                ResolvedPath { path, did }\n             }\n             ty::Dynamic(ref obj, ref reg) => {\n                 // HACK: pick the first `did` as the `did` of the trait object. Someone\n@@ -1471,7 +1471,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     let path = external_path(cx, did, false, vec![], empty);\n                     inline::record_extern_fqn(cx, did, ItemType::Trait);\n                     let bound = PolyTrait {\n-                        trait_: ResolvedPath { path, did, is_generic: false },\n+                        trait_: ResolvedPath { path, did },\n                         generic_params: Vec::new(),\n                     };\n                     bounds.push(bound);\n@@ -1488,10 +1488,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 let path = external_path(cx, did, false, bindings, substs);\n                 bounds.insert(\n                     0,\n-                    PolyTrait {\n-                        trait_: ResolvedPath { path, did, is_generic: false },\n-                        generic_params: Vec::new(),\n-                    },\n+                    PolyTrait { trait_: ResolvedPath { path, did }, generic_params: Vec::new() },\n                 );\n \n                 DynTrait(bounds, lifetime)"}, {"sha": "fb2183ff2291b83707be86454c0ff4e80708e08e", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7777f952f0905e299dc95e4adfca7d4ef38b7168", "patch": "@@ -1114,10 +1114,7 @@ impl GenericBound {\n         let path = external_path(cx, did, false, vec![], empty);\n         inline::record_extern_fqn(cx, did, ItemType::Trait);\n         GenericBound::TraitBound(\n-            PolyTrait {\n-                trait_: ResolvedPath { path, did, is_generic: false },\n-                generic_params: Vec::new(),\n-            },\n+            PolyTrait { trait_: ResolvedPath { path, did }, generic_params: Vec::new() },\n             hir::TraitBoundModifier::Maybe,\n         )\n     }\n@@ -1384,8 +1381,6 @@ crate enum Type {\n     ResolvedPath {\n         path: Path,\n         did: DefId,\n-        /// `true` if is a `T::Name` path for associated types.\n-        is_generic: bool,\n     },\n     /// `dyn for<'a> Trait<'a> + Send + 'static`\n     DynTrait(Vec<PolyTrait>, Option<Lifetime>),\n@@ -1503,9 +1498,10 @@ impl Type {\n         }\n     }\n \n-    crate fn is_generic(&self) -> bool {\n-        match *self {\n-            ResolvedPath { is_generic, .. } => is_generic,\n+    /// Checks if this is a `T::Name` path for an associated type.\n+    crate fn is_assoc_ty(&self) -> bool {\n+        match self {\n+            ResolvedPath { path, .. } => path.is_assoc_ty(),\n             _ => false,\n         }\n     }\n@@ -1994,6 +1990,16 @@ impl Path {\n         String::from(if self.global { \"::\" } else { \"\" })\n             + &self.segments.iter().map(|s| s.name.to_string()).collect::<Vec<_>>().join(\"::\")\n     }\n+\n+    /// Checks if this is a `T::Name` path for an associated type.\n+    crate fn is_assoc_ty(&self) -> bool {\n+        match self.res {\n+            Res::SelfTy(..) if self.segments.len() != 1 => true,\n+            Res::Def(DefKind::TyParam, _) if self.segments.len() != 1 => true,\n+            Res::Def(DefKind::AssocTy, _) => true,\n+            _ => false,\n+        }\n+    }\n }\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]"}, {"sha": "33d460d587a5176e8727c272dd5acdf873d820e7", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=7777f952f0905e299dc95e4adfca7d4ef38b7168", "patch": "@@ -159,9 +159,7 @@ pub(super) fn external_path(\n \n crate fn strip_type(ty: Type) -> Type {\n     match ty {\n-        Type::ResolvedPath { path, did, is_generic } => {\n-            Type::ResolvedPath { path: strip_path(&path), did, is_generic }\n-        }\n+        Type::ResolvedPath { path, did } => Type::ResolvedPath { path: strip_path(&path), did },\n         Type::DynTrait(mut bounds, lt) => {\n             let first = bounds.remove(0);\n             let stripped_trait = strip_type(first.trait_);\n@@ -404,19 +402,15 @@ crate fn print_const_expr(tcx: TyCtxt<'_>, body: hir::BodyId) -> String {\n crate fn resolve_type(cx: &mut DocContext<'_>, path: Path) -> Type {\n     debug!(\"resolve_type({:?})\", path);\n \n-    let is_generic = match path.res {\n-        Res::PrimTy(p) => return Primitive(PrimitiveType::from(p)),\n-        Res::SelfTy(..) if path.segments.len() == 1 => {\n-            return Generic(kw::SelfUpper);\n-        }\n-        Res::Def(DefKind::TyParam, _) if path.segments.len() == 1 => {\n-            return Generic(path.segments[0].name);\n+    match path.res {\n+        Res::PrimTy(p) => Primitive(PrimitiveType::from(p)),\n+        Res::SelfTy(..) if path.segments.len() == 1 => Generic(kw::SelfUpper),\n+        Res::Def(DefKind::TyParam, _) if path.segments.len() == 1 => Generic(path.segments[0].name),\n+        _ => {\n+            let did = register_res(cx, path.res);\n+            ResolvedPath { path, did }\n         }\n-        Res::SelfTy(..) | Res::Def(DefKind::TyParam | DefKind::AssocTy, _) => true,\n-        _ => false,\n-    };\n-    let did = register_res(cx, path.res);\n-    ResolvedPath { path, did, is_generic }\n+    }\n }\n \n crate fn get_auto_trait_and_blanket_impls("}, {"sha": "d11781581a8df6c61daa151e3d22eb257bd1899f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 13, "deletions": 24, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=7777f952f0905e299dc95e4adfca7d4ef38b7168", "patch": "@@ -752,9 +752,9 @@ fn fmt_type<'cx>(\n \n     match *t {\n         clean::Generic(name) => write!(f, \"{}\", name),\n-        clean::ResolvedPath { did, ref path, is_generic } => {\n+        clean::ResolvedPath { did, ref path } => {\n             // Paths like `T::Output` and `Self::Output` should be rendered with all segments.\n-            resolved_path(f, did, path, is_generic, use_absolute, cx)\n+            resolved_path(f, did, path, path.is_assoc_ty(), use_absolute, cx)\n         }\n         clean::DynTrait(ref bounds, ref lt) => {\n             f.write_str(\"dyn \")?;\n@@ -825,28 +825,17 @@ fn fmt_type<'cx>(\n                 hir::Mutability::Mut => \"mut\",\n                 hir::Mutability::Not => \"const\",\n             };\n-            match **t {\n-                clean::Generic(_) | clean::ResolvedPath { is_generic: true, .. } => {\n-                    if f.alternate() {\n-                        primitive_link(\n-                            f,\n-                            clean::PrimitiveType::RawPointer,\n-                            &format!(\"*{} {:#}\", m, t.print(cx)),\n-                            cx,\n-                        )\n-                    } else {\n-                        primitive_link(\n-                            f,\n-                            clean::PrimitiveType::RawPointer,\n-                            &format!(\"*{} {}\", m, t.print(cx)),\n-                            cx,\n-                        )\n-                    }\n-                }\n-                _ => {\n-                    primitive_link(f, clean::PrimitiveType::RawPointer, &format!(\"*{} \", m), cx)?;\n-                    fmt::Display::fmt(&t.print(cx), f)\n-                }\n+\n+            if matches!(**t, clean::Generic(_)) || t.is_assoc_ty() {\n+                let text = if f.alternate() {\n+                    format!(\"*{} {:#}\", m, t.print(cx))\n+                } else {\n+                    format!(\"*{} {}\", m, t.print(cx))\n+                };\n+                primitive_link(f, clean::PrimitiveType::RawPointer, &text, cx)\n+            } else {\n+                primitive_link(f, clean::PrimitiveType::RawPointer, &format!(\"*{} \", m), cx)?;\n+                fmt::Display::fmt(&t.print(cx), f)\n             }\n         }\n         clean::BorrowedRef { lifetime: ref l, mutability, type_: ref ty } => {"}, {"sha": "8888b42d948cd0bb072c406ac8f5724cf5df304e", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=7777f952f0905e299dc95e4adfca7d4ef38b7168", "patch": "@@ -712,11 +712,10 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         let mut implementor_dups: FxHashMap<Symbol, (DefId, bool)> = FxHashMap::default();\n         for implementor in implementors {\n             match implementor.inner_impl().for_ {\n-                clean::ResolvedPath { ref path, did, is_generic: false, .. }\n+                clean::ResolvedPath { ref path, did, .. }\n                 | clean::BorrowedRef {\n-                    type_: box clean::ResolvedPath { ref path, did, is_generic: false, .. },\n-                    ..\n-                } => {\n+                    type_: box clean::ResolvedPath { ref path, did, .. }, ..\n+                } if !path.is_assoc_ty() => {\n                     let &mut (prev_did, ref mut has_duplicates) =\n                         implementor_dups.entry(path.last()).or_insert((did, false));\n                     if prev_did != did {\n@@ -1410,11 +1409,12 @@ fn render_implementor(\n     // If there's already another implementor that has the same abridged name, use the\n     // full path, for example in `std::iter::ExactSizeIterator`\n     let use_absolute = match implementor.inner_impl().for_ {\n-        clean::ResolvedPath { ref path, is_generic: false, .. }\n-        | clean::BorrowedRef {\n-            type_: box clean::ResolvedPath { ref path, is_generic: false, .. },\n-            ..\n-        } => implementor_dups[&path.last()].1,\n+        clean::ResolvedPath { ref path, .. }\n+        | clean::BorrowedRef { type_: box clean::ResolvedPath { ref path, .. }, .. }\n+            if !path.is_assoc_ty() =>\n+        {\n+            implementor_dups[&path.last()].1\n+        }\n         _ => false,\n     };\n     render_impl("}, {"sha": "fda9070305797ad417e811466eb329380b924d27", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=7777f952f0905e299dc95e4adfca7d4ef38b7168", "patch": "@@ -387,7 +387,7 @@ impl FromWithTcx<clean::Type> for Type {\n     fn from_tcx(ty: clean::Type, tcx: TyCtxt<'_>) -> Self {\n         use clean::Type::*;\n         match ty {\n-            ResolvedPath { path, did, is_generic: _ } => Type::ResolvedPath {\n+            ResolvedPath { path, did } => Type::ResolvedPath {\n                 name: path.whole_name(),\n                 id: from_item_id(did.into()),\n                 args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),"}, {"sha": "90300dbd16b136261991b283abfeda085b8f6578", "filename": "src/librustdoc/passes/stripper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7777f952f0905e299dc95e4adfca7d4ef38b7168/src%2Flibrustdoc%2Fpasses%2Fstripper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fstripper.rs?ref=7777f952f0905e299dc95e4adfca7d4ef38b7168", "patch": "@@ -128,7 +128,7 @@ impl<'a> DocFolder for ImplStripper<'a> {\n                 return None;\n             }\n             if let Some(did) = imp.for_.def_id() {\n-                if did.is_local() && !imp.for_.is_generic() && !self.retained.contains(&did.into())\n+                if did.is_local() && !imp.for_.is_assoc_ty() && !self.retained.contains(&did.into())\n                 {\n                     debug!(\"ImplStripper: impl item for stripped type; removing\");\n                     return None;"}]}