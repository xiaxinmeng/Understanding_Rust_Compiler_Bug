{"sha": "29a52f8d56e8fa45727c9f38df819a9f82a4eb6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YTUyZjhkNTZlOGZhNDU3MjdjOWYzOGRmODE5YTlmODJhNGViNmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-30T19:14:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-30T19:14:35Z"}, "message": "refine semi completion", "tree": {"sha": "fe00b007d5a699f75175c96a562a45c0ed1d880c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe00b007d5a699f75175c96a562a45c0ed1d880c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29a52f8d56e8fa45727c9f38df819a9f82a4eb6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29a52f8d56e8fa45727c9f38df819a9f82a4eb6f", "html_url": "https://github.com/rust-lang/rust/commit/29a52f8d56e8fa45727c9f38df819a9f82a4eb6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29a52f8d56e8fa45727c9f38df819a9f82a4eb6f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0d1b17a4e976e07966a1d7f545b6e01d278fd08", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d1b17a4e976e07966a1d7f545b6e01d278fd08", "html_url": "https://github.com/rust-lang/rust/commit/c0d1b17a4e976e07966a1d7f545b6e01d278fd08"}], "stats": {"total": 50, "additions": 34, "deletions": 16}, "files": [{"sha": "d70fdaada37875aab159ddaa2eea2b218b1e772c", "filename": "crates/ra_analysis/src/completion/complete_keyword.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29a52f8d56e8fa45727c9f38df819a9f82a4eb6f/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a52f8d56e8fa45727c9f38df819a9f82a4eb6f/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=29a52f8d56e8fa45727c9f38df819a9f82a4eb6f", "patch": "@@ -191,6 +191,24 @@ mod tests {\n             return \"return $0;\"\n             \"#,\n         );\n+        check_keyword_completion(\n+            r\"\n+            fn quux() -> i32 {\n+                if condition {\n+                    <|>\n+                }\n+                let x = 92;\n+                x\n+            }\n+            \",\n+            r#\"\n+            if \"if $0 {}\"\n+            match \"match $0 {}\"\n+            while \"while $0 {}\"\n+            loop \"loop {$0}\"\n+            return \"return $0;\"\n+            \"#,\n+        );\n     }\n \n     #[test]"}, {"sha": "4584f355d9d7bbbb93f94fb0de29c11ca61abd0b", "filename": "crates/ra_analysis/src/completion/completion_context.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/29a52f8d56e8fa45727c9f38df819a9f82a4eb6f/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29a52f8d56e8fa45727c9f38df819a9f82a4eb6f/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=29a52f8d56e8fa45727c9f38df819a9f82a4eb6f", "patch": "@@ -148,24 +148,24 @@ impl<'a> CompletionContext<'a> {\n             if path.qualifier().is_none() {\n                 self.is_trivial_path = true;\n \n-                self.can_be_stmt = match name_ref\n+                // Find either enclosing expr statement (thing with `;`) or a\n+                // block. If block, check that we are the last expr.\n+                self.can_be_stmt = name_ref\n                     .syntax()\n                     .ancestors()\n-                    .filter_map(ast::ExprStmt::cast)\n-                    .next()\n-                {\n-                    None => {\n-                        name_ref\n-                            .syntax()\n-                            .ancestors()\n-                            .filter_map(ast::Block::cast)\n-                            .next()\n-                            .and_then(|block| block.expr())\n-                            .map(|e| e.syntax().range())\n-                            == Some(name_ref.syntax().range())\n-                    }\n-                    Some(expr_stmt) => expr_stmt.syntax().range() == name_ref.syntax().range(),\n-                };\n+                    .find_map(|node| {\n+                        if let Some(stmt) = ast::ExprStmt::cast(node) {\n+                            return Some(stmt.syntax().range() == name_ref.syntax().range());\n+                        }\n+                        if let Some(block) = ast::Block::cast(node) {\n+                            return Some(\n+                                block.expr().map(|e| e.syntax().range())\n+                                    == Some(name_ref.syntax().range()),\n+                            );\n+                        }\n+                        None\n+                    })\n+                    .unwrap_or(false);\n \n                 if let Some(off) = name_ref.syntax().range().start().checked_sub(2.into()) {\n                     if let Some(if_expr) ="}]}