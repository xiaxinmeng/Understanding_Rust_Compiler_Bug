{"sha": "b01976aa267620719afdd0effcc0501648bbefd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwMTk3NmFhMjY3NjIwNzE5YWZkZDBlZmZjYzA1MDE2NDhiYmVmZDQ=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-01-30T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-01-30T00:00:00Z"}, "message": "Precompute ancestors when checking privacy\n\nPrecompute ancestors of the old error node set so that check for private\ntypes and traits in public interfaces can in constant time determine if\nthe current item has any descendants in the old error set.\n\nNo functional changes intended.", "tree": {"sha": "6222a085d624dd11f8b8ad8955728f90b96d8fc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6222a085d624dd11f8b8ad8955728f90b96d8fc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b01976aa267620719afdd0effcc0501648bbefd4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b01976aa267620719afdd0effcc0501648bbefd4", "html_url": "https://github.com/rust-lang/rust/commit/b01976aa267620719afdd0effcc0501648bbefd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b01976aa267620719afdd0effcc0501648bbefd4/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd20a8be0d74a7026267af5c9a0cd251eeaba7c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd20a8be0d74a7026267af5c9a0cd251eeaba7c6", "html_url": "https://github.com/rust-lang/rust/commit/fd20a8be0d74a7026267af5c9a0cd251eeaba7c6"}], "stats": {"total": 54, "additions": 21, "deletions": 33}, "files": [{"sha": "3317ac2af18e5dd923778506a44d4bf89af1c615", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 21, "deletions": 33, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b01976aa267620719afdd0effcc0501648bbefd4/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b01976aa267620719afdd0effcc0501648bbefd4/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=b01976aa267620719afdd0effcc0501648bbefd4", "patch": "@@ -1822,49 +1822,26 @@ impl DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {\n     }\n }\n \n-struct PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n+struct PrivateItemsInPublicInterfacesVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     has_pub_restricted: bool,\n-    old_error_set: &'a HirIdSet,\n+    old_error_set_ancestry: HirIdSet,\n }\n \n-impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n+impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {\n     fn check(\n         &self,\n         item_id: hir::HirId,\n         required_visibility: ty::Visibility,\n     ) -> SearchInterfaceForPrivateItemsVisitor<'tcx> {\n-        let mut has_old_errors = false;\n-\n-        // Slow path taken only if there any errors in the crate.\n-        for &id in self.old_error_set {\n-            // Walk up the nodes until we find `item_id` (or we hit a root).\n-            let mut id = id;\n-            loop {\n-                if id == item_id {\n-                    has_old_errors = true;\n-                    break;\n-                }\n-                let parent = self.tcx.hir().get_parent_node(id);\n-                if parent == id {\n-                    break;\n-                }\n-                id = parent;\n-            }\n-\n-            if has_old_errors {\n-                break;\n-            }\n-        }\n-\n         SearchInterfaceForPrivateItemsVisitor {\n             tcx: self.tcx,\n             item_id,\n             item_def_id: self.tcx.hir().local_def_id(item_id).to_def_id(),\n             span: self.tcx.hir().span(item_id),\n             required_visibility,\n             has_pub_restricted: self.has_pub_restricted,\n-            has_old_errors,\n+            has_old_errors: self.old_error_set_ancestry.contains(&item_id),\n             in_assoc_ty: false,\n         }\n     }\n@@ -1890,7 +1867,7 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for PrivateItemsInPublicInterfacesVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -2114,11 +2091,22 @@ fn check_private_in_public(tcx: TyCtxt<'_>, krate: CrateNum) {\n         pub_restricted_visitor.has_pub_restricted\n     };\n \n+    let mut old_error_set_ancestry = HirIdSet::default();\n+    for mut id in visitor.old_error_set.iter().copied() {\n+        loop {\n+            if !old_error_set_ancestry.insert(id) {\n+                break;\n+            }\n+            let parent = tcx.hir().get_parent_node(id);\n+            if parent == id {\n+                break;\n+            }\n+            id = parent;\n+        }\n+    }\n+\n     // Check for private types and traits in public interfaces.\n-    let mut visitor = PrivateItemsInPublicInterfacesVisitor {\n-        tcx,\n-        has_pub_restricted,\n-        old_error_set: &visitor.old_error_set,\n-    };\n+    let mut visitor =\n+        PrivateItemsInPublicInterfacesVisitor { tcx, has_pub_restricted, old_error_set_ancestry };\n     krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n }"}]}