{"sha": "70e02cf4457e4c354c74da3c2121f1e373ad7f63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZTAyY2Y0NDU3ZTRjMzU0Yzc0ZGEzYzIxMjFmMWUzNzNhZDdmNjM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-04-30T14:49:19Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-15T03:10:46Z"}, "message": "rustc: rename a method receiver type to rcvr_ty", "tree": {"sha": "9c0ef6eb755325cc40e93f60cd29eb51023443e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c0ef6eb755325cc40e93f60cd29eb51023443e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70e02cf4457e4c354c74da3c2121f1e373ad7f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70e02cf4457e4c354c74da3c2121f1e373ad7f63", "html_url": "https://github.com/rust-lang/rust/commit/70e02cf4457e4c354c74da3c2121f1e373ad7f63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70e02cf4457e4c354c74da3c2121f1e373ad7f63/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d19f44c9dbe780cbed3ee44d7a7684e178a8832", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d19f44c9dbe780cbed3ee44d7a7684e178a8832", "html_url": "https://github.com/rust-lang/rust/commit/8d19f44c9dbe780cbed3ee44d7a7684e178a8832"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "88e4a8094db9ce3c2b0208754b67edaf49025a01", "filename": "src/librustc/middle/typeck/check/method.rs", "status": "modified", "additions": 20, "deletions": 18, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/70e02cf4457e4c354c74da3c2121f1e373ad7f63/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70e02cf4457e4c354c74da3c2121f1e373ad7f63/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=70e02cf4457e4c354c74da3c2121f1e373ad7f63", "patch": "@@ -830,26 +830,26 @@ pub impl<'self> LookupContext<'self> {\n     }\n \n     fn search_for_method(&self,\n-                         self_ty: ty::t)\n+                         rcvr_ty: ty::t)\n         -> Option<method_map_entry>\n     {\n-        debug!(\"search_for_method(self_ty=%s)\", self.ty_to_str(self_ty));\n+        debug!(\"search_for_method(rcvr_ty=%s)\", self.ty_to_str(rcvr_ty));\n         let _indenter = indenter();\n \n         // I am not sure that inherent methods should have higher\n         // priority, but it is necessary ATM to handle some of the\n         // existing code.\n \n         debug!(\"searching inherent candidates\");\n-        match self.consider_candidates(self_ty, self.inherent_candidates) {\n+        match self.consider_candidates(rcvr_ty, self.inherent_candidates) {\n             None => {}\n             Some(mme) => {\n                 return Some(mme);\n             }\n         }\n \n         debug!(\"searching extension candidates\");\n-        match self.consider_candidates(self_ty, self.extension_candidates) {\n+        match self.consider_candidates(rcvr_ty, self.extension_candidates) {\n             None => {\n                 return None;\n             }\n@@ -860,12 +860,12 @@ pub impl<'self> LookupContext<'self> {\n     }\n \n     fn consider_candidates(&self,\n-                           self_ty: ty::t,\n+                           rcvr_ty: ty::t,\n                            candidates: &mut ~[Candidate])\n         -> Option<method_map_entry>\n     {\n         let relevant_candidates =\n-            candidates.filter_to_vec(|c| self.is_relevant(self_ty, c));\n+            candidates.filter_to_vec(|c| self.is_relevant(rcvr_ty, c));\n \n         let relevant_candidates = self.merge_candidates(relevant_candidates);\n \n@@ -882,7 +882,7 @@ pub impl<'self> LookupContext<'self> {\n             }\n         }\n \n-        Some(self.confirm_candidate(self_ty, &relevant_candidates[0]))\n+        Some(self.confirm_candidate(rcvr_ty, &relevant_candidates[0]))\n     }\n \n     fn merge_candidates(&self, candidates: &[Candidate]) -> ~[Candidate] {\n@@ -932,7 +932,7 @@ pub impl<'self> LookupContext<'self> {\n     }\n \n     fn confirm_candidate(&self,\n-                         self_ty: ty::t,\n+                         rcvr_ty: ty::t,\n                          candidate: &Candidate)\n         -> method_map_entry\n     {\n@@ -1041,11 +1041,11 @@ pub impl<'self> LookupContext<'self> {\n         // nothing has changed in the meantime, this unification\n         // should never fail.\n         match self.fcx.mk_subty(false, self.self_expr.span,\n-                                self_ty, transformed_self_ty) {\n+                                rcvr_ty, transformed_self_ty) {\n             result::Ok(_) => (),\n             result::Err(_) => {\n                 self.bug(fmt!(\"%s was a subtype of %s but now is not?\",\n-                              self.ty_to_str(self_ty),\n+                              self.ty_to_str(rcvr_ty),\n                               self.ty_to_str(transformed_self_ty)));\n             }\n         }\n@@ -1114,9 +1114,11 @@ pub impl<'self> LookupContext<'self> {\n         }\n     }\n \n-    fn is_relevant(&self, self_ty: ty::t, candidate: &Candidate) -> bool {\n-        debug!(\"is_relevant(self_ty=%s, candidate=%s)\",\n-               self.ty_to_str(self_ty), self.cand_to_str(candidate));\n+    // `rcvr_ty` is the type of the expression. It may be a subtype of a\n+    // candidate method's `self_ty`.\n+    fn is_relevant(&self, rcvr_ty: ty::t, candidate: &Candidate) -> bool {\n+        debug!(\"is_relevant(rcvr_ty=%s, candidate=%s)\",\n+               self.ty_to_str(rcvr_ty), self.cand_to_str(candidate));\n \n         // Check for calls to object methods.  We resolve these differently.\n         //\n@@ -1134,7 +1136,7 @@ pub impl<'self> LookupContext<'self> {\n                         // an &@Trait receiver (wacky)\n                     }\n                     sty_box(*) | sty_uniq(*) => {\n-                        return self.fcx.can_mk_subty(self_ty,\n+                        return self.fcx.can_mk_subty(rcvr_ty,\n                                                      candidate.rcvr_ty).is_ok();\n                     }\n                 };\n@@ -1148,11 +1150,11 @@ pub impl<'self> LookupContext<'self> {\n             }\n \n             sty_value => {\n-                self.fcx.can_mk_subty(self_ty, candidate.rcvr_ty).is_ok()\n+                self.fcx.can_mk_subty(rcvr_ty, candidate.rcvr_ty).is_ok()\n             }\n \n             sty_region(_, m) => {\n-                match ty::get(self_ty).sty {\n+                match ty::get(rcvr_ty).sty {\n                     ty::ty_rptr(_, mt) => {\n                         mutability_matches(mt.mutbl, m) &&\n                         self.fcx.can_mk_subty(mt.ty, candidate.rcvr_ty).is_ok()\n@@ -1163,7 +1165,7 @@ pub impl<'self> LookupContext<'self> {\n             }\n \n             sty_box(m) => {\n-                match ty::get(self_ty).sty {\n+                match ty::get(rcvr_ty).sty {\n                     ty::ty_box(mt) => {\n                         mutability_matches(mt.mutbl, m) &&\n                         self.fcx.can_mk_subty(mt.ty, candidate.rcvr_ty).is_ok()\n@@ -1174,7 +1176,7 @@ pub impl<'self> LookupContext<'self> {\n             }\n \n             sty_uniq(m) => {\n-                match ty::get(self_ty).sty {\n+                match ty::get(rcvr_ty).sty {\n                     ty::ty_uniq(mt) => {\n                         mutability_matches(mt.mutbl, m) &&\n                         self.fcx.can_mk_subty(mt.ty, candidate.rcvr_ty).is_ok()"}]}