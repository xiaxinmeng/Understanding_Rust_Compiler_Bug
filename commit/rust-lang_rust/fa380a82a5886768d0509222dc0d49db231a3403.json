{"sha": "fa380a82a5886768d0509222dc0d49db231a3403", "node_id": "C_kwDOAAsO6NoAKGZhMzgwYTgyYTU4ODY3NjhkMDUwOTIyMmRjMGQ0OWRiMjMxYTM0MDM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-07-17T22:58:59Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-10-09T13:05:52Z"}, "message": "Start uplifting `clippy::for_loops_over_fallibles`\n\nI refactored the code:\n- Removed handling of methods, as it felt entirely unnecessary\n- Removed clippy utils (obviously...)\n- Used some shiny compiler features\n  (let-else is very handy for lints :eyes:)\n- I also renamed the lint to `for_loop_over_fallibles` (note: no `s`).\n  I'm not sure what's the naming convention here, so maybe I'm wrong.", "tree": {"sha": "28e81f50e84957430fa67eecc65ac233c3bae7ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28e81f50e84957430fa67eecc65ac233c3bae7ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa380a82a5886768d0509222dc0d49db231a3403", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa380a82a5886768d0509222dc0d49db231a3403", "html_url": "https://github.com/rust-lang/rust/commit/fa380a82a5886768d0509222dc0d49db231a3403", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa380a82a5886768d0509222dc0d49db231a3403/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "html_url": "https://github.com/rust-lang/rust/commit/c0784109daa00f2e43c1b55becc2169bc5b3bf6f"}], "stats": {"total": 102, "additions": 102, "deletions": 0}, "files": [{"sha": "c96c9efe1d8a13ee7270d5e7fa072f6518abf9dc", "filename": "compiler/rustc_lint/src/for_loop_over_fallibles.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/fa380a82a5886768d0509222dc0d49db231a3403/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa380a82a5886768d0509222dc0d49db231a3403/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ffor_loop_over_fallibles.rs?ref=fa380a82a5886768d0509222dc0d49db231a3403", "patch": "@@ -0,0 +1,99 @@\n+use crate::{LateContext, LateLintPass, LintContext};\n+\n+use hir::{Expr, Pat};\n+use rustc_hir as hir;\n+use rustc_middle::ty;\n+use rustc_span::sym;\n+\n+declare_lint! {\n+    /// ### What it does\n+    ///\n+    /// Checks for `for` loops over `Option` or `Result` values.\n+    ///\n+    /// ### Why is this bad?\n+    /// Readability. This is more clearly expressed as an `if\n+    /// let`.\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust\n+    /// # let opt = Some(1);\n+    /// # let res: Result<i32, std::io::Error> = Ok(1);\n+    /// for x in opt {\n+    ///     // ..\n+    /// }\n+    ///\n+    /// for x in &res {\n+    ///     // ..\n+    /// }\n+    ///\n+    /// for x in res.iter() {\n+    ///     // ..\n+    /// }\n+    /// ```\n+    ///\n+    /// Use instead:\n+    /// ```rust\n+    /// # let opt = Some(1);\n+    /// # let res: Result<i32, std::io::Error> = Ok(1);\n+    /// if let Some(x) = opt {\n+    ///     // ..\n+    /// }\n+    ///\n+    /// if let Ok(x) = res {\n+    ///     // ..\n+    /// }\n+    /// ```\n+    pub FOR_LOOP_OVER_FALLIBLES,\n+    Warn,\n+    \"for-looping over an `Option` or a `Result`, which is more clearly expressed as an `if let`\"\n+}\n+\n+declare_lint_pass!(ForLoopOverFallibles => [FOR_LOOP_OVER_FALLIBLES]);\n+\n+impl<'tcx> LateLintPass<'tcx> for ForLoopOverFallibles {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        let Some((pat, arg)) = extract_for_loop(expr) else { return };\n+\n+        let ty = cx.typeck_results().expr_ty(arg);\n+\n+        let ty::Adt(adt, _) = ty.kind() else { return };\n+\n+        let (article, ty, var) = match adt.did() {\n+            did if cx.tcx.is_diagnostic_item(sym::Option, did) => (\"an\", \"Option\", \"Some\"),\n+            did if cx.tcx.is_diagnostic_item(sym::Result, did) => (\"a\", \"Result\", \"Ok\"),\n+            _ => return,\n+        };\n+\n+        let Ok(pat_snip) = cx.sess().source_map().span_to_snippet(pat.span) else { return };\n+        let Ok(arg_snip) = cx.sess().source_map().span_to_snippet(arg.span) else { return };\n+\n+        let help_string = format!(\n+            \"consider replacing `for {pat_snip} in {arg_snip}` with `if let {var}({pat_snip}) = {arg_snip}`\"\n+        );\n+        let msg = format!(\n+            \"for loop over `{arg_snip}`, which is {article} `{ty}`. This is more readably written as an `if let` statement\",\n+        );\n+\n+        cx.struct_span_lint(FOR_LOOP_OVER_FALLIBLES, arg.span, |diag| {\n+            diag.build(msg).help(help_string).emit()\n+        })\n+    }\n+}\n+\n+fn extract_for_loop<'tcx>(expr: &Expr<'tcx>) -> Option<(&'tcx Pat<'tcx>, &'tcx Expr<'tcx>)> {\n+    if let hir::ExprKind::DropTemps(e) = expr.kind\n+    && let hir::ExprKind::Match(iterexpr, [arm], hir::MatchSource::ForLoopDesugar) = e.kind\n+    && let hir::ExprKind::Call(_, [arg]) = iterexpr.kind\n+    && let hir::ExprKind::Loop(block, ..) = arm.body.kind\n+    && let [stmt] = block.stmts\n+    && let hir::StmtKind::Expr(e) = stmt.kind\n+    && let hir::ExprKind::Match(_, [_, some_arm], _) = e.kind\n+    && let hir::PatKind::Struct(_, [field], _) = some_arm.pat.kind \n+    {\n+        Some((field.pat, arg))\n+    } else {\n+        None\n+    }\n+    \n+}\n\\ No newline at end of file"}, {"sha": "ecc64511d7f7218a89e072646410946e32a5a336", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fa380a82a5886768d0509222dc0d49db231a3403/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa380a82a5886768d0509222dc0d49db231a3403/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=fa380a82a5886768d0509222dc0d49db231a3403", "patch": "@@ -52,6 +52,7 @@ mod early;\n mod enum_intrinsics_non_enums;\n mod errors;\n mod expect;\n+mod for_loop_over_fallibles;\n pub mod hidden_unicode_codepoints;\n mod internal;\n mod late;\n@@ -86,6 +87,7 @@ use rustc_span::Span;\n use array_into_iter::ArrayIntoIter;\n use builtin::*;\n use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n+use for_loop_over_fallibles::*;\n use hidden_unicode_codepoints::*;\n use internal::*;\n use let_underscore::*;\n@@ -188,6 +190,7 @@ macro_rules! late_lint_mod_passes {\n         $macro!(\n             $args,\n             [\n+                ForLoopOverFallibles: ForLoopOverFallibles,\n                 HardwiredLints: HardwiredLints,\n                 ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n                 ImproperCTypesDefinitions: ImproperCTypesDefinitions,"}]}