{"sha": "d655749aaeb31461f9af923bbf0b36d219cff343", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NTU3NDlhYWViMzE0NjFmOWFmOTIzYmJmMGIzNmQyMTljZmYzNDM=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-03-16T11:22:10Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2020-03-16T17:38:19Z"}, "message": "Turn ExpandResult into struct", "tree": {"sha": "d7f8e8a11bd4794567fb24ac29b2b85ebd247881", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7f8e8a11bd4794567fb24ac29b2b85ebd247881"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d655749aaeb31461f9af923bbf0b36d219cff343", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d655749aaeb31461f9af923bbf0b36d219cff343", "html_url": "https://github.com/rust-lang/rust/commit/d655749aaeb31461f9af923bbf0b36d219cff343", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d655749aaeb31461f9af923bbf0b36d219cff343/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3c6a2e3dbe477a7e0ac714a5bdbda6e8838fcfa", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3c6a2e3dbe477a7e0ac714a5bdbda6e8838fcfa", "html_url": "https://github.com/rust-lang/rust/commit/f3c6a2e3dbe477a7e0ac714a5bdbda6e8838fcfa"}], "stats": {"total": 106, "additions": 63, "deletions": 43}, "files": [{"sha": "d171d2dfd1db4f880a715b5d66317181858248a1", "filename": "crates/ra_hir_expand/src/db.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d655749aaeb31461f9af923bbf0b36d219cff343/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d655749aaeb31461f9af923bbf0b36d219cff343/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdb.rs?ref=d655749aaeb31461f9af923bbf0b36d219cff343", "patch": "@@ -2,7 +2,7 @@\n \n use std::sync::Arc;\n \n-use mbe::MacroRules;\n+use mbe::{ExpandResult, MacroRules};\n use ra_db::{salsa, SourceDatabase};\n use ra_parser::FragmentKind;\n use ra_prof::profile;\n@@ -31,12 +31,8 @@ impl TokenExpander {\n         match self {\n             TokenExpander::MacroRules(it) => it.expand(tt),\n             // FIXME switch these to ExpandResult as well\n-            TokenExpander::Builtin(it) => it\n-                .expand(db, id, tt)\n-                .map_or_else(|e| (tt::Subtree::default(), Some(e)), |r| (r, None)),\n-            TokenExpander::BuiltinDerive(it) => it\n-                .expand(db, id, tt)\n-                .map_or_else(|e| (tt::Subtree::default(), Some(e)), |r| (r, None)),\n+            TokenExpander::Builtin(it) => it.expand(db, id, tt).into(),\n+            TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt).into(),\n         }\n     }\n \n@@ -204,7 +200,7 @@ fn macro_expand_with_arg(\n         Some(it) => it,\n         None => return (None, Some(\"Fail to find macro definition\".into())),\n     };\n-    let (tt, err) = macro_rules.0.expand(db, lazy_id, &macro_arg.0);\n+    let ExpandResult(tt, err) = macro_rules.0.expand(db, lazy_id, &macro_arg.0);\n     // Set a hard limit for the expanded tt\n     let count = tt.count();\n     if count > 65536 {"}, {"sha": "6a9037bfc83621eb92e127f5128bdbef657bbf0c", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d655749aaeb31461f9af923bbf0b36d219cff343/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d655749aaeb31461f9af923bbf0b36d219cff343/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=d655749aaeb31461f9af923bbf0b36d219cff343", "patch": "@@ -30,8 +30,6 @@ pub enum ExpandError {\n     InvalidRepeat,\n }\n \n-pub type ExpandResult<T> = (T, Option<ExpandError>);\n-\n pub use crate::syntax_bridge::{\n     ast_to_token_tree, parse_to_token_tree, syntax_node_to_token_tree, token_tree_to_syntax_node,\n     TokenMap,\n@@ -211,5 +209,35 @@ fn validate(pattern: &tt::Subtree) -> Result<(), ParseError> {\n     Ok(())\n }\n \n+pub struct ExpandResult<T>(pub T, pub Option<ExpandError>);\n+\n+impl<T> ExpandResult<T> {\n+    pub fn ok(t: T) -> ExpandResult<T> {\n+        ExpandResult(t, None)\n+    }\n+\n+    pub fn only_err(err: ExpandError) -> ExpandResult<T>\n+    where\n+        T: Default,\n+    {\n+        ExpandResult(Default::default(), Some(err))\n+    }\n+\n+    pub fn map<U>(self, f: impl FnOnce(T) -> U) -> ExpandResult<U> {\n+        ExpandResult(f(self.0), self.1)\n+    }\n+\n+    pub fn result(self) -> Result<T, ExpandError> {\n+        self.1.map(Err).unwrap_or(Ok(self.0))\n+    }\n+}\n+\n+impl<T: Default> From<Result<T, ExpandError>> for ExpandResult<T> {\n+    fn from(result: Result<T, ExpandError>) -> ExpandResult<T> {\n+        result\n+            .map_or_else(|e| ExpandResult(Default::default(), Some(e)), |it| ExpandResult(it, None))\n+    }\n+}\n+\n #[cfg(test)]\n mod tests;"}, {"sha": "0a4d73dda24f7a4ca6442fde16ef94da693477c8", "filename": "crates/ra_mbe/src/mbe_expander.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d655749aaeb31461f9af923bbf0b36d219cff343/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d655749aaeb31461f9af923bbf0b36d219cff343/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander.rs?ref=d655749aaeb31461f9af923bbf0b36d219cff343", "patch": "@@ -18,12 +18,13 @@ fn expand_rules(rules: &[crate::Rule], input: &tt::Subtree) -> ExpandResult<tt::\n     let mut match_: Option<(matcher::Match, &crate::Rule)> = None;\n     let mut err = Some(ExpandError::NoMatchingRule);\n     for rule in rules {\n-        let (new_match, bindings_err) = matcher::match_(&rule.lhs, input);\n+        let ExpandResult(new_match, bindings_err) = matcher::match_(&rule.lhs, input);\n         if bindings_err.is_none() {\n             // if we find a rule that applies without errors, we're done\n-            let (res, transcribe_err) = transcriber::transcribe(&rule.rhs, &new_match.bindings);\n+            let ExpandResult(res, transcribe_err) =\n+                transcriber::transcribe(&rule.rhs, &new_match.bindings);\n             if transcribe_err.is_none() {\n-                return (res, None);\n+                return ExpandResult::ok(res);\n             }\n         }\n         // use the rule if we matched more tokens, or had fewer patterns left\n@@ -43,10 +44,11 @@ fn expand_rules(rules: &[crate::Rule], input: &tt::Subtree) -> ExpandResult<tt::\n     }\n     if let Some((match_, rule)) = match_ {\n         // if we got here, there was no match without errors\n-        let (result, transcribe_err) = transcriber::transcribe(&rule.rhs, &match_.bindings);\n-        (result, err.or(transcribe_err))\n+        let ExpandResult(result, transcribe_err) =\n+            transcriber::transcribe(&rule.rhs, &match_.bindings);\n+        ExpandResult(result, err.or(transcribe_err))\n     } else {\n-        (tt::Subtree::default(), err)\n+        ExpandResult(tt::Subtree::default(), err)\n     }\n }\n \n@@ -171,6 +173,6 @@ mod tests {\n             ast_to_token_tree(&macro_invocation.token_tree().unwrap()).unwrap();\n \n         let expanded = expand_rules(&rules.rules, &invocation_tt);\n-        (expanded.0, expanded.1)\n+        expanded\n     }\n }"}, {"sha": "22fb5d74cf75763a9470cb46bb03f29f9d9bdb7c", "filename": "crates/ra_mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d655749aaeb31461f9af923bbf0b36d219cff343/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d655749aaeb31461f9af923bbf0b36d219cff343/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=d655749aaeb31461f9af923bbf0b36d219cff343", "patch": "@@ -79,7 +79,7 @@ pub(super) fn match_(pattern: &tt::Subtree, src: &tt::Subtree) -> ExpandResult<M\n         err = Some(err!(\"leftover tokens\"));\n     }\n \n-    (res, err)\n+    ExpandResult(res, err)\n }\n \n fn match_subtree(\n@@ -148,7 +148,7 @@ fn match_subtree(\n                         continue;\n                     }\n                 };\n-                let (matched, match_err) = match_meta_var(kind.as_str(), src);\n+                let ExpandResult(matched, match_err) = match_meta_var(kind.as_str(), src);\n                 match matched {\n                     Some(fragment) => {\n                         res.bindings.inner.insert(name.clone(), Binding::Fragment(fragment));\n@@ -308,17 +308,17 @@ impl<'a> TtIter<'a> {\n                 token_trees: res.into_iter().cloned().collect(),\n             })),\n         };\n-        (res, err)\n+        ExpandResult(res, err)\n     }\n \n     pub(crate) fn eat_vis(&mut self) -> Option<tt::TokenTree> {\n         let mut fork = self.clone();\n         match fork.expect_fragment(Visibility) {\n-            (tt, None) => {\n+            ExpandResult(tt, None) => {\n                 *self = fork;\n                 tt\n             }\n-            (_, Some(_)) => None,\n+            ExpandResult(_, Some(_)) => None,\n         }\n     }\n }\n@@ -419,12 +419,11 @@ fn match_meta_var(kind: &str, input: &mut TtIter) -> ExpandResult<Option<Fragmen\n                 },\n                 _ => Err(ExpandError::UnexpectedToken),\n             };\n-            return to_expand_result(tt_result.map(|it| it.map(Fragment::Tokens)));\n+            return tt_result.map(|it| it.map(Fragment::Tokens)).into();\n         }\n     };\n-    let (tt, err) = input.expect_fragment(fragment);\n-    let fragment = if kind == \"expr\" { tt.map(Fragment::Ast) } else { tt.map(Fragment::Tokens) };\n-    (fragment, err)\n+    let result = input.expect_fragment(fragment);\n+    result.map(|tt| if kind == \"expr\" { tt.map(Fragment::Ast) } else { tt.map(Fragment::Tokens) })\n }\n \n fn collect_vars(buf: &mut Vec<SmolStr>, pattern: &tt::Subtree) -> Result<(), ExpandError> {\n@@ -438,7 +437,3 @@ fn collect_vars(buf: &mut Vec<SmolStr>, pattern: &tt::Subtree) -> Result<(), Exp\n     }\n     Ok(())\n }\n-\n-fn to_expand_result<T: Default>(result: Result<T, ExpandError>) -> ExpandResult<T> {\n-    result.map_or_else(|e| (Default::default(), Some(e)), |it| (it, None))\n-}"}, {"sha": "4b173edd3f9103b6eb7b84d474d51884d97cb25b", "filename": "crates/ra_mbe/src/mbe_expander/transcriber.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d655749aaeb31461f9af923bbf0b36d219cff343/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d655749aaeb31461f9af923bbf0b36d219cff343/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Ftranscriber.rs?ref=d655749aaeb31461f9af923bbf0b36d219cff343", "patch": "@@ -87,23 +87,23 @@ fn expand_subtree(ctx: &mut ExpandCtx, template: &tt::Subtree) -> ExpandResult<t\n         match op {\n             Op::TokenTree(tt @ tt::TokenTree::Leaf(..)) => buf.push(tt.clone()),\n             Op::TokenTree(tt::TokenTree::Subtree(tt)) => {\n-                let (tt, e) = expand_subtree(ctx, tt);\n+                let ExpandResult(tt, e) = expand_subtree(ctx, tt);\n                 err = err.or(e);\n                 buf.push(tt.into());\n             }\n             Op::Var { name, kind: _ } => {\n-                let (fragment, e) = expand_var(ctx, name);\n+                let ExpandResult(fragment, e) = expand_var(ctx, name);\n                 err = err.or(e);\n                 push_fragment(&mut buf, fragment);\n             }\n             Op::Repeat { subtree, kind, separator } => {\n-                let (fragment, e) = expand_repeat(ctx, subtree, kind, separator);\n+                let ExpandResult(fragment, e) = expand_repeat(ctx, subtree, kind, separator);\n                 err = err.or(e);\n                 push_fragment(&mut buf, fragment)\n             }\n         }\n     }\n-    (tt::Subtree { delimiter: template.delimiter, token_trees: buf }, err)\n+    ExpandResult(tt::Subtree { delimiter: template.delimiter, token_trees: buf }, err)\n }\n \n fn expand_var(ctx: &mut ExpandCtx, v: &SmolStr) -> ExpandResult<Fragment> {\n@@ -112,7 +112,7 @@ fn expand_var(ctx: &mut ExpandCtx, v: &SmolStr) -> ExpandResult<Fragment> {\n         let tt =\n             tt::Leaf::from(tt::Ident { text: \"$crate\".into(), id: tt::TokenId::unspecified() })\n                 .into();\n-        (Fragment::Tokens(tt), None)\n+        ExpandResult::ok(Fragment::Tokens(tt))\n     } else if !ctx.bindings.contains(v) {\n         // Note that it is possible to have a `$var` inside a macro which is not bound.\n         // For example:\n@@ -141,11 +141,11 @@ fn expand_var(ctx: &mut ExpandCtx, v: &SmolStr) -> ExpandResult<Fragment> {\n             ],\n         }\n         .into();\n-        (Fragment::Tokens(tt), None)\n+        ExpandResult::ok(Fragment::Tokens(tt))\n     } else {\n         ctx.bindings.get(&v, &mut ctx.nesting).map_or_else(\n-            |e| (Fragment::Tokens(tt::TokenTree::empty()), Some(e)),\n-            |b| (b.clone(), None),\n+            |e| ExpandResult(Fragment::Tokens(tt::TokenTree::empty()), Some(e)),\n+            |b| ExpandResult::ok(b.clone()),\n         )\n     }\n }\n@@ -165,7 +165,7 @@ fn expand_repeat(\n     let mut counter = 0;\n \n     loop {\n-        let (mut t, e) = expand_subtree(ctx, template);\n+        let ExpandResult(mut t, e) = expand_subtree(ctx, template);\n         let nesting_state = ctx.nesting.last_mut().unwrap();\n         if nesting_state.at_end || !nesting_state.hit {\n             break;\n@@ -225,9 +225,9 @@ fn expand_repeat(\n     let tt = tt::Subtree { delimiter: None, token_trees: buf }.into();\n \n     if RepeatKind::OneOrMore == kind && counter == 0 {\n-        return (Fragment::Tokens(tt), Some(ExpandError::UnexpectedToken));\n+        return ExpandResult(Fragment::Tokens(tt), Some(ExpandError::UnexpectedToken));\n     }\n-    (Fragment::Tokens(tt), None)\n+    ExpandResult::ok(Fragment::Tokens(tt))\n }\n \n fn push_fragment(buf: &mut Vec<tt::TokenTree>, fragment: Fragment) {"}, {"sha": "44f3819388bda96e503f02577855bbf14a747b18", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d655749aaeb31461f9af923bbf0b36d219cff343/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d655749aaeb31461f9af923bbf0b36d219cff343/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=d655749aaeb31461f9af923bbf0b36d219cff343", "patch": "@@ -1430,8 +1430,7 @@ impl MacroFixture {\n         let (invocation_tt, _) =\n             ast_to_token_tree(&macro_invocation.token_tree().unwrap()).unwrap();\n \n-        let (tt, err) = self.rules.expand(&invocation_tt);\n-        err.map(Err).unwrap_or(Ok(tt))\n+        self.rules.expand(&invocation_tt).result()\n     }\n \n     fn assert_expand_err(&self, invocation: &str, err: &ExpandError) {"}]}