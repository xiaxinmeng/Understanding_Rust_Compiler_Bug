{"sha": "33b9b9530561ada2584c8a9239e6581fef216a2a", "node_id": "C_kwDOAAsO6NoAKDMzYjliOTUzMDU2MWFkYTI1ODRjOGE5MjM5ZTY1ODFmZWYyMTZhMmE", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-04T20:57:39Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-06T13:40:28Z"}, "message": "Introduce get_diagnostic_name", "tree": {"sha": "3904842ac285f8a3a8b557e7058ba5ede7223039", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3904842ac285f8a3a8b557e7058ba5ede7223039"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33b9b9530561ada2584c8a9239e6581fef216a2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33b9b9530561ada2584c8a9239e6581fef216a2a", "html_url": "https://github.com/rust-lang/rust/commit/33b9b9530561ada2584c8a9239e6581fef216a2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33b9b9530561ada2584c8a9239e6581fef216a2a/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7539a6af09e5889ed9bcb8b49571b7a59c32e65", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7539a6af09e5889ed9bcb8b49571b7a59c32e65", "html_url": "https://github.com/rust-lang/rust/commit/d7539a6af09e5889ed9bcb8b49571b7a59c32e65"}], "stats": {"total": 93, "additions": 59, "deletions": 34}, "files": [{"sha": "243014b00270321f0f2a87d9c6ced1653aa91abd", "filename": "compiler/rustc_hir/src/diagnostic_items.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_hir%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_hir%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdiagnostic_items.rs?ref=33b9b9530561ada2584c8a9239e6581fef216a2a", "patch": "@@ -0,0 +1,17 @@\n+use crate::def_id::DefId;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_span::Symbol;\n+\n+#[derive(Debug, Default)]\n+pub struct DiagnosticItems {\n+    pub id_to_name: FxHashMap<DefId, Symbol>,\n+    pub name_to_id: FxHashMap<Symbol, DefId>,\n+}\n+\n+impl<CTX: crate::HashStableContext> HashStable<CTX> for DiagnosticItems {\n+    #[inline]\n+    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n+        self.name_to_id.hash_stable(ctx, hasher);\n+    }\n+}"}, {"sha": "f5ea044e248652fb2dea7a1bdabab5330558d34f", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=33b9b9530561ada2584c8a9239e6581fef216a2a", "patch": "@@ -18,6 +18,7 @@ mod arena;\n pub mod def;\n pub mod def_path_hash_map;\n pub mod definitions;\n+pub mod diagnostic_items;\n pub use rustc_span::def_id;\n mod hir;\n pub mod hir_id;"}, {"sha": "c7d0f594f0117756f10f35c49ce8b1fbd3c47589", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=33b9b9530561ada2584c8a9239e6581fef216a2a", "patch": "@@ -18,6 +18,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathData, DefPathHash};\n+use rustc_hir::diagnostic_items::DiagnosticItems;\n use rustc_hir::lang_items;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_middle::hir::exports::Export;\n@@ -1052,16 +1053,23 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     /// Iterates over the diagnostic items in the given crate.\n-    fn get_diagnostic_items(&self) -> FxHashMap<Symbol, DefId> {\n+    fn get_diagnostic_items(&self) -> DiagnosticItems {\n         if self.root.is_proc_macro_crate() {\n             // Proc macro crates do not export any diagnostic-items to the target.\n             Default::default()\n         } else {\n-            self.root\n+            let mut id_to_name = FxHashMap::default();\n+            let name_to_id = self\n+                .root\n                 .diagnostic_items\n                 .decode(self)\n-                .map(|(name, def_index)| (name, self.local_def_id(def_index)))\n-                .collect()\n+                .map(|(name, def_index)| {\n+                    let id = self.local_def_id(def_index);\n+                    id_to_name.insert(id, name);\n+                    (name, id)\n+                })\n+                .collect();\n+            DiagnosticItems { id_to_name, name_to_id }\n         }\n     }\n "}, {"sha": "dacb1e4029c20d302a850a4d1df9d86d90a9b495", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=33b9b9530561ada2584c8a9239e6581fef216a2a", "patch": "@@ -1750,7 +1750,7 @@ impl EncodeContext<'a, 'tcx> {\n     fn encode_diagnostic_items(&mut self) -> Lazy<[(Symbol, DefIndex)]> {\n         empty_proc_macro!(self);\n         let tcx = self.tcx;\n-        let diagnostic_items = tcx.diagnostic_items(LOCAL_CRATE);\n+        let diagnostic_items = &tcx.diagnostic_items(LOCAL_CRATE).name_to_id;\n         self.lazy(diagnostic_items.iter().map(|(&name, def_id)| (name, def_id.index)))\n     }\n "}, {"sha": "9b0b1377875d1031af320d11912637d1ace2bb2f", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=33b9b9530561ada2584c8a9239e6581fef216a2a", "patch": "@@ -1442,7 +1442,7 @@ rustc_queries! {\n     }\n \n     /// Returns all diagnostic items defined in all crates.\n-    query all_diagnostic_items(_: ()) -> FxHashMap<Symbol, DefId> {\n+    query all_diagnostic_items(_: ()) -> rustc_hir::diagnostic_items::DiagnosticItems {\n         storage(ArenaCacheSelector<'tcx>)\n         eval_always\n         desc { \"calculating the diagnostic items map\" }\n@@ -1454,7 +1454,7 @@ rustc_queries! {\n     }\n \n     /// Returns the diagnostic items defined in a crate.\n-    query diagnostic_items(_: CrateNum) -> FxHashMap<Symbol, DefId> {\n+    query diagnostic_items(_: CrateNum) -> rustc_hir::diagnostic_items::DiagnosticItems {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"calculating the diagnostic items map in a crate\" }\n     }"}, {"sha": "6a6fb30dce837e1cd942affd70deb6bc1edd5dad", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=33b9b9530561ada2584c8a9239e6581fef216a2a", "patch": "@@ -1232,12 +1232,17 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Obtain the given diagnostic item's `DefId`. Use `is_diagnostic_item` if you just want to\n     /// compare against another `DefId`, since `is_diagnostic_item` is cheaper.\n     pub fn get_diagnostic_item(self, name: Symbol) -> Option<DefId> {\n-        self.all_diagnostic_items(()).get(&name).copied()\n+        self.all_diagnostic_items(()).name_to_id.get(&name).copied()\n+    }\n+\n+    /// Obtain the diagnostic item's name\n+    pub fn get_diagnostic_name(self, id: DefId) -> Option<Symbol> {\n+        self.diagnostic_items(id.krate).id_to_name.get(&id).copied()\n     }\n \n     /// Check whether the diagnostic item with the given `name` has the given `DefId`.\n     pub fn is_diagnostic_item(self, name: Symbol, did: DefId) -> bool {\n-        self.diagnostic_items(did.krate).get(&name) == Some(&did)\n+        self.diagnostic_items(did.krate).name_to_id.get(&name) == Some(&did)\n     }\n \n     pub fn stability(self) -> &'tcx stability::Index<'tcx> {"}, {"sha": "30a0071f0f2e5c2a531a20554e8881070518e50b", "filename": "compiler/rustc_passes/src/diagnostic_items.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdiagnostic_items.rs?ref=33b9b9530561ada2584c8a9239e6581fef216a2a", "patch": "@@ -10,18 +10,17 @@\n //! * Compiler internal types like `Ty` and `TyCtxt`\n \n use rustc_ast as ast;\n-use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n+use rustc_hir::diagnostic_items::DiagnosticItems;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n use rustc_span::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_span::symbol::{sym, Symbol};\n \n struct DiagnosticItemCollector<'tcx> {\n-    // items from this crate\n-    items: FxHashMap<Symbol, DefId>,\n     tcx: TyCtxt<'tcx>,\n+    diagnostic_items: DiagnosticItems,\n }\n \n impl<'v, 'tcx> ItemLikeVisitor<'v> for DiagnosticItemCollector<'tcx> {\n@@ -44,27 +43,22 @@ impl<'v, 'tcx> ItemLikeVisitor<'v> for DiagnosticItemCollector<'tcx> {\n \n impl<'tcx> DiagnosticItemCollector<'tcx> {\n     fn new(tcx: TyCtxt<'tcx>) -> DiagnosticItemCollector<'tcx> {\n-        DiagnosticItemCollector { tcx, items: Default::default() }\n+        DiagnosticItemCollector { tcx, diagnostic_items: DiagnosticItems::default() }\n     }\n \n     fn observe_item(&mut self, def_id: LocalDefId) {\n         let hir_id = self.tcx.hir().local_def_id_to_hir_id(def_id);\n         let attrs = self.tcx.hir().attrs(hir_id);\n         if let Some(name) = extract(attrs) {\n             // insert into our table\n-            collect_item(self.tcx, &mut self.items, name, def_id.to_def_id());\n+            collect_item(self.tcx, &mut self.diagnostic_items, name, def_id.to_def_id());\n         }\n     }\n }\n \n-fn collect_item(\n-    tcx: TyCtxt<'_>,\n-    items: &mut FxHashMap<Symbol, DefId>,\n-    name: Symbol,\n-    item_def_id: DefId,\n-) {\n-    // Check for duplicates.\n-    if let Some(original_def_id) = items.insert(name, item_def_id) {\n+fn collect_item(tcx: TyCtxt<'_>, items: &mut DiagnosticItems, name: Symbol, item_def_id: DefId) {\n+    items.id_to_name.insert(item_def_id, name);\n+    if let Some(original_def_id) = items.name_to_id.insert(name, item_def_id) {\n         if original_def_id != item_def_id {\n             let mut err = match tcx.hir().span_if_local(item_def_id) {\n                 Some(span) => tcx.sess.struct_span_err(\n@@ -98,7 +92,7 @@ fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n }\n \n /// Traverse and collect the diagnostic items in the current\n-fn diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> FxHashMap<Symbol, DefId> {\n+fn diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> DiagnosticItems {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     // Initialize the collector.\n@@ -107,22 +101,22 @@ fn diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, cnum: CrateNum) -> FxHashMap<Symbol\n     // Collect diagnostic items in this crate.\n     tcx.hir().visit_all_item_likes(&mut collector);\n \n-    collector.items\n+    collector.diagnostic_items\n }\n \n /// Traverse and collect all the diagnostic items in all crates.\n-fn all_diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashMap<Symbol, DefId> {\n+fn all_diagnostic_items<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> DiagnosticItems {\n     // Initialize the collector.\n-    let mut collector = FxHashMap::default();\n+    let mut items = DiagnosticItems::default();\n \n     // Collect diagnostic items in other crates.\n     for &cnum in tcx.crates(()).iter().chain(std::iter::once(&LOCAL_CRATE)) {\n-        for (&name, &def_id) in tcx.diagnostic_items(cnum).iter() {\n-            collect_item(tcx, &mut collector, name, def_id);\n+        for (&name, &def_id) in &tcx.diagnostic_items(cnum).name_to_id {\n+            collect_item(tcx, &mut items, name, def_id);\n         }\n     }\n \n-    collector\n+    items\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "a73d2285d457650c2980c2bd00df4cd458fc5c94", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=33b9b9530561ada2584c8a9239e6581fef216a2a", "patch": "@@ -1636,12 +1636,12 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n         // Special case the primary error message when send or sync is the trait that was\n         // not implemented.\n-        let is_send = self.tcx.is_diagnostic_item(sym::Send, trait_ref.def_id);\n-        let is_sync = self.tcx.is_diagnostic_item(sym::Sync, trait_ref.def_id);\n         let hir = self.tcx.hir();\n-        let trait_explanation = if is_send || is_sync {\n+        let trait_explanation = if let Some(name @ (sym::Send | sym::Sync)) =\n+            self.tcx.get_diagnostic_name(trait_ref.def_id)\n+        {\n             let (trait_name, trait_verb) =\n-                if is_send { (\"`Send`\", \"sent\") } else { (\"`Sync`\", \"shared\") };\n+                if name == sym::Send { (\"`Send`\", \"sent\") } else { (\"`Sync`\", \"shared\") };\n \n             err.clear_code();\n             err.set_primary_message(format!("}, {"sha": "41281a6748f08c41ac396e63bf968dea698e2e1e", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33b9b9530561ada2584c8a9239e6581fef216a2a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=33b9b9530561ada2584c8a9239e6581fef216a2a", "patch": "@@ -1076,7 +1076,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if adt_def.did.is_local() {\n                     let diagnostic_items = self.tcx.diagnostic_items(trait_ref.def_id.krate);\n                     return derivables.iter().find_map(|trait_derivable| {\n-                        let item_def_id = diagnostic_items.get(trait_derivable)?;\n+                        let item_def_id = diagnostic_items.name_to_id.get(trait_derivable)?;\n                         if item_def_id == &trait_pred.trait_ref.def_id\n                             && !(adt_def.is_enum() && *trait_derivable == sym::Default)\n                         {"}]}