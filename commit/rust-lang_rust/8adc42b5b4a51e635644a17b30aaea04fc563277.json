{"sha": "8adc42b5b4a51e635644a17b30aaea04fc563277", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZGM0MmI1YjRhNTFlNjM1NjQ0YTE3YjMwYWFlYTA0ZmM1NjMyNzc=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2017-09-09T05:23:08Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2017-09-09T05:23:08Z"}, "message": "Update for latest Rust\n\nThis is mainly due to https://github.com/rust-lang/rust/commit/dead08cb33134", "tree": {"sha": "5dc94f2122be1cfb9f3ebf0f7c488db309d9aeec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5dc94f2122be1cfb9f3ebf0f7c488db309d9aeec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8adc42b5b4a51e635644a17b30aaea04fc563277", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlmzeuYACgkQtAh+UQ6Y\nsWQmsA/+P0dTUJgGCIkZc76clcOx3vtQ4d8AhBAt/ad35fIVosDRBVB/dXPhK7EV\ntol24cFpbZ/56CP0EyBIZGRjQSA2NduSZDoodtGs9LkipMHxQzaQ8ROkayz3oiXZ\nwLReY6g9xaSVU0ezXXsZHV/jwsVx4hJkmXKopgMdD6Q/wJj+Z0/BaeDnkBZB0pIF\n/mab0ZbrIDVcffvIlr2zCs3xDkPrJU1hmMjfWrIl4uVBs8wturMFWeZYCei4Zvbn\nd04JGD5Ff+foPQWMaEi06dl9mM+W3q7UgAk5Rs1L2AJn6xtl5vCRZDsqoOXo6Uv4\n4D/x+OkGoIlZtwUvskO7CjItIBMCDYqKJ3/4UDq8fwIKfE4YdKzwWeyI3XQtfgUF\nO6JyV2oXBViq5EvKKDDmi/bmA1TsSjCV9NczCyx0Cwiy2nBXzRS4N4QwFoi0aoNA\nXupRUanyoOVk7Cs54fcKvoJH2sE6Jlqn8qMzURpHcaL9JbX2y7uCH2x8w9PLMuW9\nTrdgAaqd1F2dslRQBZygrelny+gDO40D+ETTjKdDYGv17Ar3UG3xSsYQdyFEt3jo\nD+xK1Ejy+4BbcmU2jZ3hE3TauoZg9YHge9e1P9ukueUGIBbfCVWFkkZF4Rv8cFcj\nTMLkLSJxYGWTb7Mffqd/B8bBHXjUX5B0FVxMuVXN0XMRi1S0ZWI=\n=WVeG\n-----END PGP SIGNATURE-----", "payload": "tree 5dc94f2122be1cfb9f3ebf0f7c488db309d9aeec\nparent 6edab5662d54534cee86704b56855facf369e7fc\nauthor Aaron Hill <aa1ronham@gmail.com> 1504934588 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1504934588 -0400\n\nUpdate for latest Rust\n\nThis is mainly due to https://github.com/rust-lang/rust/commit/dead08cb33134\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8adc42b5b4a51e635644a17b30aaea04fc563277", "html_url": "https://github.com/rust-lang/rust/commit/8adc42b5b4a51e635644a17b30aaea04fc563277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8adc42b5b4a51e635644a17b30aaea04fc563277/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6edab5662d54534cee86704b56855facf369e7fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/6edab5662d54534cee86704b56855facf369e7fc", "html_url": "https://github.com/rust-lang/rust/commit/6edab5662d54534cee86704b56855facf369e7fc"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "db57864cb2f0686bbd57cc3c93870abb0a7664b0", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=8adc42b5b4a51e635644a17b30aaea04fc563277", "patch": "@@ -307,7 +307,7 @@ fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u128> {\n                         cx.tcx.mir_const_qualif(def_id);\n                         cx.tcx.hir.body(cx.tcx.hir.body_owned_by(id))\n                     } else {\n-                        cx.tcx.sess.cstore.item_body(cx.tcx, def_id)\n+                        cx.tcx.extern_const_body(def_id)\n                     };\n                     fetch_int_literal(cx, &body.value)\n                 })"}, {"sha": "d50cb05576f45ce6d525c5c169c0b607827cbf74", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=8adc42b5b4a51e635644a17b30aaea04fc563277", "patch": "@@ -297,7 +297,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n                         self.tcx.mir_const_qualif(def_id);\n                         self.tcx.hir.body(self.tcx.hir.body_owned_by(id))\n                     } else {\n-                        self.tcx.sess.cstore.item_body(self.tcx, def_id)\n+                        self.tcx.extern_const_body(def_id)\n                     };\n                     let ret = cx.expr(&body.value);\n                     if ret.is_some() {"}, {"sha": "5baaa4bd59d8c5fad2728572625111e4ff69df06", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=8adc42b5b4a51e635644a17b30aaea04fc563277", "patch": "@@ -93,7 +93,7 @@ fn check_hash_peq<'a, 'tcx>(\n ) {\n     if_let_chain! {[\n         match_path(&trait_ref.path, &paths::HASH),\n-        let Some(peq_trait_def_id) = cx.tcx.lang_items.eq_trait()\n+        let Some(peq_trait_def_id) = cx.tcx.lang_items().eq_trait()\n     ], {\n         // Look for the PartialEq implementations for `ty`\n         cx.tcx.for_each_relevant_impl(peq_trait_def_id, ty, |impl_id| {"}, {"sha": "dbe0d68ad69823713858fabf82bae18b1f77e05d", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=8adc42b5b4a51e635644a17b30aaea04fc563277", "patch": "@@ -63,20 +63,20 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EqOp {\n                 return;\n             }\n             let (trait_id, requires_ref) = match op.node {\n-                BiAdd => (cx.tcx.lang_items.add_trait(), false),\n-                BiSub => (cx.tcx.lang_items.sub_trait(), false),\n-                BiMul => (cx.tcx.lang_items.mul_trait(), false),\n-                BiDiv => (cx.tcx.lang_items.div_trait(), false),\n-                BiRem => (cx.tcx.lang_items.rem_trait(), false),\n+                BiAdd => (cx.tcx.lang_items().add_trait(), false),\n+                BiSub => (cx.tcx.lang_items().sub_trait(), false),\n+                BiMul => (cx.tcx.lang_items().mul_trait(), false),\n+                BiDiv => (cx.tcx.lang_items().div_trait(), false),\n+                BiRem => (cx.tcx.lang_items().rem_trait(), false),\n                 // don't lint short circuiting ops\n                 BiAnd | BiOr => return,\n-                BiBitXor => (cx.tcx.lang_items.bitxor_trait(), false),\n-                BiBitAnd => (cx.tcx.lang_items.bitand_trait(), false),\n-                BiBitOr => (cx.tcx.lang_items.bitor_trait(), false),\n-                BiShl => (cx.tcx.lang_items.shl_trait(), false),\n-                BiShr => (cx.tcx.lang_items.shr_trait(), false),\n-                BiNe | BiEq => (cx.tcx.lang_items.eq_trait(), true),\n-                BiLt | BiLe | BiGe | BiGt => (cx.tcx.lang_items.ord_trait(), true),\n+                BiBitXor => (cx.tcx.lang_items().bitxor_trait(), false),\n+                BiBitAnd => (cx.tcx.lang_items().bitand_trait(), false),\n+                BiBitOr => (cx.tcx.lang_items().bitor_trait(), false),\n+                BiShl => (cx.tcx.lang_items().shl_trait(), false),\n+                BiShr => (cx.tcx.lang_items().shr_trait(), false),\n+                BiNe | BiEq => (cx.tcx.lang_items().eq_trait(), true),\n+                BiLt | BiLe | BiGe | BiGt => (cx.tcx.lang_items().ord_trait(), true),\n             };\n             if let Some(trait_id) = trait_id {\n                 #[allow(match_same_arms)]"}, {"sha": "74719d006d03e46aa7a73a327beefaf9ed2912a3", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=8adc42b5b4a51e635644a17b30aaea04fc563277", "patch": "@@ -1302,7 +1302,7 @@ fn get_error_type<'a>(cx: &LateContext, ty: Ty<'a>) -> Option<Ty<'a>> {\n \n /// This checks whether a given type is known to implement Debug.\n fn has_debug_impl<'a, 'b>(ty: Ty<'a>, cx: &LateContext<'b, 'a>) -> bool {\n-    match cx.tcx.lang_items.debug_trait() {\n+    match cx.tcx.lang_items().debug_trait() {\n         Some(debug) => implements_trait(cx, ty, debug, &[]),\n         None => false,\n     }"}, {"sha": "fcb29439a64de2a08b88bf3dc9001a050a8d5989", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=8adc42b5b4a51e635644a17b30aaea04fc563277", "patch": "@@ -497,7 +497,7 @@ fn check_to_owned(cx: &LateContext, expr: &Expr, other: &Expr) {\n     };\n \n     let other_ty = cx.tables.expr_ty_adjusted(other);\n-    let partial_eq_trait_id = match cx.tcx.lang_items.eq_trait() {\n+    let partial_eq_trait_id = match cx.tcx.lang_items().eq_trait() {\n         Some(id) => id,\n         None => return,\n     };"}, {"sha": "da3bfc7594c447f3d16b7426e3c6c8f0138f7c46", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=8adc42b5b4a51e635644a17b30aaea04fc563277", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         }\n \n         // Allows these to be passed by value.\n-        let fn_trait = need!(cx.tcx.lang_items.fn_trait());\n+        let fn_trait = need!(cx.tcx.lang_items().fn_trait());\n         let asref_trait = need!(get_trait_def_id(cx, &paths::ASREF_TRAIT));\n         let borrow_trait = need!(get_trait_def_id(cx, &paths::BORROW_TRAIT));\n "}, {"sha": "34f1e4bc493a89b2ae19cc3d2902f2cb36f9cc8b", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=8adc42b5b4a51e635644a17b30aaea04fc563277", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         if_let_chain! {[\n             let ItemImpl(_, _, _, _, Some(ref trait_ref), _, ref impl_items) = item.node,\n             !is_automatically_derived(&*item.attrs),\n-            let Some(eq_trait) = cx.tcx.lang_items.eq_trait(),\n+            let Some(eq_trait) = cx.tcx.lang_items().eq_trait(),\n             trait_ref.path.def.def_id() == eq_trait\n         ], {\n             for impl_item in impl_items {"}, {"sha": "47e444c8c8859758582cfe6f517442c3f134e179", "filename": "clippy_lints/src/should_assert_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fshould_assert_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Fshould_assert_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshould_assert_eq.rs?ref=8adc42b5b4a51e635644a17b30aaea04fc563277", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ShouldAssertEq {\n             let ExprUnary(UnOp::UnNot, ref cond) = cond.node,\n             let ExprBinary(ref binop, ref expr1, ref expr2) = cond.node,\n             is_direct_expn_of(e.span, \"assert\").is_some(),\n-            let Some(debug_trait) = cx.tcx.lang_items.debug_trait(),\n+            let Some(debug_trait) = cx.tcx.lang_items().debug_trait(),\n         ], {\n             let debug = is_expn_of(e.span, \"debug_assert\").map_or(\"\", |_| \"debug_\");\n             let sugg = match binop.node {"}, {"sha": "6eb78d02d30a96da3d0a03cf6b3c4b7f15291337", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=8adc42b5b4a51e635644a17b30aaea04fc563277", "patch": "@@ -151,7 +151,7 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n             let hir_id = cx.tcx.hir.node_to_hir_id(ast_ty.id);\n             let def = cx.tables.qpath_def(qpath, hir_id);\n             if let Some(def_id) = opt_def_id(def) {\n-                if Some(def_id) == cx.tcx.lang_items.owned_box() {\n+                if Some(def_id) == cx.tcx.lang_items().owned_box() {\n                     let last = last_path_segment(qpath);\n                     if_let_chain! {[\n                         !last.parameters.parenthesized,\n@@ -209,7 +209,7 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n                     let def = cx.tables.qpath_def(qpath, hir_id);\n                     if_let_chain! {[\n                         let Some(def_id) = opt_def_id(def),\n-                        Some(def_id) == cx.tcx.lang_items.owned_box(),\n+                        Some(def_id) == cx.tcx.lang_items().owned_box(),\n                         let QPath::Resolved(None, ref path) = *qpath,\n                         let [ref bx] = *path.segments,\n                         !bx.parameters.parenthesized,"}, {"sha": "1713096ff2dc1041b3a9fdc79b15a79769731df5", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=8adc42b5b4a51e635644a17b30aaea04fc563277", "patch": "@@ -360,12 +360,12 @@ fn print_item(cx: &LateContext, item: &hir::Item) {\n     }\n     match item.node {\n         hir::ItemExternCrate(ref _renamed_from) => {\n-            if let Some(crate_id) = cx.tcx.sess.cstore.extern_mod_stmt_cnum(item.id) {\n-                let source = cx.tcx.sess.cstore.used_crate_source(crate_id);\n-                if let Some(src) = source.dylib {\n+            if let Some(crate_id) = cx.tcx.extern_mod_stmt_cnum(cx.tcx.hir.node_to_hir_id(item.id)) {\n+                let source = cx.tcx.used_crate_source(crate_id);\n+                if let Some(ref src) = source.dylib {\n                     println!(\"extern crate dylib source: {:?}\", src.0);\n                 }\n-                if let Some(src) = source.rlib {\n+                if let Some(ref src) = source.rlib {\n                     println!(\"extern crate rlib source: {:?}\", src.0);\n                 }\n             } else {"}, {"sha": "582cdae47b82e0666879c2ca9ba4868ec09b70cd", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8adc42b5b4a51e635644a17b30aaea04fc563277/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=8adc42b5b4a51e635644a17b30aaea04fc563277", "patch": "@@ -15,6 +15,7 @@ use std::borrow::Cow;\n use std::env;\n use std::mem;\n use std::str::FromStr;\n+use std::rc::Rc;\n use syntax::ast::{self, LitKind};\n use syntax::attr;\n use syntax::codemap::{CompilerDesugaringKind, ExpnFormat, ExpnInfo, Span, DUMMY_SP};\n@@ -277,18 +278,17 @@ pub fn match_path_ast(path: &ast::Path, segments: &[&str]) -> bool {\n \n /// Get the definition associated to a path.\n pub fn path_to_def(cx: &LateContext, path: &[&str]) -> Option<def::Def> {\n-    let cstore = &cx.tcx.sess.cstore;\n \n-    let crates = cstore.crates();\n+    let crates = cx.tcx.crates();\n     let krate = crates\n         .iter()\n-        .find(|&&krate| cstore.crate_name(krate) == path[0]);\n+        .find(|&&krate| cx.tcx.crate_name(krate) == path[0]);\n     if let Some(krate) = krate {\n         let krate = DefId {\n             krate: *krate,\n             index: CRATE_DEF_INDEX,\n         };\n-        let mut items = cstore.item_children(krate, cx.tcx.sess);\n+        let mut items = cx.tcx.item_children(krate);\n         let mut path_it = path.iter().skip(1).peekable();\n \n         loop {\n@@ -297,13 +297,13 @@ pub fn path_to_def(cx: &LateContext, path: &[&str]) -> Option<def::Def> {\n                 None => return None,\n             };\n \n-            for item in &mem::replace(&mut items, vec![]) {\n+            for item in mem::replace(&mut items, Rc::new(vec![])).iter() {\n                 if item.ident.name == *segment {\n                     if path_it.peek().is_none() {\n                         return Some(item.def);\n                     }\n \n-                    items = cstore.item_children(item.def.def_id(), cx.tcx.sess);\n+                    items = cx.tcx.item_children(item.def.def_id());\n                     break;\n                 }\n             }"}]}