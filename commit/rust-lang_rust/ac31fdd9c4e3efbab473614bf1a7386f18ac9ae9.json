{"sha": "ac31fdd9c4e3efbab473614bf1a7386f18ac9ae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMzFmZGQ5YzRlM2VmYmFiNDczNjE0YmYxYTczODZmMThhYzlhZTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-03T22:57:48Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-03T23:01:51Z"}, "message": "Fix cross-crate inlining of intrinsics", "tree": {"sha": "092609014c6da1d4b0ae229f228d57713d371703", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/092609014c6da1d4b0ae229f228d57713d371703"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac31fdd9c4e3efbab473614bf1a7386f18ac9ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac31fdd9c4e3efbab473614bf1a7386f18ac9ae9", "html_url": "https://github.com/rust-lang/rust/commit/ac31fdd9c4e3efbab473614bf1a7386f18ac9ae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac31fdd9c4e3efbab473614bf1a7386f18ac9ae9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd15eac9cf479feadffc546c05289f071601978a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd15eac9cf479feadffc546c05289f071601978a", "html_url": "https://github.com/rust-lang/rust/commit/cd15eac9cf479feadffc546c05289f071601978a"}], "stats": {"total": 32, "additions": 29, "deletions": 3}, "files": [{"sha": "fb44e86f8641c5e581cb31b294698d63ee7c36cc", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ac31fdd9c4e3efbab473614bf1a7386f18ac9ae9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac31fdd9c4e3efbab473614bf1a7386f18ac9ae9/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ac31fdd9c4e3efbab473614bf1a7386f18ac9ae9", "patch": "@@ -2504,11 +2504,39 @@ fn lval_static_fn_inner(bcx: block, fn_id: ast::def_id, id: ast::node_id,\n \n     // Check whether this fn has an inlined copy and, if so, redirect fn_id to\n     // the local id of the inlined copy.\n+    let original_crate = fn_id.crate;\n     let fn_id = if fn_id.crate != ast::local_crate {\n         maybe_instantiate_inline(ccx, fn_id)\n     } else { fn_id };\n \n-    if fn_id.crate == ast::local_crate && tys.len() > 0u {\n+    let must_monomorphise = {\n+        let local_with_type_params =\n+            fn_id.crate == ast::local_crate && tys.len() > 0u;\n+\n+        // Rust intrinsic functions should always be monomorphised\n+        let inlined_rust_intrinsic = {\n+            if fn_id.crate == ast::local_crate\n+                && original_crate != ast::local_crate {\n+\n+                let map_node = session::expect(\n+                    ccx.sess,\n+                    ccx.tcx.items.find(fn_id.node),\n+                    || fmt!(\"inlined item should be in ast map\"));\n+\n+                match map_node {\n+                  ast_map::node_foreign_item(\n+                      _, ast::foreign_abi_rust_intrinsic, _) => true,\n+                  _ => false\n+                }\n+            } else {\n+                false\n+            }\n+        };\n+\n+        local_with_type_params || inlined_rust_intrinsic\n+    };\n+\n+    if must_monomorphise {\n         let mut {val, must_cast} =\n             monomorphic_fn(ccx, fn_id, tys, vtables, Some(id));\n         if must_cast {"}, {"sha": "b2ec6b3c8e77883ff733009b4f7c61b7508b5bc2", "filename": "src/test/run-pass/intrinsic-atomics-cc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ac31fdd9c4e3efbab473614bf1a7386f18ac9ae9/src%2Ftest%2Frun-pass%2Fintrinsic-atomics-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac31fdd9c4e3efbab473614bf1a7386f18ac9ae9/src%2Ftest%2Frun-pass%2Fintrinsic-atomics-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-atomics-cc.rs?ref=ac31fdd9c4e3efbab473614bf1a7386f18ac9ae9", "patch": "@@ -1,8 +1,6 @@\n // xfail-fast - check-fast doesn't understand aux-build\n // aux-build:cci_intrinsic.rs\n \n-// xfail-test\n-\n use cci_intrinsic;\n import cci_intrinsic::atomic_xchg;\n "}]}