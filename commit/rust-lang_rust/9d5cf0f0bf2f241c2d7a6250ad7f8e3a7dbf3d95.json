{"sha": "9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95", "node_id": "C_kwDOAAsO6NoAKDlkNWNmMGYwYmYyZjI0MWMyZDdhNjI1MGFkN2Y4ZTNhN2RiZjNkOTU", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-16T01:06:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-17T11:24:34Z"}, "message": "Remove the `InternIteratorElement` impl for `&'a T`.\n\n`InternIteratorElement` is a trait used to intern values produces by\niterators. There are three impls, corresponding to iterators that\nproduce different types:\n- One for `T`, which operates straightforwardly.\n- One for `Result<T, E>`, which is fallible, and will fail early with an\n  error result if any of the iterator elements are errors.\n- One for `&'a T`, which clones the items as it iterates.\n\nThat last one is bad: it's extremely easy to use it without realizing\nthat it clones, which goes against Rust's normal \"explicit is better\"\napproach to cloning.\n\nSo this commit just removes it. In practice, there weren't many use\nsites. For all but one of them `into_iter()` could be used, which avoids\nthe need for cloning. And for the one remaining case `copied()` is\nused.", "tree": {"sha": "976756ba5675645ec80f6d17b6da10b23595c5c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/976756ba5675645ec80f6d17b6da10b23595c5c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95", "html_url": "https://github.com/rust-lang/rust/commit/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28184e749160d4707d5006b52ee7aeff8ba9a9b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/28184e749160d4707d5006b52ee7aeff8ba9a9b5", "html_url": "https://github.com/rust-lang/rust/commit/28184e749160d4707d5006b52ee7aeff8ba9a9b5"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "2b3678d987556a4922307dc8000d347fde07d1ce", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95", "patch": "@@ -264,7 +264,7 @@ fn check_lang_start_fn<'tcx>(\n         let fn_generic = generics.param_at(0, tcx);\n         let generic_ty = tcx.mk_ty_param(fn_generic.index, fn_generic.name);\n         let expected_fn_sig =\n-            tcx.mk_fn_sig([].iter(), &generic_ty, false, hir::Unsafety::Normal, Abi::Rust);\n+            tcx.mk_fn_sig([].into_iter(), generic_ty, false, hir::Unsafety::Normal, Abi::Rust);\n         let expected_ty = tcx.mk_fn_ptr(Binder::dummy(expected_fn_sig));\n \n         // we emit the same error to suggest changing the arg no matter what's wrong with the arg"}, {"sha": "d0a66acd5a128aadcf923f84f531bd9b6a1c1bc4", "filename": "compiler/rustc_hir_typeck/src/generator_interior/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fmod.rs?ref=9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95", "patch": "@@ -312,7 +312,7 @@ pub fn resolve_interior<'a, 'tcx>(\n \n     // Extract type components to build the witness type.\n     let type_list = fcx.tcx.mk_type_list(type_causes.iter().map(|cause| cause.ty));\n-    let bound_vars = fcx.tcx.mk_bound_variable_kinds(bound_vars.iter());\n+    let bound_vars = fcx.tcx.mk_bound_variable_kinds(bound_vars.into_iter());\n     let witness =\n         fcx.tcx.mk_generator_witness(ty::Binder::bind_with_vars(type_list, bound_vars.clone()));\n "}, {"sha": "7b144d478e07257cf73b9f21f798bed055c99cfc", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95", "patch": "@@ -2387,7 +2387,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 .unwrap_or_else(|| {\n                     bug!(\"No bound vars found for {}\", self.hir().node_to_string(id))\n                 })\n-                .iter(),\n+                .into_iter(),\n         )\n     }\n "}, {"sha": "c2eccbcbc3cb3bd6a5bb1c32b28b07fd790d6cca", "filename": "compiler/rustc_symbol_mangling/src/typeid/typeid_itanium_cxx_abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Ftypeid%2Ftypeid_itanium_cxx_abi.rs?ref=9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95", "patch": "@@ -781,8 +781,8 @@ fn transform_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, options: TransformTyOptio\n                 let output = transform_ty(tcx, fn_sig.skip_binder().output(), options);\n                 ty = tcx.mk_fn_ptr(ty::Binder::bind_with_vars(\n                     tcx.mk_fn_sig(\n-                        parameters.iter(),\n-                        &output,\n+                        parameters.into_iter(),\n+                        output,\n                         fn_sig.c_variadic(),\n                         fn_sig.unsafety(),\n                         fn_sig.abi(),"}, {"sha": "d12e5f797fb9454930df53a65b7de63cf63610f6", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95", "patch": "@@ -359,7 +359,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     let b_last_ty = b_tys.last().unwrap();\n \n                     // Substitute just the tail field of B., and require that they're equal.\n-                    let unsized_a_ty = tcx.mk_tup(a_rest_tys.iter().chain([b_last_ty]));\n+                    let unsized_a_ty = tcx.mk_tup(a_rest_tys.iter().chain([b_last_ty]).copied());\n                     let mut nested_goals = ecx.infcx.eq(goal.param_env, unsized_a_ty, b_ty)?;\n \n                     // Similar to ADTs, require that the rest of the fields are equal."}, {"sha": "76ecb86efb83298421ad1b8cfa161403d206b65c", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95", "patch": "@@ -141,8 +141,8 @@ fn fn_sig_for_fn_abi<'tcx>(\n \n             ty::Binder::bind_with_vars(\n                 tcx.mk_fn_sig(\n-                    [env_ty, resume_ty].iter(),\n-                    &ret_ty,\n+                    [env_ty, resume_ty].into_iter(),\n+                    ret_ty,\n                     false,\n                     hir::Unsafety::Normal,\n                     rustc_target::spec::abi::Abi::Rust,"}, {"sha": "d3c0a410bfc22bcf6a795dc3d773d9081a738b35", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=9d5cf0f0bf2f241c2d7a6250ad7f8e3a7dbf3d95", "patch": "@@ -127,17 +127,6 @@ impl<T, R> InternIteratorElement<T, R> for T {\n     }\n }\n \n-impl<'a, T, R> InternIteratorElement<T, R> for &'a T\n-where\n-    T: Clone + 'a,\n-{\n-    type Output = R;\n-    fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>(iter: I, f: F) -> Self::Output {\n-        // This code isn't hot.\n-        f(&iter.cloned().collect::<SmallVec<[_; 8]>>())\n-    }\n-}\n-\n impl<T, R, E> InternIteratorElement<T, R> for Result<T, E> {\n     type Output = Result<R, E>;\n     fn intern_with<I: Iterator<Item = Self>, F: FnOnce(&[T]) -> R>("}]}