{"sha": "e1dbbe538f5fe978333dfa9f63533f5ead2866ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxZGJiZTUzOGY1ZmU5NzgzMzNkZmE5ZjYzNTMzZjVlYWQyODY2YWU=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-01T14:01:42Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-07-01T14:01:42Z"}, "message": "Rustup", "tree": {"sha": "4b19e65b5a302ed95eb1087b31267fe31ed51e2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b19e65b5a302ed95eb1087b31267fe31ed51e2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1dbbe538f5fe978333dfa9f63533f5ead2866ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1dbbe538f5fe978333dfa9f63533f5ead2866ae", "html_url": "https://github.com/rust-lang/rust/commit/e1dbbe538f5fe978333dfa9f63533f5ead2866ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1dbbe538f5fe978333dfa9f63533f5ead2866ae/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9143a69f4b3ef4bda77afddefe934be363e39f31", "url": "https://api.github.com/repos/rust-lang/rust/commits/9143a69f4b3ef4bda77afddefe934be363e39f31", "html_url": "https://github.com/rust-lang/rust/commit/9143a69f4b3ef4bda77afddefe934be363e39f31"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "896c8c5428fbd25a66127d1b890501ae1e5ec684", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1dbbe538f5fe978333dfa9f63533f5ead2866ae/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1dbbe538f5fe978333dfa9f63533f5ead2866ae/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e1dbbe538f5fe978333dfa9f63533f5ead2866ae", "patch": "@@ -24,7 +24,6 @@ use rustc::ty::layout::{TyLayout, LayoutOf, Size};\n use rustc::ty::subst::Subst;\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n-use rustc::middle::const_val;\n \n use syntax::ast::Mutability;\n use syntax::codemap::Span;\n@@ -270,10 +269,10 @@ pub fn eval_main<'a, 'tcx: 'a>(\n                     block.terminator().source_info.span\n                 };\n \n-                let mut err = const_val::struct_error(ecx.tcx.tcx.at(span), \"constant evaluation error\");\n+                let mut err = mir::interpret::struct_error(ecx.tcx.tcx.at(span), \"constant evaluation error\");\n                 let (frames, span) = ecx.generate_stacktrace(None);\n                 err.span_label(span, e.to_string());\n-                for const_val::FrameInfo { span, location, .. } in frames {\n+                for mir::interpret::FrameInfo { span, location, .. } in frames {\n                     err.span_note(span, &format!(\"inside call to `{}`\", location));\n                 }\n                 err.emit();"}, {"sha": "90ac0a803f9b3a8b02084576953d319191e6c418", "filename": "src/validation.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e1dbbe538f5fe978333dfa9f63533f5ead2866ae/src%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1dbbe538f5fe978333dfa9f63533f5ead2866ae/src%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalidation.rs?ref=e1dbbe538f5fe978333dfa9f63533f5ead2866ae", "patch": "@@ -8,7 +8,6 @@ use rustc::ty::subst::{Substs, Subst};\n use rustc::traits::{self, TraitEngine};\n use rustc::infer::InferCtxt;\n use rustc::middle::region;\n-use rustc::middle::const_val::ConstVal;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_mir::interpret::HasMemory;\n \n@@ -719,14 +718,14 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n                 }\n                 TyArray(elem_ty, len) => {\n                     let len = match len.val {\n-                        ConstVal::Unevaluated(def_id, substs) => {\n+                        mir::interpret::ConstValue::Unevaluated(def_id, substs) => {\n                             self.tcx.const_eval(self.tcx.param_env(def_id).and(GlobalId {\n                                 instance: Instance::new(def_id, substs),\n                                 promoted: None,\n                             }))\n                                 .map_err(|_err|EvalErrorKind::MachineError(\"<already reported>\".to_string()))?\n                         }\n-                        ConstVal::Value(_) => len,\n+                        _ => len,\n                     };\n                     let len = len.unwrap_usize(self.tcx.tcx);\n                     for i in 0..len {"}]}