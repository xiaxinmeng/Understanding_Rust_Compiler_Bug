{"sha": "51cbcca2eb1fe9e34742b932aeedbadd2ab745d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxY2JjY2EyZWIxZmU5ZTM0NzQyYjkzMmFlZWRiYWRkMmFiNzQ1ZDU=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-18T16:46:30Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-27T19:12:51Z"}, "message": "fix rustdoc", "tree": {"sha": "6e9fca1db4ccf9aacb1ca6eb0673c7b45544803a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e9fca1db4ccf9aacb1ca6eb0673c7b45544803a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51cbcca2eb1fe9e34742b932aeedbadd2ab745d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51cbcca2eb1fe9e34742b932aeedbadd2ab745d5", "html_url": "https://github.com/rust-lang/rust/commit/51cbcca2eb1fe9e34742b932aeedbadd2ab745d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51cbcca2eb1fe9e34742b932aeedbadd2ab745d5/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "072cc458393974f9ff38b1448773c013c604c5fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/072cc458393974f9ff38b1448773c013c604c5fd", "html_url": "https://github.com/rust-lang/rust/commit/072cc458393974f9ff38b1448773c013c604c5fd"}], "stats": {"total": 38, "additions": 14, "deletions": 24}, "files": [{"sha": "cc3a60c596ae7a321cdafc3e6b4acd789129d149", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/51cbcca2eb1fe9e34742b932aeedbadd2ab745d5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51cbcca2eb1fe9e34742b932aeedbadd2ab745d5/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=51cbcca2eb1fe9e34742b932aeedbadd2ab745d5", "patch": "@@ -482,12 +482,12 @@ impl<'a> Clean<Option<WherePredicate>> for ty::Predicate<'a> {\n     fn clean(&self, cx: &DocContext<'_>) -> Option<WherePredicate> {\n         match self.skip_binders() {\n             ty::PredicateAtom::Trait(pred, _) => Some(ty::Binder::bind(pred).clean(cx)),\n-            ty::PredicateAtom::Subtype(pred) => Some(ty::Binder::bind(pred).clean(cx)),\n-            ty::PredicateAtom::RegionOutlives(pred) => ty::Binder::bind(pred).clean(cx),\n-            ty::PredicateAtom::TypeOutlives(pred) => ty::Binder::bind(pred).clean(cx),\n-            ty::PredicateAtom::Projection(pred) => Some(ty::Binder::bind(pred).clean(cx)),\n+            ty::PredicateAtom::RegionOutlives(pred) => pred.clean(cx),\n+            ty::PredicateAtom::TypeOutlives(pred) => pred.clean(cx),\n+            ty::PredicateAtom::Projection(pred) => Some(pred.clean(cx)),\n \n-            ty::PredicateAtom::WellFormed(..)\n+            ty::PredicateAtom::Subtype(..)\n+            | ty::PredicateAtom::WellFormed(..)\n             | ty::PredicateAtom::ObjectSafe(..)\n             | ty::PredicateAtom::ClosureKind(..)\n             | ty::PredicateAtom::ConstEvaluatable(..)\n@@ -506,20 +506,11 @@ impl<'a> Clean<WherePredicate> for ty::PolyTraitPredicate<'a> {\n     }\n }\n \n-impl<'tcx> Clean<WherePredicate> for ty::PolySubtypePredicate<'tcx> {\n-    fn clean(&self, _cx: &DocContext<'_>) -> WherePredicate {\n-        panic!(\n-            \"subtype predicates are an internal rustc artifact \\\n-                and should not be seen by rustdoc\"\n-        )\n-    }\n-}\n-\n impl<'tcx> Clean<Option<WherePredicate>>\n-    for ty::PolyOutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>\n+    for ty::OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>\n {\n     fn clean(&self, cx: &DocContext<'_>) -> Option<WherePredicate> {\n-        let ty::OutlivesPredicate(a, b) = self.skip_binder();\n+        let ty::OutlivesPredicate(a, b) = self;\n \n         if let (ty::ReEmpty(_), ty::ReEmpty(_)) = (a, b) {\n             return None;\n@@ -532,9 +523,9 @@ impl<'tcx> Clean<Option<WherePredicate>>\n     }\n }\n \n-impl<'tcx> Clean<Option<WherePredicate>> for ty::PolyOutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>> {\n+impl<'tcx> Clean<Option<WherePredicate>> for ty::OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>> {\n     fn clean(&self, cx: &DocContext<'_>) -> Option<WherePredicate> {\n-        let ty::OutlivesPredicate(ty, lt) = self.skip_binder();\n+        let ty::OutlivesPredicate(ty, lt) = self;\n \n         if let ty::ReEmpty(_) = lt {\n             return None;\n@@ -547,9 +538,9 @@ impl<'tcx> Clean<Option<WherePredicate>> for ty::PolyOutlivesPredicate<Ty<'tcx>,\n     }\n }\n \n-impl<'tcx> Clean<WherePredicate> for ty::PolyProjectionPredicate<'tcx> {\n+impl<'tcx> Clean<WherePredicate> for ty::ProjectionPredicate<'tcx> {\n     fn clean(&self, cx: &DocContext<'_>) -> WherePredicate {\n-        let ty::ProjectionPredicate { projection_ty, ty } = self.skip_binder();\n+        let ty::ProjectionPredicate { projection_ty, ty } = self;\n         WherePredicate::EqPredicate { lhs: projection_ty.clean(cx), rhs: ty.clean(cx) }\n     }\n }\n@@ -1666,8 +1657,8 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                             ty::PredicateAtom::Trait(tr, _constness) => {\n                                 ty::Binder::bind(tr.trait_ref)\n                             }\n-                            ty::PredicateAtom::TypeOutlives(pred) => {\n-                                if let Some(r) = pred.1.clean(cx) {\n+                            ty::PredicateAtom::TypeOutlives(ty::OutlivesPredicate(_ty, reg)) => {\n+                                if let Some(r) = reg.clean(cx) {\n                                     regions.push(GenericBound::Outlives(r));\n                                 }\n                                 return None;\n@@ -1686,9 +1677,8 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                             .predicates\n                             .iter()\n                             .filter_map(|pred| {\n-                                // We never rebind `proj`, so `skip_binders_unchecked` is safe here.\n                                 if let ty::PredicateAtom::Projection(proj) =\n-                                    pred.skip_binders_unchecked()\n+                                    pred.bound_atom(cx.tcx).skip_binder()\n                                 {\n                                     if proj.projection_ty.trait_ref(cx.tcx)\n                                         == trait_ref.skip_binder()"}]}