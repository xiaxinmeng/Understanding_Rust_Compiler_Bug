{"sha": "54d807cfc7f529ac1812ff1a9f4475c109f308e8", "node_id": "C_kwDOAAsO6NoAKDU0ZDgwN2NmYzdmNTI5YWMxODEyZmYxYTlmNDQ3NWMxMDlmMzA4ZTg", "commit": {"author": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-09T05:01:40Z"}, "committer": {"name": "John Kugelman", "email": "john@kugelman.name", "date": "2021-10-09T05:01:40Z"}, "message": "Add #[must_use] to string/char transformation methods\n\nThese methods could be misconstrued as modifying their arguments instead\nof returning new values.\n\nWhere possible I made the note recommend a method that does mutate in\nplace.", "tree": {"sha": "e39c4a1c7867c5f69f2dd671ee2494be6fd7e6b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e39c4a1c7867c5f69f2dd671ee2494be6fd7e6b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54d807cfc7f529ac1812ff1a9f4475c109f308e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54d807cfc7f529ac1812ff1a9f4475c109f308e8", "html_url": "https://github.com/rust-lang/rust/commit/54d807cfc7f529ac1812ff1a9f4475c109f308e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54d807cfc7f529ac1812ff1a9f4475c109f308e8/comments", "author": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jkugelman", "id": 4551859, "node_id": "MDQ6VXNlcjQ1NTE4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/4551859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jkugelman", "html_url": "https://github.com/jkugelman", "followers_url": "https://api.github.com/users/jkugelman/followers", "following_url": "https://api.github.com/users/jkugelman/following{/other_user}", "gists_url": "https://api.github.com/users/jkugelman/gists{/gist_id}", "starred_url": "https://api.github.com/users/jkugelman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jkugelman/subscriptions", "organizations_url": "https://api.github.com/users/jkugelman/orgs", "repos_url": "https://api.github.com/users/jkugelman/repos", "events_url": "https://api.github.com/users/jkugelman/events{/privacy}", "received_events_url": "https://api.github.com/users/jkugelman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8751436ffce35cd1b7291b03b394166b77ff0da", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8751436ffce35cd1b7291b03b394166b77ff0da", "html_url": "https://github.com/rust-lang/rust/commit/f8751436ffce35cd1b7291b03b394166b77ff0da"}], "stats": {"total": 40, "additions": 40, "deletions": 0}, "files": [{"sha": "860f21085f32542ffc1854ba2dfe55bea5ee2106", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54d807cfc7f529ac1812ff1a9f4475c109f308e8/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d807cfc7f529ac1812ff1a9f4475c109f308e8/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=54d807cfc7f529ac1812ff1a9f4475c109f308e8", "patch": "@@ -662,6 +662,8 @@ impl [u8] {\n     ///\n     /// [`make_ascii_uppercase`]: slice::make_ascii_uppercase\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use = \"this returns the uppercase bytes as a new Vec, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> Vec<u8> {\n@@ -680,6 +682,8 @@ impl [u8] {\n     ///\n     /// [`make_ascii_lowercase`]: slice::make_ascii_lowercase\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use = \"this returns the lowercase bytes as a new Vec, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> Vec<u8> {"}, {"sha": "2900d01d9bdae6bdc27c54b7a9909760d5461884", "filename": "library/alloc/src/str.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54d807cfc7f529ac1812ff1a9f4475c109f308e8/library%2Falloc%2Fsrc%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d807cfc7f529ac1812ff1a9f4475c109f308e8/library%2Falloc%2Fsrc%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstr.rs?ref=54d807cfc7f529ac1812ff1a9f4475c109f308e8", "patch": "@@ -367,6 +367,8 @@ impl str {\n     /// assert_eq!(new_year, new_year.to_lowercase());\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use = \"this returns the lowercase string as a new String, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n     pub fn to_lowercase(&self) -> String {\n         let mut s = String::with_capacity(self.len());\n@@ -447,6 +449,8 @@ impl str {\n     /// assert_eq!(\"TSCH\u00dcSS\", s.to_uppercase());\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use = \"this returns the uppercase string as a new String, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"unicode_case_mapping\", since = \"1.2.0\")]\n     pub fn to_uppercase(&self) -> String {\n         let mut s = String::with_capacity(self.len());\n@@ -534,6 +538,7 @@ impl str {\n     /// [`make_ascii_uppercase`]: str::make_ascii_uppercase\n     /// [`to_uppercase`]: #method.to_uppercase\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use = \"to uppercase the value in-place, use `make_ascii_lowercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_uppercase(&self) -> String {\n@@ -565,6 +570,7 @@ impl str {\n     /// [`make_ascii_lowercase`]: str::make_ascii_lowercase\n     /// [`to_lowercase`]: #method.to_lowercase\n     #[cfg(not(no_global_oom_handling))]\n+    #[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[inline]\n     pub fn to_ascii_lowercase(&self) -> String {"}, {"sha": "b3af1f1ffb5928dd00556dfa884c6b98804b06a1", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/54d807cfc7f529ac1812ff1a9f4475c109f308e8/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d807cfc7f529ac1812ff1a9f4475c109f308e8/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=54d807cfc7f529ac1812ff1a9f4475c109f308e8", "patch": "@@ -949,6 +949,8 @@ impl char {\n     /// // convert into themselves.\n     /// assert_eq!('\u5c71'.to_lowercase().to_string(), \"\u5c71\");\n     /// ```\n+    #[must_use = \"this returns the lowercase character as a new iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_lowercase(self) -> ToLowercase {\n@@ -1039,6 +1041,8 @@ impl char {\n     /// ```\n     ///\n     /// holds across languages.\n+    #[must_use = \"this returns the uppercase character as a new iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn to_uppercase(self) -> ToUppercase {\n@@ -1085,6 +1089,7 @@ impl char {\n     ///\n     /// [`make_ascii_uppercase()`]: #method.make_ascii_uppercase\n     /// [`to_uppercase()`]: #method.to_uppercase\n+    #[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.52.0\")]\n     #[inline]\n@@ -1118,6 +1123,7 @@ impl char {\n     ///\n     /// [`make_ascii_lowercase()`]: #method.make_ascii_lowercase\n     /// [`to_lowercase()`]: #method.to_lowercase\n+    #[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.52.0\")]\n     #[inline]"}, {"sha": "d9cac8b425931456960e26da89fcf4ed7f5d0700", "filename": "library/core/src/num/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/54d807cfc7f529ac1812ff1a9f4475c109f308e8/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d807cfc7f529ac1812ff1a9f4475c109f308e8/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fmod.rs?ref=54d807cfc7f529ac1812ff1a9f4475c109f308e8", "patch": "@@ -282,6 +282,7 @@ impl u8 {\n     /// ```\n     ///\n     /// [`make_ascii_uppercase`]: Self::make_ascii_uppercase\n+    #[must_use = \"to uppercase the value in-place, use `make_ascii_lowercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.52.0\")]\n     #[inline]\n@@ -306,6 +307,7 @@ impl u8 {\n     /// ```\n     ///\n     /// [`make_ascii_lowercase`]: Self::make_ascii_lowercase\n+    #[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase()`\"]\n     #[stable(feature = \"ascii_methods_on_intrinsics\", since = \"1.23.0\")]\n     #[rustc_const_stable(feature = \"const_ascii_methods_on_intrinsics\", since = \"1.52.0\")]\n     #[inline]\n@@ -769,6 +771,8 @@ impl u8 {\n     /// assert_eq!(\"\\\\\\\\\", b'\\\\'.escape_ascii().to_string());\n     /// assert_eq!(\"\\\\x9d\", b'\\x9d'.escape_ascii().to_string());\n     /// ```\n+    #[must_use = \"this returns the escaped byte as an iterator, \\\n+                  without modifying the original\"]\n     #[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n     #[inline]\n     pub fn escape_ascii(&self) -> ascii::EscapeDefault {"}, {"sha": "cbb5627cef9820b544ee98e3251d58efb65a29db", "filename": "library/core/src/slice/ascii.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54d807cfc7f529ac1812ff1a9f4475c109f308e8/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d807cfc7f529ac1812ff1a9f4475c109f308e8/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fascii.rs?ref=54d807cfc7f529ac1812ff1a9f4475c109f308e8", "patch": "@@ -72,6 +72,8 @@ impl [u8] {\n     /// let escaped = s.escape_ascii().to_string();\n     /// assert_eq!(escaped, \"0\\\\t\\\\r\\\\n\\\\'\\\\\\\"\\\\\\\\\\\\x9d\");\n     /// ```\n+    #[must_use = \"this returns the escaped bytes as an iterator, \\\n+                  without modifying the original\"]\n     #[unstable(feature = \"inherent_ascii_escape\", issue = \"77174\")]\n     pub fn escape_ascii(&self) -> EscapeAscii<'_> {\n         EscapeAscii { inner: self.iter().flat_map(EscapeByte) }"}, {"sha": "993e22a5b507b36de84863c32b281429d83d8f5c", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/54d807cfc7f529ac1812ff1a9f4475c109f308e8/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d807cfc7f529ac1812ff1a9f4475c109f308e8/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=54d807cfc7f529ac1812ff1a9f4475c109f308e8", "patch": "@@ -798,6 +798,8 @@ impl str {\n     ///\n     /// assert_eq!(None, iter.next());\n     /// ```\n+    #[must_use = \"this returns the split string as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n     #[inline]\n     pub fn split_whitespace(&self) -> SplitWhitespace<'_> {\n@@ -839,6 +841,8 @@ impl str {\n     ///\n     /// assert_eq!(None, iter.next());\n     /// ```\n+    #[must_use = \"this returns the split string as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"split_ascii_whitespace\", since = \"1.34.0\")]\n     #[inline]\n     pub fn split_ascii_whitespace(&self) -> SplitAsciiWhitespace<'_> {\n@@ -914,6 +918,8 @@ impl str {\n     ///\n     /// assert!(utf16_len <= utf8_len);\n     /// ```\n+    #[must_use = \"this returns the encoded string as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"encode_utf16\", since = \"1.8.0\")]\n     pub fn encode_utf16(&self) -> EncodeUtf16<'_> {\n         EncodeUtf16 { chars: self.chars(), extra: 0 }\n@@ -1840,6 +1846,8 @@ impl str {\n     /// let s = \"  \u05e2\u05d1\u05e8\u05d9\u05ea\";\n     /// assert!(Some('\u05e2') == s.trim_left().chars().next());\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new slice, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(\n@@ -1882,6 +1890,8 @@ impl str {\n     /// let s = \"\u05e2\u05d1\u05e8\u05d9\u05ea  \";\n     /// assert!(Some('\u05ea') == s.trim_right().chars().rev().next());\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new slice, \\\n+                  without modifying the original\"]\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_deprecated(\n@@ -2346,6 +2356,8 @@ impl str {\n     /// ```\n     /// assert_eq!(\"\u2764\\n!\".escape_debug().to_string(), \"\u2764\\\\n!\");\n     /// ```\n+    #[must_use = \"this returns the escaped string as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n     pub fn escape_debug(&self) -> EscapeDebug<'_> {\n         let mut chars = self.chars();\n@@ -2390,6 +2402,8 @@ impl str {\n     /// ```\n     /// assert_eq!(\"\u2764\\n!\".escape_default().to_string(), \"\\\\u{2764}\\\\n!\");\n     /// ```\n+    #[must_use = \"this returns the escaped string as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n     pub fn escape_default(&self) -> EscapeDefault<'_> {\n         EscapeDefault { inner: self.chars().flat_map(CharEscapeDefault) }\n@@ -2426,6 +2440,8 @@ impl str {\n     /// ```\n     /// assert_eq!(\"\u2764\\n!\".escape_unicode().to_string(), \"\\\\u{2764}\\\\u{a}\\\\u{21}\");\n     /// ```\n+    #[must_use = \"this returns the escaped string as an iterator, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"str_escape\", since = \"1.34.0\")]\n     pub fn escape_unicode(&self) -> EscapeUnicode<'_> {\n         EscapeUnicode { inner: self.chars().flat_map(CharEscapeUnicode) }"}, {"sha": "c305519dd4461ad549a98d7a65778b7278e301d1", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/54d807cfc7f529ac1812ff1a9f4475c109f308e8/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54d807cfc7f529ac1812ff1a9f4475c109f308e8/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=54d807cfc7f529ac1812ff1a9f4475c109f308e8", "patch": "@@ -777,6 +777,7 @@ impl OsStr {\n     ///\n     /// assert_eq!(\"gr\u00fc\u00dfe, j\u00fcrgen \u2764\", s.to_ascii_lowercase());\n     /// ```\n+    #[must_use = \"to lowercase the value in-place, use `make_ascii_lowercase`\"]\n     #[stable(feature = \"osstring_ascii\", since = \"1.53.0\")]\n     pub fn to_ascii_lowercase(&self) -> OsString {\n         OsString::from_inner(self.inner.to_ascii_lowercase())\n@@ -798,6 +799,7 @@ impl OsStr {\n     ///\n     /// assert_eq!(\"GR\u00fc\u00dfE, J\u00fcRGEN \u2764\", s.to_ascii_uppercase());\n     /// ```\n+    #[must_use = \"to uppercase the value in-place, use `make_ascii_uppercase`\"]\n     #[stable(feature = \"osstring_ascii\", since = \"1.53.0\")]\n     pub fn to_ascii_uppercase(&self) -> OsString {\n         OsString::from_inner(self.inner.to_ascii_uppercase())"}]}