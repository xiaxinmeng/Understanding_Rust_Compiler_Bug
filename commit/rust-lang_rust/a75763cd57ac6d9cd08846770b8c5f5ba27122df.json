{"sha": "a75763cd57ac6d9cd08846770b8c5f5ba27122df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NTc2M2NkNTdhYzZkOWNkMDg4NDY3NzBiOGM1ZjViYTI3MTIyZGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-08T21:11:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-08T21:11:53Z"}, "message": "Merge #8433\n\n8433: Intern lots of things r=jonas-schievink a=flodiebold\n\nThis uses the new interning infrastructure for most type-related things, where it had a positive effect on memory usage and performance. In total, this gives a slight performance improvement and a quite good memory reduction (1119MB->885MB on RA, 1774MB->1188MB on Diesel).\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>", "tree": {"sha": "d33b6ca6fc37c3eaf19980926fa2dd0d59e66b43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d33b6ca6fc37c3eaf19980926fa2dd0d59e66b43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a75763cd57ac6d9cd08846770b8c5f5ba27122df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgb3GZCRBK7hj4Ov3rIwAAdHIIAJrm1EfJq+zW2wnFUGArZtaM\n6llEBxsgaX0W32ZPb/HRLi3Cf5rK/KhZl7JFn11w8jmMj3topA9RMylk0CYrqt2t\nZNLjC5rEqITmRLcrJiRi3Z60vKsBqyYJstmX4umyz0m5URXKH0NTbr9nhOn0o60T\nOSbnD3ecF22mDJhQpHvfS4RSfR0KAP2gjr8C8MDsi69OLtD9iwsbB4qCqNcwFBPZ\nC7sp4ZpUFvwQ0L/R1d+S69TIgzfhumdYj3/HVHi0UBmR4TVJe7cEFwr5LfdFHmDp\n2taaBuuqNAoS9qrpYBw+F9smpF1Ij0SSjwrFsy5vfKfnutPK+FwEls1/g1kYxvY=\n=jpYD\n-----END PGP SIGNATURE-----\n", "payload": "tree d33b6ca6fc37c3eaf19980926fa2dd0d59e66b43\nparent 63726a91b721e119622e0c7ea106fc5c2e866bf3\nparent 37ff15ad835ee4ba6d231cac8b1adbd301aec20b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617916313 +0000\ncommitter GitHub <noreply@github.com> 1617916313 +0000\n\nMerge #8433\n\n8433: Intern lots of things r=jonas-schievink a=flodiebold\n\nThis uses the new interning infrastructure for most type-related things, where it had a positive effect on memory usage and performance. In total, this gives a slight performance improvement and a quite good memory reduction (1119MB->885MB on RA, 1774MB->1188MB on Diesel).\n\nCo-authored-by: Florian Diebold <flodiebold@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a75763cd57ac6d9cd08846770b8c5f5ba27122df", "html_url": "https://github.com/rust-lang/rust/commit/a75763cd57ac6d9cd08846770b8c5f5ba27122df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a75763cd57ac6d9cd08846770b8c5f5ba27122df/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63726a91b721e119622e0c7ea106fc5c2e866bf3", "url": "https://api.github.com/repos/rust-lang/rust/commits/63726a91b721e119622e0c7ea106fc5c2e866bf3", "html_url": "https://github.com/rust-lang/rust/commit/63726a91b721e119622e0c7ea106fc5c2e866bf3"}, {"sha": "37ff15ad835ee4ba6d231cac8b1adbd301aec20b", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ff15ad835ee4ba6d231cac8b1adbd301aec20b", "html_url": "https://github.com/rust-lang/rust/commit/37ff15ad835ee4ba6d231cac8b1adbd301aec20b"}], "stats": {"total": 133, "additions": 83, "deletions": 50}, "files": [{"sha": "04875240bc8a1cc016500d3c243defc379ede028", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=a75763cd57ac6d9cd08846770b8c5f5ba27122df", "patch": "@@ -1825,7 +1825,7 @@ impl Type {\n             Solution::Unique(s) => s\n                 .value\n                 .subst\n-                .interned()\n+                .as_slice(&Interner)\n                 .first()\n                 .map(|ty| self.derived(ty.assert_ty_ref(&Interner).clone())),\n             Solution::Ambig(_) => None,"}, {"sha": "8c4542956284fd44363976235a13ac1df615157b", "filename": "crates/hir_ty/src/chalk_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fchalk_ext.rs?ref=a75763cd57ac6d9cd08846770b8c5f5ba27122df", "patch": "@@ -75,7 +75,7 @@ impl TyExt for Ty {\n     }\n     fn as_reference(&self) -> Option<(&Ty, Lifetime, Mutability)> {\n         match self.kind(&Interner) {\n-            TyKind::Ref(mutability, lifetime, ty) => Some((ty, *lifetime, *mutability)),\n+            TyKind::Ref(mutability, lifetime, ty) => Some((ty, lifetime.clone(), *mutability)),\n             _ => None,\n         }\n     }"}, {"sha": "92224b46b2ced153d244d62062b71830b9fcef30", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=a75763cd57ac6d9cd08846770b8c5f5ba27122df", "patch": "@@ -265,7 +265,7 @@ impl HirDisplay for ProjectionTy {\n         write!(f, \" as {}\", trait_.name)?;\n         if self.substitution.len(&Interner) > 1 {\n             write!(f, \"<\")?;\n-            f.write_joined(&self.substitution.interned()[1..], \", \")?;\n+            f.write_joined(&self.substitution.as_slice(&Interner)[1..], \", \")?;\n             write!(f, \">\")?;\n         }\n         write!(f, \">::{}\", f.db.type_alias_data(from_assoc_type_id(self.associated_ty_id)).name)?;\n@@ -416,7 +416,7 @@ impl HirDisplay for Ty {\n                     write!(f, \",)\")?;\n                 } else {\n                     write!(f, \"(\")?;\n-                    f.write_joined(&*substs.interned(), \", \")?;\n+                    f.write_joined(&*substs.as_slice(&Interner), \", \")?;\n                     write!(f, \")\")?;\n                 }\n             }\n@@ -444,7 +444,7 @@ impl HirDisplay for Ty {\n                     // We print all params except implicit impl Trait params. Still a bit weird; should we leave out parent and self?\n                     if total_len > 0 {\n                         write!(f, \"<\")?;\n-                        f.write_joined(&parameters.interned()[..total_len], \", \")?;\n+                        f.write_joined(&parameters.as_slice(&Interner)[..total_len], \", \")?;\n                         write!(f, \">\")?;\n                     }\n                 }\n@@ -491,7 +491,7 @@ impl HirDisplay for Ty {\n                             .map(|generic_def_id| f.db.generic_defaults(generic_def_id))\n                             .filter(|defaults| !defaults.is_empty())\n                         {\n-                            None => parameters.interned().as_ref(),\n+                            None => parameters.as_slice(&Interner),\n                             Some(default_parameters) => {\n                                 let mut default_from = 0;\n                                 for (i, parameter) in parameters.iter(&Interner).enumerate() {\n@@ -515,11 +515,11 @@ impl HirDisplay for Ty {\n                                         }\n                                     }\n                                 }\n-                                &parameters.interned()[0..default_from]\n+                                &parameters.as_slice(&Interner)[0..default_from]\n                             }\n                         }\n                     } else {\n-                        parameters.interned().as_ref()\n+                        parameters.as_slice(&Interner)\n                     };\n                     if !parameters_to_write.is_empty() {\n                         write!(f, \"<\")?;\n@@ -542,7 +542,7 @@ impl HirDisplay for Ty {\n                     write!(f, \"{}::{}\", trait_.name, type_alias_data.name)?;\n                     if parameters.len(&Interner) > 0 {\n                         write!(f, \"<\")?;\n-                        f.write_joined(&*parameters.interned(), \", \")?;\n+                        f.write_joined(&*parameters.as_slice(&Interner), \", \")?;\n                         write!(f, \">\")?;\n                     }\n                 } else {\n@@ -749,13 +749,13 @@ fn write_bounds_like_dyn_trait(\n                 // existential) here, which is the only thing that's\n                 // possible in actual Rust, and hence don't print it\n                 write!(f, \"{}\", f.db.trait_data(trait_).name)?;\n-                if let [_, params @ ..] = &*trait_ref.substitution.interned().as_slice() {\n+                if let [_, params @ ..] = &*trait_ref.substitution.as_slice(&Interner) {\n                     if is_fn_trait {\n                         if let Some(args) =\n                             params.first().and_then(|it| it.assert_ty_ref(&Interner).as_tuple())\n                         {\n                             write!(f, \"(\")?;\n-                            f.write_joined(&*args.interned(), \", \")?;\n+                            f.write_joined(args.as_slice(&Interner), \", \")?;\n                             write!(f, \")\")?;\n                         }\n                     } else if !params.is_empty() {\n@@ -814,7 +814,7 @@ fn fmt_trait_ref(tr: &TraitRef, f: &mut HirFormatter, use_as: bool) -> Result<()\n     write!(f, \"{}\", f.db.trait_data(tr.hir_trait_id()).name)?;\n     if tr.substitution.len(&Interner) > 1 {\n         write!(f, \"<\")?;\n-        f.write_joined(&tr.substitution.interned()[1..], \", \")?;\n+        f.write_joined(&tr.substitution.as_slice(&Interner)[1..], \", \")?;\n         write!(f, \">\")?;\n     }\n     Ok(())"}, {"sha": "7961f4a5299beace91e36b5db9049270ad2267a4", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=a75763cd57ac6d9cd08846770b8c5f5ba27122df", "patch": "@@ -462,7 +462,11 @@ impl<'a> InferenceContext<'a> {\n                     };\n                     match canonicalized.decanonicalize_ty(derefed_ty.value).kind(&Interner) {\n                         TyKind::Tuple(_, substs) => name.as_tuple_index().and_then(|idx| {\n-                            substs.interned().get(idx).map(|a| a.assert_ty_ref(&Interner)).cloned()\n+                            substs\n+                                .as_slice(&Interner)\n+                                .get(idx)\n+                                .map(|a| a.assert_ty_ref(&Interner))\n+                                .cloned()\n                         }),\n                         TyKind::Adt(AdtId(hir_def::AdtId::StructId(s)), parameters) => {\n                             let local_id = self.db.struct_data(*s).variant_data.field(name)?;"}, {"sha": "aea354cdecf80d823f95ed1f141b75181bcd82ea", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=a75763cd57ac6d9cd08846770b8c5f5ba27122df", "patch": "@@ -122,7 +122,7 @@ impl<'a> InferenceContext<'a> {\n         let ty = match &body[pat] {\n             &Pat::Tuple { ref args, ellipsis } => {\n                 let expectations = match expected.as_tuple() {\n-                    Some(parameters) => &*parameters.interned().as_slice(),\n+                    Some(parameters) => &*parameters.as_slice(&Interner),\n                     _ => &[],\n                 };\n \n@@ -242,7 +242,7 @@ impl<'a> InferenceContext<'a> {\n                     let (inner_ty, alloc_ty) = match expected.as_adt() {\n                         Some((adt, subst)) if adt == box_adt => (\n                             subst.at(&Interner, 0).assert_ty_ref(&Interner).clone(),\n-                            subst.interned().get(1).and_then(|a| a.ty(&Interner).cloned()),\n+                            subst.as_slice(&Interner).get(1).and_then(|a| a.ty(&Interner).cloned()),\n                         ),\n                         _ => (self.result.standard_types.unknown.clone(), None),\n                     };"}, {"sha": "495282eba85196cd81e4ecc7f9a94c24fe0e15c8", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=a75763cd57ac6d9cd08846770b8c5f5ba27122df", "patch": "@@ -101,7 +101,7 @@ impl<'a> InferenceContext<'a> {\n         let substs = ctx.substs_from_path(path, typable, true);\n         let ty = TyBuilder::value_ty(self.db, typable)\n             .use_parent_substs(&parent_substs)\n-            .fill(substs.interned()[parent_substs.len(&Interner)..].iter().cloned())\n+            .fill(substs.as_slice(&Interner)[parent_substs.len(&Interner)..].iter().cloned())\n             .build();\n         Some(ty)\n     }"}, {"sha": "beb58d711739d07b0759b8fce9af718fefa8e9d3", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=a75763cd57ac6d9cd08846770b8c5f5ba27122df", "patch": "@@ -109,7 +109,7 @@ pub type WhereClause = chalk_ir::WhereClause<Interner>;\n pub fn subst_prefix(s: &Substitution, n: usize) -> Substitution {\n     Substitution::from_iter(\n         &Interner,\n-        s.interned()[..std::cmp::min(s.len(&Interner), n)].iter().cloned(),\n+        s.as_slice(&Interner)[..std::cmp::min(s.len(&Interner), n)].iter().cloned(),\n     )\n }\n \n@@ -187,7 +187,7 @@ impl CallableSig {\n                 .shifted_out_to(&Interner, DebruijnIndex::ONE)\n                 .expect(\"unexpected lifetime vars in fn ptr\")\n                 .0\n-                .interned()\n+                .as_slice(&Interner)\n                 .iter()\n                 .map(|arg| arg.assert_ty_ref(&Interner).clone())\n                 .collect(),"}, {"sha": "b6a3cec6d562ed41b0da358911b1ea0d890224de", "filename": "crates/hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 59, "deletions": 30, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=a75763cd57ac6d9cd08846770b8c5f5ba27122df", "patch": "@@ -2,9 +2,13 @@\n //! representation of the various objects Chalk deals with (types, goals etc.).\n \n use super::tls;\n+use crate::GenericArg;\n use base_db::salsa::InternId;\n-use chalk_ir::{GenericArg, Goal, GoalData};\n-use hir_def::TypeAliasId;\n+use chalk_ir::{Goal, GoalData};\n+use hir_def::{\n+    intern::{impl_internable, InternStorage, Internable, Interned},\n+    TypeAliasId,\n+};\n use smallvec::SmallVec;\n use std::{fmt, sync::Arc};\n \n@@ -26,22 +30,47 @@ pub(crate) type OpaqueTyId = chalk_ir::OpaqueTyId<Interner>;\n pub(crate) type OpaqueTyDatum = chalk_solve::rust_ir::OpaqueTyDatum<Interner>;\n pub(crate) type Variances = chalk_ir::Variances<Interner>;\n \n+#[derive(PartialEq, Eq, Hash, Debug)]\n+pub struct InternedWrapper<T>(T);\n+\n+impl<T> std::ops::Deref for InternedWrapper<T> {\n+    type Target = T;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.0\n+    }\n+}\n+\n+impl_internable!(\n+    InternedWrapper<Vec<chalk_ir::VariableKind<Interner>>>,\n+    InternedWrapper<SmallVec<[GenericArg; 2]>>,\n+    InternedWrapper<chalk_ir::TyData<Interner>>,\n+    InternedWrapper<chalk_ir::LifetimeData<Interner>>,\n+    InternedWrapper<chalk_ir::ConstData<Interner>>,\n+    InternedWrapper<Vec<chalk_ir::CanonicalVarKind<Interner>>>,\n+    InternedWrapper<Vec<chalk_ir::ProgramClause<Interner>>>,\n+    InternedWrapper<Vec<chalk_ir::QuantifiedWhereClause<Interner>>>,\n+    InternedWrapper<Vec<chalk_ir::Variance>>,\n+);\n+\n impl chalk_ir::interner::Interner for Interner {\n-    type InternedType = Arc<chalk_ir::TyData<Self>>;\n-    type InternedLifetime = chalk_ir::LifetimeData<Self>;\n-    type InternedConst = Arc<chalk_ir::ConstData<Self>>;\n+    type InternedType = Interned<InternedWrapper<chalk_ir::TyData<Interner>>>;\n+    type InternedLifetime = Interned<InternedWrapper<chalk_ir::LifetimeData<Self>>>;\n+    type InternedConst = Interned<InternedWrapper<chalk_ir::ConstData<Self>>>;\n     type InternedConcreteConst = ();\n     type InternedGenericArg = chalk_ir::GenericArgData<Self>;\n     type InternedGoal = Arc<GoalData<Self>>;\n     type InternedGoals = Vec<Goal<Self>>;\n-    type InternedSubstitution = SmallVec<[GenericArg<Self>; 2]>;\n-    type InternedProgramClause = Arc<chalk_ir::ProgramClauseData<Self>>;\n-    type InternedProgramClauses = Arc<[chalk_ir::ProgramClause<Self>]>;\n-    type InternedQuantifiedWhereClauses = Vec<chalk_ir::QuantifiedWhereClause<Self>>;\n-    type InternedVariableKinds = Vec<chalk_ir::VariableKind<Self>>;\n-    type InternedCanonicalVarKinds = Vec<chalk_ir::CanonicalVarKind<Self>>;\n+    type InternedSubstitution = Interned<InternedWrapper<SmallVec<[GenericArg; 2]>>>;\n+    type InternedProgramClause = chalk_ir::ProgramClauseData<Self>;\n+    type InternedProgramClauses = Interned<InternedWrapper<Vec<chalk_ir::ProgramClause<Self>>>>;\n+    type InternedQuantifiedWhereClauses =\n+        Interned<InternedWrapper<Vec<chalk_ir::QuantifiedWhereClause<Self>>>>;\n+    type InternedVariableKinds = Interned<InternedWrapper<Vec<chalk_ir::VariableKind<Interner>>>>;\n+    type InternedCanonicalVarKinds =\n+        Interned<InternedWrapper<Vec<chalk_ir::CanonicalVarKind<Self>>>>;\n     type InternedConstraints = Vec<chalk_ir::InEnvironment<chalk_ir::Constraint<Self>>>;\n-    type InternedVariances = Arc<[chalk_ir::Variance]>;\n+    type InternedVariances = Interned<InternedWrapper<Vec<chalk_ir::Variance>>>;\n     type DefId = InternId;\n     type InternedAdtId = hir_def::AdtId;\n     type Identifier = TypeAliasId;\n@@ -99,7 +128,7 @@ impl chalk_ir::interner::Interner for Interner {\n     }\n \n     fn debug_generic_arg(\n-        parameter: &GenericArg<Interner>,\n+        parameter: &GenericArg,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_generic_arg(parameter, fmt)))\n@@ -194,30 +223,30 @@ impl chalk_ir::interner::Interner for Interner {\n \n     fn intern_ty(&self, kind: chalk_ir::TyKind<Self>) -> Self::InternedType {\n         let flags = kind.compute_flags(self);\n-        Arc::new(chalk_ir::TyData { kind, flags })\n+        Interned::new(InternedWrapper(chalk_ir::TyData { kind, flags }))\n     }\n \n     fn ty_data<'a>(&self, ty: &'a Self::InternedType) -> &'a chalk_ir::TyData<Self> {\n-        ty\n+        &ty.0\n     }\n \n     fn intern_lifetime(&self, lifetime: chalk_ir::LifetimeData<Self>) -> Self::InternedLifetime {\n-        lifetime\n+        Interned::new(InternedWrapper(lifetime))\n     }\n \n     fn lifetime_data<'a>(\n         &self,\n         lifetime: &'a Self::InternedLifetime,\n     ) -> &'a chalk_ir::LifetimeData<Self> {\n-        lifetime\n+        &lifetime.0\n     }\n \n     fn intern_const(&self, constant: chalk_ir::ConstData<Self>) -> Self::InternedConst {\n-        Arc::new(constant)\n+        Interned::new(InternedWrapper(constant))\n     }\n \n     fn const_data<'a>(&self, constant: &'a Self::InternedConst) -> &'a chalk_ir::ConstData<Self> {\n-        constant\n+        &constant.0\n     }\n \n     fn const_eq(\n@@ -264,23 +293,23 @@ impl chalk_ir::interner::Interner for Interner {\n \n     fn intern_substitution<E>(\n         &self,\n-        data: impl IntoIterator<Item = Result<GenericArg<Self>, E>>,\n+        data: impl IntoIterator<Item = Result<GenericArg, E>>,\n     ) -> Result<Self::InternedSubstitution, E> {\n-        data.into_iter().collect()\n+        Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n     fn substitution_data<'a>(\n         &self,\n         substitution: &'a Self::InternedSubstitution,\n-    ) -> &'a [GenericArg<Self>] {\n-        substitution\n+    ) -> &'a [GenericArg] {\n+        &substitution.as_ref().0\n     }\n \n     fn intern_program_clause(\n         &self,\n         data: chalk_ir::ProgramClauseData<Self>,\n     ) -> Self::InternedProgramClause {\n-        Arc::new(data)\n+        data\n     }\n \n     fn program_clause_data<'a>(\n@@ -294,7 +323,7 @@ impl chalk_ir::interner::Interner for Interner {\n         &self,\n         data: impl IntoIterator<Item = Result<chalk_ir::ProgramClause<Self>, E>>,\n     ) -> Result<Self::InternedProgramClauses, E> {\n-        data.into_iter().collect()\n+        Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n     fn program_clauses_data<'a>(\n@@ -308,7 +337,7 @@ impl chalk_ir::interner::Interner for Interner {\n         &self,\n         data: impl IntoIterator<Item = Result<chalk_ir::QuantifiedWhereClause<Self>, E>>,\n     ) -> Result<Self::InternedQuantifiedWhereClauses, E> {\n-        data.into_iter().collect()\n+        Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n     fn quantified_where_clauses_data<'a>(\n@@ -322,21 +351,21 @@ impl chalk_ir::interner::Interner for Interner {\n         &self,\n         data: impl IntoIterator<Item = Result<chalk_ir::VariableKind<Self>, E>>,\n     ) -> Result<Self::InternedVariableKinds, E> {\n-        data.into_iter().collect()\n+        Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n     fn variable_kinds_data<'a>(\n         &self,\n         parameter_kinds: &'a Self::InternedVariableKinds,\n     ) -> &'a [chalk_ir::VariableKind<Self>] {\n-        &parameter_kinds\n+        &parameter_kinds.as_ref().0\n     }\n \n     fn intern_canonical_var_kinds<E>(\n         &self,\n         data: impl IntoIterator<Item = Result<chalk_ir::CanonicalVarKind<Self>, E>>,\n     ) -> Result<Self::InternedCanonicalVarKinds, E> {\n-        data.into_iter().collect()\n+        Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n     fn canonical_var_kinds_data<'a>(\n@@ -376,7 +405,7 @@ impl chalk_ir::interner::Interner for Interner {\n         &self,\n         data: impl IntoIterator<Item = Result<chalk_ir::Variance, E>>,\n     ) -> Result<Self::InternedVariances, E> {\n-        data.into_iter().collect()\n+        Ok(Interned::new(InternedWrapper(data.into_iter().collect::<Result<_, _>>()?)))\n     }\n \n     fn variances_data<'a>("}, {"sha": "e78581ea5b43cc1cef1655f6e9da65bd54e3169f", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a75763cd57ac6d9cd08846770b8c5f5ba27122df/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=a75763cd57ac6d9cd08846770b8c5f5ba27122df", "patch": "@@ -99,7 +99,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n                 // have the expected self type\n                 return None;\n             }\n-            let args_no_self = trait_ref.substitution.interned()[1..]\n+            let args_no_self = trait_ref.substitution.as_slice(&Interner)[1..]\n                 .iter()\n                 .map(|ty| ty.clone().cast(&Interner))\n                 .collect();\n@@ -111,7 +111,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n                 return None;\n             }\n             let trait_ = projection_ty.trait_(db);\n-            let args_no_self = projection_ty.substitution.interned()[1..]\n+            let args_no_self = projection_ty.substitution.as_slice(&Interner)[1..]\n                 .iter()\n                 .map(|ty| ty.clone().cast(&Interner))\n                 .collect();"}]}