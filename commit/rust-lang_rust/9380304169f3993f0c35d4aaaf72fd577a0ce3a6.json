{"sha": "9380304169f3993f0c35d4aaaf72fd577a0ce3a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzODAzMDQxNjlmMzk5M2YwYzM1ZDRhYWFmNzJmZDU3N2EwY2UzYTY=", "commit": {"author": {"name": "Jonathan S", "email": "gereeter@gmail.com", "date": "2014-03-17T03:09:28Z"}, "committer": {"name": "Jonathan S", "email": "gereeter@gmail.com", "date": "2014-04-04T00:53:43Z"}, "message": "Add fetch_and, fetch_or, fetch_xor to AtomicInt, AtomicUint", "tree": {"sha": "88e1d7ed072e285db3745c3d23ecf3721b1046dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88e1d7ed072e285db3745c3d23ecf3721b1046dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9380304169f3993f0c35d4aaaf72fd577a0ce3a6", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9380304169f3993f0c35d4aaaf72fd577a0ce3a6", "html_url": "https://github.com/rust-lang/rust/commit/9380304169f3993f0c35d4aaaf72fd577a0ce3a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9380304169f3993f0c35d4aaaf72fd577a0ce3a6/comments", "author": null, "committer": null, "parents": [{"sha": "bb31cb8d2e4e415cbb71d368918d72902e655e01", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb31cb8d2e4e415cbb71d368918d72902e655e01", "html_url": "https://github.com/rust-lang/rust/commit/bb31cb8d2e4e415cbb71d368918d72902e655e01"}], "stats": {"total": 134, "additions": 133, "deletions": 1}, "files": [{"sha": "71e67971b458df5ccce9642b0a3a240e18d5b515", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 133, "deletions": 1, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/9380304169f3993f0c35d4aaaf72fd577a0ce3a6/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9380304169f3993f0c35d4aaaf72fd577a0ce3a6/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=9380304169f3993f0c35d4aaaf72fd577a0ce3a6", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -462,6 +462,51 @@ impl AtomicInt {\n     pub fn fetch_sub(&self, val: int, order: Ordering) -> int {\n         unsafe { atomic_sub(self.v.get(), val, order) }\n     }\n+\n+    /// Bitwise and with the current value, returning the previous\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::atomics::{AtomicUint, SeqCst};\n+    ///\n+    /// let foo = AtomicUint::new(0b101101);\n+    /// assert_eq!(0b101101, foo.fetch_and(0b110011, SeqCst));\n+    /// assert_eq!(0b100001, foo.load(SeqCst));\n+    #[inline]\n+    pub fn fetch_and(&self, val: int, order: Ordering) -> int {\n+        unsafe { atomic_and(self.v.get(), val, order) }\n+    }\n+\n+    /// Bitwise or with the current value, returning the previous\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::atomics::{AtomicUint, SeqCst};\n+    ///\n+    /// let foo = AtomicUint::new(0b101101);\n+    /// assert_eq!(0b101101, foo.fetch_or(0b110011, SeqCst));\n+    /// assert_eq!(0b111111, foo.load(SeqCst));\n+    #[inline]\n+    pub fn fetch_or(&self, val: int, order: Ordering) -> int {\n+        unsafe { atomic_or(self.v.get(), val, order) }\n+    }\n+\n+    /// Bitwise xor with the current value, returning the previous\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::atomics::{AtomicUint, SeqCst};\n+    ///\n+    /// let foo = AtomicUint::new(0b101101);\n+    /// assert_eq!(0b101101, foo.fetch_xor(0b110011, SeqCst));\n+    /// assert_eq!(0b011110, foo.load(SeqCst));\n+    #[inline]\n+    pub fn fetch_xor(&self, val: int, order: Ordering) -> int {\n+        unsafe { atomic_xor(self.v.get(), val, order) }\n+    }\n }\n \n impl AtomicUint {\n@@ -529,6 +574,51 @@ impl AtomicUint {\n     pub fn fetch_sub(&self, val: uint, order: Ordering) -> uint {\n         unsafe { atomic_sub(self.v.get(), val, order) }\n     }\n+\n+    /// Bitwise and with the current value, returning the previous\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::atomics::{AtomicUint, SeqCst};\n+    ///\n+    /// let foo = AtomicUint::new(0b101101);\n+    /// assert_eq!(0b101101, foo.fetch_and(0b110011, SeqCst));\n+    /// assert_eq!(0b100001, foo.load(SeqCst));\n+    #[inline]\n+    pub fn fetch_and(&self, val: uint, order: Ordering) -> uint {\n+        unsafe { atomic_and(self.v.get(), val, order) }\n+    }\n+\n+    /// Bitwise or with the current value, returning the previous\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::atomics::{AtomicUint, SeqCst};\n+    ///\n+    /// let foo = AtomicUint::new(0b101101);\n+    /// assert_eq!(0b101101, foo.fetch_or(0b110011, SeqCst));\n+    /// assert_eq!(0b111111, foo.load(SeqCst));\n+    #[inline]\n+    pub fn fetch_or(&self, val: uint, order: Ordering) -> uint {\n+        unsafe { atomic_or(self.v.get(), val, order) }\n+    }\n+\n+    /// Bitwise xor with the current value, returning the previous\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::sync::atomics::{AtomicUint, SeqCst};\n+    ///\n+    /// let foo = AtomicUint::new(0b101101);\n+    /// assert_eq!(0b101101, foo.fetch_xor(0b110011, SeqCst));\n+    /// assert_eq!(0b011110, foo.load(SeqCst));\n+    #[inline]\n+    pub fn fetch_xor(&self, val: uint, order: Ordering) -> uint {\n+        unsafe { atomic_xor(self.v.get(), val, order) }\n+    }\n }\n \n impl<T> AtomicPtr<T> {\n@@ -843,6 +933,48 @@ mod test {\n         assert_eq!(a.load(SeqCst),false);\n     }\n \n+    #[test]\n+    fn uint_and() {\n+        let x = AtomicUint::new(0xf731);\n+        assert_eq!(x.fetch_and(0x137f, SeqCst), 0xf731);\n+        assert_eq!(x.load(SeqCst), 0xf731 & 0x137f);\n+    }\n+\n+    #[test]\n+    fn uint_or() {\n+        let x = AtomicUint::new(0xf731);\n+        assert_eq!(x.fetch_or(0x137f, SeqCst), 0xf731);\n+        assert_eq!(x.load(SeqCst), 0xf731 | 0x137f);\n+    }\n+\n+    #[test]\n+    fn uint_xor() {\n+        let x = AtomicUint::new(0xf731);\n+        assert_eq!(x.fetch_xor(0x137f, SeqCst), 0xf731);\n+        assert_eq!(x.load(SeqCst), 0xf731 ^ 0x137f);\n+    }\n+\n+    #[test]\n+    fn int_and() {\n+        let x = AtomicInt::new(0xf731);\n+        assert_eq!(x.fetch_and(0x137f, SeqCst), 0xf731);\n+        assert_eq!(x.load(SeqCst), 0xf731 & 0x137f);\n+    }\n+\n+    #[test]\n+    fn int_or() {\n+        let x = AtomicInt::new(0xf731);\n+        assert_eq!(x.fetch_or(0x137f, SeqCst), 0xf731);\n+        assert_eq!(x.load(SeqCst), 0xf731 | 0x137f);\n+    }\n+\n+    #[test]\n+    fn int_xor() {\n+        let x = AtomicInt::new(0xf731);\n+        assert_eq!(x.fetch_xor(0x137f, SeqCst), 0xf731);\n+        assert_eq!(x.load(SeqCst), 0xf731 ^ 0x137f);\n+    }\n+\n     static mut S_BOOL : AtomicBool = INIT_ATOMIC_BOOL;\n     static mut S_INT  : AtomicInt  = INIT_ATOMIC_INT;\n     static mut S_UINT : AtomicUint = INIT_ATOMIC_UINT;"}]}