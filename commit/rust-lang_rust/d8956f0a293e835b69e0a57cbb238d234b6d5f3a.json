{"sha": "d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4OTU2ZjBhMjkzZTgzNWI2OWUwYTU3Y2JiMjM4ZDIzNGI2ZDVmM2E=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-12-19T10:38:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-12-19T10:38:54Z"}, "message": "Merge pull request #580 from RalfJung/cargo-miri\n\nCargo miri tweaks and test that we can exclude tests", "tree": {"sha": "fc401058516a2b9b05c4c78885a402250b6b9515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc401058516a2b9b05c4c78885a402250b6b9515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcGh+/CRBK7hj4Ov3rIwAAdHIIACTkFBql4Gd24j53i6bVlt8R\nhbg90QDXdjdPE4ISyiX5kpVfIYN0h/LdZQf4X3zKT3GdCd4tPnuTyYp0H3BtDDX1\ncgnTTOqdSJDPB+s11DsSiJIjnXtp3xGx8cH8FOGt5Vhpf5R8jg7RYnd9cGd4xvLf\nHjFtsgIp1KDNKshACF4XJKPEEaiFmte2h2j3ewqODX7tfJX+rI6NFMxxhnlIAiBK\nAXm2zPr6IKYqdXHCfcE9cjCtaMzvErMQiJwBO13K47OW5sklnrKZDl9WUzZHV5D3\nlohaDgq9ucBYgBHTfNXU59tyfwQ8B+7RHnfI9crrol3+ytMHbdLvLjulxF2KCAk=\n=gPyb\n-----END PGP SIGNATURE-----\n", "payload": "tree fc401058516a2b9b05c4c78885a402250b6b9515\nparent 1f687374cae2fc1ccd8109fb02f939b76665dc8d\nparent adba97e4b24aa5ec920330a549690f664a3e1ab6\nauthor Ralf Jung <post@ralfj.de> 1545215934 +0100\ncommitter GitHub <noreply@github.com> 1545215934 +0100\n\nMerge pull request #580 from RalfJung/cargo-miri\n\nCargo miri tweaks and test that we can exclude tests"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "html_url": "https://github.com/rust-lang/rust/commit/d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f687374cae2fc1ccd8109fb02f939b76665dc8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f687374cae2fc1ccd8109fb02f939b76665dc8d", "html_url": "https://github.com/rust-lang/rust/commit/1f687374cae2fc1ccd8109fb02f939b76665dc8d"}, {"sha": "adba97e4b24aa5ec920330a549690f664a3e1ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/adba97e4b24aa5ec920330a549690f664a3e1ab6", "html_url": "https://github.com/rust-lang/rust/commit/adba97e4b24aa5ec920330a549690f664a3e1ab6"}], "stats": {"total": 54, "additions": 40, "deletions": 14}, "files": [{"sha": "51b14a1b345bf879f167490d60be800415edfb24", "filename": ".travis.yml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "patch": "@@ -38,3 +38,4 @@ branches:\n env:\n   global:\n   - RUST_TEST_NOCAPTURE=1\n+  - RUST_BACKTRACE=1"}, {"sha": "5a615e656d7428bfe97cb19c67638798175db5da", "filename": "README.md", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "patch": "@@ -39,17 +39,28 @@ example above), overriding it in your project directory as well, or use `rustup\n default nightly` (or `rustup default nightly-YYYY-MM-DD`) to globally make\n `nightly` the default toolchain.\n \n-Now you can run your project in miri:\n+Now you can run your project in Miri:\n \n 1. Run `cargo clean` to eliminate any cached dependencies.  Miri needs your\n    dependencies to be compiled the right way, that would not happen if they have\n    previously already been compiled.\n 2. To run all tests in your project through Miri, use `cargo +nightly miri test`.\n-   **NOTE**: This is currently broken, see the discussion in\n-   [#479](https://github.com/solson/miri/issues/479).\n 3. If you have a binary project, you can run it through Miri using `cargo\n    +nightly miri run`.\n \n+When running code via `cargo miri`, the `cargo-miri` feature is set.  You can\n+use this to exclude test cases that will fail under Miri because they do things\n+Miri does not support:\n+\n+```rust\n+#[cfg(not(feature = \"cargo-miri\"))]\n+#[test]\n+fn does_not_work_on_miri() {\n+    let x = 0u8;\n+    assert!(&x as *const _ as usize % 4 < 4);\n+}\n+```\n+\n ### Common Problems\n \n When using the above instructions, you may encounter a number of confusing compiler"}, {"sha": "09040ed42a58c8ac715b71fb0b22a7d77f0b3692", "filename": "appveyor.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "patch": "@@ -25,7 +25,7 @@ install:\n build: false\n \n test_script:\n-    - set RUSTFLAGS=-g\n+    - set RUST_TEST_NOCAPTURE=1\n     - set RUST_BACKTRACE=1\n     # Build miri\n     - cargo build --release --all-features --all-targets"}, {"sha": "21cc7ee0e398e2ede5ee29f12a3ce33e186f5282", "filename": "src/bin/cargo-miri.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/src%2Fbin%2Fcargo-miri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/src%2Fbin%2Fcargo-miri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-miri.rs?ref=d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "patch": "@@ -123,8 +123,14 @@ fn xargo_version() -> Option<(u32, u32, u32)> {\n     let line = out.stderr.lines().nth(0)\n         .expect(\"malformed `xargo --version` output: not at least one line\")\n         .expect(\"malformed `xargo --version` output: error reading first line\");\n-    let version = line.split(' ').nth(1)\n-        .expect(\"malformed `xargo --version` output: not at least two words\");\n+    let (name, version) = {\n+        let mut split = line.split(' ');\n+        (split.next().expect(\"malformed `xargo --version` output: empty\"),\n+         split.next().expect(\"malformed `xargo --version` output: not at least two words\"))\n+    };\n+    if name != \"xargo\" {\n+        panic!(\"malformed `xargo --version` output: application name is not `xargo`\");\n+    }\n     let mut version_pieces = version.split('.');\n     let major = version_pieces.next()\n         .expect(\"malformed `xargo --version` output: not a major version piece\")\n@@ -414,8 +420,6 @@ where\n         args.push(\"--\".to_owned());\n     }\n     args.push(\"--emit=dep-info,metadata\".to_owned());\n-    args.push(\"--cfg\".to_owned());\n-    args.push(r#\"feature=\"cargo-miri\"\"#.to_owned());\n \n     let path = std::env::current_exe().expect(\"current executable path invalid\");\n     let exit_status = Command::new(\"cargo\")"}, {"sha": "ab38270724f4c5a87afef91d1e3a0d22ce539ea2", "filename": "src/fn_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "patch": "@@ -398,7 +398,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                         Err(_) => -1,\n                     }\n                 } else {\n-                    warn!(\"Ignored output to FD {}\", fd);\n+                    eprintln!(\"Miri: Ignored output to FD {}\", fd);\n                     n as i64 // pretend it all went well\n                 }; // now result is the value we return back to the program\n                 this.write_scalar("}, {"sha": "7f7f2660c06224c9e9162ca48bde8cecd2b070c8", "filename": "test-cargo-miri/run-test.py", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/test-cargo-miri%2Frun-test.py", "raw_url": "https://github.com/rust-lang/rust/raw/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/test-cargo-miri%2Frun-test.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Frun-test.py?ref=d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "patch": "@@ -7,6 +7,10 @@\n \n import sys, subprocess\n \n+def fail(msg):\n+    print(\"TEST FAIL: {}\".format(msg))\n+    sys.exit(1)\n+\n def test(name, cmd, stdout_ref, stderr_ref):\n     print(\"==> Testing `{}` <==\".format(name))\n     ## Call `cargo miri`, capture all output\n@@ -25,13 +29,11 @@ def test(name, cmd, stdout_ref, stderr_ref):\n     print(stderr, end=\"\")\n     # Test for failures\n     if p.returncode != 0:\n-        sys.exit(1)\n+        fail(\"Non-zero exit status\")\n     if stdout != open(stdout_ref).read():\n-        print(\"stdout does not match reference\")\n-        sys.exit(1)\n+        fail(\"stdout does not match reference\")\n     if stderr != open(stderr_ref).read():\n-        print(\"stderr does not match reference\")\n-        sys.exit(1)\n+        fail(\"stderr does not match reference\")\n \n def test_cargo_miri_run():\n     test(\"cargo miri run\", [\"cargo\", \"miri\", \"run\", \"-q\"], \"stdout.ref\", \"stderr.ref\")"}, {"sha": "bd7b2c569a19b2a298b4f60cd0a3b0877661b7cf", "filename": "test-cargo-miri/tests/foo.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/test-cargo-miri%2Ftests%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8956f0a293e835b69e0a57cbb238d234b6d5f3a/test-cargo-miri%2Ftests%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test-cargo-miri%2Ftests%2Ffoo.rs?ref=d8956f0a293e835b69e0a57cbb238d234b6d5f3a", "patch": "@@ -9,3 +9,11 @@ fn bar() {\n fn baz() {\n     assert_eq!(5, 5);\n }\n+\n+// A test that won't work on miri\n+#[cfg(not(feature = \"cargo-miri\"))]\n+#[test]\n+fn does_not_work_on_miri() {\n+    let x = 0u8;\n+    assert!(&x as *const _ as usize % 4 < 4);\n+}"}]}