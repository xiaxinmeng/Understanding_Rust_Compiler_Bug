{"sha": "4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmNGFlNTM4YWU3ZmY3ZTBkOTIxMjc2ZTQ3ZmIxNzZmNWI0NDBkZGQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-02T15:25:54Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-01-03T14:34:05Z"}, "message": "fix rpass/cfail tests", "tree": {"sha": "70ab84f4d82c4c105ed20322323615ebf51992b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70ab84f4d82c4c105ed20322323615ebf51992b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "html_url": "https://github.com/rust-lang/rust/commit/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/comments", "author": null, "committer": null, "parents": [{"sha": "3bf24d6b633132155fb623ac46f47f2bc6ea6462", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf24d6b633132155fb623ac46f47f2bc6ea6462", "html_url": "https://github.com/rust-lang/rust/commit/3bf24d6b633132155fb623ac46f47f2bc6ea6462"}], "stats": {"total": 57, "additions": 39, "deletions": 18}, "files": [{"sha": "41572998b58a418ed213fb98e9761f1d629ffdde", "filename": "src/test/auxiliary/issue-16643.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Fauxiliary%2Fissue-16643.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Fauxiliary%2Fissue-16643.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-16643.rs?ref=4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![crate_type = \"lib\"]\n+#![feature(associated_types)]\n \n pub struct TreeBuilder<H>;\n \n@@ -20,7 +21,9 @@ impl<H> TreeBuilder<H> {\n     }\n }\n \n-impl<H> Iterator<H> for TreeBuilder<H> {\n+impl<H> Iterator for TreeBuilder<H> {\n+    type Item = H;\n+\n     fn next(&mut self) -> Option<H> {\n         None\n     }"}, {"sha": "1a2f429c9ebc1c31b32d2923d1ec915b304458b9", "filename": "src/test/auxiliary/nested_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Fauxiliary%2Fnested_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnested_item.rs?ref=4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "patch": "@@ -26,7 +26,7 @@ impl<T> Foo {\n \n // issue 8134\n pub struct Parser<T>;\n-impl<T: std::iter::Iterator<char>> Parser<T> {\n+impl<T: std::iter::Iterator<Item=char>> Parser<T> {\n     fn in_doctype(&mut self) {\n         static DOCTYPEPattern: [char; 6] = ['O', 'C', 'T', 'Y', 'P', 'E'];\n     }"}, {"sha": "8dda54efc06af31ba57089d4467604791c3d2ee9", "filename": "src/test/compile-fail/issue-13058.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs?ref=4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "patch": "@@ -10,7 +10,7 @@\n \n use std::iter::{Range,range};\n \n-trait Itble<'r, T, I: Iterator<T>> { fn iter(&'r self) -> I; }\n+trait Itble<'r, T, I: Iterator<Item=T>> { fn iter(&'r self) -> I; }\n \n impl<'r> Itble<'r, uint, Range<uint>> for (uint, uint) {\n     fn iter(&'r self) -> Range<uint> {\n@@ -19,8 +19,8 @@ impl<'r> Itble<'r, uint, Range<uint>> for (uint, uint) {\n     }\n }\n \n-fn check<'r, I: Iterator<uint>, T: Itble<'r, uint, I>>(cont: &T) -> bool\n-//~^ HELP as shown: fn check<'r, I: Iterator<uint>, T: Itble<'r, uint, I>>(cont: &'r T) -> bool\n+fn check<'r, I: Iterator<Item=uint>, T: Itble<'r, uint, I>>(cont: &T) -> bool\n+//~^ HELP as shown: fn check<'r, I: Iterator<Item = uint>, T: Itble<'r, uint, I>>(cont: &'r T)\n {\n     let cont_iter = cont.iter();\n //~^ ERROR cannot infer an appropriate lifetime for autoref due to conflicting requirements"}, {"sha": "509ca9b80f81ff3d157680d7614f418617d0f170", "filename": "src/test/compile-fail/issue-13853.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Fcompile-fail%2Fissue-13853.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Fcompile-fail%2Fissue-13853.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13853.rs?ref=4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "patch": "@@ -13,11 +13,11 @@ trait Node {\n }\n \n trait Graph<N: Node> {\n-    fn nodes<'a, I: Iterator<&'a N>>(&'a self) -> I;\n+    fn nodes<'a, I: Iterator<Item=&'a N>>(&'a self) -> I;\n }\n \n impl<N: Node> Graph<N> for Vec<N> {\n-    fn nodes<'a, I: Iterator<&'a N>>(&self) -> I {\n+    fn nodes<'a, I: Iterator<Item=&'a N>>(&self) -> I {\n         self.iter() //~ ERROR mismatched types\n     }\n }"}, {"sha": "7d91b1998bf24b000f4deac8cc9c014c2b0b18ad", "filename": "src/test/compile-fail/lifetime-inference-give-expl-lifetime-param-2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flifetime-inference-give-expl-lifetime-param-2.rs?ref=4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "patch": "@@ -12,7 +12,7 @@\n \n use std::iter::{Range,range};\n \n-trait Itble<'r, T, I: Iterator<T>> { fn iter(&'r self) -> I; }\n+trait Itble<'r, T, I: Iterator<Item=T>> { fn iter(&'r self) -> I; }\n \n impl<'r> Itble<'r, uint, Range<uint>> for (uint, uint) {\n     fn iter(&'r self) -> Range<uint> {\n@@ -21,8 +21,8 @@ impl<'r> Itble<'r, uint, Range<uint>> for (uint, uint) {\n     }\n }\n \n-fn check<'r, I: Iterator<uint>, T: Itble<'r, uint, I>>(cont: &T) -> bool {\n-//~^ HELP: consider using an explicit lifetime parameter as shown: fn check<'r, I: Iterator<uint>, T: Itble<'r, uint, I>>(cont: &'r T) -> bool\n+fn check<'r, I: Iterator<Item=uint>, T: Itble<'r, uint, I>>(cont: &T) -> bool {\n+//~^ HELP: consider using an explicit lifetime parameter as shown: fn check<'r, I: Iterator<Item = uint>, T: Itble<'r, uint, I>>(cont: &'r T)\n     let cont_iter = cont.iter(); //~ ERROR: cannot infer\n     let result = cont_iter.fold(Some(0u16), |state, val| {\n         state.map_or(None, |mask| {"}, {"sha": "2bdbdb4fde29596fe38d7dc9b86d80128d85e23f", "filename": "src/test/compile-fail/static-reference-to-fn-2.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs?ref=4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "patch": "@@ -8,13 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n struct StateMachineIter<'a> {\n     statefn: &'a StateMachineFunc<'a>\n }\n \n type StateMachineFunc<'a> = fn(&mut StateMachineIter<'a>) -> Option<&'static str>;\n \n-impl<'a> Iterator<&'static str> for StateMachineIter<'a> {\n+impl<'a> Iterator for StateMachineIter<'a> {\n+    type Item = &'static str;\n+\n     fn next(&mut self) -> Option<&'static str> {\n         return  (*self.statefn)(self);\n     }"}, {"sha": "ee556ce2c84595bad3f81337035e1fa0effcdfd6", "filename": "src/test/run-pass/issue-13167.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Frun-pass%2Fissue-13167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Frun-pass%2Fissue-13167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13167.rs?ref=4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "patch": "@@ -8,13 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n use std::slice;\n \n pub struct PhfMapEntries<'a, T: 'a> {\n     iter: slice::Iter<'a, (&'static str, T)>,\n }\n \n-impl<'a, T> Iterator<(&'static str, &'a T)> for PhfMapEntries<'a, T> {\n+impl<'a, T> Iterator for PhfMapEntries<'a, T> {\n+    type Item = (&'static str, &'a T);\n+\n     fn next(&mut self) -> Option<(&'static str, &'a T)> {\n         self.iter.by_ref().map(|&(key, ref value)| (key, value)).next()\n     }"}, {"sha": "c29dc4319dc0cb87ed2065414c6c9079c9f270f2", "filename": "src/test/run-pass/issue-13204.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Frun-pass%2Fissue-13204.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Frun-pass%2Fissue-13204.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13204.rs?ref=4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "patch": "@@ -12,7 +12,7 @@\n // lifetime parameters defined on the method bound correctly.\n \n pub trait Foo {\n-    fn bar<'a, I: Iterator<&'a ()>>(&self, it: I) -> uint {\n+    fn bar<'a, I: Iterator<Item=&'a ()>>(&self, it: I) -> uint {\n         let mut xs = it.filter(|_| true);\n         xs.count()\n     }"}, {"sha": "d66bbe9187a289a126bd3165d49af7c24d5ff508", "filename": "src/test/run-pass/issue-14919.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14919.rs?ref=4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n trait Matcher {\n     fn next_match(&mut self) -> Option<(uint, uint)>;\n }\n@@ -40,7 +42,9 @@ struct MatchIndices<M> {\n     matcher: M\n }\n \n-impl<M: Matcher> Iterator<(uint, uint)> for MatchIndices<M> {\n+impl<M: Matcher> Iterator for MatchIndices<M> {\n+    type Item = (uint, uint);\n+\n     fn next(&mut self) -> Option<(uint, uint)> {\n         self.matcher.next_match()\n     }"}, {"sha": "7bc6d989fa75cd5ce680c21c8061f6ff4cd80ad6", "filename": "src/test/run-pass/issue-16596.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Frun-pass%2Fissue-16596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Frun-pass%2Fissue-16596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16596.rs?ref=4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(associated_types)]\n+\n trait MatrixRow {}\n \n struct Mat;\n@@ -18,7 +20,9 @@ struct Rows<M: MatrixRow> {\n     mat: M,\n }\n \n-impl<'a> Iterator<()> for Rows<&'a Mat> {\n+impl<'a> Iterator for Rows<&'a Mat> {\n+    type Item = ();\n+\n     fn next(&mut self) -> Option<()> {\n         unimplemented!()\n     }"}, {"sha": "d52c1c0b12c536b0e89b972bdec07c9ff3cda00e", "filename": "src/test/run-pass/regions-no-bound-in-argument-cleanup.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs?ref=4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(unsafe_destructor)]\n+#![feature(associated_types, unsafe_destructor)]\n \n pub struct Foo<T>;\n \n-impl<T> Iterator<T> for Foo<T> {\n+impl<T> Iterator for Foo<T> {\n+    type Item = T;\n+\n     fn next(&mut self) -> Option<T> {\n         None\n     }"}, {"sha": "237c83c8aa23a63bbc0a87a874a1ea0763fdd7aa", "filename": "src/test/run-pass/where-clauses-lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Frun-pass%2Fwhere-clauses-lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f4ae538ae7ff7e0d921276e47fb176f5b440ddd/src%2Ftest%2Frun-pass%2Fwhere-clauses-lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhere-clauses-lifetimes.rs?ref=4f4ae538ae7ff7e0d921276e47fb176f5b440ddd", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo<'a, I>(mut it: I) where I: Iterator<&'a int> {}\n+fn foo<'a, I>(mut it: I) where I: Iterator<Item=&'a int> {}\n \n fn main() {\n     foo([1i, 2].iter());"}]}