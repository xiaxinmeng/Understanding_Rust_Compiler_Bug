{"sha": "a29023e9b2b42e94d77404496e72d0132aa44a6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyOTAyM2U5YjJiNDJlOTRkNzc0MDQ0OTZlNzJkMDEzMmFhNDRhNmI=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-02-19T16:43:15Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-02-19T17:44:02Z"}, "message": "Check type when struct is matched against enum-like pattern\n\nPreviously check always succeeded because struct type was derived from\nthe matched expression, not the matched pattern.", "tree": {"sha": "82078f056e42128792c63b6dcdc89051d13e138e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82078f056e42128792c63b6dcdc89051d13e138e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a29023e9b2b42e94d77404496e72d0132aa44a6b", "comment_count": 8, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a29023e9b2b42e94d77404496e72d0132aa44a6b", "html_url": "https://github.com/rust-lang/rust/commit/a29023e9b2b42e94d77404496e72d0132aa44a6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a29023e9b2b42e94d77404496e72d0132aa44a6b/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67ee95e943163d8d3dad439bfb0ce94e3e9c9aa4", "url": "https://api.github.com/repos/rust-lang/rust/commits/67ee95e943163d8d3dad439bfb0ce94e3e9c9aa4", "html_url": "https://github.com/rust-lang/rust/commit/67ee95e943163d8d3dad439bfb0ce94e3e9c9aa4"}], "stats": {"total": 26, "additions": 23, "deletions": 3}, "files": [{"sha": "828db3b6a939628b6eec44c05bbc3958b333e177", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a29023e9b2b42e94d77404496e72d0132aa44a6b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29023e9b2b42e94d77404496e72d0132aa44a6b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a29023e9b2b42e94d77404496e72d0132aa44a6b", "patch": "@@ -2823,7 +2823,7 @@ pub pure fn ty_fn_ret(fty: t) -> t {\n     }\n }\n \n-fn is_fn_ty(fty: t) -> bool {\n+pub fn is_fn_ty(fty: t) -> bool {\n     match get(fty).sty {\n         ty_bare_fn(_) => true,\n         ty_closure(_) => true,"}, {"sha": "4cbefba31b16ef055a739ef2f606394d9cf737a0", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a29023e9b2b42e94d77404496e72d0132aa44a6b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29023e9b2b42e94d77404496e72d0132aa44a6b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=a29023e9b2b42e94d77404496e72d0132aa44a6b", "patch": "@@ -92,7 +92,7 @@ pub fn check_pat_variant(pcx: pat_ctxt, pat: @ast::pat, path: @ast::path,\n     match structure_of(pcx.fcx, pat.span, expected) {\n         ty::ty_enum(_, ref expected_substs) => {\n             // Lookup the enum and variant def ids:\n-            let v_def = lookup_def(pcx.fcx, path.span, pat.id);\n+            let v_def = lookup_def(pcx.fcx, pat.span, pat.id);\n             let v_def_ids = ast_util::variant_def_ids(v_def);\n \n             // Assign the pattern the type of the *enum*, not the variant.\n@@ -125,8 +125,17 @@ pub fn check_pat_variant(pcx: pat_ctxt, pat: @ast::pat, path: @ast::path,\n             kind_name = \"variant\";\n         }\n         ty::ty_struct(struct_def_id, ref expected_substs) => {\n+            // Lookup the struct ctor def id\n+            let s_def = lookup_def(pcx.fcx, pat.span, pat.id);\n+            let s_def_id = ast_util::def_id_of_def(s_def);\n+\n             // Assign the pattern the type of the struct.\n-            let struct_tpt = ty::lookup_item_type(tcx, struct_def_id);\n+            let ctor_tpt = ty::lookup_item_type(tcx, s_def_id);\n+            let struct_tpt = if ty::is_fn_ty(ctor_tpt.ty) {\n+                {ty: ty::ty_fn_ret(ctor_tpt.ty), ..ctor_tpt}\n+            } else {\n+                ctor_tpt\n+            };\n             instantiate_path(pcx.fcx, path, struct_tpt, pat.span, pat.id,\n                              pcx.block_region);\n "}, {"sha": "fa406aa278e81f96b0285b2df7c871ab5445d458", "filename": "src/test/compile-fail/match-struct.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a29023e9b2b42e94d77404496e72d0132aa44a6b/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a29023e9b2b42e94d77404496e72d0132aa44a6b/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-struct.rs?ref=a29023e9b2b42e94d77404496e72d0132aa44a6b", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern: mismatched types\n+\n+struct S { a: int }\n+enum E { C(int) }\n+\n+fn main() {\n+    match S { a: 1 } {\n+        C(_) => (),\n+        _ => ()\n+    }\n+}"}]}