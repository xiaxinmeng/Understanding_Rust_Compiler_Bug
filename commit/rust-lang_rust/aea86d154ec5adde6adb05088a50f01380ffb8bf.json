{"sha": "aea86d154ec5adde6adb05088a50f01380ffb8bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYTg2ZDE1NGVjNWFkZGU2YWRiMDUwODhhNTBmMDEzODBmZmI4YmY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T20:45:10Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-30T20:45:10Z"}, "message": "stackless traversal", "tree": {"sha": "fd10ec3e5379e24e40f3eff78cb1e035f4bb5c89", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd10ec3e5379e24e40f3eff78cb1e035f4bb5c89"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aea86d154ec5adde6adb05088a50f01380ffb8bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aea86d154ec5adde6adb05088a50f01380ffb8bf", "html_url": "https://github.com/rust-lang/rust/commit/aea86d154ec5adde6adb05088a50f01380ffb8bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aea86d154ec5adde6adb05088a50f01380ffb8bf/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b337292117a9bb90e85056dcb4069f8bbc6c0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/70b337292117a9bb90e85056dcb4069f8bbc6c0a", "html_url": "https://github.com/rust-lang/rust/commit/70b337292117a9bb90e85056dcb4069f8bbc6c0a"}], "stats": {"total": 102, "additions": 86, "deletions": 16}, "files": [{"sha": "e0c1ce0a49d46f0363fb5ba13491e2847718bef6", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea86d154ec5adde6adb05088a50f01380ffb8bf/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/aea86d154ec5adde6adb05088a50f01380ffb8bf/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=aea86d154ec5adde6adb05088a50f01380ffb8bf", "patch": "@@ -10,6 +10,7 @@ members = [ \"tools\", \"cli\" ]\n [dependencies]\n unicode-xid = \"0.1.0\"\n text_unit = \"0.1.1\"\n+itertools = \"0.7.5\"\n \n [dev-dependencies]\n testutils = { path = \"./tests/testutils\" }"}, {"sha": "068767fabd68bc43eef723a8f8bff467a46bbd8c", "filename": "code/native/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aea86d154ec5adde6adb05088a50f01380ffb8bf/code%2Fnative%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea86d154ec5adde6adb05088a50f01380ffb8bf/code%2Fnative%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fnative%2Fsrc%2Flib.rs?ref=aea86d154ec5adde6adb05088a50f01380ffb8bf", "patch": "@@ -7,6 +7,7 @@ use libsyntax2::{\n     File,\n     utils::dump_tree,\n     SyntaxKind::*,\n+    algo,\n };\n use neon::prelude::*;\n \n@@ -17,11 +18,12 @@ pub struct Wrapper {\n impl Wrapper {\n     fn highlight(&self) -> Vec<(TextRange, &'static str)> {\n         let mut res = Vec::new();\n-        self.inner.for_each_node(|node| {\n+        let syntax = self.inner.syntax();\n+        for node in algo::walk::preorder(syntax.as_ref()) {\n             if node.kind() == ERROR {\n                 res.push((node.range(), \"error\"))\n             }\n-        });\n+        }\n         res\n     }\n }"}, {"sha": "c1644d16d1b8d5ec0565804c2e82da206a3e6320", "filename": "src/algo/mod.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aea86d154ec5adde6adb05088a50f01380ffb8bf/src%2Falgo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea86d154ec5adde6adb05088a50f01380ffb8bf/src%2Falgo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Falgo%2Fmod.rs?ref=aea86d154ec5adde6adb05088a50f01380ffb8bf", "patch": "@@ -0,0 +1 @@\n+pub mod walk;"}, {"sha": "86dd82cc9fcb70c11595bf8901c7e02aeb188ee8", "filename": "src/algo/walk.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/aea86d154ec5adde6adb05088a50f01380ffb8bf/src%2Falgo%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea86d154ec5adde6adb05088a50f01380ffb8bf/src%2Falgo%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Falgo%2Fwalk.rs?ref=aea86d154ec5adde6adb05088a50f01380ffb8bf", "patch": "@@ -0,0 +1,46 @@\n+use SyntaxNodeRef;\n+\n+pub fn preorder<'a>(root: SyntaxNodeRef<'a>) -> impl Iterator<Item=SyntaxNodeRef<'a>> {\n+    walk(root).filter_map(|event| match event {\n+        WalkEvent::Enter(node) => Some(node),\n+        WalkEvent::Exit(_) => None,\n+    })\n+}\n+\n+#[derive(Debug, Copy, Clone)]\n+enum WalkEvent<'a> {\n+    Enter(SyntaxNodeRef<'a>),\n+    Exit(SyntaxNodeRef<'a>),\n+}\n+\n+fn walk<'a>(root: SyntaxNodeRef<'a>) -> impl Iterator<Item=WalkEvent<'a>> {\n+    let mut done = false;\n+    ::itertools::unfold(WalkEvent::Enter(root), move |pos| {\n+        if done {\n+            return None;\n+        }\n+        let res = *pos;\n+        *pos = match *pos {\n+            WalkEvent::Enter(node) => match node.first_child() {\n+                Some(child) => WalkEvent::Enter(child),\n+                None => WalkEvent::Exit(node),\n+            },\n+            WalkEvent::Exit(node) => {\n+                if node == root {\n+                    done = true;\n+                    WalkEvent::Exit(node)\n+                } else {\n+                    match node.next_sibling() {\n+                        Some(sibling) => WalkEvent::Enter(sibling),\n+                        None => match node.parent() {\n+                            Some(node) => WalkEvent::Exit(node),\n+                            None => WalkEvent::Exit(node),\n+                        }\n+                    }\n+                }\n+            }\n+        };\n+        Some(res)\n+    })\n+}\n+"}, {"sha": "b513eb13ef9c04b933848172ca6eb9b1addd6c88", "filename": "src/ast.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/aea86d154ec5adde6adb05088a50f01380ffb8bf/src%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea86d154ec5adde6adb05088a50f01380ffb8bf/src%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fast.rs?ref=aea86d154ec5adde6adb05088a50f01380ffb8bf", "patch": "@@ -1,5 +1,5 @@\n use std::sync::Arc;\n-use {SyntaxNode, TreeRoot, SyntaxRoot, SyntaxNodeRef};\n+use {SyntaxNode, TreeRoot, SyntaxRoot};\n \n #[derive(Debug)]\n pub struct File<R: TreeRoot = Arc<SyntaxRoot>> {\n@@ -16,15 +16,4 @@ impl<R: TreeRoot> File<R> {\n     pub fn syntax(&self) -> SyntaxNode<R> {\n         self.syntax.clone()\n     }\n-\n-    pub fn for_each_node(&self, mut f: impl FnMut(SyntaxNodeRef)) {\n-        let syntax = self.syntax();\n-        let syntax = syntax.borrow();\n-        go(syntax, &mut f);\n-\n-        fn go(syntax: SyntaxNodeRef, f: &mut FnMut(SyntaxNodeRef)) {\n-            f(syntax);\n-            syntax.children().into_iter().for_each(f)\n-        }\n-    }\n }"}, {"sha": "9049beb2967a90fba6b8b0e32bce30ab3401b508", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea86d154ec5adde6adb05088a50f01380ffb8bf/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea86d154ec5adde6adb05088a50f01380ffb8bf/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=aea86d154ec5adde6adb05088a50f01380ffb8bf", "patch": "@@ -22,6 +22,7 @@\n \n extern crate text_unit;\n extern crate unicode_xid;\n+extern crate itertools;\n \n mod lexer;\n mod parser;\n@@ -30,6 +31,7 @@ mod yellow;\n /// Utilities for simple uses of the parser.\n pub mod utils;\n pub mod ast;\n+pub mod algo;\n \n pub use {\n     lexer::{tokenize, Token},"}, {"sha": "826a7d60bbaca49ec41a3b3c5db031bcf9685bc3", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aea86d154ec5adde6adb05088a50f01380ffb8bf/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea86d154ec5adde6adb05088a50f01380ffb8bf/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=aea86d154ec5adde6adb05088a50f01380ffb8bf", "patch": "@@ -3,7 +3,7 @@ use {SyntaxError, SyntaxNode, SyntaxNodeRef};\n \n /// Parse a file and create a string representation of the resulting parse tree.\n pub fn dump_tree(syntax: &SyntaxNode) -> String {\n-    let syntax = syntax.borrow();\n+    let syntax = syntax.as_ref();\n     let mut errors: BTreeSet<_> = syntax.root.errors.iter().cloned().collect();\n     let mut result = String::new();\n     go(syntax, &mut result, 0, &mut errors);"}, {"sha": "8329ec5b2449cfbb5449311efd68c3a265997875", "filename": "src/yellow/red.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aea86d154ec5adde6adb05088a50f01380ffb8bf/src%2Fyellow%2Fred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea86d154ec5adde6adb05088a50f01380ffb8bf/src%2Fyellow%2Fred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fred.rs?ref=aea86d154ec5adde6adb05088a50f01380ffb8bf", "patch": "@@ -84,4 +84,7 @@ impl RedNode {\n     pub(crate) fn parent(&self) -> Option<ptr::NonNull<RedNode>> {\n         Some(self.parent.as_ref()?.parent)\n     }\n+    pub(crate) fn index_in_parent(&self) -> Option<usize> {\n+        Some(self.parent.as_ref()?.index_in_parent)\n+    }\n }"}, {"sha": "65ce647c7c1da02e05c4d56d2309a22cfc592448", "filename": "src/yellow/syntax.rs", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/aea86d154ec5adde6adb05088a50f01380ffb8bf/src%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea86d154ec5adde6adb05088a50f01380ffb8bf/src%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fsyntax.rs?ref=aea86d154ec5adde6adb05088a50f01380ffb8bf", "patch": "@@ -18,6 +18,15 @@ pub struct SyntaxNode<R: TreeRoot = Arc<SyntaxRoot>> {\n     red: ptr::NonNull<RedNode>,\n }\n \n+impl <R1: TreeRoot, R2: TreeRoot> PartialEq<SyntaxNode<R1>> for SyntaxNode<R2> {\n+    fn eq(&self, other: &SyntaxNode<R1>) -> bool {\n+        self.red == other.red\n+    }\n+}\n+\n+impl <R: TreeRoot> Eq for SyntaxNode<R> {\n+}\n+\n pub type SyntaxNodeRef<'a> = SyntaxNode<&'a SyntaxRoot>;\n \n #[derive(Debug)]\n@@ -53,7 +62,7 @@ impl SyntaxNode<Arc<SyntaxRoot>> {\n }\n \n impl<R: TreeRoot> SyntaxNode<R> {\n-    pub fn borrow<'a>(&'a self) -> SyntaxNode<&'a SyntaxRoot> {\n+    pub fn as_ref<'a>(&'a self) -> SyntaxNode<&'a SyntaxRoot> {\n         SyntaxNode {\n             root: &*self.root,\n             red: ptr::NonNull::clone(&self.red),\n@@ -92,6 +101,23 @@ impl<R: TreeRoot> SyntaxNode<R> {\n         })\n     }\n \n+    pub fn first_child(&self) -> Option<SyntaxNode<R>> {\n+        self.children().next()\n+    }\n+\n+    pub fn next_sibling(&self) -> Option<SyntaxNode<R>> {\n+        let red = self.red();\n+        let parent = self.parent()?;\n+        let next_sibling_idx = red.index_in_parent()? + 1;\n+        if next_sibling_idx == red.n_children() {\n+            return None;\n+        }\n+        Some(SyntaxNode {\n+            root: self.root.clone(),\n+            red: parent.red().nth_child(next_sibling_idx),\n+        })\n+    }\n+\n     fn red(&self) -> &RedNode {\n         unsafe { self.red.as_ref() }\n     }"}]}