{"sha": "dd323f8a72327aba0b4771ea08a8b007bba995ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRkMzIzZjhhNzIzMjdhYmEwYjQ3NzFlYTA4YThiMDA3YmJhOTk1Y2E=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-02T21:28:37Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-02T21:28:37Z"}, "message": "Emit error on intrinsic to fn ptr casts", "tree": {"sha": "958d649c9a0998c9eff757b70953c0acf4df9b22", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/958d649c9a0998c9eff757b70953c0acf4df9b22"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dd323f8a72327aba0b4771ea08a8b007bba995ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dd323f8a72327aba0b4771ea08a8b007bba995ca", "html_url": "https://github.com/rust-lang/rust/commit/dd323f8a72327aba0b4771ea08a8b007bba995ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dd323f8a72327aba0b4771ea08a8b007bba995ca/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9af17757be1cc3f672928ecf06c40a662c5ec26d", "url": "https://api.github.com/repos/rust-lang/rust/commits/9af17757be1cc3f672928ecf06c40a662c5ec26d", "html_url": "https://github.com/rust-lang/rust/commit/9af17757be1cc3f672928ecf06c40a662c5ec26d"}], "stats": {"total": 57, "additions": 57, "deletions": 0}, "files": [{"sha": "e684ccfeeb7ed7babc8c4a602c333de5ccc87626", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dd323f8a72327aba0b4771ea08a8b007bba995ca/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd323f8a72327aba0b4771ea08a8b007bba995ca/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=dd323f8a72327aba0b4771ea08a8b007bba995ca", "patch": "@@ -1636,6 +1636,9 @@ impl<'tcx> ObligationCause<'tcx> {\n                 TypeError::CyclicTy(ty) if ty.is_closure() || ty.is_generator() => {\n                     Error0644(\"closure/generator type that references itself\")\n                 }\n+                TypeError::IntrinsicCast => {\n+                    Error0308(\"cannot coerce intrinsics to function pointers\")\n+                }\n                 _ => Error0308(\"mismatched types\"),\n             },\n         }"}, {"sha": "fe8f94ab1d314bdcb1e3a2a2870a228b7b295c99", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dd323f8a72327aba0b4771ea08a8b007bba995ca/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd323f8a72327aba0b4771ea08a8b007bba995ca/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=dd323f8a72327aba0b4771ea08a8b007bba995ca", "patch": "@@ -46,6 +46,8 @@ pub enum TypeError<'tcx> {\n     ExistentialMismatch(ExpectedFound<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>>),\n \n     ConstMismatch(ExpectedFound<&'tcx ty::Const<'tcx>>),\n+\n+    IntrinsicCast,\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Debug, Copy)]\n@@ -179,6 +181,9 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n             ConstMismatch(ref values) => {\n                 write!(f, \"expected `{}`, found `{}`\", values.expected, values.found)\n             }\n+            IntrinsicCast => {\n+                write!(f, \"cannot coerce intrinsics to function pointers\")\n+            }\n         }\n     }\n }"}, {"sha": "ec7cf1a13c5964f81b47fa94aff9e807a12db82c", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dd323f8a72327aba0b4771ea08a8b007bba995ca/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd323f8a72327aba0b4771ea08a8b007bba995ca/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=dd323f8a72327aba0b4771ea08a8b007bba995ca", "patch": "@@ -748,6 +748,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n             Sorts(ref x) => return tcx.lift(x).map(Sorts),\n             ExistentialMismatch(ref x) => return tcx.lift(x).map(ExistentialMismatch),\n             ConstMismatch(ref x) => return tcx.lift(x).map(ConstMismatch),\n+            IntrinsicCast => IntrinsicCast,\n         })\n     }\n }\n@@ -1338,6 +1339,7 @@ EnumTypeFoldableImpl! {\n         (ty::error::TypeError::Sorts)(x),\n         (ty::error::TypeError::ExistentialMismatch)(x),\n         (ty::error::TypeError::ConstMismatch)(x),\n+        (ty::error::TypeError::IntrinsicCast),\n     }\n }\n "}, {"sha": "c216cc92b1e58867ad0c41913276eb3091975d06", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dd323f8a72327aba0b4771ea08a8b007bba995ca/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd323f8a72327aba0b4771ea08a8b007bba995ca/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=dd323f8a72327aba0b4771ea08a8b007bba995ca", "patch": "@@ -40,6 +40,7 @@ use rustc::ty::{self, Ty, TypeFoldable, TypeAndMut};\n use rustc::ty::subst::SubstsRef;\n use rustc::ty::adjustment::AllowTwoPhase;\n use rustc::ty::cast::{CastKind, CastTy};\n+use rustc::ty::error::TypeError;\n use rustc::middle::lang_items;\n use syntax::ast;\n use syntax_pos::Span;\n@@ -461,6 +462,9 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n                                              self.expr_ty,\n                                              fcx.tcx.mk_fn_ptr(f),\n                                              AllowTwoPhase::No);\n+                    if let Err(TypeError::IntrinsicCast) = res {\n+                        return Err(CastError::IllegalCast);\n+                    }\n                     if res.is_err() {\n                         return Err(CastError::NonScalar);\n                     }"}, {"sha": "f2e1a6e29d6fca09344839e42f75ea9c9581716f", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd323f8a72327aba0b4771ea08a8b007bba995ca/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd323f8a72327aba0b4771ea08a8b007bba995ca/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=dd323f8a72327aba0b4771ea08a8b007bba995ca", "patch": "@@ -70,6 +70,7 @@ use std::ops::Deref;\n use syntax::feature_gate;\n use syntax::symbol::sym;\n use syntax_pos;\n+use rustc_target::spec::abi::Abi;\n \n struct Coerce<'a, 'tcx> {\n     fcx: &'a FnCtxt<'a, 'tcx>,\n@@ -689,6 +690,11 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         match b.sty {\n             ty::FnPtr(_) => {\n                 let a_sig = a.fn_sig(self.tcx);\n+                // Intrinsics are not coercible to function pointers\n+                if a_sig.abi() == Abi::RustIntrinsic ||\n+                   a_sig.abi() == Abi::PlatformIntrinsic {\n+                   return Err(TypeError::IntrinsicCast);\n+                }\n                 let InferOk { value: a_sig, mut obligations } =\n                     self.normalize_associated_types_in_as_infer_ok(self.cause.span, &a_sig);\n "}, {"sha": "09baa059e55679f5bbaa9d3a76c9db8b8d6f1996", "filename": "src/test/ui/reify-intrinsic.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dd323f8a72327aba0b4771ea08a8b007bba995ca/src%2Ftest%2Fui%2Freify-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd323f8a72327aba0b4771ea08a8b007bba995ca/src%2Ftest%2Fui%2Freify-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freify-intrinsic.rs?ref=dd323f8a72327aba0b4771ea08a8b007bba995ca", "patch": "@@ -0,0 +1,15 @@\n+// check-fail\n+\n+#![feature(intrinsics)]\n+\n+fn a() {\n+    let _: unsafe extern \"rust-intrinsic\" fn(isize) -> usize = std::mem::transmute;\n+    //~^ ERROR cannot coerce\n+}\n+\n+fn b() {\n+    let _ = std::mem::transmute as unsafe extern \"rust-intrinsic\" fn(isize) -> usize;\n+    //~^ ERROR casting\n+}\n+\n+fn main() {}"}, {"sha": "4a1bd77cf7ee9839082c83da371dd9b180666c32", "filename": "src/test/ui/reify-intrinsic.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/dd323f8a72327aba0b4771ea08a8b007bba995ca/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd323f8a72327aba0b4771ea08a8b007bba995ca/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freify-intrinsic.stderr?ref=dd323f8a72327aba0b4771ea08a8b007bba995ca", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: cannot coerce intrinsics to function pointers\n+  --> $DIR/reify-intrinsic.rs:6:64\n+   |\n+LL |     let _: unsafe extern \"rust-intrinsic\" fn(isize) -> usize = std::mem::transmute;\n+   |                                                                ^^^^^^^^^^^^^^^^^^^\n+   |                                                                |\n+   |                                                                cannot coerce intrinsics to function pointers\n+   |                                                                help: use parentheses to call this function: `std::mem::transmute(...)`\n+   |\n+   = note: expected type `unsafe extern \"rust-intrinsic\" fn(isize) -> usize`\n+              found type `unsafe extern \"rust-intrinsic\" fn(_) -> _ {std::intrinsics::transmute::<_, _>}`\n+\n+error[E0606]: casting `unsafe extern \"rust-intrinsic\" fn(_) -> _ {std::intrinsics::transmute::<_, _>}` as `unsafe extern \"rust-intrinsic\" fn(isize) -> usize` is invalid\n+  --> $DIR/reify-intrinsic.rs:11:13\n+   |\n+LL |     let _ = std::mem::transmute as unsafe extern \"rust-intrinsic\" fn(isize) -> usize;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0606.\n+For more information about an error, try `rustc --explain E0308`."}]}