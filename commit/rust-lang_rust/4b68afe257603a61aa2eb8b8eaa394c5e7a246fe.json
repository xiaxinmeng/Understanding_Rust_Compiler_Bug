{"sha": "4b68afe257603a61aa2eb8b8eaa394c5e7a246fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNjhhZmUyNTc2MDNhNjFhYTJlYjhiOGVhYTM5NGM1ZTdhMjQ2ZmU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-10-29T18:01:31Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-12-03T13:41:43Z"}, "message": "rustc_codegen_ssa: use FnAbi::of_instance wherever possible.", "tree": {"sha": "8d768d7f493f8cb2772abb7e945ce94109320b46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d768d7f493f8cb2772abb7e945ce94109320b46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe", "html_url": "https://github.com/rust-lang/rust/commit/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b7d0f389f1ae4177f675a5ac535226ef92027a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b7d0f389f1ae4177f675a5ac535226ef92027a3", "html_url": "https://github.com/rust-lang/rust/commit/5b7d0f389f1ae4177f675a5ac535226ef92027a3"}], "stats": {"total": 64, "additions": 34, "deletions": 30}, "files": [{"sha": "b6a3bf2f8789e244b5512a39cd54ea5dffa30b6f", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=4b68afe257603a61aa2eb8b8eaa394c5e7a246fe", "patch": "@@ -4,15 +4,15 @@\n //! and methods are represented as just a fn ptr and not a full\n //! closure.\n \n-use crate::abi::FnAbi;\n+use crate::abi::{FnAbi, FnAbiLlvmExt};\n use crate::attributes;\n use crate::llvm;\n use crate::context::CodegenCx;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n \n-use rustc::ty::{self, TypeFoldable, Instance};\n-use rustc::ty::layout::{FnAbiExt, LayoutOf, HasTyCtxt};\n+use rustc::ty::{TypeFoldable, Instance};\n+use rustc::ty::layout::{FnAbiExt, HasTyCtxt};\n \n /// Codegens a reference to a fn/method item, monomorphizing and\n /// inlining as it goes.\n@@ -37,14 +37,14 @@ pub fn get_fn(\n         return llfn;\n     }\n \n-    let sig = instance.fn_sig(cx.tcx());\n     let sym = tcx.symbol_name(instance).name.as_str();\n-    debug!(\"get_fn({:?}: {:?}) => {}\", instance, sig, sym);\n+    debug!(\"get_fn({:?}: {:?}) => {}\", instance, instance.ty(cx.tcx()), sym);\n+\n+    let fn_abi = FnAbi::of_instance(cx, instance);\n \n     let llfn = if let Some(llfn) = cx.get_declared_value(&sym) {\n-        // Create a fn pointer with the substituted signature.\n-        let fn_ptr_ty = tcx.mk_fn_ptr(sig);\n-        let llptrty = cx.backend_type(cx.layout_of(fn_ptr_ty));\n+        // Create a fn pointer with the new signature.\n+        let llptrty = fn_abi.ptr_to_llvm_type(cx);\n \n         // This is subtle and surprising, but sometimes we have to bitcast\n         // the resulting fn pointer.  The reason has to do with external\n@@ -77,15 +77,16 @@ pub fn get_fn(\n             llfn\n         }\n     } else {\n-        let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n-        let fn_abi = FnAbi::new(cx, sig, &[]);\n         let llfn = cx.declare_fn(&sym, &fn_abi);\n         debug!(\"get_fn: not casting pointer!\");\n \n         if instance.def.is_inline(tcx) {\n             attributes::inline(cx, llfn, attributes::InlineAttr::Hint);\n         }\n-        attributes::from_fn_attrs(cx, llfn, Some(instance.def.def_id()), sig.abi);\n+        // FIXME(eddyb) avoid this `Instance::fn_sig` call.\n+        // Perhaps store the relevant information in `FnAbi`?\n+        let sig_abi = instance.fn_sig(cx.tcx()).abi();\n+        attributes::from_fn_attrs(cx, llfn, Some(instance.def.def_id()), sig_abi);\n \n         let instance_def_id = instance.def_id();\n "}, {"sha": "f8aeaa20475d1560b190e6b9a3d52ec14183fb18", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=4b68afe257603a61aa2eb8b8eaa394c5e7a246fe", "patch": "@@ -16,7 +16,7 @@ use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use rustc::ty::subst::{SubstsRef, GenericArgKind};\n \n-use crate::abi::Abi;\n+use crate::abi::{Abi, FnAbi};\n use crate::common::CodegenCx;\n use crate::builder::Builder;\n use crate::value::Value;\n@@ -280,7 +280,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n     fn create_function_debug_context(\n         &self,\n         instance: Instance<'tcx>,\n-        sig: ty::FnSig<'tcx>,\n+        fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n         llfn: &'ll Value,\n         mir: &mir::Body<'_>,\n     ) -> Option<FunctionDebugContext<&'ll DIScope>> {\n@@ -308,6 +308,12 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         let file_metadata = file_metadata(self, &loc.file.name, def_id.krate);\n \n         let function_type_metadata = unsafe {\n+            // FIXME(eddyb) avoid this `Instance::fn_sig` call, by\n+            // rewriting `get_function_signature` to use `fn_abi` instead.\n+            let sig = self.tcx().normalize_erasing_late_bound_regions(\n+                ty::ParamEnv::reveal_all(),\n+                &instance.fn_sig(self.tcx()),\n+            );\n             let fn_signature = get_function_signature(self, sig);\n             llvm::LLVMRustDIBuilderCreateSubroutineType(DIB(self), file_metadata, fn_signature)\n         };\n@@ -338,7 +344,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         let mut flags = DIFlags::FlagPrototyped;\n \n-        if self.layout_of(sig.output()).abi.is_uninhabited() {\n+        if fn_abi.ret.layout.abi.is_uninhabited() {\n             flags |= DIFlags::FlagNoReturn;\n         }\n \n@@ -390,6 +396,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n \n         return Some(fn_debug_context);\n \n+        // FIXME(eddyb) rewrite this to be based on `FnAbi` instead of `FnSig`.\n         fn get_function_signature<'ll, 'tcx>(\n             cx: &CodegenCx<'ll, 'tcx>,\n             sig: ty::FnSig<'tcx>,"}, {"sha": "3d2f6efb072ee20078dd454cf32b06b1a8a43aea", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=4b68afe257603a61aa2eb8b8eaa394c5e7a246fe", "patch": "@@ -6,7 +6,7 @@ use crate::llvm;\n use crate::type_of::LayoutLlvmExt;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::mono::{Linkage, Visibility};\n-use rustc::ty::{self, TypeFoldable, Instance};\n+use rustc::ty::{TypeFoldable, Instance};\n use rustc::ty::layout::{FnAbiExt, LayoutOf, HasTyCtxt};\n use rustc_codegen_ssa::traits::*;\n \n@@ -43,12 +43,7 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n         assert!(!instance.substs.needs_infer() &&\n                 !instance.substs.has_param_types());\n \n-        let mono_sig = instance.fn_sig(self.tcx());\n-        let mono_sig = self.tcx().normalize_erasing_late_bound_regions(\n-            ty::ParamEnv::reveal_all(),\n-            &mono_sig,\n-        );\n-        let fn_abi = FnAbi::new(self, mono_sig, &[]);\n+        let fn_abi = FnAbi::of_instance(self, instance);\n         let lldecl = self.declare_fn(symbol_name, &fn_abi);\n         unsafe { llvm::LLVMRustSetLinkage(lldecl, base::linkage_to_llvm(linkage)) };\n         let attrs = self.tcx.codegen_fn_attrs(instance.def_id());\n@@ -73,15 +68,18 @@ impl PreDefineMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             }\n         }\n \n-        debug!(\"predefine_fn: mono_sig = {:?} instance = {:?}\", mono_sig, instance);\n+        debug!(\"predefine_fn: instance = {:?}\", instance);\n         if instance.def.is_inline(self.tcx) {\n             attributes::inline(self, lldecl, attributes::InlineAttr::Hint);\n         }\n+        // FIXME(eddyb) avoid this `Instance::fn_sig` call.\n+        // Perhaps store the relevant information in `FnAbi`?\n+        let mono_sig_abi = instance.fn_sig(self.tcx()).abi();\n         attributes::from_fn_attrs(\n             self,\n             lldecl,\n             Some(instance.def.def_id()),\n-            mono_sig.abi,\n+            mono_sig_abi,\n         );\n \n         self.instances.borrow_mut().insert(instance, lldecl);"}, {"sha": "04b102879517f8a89da5eb863b8fc786842be3ce", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=4b68afe257603a61aa2eb8b8eaa394c5e7a246fe", "patch": "@@ -129,13 +129,10 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n \n     let mir = cx.tcx().instance_mir(instance.def);\n \n-    let sig = instance.fn_sig(cx.tcx());\n-    let sig = cx.tcx().normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n-    let fn_abi = FnAbi::new(cx, sig, &[]);\n+    let fn_abi = FnAbi::of_instance(cx, instance);\n     debug!(\"fn_abi: {:?}\", fn_abi);\n \n-    let debug_context =\n-        cx.create_function_debug_context(instance, sig, llfn, &mir);\n+    let debug_context = cx.create_function_debug_context(instance, &fn_abi, llfn, &mir);\n \n     let mut bx = Bx::new_block(cx, llfn, \"start\");\n "}, {"sha": "e67201b710698ac1cc64f083a32423a8c33bbf61", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b68afe257603a61aa2eb8b8eaa394c5e7a246fe/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=4b68afe257603a61aa2eb8b8eaa394c5e7a246fe", "patch": "@@ -2,8 +2,9 @@ use super::BackendTypes;\n use crate::mir::debuginfo::{FunctionDebugContext, VariableKind};\n use rustc::hir::def_id::CrateNum;\n use rustc::mir;\n-use rustc::ty::{self, Ty, Instance};\n+use rustc::ty::{Ty, Instance};\n use rustc::ty::layout::Size;\n+use rustc_target::abi::call::FnAbi;\n use syntax::ast::Name;\n use syntax_pos::{SourceFile, Span};\n \n@@ -17,7 +18,7 @@ pub trait DebugInfoMethods<'tcx>: BackendTypes {\n     fn create_function_debug_context(\n         &self,\n         instance: Instance<'tcx>,\n-        sig: ty::FnSig<'tcx>,\n+        fn_abi: &FnAbi<'tcx, Ty<'tcx>>,\n         llfn: Self::Function,\n         mir: &mir::Body<'_>,\n     ) -> Option<FunctionDebugContext<Self::DIScope>>;"}]}