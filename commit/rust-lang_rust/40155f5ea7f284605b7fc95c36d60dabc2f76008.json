{"sha": "40155f5ea7f284605b7fc95c36d60dabc2f76008", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMTU1ZjVlYTdmMjg0NjA1YjdmYzk1YzM2ZDYwZGFiYzJmNzYwMDg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-07-14T17:53:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-14T17:53:37Z"}, "message": "Rollup merge of #87117 - cjgillot:cstore, r=petrochenkov\n\nShrink the CrateStore dynamic interface.\n\nThe information is either accessible through queries or by crates which already depend on rustc_metadata.", "tree": {"sha": "dc67ce00920ce7a5750b3761ff534022a6521627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc67ce00920ce7a5750b3761ff534022a6521627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40155f5ea7f284605b7fc95c36d60dabc2f76008", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg7ySiCRBK7hj4Ov3rIwAA6iIIADmLMZJyfneoPQivyUq4AwCj\nFp1xQiCRMgx2+V9VaZYz/GiWibM/bQ/OftzfbM+uvHPQIvuHWVsij95KwcXKbl2N\nxJHDaOAP8GueUJ6MNniKNMCHJ3Fz9BT6UgMv6ZpeKVKqBcdN14atRwpoboWvEpb1\npuxG/jPD0IZNSyaDuVxCYG+snfsIXNAID6JwpV/6ECnhwX0uGzCOZ90SGYsOIbr+\n4OGob2sOIoAuj/yn0g8MpGQck8FJLsV66MepMMCLToT3DTskpV4+HvT/+Wf/ZrTK\nwIWciUJ+YNUpcRmxTdQFO7Nx6y56xkhnNU3T7RXqc+MBmeVtx5zXPjlYfHzPt7U=\n=RYTB\n-----END PGP SIGNATURE-----\n", "payload": "tree dc67ce00920ce7a5750b3761ff534022a6521627\nparent 57e021c9414b88ad60779af90500f781326f91e9\nparent 3fba5a484437ab20b864ea273571bf2332f031d0\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1626285217 +0200\ncommitter GitHub <noreply@github.com> 1626285217 +0200\n\nRollup merge of #87117 - cjgillot:cstore, r=petrochenkov\n\nShrink the CrateStore dynamic interface.\n\nThe information is either accessible through queries or by crates which already depend on rustc_metadata.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40155f5ea7f284605b7fc95c36d60dabc2f76008", "html_url": "https://github.com/rust-lang/rust/commit/40155f5ea7f284605b7fc95c36d60dabc2f76008", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40155f5ea7f284605b7fc95c36d60dabc2f76008/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57e021c9414b88ad60779af90500f781326f91e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/57e021c9414b88ad60779af90500f781326f91e9", "html_url": "https://github.com/rust-lang/rust/commit/57e021c9414b88ad60779af90500f781326f91e9"}, {"sha": "3fba5a484437ab20b864ea273571bf2332f031d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fba5a484437ab20b864ea273571bf2332f031d0", "html_url": "https://github.com/rust-lang/rust/commit/3fba5a484437ab20b864ea273571bf2332f031d0"}], "stats": {"total": 95, "additions": 39, "deletions": 56}, "files": [{"sha": "958a4ab68020a24d642f0523d38c36ab627842b6", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=40155f5ea7f284605b7fc95c36d60dabc2f76008", "patch": "@@ -18,7 +18,7 @@ use rustc_metadata::creader::CStore;\n use rustc_middle::arena::Arena;\n use rustc_middle::dep_graph::DepGraph;\n use rustc_middle::middle;\n-use rustc_middle::middle::cstore::{CrateStore, MetadataLoader, MetadataLoaderDyn};\n+use rustc_middle::middle::cstore::{MetadataLoader, MetadataLoaderDyn};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, GlobalCtxt, ResolverOutputs, TyCtxt};\n use rustc_mir as mir;\n@@ -860,11 +860,7 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n                     tcx.ensure().proc_macro_decls_static(())\n                 });\n \n-                let cstore = tcx\n-                    .cstore_as_any()\n-                    .downcast_ref::<CStore>()\n-                    .expect(\"`tcx.cstore` is not a `CStore`\");\n-                cstore.report_unused_deps(tcx);\n+                CStore::from_tcx(tcx).report_unused_deps(tcx);\n             },\n             {\n                 par_iter(&tcx.hir().krate().modules).for_each(|(&module, _)| {"}, {"sha": "70d29f9d7caa801daa275c77a4b8b24325d545dd", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=40155f5ea7f284605b7fc95c36d60dabc2f76008", "patch": "@@ -130,7 +130,7 @@ impl<'a> std::fmt::Debug for CrateDump<'a> {\n }\n \n impl CStore {\n-    crate fn from_tcx(tcx: TyCtxt<'_>) -> &CStore {\n+    pub fn from_tcx(tcx: TyCtxt<'_>) -> &CStore {\n         tcx.cstore_as_any().downcast_ref::<CStore>().expect(\"`tcx.cstore` is not a `CStore`\")\n     }\n "}, {"sha": "ce8dfeae076e6b0b40573b334debc132264ab125", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 13, "deletions": 17, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=40155f5ea7f284605b7fc95c36d60dabc2f76008", "patch": "@@ -5,7 +5,6 @@ use crate::rmeta::encoder;\n \n use rustc_ast as ast;\n use rustc_data_structures::stable_map::FxHashMap;\n-use rustc_data_structures::svh::Svh;\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -369,6 +368,7 @@ pub fn provide(providers: &mut Providers) {\n             tcx.arena\n                 .alloc_slice(&CStore::from_tcx(tcx).crate_dependencies_in_postorder(LOCAL_CRATE))\n         },\n+        crates: |tcx, ()| tcx.arena.alloc_slice(&CStore::from_tcx(tcx).crates_untracked()),\n \n         ..*providers\n     };\n@@ -451,6 +451,16 @@ impl CStore {\n         self.get_crate_data(def_id.krate).get_span(def_id.index, sess)\n     }\n \n+    pub fn def_kind(&self, def: DefId) -> DefKind {\n+        self.get_crate_data(def.krate).def_kind(def.index)\n+    }\n+\n+    pub fn crates_untracked(&self) -> Vec<CrateNum> {\n+        let mut result = vec![];\n+        self.iter_crate_data(|cnum, _| result.push(cnum));\n+        result\n+    }\n+\n     pub fn item_generics_num_lifetimes(&self, def_id: DefId, sess: &Session) -> usize {\n         self.get_crate_data(def_id.krate).get_generics(def_id.index, sess).own_counts().lifetimes\n     }\n@@ -485,29 +495,21 @@ impl CrateStore for CStore {\n         self\n     }\n \n-    fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol {\n+    fn crate_name(&self, cnum: CrateNum) -> Symbol {\n         self.get_crate_data(cnum).root.name\n     }\n \n-    fn stable_crate_id_untracked(&self, cnum: CrateNum) -> StableCrateId {\n+    fn stable_crate_id(&self, cnum: CrateNum) -> StableCrateId {\n         self.get_crate_data(cnum).root.stable_crate_id\n     }\n \n-    fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh {\n-        self.get_crate_data(cnum).root.hash\n-    }\n-\n     /// Returns the `DefKey` for a given `DefId`. This indicates the\n     /// parent `DefId` as well as some idea of what kind of data the\n     /// `DefId` refers to.\n     fn def_key(&self, def: DefId) -> DefKey {\n         self.get_crate_data(def.krate).def_key(def.index)\n     }\n \n-    fn def_kind(&self, def: DefId) -> DefKind {\n-        self.get_crate_data(def.krate).def_kind(def.index)\n-    }\n-\n     fn def_path(&self, def: DefId) -> DefPath {\n         self.get_crate_data(def.krate).def_path(def.index)\n     }\n@@ -526,12 +528,6 @@ impl CrateStore for CStore {\n         self.get_crate_data(cnum).def_path_hash_to_def_id(cnum, index_guess, hash)\n     }\n \n-    fn crates_untracked(&self) -> Vec<CrateNum> {\n-        let mut result = vec![];\n-        self.iter_crate_data(|cnum, _| result.push(cnum));\n-        result\n-    }\n-\n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata {\n         encoder::encode_metadata(tcx)\n     }"}, {"sha": "5c7d84e2bc97f350e18e51937ae36955fab8f592", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=40155f5ea7f284605b7fc95c36d60dabc2f76008", "patch": "@@ -1061,10 +1061,7 @@ impl EncodeContext<'a, 'tcx> {\n             Lazy::empty()\n         };\n \n-        let data = ModData {\n-            reexports,\n-            expansion: tcx.resolutions(()).definitions.expansion_that_defined(local_def_id),\n-        };\n+        let data = ModData { reexports, expansion: tcx.expn_that_defined(local_def_id) };\n \n         record!(self.tables.kind[def_id] <- EntryKind::Mod(self.lazy(data)));\n         if self.is_proc_macro {"}, {"sha": "ae53f1ac3bb49aad914d0da0e5e5804e592720e6", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=40155f5ea7f284605b7fc95c36d60dabc2f76008", "patch": "@@ -1,7 +1,6 @@\n use self::collector::NodeCollector;\n \n use crate::hir::{AttributeMap, IndexedHir};\n-use crate::middle::cstore::CrateStore;\n use crate::ty::TyCtxt;\n use rustc_ast as ast;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -991,7 +990,7 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n         },\n     );\n \n-    let upstream_crates = upstream_crates(&*tcx.untracked_resolutions.cstore);\n+    let upstream_crates = upstream_crates(tcx);\n \n     // We hash the final, remapped names of all local source files so we\n     // don't have to include the path prefix remapping commandline args.\n@@ -1021,13 +1020,13 @@ pub(super) fn crate_hash(tcx: TyCtxt<'_>, crate_num: CrateNum) -> Svh {\n     Svh::new(crate_hash.to_smaller_hash())\n }\n \n-fn upstream_crates(cstore: &dyn CrateStore) -> Vec<(StableCrateId, Svh)> {\n-    let mut upstream_crates: Vec<_> = cstore\n-        .crates_untracked()\n+fn upstream_crates(tcx: TyCtxt<'_>) -> Vec<(StableCrateId, Svh)> {\n+    let mut upstream_crates: Vec<_> = tcx\n+        .crates(())\n         .iter()\n         .map(|&cnum| {\n-            let stable_crate_id = cstore.stable_crate_id_untracked(cnum);\n-            let hash = cstore.crate_hash_untracked(cnum);\n+            let stable_crate_id = tcx.resolutions(()).cstore.stable_crate_id(cnum);\n+            let hash = tcx.crate_hash(cnum);\n             (stable_crate_id, hash)\n         })\n         .collect();"}, {"sha": "7efe8e061e885a8b385b1aa77f1220afe47547e0", "filename": "compiler/rustc_middle/src/middle/cstore.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcstore.rs?ref=40155f5ea7f284605b7fc95c36d60dabc2f76008", "patch": "@@ -5,9 +5,7 @@\n use crate::ty::TyCtxt;\n \n use rustc_ast as ast;\n-use rustc_data_structures::svh::Svh;\n use rustc_data_structures::sync::{self, MetadataRef};\n-use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc_hir::definitions::{DefKey, DefPath, DefPathHash};\n use rustc_macros::HashStable;\n@@ -190,27 +188,26 @@ pub type MetadataLoaderDyn = dyn MetadataLoader + Sync;\n pub trait CrateStore: std::fmt::Debug {\n     fn as_any(&self) -> &dyn Any;\n \n-    // resolve\n+    // Foreign definitions.\n+    // This information is safe to access, since it's hashed as part of the DefPathHash, which incr.\n+    // comp. uses to identify a DefId.\n     fn def_key(&self, def: DefId) -> DefKey;\n-    fn def_kind(&self, def: DefId) -> DefKind;\n     fn def_path(&self, def: DefId) -> DefPath;\n     fn def_path_hash(&self, def: DefId) -> DefPathHash;\n+\n+    // This information is safe to access, since it's hashed as part of the StableCrateId, which\n+    // incr.  comp. uses to identify a CrateNum.\n+    fn crate_name(&self, cnum: CrateNum) -> Symbol;\n+    fn stable_crate_id(&self, cnum: CrateNum) -> StableCrateId;\n+\n+    /// Fetch a DefId from a DefPathHash for a foreign crate.\n     fn def_path_hash_to_def_id(\n         &self,\n         cnum: CrateNum,\n         index_guess: u32,\n         hash: DefPathHash,\n     ) -> Option<DefId>;\n \n-    // \"queries\" used in resolve that aren't tracked for incremental compilation\n-    fn crate_name_untracked(&self, cnum: CrateNum) -> Symbol;\n-    fn stable_crate_id_untracked(&self, cnum: CrateNum) -> StableCrateId;\n-    fn crate_hash_untracked(&self, cnum: CrateNum) -> Svh;\n-\n-    // This is basically a 1-based range of ints, which is a little\n-    // silly - I may fix that.\n-    fn crates_untracked(&self) -> Vec<CrateNum>;\n-\n     // utility functions\n     fn encode_metadata(&self, tcx: TyCtxt<'_>) -> EncodedMetadata;\n }"}, {"sha": "80c4ff2ae5d993b86f207424c18cd7e3cb98eb72", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=40155f5ea7f284605b7fc95c36d60dabc2f76008", "patch": "@@ -213,6 +213,8 @@ rustc_queries! {\n     }\n \n     query expn_that_defined(key: DefId) -> rustc_span::ExpnId {\n+        // This query reads from untracked data in definitions.\n+        eval_always\n         desc { |tcx| \"expansion that defined `{}`\", tcx.def_path_str(key) }\n     }\n \n@@ -1446,6 +1448,7 @@ rustc_queries! {\n         desc { \"calculating the stability index for the local crate\" }\n     }\n     query crates(_: ()) -> &'tcx [CrateNum] {\n+        eval_always\n         desc { \"fetching all foreign CrateNum instances\" }\n     }\n "}, {"sha": "f52686c9b5f2ea1db06e12b208260a6d7b1ee6c0", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=40155f5ea7f284605b7fc95c36d60dabc2f76008", "patch": "@@ -1277,7 +1277,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if crate_num == LOCAL_CRATE {\n             self.sess.local_stable_crate_id()\n         } else {\n-            self.untracked_resolutions.cstore.stable_crate_id_untracked(crate_num)\n+            self.untracked_resolutions.cstore.stable_crate_id(crate_num)\n         }\n     }\n \n@@ -1290,10 +1290,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             (self.crate_name, self.sess.local_stable_crate_id())\n         } else {\n             let cstore = &self.untracked_resolutions.cstore;\n-            (\n-                cstore.crate_name_untracked(def_id.krate),\n-                cstore.stable_crate_id_untracked(def_id.krate),\n-            )\n+            (cstore.crate_name(def_id.krate), cstore.stable_crate_id(def_id.krate))\n         };\n \n         format!(\n@@ -2831,8 +2828,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     };\n     providers.extern_mod_stmt_cnum =\n         |tcx, id| tcx.resolutions(()).extern_crate_map.get(&id).cloned();\n-    providers.crates =\n-        |tcx, ()| tcx.arena.alloc_slice(&tcx.resolutions(()).cstore.crates_untracked());\n     providers.output_filenames = |tcx, ()| tcx.output_filenames.clone();\n     providers.features_query = |tcx, ()| tcx.sess.features_untracked();\n     providers.is_panic_runtime = |tcx, cnum| {"}, {"sha": "35e7688fbe45aefddae87ad971a69c813adbf5cc", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40155f5ea7f284605b7fc95c36d60dabc2f76008/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=40155f5ea7f284605b7fc95c36d60dabc2f76008", "patch": "@@ -128,7 +128,7 @@ impl<'a> Resolver<'a> {\n \n         let (name, parent) = if def_id.index == CRATE_DEF_INDEX {\n             // This is the crate root\n-            (self.cstore().crate_name_untracked(def_id.krate), None)\n+            (self.cstore().crate_name(def_id.krate), None)\n         } else {\n             let def_key = self.cstore().def_key(def_id);\n             let name = def_key"}]}