{"sha": "b3cfa1986b559d4f74bf2709532c1401ebbdd759", "node_id": "C_kwDOAAsO6NoAKGIzY2ZhMTk4NmI1NTlkNGY3NGJmMjcwOTUzMmMxNDAxZWJiZGQ3NTk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-16T20:31:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-16T20:31:47Z"}, "message": "Merge #11731\n\n11731: feat: Add return type hints for closures with block bodies r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11386\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "6e693fbc4cac7516bc540d534385467f90b7597e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e693fbc4cac7516bc540d534385467f90b7597e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3cfa1986b559d4f74bf2709532c1401ebbdd759", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiMkkzCRBK7hj4Ov3rIwAANYQIAAkUoOGhzXen8qzm73kd/w15\nMQrm7IFyz1GmP01bc/42VgSErjdb3ZH33i9x8RIxO1KKxYmMxD48qdJdtY4+02x2\n18sFGhv+shuntZ6JVw7X/eZZZQuHRXvd1A9Y05wFmfDh5vA+TP3OeKlKeHcGvzfm\n/7tVgYViaR16SwD1dVEBIq5DtcjngcyY8G9xSctBvZOov44ozUvYUHkjZWIOdOpX\n8kF8oRdi7zbiFvyB9gl2P562nYUKZM1r7jCeYJVnUVatjgNyotNkuZs16wcIMQrW\nMU7vowRfgwaRTel7OdSrqVieXKRD8yJhsSil/sAjHP+SuKsaKFNHjX6P76+Qlpg=\n=B8Ok\n-----END PGP SIGNATURE-----\n", "payload": "tree 6e693fbc4cac7516bc540d534385467f90b7597e\nparent 29e38513cd0813a28db15fcfbed09723da05a5cc\nparent bd17933c31b7e4e8b1750c59a8de2e4ab0268c33\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647462707 +0000\ncommitter GitHub <noreply@github.com> 1647462707 +0000\n\nMerge #11731\n\n11731: feat: Add return type hints for closures with block bodies r=Veykril a=Veykril\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/11386\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3cfa1986b559d4f74bf2709532c1401ebbdd759", "html_url": "https://github.com/rust-lang/rust/commit/b3cfa1986b559d4f74bf2709532c1401ebbdd759", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3cfa1986b559d4f74bf2709532c1401ebbdd759/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29e38513cd0813a28db15fcfbed09723da05a5cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e38513cd0813a28db15fcfbed09723da05a5cc", "html_url": "https://github.com/rust-lang/rust/commit/29e38513cd0813a28db15fcfbed09723da05a5cc"}, {"sha": "bd17933c31b7e4e8b1750c59a8de2e4ab0268c33", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd17933c31b7e4e8b1750c59a8de2e4ab0268c33", "html_url": "https://github.com/rust-lang/rust/commit/bd17933c31b7e4e8b1750c59a8de2e4ab0268c33"}], "stats": {"total": 233, "additions": 117, "deletions": 116}, "files": [{"sha": "d04bd87b7bced753b53eadf6734568582c6d3fef", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 79, "deletions": 99, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/b3cfa1986b559d4f74bf2709532c1401ebbdd759/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cfa1986b559d4f74bf2709532c1401ebbdd759/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=b3cfa1986b559d4f74bf2709532c1401ebbdd759", "patch": "@@ -16,6 +16,7 @@ pub struct InlayHintsConfig {\n     pub type_hints: bool,\n     pub parameter_hints: bool,\n     pub chaining_hints: bool,\n+    pub closure_return_type_hints: bool,\n     pub hide_named_constructor_hints: bool,\n     pub max_length: Option<usize>,\n }\n@@ -24,6 +25,7 @@ pub struct InlayHintsConfig {\n pub enum InlayKind {\n     TypeHint,\n     ParameterHint,\n+    ClosureReturnTypeHint,\n     ChainingHint,\n }\n \n@@ -67,48 +69,86 @@ pub(crate) fn inlay_hints(\n     let file = sema.parse(file_id);\n     let file = file.syntax();\n \n-    let mut hints = Vec::new();\n+    let mut acc = Vec::new();\n \n-    let get_hints = |node| get_hints(&mut hints, &sema, config, node);\n+    let hints = |node| hints(&mut acc, &sema, config, node);\n     match range_limit {\n         Some(FileRange { range, .. }) => match file.covering_element(range) {\n-            NodeOrToken::Token(_) => return hints,\n+            NodeOrToken::Token(_) => return acc,\n             NodeOrToken::Node(n) => n\n                 .descendants()\n                 .filter(|descendant| range.contains_range(descendant.text_range()))\n-                .for_each(get_hints),\n+                .for_each(hints),\n         },\n-        None => file.descendants().for_each(get_hints),\n+        None => file.descendants().for_each(hints),\n     };\n \n-    hints\n+    acc\n }\n \n-fn get_hints(\n+fn hints(\n     hints: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n     config: &InlayHintsConfig,\n     node: SyntaxNode,\n ) {\n+    let krate = sema.scope(&node).module().map(|it| it.krate());\n+    let famous_defs = FamousDefs(sema, krate);\n     if let Some(expr) = ast::Expr::cast(node.clone()) {\n-        get_chaining_hints(hints, sema, config, &expr);\n+        chaining_hints(hints, sema, &famous_defs, config, &expr);\n         match expr {\n             ast::Expr::CallExpr(it) => {\n-                get_param_name_hints(hints, sema, config, ast::Expr::from(it));\n+                param_name_hints(hints, sema, config, ast::Expr::from(it));\n             }\n             ast::Expr::MethodCallExpr(it) => {\n-                get_param_name_hints(hints, sema, config, ast::Expr::from(it));\n+                param_name_hints(hints, sema, config, ast::Expr::from(it));\n+            }\n+            ast::Expr::ClosureExpr(it) => {\n+                closure_ret_hints(hints, sema, &famous_defs, config, it);\n             }\n             _ => (),\n         }\n     } else if let Some(it) = ast::IdentPat::cast(node) {\n-        get_bind_pat_hints(hints, sema, config, &it);\n+        bind_pat_hints(hints, sema, config, &it);\n     }\n }\n \n-fn get_chaining_hints(\n+fn closure_ret_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n+    famous_defs: &FamousDefs,\n+    config: &InlayHintsConfig,\n+    closure: ast::ClosureExpr,\n+) -> Option<()> {\n+    if !config.closure_return_type_hints {\n+        return None;\n+    }\n+\n+    let closure = sema.descend_node_into_attributes(closure.clone()).pop()?;\n+\n+    let param_list = match closure.body() {\n+        Some(ast::Expr::BlockExpr(_)) => closure.param_list()?,\n+        _ => return None,\n+    };\n+    let ty = sema.type_of_expr(&ast::Expr::ClosureExpr(closure))?.adjusted();\n+    let callable = ty.as_callable(sema.db)?;\n+    let ty = callable.return_type();\n+    if ty.is_unit() {\n+        return None;\n+    }\n+    acc.push(InlayHint {\n+        range: param_list.syntax().text_range(),\n+        kind: InlayKind::ClosureReturnTypeHint,\n+        label: hint_iterator(sema, &famous_defs, config, &ty)\n+            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string().into()),\n+    });\n+    Some(())\n+}\n+\n+fn chaining_hints(\n+    acc: &mut Vec<InlayHint>,\n+    sema: &Semantics<RootDatabase>,\n+    famous_defs: &FamousDefs,\n     config: &InlayHintsConfig,\n     expr: &ast::Expr,\n ) -> Option<()> {\n@@ -122,8 +162,6 @@ fn get_chaining_hints(\n \n     let descended = sema.descend_node_into_attributes(expr.clone()).pop();\n     let desc_expr = descended.as_ref().unwrap_or(expr);\n-    let krate = sema.scope(desc_expr.syntax()).module().map(|it| it.krate());\n-    let famous_defs = FamousDefs(sema, krate);\n \n     let mut tokens = expr\n         .syntax()\n@@ -167,7 +205,7 @@ fn get_chaining_hints(\n     Some(())\n }\n \n-fn get_param_name_hints(\n+fn param_name_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n     config: &InlayHintsConfig,\n@@ -207,7 +245,7 @@ fn get_param_name_hints(\n     Some(())\n }\n \n-fn get_bind_pat_hints(\n+fn bind_pat_hints(\n     acc: &mut Vec<InlayHint>,\n     sema: &Semantics<RootDatabase>,\n     config: &InlayHintsConfig,\n@@ -567,13 +605,21 @@ mod tests {\n \n     use crate::{fixture, inlay_hints::InlayHintsConfig};\n \n+    const DISABLED_CONFIG: InlayHintsConfig = InlayHintsConfig {\n+        render_colons: false,\n+        type_hints: false,\n+        parameter_hints: false,\n+        chaining_hints: false,\n+        hide_named_constructor_hints: false,\n+        closure_return_type_hints: false,\n+        max_length: None,\n+    };\n     const TEST_CONFIG: InlayHintsConfig = InlayHintsConfig {\n-        render_colons: true,\n         type_hints: true,\n         parameter_hints: true,\n         chaining_hints: true,\n-        hide_named_constructor_hints: false,\n-        max_length: None,\n+        closure_return_type_hints: true,\n+        ..DISABLED_CONFIG\n     };\n \n     #[track_caller]\n@@ -584,46 +630,19 @@ mod tests {\n     #[track_caller]\n     fn check_params(ra_fixture: &str) {\n         check_with_config(\n-            InlayHintsConfig {\n-                render_colons: true,\n-                parameter_hints: true,\n-                type_hints: false,\n-                chaining_hints: false,\n-                hide_named_constructor_hints: false,\n-                max_length: None,\n-            },\n+            InlayHintsConfig { parameter_hints: true, ..DISABLED_CONFIG },\n             ra_fixture,\n         );\n     }\n \n     #[track_caller]\n     fn check_types(ra_fixture: &str) {\n-        check_with_config(\n-            InlayHintsConfig {\n-                render_colons: true,\n-                parameter_hints: false,\n-                type_hints: true,\n-                chaining_hints: false,\n-                hide_named_constructor_hints: false,\n-                max_length: None,\n-            },\n-            ra_fixture,\n-        );\n+        check_with_config(InlayHintsConfig { type_hints: true, ..DISABLED_CONFIG }, ra_fixture);\n     }\n \n     #[track_caller]\n     fn check_chains(ra_fixture: &str) {\n-        check_with_config(\n-            InlayHintsConfig {\n-                render_colons: true,\n-                parameter_hints: false,\n-                type_hints: false,\n-                chaining_hints: true,\n-                hide_named_constructor_hints: false,\n-                max_length: None,\n-            },\n-            ra_fixture,\n-        );\n+        check_with_config(InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG }, ra_fixture);\n     }\n \n     #[track_caller]\n@@ -646,14 +665,7 @@ mod tests {\n     #[test]\n     fn hints_disabled() {\n         check_with_config(\n-            InlayHintsConfig {\n-                render_colons: true,\n-                type_hints: false,\n-                parameter_hints: false,\n-                chaining_hints: false,\n-                hide_named_constructor_hints: false,\n-                max_length: None,\n-            },\n+            InlayHintsConfig { render_colons: true, ..DISABLED_CONFIG },\n             r#\"\n fn foo(a: i32, b: i32) -> i32 { a + b }\n fn main() {\n@@ -1102,14 +1114,7 @@ fn main() {\n         let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n         let inlay_hints = analysis\n             .inlay_hints(\n-                &InlayHintsConfig {\n-                    render_colons: true,\n-                    parameter_hints: false,\n-                    type_hints: true,\n-                    chaining_hints: false,\n-                    hide_named_constructor_hints: false,\n-                    max_length: None,\n-                },\n+                &InlayHintsConfig { type_hints: true, ..DISABLED_CONFIG },\n                 file_id,\n                 Some(FileRange {\n                     file_id,\n@@ -1418,7 +1423,7 @@ fn main() {\n                 parameter_hints: true,\n                 chaining_hints: true,\n                 hide_named_constructor_hints: true,\n-                max_length: None,\n+                ..DISABLED_CONFIG\n             },\n             r#\"\n //- minicore: try, option\n@@ -1546,13 +1551,14 @@ fn fallible() -> ControlFlow<()> {\n fn main() {\n     let mut start = 0;\n           //^^^^^ i32\n-    (0..2).for_each(|increment| { start += increment; });\n+    (0..2).for_each(|increment      | { start += increment; });\n                    //^^^^^^^^^ i32\n \n     let multiply =\n       //^^^^^^^^ |i32, i32| -> i32\n       | a,     b| a * b\n       //^ i32  ^ i32\n+\n     ;\n \n     let _: i32 = multiply(1, 2);\n@@ -1561,6 +1567,8 @@ fn main() {\n \n     let return_42 = || 42;\n       //^^^^^^^^^ || -> i32\n+      || { 42 };\n+    //^^ i32\n }\"#,\n         );\n     }\n@@ -1590,14 +1598,7 @@ fn main() {\n     #[test]\n     fn chaining_hints_ignore_comments() {\n         check_expect(\n-            InlayHintsConfig {\n-                render_colons: true,\n-                parameter_hints: false,\n-                type_hints: false,\n-                chaining_hints: true,\n-                hide_named_constructor_hints: false,\n-                max_length: None,\n-            },\n+            InlayHintsConfig { type_hints: false, chaining_hints: true, ..DISABLED_CONFIG },\n             r#\"\n struct A(B);\n impl A { fn into_b(self) -> B { self.0 } }\n@@ -1648,14 +1649,7 @@ fn main() {\n     #[test]\n     fn struct_access_chaining_hints() {\n         check_expect(\n-            InlayHintsConfig {\n-                render_colons: true,\n-                parameter_hints: false,\n-                type_hints: false,\n-                chaining_hints: true,\n-                hide_named_constructor_hints: false,\n-                max_length: None,\n-            },\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n             r#\"\n struct A { pub b: B }\n struct B { pub c: C }\n@@ -1694,14 +1688,7 @@ fn main() {\n     #[test]\n     fn generic_chaining_hints() {\n         check_expect(\n-            InlayHintsConfig {\n-                render_colons: true,\n-                parameter_hints: false,\n-                type_hints: false,\n-                chaining_hints: true,\n-                hide_named_constructor_hints: false,\n-                max_length: None,\n-            },\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n             r#\"\n struct A<T>(T);\n struct B<T>(T);\n@@ -1741,14 +1728,7 @@ fn main() {\n     #[test]\n     fn shorten_iterator_chaining_hints() {\n         check_expect(\n-            InlayHintsConfig {\n-                render_colons: true,\n-                parameter_hints: false,\n-                type_hints: false,\n-                chaining_hints: true,\n-                hide_named_constructor_hints: false,\n-                max_length: None,\n-            },\n+            InlayHintsConfig { chaining_hints: true, ..DISABLED_CONFIG },\n             r#\"\n //- minicore: iterators\n use core::iter;"}, {"sha": "a06793cf51605f3163da2e449a9959c620b4f61a", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3cfa1986b559d4f74bf2709532c1401ebbdd759/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cfa1986b559d4f74bf2709532c1401ebbdd759/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=b3cfa1986b559d4f74bf2709532c1401ebbdd759", "patch": "@@ -109,6 +109,7 @@ impl StaticIndex<'_> {\n                     type_hints: true,\n                     parameter_hints: true,\n                     chaining_hints: true,\n+                    closure_return_type_hints: true,\n                     hide_named_constructor_hints: false,\n                     max_length: Some(25),\n                 },"}, {"sha": "3d5737316bf2bf8ef293b44a0c24509d44d502c6", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b3cfa1986b559d4f74bf2709532c1401ebbdd759/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cfa1986b559d4f74bf2709532c1401ebbdd759/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=b3cfa1986b559d4f74bf2709532c1401ebbdd759", "patch": "@@ -244,15 +244,17 @@ config_data! {\n \n         /// Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\n         inlayHints_renderColons: bool               = \"true\",\n-        /// Whether to show inlay type hints for method chains.\n-        inlayHints_chainingHints: bool              = \"true\",\n         /// Maximum length for inlay hints. Set to null to have an unlimited length.\n         inlayHints_maxLength: Option<usize>         = \"25\",\n         /// Whether to show function parameter name inlay hints at the call\n         /// site.\n         inlayHints_parameterHints: bool             = \"true\",\n         /// Whether to show inlay type hints for variables.\n         inlayHints_typeHints: bool                  = \"true\",\n+        /// Whether to show inlay type hints for method chains.\n+        inlayHints_chainingHints: bool              = \"true\",\n+        /// Whether to show inlay type hints for return types of closures with blocks.\n+        inlayHints_closureReturnTypeHints: bool     = \"false\",\n         /// Whether to hide inlay hints for constructors.\n         inlayHints_hideNamedConstructorHints: bool  = \"false\",\n \n@@ -852,6 +854,7 @@ impl Config {\n             type_hints: self.data.inlayHints_typeHints,\n             parameter_hints: self.data.inlayHints_parameterHints,\n             chaining_hints: self.data.inlayHints_chainingHints,\n+            closure_return_type_hints: self.data.inlayHints_closureReturnTypeHints,\n             hide_named_constructor_hints: self.data.inlayHints_hideNamedConstructorHints,\n             max_length: self.data.inlayHints_maxLength,\n         }"}, {"sha": "e9e8bdb6c5f612f911da00c48fce4681ad6e5428", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b3cfa1986b559d4f74bf2709532c1401ebbdd759/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3cfa1986b559d4f74bf2709532c1401ebbdd759/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=b3cfa1986b559d4f74bf2709532c1401ebbdd759", "patch": "@@ -422,26 +422,31 @@ pub(crate) fn inlay_hint(\n         label: lsp_ext::InlayHintLabel::String(match inlay_hint.kind {\n             InlayKind::ParameterHint if render_colons => format!(\"{}:\", inlay_hint.label),\n             InlayKind::TypeHint if render_colons => format!(\": {}\", inlay_hint.label),\n+            InlayKind::ClosureReturnTypeHint => format!(\" -> {}\", inlay_hint.label),\n             _ => inlay_hint.label.to_string(),\n         }),\n         position: match inlay_hint.kind {\n             InlayKind::ParameterHint => position(line_index, inlay_hint.range.start()),\n-            InlayKind::TypeHint | InlayKind::ChainingHint => {\n+            InlayKind::ClosureReturnTypeHint | InlayKind::TypeHint | InlayKind::ChainingHint => {\n                 position(line_index, inlay_hint.range.end())\n             }\n         },\n         kind: match inlay_hint.kind {\n             InlayKind::ParameterHint => Some(lsp_ext::InlayHintKind::PARAMETER),\n-            InlayKind::TypeHint | InlayKind::ChainingHint => Some(lsp_ext::InlayHintKind::TYPE),\n+            InlayKind::ClosureReturnTypeHint | InlayKind::TypeHint | InlayKind::ChainingHint => {\n+                Some(lsp_ext::InlayHintKind::TYPE)\n+            }\n         },\n         tooltip: None,\n         padding_left: Some(match inlay_hint.kind {\n             InlayKind::TypeHint => !render_colons,\n-            InlayKind::ParameterHint => false,\n+            InlayKind::ParameterHint | InlayKind::ClosureReturnTypeHint => false,\n             InlayKind::ChainingHint => true,\n         }),\n         padding_right: Some(match inlay_hint.kind {\n-            InlayKind::TypeHint | InlayKind::ChainingHint => false,\n+            InlayKind::TypeHint | InlayKind::ChainingHint | InlayKind::ClosureReturnTypeHint => {\n+                false\n+            }\n             InlayKind::ParameterHint => true,\n         }),\n     }"}, {"sha": "5793b4c057db2df47f73ffc527b1dd82389a62ba", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b3cfa1986b559d4f74bf2709532c1401ebbdd759/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/b3cfa1986b559d4f74bf2709532c1401ebbdd759/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=b3cfa1986b559d4f74bf2709532c1401ebbdd759", "patch": "@@ -352,11 +352,6 @@ Whether to show `Run` action. Only applies when\n --\n Whether to render trailing colons for parameter hints, and trailing colons for parameter hints.\n --\n-[[rust-analyzer.inlayHints.chainingHints]]rust-analyzer.inlayHints.chainingHints (default: `true`)::\n-+\n---\n-Whether to show inlay type hints for method chains.\n---\n [[rust-analyzer.inlayHints.maxLength]]rust-analyzer.inlayHints.maxLength (default: `25`)::\n +\n --\n@@ -373,6 +368,16 @@ site.\n --\n Whether to show inlay type hints for variables.\n --\n+[[rust-analyzer.inlayHints.chainingHints]]rust-analyzer.inlayHints.chainingHints (default: `true`)::\n++\n+--\n+Whether to show inlay type hints for method chains.\n+--\n+[[rust-analyzer.inlayHints.closureReturnTypeHints]]rust-analyzer.inlayHints.closureReturnTypeHints (default: `false`)::\n++\n+--\n+Whether to show inlay type hints for return types of closures with blocks.\n+--\n [[rust-analyzer.inlayHints.hideNamedConstructorHints]]rust-analyzer.inlayHints.hideNamedConstructorHints (default: `false`)::\n +\n --"}, {"sha": "8315819774114a4c7ee99cdc8a94f41eb9c34634", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b3cfa1986b559d4f74bf2709532c1401ebbdd759/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/b3cfa1986b559d4f74bf2709532c1401ebbdd759/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=b3cfa1986b559d4f74bf2709532c1401ebbdd759", "patch": "@@ -771,11 +771,6 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n-                \"rust-analyzer.inlayHints.chainingHints\": {\n-                    \"markdownDescription\": \"Whether to show inlay type hints for method chains.\",\n-                    \"default\": true,\n-                    \"type\": \"boolean\"\n-                },\n                 \"rust-analyzer.inlayHints.maxLength\": {\n                     \"markdownDescription\": \"Maximum length for inlay hints. Set to null to have an unlimited length.\",\n                     \"default\": 25,\n@@ -795,6 +790,16 @@\n                     \"default\": true,\n                     \"type\": \"boolean\"\n                 },\n+                \"rust-analyzer.inlayHints.chainingHints\": {\n+                    \"markdownDescription\": \"Whether to show inlay type hints for method chains.\",\n+                    \"default\": true,\n+                    \"type\": \"boolean\"\n+                },\n+                \"rust-analyzer.inlayHints.closureReturnTypeHints\": {\n+                    \"markdownDescription\": \"Whether to show inlay type hints for return types of closures with blocks.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.inlayHints.hideNamedConstructorHints\": {\n                     \"markdownDescription\": \"Whether to hide inlay hints for constructors.\",\n                     \"default\": false,"}, {"sha": "5d3ef404594bdd55c5d41ed4081d6ef63fc8b3fd", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3cfa1986b559d4f74bf2709532c1401ebbdd759/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b3cfa1986b559d4f74bf2709532c1401ebbdd759/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=b3cfa1986b559d4f74bf2709532c1401ebbdd759", "patch": "@@ -103,6 +103,7 @@ export class Config {\n             typeHints: this.get<boolean>(\"inlayHints.typeHints\"),\n             parameterHints: this.get<boolean>(\"inlayHints.parameterHints\"),\n             chainingHints: this.get<boolean>(\"inlayHints.chainingHints\"),\n+            closureReturnTypeHints: this.get<boolean>(\"inlayHints.closureReturnTypeHints\"),\n             hideNamedConstructorHints: this.get<boolean>(\"inlayHints.hideNamedConstructorHints\"),\n             smallerHints: this.get<boolean>(\"inlayHints.smallerHints\"),\n             maxLength: this.get<null | number>(\"inlayHints.maxLength\"),"}, {"sha": "3f7ddedddf3f724f4b65ba378496e367b1fa6030", "filename": "editors/code/src/inlay_hints.ts", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3cfa1986b559d4f74bf2709532c1401ebbdd759/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b3cfa1986b559d4f74bf2709532c1401ebbdd759/editors%2Fcode%2Fsrc%2Finlay_hints.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finlay_hints.ts?ref=b3cfa1986b559d4f74bf2709532c1401ebbdd759", "patch": "@@ -14,7 +14,8 @@ export function activateInlayHints(ctx: Ctx) {\n \n             const anyEnabled = ctx.config.inlayHints.typeHints\n                 || ctx.config.inlayHints.parameterHints\n-                || ctx.config.inlayHints.chainingHints;\n+                || ctx.config.inlayHints.chainingHints\n+                || ctx.config.inlayHints.closureReturnTypeHints;\n             const enabled = ctx.config.inlayHints.enable && anyEnabled;\n             if (!enabled) return;\n "}]}