{"sha": "417b20835d9409ecfc9aa62e25368a5c1040b7ee", "node_id": "C_kwDOAAsO6NoAKDQxN2IyMDgzNWQ5NDA5ZWNmYzlhYTYyZTI1MzY4YTVjMTA0MGI3ZWU", "commit": {"author": {"name": "Jacob Hughes", "email": "j@distanthills.org", "date": "2022-03-14T10:55:36Z"}, "committer": {"name": "Jacob Hughes", "email": "j@distanthills.org", "date": "2022-06-14T17:54:10Z"}, "message": "btreemap-alloc: fix clear impl", "tree": {"sha": "33168f2cd7e28795700567edc80a24f26597125c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33168f2cd7e28795700567edc80a24f26597125c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/417b20835d9409ecfc9aa62e25368a5c1040b7ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/417b20835d9409ecfc9aa62e25368a5c1040b7ee", "html_url": "https://github.com/rust-lang/rust/commit/417b20835d9409ecfc9aa62e25368a5c1040b7ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/417b20835d9409ecfc9aa62e25368a5c1040b7ee/comments", "author": {"login": "exrook", "id": 534850, "node_id": "MDQ6VXNlcjUzNDg1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/534850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exrook", "html_url": "https://github.com/exrook", "followers_url": "https://api.github.com/users/exrook/followers", "following_url": "https://api.github.com/users/exrook/following{/other_user}", "gists_url": "https://api.github.com/users/exrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/exrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exrook/subscriptions", "organizations_url": "https://api.github.com/users/exrook/orgs", "repos_url": "https://api.github.com/users/exrook/repos", "events_url": "https://api.github.com/users/exrook/events{/privacy}", "received_events_url": "https://api.github.com/users/exrook/received_events", "type": "User", "site_admin": false}, "committer": {"login": "exrook", "id": 534850, "node_id": "MDQ6VXNlcjUzNDg1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/534850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/exrook", "html_url": "https://github.com/exrook", "followers_url": "https://api.github.com/users/exrook/followers", "following_url": "https://api.github.com/users/exrook/following{/other_user}", "gists_url": "https://api.github.com/users/exrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/exrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/exrook/subscriptions", "organizations_url": "https://api.github.com/users/exrook/orgs", "repos_url": "https://api.github.com/users/exrook/repos", "events_url": "https://api.github.com/users/exrook/events{/privacy}", "received_events_url": "https://api.github.com/users/exrook/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc5951a6e5c64d9348a96e7c161d07b221b26dd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc5951a6e5c64d9348a96e7c161d07b221b26dd2", "html_url": "https://github.com/rust-lang/rust/commit/dc5951a6e5c64d9348a96e7c161d07b221b26dd2"}], "stats": {"total": 21, "additions": 6, "deletions": 15}, "files": [{"sha": "95d9c3142dd469ffd780d0d34eac2776a949eb78", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/417b20835d9409ecfc9aa62e25368a5c1040b7ee/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/417b20835d9409ecfc9aa62e25368a5c1040b7ee/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=417b20835d9409ecfc9aa62e25368a5c1040b7ee", "patch": "@@ -571,11 +571,12 @@ impl<K, V, A: Allocator> BTreeMap<K, V, A> {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn clear(&mut self) {\n-        let alloc = unsafe {\n-            // drop all elements and retrieve allocator\n-            ptr::read(self).into_iter().into_alloc()\n-        };\n-        *self = BTreeMap::new_in(alloc);\n+        // avoid moving the allocator\n+        mem::drop(BTreeMap {\n+            root: mem::replace(&mut self.root, None),\n+            length: mem::replace(&mut self.length, 0),\n+            alloc: ManuallyDrop::new(&*self.alloc),\n+        });\n     }\n \n     /// Makes a new empty BTreeMap with a reasonable choice for B.\n@@ -1594,11 +1595,6 @@ impl<K, V, A: Allocator> IntoIterator for BTreeMap<K, V, A> {\n #[stable(feature = \"btree_drop\", since = \"1.7.0\")]\n impl<K, V, A: Allocator> Drop for IntoIter<K, V, A> {\n     fn drop(&mut self) {\n-        self.dealloc()\n-    }\n-}\n-impl<K, V, A: Allocator> IntoIter<K, V, A> {\n-    fn dealloc(&mut self) {\n         struct DropGuard<'a, K, V, A: Allocator>(&'a mut IntoIter<K, V, A>);\n \n         impl<'a, K, V, A: Allocator> Drop for DropGuard<'a, K, V, A> {\n@@ -1649,11 +1645,6 @@ impl<K, V, A: Allocator> IntoIter<K, V, A> {\n             Some(unsafe { self.range.deallocating_next_back_unchecked(&self.alloc) })\n         }\n     }\n-    fn into_alloc(mut self) -> A {\n-        self.dealloc(); // Deallocate, then don't drop as drop will also call dealloc\n-        let iter = ManuallyDrop::new(self);\n-        unsafe { ptr::read(&iter.alloc) }\n-    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}