{"sha": "72bb5c7067a12aa28a32c377135a1dd34bb73cb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYmI1YzcwNjdhMTJhYTI4YTMyYzM3NzEzNWExZGQzNGJiNzNjYjc=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-16T15:44:19Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-06-17T16:59:27Z"}, "message": "change NodeId to HirId in some HIR docs", "tree": {"sha": "f3976b546723ae012d387c7ba0b42e3ca18fa390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3976b546723ae012d387c7ba0b42e3ca18fa390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72bb5c7067a12aa28a32c377135a1dd34bb73cb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72bb5c7067a12aa28a32c377135a1dd34bb73cb7", "html_url": "https://github.com/rust-lang/rust/commit/72bb5c7067a12aa28a32c377135a1dd34bb73cb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72bb5c7067a12aa28a32c377135a1dd34bb73cb7/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88961b049ec2e8dec3f7b1c8166fb201c0632bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/88961b049ec2e8dec3f7b1c8166fb201c0632bbe", "html_url": "https://github.com/rust-lang/rust/commit/88961b049ec2e8dec3f7b1c8166fb201c0632bbe"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "85c86991f489a9a6bb3f5f558a0b4e9a5a5385be", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/72bb5c7067a12aa28a32c377135a1dd34bb73cb7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bb5c7067a12aa28a32c377135a1dd34bb73cb7/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=72bb5c7067a12aa28a32c377135a1dd34bb73cb7", "patch": "@@ -35,7 +35,7 @@ mod def_collector;\n pub mod definitions;\n mod hir_id_validator;\n \n-/// Represents an entry and its parent `NodeId`.\n+/// Represents an entry and its parent `HirId`.\n #[derive(Copy, Clone, Debug)]\n pub struct Entry<'hir> {\n     parent: HirId,\n@@ -200,7 +200,7 @@ impl<'hir> Map<'hir> {\n     /// \"reveals\" the content of a node to the caller (who might not\n     /// otherwise have had access to those contents, and hence needs a\n     /// read recorded). If the function just returns a DefId or\n-    /// NodeId, no actual content was returned, so no read is needed.\n+    /// HirId, no actual content was returned, so no read is needed.\n     pub fn read(&self, hir_id: HirId) {\n         if let Some(entry) = self.lookup(hir_id) {\n             self.dep_graph.read_index(entry.dep_node);\n@@ -681,7 +681,7 @@ impl<'hir> Map<'hir> {\n \n     /// If there is some error when walking the parents (e.g., a node does not\n     /// have a parent in the map or a node can't be found), then we return the\n-    /// last good `NodeId` we found. Note that reaching the crate root (`id == 0`),\n+    /// last good `HirId` we found. Note that reaching the crate root (`id == 0`),\n     /// is not an error, since items in the crate module have the crate root as\n     /// parent.\n     fn walk_parent_nodes<F, F2>(&self,\n@@ -717,15 +717,15 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    /// Retrieves the `NodeId` for `id`'s enclosing method, unless there's a\n+    /// Retrieves the `HirId` for `id`'s enclosing method, unless there's a\n     /// `while` or `loop` before reaching it, as block tail returns are not\n     /// available in them.\n     ///\n     /// ```\n     /// fn foo(x: usize) -> bool {\n     ///     if x == 1 {\n     ///         true  // `get_return_block` gets passed the `id` corresponding\n-    ///     } else {  // to this, it will return `foo`'s `NodeId`.\n+    ///     } else {  // to this, it will return `foo`'s `HirId`.\n     ///         false\n     ///     }\n     /// }"}, {"sha": "0884a726a27b0b58d38e55456fec44632cc2696e", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72bb5c7067a12aa28a32c377135a1dd34bb73cb7/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72bb5c7067a12aa28a32c377135a1dd34bb73cb7/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=72bb5c7067a12aa28a32c377135a1dd34bb73cb7", "patch": "@@ -2177,8 +2177,8 @@ pub enum UseKind {\n /// References to traits in impls.\n ///\n /// `resolve` maps each `TraitRef`'s `ref_id` to its defining trait; that's all\n-/// that the `ref_id` is for. Note that `ref_id`'s value is not the `NodeId` of the\n-/// trait being referred to but just a unique `NodeId` that serves as a key\n+/// that the `ref_id` is for. Note that `ref_id`'s value is not the `HirId` of the\n+/// trait being referred to but just a unique `HirId` that serves as a key\n /// within the resolution map.\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct TraitRef {"}]}