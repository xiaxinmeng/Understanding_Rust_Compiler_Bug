{"sha": "620b0c5122ee539124ed9442772e4648ac1d8b3f", "node_id": "C_kwDOAAsO6NoAKDYyMGIwYzUxMjJlZTUzOTEyNGVkOTQ0Mjc3MmU0NjQ4YWMxZDhiM2Y", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-18T22:23:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-18T22:23:11Z"}, "message": "Rollup merge of #93953 - jackh726:known_bug, r=Mark-Simulacrum\n\nAdd the `known-bug` test directive, use it, and do some cleanup\n\ncc rust-lang/compiler-team#476\n\nNow tests can be annotated with `known-bug`, which should indicate that the test *should* pass (or at least that the current output is a bug). Adding it relaxes the requirement to add error annotations to the test (though it is still allowed). In the future, this could be extended with further relaxations - with the goal to make adding these tests need minimal effort.\n\nI've used this attribute for the GAT tests added in #93757.\n\nFinally, I've also cleaned up `header.rs` in compiletest a bit, by extracting out a bit of common logic. I've also split out some of the directives into their own consts. This removes a lot of very similar functions from `Config` and makes `TestProps::load_from` read nicer.\n\nI've split these into separate commits, so I in theory could split these into separate PRs if they're controversial, but I think they're pretty straightforward.\n\nr? ``@Mark-Simulacrum``", "tree": {"sha": "72f050cf5c6395ecc1f33a6ca878e2f30e55c7e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72f050cf5c6395ecc1f33a6ca878e2f30e55c7e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/620b0c5122ee539124ed9442772e4648ac1d8b3f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiEBxPCRBK7hj4Ov3rIwAAklgIAJCTDvn3HJqyTk6Qy+FzOkAI\nV5FJmDe+J7qd1Jhxneroml552y8sldO16244lSlHOWziVw7hoT8lPnQOP+04QZNL\nlz79U3+5fix7b28VxVyd+lTPk72sGP/oojAYEcyFZIRCMcTQX4uQUhroquwAo5Um\nASom8XZwt7JuGFUl9MOHWzUuUGJxO2SF6y8C+H9dtVoVvh1VQ9NSASzDmSyg2vUb\nYMJJGSHp01lXvlEhc8E+5mNGT4LtMFGLaJmTP5q0GHUgWQARu+l9HOFSDEGQqveS\n/WorhUNk2DpAYeD3mnFo2xUDhpcLx48pbCzjLdyh1kOKpbCBlShrbZWAK/WFz1E=\n=49ZS\n-----END PGP SIGNATURE-----\n", "payload": "tree 72f050cf5c6395ecc1f33a6ca878e2f30e55c7e3\nparent 576afec73a15e918ab6d1e85ba7d8dd6fb1626d3\nparent 36cf48bae70957f28c141cdefdb248688c87e11c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645222991 +0100\ncommitter GitHub <noreply@github.com> 1645222991 +0100\n\nRollup merge of #93953 - jackh726:known_bug, r=Mark-Simulacrum\n\nAdd the `known-bug` test directive, use it, and do some cleanup\n\ncc rust-lang/compiler-team#476\n\nNow tests can be annotated with `known-bug`, which should indicate that the test *should* pass (or at least that the current output is a bug). Adding it relaxes the requirement to add error annotations to the test (though it is still allowed). In the future, this could be extended with further relaxations - with the goal to make adding these tests need minimal effort.\n\nI've used this attribute for the GAT tests added in #93757.\n\nFinally, I've also cleaned up `header.rs` in compiletest a bit, by extracting out a bit of common logic. I've also split out some of the directives into their own consts. This removes a lot of very similar functions from `Config` and makes `TestProps::load_from` read nicer.\n\nI've split these into separate commits, so I in theory could split these into separate PRs if they're controversial, but I think they're pretty straightforward.\n\nr? ``@Mark-Simulacrum``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/620b0c5122ee539124ed9442772e4648ac1d8b3f", "html_url": "https://github.com/rust-lang/rust/commit/620b0c5122ee539124ed9442772e4648ac1d8b3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/620b0c5122ee539124ed9442772e4648ac1d8b3f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "576afec73a15e918ab6d1e85ba7d8dd6fb1626d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/576afec73a15e918ab6d1e85ba7d8dd6fb1626d3", "html_url": "https://github.com/rust-lang/rust/commit/576afec73a15e918ab6d1e85ba7d8dd6fb1626d3"}, {"sha": "36cf48bae70957f28c141cdefdb248688c87e11c", "url": "https://api.github.com/repos/rust-lang/rust/commits/36cf48bae70957f28c141cdefdb248688c87e11c", "html_url": "https://github.com/rust-lang/rust/commit/36cf48bae70957f28c141cdefdb248688c87e11c"}], "stats": {"total": 466, "additions": 218, "deletions": 248}, "files": [{"sha": "a637da6cf6fa778a9ceddb57aaf61b1530dbb4d8", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.rs?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but it requires `Sized` to be coinductive.\n \n@@ -11,7 +12,6 @@ trait Allocator {\n enum LinkedList<A: Allocator> {\n     Head,\n     Next(A::Allocated<Self>)\n-    //~^ overflow\n }\n \n fn main() {}"}, {"sha": "8b0cc78e9994964889441231f0d895f04ff57776", "filename": "src/test/ui/generic-associated-types/bugs/issue-80626.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-80626.stderr?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `LinkedList<A>: Sized`\n-  --> $DIR/issue-80626.rs:13:10\n+  --> $DIR/issue-80626.rs:14:10\n    |\n LL |     Next(A::Allocated<Self>)\n    |          ^^^^^^^^^^^^^^^^^^"}, {"sha": "68cd0fd7efce0ffe0ca242ad0d89a96eac05a01f", "filename": "src/test/ui/generic-associated-types/bugs/issue-86218.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.rs?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but seems to run into a TAIT issue.\n \n@@ -20,7 +21,6 @@ trait Yay<AdditionalValue> {\n \n impl<'a> Yay<&'a ()> for () {\n     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n-    //~^ the type\n     fn foo<'s>() -> Self::InnerStream<'s> { todo!() }\n }\n "}, {"sha": "98a5f4254bb1b9f5c33a36c7090e9de2dc47002a", "filename": "src/test/ui/generic-associated-types/bugs/issue-86218.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-86218.stderr?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,11 +1,11 @@\n error[E0477]: the type `impl Stream<Item = i32>` does not fulfill the required lifetime\n-  --> $DIR/issue-86218.rs:22:28\n+  --> $DIR/issue-86218.rs:23:28\n    |\n LL |     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n note: type must outlive the lifetime `'s` as defined here as required by this binding\n-  --> $DIR/issue-86218.rs:22:22\n+  --> $DIR/issue-86218.rs:23:22\n    |\n LL |     type InnerStream<'s> = impl Stream<Item = i32> + 's;\n    |                      ^^"}, {"sha": "6d6063f8085ba5bc253de9560b41dc797c448363", "filename": "src/test/ui/generic-associated-types/bugs/issue-87735.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.rs?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but we need an extension of implied bounds (probably).\n \n@@ -23,7 +24,7 @@ struct Foo<T>(T);\n #[derive(Debug)]\n struct FooRef<'a, U>(&'a [U]);\n \n-impl<'b, T, U> AsRef2 for Foo<T> //~ the type parameter\n+impl<'b, T, U> AsRef2 for Foo<T>\n where\n     // * `for<'b, 'c> T: AsRef2<Output<'b> = &'c [U]>>` does not work\n     //"}, {"sha": "0a18b5f0cbdaaa0b77d09901c869fac18cbea8e6", "filename": "src/test/ui/generic-associated-types/bugs/issue-87735.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87735.stderr?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the type parameter `U` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-87735.rs:26:13\n+  --> $DIR/issue-87735.rs:27:13\n    |\n LL | impl<'b, T, U> AsRef2 for Foo<T>\n    |             ^ unconstrained type parameter"}, {"sha": "ffcfd62cbb3be48c6e81f62c6d0ac008487d3a6c", "filename": "src/test/ui/generic-associated-types/bugs/issue-87748.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.rs?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but unnormalized input args aren't treated as implied.\n \n@@ -14,7 +15,7 @@ struct Foo;\n impl MyTrait for Foo {\n     type Assoc<'a, 'b> where 'b: 'a = u32;\n \n-    fn do_sth(_: u32) {} //~ lifetime bound\n+    fn do_sth(_: u32) {}\n     // fn do_sth(_: Self::Assoc<'static, 'static>) {}\n     // fn do_sth(_: Self::Assoc<'_, '_>) {}\n }"}, {"sha": "60bb48efbc89504a0244dad0e17865b508cf158a", "filename": "src/test/ui/generic-associated-types/bugs/issue-87748.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87748.stderr?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,16 +1,16 @@\n error[E0478]: lifetime bound not satisfied\n-  --> $DIR/issue-87748.rs:17:5\n+  --> $DIR/issue-87748.rs:18:5\n    |\n LL |     fn do_sth(_: u32) {}\n    |     ^^^^^^^^^^^^^^^^^\n    |\n note: lifetime parameter instantiated with the anonymous lifetime #2 defined here\n-  --> $DIR/issue-87748.rs:17:5\n+  --> $DIR/issue-87748.rs:18:5\n    |\n LL |     fn do_sth(_: u32) {}\n    |     ^^^^^^^^^^^^^^^^^\n note: but lifetime parameter must outlive the anonymous lifetime #1 defined here\n-  --> $DIR/issue-87748.rs:17:5\n+  --> $DIR/issue-87748.rs:18:5\n    |\n LL |     fn do_sth(_: u32) {}\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "31cea12a3e2416a7365b81edd9c0f6cbae30e9c3", "filename": "src/test/ui/generic-associated-types/bugs/issue-87755.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.rs?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass.\n \n@@ -15,7 +16,6 @@ struct Bar;\n \n impl Foo for Bar {\n     type Ass = Bar;\n-    //~^ overflow\n }\n \n fn main() {}"}, {"sha": "5d1aff0117c13cb838bcdde5f94e7aa770dee397", "filename": "src/test/ui/generic-associated-types/bugs/issue-87755.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87755.stderr?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,5 +1,5 @@\n error[E0275]: overflow evaluating the requirement `<Bar as Foo>::Ass == _`\n-  --> $DIR/issue-87755.rs:17:16\n+  --> $DIR/issue-87755.rs:18:16\n    |\n LL |     type Ass = Bar;\n    |                ^^^"}, {"sha": "57a4b028d93ea67bf3e1b5cbb6ef8ff8369084e5", "filename": "src/test/ui/generic-associated-types/bugs/issue-87803.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.rs?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but using a type alias vs a reference directly\n // changes late-bound -> early-bound.\n@@ -18,7 +19,7 @@ impl Scanner for IdScanner {\n     type Input<'a> = &'a str;\n     type Token<'a> = &'a str;\n \n-    fn scan<'a>(&mut self, s : &'a str) -> &'a str { //~ lifetime parameters\n+    fn scan<'a>(&mut self, s : &'a str) -> &'a str {\n         s\n     }\n }"}, {"sha": "c81c051d32a89616271abfbd7e4bf0f9c79487aa", "filename": "src/test/ui/generic-associated-types/bugs/issue-87803.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-87803.stderr?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,5 +1,5 @@\n error[E0195]: lifetime parameters or bounds on method `scan` do not match the trait declaration\n-  --> $DIR/issue-87803.rs:21:12\n+  --> $DIR/issue-87803.rs:22:12\n    |\n LL |     fn scan<'a>(&mut self, i : Self::Input<'a>) -> Self::Token<'a>;\n    |            ---- lifetimes in impl do not match this method in trait"}, {"sha": "c9f342405278a90597f39b6a236532dc8701bbfd", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.rs?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but has a missed normalization due to HRTB.\n \n@@ -25,7 +26,6 @@ fn do_something<I: Iterable>(i: I, mut f: impl for<'a> Fn(&mut I::Iterator<'a>))\n fn main() {\n     do_something(SomeImplementation(), |_| ());\n     do_something(SomeImplementation(), test);\n-    //~^ type mismatch\n }\n \n fn test<'a, I: Iterable>(_: &mut I::Iterator<'a>) {}"}, {"sha": "d06c3ec8de75ec436c4461bc5b4749ce244132e4", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,5 +1,5 @@\n error[E0631]: type mismatch in function arguments\n-  --> $DIR/issue-88382.rs:27:40\n+  --> $DIR/issue-88382.rs:28:40\n    |\n LL |     do_something(SomeImplementation(), test);\n    |     ------------                       ^^^^ expected signature of `for<'a> fn(&mut <SomeImplementation as Iterable>::Iterator<'a>) -> _`\n@@ -10,7 +10,7 @@ LL | fn test<'a, I: Iterable>(_: &mut I::Iterator<'a>) {}\n    | ------------------------------------------------- found signature of `for<'r> fn(&'r mut std::iter::Empty<usize>) -> _`\n    |\n note: required by a bound in `do_something`\n-  --> $DIR/issue-88382.rs:21:56\n+  --> $DIR/issue-88382.rs:22:56\n    |\n LL | fn do_something<I: Iterable>(i: I, mut f: impl for<'a> Fn(&mut I::Iterator<'a>)) {\n    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `do_something`"}, {"sha": "b31d012d2fc4163c1f5478933ecca9062cdb849a", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.rs?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but has a missed normalization due to HRTB.\n \n@@ -27,5 +28,4 @@ impl Trait for Foo {\n \n fn main() {\n     test(Foo);\n-    //~^ the trait bound\n }"}, {"sha": "0b83e9da1ab7ade398c3f3aa31a2be73c6ea39b8", "filename": "src/test/ui/generic-associated-types/bugs/issue-88460.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,11 +1,11 @@\n error[E0277]: the trait bound `for<'a> <_ as Trait>::Assoc<'a>: Marker` is not satisfied\n-  --> $DIR/issue-88460.rs:29:5\n+  --> $DIR/issue-88460.rs:30:5\n    |\n LL |     test(Foo);\n    |     ^^^^ the trait `for<'a> Marker` is not implemented for `<_ as Trait>::Assoc<'a>`\n    |\n note: required by a bound in `test`\n-  --> $DIR/issue-88460.rs:16:27\n+  --> $DIR/issue-88460.rs:17:27\n    |\n LL | fn test<T>(value: T)\n    |    ---- required by a bound in this"}, {"sha": "c72a450b9261cac5ee88b46fd963ff19de228382", "filename": "src/test/ui/generic-associated-types/bugs/issue-88526.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.rs?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,4 +1,5 @@\n // check-fail\n+// known-bug\n \n // This should pass, but requires more logic.\n \n@@ -23,7 +24,7 @@ struct TestB<Q, F>\n     f: F,\n }\n \n-impl<'q, Q, I, F> A for TestB<Q, F> //~ the type parameter\n+impl<'q, Q, I, F> A for TestB<Q, F>\n where\n     Q: A<I<'q> = &'q I>,\n     F: Fn(I),"}, {"sha": "127c889bf715e3c41e515fadae67b70fe827fcef", "filename": "src/test/ui/generic-associated-types/bugs/issue-88526.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88526.stderr?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,5 +1,5 @@\n error[E0207]: the type parameter `I` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-88526.rs:26:13\n+  --> $DIR/issue-88526.rs:27:13\n    |\n LL | impl<'q, Q, I, F> A for TestB<Q, F>\n    |             ^ unconstrained type parameter"}, {"sha": "1581b7105a867518a077c998fe2f2eb667743ad5", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.rs?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,5 +1,6 @@\n // check-fail\n // edition:2021\n+// known-bug\n \n // This should pass, but seems to run into a TAIT bug.\n \n@@ -31,11 +32,11 @@ trait X {\n struct Y;\n \n impl X for Y {\n-    type LineStream<'a, Repr> = impl Stream<Item = Repr>; //~ could not find\n+    type LineStream<'a, Repr> = impl Stream<Item = Repr>;\n \n     type LineStreamFut<'a, Repr> = impl Future<Output = Self::LineStream<'a, Repr>> ;\n \n-    fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr> { //~ type mismatch\n+    fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr> {\n         async {empty()}\n     }\n }"}, {"sha": "c2687ca540153c7bcc87aa5e8cea8788b130e023", "filename": "src/test/ui/generic-associated-types/bugs/issue-89008.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-89008.stderr?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1,5 +1,5 @@\n error[E0271]: type mismatch resolving `<impl Future<Output = [async output]> as Future>::Output == impl Stream<Item = Repr>`\n-  --> $DIR/issue-89008.rs:38:43\n+  --> $DIR/issue-89008.rs:39:43\n    |\n LL |     type LineStream<'a, Repr> = impl Stream<Item = Repr>;\n    |                                 ------------------------ the expected opaque type\n@@ -11,7 +11,7 @@ LL |     fn line_stream<'a, Repr>(&'a self) -> Self::LineStreamFut<'a, Repr> {\n                    found struct `Empty<_>`\n \n error: could not find defining uses\n-  --> $DIR/issue-89008.rs:34:33\n+  --> $DIR/issue-89008.rs:35:33\n    |\n LL |     type LineStream<'a, Repr> = impl Stream<Item = Repr>;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "887d27fd6dca41d04c8d3c7b4b7500178f0362e5", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 175, "deletions": 221, "changes": 396, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -41,12 +41,15 @@ impl EarlyProps {\n     pub fn from_reader<R: Read>(config: &Config, testfile: &Path, rdr: R) -> Self {\n         let mut props = EarlyProps::default();\n         iter_header(testfile, rdr, &mut |_, ln| {\n-            if let Some(s) = config.parse_aux_build(ln) {\n-                props.aux.push(s);\n-            }\n-            if let Some(ac) = config.parse_aux_crate(ln) {\n-                props.aux_crate.push(ac);\n-            }\n+            config.push_name_value_directive(ln, directives::AUX_BUILD, &mut props.aux, |r| {\n+                r.trim().to_string()\n+            });\n+            config.push_name_value_directive(\n+                ln,\n+                directives::AUX_CRATE,\n+                &mut props.aux_crate,\n+                Config::parse_aux_crate,\n+            );\n             config.parse_and_update_revisions(ln, &mut props.revisions);\n         });\n         return props;\n@@ -126,6 +129,12 @@ pub struct TestProps {\n     // empty before the test starts. Incremental mode tests will reuse the\n     // incremental directory between passes in the same test.\n     pub incremental: bool,\n+    // If `true`, this test is a known bug.\n+    //\n+    // When set, some requirements are relaxed. Currently, this only means no\n+    // error annotations are needed, but this may be updated in the future to\n+    // include other relaxations.\n+    pub known_bug: bool,\n     // How far should the test proceed while still passing.\n     pass_mode: Option<PassMode>,\n     // Ignore `--pass` overrides from the command line for this test.\n@@ -150,6 +159,38 @@ pub struct TestProps {\n     pub stderr_per_bitwidth: bool,\n }\n \n+mod directives {\n+    pub const ERROR_PATTERN: &'static str = \"error-pattern\";\n+    pub const COMPILE_FLAGS: &'static str = \"compile-flags\";\n+    pub const RUN_FLAGS: &'static str = \"run-flags\";\n+    pub const SHOULD_ICE: &'static str = \"should-ice\";\n+    pub const BUILD_AUX_DOCS: &'static str = \"build-aux-docs\";\n+    pub const FORCE_HOST: &'static str = \"force-host\";\n+    pub const CHECK_STDOUT: &'static str = \"check-stdout\";\n+    pub const CHECK_RUN_RESULTS: &'static str = \"check-run-results\";\n+    pub const DONT_CHECK_COMPILER_STDOUT: &'static str = \"dont-check-compiler-stdout\";\n+    pub const DONT_CHECK_COMPILER_STDERR: &'static str = \"dont-check-compiler-stderr\";\n+    pub const NO_PREFER_DYNAMIC: &'static str = \"no-prefer-dynamic\";\n+    pub const PRETTY_EXPANDED: &'static str = \"pretty-expanded\";\n+    pub const PRETTY_MODE: &'static str = \"pretty-mode\";\n+    pub const PRETTY_COMPARE_ONLY: &'static str = \"pretty-compare-only\";\n+    pub const AUX_BUILD: &'static str = \"aux-build\";\n+    pub const AUX_CRATE: &'static str = \"aux-crate\";\n+    pub const EXEC_ENV: &'static str = \"exec-env\";\n+    pub const RUSTC_ENV: &'static str = \"rustc-env\";\n+    pub const UNSET_RUSTC_ENV: &'static str = \"unset-rustc-env\";\n+    pub const FORBID_OUTPUT: &'static str = \"forbid-output\";\n+    pub const CHECK_TEST_LINE_NUMBERS_MATCH: &'static str = \"check-test-line-numbers-match\";\n+    pub const IGNORE_PASS: &'static str = \"ignore-pass\";\n+    pub const FAILURE_STATUS: &'static str = \"failure-status\";\n+    pub const RUN_RUSTFIX: &'static str = \"run-rustfix\";\n+    pub const RUSTFIX_ONLY_MACHINE_APPLICABLE: &'static str = \"rustfix-only-machine-applicable\";\n+    pub const ASSEMBLY_OUTPUT: &'static str = \"assembly-output\";\n+    pub const STDERR_PER_BITWIDTH: &'static str = \"stderr-per-bitwidth\";\n+    pub const INCREMENTAL: &'static str = \"incremental\";\n+    pub const KNOWN_BUG: &'static str = \"known-bug\";\n+}\n+\n impl TestProps {\n     pub fn new() -> Self {\n         TestProps {\n@@ -176,6 +217,7 @@ impl TestProps {\n             forbid_output: vec![],\n             incremental_dir: None,\n             incremental: false,\n+            known_bug: false,\n             pass_mode: None,\n             fail_mode: None,\n             ignore_pass: false,\n@@ -228,11 +270,16 @@ impl TestProps {\n                     return;\n                 }\n \n-                if let Some(ep) = config.parse_error_pattern(ln) {\n-                    self.error_patterns.push(ep);\n-                }\n+                use directives::*;\n \n-                if let Some(flags) = config.parse_compile_flags(ln) {\n+                config.push_name_value_directive(\n+                    ln,\n+                    ERROR_PATTERN,\n+                    &mut self.error_patterns,\n+                    |r| r,\n+                );\n+\n+                if let Some(flags) = config.parse_name_value_directive(ln, COMPILE_FLAGS) {\n                     self.compile_flags.extend(flags.split_whitespace().map(|s| s.to_owned()));\n                 }\n \n@@ -243,93 +290,73 @@ impl TestProps {\n \n                 config.parse_and_update_revisions(ln, &mut self.revisions);\n \n-                if self.run_flags.is_none() {\n-                    self.run_flags = config.parse_run_flags(ln);\n-                }\n+                config.set_name_value_directive(ln, RUN_FLAGS, &mut self.run_flags, |r| r);\n \n                 if self.pp_exact.is_none() {\n                     self.pp_exact = config.parse_pp_exact(ln, testfile);\n                 }\n \n-                if !self.should_ice {\n-                    self.should_ice = config.parse_should_ice(ln);\n-                }\n-\n-                if !self.build_aux_docs {\n-                    self.build_aux_docs = config.parse_build_aux_docs(ln);\n-                }\n-\n-                if !self.force_host {\n-                    self.force_host = config.parse_force_host(ln);\n-                }\n-\n-                if !self.check_stdout {\n-                    self.check_stdout = config.parse_check_stdout(ln);\n-                }\n-\n-                if !self.check_run_results {\n-                    self.check_run_results = config.parse_check_run_results(ln);\n-                }\n-\n-                if !self.dont_check_compiler_stdout {\n-                    self.dont_check_compiler_stdout = config.parse_dont_check_compiler_stdout(ln);\n-                }\n-\n-                if !self.dont_check_compiler_stderr {\n-                    self.dont_check_compiler_stderr = config.parse_dont_check_compiler_stderr(ln);\n-                }\n-\n-                if !self.no_prefer_dynamic {\n-                    self.no_prefer_dynamic = config.parse_no_prefer_dynamic(ln);\n-                }\n-\n-                if !self.pretty_expanded {\n-                    self.pretty_expanded = config.parse_pretty_expanded(ln);\n-                }\n-\n-                if let Some(m) = config.parse_pretty_mode(ln) {\n+                config.set_name_directive(ln, SHOULD_ICE, &mut self.should_ice);\n+                config.set_name_directive(ln, BUILD_AUX_DOCS, &mut self.build_aux_docs);\n+                config.set_name_directive(ln, FORCE_HOST, &mut self.force_host);\n+                config.set_name_directive(ln, CHECK_STDOUT, &mut self.check_stdout);\n+                config.set_name_directive(ln, CHECK_RUN_RESULTS, &mut self.check_run_results);\n+                config.set_name_directive(\n+                    ln,\n+                    DONT_CHECK_COMPILER_STDOUT,\n+                    &mut self.dont_check_compiler_stdout,\n+                );\n+                config.set_name_directive(\n+                    ln,\n+                    DONT_CHECK_COMPILER_STDERR,\n+                    &mut self.dont_check_compiler_stderr,\n+                );\n+                config.set_name_directive(ln, NO_PREFER_DYNAMIC, &mut self.no_prefer_dynamic);\n+                config.set_name_directive(ln, PRETTY_EXPANDED, &mut self.pretty_expanded);\n+\n+                if let Some(m) = config.parse_name_value_directive(ln, PRETTY_MODE) {\n                     self.pretty_mode = m;\n                 }\n \n-                if !self.pretty_compare_only {\n-                    self.pretty_compare_only = config.parse_pretty_compare_only(ln);\n-                }\n-\n-                if let Some(ab) = config.parse_aux_build(ln) {\n-                    self.aux_builds.push(ab);\n-                }\n-\n-                if let Some(ac) = config.parse_aux_crate(ln) {\n-                    self.aux_crates.push(ac);\n-                }\n-\n-                if let Some(ee) = config.parse_env(ln, \"exec-env\") {\n-                    self.exec_env.push(ee);\n-                }\n-\n-                if let Some(ee) = config.parse_env(ln, \"rustc-env\") {\n-                    self.rustc_env.push(ee);\n-                }\n-\n-                if let Some(ev) = config.parse_name_value_directive(ln, \"unset-rustc-env\") {\n-                    self.unset_rustc_env.push(ev);\n-                }\n-\n-                if let Some(of) = config.parse_forbid_output(ln) {\n-                    self.forbid_output.push(of);\n-                }\n-\n-                if !self.check_test_line_numbers_match {\n-                    self.check_test_line_numbers_match =\n-                        config.parse_check_test_line_numbers_match(ln);\n-                }\n+                config.set_name_directive(ln, PRETTY_COMPARE_ONLY, &mut self.pretty_compare_only);\n+                config.push_name_value_directive(ln, AUX_BUILD, &mut self.aux_builds, |r| {\n+                    r.trim().to_string()\n+                });\n+                config.push_name_value_directive(\n+                    ln,\n+                    AUX_CRATE,\n+                    &mut self.aux_crates,\n+                    Config::parse_aux_crate,\n+                );\n+                config.push_name_value_directive(\n+                    ln,\n+                    EXEC_ENV,\n+                    &mut self.exec_env,\n+                    Config::parse_env,\n+                );\n+                config.push_name_value_directive(\n+                    ln,\n+                    RUSTC_ENV,\n+                    &mut self.rustc_env,\n+                    Config::parse_env,\n+                );\n+                config.push_name_value_directive(\n+                    ln,\n+                    UNSET_RUSTC_ENV,\n+                    &mut self.unset_rustc_env,\n+                    |r| r,\n+                );\n+                config.push_name_value_directive(ln, FORBID_OUTPUT, &mut self.forbid_output, |r| r);\n+                config.set_name_directive(\n+                    ln,\n+                    CHECK_TEST_LINE_NUMBERS_MATCH,\n+                    &mut self.check_test_line_numbers_match,\n+                );\n \n                 self.update_pass_mode(ln, cfg, config);\n                 self.update_fail_mode(ln, config);\n \n-                if !self.ignore_pass {\n-                    self.ignore_pass = config.parse_ignore_pass(ln);\n-                }\n+                config.set_name_directive(ln, IGNORE_PASS, &mut self.ignore_pass);\n \n                 if let Some(rule) = config.parse_custom_normalization(ln, \"normalize-stdout\") {\n                     self.normalize_stdout.push(rule);\n@@ -338,30 +365,28 @@ impl TestProps {\n                     self.normalize_stderr.push(rule);\n                 }\n \n-                if let Some(code) = config.parse_failure_status(ln) {\n+                if let Some(code) = config\n+                    .parse_name_value_directive(ln, FAILURE_STATUS)\n+                    .and_then(|code| code.trim().parse::<i32>().ok())\n+                {\n                     self.failure_status = code;\n                 }\n \n-                if !self.run_rustfix {\n-                    self.run_rustfix = config.parse_run_rustfix(ln);\n-                }\n-\n-                if !self.rustfix_only_machine_applicable {\n-                    self.rustfix_only_machine_applicable =\n-                        config.parse_rustfix_only_machine_applicable(ln);\n-                }\n-\n-                if self.assembly_output.is_none() {\n-                    self.assembly_output = config.parse_assembly_output(ln);\n-                }\n-\n-                if !self.stderr_per_bitwidth {\n-                    self.stderr_per_bitwidth = config.parse_stderr_per_bitwidth(ln);\n-                }\n-\n-                if !self.incremental {\n-                    self.incremental = config.parse_incremental(ln);\n-                }\n+                config.set_name_directive(ln, RUN_RUSTFIX, &mut self.run_rustfix);\n+                config.set_name_directive(\n+                    ln,\n+                    RUSTFIX_ONLY_MACHINE_APPLICABLE,\n+                    &mut self.rustfix_only_machine_applicable,\n+                );\n+                config.set_name_value_directive(\n+                    ln,\n+                    ASSEMBLY_OUTPUT,\n+                    &mut self.assembly_output,\n+                    |r| r.trim().to_string(),\n+                );\n+                config.set_name_directive(ln, STDERR_PER_BITWIDTH, &mut self.stderr_per_bitwidth);\n+                config.set_name_directive(ln, INCREMENTAL, &mut self.incremental);\n+                config.set_name_directive(ln, KNOWN_BUG, &mut self.known_bug);\n             });\n         }\n \n@@ -503,33 +528,12 @@ fn iter_header<R: Read>(testfile: &Path, rdr: R, it: &mut dyn FnMut(Option<&str>\n }\n \n impl Config {\n-    fn parse_should_ice(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"should-ice\")\n-    }\n-    fn parse_error_pattern(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"error-pattern\")\n-    }\n-\n-    fn parse_forbid_output(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"forbid-output\")\n-    }\n-\n-    fn parse_aux_build(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"aux-build\").map(|r| r.trim().to_string())\n-    }\n-\n-    fn parse_aux_crate(&self, line: &str) -> Option<(String, String)> {\n-        self.parse_name_value_directive(line, \"aux-crate\").map(|r| {\n-            let mut parts = r.trim().splitn(2, '=');\n-            (\n-                parts.next().expect(\"missing aux-crate name (e.g. log=log.rs)\").to_string(),\n-                parts.next().expect(\"missing aux-crate value (e.g. log=log.rs)\").to_string(),\n-            )\n-        })\n-    }\n-\n-    fn parse_compile_flags(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"compile-flags\")\n+    fn parse_aux_crate(r: String) -> (String, String) {\n+        let mut parts = r.trim().splitn(2, '=');\n+        (\n+            parts.next().expect(\"missing aux-crate name (e.g. log=log.rs)\").to_string(),\n+            parts.next().expect(\"missing aux-crate value (e.g. log=log.rs)\").to_string(),\n+        )\n     }\n \n     fn parse_and_update_revisions(&self, line: &str, existing: &mut Vec<String>) {\n@@ -544,87 +548,18 @@ impl Config {\n         }\n     }\n \n-    fn parse_run_flags(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"run-flags\")\n-    }\n-\n-    fn parse_force_host(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"force-host\")\n-    }\n-\n-    fn parse_build_aux_docs(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"build-aux-docs\")\n-    }\n-\n-    fn parse_check_stdout(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"check-stdout\")\n-    }\n-\n-    fn parse_check_run_results(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"check-run-results\")\n-    }\n-\n-    fn parse_dont_check_compiler_stdout(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"dont-check-compiler-stdout\")\n-    }\n-\n-    fn parse_dont_check_compiler_stderr(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"dont-check-compiler-stderr\")\n-    }\n-\n-    fn parse_no_prefer_dynamic(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"no-prefer-dynamic\")\n-    }\n-\n-    fn parse_pretty_expanded(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"pretty-expanded\")\n-    }\n-\n-    fn parse_pretty_mode(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"pretty-mode\")\n-    }\n-\n-    fn parse_pretty_compare_only(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"pretty-compare-only\")\n-    }\n-\n-    fn parse_failure_status(&self, line: &str) -> Option<i32> {\n-        match self.parse_name_value_directive(line, \"failure-status\") {\n-            Some(code) => code.trim().parse::<i32>().ok(),\n-            _ => None,\n-        }\n-    }\n-\n-    fn parse_check_test_line_numbers_match(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"check-test-line-numbers-match\")\n-    }\n-\n-    fn parse_ignore_pass(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"ignore-pass\")\n-    }\n-\n-    fn parse_stderr_per_bitwidth(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"stderr-per-bitwidth\")\n-    }\n-\n-    fn parse_assembly_output(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"assembly-output\").map(|r| r.trim().to_string())\n-    }\n-\n-    fn parse_env(&self, line: &str, name: &str) -> Option<(String, String)> {\n-        self.parse_name_value_directive(line, name).map(|nv| {\n-            // nv is either FOO or FOO=BAR\n-            let mut strs: Vec<String> = nv.splitn(2, '=').map(str::to_owned).collect();\n+    fn parse_env(nv: String) -> (String, String) {\n+        // nv is either FOO or FOO=BAR\n+        let mut strs: Vec<String> = nv.splitn(2, '=').map(str::to_owned).collect();\n \n-            match strs.len() {\n-                1 => (strs.pop().unwrap(), String::new()),\n-                2 => {\n-                    let end = strs.pop().unwrap();\n-                    (strs.pop().unwrap(), end)\n-                }\n-                n => panic!(\"Expected 1 or 2 strings, not {}\", n),\n+        match strs.len() {\n+            1 => (strs.pop().unwrap(), String::new()),\n+            2 => {\n+                let end = strs.pop().unwrap();\n+                (strs.pop().unwrap(), end)\n             }\n-        })\n+            n => panic!(\"Expected 1 or 2 strings, not {}\", n),\n+        }\n     }\n \n     fn parse_pp_exact(&self, line: &str, testfile: &Path) -> Option<PathBuf> {\n@@ -736,20 +671,38 @@ impl Config {\n         None\n     }\n \n-    fn parse_run_rustfix(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"run-rustfix\")\n+    fn parse_edition(&self, line: &str) -> Option<String> {\n+        self.parse_name_value_directive(line, \"edition\")\n     }\n \n-    fn parse_rustfix_only_machine_applicable(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"rustfix-only-machine-applicable\")\n+    fn set_name_directive(&self, line: &str, directive: &str, value: &mut bool) {\n+        if !*value {\n+            *value = self.parse_name_directive(line, directive)\n+        }\n     }\n \n-    fn parse_edition(&self, line: &str) -> Option<String> {\n-        self.parse_name_value_directive(line, \"edition\")\n+    fn set_name_value_directive<T>(\n+        &self,\n+        line: &str,\n+        directive: &str,\n+        value: &mut Option<T>,\n+        parse: impl FnOnce(String) -> T,\n+    ) {\n+        if value.is_none() {\n+            *value = self.parse_name_value_directive(line, directive).map(parse);\n+        }\n     }\n \n-    fn parse_incremental(&self, line: &str) -> bool {\n-        self.parse_name_directive(line, \"incremental\")\n+    fn push_name_value_directive<T>(\n+        &self,\n+        line: &str,\n+        directive: &str,\n+        values: &mut Vec<T>,\n+        parse: impl FnOnce(String) -> T,\n+    ) {\n+        if let Some(value) = self.parse_name_value_directive(line, directive).map(parse) {\n+            values.push(value);\n+        }\n     }\n }\n \n@@ -903,7 +856,8 @@ pub fn make_test_description<R: Read>(\n         ignore |= !has_memtag && config.parse_name_directive(ln, \"needs-sanitizer-memtag\");\n         ignore |= config.target_panic == PanicStrategy::Abort\n             && config.parse_name_directive(ln, \"needs-unwind\");\n-        ignore |= config.target == \"wasm32-unknown-unknown\" && config.parse_check_run_results(ln);\n+        ignore |= config.target == \"wasm32-unknown-unknown\"\n+            && config.parse_name_directive(ln, directives::CHECK_RUN_RESULTS);\n         ignore |= config.debugger == Some(Debugger::Cdb) && ignore_cdb(config, ln);\n         ignore |= config.debugger == Some(Debugger::Gdb) && ignore_gdb(config, ln);\n         ignore |= config.debugger == Some(Debugger::Lldb) && ignore_lldb(config, ln);"}, {"sha": "7fe7db0801b47d734750b8317b6edee950881582", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/620b0c5122ee539124ed9442772e4648ac1d8b3f/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=620b0c5122ee539124ed9442772e4648ac1d8b3f", "patch": "@@ -1274,6 +1274,16 @@ impl<'test> TestCx<'test> {\n             self.fatal_proc_rec(\"process did not return an error status\", proc_res);\n         }\n \n+        if self.props.known_bug {\n+            if !expected_errors.is_empty() {\n+                self.fatal_proc_rec(\n+                    \"`known_bug` tests should not have an expected errors\",\n+                    proc_res,\n+                );\n+            }\n+            return;\n+        }\n+\n         // On Windows, keep all '\\' path separators to match the paths reported in the JSON output\n         // from the compiler\n         let os_file_name = self.testpaths.file.display().to_string();\n@@ -1310,6 +1320,7 @@ impl<'test> TestCx<'test> {\n                 }\n \n                 None => {\n+                    // If the test is a known bug, don't require that the error is annotated\n                     if self.is_unexpected_compiler_message(actual_error, expect_help, expect_note) {\n                         self.error(&format!(\n                             \"{}:{}: unexpected {}: '{}'\","}]}