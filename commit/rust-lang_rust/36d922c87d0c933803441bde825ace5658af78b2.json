{"sha": "36d922c87d0c933803441bde825ace5658af78b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZDkyMmM4N2QwYzkzMzgwMzQ0MWJkZTgyNWFjZTU2NThhZjc4YjI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T20:30:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T20:30:11Z"}, "message": "diagnostics", "tree": {"sha": "3c14a27b678cc01a02c04be04784b21b4366e964", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c14a27b678cc01a02c04be04784b21b4366e964"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36d922c87d0c933803441bde825ace5658af78b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36d922c87d0c933803441bde825ace5658af78b2", "html_url": "https://github.com/rust-lang/rust/commit/36d922c87d0c933803441bde825ace5658af78b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36d922c87d0c933803441bde825ace5658af78b2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5896cd51de65cb6f7b8f3a4df85c4eb8886b76e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5896cd51de65cb6f7b8f3a4df85c4eb8886b76e2", "html_url": "https://github.com/rust-lang/rust/commit/5896cd51de65cb6f7b8f3a4df85c4eb8886b76e2"}], "stats": {"total": 90, "additions": 81, "deletions": 9}, "files": [{"sha": "b2a7ce5b44cee6c9e5b999f6bc6d3e6bd9c073a9", "filename": "crates/server/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36d922c87d0c933803441bde825ace5658af78b2/crates%2Fserver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/36d922c87d0c933803441bde825ace5658af78b2/crates%2Fserver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2FCargo.toml?ref=36d922c87d0c933803441bde825ace5658af78b2", "patch": "@@ -14,5 +14,7 @@ crossbeam-channel = \"0.2.4\"\n threadpool = \"1.7.1\"\n flexi_logger = \"0.9.0\"\n log = \"0.4.3\"\n+url = \"1.1.0\"\n+\n libeditor = { path = \"../libeditor\" }\n libanalysis = { path = \"../libanalysis\" }"}, {"sha": "d9681db40d89853c8b11f5f7e2cef7f58689895c", "filename": "crates/server/src/dispatch.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/36d922c87d0c933803441bde825ace5658af78b2/crates%2Fserver%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d922c87d0c933803441bde825ace5658af78b2/crates%2Fserver%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fdispatch.rs?ref=36d922c87d0c933803441bde825ace5658af78b2", "patch": "@@ -136,6 +136,18 @@ pub fn handle_notification<N, F>(not: &mut Option<RawNotification>, f: F) -> Res\n     }\n }\n \n+pub fn send_notification<N>(io: &mut Io, params: N::Params) -> Result<()>\n+    where\n+        N: Notification,\n+        N::Params: Serialize\n+{\n+    io.send(RawMsg::Notification(RawNotification {\n+        method: N::METHOD.to_string(),\n+        params: serde_json::to_value(params)?,\n+    }));\n+    Ok(())\n+}\n+\n \n pub fn unknown_method(io: &mut Io, raw: RawRequest) -> Result<()> {\n     error(io, raw.id, ErrorCode::MethodNotFound, \"unknown method\")"}, {"sha": "1f55e8669e834491520afe57327d7d9e44bf33d1", "filename": "crates/server/src/handlers.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/36d922c87d0c933803441bde825ace5658af78b2/crates%2Fserver%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d922c87d0c933803441bde825ace5658af78b2/crates%2Fserver%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fhandlers.rs?ref=36d922c87d0c933803441bde825ace5658af78b2", "patch": "@@ -1,6 +1,8 @@\n-use languageserver_types::{Range, Position};\n+use url::Url;\n+use languageserver_types::{Range, Position, Diagnostic, DiagnosticSeverity};\n use libanalysis::World;\n use libeditor::{self, LineIndex, LineCol, TextRange, TextUnit};\n+\n use {req, Result, FilePath};\n \n pub fn handle_syntax_tree(\n@@ -29,6 +31,23 @@ pub fn handle_extend_selection(\n     Ok(req::ExtendSelectionResult { selections })\n }\n \n+pub fn publish_diagnostics(world: World, uri: Url) -> Result<req::PublishDiagnosticsParams> {\n+    let path = uri.file_path()?;\n+    let file = world.file_syntax(&path)?;\n+    let line_index = world.file_line_index(&path)?;\n+    let diagnostics = libeditor::diagnostics(&file)\n+        .into_iter()\n+        .map(|d| Diagnostic {\n+            range: to_vs_range(&line_index, d.range),\n+            severity: Some(DiagnosticSeverity::Error),\n+            code: None,\n+            source: Some(\"libsyntax2\".to_string()),\n+            message: d.msg,\n+            related_information: None,\n+        }).collect();\n+    Ok(req::PublishDiagnosticsParams { uri, diagnostics })\n+}\n+\n \n fn to_text_range(line_index: &LineIndex, range: Range) -> TextRange {\n     TextRange::from_to("}, {"sha": "6018350e3d77715c07f0224fd25c8066982559e6", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 46, "deletions": 7, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/36d922c87d0c933803441bde825ace5658af78b2/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d922c87d0c933803441bde825ace5658af78b2/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=36d922c87d0c933803441bde825ace5658af78b2", "patch": "@@ -11,6 +11,7 @@ extern crate crossbeam_channel;\n extern crate threadpool;\n #[macro_use]\n extern crate log;\n+extern crate url;\n extern crate flexi_logger;\n extern crate libeditor;\n extern crate libanalysis;\n@@ -31,7 +32,7 @@ use languageserver_types::{TextDocumentItem, VersionedTextDocumentIdentifier, Te\n \n use ::{\n     io::{Io, RawMsg},\n-    handlers::{handle_syntax_tree, handle_extend_selection},\n+    handlers::{handle_syntax_tree, handle_extend_selection, publish_diagnostics},\n };\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n@@ -209,6 +210,21 @@ fn main_loop(\n                 dispatch::handle_notification::<req::DidOpenTextDocument, _>(&mut not, |params| {\n                     let path = params.text_document.file_path()?;\n                     world.change_overlay(path, Some(params.text_document.text));\n+                    let world = world.snapshot();\n+                    let sender = sender.clone();\n+                    let uri = params.text_document.uri;\n+                    pool.execute(move || {\n+                        match publish_diagnostics(world, uri) {\n+                            Err(e) => {\n+                                error!(\"failed to compute diagnostics: {:?}\", e)\n+                            }\n+                            Ok(params) => {\n+                                sender.send(Box::new(|io: &mut Io| {\n+                                    dispatch::send_notification::<req::PublishDiagnostics>(io, params)\n+                                }))\n+                            }\n+                        }\n+                    });\n                     Ok(())\n                 })?;\n                 dispatch::handle_notification::<req::DidChangeTextDocument, _>(&mut not, |mut params| {\n@@ -217,11 +233,30 @@ fn main_loop(\n                         .ok_or_else(|| format_err!(\"empty changes\"))?\n                         .text;\n                     world.change_overlay(path, Some(text));\n+                    let world = world.snapshot();\n+                    let sender = sender.clone();\n+                    let uri = params.text_document.uri;\n+                    pool.execute(move || {\n+                        match publish_diagnostics(world, uri) {\n+                            Err(e) => {\n+                                error!(\"failed to compute diagnostics: {:?}\", e)\n+                            }\n+                            Ok(params) => {\n+                                sender.send(Box::new(|io: &mut Io| {\n+                                    dispatch::send_notification::<req::PublishDiagnostics>(io, params)\n+                                }))\n+                            }\n+                        }\n+                    });\n                     Ok(())\n                 })?;\n                 dispatch::handle_notification::<req::DidCloseTextDocument, _>(&mut not, |params| {\n                     let path = params.text_document.file_path()?;\n                     world.change_overlay(path, None);\n+                    dispatch::send_notification::<req::PublishDiagnostics>(io, req::PublishDiagnosticsParams {\n+                        uri: params.text_document.uri,\n+                        diagnostics: Vec::new(),\n+                    })?;\n                     Ok(())\n                 })?;\n \n@@ -252,21 +287,25 @@ trait FilePath {\n \n impl FilePath for TextDocumentItem {\n     fn file_path(&self) -> Result<PathBuf> {\n-        self.uri.to_file_path()\n-            .map_err(|()| format_err!(\"invalid uri: {}\", self.uri))\n+        self.uri.file_path()\n     }\n }\n \n impl FilePath for VersionedTextDocumentIdentifier {\n     fn file_path(&self) -> Result<PathBuf> {\n-        self.uri.to_file_path()\n-            .map_err(|()| format_err!(\"invalid uri: {}\", self.uri))\n+        self.uri.file_path()\n     }\n }\n \n impl FilePath for TextDocumentIdentifier {\n     fn file_path(&self) -> Result<PathBuf> {\n-        self.uri.to_file_path()\n-            .map_err(|()| format_err!(\"invalid uri: {}\", self.uri))\n+        self.uri.file_path()\n+    }\n+}\n+\n+impl FilePath for ::url::Url {\n+    fn file_path(&self) -> Result<PathBuf> {\n+        self.to_file_path()\n+            .map_err(|()| format_err!(\"invalid uri: {}\", self))\n     }\n }"}, {"sha": "64e7ef4ae51c1b09d17dabe3d934d9718e1a3eea", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/36d922c87d0c933803441bde825ace5658af78b2/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d922c87d0c933803441bde825ace5658af78b2/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=36d922c87d0c933803441bde825ace5658af78b2", "patch": "@@ -2,7 +2,7 @@ use languageserver_types::{TextDocumentIdentifier, Range};\n \n pub use languageserver_types::{\n     request::*, notification::*,\n-    InitializeResult,\n+    InitializeResult, PublishDiagnosticsParams\n };\n \n pub enum SyntaxTree {}"}]}