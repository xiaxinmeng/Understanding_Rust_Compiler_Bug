{"sha": "8aaaf198e31678d5036eae5acd32e71a208df828", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYWFmMTk4ZTMxNjc4ZDUwMzZlYWU1YWNkMzJlNzFhMjA4ZGY4Mjg=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-05T21:26:47Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-07-05T21:26:47Z"}, "message": "Use `utils::sugg` in methods lints", "tree": {"sha": "dd6dbd19d52253ca18902a0f875bc878b5827fb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd6dbd19d52253ca18902a0f875bc878b5827fb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8aaaf198e31678d5036eae5acd32e71a208df828", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXfCZRAAoJEF5CfHlMukXorWsP/3xyrc998rWOC5bhbDrX26lE\njuVx35+GTLBMgYPlK3vyk/0f5xiCB+BEiGqdaUEGsKGiFK2vr+6SVOIns2kGU54Z\najc5+d+ooz/SiDI/9YBQZ7jBoXKGBHQu7PgYPBbdrmbPggBMpHcWTE172+PivL9p\nbunZu0r3eSDyqyOJIoApH5SKYKSYF393X4CRjYnY6QYiv+9D1OTN0gAOSWKmodNA\nAt8rA6vG8aN90vOiOjM4GuStHcIB+Qa2P+jx6usau0Tpp1Nrel4xx0vCDyH6dbzs\nFtWp2sTvqHXzVqdC0RjcMeImx0LaimKsD1uTWAQ4D+wFBEqSF7HjRWHEAKeiMAOS\nJYxS4u5QZpjapm1l15jhXb48X8WAkQJk5TdNfKhnlP56fBdaZFmHqN4zzGjYli+J\n5PGzGLrz9raIFKug8/K0CcuCDSmwDUeq9de1EfW330V/nE7BUzuUKBS6teSu6OSj\nGoak+GonkScXtDdBxUjmKjQJmHX/oWVc9yizYDkCgyvxUAfST5MKuiU9QRNx+M2I\nNo0hnCZk35cfndMT8CIgt2XPUgzSTjXOT10eEPkGLXaKuDGy5A9xwqmOAYN6wEQr\nrZkBGlSDEs5rAqCYZl5yY3YTPMSg94U6eWHavLOUGUTa16yHPR/Mj/yGOxCLMUmz\nH9eB+vuovy6zSHnYTJ6n\n=yEAc\n-----END PGP SIGNATURE-----", "payload": "tree dd6dbd19d52253ca18902a0f875bc878b5827fb2\nparent c5e91e70d03ace2c9647e509540a5b6b88aaf801\nauthor mcarton <cartonmartin+git@gmail.com> 1467754007 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467754007 +0200\n\nUse `utils::sugg` in methods lints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8aaaf198e31678d5036eae5acd32e71a208df828", "html_url": "https://github.com/rust-lang/rust/commit/8aaaf198e31678d5036eae5acd32e71a208df828", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8aaaf198e31678d5036eae5acd32e71a208df828/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5e91e70d03ace2c9647e509540a5b6b88aaf801", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e91e70d03ace2c9647e509540a5b6b88aaf801", "html_url": "https://github.com/rust-lang/rust/commit/c5e91e70d03ace2c9647e509540a5b6b88aaf801"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "f70ec4eac9f839f6b7a462895b23ece32fb08425", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8aaaf198e31678d5036eae5acd32e71a208df828/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8aaaf198e31678d5036eae5acd32e71a208df828/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=8aaaf198e31678d5036eae5acd32e71a208df828", "patch": "@@ -11,10 +11,11 @@ use std::fmt;\n use syntax::codemap::Span;\n use syntax::ptr::P;\n use utils::{get_trait_def_id, implements_trait, in_external_macro, in_macro, match_path, match_trait_method,\n-            match_type, method_chain_args, return_ty, same_tys, snippet, snippet_opt, span_lint,\n+            match_type, method_chain_args, return_ty, same_tys, snippet, span_lint,\n             span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth};\n use utils::MethodArgs;\n use utils::paths;\n+use utils::sugg;\n \n #[derive(Clone)]\n pub struct Pass;\n@@ -628,8 +629,8 @@ fn lint_clone_double_ref(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, ty\n                                expr.span,\n                                \"using `clone` on a double-reference; \\\n                                 this will copy the reference instead of cloning the inner type\",\n-                               |db| if let Some(snip) = snippet_opt(cx, arg.span) {\n-                                   db.span_suggestion(expr.span, \"try dereferencing it\", format!(\"(*{}).clone()\", snip));\n+                               |db| if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n+                                   db.span_suggestion(expr.span, \"try dereferencing it\", format!(\"({}).clone()\", snip.deref()));\n                                });\n         }\n     }\n@@ -641,14 +642,13 @@ fn lint_extend(cx: &LateContext, expr: &hir::Expr, args: &MethodArgs) {\n         return;\n     }\n     let arg_ty = cx.tcx.expr_ty(&args[1]);\n-    if let Some((span, r)) = derefs_to_slice(cx, &args[1], &arg_ty) {\n+    if let Some(slice) = derefs_to_slice(cx, &args[1], &arg_ty) {\n         span_lint_and_then(cx, EXTEND_FROM_SLICE, expr.span, \"use of `extend` to extend a Vec by a slice\", |db| {\n             db.span_suggestion(expr.span,\n                                \"try this\",\n-                               format!(\"{}.extend_from_slice({}{})\",\n+                               format!(\"{}.extend_from_slice({})\",\n                                        snippet(cx, args[0].span, \"_\"),\n-                                       r,\n-                                       snippet(cx, span, \"_\")));\n+                                       slice));\n         });\n     }\n }\n@@ -695,7 +695,7 @@ fn lint_iter_nth(cx: &LateContext, expr: &hir::Expr, iter_args: &MethodArgs, is_\n     );\n }\n \n-fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: &ty::Ty) -> Option<(Span, &'static str)> {\n+fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: &ty::Ty) -> Option<sugg::Sugg<'static>> {\n     fn may_slice(cx: &LateContext, ty: &ty::Ty) -> bool {\n         match ty.sty {\n             ty::TySlice(_) => true,\n@@ -706,19 +706,22 @@ fn derefs_to_slice(cx: &LateContext, expr: &hir::Expr, ty: &ty::Ty) -> Option<(S\n             _ => false,\n         }\n     }\n+\n     if let hir::ExprMethodCall(name, _, ref args) = expr.node {\n         if &name.node.as_str() == &\"iter\" && may_slice(cx, &cx.tcx.expr_ty(&args[0])) {\n-            Some((args[0].span, \"&\"))\n+            sugg::Sugg::hir_opt(cx, &*args[0]).map(|sugg| {\n+                sugg.addr()\n+            })\n         } else {\n             None\n         }\n     } else {\n         match ty.sty {\n-            ty::TySlice(_) => Some((expr.span, \"\")),\n+            ty::TySlice(_) => sugg::Sugg::hir_opt(cx, expr),\n             ty::TyRef(_, ty::TypeAndMut { ty: ref inner, .. }) |\n             ty::TyBox(ref inner) => {\n                 if may_slice(cx, inner) {\n-                    Some((expr.span, \"\"))\n+                    sugg::Sugg::hir_opt(cx, expr)\n                 } else {\n                     None\n                 }"}]}