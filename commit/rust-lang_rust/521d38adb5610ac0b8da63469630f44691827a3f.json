{"sha": "521d38adb5610ac0b8da63469630f44691827a3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMWQzOGFkYjU2MTBhYzBiOGRhNjM0Njk2MzBmNDQ2OTE4MjdhM2Y=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-13T15:17:50Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-06-19T07:52:36Z"}, "message": "Update to `TyCtxt` lifetime changes", "tree": {"sha": "b8fa8deb9e43a680f6869defe8f9eb799363c804", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8fa8deb9e43a680f6869defe8f9eb799363c804"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/521d38adb5610ac0b8da63469630f44691827a3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/521d38adb5610ac0b8da63469630f44691827a3f", "html_url": "https://github.com/rust-lang/rust/commit/521d38adb5610ac0b8da63469630f44691827a3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/521d38adb5610ac0b8da63469630f44691827a3f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a18d99abaafed676a3bf6bb0ccab37fd76ce931d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a18d99abaafed676a3bf6bb0ccab37fd76ce931d", "html_url": "https://github.com/rust-lang/rust/commit/a18d99abaafed676a3bf6bb0ccab37fd76ce931d"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "98598f0ca306c3452dc982ea8e77310abbe94943", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/521d38adb5610ac0b8da63469630f44691827a3f/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/521d38adb5610ac0b8da63469630f44691827a3f/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=521d38adb5610ac0b8da63469630f44691827a3f", "patch": "@@ -21,10 +21,10 @@ use super::{\n };\n use crate::const_eval::{CompileTimeInterpreter, CompileTimeEvalContext};\n \n-struct InternVisitor<'rt, 'a: 'rt, 'mir: 'rt, 'tcx: 'a+'rt+'mir> {\n+struct InternVisitor<'rt, 'mir: 'rt, 'tcx: 'rt + 'mir> {\n     /// previously encountered safe references\n     ref_tracking: &'rt mut RefTracking<(MPlaceTy<'tcx>, Mutability, InternMode)>,\n-    ecx: &'rt mut CompileTimeEvalContext<'a, 'mir, 'tcx>,\n+    ecx: &'rt mut CompileTimeEvalContext<'mir, 'tcx>,\n     param_env: ParamEnv<'tcx>,\n     /// The root node of the value that we're looking at. This field is never mutated and only used\n     /// for sanity assertions that will ICE when `const_qualif` screws up.\n@@ -58,7 +58,7 @@ enum InternMode {\n /// into the memory of other constants or statics\n struct IsStaticOrFn;\n \n-impl<'rt, 'a, 'mir, 'tcx> InternVisitor<'rt, 'a, 'mir, 'tcx> {\n+impl<'rt, 'mir, 'tcx> InternVisitor<'rt, 'mir, 'tcx> {\n     /// Intern an allocation without looking at its children\n     fn intern_shallow(\n         &mut self,\n@@ -103,15 +103,15 @@ impl<'rt, 'a, 'mir, 'tcx> InternVisitor<'rt, 'a, 'mir, 'tcx> {\n     }\n }\n \n-impl<'rt, 'a, 'mir, 'tcx>\n-    ValueVisitor<'a, 'mir, 'tcx, CompileTimeInterpreter<'a, 'mir, 'tcx>>\n+impl<'rt, 'mir, 'tcx>\n+    ValueVisitor<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>>\n for\n-    InternVisitor<'rt, 'a, 'mir, 'tcx>\n+    InternVisitor<'rt, 'mir, 'tcx>\n {\n     type V = MPlaceTy<'tcx>;\n \n     #[inline(always)]\n-    fn ecx(&self) -> &CompileTimeEvalContext<'a, 'mir, 'tcx> {\n+    fn ecx(&self) -> &CompileTimeEvalContext<'mir, 'tcx> {\n         &self.ecx\n     }\n \n@@ -220,8 +220,8 @@ for\n \n /// Figure out the mutability of the allocation.\n /// Mutable if it has interior mutability *anywhere* in the type.\n-fn intern_mutability<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+fn intern_mutability<'tcx>(\n+    tcx: TyCtxt<'tcx, 'tcx>,\n     param_env: ParamEnv<'tcx>,\n     ty: Ty<'tcx>,\n     span: Span,\n@@ -236,7 +236,7 @@ fn intern_mutability<'a, 'tcx>(\n }\n \n pub fn intern_const_alloc_recursive(\n-    ecx: &mut CompileTimeEvalContext<'a, 'mir, 'tcx>,\n+    ecx: &mut CompileTimeEvalContext<'mir, 'tcx>,\n     def_id: DefId,\n     ret: MPlaceTy<'tcx>,\n     // FIXME(oli-obk): can we scrap the param env? I think we can, the final value of a const eval"}]}