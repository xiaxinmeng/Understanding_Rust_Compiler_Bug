{"sha": "640797fdd700ab30addcd3497621422989f9826f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MDc5N2ZkZDcwMGFiMzBhZGRjZDM0OTc2MjE0MjI5ODlmOTgyNmY=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-10T16:31:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-22T18:56:38Z"}, "message": "Invert flow in impl HashStable of Span.", "tree": {"sha": "4949c09099ccae4a57ddec922a94ecd660ee2fce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4949c09099ccae4a57ddec922a94ecd660ee2fce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/640797fdd700ab30addcd3497621422989f9826f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/640797fdd700ab30addcd3497621422989f9826f", "html_url": "https://github.com/rust-lang/rust/commit/640797fdd700ab30addcd3497621422989f9826f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/640797fdd700ab30addcd3497621422989f9826f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1de5fdb5babf74f729b008585a8aaf16110bb1fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1de5fdb5babf74f729b008585a8aaf16110bb1fd", "html_url": "https://github.com/rust-lang/rust/commit/1de5fdb5babf74f729b008585a8aaf16110bb1fd"}], "stats": {"total": 35, "additions": 22, "deletions": 13}, "files": [{"sha": "da45f93b40c639d4d575e284cd97aa1a00fc64e6", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/640797fdd700ab30addcd3497621422989f9826f/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640797fdd700ab30addcd3497621422989f9826f/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=640797fdd700ab30addcd3497621422989f9826f", "patch": "@@ -281,7 +281,7 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for ast::NodeId {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for Span {\n+impl<'a> syntax_pos::StableHashingContextLike for StableHashingContext<'a> {\n     /// Hashes a span in a stable way. We can't directly hash the span's `BytePos`\n     /// fields (that would be similar to hashing pointers, since those are just\n     /// offsets into the `SourceMap`). Instead, we hash the (file name, line, column)\n@@ -291,25 +291,25 @@ impl<'a> HashStable<StableHashingContext<'a>> for Span {\n     /// codepoint offsets. For the purpose of the hash that's sufficient.\n     /// Also, hashing filenames is expensive so we avoid doing it twice when the\n     /// span starts and ends in the same file, which is almost always the case.\n-    fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n+    fn hash_stable_span(&mut self, span: &Span, hasher: &mut StableHasher) {\n         const TAG_VALID_SPAN: u8 = 0;\n         const TAG_INVALID_SPAN: u8 = 1;\n         const TAG_EXPANSION: u8 = 0;\n         const TAG_NO_EXPANSION: u8 = 1;\n \n-        if !hcx.hash_spans {\n+        if !self.hash_spans {\n             return\n         }\n \n-        if *self == DUMMY_SP {\n+        if *span == DUMMY_SP {\n             return std_hash::Hash::hash(&TAG_INVALID_SPAN, hasher);\n         }\n \n         // If this is not an empty or invalid span, we want to hash the last\n         // position that belongs to it, as opposed to hashing the first\n         // position past it.\n-        let span = self.data();\n-        let (file_lo, line_lo, col_lo) = match hcx.source_map()\n+        let span = span.data();\n+        let (file_lo, line_lo, col_lo) = match self.source_map()\n                                                   .byte_pos_to_line_and_col(span.lo) {\n             Some(pos) => pos,\n             None => {\n@@ -333,9 +333,9 @@ impl<'a> HashStable<StableHashingContext<'a>> for Span {\n         std_hash::Hash::hash(&line_col_len, hasher);\n \n         if span.ctxt == SyntaxContext::root() {\n-            TAG_NO_EXPANSION.hash_stable(hcx, hasher);\n+            TAG_NO_EXPANSION.hash_stable(self, hasher);\n         } else {\n-            TAG_EXPANSION.hash_stable(hcx, hasher);\n+            TAG_EXPANSION.hash_stable(self, hasher);\n \n             // Since the same expansion context is usually referenced many\n             // times, we cache a stable hash of it and hash that instead of\n@@ -352,14 +352,14 @@ impl<'a> HashStable<StableHashingContext<'a>> for Span {\n                 }\n \n                 let mut hasher = StableHasher::new();\n-                expn_id.expn_data().hash_stable(hcx, &mut hasher);\n+                expn_id.expn_data().hash_stable(self, &mut hasher);\n                 let sub_hash: Fingerprint = hasher.finish();\n                 let sub_hash = sub_hash.to_smaller_hash();\n                 cache.borrow_mut().insert(expn_id, sub_hash);\n                 sub_hash\n             });\n \n-            sub_hash.hash_stable(hcx, hasher);\n+            sub_hash.hash_stable(self, hasher);\n         }\n     }\n }"}, {"sha": "581653f5bbc81587ab3b75a44b0186b9cd3c5525", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/640797fdd700ab30addcd3497621422989f9826f/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640797fdd700ab30addcd3497621422989f9826f/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=640797fdd700ab30addcd3497621422989f9826f", "patch": "@@ -17,7 +17,6 @@ use crate::hir::def_id::{DefId, CrateNum, CRATE_DEF_INDEX};\n use smallvec::SmallVec;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n \n-impl<'ctx> syntax_pos::StableHashingContextLike for StableHashingContext<'ctx> {}\n impl<'ctx> syntax::StableHashingContextLike for StableHashingContext<'ctx> {}\n impl<'ctx> rustc_target::StableHashingContextLike for StableHashingContext<'ctx> {}\n "}, {"sha": "25391ad5ce6f442945347912f8716a2fced60856", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/640797fdd700ab30addcd3497621422989f9826f/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640797fdd700ab30addcd3497621422989f9826f/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=640797fdd700ab30addcd3497621422989f9826f", "patch": "@@ -34,7 +34,7 @@ pub use symbol::{Symbol, sym};\n mod analyze_source_file;\n pub mod fatal_error;\n \n-use rustc_data_structures::stable_hasher::StableHasher;\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::{Lrc, Lock};\n \n use std::borrow::Cow;\n@@ -245,6 +245,14 @@ impl Ord for Span {\n     }\n }\n \n+impl<CTX> HashStable<CTX> for Span\n+    where CTX: StableHashingContextLike\n+{\n+    fn hash_stable(&self, ctx: &mut CTX, hasher: &mut StableHasher) {\n+        ctx.hash_stable_span(self, hasher)\n+    }\n+}\n+\n /// A collection of spans. Spans have two orthogonal attributes:\n ///\n /// - They can be *primary spans*. In this case they are the locus of\n@@ -1566,4 +1574,6 @@ fn lookup_line(lines: &[BytePos], pos: BytePos) -> isize {\n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n /// instead of implementing everything in librustc.\n-pub trait StableHashingContextLike {}\n+pub trait StableHashingContextLike {\n+    fn hash_stable_span(&mut self, span: &Span, hasher: &mut StableHasher);\n+}"}]}