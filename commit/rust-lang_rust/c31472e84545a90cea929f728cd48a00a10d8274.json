{"sha": "c31472e84545a90cea929f728cd48a00a10d8274", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMTQ3MmU4NDU0NWE5MGNlYTkyOWY3MjhjZDQ4YTAwYTEwZDgyNzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-06T18:20:44Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-06T18:42:20Z"}, "message": "Refactor the typeck::writeback AST walk\n\nAll visitors take a wb_ctxt now instead of some taking a fn_ctxt and some\ntaking an ignore flag.", "tree": {"sha": "a63acf1512e723f6c8648785344fcbecdbc10ea8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a63acf1512e723f6c8648785344fcbecdbc10ea8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c31472e84545a90cea929f728cd48a00a10d8274", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c31472e84545a90cea929f728cd48a00a10d8274", "html_url": "https://github.com/rust-lang/rust/commit/c31472e84545a90cea929f728cd48a00a10d8274", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c31472e84545a90cea929f728cd48a00a10d8274/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c9c4cb575c7e8fae0ffdb96f79071d1610413ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c9c4cb575c7e8fae0ffdb96f79071d1610413ed", "html_url": "https://github.com/rust-lang/rust/commit/0c9c4cb575c7e8fae0ffdb96f79071d1610413ed"}], "stats": {"total": 95, "additions": 51, "deletions": 44}, "files": [{"sha": "500817ea30741f4bdf196d2e788528f641cf3e55", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 51, "deletions": 44, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/c31472e84545a90cea929f728cd48a00a10d8274/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31472e84545a90cea929f728cd48a00a10d8274/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=c31472e84545a90cea929f728cd48a00a10d8274", "patch": "@@ -1055,65 +1055,72 @@ mod writeback {\n         }\n         write::ty(fcx.ccx.tcx, id, tup(new_substs_opt, new_ty));\n     }\n-    fn visit_stmt_pre(@fn_ctxt fcx, &@ast::stmt s) {\n-        resolve_type_vars_for_node(fcx, s.span, ty::stmt_node_id(s));\n+\n+    type wb_ctxt = rec(@fn_ctxt fcx,\n+                       // A flag to ignore contained items and lambdas\n+                       mutable bool ignore);\n+\n+    fn visit_stmt_pre(@wb_ctxt wbcx, &@ast::stmt s) {\n+        resolve_type_vars_for_node(wbcx.fcx, s.span, ty::stmt_node_id(s));\n     }\n-    fn visit_expr_pre(@fn_ctxt fcx, &@ast::expr e) {\n-        resolve_type_vars_for_node(fcx, e.span, e.id);\n+    fn visit_expr_pre(@wb_ctxt wbcx, &@ast::expr e) {\n+        resolve_type_vars_for_node(wbcx.fcx, e.span, e.id);\n     }\n-    fn visit_block_pre(@fn_ctxt fcx, &ast::block b) {\n-        resolve_type_vars_for_node(fcx, b.span, b.node.id);\n+    fn visit_block_pre(@wb_ctxt wbcx, &ast::block b) {\n+        resolve_type_vars_for_node(wbcx.fcx, b.span, b.node.id);\n     }\n-    fn visit_pat_pre(@fn_ctxt fcx, &@ast::pat p) {\n-        resolve_type_vars_for_node(fcx, p.span, p.id);\n+    fn visit_pat_pre(@wb_ctxt wbcx, &@ast::pat p) {\n+        resolve_type_vars_for_node(wbcx.fcx, p.span, p.id);\n     }\n-    fn visit_local_pre(@fn_ctxt fcx, &@ast::local l) {\n-        auto var_id = lookup_local(fcx, l.span, l.node.id);\n+    fn visit_local_pre(@wb_ctxt wbcx, &@ast::local l) {\n+        auto var_id = lookup_local(wbcx.fcx, l.span, l.node.id);\n         auto fix_rslt =\n-            ty::unify::resolve_type_var(fcx.ccx.tcx, fcx.var_bindings,\n+            ty::unify::resolve_type_var(wbcx.fcx.ccx.tcx,\n+                                        wbcx.fcx.var_bindings,\n                                         var_id);\n         alt (fix_rslt) {\n             case (fix_ok(?lty)) {\n-                write::ty_only(fcx.ccx.tcx, l.node.id, lty);\n+                write::ty_only(wbcx.fcx.ccx.tcx, l.node.id, lty);\n             }\n             case (fix_err(_)) {\n-                fcx.ccx.tcx.sess.span_fatal(l.span,\n-                                          \"cannot determine a type \\\n-                                           for this local variable\");\n+                wbcx.fcx.ccx.tcx.sess.span_fatal(l.span,\n+                                                 \"cannot determine a type \\\n+                                                  for this local variable\");\n             }\n         }\n     }\n+    fn visit_item_pre(@wb_ctxt wbcx, &@ast::item item) {\n+        wbcx.ignore = true;\n+    }\n+    fn visit_item_post(@wb_ctxt wbcx, &@ast::item item) {\n+        wbcx.ignore = false;\n+    }\n+    fn visit_fn_pre(@wb_ctxt wbcx, &ast::_fn f,\n+                    &vec[ast::ty_param] tps, &span sp,\n+                    &ast::fn_ident i, ast::node_id d) {\n+        wbcx.ignore = true;\n+    }\n+    fn visit_fn_post(@wb_ctxt wbcx, &ast::_fn f,\n+                     &vec[ast::ty_param] tps, &span sp,\n+                     &ast::fn_ident i, ast::node_id d) {\n+        wbcx.ignore = false;\n+    }\n+    fn keep_going(@wb_ctxt wbcx) -> bool { ret !wbcx.ignore; }\n+\n     fn resolve_type_vars_in_block(&@fn_ctxt fcx, &ast::block block) {\n-        // A trick to ignore any contained items and lambdas.\n-        auto ignore = @mutable false;\n-        fn visit_item_pre(@mutable bool ignore, &@ast::item item) {\n-            *ignore = true;\n-        }\n-        fn visit_item_post(@mutable bool ignore, &@ast::item item) {\n-            *ignore = false;\n-        }\n-        fn visit_fn_pre(@mutable bool ignore, &ast::_fn f,\n-                        &vec[ast::ty_param] tps, &span sp,\n-                        &ast::fn_ident i, ast::node_id d) {\n-            *ignore = true;\n-        }\n-        fn visit_fn_post(@mutable bool ignore, &ast::_fn f,\n-                         &vec[ast::ty_param] tps, &span sp,\n-                         &ast::fn_ident i, ast::node_id d) {\n-            *ignore = false;\n-        }\n-        fn keep_going(@mutable bool ignore) -> bool { ret !*ignore; }\n+        auto wbcx = @rec(fcx = fcx,\n+                        mutable ignore = false);\n         auto visit =\n-            rec(keep_going=bind keep_going(ignore),\n-                visit_item_pre=bind visit_item_pre(ignore, _),\n-                visit_item_post=bind visit_item_post(ignore, _),\n-                visit_fn_pre=bind visit_fn_pre(ignore, _, _, _, _, _),\n-                visit_fn_post=bind visit_fn_post(ignore, _, _, _, _, _),\n-                visit_stmt_pre=bind visit_stmt_pre(fcx, _),\n-                visit_expr_pre=bind visit_expr_pre(fcx, _),\n-                visit_block_pre=bind visit_block_pre(fcx, _),\n-                visit_pat_pre=bind visit_pat_pre(fcx, _),\n-                visit_local_pre=bind visit_local_pre(fcx, _)\n+            rec(keep_going=bind keep_going(wbcx),\n+                visit_item_pre=bind visit_item_pre(wbcx, _),\n+                visit_item_post=bind visit_item_post(wbcx, _),\n+                visit_fn_pre=bind visit_fn_pre(wbcx, _, _, _, _, _),\n+                visit_fn_post=bind visit_fn_post(wbcx, _, _, _, _, _),\n+                visit_stmt_pre=bind visit_stmt_pre(wbcx, _),\n+                visit_expr_pre=bind visit_expr_pre(wbcx, _),\n+                visit_block_pre=bind visit_block_pre(wbcx, _),\n+                visit_pat_pre=bind visit_pat_pre(wbcx, _),\n+                visit_local_pre=bind visit_local_pre(wbcx, _)\n                 with walk::default_visitor());\n         walk::walk_block(visit, block);\n     }"}]}