{"sha": "4349eaed8417a39eb54ea952ce86c7c585be6e90", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNDllYWVkODQxN2EzOWViNTRlYTk1MmNlODZjN2M1ODViZTZlOTA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-05T14:09:32Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-07-05T14:09:32Z"}, "message": "Don't thread the local crate number through the session\n\nIt's a constant, anyway.", "tree": {"sha": "ef1855443643956dfb09cb4894ebbc10a993018f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef1855443643956dfb09cb4894ebbc10a993018f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4349eaed8417a39eb54ea952ce86c7c585be6e90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4349eaed8417a39eb54ea952ce86c7c585be6e90", "html_url": "https://github.com/rust-lang/rust/commit/4349eaed8417a39eb54ea952ce86c7c585be6e90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4349eaed8417a39eb54ea952ce86c7c585be6e90/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fd6fdea93fca19f168526943c177f942212cbc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fd6fdea93fca19f168526943c177f942212cbc6", "html_url": "https://github.com/rust-lang/rust/commit/6fd6fdea93fca19f168526943c177f942212cbc6"}], "stats": {"total": 20, "additions": 7, "deletions": 13}, "files": [{"sha": "ce422742b45a7d23b28b9c618aeb308952fe40fa", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4349eaed8417a39eb54ea952ce86c7c585be6e90/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4349eaed8417a39eb54ea952ce86c7c585be6e90/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=4349eaed8417a39eb54ea952ce86c7c585be6e90", "patch": "@@ -344,11 +344,8 @@ fn build_session_options(str binary, getopts::match match, str binary_dir) ->\n fn build_session(@session::options sopts) -> session::session {\n     auto target_cfg = build_target_config();\n     auto crate_cache = syntax::_std::new_int_hash[session::crate_metadata]();\n-    auto target_crate_num = 0;\n-    auto sess =\n-        session::session(target_crate_num, target_cfg, sopts, crate_cache, [],\n+    ret session::session(target_cfg, sopts, crate_cache, [],\n                          [], [], codemap::new_codemap(), 0u);\n-    ret sess;\n }\n \n fn parse_pretty(session::session sess, &str name) -> pp_mode {"}, {"sha": "3dc947477b8859a383234989b9bd414832744290", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4349eaed8417a39eb54ea952ce86c7c585be6e90/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4349eaed8417a39eb54ea952ce86c7c585be6e90/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=4349eaed8417a39eb54ea952ce86c7c585be6e90", "patch": "@@ -41,8 +41,7 @@ type options =\n \n type crate_metadata = rec(str name, vec[u8] data);\n \n-obj session(ast::crate_num cnum,\n-            @config targ_cfg,\n+obj session(@config targ_cfg,\n             @options opts,\n             map::hashmap[int, crate_metadata] crates,\n             mutable vec[str] used_crate_files,\n@@ -52,7 +51,6 @@ obj session(ast::crate_num cnum,\n             mutable uint err_count) {\n     fn get_targ_cfg() -> @config { ret targ_cfg; }\n     fn get_opts() -> @options { ret opts; }\n-    fn get_targ_crate_num() -> ast::crate_num { ret cnum; }\n     fn span_fatal(span sp, str msg) -> ! {\n         // FIXME: Use constants, but rustboot doesn't know how to export them.\n         codemap::emit_error(some(sp), msg, cm);"}, {"sha": "aa8da0a76831de1c400d2712f893127e345daaae", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4349eaed8417a39eb54ea952ce86c7c585be6e90/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4349eaed8417a39eb54ea952ce86c7c585be6e90/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4349eaed8417a39eb54ea952ce86c7c585be6e90", "patch": "@@ -4816,7 +4816,7 @@ fn trans_external_path(&@block_ctxt cx, &ast::def_id did,\n fn lval_generic_fn(&@block_ctxt cx, &ty::ty_param_count_and_ty tpt,\n                    &ast::def_id fn_id, ast::node_id id) -> lval_result {\n     auto lv;\n-    if (cx.fcx.lcx.ccx.sess.get_targ_crate_num() == fn_id._0) {\n+    if (fn_id._0 == ast::local_crate) {\n         // Internal reference.\n         assert (cx.fcx.lcx.ccx.fn_pairs.contains_key(fn_id._1));\n         lv = lval_val(cx, cx.fcx.lcx.ccx.fn_pairs.get(fn_id._1));\n@@ -4851,7 +4851,7 @@ fn lookup_discriminant(&@local_ctxt lcx, &ast::def_id tid, &ast::def_id vid)\n         case (none) {\n             // It's an external discriminant that we haven't seen yet.\n \n-            assert (lcx.ccx.sess.get_targ_crate_num() != vid._0);\n+            assert (vid._0 != ast::local_crate);\n             auto sym = decoder::get_symbol(lcx.ccx.sess, vid);\n             auto gvar =\n                 llvm::LLVMAddGlobal(lcx.ccx.llmod, T_int(), str::buf(sym));"}, {"sha": "5ef38434e5d2056d1a2060bde1e3b6c7a758c6fd", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4349eaed8417a39eb54ea952ce86c7c585be6e90/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4349eaed8417a39eb54ea952ce86c7c585be6e90/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=4349eaed8417a39eb54ea952ce86c7c585be6e90", "patch": "@@ -2802,7 +2802,7 @@ fn def_has_ty_params(&ast::def def) -> bool {\n type variant_info = rec(vec[ty::t] args, ty::t ctor_ty, ast::def_id id);\n \n fn tag_variants(&ctxt cx, &ast::def_id id) -> vec[variant_info] {\n-    if (cx.sess.get_targ_crate_num() != id._0) {\n+    if (ast::local_crate != id._0) {\n         ret decoder::get_tag_variants(cx, id);\n     }\n     auto item = alt (cx.items.find(id._1)) {\n@@ -2857,7 +2857,7 @@ fn tag_variant_with_id(&ctxt cx, &ast::def_id tag_id, &ast::def_id variant_id)\n // If the given item is in an external crate, looks up its type and adds it to\n // the type cache. Returns the type parameters and type.\n fn lookup_item_type(ctxt cx, ast::def_id did) -> ty_param_count_and_ty {\n-    if (did._0 == cx.sess.get_targ_crate_num()) {\n+    if (did._0 == ast::local_crate) {\n         // The item is in this crate. The caller should have added it to the\n         // type cache already; we simply return it.\n "}, {"sha": "214d2f9581e8989160b578d1363e0ccb958d552f", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4349eaed8417a39eb54ea952ce86c7c585be6e90/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4349eaed8417a39eb54ea952ce86c7c585be6e90/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=4349eaed8417a39eb54ea952ce86c7c585be6e90", "patch": "@@ -521,9 +521,8 @@ mod collect {\n         ret tpt;\n     }\n     fn getter(@ctxt cx, &ast::def_id id) -> ty::ty_param_count_and_ty {\n-        if (id._0 != cx.tcx.sess.get_targ_crate_num()) {\n+        if (id._0 != ast::local_crate) {\n             // This is a type we need to load in from the crate reader.\n-\n             ret decoder::get_type(cx.tcx, id);\n         }\n         auto it = cx.tcx.items.find(id._1);"}]}