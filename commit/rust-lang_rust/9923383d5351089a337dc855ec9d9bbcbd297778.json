{"sha": "9923383d5351089a337dc855ec9d9bbcbd297778", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5MjMzODNkNTM1MTA4OWEzMzdkYzg1NWVjOWQ5YmJjYmQyOTc3Nzg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-11T10:11:24Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-11T10:47:17Z"}, "message": "add graph fixture", "tree": {"sha": "fc2d5b08c0b93f4689bfbf5cbac18cdfc062d5e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc2d5b08c0b93f4689bfbf5cbac18cdfc062d5e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9923383d5351089a337dc855ec9d9bbcbd297778", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9923383d5351089a337dc855ec9d9bbcbd297778", "html_url": "https://github.com/rust-lang/rust/commit/9923383d5351089a337dc855ec9d9bbcbd297778", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9923383d5351089a337dc855ec9d9bbcbd297778/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dced2f4ed42b7013c761f2ed53c6c2482fa76169", "url": "https://api.github.com/repos/rust-lang/rust/commits/dced2f4ed42b7013c761f2ed53c6c2482fa76169", "html_url": "https://github.com/rust-lang/rust/commit/dced2f4ed42b7013c761f2ed53c6c2482fa76169"}], "stats": {"total": 152, "additions": 81, "deletions": 71}, "files": [{"sha": "8ed8c4bdc2976d33ae3a0517a59bcddd8d6c7475", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9923383d5351089a337dc855ec9d9bbcbd297778/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9923383d5351089a337dc855ec9d9bbcbd297778/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=9923383d5351089a337dc855ec9d9bbcbd297778", "patch": "@@ -18,6 +18,7 @@ macro_rules! impl_froms {\n }\n \n pub mod db;\n+#[macro_use]\n pub mod mock;\n mod query_definitions;\n mod path;"}, {"sha": "5ca87086753c7cd9782adcafeefdb71370f931f0", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/9923383d5351089a337dc855ec9d9bbcbd297778/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9923383d5351089a337dc855ec9d9bbcbd297778/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=9923383d5351089a337dc855ec9d9bbcbd297778", "patch": "@@ -55,6 +55,24 @@ impl MockDatabase {\n         }\n     }\n \n+    pub fn set_crate_graph_from_fixture(&mut self, graph: CrateGraphFixture) {\n+        let mut ids = FxHashMap::default();\n+        let mut crate_graph = CrateGraph::default();\n+        for (crate_name, (crate_root, _)) in graph.0.iter() {\n+            let crate_root = self.file_id_of(&crate_root);\n+            let crate_id = crate_graph.add_crate_root(crate_root);\n+            ids.insert(crate_name, crate_id);\n+        }\n+        for (crate_name, (_, deps)) in graph.0.iter() {\n+            let from = ids[crate_name];\n+            for dep in deps {\n+                let to = ids[dep];\n+                crate_graph.add_dep(from, dep.as_str().into(), to).unwrap();\n+            }\n+        }\n+        self.set_crate_graph(Arc::new(crate_graph))\n+    }\n+\n     fn from_fixture(fixture: &str) -> (MockDatabase, Option<FilePosition>) {\n         let mut db = MockDatabase::default();\n \n@@ -212,3 +230,20 @@ impl MockDatabase {\n             .collect()\n     }\n }\n+\n+#[derive(Default)]\n+pub struct CrateGraphFixture(pub FxHashMap<String, (String, Vec<String>)>);\n+\n+#[macro_export]\n+macro_rules! crate_graph {\n+    ($($crate_name:literal: ($crate_path:literal, [$($dep:literal),*]),)*) => {{\n+        let mut res = $crate::mock::CrateGraphFixture::default();\n+        $(\n+            res.0.insert(\n+                $crate_name.to_string(),\n+                ($crate_path.to_string(), vec![$($dep.to_string()),*])\n+            );\n+        )*\n+        res\n+    }}\n+}"}, {"sha": "9b621fbc27ead15849aa0149a67545c93b7089e6", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 45, "deletions": 71, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/9923383d5351089a337dc855ec9d9bbcbd297778/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9923383d5351089a337dc855ec9d9bbcbd297778/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=9923383d5351089a337dc855ec9d9bbcbd297778", "patch": "@@ -1,6 +1,6 @@\n use std::sync::Arc;\n \n-use ra_db::{CrateGraph, SourceDatabase};\n+use ra_db::SourceDatabase;\n use test_utils::{assert_eq_text, covers};\n \n use crate::{\n@@ -19,20 +19,6 @@ fn item_map(fixture: &str) -> (Arc<ItemMap>, ModuleId) {\n     (db.item_map(krate), module_id)\n }\n \n-/// Sets the crate root to the file of the cursor marker\n-fn item_map_custom_crate_root(fixture: &str) -> (Arc<ItemMap>, ModuleId) {\n-    let (mut db, pos) = MockDatabase::with_position(fixture);\n-\n-    let mut crate_graph = CrateGraph::default();\n-    crate_graph.add_crate_root(pos.file_id);\n-    db.set_crate_graph(Arc::new(crate_graph));\n-\n-    let module = crate::source_binder::module_from_position(&db, pos).unwrap();\n-    let krate = module.krate(&db).unwrap();\n-    let module_id = module.module_id;\n-    (db.item_map(krate), module_id)\n-}\n-\n fn check_module_item_map(map: &ItemMap, module_id: ModuleId, expected: &str) {\n     let mut lines = map[module_id]\n         .items\n@@ -258,17 +244,13 @@ fn glob_across_crates() {\n \n         //- /lib.rs\n         pub struct Baz;\n-    \",\n+        \",\n     );\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"main\": (\"/main.rs\", [\"test_crate\"]),\n+        \"test_crate\": (\"/lib.rs\", []),\n+    });\n     let main_id = db.file_id_of(\"/main.rs\");\n-    let lib_id = db.file_id_of(\"/lib.rs\");\n-\n-    let mut crate_graph = CrateGraph::default();\n-    let main_crate = crate_graph.add_crate_root(main_id);\n-    let lib_crate = crate_graph.add_crate_root(lib_id);\n-    crate_graph.add_dep(main_crate, \"test_crate\".into(), lib_crate).unwrap();\n-\n-    db.set_crate_graph(Arc::new(crate_graph));\n \n     let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n     let krate = module.krate(&db).unwrap();\n@@ -285,22 +267,31 @@ fn glob_across_crates() {\n \n #[test]\n fn module_resolution_works_for_non_standard_filenames() {\n-    let (item_map, module_id) = item_map_custom_crate_root(\n+    let mut db = MockDatabase::with_files(\n         \"\n         //- /my_library.rs\n         mod foo;\n         use self::foo::Bar;\n-        <|>\n+\n         //- /foo/mod.rs\n         pub struct Bar;\n-    \",\n+        \",\n     );\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"my_library\": (\"/my_library.rs\", []),\n+    });\n+    let file_id = db.file_id_of(\"/my_library.rs\");\n+\n+    let module = crate::source_binder::module_from_file_id(&db, file_id).unwrap();\n+    let krate = module.krate(&db).unwrap();\n+    let module_id = module.module_id;\n+    let item_map = db.item_map(krate);\n     check_module_item_map(\n         &item_map,\n         module_id,\n         \"\n-            Bar: t v\n-            foo: t\n+        Bar: t v\n+        foo: t\n         \",\n     );\n }\n@@ -417,17 +408,13 @@ fn item_map_across_crates() {\n \n         //- /lib.rs\n         pub struct Baz;\n-    \",\n+        \",\n     );\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"main\": (\"/main.rs\", [\"test_crate\"]),\n+        \"test_crate\": (\"/lib.rs\", []),\n+    });\n     let main_id = db.file_id_of(\"/main.rs\");\n-    let lib_id = db.file_id_of(\"/lib.rs\");\n-\n-    let mut crate_graph = CrateGraph::default();\n-    let main_crate = crate_graph.add_crate_root(main_id);\n-    let lib_crate = crate_graph.add_crate_root(lib_id);\n-    crate_graph.add_dep(main_crate, \"test_crate\".into(), lib_crate).unwrap();\n-\n-    db.set_crate_graph(Arc::new(crate_graph));\n \n     let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n     let krate = module.krate(&db).unwrap();\n@@ -437,7 +424,7 @@ fn item_map_across_crates() {\n         &item_map,\n         module.module_id,\n         \"\n-            Baz: t v\n+        Baz: t v\n         \",\n     );\n }\n@@ -457,18 +444,13 @@ fn extern_crate_rename() {\n \n         //- /lib.rs\n         struct Arc;\n-    \",\n+        \",\n     );\n-    let main_id = db.file_id_of(\"/main.rs\");\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"main\": (\"/main.rs\", [\"alloc\"]),\n+        \"alloc\": (\"/lib.rs\", []),\n+    });\n     let sync_id = db.file_id_of(\"/sync.rs\");\n-    let lib_id = db.file_id_of(\"/lib.rs\");\n-\n-    let mut crate_graph = CrateGraph::default();\n-    let main_crate = crate_graph.add_crate_root(main_id);\n-    let lib_crate = crate_graph.add_crate_root(lib_id);\n-    crate_graph.add_dep(main_crate, \"alloc\".into(), lib_crate).unwrap();\n-\n-    db.set_crate_graph(Arc::new(crate_graph));\n \n     let module = crate::source_binder::module_from_file_id(&db, sync_id).unwrap();\n     let krate = module.krate(&db).unwrap();\n@@ -478,7 +460,7 @@ fn extern_crate_rename() {\n         &item_map,\n         module.module_id,\n         \"\n-            Arc: t v\n+        Arc: t v\n         \",\n     );\n }\n@@ -494,21 +476,17 @@ fn import_across_source_roots() {\n             }\n         }\n \n-        //- root /test_crate/\n+        //- root /main/\n \n-        //- /test_crate/main.rs\n+        //- /main/main.rs\n         use test_crate::a::b::C;\n         \",\n     );\n-    let lib_id = db.file_id_of(\"/lib.rs\");\n-    let main_id = db.file_id_of(\"/test_crate/main.rs\");\n-\n-    let mut crate_graph = CrateGraph::default();\n-    let main_crate = crate_graph.add_crate_root(main_id);\n-    let lib_crate = crate_graph.add_crate_root(lib_id);\n-    crate_graph.add_dep(main_crate, \"test_crate\".into(), lib_crate).unwrap();\n-\n-    db.set_crate_graph(Arc::new(crate_graph));\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"main\": (\"/main/main.rs\", [\"test_crate\"]),\n+        \"test_crate\": (\"/lib.rs\", []),\n+    });\n+    let main_id = db.file_id_of(\"/main/main.rs\");\n \n     let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n     let krate = module.krate(&db).unwrap();\n@@ -537,17 +515,13 @@ fn reexport_across_crates() {\n \n         //- /foo.rs\n         pub struct Baz;\n-    \",\n+        \",\n     );\n+    db.set_crate_graph_from_fixture(crate_graph! {\n+        \"main\": (\"/main.rs\", [\"test_crate\"]),\n+        \"test_crate\": (\"/lib.rs\", []),\n+    });\n     let main_id = db.file_id_of(\"/main.rs\");\n-    let lib_id = db.file_id_of(\"/lib.rs\");\n-\n-    let mut crate_graph = CrateGraph::default();\n-    let main_crate = crate_graph.add_crate_root(main_id);\n-    let lib_crate = crate_graph.add_crate_root(lib_id);\n-    crate_graph.add_dep(main_crate, \"test_crate\".into(), lib_crate).unwrap();\n-\n-    db.set_crate_graph(Arc::new(crate_graph));\n \n     let module = crate::source_binder::module_from_file_id(&db, main_id).unwrap();\n     let krate = module.krate(&db).unwrap();\n@@ -557,7 +531,7 @@ fn reexport_across_crates() {\n         &item_map,\n         module.module_id,\n         \"\n-            Baz: t v\n+        Baz: t v\n         \",\n     );\n }"}]}