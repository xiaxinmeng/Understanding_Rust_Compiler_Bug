{"sha": "e855b90a8e159d27e014847ef50d9536aa1249d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NTViOTBhOGUxNTlkMjdlMDE0ODQ3ZWY1MGQ5NTM2YWExMjQ5ZDA=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-05-26T17:49:11Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-06-15T23:25:58Z"}, "message": "track caller for delay_span_bug", "tree": {"sha": "0d005058016fdbc1add5bb925d7e8c9c7b502249", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d005058016fdbc1add5bb925d7e8c9c7b502249"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e855b90a8e159d27e014847ef50d9536aa1249d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e855b90a8e159d27e014847ef50d9536aa1249d0", "html_url": "https://github.com/rust-lang/rust/commit/e855b90a8e159d27e014847ef50d9536aa1249d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e855b90a8e159d27e014847ef50d9536aa1249d0/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "268decbac8bad298299702a0d17c9213f0a14f2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/268decbac8bad298299702a0d17c9213f0a14f2e", "html_url": "https://github.com/rust-lang/rust/commit/268decbac8bad298299702a0d17c9213f0a14f2e"}], "stats": {"total": 30, "additions": 8, "deletions": 22}, "files": [{"sha": "0c1418d3cad279ebe8d806b3dd9d62af87d1d6fe", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e855b90a8e159d27e014847ef50d9536aa1249d0/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e855b90a8e159d27e014847ef50d9536aa1249d0/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=e855b90a8e159d27e014847ef50d9536aa1249d0", "patch": "@@ -5,6 +5,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/\")]\n #![feature(crate_visibility_modifier)]\n #![feature(nll)]\n+#![feature(track_caller)]\n \n pub use emitter::ColorConfig;\n \n@@ -621,6 +622,7 @@ impl Handler {\n         self.inner.borrow_mut().span_bug(span, msg)\n     }\n \n+    #[track_caller]\n     pub fn delay_span_bug(&self, span: impl Into<MultiSpan>, msg: &str) {\n         self.inner.borrow_mut().delay_span_bug(span, msg)\n     }\n@@ -873,6 +875,7 @@ impl HandlerInner {\n         self.emit_diagnostic(diag.set_span(sp));\n     }\n \n+    #[track_caller]\n     fn delay_span_bug(&mut self, sp: impl Into<MultiSpan>, msg: &str) {\n         // This is technically `self.treat_err_as_bug()` but `delay_span_bug` is called before\n         // incrementing `err_count` by one, so we need to +1 the comparing.\n@@ -883,6 +886,7 @@ impl HandlerInner {\n         }\n         let mut diagnostic = Diagnostic::new(Level::Bug, msg);\n         diagnostic.set_span(sp.into());\n+        diagnostic.note(&format!(\"delayed at {}\", std::panic::Location::caller()));\n         self.delay_as_bug(diagnostic)\n     }\n "}, {"sha": "1715b545662b86a4f64661c7254f52b9342d2587", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e855b90a8e159d27e014847ef50d9536aa1249d0/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e855b90a8e159d27e014847ef50d9536aa1249d0/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=e855b90a8e159d27e014847ef50d9536aa1249d0", "patch": "@@ -1144,40 +1144,22 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` to ensure it gets used.\n     #[track_caller]\n     pub fn ty_error(self) -> Ty<'tcx> {\n-        self.err_with_message_and_location(\n-            DUMMY_SP,\n-            \"TyKind::Error constructed but no error reported\",\n-            std::panic::Location::caller(),\n-        )\n+        self.ty_error_with_message(DUMMY_SP, \"TyKind::Error constructed but no error reported\")\n     }\n \n     /// Constructs a `TyKind::Error` type and registers a `delay_span_bug` with the given `msg to\n     /// ensure it gets used.\n     #[track_caller]\n     pub fn ty_error_with_message<S: Into<MultiSpan>>(self, span: S, msg: &str) -> Ty<'tcx> {\n-        self.err_with_message_and_location(span, msg, std::panic::Location::caller())\n-    }\n-\n-    pub fn err_with_message_and_location<S: Into<MultiSpan>>(\n-        self,\n-        span: S,\n-        msg: &str,\n-        loc: &'static std::panic::Location<'static>,\n-    ) -> Ty<'tcx> {\n-        self.sess.delay_span_bug(span, &format!(\"{}: {}\", loc, msg));\n+        self.sess.delay_span_bug(span, msg);\n         self.mk_ty(Error(super::sty::DelaySpanBugEmitted(())))\n     }\n \n     /// Like `err` but for constants.\n     #[track_caller]\n     pub fn const_error(self, ty: Ty<'tcx>) -> &'tcx Const<'tcx> {\n-        self.sess.delay_span_bug(\n-            DUMMY_SP,\n-            &format!(\n-                \"ty::ConstKind::Error constructed but no error reported. {}\",\n-                std::panic::Location::caller()\n-            ),\n-        );\n+        self.sess\n+            .delay_span_bug(DUMMY_SP, \"ty::ConstKind::Error constructed but no error reported.\");\n         self.mk_const(ty::Const {\n             val: ty::ConstKind::Error(super::sty::DelaySpanBugEmitted(())),\n             ty,"}]}