{"sha": "a7434da9be1fd77137e8f145d677c77dad2269e6", "node_id": "C_kwDOAAsO6NoAKGE3NDM0ZGE5YmUxZmQ3NzEzN2U4ZjE0NWQ2NzdjNzdkYWQyMjY5ZTY", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-22T11:15:03Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2022-06-29T10:00:06Z"}, "message": "Remove restrictions on compare-exchange memory ordering.", "tree": {"sha": "cfb3d50cb44c304fc610497f3831917dc6f0d1d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfb3d50cb44c304fc610497f3831917dc6f0d1d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7434da9be1fd77137e8f145d677c77dad2269e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7434da9be1fd77137e8f145d677c77dad2269e6", "html_url": "https://github.com/rust-lang/rust/commit/a7434da9be1fd77137e8f145d677c77dad2269e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7434da9be1fd77137e8f145d677c77dad2269e6/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "493c960a3e6cdd2e2fbe8b6ea130fadea05f1ab0", "url": "https://api.github.com/repos/rust-lang/rust/commits/493c960a3e6cdd2e2fbe8b6ea130fadea05f1ab0", "html_url": "https://github.com/rust-lang/rust/commit/493c960a3e6cdd2e2fbe8b6ea130fadea05f1ab0"}], "stats": {"total": 53, "additions": 21, "deletions": 32}, "files": [{"sha": "672db00565657760093cb0b6d09a7998c0d71d56", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 21, "deletions": 32, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/a7434da9be1fd77137e8f145d677c77dad2269e6/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7434da9be1fd77137e8f145d677c77dad2269e6/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=a7434da9be1fd77137e8f145d677c77dad2269e6", "patch": "@@ -581,8 +581,7 @@ impl AtomicBool {\n     /// `failure` describes the required ordering for the load operation that takes place when\n     /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-    /// and must be equivalent to or weaker than the success ordering.\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n@@ -640,8 +639,7 @@ impl AtomicBool {\n     /// `failure` describes the required ordering for the load operation that takes place when\n     /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-    /// and must be equivalent to or weaker than the success ordering.\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n@@ -905,8 +903,7 @@ impl AtomicBool {\n     /// Using [`Acquire`] as success ordering makes the store part of this\n     /// operation [`Relaxed`], and using [`Release`] makes the final successful\n     /// load [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`],\n-    /// [`Acquire`] or [`Relaxed`] and must be equivalent to or weaker than the\n-    /// success ordering.\n+    /// [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on `u8`.\n@@ -1265,8 +1262,7 @@ impl<T> AtomicPtr<T> {\n     /// `failure` describes the required ordering for the load operation that takes place when\n     /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-    /// and must be equivalent to or weaker than the success ordering.\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n@@ -1311,8 +1307,7 @@ impl<T> AtomicPtr<T> {\n     /// `failure` describes the required ordering for the load operation that takes place when\n     /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n     /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-    /// and must be equivalent to or weaker than the success ordering.\n+    /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n@@ -1368,8 +1363,7 @@ impl<T> AtomicPtr<T> {\n     /// Using [`Acquire`] as success ordering makes the store part of this\n     /// operation [`Relaxed`], and using [`Release`] makes the final successful\n     /// load [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`],\n-    /// [`Acquire`] or [`Relaxed`] and must be equivalent to or weaker than the\n-    /// success ordering.\n+    /// [`Acquire`] or [`Relaxed`].\n     ///\n     /// **Note:** This method is only available on platforms that support atomic\n     /// operations on pointers.\n@@ -1850,8 +1844,7 @@ macro_rules! atomic_int {\n             /// `failure` describes the required ordering for the load operation that takes place when\n             /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n             /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-            /// and must be equivalent to or weaker than the success ordering.\n+            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n             #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n@@ -1902,8 +1895,7 @@ macro_rules! atomic_int {\n             /// `failure` describes the required ordering for the load operation that takes place when\n             /// the comparison fails. Using [`Acquire`] as success ordering makes the store part\n             /// of this operation [`Relaxed`], and using [`Release`] makes the successful load\n-            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-            /// and must be equivalent to or weaker than the success ordering.\n+            /// [`Relaxed`]. The failure ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n             #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n@@ -2140,8 +2132,7 @@ macro_rules! atomic_int {\n             ///\n             /// Using [`Acquire`] as success ordering makes the store part\n             /// of this operation [`Relaxed`], and using [`Release`] makes the final successful load\n-            /// [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`]\n-            /// and must be equivalent to or weaker than the success ordering.\n+            /// [`Relaxed`]. The (failed) load ordering can only be [`SeqCst`], [`Acquire`] or [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n             #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n@@ -2658,23 +2649,22 @@ unsafe fn atomic_compare_exchange<T: Copy>(\n     let (val, ok) = unsafe {\n         match (success, failure) {\n             (Relaxed, Relaxed) => intrinsics::atomic_cxchg_relaxed_relaxed(dst, old, new),\n-            //(Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),\n-            //(Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),\n+            (Relaxed, Acquire) => intrinsics::atomic_cxchg_relaxed_acquire(dst, old, new),\n+            (Relaxed, SeqCst) => intrinsics::atomic_cxchg_relaxed_seqcst(dst, old, new),\n             (Acquire, Relaxed) => intrinsics::atomic_cxchg_acquire_relaxed(dst, old, new),\n             (Acquire, Acquire) => intrinsics::atomic_cxchg_acquire_acquire(dst, old, new),\n-            //(Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),\n+            (Acquire, SeqCst) => intrinsics::atomic_cxchg_acquire_seqcst(dst, old, new),\n             (Release, Relaxed) => intrinsics::atomic_cxchg_release_relaxed(dst, old, new),\n-            //(Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),\n-            //(Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),\n+            (Release, Acquire) => intrinsics::atomic_cxchg_release_acquire(dst, old, new),\n+            (Release, SeqCst) => intrinsics::atomic_cxchg_release_seqcst(dst, old, new),\n             (AcqRel, Relaxed) => intrinsics::atomic_cxchg_acqrel_relaxed(dst, old, new),\n             (AcqRel, Acquire) => intrinsics::atomic_cxchg_acqrel_acquire(dst, old, new),\n-            //(AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),\n+            (AcqRel, SeqCst) => intrinsics::atomic_cxchg_acqrel_seqcst(dst, old, new),\n             (SeqCst, Relaxed) => intrinsics::atomic_cxchg_seqcst_relaxed(dst, old, new),\n             (SeqCst, Acquire) => intrinsics::atomic_cxchg_seqcst_acquire(dst, old, new),\n             (SeqCst, SeqCst) => intrinsics::atomic_cxchg_seqcst_seqcst(dst, old, new),\n             (_, AcqRel) => panic!(\"there is no such thing as an acquire-release failure ordering\"),\n             (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n-            _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n         }\n     };\n     if ok { Ok(val) } else { Err(val) }\n@@ -2693,23 +2683,22 @@ unsafe fn atomic_compare_exchange_weak<T: Copy>(\n     let (val, ok) = unsafe {\n         match (success, failure) {\n             (Relaxed, Relaxed) => intrinsics::atomic_cxchgweak_relaxed_relaxed(dst, old, new),\n-            //(Relaxed, Acquire) => intrinsics::atomic_cxchgweak_relaxed_acquire(dst, old, new),\n-            //(Relaxed, SeqCst) => intrinsics::atomic_cxchgweak_relaxed_seqcst(dst, old, new),\n+            (Relaxed, Acquire) => intrinsics::atomic_cxchgweak_relaxed_acquire(dst, old, new),\n+            (Relaxed, SeqCst) => intrinsics::atomic_cxchgweak_relaxed_seqcst(dst, old, new),\n             (Acquire, Relaxed) => intrinsics::atomic_cxchgweak_acquire_relaxed(dst, old, new),\n             (Acquire, Acquire) => intrinsics::atomic_cxchgweak_acquire_acquire(dst, old, new),\n-            //(Acquire, SeqCst) => intrinsics::atomic_cxchgweak_acquire_seqcst(dst, old, new),\n+            (Acquire, SeqCst) => intrinsics::atomic_cxchgweak_acquire_seqcst(dst, old, new),\n             (Release, Relaxed) => intrinsics::atomic_cxchgweak_release_relaxed(dst, old, new),\n-            //(Release, Acquire) => intrinsics::atomic_cxchgweak_release_acquire(dst, old, new),\n-            //(Release, SeqCst) => intrinsics::atomic_cxchgweak_release_seqcst(dst, old, new),\n+            (Release, Acquire) => intrinsics::atomic_cxchgweak_release_acquire(dst, old, new),\n+            (Release, SeqCst) => intrinsics::atomic_cxchgweak_release_seqcst(dst, old, new),\n             (AcqRel, Relaxed) => intrinsics::atomic_cxchgweak_acqrel_relaxed(dst, old, new),\n             (AcqRel, Acquire) => intrinsics::atomic_cxchgweak_acqrel_acquire(dst, old, new),\n-            //(AcqRel, SeqCst) => intrinsics::atomic_cxchgweak_acqrel_seqcst(dst, old, new),\n+            (AcqRel, SeqCst) => intrinsics::atomic_cxchgweak_acqrel_seqcst(dst, old, new),\n             (SeqCst, Relaxed) => intrinsics::atomic_cxchgweak_seqcst_relaxed(dst, old, new),\n             (SeqCst, Acquire) => intrinsics::atomic_cxchgweak_seqcst_acquire(dst, old, new),\n             (SeqCst, SeqCst) => intrinsics::atomic_cxchgweak_seqcst_seqcst(dst, old, new),\n             (_, AcqRel) => panic!(\"there is no such thing as an acquire-release failure ordering\"),\n             (_, Release) => panic!(\"there is no such thing as a release failure ordering\"),\n-            _ => panic!(\"a failure ordering can't be stronger than a success ordering\"),\n         }\n     };\n     if ok { Ok(val) } else { Err(val) }"}]}