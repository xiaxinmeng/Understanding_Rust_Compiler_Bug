{"sha": "069f219d4052bb8716aa3994f8c2a0f2c90c2c03", "node_id": "C_kwDOAAsO6NoAKDA2OWYyMTlkNDA1MmJiODcxNmFhMzk5NGY4YzJhMGYyYzkwYzJjMDM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-28T16:25:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-28T16:25:46Z"}, "message": "Rollup merge of #104891 - fee1-dead-contrib:escaping_bound_vars_docs, r=wesleywiser\n\nAdd documentation for `has_escaping_bound_vars`\n\nThanks to `@BoxyUwU` for explaining this to me. Adding docs with a helpful link if people get confused.", "tree": {"sha": "0c352560dfaed4cb0ef4f84653b41ff38f4a3e94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c352560dfaed4cb0ef4f84653b41ff38f4a3e94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/069f219d4052bb8716aa3994f8c2a0f2c90c2c03", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjhOEKCRBK7hj4Ov3rIwAA0oUIAHOahxCxUyrffX+MF/3vAgSz\njLrPZ+0FgdytLqV3oEpb5hIYq2qEde0vGlNi065qp68LZQ8BsBLdzCxj2miNu/5r\nA2W8cREVIZgoInxZvT8kCGcJI5rzHR2Xhcj9Qukx94ssgRE3i0lIJyo6OqgJqnPd\ndneLvU7QbXLYqeuVClE9UsZyDGqaWCisZkxV3UUiaV1Nu5T2Mzk06i7xIVV+Fudk\nfiT0xCCasC06a9AIRq4a1pqHuv4NMV+ClqnWW2baOp2ghCZvarCmCWEpcMrTZ55A\nYJr/NTvuZlh8M2VTLuIIzc5p5+h0fiHt5vVLnTbMv+6HYOUlfXYpXYSMLBSuCKo=\n=wN5W\n-----END PGP SIGNATURE-----\n", "payload": "tree 0c352560dfaed4cb0ef4f84653b41ff38f4a3e94\nparent 63ec33e929f60177a02ae3d059482e3743f1d8cc\nparent 815d3703469194355d6fae6bc5844a1f7bbae4e1\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1669652746 +0100\ncommitter GitHub <noreply@github.com> 1669652746 +0100\n\nRollup merge of #104891 - fee1-dead-contrib:escaping_bound_vars_docs, r=wesleywiser\n\nAdd documentation for `has_escaping_bound_vars`\n\nThanks to `@BoxyUwU` for explaining this to me. Adding docs with a helpful link if people get confused.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/069f219d4052bb8716aa3994f8c2a0f2c90c2c03", "html_url": "https://github.com/rust-lang/rust/commit/069f219d4052bb8716aa3994f8c2a0f2c90c2c03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/069f219d4052bb8716aa3994f8c2a0f2c90c2c03/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63ec33e929f60177a02ae3d059482e3743f1d8cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/63ec33e929f60177a02ae3d059482e3743f1d8cc", "html_url": "https://github.com/rust-lang/rust/commit/63ec33e929f60177a02ae3d059482e3743f1d8cc"}, {"sha": "815d3703469194355d6fae6bc5844a1f7bbae4e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/815d3703469194355d6fae6bc5844a1f7bbae4e1", "html_url": "https://github.com/rust-lang/rust/commit/815d3703469194355d6fae6bc5844a1f7bbae4e1"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "4cdfd9e594042ba3550aa038094c7c707ad836b2", "filename": "compiler/rustc_middle/src/ty/visit.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/069f219d4052bb8716aa3994f8c2a0f2c90c2c03/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/069f219d4052bb8716aa3994f8c2a0f2c90c2c03/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvisit.rs?ref=069f219d4052bb8716aa3994f8c2a0f2c90c2c03", "patch": "@@ -72,12 +72,18 @@ pub trait TypeVisitable<'tcx>: fmt::Debug + Clone {\n         self.visit_with(&mut HasEscapingVarsVisitor { outer_index: binder }).is_break()\n     }\n \n-    /// Returns `true` if this `self` has any regions that escape `binder` (and\n+    /// Returns `true` if this type has any regions that escape `binder` (and\n     /// hence are not bound by it).\n     fn has_vars_bound_above(&self, binder: ty::DebruijnIndex) -> bool {\n         self.has_vars_bound_at_or_above(binder.shifted_in(1))\n     }\n \n+    /// Return `true` if this type has regions that are not a part of the type.\n+    /// For example, `for<'a> fn(&'a i32)` return `false`, while `fn(&'a i32)`\n+    /// would return `true`. The latter can occur when traversing through the\n+    /// former.\n+    ///\n+    /// See [`HasEscapingVarsVisitor`] for more information.\n     fn has_escaping_bound_vars(&self) -> bool {\n         self.has_vars_bound_at_or_above(ty::INNERMOST)\n     }"}]}