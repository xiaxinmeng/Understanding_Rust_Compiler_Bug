{"sha": "09e0a00d3648eb4080d16f07c6dae73f7c73c431", "node_id": "C_kwDOAAsO6NoAKDA5ZTBhMDBkMzY0OGViNDA4MGQxNmYwN2M2ZGFlNzNmN2M3M2M0MzE", "commit": {"author": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-04-03T00:58:20Z"}, "committer": {"name": "Bruno Ortiz", "email": "brunortiz11@gmail.com", "date": "2023-05-02T13:56:09Z"}, "message": "fetching dependencies from the server", "tree": {"sha": "4cbc611accb6cd706ab2692f824a5359c88936ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4cbc611accb6cd706ab2692f824a5359c88936ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09e0a00d3648eb4080d16f07c6dae73f7c73c431", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09e0a00d3648eb4080d16f07c6dae73f7c73c431", "html_url": "https://github.com/rust-lang/rust/commit/09e0a00d3648eb4080d16f07c6dae73f7c73c431", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09e0a00d3648eb4080d16f07c6dae73f7c73c431/comments", "author": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bruno-ortiz", "id": 5748995, "node_id": "MDQ6VXNlcjU3NDg5OTU=", "avatar_url": "https://avatars.githubusercontent.com/u/5748995?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bruno-ortiz", "html_url": "https://github.com/bruno-ortiz", "followers_url": "https://api.github.com/users/bruno-ortiz/followers", "following_url": "https://api.github.com/users/bruno-ortiz/following{/other_user}", "gists_url": "https://api.github.com/users/bruno-ortiz/gists{/gist_id}", "starred_url": "https://api.github.com/users/bruno-ortiz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bruno-ortiz/subscriptions", "organizations_url": "https://api.github.com/users/bruno-ortiz/orgs", "repos_url": "https://api.github.com/users/bruno-ortiz/repos", "events_url": "https://api.github.com/users/bruno-ortiz/events{/privacy}", "received_events_url": "https://api.github.com/users/bruno-ortiz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1201b156d839ac5b5cc7bca1ea1c1f0cf6fbf6a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/1201b156d839ac5b5cc7bca1ea1c1f0cf6fbf6a9", "html_url": "https://github.com/rust-lang/rust/commit/1201b156d839ac5b5cc7bca1ea1c1f0cf6fbf6a9"}], "stats": {"total": 311, "additions": 155, "deletions": 156}, "files": [{"sha": "c0bc4103c2f781ab2a0d318afd434645522e67d6", "filename": "crates/ide/src/fetch_crates.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/09e0a00d3648eb4080d16f07c6dae73f7c73c431/crates%2Fide%2Fsrc%2Ffetch_crates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e0a00d3648eb4080d16f07c6dae73f7c73c431/crates%2Fide%2Fsrc%2Ffetch_crates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffetch_crates.rs?ref=09e0a00d3648eb4080d16f07c6dae73f7c73c431", "patch": "@@ -0,0 +1,59 @@\n+use ide_db::{\n+    base_db::{CrateOrigin, SourceDatabase, SourceDatabaseExt},\n+    RootDatabase,\n+};\n+\n+#[derive(Debug)]\n+pub struct CrateInfo {\n+    pub name: String,\n+    pub version: String,\n+    pub path: String,\n+}\n+\n+pub(crate) fn fetch_crates(db: &RootDatabase) -> Vec<CrateInfo> {\n+    let crate_graph = db.crate_graph();\n+    crate_graph\n+        .iter()\n+        .map(|crate_id| &crate_graph[crate_id])\n+        .filter(|&data| !matches!(data.origin, CrateOrigin::Local { .. }))\n+        .map(|data| {\n+            let crate_name = crate_name(data);\n+            let version = data.version.clone().unwrap_or_else(|| \"\".to_owned());\n+            let crate_path = crate_path(db, data, &crate_name);\n+\n+            CrateInfo { name: crate_name, version, path: crate_path }\n+        })\n+        .collect()\n+}\n+\n+fn crate_name(data: &ide_db::base_db::CrateData) -> String {\n+    data.display_name\n+        .clone()\n+        .map(|it| it.canonical_name().to_owned())\n+        .unwrap_or(\"unknown\".to_string())\n+}\n+\n+fn crate_path(db: &RootDatabase, data: &ide_db::base_db::CrateData, crate_name: &str) -> String {\n+    let source_root_id = db.file_source_root(data.root_file_id);\n+    let source_root = db.source_root(source_root_id);\n+    let source_root_path = source_root.path_for_file(&data.root_file_id);\n+    match source_root_path.cloned() {\n+        Some(mut root_path) => {\n+            let mut crate_path = \"\".to_string();\n+            while let Some(vfs_path) = root_path.parent() {\n+                match vfs_path.name_and_extension() {\n+                    Some((name, _)) => {\n+                        if name.starts_with(crate_name) {\n+                            crate_path = vfs_path.to_string();\n+                            break;\n+                        }\n+                    }\n+                    None => break,\n+                }\n+                root_path = vfs_path;\n+            }\n+            crate_path\n+        }\n+        None => \"\".to_owned(),\n+    }\n+}"}, {"sha": "96adb11dcde33b253c01f30af9c59f98eb9d49d2", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/09e0a00d3648eb4080d16f07c6dae73f7c73c431/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e0a00d3648eb4080d16f07c6dae73f7c73c431/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=09e0a00d3648eb4080d16f07c6dae73f7c73c431", "patch": "@@ -59,10 +59,12 @@ mod view_mir;\n mod interpret_function;\n mod view_item_tree;\n mod shuffle_crate_graph;\n+mod fetch_crates;\n \n use std::sync::Arc;\n \n use cfg::CfgOptions;\n+use fetch_crates::CrateInfo;\n use ide_db::{\n     base_db::{\n         salsa::{self, ParallelDatabase},\n@@ -331,6 +333,10 @@ impl Analysis {\n         self.with_db(|db| view_crate_graph::view_crate_graph(db, full))\n     }\n \n+    pub fn fetch_crates(&self) -> Cancellable<Vec<CrateInfo>> {\n+        self.with_db(|db| fetch_crates::fetch_crates(db))\n+    }\n+\n     pub fn expand_macro(&self, position: FilePosition) -> Cancellable<Option<ExpandedMacro>> {\n         self.with_db(|db| expand_macro::expand_macro(db, position))\n     }"}, {"sha": "2324490e53b6b6b404cb9c0538c9441cf5eddcf4", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/09e0a00d3648eb4080d16f07c6dae73f7c73c431/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e0a00d3648eb4080d16f07c6dae73f7c73c431/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=09e0a00d3648eb4080d16f07c6dae73f7c73c431", "patch": "@@ -6,7 +6,13 @@ use ide::AssistResolveStrategy;\n use lsp_types::{Diagnostic, DiagnosticTag, NumberOrString};\n use vfs::FileId;\n \n-use crate::{global_state::GlobalStateSnapshot, to_proto, Result};\n+use crate::{\n+    global_state::GlobalStateSnapshot, to_proto, Result,\n+    lsp_ext::{\n+        CrateInfoResult, FetchDependencyGraphResult, FetchDependencyGraphParams,\n+    },\n+};\n+\n \n pub(crate) mod request;\n pub(crate) mod notification;\n@@ -31,7 +37,7 @@ pub(crate) fn publish_diagnostics(\n                     \"https://rust-analyzer.github.io/manual.html#{}\",\n                     d.code.as_str()\n                 ))\n-                .unwrap(),\n+                    .unwrap(),\n             }),\n             source: Some(\"rust-analyzer\".to_string()),\n             message: d.message,\n@@ -42,3 +48,16 @@ pub(crate) fn publish_diagnostics(\n         .collect();\n     Ok(diagnostics)\n }\n+\n+pub(crate) fn fetch_dependency_graph(\n+    state: GlobalStateSnapshot,\n+    _params: FetchDependencyGraphParams,\n+) -> Result<FetchDependencyGraphResult> {\n+    let crates = state.analysis.fetch_crates()?;\n+    Ok(FetchDependencyGraphResult {\n+        crates: crates\n+            .into_iter()\n+            .map(|it| CrateInfoResult { name: it.name, version: it.version, path: it.path })\n+            .collect(),\n+    })\n+}"}, {"sha": "18511da4683982af889ae83ee5d60e91983faea4", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/09e0a00d3648eb4080d16f07c6dae73f7c73c431/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e0a00d3648eb4080d16f07c6dae73f7c73c431/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=09e0a00d3648eb4080d16f07c6dae73f7c73c431", "patch": "@@ -27,6 +27,13 @@ pub struct AnalyzerStatusParams {\n     pub text_document: Option<TextDocumentIdentifier>,\n }\n \n+#[derive(Deserialize, Serialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct CrateInfoResult {\n+    pub name: String,\n+    pub version: String,\n+    pub path: String,\n+}\n pub enum FetchDependencyGraph {}\n \n impl Request for FetchDependencyGraph {\n@@ -38,9 +45,12 @@ impl Request for FetchDependencyGraph {\n #[derive(Deserialize, Serialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n pub struct FetchDependencyGraphParams {}\n+\n #[derive(Deserialize, Serialize, Debug)]\n #[serde(rename_all = \"camelCase\")]\n-pub struct FetchDependencyGraphResult {}\n+pub struct FetchDependencyGraphResult {\n+    pub crates: Vec<CrateInfoResult>,\n+}\n \n pub enum MemoryUsage {}\n \n@@ -374,6 +384,7 @@ impl Request for CodeActionRequest {\n }\n \n pub enum CodeActionResolveRequest {}\n+\n impl Request for CodeActionResolveRequest {\n     type Params = CodeAction;\n     type Result = CodeAction;"}, {"sha": "7a81a18f4af9f0da6084a501134ff27f2e2e67dc", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/09e0a00d3648eb4080d16f07c6dae73f7c73c431/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09e0a00d3648eb4080d16f07c6dae73f7c73c431/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=09e0a00d3648eb4080d16f07c6dae73f7c73c431", "patch": "@@ -655,12 +655,12 @@ impl GlobalState {\n             .on_sync_mut::<lsp_ext::ReloadWorkspace>(handlers::handle_workspace_reload)\n             .on_sync_mut::<lsp_ext::RebuildProcMacros>(handlers::handle_proc_macros_rebuild)\n             .on_sync_mut::<lsp_ext::MemoryUsage>(handlers::handle_memory_usage)\n-            .on_sync_mut::<lsp_ext::FetchDependencyGraph>(handlers::fetch_dependency_graph)\n             .on_sync_mut::<lsp_ext::ShuffleCrateGraph>(handlers::handle_shuffle_crate_graph)\n             .on_sync::<lsp_ext::JoinLines>(handlers::handle_join_lines)\n             .on_sync::<lsp_ext::OnEnter>(handlers::handle_on_enter)\n             .on_sync::<lsp_types::request::SelectionRangeRequest>(handlers::handle_selection_range)\n             .on_sync::<lsp_ext::MatchingBrace>(handlers::handle_matching_brace)\n+            .on::<lsp_ext::FetchDependencyGraph>(handlers::fetch_dependency_graph)\n             .on::<lsp_ext::AnalyzerStatus>(handlers::handle_analyzer_status)\n             .on::<lsp_ext::SyntaxTree>(handlers::handle_syntax_tree)\n             .on::<lsp_ext::ViewHir>(handlers::handle_view_hir)"}, {"sha": "7fe32754c90303b82a650b6bd67c253e63761c15", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09e0a00d3648eb4080d16f07c6dae73f7c73c431/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/09e0a00d3648eb4080d16f07c6dae73f7c73c431/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=09e0a00d3648eb4080d16f07c6dae73f7c73c431", "patch": "@@ -272,19 +272,19 @@ export function revealDependency(ctx: CtxInit): Cmd {\n         const rootPath = vscode.workspace.workspaceFolders![0].uri.fsPath;\n         const documentPath = editor.document.uri.fsPath;\n         if (documentPath.startsWith(rootPath)) return;\n-        const dep = ctx.dependencies.getDependency(documentPath);\n+        const dep = ctx.dependencies?.getDependency(documentPath);\n         if (dep) {\n-            await ctx.treeView.reveal(dep, { select: true, expand: true });\n+            await ctx.treeView?.reveal(dep, { select: true, expand: true });\n         } else {\n             let documentPath = editor.document.uri.fsPath;\n             const parentChain: DependencyId[] = [{ id: documentPath.toLowerCase() }];\n             do {\n                 documentPath = path.dirname(documentPath);\n                 parentChain.push({ id: documentPath.toLowerCase() });\n-            } while (!ctx.dependencies.contains(documentPath));\n+            } while (!ctx.dependencies?.contains(documentPath));\n             parentChain.reverse();\n             for (const idx in parentChain) {\n-                await ctx.treeView.reveal(parentChain[idx], { select: true, expand: true });\n+                await ctx.treeView?.reveal(parentChain[idx], { select: true, expand: true });\n             }\n         }\n     };"}, {"sha": "d62716c26db3fc360f89c75a91ecdeaff3bfa808", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 33, "deletions": 15, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/09e0a00d3648eb4080d16f07c6dae73f7c73c431/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/09e0a00d3648eb4080d16f07c6dae73f7c73c431/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=09e0a00d3648eb4080d16f07c6dae73f7c73c431", "patch": "@@ -91,19 +91,25 @@ export class Ctx {\n     private commandFactories: Record<string, CommandFactory>;\n     private commandDisposables: Disposable[];\n     private unlinkedFiles: vscode.Uri[];\n-    readonly dependencies: RustDependenciesProvider;\n-    readonly treeView: vscode.TreeView<Dependency | DependencyFile | DependencyId>;\n+    private _dependencies: RustDependenciesProvider | undefined;\n+    private _treeView: vscode.TreeView<Dependency | DependencyFile | DependencyId> | undefined;\n \n     get client() {\n         return this._client;\n     }\n \n+    get treeView() {\n+        return this._treeView;\n+    }\n+\n+    get dependencies() {\n+        return this._dependencies;\n+    }\n+\n     constructor(\n         readonly extCtx: vscode.ExtensionContext,\n         commandFactories: Record<string, CommandFactory>,\n         workspace: Workspace,\n-        dependencies: RustDependenciesProvider,\n-        treeView: vscode.TreeView<Dependency | DependencyFile | DependencyId>\n     ) {\n         extCtx.subscriptions.push(this);\n         this.statusBar = vscode.window.createStatusBarItem(vscode.StatusBarAlignment.Left);\n@@ -112,9 +118,6 @@ export class Ctx {\n         this.commandDisposables = [];\n         this.commandFactories = commandFactories;\n         this.unlinkedFiles = [];\n-        this.dependencies = dependencies;\n-        this.treeView = treeView;\n-\n         this.state = new PersistentState(extCtx.globalState);\n         this.config = new Config(extCtx);\n \n@@ -123,13 +126,6 @@ export class Ctx {\n         this.setServerStatus({\n             health: \"stopped\",\n         });\n-        vscode.window.onDidChangeActiveTextEditor((e) => {\n-            if (e && isRustEditor(e)) {\n-                execRevealDependency(e).catch((reason) => {\n-                    void vscode.window.showErrorMessage(`Dependency error: ${reason}`);\n-                });\n-            }\n-        });\n     }\n \n     dispose() {\n@@ -267,6 +263,28 @@ export class Ctx {\n         }\n         await client.start();\n         this.updateCommands();\n+        this.prepareTreeDependenciesView(client);\n+    }\n+\n+    private prepareTreeDependenciesView(client: lc.LanguageClient) {\n+        const ctxInit: CtxInit = {\n+            ...this,\n+            client: client\n+        };\n+        const rootPath = vscode.workspace.workspaceFolders![0].uri.fsPath;\n+        this._dependencies = new RustDependenciesProvider(rootPath, ctxInit);\n+        this._treeView = vscode.window.createTreeView(\"rustDependencies\", {\n+            treeDataProvider: this._dependencies,\n+            showCollapseAll: true,\n+        });\n+\n+        vscode.window.onDidChangeActiveTextEditor((e) => {\n+            if (e && isRustEditor(e)) {\n+                execRevealDependency(e).catch((reason) => {\n+                    void vscode.window.showErrorMessage(`Dependency error: ${reason}`);\n+                });\n+            }\n+        });\n     }\n \n     async restart() {\n@@ -369,7 +387,7 @@ export class Ctx {\n                 statusBar.color = undefined;\n                 statusBar.backgroundColor = undefined;\n                 statusBar.command = \"rust-analyzer.stopServer\";\n-                this.dependencies.refresh();\n+                this.dependencies?.refresh();\n                 break;\n             case \"warning\":\n                 if (status.message) {"}, {"sha": "195f41417dd743f6d0190edae8a6df0c339edbb9", "filename": "editors/code/src/dependencies_provider.ts", "status": "modified", "additions": 18, "deletions": 59, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/09e0a00d3648eb4080d16f07c6dae73f7c73c431/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "raw_url": "https://github.com/rust-lang/rust/raw/09e0a00d3648eb4080d16f07c6dae73f7c73c431/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdependencies_provider.ts?ref=09e0a00d3648eb4080d16f07c6dae73f7c73c431", "patch": "@@ -1,23 +1,16 @@\n import * as vscode from \"vscode\";\n import * as fspath from \"path\";\n import * as fs from \"fs\";\n-import * as os from \"os\";\n-import { activeToolchain, Cargo, Crate, getRustcVersion } from \"./toolchain\";\n-import { Ctx } from \"./ctx\";\n-import { setFlagsFromString } from \"v8\";\n+import { CtxInit } from \"./ctx\";\n import * as ra from \"./lsp_ext\";\n-\n-const debugOutput = vscode.window.createOutputChannel(\"Debug\");\n+import { FetchDependencyGraphResult } from \"./lsp_ext\";\n \n export class RustDependenciesProvider\n-    implements vscode.TreeDataProvider<Dependency | DependencyFile>\n-{\n-    cargo: Cargo;\n+    implements vscode.TreeDataProvider<Dependency | DependencyFile> {\n     dependenciesMap: { [id: string]: Dependency | DependencyFile };\n-    ctx: Ctx;\n+    ctx: CtxInit;\n \n-    constructor(private readonly workspaceRoot: string, ctx: Ctx) {\n-        this.cargo = new Cargo(this.workspaceRoot || \".\", debugOutput);\n+    constructor(private readonly workspaceRoot: string, ctx: CtxInit) {\n         this.dependenciesMap = {};\n         this.ctx = ctx;\n     }\n@@ -62,7 +55,6 @@ export class RustDependenciesProvider\n                 void vscode.window.showInformationMessage(\"No dependency in empty workspace\");\n                 return Promise.resolve([]);\n             }\n-\n             if (element) {\n                 const files = fs.readdirSync(element.dependencyPath).map((fileName) => {\n                     const filePath = fspath.join(element.dependencyPath, fileName);\n@@ -81,59 +73,26 @@ export class RustDependenciesProvider\n     }\n \n     private async getRootDependencies(): Promise<Dependency[]> {\n-        const crates = await this.ctx.client.sendRequest(ra.fetchDependencyGraph, {});\n-\n-        const registryDir = fspath.join(os.homedir(), \".cargo\", \"registry\", \"src\");\n-        const basePath = fspath.join(registryDir, fs.readdirSync(registryDir)[0]);\n-        const deps = await this.getDepsInCartoTree(basePath);\n-        const stdlib = await this.getStdLib();\n-        this.dependenciesMap[stdlib.dependencyPath.toLowerCase()] = stdlib;\n-        return [stdlib].concat(deps);\n-    }\n-\n-    private async getStdLib(): Promise<Dependency> {\n-        const toolchain = await activeToolchain();\n-        const rustVersion = await getRustcVersion(os.homedir());\n-        const stdlibPath = fspath.join(\n-            os.homedir(),\n-            \".rustup\",\n-            \"toolchains\",\n-            toolchain,\n-            \"lib\",\n-            \"rustlib\",\n-            \"src\",\n-            \"rust\",\n-            \"library\"\n-        );\n-        const stdlib = new Dependency(\n-            \"stdlib\",\n-            rustVersion,\n-            stdlibPath,\n-            vscode.TreeItemCollapsibleState.Collapsed\n-        );\n-\n-        return stdlib;\n-    }\n-\n-    private async getDepsInCartoTree(basePath: string): Promise<Dependency[]> {\n-        const crates: Crate[] = await this.cargo.crates();\n-        const toDep = (moduleName: string, version: string): Dependency => {\n-            const cratePath = fspath.join(basePath, `${moduleName}-${version}`);\n-            return new Dependency(\n-                moduleName,\n-                version,\n-                cratePath,\n-                vscode.TreeItemCollapsibleState.Collapsed\n-            );\n-        };\n+        const dependenciesResult: FetchDependencyGraphResult = await this.ctx.client.sendRequest(ra.fetchDependencyGraph, {});\n+        const crates = dependenciesResult.crates;\n \n         const deps = crates.map((crate) => {\n-            const dep = toDep(crate.name, crate.version);\n+            const dep = this.toDep(crate.name, crate.version, crate.path);\n             this.dependenciesMap[dep.dependencyPath.toLowerCase()] = dep;\n             return dep;\n         });\n         return deps;\n     }\n+\n+    private toDep(moduleName: string, version: string, path: string): Dependency {\n+        // const cratePath = fspath.join(basePath, `${moduleName}-${version}`);\n+        return new Dependency(\n+            moduleName,\n+            version,\n+            path,\n+            vscode.TreeItemCollapsibleState.Collapsed\n+        );\n+    }\n }\n \n export class Dependency extends vscode.TreeItem {"}, {"sha": "771f6bcba458e5768114a47d5885d9ee618c3c95", "filename": "editors/code/src/toolchain.ts", "status": "modified", "additions": 1, "deletions": 74, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/09e0a00d3648eb4080d16f07c6dae73f7c73c431/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/09e0a00d3648eb4080d16f07c6dae73f7c73c431/editors%2Fcode%2Fsrc%2Ftoolchain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Ftoolchain.ts?ref=09e0a00d3648eb4080d16f07c6dae73f7c73c431", "patch": "@@ -5,14 +5,8 @@ import * as readline from \"readline\";\n import * as vscode from \"vscode\";\n import { execute, log, memoizeAsync } from \"./util\";\n \n-const TREE_LINE_PATTERN = new RegExp(/(.+)\\sv(\\d+\\.\\d+\\.\\d+)(?:\\s\\((.+)\\))?/);\n const TOOLCHAIN_PATTERN = new RegExp(/(.*)\\s\\(.*\\)/);\n \n-export interface Crate {\n-    name: string;\n-    version: string;\n-}\n-\n interface CompilationArtifact {\n     fileName: string;\n     name: string;\n@@ -30,7 +24,7 @@ export class Cargo {\n         readonly rootFolder: string,\n         readonly output: vscode.OutputChannel,\n         readonly env: Record<string, string>\n-    ) {}\n+    ) { }\n \n     // Made public for testing purposes\n     static artifactSpec(args: readonly string[]): ArtifactSpec {\n@@ -104,40 +98,6 @@ export class Cargo {\n         return artifacts[0].fileName;\n     }\n \n-    async crates(): Promise<Crate[]> {\n-        const pathToCargo = await cargoPath();\n-        return await new Promise((resolve, reject) => {\n-            const crates: Crate[] = [];\n-\n-            const cargo = cp.spawn(pathToCargo, [\"tree\", \"--prefix\", \"none\"], {\n-                stdio: [\"ignore\", \"pipe\", \"pipe\"],\n-                cwd: this.rootFolder,\n-            });\n-            const rl = readline.createInterface({ input: cargo.stdout });\n-            rl.on(\"line\", (line) => {\n-                const match = line.match(TREE_LINE_PATTERN);\n-                if (match) {\n-                    const name = match[1];\n-                    const version = match[2];\n-                    const extraInfo = match[3];\n-                    // ignore duplicates '(*)' and path dependencies\n-                    if (this.shouldIgnore(extraInfo)) {\n-                        return;\n-                    }\n-                    crates.push({ name, version });\n-                }\n-            });\n-            cargo.on(\"exit\", (exitCode, _) => {\n-                if (exitCode === 0) resolve(crates);\n-                else reject(new Error(`exit code: ${exitCode}.`));\n-            });\n-        });\n-    }\n-\n-    private shouldIgnore(extraInfo: string): boolean {\n-        return extraInfo !== undefined && (extraInfo === \"*\" || path.isAbsolute(extraInfo));\n-    }\n-\n     private async runCargo(\n         cargoArgs: string[],\n         onStdoutJson: (obj: any) => void,\n@@ -169,29 +129,6 @@ export class Cargo {\n     }\n }\n \n-export async function activeToolchain(): Promise<string> {\n-    const pathToRustup = await rustupPath();\n-    return await new Promise((resolve, reject) => {\n-        const execution = cp.spawn(pathToRustup, [\"show\", \"active-toolchain\"], {\n-            stdio: [\"ignore\", \"pipe\", \"pipe\"],\n-            cwd: os.homedir(),\n-        });\n-        const rl = readline.createInterface({ input: execution.stdout });\n-\n-        let currToolchain: string | undefined = undefined;\n-        rl.on(\"line\", (line) => {\n-            const match = line.match(TOOLCHAIN_PATTERN);\n-            if (match) {\n-                currToolchain = match[1];\n-            }\n-        });\n-        execution.on(\"exit\", (exitCode, _) => {\n-            if (exitCode === 0 && currToolchain) resolve(currToolchain);\n-            else reject(new Error(`exit code: ${exitCode}.`));\n-        });\n-    });\n-}\n-\n /** Mirrors `project_model::sysroot::discover_sysroot_dir()` implementation*/\n export async function getSysroot(dir: string): Promise<string> {\n     const rustcPath = await getPathForExecutable(\"rustc\");\n@@ -210,16 +147,6 @@ export async function getRustcId(dir: string): Promise<string> {\n     return rx.exec(data)![1];\n }\n \n-export async function getRustcVersion(dir: string): Promise<string> {\n-    const rustcPath = await getPathForExecutable(\"rustc\");\n-\n-    // do not memoize the result because the toolchain may change between runs\n-    const data = await execute(`${rustcPath} -V`, { cwd: dir });\n-    const rx = /(\\d\\.\\d+\\.\\d+)/;\n-\n-    return rx.exec(data)![1];\n-}\n-\n /** Mirrors `toolchain::cargo()` implementation */\n export function cargoPath(): Promise<string> {\n     return getPathForExecutable(\"cargo\");"}]}