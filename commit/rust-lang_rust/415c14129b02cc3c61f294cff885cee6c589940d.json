{"sha": "415c14129b02cc3c61f294cff885cee6c589940d", "node_id": "C_kwDOAAsO6NoAKDQxNWMxNDEyOWIwMmNjM2M2MWYyOTRjZmY4ODVjZWU2YzU4OTk0MGQ", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-01-20T20:59:19Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-01-21T18:35:20Z"}, "message": "rustc_metadata: Encode `doc(hidden)` flag to metadata\n\nTo retrieve these flags rustdoc currently has to mass decode full attributes for items in the whole crate tree, so it's better to pre-compute it in advance.\n\nThis is especially for short-term performance of https://github.com/rust-lang/rust/pull/107054 because resolver cannot use memoization of query results yet.", "tree": {"sha": "5e8746ed819e35bd3aa095d2760c2917230a6a6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e8746ed819e35bd3aa095d2760c2917230a6a6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/415c14129b02cc3c61f294cff885cee6c589940d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/415c14129b02cc3c61f294cff885cee6c589940d", "html_url": "https://github.com/rust-lang/rust/commit/415c14129b02cc3c61f294cff885cee6c589940d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/415c14129b02cc3c61f294cff885cee6c589940d/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "005fc0f00f2d4ceaf523b67a8f9c5665b8ac5baf", "url": "https://api.github.com/repos/rust-lang/rust/commits/005fc0f00f2d4ceaf523b67a8f9c5665b8ac5baf", "html_url": "https://github.com/rust-lang/rust/commit/005fc0f00f2d4ceaf523b67a8f9c5665b8ac5baf"}], "stats": {"total": 70, "additions": 52, "deletions": 18}, "files": [{"sha": "56b1078b7f36a41f8057ba33a2979f0e56054a1f", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/415c14129b02cc3c61f294cff885cee6c589940d/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/415c14129b02cc3c61f294cff885cee6c589940d/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=415c14129b02cc3c61f294cff885cee6c589940d", "patch": "@@ -4326,6 +4326,7 @@ dependencies = [\n name = \"rustc_metadata\"\n version = \"0.0.0\"\n dependencies = [\n+ \"bitflags\",\n  \"libloading\",\n  \"odht\",\n  \"rustc_ast\","}, {"sha": "bee5c8541d68ee9f5f580e80871ef486e9fe74d5", "filename": "compiler/rustc_metadata/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_metadata%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_metadata%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2FCargo.toml?ref=415c14129b02cc3c61f294cff885cee6c589940d", "patch": "@@ -6,6 +6,7 @@ edition = \"2021\"\n [lib]\n \n [dependencies]\n+bitflags = \"1.2.1\"\n libloading = \"0.7.1\"\n odht = { version = \"0.3.1\", features = [\"nightly\"] }\n snap = \"1\""}, {"sha": "44da3fbe300ca1cf4d4c167f1efb3c4a67df1e2c", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=415c14129b02cc3c61f294cff885cee6c589940d", "patch": "@@ -1594,8 +1594,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n             })\n     }\n \n-    fn get_may_have_doc_links(self, index: DefIndex) -> bool {\n-        self.root.tables.may_have_doc_links.get(self, index).is_some()\n+    fn get_attr_flags(self, index: DefIndex) -> AttrFlags {\n+        self.root.tables.attr_flags.get(self, index).unwrap_or(AttrFlags::empty())\n     }\n \n     fn get_is_intrinsic(self, index: DefIndex) -> bool {"}, {"sha": "2fa645cd9e33de1a4dfdf1f31362ee26392cffaf", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=415c14129b02cc3c61f294cff885cee6c589940d", "patch": "@@ -1,6 +1,7 @@\n use crate::creader::{CStore, LoadedMacro};\n use crate::foreign_modules;\n use crate::native_libs;\n+use crate::rmeta::AttrFlags;\n \n use rustc_ast as ast;\n use rustc_attr::Deprecation;\n@@ -338,6 +339,7 @@ provide! { tcx, def_id, other, cdata,\n     crate_extern_paths => { cdata.source().paths().cloned().collect() }\n     expn_that_defined => { cdata.get_expn_that_defined(def_id.index, tcx.sess) }\n     generator_diagnostic_data => { cdata.get_generator_diagnostic_data(tcx, def_id.index) }\n+    is_doc_hidden => { cdata.get_attr_flags(def_id.index).contains(AttrFlags::IS_DOC_HIDDEN) }\n }\n \n pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n@@ -425,7 +427,7 @@ pub(in crate::rmeta) fn provide(providers: &mut Providers) {\n                         return;\n                     }\n \n-                    if ty::util::is_doc_hidden(tcx, parent) {\n+                    if tcx.is_doc_hidden(parent) {\n                         fallback_map.push((def_id, parent));\n                         return;\n                     }\n@@ -631,7 +633,9 @@ impl CStore {\n     }\n \n     pub fn may_have_doc_links_untracked(&self, def_id: DefId) -> bool {\n-        self.get_crate_data(def_id.krate).get_may_have_doc_links(def_id.index)\n+        self.get_crate_data(def_id.krate)\n+            .get_attr_flags(def_id.index)\n+            .contains(AttrFlags::MAY_HAVE_DOC_LINKS)\n     }\n }\n "}, {"sha": "2ecaa33d4d315b604fb10bafd12345e923517652", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=415c14129b02cc3c61f294cff885cee6c589940d", "patch": "@@ -1111,15 +1111,26 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let tcx = self.tcx;\n         let mut is_public: Option<bool> = None;\n \n-        let mut attrs = tcx\n-            .hir()\n-            .attrs(tcx.hir().local_def_id_to_hir_id(def_id))\n+        let hir_attrs = tcx.hir().attrs(tcx.hir().local_def_id_to_hir_id(def_id));\n+        let mut attrs = hir_attrs\n             .iter()\n             .filter(move |attr| should_encode_attr(tcx, attr, def_id, &mut is_public));\n \n         record_array!(self.tables.attributes[def_id.to_def_id()] <- attrs.clone());\n+        let mut attr_flags = AttrFlags::empty();\n         if attrs.any(|attr| attr.may_have_doc_links()) {\n-            self.tables.may_have_doc_links.set(def_id.local_def_index, ());\n+            attr_flags |= AttrFlags::MAY_HAVE_DOC_LINKS;\n+        }\n+        if hir_attrs\n+            .iter()\n+            .filter(|attr| attr.has_name(sym::doc))\n+            .filter_map(|attr| attr.meta_item_list())\n+            .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))\n+        {\n+            attr_flags |= AttrFlags::IS_DOC_HIDDEN;\n+        }\n+        if !attr_flags.is_empty() {\n+            self.tables.attr_flags.set(def_id.local_def_index, attr_flags);\n         }\n     }\n "}, {"sha": "69690264ae4ea5e96d7ffd1642d322028effd3ef", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=415c14129b02cc3c61f294cff885cee6c589940d", "patch": "@@ -395,7 +395,7 @@ define_tables! {\n     def_path_hashes: Table<DefIndex, DefPathHash>,\n     proc_macro_quoted_spans: Table<usize, LazyValue<Span>>,\n     generator_diagnostic_data: Table<DefIndex, LazyValue<GeneratorDiagnosticData<'static>>>,\n-    may_have_doc_links: Table<DefIndex, ()>,\n+    attr_flags: Table<DefIndex, AttrFlags>,\n     variant_data: Table<DefIndex, LazyValue<VariantData>>,\n     assoc_container: Table<DefIndex, ty::AssocItemContainer>,\n     // Slot is full when macro is macro_rules.\n@@ -418,6 +418,13 @@ struct VariantData {\n     is_non_exhaustive: bool,\n }\n \n+bitflags::bitflags! {\n+    pub struct AttrFlags: u8 {\n+        const MAY_HAVE_DOC_LINKS = 1 << 0;\n+        const IS_DOC_HIDDEN      = 1 << 1;\n+    }\n+}\n+\n // Tags used for encoding Spans:\n const TAG_VALID_SPAN_LOCAL: u8 = 0;\n const TAG_VALID_SPAN_FOREIGN: u8 = 1;\n@@ -440,4 +447,5 @@ trivially_parameterized_over_tcx! {\n     IncoherentImpls,\n     CrateRoot,\n     CrateDep,\n+    AttrFlags,\n }"}, {"sha": "dc003227d40bd1d63ff84d2d245d196524776029", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=415c14129b02cc3c61f294cff885cee6c589940d", "patch": "@@ -199,6 +199,20 @@ impl FixedSizeEncoding for Option<RawDefId> {\n     }\n }\n \n+impl FixedSizeEncoding for Option<AttrFlags> {\n+    type ByteArray = [u8; 1];\n+\n+    #[inline]\n+    fn from_bytes(b: &[u8; 1]) -> Self {\n+        (b[0] != 0).then(|| AttrFlags::from_bits_truncate(b[0]))\n+    }\n+\n+    #[inline]\n+    fn write_to_bytes(self, b: &mut [u8; 1]) {\n+        b[0] = self.map_or(0, |flags| flags.bits())\n+    }\n+}\n+\n impl FixedSizeEncoding for Option<()> {\n     type ByteArray = [u8; 1];\n "}, {"sha": "7db86c8d0d4545f355f1b94f7734c713883dbbc9", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=415c14129b02cc3c61f294cff885cee6c589940d", "patch": "@@ -1157,6 +1157,7 @@ rustc_queries! {\n     /// Determines whether an item is annotated with `doc(hidden)`.\n     query is_doc_hidden(def_id: DefId) -> bool {\n         desc { |tcx| \"checking whether `{}` is `doc(hidden)`\", tcx.def_path_str(def_id) }\n+        separate_provide_extern\n     }\n \n     /// Determines whether an item is annotated with `doc(notable_trait)`."}, {"sha": "60076c8cb5f9936d0e16e93798b279fb0d2a0fdc", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c14129b02cc3c61f294cff885cee6c589940d/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=415c14129b02cc3c61f294cff885cee6c589940d", "patch": "@@ -1310,7 +1310,8 @@ pub fn reveal_opaque_types_in_bounds<'tcx>(\n }\n \n /// Determines whether an item is annotated with `doc(hidden)`.\n-pub fn is_doc_hidden(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+fn is_doc_hidden(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+    assert!(def_id.is_local());\n     tcx.get_attrs(def_id, sym::doc)\n         .filter_map(|attr| attr.meta_item_list())\n         .any(|items| items.iter().any(|item| item.has_name(sym::hidden)))"}, {"sha": "a020ccd53b8422b55cc80ef0a930856572cdbc1a", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/415c14129b02cc3c61f294cff885cee6c589940d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415c14129b02cc3c61f294cff885cee6c589940d/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=415c14129b02cc3c61f294cff885cee6c589940d", "patch": "@@ -2498,14 +2498,7 @@ impl Import {\n     }\n \n     pub(crate) fn imported_item_is_doc_hidden(&self, tcx: TyCtxt<'_>) -> bool {\n-        match self.source.did {\n-            Some(did) => tcx\n-                .get_attrs(did, sym::doc)\n-                .filter_map(ast::Attribute::meta_item_list)\n-                .flatten()\n-                .has_word(sym::hidden),\n-            None => false,\n-        }\n+        self.source.did.map_or(false, |did| tcx.is_doc_hidden(did))\n     }\n }\n "}]}