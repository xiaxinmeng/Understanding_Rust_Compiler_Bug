{"sha": "dc628b4f6728a858b9a2715e2d2046b4758bb6e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNjI4YjRmNjcyOGE4NThiOWEyNzE1ZTJkMjA0NmI0NzU4YmI2ZTQ=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-03-07T22:32:42Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-03-23T13:43:27Z"}, "message": "cleanup", "tree": {"sha": "d4e5d837803f3d534134d9f8de4283915a24f2ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4e5d837803f3d534134d9f8de4283915a24f2ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc628b4f6728a858b9a2715e2d2046b4758bb6e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc628b4f6728a858b9a2715e2d2046b4758bb6e4", "html_url": "https://github.com/rust-lang/rust/commit/dc628b4f6728a858b9a2715e2d2046b4758bb6e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc628b4f6728a858b9a2715e2d2046b4758bb6e4/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bce61cd4b20ae0661a1a7bd656cebc999b5a2ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bce61cd4b20ae0661a1a7bd656cebc999b5a2ee", "html_url": "https://github.com/rust-lang/rust/commit/6bce61cd4b20ae0661a1a7bd656cebc999b5a2ee"}], "stats": {"total": 37, "additions": 24, "deletions": 13}, "files": [{"sha": "095c92ff10d86c3b68c5788c311f58a90efffcb9", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc628b4f6728a858b9a2715e2d2046b4758bb6e4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc628b4f6728a858b9a2715e2d2046b4758bb6e4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=dc628b4f6728a858b9a2715e2d2046b4758bb6e4", "patch": "@@ -1133,6 +1133,10 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n     checked_type_of(tcx, def_id, true).unwrap()\n }\n \n+/// Same as [`type_of`] but returns [`Option`] instead of failing.\n+///\n+/// If you want to fail anyway, you can set the `fail` parameter to true, but in this case,\n+/// you'd better just call [`type_of`] directly.\n pub fn checked_type_of<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n@@ -1382,14 +1386,14 @@ pub fn checked_type_of<'a, 'tcx>(\n                                     for param in &generics.params {\n                                         if let ty::GenericParamDefKind::Const = param.kind {\n                                             if param_index == arg_index {\n-                                                return tcx.type_of(param.def_id);\n+                                                return Some(tcx.type_of(param.def_id));\n                                             }\n                                             param_index += 1;\n                                         }\n                                     }\n                                     // This is no generic parameter associated with the arg. This is\n                                     // probably from an extra arg where one is not needed.\n-                                    return tcx.types.err;\n+                                    return Some(tcx.types.err);\n                                 }\n                                 Def::Err => tcx.types.err,\n                                 x => {"}, {"sha": "e7277308cd9942fdb5be7279c7ac88cb0350ab6b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/dc628b4f6728a858b9a2715e2d2046b4758bb6e4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc628b4f6728a858b9a2715e2d2046b4758bb6e4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=dc628b4f6728a858b9a2715e2d2046b4758bb6e4", "patch": "@@ -1474,7 +1474,7 @@ impl GenericParamDefKind {\n         }\n     }\n \n-    pub fn get_type(&self, cx: &DocContext<'_, '_, '_>) -> Option<Type> {\n+    pub fn get_type(&self, cx: &DocContext<'_>) -> Option<Type> {\n         match *self {\n             GenericParamDefKind::Type { did, .. } => {\n                 rustc_typeck::checked_type_of(cx.tcx, did, false).map(|t| t.clean(cx))\n@@ -1505,7 +1505,7 @@ impl GenericParamDef {\n         self.kind.is_type()\n     }\n \n-    pub fn get_type(&self, cx: &DocContext<'_, '_, '_>) -> Option<Type> {\n+    pub fn get_type(&self, cx: &DocContext<'_>) -> Option<Type> {\n         self.kind.get_type(cx)\n     }\n \n@@ -1750,12 +1750,16 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n     }\n }\n \n-// The point is to replace bounds with types.\n+/// The point of this function is to replace bounds with types.\n+///\n+/// i.e. `[T, U]` when you have the following bounds: `T: Display, U: Option<T>` will return\n+/// `[Display, Option]` (we just returns the list of the types, we don't care about the\n+/// wrapped types in here).\n fn get_real_types(\n     generics: &Generics,\n     arg: &Type,\n-    cx: &DocContext<'_, '_, '_>,\n-) -> Vec<Type> {\n+    cx: &DocContext<'_>,\n+) -> FxHashSet<Type> {\n     let arg_s = arg.to_string();\n     let mut res = Vec::new();\n     if arg.is_full_generic() {\n@@ -1776,7 +1780,7 @@ fn get_real_types(\n                             if let Some(ty) = x.get_type(cx) {\n                                 let mut adds = get_real_types(generics, &ty, cx);\n                                 if !adds.is_empty() {\n-                                    res.append(&mut adds);\n+                                    res.extend(adds);\n                                 } else if !ty.is_full_generic() {\n                                     res.push(ty);\n                                 }\n@@ -1794,7 +1798,7 @@ fn get_real_types(\n                 if let Some(ty) = bound.get_trait_type() {\n                     let mut adds = get_real_types(generics, &ty, cx);\n                     if !adds.is_empty() {\n-                        res.append(&mut adds);\n+                        res.extend(adds);\n                     } else if !ty.is_full_generic() {\n                         res.push(ty.clone());\n                     }\n@@ -1808,7 +1812,7 @@ fn get_real_types(\n                 if gen.is_full_generic() {\n                     let mut adds = get_real_types(generics, gen, cx);\n                     if !adds.is_empty() {\n-                        res.append(&mut adds);\n+                        res.extend(adds);\n                     }\n                 } else {\n                     res.push(gen.clone());\n@@ -1819,10 +1823,14 @@ fn get_real_types(\n     res\n }\n \n+/// Return the full list of types when bounds have been resolved.\n+///\n+/// i.e. `fn foo<A: Display, B: Option<A>>(x: u32, y: B)` will return\n+/// `[u32, Display, Option]`.\n pub fn get_all_types(\n     generics: &Generics,\n     decl: &FnDecl,\n-    cx: &DocContext<'_, '_, '_>,\n+    cx: &DocContext<'_>,\n ) -> (Vec<Type>, Vec<Type>) {\n     let mut all_types = Vec::new();\n     for arg in decl.inputs.values.iter() {\n@@ -1831,7 +1839,7 @@ pub fn get_all_types(\n         }\n         let mut args = get_real_types(generics, &arg.type_, cx);\n         if !args.is_empty() {\n-            all_types.append(&mut args);\n+            all_types.extend(args);\n         } else {\n             all_types.push(arg.type_.clone());\n         }"}, {"sha": "b0f0a26bd27baf41e2abca51d39fdee586379782", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dc628b4f6728a858b9a2715e2d2046b4758bb6e4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc628b4f6728a858b9a2715e2d2046b4758bb6e4/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=dc628b4f6728a858b9a2715e2d2046b4758bb6e4", "patch": "@@ -5052,7 +5052,6 @@ fn get_index_search_type(item: &clean::Item) -> Option<IndexItemFunctionType> {\n         Some(output)\n     };\n \n-    println!(\"===> {:?}\", output);\n     Some(IndexItemFunctionType { inputs, output })\n }\n "}]}