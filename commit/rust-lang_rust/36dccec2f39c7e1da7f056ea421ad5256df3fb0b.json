{"sha": "36dccec2f39c7e1da7f056ea421ad5256df3fb0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2ZGNjZWMyZjM5YzdlMWRhN2YwNTZlYTQyMWFkNTI1NmRmM2ZiMGI=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-04-26T22:18:02Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-04-29T12:45:23Z"}, "message": "Currently, LLVM lowers a cttz8 on x86_64 to these instructions:\n\n```asm\n    movzbl      %dil, %eax\n    bsfl        %eax, %eax\n    movl        $32, %ecx\n    cmovnel     %eax, %ecx\n    cmpl        $32, %ecx\n    movl        $8, %eax\n    cmovnel     %ecx, %eax\n```\n\nwhich has some unnecessary overhead, having two conditional moves.\n\nTo improve the codegen, we can zero extend the 8 bit integer, then set\nbit 8 and perform a cttz operation on the extended value. That way\nthere's no conditional operation involved at all.", "tree": {"sha": "7a3cf65a4e09ba2c61f5425126e254faa2e1060f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a3cf65a4e09ba2c61f5425126e254faa2e1060f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36dccec2f39c7e1da7f056ea421ad5256df3fb0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36dccec2f39c7e1da7f056ea421ad5256df3fb0b", "html_url": "https://github.com/rust-lang/rust/commit/36dccec2f39c7e1da7f056ea421ad5256df3fb0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36dccec2f39c7e1da7f056ea421ad5256df3fb0b/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f991d1fc27a176254ebfe99ed7e5a339cb9c7e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f991d1fc27a176254ebfe99ed7e5a339cb9c7e2", "html_url": "https://github.com/rust-lang/rust/commit/8f991d1fc27a176254ebfe99ed7e5a339cb9c7e2"}], "stats": {"total": 15, "additions": 14, "deletions": 1}, "files": [{"sha": "b8638c5b09be257ea87e9c7db993ea0c930328d5", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/36dccec2f39c7e1da7f056ea421ad5256df3fb0b/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36dccec2f39c7e1da7f056ea421ad5256df3fb0b/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=36dccec2f39c7e1da7f056ea421ad5256df3fb0b", "patch": "@@ -745,7 +745,20 @@ macro_rules! uint_impl {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         #[inline]\n         pub fn trailing_zeros(self) -> u32 {\n-            unsafe { $cttz(self as $ActualT) as u32 }\n+            // As of LLVM 3.6 the codegen for the zero-safe cttz8 intrinsic\n+            // emits two conditional moves on x86_64. By promoting the value to\n+            // u16 and setting bit 8, we get better code without any conditional\n+            // operations.\n+            // FIXME: There's a LLVM patch (http://reviews.llvm.org/D9284)\n+            // pending, remove this workaround once LLVM generates better code\n+            // for cttz8.\n+            unsafe {\n+                if $BITS == 8 {\n+                    intrinsics::cttz16(self as u16 | 0x100) as u32\n+                } else {\n+                    $cttz(self as $ActualT) as u32\n+                }\n+            }\n         }\n \n         /// Shifts the bits to the left by a specified amount, `n`,"}]}