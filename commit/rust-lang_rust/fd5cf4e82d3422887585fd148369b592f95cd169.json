{"sha": "fd5cf4e82d3422887585fd148369b592f95cd169", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkNWNmNGU4MmQzNDIyODg3NTg1ZmQxNDgzNjliNTkyZjk1Y2QxNjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-10T19:15:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-10T19:15:37Z"}, "message": "Auto merge of #7060 - daxpedda:debug-assert-panic-in-result-fn, r=flip1995\n\nRemove `debug_assert` from `panic_in_result_fn`\n\nI couldn't find any documentation on `debug_assert` that should be remove.\nIn my humble opinion, I would also like to argue that `todo` and `unreachable` shouldn't trigger this lint?\n\nRelated: https://github.com/rust-lang/rust-clippy/issues/6082\n\nr? `@flip1995`\n\nchangelog: Change `panic_in_result_fn` to ignore `debug_assert` and co macros", "tree": {"sha": "dacd684c99431f4c1fd03961a4ffdb98c5df0a62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dacd684c99431f4c1fd03961a4ffdb98c5df0a62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd5cf4e82d3422887585fd148369b592f95cd169", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5cf4e82d3422887585fd148369b592f95cd169", "html_url": "https://github.com/rust-lang/rust/commit/fd5cf4e82d3422887585fd148369b592f95cd169", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd5cf4e82d3422887585fd148369b592f95cd169/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7c2c44e76c626afcd594ecc193ed446729152db", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7c2c44e76c626afcd594ecc193ed446729152db", "html_url": "https://github.com/rust-lang/rust/commit/f7c2c44e76c626afcd594ecc193ed446729152db"}, {"sha": "271c163ba319ce8518913057cef32978f38b2f6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/271c163ba319ce8518913057cef32978f38b2f6a", "html_url": "https://github.com/rust-lang/rust/commit/271c163ba319ce8518913057cef32978f38b2f6a"}], "stats": {"total": 88, "additions": 12, "deletions": 76}, "files": [{"sha": "cef74d87e7c016a8348dc5081fd6fddde0d01521", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd5cf4e82d3422887585fd148369b592f95cd169/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5cf4e82d3422887585fd148369b592f95cd169/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=fd5cf4e82d3422887585fd148369b592f95cd169", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{find_macro_calls, return_ty};\n+use clippy_utils::{find_macro_calls, is_expn_of, return_ty};\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_lint::{LateContext, LateLintPass};\n@@ -52,7 +52,7 @@ impl<'tcx> LateLintPass<'tcx> for PanicInResultFn {\n }\n \n fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, body: &'tcx hir::Body<'tcx>) {\n-    let panics = find_macro_calls(\n+    let mut panics = find_macro_calls(\n         &[\n             \"unimplemented\",\n             \"unreachable\",\n@@ -61,12 +61,10 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, body: &'tcx hir\n             \"assert\",\n             \"assert_eq\",\n             \"assert_ne\",\n-            \"debug_assert\",\n-            \"debug_assert_eq\",\n-            \"debug_assert_ne\",\n         ],\n         body,\n     );\n+    panics.retain(|span| is_expn_of(*span, \"debug_assert\").is_none());\n     if !panics.is_empty() {\n         span_lint_and_then(\n             cx,"}, {"sha": "c4fcd7e70944c5ebc974916f88b81877a6c83102", "filename": "tests/ui/panic_in_result_fn_debug_assertions.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fd5cf4e82d3422887585fd148369b592f95cd169/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd5cf4e82d3422887585fd148369b592f95cd169/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.rs?ref=fd5cf4e82d3422887585fd148369b592f95cd169", "patch": "@@ -1,44 +1,39 @@\n #![warn(clippy::panic_in_result_fn)]\n #![allow(clippy::unnecessary_wraps)]\n \n+// debug_assert should never trigger the `panic_in_result_fn` lint\n+\n struct A;\n \n impl A {\n-    fn result_with_debug_assert_with_message(x: i32) -> Result<bool, String> // should emit lint\n-    {\n+    fn result_with_debug_assert_with_message(x: i32) -> Result<bool, String> {\n         debug_assert!(x == 5, \"wrong argument\");\n         Ok(true)\n     }\n \n-    fn result_with_debug_assert_eq(x: i32) -> Result<bool, String> // should emit lint\n-    {\n+    fn result_with_debug_assert_eq(x: i32) -> Result<bool, String> {\n         debug_assert_eq!(x, 5);\n         Ok(true)\n     }\n \n-    fn result_with_debug_assert_ne(x: i32) -> Result<bool, String> // should emit lint\n-    {\n+    fn result_with_debug_assert_ne(x: i32) -> Result<bool, String> {\n         debug_assert_ne!(x, 1);\n         Ok(true)\n     }\n \n-    fn other_with_debug_assert_with_message(x: i32) // should not emit lint\n-    {\n+    fn other_with_debug_assert_with_message(x: i32) {\n         debug_assert!(x == 5, \"wrong argument\");\n     }\n \n-    fn other_with_debug_assert_eq(x: i32) // should not emit lint\n-    {\n+    fn other_with_debug_assert_eq(x: i32) {\n         debug_assert_eq!(x, 5);\n     }\n \n-    fn other_with_debug_assert_ne(x: i32) // should not emit lint\n-    {\n+    fn other_with_debug_assert_ne(x: i32) {\n         debug_assert_ne!(x, 1);\n     }\n \n-    fn result_without_banned_functions() -> Result<bool, String> // should not emit lint\n-    {\n+    fn result_without_banned_functions() -> Result<bool, String> {\n         let debug_assert = \"debug_assert!\";\n         println!(\"No {}\", debug_assert);\n         Ok(true)"}, {"sha": "ec18e89698c56d6d2cc59a158adcdb3a0053e166", "filename": "tests/ui/panic_in_result_fn_debug_assertions.stderr", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/f7c2c44e76c626afcd594ecc193ed446729152db/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f7c2c44e76c626afcd594ecc193ed446729152db/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpanic_in_result_fn_debug_assertions.stderr?ref=f7c2c44e76c626afcd594ecc193ed446729152db", "patch": "@@ -1,57 +0,0 @@\n-error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn_debug_assertions.rs:7:5\n-   |\n-LL | /     fn result_with_debug_assert_with_message(x: i32) -> Result<bool, String> // should emit lint\n-LL | |     {\n-LL | |         debug_assert!(x == 5, \"wrong argument\");\n-LL | |         Ok(true)\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: `-D clippy::panic-in-result-fn` implied by `-D warnings`\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n-note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn_debug_assertions.rs:9:9\n-   |\n-LL |         debug_assert!(x == 5, \"wrong argument\");\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn_debug_assertions.rs:13:5\n-   |\n-LL | /     fn result_with_debug_assert_eq(x: i32) -> Result<bool, String> // should emit lint\n-LL | |     {\n-LL | |         debug_assert_eq!(x, 5);\n-LL | |         Ok(true)\n-LL | |     }\n-   | |_____^\n-   |\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n-note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn_debug_assertions.rs:15:9\n-   |\n-LL |         debug_assert_eq!(x, 5);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: used `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertion in a function that returns `Result`\n-  --> $DIR/panic_in_result_fn_debug_assertions.rs:19:5\n-   |\n-LL | /     fn result_with_debug_assert_ne(x: i32) -> Result<bool, String> // should emit lint\n-LL | |     {\n-LL | |         debug_assert_ne!(x, 1);\n-LL | |         Ok(true)\n-LL | |     }\n-   | |_____^\n-   |\n-   = help: `unimplemented!()`, `unreachable!()`, `todo!()`, `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing\n-note: return Err() instead of panicking\n-  --> $DIR/panic_in_result_fn_debug_assertions.rs:21:9\n-   |\n-LL |         debug_assert_ne!(x, 1);\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 3 previous errors\n-"}]}