{"sha": "406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNmZlN2UzYzJjZjNlMzM5NzYzYWVhMmEyNjM1NTliOGE4ZTZkODc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-09-30T12:13:40Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-10-01T13:52:39Z"}, "message": "Rollup merge of #34764 - pnkfelix:attrs-on-generic-formals, r=eddyb\n\n First step for #34761", "tree": {"sha": "1687c31700872c8587edfee7bd50510e17a75e7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1687c31700872c8587edfee7bd50510e17a75e7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "html_url": "https://github.com/rust-lang/rust/commit/406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "259d1fcd478f868a9980cdce63f7556f30d55b90", "url": "https://api.github.com/repos/rust-lang/rust/commits/259d1fcd478f868a9980cdce63f7556f30d55b90", "html_url": "https://github.com/rust-lang/rust/commit/259d1fcd478f868a9980cdce63f7556f30d55b90"}, {"sha": "3a9b7be10b8e32d014008f9fde276cd032aa4e4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a9b7be10b8e32d014008f9fde276cd032aa4e4a", "html_url": "https://github.com/rust-lang/rust/commit/3a9b7be10b8e32d014008f9fde276cd032aa4e4a"}], "stats": {"total": 403, "additions": 389, "deletions": 14}, "files": [{"sha": "fcf2d32ded960aab2c61ccf47baf3ce785a8f91d", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "patch": "@@ -121,6 +121,7 @@ impl fmt::Debug for Lifetime {\n /// A lifetime definition, e.g. `'a: 'b+'c+'d`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct LifetimeDef {\n+    pub attrs: ThinVec<Attribute>,\n     pub lifetime: Lifetime,\n     pub bounds: Vec<Lifetime>\n }\n@@ -370,6 +371,7 @@ pub type TyParamBounds = P<[TyParamBound]>;\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TyParam {\n+    pub attrs: ThinVec<Attribute>,\n     pub ident: Ident,\n     pub id: NodeId,\n     pub bounds: TyParamBounds,"}, {"sha": "bdbc45471bba29c115693a563cb9c29db8da5294", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "patch": "@@ -73,6 +73,7 @@ pub trait AstBuilder {\n     fn typaram(&self,\n                span: Span,\n                id: ast::Ident,\n+               attrs: Vec<ast::Attribute>,\n                bounds: ast::TyParamBounds,\n                default: Option<P<ast::Ty>>) -> ast::TyParam;\n \n@@ -83,6 +84,7 @@ pub trait AstBuilder {\n     fn lifetime_def(&self,\n                     span: Span,\n                     name: ast::Name,\n+                    attrs: Vec<ast::Attribute>,\n                     bounds: Vec<ast::Lifetime>)\n                     -> ast::LifetimeDef;\n \n@@ -452,11 +454,13 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn typaram(&self,\n                span: Span,\n                id: ast::Ident,\n+               attrs: Vec<ast::Attribute>,\n                bounds: ast::TyParamBounds,\n                default: Option<P<ast::Ty>>) -> ast::TyParam {\n         ast::TyParam {\n             ident: id,\n             id: ast::DUMMY_NODE_ID,\n+            attrs: attrs.into(),\n             bounds: bounds,\n             default: default,\n             span: span\n@@ -503,9 +507,11 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     fn lifetime_def(&self,\n                     span: Span,\n                     name: ast::Name,\n+                    attrs: Vec<ast::Attribute>,\n                     bounds: Vec<ast::Lifetime>)\n                     -> ast::LifetimeDef {\n         ast::LifetimeDef {\n+            attrs: attrs.into(),\n             lifetime: self.lifetime(span, name),\n             bounds: bounds\n         }"}, {"sha": "079d7175822cc9f7d4afc401d50ac84fc36faba8", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "patch": "@@ -303,6 +303,9 @@ declare_features! (\n     // Used to identify the `compiler_builtins` crate\n     // rustc internal\n     (active, compiler_builtins, \"1.13.0\", None),\n+\n+    // Allows attributes on lifetime/type formal parameters in generics (RFC 1327)\n+    (active, generic_param_attrs, \"1.11.0\", Some(34761)),\n );\n \n declare_features! (\n@@ -1220,6 +1223,24 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n \n         visit::walk_vis(self, vis)\n     }\n+\n+    fn visit_generics(&mut self, g: &ast::Generics) {\n+        for t in &g.ty_params {\n+            if !t.attrs.is_empty() {\n+                gate_feature_post!(&self, generic_param_attrs, t.attrs[0].span,\n+                                   \"attributes on type parameter bindings are experimental\");\n+            }\n+        }\n+        visit::walk_generics(self, g)\n+    }\n+\n+    fn visit_lifetime_def(&mut self, lifetime_def: &ast::LifetimeDef) {\n+        if !lifetime_def.attrs.is_empty() {\n+            gate_feature_post!(&self, generic_param_attrs, lifetime_def.attrs[0].span,\n+                               \"attributes on lifetime bindings are experimental\");\n+        }\n+        visit::walk_lifetime_def(self, lifetime_def)\n+    }\n }\n \n pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute]) -> Features {"}, {"sha": "08c0637b2d90255f666d7d0293966ff7c6c5e660", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "patch": "@@ -662,8 +662,13 @@ pub fn noop_fold_ty_param_bound<T>(tpb: TyParamBound, fld: &mut T)\n }\n \n pub fn noop_fold_ty_param<T: Folder>(tp: TyParam, fld: &mut T) -> TyParam {\n-    let TyParam {id, ident, bounds, default, span} = tp;\n+    let TyParam {attrs, id, ident, bounds, default, span} = tp;\n+    let attrs: Vec<_> = attrs.into();\n     TyParam {\n+        attrs: attrs.into_iter()\n+            .flat_map(|x| fld.fold_attribute(x).into_iter())\n+            .collect::<Vec<_>>()\n+            .into(),\n         id: fld.new_id(id),\n         ident: ident,\n         bounds: fld.fold_bounds(bounds),\n@@ -687,7 +692,12 @@ pub fn noop_fold_lifetime<T: Folder>(l: Lifetime, fld: &mut T) -> Lifetime {\n \n pub fn noop_fold_lifetime_def<T: Folder>(l: LifetimeDef, fld: &mut T)\n                                          -> LifetimeDef {\n+    let attrs: Vec<_> = l.attrs.into();\n     LifetimeDef {\n+        attrs: attrs.into_iter()\n+            .flat_map(|x| fld.fold_attribute(x).into_iter())\n+            .collect::<Vec<_>>()\n+            .into(),\n         lifetime: fld.fold_lifetime(l.lifetime),\n         bounds: fld.fold_lifetimes(l.bounds),\n     }"}, {"sha": "9b6002b2469f2991411f4457295bf10aa79c70cc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 53, "deletions": 9, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "patch": "@@ -1179,7 +1179,7 @@ impl<'a> Parser<'a> {\n         let lo = self.span.lo;\n \n         let (name, node) = if self.eat_keyword(keywords::Type) {\n-            let TyParam {ident, bounds, default, ..} = self.parse_ty_param()?;\n+            let TyParam {ident, bounds, default, ..} = self.parse_ty_param(vec![])?;\n             self.expect(&token::Semi)?;\n             (ident, TraitItemKind::Type(bounds, default))\n         } else if self.is_const_item() {\n@@ -1910,10 +1910,22 @@ impl<'a> Parser<'a> {\n \n     /// Parses `lifetime_defs = [ lifetime_defs { ',' lifetime_defs } ]` where `lifetime_def  =\n     /// lifetime [':' lifetimes]`\n-    pub fn parse_lifetime_defs(&mut self) -> PResult<'a, Vec<ast::LifetimeDef>> {\n-\n+    ///\n+    /// If `followed_by_ty_params` is None, then we are in a context\n+    /// where only lifetime parameters are allowed, and thus we should\n+    /// error if we encounter attributes after the bound lifetimes.\n+    ///\n+    /// If `followed_by_ty_params` is Some(r), then there may be type\n+    /// parameter bindings after the lifetimes, so we should pass\n+    /// along the parsed attributes to be attached to the first such\n+    /// type parmeter.\n+    pub fn parse_lifetime_defs(&mut self,\n+                               followed_by_ty_params: Option<&mut Vec<ast::Attribute>>)\n+                               -> PResult<'a, Vec<ast::LifetimeDef>>\n+    {\n         let mut res = Vec::new();\n         loop {\n+            let attrs = self.parse_outer_attributes()?;\n             match self.token {\n                 token::Lifetime(_) => {\n                     let lifetime = self.parse_lifetime()?;\n@@ -1923,11 +1935,20 @@ impl<'a> Parser<'a> {\n                         } else {\n                             Vec::new()\n                         };\n-                    res.push(ast::LifetimeDef { lifetime: lifetime,\n+                    res.push(ast::LifetimeDef { attrs: attrs.into(),\n+                                                lifetime: lifetime,\n                                                 bounds: bounds });\n                 }\n \n                 _ => {\n+                    if let Some(recv) = followed_by_ty_params {\n+                        assert!(recv.is_empty());\n+                        *recv = attrs;\n+                    } else {\n+                        let msg = \"trailing attribute after lifetime parameters\";\n+                        return Err(self.fatal(msg));\n+                    }\n+                    debug!(\"parse_lifetime_defs ret {:?}\", res);\n                     return Ok(res);\n                 }\n             }\n@@ -4228,7 +4249,7 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Matches typaram = IDENT (`?` unbound)? optbounds ( EQ ty )?\n-    fn parse_ty_param(&mut self) -> PResult<'a, TyParam> {\n+    fn parse_ty_param(&mut self, preceding_attrs: Vec<ast::Attribute>) -> PResult<'a, TyParam> {\n         let span = self.span;\n         let ident = self.parse_ident()?;\n \n@@ -4242,6 +4263,7 @@ impl<'a> Parser<'a> {\n         };\n \n         Ok(TyParam {\n+            attrs: preceding_attrs.into(),\n             ident: ident,\n             id: ast::DUMMY_NODE_ID,\n             bounds: bounds,\n@@ -4262,11 +4284,27 @@ impl<'a> Parser<'a> {\n         let span_lo = self.span.lo;\n \n         if self.eat(&token::Lt) {\n-            let lifetime_defs = self.parse_lifetime_defs()?;\n+            // Upon encountering attribute in generics list, we do not\n+            // know if it is attached to lifetime or to type param.\n+            //\n+            // Solution: 1. eagerly parse attributes in tandem with\n+            // lifetime defs, 2. store last set of parsed (and unused)\n+            // attributes in `attrs`, and 3. pass in those attributes\n+            // when parsing formal type param after lifetime defs.\n+            let mut attrs = vec![];\n+            let lifetime_defs = self.parse_lifetime_defs(Some(&mut attrs))?;\n             let mut seen_default = false;\n+            let mut post_lifetime_attrs = Some(attrs);\n             let ty_params = self.parse_seq_to_gt(Some(token::Comma), |p| {\n                 p.forbid_lifetime()?;\n-                let ty_param = p.parse_ty_param()?;\n+                // Move out of `post_lifetime_attrs` if present. O/w\n+                // not first type param: parse attributes anew.\n+                let attrs = match post_lifetime_attrs.as_mut() {\n+                    None => p.parse_outer_attributes()?,\n+                    Some(attrs) => mem::replace(attrs, vec![]),\n+                };\n+                post_lifetime_attrs = None;\n+                let ty_param = p.parse_ty_param(attrs)?;\n                 if ty_param.default.is_some() {\n                     seen_default = true;\n                 } else if seen_default {\n@@ -4276,6 +4314,12 @@ impl<'a> Parser<'a> {\n                 }\n                 Ok(ty_param)\n             })?;\n+            if let Some(attrs) = post_lifetime_attrs {\n+                if !attrs.is_empty() {\n+                    self.span_err(attrs[0].span,\n+                                  \"trailing attribute after lifetime parameters\");\n+                }\n+            }\n             Ok(ast::Generics {\n                 lifetimes: lifetime_defs,\n                 ty_params: ty_params,\n@@ -4423,7 +4467,7 @@ impl<'a> Parser<'a> {\n                     let bound_lifetimes = if self.eat_keyword(keywords::For) {\n                         // Higher ranked constraint.\n                         self.expect(&token::Lt)?;\n-                        let lifetime_defs = self.parse_lifetime_defs()?;\n+                        let lifetime_defs = self.parse_lifetime_defs(None)?;\n                         self.expect_gt()?;\n                         lifetime_defs\n                     } else {\n@@ -4991,7 +5035,7 @@ impl<'a> Parser<'a> {\n     fn parse_late_bound_lifetime_defs(&mut self) -> PResult<'a, Vec<ast::LifetimeDef>> {\n         if self.eat_keyword(keywords::For) {\n             self.expect(&token::Lt)?;\n-            let lifetime_defs = self.parse_lifetime_defs()?;\n+            let lifetime_defs = self.parse_lifetime_defs(None)?;\n             self.expect_gt()?;\n             Ok(lifetime_defs)\n         } else {"}, {"sha": "7fb3e5c6bee1d719d5b68267d25aa9f693afbff2", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "patch": "@@ -201,6 +201,7 @@ pub fn walk_lifetime<V: Visitor>(visitor: &mut V, lifetime: &Lifetime) {\n pub fn walk_lifetime_def<V: Visitor>(visitor: &mut V, lifetime_def: &LifetimeDef) {\n     visitor.visit_lifetime(&lifetime_def.lifetime);\n     walk_list!(visitor, visit_lifetime, &lifetime_def.bounds);\n+    walk_list!(visitor, visit_attribute, &*lifetime_def.attrs);\n }\n \n pub fn walk_poly_trait_ref<V>(visitor: &mut V, trait_ref: &PolyTraitRef, _: &TraitBoundModifier)\n@@ -474,6 +475,7 @@ pub fn walk_generics<V: Visitor>(visitor: &mut V, generics: &Generics) {\n         visitor.visit_ident(param.span, param.ident);\n         walk_list!(visitor, visit_ty_param_bound, &param.bounds);\n         walk_list!(visitor, visit_ty, &param.default);\n+        walk_list!(visitor, visit_attribute, &*param.attrs);\n     }\n     walk_list!(visitor, visit_lifetime_def, &generics.lifetimes);\n     for predicate in &generics.where_clause.predicates {"}, {"sha": "bc47d8f4e613741977ac0dc0a52c3b78acd40aed", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "patch": "@@ -536,7 +536,7 @@ impl<'a> TraitDef<'a> {\n                 bounds.push((*declared_bound).clone());\n             }\n \n-            cx.typaram(self.span, ty_param.ident, P::from_vec(bounds), None)\n+            cx.typaram(self.span, ty_param.ident, vec![], P::from_vec(bounds), None)\n         }));\n \n         // and similarly for where clauses"}, {"sha": "4749d082bc0ec3dcd0723e57a000862ed3e866f7", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "patch": "@@ -194,6 +194,7 @@ impl<'a> Ty<'a> {\n fn mk_ty_param(cx: &ExtCtxt,\n                span: Span,\n                name: &str,\n+               attrs: &[ast::Attribute],\n                bounds: &[Path],\n                self_ident: Ident,\n                self_generics: &Generics)\n@@ -204,7 +205,7 @@ fn mk_ty_param(cx: &ExtCtxt,\n             cx.typarambound(path)\n         })\n         .collect();\n-    cx.typaram(span, cx.ident_of(name), bounds, None)\n+    cx.typaram(span, cx.ident_of(name), attrs.to_owned(), bounds, None)\n }\n \n fn mk_generics(lifetimes: Vec<ast::LifetimeDef>, ty_params: Vec<ast::TyParam>, span: Span)\n@@ -246,15 +247,15 @@ impl<'a> LifetimeBounds<'a> {\n                 let bounds = bounds.iter()\n                     .map(|b| cx.lifetime(span, cx.ident_of(*b).name))\n                     .collect();\n-                cx.lifetime_def(span, cx.ident_of(*lt).name, bounds)\n+                cx.lifetime_def(span, cx.ident_of(*lt).name, vec![], bounds)\n             })\n             .collect();\n         let ty_params = self.bounds\n             .iter()\n             .map(|t| {\n                 match *t {\n                     (ref name, ref bounds) => {\n-                        mk_ty_param(cx, span, *name, bounds, self_ty, self_generics)\n+                        mk_ty_param(cx, span, *name, &[], bounds, self_ty, self_generics)\n                     }\n                 }\n             })"}, {"sha": "c902cfdd756df839d288ac406290b2a1f7332cec", "filename": "src/test/compile-fail/attr-on-generic-formals-are-visited.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-are-visited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-are-visited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-are-visited.rs?ref=406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "patch": "@@ -0,0 +1,75 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test ensures that attributes on formals in generic parameter\n+// lists are included when we are checking for unstable attributes.\n+//\n+// Note that feature(generic_param_attrs) *is* enabled here. We are\n+// checking feature-gating of the attributes themselves, not the\n+// capability to parse such attributes in that context.\n+\n+#![feature(generic_param_attrs)]\n+#![allow(dead_code)]\n+\n+struct StLt<#[lt_struct] 'a>(&'a u32);\n+//~^ ERROR The attribute `lt_struct` is currently unknown to the compiler\n+struct StTy<#[ty_struct] I>(I);\n+//~^ ERROR The attribute `ty_struct` is currently unknown to the compiler\n+\n+enum EnLt<#[lt_enum] 'b> { A(&'b u32), B }\n+//~^ ERROR The attribute `lt_enum` is currently unknown to the compiler\n+enum EnTy<#[ty_enum] J> { A(J), B }\n+//~^ ERROR The attribute `ty_enum` is currently unknown to the compiler\n+\n+trait TrLt<#[lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+//~^ ERROR The attribute `lt_trait` is currently unknown to the compiler\n+trait TrTy<#[ty_trait] K> { fn foo(&self, _: K); }\n+//~^ ERROR The attribute `ty_trait` is currently unknown to the compiler\n+\n+type TyLt<#[lt_type] 'd> = &'d u32;\n+//~^ ERROR The attribute `lt_type` is currently unknown to the compiler\n+type TyTy<#[ty_type] L> = (L, );\n+//~^ ERROR The attribute `ty_type` is currently unknown to the compiler\n+\n+impl<#[lt_inherent] 'e> StLt<'e> { }\n+//~^ ERROR The attribute `lt_inherent` is currently unknown to the compiler\n+impl<#[ty_inherent] M> StTy<M> { }\n+//~^ ERROR The attribute `ty_inherent` is currently unknown to the compiler\n+\n+impl<#[lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+    //~^ ERROR The attribute `lt_impl_for` is currently unknown to the compiler\n+    fn foo(&self, _: &'f [u32]) -> &'f u32 { loop { } }\n+}\n+impl<#[ty_impl_for] N> TrTy<N> for StTy<N> {\n+    //~^ ERROR The attribute `ty_impl_for` is currently unknown to the compiler\n+    fn foo(&self, _: N) { }\n+}\n+\n+fn f_lt<#[lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+//~^ ERROR The attribute `lt_fn` is currently unknown to the compiler\n+fn f_ty<#[ty_fn] O>(_: O) { }\n+//~^ ERROR The attribute `ty_fn` is currently unknown to the compiler\n+\n+impl<I> StTy<I> {\n+    fn m_lt<#[lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+    //~^ ERROR The attribute `lt_meth` is currently unknown to the compiler\n+    fn m_ty<#[ty_meth] P>(_: P) { }\n+    //~^ ERROR The attribute `ty_meth` is currently unknown to the compiler\n+}\n+\n+fn hof_lt<Q>(_: Q)\n+    where Q: for <#[lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+    //~^ ERROR The attribute `lt_hof` is currently unknown to the compiler\n+{\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "944802f450a6d0eee317fd634188dd448d9d8944", "filename": "src/test/compile-fail/attr-on-generic-formals-wo-feature-gate.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-wo-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-wo-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-on-generic-formals-wo-feature-gate.rs?ref=406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "patch": "@@ -0,0 +1,76 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test ensures that attributes on formals in generic parameter\n+// lists are rejected if feature(generic_param_attrs) is not enabled.\n+//\n+// (We are prefixing all tested features with `rustc_`, to ensure that\n+// the attributes themselves won't be rejected by the compiler when\n+// using `rustc_attrs` feature. There is a separate compile-fail/ test\n+// ensuring that the attribute feature-gating works in this context.)\n+\n+#![feature(rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct StLt<#[rustc_lt_struct] 'a>(&'a u32);\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+struct StTy<#[rustc_ty_struct] I>(I);\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+enum EnLt<#[rustc_lt_enum] 'b> { A(&'b u32), B }\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+enum EnTy<#[rustc_ty_enum] J> { A(J), B }\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+trait TrLt<#[rustc_lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+trait TrTy<#[rustc_ty_trait] K> { fn foo(&self, _: K); }\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+type TyLt<#[rustc_lt_type] 'd> = &'d u32;\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+type TyTy<#[rustc_ty_type] L> = (L, );\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+impl<#[rustc_lt_inherent] 'e> StLt<'e> { }\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+impl<#[rustc_ty_inherent] M> StTy<M> { }\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+impl<#[rustc_lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+    //~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+    fn foo(&self, _: &'f [u32]) -> &'f u32 { loop { } }\n+}\n+impl<#[rustc_ty_impl_for] N> TrTy<N> for StTy<N> {\n+    //~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+    fn foo(&self, _: N) { }\n+}\n+\n+fn f_lt<#[rustc_lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+//~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+fn f_ty<#[rustc_ty_fn] O>(_: O) { }\n+//~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+\n+impl<I> StTy<I> {\n+    fn m_lt<#[rustc_lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+    //~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+    fn m_ty<#[rustc_ty_meth] P>(_: P) { }\n+    //~^ ERROR attributes on type parameter bindings are experimental (see issue #34761)\n+}\n+\n+fn hof_lt<Q>(_: Q)\n+    where Q: for <#[rustc_lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+    //~^ ERROR attributes on lifetime bindings are experimental (see issue #34761)\n+{\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "53e287cda208adbcee9881156b28a584350d9816", "filename": "src/test/compile-fail/attrs-with-no-formal-in-generics-1.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-1.rs?ref=406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks variations on `<#[attr] 'a, #[oops]>`, where\n+// `#[oops]` is left dangling (that is, it is unattached, with no\n+// formal binding following it).\n+\n+#![feature(generic_param_attrs, rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct RefIntPair<'a, 'b>(&'a u32, &'b u32);\n+\n+impl<#[rustc_1] 'a, 'b, #[oops]> RefIntPair<'a, 'b> {\n+    //~^ ERROR trailing attribute after lifetime parameters\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "a38a7bfb9378526d090f42bdcd6f4a01a20ea162", "filename": "src/test/compile-fail/attrs-with-no-formal-in-generics-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-2.rs?ref=406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks variations on `<#[attr] 'a, #[oops]>`, where\n+// `#[oops]` is left dangling (that is, it is unattached, with no\n+// formal binding following it).\n+\n+#![feature(generic_param_attrs, rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct RefAny<'a, T>(&'a T);\n+\n+impl<#[rustc_1] 'a, #[rustc_2] T, #[oops]> RefAny<'a, T> {\n+    //~^ ERROR expected identifier, found `>`\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "e7d5b94d24226b1ceaee9813f9837550fc7b286a", "filename": "src/test/compile-fail/attrs-with-no-formal-in-generics-3.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattrs-with-no-formal-in-generics-3.rs?ref=406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test checks variations on `<#[attr] 'a, #[oops]>`, where\n+// `#[oops]` is left dangling (that is, it is unattached, with no\n+// formal binding following it).\n+\n+struct RefIntPair<'a, 'b>(&'a u32, &'b u32);\n+\n+fn hof_lt<Q>(_: Q)\n+    where Q: for <#[rustc_1] 'a, 'b, #[oops]> Fn(RefIntPair<'a,'b>) -> &'b u32\n+    //~^ ERROR trailing attribute after lifetime parameters\n+{\n+\n+}\n+\n+fn main() {\n+\n+}"}, {"sha": "5985284d8496b83676a84daf4cc5116554800705", "filename": "src/test/run-pass/attr-on-generic-formals.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406fe7e3c2cf3e339763aea2a263559b8a8e6d87/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-on-generic-formals.rs?ref=406fe7e3c2cf3e339763aea2a263559b8a8e6d87", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This test ensures we can attach attributes to the formals in all\n+// places where generic parameter lists occur, assuming appropriate\n+// feature gates are enabled.\n+//\n+// (We are prefixing all tested features with `rustc_`, to ensure that\n+// the attributes themselves won't be rejected by the compiler when\n+// using `rustc_attrs` feature. There is a separate compile-fail/ test\n+// ensuring that the attribute feature-gating works in this context.)\n+\n+#![feature(generic_param_attrs, rustc_attrs)]\n+#![allow(dead_code)]\n+\n+struct StLt<#[rustc_lt_struct] 'a>(&'a u32);\n+struct StTy<#[rustc_ty_struct] I>(I);\n+\n+enum EnLt<#[rustc_lt_enum] 'b> { A(&'b u32), B }\n+enum EnTy<#[rustc_ty_enum] J> { A(J), B }\n+\n+trait TrLt<#[rustc_lt_trait] 'c> { fn foo(&self, _: &'c [u32]) -> &'c u32; }\n+trait TrTy<#[rustc_ty_trait] K> { fn foo(&self, _: K); }\n+\n+type TyLt<#[rustc_lt_type] 'd> = &'d u32;\n+type TyTy<#[rustc_ty_type] L> = (L, );\n+\n+impl<#[rustc_lt_inherent] 'e> StLt<'e> { }\n+impl<#[rustc_ty_inherent] M> StTy<M> { }\n+\n+impl<#[rustc_lt_impl_for] 'f> TrLt<'f> for StLt<'f> {\n+    fn foo(&self, _: &'f [u32]) -> &'f u32 { loop { } }\n+}\n+impl<#[rustc_ty_impl_for] N> TrTy<N> for StTy<N> {\n+    fn foo(&self, _: N) { }\n+}\n+\n+fn f_lt<#[rustc_lt_fn] 'g>(_: &'g [u32]) -> &'g u32 { loop { } }\n+fn f_ty<#[rustc_ty_fn] O>(_: O) { }\n+\n+impl<I> StTy<I> {\n+    fn m_lt<#[rustc_lt_meth] 'h>(_: &'h [u32]) -> &'h u32 { loop { } }\n+    fn m_ty<#[rustc_ty_meth] P>(_: P) { }\n+}\n+\n+fn hof_lt<Q>(_: Q)\n+    where Q: for <#[rustc_lt_hof] 'i> Fn(&'i [u32]) -> &'i u32\n+{\n+}\n+\n+fn main() {\n+\n+}"}]}