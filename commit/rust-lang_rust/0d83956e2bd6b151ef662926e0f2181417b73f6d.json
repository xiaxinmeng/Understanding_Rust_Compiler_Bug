{"sha": "0d83956e2bd6b151ef662926e0f2181417b73f6d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkODM5NTZlMmJkNmIxNTFlZjY2MjkyNmUwZjIxODE0MTdiNzNmNmQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-17T04:17:39Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-08-17T18:05:20Z"}, "message": "Refactor resolve_import\n\nIssue #817", "tree": {"sha": "b5e4bc985ee05952d7051e86f0254d0ff1c60e69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5e4bc985ee05952d7051e86f0254d0ff1c60e69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d83956e2bd6b151ef662926e0f2181417b73f6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d83956e2bd6b151ef662926e0f2181417b73f6d", "html_url": "https://github.com/rust-lang/rust/commit/0d83956e2bd6b151ef662926e0f2181417b73f6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d83956e2bd6b151ef662926e0f2181417b73f6d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "206495b0a92cfb084b52b92a506d25a756fc9830", "url": "https://api.github.com/repos/rust-lang/rust/commits/206495b0a92cfb084b52b92a506d25a756fc9830", "html_url": "https://github.com/rust-lang/rust/commit/206495b0a92cfb084b52b92a506d25a756fc9830"}], "stats": {"total": 55, "additions": 13, "deletions": 42}, "files": [{"sha": "9c1ad96a66be2d0bdde0b9fb693b18ea312336c2", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 13, "deletions": 42, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0d83956e2bd6b151ef662926e0f2181417b73f6d/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d83956e2bd6b151ef662926e0f2181417b73f6d/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=0d83956e2bd6b151ef662926e0f2181417b73f6d", "patch": "@@ -61,9 +61,7 @@ tag scope {\n type scopes = list<scope>;\n \n tag import_state {\n-    todo(@ast::view_item, scopes); // only used for explicit imports\n-    todo_from(@ast::view_item, ast::import_ident, scopes);\n-\n+    todo(ast::node_id, ast::ident, [ast::ident], codemap::span, scopes);\n     resolving(span);\n     resolved(option::t<def>,\n               /* value */\n@@ -173,13 +171,15 @@ fn map_crate(e: &@env, c: &@ast::crate) {\n                        glob_imported_names: new_str_hash::<import_state>()});\n     fn index_vi(e: @env, i: &@ast::view_item, sc: &scopes, v: &vt<scopes>) {\n         alt i.node {\n-          ast::view_item_import(_, ids, id) {\n-            e.imports.insert(id, todo(i, sc));\n+          ast::view_item_import(name, ids, id) {\n+            e.imports.insert(id, todo(id, name, ids, i.span, sc));\n           }\n           ast::view_item_import_from(mod_path, idents, id) {\n             for ident in idents {\n                 e.imports.insert(ident.node.id,\n-                                 todo_from(i, ident, sc));\n+                                 todo(ident.node.id, ident.node.name,\n+                                        mod_path + ~[ident.node.name],\n+                                        ident.span, sc));\n             }\n           }\n           _ { }\n@@ -251,23 +251,9 @@ fn resolve_imports(e: &env) {\n     for each it: @{key: ast::node_id, val: import_state} in e.imports.items()\n              {\n         alt it.val {\n-          todo(item, sc) {\n-            alt item.node {\n-              ast::view_item_import(name, ids, id) {\n-                resolve_import(e, local_def(id),\n-                               name, ids, item.span, sc);\n-              }\n-            }\n-          }\n-          todo_from(item, ident, sc) {\n-              alt item.node {\n-                ast::view_item_import_from(mod_path, idents, _) {\n-                  resolve_import(e, local_def(ident.node.id),\n-                                 ident.node.name,\n-                                 mod_path + ~[ident.node.name],\n-                                 ident.span, sc);\n-                }\n-              }\n+          todo(node_id, name, path, span, scopes) {\n+            resolve_import(e, local_def(node_id),\n+                           name, path, span, scopes);\n           }\n           resolved(_, _, _) { }\n         }\n@@ -947,24 +933,9 @@ fn found_view_item(e: &env, vi: @ast::view_item, ns: namespace) ->\n \n fn lookup_import(e: &env, defid: def_id, ns: namespace) -> option::t<def> {\n     alt e.imports.get(defid.node) {\n-      todo(item, sc) {\n-        alt item.node {\n-          ast::view_item_import(name, ids, id) {\n-            resolve_import(e, local_def(id),\n-                           name, ids, item.span, sc);\n-          }\n-        }\n-        ret lookup_import(e, defid, ns);\n-      }\n-      todo_from(item, ident, sc) {\n-        alt item.node {\n-          ast::view_item_import_from(mod_path, idents, _) {\n-            resolve_import(e, local_def(ident.node.id),\n-                           ident.node.name,\n-                           mod_path + ~[ident.node.name],\n-                           ident.span, sc);\n-          }\n-        }\n+      todo(node_id, name, path, span, scopes) {\n+        resolve_import(e, local_def(node_id),\n+                       name, path, span, scopes);\n         ret lookup_import(e, defid, ns);\n       }\n       resolving(sp) { e.sess.span_err(sp, \"cyclic import\"); ret none; }\n@@ -1051,7 +1022,7 @@ fn lookup_glob_in_mod(e: &env, info: @indexed_mod, sp: &span, id: &ident,\n         info.glob_imported_names.insert(id, resolved(val, typ, md));\n     }\n     alt info.glob_imported_names.get(id) {\n-      todo(_, _) { e.sess.bug(\"Shouldn't've put a todo in.\"); }\n+      todo(_, _, _, _, _) { e.sess.bug(\"Shouldn't've put a todo in.\"); }\n       resolving(sp) {\n         ret none::<def>; //circularity is okay in import globs\n "}]}