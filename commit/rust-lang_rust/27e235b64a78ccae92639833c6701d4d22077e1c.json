{"sha": "27e235b64a78ccae92639833c6701d4d22077e1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3ZTIzNWI2NGE3OGNjYWU5MjYzOTgzM2M2NzAxZDRkMjIwNzdlMWM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-11T16:36:42Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-02-19T18:02:51Z"}, "message": "libsyntax and librustc: minor cleanup", "tree": {"sha": "2ccc17a3dacf6f28fe088de8ae31b1c4b6549827", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ccc17a3dacf6f28fe088de8ae31b1c4b6549827"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27e235b64a78ccae92639833c6701d4d22077e1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27e235b64a78ccae92639833c6701d4d22077e1c", "html_url": "https://github.com/rust-lang/rust/commit/27e235b64a78ccae92639833c6701d4d22077e1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27e235b64a78ccae92639833c6701d4d22077e1c/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a5b8e4aba6b28670116897774afde88cf5bee11", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a5b8e4aba6b28670116897774afde88cf5bee11", "html_url": "https://github.com/rust-lang/rust/commit/1a5b8e4aba6b28670116897774afde88cf5bee11"}], "stats": {"total": 27, "additions": 11, "deletions": 16}, "files": [{"sha": "8569415e29ede5a4a4fe78bbbe5678379ce6be35", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/27e235b64a78ccae92639833c6701d4d22077e1c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e235b64a78ccae92639833c6701d4d22077e1c/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=27e235b64a78ccae92639833c6701d4d22077e1c", "patch": "@@ -62,7 +62,7 @@ pub fn anon_src() -> ~str { ~\"<anon>\" }\n \n pub fn source_name(input: input) -> ~str {\n     match input {\n-      file_input(ref ifile) => (*ifile).to_str(),\n+      file_input(ref ifile) => ifile.to_str(),\n       str_input(_) => anon_src()\n     }\n }\n@@ -112,9 +112,9 @@ pub fn default_configuration(sess: Session, +argv0: ~str, input: input) ->\n pub fn append_configuration(+cfg: ast::crate_cfg, +name: ~str)\n                          -> ast::crate_cfg {\n     if attr::contains_name(cfg, name) {\n-        return cfg;\n+        cfg\n     } else {\n-        return vec::append_one(cfg, attr::mk_word_item(name));\n+        vec::append_one(cfg, attr::mk_word_item(name))\n     }\n }\n "}, {"sha": "66ccbd97e0dd52de6b76ba825a80ec75fe4bee96", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/27e235b64a78ccae92639833c6701d4d22077e1c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e235b64a78ccae92639833c6701d4d22077e1c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=27e235b64a78ccae92639833c6701d4d22077e1c", "patch": "@@ -1124,7 +1124,7 @@ fn encode_crate_deps(ecx: @encode_ctxt,\n         type numdep = decoder::crate_dep;\n \n         // Pull the cnums and name,vers,hash out of cstore\n-        let mut deps: ~[numdep] = ~[];\n+        let mut deps = ~[];\n         do cstore::iter_crate_data(cstore) |key, val| {\n             let dep = {cnum: key,\n                        name: ecx.tcx.sess.ident_of(/*bad*/copy val.name),\n@@ -1134,10 +1134,7 @@ fn encode_crate_deps(ecx: @encode_ctxt,\n         };\n \n         // Sort by cnum\n-        pure fn lteq(kv1: &numdep, kv2: &numdep) -> bool {\n-            kv1.cnum <= kv2.cnum\n-        }\n-        std::sort::quick_sort(deps, lteq);\n+        std::sort::quick_sort(deps, |kv1, kv2| kv1.cnum <= kv2.cnum);\n \n         // Sanity-check the crate numbers\n         let mut expected_cnum = 1;\n@@ -1147,7 +1144,7 @@ fn encode_crate_deps(ecx: @encode_ctxt,\n         }\n \n         // mut -> immutable hack for vec::map\n-        return vec::slice(deps, 0u, vec::len(deps)).to_vec();\n+        deps.slice(0, deps.len())\n     }\n \n     // We're just going to write a list of crate 'name-hash-version's, with"}, {"sha": "8ba232a5aa93bdd63c4deff2ddc26a9afda0fc18", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/27e235b64a78ccae92639833c6701d4d22077e1c/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e235b64a78ccae92639833c6701d4d22077e1c/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=27e235b64a78ccae92639833c6701d4d22077e1c", "patch": "@@ -267,7 +267,7 @@ pub fn sort_meta_items(+items: ~[@ast::meta_item]) -> ~[@ast::meta_item] {\n     }\n \n     // This is sort of stupid here, converting to a vec of mutables and back\n-    let mut v: ~[@ast::meta_item] = items;\n+    let mut v = items;\n     std::sort::quick_sort(v, lteq);\n \n     // There doesn't seem to be a more optimal way to do this\n@@ -371,7 +371,7 @@ pub fn require_unique_names(diagnostic: span_handler,\n         let name = get_meta_item_name(*meta);\n \n         // FIXME: How do I silence the warnings? --pcw (#2619)\n-        if !set.insert(name) {\n+        if !set.insert(copy name) {\n             diagnostic.span_fatal(meta.span,\n                                   fmt!(\"duplicate meta item `%s`\", name));\n         }"}, {"sha": "a8d8205d79ef743460eb004661f5b7ca1f24d8c0", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/27e235b64a78ccae92639833c6701d4d22077e1c/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27e235b64a78ccae92639833c6701d4d22077e1c/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=27e235b64a78ccae92639833c6701d4d22077e1c", "patch": "@@ -13,6 +13,7 @@ use core::prelude::*;\n use ast::{crate, expr_, expr_mac, mac_invoc_tt};\n use ast::{tt_delim, tt_tok, item_mac, stmt_, stmt_mac, stmt_expr, stmt_semi};\n use ast;\n+use attr;\n use codemap::{span, ExpandedFrom};\n use ext::base::*;\n use fold::*;\n@@ -99,11 +100,8 @@ pub fn expand_mod_items(exts: HashMap<~str, SyntaxExtension>, cx: ext_ctxt,\n     // the item into a new set of items.\n     let new_items = do vec::flat_map(module_.items) |item| {\n         do vec::foldr(item.attrs, ~[*item]) |attr, items| {\n-            let mname = match attr.node.value.node {\n-              ast::meta_word(ref n) => (*n),\n-              ast::meta_name_value(ref n, _) => (*n),\n-              ast::meta_list(ref n, _) => (*n)\n-            };\n+            let mname = attr::get_attr_name(attr);\n+\n             match exts.find(&mname) {\n               None | Some(NormalTT(_)) | Some(ItemTT(*)) => items,\n               Some(ItemDecorator(dec_fn)) => {"}]}