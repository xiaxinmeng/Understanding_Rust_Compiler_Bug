{"sha": "494af379c455f6c8d24adb9fc1793411ea671b6a", "node_id": "C_kwDOAAsO6NoAKDQ5NGFmMzc5YzQ1NWY2YzhkMjRhZGI5ZmMxNzkzNDExZWE2NzFiNmE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-31T18:17:32Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-09-13T17:18:24Z"}, "message": "Use def_span for external requirements.", "tree": {"sha": "48389cb85d94db3e53ce3c6821d9fc875b486bd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48389cb85d94db3e53ce3c6821d9fc875b486bd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/494af379c455f6c8d24adb9fc1793411ea671b6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/494af379c455f6c8d24adb9fc1793411ea671b6a", "html_url": "https://github.com/rust-lang/rust/commit/494af379c455f6c8d24adb9fc1793411ea671b6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/494af379c455f6c8d24adb9fc1793411ea671b6a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7712825cc0d7f8d3fcf0028761cac6d6539bad14", "url": "https://api.github.com/repos/rust-lang/rust/commits/7712825cc0d7f8d3fcf0028761cac6d6539bad14", "html_url": "https://github.com/rust-lang/rust/commit/7712825cc0d7f8d3fcf0028761cac6d6539bad14"}], "stats": {"total": 558, "additions": 137, "deletions": 421}, "files": [{"sha": "12b2481cc7907ba6ec21a707632428a17945efeb", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -389,8 +389,9 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n     // viewing the intraprocedural state, the -Zdump-mir output is\n     // better.\n \n+    let def_span = tcx.def_span(body.source.def_id());\n     let mut err = if let Some(closure_region_requirements) = closure_region_requirements {\n-        let mut err = tcx.sess.diagnostic().span_note_diag(body.span, \"external requirements\");\n+        let mut err = tcx.sess.diagnostic().span_note_diag(def_span, \"external requirements\");\n \n         regioncx.annotate(tcx, &mut err);\n \n@@ -409,7 +410,7 @@ pub(super) fn dump_annotation<'a, 'tcx>(\n \n         err\n     } else {\n-        let mut err = tcx.sess.diagnostic().span_note_diag(body.span, \"no external requirements\");\n+        let mut err = tcx.sess.diagnostic().span_note_diag(def_span, \"no external requirements\");\n         regioncx.annotate(tcx, &mut err);\n \n         err"}, {"sha": "59b848ea85ce1a78e5c4def7b67b180c66334e4f", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -2,7 +2,7 @@ note: no external requirements\n   --> $DIR/escape-argument-callee.rs:26:38\n    |\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n-   |                                      ^^^^^^^^^^^^^\n+   |                                      ^^^^^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n@@ -22,14 +22,8 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n note: no external requirements\n   --> $DIR/escape-argument-callee.rs:20:1\n    |\n-LL | / fn test() {\n-LL | |     let x = 44;\n-LL | |     let mut p = &x;\n-LL | |\n-...  |\n-LL | |     deref(p);\n-LL | | }\n-   | |_^\n+LL | fn test() {\n+   | ^^^^^^^^^\n    |\n    = note: defining type: test\n "}, {"sha": "ff4e8e590e5a69c13f345c45e75ddbba3be8b124", "filename": "src/test/ui/nll/closure-requirements/escape-argument.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -2,7 +2,7 @@ note: no external requirements\n   --> $DIR/escape-argument.rs:26:38\n    |\n LL |         let mut closure = expect_sig(|p, y| *p = y);\n-   |                                      ^^^^^^^^^^^^^\n+   |                                      ^^^^^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n@@ -13,14 +13,8 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n note: no external requirements\n   --> $DIR/escape-argument.rs:20:1\n    |\n-LL | / fn test() {\n-LL | |     let x = 44;\n-LL | |     let mut p = &x;\n-LL | |\n-...  |\n-LL | |     deref(p);\n-LL | | }\n-   | |_^\n+LL | fn test() {\n+   | ^^^^^^^^^\n    |\n    = note: defining type: test\n "}, {"sha": "4fbd5eb19a56c4168c9986709e685bb8ba949ae1", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-nested.stderr", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-nested.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/escape-upvar-nested.rs:21:32\n    |\n LL |             let mut closure1 = || p = &y;\n-   |                                ^^^^^^^^^\n+   |                                ^^\n    |\n    = note: defining type: test::{closure#0}::{closure#0} with closure substs [\n                i16,\n@@ -15,12 +15,8 @@ LL |             let mut closure1 = || p = &y;\n note: external requirements\n   --> $DIR/escape-upvar-nested.rs:20:27\n    |\n-LL |           let mut closure = || {\n-   |  ___________________________^\n-LL | |             let mut closure1 = || p = &y;\n-LL | |             closure1();\n-LL | |         };\n-   | |_________^\n+LL |         let mut closure = || {\n+   |                           ^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n@@ -33,14 +29,8 @@ LL | |         };\n note: no external requirements\n   --> $DIR/escape-upvar-nested.rs:13:1\n    |\n-LL | / fn test() {\n-LL | |     let x = 44;\n-LL | |     let mut p = &x;\n-LL | |\n-...  |\n-LL | |     deref(p);\n-LL | | }\n-   | |_^\n+LL | fn test() {\n+   | ^^^^^^^^^\n    |\n    = note: defining type: test\n "}, {"sha": "bc1ceac5bf01ebd42936b90e5dc75fda23231b05", "filename": "src/test/ui/nll/closure-requirements/escape-upvar-ref.stderr", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-upvar-ref.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/escape-upvar-ref.rs:23:27\n    |\n LL |         let mut closure = || p = &y;\n-   |                           ^^^^^^^^^\n+   |                           ^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n@@ -15,14 +15,8 @@ LL |         let mut closure = || p = &y;\n note: no external requirements\n   --> $DIR/escape-upvar-ref.rs:17:1\n    |\n-LL | / fn test() {\n-LL | |     let x = 44;\n-LL | |     let mut p = &x;\n-LL | |\n-...  |\n-LL | |     deref(p);\n-LL | | }\n-   | |_^\n+LL | fn test() {\n+   | ^^^^^^^^^\n    |\n    = note: defining type: test\n "}, {"sha": "0d94fca2823e5aa74b0fed3ed1ab842b08d22dba", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -1,12 +1,8 @@\n note: no external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:43:9\n    |\n-LL | /         |_outlives1, _outlives2, _outlives3, x, y| {\n-LL | |             // Only works if 'x: 'y:\n-LL | |             let p = x.get();\n-LL | |             demand_y(x, y, p)\n-LL | |         },\n-   | |_________^\n+LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n@@ -31,14 +27,8 @@ LL |             demand_y(x, y, p)\n note: no external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:38:1\n    |\n-LL | / fn supply<'a, 'b, 'c>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>, cell_c: Cell<&'c u32>) {\n-LL | |     establish_relationships(\n-LL | |         cell_a,\n-LL | |         cell_b,\n-...  |\n-LL | |     );\n-LL | | }\n-   | |_^\n+LL | fn supply<'a, 'b, 'c>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>, cell_c: Cell<&'c u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply\n "}, {"sha": "435a5353340daabd14b26371e7b9e4b39573813a", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-ref.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-ref.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -1,13 +1,8 @@\n note: external requirements\n   --> $DIR/propagate-approximated-ref.rs:43:47\n    |\n-LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |  _______________________________________________^\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |\n-LL | |     });\n-   | |_____^\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n@@ -22,14 +17,8 @@ LL | |     });\n note: no external requirements\n   --> $DIR/propagate-approximated-ref.rs:42:1\n    |\n-LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-LL | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |\n-LL | |     });\n-LL | | }\n-   | |_^\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply\n "}, {"sha": "6aafbe42c496cc7e87d3c58082a7caa78dd30b18", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-comparing-against-free.stderr", "status": "modified", "additions": 8, "deletions": 27, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-comparing-against-free.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -1,12 +1,8 @@\n note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:21:15\n    |\n-LL |       foo(cell, |cell_a, cell_x| {\n-   |  _______________^\n-LL | |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n-LL | |\n-LL | |     })\n-   | |_____^\n+LL |     foo(cell, |cell_a, cell_x| {\n+   |               ^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: case1::{closure#0} with closure substs [\n                i32,\n@@ -27,25 +23,16 @@ LL |         cell_a.set(cell_x.get()); // forces 'x: 'a, error in closure\n note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:18:1\n    |\n-LL | / fn case1() {\n-LL | |     let a = 0;\n-LL | |     let cell = Cell::new(&a);\n-LL | |     foo(cell, |cell_a, cell_x| {\n-...  |\n-LL | |     })\n-LL | | }\n-   | |_^\n+LL | fn case1() {\n+   | ^^^^^^^^^^\n    |\n    = note: defining type: case1\n \n note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:35:15\n    |\n-LL |       foo(cell, |cell_a, cell_x| {\n-   |  _______________^\n-LL | |         cell_x.set(cell_a.get()); // forces 'a: 'x, implies 'a = 'static -> borrow error\n-LL | |     })\n-   | |_____^\n+LL |     foo(cell, |cell_a, cell_x| {\n+   |               ^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: case2::{closure#0} with closure substs [\n                i32,\n@@ -58,14 +45,8 @@ LL | |     })\n note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-comparing-against-free.rs:28:1\n    |\n-LL | / fn case2() {\n-LL | |     let a = 0;\n-LL | |     let cell = Cell::new(&a);\n-LL | |\n-...  |\n-LL | |     })\n-LL | | }\n-   | |_^\n+LL | fn case2() {\n+   | ^^^^^^^^^^\n    |\n    = note: defining type: case2\n "}, {"sha": "c95907ea75e5ad1d05f275882185bbfc2e38f7b4", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -1,14 +1,8 @@\n note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:32:47\n    |\n-LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-   |  _______________________________________________^\n-LL | |\n-LL | |\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |     });\n-   | |_____^\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+   |                                               ^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n@@ -23,14 +17,8 @@ LL | |     });\n note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:31:1\n    |\n-LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-LL | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-LL | |\n-LL | |\n-...  |\n-LL | |     });\n-LL | | }\n-   | |_^\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply\n "}, {"sha": "db58d9d6f1a3c1a6e6894d31dc2eabc8fa251f36", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -1,14 +1,8 @@\n note: external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:35:47\n    |\n-LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |  _______________________________________________^\n-LL | |\n-LL | |\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |     });\n-   | |_____^\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n@@ -23,14 +17,8 @@ LL | |     });\n note: no external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:34:1\n    |\n-LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-LL | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-LL | |\n-LL | |\n-...  |\n-LL | |     });\n-LL | | }\n-   | |_^\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply\n "}, {"sha": "be5f1e5ef1a687028afd0f9c49831d6f744b97d5", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-val.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-val.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -1,13 +1,8 @@\n note: external requirements\n   --> $DIR/propagate-approximated-val.rs:36:45\n    |\n-LL |       establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n-   |  _____________________________________________^\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(outlives1, outlives2, x.get())\n-LL | |\n-LL | |     });\n-   | |_____^\n+LL |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n+   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n@@ -22,14 +17,8 @@ LL | |     });\n note: no external requirements\n   --> $DIR/propagate-approximated-val.rs:35:1\n    |\n-LL | / fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-LL | |     establish_relationships(cell_a, cell_b, |outlives1, outlives2, x, y| {\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(outlives1, outlives2, x.get())\n-LL | |\n-LL | |     });\n-LL | | }\n-   | |_^\n+LL | fn test<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: test\n "}, {"sha": "d18db97be5789f4200f4364a85b822c9eb708ef6", "filename": "src/test/ui/nll/closure-requirements/propagate-despite-same-free-region.stderr", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-despite-same-free-region.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -1,12 +1,8 @@\n note: external requirements\n   --> $DIR/propagate-despite-same-free-region.rs:42:9\n    |\n-LL | /         |_outlives1, _outlives2, x, y| {\n-LL | |             // Only works if 'x: 'y:\n-LL | |             let p = x.get();\n-LL | |             demand_y(x, y, p)\n-LL | |         },\n-   | |_________^\n+LL |         |_outlives1, _outlives2, x, y| {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n@@ -20,14 +16,8 @@ LL | |         },\n note: no external requirements\n   --> $DIR/propagate-despite-same-free-region.rs:39:1\n    |\n-LL | / fn supply<'a>(cell_a: Cell<&'a u32>) {\n-LL | |     establish_relationships(\n-LL | |         cell_a,\n-LL | |         |_outlives1, _outlives2, x, y| {\n-...  |\n-LL | |     );\n-LL | | }\n-   | |_^\n+LL | fn supply<'a>(cell_a: Cell<&'a u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply\n "}, {"sha": "e6f88de4ee8d98083a1fccbac11f51f484c241f7", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -1,13 +1,8 @@\n note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:35:47\n    |\n-LL |       establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-   |  _______________________________________________^\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |\n-LL | |     });\n-   | |_____^\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n+   |                                               ^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n@@ -31,14 +26,8 @@ LL |         demand_y(x, y, x.get())\n note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:34:1\n    |\n-LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-LL | |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |\n-LL | |     });\n-LL | | }\n-   | |_^\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply\n "}, {"sha": "5f5fce77137c1159a416469e6355ef62c64ea3e6", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -1,13 +1,8 @@\n note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:39:47\n    |\n-LL |       establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |  _______________________________________________^\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |\n-LL | |     });\n-   | |_____^\n+LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n+   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply::{closure#0} with closure substs [\n                i16,\n@@ -31,14 +26,8 @@ LL |         demand_y(x, y, x.get())\n note: no external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:38:1\n    |\n-LL | / fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-LL | |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-LL | |         // Only works if 'x: 'y:\n-LL | |         demand_y(x, y, x.get())\n-LL | |\n-LL | |     });\n-LL | | }\n-   | |_^\n+LL | fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: supply\n "}, {"sha": "750b08bbe855cf0e404846a3917398f8e346db1d", "filename": "src/test/ui/nll/closure-requirements/propagate-from-trait-match.stderr", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-from-trait-match.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -1,15 +1,8 @@\n note: external requirements\n   --> $DIR/propagate-from-trait-match.rs:32:36\n    |\n-LL |       establish_relationships(value, |value| {\n-   |  ____________________________________^\n-LL | |\n-LL | |\n-LL | |         // This function call requires that\n-...  |\n-LL | |         require(value);\n-LL | |     });\n-   | |_____^\n+LL |     establish_relationships(value, |value| {\n+   |                                    ^^^^^^^\n    |\n    = note: defining type: supply::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -25,11 +18,7 @@ note: no external requirements\n LL | / fn supply<'a, T>(value: T)\n LL | | where\n LL | |     T: Trait<'a>,\n-LL | | {\n-...  |\n-LL | |     });\n-LL | | }\n-   | |_^\n+   | |_________________^\n    |\n    = note: defining type: supply::<'_#1r, T>\n "}, {"sha": "da89071eabda9f1f28215d268150b5e0fda2d258", "filename": "src/test/ui/nll/closure-requirements/return-wrong-bound-region.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Freturn-wrong-bound-region.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -2,7 +2,7 @@ note: no external requirements\n   --> $DIR/return-wrong-bound-region.rs:11:16\n    |\n LL |     expect_sig(|a, b| b); // ought to return `a`\n-   |                ^^^^^^^^\n+   |                ^^^^^^\n    |\n    = note: defining type: test::{closure#0} with closure substs [\n                i16,\n@@ -22,11 +22,8 @@ LL |     expect_sig(|a, b| b); // ought to return `a`\n note: no external requirements\n   --> $DIR/return-wrong-bound-region.rs:10:1\n    |\n-LL | / fn test() {\n-LL | |     expect_sig(|a, b| b); // ought to return `a`\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn test() {\n+   | ^^^^^^^^^\n    |\n    = note: defining type: test\n "}, {"sha": "ee1f7b64bb231aed0836b6f00b12b137dcb0370d", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 8, "deletions": 22, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:25:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^\n    |\n    = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -18,11 +18,7 @@ note: no external requirements\n LL | / fn no_region<'a, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n LL | | where\n LL | |     T: Iterator,\n-LL | | {\n-LL | |     with_signature(x, |mut y| Box::new(y.next()))\n-LL | |\n-LL | | }\n-   | |_^\n+   | |________________^\n    |\n    = note: defining type: no_region::<'_#1r, T>\n \n@@ -39,7 +35,7 @@ note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:34:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^\n    |\n    = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -55,18 +51,15 @@ note: no external requirements\n LL | / fn correct_region<'a, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n LL | | where\n LL | |     T: 'a + Iterator,\n-LL | | {\n-LL | |     with_signature(x, |mut y| Box::new(y.next()))\n-LL | | }\n-   | |_^\n+   | |_____________________^\n    |\n    = note: defining type: correct_region::<'_#1r, T>\n \n note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:42:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^\n    |\n    = note: defining type: wrong_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -82,11 +75,7 @@ note: no external requirements\n LL | / fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n LL | | where\n LL | |     T: 'b + Iterator,\n-LL | | {\n-LL | |     with_signature(x, |mut y| Box::new(y.next()))\n-LL | |\n-LL | | }\n-   | |_^\n+   | |_____________________^\n    |\n    = note: defining type: wrong_region::<'_#1r, '_#2r, T>\n \n@@ -103,7 +92,7 @@ note: external requirements\n   --> $DIR/projection-no-regions-closure.rs:52:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^\n    |\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -120,10 +109,7 @@ LL | / fn outlives_region<'a, 'b, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n LL | | where\n LL | |     T: 'b + Iterator,\n LL | |     'b: 'a,\n-LL | | {\n-LL | |     with_signature(x, |mut y| Box::new(y.next()))\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>\n "}, {"sha": "4e57dfad794e3c3cc003a7a93392ba68ebcf8709", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 9, "deletions": 21, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/projection-one-region-closure.rs:45:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -20,11 +20,7 @@ note: no external requirements\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n-LL | | {\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+   | |____________________^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>\n \n@@ -56,7 +52,7 @@ note: external requirements\n   --> $DIR/projection-one-region-closure.rs:56:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -74,10 +70,7 @@ LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     'a: 'a,\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n \n@@ -109,7 +102,7 @@ note: external requirements\n   --> $DIR/projection-one-region-closure.rs:70:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -126,18 +119,15 @@ LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     T::AssocType: 'a,\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |_____________________^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n note: external requirements\n   --> $DIR/projection-one-region-closure.rs:80:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -155,10 +145,8 @@ LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     T: 'a,\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+LL | |     'b: 'a,\n+   | |___________^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n "}, {"sha": "250c796e2c71e373b406aa29e5f3eb8073d1bf54", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:37:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -19,11 +19,7 @@ note: no external requirements\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | |\n-LL | | }\n-   | |_^\n+   | |____________________^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>\n \n@@ -44,7 +40,7 @@ note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:47:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -61,10 +57,7 @@ LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     'a: 'a,\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n \n@@ -85,7 +78,7 @@ note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:60:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -102,18 +95,15 @@ LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     T::AssocType: 'a,\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |_____________________^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:69:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -130,18 +120,15 @@ LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     'b: 'a,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n \n note: external requirements\n   --> $DIR/projection-one-region-trait-bound-closure.rs:81:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -157,11 +144,7 @@ note: no external requirements\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'a>,\n-LL | | {\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |____________________^\n    |\n    = note: defining type: one_region::<'_#1r, T>\n "}, {"sha": "b27186b05373521487d45eda3a1d5001db9b52d0", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -2,7 +2,7 @@ note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:36:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -17,18 +17,15 @@ note: no external requirements\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |____________________^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, T>\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:45:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -43,18 +40,15 @@ LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     'a: 'a,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, T>\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:64:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -69,18 +63,15 @@ LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     T::AssocType: 'a,\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |_____________________^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, T>\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:73:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -95,18 +86,15 @@ LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b>,\n LL | |     'b: 'a,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: elements_outlive::<'_#1r, '_#2r, T>\n \n note: no external requirements\n   --> $DIR/projection-one-region-trait-bound-static-closure.rs:85:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -120,11 +108,7 @@ note: no external requirements\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'a>,\n-LL | | {\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |____________________^\n    |\n    = note: defining type: one_region::<'_#1r, T>\n "}, {"sha": "0195a693e5ffb45d6aad2aba93bfe3aad6888a97", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 16, "deletions": 43, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:38:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -19,11 +19,7 @@ note: no external requirements\n LL | / fn no_relationships_late<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'c>,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | |\n-LL | | }\n-   | |_^\n+   | |________________________^\n    |\n    = note: defining type: no_relationships_late::<'_#1r, '_#2r, T>\n \n@@ -40,7 +36,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n@@ -57,10 +53,7 @@ LL | / fn no_relationships_early<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     'a: 'a,\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: no_relationships_early::<'_#1r, '_#2r, '_#3r, T>\n \n@@ -77,7 +70,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:61:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n@@ -94,18 +87,15 @@ LL | / fn projection_outlives<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     T::AssocType: 'a,\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |_____________________^\n    |\n    = note: defining type: projection_outlives::<'_#1r, '_#2r, '_#3r, T>\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:70:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: elements_outlive1::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n@@ -122,18 +112,15 @@ LL | / fn elements_outlive1<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     'b: 'a,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: elements_outlive1::<'_#1r, '_#2r, '_#3r, T>\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:79:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: elements_outlive2::<'_#1r, '_#2r, '_#3r, T>::{closure#0} with closure substs [\n                i32,\n@@ -150,18 +137,15 @@ LL | / fn elements_outlive2<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'c>,\n LL | |     'c: 'a,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: elements_outlive2::<'_#1r, '_#2r, '_#3r, T>\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:87:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: two_regions::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -178,11 +162,7 @@ note: no external requirements\n LL | / fn two_regions<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'b>,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | |\n-LL | | }\n-   | |_^\n+   | |________________________^\n    |\n    = note: defining type: two_regions::<'_#1r, T>\n \n@@ -203,7 +183,7 @@ note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:97:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: two_regions_outlive::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -220,18 +200,15 @@ LL | / fn two_regions_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'b, 'b>,\n LL | |     'b: 'a,\n-LL | | {\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: two_regions_outlive::<'_#1r, '_#2r, T>\n \n note: external requirements\n   --> $DIR/projection-two-region-trait-bound-closure.rs:109:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n-   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                             ^^^^^^^^^\n    |\n    = note: defining type: one_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -247,11 +224,7 @@ note: no external requirements\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n LL | |     T: Anything<'a, 'a>,\n-LL | | {\n-...  |\n-LL | |     with_signature(cell, t, |cell, t| require(cell, t));\n-LL | | }\n-   | |_^\n+   | |________________________^\n    |\n    = note: defining type: one_region::<'_#1r, T>\n "}, {"sha": "5d9a044d107f9ba409166a377709d04d1027d1ed", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:24:24\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n-   |                        ^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^\n    |\n    = note: defining type: generic::<T>::{closure#0} with closure substs [\n                i16,\n@@ -15,19 +15,16 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n note: no external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:22:1\n    |\n-LL | / fn generic<T>(value: T) {\n-LL | |     let cell = Cell::new(&());\n-LL | |     twice(cell, value, |a, b| invoke(a, b));\n-LL | | }\n-   | |_^\n+LL | fn generic<T>(value: T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: generic::<T>\n \n note: external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:29:24\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n-   |                        ^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^\n    |\n    = note: defining type: generic_fail::<T>::{closure#0} with closure substs [\n                i16,\n@@ -41,11 +38,8 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n note: no external requirements\n   --> $DIR/ty-param-closure-approximate-lower-bound.rs:28:1\n    |\n-LL | / fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n-LL | |     twice(cell, value, |a, b| invoke(a, b));\n-LL | |\n-LL | | }\n-   | |_^\n+LL | fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: generic_fail::<T>\n "}, {"sha": "50d9e3aabe2d43cc1ec96e3c43ca004b6f3a5895", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -2,7 +2,7 @@ note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:23\n    |\n LL |     with_signature(x, |y| y)\n-   |                       ^^^^^\n+   |                       ^^^\n    |\n    = note: defining type: no_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -18,11 +18,7 @@ note: no external requirements\n LL | / fn no_region<'a, T>(x: Box<T>) -> Box<dyn Debug + 'a>\n LL | | where\n LL | |     T: Debug,\n-LL | | {\n-...  |\n-LL | |\n-LL | | }\n-   | |_^\n+   | |_____________^\n    |\n    = note: defining type: no_region::<'_#1r, T>\n "}, {"sha": "14c55e32a3ebe83f2f67e11d2cbe0f953c75d5aa", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 13, "deletions": 53, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/494af379c455f6c8d24adb9fc1793411ea671b6a/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=494af379c455f6c8d24adb9fc1793411ea671b6a", "patch": "@@ -1,15 +1,8 @@\n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:27:26\n    |\n-LL |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-LL | |\n-LL | |         //\n-LL | |         // See `correct_region`, which explains the point of this\n-...  |\n-LL | |         require(&x, &y)\n-LL | |     })\n-   | |_____^\n+LL |     with_signature(a, b, |x, y| {\n+   |                          ^^^^^^\n    |\n    = note: defining type: no_region::<T>::{closure#0} with closure substs [\n                i32,\n@@ -23,14 +16,8 @@ LL | |     })\n note: no external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:26:1\n    |\n-LL | / fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n-LL | |     with_signature(a, b, |x, y| {\n-LL | |\n-LL | |         //\n-...  |\n-LL | |     })\n-LL | | }\n-   | |_^\n+LL | fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: defining type: no_region::<T>\n \n@@ -55,15 +42,8 @@ LL | fn no_region<'a, T: 'a>(a: Cell<&'a ()>, b: T) {\n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:43:26\n    |\n-LL |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-LL | |         // Key point of this test:\n-LL | |         //\n-LL | |         // The *closure* is being type-checked with all of its free\n-...  |\n-LL | |         require(&x, &y)\n-LL | |     })\n-   | |_____^\n+LL |     with_signature(a, b, |x, y| {\n+   |                          ^^^^^^\n    |\n    = note: defining type: correct_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -79,24 +59,15 @@ note: no external requirements\n LL | / fn correct_region<'a, T>(a: Cell<&'a ()>, b: T)\n LL | | where\n LL | |     T: 'a,\n-LL | | {\n-...  |\n-LL | |     })\n-LL | | }\n-   | |_^\n+   | |__________^\n    |\n    = note: defining type: correct_region::<'_#1r, T>\n \n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:64:26\n    |\n-LL |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-LL | |\n-LL | |         // See `correct_region`\n-LL | |         require(&x, &y)\n-LL | |     })\n-   | |_____^\n+LL |     with_signature(a, b, |x, y| {\n+   |                          ^^^^^^\n    |\n    = note: defining type: wrong_region::<'_#1r, T>::{closure#0} with closure substs [\n                i32,\n@@ -113,11 +84,7 @@ note: no external requirements\n LL | / fn wrong_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)\n LL | | where\n LL | |     T: 'b,\n-LL | | {\n-...  |\n-LL | |     })\n-LL | | }\n-   | |_^\n+   | |__________^\n    |\n    = note: defining type: wrong_region::<'_#1r, T>\n \n@@ -140,12 +107,8 @@ LL |     T: 'b + 'a,\n note: external requirements\n   --> $DIR/ty-param-closure-outlives-from-where-clause.rs:77:26\n    |\n-LL |       with_signature(a, b, |x, y| {\n-   |  __________________________^\n-LL | |         // See `correct_region`\n-LL | |         require(&x, &y)\n-LL | |     })\n-   | |_____^\n+LL |     with_signature(a, b, |x, y| {\n+   |                          ^^^^^^\n    |\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>::{closure#0} with closure substs [\n                i32,\n@@ -162,10 +125,7 @@ LL | / fn outlives_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)\n LL | | where\n LL | |     T: 'b,\n LL | |     'b: 'a,\n-...  |\n-LL | |     })\n-LL | | }\n-   | |_^\n+   | |___________^\n    |\n    = note: defining type: outlives_region::<'_#1r, '_#2r, T>\n "}]}