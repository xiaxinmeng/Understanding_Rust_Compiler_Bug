{"sha": "e812b55d8f627146d352cfb640c1b21c0975ca28", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MTJiNTVkOGY2MjcxNDZkMzUyY2ZiNjQwYzFiMjFjMDk3NWNhMjg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-06-26T22:08:02Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-08-19T19:02:32Z"}, "message": "Refactor mod/check (part iv)", "tree": {"sha": "0a92ce316d5bbdacd3ef7ca11b95e5c9ef09fb58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a92ce316d5bbdacd3ef7ca11b95e5c9ef09fb58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e812b55d8f627146d352cfb640c1b21c0975ca28", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e812b55d8f627146d352cfb640c1b21c0975ca28", "html_url": "https://github.com/rust-lang/rust/commit/e812b55d8f627146d352cfb640c1b21c0975ca28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e812b55d8f627146d352cfb640c1b21c0975ca28/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96379e1659eb18daeaf7f86e9c8b69332a22b534", "url": "https://api.github.com/repos/rust-lang/rust/commits/96379e1659eb18daeaf7f86e9c8b69332a22b534", "html_url": "https://github.com/rust-lang/rust/commit/96379e1659eb18daeaf7f86e9c8b69332a22b534"}], "stats": {"total": 119, "additions": 43, "deletions": 76}, "files": [{"sha": "68881d928d516c4929c8417dc9a4ced2db078476", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 43, "deletions": 76, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/e812b55d8f627146d352cfb640c1b21c0975ca28/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e812b55d8f627146d352cfb640c1b21c0975ca28/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e812b55d8f627146d352cfb640c1b21c0975ca28", "patch": "@@ -4983,115 +4983,82 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // variables. If the user provided some types, we may still need\n         // to add defaults. If the user provided *too many* types, that's\n         // a problem.\n+        let mut infer_lifetimes = FxHashMap();\n         let supress_mismatch = self.check_impl_trait(span, fn_segment);\n         for &PathSeg(def_id, index) in &path_segs {\n             let generics = self.tcx.generics_of(def_id);\n-            self.check_generic_arg_count(span, &segments[index], &generics, false, supress_mismatch);\n+            let seg = &segments[index];\n+            self.check_generic_arg_count(span, seg, &generics, false, supress_mismatch);\n+            infer_lifetimes.insert(index, if let Some(ref data) = seg.args {\n+                !data.args.iter().any(|arg| match arg {\n+                    GenericArg::Lifetime(_) => true,\n+                    _ => false,\n+                })\n+            } else {\n+                true\n+            });\n         }\n \n         let has_self = path_segs.last().map(|PathSeg(def_id, _)| {\n             self.tcx.generics_of(*def_id).has_self\n         }).unwrap_or(false);\n \n-        let fn_start = match (type_segment, fn_segment) {\n-            (_, Some((_, generics))) => generics.parent_count,\n-            (Some((_, generics)), None) => generics.params.len(),\n-            (None, None) => 0,\n-        };\n-        // FIXME(varkor): Separating out the parameters is messy.\n-        let mut lifetimes_type_seg = vec![];\n-        let mut types_type_seg = vec![];\n-        let mut _infer_types_type_seg = true;\n-        if let Some((seg, _)) = type_segment {\n-            if let Some(ref data) = seg.args {\n-                for (i, arg) in data.args.iter().enumerate() {\n-                    match arg {\n-                        GenericArg::Lifetime(lt) => lifetimes_type_seg.push((i, lt)),\n-                        GenericArg::Type(ty) => types_type_seg.push((i, ty)),\n-                    }\n-                }\n-            }\n-            _infer_types_type_seg = seg.infer_types;\n-        }\n-\n-        let mut lifetimes_fn_seg = vec![];\n-        let mut types_fn_seg = vec![];\n-        let mut _infer_types_fn_seg = true;\n-        if let Some((seg, _)) = fn_segment {\n-            if let Some(ref data) = seg.args {\n-                for (i, arg) in data.args.iter().enumerate() {\n-                    match arg {\n-                        GenericArg::Lifetime(lt) => lifetimes_fn_seg.push((i, lt)),\n-                        GenericArg::Type(ty) => types_fn_seg.push((i, ty)),\n-                    }\n-                }\n-            }\n-            _infer_types_fn_seg = seg.infer_types;\n-        }\n-\n-        let defs = self.tcx.generics_of(def.def_id());\n+        let def_id = def.def_id();\n+        let defs = self.tcx.generics_of(def_id);\n         let count = defs.count();\n         let mut substs = if count <= 8 {\n             AccumulateVec::Array(ArrayVec::new())\n         } else {\n             AccumulateVec::Heap(Vec::with_capacity(count))\n         };\n-        let mut stack = vec![def.def_id()];\n         let mut parent_defs = defs;\n+        let mut stack = vec![(def_id, parent_defs)];\n         while let Some(def_id) = parent_defs.parent {\n             parent_defs = self.tcx.generics_of(def_id);\n-            stack.push(def_id);\n+            stack.push((def_id, parent_defs));\n         }\n-        while let Some(def_id) = stack.pop() {\n-            let defs = self.tcx.generics_of(def_id);\n+        while let Some((def_id, defs)) = stack.pop() {\n             Substs::fill_single(&mut substs, defs, &mut |param: &ty::GenericParamDef, substs| {\n-                let lifetimes = if (param.index as usize) < fn_start {\n+                if param.index == 0 && has_self {\n                     if let GenericParamDefKind::Type { .. } = param.kind {\n                         // Handle Self first, so we can adjust the index to match the AST.\n-                        if has_self && param.index == 0 {\n-                            return opt_self_ty.map(|ty| ty.into()).unwrap_or_else(|| {\n-                                self.var_for_def(span, param)\n-                            });\n-                        }\n+                        return opt_self_ty.map(|ty| ty.into()).unwrap_or_else(|| {\n+                            self.var_for_def(span, param)\n+                        });\n                     }\n-                    &lifetimes_type_seg\n-                } else {\n-                    &lifetimes_fn_seg\n-                };\n-\n-                let mut pi = param.index as usize - has_self as usize;\n+                }\n \n-                let (_segment, infer_types) = if let Some(&PathSeg(_, ind)) = path_segs.iter().find(|&PathSeg(di, _)| *di == def_id) {\n-                    let seg = &segments[ind];\n-                    if lifetimes.len() == 0 {\n-                        pi -= defs.own_counts().lifetimes;\n-                    }\n+                let infer_types = if let Some(&PathSeg(_, index)) = path_segs\n+                    .iter()\n+                    .find(|&PathSeg(di, _)| *di == def_id) {\n \n-                    if let Some(ref data) = seg.args {\n-                        if let Some(arg) = data.args.get(pi) {\n+                    if let Some(ref data) = segments[index].args {\n+                        let lifetime_offset = if infer_lifetimes[&index] {\n+                            defs.own_counts().lifetimes\n+                        } else {\n+                            0\n+                        };\n+                        let param_idx = param.index as usize - has_self as usize - lifetime_offset;\n+                        if let Some(arg) = data.args.get(param_idx) {\n                             return match param.kind {\n-                                GenericParamDefKind::Lifetime => {\n-                                    let lt = match arg {\n-                                        GenericArg::Lifetime(lt) => lt,\n-                                        _ => bug!(\"should be a lifetime\"),\n-                                    };\n-                                    AstConv::ast_region_to_region(self, lt, Some(param)).into()\n+                                GenericParamDefKind::Lifetime => match arg {\n+                                    GenericArg::Lifetime(lt) => {\n+                                        AstConv::ast_region_to_region(self, lt, Some(param)).into()\n+                                    }\n+                                    _ => bug!(\"expected a lifetime arg\"),\n                                 }\n-                                GenericParamDefKind::Type { .. } => {\n+                                GenericParamDefKind::Type { .. } => match arg {\n                                     // A provided type parameter.\n-                                    let ty = match arg {\n-                                        GenericArg::Type(ty) => ty,\n-                                        _ => bug!(\"should be a type\"),\n-                                    };\n-                                    self.to_ty(ty).into()\n+                                    GenericArg::Type(ty) => self.to_ty(ty).into(),\n+                                    _ => bug!(\"expected a type arg\"),\n                                 }\n-                            };\n+                            }\n                         }\n                     }\n \n-                    (Some((seg, defs)), seg.infer_types)\n+                    segments[index].infer_types\n                 } else {\n-                    (None, true)\n+                    true\n                 };\n \n                 match param.kind {"}]}