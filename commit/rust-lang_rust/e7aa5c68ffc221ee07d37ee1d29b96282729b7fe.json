{"sha": "e7aa5c68ffc221ee07d37ee1d29b96282729b7fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YWE1YzY4ZmZjMjIxZWUwN2QzN2VlMWQyOWI5NjI4MjcyOWI3ZmU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-12T07:54:12Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-12T07:54:12Z"}, "message": "Update rustc for AllocationExtra trait\n\nBased on https://github.com/solson/miri/pull/493 but there were more conflicts\nthan code so I opted not to cherry-pick.", "tree": {"sha": "75feaf4b73556a405cef5a1589f453608d4dde82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75feaf4b73556a405cef5a1589f453608d4dde82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7aa5c68ffc221ee07d37ee1d29b96282729b7fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7aa5c68ffc221ee07d37ee1d29b96282729b7fe", "html_url": "https://github.com/rust-lang/rust/commit/e7aa5c68ffc221ee07d37ee1d29b96282729b7fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7aa5c68ffc221ee07d37ee1d29b96282729b7fe/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f233dc0687143025d375fbc3d3ea64f17ecd7d99", "url": "https://api.github.com/repos/rust-lang/rust/commits/f233dc0687143025d375fbc3d3ea64f17ecd7d99", "html_url": "https://github.com/rust-lang/rust/commit/f233dc0687143025d375fbc3d3ea64f17ecd7d99"}], "stats": {"total": 39, "additions": 12, "deletions": 27}, "files": [{"sha": "fb6d167ec6422de36a9a0c0086e6aa491e116e50", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7aa5c68ffc221ee07d37ee1d29b96282729b7fe/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/e7aa5c68ffc221ee07d37ee1d29b96282729b7fe/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=e7aa5c68ffc221ee07d37ee1d29b96282729b7fe", "patch": "@@ -1 +1 @@\n-nightly-2018-11-08\n+nightly-2018-11-12"}, {"sha": "ab34841df89e2a216577de64bda20e983bc02139", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e7aa5c68ffc221ee07d37ee1d29b96282729b7fe/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7aa5c68ffc221ee07d37ee1d29b96282729b7fe/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e7aa5c68ffc221ee07d37ee1d29b96282729b7fe", "patch": "@@ -446,24 +446,6 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n         Cow::Owned(alloc)\n     }\n \n-    #[inline(always)]\n-    fn memory_read(\n-        alloc: &Allocation<Borrow, Self::AllocExtra>,\n-        ptr: Pointer<Borrow>,\n-        size: Size,\n-    ) -> EvalResult<'tcx> {\n-        alloc.extra.memory_read(ptr, size)\n-    }\n-\n-    #[inline(always)]\n-    fn memory_written(\n-        alloc: &mut Allocation<Borrow, Self::AllocExtra>,\n-        ptr: Pointer<Borrow>,\n-        size: Size,\n-    ) -> EvalResult<'tcx> {\n-        alloc.extra.memory_written(ptr, size)\n-    }\n-\n     #[inline(always)]\n     fn memory_deallocated(\n         alloc: &mut Allocation<Borrow, Self::AllocExtra>,"}, {"sha": "475033d74c66c5053eb974beddc2c9471bc36ab6", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e7aa5c68ffc221ee07d37ee1d29b96282729b7fe/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7aa5c68ffc221ee07d37ee1d29b96282729b7fe/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=e7aa5c68ffc221ee07d37ee1d29b96282729b7fe", "patch": "@@ -5,7 +5,7 @@ use rustc::hir;\n \n use crate::{\n     EvalResult, MiriEvalContext, HelpersEvalContextExt,\n-    MemoryKind, MiriMemoryKind, RangeMap, AllocId,\n+    MemoryKind, MiriMemoryKind, RangeMap, AllocId, Allocation, AllocationExtra,\n     Pointer, PlaceTy, MPlaceTy,\n };\n \n@@ -343,27 +343,30 @@ impl<'tcx> Stacks {\n }\n \n /// Hooks and glue\n-impl<'tcx> Stacks {\n+impl AllocationExtra<Borrow> for Stacks {\n     #[inline(always)]\n-    pub fn memory_read(\n-        &self,\n+    fn memory_read<'tcx>(\n+        alloc: &Allocation<Borrow, Stacks>,\n         ptr: Pointer<Borrow>,\n         size: Size,\n     ) -> EvalResult<'tcx> {\n         // Reads behave exactly like the first half of a reborrow-to-shr\n-        self.use_and_maybe_re_borrow(ptr, size, UsageKind::Read, None)\n+        alloc.extra.use_and_maybe_re_borrow(ptr, size, UsageKind::Read, None)\n     }\n \n     #[inline(always)]\n-    pub fn memory_written(\n-        &mut self,\n+    fn memory_written<'tcx>(\n+        alloc: &mut Allocation<Borrow, Stacks>,\n         ptr: Pointer<Borrow>,\n         size: Size,\n     ) -> EvalResult<'tcx> {\n         // Writes behave exactly like the first half of a reborrow-to-mut\n-        self.use_and_maybe_re_borrow(ptr, size, UsageKind::Write, None)\n+        alloc.extra.use_and_maybe_re_borrow(ptr, size, UsageKind::Write, None)\n     }\n+}\n \n+impl<'tcx> Stacks {\n+    #[inline(always)]\n     pub fn memory_deallocated(\n         &mut self,\n         ptr: Pointer<Borrow>,"}]}