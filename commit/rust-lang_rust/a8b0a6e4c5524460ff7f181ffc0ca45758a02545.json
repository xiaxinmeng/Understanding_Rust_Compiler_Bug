{"sha": "a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4YjBhNmU0YzU1MjQ0NjBmZjdmMTgxZmZjMGNhNDU3NThhMDI1NDU=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-07-19T15:35:00Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-07-19T15:42:00Z"}, "message": "Format source codes and update tests", "tree": {"sha": "6278f068c1777c2a9e1b7461db3fcbfd8b6aed31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6278f068c1777c2a9e1b7461db3fcbfd8b6aed31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "html_url": "https://github.com/rust-lang/rust/commit/a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28e32ce898f84131baa35a7db34a399727d8f15f", "url": "https://api.github.com/repos/rust-lang/rust/commits/28e32ce898f84131baa35a7db34a399727d8f15f", "html_url": "https://github.com/rust-lang/rust/commit/28e32ce898f84131baa35a7db34a399727d8f15f"}], "stats": {"total": 69, "additions": 31, "deletions": 38}, "files": [{"sha": "d99a73b87ec3f4058cf4ce21a9adf4e4415325dc", "filename": "src/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "patch": "@@ -1428,7 +1428,7 @@ fn block_contains_comment(block: &ast::Block, codemap: &CodeMap) -> bool {\n // the expression.\n pub fn is_simple_block(block: &ast::Block, codemap: &CodeMap) -> bool {\n     (block.stmts.len() == 1 && stmt_is_expr(&block.stmts[0]) &&\n-         !block_contains_comment(block, codemap))\n+        !block_contains_comment(block, codemap))\n }\n \n /// Checks whether a block contains at most one statement or expression, and no comments.\n@@ -1770,7 +1770,7 @@ fn rewrite_match_body(\n             Some(ref body_str)\n                 if !forbid_same_line &&\n                     (is_block ||\n-                         (!body_str.contains('\\n') && body_str.len() <= body_shape.width)) =>\n+                        (!body_str.contains('\\n') && body_str.len() <= body_shape.width)) =>\n             {\n                 return combine_orig_body(body_str);\n             }\n@@ -2375,7 +2375,7 @@ pub fn wrap_args_with_parens(\n ) -> String {\n     if !context.use_block_indent() ||\n         (context.inside_macro && !args_str.contains('\\n') &&\n-             args_str.len() + paren_overhead(context) <= shape.width) || is_extendable\n+            args_str.len() + paren_overhead(context) <= shape.width) || is_extendable\n     {\n         if context.config.spaces_within_parens() && args_str.len() > 0 {\n             format!(\"( {} )\", args_str)\n@@ -2605,8 +2605,8 @@ pub fn wrap_struct_field(\n ) -> String {\n     if context.config.struct_lit_style() == IndentStyle::Block &&\n         (fields_str.contains('\\n') ||\n-             context.config.struct_lit_multiline_style() == MultilineStyle::ForceMulti ||\n-             fields_str.len() > one_line_width)\n+            context.config.struct_lit_multiline_style() == MultilineStyle::ForceMulti ||\n+            fields_str.len() > one_line_width)\n     {\n         format!(\n             \"\\n{}{}\\n{}\","}, {"sha": "1b9c44957610809b797cffce19dfac2f9f07f910", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "patch": "@@ -942,11 +942,10 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n         let has_body = !trait_items.is_empty();\n \n         let where_density = if (context.config.where_density() == Density::Compressed &&\n-                                    (!result.contains('\\n') ||\n-                                         context.config.fn_args_layout() == IndentStyle::Block)) ||\n+            (!result.contains('\\n') || context.config.fn_args_layout() == IndentStyle::Block)) ||\n             (context.config.fn_args_layout() == IndentStyle::Block && result.is_empty()) ||\n             (context.config.where_density() == Density::CompressedIfEmpty && !has_body &&\n-                 !result.contains('\\n'))\n+                !result.contains('\\n'))\n         {\n             Density::Compressed\n         } else {\n@@ -1079,7 +1078,7 @@ pub fn format_struct_struct(\n             // 3 = ` {}`, 2 = ` {`.\n             let overhead = if fields.is_empty() { 3 } else { 2 };\n             if (context.config.item_brace_style() == BraceStyle::AlwaysNextLine &&\n-                    !fields.is_empty()) ||\n+                !fields.is_empty()) ||\n                 context\n                     .config\n                     .max_width()\n@@ -1247,8 +1246,8 @@ fn format_tuple_struct(\n \n     if !where_clause_str.is_empty() && !where_clause_str.contains('\\n') &&\n         (result.contains('\\n') ||\n-             offset.block_indent + result.len() + where_clause_str.len() + 1 >\n-                 context.config.max_width())\n+            offset.block_indent + result.len() + where_clause_str.len() + 1 >\n+                context.config.max_width())\n     {\n         // We need to put the where clause on a new line, but we didn't\n         // know that earlier, so the where clause will not be indented properly."}, {"sha": "6dfab314d970a612bc26125a98e95a69bdcfdb52", "filename": "src/lists.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "patch": "@@ -368,7 +368,7 @@ where\n         let inner_item_width = item.inner_as_ref().len();\n         if !first &&\n             (item.is_multiline() || !item.post_comment.is_some() ||\n-                 inner_item_width + overhead > max_budget)\n+                inner_item_width + overhead > max_budget)\n         {\n             return max_width;\n         }"}, {"sha": "6cb2fcddaef2309eda628884de59ca4ad337b9a7", "filename": "src/string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/src%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/src%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstring.rs?ref=a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "patch": "@@ -83,7 +83,7 @@ pub fn rewrite_string<'a>(orig: &str, fmt: &StringFormat<'a>) -> Option<String>\n                     if cur_end < cur_start + MIN_STRING {\n                         cur_end = cur_start + max_chars;\n                         while !(punctuation.contains(graphemes[cur_end - 1]) ||\n-                                    graphemes[cur_end - 1].trim().is_empty())\n+                            graphemes[cur_end - 1].trim().is_empty())\n                         {\n                             if cur_end >= graphemes.len() {\n                                 let line = &graphemes[cur_start..].join(\"\");"}, {"sha": "065e357ea956fdc848b660a3b2f6fbc3f7ff2516", "filename": "src/summary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/src%2Fsummary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/src%2Fsummary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fsummary.rs?ref=a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "patch": "@@ -54,7 +54,7 @@ impl Summary {\n \n     pub fn has_no_errors(&self) -> bool {\n         !(self.has_operational_errors || self.has_parsing_errors || self.has_formatting_errors ||\n-              self.has_diff)\n+            self.has_diff)\n     }\n \n     pub fn add(&mut self, other: Summary) {"}, {"sha": "6461fa89d6cc691a9597d81b9e646cf3be31ed2c", "filename": "src/visitor.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "patch": "@@ -632,12 +632,12 @@ impl<'a> FmtVisitor<'a> {\n                     .take_while(|ppi| {\n                         is_use_item(&***ppi) &&\n                             (!reorder_imports_in_group ||\n-                                 {\n-                                     let current = self.codemap.lookup_line_range(item_bound(&ppi));\n-                                     let in_same_group = current.lo < last.hi + 2;\n-                                     last = current;\n-                                     in_same_group\n-                                 })\n+                                {\n+                                    let current = self.codemap.lookup_line_range(item_bound(&ppi));\n+                                    let in_same_group = current.lo < last.hi + 2;\n+                                    last = current;\n+                                    in_same_group\n+                                })\n                     })\n                     .count();\n                 let (use_items, rest) = items_left.split_at(use_item_length);"}, {"sha": "d915e11d534db590822f1452da96b7c2bde33ee5", "filename": "tests/system.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "patch": "@@ -240,15 +240,9 @@ fn read_config(filename: &str) -> Config {\n \n fn format_file<P: Into<PathBuf>>(filepath: P, config: &Config) -> (FileMap, FormatReport) {\n     let filepath = filepath.into();\n-    let display_path = filepath.display().to_string();\n     let input = Input::File(filepath);\n-    let (error_summary, file_map, report) =\n+    let (_error_summary, file_map, report) =\n         format_input::<io::Stdout>(input, &config, None).unwrap();\n-    assert!(\n-        error_summary.has_no_errors(),\n-        \"Encountered errors formatting {}\",\n-        display_path\n-    );\n     return (file_map, report);\n }\n "}, {"sha": "8033aff208f67e274efe4a32cadd2a217f5fb294", "filename": "tests/target/configs-control_style-rfc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/tests%2Ftarget%2Fconfigs-control_style-rfc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/tests%2Ftarget%2Fconfigs-control_style-rfc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-control_style-rfc.rs?ref=a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "patch": "@@ -5,9 +5,9 @@ fn main() {\n     loop {\n         if foo {\n             if ((right_paddle_speed < 0.) &&\n-                    (right_paddle.position().y - paddle_size.y / 2. > 5.)) ||\n+                (right_paddle.position().y - paddle_size.y / 2. > 5.)) ||\n                 ((right_paddle_speed > 0.) &&\n-                     (right_paddle.position().y + paddle_size.y / 2. < game_height as f32 - 5.))\n+                    (right_paddle.position().y + paddle_size.y / 2. < game_height as f32 - 5.))\n             {\n                 foo\n             }"}, {"sha": "dde596394a8fadc5bd9007b80011a3bfc740cb0b", "filename": "tests/target/expr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "patch": "@@ -21,9 +21,9 @@ fn foo() -> bool {\n         trivial_value,\n     );\n     (((((((((aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-                 a +\n-                 aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-                 aaaaa)))))))));\n+        a +\n+        aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n+        aaaaa)))))))));\n \n     {\n         for _ in 0..10 {}\n@@ -263,9 +263,9 @@ fn returns() {\n \n fn addrof() {\n     &mut (aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-              bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n     &(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa +\n-          bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n+        bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb);\n }\n \n fn casts() {"}, {"sha": "392a190ff0c4383fe05f1fc9c7d41ecfb3da2c51", "filename": "tests/target/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8b0a6e4c5524460ff7f181ffc0ca45758a02545/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=a8b0a6e4c5524460ff7f181ffc0ca45758a02545", "patch": "@@ -72,10 +72,10 @@ fn main() {\n     vec![\n         a;\n         (|x| {\n-             let y = x + 1;\n-             let z = y + 1;\n-             z\n-         })(2)\n+            let y = x + 1;\n+            let z = y + 1;\n+            z\n+        })(2)\n     ];\n     vec![\n         a;"}]}