{"sha": "e73a23fa969abd6fcf4ded3ad866fe1164e1268b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3M2EyM2ZhOTY5YWJkNmZjZjRkZWQzYWQ4NjZmZTExNjRlMTI2OGI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-07-04T15:59:37Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-07-17T13:35:58Z"}, "message": "Add Arguments::as_str().", "tree": {"sha": "017818c3fb2c575a9e1d8906cf84b1e2531b0599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/017818c3fb2c575a9e1d8906cf84b1e2531b0599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e73a23fa969abd6fcf4ded3ad866fe1164e1268b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e73a23fa969abd6fcf4ded3ad866fe1164e1268b", "html_url": "https://github.com/rust-lang/rust/commit/e73a23fa969abd6fcf4ded3ad866fe1164e1268b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e73a23fa969abd6fcf4ded3ad866fe1164e1268b/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50", "html_url": "https://github.com/rust-lang/rust/commit/c2dbebd3d4ad21e80ef4e7535dd1e868aaad7e50"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "449d8302d736f2f9b4c5ff4fafae15f09da19cfa", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e73a23fa969abd6fcf4ded3ad866fe1164e1268b/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e73a23fa969abd6fcf4ded3ad866fe1164e1268b/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e73a23fa969abd6fcf4ded3ad866fe1164e1268b", "patch": "@@ -409,6 +409,41 @@ pub struct Arguments<'a> {\n     args: &'a [ArgumentV1<'a>],\n }\n \n+impl<'a> Arguments<'a> {\n+    /// Get the formatted string, if it has no arguments to be formatted.\n+    ///\n+    /// This can be used to avoid allocations in the most trivial case.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(fmt_as_str)]\n+    ///\n+    /// use core::fmt::Arguments;\n+    ///\n+    /// fn write_str(_: &str) { /* ... */ }\n+    ///\n+    /// fn write_fmt(args: &Arguments) {\n+    ///     if let Some(s) = args.as_str() {\n+    ///         write_str(s)\n+    ///     } else {\n+    ///         write_str(&args.to_string());\n+    ///     }\n+    /// }\n+    /// ```\n+    ///\n+    /// ```rust\n+    /// #![feature(fmt_as_str)]\n+    ///\n+    /// assert_eq!(format_args!(\"hello\").as_str(), Some(\"hello\"));\n+    /// assert_eq!(format_args!(\"{}\", 1).as_str(), None);\n+    /// ```\n+    #[unstable(feature = \"fmt_as_str\", issue = \"none\")]\n+    pub fn as_str(&self) -> Option<&'a str> {\n+        if self.args.is_empty() && self.pieces.len() == 1 { Some(self.pieces[0]) } else { None }\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl Debug for Arguments<'_> {\n     fn fmt(&self, fmt: &mut Formatter<'_>) -> Result {"}]}