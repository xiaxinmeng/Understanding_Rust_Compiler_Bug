{"sha": "ef989880fff36f10b7e166647497779bacc1c47f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmOTg5ODgwZmZmMzZmMTBiN2UxNjY2NDc0OTc3NzliYWNjMWM0N2Y=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-09T13:16:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-09T13:16:39Z"}, "message": "Merge #6771\n\n6771: Properly attach inner attributes in Attrs::new r=matklad a=Veykril\n\nProperly attach inner and outer attributes to the things they actually belong to in the HIR. ~~I can add some tests for this if wanted once I know where to put them/how to test for this.~~ Put some tests into `hover.rs`.\r\n \r\nSo the following snippet\r\n```rust\r\nmod foo {\r\n\t//! Hello\r\n}\r\n```\r\nnow shows `Hello` on hover \ud83c\udf89\r\n\r\nFixes #2148\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "3fbf3b76697775ec50c286f9691fc736d7fb4886", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3fbf3b76697775ec50c286f9691fc736d7fb4886"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef989880fff36f10b7e166647497779bacc1c47f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf0M43CRBK7hj4Ov3rIwAAdHIIABNnrxmOs+Kr4AcDWbwfiJDm\nZodlUKQ6cX2kcSAuGKQDCy5cwSP4++ApOxcZgB3TlY7Uz4EOcenYW3FGGp/TNm8x\npW4yzOQDDY5JNW48A/h1o2uDT4NYqlwfgG9Gq2bi2A9rgEkk61SRbaGaL08chU2G\nc4d1fT2sl8IATITGNDcv+9Dp5CHuqmmen1lAAWno5S/7V7pXOKBaLQiHI2hny86d\niZizVAsfPu3Kkdcb9r+IHbz8U7D5jFGOKuJMRjSRMaMKpVa0zbpgg0dNz+SPAaJ1\nkTIQXQBd72pEhgUocOu9b6QzX/9AeDPL4Hg+dmkJkLPbTAkOcTlh89LcILjz7sI=\n=r6pr\n-----END PGP SIGNATURE-----\n", "payload": "tree 3fbf3b76697775ec50c286f9691fc736d7fb4886\nparent 7bda4c722bc5bb81b0f5b0f4c9390e3c7b602d0f\nparent da3b5e35a69fd71ba061169e2fe719e36dbc3ef4\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1607519799 +0000\ncommitter GitHub <noreply@github.com> 1607519799 +0000\n\nMerge #6771\n\n6771: Properly attach inner attributes in Attrs::new r=matklad a=Veykril\n\nProperly attach inner and outer attributes to the things they actually belong to in the HIR. ~~I can add some tests for this if wanted once I know where to put them/how to test for this.~~ Put some tests into `hover.rs`.\r\n \r\nSo the following snippet\r\n```rust\r\nmod foo {\r\n\t//! Hello\r\n}\r\n```\r\nnow shows `Hello` on hover \ud83c\udf89\r\n\r\nFixes #2148\r\n\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef989880fff36f10b7e166647497779bacc1c47f", "html_url": "https://github.com/rust-lang/rust/commit/ef989880fff36f10b7e166647497779bacc1c47f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef989880fff36f10b7e166647497779bacc1c47f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7bda4c722bc5bb81b0f5b0f4c9390e3c7b602d0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bda4c722bc5bb81b0f5b0f4c9390e3c7b602d0f", "html_url": "https://github.com/rust-lang/rust/commit/7bda4c722bc5bb81b0f5b0f4c9390e3c7b602d0f"}, {"sha": "da3b5e35a69fd71ba061169e2fe719e36dbc3ef4", "url": "https://api.github.com/repos/rust-lang/rust/commits/da3b5e35a69fd71ba061169e2fe719e36dbc3ef4", "html_url": "https://github.com/rust-lang/rust/commit/da3b5e35a69fd71ba061169e2fe719e36dbc3ef4"}], "stats": {"total": 122, "additions": 117, "deletions": 5}, "files": [{"sha": "228d706db99715e4226b5516e5321c4eb14e6115", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 47, "deletions": 5, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/ef989880fff36f10b7e166647497779bacc1c47f/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef989880fff36f10b7e166647497779bacc1c47f/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=ef989880fff36f10b7e166647497779bacc1c47f", "patch": "@@ -9,7 +9,7 @@ use itertools::Itertools;\n use mbe::ast_to_token_tree;\n use syntax::{\n     ast::{self, AstNode, AttrsOwner},\n-    AstToken, SmolStr,\n+    match_ast, AstToken, SmolStr, SyntaxNode,\n };\n use tt::Subtree;\n \n@@ -110,7 +110,17 @@ impl Attrs {\n     }\n \n     pub(crate) fn new(owner: &dyn AttrsOwner, hygiene: &Hygiene) -> Attrs {\n-        let docs = ast::CommentIter::from_syntax_node(owner.syntax()).map(|docs_text| {\n+        let (inner_attrs, inner_docs) = inner_attributes(owner.syntax())\n+            .map_or((None, None), |(attrs, docs)| ((Some(attrs), Some(docs))));\n+\n+        let outer_attrs = owner.attrs().filter(|attr| attr.excl_token().is_none());\n+        let attrs = outer_attrs\n+            .chain(inner_attrs.into_iter().flatten())\n+            .map(|attr| (attr.syntax().text_range().start(), Attr::from_src(attr, hygiene)));\n+\n+        let outer_docs =\n+            ast::CommentIter::from_syntax_node(owner.syntax()).filter(ast::Comment::is_outer);\n+        let docs = outer_docs.chain(inner_docs.into_iter().flatten()).map(|docs_text| {\n             (\n                 docs_text.syntax().text_range().start(),\n                 docs_text.doc_comment().map(|doc| Attr {\n@@ -119,9 +129,6 @@ impl Attrs {\n                 }),\n             )\n         });\n-        let attrs = owner\n-            .attrs()\n-            .map(|attr| (attr.syntax().text_range().start(), Attr::from_src(attr, hygiene)));\n         // sort here by syntax node offset because the source can have doc attributes and doc strings be interleaved\n         let attrs: Vec<_> = docs.chain(attrs).sorted_by_key(|&(offset, _)| offset).collect();\n         let entries = if attrs.is_empty() {\n@@ -184,6 +191,41 @@ impl Attrs {\n     }\n }\n \n+fn inner_attributes(\n+    syntax: &SyntaxNode,\n+) -> Option<(impl Iterator<Item = ast::Attr>, impl Iterator<Item = ast::Comment>)> {\n+    let (attrs, docs) = match_ast! {\n+        match syntax {\n+            ast::SourceFile(it) => (it.attrs(), ast::CommentIter::from_syntax_node(it.syntax())),\n+            ast::ExternBlock(it) => {\n+                let extern_item_list = it.extern_item_list()?;\n+                (extern_item_list.attrs(), ast::CommentIter::from_syntax_node(extern_item_list.syntax()))\n+            },\n+            ast::Fn(it) => {\n+                let body = it.body()?;\n+                (body.attrs(), ast::CommentIter::from_syntax_node(body.syntax()))\n+            },\n+            ast::Impl(it) => {\n+                let assoc_item_list = it.assoc_item_list()?;\n+                (assoc_item_list.attrs(), ast::CommentIter::from_syntax_node(assoc_item_list.syntax()))\n+            },\n+            ast::Module(it) => {\n+                let item_list = it.item_list()?;\n+                (item_list.attrs(), ast::CommentIter::from_syntax_node(item_list.syntax()))\n+            },\n+            // FIXME: BlockExpr's only accept inner attributes in specific cases\n+            // Excerpt from the reference:\n+            // Block expressions accept outer and inner attributes, but only when they are the outer\n+            // expression of an expression statement or the final expression of another block expression.\n+            ast::BlockExpr(it) => return None,\n+            _ => return None,\n+        }\n+    };\n+    let attrs = attrs.filter(|attr| attr.excl_token().is_some());\n+    let docs = docs.filter(|doc| doc.is_inner());\n+    Some((attrs, docs))\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Attr {\n     pub(crate) path: ModPath,"}, {"sha": "cf04c3de08a053f4fada16e4ebf4c55a7b201a66", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ef989880fff36f10b7e166647497779bacc1c47f/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef989880fff36f10b7e166647497779bacc1c47f/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=ef989880fff36f10b7e166647497779bacc1c47f", "patch": "@@ -3357,4 +3357,66 @@ impl Foo {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn hover_doc_outer_inner() {\n+        check(\n+            r#\"\n+/// Be quick;\n+mod Foo<|> {\n+    //! time is mana\n+\n+    /// This comment belongs to the function\n+    fn foo() {}\n+}\n+\"#,\n+            expect![[r#\"\n+                *Foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                mod Foo\n+                ```\n+\n+                ---\n+\n+                Be quick;\n+                time is mana\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn hover_doc_outer_inner_attribue() {\n+        check(\n+            r#\"\n+#[doc = \"Be quick;\"]\n+mod Foo<|> {\n+    #![doc = \"time is mana\"]\n+\n+    #[doc = \"This comment belongs to the function\"]\n+    fn foo() {}\n+}\n+\"#,\n+            expect![[r#\"\n+                *Foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                mod Foo\n+                ```\n+\n+                ---\n+\n+                Be quick;\n+                time is mana\n+            \"#]],\n+        );\n+    }\n }"}, {"sha": "52b7285dde29d3b8cec10d13dea3cb2ff4ecd3f6", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ef989880fff36f10b7e166647497779bacc1c47f/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef989880fff36f10b7e166647497779bacc1c47f/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=ef989880fff36f10b7e166647497779bacc1c47f", "patch": "@@ -17,6 +17,14 @@ impl ast::Comment {\n         CommentKind::from_text(self.text())\n     }\n \n+    pub fn is_inner(&self) -> bool {\n+        self.kind().doc == Some(CommentPlacement::Inner)\n+    }\n+\n+    pub fn is_outer(&self) -> bool {\n+        self.kind().doc == Some(CommentPlacement::Outer)\n+    }\n+\n     pub fn prefix(&self) -> &'static str {\n         let &(prefix, _kind) = CommentKind::BY_PREFIX\n             .iter()"}]}