{"sha": "5a0a9a280a83294cfc8b93ed8873781c85ef72c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhMGE5YTI4MGE4MzI5NGNmYzhiOTNlZDg4NzM3ODFjODVlZjcyYzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-02T13:11:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-02T13:11:22Z"}, "message": "Auto merge of #53897 - topecongiro:check-to-eat, r=petrochenkov\n\nReplace check() + bump() with eat()\n\ncc #51945.\n\nr? @petrochenkov", "tree": {"sha": "f3ca5ef09d1fb945a42f32f7a2961f33fc558ecc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3ca5ef09d1fb945a42f32f7a2961f33fc558ecc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a0a9a280a83294cfc8b93ed8873781c85ef72c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a0a9a280a83294cfc8b93ed8873781c85ef72c3", "html_url": "https://github.com/rust-lang/rust/commit/5a0a9a280a83294cfc8b93ed8873781c85ef72c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a0a9a280a83294cfc8b93ed8873781c85ef72c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3480ac2a805f8755f41dba2f081446df9d572986", "url": "https://api.github.com/repos/rust-lang/rust/commits/3480ac2a805f8755f41dba2f081446df9d572986", "html_url": "https://github.com/rust-lang/rust/commit/3480ac2a805f8755f41dba2f081446df9d572986"}, {"sha": "51dbb024f77a2a05921bdef7f07ee66831e48ad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/51dbb024f77a2a05921bdef7f07ee66831e48ad8", "html_url": "https://github.com/rust-lang/rust/commit/51dbb024f77a2a05921bdef7f07ee66831e48ad8"}], "stats": {"total": 30, "additions": 10, "deletions": 20}, "files": [{"sha": "3862877c3d93be45ba15a0c09f71200f8faf0baf", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 10, "deletions": 20, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5a0a9a280a83294cfc8b93ed8873781c85ef72c3/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a0a9a280a83294cfc8b93ed8873781c85ef72c3/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=5a0a9a280a83294cfc8b93ed8873781c85ef72c3", "patch": "@@ -1160,9 +1160,7 @@ impl<'a> Parser<'a> {\n     {\n         self.expect(bra)?;\n         let result = self.parse_seq_to_before_end(ket, sep, f)?;\n-        if self.token == *ket {\n-            self.bump();\n-        }\n+        self.eat(ket);\n         Ok(result)\n     }\n \n@@ -1358,8 +1356,7 @@ impl<'a> Parser<'a> {\n             let ident = self.parse_ident()?;\n             self.expect(&token::Colon)?;\n             let ty = self.parse_ty()?;\n-            let default = if self.check(&token::Eq) {\n-                self.bump();\n+            let default = if self.eat(&token::Eq) {\n                 let expr = self.parse_expr()?;\n                 self.expect(&token::Semi)?;\n                 Some(expr)\n@@ -2270,10 +2267,8 @@ impl<'a> Parser<'a> {\n                 while self.token != token::CloseDelim(token::Paren) {\n                     es.push(self.parse_expr()?);\n                     self.expect_one_of(&[], &[token::Comma, token::CloseDelim(token::Paren)])?;\n-                    if self.check(&token::Comma) {\n+                    if self.eat(&token::Comma) {\n                         trailing_comma = true;\n-\n-                        self.bump();\n                     } else {\n                         trailing_comma = false;\n                         break;\n@@ -2299,25 +2294,22 @@ impl<'a> Parser<'a> {\n \n                 attrs.extend(self.parse_inner_attributes()?);\n \n-                if self.check(&token::CloseDelim(token::Bracket)) {\n+                if self.eat(&token::CloseDelim(token::Bracket)) {\n                     // Empty vector.\n-                    self.bump();\n                     ex = ExprKind::Array(Vec::new());\n                 } else {\n                     // Nonempty vector.\n                     let first_expr = self.parse_expr()?;\n-                    if self.check(&token::Semi) {\n+                    if self.eat(&token::Semi) {\n                         // Repeating array syntax: [ 0; 512 ]\n-                        self.bump();\n                         let count = AnonConst {\n                             id: ast::DUMMY_NODE_ID,\n                             value: self.parse_expr()?,\n                         };\n                         self.expect(&token::CloseDelim(token::Bracket))?;\n                         ex = ExprKind::Repeat(first_expr, count);\n-                    } else if self.check(&token::Comma) {\n+                    } else if self.eat(&token::Comma) {\n                         // Vector with two or more elements.\n-                        self.bump();\n                         let remaining_exprs = self.parse_seq_to_end(\n                             &token::CloseDelim(token::Bracket),\n                             SeqSep::trailing_allowed(token::Comma),\n@@ -3624,8 +3616,7 @@ impl<'a> Parser<'a> {\n \n     /// Parse the RHS of a local variable declaration (e.g. '= 14;')\n     fn parse_initializer(&mut self, skip_eq: bool) -> PResult<'a, Option<P<Expr>>> {\n-        if self.check(&token::Eq) {\n-            self.bump();\n+        if self.eat(&token::Eq) {\n             Ok(Some(self.parse_expr()?))\n         } else if skip_eq {\n             Ok(Some(self.parse_expr()?))\n@@ -3651,8 +3642,8 @@ impl<'a> Parser<'a> {\n                 );\n                 err.emit();\n                 self.bump();\n-            } else if self.check(&token::BinOp(token::Or)) {\n-                self.bump();\n+            } else if self.eat(&token::BinOp(token::Or)) {\n+                // No op.\n             } else {\n                 return Ok(pats);\n             }\n@@ -6290,8 +6281,7 @@ impl<'a> Parser<'a> {\n \n         let id_span = self.span;\n         let id = self.parse_ident()?;\n-        if self.check(&token::Semi) {\n-            self.bump();\n+        if self.eat(&token::Semi) {\n             if in_cfg && self.recurse_into_file_modules {\n                 // This mod is in an external file. Let's go get it!\n                 let ModulePathSuccess { path, directory_ownership, warn } ="}]}