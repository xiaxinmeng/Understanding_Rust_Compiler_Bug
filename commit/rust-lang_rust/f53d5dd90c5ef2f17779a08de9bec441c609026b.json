{"sha": "f53d5dd90c5ef2f17779a08de9bec441c609026b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1M2Q1ZGQ5MGM1ZWYyZjE3Nzc5YTA4ZGU5YmVjNDQxYzYwOTAyNmI=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-03-27T01:28:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-27T01:28:41Z"}, "message": "Merge pull request #1409 from alobb/1408-empty-tuple-enum-decl\n\nPrevent conversion of empty tuples to unit structs", "tree": {"sha": "f44b51a094212e6af221845a7a7f4b870bce3423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f44b51a094212e6af221845a7a7f4b870bce3423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f53d5dd90c5ef2f17779a08de9bec441c609026b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f53d5dd90c5ef2f17779a08de9bec441c609026b", "html_url": "https://github.com/rust-lang/rust/commit/f53d5dd90c5ef2f17779a08de9bec441c609026b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f53d5dd90c5ef2f17779a08de9bec441c609026b/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abca1dededc504eeff7fb31fb2f92e54c7ddae0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/abca1dededc504eeff7fb31fb2f92e54c7ddae0e", "html_url": "https://github.com/rust-lang/rust/commit/abca1dededc504eeff7fb31fb2f92e54c7ddae0e"}, {"sha": "548de69d2d767730f15244a66ec4b595efe07786", "url": "https://api.github.com/repos/rust-lang/rust/commits/548de69d2d767730f15244a66ec4b595efe07786", "html_url": "https://github.com/rust-lang/rust/commit/548de69d2d767730f15244a66ec4b595efe07786"}], "stats": {"total": 106, "additions": 59, "deletions": 47}, "files": [{"sha": "222ad6a932373e51ad6c6734efffc85a2eb27986", "filename": "src/patterns.rs", "status": "modified", "additions": 46, "deletions": 47, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/f53d5dd90c5ef2f17779a08de9bec441c609026b/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53d5dd90c5ef2f17779a08de9bec441c609026b/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=f53d5dd90c5ef2f17779a08de9bec441c609026b", "patch": "@@ -266,55 +266,54 @@ fn rewrite_tuple_pat(pats: &[ptr::P<ast::Pat>],\n     }\n \n     if pat_vec.is_empty() {\n-        path_str\n+        return Some(format!(\"{}()\", try_opt!(path_str)));\n+    }\n+    // add comma if `(x,)`\n+    let add_comma = path_str.is_none() && pat_vec.len() == 1 && dotdot_pos.is_none();\n+\n+    let path_len = path_str.as_ref().map(|p| p.len()).unwrap_or(0);\n+    // 2 = \"()\".len(), 3 = \"(,)\".len()\n+    let nested_shape = try_opt!(shape.sub_width(path_len + if add_comma { 3 } else { 2 }));\n+    // 1 = \"(\".len()\n+    let nested_shape = nested_shape.visual_indent(path_len + 1);\n+    let mut items: Vec<_> = itemize_list(context.codemap,\n+                                         pat_vec.iter(),\n+                                         if add_comma { \",)\" } else { \")\" },\n+                                         |item| item.span().lo,\n+                                         |item| item.span().hi,\n+                                         |item| item.rewrite(context, nested_shape),\n+                                         context.codemap.span_after(span, \"(\"),\n+                                         span.hi - BytePos(1))\n+            .collect();\n+\n+    // Condense wildcard string suffix into a single ..\n+    let wildcard_suffix_len = count_wildcard_suffix_len(&items);\n+\n+    let list = if context.config.condense_wildcard_suffices && wildcard_suffix_len >= 2 {\n+        let new_item_count = 1 + pats.len() - wildcard_suffix_len;\n+        items[new_item_count - 1].item = Some(\"..\".to_owned());\n+\n+        let da_iter = items.into_iter().take(new_item_count);\n+        try_opt!(format_item_list(da_iter, nested_shape, context.config))\n     } else {\n-        // add comma if `(x,)`\n-        let add_comma = path_str.is_none() && pat_vec.len() == 1 && dotdot_pos.is_none();\n-\n-        let path_len = path_str.as_ref().map(|p| p.len()).unwrap_or(0);\n-        // 2 = \"()\".len(), 3 = \"(,)\".len()\n-        let nested_shape = try_opt!(shape.sub_width(path_len + if add_comma { 3 } else { 2 }));\n-        // 1 = \"(\".len()\n-        let nested_shape = nested_shape.visual_indent(path_len + 1);\n-        let mut items: Vec<_> = itemize_list(context.codemap,\n-                                             pat_vec.iter(),\n-                                             if add_comma { \",)\" } else { \")\" },\n-                                             |item| item.span().lo,\n-                                             |item| item.span().hi,\n-                                             |item| item.rewrite(context, nested_shape),\n-                                             context.codemap.span_after(span, \"(\"),\n-                                             span.hi - BytePos(1))\n-                .collect();\n-\n-        // Condense wildcard string suffix into a single ..\n-        let wildcard_suffix_len = count_wildcard_suffix_len(&items);\n-\n-        let list = if context.config.condense_wildcard_suffices && wildcard_suffix_len >= 2 {\n-            let new_item_count = 1 + pats.len() - wildcard_suffix_len;\n-            items[new_item_count - 1].item = Some(\"..\".to_owned());\n-\n-            let da_iter = items.into_iter().take(new_item_count);\n-            try_opt!(format_item_list(da_iter, nested_shape, context.config))\n-        } else {\n-            try_opt!(format_item_list(items.into_iter(), nested_shape, context.config))\n-        };\n+        try_opt!(format_item_list(items.into_iter(), nested_shape, context.config))\n+    };\n \n-        match path_str {\n-            Some(path_str) => {\n-                Some(if context.config.spaces_within_parens {\n-                         format!(\"{}( {} )\", path_str, list)\n-                     } else {\n-                         format!(\"{}({})\", path_str, list)\n-                     })\n-            }\n-            None => {\n-                let comma = if add_comma { \",\" } else { \"\" };\n-                Some(if context.config.spaces_within_parens {\n-                         format!(\"( {}{} )\", list, comma)\n-                     } else {\n-                         format!(\"({}{})\", list, comma)\n-                     })\n-            }\n+    match path_str {\n+        Some(path_str) => {\n+            Some(if context.config.spaces_within_parens {\n+                     format!(\"{}( {} )\", path_str, list)\n+                 } else {\n+                     format!(\"{}({})\", path_str, list)\n+                 })\n+        }\n+        None => {\n+            let comma = if add_comma { \",\" } else { \"\" };\n+            Some(if context.config.spaces_within_parens {\n+                     format!(\"( {}{} )\", list, comma)\n+                 } else {\n+                     format!(\"({}{})\", list, comma)\n+                 })\n         }\n     }\n }"}, {"sha": "778937b0d56ca5819cf6536be48cabe95f02cc8f", "filename": "tests/target/empty-tuple-no-conversion-to-unit-struct.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f53d5dd90c5ef2f17779a08de9bec441c609026b/tests%2Ftarget%2Fempty-tuple-no-conversion-to-unit-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f53d5dd90c5ef2f17779a08de9bec441c609026b/tests%2Ftarget%2Fempty-tuple-no-conversion-to-unit-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fempty-tuple-no-conversion-to-unit-struct.rs?ref=f53d5dd90c5ef2f17779a08de9bec441c609026b", "patch": "@@ -0,0 +1,13 @@\n+enum TestEnum {\n+    Arm1(),\n+    Arm2,\n+}\n+\n+\n+fn foo() {\n+    let test = TestEnum::Arm1;\n+    match test {\n+        TestEnum::Arm1() => {}\n+        TestEnum::Arm2 => {}\n+    }\n+}"}]}