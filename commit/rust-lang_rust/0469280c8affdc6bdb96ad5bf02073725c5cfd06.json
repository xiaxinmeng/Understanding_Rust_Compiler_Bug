{"sha": "0469280c8affdc6bdb96ad5bf02073725c5cfd06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NjkyODBjOGFmZmRjNmJkYjk2YWQ1YmYwMjA3MzcyNWM1Y2ZkMDY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-23T14:40:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-23T14:40:34Z"}, "message": "Merge #8166\n\n8166: Unify test style r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e1fd6ca043fbb5fde1dfb4ddf6483a775bc4b2ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1fd6ca043fbb5fde1dfb4ddf6483a775bc4b2ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0469280c8affdc6bdb96ad5bf02073725c5cfd06", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWf3iCRBK7hj4Ov3rIwAAdHIIAA9O14Dllc+a/hYR/O1MHNFc\nb7tNozIh+KLKT3UOHAaFxcZ5qM4pPJeEQacmyVnD6JB6ujzUwDhNybEkiLJQgUjV\ndikoJptQMbDdc8QankYBCZg0lfJ41QK7Qvv1PXMm82zTVrh9A+eoYeSuXfQhn2tJ\nl1HOxRV7ddzd9RznzPY2cVkw9AaZrnQdWo9QoA1o4lfBJydZfwtARfo/y1maQx/Y\nl2h8cB8h0vy4/DHAzXEXUEl8oubDjg4+Z/8lxIWWjtCBM56PxERQNu/IPN10XMJt\nB17JbUH2WLfAgr740T8n+bCpbb8T9SuQcR/JTNRfn3QyZzqtTUaiI01/j6bt9CE=\n=7QNe\n-----END PGP SIGNATURE-----\n", "payload": "tree e1fd6ca043fbb5fde1dfb4ddf6483a775bc4b2ed\nparent d15edf779bec09a86d05846299f1564b8b27a1d5\nparent 7352f50ec23739ca53e51eaec96809bd873debfe\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616510434 +0000\ncommitter GitHub <noreply@github.com> 1616510434 +0000\n\nMerge #8166\n\n8166: Unify test style r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0469280c8affdc6bdb96ad5bf02073725c5cfd06", "html_url": "https://github.com/rust-lang/rust/commit/0469280c8affdc6bdb96ad5bf02073725c5cfd06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0469280c8affdc6bdb96ad5bf02073725c5cfd06/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d15edf779bec09a86d05846299f1564b8b27a1d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d15edf779bec09a86d05846299f1564b8b27a1d5", "html_url": "https://github.com/rust-lang/rust/commit/d15edf779bec09a86d05846299f1564b8b27a1d5"}, {"sha": "7352f50ec23739ca53e51eaec96809bd873debfe", "url": "https://api.github.com/repos/rust-lang/rust/commits/7352f50ec23739ca53e51eaec96809bd873debfe", "html_url": "https://github.com/rust-lang/rust/commit/7352f50ec23739ca53e51eaec96809bd873debfe"}], "stats": {"total": 90, "additions": 52, "deletions": 38}, "files": [{"sha": "62db3195240a1e70aaa857ba3434f94ebb86a485", "filename": "crates/ide_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 52, "deletions": 38, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/0469280c8affdc6bdb96ad5bf02073725c5cfd06/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0469280c8affdc6bdb96ad5bf02073725c5cfd06/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=0469280c8affdc6bdb96ad5bf02073725c5cfd06", "patch": "@@ -34,26 +34,33 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     // The binding must have a name\n     let name = pat.name()?;\n     let name_range = name.syntax().text_range();\n-    let stmt_range = let_stmt.syntax().text_range();\n-    let eq_range = let_stmt.eq_token()?.text_range();\n+\n     // Assist should only be applicable if cursor is between 'let' and '='\n-    let let_range = TextRange::new(stmt_range.start(), eq_range.start());\n-    let cursor_in_range = let_range.contains_range(ctx.frange.range);\n+    let cursor_in_range = {\n+        let stmt_range = let_stmt.syntax().text_range();\n+        let eq_range = let_stmt.eq_token()?.text_range();\n+        let let_range = TextRange::new(stmt_range.start(), eq_range.start());\n+        let_range.contains_range(ctx.frange.range)\n+    };\n     if !cursor_in_range {\n+        cov_mark::hit!(add_explicit_type_not_applicable_if_cursor_after_equals);\n         return None;\n     }\n+\n     // Assist not applicable if the type has already been specified\n     // and it has no placeholders\n     let ascribed_ty = let_stmt.ty();\n     if let Some(ty) = &ascribed_ty {\n         if ty.syntax().descendants().find_map(ast::InferType::cast).is_none() {\n+            cov_mark::hit!(add_explicit_type_not_applicable_if_ty_already_specified);\n             return None;\n         }\n     }\n+\n     // Infer type\n     let ty = ctx.sema.type_of_expr(&expr)?;\n-\n     if ty.contains_unknown() || ty.is_closure() {\n+        cov_mark::hit!(add_explicit_type_not_applicable_if_ty_not_inferred);\n         return None;\n     }\n \n@@ -81,41 +88,45 @@ mod tests {\n \n     #[test]\n     fn add_explicit_type_target() {\n-        check_assist_target(add_explicit_type, \"fn f() { let a$0 = 1; }\", \"a\");\n+        check_assist_target(add_explicit_type, r#\"fn f() { let a$0 = 1; }\"#, \"a\");\n     }\n \n     #[test]\n     fn add_explicit_type_works_for_simple_expr() {\n-        check_assist(add_explicit_type, \"fn f() { let a$0 = 1; }\", \"fn f() { let a: i32 = 1; }\");\n+        check_assist(\n+            add_explicit_type,\n+            r#\"fn f() { let a$0 = 1; }\"#,\n+            r#\"fn f() { let a: i32 = 1; }\"#,\n+        );\n     }\n \n     #[test]\n     fn add_explicit_type_works_for_underscore() {\n-        check_assist(add_explicit_type, \"fn f() { let a$0: _ = 1; }\", \"fn f() { let a: i32 = 1; }\");\n+        check_assist(\n+            add_explicit_type,\n+            r#\"fn f() { let a$0: _ = 1; }\"#,\n+            r#\"fn f() { let a: i32 = 1; }\"#,\n+        );\n     }\n \n     #[test]\n     fn add_explicit_type_works_for_nested_underscore() {\n         check_assist(\n             add_explicit_type,\n             r#\"\n-            enum Option<T> {\n-                Some(T),\n-                None\n-            }\n+enum Option<T> { Some(T), None }\n \n-            fn f() {\n-                let a$0: Option<_> = Option::Some(1);\n-            }\"#,\n+fn f() {\n+    let a$0: Option<_> = Option::Some(1);\n+}\n+\"#,\n             r#\"\n-            enum Option<T> {\n-                Some(T),\n-                None\n-            }\n+enum Option<T> { Some(T), None }\n \n-            fn f() {\n-                let a: Option<i32> = Option::Some(1);\n-            }\"#,\n+fn f() {\n+    let a: Option<i32> = Option::Some(1);\n+}\n+\"#,\n         );\n     }\n \n@@ -139,32 +150,38 @@ mod tests {\n \n     #[test]\n     fn add_explicit_type_not_applicable_if_ty_not_inferred() {\n-        check_assist_not_applicable(add_explicit_type, \"fn f() { let a$0 = None; }\");\n+        cov_mark::check!(add_explicit_type_not_applicable_if_ty_not_inferred);\n+        check_assist_not_applicable(add_explicit_type, r#\"fn f() { let a$0 = None; }\"#);\n     }\n \n     #[test]\n     fn add_explicit_type_not_applicable_if_ty_already_specified() {\n-        check_assist_not_applicable(add_explicit_type, \"fn f() { let a$0: i32 = 1; }\");\n+        cov_mark::check!(add_explicit_type_not_applicable_if_ty_already_specified);\n+        check_assist_not_applicable(add_explicit_type, r#\"fn f() { let a$0: i32 = 1; }\"#);\n     }\n \n     #[test]\n     fn add_explicit_type_not_applicable_if_specified_ty_is_tuple() {\n-        check_assist_not_applicable(add_explicit_type, \"fn f() { let a$0: (i32, i32) = (3, 4); }\");\n+        check_assist_not_applicable(\n+            add_explicit_type,\n+            r#\"fn f() { let a$0: (i32, i32) = (3, 4); }\"#,\n+        );\n     }\n \n     #[test]\n     fn add_explicit_type_not_applicable_if_cursor_after_equals() {\n+        cov_mark::check!(add_explicit_type_not_applicable_if_cursor_after_equals);\n         check_assist_not_applicable(\n             add_explicit_type,\n-            \"fn f() {let a =$0 match 1 {2 => 3, 3 => 5};}\",\n+            r#\"fn f() {let a =$0 match 1 {2 => 3, 3 => 5};}\"#,\n         )\n     }\n \n     #[test]\n     fn add_explicit_type_not_applicable_if_cursor_before_let() {\n         check_assist_not_applicable(\n             add_explicit_type,\n-            \"fn f() $0{let a = match 1 {2 => 3, 3 => 5};}\",\n+            r#\"fn f() $0{let a = match 1 {2 => 3, 3 => 5};}\"#,\n         )\n     }\n \n@@ -176,7 +193,8 @@ mod tests {\n fn main() {\n     let multiply_by_two$0 = |i| i * 3;\n     let six = multiply_by_two(2);\n-}\"#,\n+}\n+\"#,\n         )\n     }\n \n@@ -185,23 +203,19 @@ fn main() {\n         check_assist(\n             add_explicit_type,\n             r#\"\n-struct Test<K, T = u8> {\n-    k: K,\n-    t: T,\n-}\n+struct Test<K, T = u8> { k: K, t: T }\n \n fn main() {\n     let test$0 = Test { t: 23u8, k: 33 };\n-}\"#,\n-            r#\"\n-struct Test<K, T = u8> {\n-    k: K,\n-    t: T,\n }\n+\"#,\n+            r#\"\n+struct Test<K, T = u8> { k: K, t: T }\n \n fn main() {\n     let test: Test<i32> = Test { t: 23u8, k: 33 };\n-}\"#,\n+}\n+\"#,\n         );\n     }\n }"}]}