{"sha": "598797c6e76c041b449a838d09f1c829b0adc437", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5ODc5N2M2ZTc2YzA0MWI0NDlhODM4ZDA5ZjFjODI5YjBhZGM0Mzc=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-11-20T16:53:34Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2019-12-02T13:41:30Z"}, "message": "Remove unchecked inline attribute, remove unused functions, make chache mod private again", "tree": {"sha": "2288aabf1f439e6c4a1c4add4df4abec485f2b3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2288aabf1f439e6c4a1c4add4df4abec485f2b3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/598797c6e76c041b449a838d09f1c829b0adc437", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/598797c6e76c041b449a838d09f1c829b0adc437", "html_url": "https://github.com/rust-lang/rust/commit/598797c6e76c041b449a838d09f1c829b0adc437", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/598797c6e76c041b449a838d09f1c829b0adc437/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6354e9839cefbaf80d3a26304bc3e4adacfabb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6354e9839cefbaf80d3a26304bc3e4adacfabb0", "html_url": "https://github.com/rust-lang/rust/commit/c6354e9839cefbaf80d3a26304bc3e4adacfabb0"}], "stats": {"total": 74, "additions": 26, "deletions": 48}, "files": [{"sha": "30f383ff33116b4bd3faca70488cc2f93f95fa40", "filename": "src/librustc/mir/cache.rs", "status": "modified", "additions": 25, "deletions": 47, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/598797c6e76c041b449a838d09f1c829b0adc437/src%2Flibrustc%2Fmir%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598797c6e76c041b449a838d09f1c829b0adc437/src%2Flibrustc%2Fmir%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fcache.rs?ref=598797c6e76c041b449a838d09f1c829b0adc437", "patch": "@@ -32,45 +32,6 @@ impl<'a> HashStable<StableHashingContext<'a>> for Cache {\n     }\n }\n \n-macro_rules! get_predecessors {\n-    (mut $self:ident, $block:expr, $body:expr) => {\n-        $self.predecessors_for($block, $body)\n-    };\n-    ($self:ident, $block:expr, $body:expr) => {\n-        $self.unwrap_predecessors_for($block)\n-    };\n-}\n-\n-macro_rules! impl_predecessor_locations {\n-    ( ( $($pub:ident)? )  $name:ident $($mutability:ident)?) => {\n-        $($pub)? fn $name<'a>(\n-            &'a $($mutability)? self,\n-            loc: Location,\n-            body: &'a Body<'a>\n-        ) -> impl Iterator<Item = Location> + 'a {\n-            let if_zero_locations = if loc.statement_index == 0 {\n-                let predecessor_blocks = get_predecessors!($($mutability)? self, loc.block, body);\n-                let num_predecessor_blocks = predecessor_blocks.len();\n-                Some(\n-                    (0..num_predecessor_blocks)\n-                        .map(move |i| predecessor_blocks[i])\n-                        .map(move |bb| body.terminator_loc(bb)),\n-                )\n-            } else {\n-                None\n-            };\n-\n-            let if_not_zero_locations = if loc.statement_index == 0 {\n-                None\n-            } else {\n-                Some(Location { block: loc.block, statement_index: loc.statement_index - 1 })\n-            };\n-\n-            if_zero_locations.into_iter().flatten().chain(if_not_zero_locations)\n-        }\n-    };\n-}\n-\n impl Cache {\n     pub fn new() -> Self {\n         Self {\n@@ -104,17 +65,35 @@ impl Cache {\n         self.predecessors.as_ref().unwrap()\n     }\n \n-    fn predecessors_for(&mut self, bb: BasicBlock, body: &Body<'_>) -> &[BasicBlock] {\n-        &self.predecessors(body)[bb]\n-    }\n-\n     fn unwrap_predecessors_for(&self, bb: BasicBlock) -> &[BasicBlock] {\n         &self.predecessors.as_ref().unwrap()[bb]\n     }\n \n-    impl_predecessor_locations!((pub) predecessor_locations mut);\n-\n-    impl_predecessor_locations!(() unwrap_predecessor_locations);\n+    fn unwrap_predecessor_locations<'a>(\n+        &'a self,\n+        loc: Location,\n+        body: &'a Body<'a>\n+    ) -> impl Iterator<Item = Location> + 'a {\n+        let if_zero_locations = if loc.statement_index == 0 {\n+            let predecessor_blocks = self.unwrap_predecessors_for(loc.block);\n+            let num_predecessor_blocks = predecessor_blocks.len();\n+            Some(\n+                (0..num_predecessor_blocks)\n+                    .map(move |i| predecessor_blocks[i])\n+                    .map(move |bb| body.terminator_loc(bb)),\n+            )\n+        } else {\n+            None\n+        };\n+\n+        let if_not_zero_locations = if loc.statement_index == 0 {\n+            None\n+        } else {\n+            Some(Location { block: loc.block, statement_index: loc.statement_index - 1 })\n+        };\n+\n+        if_zero_locations.into_iter().flatten().chain(if_not_zero_locations)\n+    }\n \n     pub fn basic_blocks_mut<'a, 'tcx>(\n         &mut self,\n@@ -125,7 +104,6 @@ impl Cache {\n         &mut body.basic_blocks\n     }\n \n-    #[inline]\n     pub fn basic_blocks_and_local_decls_mut<'a, 'tcx>(\n         &mut self,\n         body: &'a mut Body<'tcx>"}, {"sha": "df5d4997e089aac8cbd297b8ff5054ab1fb5d41e", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/598797c6e76c041b449a838d09f1c829b0adc437/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/598797c6e76c041b449a838d09f1c829b0adc437/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=598797c6e76c041b449a838d09f1c829b0adc437", "patch": "@@ -41,7 +41,7 @@ pub use crate::mir::interpret::AssertMessage;\n pub use crate::mir::cache::{BodyCache, ReadOnlyBodyCache};\n pub use crate::read_only;\n \n-pub mod cache;\n+mod cache;\n pub mod interpret;\n pub mod mono;\n pub mod tcx;"}]}