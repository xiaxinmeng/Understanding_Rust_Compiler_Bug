{"sha": "1c52c81846246e135557f1aa6db5bef4140c8717", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjNTJjODE4NDYyNDZlMTM1NTU3ZjFhYTZkYjViZWY0MTQwYzg3MTc=", "commit": {"author": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-03-06T07:35:12Z"}, "committer": {"name": "Kang Seonghoon", "email": "public+git@mearie.org", "date": "2014-03-06T11:19:14Z"}, "message": "fix typos with with repeated words, just like this sentence.", "tree": {"sha": "01f1b6cf88fc45a578a113935b833be52c0c790c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01f1b6cf88fc45a578a113935b833be52c0c790c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c52c81846246e135557f1aa6db5bef4140c8717", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c52c81846246e135557f1aa6db5bef4140c8717", "html_url": "https://github.com/rust-lang/rust/commit/1c52c81846246e135557f1aa6db5bef4140c8717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c52c81846246e135557f1aa6db5bef4140c8717/comments", "author": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lifthrasiir", "id": 323836, "node_id": "MDQ6VXNlcjMyMzgzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/323836?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lifthrasiir", "html_url": "https://github.com/lifthrasiir", "followers_url": "https://api.github.com/users/lifthrasiir/followers", "following_url": "https://api.github.com/users/lifthrasiir/following{/other_user}", "gists_url": "https://api.github.com/users/lifthrasiir/gists{/gist_id}", "starred_url": "https://api.github.com/users/lifthrasiir/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lifthrasiir/subscriptions", "organizations_url": "https://api.github.com/users/lifthrasiir/orgs", "repos_url": "https://api.github.com/users/lifthrasiir/repos", "events_url": "https://api.github.com/users/lifthrasiir/events{/privacy}", "received_events_url": "https://api.github.com/users/lifthrasiir/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14c620719c06fcb3222b95d0d1505306506efb86", "url": "https://api.github.com/repos/rust-lang/rust/commits/14c620719c06fcb3222b95d0d1505306506efb86", "html_url": "https://github.com/rust-lang/rust/commit/14c620719c06fcb3222b95d0d1505306506efb86"}], "stats": {"total": 60, "additions": 30, "deletions": 30}, "files": [{"sha": "5f5f596b1b79754776cba859fcfb6ff547b53b16", "filename": "mk/main.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -322,7 +322,7 @@ CSREQ$(1)_T_$(2)_H_$(3) = \\\n \t$$(foreach dep,$$(HOST_CRATES),$$(HLIB$(1)_H_$(3))/stamp.$$(dep))\n \n ifeq ($(1),0)\n-# Don't run the the stage0 compiler under valgrind - that ship has sailed\n+# Don't run the stage0 compiler under valgrind - that ship has sailed\n CFG_VALGRIND_COMPILE$(1) =\n else\n CFG_VALGRIND_COMPILE$(1) = $$(CFG_VALGRIND_COMPILE)"}, {"sha": "d37b33d2316a69e0aade5a5407f01c898e11280f", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -2485,7 +2485,7 @@ before the expression they apply to.\n `*`\n   : Dereference. When applied to a [pointer](#pointer-types) it denotes the pointed-to location.\n     For pointers to mutable locations, the resulting [lvalue](#lvalues-rvalues-and-temporaries) can be assigned to.\n-    On non-pointer types, it calls calls the `deref` method of the `std::ops::Deref` trait, or the\n+    On non-pointer types, it calls the `deref` method of the `std::ops::Deref` trait, or the\n     `deref_mut` method of the `std::ops::DerefMut` trait (if implemented by the type and required\n     for an outer expression that will or could mutate the dereference), and produces the\n     result of dereferencing the `&` or `&mut` borrowed pointer returned from the overload method."}, {"sha": "603d5bb820d498e0be5c02feba4d3886e283d15d", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -304,7 +304,7 @@ mod test_map {\n     fn test_insert_with_key() {\n         let mut map = SmallIntMap::new();\n \n-        // given a new key, initialize it with this new count, given\n+        // given a new key, initialize it with this new count,\n         // given an existing key, add more to its count\n         fn addMoreToCount(_k: uint, v0: uint, v1: uint) -> uint {\n             v0 + v1"}, {"sha": "d67e8f85ba98a334ed731cc2ebb086cb6669891f", "filename": "src/libextra/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibextra%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibextra%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fstats.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -103,7 +103,7 @@ pub trait Stats {\n     fn median_abs_dev_pct(self) -> f64;\n \n     /// Percentile: the value below which `pct` percent of the values in `self` fall. For example,\n-    /// percentile(95.0) will return the value `v` such that that 95% of the samples `s` in `self`\n+    /// percentile(95.0) will return the value `v` such that 95% of the samples `s` in `self`\n     /// satisfy `s <= v`.\n     ///\n     /// Calculated by linear interpolation between closest ranks."}, {"sha": "59477b6734ad94eb28d7d8410e1ede938563803f", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -284,7 +284,7 @@ pub struct PoolConfig {\n }\n \n impl PoolConfig {\n-    /// Returns the default configuration, as determined the the environment\n+    /// Returns the default configuration, as determined the environment\n     /// variables of this process.\n     pub fn new() -> PoolConfig {\n         PoolConfig {"}, {"sha": "a34323d6ddc204d0ab3282fdff37d71aefce982d", "filename": "src/librustc/back/svh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fback%2Fsvh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fback%2Fsvh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fsvh.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -19,7 +19,7 @@\n //! ends up yielding confusing error messages about metadata mismatches and\n //! such.\n //!\n-//! The core of this problem is when when an upstream dependency changes and\n+//! The core of this problem is when an upstream dependency changes and\n //! downstream dependants are not recompiled. This causes compile errors because\n //! the upstream crate's metadata has changed but the downstream crates are\n //! still referencing the older crate's metadata."}, {"sha": "d27d92249fafce699436da8409a6482ed5250344", "filename": "src/librustc/middle/borrowck/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fdoc.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -212,7 +212,7 @@ borrow checker works, let's look a bit more closely now at the precise\n conditions that it uses. For simplicity I will ignore const loans.\n \n I will present the rules in a modified form of standard inference\n-rules, which looks as as follows:\n+rules, which looks as follows:\n \n ```notrust\n PREDICATE(X, Y, Z)                  // Rule-Name"}, {"sha": "0e61629f17864256fd2b42e1956686b9ac5b0305", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -4294,7 +4294,7 @@ impl Resolver {\n \n             TyPath(ref path, ref bounds, path_id) => {\n                 // This is a path in the type namespace. Walk through scopes\n-                // scopes looking for it.\n+                // looking for it.\n                 let mut result_def = None;\n \n                 // First, check to see whether the name is a primitive type."}, {"sha": "d6dda75c7c034b23a9c339056c9966419f06508d", "filename": "src/librustc/middle/trans/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdoc.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -40,7 +40,7 @@ up expressions into:\n ## The Datum module\n \n A `Datum` encapsulates the result of evaluating a Rust expression.  It\n-contains a `ValueRef` indicating the result, a `ty::t` describing the\n+contains a `ValueRef` indicating the result, a `ty::t` describing\n the Rust type, but also a *kind*. The kind indicates whether the datum\n has cleanup scheduled (lvalue) or not (rvalue) and -- in the case of\n rvalues -- whether or not the value is \"by ref\" or \"by value\"."}, {"sha": "ecbf9342ec09b6ec3bae0ecd11cb3ed175940b23", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -600,7 +600,7 @@ pub enum BorrowKind {\n  *   be a sublifetime of `'x...'z`.\n  * - The closure creator knows which upvars were borrowed by the closure\n  *   and thus `x...z` will be reserved for `'x...'z` respectively.\n- * - Through mutation, the borrowed upvars can actually escape the\n+ * - Through mutation, the borrowed upvars can actually escape\n  *   the closure, so sometimes it is necessary for them to be larger\n  *   than the closure lifetime itself.\n  */\n@@ -3377,8 +3377,8 @@ pub fn expr_kind(tcx: ctxt,\n                     // the AST type in cast node---but (at the time of this\n                     // writing) it's not easy to distinguish casts to traits\n                     // from other casts based on the AST.  This should be\n-                    // easier in the future, when casts to traits would like\n-                    // like @Foo, ~Foo, or &Foo.\n+                    // easier in the future, when casts to traits\n+                    // would like @Foo, ~Foo, or &Foo.\n                     RvalueDatumExpr\n                 }\n             }\n@@ -4240,7 +4240,7 @@ pub fn lookup_simd(tcx: ctxt, did: DefId) -> bool {\n     has_attr(tcx, did, \"simd\")\n }\n \n-// Obtain the the representation annotation for a definition.\n+// Obtain the representation annotation for a definition.\n pub fn lookup_repr_hint(tcx: ctxt, did: DefId) -> attr::ReprAttr {\n     let mut acc = attr::ReprAny;\n     ty::each_attr(tcx, did, |meta| {"}, {"sha": "94f679954fbd2d9eb358c45bbdd5184ebf5d739a", "filename": "src/librustc/middle/typeck/infer/lattice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flattice.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -277,7 +277,7 @@ impl<'f> CombineFieldsLatticeMethods for CombineFields<'f> {\n         let _indent = indenter();\n \n         // First, relate the lower/upper bounds of A and B.\n-        // Note that these relations *must* hold for us to\n+        // Note that these relations *must* hold for us\n         // to be able to merge A and B at all, and relating\n         // them explicitly gives the type inferencer more\n         // information and helps to produce tighter bounds"}, {"sha": "a05d7a33fb4da7f89c834e894a257adfb359c8b4", "filename": "src/librustc/middle/typeck/infer/region_inference/doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fregion_inference%2Fdoc.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -149,7 +149,7 @@ In this example, there is a region for the fn body block as a whole,\n and then a subregion for the declaration of the local variable.\n Within that, there are sublifetimes for the assignment pattern and\n also the expression `x + y`. The expression itself has sublifetimes\n-for evaluating `x` and and `y`.\n+for evaluating `x` and `y`.\n \n ## Function calls\n "}, {"sha": "4030ca5a87f3cedca98d9b08a5507a15d9351a92", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -197,7 +197,7 @@ impl Repr for vtable_origin {\n pub type vtable_map = @RefCell<HashMap<ast::NodeId, vtable_res>>;\n \n \n-// Information about the vtable resolutions for for a trait impl.\n+// Information about the vtable resolutions for a trait impl.\n // Mostly the information is important for implementing default\n // methods.\n #[deriving(Clone)]"}, {"sha": "4fc027e6fee6901da8e9c9d4f7fdf241eb63637f", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -18,7 +18,7 @@ use syntax::codemap::Span;\n use syntax::opt_vec::OptVec;\n \n /// Defines strategies for handling regions that are omitted.  For\n-/// example, if one writes the type `&Foo`, then the lifetime of of\n+/// example, if one writes the type `&Foo`, then the lifetime of\n /// this reference has been omitted. When converting this\n /// type, the generic functions in astconv will invoke `anon_regions`\n /// on the provided region-scope to decide how to translate this"}, {"sha": "fd958844abdd6e4421a66bed0c51caad6960ae44", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -766,7 +766,7 @@ impl Clean<Item> for doctree::Struct {\n     }\n }\n \n-/// This is a more limited form of the standard Struct, different in that it\n+/// This is a more limited form of the standard Struct, different in that\n /// it lacks the things most items have (name, id, parameterization). Found\n /// only as a variant in an enum.\n #[deriving(Clone, Encodable, Decodable)]"}, {"sha": "328dd70223ba6192bd3dddcd13ce7d9a686d024f", "filename": "src/libstd/comm/shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibstd%2Fcomm%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibstd%2Fcomm%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fshared.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -302,7 +302,7 @@ impl<T: Send> Packet<T> {\n             }\n         };\n         match ret {\n-            // See the discussion in the stream implementation for why we we\n+            // See the discussion in the stream implementation for why we\n             // might decrement steals.\n             Some(data) => {\n                 if self.steals > MAX_STEALS {"}, {"sha": "fa122fa8c116005d54994afd5f21cb1e28d46d75", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -50,7 +50,7 @@ pub struct BufferedReader<R> {\n }\n \n impl<R: Reader> BufferedReader<R> {\n-    /// Creates a new `BufferedReader` with with the specified buffer capacity\n+    /// Creates a new `BufferedReader` with the specified buffer capacity\n     pub fn with_capacity(cap: uint, inner: R) -> BufferedReader<R> {\n         // It's *much* faster to create an uninitialized buffer than it is to\n         // fill everything in with 0. This buffer is entirely an implementation\n@@ -137,7 +137,7 @@ pub struct BufferedWriter<W> {\n }\n \n impl<W: Writer> BufferedWriter<W> {\n-    /// Creates a new `BufferedWriter` with with the specified buffer capacity\n+    /// Creates a new `BufferedWriter` with the specified buffer capacity\n     pub fn with_capacity(cap: uint, inner: W) -> BufferedWriter<W> {\n         // See comments in BufferedReader for why this uses unsafe code.\n         let mut buf = vec::with_capacity(cap);"}, {"sha": "79e191a9ec90d93a0e278da78212f9f195bb1c8a", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -103,7 +103,7 @@ impl File {\n     /// `FileMode` and `FileAccess` provide information about the permissions\n     /// context in which a given stream is created. More information about them\n     /// can be found in `std::io`'s docs. If a file is opened with `Write`\n-    /// or `ReadWrite` access, then it will be created it it does not already\n+    /// or `ReadWrite` access, then it will be created it does not already\n     /// exist.\n     ///\n     /// Note that, with this function, a `File` is returned regardless of the"}, {"sha": "7a18f24140a16151c8b988c749b73042b4c59fac", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -377,7 +377,7 @@ pub trait Reader {\n     ///\n     /// # Error\n     ///\n-    /// Fails with the same conditions as `read`. Additionally returns error on\n+    /// Fails with the same conditions as `read`. Additionally returns error\n     /// on EOF. Note that if an error is returned, then some number of bytes may\n     /// have already been consumed from the underlying reader, and they are lost\n     /// (not returned as part of the error). If this is unacceptable, then it is"}, {"sha": "da17119fd984c456b841fbe467ed14d97ff82856", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -84,10 +84,10 @@ pub mod marker {\n     /// The type system would currently infer that the value of\n     /// the type parameter `T` is irrelevant, and hence a `S<int>` is\n     /// a subtype of `S<~[int]>` (or, for that matter, `S<U>` for\n-    /// for any `U`). But this is incorrect because `get()` converts the\n+    /// any `U`). But this is incorrect because `get()` converts the\n     /// `*()` into a `*T` and reads from it. Therefore, we should include the\n     /// a marker field `CovariantType<T>` to inform the type checker that\n-    /// `S<T>` is a subtype of `S<U>` if `T` is a a subtype of `U`\n+    /// `S<T>` is a subtype of `S<U>` if `T` is a subtype of `U`\n     /// (for example, `S<&'static int>` is a subtype of `S<&'a int>`\n     /// for some lifetime `'a`, but not the other way around).\n     #[lang=\"covariant_type\"]\n@@ -125,7 +125,7 @@ pub mod marker {\n     /// The type system would currently infer that the value of\n     /// the type parameter `T` is irrelevant, and hence a `S<int>` is\n     /// a subtype of `S<~[int]>` (or, for that matter, `S<U>` for\n-    /// for any `U`). But this is incorrect because `get()` converts the\n+    /// any `U`). But this is incorrect because `get()` converts the\n     /// `*()` into a `fn(T)` and then passes a value of type `T` to it.\n     ///\n     /// Supplying a `ContravariantType` marker would correct the"}, {"sha": "ee044356aff0959a4279cd361221e3d87f457a29", "filename": "src/libsync/sync/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibsync%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Flibsync%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fsync%2Fmutex.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -53,7 +53,7 @@\n // leading to fairly decent performance for both native threads and green\n // threads on various workloads (uncontended and contended).\n //\n-// The crux of this implementation is an atomic work which is CAS'd on many many\n+// The crux of this implementation is an atomic work which is CAS'd on many\n // times in order to manage a few flags about who's blocking where and whether\n // it's locked or not.\n "}, {"sha": "0a3d888ca0aeb554153a6842e15c6569b0f18966", "filename": "src/test/bench/rt-messaging-ping-pong.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -22,7 +22,7 @@ extern crate extra;\n use std::os;\n use std::uint;\n \n-// This is a simple bench that creates M pairs of of tasks. These\n+// This is a simple bench that creates M pairs of tasks. These\n // tasks ping-pong back and forth over a pair of streams. This is a\n // cannonical message-passing benchmark as it heavily strains message\n // passing and almost nothing else."}, {"sha": "98dde73e596792a6780450c170462d0050944e2f", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -10,7 +10,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Test performance of a task \"spawn ladder\", in which children task have many\n+// Test performance of a task \"spawn ladder\", in which children task have\n // many ancestor taskgroups, but with only a few such groups alive at a time.\n // Each child task has to enlist as a descendant in each of its ancestor\n // groups, but that shouldn't have to happen for already-dead groups."}, {"sha": "7bc5c87c866c03c78696e5e3b2675eeefc59b448", "filename": "src/test/run-fail/rt-set-exit-status-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c52c81846246e135557f1aa6db5bef4140c8717/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frt-set-exit-status-fail.rs?ref=1c52c81846246e135557f1aa6db5bef4140c8717", "patch": "@@ -15,7 +15,7 @@ use std::os;\n fn main() {\n     error!(\"whatever\");\n     // Setting the exit status only works when the scheduler terminates\n-    // normally. In this case we're going to fail, so instead of of\n+    // normally. In this case we're going to fail, so instead of\n     // returning 50 the process will return the typical rt failure code.\n     os::set_exit_status(50);\n     fail!();"}]}