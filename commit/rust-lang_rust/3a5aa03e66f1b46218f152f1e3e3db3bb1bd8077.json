{"sha": "3a5aa03e66f1b46218f152f1e3e3db3bb1bd8077", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNWFhMDNlNjZmMWI0NjIxOGYxNTJmMWUzZTNkYjNiYjFiZDgwNzc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-06T09:59:10Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-12-06T20:25:22Z"}, "message": "Remove unnecessary len parameter for Name::new_inline_ascii\n\nI assume it was previously required because `len` was not const, but that\ndoesn't seem to be a problem anymore.", "tree": {"sha": "00a2036f4c160c3b086541135fc389027b943ab2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00a2036f4c160c3b086541135fc389027b943ab2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a5aa03e66f1b46218f152f1e3e3db3bb1bd8077", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5aa03e66f1b46218f152f1e3e3db3bb1bd8077", "html_url": "https://github.com/rust-lang/rust/commit/3a5aa03e66f1b46218f152f1e3e3db3bb1bd8077", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a5aa03e66f1b46218f152f1e3e3db3bb1bd8077/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5ffb0dc815358712a42f9358cc3538f9a7b3014", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5ffb0dc815358712a42f9358cc3538f9a7b3014", "html_url": "https://github.com/rust-lang/rust/commit/c5ffb0dc815358712a42f9358cc3538f9a7b3014"}], "stats": {"total": 118, "additions": 59, "deletions": 59}, "files": [{"sha": "4f2f702c01f39626b33d4cc1342eafe764023319", "filename": "crates/ra_hir_expand/src/name.rs", "status": "modified", "additions": 59, "deletions": 59, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/3a5aa03e66f1b46218f152f1e3e3db3bb1bd8077/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5aa03e66f1b46218f152f1e3e3db3bb1bd8077/crates%2Fra_hir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fname.rs?ref=3a5aa03e66f1b46218f152f1e3e3db3bb1bd8077", "patch": "@@ -38,8 +38,8 @@ impl Name {\n     }\n \n     /// Shortcut to create inline plain text name\n-    const fn new_inline_ascii(len: usize, text: &[u8]) -> Name {\n-        Name::new_text(SmolStr::new_inline_from_ascii(len, text))\n+    const fn new_inline_ascii(text: &[u8]) -> Name {\n+        Name::new_text(SmolStr::new_inline_from_ascii(text.len(), text))\n     }\n \n     /// Resolve a name from the text of token.\n@@ -105,70 +105,70 @@ impl AsName for ra_db::Dependency {\n }\n \n // Primitives\n-pub const ISIZE: Name = Name::new_inline_ascii(5, b\"isize\");\n-pub const I8: Name = Name::new_inline_ascii(2, b\"i8\");\n-pub const I16: Name = Name::new_inline_ascii(3, b\"i16\");\n-pub const I32: Name = Name::new_inline_ascii(3, b\"i32\");\n-pub const I64: Name = Name::new_inline_ascii(3, b\"i64\");\n-pub const I128: Name = Name::new_inline_ascii(4, b\"i128\");\n-pub const USIZE: Name = Name::new_inline_ascii(5, b\"usize\");\n-pub const U8: Name = Name::new_inline_ascii(2, b\"u8\");\n-pub const U16: Name = Name::new_inline_ascii(3, b\"u16\");\n-pub const U32: Name = Name::new_inline_ascii(3, b\"u32\");\n-pub const U64: Name = Name::new_inline_ascii(3, b\"u64\");\n-pub const U128: Name = Name::new_inline_ascii(4, b\"u128\");\n-pub const F32: Name = Name::new_inline_ascii(3, b\"f32\");\n-pub const F64: Name = Name::new_inline_ascii(3, b\"f64\");\n-pub const BOOL: Name = Name::new_inline_ascii(4, b\"bool\");\n-pub const CHAR: Name = Name::new_inline_ascii(4, b\"char\");\n-pub const STR: Name = Name::new_inline_ascii(3, b\"str\");\n+pub const ISIZE: Name = Name::new_inline_ascii(b\"isize\");\n+pub const I8: Name = Name::new_inline_ascii(b\"i8\");\n+pub const I16: Name = Name::new_inline_ascii(b\"i16\");\n+pub const I32: Name = Name::new_inline_ascii(b\"i32\");\n+pub const I64: Name = Name::new_inline_ascii(b\"i64\");\n+pub const I128: Name = Name::new_inline_ascii(b\"i128\");\n+pub const USIZE: Name = Name::new_inline_ascii(b\"usize\");\n+pub const U8: Name = Name::new_inline_ascii(b\"u8\");\n+pub const U16: Name = Name::new_inline_ascii(b\"u16\");\n+pub const U32: Name = Name::new_inline_ascii(b\"u32\");\n+pub const U64: Name = Name::new_inline_ascii(b\"u64\");\n+pub const U128: Name = Name::new_inline_ascii(b\"u128\");\n+pub const F32: Name = Name::new_inline_ascii(b\"f32\");\n+pub const F64: Name = Name::new_inline_ascii(b\"f64\");\n+pub const BOOL: Name = Name::new_inline_ascii(b\"bool\");\n+pub const CHAR: Name = Name::new_inline_ascii(b\"char\");\n+pub const STR: Name = Name::new_inline_ascii(b\"str\");\n \n // Special names\n-pub const SELF_PARAM: Name = Name::new_inline_ascii(4, b\"self\");\n-pub const SELF_TYPE: Name = Name::new_inline_ascii(4, b\"Self\");\n-pub const MACRO_RULES: Name = Name::new_inline_ascii(11, b\"macro_rules\");\n+pub const SELF_PARAM: Name = Name::new_inline_ascii(b\"self\");\n+pub const SELF_TYPE: Name = Name::new_inline_ascii(b\"Self\");\n+pub const MACRO_RULES: Name = Name::new_inline_ascii(b\"macro_rules\");\n \n // Components of known path (value or mod name)\n-pub const STD: Name = Name::new_inline_ascii(3, b\"std\");\n-pub const ITER: Name = Name::new_inline_ascii(4, b\"iter\");\n-pub const OPS: Name = Name::new_inline_ascii(3, b\"ops\");\n-pub const FUTURE: Name = Name::new_inline_ascii(6, b\"future\");\n-pub const RESULT: Name = Name::new_inline_ascii(6, b\"result\");\n-pub const BOXED: Name = Name::new_inline_ascii(5, b\"boxed\");\n+pub const STD: Name = Name::new_inline_ascii(b\"std\");\n+pub const ITER: Name = Name::new_inline_ascii(b\"iter\");\n+pub const OPS: Name = Name::new_inline_ascii(b\"ops\");\n+pub const FUTURE: Name = Name::new_inline_ascii(b\"future\");\n+pub const RESULT: Name = Name::new_inline_ascii(b\"result\");\n+pub const BOXED: Name = Name::new_inline_ascii(b\"boxed\");\n \n // Components of known path (type name)\n-pub const INTO_ITERATOR_TYPE: Name = Name::new_inline_ascii(12, b\"IntoIterator\");\n-pub const ITEM_TYPE: Name = Name::new_inline_ascii(4, b\"Item\");\n-pub const TRY_TYPE: Name = Name::new_inline_ascii(3, b\"Try\");\n-pub const OK_TYPE: Name = Name::new_inline_ascii(2, b\"Ok\");\n-pub const FUTURE_TYPE: Name = Name::new_inline_ascii(6, b\"Future\");\n-pub const RESULT_TYPE: Name = Name::new_inline_ascii(6, b\"Result\");\n-pub const OUTPUT_TYPE: Name = Name::new_inline_ascii(6, b\"Output\");\n-pub const TARGET_TYPE: Name = Name::new_inline_ascii(6, b\"Target\");\n-pub const BOX_TYPE: Name = Name::new_inline_ascii(3, b\"Box\");\n-pub const RANGE_FROM_TYPE: Name = Name::new_inline_ascii(9, b\"RangeFrom\");\n-pub const RANGE_FULL_TYPE: Name = Name::new_inline_ascii(9, b\"RangeFull\");\n-pub const RANGE_INCLUSIVE_TYPE: Name = Name::new_inline_ascii(14, b\"RangeInclusive\");\n-pub const RANGE_TO_INCLUSIVE_TYPE: Name = Name::new_inline_ascii(16, b\"RangeToInclusive\");\n-pub const RANGE_TO_TYPE: Name = Name::new_inline_ascii(7, b\"RangeTo\");\n-pub const RANGE_TYPE: Name = Name::new_inline_ascii(5, b\"Range\");\n+pub const INTO_ITERATOR_TYPE: Name = Name::new_inline_ascii(b\"IntoIterator\");\n+pub const ITEM_TYPE: Name = Name::new_inline_ascii(b\"Item\");\n+pub const TRY_TYPE: Name = Name::new_inline_ascii(b\"Try\");\n+pub const OK_TYPE: Name = Name::new_inline_ascii(b\"Ok\");\n+pub const FUTURE_TYPE: Name = Name::new_inline_ascii(b\"Future\");\n+pub const RESULT_TYPE: Name = Name::new_inline_ascii(b\"Result\");\n+pub const OUTPUT_TYPE: Name = Name::new_inline_ascii(b\"Output\");\n+pub const TARGET_TYPE: Name = Name::new_inline_ascii(b\"Target\");\n+pub const BOX_TYPE: Name = Name::new_inline_ascii(b\"Box\");\n+pub const RANGE_FROM_TYPE: Name = Name::new_inline_ascii(b\"RangeFrom\");\n+pub const RANGE_FULL_TYPE: Name = Name::new_inline_ascii(b\"RangeFull\");\n+pub const RANGE_INCLUSIVE_TYPE: Name = Name::new_inline_ascii(b\"RangeInclusive\");\n+pub const RANGE_TO_INCLUSIVE_TYPE: Name = Name::new_inline_ascii(b\"RangeToInclusive\");\n+pub const RANGE_TO_TYPE: Name = Name::new_inline_ascii(b\"RangeTo\");\n+pub const RANGE_TYPE: Name = Name::new_inline_ascii(b\"Range\");\n \n // Builtin Macros\n-pub const FILE_MACRO: Name = Name::new_inline_ascii(4, b\"file\");\n-pub const COLUMN_MACRO: Name = Name::new_inline_ascii(6, b\"column\");\n-pub const COMPILE_ERROR_MACRO: Name = Name::new_inline_ascii(13, b\"compile_error\");\n-pub const LINE_MACRO: Name = Name::new_inline_ascii(4, b\"line\");\n-pub const STRINGIFY_MACRO: Name = Name::new_inline_ascii(9, b\"stringify\");\n-pub const FORMAT_ARGS_MACRO: Name = Name::new_inline_ascii(11, b\"format_args\");\n-pub const FORMAT_ARGS_NL_MACRO: Name = Name::new_inline_ascii(14, b\"format_args_nl\");\n+pub const FILE_MACRO: Name = Name::new_inline_ascii(b\"file\");\n+pub const COLUMN_MACRO: Name = Name::new_inline_ascii(b\"column\");\n+pub const COMPILE_ERROR_MACRO: Name = Name::new_inline_ascii(b\"compile_error\");\n+pub const LINE_MACRO: Name = Name::new_inline_ascii(b\"line\");\n+pub const STRINGIFY_MACRO: Name = Name::new_inline_ascii(b\"stringify\");\n+pub const FORMAT_ARGS_MACRO: Name = Name::new_inline_ascii(b\"format_args\");\n+pub const FORMAT_ARGS_NL_MACRO: Name = Name::new_inline_ascii(b\"format_args_nl\");\n \n // Builtin derives\n-pub const COPY_TRAIT: Name = Name::new_inline_ascii(4, b\"Copy\");\n-pub const CLONE_TRAIT: Name = Name::new_inline_ascii(5, b\"Clone\");\n-pub const DEFAULT_TRAIT: Name = Name::new_inline_ascii(7, b\"Default\");\n-pub const DEBUG_TRAIT: Name = Name::new_inline_ascii(5, b\"Debug\");\n-pub const HASH_TRAIT: Name = Name::new_inline_ascii(4, b\"Hash\");\n-pub const ORD_TRAIT: Name = Name::new_inline_ascii(3, b\"Ord\");\n-pub const PARTIAL_ORD_TRAIT: Name = Name::new_inline_ascii(10, b\"PartialOrd\");\n-pub const EQ_TRAIT: Name = Name::new_inline_ascii(2, b\"Eq\");\n-pub const PARTIAL_EQ_TRAIT: Name = Name::new_inline_ascii(9, b\"PartialEq\");\n+pub const COPY_TRAIT: Name = Name::new_inline_ascii(b\"Copy\");\n+pub const CLONE_TRAIT: Name = Name::new_inline_ascii(b\"Clone\");\n+pub const DEFAULT_TRAIT: Name = Name::new_inline_ascii(b\"Default\");\n+pub const DEBUG_TRAIT: Name = Name::new_inline_ascii(b\"Debug\");\n+pub const HASH_TRAIT: Name = Name::new_inline_ascii(b\"Hash\");\n+pub const ORD_TRAIT: Name = Name::new_inline_ascii(b\"Ord\");\n+pub const PARTIAL_ORD_TRAIT: Name = Name::new_inline_ascii(b\"PartialOrd\");\n+pub const EQ_TRAIT: Name = Name::new_inline_ascii(b\"Eq\");\n+pub const PARTIAL_EQ_TRAIT: Name = Name::new_inline_ascii(b\"PartialEq\");"}]}