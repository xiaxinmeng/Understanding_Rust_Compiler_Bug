{"sha": "78e0a417efcc444a5f76d5535103f92e594a81d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZTBhNDE3ZWZjYzQ0NGE1Zjc2ZDU1MzUxMDNmOTJlNTk0YTgxZDk=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-01-13T09:42:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-01-13T09:42:25Z"}, "message": "Rollup merge of #38362 - GuillaumeGomez:instant_doc, r=frewsxcv\n\nInstant doc\n\nr? @frewsxcv", "tree": {"sha": "25392e4e3267ab2aeef74de33322dc53838162ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25392e4e3267ab2aeef74de33322dc53838162ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78e0a417efcc444a5f76d5535103f92e594a81d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78e0a417efcc444a5f76d5535103f92e594a81d9", "html_url": "https://github.com/rust-lang/rust/commit/78e0a417efcc444a5f76d5535103f92e594a81d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78e0a417efcc444a5f76d5535103f92e594a81d9/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0c52c587fe9ba287053359fff5ed886b7edb27c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0c52c587fe9ba287053359fff5ed886b7edb27c", "html_url": "https://github.com/rust-lang/rust/commit/b0c52c587fe9ba287053359fff5ed886b7edb27c"}, {"sha": "ec6ed34c816b73c15e90935859fa778af7b183d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec6ed34c816b73c15e90935859fa778af7b183d3", "html_url": "https://github.com/rust-lang/rust/commit/ec6ed34c816b73c15e90935859fa778af7b183d3"}], "stats": {"total": 129, "additions": 115, "deletions": 14}, "files": [{"sha": "e4b8d457e2d29dcee1dd107fdc4706231b5ad413", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 115, "deletions": 14, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/78e0a417efcc444a5f76d5535103f92e594a81d9/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78e0a417efcc444a5f76d5535103f92e594a81d9/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=78e0a417efcc444a5f76d5535103f92e594a81d9", "patch": "@@ -34,7 +34,7 @@ pub use self::duration::Duration;\n mod duration;\n \n /// A measurement of a monotonically increasing clock.\n-///  Opaque and useful only with `Duration`.\n+/// Opaque and useful only with `Duration`.\n ///\n /// Instants are always guaranteed to be greater than any previously measured\n /// instant when created, and are often useful for tasks such as measuring\n@@ -73,23 +73,28 @@ pub struct Instant(time::Instant);\n /// A measurement of the system clock, useful for talking to\n /// external entities like the file system or other processes.\n ///\n-/// Distinct from the `Instant` type, this time measurement **is not\n+/// Distinct from the [`Instant`] type, this time measurement **is not\n /// monotonic**. This means that you can save a file to the file system, then\n /// save another file to the file system, **and the second file has a\n /// `SystemTime` measurement earlier than the first**. In other words, an\n /// operation that happens after another operation in real time may have an\n /// earlier `SystemTime`!\n ///\n /// Consequently, comparing two `SystemTime` instances to learn about the\n-/// duration between them returns a `Result` instead of an infallible `Duration`\n+/// duration between them returns a [`Result`] instead of an infallible [`Duration`]\n /// to indicate that this sort of time drift may happen and needs to be handled.\n ///\n-/// Although a `SystemTime` cannot be directly inspected, the `UNIX_EPOCH`\n+/// Although a `SystemTime` cannot be directly inspected, the [`UNIX_EPOCH`]\n /// constant is provided in this module as an anchor in time to learn\n /// information about a `SystemTime`. By calculating the duration from this\n /// fixed point in time, a `SystemTime` can be converted to a human-readable time,\n /// or perhaps some other string representation.\n ///\n+/// [`Instant`]: ../../std/time/struct.Instant.html\n+/// [`Result`]: ../../std/result/enum.Result.html\n+/// [`Duration`]: ../../std/time/struct.Duration.html\n+/// [`UNIX_EPOCH`]: ../../std/time/constant.UNIX_EPOCH.html\n+///\n /// Example:\n ///\n /// ```no_run\n@@ -117,14 +122,38 @@ pub struct Instant(time::Instant);\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct SystemTime(time::SystemTime);\n \n-/// An error returned from the `duration_since` method on `SystemTime`,\n-/// used to learn how far in the opposite direction a system time lies.\n+/// An error returned from the `duration_since` and `elapsed` methods on\n+/// `SystemTime`, used to learn how far in the opposite direction a system time\n+/// lies.\n+///\n+/// # Examples\n+///\n+/// ```no_run\n+/// use std::thread::sleep;\n+/// use std::time::{Duration, SystemTime};\n+///\n+/// let sys_time = SystemTime::now();\n+/// sleep(Duration::from_secs(1));\n+/// let new_sys_time = SystemTime::now();\n+/// match sys_time.duration_since(new_sys_time) {\n+///     Ok(_) => {}\n+///     Err(e) => println!(\"SystemTimeError difference: {:?}\", e.duration()),\n+/// }\n+/// ```\n #[derive(Clone, Debug)]\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct SystemTimeError(Duration);\n \n impl Instant {\n     /// Returns an instant corresponding to \"now\".\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::time::Instant;\n+    ///\n+    /// let now = Instant::now();\n+    /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn now() -> Instant {\n         Instant(time::Instant::now())\n@@ -138,6 +167,18 @@ impl Instant {\n     /// only be possible if `earlier` was created after `self`. Because\n     /// `Instant` is monotonic, the only time that this should happen should be\n     /// a bug.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::time::{Duration, Instant};\n+    /// use std::thread::sleep;\n+    ///\n+    /// let now = Instant::now();\n+    /// sleep(Duration::new(1, 0));\n+    /// let new_now = Instant::now();\n+    /// println!(\"{:?}\", new_now.duration_since(now));\n+    /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn duration_since(&self, earlier: Instant) -> Duration {\n         self.0.sub_instant(&earlier.0)\n@@ -218,6 +259,14 @@ impl fmt::Debug for Instant {\n \n impl SystemTime {\n     /// Returns the system time corresponding to \"now\".\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::time::SystemTime;\n+    ///\n+    /// let sys_time = SystemTime::now();\n+    /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn now() -> SystemTime {\n         SystemTime(time::SystemTime::now())\n@@ -229,11 +278,26 @@ impl SystemTime {\n     /// guaranteed to always be before later measurements (due to anomalies such\n     /// as the system clock being adjusted either forwards or backwards).\n     ///\n-    /// If successful, `Ok(Duration)` is returned where the duration represents\n+    /// If successful, [`Ok`]`(`[`Duration`]`)` is returned where the duration represents\n     /// the amount of time elapsed from the specified measurement to this one.\n     ///\n-    /// Returns an `Err` if `earlier` is later than `self`, and the error\n+    /// Returns an [`Err`] if `earlier` is later than `self`, and the error\n     /// contains how far from `self` the time is.\n+    ///\n+    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [`Duration`]: ../../std/time/struct.Duration.html\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::time::SystemTime;\n+    ///\n+    /// let sys_time = SystemTime::now();\n+    /// let difference = sys_time.duration_since(sys_time)\n+    ///                          .expect(\"SystemTime::duration_since failed\");\n+    /// println!(\"{:?}\", difference);\n+    /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn duration_since(&self, earlier: SystemTime)\n                           -> Result<Duration, SystemTimeError> {\n@@ -244,12 +308,28 @@ impl SystemTime {\n     ///\n     /// This function may fail as the underlying system clock is susceptible to\n     /// drift and updates (e.g. the system clock could go backwards), so this\n-    /// function may not always succeed. If successful, `Ok(duration)` is\n+    /// function may not always succeed. If successful, [`Ok`]`(`[`Duration`]`)` is\n     /// returned where the duration represents the amount of time elapsed from\n     /// this time measurement to the current time.\n     ///\n-    /// Returns an `Err` if `self` is later than the current system time, and\n+    /// Returns an [`Err`] if `self` is later than the current system time, and\n     /// the error contains how far from the current system time `self` is.\n+    ///\n+    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [`Duration`]: ../../std/time/struct.Duration.html\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::thread::sleep;\n+    /// use std::time::{Duration, SystemTime};\n+    ///\n+    /// let sys_time = SystemTime::now();\n+    /// let one_sec = Duration::from_secs(1);\n+    /// sleep(one_sec);\n+    /// assert!(sys_time.elapsed().unwrap() >= one_sec);\n+    /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn elapsed(&self) -> Result<Duration, SystemTimeError> {\n         SystemTime::now().duration_since(*self)\n@@ -300,19 +380,40 @@ impl fmt::Debug for SystemTime {\n ///\n /// This constant is defined to be \"1970-01-01 00:00:00 UTC\" on all systems with\n /// respect to the system clock. Using `duration_since` on an existing\n-/// `SystemTime` instance can tell how far away from this point in time a\n+/// [`SystemTime`] instance can tell how far away from this point in time a\n /// measurement lies, and using `UNIX_EPOCH + duration` can be used to create a\n-/// `SystemTime` instance to represent another fixed point in time.\n+/// [`SystemTime`] instance to represent another fixed point in time.\n+///\n+/// [`SystemTime`]: ../../std/time/struct.SystemTime.html\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub const UNIX_EPOCH: SystemTime = SystemTime(time::UNIX_EPOCH);\n \n impl SystemTimeError {\n     /// Returns the positive duration which represents how far forward the\n     /// second system time was from the first.\n     ///\n-    /// A `SystemTimeError` is returned from the `duration_since`\n-    /// operation whenever the second system time represents a point later\n+    /// A `SystemTimeError` is returned from the [`duration_since`] and [`elapsed`]\n+    /// methods of [`SystemTime`] whenever the second system time represents a point later\n     /// in time than the `self` of the method call.\n+    ///\n+    /// [`duration_since`]: ../../std/time/struct.SystemTime.html#method.duration_since\n+    /// [`elapsed`]: ../../std/time/struct.SystemTime.html#method.elapsed\n+    /// [`SystemTime`]: ../../std/time/struct.SystemTime.html\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::thread::sleep;\n+    /// use std::time::{Duration, SystemTime};\n+    ///\n+    /// let sys_time = SystemTime::now();\n+    /// sleep(Duration::from_secs(1));\n+    /// let new_sys_time = SystemTime::now();\n+    /// match sys_time.duration_since(new_sys_time) {\n+    ///     Ok(_) => {}\n+    ///     Err(e) => println!(\"SystemTimeError difference: {:?}\", e.duration()),\n+    /// }\n+    /// ```\n     #[stable(feature = \"time2\", since = \"1.8.0\")]\n     pub fn duration(&self) -> Duration {\n         self.0"}]}