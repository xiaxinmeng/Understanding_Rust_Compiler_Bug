{"sha": "2ce19ae3d196043281c7572290ee09f502d8384c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZTE5YWUzZDE5NjA0MzI4MWM3NTcyMjkwZWUwOWY1MDJkODM4NGM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-02-20T01:11:10Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:07:37Z"}, "message": "Use non_erasable_generics for codegen\n\nCo-Authored-By: Gabriel Smith <yodaldevoid@users.noreply.github.com>", "tree": {"sha": "73bb79fcb6647218abf250175577d3d1eb13cbc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73bb79fcb6647218abf250175577d3d1eb13cbc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ce19ae3d196043281c7572290ee09f502d8384c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ce19ae3d196043281c7572290ee09f502d8384c", "html_url": "https://github.com/rust-lang/rust/commit/2ce19ae3d196043281c7572290ee09f502d8384c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ce19ae3d196043281c7572290ee09f502d8384c/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "386e9fbda225bd04039a47caad9138983faff18c", "url": "https://api.github.com/repos/rust-lang/rust/commits/386e9fbda225bd04039a47caad9138983faff18c", "html_url": "https://github.com/rust-lang/rust/commit/386e9fbda225bd04039a47caad9138983faff18c"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "2d732adcb91381650d7114fd298098fb75e04cfb", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ce19ae3d196043281c7572290ee09f502d8384c/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce19ae3d196043281c7572290ee09f502d8384c/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=2ce19ae3d196043281c7572290ee09f502d8384c", "patch": "@@ -113,7 +113,7 @@ pub fn get_fn(\n         unsafe {\n             llvm::LLVMRustSetLinkage(llfn, llvm::Linkage::ExternalLinkage);\n \n-            let is_generic = instance.substs.types().next().is_some();\n+            let is_generic = instance.substs.non_erasable_generics().next().is_some();\n \n             if is_generic {\n                 // This is a monomorphization. Its expected visibility depends"}, {"sha": "336f41b784a81cf3793ec6c213e684e4bfaf35bc", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ce19ae3d196043281c7572290ee09f502d8384c/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce19ae3d196043281c7572290ee09f502d8384c/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=2ce19ae3d196043281c7572290ee09f502d8384c", "patch": "@@ -263,7 +263,7 @@ fn exported_symbols_provider_local<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 def: InstanceDef::Item(def_id),\n                 substs,\n             }) = mono_item {\n-                if substs.types().next().is_some() {\n+                if substs.non_erasable_generics().next().is_some() {\n                     symbols.push((ExportedSymbol::Generic(def_id, substs),\n                                   SymbolExportLevel::Rust));\n                 }"}, {"sha": "55a1eb016e0d0db1224b41b5b068d5440b80dd14", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ce19ae3d196043281c7572290ee09f502d8384c/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce19ae3d196043281c7572290ee09f502d8384c/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=2ce19ae3d196043281c7572290ee09f502d8384c", "patch": "@@ -76,6 +76,8 @@ impl<'a, 'tcx: 'a, V: CodegenObject> OperandRef<'tcx, V> {\n         }\n \n         let val = match val.val {\n+            ConstValue::Param(_) => bug!(\"encountered a ConstValue::Param in codegen\"),\n+            ConstValue::Infer(_) => bug!(\"encountered a ConstValue::Infer in codegen\"),\n             ConstValue::Scalar(x) => {\n                 let scalar = match layout.abi {\n                     layout::Abi::Scalar(ref x) => x,"}, {"sha": "76e74e9e2b4640f219e22172c7482697a58b469a", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ce19ae3d196043281c7572290ee09f502d8384c/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ce19ae3d196043281c7572290ee09f502d8384c/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=2ce19ae3d196043281c7572290ee09f502d8384c", "patch": "@@ -172,7 +172,7 @@ fn get_symbol_hash<'a, 'tcx>(\n         assert!(!substs.needs_subst());\n         substs.hash_stable(&mut hcx, &mut hasher);\n \n-        let is_generic = substs.types().next().is_some();\n+        let is_generic = substs.non_erasable_generics().next().is_some();\n         let avoid_cross_crate_conflicts =\n             // If this is an instance of a generic function, we also hash in\n             // the ID of the instantiating crate. This avoids symbol conflicts"}]}