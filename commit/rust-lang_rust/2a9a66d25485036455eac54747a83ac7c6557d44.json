{"sha": "2a9a66d25485036455eac54747a83ac7c6557d44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhOWE2NmQyNTQ4NTAzNjQ1NWVhYzU0NzQ3YTgzYWM3YzY1NTdkNDQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-16T12:52:39Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-16T15:26:51Z"}, "message": "Add diagnostic types for unresolved crates/imports", "tree": {"sha": "71742987ba62d47321451913e8da0074805b2d9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71742987ba62d47321451913e8da0074805b2d9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a9a66d25485036455eac54747a83ac7c6557d44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a9a66d25485036455eac54747a83ac7c6557d44", "html_url": "https://github.com/rust-lang/rust/commit/2a9a66d25485036455eac54747a83ac7c6557d44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a9a66d25485036455eac54747a83ac7c6557d44/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44f4510caa6becafc3621253e8115d94b6bd4423", "url": "https://api.github.com/repos/rust-lang/rust/commits/44f4510caa6becafc3621253e8115d94b6bd4423", "html_url": "https://github.com/rust-lang/rust/commit/44f4510caa6becafc3621253e8115d94b6bd4423"}], "stats": {"total": 147, "additions": 128, "deletions": 19}, "files": [{"sha": "2ec0fd3fb721c946c4e3dd2a17a35a7be452cd59", "filename": "crates/hir_def/src/diagnostics.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2a9a66d25485036455eac54747a83ac7c6557d44/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9a66d25485036455eac54747a83ac7c6557d44/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdiagnostics.rs?ref=2a9a66d25485036455eac54747a83ac7c6557d44", "patch": "@@ -28,3 +28,45 @@ impl Diagnostic for UnresolvedModule {\n         self\n     }\n }\n+\n+#[derive(Debug)]\n+pub struct UnresolvedExternCrate {\n+    pub file: HirFileId,\n+    pub item: AstPtr<ast::ExternCrate>,\n+}\n+\n+impl Diagnostic for UnresolvedExternCrate {\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"unresolved-extern-crate\")\n+    }\n+    fn message(&self) -> String {\n+        \"unresolved extern crate\".to_string()\n+    }\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile::new(self.file, self.item.clone().into())\n+    }\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}\n+\n+#[derive(Debug)]\n+pub struct UnresolvedImport {\n+    pub file: HirFileId,\n+    pub node: AstPtr<ast::UseTree>,\n+}\n+\n+impl Diagnostic for UnresolvedImport {\n+    fn code(&self) -> DiagnosticCode {\n+        DiagnosticCode(\"unresolved-import\")\n+    }\n+    fn message(&self) -> String {\n+        \"unresolved import\".to_string()\n+    }\n+    fn display_source(&self) -> InFile<SyntaxNodePtr> {\n+        InFile::new(self.file, self.node.clone().into())\n+    }\n+    fn as_any(&self) -> &(dyn Any + Send + 'static) {\n+        self\n+    }\n+}"}, {"sha": "5e4d73c1ffc6608f1da074b5ce7c9d32704f2379", "filename": "crates/hir_def/src/nameres.rs", "status": "modified", "additions": 81, "deletions": 12, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/2a9a66d25485036455eac54747a83ac7c6557d44/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9a66d25485036455eac54747a83ac7c6557d44/crates%2Fhir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres.rs?ref=2a9a66d25485036455eac54747a83ac7c6557d44", "patch": "@@ -288,38 +288,107 @@ pub enum ModuleSource {\n \n mod diagnostics {\n     use hir_expand::diagnostics::DiagnosticSink;\n+    use hir_expand::hygiene::Hygiene;\n+    use hir_expand::InFile;\n     use syntax::{ast, AstPtr};\n \n-    use crate::{db::DefDatabase, diagnostics::UnresolvedModule, nameres::LocalModuleId, AstId};\n+    use crate::path::ModPath;\n+    use crate::{db::DefDatabase, diagnostics::*, nameres::LocalModuleId, AstId};\n \n     #[derive(Debug, PartialEq, Eq)]\n-    pub(super) enum DefDiagnostic {\n-        UnresolvedModule {\n-            module: LocalModuleId,\n-            declaration: AstId<ast::Module>,\n-            candidate: String,\n-        },\n+    enum DiagnosticKind {\n+        UnresolvedModule { declaration: AstId<ast::Module>, candidate: String },\n+\n+        UnresolvedExternCrate { ast: AstId<ast::ExternCrate> },\n+\n+        UnresolvedImport { ast: AstId<ast::Use>, index: usize },\n+    }\n+\n+    #[derive(Debug, PartialEq, Eq)]\n+    pub(super) struct DefDiagnostic {\n+        in_module: LocalModuleId,\n+        kind: DiagnosticKind,\n     }\n \n     impl DefDiagnostic {\n+        pub(super) fn unresolved_module(\n+            container: LocalModuleId,\n+            declaration: AstId<ast::Module>,\n+            candidate: String,\n+        ) -> Self {\n+            Self {\n+                in_module: container,\n+                kind: DiagnosticKind::UnresolvedModule { declaration, candidate },\n+            }\n+        }\n+\n+        pub(super) fn unresolved_extern_crate(\n+            container: LocalModuleId,\n+            declaration: AstId<ast::ExternCrate>,\n+        ) -> Self {\n+            Self {\n+                in_module: container,\n+                kind: DiagnosticKind::UnresolvedExternCrate { ast: declaration },\n+            }\n+        }\n+\n+        pub(super) fn unresolved_import(\n+            container: LocalModuleId,\n+            ast: AstId<ast::Use>,\n+            index: usize,\n+        ) -> Self {\n+            Self { in_module: container, kind: DiagnosticKind::UnresolvedImport { ast, index } }\n+        }\n+\n         pub(super) fn add_to(\n             &self,\n             db: &dyn DefDatabase,\n             target_module: LocalModuleId,\n             sink: &mut DiagnosticSink,\n         ) {\n-            match self {\n-                DefDiagnostic::UnresolvedModule { module, declaration, candidate } => {\n-                    if *module != target_module {\n-                        return;\n-                    }\n+            if self.in_module != target_module {\n+                return;\n+            }\n+\n+            match &self.kind {\n+                DiagnosticKind::UnresolvedModule { declaration, candidate } => {\n                     let decl = declaration.to_node(db.upcast());\n                     sink.push(UnresolvedModule {\n                         file: declaration.file_id,\n                         decl: AstPtr::new(&decl),\n                         candidate: candidate.clone(),\n                     })\n                 }\n+\n+                DiagnosticKind::UnresolvedExternCrate { ast } => {\n+                    let item = ast.to_node(db.upcast());\n+                    sink.push(UnresolvedExternCrate {\n+                        file: ast.file_id,\n+                        item: AstPtr::new(&item),\n+                    });\n+                }\n+\n+                DiagnosticKind::UnresolvedImport { ast, index } => {\n+                    let use_item = ast.to_node(db.upcast());\n+                    let hygiene = Hygiene::new(db.upcast(), ast.file_id);\n+                    let mut cur = 0;\n+                    let mut tree = None;\n+                    ModPath::expand_use_item(\n+                        InFile::new(ast.file_id, use_item),\n+                        &hygiene,\n+                        |_mod_path, use_tree, _is_glob, _alias| {\n+                            if cur == *index {\n+                                tree = Some(use_tree.clone());\n+                            }\n+\n+                            cur += 1;\n+                        },\n+                    );\n+\n+                    if let Some(tree) = tree {\n+                        sink.push(UnresolvedImport { file: ast.file_id, node: AstPtr::new(&tree) });\n+                    }\n+                }\n             }\n         }\n     }"}, {"sha": "bc286a8a3392f2b55b96677dd9c5ec3f9ec4b3c8", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2a9a66d25485036455eac54747a83ac7c6557d44/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a9a66d25485036455eac54747a83ac7c6557d44/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=2a9a66d25485036455eac54747a83ac7c6557d44", "patch": "@@ -1051,13 +1051,11 @@ impl ModCollector<'_, '_> {\n                             self.import_all_legacy_macros(module_id);\n                         }\n                     }\n-                    Err(candidate) => self.def_collector.def_map.diagnostics.push(\n-                        DefDiagnostic::UnresolvedModule {\n-                            module: self.module_id,\n-                            declaration: ast_id,\n-                            candidate,\n-                        },\n-                    ),\n+                    Err(candidate) => {\n+                        self.def_collector.def_map.diagnostics.push(\n+                            DefDiagnostic::unresolved_module(self.module_id, ast_id, candidate),\n+                        );\n+                    }\n                 };\n             }\n         }"}]}