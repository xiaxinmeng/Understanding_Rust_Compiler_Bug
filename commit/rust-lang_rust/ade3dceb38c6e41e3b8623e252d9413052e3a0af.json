{"sha": "ade3dceb38c6e41e3b8623e252d9413052e3a0af", "node_id": "C_kwDOAAsO6NoAKGFkZTNkY2ViMzhjNmU0MWUzYjg2MjNlMjUyZDk0MTMwNTJlM2EwYWY", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-12-08T10:53:20Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-20T15:28:58Z"}, "message": "Make untracked.cstore lockable so that resolution can still write to it when using TyCtxt", "tree": {"sha": "8c3c14c9b87f01110fcabe47d1a9035bc3486526", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c3c14c9b87f01110fcabe47d1a9035bc3486526"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ade3dceb38c6e41e3b8623e252d9413052e3a0af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ade3dceb38c6e41e3b8623e252d9413052e3a0af", "html_url": "https://github.com/rust-lang/rust/commit/ade3dceb38c6e41e3b8623e252d9413052e3a0af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ade3dceb38c6e41e3b8623e252d9413052e3a0af/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8e227aec84ea8b19751d9dd851a10937a70810a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8e227aec84ea8b19751d9dd851a10937a70810a", "html_url": "https://github.com/rust-lang/rust/commit/e8e227aec84ea8b19751d9dd851a10937a70810a"}], "stats": {"total": 86, "additions": 50, "deletions": 36}, "files": [{"sha": "43882e103037d1223118f72ec127c9686286e4ec", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=ade3dceb38c6e41e3b8623e252d9413052e3a0af", "patch": "@@ -597,7 +597,7 @@ fn output_filenames(tcx: TyCtxt<'_>, (): ()) -> Arc<OutputFilenames> {\n         }\n     }\n \n-    write_out_deps(sess, tcx.cstore_untracked(), &outputs, &output_paths);\n+    write_out_deps(sess, &*tcx.cstore_untracked(), &outputs, &output_paths);\n \n     let only_dep_info = sess.opts.output_types.contains_key(&OutputType::DepInfo)\n         && sess.opts.output_types.len() == 1;"}, {"sha": "bc7c78a31084478d610023af585d6e4ae0705023", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=ade3dceb38c6e41e3b8623e252d9413052e3a0af", "patch": "@@ -215,6 +215,9 @@ impl<'tcx> Queries<'tcx> {\n                 ast_lowering: untracked_resolver_for_lowering,\n             } = resolver_outputs;\n \n+            // Make sure we don't mutate the cstore from here on.\n+            std::mem::forget(untracked.cstore.read());\n+\n             let gcx = passes::create_global_ctxt(\n                 self.compiler,\n                 lint_store,"}, {"sha": "e8bef8acdb0429a8a18aeb32afbd88a010aa6981", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=ade3dceb38c6e41e3b8623e252d9413052e3a0af", "patch": "@@ -8,7 +8,7 @@ use rustc_ast::expand::allocator::AllocatorKind;\n use rustc_ast::{self as ast, *};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::svh::Svh;\n-use rustc_data_structures::sync::ReadGuard;\n+use rustc_data_structures::sync::{MappedReadGuard, ReadGuard};\n use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def_id::{CrateNum, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::Definitions;\n@@ -127,11 +127,10 @@ impl<'a> std::fmt::Debug for CrateDump<'a> {\n }\n \n impl CStore {\n-    pub fn from_tcx(tcx: TyCtxt<'_>) -> &CStore {\n-        tcx.cstore_untracked()\n-            .as_any()\n-            .downcast_ref::<CStore>()\n-            .expect(\"`tcx.cstore` is not a `CStore`\")\n+    pub fn from_tcx(tcx: TyCtxt<'_>) -> MappedReadGuard<'_, CStore> {\n+        MappedReadGuard::map(tcx.cstore_untracked(), |c| {\n+            c.as_any().downcast_ref::<CStore>().expect(\"`tcx.cstore` is not a `CStore`\")\n+        })\n     }\n \n     fn alloc_new_crate_num(&mut self) -> CrateNum {"}, {"sha": "60ea08a16473c96876a445a11fee5ac9342628fc", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=ade3dceb38c6e41e3b8623e252d9413052e3a0af", "patch": "@@ -130,7 +130,13 @@ macro_rules! provide_one {\n                 $tcx.ensure().crate_hash($def_id.krate);\n             }\n \n-            let $cdata = CStore::from_tcx($tcx).get_crate_data($def_id.krate);\n+            let cdata = rustc_data_structures::sync::MappedReadGuard::map(CStore::from_tcx($tcx), |c| {\n+                c.get_crate_data($def_id.krate).cdata\n+            });\n+            let $cdata = crate::creader::CrateMetadataRef {\n+                cdata: &cdata,\n+                cstore: &CStore::from_tcx($tcx),\n+            };\n \n             $compute\n         }"}, {"sha": "335d568bf3170d7d863da0e0920178f2de6b361c", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ade3dceb38c6e41e3b8623e252d9413052e3a0af", "patch": "@@ -36,7 +36,7 @@ use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_data_structures::sharded::{IntoPointer, ShardedHashMap};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n-use rustc_data_structures::sync::{self, Lock, Lrc, ReadGuard, WorkerLocal};\n+use rustc_data_structures::sync::{self, Lock, Lrc, MappedReadGuard, ReadGuard, WorkerLocal};\n use rustc_errors::{\n     DecorateLint, DiagnosticBuilder, DiagnosticMessage, ErrorGuaranteed, MultiSpan,\n };\n@@ -836,7 +836,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(id) = id.as_local() {\n             self.definitions_untracked().def_key(id)\n         } else {\n-            self.untracked.cstore.def_key(id)\n+            self.cstore_untracked().def_key(id)\n         }\n     }\n \n@@ -850,7 +850,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(id) = id.as_local() {\n             self.definitions_untracked().def_path(id)\n         } else {\n-            self.untracked.cstore.def_path(id)\n+            self.cstore_untracked().def_path(id)\n         }\n     }\n \n@@ -860,7 +860,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if let Some(def_id) = def_id.as_local() {\n             self.definitions_untracked().def_path_hash(def_id)\n         } else {\n-            self.untracked.cstore.def_path_hash(def_id)\n+            self.cstore_untracked().def_path_hash(def_id)\n         }\n     }\n \n@@ -869,7 +869,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if crate_num == LOCAL_CRATE {\n             self.sess.local_stable_crate_id()\n         } else {\n-            self.untracked.cstore.stable_crate_id(crate_num)\n+            self.cstore_untracked().stable_crate_id(crate_num)\n         }\n     }\n \n@@ -880,7 +880,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         if stable_crate_id == self.sess.local_stable_crate_id() {\n             LOCAL_CRATE\n         } else {\n-            self.untracked.cstore.stable_crate_id_to_crate_num(stable_crate_id)\n+            self.cstore_untracked().stable_crate_id_to_crate_num(stable_crate_id)\n         }\n     }\n \n@@ -899,7 +899,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         } else {\n             // If this is a DefPathHash from an upstream crate, let the CrateStore map\n             // it to a DefId.\n-            let cstore = &*self.untracked.cstore;\n+            let cstore = &*self.cstore_untracked();\n             let cnum = cstore.stable_crate_id_to_crate_num(stable_crate_id);\n             cstore.def_path_hash_to_def_id(cnum, hash)\n         }\n@@ -913,7 +913,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let (crate_name, stable_crate_id) = if def_id.is_local() {\n             (self.crate_name(LOCAL_CRATE), self.sess.local_stable_crate_id())\n         } else {\n-            let cstore = &*self.untracked.cstore;\n+            let cstore = &*self.cstore_untracked();\n             (cstore.crate_name(def_id.krate), cstore.stable_crate_id(def_id.krate))\n         };\n \n@@ -1011,8 +1011,8 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Note that this is *untracked* and should only be used within the query\n     /// system if the result is otherwise tracked through queries\n-    pub fn cstore_untracked(self) -> &'tcx CrateStoreDyn {\n-        &*self.untracked.cstore\n+    pub fn cstore_untracked(self) -> MappedReadGuard<'tcx, CrateStoreDyn> {\n+        ReadGuard::map(self.untracked.cstore.read(), |c| &**c)\n     }\n \n     /// Note that this is *untracked* and should only be used within the query"}, {"sha": "91fc3fd222f3e3fe6ea3ad7abc476e7aea68f4ab", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=ade3dceb38c6e41e3b8623e252d9413052e3a0af", "patch": "@@ -90,7 +90,7 @@ impl<'a> StableHashingContext<'a> {\n         if let Some(def_id) = def_id.as_local() {\n             self.local_def_path_hash(def_id)\n         } else {\n-            self.untracked.cstore.def_path_hash(def_id)\n+            self.untracked.cstore.read().def_path_hash(def_id)\n         }\n     }\n "}, {"sha": "a6e12982169c97749db1e417cd45fc1f5ba7e4b9", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=ade3dceb38c6e41e3b8623e252d9413052e3a0af", "patch": "@@ -130,11 +130,13 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         def_key.disambiguated_data.data.get_opt_name().expect(\"module without name\")\n                     };\n \n+                    let expn_id = self.cstore().module_expansion_untracked(def_id, &self.tcx.sess);\n+                    let span = self.cstore().get_span_untracked(def_id, &self.tcx.sess);\n                     Some(self.new_module(\n                         parent,\n                         ModuleKind::Def(def_kind, def_id, name),\n-                        self.cstore().module_expansion_untracked(def_id, &self.tcx.sess),\n-                        self.cstore().get_span_untracked(def_id, &self.tcx.sess),\n+                        expn_id,\n+                        span,\n                         // FIXME: Account for `#[no_implicit_prelude]` attributes.\n                         parent.map_or(false, |module| module.no_implicit_prelude),\n                     ))\n@@ -179,7 +181,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             return macro_data.clone();\n         }\n \n-        let (ext, macro_rules) = match self.cstore().load_macro_untracked(def_id, &self.tcx.sess) {\n+        let load_macro_untracked = self.cstore().load_macro_untracked(def_id, &self.tcx.sess);\n+        let (ext, macro_rules) = match load_macro_untracked {\n             LoadedMacro::MacroDef(item, edition) => (\n                 Lrc::new(self.compile_macro(&item, edition).0),\n                 matches!(item.kind, ItemKind::MacroDef(def) if def.macro_rules),\n@@ -204,9 +207,9 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     }\n \n     pub(crate) fn build_reduced_graph_external(&mut self, module: Module<'a>) {\n-        for child in\n-            Vec::from_iter(self.cstore().module_children_untracked(module.def_id(), self.tcx.sess))\n-        {\n+        let children =\n+            Vec::from_iter(self.cstore().module_children_untracked(module.def_id(), self.tcx.sess));\n+        for child in children {\n             let parent_scope = ParentScope::module(module, self);\n             BuildReducedGraphVisitor { r: self, parent_scope }\n                 .build_reduced_graph_for_external_crate_res(child);\n@@ -1000,23 +1003,26 @@ impl<'a, 'b, 'tcx> BuildReducedGraphVisitor<'a, 'b, 'tcx> {\n             | Res::Err => bug!(\"unexpected resolution: {:?}\", res),\n         }\n         // Record some extra data for better diagnostics.\n-        let cstore = self.r.cstore();\n         match res {\n             Res::Def(DefKind::Struct, def_id) => {\n+                let cstore = self.r.cstore();\n                 if let Some((ctor_kind, ctor_def_id)) = cstore.ctor_untracked(def_id) {\n                     let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Struct, ctor_kind), ctor_def_id);\n                     let ctor_vis = cstore.visibility_untracked(ctor_def_id);\n                     let field_visibilities =\n                         cstore.struct_field_visibilities_untracked(def_id).collect();\n+                    drop(cstore);\n                     self.r\n                         .struct_constructors\n                         .insert(def_id, (ctor_res, ctor_vis, field_visibilities));\n+                } else {\n+                    drop(cstore);\n                 }\n                 self.insert_field_names_extern(def_id)\n             }\n             Res::Def(DefKind::Union, def_id) => self.insert_field_names_extern(def_id),\n             Res::Def(DefKind::AssocFn, def_id) => {\n-                if cstore.fn_has_self_parameter_untracked(def_id, self.r.tcx.sess) {\n+                if self.r.cstore().fn_has_self_parameter_untracked(def_id, self.r.tcx.sess) {\n                     self.r.has_self.insert(def_id);\n                 }\n             }"}, {"sha": "afadc0b2a0cb7c597cb017e462e38c82d75aa7b6", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=ade3dceb38c6e41e3b8623e252d9413052e3a0af", "patch": "@@ -27,7 +27,7 @@ use rustc_ast::{self as ast, NodeId, CRATE_NODE_ID};\n use rustc_ast::{AngleBracketedArg, Crate, Expr, ExprKind, GenericArg, GenericArgs, LitKind, Path};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexMap, FxIndexSet};\n use rustc_data_structures::intern::Interned;\n-use rustc_data_structures::sync::{Lrc, RwLock};\n+use rustc_data_structures::sync::{Lrc, MappedReadGuard, ReadGuard, RwLock};\n use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_expand::base::{DeriveResolutions, SyntaxExtension, SyntaxExtensionKind};\n use rustc_hir::def::Namespace::{self, *};\n@@ -1132,7 +1132,7 @@ impl DefIdTree for ResolverTree<'_> {\n         let ResolverTree(Untracked { definitions, cstore, .. }) = self;\n         match id.as_local() {\n             Some(id) => definitions.read().def_key(id).parent,\n-            None => cstore.as_any().downcast_ref::<CStore>().unwrap().def_key(id).parent,\n+            None => cstore.read().as_any().downcast_ref::<CStore>().unwrap().def_key(id).parent,\n         }\n         .map(|index| DefId { index, ..id })\n     }\n@@ -1328,7 +1328,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             local_crate_name: crate_name,\n             used_extern_options: Default::default(),\n             untracked: Untracked {\n-                cstore: Box::new(CStore::new(session)),\n+                cstore: RwLock::new(Box::new(CStore::new(session))),\n                 source_span,\n                 definitions: RwLock::new(definitions),\n             },\n@@ -1487,14 +1487,14 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             &self.tcx.sess,\n             &*self.metadata_loader,\n             self.local_crate_name,\n-            &mut *self.untracked.cstore.untracked_as_any().downcast_mut().unwrap(),\n+            &mut *self.untracked.cstore.write().untracked_as_any().downcast_mut().unwrap(),\n             self.untracked.definitions.read(),\n             &mut self.used_extern_options,\n         ))\n     }\n \n-    fn cstore(&self) -> &CStore {\n-        self.untracked.cstore.as_any().downcast_ref().unwrap()\n+    fn cstore(&self) -> MappedReadGuard<'_, CStore> {\n+        ReadGuard::map(self.untracked.cstore.read(), |r| r.as_any().downcast_ref().unwrap())\n     }\n \n     fn dummy_ext(&self, macro_kind: MacroKind) -> Lrc<SyntaxExtension> {"}, {"sha": "ef82bb23360472cd0ee62489b71650c71d7618c5", "filename": "compiler/rustc_session/src/cstore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ade3dceb38c6e41e3b8623e252d9413052e3a0af/compiler%2Frustc_session%2Fsrc%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcstore.rs?ref=ade3dceb38c6e41e3b8623e252d9413052e3a0af", "patch": "@@ -205,7 +205,7 @@ pub trait MetadataLoader {\n     fn get_dylib_metadata(&self, target: &Target, filename: &Path) -> Result<MetadataRef, String>;\n }\n \n-pub type MetadataLoaderDyn = dyn MetadataLoader + Sync;\n+pub type MetadataLoaderDyn = dyn MetadataLoader + Send + Sync;\n \n /// A store of Rust crates, through which their metadata can be accessed.\n ///\n@@ -250,11 +250,11 @@ pub trait CrateStore: std::fmt::Debug {\n     fn import_source_files(&self, sess: &Session, cnum: CrateNum);\n }\n \n-pub type CrateStoreDyn = dyn CrateStore + sync::Sync;\n+pub type CrateStoreDyn = dyn CrateStore + sync::Sync + sync::Send;\n \n #[derive(Debug)]\n pub struct Untracked {\n-    pub cstore: Box<CrateStoreDyn>,\n+    pub cstore: RwLock<Box<CrateStoreDyn>>,\n     /// Reference span for definitions.\n     pub source_span: IndexVec<LocalDefId, Span>,\n     pub definitions: RwLock<Definitions>,"}]}