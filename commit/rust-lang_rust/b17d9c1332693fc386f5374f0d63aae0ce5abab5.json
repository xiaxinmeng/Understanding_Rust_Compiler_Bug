{"sha": "b17d9c1332693fc386f5374f0d63aae0ce5abab5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxN2Q5YzEzMzI2OTNmYzM4NmY1Mzc0ZjBkNjNhYWUwY2U1YWJhYjU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-17T09:03:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-06-17T09:03:58Z"}, "message": "Auto merge of #85834 - cjgillot:save-sbi, r=michaelwoerister\n\nEncode CrateNum using the StableCrateId for incr. comp.", "tree": {"sha": "515243303f3219b335795e5f83fdd896ed407fbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/515243303f3219b335795e5f83fdd896ed407fbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b17d9c1332693fc386f5374f0d63aae0ce5abab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b17d9c1332693fc386f5374f0d63aae0ce5abab5", "html_url": "https://github.com/rust-lang/rust/commit/b17d9c1332693fc386f5374f0d63aae0ce5abab5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b17d9c1332693fc386f5374f0d63aae0ce5abab5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb3c4ee7187b045683cb9b86135dbbb766471091", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3c4ee7187b045683cb9b86135dbbb766471091", "html_url": "https://github.com/rust-lang/rust/commit/cb3c4ee7187b045683cb9b86135dbbb766471091"}, {"sha": "f387cffadb223b0c3347df2426764caab7406dbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/f387cffadb223b0c3347df2426764caab7406dbd", "html_url": "https://github.com/rust-lang/rust/commit/f387cffadb223b0c3347df2426764caab7406dbd"}], "stats": {"total": 111, "additions": 40, "deletions": 71}, "files": [{"sha": "48900fecd3e1bd11df89850f72f3dbdd50e16676", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b17d9c1332693fc386f5374f0d63aae0ce5abab5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17d9c1332693fc386f5374f0d63aae0ce5abab5/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=b17d9c1332693fc386f5374f0d63aae0ce5abab5", "patch": "@@ -252,6 +252,10 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n         self.cdata.expect(\"missing CrateMetadata in DecodeContext\")\n     }\n \n+    fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {\n+        if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }\n+    }\n+\n     fn read_lazy_with_meta<T: ?Sized + LazyMeta>(\n         &mut self,\n         meta: T::Meta,\n@@ -324,10 +328,6 @@ impl<'a, 'tcx> TyDecoder<'tcx> for DecodeContext<'a, 'tcx> {\n         r\n     }\n \n-    fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {\n-        if cnum == LOCAL_CRATE { self.cdata().cnum } else { self.cdata().cnum_map[cnum] }\n-    }\n-\n     fn decode_alloc_id(&mut self) -> Result<rustc_middle::mir::interpret::AllocId, Self::Error> {\n         if let Some(alloc_decoding_session) = self.alloc_decoding_session {\n             alloc_decoding_session.decode_alloc_id(self)"}, {"sha": "5ec665e913cc5ac55c6b5e8df33fbbe4e60517c7", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b17d9c1332693fc386f5374f0d63aae0ce5abab5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17d9c1332693fc386f5374f0d63aae0ce5abab5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=b17d9c1332693fc386f5374f0d63aae0ce5abab5", "patch": "@@ -15,7 +15,7 @@ use crate::mir::{\n use crate::ty::subst::SubstsRef;\n use crate::ty::{self, List, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::def_id::DefId;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use rustc_span::Span;\n use std::hash::Hash;\n@@ -179,8 +179,6 @@ pub trait TyDecoder<'tcx>: Decoder {\n     where\n         F: FnOnce(&mut Self) -> R;\n \n-    fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum;\n-\n     fn positioned_at_shorthand(&self) -> bool {\n         (self.peek_byte() & (SHORTHAND_OFFSET as u8)) != 0\n     }"}, {"sha": "73991436b7b6bd834309b91bb474ef4236e66939", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b17d9c1332693fc386f5374f0d63aae0ce5abab5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17d9c1332693fc386f5374f0d63aae0ce5abab5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=b17d9c1332693fc386f5374f0d63aae0ce5abab5", "patch": "@@ -53,6 +53,7 @@ use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_session::config::{BorrowckMode, CrateType, OutputFilenames};\n use rustc_session::lint::{Level, Lint};\n use rustc_session::Session;\n+use rustc_span::def_id::StableCrateId;\n use rustc_span::source_map::MultiSpan;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -1264,6 +1265,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n+    #[inline]\n+    pub fn stable_crate_id(self, cnum: CrateNum) -> StableCrateId {\n+        self.def_path_hash(cnum.as_def_id()).stable_crate_id()\n+    }\n+\n     pub fn def_path_debug_str(self, def_id: DefId) -> String {\n         // We are explicitly not going through queries here in order to get\n         // crate name and disambiguator since this code is called from debug!()"}, {"sha": "ebaef347f4293161e8ecf534a897e08d6c3570d6", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 29, "deletions": 64, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/b17d9c1332693fc386f5374f0d63aae0ce5abab5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b17d9c1332693fc386f5374f0d63aae0ce5abab5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=b17d9c1332693fc386f5374f0d63aae0ce5abab5", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::sync::{HashMapExt, Lock, Lrc, OnceCell};\n use rustc_data_structures::thin_vec::ThinVec;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::Diagnostic;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, StableCrateId, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathHash;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_query_system::dep_graph::DepContext;\n@@ -18,7 +18,7 @@ use rustc_serialize::{\n     opaque::{self, FileEncodeResult, FileEncoder, IntEncodedWithFixedSize},\n     Decodable, Decoder, Encodable, Encoder,\n };\n-use rustc_session::{CrateDisambiguator, Session};\n+use rustc_session::Session;\n use rustc_span::hygiene::{\n     ExpnDataDecodeMode, ExpnDataEncodeMode, ExpnId, HygieneDecodeContext, HygieneEncodeContext,\n     SyntaxContext, SyntaxContextData,\n@@ -51,8 +51,7 @@ pub struct OnDiskCache<'sess> {\n     // session.\n     current_diagnostics: Lock<FxHashMap<DepNodeIndex, Vec<Diagnostic>>>,\n \n-    prev_cnums: Vec<(u32, String, CrateDisambiguator)>,\n-    cnum_map: OnceCell<IndexVec<CrateNum, Option<CrateNum>>>,\n+    cnum_map: OnceCell<UnhashMap<StableCrateId, CrateNum>>,\n \n     source_map: &'sess SourceMap,\n     file_index_to_stable_id: FxHashMap<SourceFileIndex, StableSourceFileId>,\n@@ -113,7 +112,6 @@ pub struct OnDiskCache<'sess> {\n #[derive(Encodable, Decodable)]\n struct Footer {\n     file_index_to_stable_id: FxHashMap<SourceFileIndex, StableSourceFileId>,\n-    prev_cnums: Vec<(u32, String, CrateDisambiguator)>,\n     query_result_index: EncodedQueryResultIndex,\n     diagnostics_index: EncodedQueryResultIndex,\n     // The location of all allocations.\n@@ -186,7 +184,6 @@ impl<'sess> OnDiskCache<'sess> {\n             serialized_data: data,\n             file_index_to_stable_id: footer.file_index_to_stable_id,\n             file_index_to_file: Default::default(),\n-            prev_cnums: footer.prev_cnums,\n             cnum_map: OnceCell::new(),\n             source_map: sess.source_map(),\n             current_diagnostics: Default::default(),\n@@ -207,7 +204,6 @@ impl<'sess> OnDiskCache<'sess> {\n             serialized_data: Vec::new(),\n             file_index_to_stable_id: Default::default(),\n             file_index_to_file: Default::default(),\n-            prev_cnums: vec![],\n             cnum_map: OnceCell::new(),\n             source_map,\n             current_diagnostics: Default::default(),\n@@ -327,16 +323,6 @@ impl<'sess> OnDiskCache<'sess> {\n                 interpret_alloc_index\n             };\n \n-            let sorted_cnums = sorted_cnums_including_local_crate(tcx);\n-            let prev_cnums: Vec<_> = sorted_cnums\n-                .iter()\n-                .map(|&cnum| {\n-                    let crate_name = tcx.crate_name(cnum).to_string();\n-                    let crate_disambiguator = tcx.crate_disambiguator(cnum);\n-                    (cnum.as_u32(), crate_name, crate_disambiguator)\n-                })\n-                .collect();\n-\n             let mut syntax_contexts = FxHashMap::default();\n             let mut expn_ids = FxHashMap::default();\n \n@@ -368,7 +354,6 @@ impl<'sess> OnDiskCache<'sess> {\n                 TAG_FILE_FOOTER,\n                 &Footer {\n                     file_index_to_stable_id,\n-                    prev_cnums,\n                     query_result_index,\n                     diagnostics_index,\n                     interpret_alloc_index,\n@@ -385,16 +370,7 @@ impl<'sess> OnDiskCache<'sess> {\n             // DO NOT WRITE ANYTHING TO THE ENCODER AFTER THIS POINT! The address\n             // of the footer must be the last thing in the data stream.\n \n-            return Ok(());\n-\n-            fn sorted_cnums_including_local_crate(tcx: TyCtxt<'_>) -> Vec<CrateNum> {\n-                let mut cnums = vec![LOCAL_CRATE];\n-                cnums.extend_from_slice(tcx.crates());\n-                cnums.sort_unstable();\n-                // Just to be sure...\n-                cnums.dedup();\n-                cnums\n-            }\n+            Ok(())\n         })\n     }\n \n@@ -429,12 +405,11 @@ impl<'sess> OnDiskCache<'sess> {\n         self.foreign_def_path_hashes.get(hash).copied()\n     }\n \n-    fn try_remap_cnum(&self, tcx: TyCtxt<'_>, cnum: u32) -> Option<CrateNum> {\n-        let cnum_map =\n-            self.cnum_map.get_or_init(|| Self::compute_cnum_map(tcx, &self.prev_cnums[..]));\n-        debug!(\"try_remap_cnum({}): cnum_map={:?}\", cnum, cnum_map);\n+    fn try_remap_cnum(&self, tcx: TyCtxt<'_>, stable_crate_id: StableCrateId) -> Option<CrateNum> {\n+        let cnum_map = self.cnum_map.get_or_init(|| Self::compute_cnum_map(tcx));\n+        debug!(\"try_remap_cnum({:?}): cnum_map={:?}\", stable_crate_id, cnum_map);\n \n-        cnum_map[CrateNum::from_u32(cnum)]\n+        cnum_map.get(&stable_crate_id).copied()\n     }\n \n     pub(crate) fn store_foreign_def_id_hash(&self, def_id: DefId, hash: DefPathHash) {\n@@ -533,8 +508,7 @@ impl<'sess> OnDiskCache<'sess> {\n     where\n         T: Decodable<CacheDecoder<'a, 'tcx>>,\n     {\n-        let cnum_map =\n-            self.cnum_map.get_or_init(|| Self::compute_cnum_map(tcx, &self.prev_cnums[..]));\n+        let cnum_map = self.cnum_map.get_or_init(|| Self::compute_cnum_map(tcx));\n \n         let mut decoder = CacheDecoder {\n             tcx,\n@@ -555,31 +529,16 @@ impl<'sess> OnDiskCache<'sess> {\n     // current-session-`CrateNum`. There might be `CrateNum`s from the previous\n     // `Session` that don't occur in the current one. For these, the mapping\n     // maps to None.\n-    fn compute_cnum_map(\n-        tcx: TyCtxt<'_>,\n-        prev_cnums: &[(u32, String, CrateDisambiguator)],\n-    ) -> IndexVec<CrateNum, Option<CrateNum>> {\n+    fn compute_cnum_map(tcx: TyCtxt<'_>) -> UnhashMap<StableCrateId, CrateNum> {\n         tcx.dep_graph.with_ignore(|| {\n-            let current_cnums = tcx\n-                .all_crate_nums(())\n+            tcx.all_crate_nums(())\n                 .iter()\n+                .chain(std::iter::once(&LOCAL_CRATE))\n                 .map(|&cnum| {\n-                    let crate_name = tcx.crate_name(cnum).to_string();\n-                    let crate_disambiguator = tcx.crate_disambiguator(cnum);\n-                    ((crate_name, crate_disambiguator), cnum)\n+                    let hash = tcx.def_path_hash(cnum.as_def_id()).stable_crate_id();\n+                    (hash, cnum)\n                 })\n-                .collect::<FxHashMap<_, _>>();\n-\n-            let map_size = prev_cnums.iter().map(|&(cnum, ..)| cnum).max().unwrap_or(0) + 1;\n-            let mut map = IndexVec::from_elem_n(None, map_size as usize);\n-\n-            for &(prev_cnum, ref crate_name, crate_disambiguator) in prev_cnums {\n-                let key = (crate_name.clone(), crate_disambiguator);\n-                map[CrateNum::from_u32(prev_cnum)] = current_cnums.get(&key).cloned();\n-            }\n-\n-            map[LOCAL_CRATE] = Some(LOCAL_CRATE);\n-            map\n+                .collect()\n         })\n     }\n \n@@ -612,7 +571,7 @@ impl<'sess> OnDiskCache<'sess> {\n                 debug!(\"def_path_hash_to_def_id({:?}): raw_def_id = {:?}\", hash, raw_def_id);\n                 // If the owning crate no longer exists, the corresponding definition definitely\n                 // no longer exists.\n-                let krate = self.try_remap_cnum(tcx, raw_def_id.krate)?;\n+                let krate = self.try_remap_cnum(tcx, hash.stable_crate_id())?;\n                 debug!(\"def_path_hash_to_def_id({:?}): krate = {:?}\", hash, krate);\n                 // If our `DefPathHash` corresponded to a definition in the local crate,\n                 // we should have either found it in `local_def_path_hash_to_def_id`, or\n@@ -644,7 +603,7 @@ pub struct CacheDecoder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     opaque: opaque::Decoder<'a>,\n     source_map: &'a SourceMap,\n-    cnum_map: &'a IndexVec<CrateNum, Option<CrateNum>>,\n+    cnum_map: &'a UnhashMap<StableCrateId, CrateNum>,\n     file_index_to_file: &'a Lock<FxHashMap<SourceFileIndex, Lrc<SourceFile>>>,\n     file_index_to_stable_id: &'a FxHashMap<SourceFileIndex, StableSourceFileId>,\n     alloc_decoding_session: AllocDecodingSession<'a>,\n@@ -765,10 +724,6 @@ impl<'a, 'tcx> TyDecoder<'tcx> for CacheDecoder<'a, 'tcx> {\n         r\n     }\n \n-    fn map_encoded_cnum_to_current(&self, cnum: CrateNum) -> CrateNum {\n-        self.cnum_map[cnum].unwrap_or_else(|| bug!(\"could not find new `CrateNum` for {:?}\", cnum))\n-    }\n-\n     fn decode_alloc_id(&mut self) -> Result<interpret::AllocId, Self::Error> {\n         let alloc_decoding_session = self.alloc_decoding_session;\n         alloc_decoding_session.decode_alloc_id(self)\n@@ -850,8 +805,9 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for Span {\n \n impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for CrateNum {\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Result<Self, String> {\n-        let cnum = CrateNum::from_u32(u32::decode(d)?);\n-        Ok(d.map_encoded_cnum_to_current(cnum))\n+        let stable_id = StableCrateId::decode(d)?;\n+        let cnum = d.cnum_map[&stable_id];\n+        Ok(cnum)\n     }\n }\n \n@@ -1061,6 +1017,15 @@ where\n     }\n }\n \n+impl<'a, 'tcx, E> Encodable<CacheEncoder<'a, 'tcx, E>> for CrateNum\n+where\n+    E: 'a + OpaqueEncoder,\n+{\n+    fn encode(&self, s: &mut CacheEncoder<'a, 'tcx, E>) -> Result<(), E::Error> {\n+        s.tcx.stable_crate_id(*self).encode(s)\n+    }\n+}\n+\n impl<'a, 'tcx, E> Encodable<CacheEncoder<'a, 'tcx, E>> for DefId\n where\n     E: 'a + OpaqueEncoder,"}]}