{"sha": "df6b06790057ca32584a6ed6bfdd02045594137d", "node_id": "C_kwDOAAsO6NoAKGRmNmIwNjc5MDA1N2NhMzI1ODRhNmVkNmJmZGQwMjA0NTU5NDEzN2Q", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-05T18:17:31Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-05T18:17:51Z"}, "message": "Implement const operands for global asm", "tree": {"sha": "4b3e032d72cefcc083f6f57a43dc7b318b03b03b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b3e032d72cefcc083f6f57a43dc7b318b03b03b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df6b06790057ca32584a6ed6bfdd02045594137d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df6b06790057ca32584a6ed6bfdd02045594137d", "html_url": "https://github.com/rust-lang/rust/commit/df6b06790057ca32584a6ed6bfdd02045594137d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df6b06790057ca32584a6ed6bfdd02045594137d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e238ea6155771ef0baf2d7e44e7d77209e3f7685", "url": "https://api.github.com/repos/rust-lang/rust/commits/e238ea6155771ef0baf2d7e44e7d77209e3f7685", "html_url": "https://github.com/rust-lang/rust/commit/e238ea6155771ef0baf2d7e44e7d77209e3f7685"}], "stats": {"total": 29, "additions": 27, "deletions": 2}, "files": [{"sha": "9aee4908c5ca1c02e5100c5f7b2e3adeda862129", "filename": "src/global_asm.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/df6b06790057ca32584a6ed6bfdd02045594137d/src%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df6b06790057ca32584a6ed6bfdd02045594137d/src%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fglobal_asm.rs?ref=df6b06790057ca32584a6ed6bfdd02045594137d", "patch": "@@ -7,7 +7,7 @@ use std::process::{Command, Stdio};\n use std::sync::Arc;\n \n use rustc_ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n-use rustc_hir::ItemId;\n+use rustc_hir::{InlineAsmOperand, ItemId};\n use rustc_session::config::{OutputFilenames, OutputType};\n \n use crate::prelude::*;\n@@ -23,7 +23,32 @@ pub(crate) fn codegen_global_asm_item(tcx: TyCtxt<'_>, global_asm: &mut String,\n         for piece in asm.template {\n             match *piece {\n                 InlineAsmTemplatePiece::String(ref s) => global_asm.push_str(s),\n-                InlineAsmTemplatePiece::Placeholder { .. } => todo!(),\n+                InlineAsmTemplatePiece::Placeholder { operand_idx, modifier: _, span: op_sp } => {\n+                    match asm.operands[operand_idx].0 {\n+                        InlineAsmOperand::Const { ref anon_const } => {\n+                            let const_value =\n+                                tcx.const_eval_poly(anon_const.def_id.to_def_id()).unwrap_or_else(\n+                                    |_| span_bug!(op_sp, \"asm const cannot be resolved\"),\n+                                );\n+                            let ty = tcx.typeck_body(anon_const.body).node_type(anon_const.hir_id);\n+                            let string = rustc_codegen_ssa::common::asm_const_to_str(\n+                                tcx,\n+                                op_sp,\n+                                const_value,\n+                                RevealAllLayoutCx(tcx).layout_of(ty),\n+                            );\n+                            global_asm.push_str(&string);\n+                        }\n+                        InlineAsmOperand::SymFn { anon_const: _ } => todo!(),\n+                        InlineAsmOperand::SymStatic { path: _, def_id: _ } => todo!(),\n+                        InlineAsmOperand::In { .. }\n+                        | InlineAsmOperand::Out { .. }\n+                        | InlineAsmOperand::InOut { .. }\n+                        | InlineAsmOperand::SplitInOut { .. } => {\n+                            span_bug!(op_sp, \"invalid operand type for global_asm!\")\n+                        }\n+                    }\n+                }\n             }\n         }\n         global_asm.push_str(\"\\n.att_syntax\\n\\n\");"}]}