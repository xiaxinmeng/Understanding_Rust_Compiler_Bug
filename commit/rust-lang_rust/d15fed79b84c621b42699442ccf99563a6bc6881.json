{"sha": "d15fed79b84c621b42699442ccf99563a6bc6881", "node_id": "C_kwDOAAsO6NoAKGQxNWZlZDc5Yjg0YzYyMWI0MjY5OTQ0MmNjZjk5NTYzYTZiYzY4ODE", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-20T06:11:31Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-06-22T01:12:43Z"}, "message": "Improve suggestion for calling closure on type mismatch", "tree": {"sha": "ce8f9ef2cc613e7e1bd8edfbaf232e02edb5a751", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce8f9ef2cc613e7e1bd8edfbaf232e02edb5a751"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d15fed79b84c621b42699442ccf99563a6bc6881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d15fed79b84c621b42699442ccf99563a6bc6881", "html_url": "https://github.com/rust-lang/rust/commit/d15fed79b84c621b42699442ccf99563a6bc6881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d15fed79b84c621b42699442ccf99563a6bc6881/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc80ca78b6ec2b6bba02560470347433bcd0bb3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc80ca78b6ec2b6bba02560470347433bcd0bb3c", "html_url": "https://github.com/rust-lang/rust/commit/dc80ca78b6ec2b6bba02560470347433bcd0bb3c"}], "stats": {"total": 268, "additions": 143, "deletions": 125}, "files": [{"sha": "3cba6d40e38b1d1dd4f1e04209a4a0ae24abdc6a", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d15fed79b84c621b42699442ccf99563a6bc6881/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15fed79b84c621b42699442ccf99563a6bc6881/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=d15fed79b84c621b42699442ccf99563a6bc6881", "patch": "@@ -856,7 +856,7 @@ pub trait PrettyPrinter<'tcx>:\n                     p!(\")\");\n                     if let Term::Ty(ty) = return_ty.skip_binder() {\n                         if !ty.is_unit() {\n-                            p!(\"-> \", print(return_ty));\n+                            p!(\" -> \", print(return_ty));\n                         }\n                     }\n                     p!(write(\"{}\", if paren_needed { \")\" } else { \"\" }));"}, {"sha": "7195da863db481718f9105e41c3524320c3fc25b", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/suggestions.rs", "status": "modified", "additions": 76, "deletions": 113, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/d15fed79b84c621b42699442ccf99563a6bc6881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15fed79b84c621b42699442ccf99563a6bc6881/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fsuggestions.rs?ref=d15fed79b84c621b42699442ccf99563a6bc6881", "patch": "@@ -8,15 +8,14 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{\n-    Expr, ExprKind, GenericBound, ItemKind, Node, Path, QPath, Stmt, StmtKind, TyKind,\n-    WherePredicate,\n+    Expr, ExprKind, GenericBound, Node, Path, QPath, Stmt, StmtKind, TyKind, WherePredicate,\n };\n use rustc_infer::infer::{self, TyCtxtInferExt};\n use rustc_infer::traits;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n-use rustc_middle::ty::{self, Binder, IsSuggestable, ToPredicate, Ty};\n-use rustc_span::symbol::{kw, sym};\n+use rustc_middle::ty::{self, Binder, IsSuggestable, Subst, ToPredicate, Ty};\n+use rustc_span::symbol::sym;\n use rustc_span::Span;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n \n@@ -78,124 +77,88 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n     ) -> bool {\n-        let hir = self.tcx.hir();\n-        let (def_id, sig) = match *found.kind() {\n-            ty::FnDef(def_id, _) => (def_id, found.fn_sig(self.tcx)),\n-            ty::Closure(def_id, substs) => (def_id, substs.as_closure().sig()),\n+        let (def_id, output, inputs) = match *found.kind() {\n+            ty::FnDef(def_id, _) => {\n+                let fn_sig = found.fn_sig(self.tcx);\n+                (def_id, fn_sig.output(), fn_sig.inputs().skip_binder().len())\n+            }\n+            ty::Closure(def_id, substs) => {\n+                let fn_sig = substs.as_closure().sig();\n+                (def_id, fn_sig.output(), fn_sig.inputs().skip_binder().len() - 1)\n+            }\n+            ty::Opaque(def_id, substs) => {\n+                let sig = self.tcx.bound_item_bounds(def_id).subst(self.tcx, substs).iter().find_map(|pred| {\n+                    if let ty::PredicateKind::Projection(proj) = pred.kind().skip_binder()\n+                    && Some(proj.projection_ty.item_def_id) == self.tcx.lang_items().fn_once_output()\n+                    // args tuple will always be substs[1]\n+                    && let ty::Tuple(args) = proj.projection_ty.substs.type_at(1).kind()\n+                    {\n+                        Some((\n+                            pred.kind().rebind(proj.term.ty().unwrap()),\n+                            args.len(),\n+                        ))\n+                    } else {\n+                        None\n+                    }\n+                });\n+                if let Some((output, inputs)) = sig {\n+                    (def_id, output, inputs)\n+                } else {\n+                    return false;\n+                }\n+            }\n             _ => return false,\n         };\n \n-        let sig = self.replace_bound_vars_with_fresh_vars(expr.span, infer::FnCall, sig);\n-        let sig = self.normalize_associated_types_in(expr.span, sig);\n-        if self.can_coerce(sig.output(), expected) {\n-            let (mut sugg_call, applicability) = if sig.inputs().is_empty() {\n-                (String::new(), Applicability::MachineApplicable)\n-            } else {\n-                (\"...\".to_string(), Applicability::HasPlaceholders)\n+        let output = self.replace_bound_vars_with_fresh_vars(expr.span, infer::FnCall, output);\n+        let output = self.normalize_associated_types_in(expr.span, output);\n+        if !output.is_ty_var() && self.can_coerce(output, expected) {\n+            let (sugg_call, mut applicability) = match inputs {\n+                0 => (\"\".to_string(), Applicability::MachineApplicable),\n+                1..=4 => (\n+                    (0..inputs).map(|_| \"_\").collect::<Vec<_>>().join(\", \"),\n+                    Applicability::MachineApplicable,\n+                ),\n+                _ => (\"...\".to_string(), Applicability::HasPlaceholders),\n             };\n-            let mut msg = \"call this function\";\n-            match hir.get_if_local(def_id) {\n-                Some(\n-                    Node::Item(hir::Item { kind: ItemKind::Fn(.., body_id), .. })\n-                    | Node::ImplItem(hir::ImplItem {\n-                        kind: hir::ImplItemKind::Fn(_, body_id), ..\n-                    })\n-                    | Node::TraitItem(hir::TraitItem {\n-                        kind: hir::TraitItemKind::Fn(.., hir::TraitFn::Provided(body_id)),\n-                        ..\n-                    }),\n-                ) => {\n-                    let body = hir.body(*body_id);\n-                    sugg_call = body\n-                        .params\n-                        .iter()\n-                        .map(|param| match &param.pat.kind {\n-                            hir::PatKind::Binding(_, _, ident, None)\n-                                if ident.name != kw::SelfLower =>\n-                            {\n-                                ident.to_string()\n-                            }\n-                            _ => \"_\".to_string(),\n-                        })\n-                        .collect::<Vec<_>>()\n-                        .join(\", \");\n-                }\n-                Some(Node::Expr(hir::Expr {\n-                    kind: ExprKind::Closure { body: body_id, .. },\n-                    span: full_closure_span,\n-                    ..\n-                })) => {\n-                    if *full_closure_span == expr.span {\n-                        return false;\n-                    }\n-                    msg = \"call this closure\";\n-                    let body = hir.body(*body_id);\n-                    sugg_call = body\n-                        .params\n-                        .iter()\n-                        .map(|param| match &param.pat.kind {\n-                            hir::PatKind::Binding(_, _, ident, None)\n-                                if ident.name != kw::SelfLower =>\n-                            {\n-                                ident.to_string()\n-                            }\n-                            _ => \"_\".to_string(),\n-                        })\n-                        .collect::<Vec<_>>()\n-                        .join(\", \");\n-                }\n-                Some(Node::Ctor(hir::VariantData::Tuple(fields, _))) => {\n-                    sugg_call = fields.iter().map(|_| \"_\").collect::<Vec<_>>().join(\", \");\n-                    match def_id.as_local().map(|def_id| self.tcx.def_kind(def_id)) {\n-                        Some(DefKind::Ctor(hir::def::CtorOf::Variant, _)) => {\n-                            msg = \"instantiate this tuple variant\";\n-                        }\n-                        Some(DefKind::Ctor(CtorOf::Struct, _)) => {\n-                            msg = \"instantiate this tuple struct\";\n-                        }\n-                        _ => {}\n-                    }\n+\n+            let msg = match self.tcx.def_kind(def_id) {\n+                DefKind::Fn => \"call this function\",\n+                DefKind::Closure | DefKind::OpaqueTy => \"call this closure\",\n+                DefKind::Ctor(CtorOf::Struct, _) => \"instantiate this tuple struct\",\n+                DefKind::Ctor(CtorOf::Variant, _) => \"instantiate this tuple variant\",\n+                _ => \"call this function\",\n+            };\n+\n+            let sugg = match expr.kind {\n+                hir::ExprKind::Call(..)\n+                | hir::ExprKind::Path(..)\n+                | hir::ExprKind::Index(..)\n+                | hir::ExprKind::Lit(..) => {\n+                    vec![(expr.span.shrink_to_hi(), format!(\"({sugg_call})\"))]\n                 }\n-                Some(Node::ForeignItem(hir::ForeignItem {\n-                    kind: hir::ForeignItemKind::Fn(_, idents, _),\n-                    ..\n-                })) => {\n-                    sugg_call = idents\n-                        .iter()\n-                        .map(|ident| {\n-                            if ident.name != kw::SelfLower {\n-                                ident.to_string()\n-                            } else {\n-                                \"_\".to_string()\n-                            }\n-                        })\n-                        .collect::<Vec<_>>()\n-                        .join(\", \")\n+                hir::ExprKind::Closure { .. } => {\n+                    // Might be `{ expr } || { bool }`\n+                    applicability = Applicability::MaybeIncorrect;\n+                    vec![\n+                        (expr.span.shrink_to_lo(), \"(\".to_string()),\n+                        (expr.span.shrink_to_hi(), format!(\")({sugg_call})\")),\n+                    ]\n                 }\n-                Some(Node::TraitItem(hir::TraitItem {\n-                    kind: hir::TraitItemKind::Fn(.., hir::TraitFn::Required(idents)),\n-                    ..\n-                })) => {\n-                    sugg_call = idents\n-                        .iter()\n-                        .map(|ident| {\n-                            if ident.name != kw::SelfLower {\n-                                ident.to_string()\n-                            } else {\n-                                \"_\".to_string()\n-                            }\n-                        })\n-                        .collect::<Vec<_>>()\n-                        .join(\", \")\n+                _ => {\n+                    vec![\n+                        (expr.span.shrink_to_lo(), \"(\".to_string()),\n+                        (expr.span.shrink_to_hi(), format!(\")({sugg_call})\")),\n+                    ]\n                 }\n-                _ => {}\n-            }\n-            err.span_suggestion_verbose(\n-                expr.span.shrink_to_hi(),\n-                &format!(\"use parentheses to {}\", msg),\n-                format!(\"({})\", sugg_call),\n+            };\n+\n+            err.multipart_suggestion_verbose(\n+                format!(\"use parentheses to {msg}\"),\n+                sugg,\n                 applicability,\n             );\n+\n             return true;\n         }\n         false"}, {"sha": "640156291a38cfc8e93be806616be0a8df1df501", "filename": "src/test/ui/impl-trait/suggest-calling-rpit-closure.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Fimpl-trait%2Fsuggest-calling-rpit-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Fimpl-trait%2Fsuggest-calling-rpit-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fsuggest-calling-rpit-closure.rs?ref=d15fed79b84c621b42699442ccf99563a6bc6881", "patch": "@@ -0,0 +1,12 @@\n+fn whatever() -> i32 {\n+    opaque()\n+//~^ ERROR mismatched types\n+}\n+\n+fn opaque() -> impl Fn() -> i32 {\n+    || 0\n+}\n+\n+fn main() {\n+    let _ = whatever();\n+}"}, {"sha": "2a328a0e6f54d821803307daab761b96385aa7a8", "filename": "src/test/ui/impl-trait/suggest-calling-rpit-closure.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Fimpl-trait%2Fsuggest-calling-rpit-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Fimpl-trait%2Fsuggest-calling-rpit-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fsuggest-calling-rpit-closure.stderr?ref=d15fed79b84c621b42699442ccf99563a6bc6881", "patch": "@@ -0,0 +1,21 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-calling-rpit-closure.rs:2:5\n+   |\n+LL | fn whatever() -> i32 {\n+   |                  --- expected `i32` because of return type\n+LL |     opaque()\n+   |     ^^^^^^^^ expected `i32`, found opaque type\n+...\n+LL | fn opaque() -> impl Fn() -> i32 {\n+   |                ---------------- the found opaque type\n+   |\n+   = note:     expected type `i32`\n+           found opaque type `impl Fn() -> i32`\n+help: use parentheses to call this closure\n+   |\n+LL |     opaque()()\n+   |             ++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "d4f64a7de5bcff2096eada7938f4e57ae4ec2846", "filename": "src/test/ui/parser/expr-as-stmt.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fexpr-as-stmt.stderr?ref=d15fed79b84c621b42699442ccf99563a6bc6881", "patch": "@@ -201,6 +201,10 @@ LL |     { true } || { true }\n    |\n    = note: expected type `bool`\n            found closure `[closure@$DIR/expr-as-stmt.rs:51:14: 51:25]`\n+help: use parentheses to call this closure\n+   |\n+LL |     { true } (|| { true })()\n+   |              +           +++\n help: parentheses are required to parse this as an expression\n    |\n LL |     ({ true }) || { true }"}, {"sha": "e71f15ebfd2e7219870a555ce9cd0f2913a25020", "filename": "src/test/ui/parser/struct-literal-restrictions-in-lamda.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fstruct-literal-restrictions-in-lamda.stderr?ref=d15fed79b84c621b42699442ccf99563a6bc6881", "patch": "@@ -25,6 +25,12 @@ LL | |     }.hi() {\n    |\n    = note: expected type `bool`\n            found closure `[closure@$DIR/struct-literal-restrictions-in-lamda.rs:12:11: 14:11]`\n+help: use parentheses to call this closure\n+   |\n+LL ~     while (|| Foo {\n+LL |         x: 3\n+LL ~     }.hi())() {\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "360557fb5201daca66ff89e027f140d566efcbe3", "filename": "src/test/ui/reify-intrinsic.stderr", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Freify-intrinsic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freify-intrinsic.stderr?ref=d15fed79b84c621b42699442ccf99563a6bc6881", "patch": "@@ -8,10 +8,6 @@ LL |     let _: unsafe extern \"rust-intrinsic\" fn(isize) -> usize = std::mem::tr\n    |\n    = note: expected fn pointer `unsafe extern \"rust-intrinsic\" fn(isize) -> usize`\n                  found fn item `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n-help: use parentheses to call this function\n-   |\n-LL |     let _: unsafe extern \"rust-intrinsic\" fn(isize) -> usize = std::mem::transmute(...);\n-   |                                                                                   +++++\n \n error[E0606]: casting `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}` as `unsafe extern \"rust-intrinsic\" fn(isize) -> usize` is invalid\n   --> $DIR/reify-intrinsic.rs:11:13"}, {"sha": "f7f39bd0b9a07d635e505014ff5c1a8d80210226", "filename": "src/test/ui/rfc-2497-if-let-chains/disallowed-positions.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fdisallowed-positions.stderr?ref=d15fed79b84c621b42699442ccf99563a6bc6881", "patch": "@@ -1118,6 +1118,10 @@ LL |     if let Range { start: F, end } = F..|| true {}\n    |\n    = note: expected type `bool`\n            found closure `[closure@$DIR/disallowed-positions.rs:136:41: 136:48]`\n+help: use parentheses to call this closure\n+   |\n+LL |     if let Range { start: F, end } = F..(|| true)() {}\n+   |                                         +       +++\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:136:8\n@@ -1314,6 +1318,10 @@ LL |     while let Range { start: F, end } = F..|| true {}\n    |\n    = note: expected type `bool`\n            found closure `[closure@$DIR/disallowed-positions.rs:200:44: 200:51]`\n+help: use parentheses to call this closure\n+   |\n+LL |     while let Range { start: F, end } = F..(|| true)() {}\n+   |                                            +       +++\n \n error[E0308]: mismatched types\n   --> $DIR/disallowed-positions.rs:200:11"}, {"sha": "3e7041f02b388aaeca7ce0ee1b4fa85c151a8a4c", "filename": "src/test/ui/span/move-closure.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fmove-closure.stderr?ref=d15fed79b84c621b42699442ccf99563a6bc6881", "patch": "@@ -8,6 +8,10 @@ LL |     let x: () = move || ();\n    |\n    = note: expected unit type `()`\n                 found closure `[closure@$DIR/move-closure.rs:5:17: 5:27]`\n+help: use parentheses to call this closure\n+   |\n+LL |     let x: () = (move || ())();\n+   |                 +          +++\n \n error: aborting due to previous error\n "}, {"sha": "25ce458f6d8133a81672a6837c27be2a61211655", "filename": "src/test/ui/suggestions/fn-or-tuple-struct-without-args.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ffn-or-tuple-struct-without-args.stderr?ref=d15fed79b84c621b42699442ccf99563a6bc6881", "patch": "@@ -33,7 +33,7 @@ LL |     let _: usize = foo;\n            found fn item `fn(usize, usize) -> usize {foo}`\n help: use parentheses to call this function\n    |\n-LL |     let _: usize = foo(a, b);\n+LL |     let _: usize = foo(_, _);\n    |                       ++++++\n \n error[E0308]: mismatched types\n@@ -105,7 +105,7 @@ LL |     let _: usize = T::baz;\n            found fn item `fn(usize, usize) -> usize {<_ as T>::baz}`\n help: use parentheses to call this function\n    |\n-LL |     let _: usize = T::baz(x, y);\n+LL |     let _: usize = T::baz(_, _);\n    |                          ++++++\n \n error[E0308]: mismatched types\n@@ -123,7 +123,7 @@ LL |     let _: usize = T::bat;\n            found fn item `fn(usize) -> usize {<_ as T>::bat}`\n help: use parentheses to call this function\n    |\n-LL |     let _: usize = T::bat(x);\n+LL |     let _: usize = T::bat(_);\n    |                          +++\n \n error[E0308]: mismatched types\n@@ -159,7 +159,7 @@ LL |     let _: usize = X::baz;\n            found fn item `fn(usize, usize) -> usize {<X as T>::baz}`\n help: use parentheses to call this function\n    |\n-LL |     let _: usize = X::baz(x, y);\n+LL |     let _: usize = X::baz(_, _);\n    |                          ++++++\n \n error[E0308]: mismatched types\n@@ -177,7 +177,7 @@ LL |     let _: usize = X::bat;\n            found fn item `fn(usize) -> usize {<X as T>::bat}`\n help: use parentheses to call this function\n    |\n-LL |     let _: usize = X::bat(x);\n+LL |     let _: usize = X::bat(_);\n    |                          +++\n \n error[E0308]: mismatched types\n@@ -195,7 +195,7 @@ LL |     let _: usize = X::bax;\n            found fn item `fn(usize) -> usize {<X as T>::bax}`\n help: use parentheses to call this function\n    |\n-LL |     let _: usize = X::bax(x);\n+LL |     let _: usize = X::bax(_);\n    |                          +++\n \n error[E0308]: mismatched types\n@@ -213,7 +213,7 @@ LL |     let _: usize = X::bach;\n            found fn item `fn(usize) -> usize {<X as T>::bach}`\n help: use parentheses to call this function\n    |\n-LL |     let _: usize = X::bach(x);\n+LL |     let _: usize = X::bach(_);\n    |                           +++\n \n error[E0308]: mismatched types"}, {"sha": "ab39ee74be4421cd4766cc0f6f593951360edb23", "filename": "src/test/ui/type-alias-impl-trait/issue-63279.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d15fed79b84c621b42699442ccf99563a6bc6881/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-63279.stderr?ref=d15fed79b84c621b42699442ccf99563a6bc6881", "patch": "@@ -15,6 +15,10 @@ LL |     || -> Closure { || () }\n    |\n    = note: expected unit type `()`\n                 found closure `[closure@$DIR/issue-63279.rs:8:21: 8:26]`\n+help: use parentheses to call this closure\n+   |\n+LL |     || -> Closure { (|| ())() }\n+   |                     +     +++\n \n error[E0308]: mismatched types\n   --> $DIR/issue-63279.rs:8:5"}]}