{"sha": "97d29ff2e17ab1b259d9acc9010c72d2b6870f73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZDI5ZmYyZTE3YWIxYjI1OWQ5YWNjOTAxMGM3MmQyYjY4NzBmNzM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-08-26T21:44:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-26T21:44:28Z"}, "message": "Merge pull request #2942 from crw5996/fix-ellipsis-bug\n\nFix Issue with ellipsis matching in pattern.rs", "tree": {"sha": "8077439a661e67c72dfedbe43b4a5b7822e470c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8077439a661e67c72dfedbe43b4a5b7822e470c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97d29ff2e17ab1b259d9acc9010c72d2b6870f73", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbgx88CRBK7hj4Ov3rIwAAdHIIAK85WQZKwwH9qQSAr+YY9FFb\ngkDLMCXQQxvQutRLFiigi2TcOfzLOYQFNYKDAMC8QhEl/2AHnomSop8sQibNvC1p\nkpkTpFlsxvM1TTG7eIrd5pymijOIUKubcVCSDptE4rCxHS0+Zpy6KvVSwOqFxmm1\na9tVTe2XTbuZrJBglfy2cwjt+qLm+Es5mqq6fynGFhrSvvFjvoGaJiA6BTAY6H/v\nKvMI6HmzWY3iCgjVfrylWz4fxOLcSoZ/vzhUbl2I83DBrCuA4FPwBwjgozcWae4Q\nHV+ydPeMVwm8av2/BI7XxspwjbP1yB2WHoE9jLIztFpnOINacgKnJFvPWaR7VTU=\n=e6M1\n-----END PGP SIGNATURE-----\n", "payload": "tree 8077439a661e67c72dfedbe43b4a5b7822e470c9\nparent d456161b678d20257587e82c8ddc6dbb41739d18\nparent 4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8\nauthor Nick Cameron <nrc@ncameron.org> 1535319868 +1200\ncommitter GitHub <noreply@github.com> 1535319868 +1200\n\nMerge pull request #2942 from crw5996/fix-ellipsis-bug\n\nFix Issue with ellipsis matching in pattern.rs"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97d29ff2e17ab1b259d9acc9010c72d2b6870f73", "html_url": "https://github.com/rust-lang/rust/commit/97d29ff2e17ab1b259d9acc9010c72d2b6870f73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97d29ff2e17ab1b259d9acc9010c72d2b6870f73/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d456161b678d20257587e82c8ddc6dbb41739d18", "url": "https://api.github.com/repos/rust-lang/rust/commits/d456161b678d20257587e82c8ddc6dbb41739d18", "html_url": "https://github.com/rust-lang/rust/commit/d456161b678d20257587e82c8ddc6dbb41739d18"}, {"sha": "4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8", "html_url": "https://github.com/rust-lang/rust/commit/4e748a269ec1e07a25c2b8dd74dee8bdc5db54d8"}], "stats": {"total": 42, "additions": 41, "deletions": 1}, "files": [{"sha": "90725972bd5bf627fc3f24c8b143ad82858eae69", "filename": "src/patterns.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97d29ff2e17ab1b259d9acc9010c72d2b6870f73/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d29ff2e17ab1b259d9acc9010c72d2b6870f73/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=97d29ff2e17ab1b259d9acc9010c72d2b6870f73", "patch": "@@ -369,7 +369,9 @@ fn rewrite_tuple_pat(\n         shape,\n         span,\n         context.config.max_width(),\n-        if add_comma {\n+        if dotdot_pos.is_some() {\n+            Some(SeparatorTactic::Never)\n+        } else if add_comma {\n             Some(SeparatorTactic::Always)\n         } else {\n             None"}, {"sha": "55b5c56e698447539663fb05e4a4e2928d948d66", "filename": "tests/source/issue-2936.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97d29ff2e17ab1b259d9acc9010c72d2b6870f73/tests%2Fsource%2Fissue-2936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d29ff2e17ab1b259d9acc9010c72d2b6870f73/tests%2Fsource%2Fissue-2936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2936.rs?ref=97d29ff2e17ab1b259d9acc9010c72d2b6870f73", "patch": "@@ -0,0 +1,19 @@\n+struct AStruct {\n+    A: u32,\n+    B: u32,\n+    C: u32,\n+}\n+\n+impl Something for AStruct {\n+    fn a_func() {\n+        match a_val {\n+            ContextualParseError::InvalidMediaRule(ref err) => {\n+                let err: &CStr = match err.kind {\n+                    ParseErrorKind::Custom(StyleParseErrorKind::MediaQueryExpectedFeatureName(..)) => {\n+                        cstr!(\"PEMQExpectedFeatureName\")\n+                    },\n+                };\n+            }\n+        };\n+    }\n+}"}, {"sha": "876050a20f45f5e8a86407c88c6119ce4d6c7bc8", "filename": "tests/target/issue-2936.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/97d29ff2e17ab1b259d9acc9010c72d2b6870f73/tests%2Ftarget%2Fissue-2936.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97d29ff2e17ab1b259d9acc9010c72d2b6870f73/tests%2Ftarget%2Fissue-2936.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2936.rs?ref=97d29ff2e17ab1b259d9acc9010c72d2b6870f73", "patch": "@@ -0,0 +1,19 @@\n+struct AStruct {\n+    A: u32,\n+    B: u32,\n+    C: u32,\n+}\n+\n+impl Something for AStruct {\n+    fn a_func() {\n+        match a_val {\n+            ContextualParseError::InvalidMediaRule(ref err) => {\n+                let err: &CStr = match err.kind {\n+                    ParseErrorKind::Custom(StyleParseErrorKind::MediaQueryExpectedFeatureName(\n+                        ..\n+                    )) => cstr!(\"PEMQExpectedFeatureName\"),\n+                };\n+            }\n+        };\n+    }\n+}"}]}