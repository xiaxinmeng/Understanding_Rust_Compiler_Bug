{"sha": "cb501a6fe6cdb1928611b7193dec96f3d7bd2293", "node_id": "C_kwDOAAsO6NoAKGNiNTAxYTZmZTZjZGIxOTI4NjExYjcxOTNkZWM5NmYzZDdiZDIyOTM", "commit": {"author": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2021-10-02T21:25:53Z"}, "committer": {"name": "Nicholas-Baron", "email": "nicholas.baron.ten@gmail.com", "date": "2021-10-02T21:25:53Z"}, "message": "Move items related to computing diffs to a separate file", "tree": {"sha": "29a68429ef3fc78c71c4bfe09b71c3820b115c3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29a68429ef3fc78c71c4bfe09b71c3820b115c3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb501a6fe6cdb1928611b7193dec96f3d7bd2293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb501a6fe6cdb1928611b7193dec96f3d7bd2293", "html_url": "https://github.com/rust-lang/rust/commit/cb501a6fe6cdb1928611b7193dec96f3d7bd2293", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb501a6fe6cdb1928611b7193dec96f3d7bd2293/comments", "author": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nicholas-Baron", "id": 35079404, "node_id": "MDQ6VXNlcjM1MDc5NDA0", "avatar_url": "https://avatars.githubusercontent.com/u/35079404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nicholas-Baron", "html_url": "https://github.com/Nicholas-Baron", "followers_url": "https://api.github.com/users/Nicholas-Baron/followers", "following_url": "https://api.github.com/users/Nicholas-Baron/following{/other_user}", "gists_url": "https://api.github.com/users/Nicholas-Baron/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nicholas-Baron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nicholas-Baron/subscriptions", "organizations_url": "https://api.github.com/users/Nicholas-Baron/orgs", "repos_url": "https://api.github.com/users/Nicholas-Baron/repos", "events_url": "https://api.github.com/users/Nicholas-Baron/events{/privacy}", "received_events_url": "https://api.github.com/users/Nicholas-Baron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "url": "https://api.github.com/repos/rust-lang/rust/commits/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40", "html_url": "https://github.com/rust-lang/rust/commit/d14731cb3ced8318d7fc83cbe838f0e7f2fb3b40"}], "stats": {"total": 215, "additions": 109, "deletions": 106}, "files": [{"sha": "9ca0c69dbd3e38433021002fa13c89559087c18a", "filename": "src/tools/compiletest/src/compute_diff.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/cb501a6fe6cdb1928611b7193dec96f3d7bd2293/src%2Ftools%2Fcompiletest%2Fsrc%2Fcompute_diff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb501a6fe6cdb1928611b7193dec96f3d7bd2293/src%2Ftools%2Fcompiletest%2Fsrc%2Fcompute_diff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcompute_diff.rs?ref=cb501a6fe6cdb1928611b7193dec96f3d7bd2293", "patch": "@@ -0,0 +1,106 @@\n+use std::collections::VecDeque;\n+\n+#[derive(Debug, PartialEq)]\n+pub enum DiffLine {\n+    Context(String),\n+    Expected(String),\n+    Resulting(String),\n+}\n+\n+#[derive(Debug, PartialEq)]\n+pub struct Mismatch {\n+    pub line_number: u32,\n+    pub lines: Vec<DiffLine>,\n+}\n+\n+impl Mismatch {\n+    fn new(line_number: u32) -> Mismatch {\n+        Mismatch { line_number, lines: Vec::new() }\n+    }\n+}\n+\n+// Produces a diff between the expected output and actual output.\n+pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n+    let mut line_number = 1;\n+    let mut context_queue: VecDeque<&str> = VecDeque::with_capacity(context_size);\n+    let mut lines_since_mismatch = context_size + 1;\n+    let mut results = Vec::new();\n+    let mut mismatch = Mismatch::new(0);\n+\n+    for result in diff::lines(expected, actual) {\n+        match result {\n+            diff::Result::Left(str) => {\n+                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n+                    results.push(mismatch);\n+                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                }\n+\n+                while let Some(line) = context_queue.pop_front() {\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n+                }\n+\n+                mismatch.lines.push(DiffLine::Expected(str.to_owned()));\n+                line_number += 1;\n+                lines_since_mismatch = 0;\n+            }\n+            diff::Result::Right(str) => {\n+                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n+                    results.push(mismatch);\n+                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n+                }\n+\n+                while let Some(line) = context_queue.pop_front() {\n+                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n+                }\n+\n+                mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n+                lines_since_mismatch = 0;\n+            }\n+            diff::Result::Both(str, _) => {\n+                if context_queue.len() >= context_size {\n+                    let _ = context_queue.pop_front();\n+                }\n+\n+                if lines_since_mismatch < context_size {\n+                    mismatch.lines.push(DiffLine::Context(str.to_owned()));\n+                } else if context_size > 0 {\n+                    context_queue.push_back(str);\n+                }\n+\n+                line_number += 1;\n+                lines_since_mismatch += 1;\n+            }\n+        }\n+    }\n+\n+    results.push(mismatch);\n+    results.remove(0);\n+\n+    results\n+}\n+\n+pub(crate) fn write_diff(expected: &str, actual: &str, context_size: usize) -> String {\n+    use std::fmt::Write;\n+    let mut output = String::new();\n+    let diff_results = make_diff(expected, actual, context_size);\n+    for result in diff_results {\n+        let mut line_number = result.line_number;\n+        for line in result.lines {\n+            match line {\n+                DiffLine::Expected(e) => {\n+                    writeln!(output, \"-\\t{}\", e).unwrap();\n+                    line_number += 1;\n+                }\n+                DiffLine::Context(c) => {\n+                    writeln!(output, \"{}\\t{}\", line_number, c).unwrap();\n+                    line_number += 1;\n+                }\n+                DiffLine::Resulting(r) => {\n+                    writeln!(output, \"+\\t{}\", r).unwrap();\n+                }\n+            }\n+        }\n+        writeln!(output).unwrap();\n+    }\n+    output\n+}"}, {"sha": "fbf3249db94d10d18c74ba3d87e9e91362616c31", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cb501a6fe6cdb1928611b7193dec96f3d7bd2293/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb501a6fe6cdb1928611b7193dec96f3d7bd2293/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=cb501a6fe6cdb1928611b7193dec96f3d7bd2293", "patch": "@@ -28,6 +28,7 @@ use self::header::{make_test_description, EarlyProps};\n mod tests;\n \n pub mod common;\n+pub mod compute_diff;\n pub mod errors;\n pub mod header;\n mod json;"}, {"sha": "ec6c745b7d202ae713723cea0cf077a37e7caa99", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 2, "deletions": 106, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/cb501a6fe6cdb1928611b7193dec96f3d7bd2293/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb501a6fe6cdb1928611b7193dec96f3d7bd2293/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=cb501a6fe6cdb1928611b7193dec96f3d7bd2293", "patch": "@@ -8,6 +8,7 @@ use crate::common::{CompareMode, FailMode, PassMode};\n use crate::common::{Config, TestPaths};\n use crate::common::{Pretty, RunPassValgrind};\n use crate::common::{UI_RUN_STDERR, UI_RUN_STDOUT};\n+use crate::compute_diff::write_diff;\n use crate::errors::{self, Error, ErrorKind};\n use crate::header::TestProps;\n use crate::json;\n@@ -18,7 +19,7 @@ use regex::{Captures, Regex};\n use rustfix::{apply_suggestions, get_suggestions_from_json, Filter};\n \n use std::collections::hash_map::DefaultHasher;\n-use std::collections::{HashMap, HashSet, VecDeque};\n+use std::collections::{HashMap, HashSet};\n use std::env;\n use std::ffi::{OsStr, OsString};\n use std::fs::{self, create_dir_all, File, OpenOptions};\n@@ -100,111 +101,6 @@ pub fn get_lib_name(lib: &str, dylib: bool) -> String {\n     }\n }\n \n-#[derive(Debug, PartialEq)]\n-pub enum DiffLine {\n-    Context(String),\n-    Expected(String),\n-    Resulting(String),\n-}\n-\n-#[derive(Debug, PartialEq)]\n-pub struct Mismatch {\n-    pub line_number: u32,\n-    pub lines: Vec<DiffLine>,\n-}\n-\n-impl Mismatch {\n-    fn new(line_number: u32) -> Mismatch {\n-        Mismatch { line_number, lines: Vec::new() }\n-    }\n-}\n-\n-// Produces a diff between the expected output and actual output.\n-pub fn make_diff(expected: &str, actual: &str, context_size: usize) -> Vec<Mismatch> {\n-    let mut line_number = 1;\n-    let mut context_queue: VecDeque<&str> = VecDeque::with_capacity(context_size);\n-    let mut lines_since_mismatch = context_size + 1;\n-    let mut results = Vec::new();\n-    let mut mismatch = Mismatch::new(0);\n-\n-    for result in diff::lines(expected, actual) {\n-        match result {\n-            diff::Result::Left(str) => {\n-                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n-                    results.push(mismatch);\n-                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n-                }\n-\n-                while let Some(line) = context_queue.pop_front() {\n-                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n-                }\n-\n-                mismatch.lines.push(DiffLine::Expected(str.to_owned()));\n-                line_number += 1;\n-                lines_since_mismatch = 0;\n-            }\n-            diff::Result::Right(str) => {\n-                if lines_since_mismatch >= context_size && lines_since_mismatch > 0 {\n-                    results.push(mismatch);\n-                    mismatch = Mismatch::new(line_number - context_queue.len() as u32);\n-                }\n-\n-                while let Some(line) = context_queue.pop_front() {\n-                    mismatch.lines.push(DiffLine::Context(line.to_owned()));\n-                }\n-\n-                mismatch.lines.push(DiffLine::Resulting(str.to_owned()));\n-                lines_since_mismatch = 0;\n-            }\n-            diff::Result::Both(str, _) => {\n-                if context_queue.len() >= context_size {\n-                    let _ = context_queue.pop_front();\n-                }\n-\n-                if lines_since_mismatch < context_size {\n-                    mismatch.lines.push(DiffLine::Context(str.to_owned()));\n-                } else if context_size > 0 {\n-                    context_queue.push_back(str);\n-                }\n-\n-                line_number += 1;\n-                lines_since_mismatch += 1;\n-            }\n-        }\n-    }\n-\n-    results.push(mismatch);\n-    results.remove(0);\n-\n-    results\n-}\n-\n-fn write_diff(expected: &str, actual: &str, context_size: usize) -> String {\n-    use std::fmt::Write;\n-    let mut output = String::new();\n-    let diff_results = make_diff(expected, actual, context_size);\n-    for result in diff_results {\n-        let mut line_number = result.line_number;\n-        for line in result.lines {\n-            match line {\n-                DiffLine::Expected(e) => {\n-                    writeln!(output, \"-\\t{}\", e).unwrap();\n-                    line_number += 1;\n-                }\n-                DiffLine::Context(c) => {\n-                    writeln!(output, \"{}\\t{}\", line_number, c).unwrap();\n-                    line_number += 1;\n-                }\n-                DiffLine::Resulting(r) => {\n-                    writeln!(output, \"+\\t{}\", r).unwrap();\n-                }\n-            }\n-        }\n-        writeln!(output).unwrap();\n-    }\n-    output\n-}\n-\n pub fn run(config: Config, testpaths: &TestPaths, revision: Option<&str>) {\n     match &*config.target {\n         \"arm-linux-androideabi\""}]}