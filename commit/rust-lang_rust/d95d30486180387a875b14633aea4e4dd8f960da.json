{"sha": "d95d30486180387a875b14633aea4e4dd8f960da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NWQzMDQ4NjE4MDM4N2E4NzViMTQ2MzNhZWE0ZTRkZDhmOTYwZGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-26T00:17:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-26T00:17:22Z"}, "message": "Auto merge of #78429 - casey:doctest-attribute-splitting, r=jyn514\n\n[librustdoc] Only split lang string on `,`, ` `, and `\\t`\n\nSplit markdown lang strings into tokens on `,`.\n\nThe previous behavior was to split lang strings into tokens on any\ncharacter that wasn't a `_`, `_`, or alphanumeric.\n\nThis is a potentially breaking change, so please scrutinize! See discussion in #78344.\n\nI noticed some test cases that made me wonder if there might have been some reason for the original behavior:\n\n```\nt(\"{.no_run .example}\", false, true, Ignore::None, true, false, false, false, v(), None);\nt(\"{.sh .should_panic}\", true, false, Ignore::None, false, false, false, false, v(), None);\nt(\"{.example .rust}\", false, false, Ignore::None, true, false, false, false, v(), None);\nt(\"{.test_harness .rust}\", false, false, Ignore::None, true, true, false, false, v(), None);\n```\n\nIt seemed pretty peculiar to specifically test lang strings in braces, with all the tokens prefixed by `.`.\n\nI did some digging, and it looks like the test cases were added way back in [this commit from 2014](https://github.com/rust-lang/rust/commit/3fef7a74ca9a) by `@skade.`\n\nIt looks like they were added just to make sure that the splitting was permissive, and aren't testing that those strings in particular are accepted.\n\nCloses https://github.com/rust-lang/rust/issues/78344.", "tree": {"sha": "00fe29d185cb558b445fe81eec66bbbf9f8820f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00fe29d185cb558b445fe81eec66bbbf9f8820f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d95d30486180387a875b14633aea4e4dd8f960da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d95d30486180387a875b14633aea4e4dd8f960da", "html_url": "https://github.com/rust-lang/rust/commit/d95d30486180387a875b14633aea4e4dd8f960da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d95d30486180387a875b14633aea4e4dd8f960da/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0a54cc4eb6111cac9ad75cc439f75b79698b4a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0a54cc4eb6111cac9ad75cc439f75b79698b4a7", "html_url": "https://github.com/rust-lang/rust/commit/c0a54cc4eb6111cac9ad75cc439f75b79698b4a7"}, {"sha": "66f4883308d999c8b405fdfd442562b8600a462d", "url": "https://api.github.com/repos/rust-lang/rust/commits/66f4883308d999c8b405fdfd442562b8600a462d", "html_url": "https://github.com/rust-lang/rust/commit/66f4883308d999c8b405fdfd442562b8600a462d"}], "stats": {"total": 104, "additions": 84, "deletions": 20}, "files": [{"sha": "760c5897698aa6137cf5767a1d19ea16f2f6c81c", "filename": "compiler/rustc_error_codes/src/error_codes/E0761.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d95d30486180387a875b14633aea4e4dd8f960da/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0761.md", "raw_url": "https://github.com/rust-lang/rust/raw/d95d30486180387a875b14633aea4e4dd8f960da/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0761.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0761.md?ref=d95d30486180387a875b14633aea4e4dd8f960da", "patch": "@@ -2,7 +2,7 @@ Multiple candidate files were found for an out-of-line module.\n \n Erroneous code example:\n \n-```ignore (multiple source files required for compile_fail)\n+```ignore (Multiple source files are required for compile_fail.)\n // file: ambiguous_module/mod.rs\n \n fn foo() {}"}, {"sha": "3f7808c20901b13418db34826d4b698269fecadb", "filename": "compiler/rustc_mir/src/dataflow/framework/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d95d30486180387a875b14633aea4e4dd8f960da/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d30486180387a875b14633aea4e4dd8f960da/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fframework%2Fmod.rs?ref=d95d30486180387a875b14633aea4e4dd8f960da", "patch": "@@ -10,7 +10,7 @@\n //! fixpoint solution to your dataflow problem, or implement the `ResultsVisitor` interface and use\n //! `visit_results`. The following example uses the `ResultsCursor` approach.\n //!\n-//! ```ignore(cross-crate-imports)\n+//! ```ignore (cross-crate-imports)\n //! use rustc_mir::dataflow::Analysis; // Makes `into_engine` available.\n //!\n //! fn do_my_analysis(tcx: TyCtxt<'tcx>, body: &mir::Body<'tcx>) {\n@@ -211,7 +211,7 @@ pub trait Analysis<'tcx>: AnalysisDomain<'tcx> {\n     /// default impl and the one for all `A: GenKillAnalysis` will do the right thing.\n     /// Its purpose is to enable method chaining like so:\n     ///\n-    /// ```ignore(cross-crate-imports)\n+    /// ```ignore (cross-crate-imports)\n     /// let results = MyAnalysis::new(tcx, body)\n     ///     .into_engine(tcx, body, def_id)\n     ///     .iterate_to_fixpoint()"}, {"sha": "bcd2b207c4f6f0c2b4bd335e59c324cb5378492f", "filename": "library/core/src/option.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d95d30486180387a875b14633aea4e4dd8f960da/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d30486180387a875b14633aea4e4dd8f960da/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=d95d30486180387a875b14633aea4e4dd8f960da", "patch": "@@ -336,7 +336,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.expect(\"fruits are healthy\"), \"value\");\n     /// ```\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// let x: Option<&str> = None;\n     /// x.expect(\"fruits are healthy\"); // panics with `fruits are healthy`\n     /// ```\n@@ -372,7 +372,7 @@ impl<T> Option<T> {\n     /// assert_eq!(x.unwrap(), \"air\");\n     /// ```\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// let x: Option<&str> = None;\n     /// assert_eq!(x.unwrap(), \"air\"); // fails\n     /// ```\n@@ -1114,7 +1114,7 @@ impl<T: fmt::Debug> Option<T> {\n     /// }\n     /// ```\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// #![feature(option_expect_none)]\n     ///\n     /// use std::collections::HashMap;\n@@ -1156,7 +1156,7 @@ impl<T: fmt::Debug> Option<T> {\n     /// }\n     /// ```\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// #![feature(option_unwrap_none)]\n     ///\n     /// use std::collections::HashMap;"}, {"sha": "c7121c7ee595466343533820a2681e4ac2c39fa2", "filename": "library/core/src/result.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d95d30486180387a875b14633aea4e4dd8f960da/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d30486180387a875b14633aea4e4dd8f960da/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=d95d30486180387a875b14633aea4e4dd8f960da", "patch": "@@ -112,7 +112,7 @@\n //! assert success with [`expect`]. This will panic if the\n //! write fails, providing a marginally useful message indicating why:\n //!\n-//! ```{.no_run}\n+//! ```no_run\n //! use std::fs::File;\n //! use std::io::prelude::*;\n //!\n@@ -122,7 +122,7 @@\n //!\n //! You might also simply assert success:\n //!\n-//! ```{.no_run}\n+//! ```no_run\n //! # use std::fs::File;\n //! # use std::io::prelude::*;\n //! # let mut file = File::create(\"valuable_data.txt\").unwrap();\n@@ -984,7 +984,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     ///\n     /// Basic usage:\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// x.expect(\"Testing expect\"); // panics with `Testing expect: emergency failure`\n     /// ```\n@@ -1024,7 +1024,7 @@ impl<T, E: fmt::Debug> Result<T, E> {\n     /// assert_eq!(x.unwrap(), 2);\n     /// ```\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// let x: Result<u32, &str> = Err(\"emergency failure\");\n     /// x.unwrap(); // panics with `emergency failure`\n     /// ```\n@@ -1052,7 +1052,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     ///\n     /// Basic usage:\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// let x: Result<u32, &str> = Ok(10);\n     /// x.expect_err(\"Testing expect_err\"); // panics with `Testing expect_err: 10`\n     /// ```\n@@ -1075,7 +1075,7 @@ impl<T: fmt::Debug, E> Result<T, E> {\n     ///\n     /// # Examples\n     ///\n-    /// ```{.should_panic}\n+    /// ```should_panic\n     /// let x: Result<u32, &str> = Ok(2);\n     /// x.unwrap_err(); // panics with `2`\n     /// ```"}, {"sha": "9a054e29dd3b5929e6a4d6a4d8df882f74effb0d", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d95d30486180387a875b14633aea4e4dd8f960da/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d30486180387a875b14633aea4e4dd8f960da/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=d95d30486180387a875b14633aea4e4dd8f960da", "patch": "@@ -780,6 +780,31 @@ impl LangString {\n         Self::parse(string, allow_error_code_check, enable_per_target_ignores, None)\n     }\n \n+    fn tokens(string: &str) -> impl Iterator<Item = &str> {\n+        // Pandoc, which Rust once used for generating documentation,\n+        // expects lang strings to be surrounded by `{}` and for each token\n+        // to be proceeded by a `.`. Since some of these lang strings are still\n+        // loose in the wild, we strip a pair of surrounding `{}` from the lang\n+        // string and a leading `.` from each token.\n+\n+        let string = string.trim();\n+\n+        let first = string.chars().next();\n+        let last = string.chars().last();\n+\n+        let string = if first == Some('{') && last == Some('}') {\n+            &string[1..string.len() - 1]\n+        } else {\n+            string\n+        };\n+\n+        string\n+            .split(|c| c == ',' || c == ' ' || c == '\\t')\n+            .map(str::trim)\n+            .map(|token| if token.chars().next() == Some('.') { &token[1..] } else { token })\n+            .filter(|token| !token.is_empty())\n+    }\n+\n     fn parse(\n         string: &str,\n         allow_error_code_check: ErrorCodes,\n@@ -793,11 +818,11 @@ impl LangString {\n         let mut ignores = vec![];\n \n         data.original = string.to_owned();\n-        let tokens = string.split(|c: char| !(c == '_' || c == '-' || c.is_alphanumeric()));\n+\n+        let tokens = Self::tokens(string).collect::<Vec<&str>>();\n \n         for token in tokens {\n-            match token.trim() {\n-                \"\" => {}\n+            match token {\n                 \"should_panic\" => {\n                     data.should_panic = true;\n                     seen_rust_tags = !seen_other_tags;\n@@ -894,6 +919,7 @@ impl LangString {\n                 _ => seen_other_tags = true,\n             }\n         }\n+\n         // ignore-foo overrides ignore\n         if !ignores.is_empty() {\n             data.ignore = Ignore::Some(ignores);"}, {"sha": "59ca841715c59c07302244de741821a11ee093e9", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 42, "deletions": 4, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d95d30486180387a875b14633aea4e4dd8f960da/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d95d30486180387a875b14633aea4e4dd8f960da/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=d95d30486180387a875b14633aea4e4dd8f960da", "patch": "@@ -58,6 +58,9 @@ fn test_lang_string_parse() {\n \n     t(Default::default());\n     t(LangString { original: \"rust\".into(), ..Default::default() });\n+    t(LangString { original: \".rust\".into(), ..Default::default() });\n+    t(LangString { original: \"{rust}\".into(), ..Default::default() });\n+    t(LangString { original: \"{.rust}\".into(), ..Default::default() });\n     t(LangString { original: \"sh\".into(), rust: false, ..Default::default() });\n     t(LangString { original: \"ignore\".into(), ignore: Ignore::All, ..Default::default() });\n     t(LangString {\n@@ -75,16 +78,16 @@ fn test_lang_string_parse() {\n         ..Default::default()\n     });\n     t(LangString { original: \"allow_fail\".into(), allow_fail: true, ..Default::default() });\n-    t(LangString { original: \"{.no_run .example}\".into(), no_run: true, ..Default::default() });\n+    t(LangString { original: \"no_run,example\".into(), no_run: true, ..Default::default() });\n     t(LangString {\n-        original: \"{.sh .should_panic}\".into(),\n+        original: \"sh,should_panic\".into(),\n         should_panic: true,\n         rust: false,\n         ..Default::default()\n     });\n-    t(LangString { original: \"{.example .rust}\".into(), ..Default::default() });\n+    t(LangString { original: \"example,rust\".into(), ..Default::default() });\n     t(LangString {\n-        original: \"{.test_harness .rust}\".into(),\n+        original: \"test_harness,.rust\".into(),\n         test_harness: true,\n         ..Default::default()\n     });\n@@ -100,6 +103,18 @@ fn test_lang_string_parse() {\n         rust: false,\n         ..Default::default()\n     });\n+    t(LangString {\n+        original: \"text,no_run, \".into(),\n+        no_run: true,\n+        rust: false,\n+        ..Default::default()\n+    });\n+    t(LangString {\n+        original: \"text,no_run,\".into(),\n+        no_run: true,\n+        rust: false,\n+        ..Default::default()\n+    });\n     t(LangString {\n         original: \"edition2015\".into(),\n         edition: Some(Edition::Edition2015),\n@@ -112,6 +127,29 @@ fn test_lang_string_parse() {\n     });\n }\n \n+#[test]\n+fn test_lang_string_tokenizer() {\n+    fn case(lang_string: &str, want: &[&str]) {\n+        let have = LangString::tokens(lang_string).collect::<Vec<&str>>();\n+        assert_eq!(have, want, \"Unexpected lang string split for `{}`\", lang_string);\n+    }\n+\n+    case(\"\", &[]);\n+    case(\"foo\", &[\"foo\"]);\n+    case(\"foo,bar\", &[\"foo\", \"bar\"]);\n+    case(\".foo,.bar\", &[\"foo\", \"bar\"]);\n+    case(\"{.foo,.bar}\", &[\"foo\", \"bar\"]);\n+    case(\"  {.foo,.bar}  \", &[\"foo\", \"bar\"]);\n+    case(\"foo bar\", &[\"foo\", \"bar\"]);\n+    case(\"foo\\tbar\", &[\"foo\", \"bar\"]);\n+    case(\"foo\\t, bar\", &[\"foo\", \"bar\"]);\n+    case(\" foo , bar \", &[\"foo\", \"bar\"]);\n+    case(\",,foo,,bar,,\", &[\"foo\", \"bar\"]);\n+    case(\"foo=bar\", &[\"foo=bar\"]);\n+    case(\"a-b-c\", &[\"a-b-c\"]);\n+    case(\"a_b_c\", &[\"a_b_c\"]);\n+}\n+\n #[test]\n fn test_header() {\n     fn t(input: &str, expect: &str) {"}]}