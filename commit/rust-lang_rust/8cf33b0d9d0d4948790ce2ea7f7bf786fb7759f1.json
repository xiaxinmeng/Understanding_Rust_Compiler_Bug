{"sha": "8cf33b0d9d0d4948790ce2ea7f7bf786fb7759f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjZjMzYjBkOWQwZDQ5NDg3OTBjZTJlYTdmN2JmNzg2ZmI3NzU5ZjE=", "commit": {"author": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2020-02-04T23:09:11Z"}, "committer": {"name": "Tim Vermeulen", "email": "tvermeulen@me.com", "date": "2020-03-16T23:03:43Z"}, "message": "Add tests", "tree": {"sha": "1ee4ccaef55685be968c7c73337a934af5116eff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ee4ccaef55685be968c7c73337a934af5116eff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cf33b0d9d0d4948790ce2ea7f7bf786fb7759f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cf33b0d9d0d4948790ce2ea7f7bf786fb7759f1", "html_url": "https://github.com/rust-lang/rust/commit/8cf33b0d9d0d4948790ce2ea7f7bf786fb7759f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cf33b0d9d0d4948790ce2ea7f7bf786fb7759f1/comments", "author": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "timvermeulen", "id": 2904179, "node_id": "MDQ6VXNlcjI5MDQxNzk=", "avatar_url": "https://avatars.githubusercontent.com/u/2904179?v=4", "gravatar_id": "", "url": "https://api.github.com/users/timvermeulen", "html_url": "https://github.com/timvermeulen", "followers_url": "https://api.github.com/users/timvermeulen/followers", "following_url": "https://api.github.com/users/timvermeulen/following{/other_user}", "gists_url": "https://api.github.com/users/timvermeulen/gists{/gist_id}", "starred_url": "https://api.github.com/users/timvermeulen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/timvermeulen/subscriptions", "organizations_url": "https://api.github.com/users/timvermeulen/orgs", "repos_url": "https://api.github.com/users/timvermeulen/repos", "events_url": "https://api.github.com/users/timvermeulen/events{/privacy}", "received_events_url": "https://api.github.com/users/timvermeulen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cff1182bcdf0f35cdb65d4560270b6afed856064", "url": "https://api.github.com/repos/rust-lang/rust/commits/cff1182bcdf0f35cdb65d4560270b6afed856064", "html_url": "https://github.com/rust-lang/rust/commit/cff1182bcdf0f35cdb65d4560270b6afed856064"}], "stats": {"total": 72, "additions": 72, "deletions": 0}, "files": [{"sha": "98e3eeb982bde665ec826959a60db1ac6580e064", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8cf33b0d9d0d4948790ce2ea7f7bf786fb7759f1/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cf33b0d9d0d4948790ce2ea7f7bf786fb7759f1/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=8cf33b0d9d0d4948790ce2ea7f7bf786fb7759f1", "patch": "@@ -1,3 +1,5 @@\n+// ignore-tidy-filelength\n+\n use core::cell::Cell;\n use core::convert::TryFrom;\n use core::iter::*;\n@@ -2940,3 +2942,73 @@ fn test_partition() {\n     check(xs, |&x| x < 3, 3); // small\n     check(xs, |&x| x > 6, 3); // large\n }\n+\n+/// An iterator that panics whenever `next` or next_back` is called\n+/// after `None` has already been returned. This does not violate\n+/// `Iterator`'s contract. Used to test that iterator adaptors don't\n+/// poll their inner iterators after exhausting them.\n+struct NonFused<I> {\n+    iter: I,\n+    done: bool,\n+}\n+\n+impl<I> NonFused<I> {\n+    fn new(iter: I) -> Self {\n+        Self { iter, done: false }\n+    }\n+}\n+\n+impl<I> Iterator for NonFused<I>\n+where\n+    I: Iterator,\n+{\n+    type Item = I::Item;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        assert!(!self.done, \"this iterator has already returned None\");\n+        self.iter.next().or_else(|| {\n+            self.done = true;\n+            None\n+        })\n+    }\n+}\n+\n+impl<I> DoubleEndedIterator for NonFused<I>\n+where\n+    I: DoubleEndedIterator,\n+{\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        assert!(!self.done, \"this iterator has already returned None\");\n+        self.iter.next_back().or_else(|| {\n+            self.done = true;\n+            None\n+        })\n+    }\n+}\n+\n+#[test]\n+fn test_peekable_non_fused() {\n+    let mut iter = NonFused::new(empty::<i32>()).peekable();\n+\n+    assert_eq!(iter.peek(), None);\n+    assert_eq!(iter.next_back(), None);\n+}\n+\n+#[test]\n+fn test_flatten_non_fused_outer() {\n+    let mut iter = NonFused::new(once(0..2)).flatten();\n+\n+    assert_eq!(iter.next_back(), Some(1));\n+    assert_eq!(iter.next(), Some(0));\n+    assert_eq!(iter.next(), None);\n+}\n+\n+#[test]\n+fn test_flatten_non_fused_inner() {\n+    let mut iter = once(0..1).chain(once(1..3)).flat_map(NonFused::new);\n+\n+    assert_eq!(iter.next_back(), Some(2));\n+    assert_eq!(iter.next(), Some(0));\n+    assert_eq!(iter.next(), Some(1));\n+    assert_eq!(iter.next(), None);\n+}"}]}