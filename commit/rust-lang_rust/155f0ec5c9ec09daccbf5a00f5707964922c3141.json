{"sha": "155f0ec5c9ec09daccbf5a00f5707964922c3141", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NWYwZWM1YzllYzA5ZGFjY2JmNWEwMGY1NzA3OTY0OTIyYzMxNDE=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2016-07-06T23:13:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-07-06T23:13:05Z"}, "message": "Rollup merge of #33250 - durka:patch-19, r=steveklabnik\n\nupdate documentation of tuple/unit structs\n\nI made the \"tuple structs are useless\" editorializing a bit weaker and moved it to the end. Feel free to overrule me on that.\n\nI also added an example of how to unpack a tuple struct with dot notation, because it came up on IRC.\n\n`braced_empty_structs` is stable now, so I updated the example for unit-like structs to use that syntax. Should we show both ways?\n\ncc @ubsan\nr? @steveklabnik or @GuillaumeGomez", "tree": {"sha": "0ea9661f2b78d46b3a3aca81c69122c09b69de3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ea9661f2b78d46b3a3aca81c69122c09b69de3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/155f0ec5c9ec09daccbf5a00f5707964922c3141", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/155f0ec5c9ec09daccbf5a00f5707964922c3141", "html_url": "https://github.com/rust-lang/rust/commit/155f0ec5c9ec09daccbf5a00f5707964922c3141", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/155f0ec5c9ec09daccbf5a00f5707964922c3141/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34c9cddc89573131d9691309cb2425d7db1ddc6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/34c9cddc89573131d9691309cb2425d7db1ddc6e", "html_url": "https://github.com/rust-lang/rust/commit/34c9cddc89573131d9691309cb2425d7db1ddc6e"}, {"sha": "74e96299a22ef1629d7ea8268815fc2b82c7e194", "url": "https://api.github.com/repos/rust-lang/rust/commits/74e96299a22ef1629d7ea8268815fc2b82c7e194", "html_url": "https://github.com/rust-lang/rust/commit/74e96299a22ef1629d7ea8268815fc2b82c7e194"}], "stats": {"total": 73, "additions": 50, "deletions": 23}, "files": [{"sha": "328db25b819d89d236af7e8c2d8ea82ce63a5e1b", "filename": "src/doc/book/structs.md", "status": "modified", "additions": 50, "deletions": 23, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/155f0ec5c9ec09daccbf5a00f5707964922c3141/src%2Fdoc%2Fbook%2Fstructs.md", "raw_url": "https://github.com/rust-lang/rust/raw/155f0ec5c9ec09daccbf5a00f5707964922c3141/src%2Fdoc%2Fbook%2Fstructs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fstructs.md?ref=155f0ec5c9ec09daccbf5a00f5707964922c3141", "patch": "@@ -163,11 +163,51 @@ struct Point(i32, i32, i32);\n let black = Color(0, 0, 0);\n let origin = Point(0, 0, 0);\n ```\n-Here, `black` and `origin` are not equal, even though they contain the same\n-values.\n \n-It is almost always better to use a `struct` than a tuple struct. We\n-would write `Color` and `Point` like this instead:\n+Here, `black` and `origin` are not the same type, even though they contain the\n+same values.\n+\n+The members of a tuple struct may be accessed by dot notation or destructuring\n+`let`, just like regular tuples:\n+\n+```rust\n+# struct Color(i32, i32, i32);\n+# struct Point(i32, i32, i32);\n+# let black = Color(0, 0, 0);\n+# let origin = Point(0, 0, 0);\n+let black_r = black.0;\n+let Point(_, origin_y, origin_z) = origin;\n+```\n+\n+Patterns like `Point(_, origin_y, origin_z)` are also used in\n+[match expressions][match].\n+\n+One case when a tuple struct is very useful is when it has only one element.\n+We call this the \u2018newtype\u2019 pattern, because it allows you to create a new type\n+that is distinct from its contained value and also expresses its own semantic\n+meaning:\n+\n+```rust\n+struct Inches(i32);\n+\n+let length = Inches(10);\n+\n+let Inches(integer_length) = length;\n+println!(\"length is {} inches\", integer_length);\n+```\n+\n+As above, you can extract the inner integer type through a destructuring `let`.\n+In this case, the `let Inches(integer_length)` assigns `10` to `integer_length`.\n+We could have used dot notation to do the same thing:\n+\n+```rust\n+# struct Inches(i32);\n+# let length = Inches(10);\n+let integer_length = length.0;\n+```\n+\n+It's always possible to use a `struct` instead of a tuple struct, and can be\n+clearer. We could write `Color` and `Point` like this instead:\n \n ```rust\n struct Color {\n@@ -187,32 +227,19 @@ Good names are important, and while values in a tuple struct can be\n referenced with dot notation as well, a `struct` gives us actual names,\n rather than positions.\n \n-There _is_ one case when a tuple struct is very useful, though, and that is when\n-it has only one element. We call this the \u2018newtype\u2019 pattern, because\n-it allows you to create a new type that is distinct from its contained value\n-and also expresses its own semantic meaning:\n-\n-```rust\n-struct Inches(i32);\n-\n-let length = Inches(10);\n-\n-let Inches(integer_length) = length;\n-println!(\"length is {} inches\", integer_length);\n-```\n-\n-As you can see here, you can extract the inner integer type through a\n-destructuring `let`, as with regular tuples. In this case, the\n-`let Inches(integer_length)` assigns `10` to `integer_length`.\n+[match]: match.html\n \n # Unit-like structs\n \n You can define a `struct` with no members at all:\n \n ```rust\n-struct Electron;\n+struct Electron {} // use empty braces...\n+struct Proton;     // ...or just a semicolon\n \n-let x = Electron;\n+// whether you declared the struct with braces or not, do the same when creating one\n+let x = Electron {};\n+let y = Proton;\n ```\n \n Such a `struct` is called \u2018unit-like\u2019 because it resembles the empty"}]}