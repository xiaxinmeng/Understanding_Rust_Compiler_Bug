{"sha": "7ca3bea5bfd15dd960e6346eebf72422b0020d6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjYTNiZWE1YmZkMTVkZDk2MGU2MzQ2ZWViZjcyNDIyYjAwMjBkNmI=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-01-15T09:45:12Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-01-15T09:45:12Z"}, "message": "libstd: Added more #[inline] annotations and replaced uses of `libc::abort` with the intrinsic.", "tree": {"sha": "b4770a25c00d27eb078b82593ee22768dd487ce9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4770a25c00d27eb078b82593ee22768dd487ce9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ca3bea5bfd15dd960e6346eebf72422b0020d6b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ca3bea5bfd15dd960e6346eebf72422b0020d6b", "html_url": "https://github.com/rust-lang/rust/commit/7ca3bea5bfd15dd960e6346eebf72422b0020d6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e063e96ec90544c9ffa811396d14541761656d07", "url": "https://api.github.com/repos/rust-lang/rust/commits/e063e96ec90544c9ffa811396d14541761656d07", "html_url": "https://github.com/rust-lang/rust/commit/e063e96ec90544c9ffa811396d14541761656d07"}], "stats": {"total": 47, "additions": 36, "deletions": 11}, "files": [{"sha": "12def918bc9e248ef4acaee0a667a9e14c6cc4f0", "filename": "src/libgreen/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibgreen%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibgreen%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fmacros.rs?ref=7ca3bea5bfd15dd960e6346eebf72422b0020d6b", "patch": "@@ -13,7 +13,6 @@\n #[macro_escape];\n \n use std::fmt;\n-use std::libc;\n \n // Indicates whether we should perform expensive sanity checks, including rtassert!\n // XXX: Once the runtime matures remove the `true` below to turn off rtassert, etc.\n@@ -124,6 +123,7 @@ memory and partly incapable of presentation to others.\",\n     abort();\n \n     fn abort() -> ! {\n-        unsafe { libc::abort() }\n+        use std::unstable::intrinsics;\n+        unsafe { intrinsics::abort() }\n     }\n }"}, {"sha": "18cb470db4da24fb08c7de265546c92cca860a89", "filename": "src/libstd/at_vec.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibstd%2Fat_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibstd%2Fat_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fat_vec.rs?ref=7ca3bea5bfd15dd960e6346eebf72422b0020d6b", "patch": "@@ -68,6 +68,7 @@ pub fn append<T:Clone>(lhs: @[T], rhs: &[T]) -> @[T] {\n \n \n /// Apply a function to each element of a vector and return the results\n+#[inline]\n pub fn map<T, U>(v: &[T], f: |x: &T| -> U) -> @[U] {\n     build(Some(v.len()), |push| {\n         for elem in v.iter() {\n@@ -82,6 +83,7 @@ pub fn map<T, U>(v: &[T], f: |x: &T| -> U) -> @[U] {\n  * Creates an immutable vector of size `n_elts` and initializes the elements\n  * to the value returned by the function `op`.\n  */\n+#[inline]\n pub fn from_fn<T>(n_elts: uint, op: |uint| -> T) -> @[T] {\n     build(Some(n_elts), |push| {\n         let mut i: uint = 0u;\n@@ -95,6 +97,7 @@ pub fn from_fn<T>(n_elts: uint, op: |uint| -> T) -> @[T] {\n  * Creates an immutable vector of size `n_elts` and initializes the elements\n  * to the value `t`.\n  */\n+#[inline]\n pub fn from_elem<T:Clone>(n_elts: uint, t: T) -> @[T] {\n     build(Some(n_elts), |push| {\n         let mut i: uint = 0u;\n@@ -109,6 +112,7 @@ pub fn from_elem<T:Clone>(n_elts: uint, t: T) -> @[T] {\n  * Creates and initializes an immutable managed vector by moving all the\n  * elements from an owned vector.\n  */\n+#[inline]\n pub fn to_managed_move<T>(v: ~[T]) -> @[T] {\n     let mut av = @[];\n     unsafe {\n@@ -124,6 +128,7 @@ pub fn to_managed_move<T>(v: ~[T]) -> @[T] {\n  * Creates and initializes an immutable managed vector by copying all the\n  * elements of a slice.\n  */\n+#[inline]\n pub fn to_managed<T:Clone>(v: &[T]) -> @[T] {\n     from_fn(v.len(), |i| v[i].clone())\n }\n@@ -135,6 +140,7 @@ impl<T> Clone for @[T] {\n }\n \n impl<A> FromIterator<A> for @[A] {\n+    #[inline]\n     fn from_iterator<T: Iterator<A>>(iterator: &mut T) -> @[A] {\n         let (lower, _) = iterator.size_hint();\n         build(Some(lower), |push| {\n@@ -216,6 +222,7 @@ pub mod raw {\n         move_val_init(&mut(*p), initval);\n     }\n \n+    #[inline]\n     unsafe fn push_slow<T>(v: &mut @[T], initval: T) {\n         reserve_at_least(v, v.len() + 1u);\n         push_fast(v, initval);\n@@ -232,6 +239,7 @@ pub mod raw {\n      * * v - A vector\n      * * n - The number of elements to reserve space for\n      */\n+    #[inline]\n     pub unsafe fn reserve<T>(v: &mut @[T], n: uint) {\n         // Only make the (slow) call into the runtime if we have to\n         if capacity(*v) < n {\n@@ -243,6 +251,7 @@ pub mod raw {\n \n     // Implementation detail. Shouldn't be public\n     #[allow(missing_doc)]\n+    #[inline]\n     pub fn reserve_raw(ty: *TyDesc, ptr: *mut *mut Box<Vec<()>>, n: uint) {\n         // check for `uint` overflow\n         unsafe {\n@@ -257,6 +266,7 @@ pub mod raw {\n             }\n         }\n \n+        #[inline]\n         fn local_realloc(ptr: *(), size: uint) -> *() {\n             use rt::local::Local;\n             use rt::task::Task;\n@@ -281,6 +291,7 @@ pub mod raw {\n      * * v - A vector\n      * * n - The number of elements to reserve space for\n      */\n+    #[inline]\n     pub unsafe fn reserve_at_least<T>(v: &mut @[T], n: uint) {\n         reserve(v, uint::next_power_of_two(n));\n     }"}, {"sha": "9cf94e5a1b894ddbb348f709d16d510c0f1770fd", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=7ca3bea5bfd15dd960e6346eebf72422b0020d6b", "patch": "@@ -159,7 +159,7 @@ pub use libc::funcs::c95::stdio::{fread, freopen, fseek, fsetpos, ftell};\n pub use libc::funcs::c95::stdio::{fwrite, perror, puts, remove, rewind};\n pub use libc::funcs::c95::stdio::{setbuf, setvbuf, tmpfile, ungetc};\n \n-pub use libc::funcs::c95::stdlib::{abort, abs, atof, atoi, calloc, exit};\n+pub use libc::funcs::c95::stdlib::{abs, atof, atoi, calloc, exit};\n pub use libc::funcs::c95::stdlib::{free, getenv, labs, malloc, rand};\n pub use libc::funcs::c95::stdlib::{realloc, srand, strtod, strtol};\n pub use libc::funcs::c95::stdlib::{strtoul, system};\n@@ -3226,7 +3226,6 @@ pub mod funcs {\n                 pub fn malloc(size: size_t) -> *c_void;\n                 pub fn realloc(p: *mut c_void, size: size_t) -> *mut c_void;\n                 pub fn free(p: *c_void);\n-                pub fn abort() -> !;\n                 pub fn exit(status: c_int) -> !;\n                 // Omitted: atexit.\n                 pub fn system(s: *c_char) -> c_int;"}, {"sha": "7ef7a256c1694256e1b80e3257f5bf7f80679868", "filename": "src/libstd/local_data.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibstd%2Flocal_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibstd%2Flocal_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flocal_data.rs?ref=7ca3bea5bfd15dd960e6346eebf72422b0020d6b", "patch": "@@ -280,7 +280,8 @@ fn get_with<T:'static,\n }\n \n fn abort() -> ! {\n-    unsafe { libc::abort() }\n+    use std::unstable::intrinsics;\n+    unsafe { intrinsics::abort() }\n }\n \n /// Inserts a value into task local storage. If the key is already present in"}, {"sha": "ce4072fb1ab924608272329504d2d5e108ebdc27", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=7ca3bea5bfd15dd960e6346eebf72422b0020d6b", "patch": "@@ -10,14 +10,10 @@\n \n use libc::{c_void, c_char, size_t, uintptr_t, free, malloc, realloc};\n use ptr::RawPtr;\n-use unstable::intrinsics::TyDesc;\n+use unstable::intrinsics::{TyDesc, abort};\n use unstable::raw;\n use mem::size_of;\n \n-extern {\n-    fn abort();\n-}\n-\n #[inline]\n pub fn get_box_size(body_size: uint, body_align: uint) -> uint {\n     let header_size = size_of::<raw::Box<()>>();\n@@ -34,6 +30,7 @@ fn align_to(size: uint, align: uint) -> uint {\n }\n \n /// A wrapper around libc::malloc, aborting on out-of-memory\n+#[inline]\n pub unsafe fn malloc_raw(size: uint) -> *c_void {\n     let p = malloc(size as size_t);\n     if p.is_null() {\n@@ -44,6 +41,7 @@ pub unsafe fn malloc_raw(size: uint) -> *c_void {\n }\n \n /// A wrapper around libc::realloc, aborting on out-of-memory\n+#[inline]\n pub unsafe fn realloc_raw(ptr: *mut c_void, size: uint) -> *mut c_void {\n     let p = realloc(ptr, size as size_t);\n     if p.is_null() {\n@@ -94,6 +92,7 @@ pub unsafe fn exchange_free_(ptr: *c_char) {\n     exchange_free(ptr)\n }\n \n+#[inline]\n pub unsafe fn exchange_free(ptr: *c_char) {\n     free(ptr as *c_void);\n }"}, {"sha": "90179612272c2aa6df660bbdf580f9e7e66f7b4c", "filename": "src/libstd/rt/local_heap.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibstd%2Frt%2Flocal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibstd%2Frt%2Flocal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_heap.rs?ref=7ca3bea5bfd15dd960e6346eebf72422b0020d6b", "patch": "@@ -48,6 +48,7 @@ pub struct LocalHeap {\n }\n \n impl LocalHeap {\n+    #[inline]\n     pub fn new() -> LocalHeap {\n         let region = MemoryRegion {\n             allocations: ~[],\n@@ -60,6 +61,7 @@ impl LocalHeap {\n         }\n     }\n \n+    #[inline]\n     pub fn alloc(&mut self, td: *TyDesc, size: uint) -> *mut Box {\n         let total_size = global_heap::get_box_size(size, unsafe { (*td).align });\n         let alloc = self.memory_region.malloc(total_size);\n@@ -80,6 +82,7 @@ impl LocalHeap {\n         return alloc;\n     }\n \n+    #[inline]\n     pub fn realloc(&mut self, ptr: *mut Box, size: uint) -> *mut Box {\n         // Make sure that we can't use `mybox` outside of this scope\n         let total_size = size + mem::size_of::<Box>();\n@@ -100,6 +103,7 @@ impl LocalHeap {\n         return new_box;\n     }\n \n+    #[inline]\n     pub fn free(&mut self, alloc: *mut Box) {\n         {\n             // Make sure that we can't use `mybox` outside of this scope\n@@ -196,6 +200,7 @@ impl AllocHeader {\n }\n \n impl MemoryRegion {\n+    #[inline]\n     fn malloc(&mut self, size: uint) -> *mut Box {\n         let total_size = size + AllocHeader::size();\n         let alloc: *AllocHeader = unsafe {\n@@ -210,6 +215,7 @@ impl MemoryRegion {\n         return alloc.as_box();\n     }\n \n+    #[inline]\n     fn realloc(&mut self, alloc: *mut Box, size: uint) -> *mut Box {\n         rtassert!(!alloc.is_null());\n         let orig_alloc = AllocHeader::from(alloc);\n@@ -228,6 +234,7 @@ impl MemoryRegion {\n         return alloc.as_box();\n     }\n \n+    #[inline]\n     fn free(&mut self, alloc: *mut Box) {\n         rtassert!(!alloc.is_null());\n         let alloc = AllocHeader::from(alloc);\n@@ -249,6 +256,7 @@ impl MemoryRegion {\n         }\n     }\n     #[cfg(not(rtdebug))]\n+    #[inline]\n     fn claim(&mut self, _alloc: &mut AllocHeader) {}\n \n     #[cfg(rtdebug)]\n@@ -260,6 +268,7 @@ impl MemoryRegion {\n         }\n     }\n     #[cfg(not(rtdebug))]\n+    #[inline]\n     fn release(&mut self, _alloc: &AllocHeader) {}\n \n     #[cfg(rtdebug)]\n@@ -271,6 +280,7 @@ impl MemoryRegion {\n         }\n     }\n     #[cfg(not(rtdebug))]\n+    #[inline]\n     fn update(&mut self, _alloc: &mut AllocHeader, _orig: *AllocHeader) {}\n }\n \n@@ -283,6 +293,7 @@ impl Drop for MemoryRegion {\n     }\n }\n \n+#[inline]\n pub unsafe fn local_malloc(td: *libc::c_char, size: libc::uintptr_t) -> *libc::c_char {\n     // XXX: Unsafe borrow for speed. Lame.\n     let task: Option<*mut Task> = Local::try_unsafe_borrow();\n@@ -295,6 +306,7 @@ pub unsafe fn local_malloc(td: *libc::c_char, size: libc::uintptr_t) -> *libc::c\n }\n \n // A little compatibility function\n+#[inline]\n pub unsafe fn local_free(ptr: *libc::c_char) {\n     // XXX: Unsafe borrow for speed. Lame.\n     let task_ptr: Option<*mut Task> = Local::try_unsafe_borrow();"}, {"sha": "a5d5a4677f139c66cbee72e2ae2a4aa513e02b88", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=7ca3bea5bfd15dd960e6346eebf72422b0020d6b", "patch": "@@ -141,6 +141,7 @@ memory and partly incapable of presentation to others.\",\n     abort();\n \n     fn abort() -> ! {\n-        unsafe { libc::abort() }\n+        use std::unstable::intrinsics;\n+        unsafe { intrinsics::abort() }\n     }\n }"}, {"sha": "38c713ad7b7d7b308592d5d041e80eeb1460a5c9", "filename": "src/libstd/unstable/lang.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibstd%2Funstable%2Flang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ca3bea5bfd15dd960e6346eebf72422b0020d6b/src%2Flibstd%2Funstable%2Flang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Flang.rs?ref=7ca3bea5bfd15dd960e6346eebf72422b0020d6b", "patch": "@@ -29,6 +29,7 @@ pub fn fail_bounds_check(file: *c_char, line: size_t, index: size_t, len: size_t\n }\n \n #[lang=\"malloc\"]\n+#[inline]\n pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n     ::rt::local_heap::local_malloc(td, size)\n }\n@@ -37,6 +38,7 @@ pub unsafe fn local_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n // inside a landing pad may corrupt the state of the exception handler. If a\n // problem occurs, call exit instead.\n #[lang=\"free\"]\n+#[inline]\n pub unsafe fn local_free(ptr: *c_char) {\n     ::rt::local_heap::local_free(ptr);\n }"}]}