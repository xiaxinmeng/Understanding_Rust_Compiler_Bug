{"sha": "b362958453910169876686a839c6818fec2950c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNjI5NTg0NTM5MTAxNjk4NzY2ODZhODM5YzY4MThmZWMyOTUwYzU=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-03-08T23:32:33Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-03-26T16:32:10Z"}, "message": "Add function core::iter::zip\n\nThis makes it a little easier to `zip` iterators:\n\n```rust\nfor (x, y) in zip(xs, ys) {}\n// vs.\nfor (x, y) in xs.into_iter().zip(ys) {}\n```\n\nYou can `zip(&mut xs, &ys)` for the conventional `iter_mut()` and\n`iter()`, respectively. This can also support arbitrary nesting, where\nit's easier to see the item layout than with arbitrary `zip` chains:\n\n```rust\nfor ((x, y), z) in zip(zip(xs, ys), zs) {}\nfor (x, (y, z)) in zip(xs, zip(ys, zs)) {}\n// vs.\nfor ((x, y), z) in xs.into_iter().zip(ys).zip(xz) {}\nfor (x, (y, z)) in xs.into_iter().zip((ys.into_iter().zip(xz)) {}\n```\n\nIt may also format more nicely, especially when the first iterator is a\nlonger chain of methods -- for example:\n\n```rust\n    iter::zip(\n        trait_ref.substs.types().skip(1),\n        impl_trait_ref.substs.types().skip(1),\n    )\n    // vs.\n    trait_ref\n        .substs\n        .types()\n        .skip(1)\n        .zip(impl_trait_ref.substs.types().skip(1))\n```\n\nThis replaces the tuple-pair `IntoIterator` in rust-lang/rust#78204.\nThere is prior art for the utility of this in [`itertools::zip`].\n\n[`itertools::zip`]: https://docs.rs/itertools/0.10.0/itertools/fn.zip.html", "tree": {"sha": "e524d41af22857076fae4baae7d11e25032a9854", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e524d41af22857076fae4baae7d11e25032a9854"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b362958453910169876686a839c6818fec2950c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b362958453910169876686a839c6818fec2950c5", "html_url": "https://github.com/rust-lang/rust/commit/b362958453910169876686a839c6818fec2950c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b362958453910169876686a839c6818fec2950c5/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e423058751a2b098d3e469a8e6df1b7a8bbd67b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e423058751a2b098d3e469a8e6df1b7a8bbd67b6", "html_url": "https://github.com/rust-lang/rust/commit/e423058751a2b098d3e469a8e6df1b7a8bbd67b6"}], "stats": {"total": 40, "additions": 38, "deletions": 2}, "files": [{"sha": "3859d76ad5e2b427055e16c0f6bc79992cf041f0", "filename": "library/core/src/iter/adapters/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b362958453910169876686a839c6818fec2950c5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b362958453910169876686a839c6818fec2950c5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fmod.rs?ref=b362958453910169876686a839c6818fec2950c5", "patch": "@@ -51,6 +51,9 @@ pub use self::map_while::MapWhile;\n #[unstable(feature = \"trusted_random_access\", issue = \"none\")]\n pub use self::zip::TrustedRandomAccess;\n \n+#[unstable(feature = \"iter_zip\", issue = \"none\")]\n+pub use self::zip::zip;\n+\n /// This trait provides transitive access to source-stage in an interator-adapter pipeline\n /// under the conditions that\n /// * the iterator source `S` itself implements `SourceIter<Source = S>`"}, {"sha": "ad630ba95b81e5fffaca432e55b780e882a4e5c1", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 33, "deletions": 2, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b362958453910169876686a839c6818fec2950c5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b362958453910169876686a839c6818fec2950c5/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=b362958453910169876686a839c6818fec2950c5", "patch": "@@ -5,8 +5,8 @@ use crate::iter::{InPlaceIterable, SourceIter, TrustedLen};\n \n /// An iterator that iterates two other iterators simultaneously.\n ///\n-/// This `struct` is created by [`Iterator::zip`]. See its documentation\n-/// for more.\n+/// This `struct` is created by [`zip`] or [`Iterator::zip`].\n+/// See their documentation for more.\n #[derive(Clone)]\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -33,6 +33,37 @@ impl<A: Iterator, B: Iterator> Zip<A, B> {\n     }\n }\n \n+/// Converts the arguments to iterators and zips them.\n+///\n+/// See the documentation of [`Iterator::zip`] for more.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// #![feature(iter_zip)]\n+/// use std::iter::zip;\n+///\n+/// let xs = [1, 2, 3];\n+/// let ys = [4, 5, 6];\n+/// for (x, y) in zip(&xs, &ys) {\n+///     println!(\"x:{}, y:{}\", x, y);\n+/// }\n+///\n+/// // Nested zips are also possible:\n+/// let zs = [7, 8, 9];\n+/// for ((x, y), z) in zip(zip(&xs, &ys), &zs) {\n+///     println!(\"x:{}, y:{}, z:{}\", x, y, z);\n+/// }\n+/// ```\n+#[unstable(feature = \"iter_zip\", issue = \"none\")]\n+pub fn zip<A, B>(a: A, b: B) -> Zip<A::IntoIter, B::IntoIter>\n+where\n+    A: IntoIterator,\n+    B: IntoIterator,\n+{\n+    ZipImpl::new(a.into_iter(), b.into_iter())\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A, B> Iterator for Zip<A, B>\n where"}, {"sha": "8d905feeb4940a7a0252293b9ba7dbd83491889c", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b362958453910169876686a839c6818fec2950c5/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b362958453910169876686a839c6818fec2950c5/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=b362958453910169876686a839c6818fec2950c5", "patch": "@@ -389,6 +389,8 @@ pub use self::traits::{\n     DoubleEndedIterator, ExactSizeIterator, Extend, FromIterator, IntoIterator, Product, Sum,\n };\n \n+#[unstable(feature = \"iter_zip\", issue = \"none\")]\n+pub use self::adapters::zip;\n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n pub use self::adapters::Cloned;\n #[stable(feature = \"iter_copied\", since = \"1.36.0\")]"}]}