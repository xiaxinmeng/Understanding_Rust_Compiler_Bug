{"sha": "0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNDJkZmMyZmEyYjM3M2FlZGY3YTE2OWRhM2YwZWMwZTk5NmZjOWY=", "commit": {"author": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-07-23T22:55:36Z"}, "committer": {"name": "Wesley Wiser", "email": "wesleywiser@microsoft.com", "date": "2021-08-25T19:17:22Z"}, "message": "Fix debugger stepping behavior around `match` expressions\n\nPreviously, we would set up the source lines for `match` expressions so\nthat the code generated to perform the test of the scrutinee was matched\nto the line of the arm that required the test and then jump from the arm\nblock to the \"next\" block was matched to all of the lines in the `match`\nexpression.\n\nWhile that makes sense, it has the side effect of causing strange\nstepping behavior in debuggers.\n\nI've changed the source information so that all of the generated tests\nare sourced to `match {scrutinee}` and the jumps are sourced to the last\nline of the block they are inside. This resolves the weird stepping\nbehavior in all debuggers and resolves some instances of \"ambiguous\nsymbol\" errors in WinDbg preventing the user from setting breakpoints at\n`match` expressions.", "tree": {"sha": "b4676c6679915087e8824b3b439070dc907e3ac1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4676c6679915087e8824b3b439070dc907e3ac1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "html_url": "https://github.com/rust-lang/rust/commit/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a992a11913b39a258158646bb1e03528c5aa5060", "url": "https://api.github.com/repos/rust-lang/rust/commits/a992a11913b39a258158646bb1e03528c5aa5060", "html_url": "https://github.com/rust-lang/rust/commit/a992a11913b39a258158646bb1e03528c5aa5060"}], "stats": {"total": 1015, "additions": 533, "deletions": 482}, "files": [{"sha": "7c4bdf1066a14b2044a25ba7cdfaa3af0d5e99be", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 54, "deletions": 9, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -21,7 +21,7 @@ use rustc_middle::mir::*;\n use rustc_middle::thir::{self, *};\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation, Ty};\n use rustc_span::symbol::Symbol;\n-use rustc_span::Span;\n+use rustc_span::{BytePos, Pos, Span};\n use rustc_target::abi::VariantIdx;\n use smallvec::{smallvec, SmallVec};\n \n@@ -143,8 +143,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let mut candidates =\n             arm_candidates.iter_mut().map(|(_, candidate)| candidate).collect::<Vec<_>>();\n \n-        let fake_borrow_temps =\n-            self.lower_match_tree(block, scrutinee_span, match_has_guard, &mut candidates);\n+        let match_start_span = span.shrink_to_lo().to(scrutinee.span);\n+\n+        let fake_borrow_temps = self.lower_match_tree(\n+            block,\n+            scrutinee_span,\n+            match_start_span,\n+            match_has_guard,\n+            &mut candidates,\n+        );\n \n         self.lower_match_arms(\n             destination,\n@@ -224,6 +231,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         &mut self,\n         block: BasicBlock,\n         scrutinee_span: Span,\n+        match_start_span: Span,\n         match_has_guard: bool,\n         candidates: &mut [&mut Candidate<'pat, 'tcx>],\n     ) -> Vec<(Place<'tcx>, Local)> {\n@@ -236,7 +244,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         // This will generate code to test scrutinee_place and\n         // branch to the appropriate arm block\n-        self.match_candidates(scrutinee_span, block, &mut otherwise, candidates, &mut fake_borrows);\n+        self.match_candidates(\n+            match_start_span,\n+            scrutinee_span,\n+            block,\n+            &mut otherwise,\n+            candidates,\n+            &mut fake_borrows,\n+        );\n \n         if let Some(otherwise_block) = otherwise {\n             // See the doc comment on `match_candidates` for why we may have an\n@@ -339,8 +354,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // all the arm blocks will rejoin here\n         let end_block = self.cfg.start_new_block();\n \n+        let end_brace = self.source_info(\n+            outer_source_info.span.with_lo(outer_source_info.span.hi() - BytePos::from_usize(1)),\n+        );\n         for arm_block in arm_end_blocks {\n-            self.cfg.goto(unpack!(arm_block), outer_source_info, end_block);\n+            let block = &self.cfg.basic_blocks[arm_block.0];\n+            let last_location = block.statements.last().map(|s| s.source_info);\n+\n+            self.cfg.goto(unpack!(arm_block), last_location.unwrap_or(end_brace), end_block);\n         }\n \n         self.source_scope = outer_source_info.scope;\n@@ -533,8 +554,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         set_match_place: bool,\n     ) -> BlockAnd<()> {\n         let mut candidate = Candidate::new(initializer.clone(), &irrefutable_pat, false);\n-        let fake_borrow_temps =\n-            self.lower_match_tree(block, irrefutable_pat.span, false, &mut [&mut candidate]);\n+        let fake_borrow_temps = self.lower_match_tree(\n+            block,\n+            irrefutable_pat.span,\n+            irrefutable_pat.span,\n+            false,\n+            &mut [&mut candidate],\n+        );\n         // For matches and function arguments, the place that is being matched\n         // can be set when creating the variables. But the place for\n         // let PATTERN = ... might not even exist until we do the assignment.\n@@ -993,6 +1019,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     fn match_candidates<'pat>(\n         &mut self,\n         span: Span,\n+        scrutinee_span: Span,\n         start_block: BasicBlock,\n         otherwise_block: &mut Option<BasicBlock>,\n         candidates: &mut [&mut Candidate<'pat, 'tcx>],\n@@ -1022,6 +1049,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 }\n                 self.match_simplified_candidates(\n                     span,\n+                    scrutinee_span,\n                     start_block,\n                     otherwise_block,\n                     &mut *new_candidates,\n@@ -1030,6 +1058,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             } else {\n                 self.match_simplified_candidates(\n                     span,\n+                    scrutinee_span,\n                     start_block,\n                     otherwise_block,\n                     candidates,\n@@ -1042,6 +1071,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     fn match_simplified_candidates(\n         &mut self,\n         span: Span,\n+        scrutinee_span: Span,\n         start_block: BasicBlock,\n         otherwise_block: &mut Option<BasicBlock>,\n         candidates: &mut [&mut Candidate<'_, 'tcx>],\n@@ -1087,6 +1117,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         // Test for the remaining candidates.\n         self.test_candidates_with_or(\n             span,\n+            scrutinee_span,\n             unmatched_candidates,\n             block,\n             otherwise_block,\n@@ -1257,6 +1288,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     fn test_candidates_with_or(\n         &mut self,\n         span: Span,\n+        scrutinee_span: Span,\n         candidates: &mut [&mut Candidate<'_, 'tcx>],\n         block: BasicBlock,\n         otherwise_block: &mut Option<BasicBlock>,\n@@ -1269,7 +1301,14 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         match *first_candidate.match_pairs[0].pattern.kind {\n             PatKind::Or { .. } => (),\n             _ => {\n-                self.test_candidates(span, candidates, block, otherwise_block, fake_borrows);\n+                self.test_candidates(\n+                    span,\n+                    scrutinee_span,\n+                    candidates,\n+                    block,\n+                    otherwise_block,\n+                    fake_borrows,\n+                );\n                 return;\n             }\n         }\n@@ -1302,6 +1341,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n         self.match_candidates(\n             span,\n+            scrutinee_span,\n             remainder_start,\n             otherwise_block,\n             remaining_candidates,\n@@ -1330,6 +1370,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             otherwise\n         };\n         self.match_candidates(\n+            or_span,\n             or_span,\n             candidate.pre_binding_block.unwrap(),\n             otherwise,\n@@ -1497,6 +1538,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     fn test_candidates<'pat, 'b, 'c>(\n         &mut self,\n         span: Span,\n+        scrutinee_span: Span,\n         mut candidates: &'b mut [&'c mut Candidate<'pat, 'tcx>],\n         block: BasicBlock,\n         otherwise_block: &mut Option<BasicBlock>,\n@@ -1591,6 +1633,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         let candidate_start = this.cfg.start_new_block();\n                         this.match_candidates(\n                             span,\n+                            scrutinee_span,\n                             candidate_start,\n                             remainder_start,\n                             &mut *candidates,\n@@ -1607,6 +1650,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let remainder_start = remainder_start.unwrap_or_else(|| this.cfg.start_new_block());\n                 this.match_candidates(\n                     span,\n+                    scrutinee_span,\n                     remainder_start,\n                     otherwise_block,\n                     candidates,\n@@ -1617,7 +1661,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             target_blocks\n         };\n \n-        self.perform_test(block, match_place, &test, make_target_blocks);\n+        self.perform_test(span, scrutinee_span, block, match_place, &test, make_target_blocks);\n     }\n \n     /// Determine the fake borrows that are needed from a set of places that\n@@ -1713,6 +1757,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let fake_borrow_temps = self.lower_match_tree(\n             block,\n             pat.span,\n+            pat.span,\n             false,\n             &mut [&mut guard_candidate, &mut otherwise_candidate],\n         );"}, {"sha": "a01df2372a0978499de8349d31b81ab467252f02", "filename": "compiler/rustc_mir_build/src/build/matches/test.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Ftest.rs?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -19,6 +19,7 @@ use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, adjustment::PointerCast, Ty, TyCtxt};\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n \n use std::cmp::Ordering;\n@@ -151,6 +152,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n     pub(super) fn perform_test(\n         &mut self,\n+        match_start_span: Span,\n+        scrutinee_span: Span,\n         block: BasicBlock,\n         place_builder: PlaceBuilder<'tcx>,\n         test: &Test<'tcx>,\n@@ -206,10 +209,15 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 debug!(\"num_enum_variants: {}, variants: {:?}\", num_enum_variants, variants);\n                 let discr_ty = adt_def.repr.discr_type().to_ty(tcx);\n                 let discr = self.temp(discr_ty, test.span);\n-                self.cfg.push_assign(block, source_info, discr, Rvalue::Discriminant(place));\n+                self.cfg.push_assign(\n+                    block,\n+                    self.source_info(scrutinee_span),\n+                    discr,\n+                    Rvalue::Discriminant(place),\n+                );\n                 self.cfg.terminate(\n                     block,\n-                    source_info,\n+                    self.source_info(match_start_span),\n                     TerminatorKind::SwitchInt {\n                         discr: Operand::Move(discr),\n                         switch_ty: discr_ty,\n@@ -246,7 +254,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         targets: switch_targets,\n                     }\n                 };\n-                self.cfg.terminate(block, source_info, terminator);\n+                self.cfg.terminate(block, self.source_info(match_start_span), terminator);\n             }\n \n             TestKind::Eq { value, ty } => {"}, {"sha": "1969d5e0404092ca5369967f9e2d6e28d8d8a28f", "filename": "src/test/mir-opt/76803_regression.encode.SimplifyBranchSame.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2F76803_regression.encode.SimplifyBranchSame.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -7,18 +7,18 @@\n       let mut _2: isize;                   // in scope 0 at $DIR/76803_regression.rs:12:9: 12:16\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/76803_regression.rs:12:9: 12:16\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/76803_regression.rs:12:9: 12:16\n+          _2 = discriminant(_1);           // scope 0 at $DIR/76803_regression.rs:11:11: 11:12\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/76803_regression.rs:11:5: 11:12\n       }\n   \n       bb1: {\n           _0 = move _1;                    // scope 0 at $DIR/76803_regression.rs:13:14: 13:15\n-          goto -> bb3;                     // scope 0 at $DIR/76803_regression.rs:11:5: 14:6\n+          goto -> bb3;                     // scope 0 at $DIR/76803_regression.rs:13:14: 13:15\n       }\n   \n       bb2: {\n           discriminant(_0) = 1;            // scope 0 at $DIR/76803_regression.rs:12:20: 12:27\n-          goto -> bb3;                     // scope 0 at $DIR/76803_regression.rs:11:5: 14:6\n+          goto -> bb3;                     // scope 0 at $DIR/76803_regression.rs:12:20: 12:27\n       }\n   \n       bb3: {"}, {"sha": "0f64f7c09ab5549bdb8e13261b55ad9022a5a582", "filename": "src/test/mir-opt/const_goto.issue_77355_opt.ConstGoto.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto.issue_77355_opt.ConstGoto.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -10,10 +10,10 @@\n   \n       bb0: {\n -         StorageLive(_2);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n--         _3 = discriminant(_1);           // scope 0 at $DIR/const_goto.rs:12:22: 12:28\n--         switchInt(move _3) -> [1_isize: bb2, 2_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto.rs:12:22: 12:28\n-+         _2 = discriminant(_1);           // scope 0 at $DIR/const_goto.rs:12:22: 12:28\n-+         switchInt(move _2) -> [1_isize: bb2, 2_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto.rs:12:22: 12:28\n+-         _3 = discriminant(_1);           // scope 0 at $DIR/const_goto.rs:12:17: 12:20\n+-         switchInt(move _3) -> [1_isize: bb2, 2_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         _2 = discriminant(_1);           // scope 0 at $DIR/const_goto.rs:12:17: 12:20\n++         switchInt(move _2) -> [1_isize: bb2, 2_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       }\n   \n       bb1: {"}, {"sha": "9ba02942b58b6af4d9159e7cc6ce6075623a3012", "filename": "src/test/mir-opt/const_goto_const_eval_fail.f.ConstGoto.diff", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fconst_goto_const_eval_fail.f.ConstGoto.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fconst_goto_const_eval_fail.f.ConstGoto.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_goto_const_eval_fail.f.ConstGoto.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -10,35 +10,35 @@\n           StorageLive(_1);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:7:11: 12:6\n           StorageLive(_2);                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:8:15: 8:16\n           _2 = const A;                    // scope 0 at $DIR/const_goto_const_eval_fail.rs:8:15: 8:16\n-          switchInt(_2) -> [1_i32: bb2, 2_i32: bb2, 3_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:9:13: 9:14\n+          switchInt(_2) -> [1_i32: bb2, 2_i32: bb2, 3_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:8:9: 8:16\n       }\n   \n       bb1: {\n           _1 = const true;                 // scope 0 at $DIR/const_goto_const_eval_fail.rs:10:18: 10:22\n-          goto -> bb3;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:8:9: 11:10\n+          goto -> bb3;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:10:18: 10:22\n       }\n   \n       bb2: {\n           _1 = const B;                    // scope 0 at $DIR/const_goto_const_eval_fail.rs:9:26: 9:27\n--         goto -> bb3;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:8:9: 11:10\n-+         switchInt(_1) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:13:9: 13:14\n+-         goto -> bb3;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:9:26: 9:27\n++         switchInt(_1) -> [false: bb4, otherwise: bb3]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:7:5: 12:6\n       }\n   \n       bb3: {\n--         switchInt(_1) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:13:9: 13:14\n+-         switchInt(_1) -> [false: bb5, otherwise: bb4]; // scope 0 at $DIR/const_goto_const_eval_fail.rs:7:5: 12:6\n -     }\n - \n -     bb4: {\n           _0 = const 2_u64;                // scope 0 at $DIR/const_goto_const_eval_fail.rs:14:17: 14:18\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:7:5: 15:6\n-+         goto -> bb5;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:7:5: 15:6\n+-         goto -> bb6;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:14:17: 14:18\n++         goto -> bb5;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:14:17: 14:18\n       }\n   \n -     bb5: {\n +     bb4: {\n           _0 = const 1_u64;                // scope 0 at $DIR/const_goto_const_eval_fail.rs:13:18: 13:19\n--         goto -> bb6;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:7:5: 15:6\n-+         goto -> bb5;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:7:5: 15:6\n+-         goto -> bb6;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:13:18: 13:19\n++         goto -> bb5;                     // scope 0 at $DIR/const_goto_const_eval_fail.rs:13:18: 13:19\n       }\n   \n -     bb6: {"}, {"sha": "bbfeb4dc392c2b13ea239c551e739b5ab9fa8733", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.32bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -29,7 +29,7 @@\n       }\n   \n       bb2: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n       }\n   \n       bb3: {"}, {"sha": "bbfeb4dc392c2b13ea239c551e739b5ab9fa8733", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.64bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -29,7 +29,7 @@\n       }\n   \n       bb2: {\n-          switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n       }\n   \n       bb3: {"}, {"sha": "f031a703a9d728a482b9ea854714ed481a0b4b3d", "filename": "src/test/mir-opt/const_prop/switch_int.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.ConstProp.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -8,8 +8,8 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n           _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n--         switchInt(_1) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n-+         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n+-         switchInt(_1) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:7:5: 7:12\n++         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:7:5: 7:12\n       }\n   \n       bb1: {"}, {"sha": "6a5b88c4a7f0d11a61cbedc24fb99928ec0c0429", "filename": "src/test/mir-opt/const_prop/switch_int.main.SimplifyBranches-after-const-prop.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyBranches-after-const-prop.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyBranches-after-const-prop.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fswitch_int.main.SimplifyBranches-after-const-prop.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -8,8 +8,8 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n           _1 = const 1_i32;                // scope 0 at $DIR/switch_int.rs:7:11: 7:12\n--         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n-+         goto -> bb2;                     // scope 0 at $DIR/switch_int.rs:8:9: 8:10\n+-         switchInt(const 1_i32) -> [1_i32: bb2, otherwise: bb1]; // scope 0 at $DIR/switch_int.rs:7:5: 7:12\n++         goto -> bb2;                     // scope 0 at $DIR/switch_int.rs:7:5: 7:12\n       }\n   \n       bb1: {"}, {"sha": "48a37a8496cb720ae8a842ee0dafa0a10f649d10", "filename": "src/test/mir-opt/deduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdeduplicate_blocks.is_line_doc_comment_2.DeduplicateBlocks.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -31,20 +31,20 @@\n       }\n   \n       bb1: {\n-          switchInt((*_2)[0 of 4]) -> [47_u8: bb2, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:4:10: 4:14\n+          switchInt((*_2)[0 of 4]) -> [47_u8: bb2, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n       }\n   \n       bb2: {\n-          switchInt((*_2)[1 of 4]) -> [47_u8: bb3, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:4:16: 4:20\n+          switchInt((*_2)[1 of 4]) -> [47_u8: bb3, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n       }\n   \n       bb3: {\n-          switchInt((*_2)[2 of 4]) -> [47_u8: bb4, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:4:22: 4:26\n+          switchInt((*_2)[2 of 4]) -> [47_u8: bb4, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n       }\n   \n       bb4: {\n--         switchInt((*_2)[3 of 4]) -> [47_u8: bb10, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:4:28: 4:32\n-+         switchInt((*_2)[3 of 4]) -> [47_u8: bb9, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:4:28: 4:32\n+-         switchInt((*_2)[3 of 4]) -> [47_u8: bb10, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n++         switchInt((*_2)[3 of 4]) -> [47_u8: bb9, otherwise: bb5]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n       }\n   \n       bb5: {\n@@ -54,39 +54,39 @@\n       }\n   \n       bb6: {\n-          switchInt((*_2)[0 of 3]) -> [47_u8: bb7, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:5:10: 5:14\n+          switchInt((*_2)[0 of 3]) -> [47_u8: bb7, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n       }\n   \n       bb7: {\n-          switchInt((*_2)[1 of 3]) -> [47_u8: bb8, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:5:16: 5:20\n+          switchInt((*_2)[1 of 3]) -> [47_u8: bb8, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n       }\n   \n       bb8: {\n--         switchInt((*_2)[2 of 3]) -> [47_u8: bb11, 33_u8: bb12, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:5:22: 5:26\n-+         switchInt((*_2)[2 of 3]) -> [47_u8: bb10, 33_u8: bb10, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:5:22: 5:26\n+-         switchInt((*_2)[2 of 3]) -> [47_u8: bb11, 33_u8: bb12, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n++         switchInt((*_2)[2 of 3]) -> [47_u8: bb10, 33_u8: bb10, otherwise: bb9]; // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 3:23\n       }\n   \n       bb9: {\n -         _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:7:14: 7:19\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 8:6\n+-         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:7:14: 7:19\n -     }\n - \n -     bb10: {\n           _0 = const false;                // scope 0 at $DIR/deduplicate_blocks.rs:4:41: 4:46\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 8:6\n-+         goto -> bb11;                    // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 8:6\n+-         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:4:41: 4:46\n++         goto -> bb11;                    // scope 0 at $DIR/deduplicate_blocks.rs:4:41: 4:46\n       }\n   \n -     bb11: {\n -         _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:5:35: 5:39\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 8:6\n+-         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:5:35: 5:39\n -     }\n - \n -     bb12: {\n +     bb10: {\n           _0 = const true;                 // scope 0 at $DIR/deduplicate_blocks.rs:6:35: 6:39\n--         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 8:6\n-+         goto -> bb11;                    // scope 0 at $DIR/deduplicate_blocks.rs:3:5: 8:6\n+-         goto -> bb13;                    // scope 0 at $DIR/deduplicate_blocks.rs:6:35: 6:39\n++         goto -> bb11;                    // scope 0 at $DIR/deduplicate_blocks.rs:6:35: 6:39\n       }\n   \n -     bb13: {"}, {"sha": "c1591e5d72915c0bf6435b60e8d057ead34b09ff", "filename": "src/test/mir-opt/early_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt1.EarlyOtherwiseBranch.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -29,26 +29,26 @@\n           (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:16: 4:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:4:16: 4:17\n-          _7 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n--         switchInt(move _7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n-+         StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n-+         _10 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n-+         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n-+         _11 = Ne(_10, _7);               // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n-+         StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n-+         switchInt(move _11) -> [false: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:5:10: 5:17\n+          _7 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n+-         switchInt(move _7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n++         StorageLive(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n++         _10 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n++         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n++         _11 = Ne(_10, _7);               // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n++         StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n++         switchInt(move _11) -> [false: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n       }\n   \n       bb1: {\n +         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:6:14: 6:15\n           _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:6:14: 6:15\n--         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 7:6\n-+         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 7:6\n+-         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:6:14: 6:15\n++         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:6:14: 6:15\n       }\n   \n       bb2: {\n--         _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:5:19: 5:26\n--         switchInt(move _6) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:5:19: 5:26\n+-         _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:4:11: 4:17\n+-         switchInt(move _6) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 4:17\n -     }\n - \n -     bb3: {\n@@ -59,8 +59,8 @@\n           _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n           StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n           StorageDead(_8);                 // scope 0 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n--         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 7:6\n-+         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:4:5: 7:6\n+-         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n++         goto -> bb3;                     // scope 0 at $DIR/early_otherwise_branch.rs:5:31: 5:32\n       }\n   \n -     bb4: {"}, {"sha": "b949d307e20e9c2bce600e3e770e41bff376e4d6", "filename": "src/test/mir-opt/early_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch.opt2.EarlyOtherwiseBranch.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -30,31 +30,31 @@\n           (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:16: 12:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch.rs:12:16: 12:17\n-          _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n--         switchInt(move _8) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n-+         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n-+         _11 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n-+         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n-+         _12 = Ne(_11, _8);               // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n-+         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n-+         switchInt(move _12) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:13:10: 13:17\n+          _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n+-         switchInt(move _8) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n++         StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n++         _11 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n++         StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n++         _12 = Ne(_11, _8);               // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n++         StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n++         switchInt(move _12) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n       }\n   \n       bb1: {\n--         _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:14:16: 14:20\n--         switchInt(move _6) -> [0_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:14:16: 14:20\n+-         _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n+-         switchInt(move _6) -> [0_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n -     }\n - \n -     bb2: {\n +         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch.rs:15:14: 15:15\n           _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:15:14: 15:15\n--         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n-+         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n+-         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:15:14: 15:15\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:15:14: 15:15\n       }\n   \n -     bb3: {\n--         _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:13:19: 13:26\n--         switchInt(move _7) -> [1_isize: bb4, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:13:19: 13:26\n+-         _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch.rs:12:11: 12:17\n+-         switchInt(move _7) -> [1_isize: bb4, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 12:17\n -     }\n - \n -     bb4: {\n@@ -66,15 +66,15 @@\n           _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n           StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n           StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n--         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n-+         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n+-         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:13:31: 13:32\n       }\n   \n -     bb5: {\n +     bb3: {\n           _0 = const 0_u32;                // scope 0 at $DIR/early_otherwise_branch.rs:14:25: 14:26\n--         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n-+         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:12:5: 16:6\n+-         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch.rs:14:25: 14:26\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch.rs:14:25: 14:26\n       }\n   \n -     bb6: {"}, {"sha": "5b9ec1e53d946a1810799d7350111c5cb9119ed8", "filename": "src/test/mir-opt/early_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_3_element_tuple.opt1.EarlyOtherwiseBranch.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -40,33 +40,33 @@\n           StorageDead(_7);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:19: 5:20\n           StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:19: 5:20\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:19: 5:20\n-          _10 = discriminant((_4.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n--         switchInt(move _10) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n-+         StorageLive(_14);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n-+         _14 = discriminant((_4.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n-+         StorageLive(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n-+         _15 = Ne(_14, _10);              // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n-+         StorageDead(_14);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n-+         switchInt(move _15) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:10: 6:17\n+          _10 = discriminant((_4.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n+-         switchInt(move _10) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n++         StorageLive(_14);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n++         _14 = discriminant((_4.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n++         StorageLive(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n++         _15 = Ne(_14, _10);              // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n++         StorageDead(_14);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n++         switchInt(move _15) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n       }\n   \n       bb1: {\n +         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n +         StorageDead(_15);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n           _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n--         goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 8:6\n-+         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 8:6\n+-         goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:7:14: 7:15\n       }\n   \n       bb2: {\n--         _9 = discriminant((_4.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:19: 6:26\n--         switchInt(move _9) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:19: 6:26\n+-         _9 = discriminant((_4.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n+-         switchInt(move _9) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n -     }\n - \n -     bb3: {\n-          _8 = discriminant((_4.2: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:28: 6:35\n--         switchInt(move _8) -> [1_isize: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:28: 6:35\n-+         switchInt(move _8) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:28: 6:35\n+          _8 = discriminant((_4.2: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:11: 5:20\n+-         switchInt(move _8) -> [1_isize: bb4, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n++         switchInt(move _8) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 5:20\n       }\n   \n -     bb4: {\n@@ -81,8 +81,8 @@\n           StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n           StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n           StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n--         goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 8:6\n-+         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:5:5: 8:6\n+-         goto -> bb5;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n++         goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_3_element_tuple.rs:6:40: 6:41\n       }\n   \n -     bb5: {"}, {"sha": "f23d035545eec8533eac2b4f403cf1a3d4ebde60", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.before-SimplifyBranches-final.after.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -80,19 +80,19 @@\n           StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n -         StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n-          _11 = discriminant((*(_4.0: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n--         switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n-+         StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n-+         _34 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n-+         StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n-+         _35 = Ne(_34, _11);              // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n-+         StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n-+         switchInt(move _35) -> [false: bb7, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n+          _11 = discriminant((*(_4.0: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+-         switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n++         StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n++         _34 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n++         StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n++         _35 = Ne(_34, _11);              // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n++         StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n++         switchInt(move _35) -> [false: bb7, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n       }\n   \n       bb1: {\n--         _7 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n--         switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n+-         _7 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+-         switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n -     }\n - \n -     bb2: {\n@@ -126,12 +126,12 @@\n +         nop;                             // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n +     }\n + \n       bb3: {\n--         _8 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n--         switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+-         _8 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+-         switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n +         _20 = (((*(_4.0: &ViewportPercentageLength)) as Vh).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:14: 23:17\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:24: 23:29\n@@ -149,12 +149,12 @@\n +         nop;                             // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n       }\n   \n       bb4: {\n--         _9 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:23: 24:34\n--         switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:23: 24:34\n+-         _9 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+-         switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n +         _25 = (((*(_4.0: &ViewportPercentageLength)) as Vmin).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:16: 24:19\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:28: 24:33\n@@ -172,12 +172,12 @@\n +         nop;                             // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n       }\n   \n       bb5: {\n--         _10 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n--         switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n+-         _10 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+-         switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n +         _30 = (((*(_4.0: &ViewportPercentageLength)) as Vmax).0: f32); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:16: 25:19\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:28: 25:33\n@@ -195,7 +195,7 @@\n +         nop;                             // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n       }\n   \n       bb6: {\n@@ -216,7 +216,7 @@\n -         StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n -         StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n -         StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n +         discriminant(_0) = 0;            // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:5: 27:7\n +         nop;                             // scope 0 at $DIR/early_otherwise_branch_68867.rs:27:6: 27:7\n@@ -242,7 +242,7 @@\n -         StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n -         StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n -         StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n -     }\n - \n -     bb8: {\n@@ -263,7 +263,7 @@\n -         StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n -         StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n -         StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n -     }\n - \n -     bb9: {\n@@ -284,7 +284,7 @@\n -         StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n -         StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n -         StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n -     }\n - \n -     bb10: {"}, {"sha": "af32d4d2d149cb90db1ebed63a64782b15e35516", "filename": "src/test/mir-opt/early_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_68867.try_sum.EarlyOtherwiseBranch.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -66,19 +66,19 @@\n           (_4.1: &ViewportPercentageLength) = move _6; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n           StorageDead(_6);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:23: 21:24\n-          _11 = discriminant((*(_4.0: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n--         switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n-+         StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n-+         _34 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n-+         StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n-+         _35 = Ne(_34, _11);              // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n-+         StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n-+         switchInt(move _35) -> [false: bb7, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:11: 22:18\n+          _11 = discriminant((*(_4.0: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+-         switchInt(move _11) -> [0_isize: bb1, 1_isize: bb3, 2_isize: bb4, 3_isize: bb5, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n++         StorageLive(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n++         _34 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n++         StorageLive(_35);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n++         _35 = Ne(_34, _11);              // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n++         StorageDead(_34);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n++         switchInt(move _35) -> [false: bb7, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n       }\n   \n       bb1: {\n--         _7 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n--         switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:21: 22:30\n+-         _7 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+-         switchInt(move _7) -> [0_isize: bb6, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n -     }\n - \n -     bb2: {\n@@ -93,18 +93,18 @@\n       }\n   \n -     bb3: {\n--         _8 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n--         switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:21: 23:30\n+-         _8 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+-         switchInt(move _8) -> [1_isize: bb7, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n -     }\n - \n -     bb4: {\n--         _9 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:23: 24:34\n--         switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:23: 24:34\n+-         _9 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+-         switchInt(move _9) -> [2_isize: bb8, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n -     }\n - \n -     bb5: {\n--         _10 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n--         switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:23: 25:34\n+-         _10 = discriminant((*(_4.1: &ViewportPercentageLength))); // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:14: 21:24\n+-         switchInt(move _10) -> [3_isize: bb9, otherwise: bb2]; // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 21:24\n -     }\n - \n -     bb6: {\n@@ -126,8 +126,8 @@\n           StorageDead(_14);                // scope 1 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n           StorageDead(_13);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n           StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:22:49: 22:50\n       }\n   \n -     bb7: {\n@@ -149,8 +149,8 @@\n           StorageDead(_19);                // scope 2 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n           StorageDead(_18);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n           StorageDead(_17);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:23:49: 23:50\n       }\n   \n -     bb8: {\n@@ -172,8 +172,8 @@\n           StorageDead(_24);                // scope 3 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n           StorageDead(_23);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n           StorageDead(_22);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:24:55: 24:56\n       }\n   \n -     bb9: {\n@@ -195,8 +195,8 @@\n           StorageDead(_29);                // scope 4 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n           StorageDead(_28);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n           StorageDead(_27);                // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n--         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n-+         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:21:8: 27:6\n+-         goto -> bb10;                    // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n++         goto -> bb6;                     // scope 0 at $DIR/early_otherwise_branch_68867.rs:25:55: 25:56\n       }\n   \n -     bb10: {"}, {"sha": "5343f22d3da3e427a11f6c38389ff2c6438bca92", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt1.EarlyOtherwiseBranch.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -36,23 +36,23 @@\n           (_3.1: std::option::Option<u32>) = move _5; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:16: 8:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:16: 8:17\n-          _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:10: 9:17\n-          switchInt(move _8) -> [0_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:10: 9:17\n+          _8 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n+          switchInt(move _8) -> [0_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n       }\n   \n       bb1: {\n-          _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:16: 11:23\n-          switchInt(move _6) -> [0_isize: bb2, otherwise: bb6]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:16: 11:23\n+          _6 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n+          switchInt(move _6) -> [0_isize: bb2, otherwise: bb6]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n       }\n   \n       bb2: {\n           _0 = const 3_u32;                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:12:25: 12:26\n-          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 13:6\n+          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:12:25: 12:26\n       }\n   \n       bb3: {\n-          _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:19: 9:26\n-          switchInt(move _7) -> [0_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:19: 9:26\n+          _7 = discriminant((_3.1: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:11: 8:17\n+          switchInt(move _7) -> [0_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 8:17\n       }\n   \n       bb4: {\n@@ -63,23 +63,23 @@\n           _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n           StorageDead(_10);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n           StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n-          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 13:6\n+          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:9:31: 9:32\n       }\n   \n       bb5: {\n           StorageLive(_11);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:15: 10:16\n           _11 = (((_3.0: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:15: 10:16\n           _0 = const 1_u32;                // scope 2 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n           StorageDead(_11);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n-          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 13:6\n+          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:10:28: 10:29\n       }\n   \n       bb6: {\n           StorageLive(_12);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:21: 11:22\n           _12 = (((_3.1: std::option::Option<u32>) as Some).0: u32); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:21: 11:22\n           _0 = const 2_u32;                // scope 3 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n           StorageDead(_12);                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n-          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:8:5: 13:6\n+          goto -> bb7;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:11:28: 11:29\n       }\n   \n       bb7: {"}, {"sha": "66ea828bf682c422077200f86e3e2efdf0abeffa", "filename": "src/test/mir-opt/early_otherwise_branch_noopt.noopt2.EarlyOtherwiseBranch.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt2.EarlyOtherwiseBranch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt2.EarlyOtherwiseBranch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fearly_otherwise_branch_noopt.noopt2.EarlyOtherwiseBranch.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -27,18 +27,18 @@\n           (_3.1: std::option::Option<bool>) = move _5; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:11: 19:17\n           StorageDead(_5);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:16: 19:17\n           StorageDead(_4);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:16: 19:17\n-          _7 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:10: 20:17\n-          switchInt(move _7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:10: 20:17\n+          _7 = discriminant((_3.0: std::option::Option<u32>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:11: 19:17\n+          switchInt(move _7) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:5: 19:17\n       }\n   \n       bb1: {\n           _0 = const 1_u32;                // scope 0 at $DIR/early_otherwise_branch_noopt.rs:21:14: 21:15\n-          goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:5: 22:6\n+          goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:21:14: 21:15\n       }\n   \n       bb2: {\n-          _6 = discriminant((_3.1: std::option::Option<bool>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:19: 20:26\n-          switchInt(move _6) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:19: 20:26\n+          _6 = discriminant((_3.1: std::option::Option<bool>)); // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:11: 19:17\n+          switchInt(move _6) -> [1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:5: 19:17\n       }\n   \n       bb3: {\n@@ -49,7 +49,7 @@\n           _0 = const 0_u32;                // scope 1 at $DIR/early_otherwise_branch_noopt.rs:20:31: 20:32\n           StorageDead(_9);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:31: 20:32\n           StorageDead(_8);                 // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:31: 20:32\n-          goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:19:5: 22:6\n+          goto -> bb4;                     // scope 0 at $DIR/early_otherwise_branch_noopt.rs:20:31: 20:32\n       }\n   \n       bb4: {"}, {"sha": "6b7b3db05419e764157e26267d95523ed66b67c9", "filename": "src/test/mir-opt/exponential_or.match_tuple.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential_or.match_tuple.SimplifyCfg-initial.after.mir?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -19,21 +19,21 @@ fn match_tuple(_1: (u32, bool, Option<i32>, u32)) -> u32 {\n \n     bb0: {\n         FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/exponential-or.rs:5:11: 5:12\n-        switchInt((_1.0: u32)) -> [1_u32: bb2, 4_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:15: 6:16\n+        switchInt((_1.0: u32)) -> [1_u32: bb2, 4_u32: bb2, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:15: 6:20\n     }\n \n     bb1: {\n         _0 = const 0_u32;                // scope 0 at $DIR/exponential-or.rs:7:14: 7:15\n-        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:5:5: 8:6\n+        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:7:14: 7:15\n     }\n \n     bb2: {\n-        _2 = discriminant((_1.2: std::option::Option<i32>)); // scope 0 at $DIR/exponential-or.rs:6:37: 6:48\n-        switchInt(move _2) -> [0_isize: bb4, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:37: 6:48\n+        _2 = discriminant((_1.2: std::option::Option<i32>)); // scope 0 at $DIR/exponential-or.rs:6:37: 6:55\n+        switchInt(move _2) -> [0_isize: bb4, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:37: 6:55\n     }\n \n     bb3: {\n-        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1_i32: bb4, 8_i32: bb4, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:42: 6:43\n+        switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1_i32: bb4, 8_i32: bb4, otherwise: bb1]; // scope 0 at $DIR/exponential-or.rs:6:37: 6:55\n     }\n \n     bb4: {\n@@ -74,7 +74,7 @@ fn match_tuple(_1: (u32, bool, Option<i32>, u32)) -> u32 {\n         StorageDead(_9);                 // scope 1 at $DIR/exponential-or.rs:6:87: 6:88\n         StorageDead(_8);                 // scope 0 at $DIR/exponential-or.rs:6:87: 6:88\n         StorageDead(_7);                 // scope 0 at $DIR/exponential-or.rs:6:87: 6:88\n-        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:5:5: 8:6\n+        goto -> bb10;                    // scope 0 at $DIR/exponential-or.rs:6:87: 6:88\n     }\n \n     bb10: {"}, {"sha": "44167ac0c4826445e9658679cb08bf6506047f13", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -47,17 +47,17 @@\n       bb1: {\n           StorageDead(_5);                 // scope 0 at $DIR/funky_arms.rs:15:36: 15:37\n           StorageLive(_6);                 // scope 1 at $DIR/funky_arms.rs:19:9: 19:13\n-          switchInt(_4) -> [false: bb3, otherwise: bb2]; // scope 1 at $DIR/funky_arms.rs:20:9: 20:14\n+          switchInt(_4) -> [false: bb3, otherwise: bb2]; // scope 1 at $DIR/funky_arms.rs:19:16: 19:32\n       }\n   \n       bb2: {\n           discriminant(_6) = 1;            // scope 1 at $DIR/funky_arms.rs:21:17: 21:41\n-          goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:19:16: 22:6\n+          goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:21:17: 21:41\n       }\n   \n       bb3: {\n           discriminant(_6) = 0;            // scope 1 at $DIR/funky_arms.rs:20:18: 20:38\n-          goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:19:16: 22:6\n+          goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:20:18: 20:38\n       }\n   \n       bb4: {"}, {"sha": "fd4dcb2265e61df2a0530bb17aca2151e9b61cf8", "filename": "src/test/mir-opt/if_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fif_condition_int.dont_remove_comparison.SimplifyComparisonIntegral.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -20,34 +20,34 @@\n           _3 = _1;                         // scope 0 at $DIR/if-condition-int.rs:44:13: 44:14\n -         _2 = Eq(move _3, const 17_i8);   // scope 0 at $DIR/if-condition-int.rs:44:13: 44:20\n -         StorageDead(_3);                 // scope 0 at $DIR/if-condition-int.rs:44:19: 44:20\n--         switchInt(_2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if-condition-int.rs:46:9: 46:14\n+-         switchInt(_2) -> [false: bb2, otherwise: bb1]; // scope 1 at $DIR/if-condition-int.rs:45:5: 45:12\n +         _2 = Eq(_3, const 17_i8);        // scope 0 at $DIR/if-condition-int.rs:44:13: 44:20\n +         nop;                             // scope 0 at $DIR/if-condition-int.rs:44:19: 44:20\n-+         switchInt(move _3) -> [17_i8: bb1, otherwise: bb2]; // scope 1 at $DIR/if-condition-int.rs:46:9: 46:14\n++         switchInt(move _3) -> [17_i8: bb1, otherwise: bb2]; // scope 1 at $DIR/if-condition-int.rs:45:5: 45:12\n       }\n   \n       bb1: {\n-+         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:46:9: 46:14\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:45:5: 45:12\n           StorageLive(_6);                 // scope 1 at $DIR/if-condition-int.rs:47:23: 47:31\n           StorageLive(_7);                 // scope 1 at $DIR/if-condition-int.rs:47:23: 47:24\n           _7 = _2;                         // scope 1 at $DIR/if-condition-int.rs:47:23: 47:24\n           _6 = move _7 as i32 (Misc);      // scope 1 at $DIR/if-condition-int.rs:47:23: 47:31\n           StorageDead(_7);                 // scope 1 at $DIR/if-condition-int.rs:47:30: 47:31\n           _0 = Add(const 100_i32, move _6); // scope 1 at $DIR/if-condition-int.rs:47:17: 47:31\n           StorageDead(_6);                 // scope 1 at $DIR/if-condition-int.rs:47:30: 47:31\n-          goto -> bb3;                     // scope 1 at $DIR/if-condition-int.rs:45:5: 48:6\n+          goto -> bb3;                     // scope 1 at $DIR/if-condition-int.rs:47:30: 47:31\n       }\n   \n       bb2: {\n-+         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:46:9: 46:14\n++         StorageDead(_3);                 // scope 1 at $DIR/if-condition-int.rs:45:5: 45:12\n           StorageLive(_4);                 // scope 1 at $DIR/if-condition-int.rs:46:23: 46:31\n           StorageLive(_5);                 // scope 1 at $DIR/if-condition-int.rs:46:23: 46:24\n           _5 = _2;                         // scope 1 at $DIR/if-condition-int.rs:46:23: 46:24\n           _4 = move _5 as i32 (Misc);      // scope 1 at $DIR/if-condition-int.rs:46:23: 46:31\n           StorageDead(_5);                 // scope 1 at $DIR/if-condition-int.rs:46:30: 46:31\n           _0 = Add(const 10_i32, move _4); // scope 1 at $DIR/if-condition-int.rs:46:18: 46:31\n           StorageDead(_4);                 // scope 1 at $DIR/if-condition-int.rs:46:30: 46:31\n-          goto -> bb3;                     // scope 1 at $DIR/if-condition-int.rs:45:5: 48:6\n+          goto -> bb3;                     // scope 1 at $DIR/if-condition-int.rs:46:30: 46:31\n       }\n   \n       bb3: {"}, {"sha": "2f8931382a69ee7d62fdae61b474eb2000b2df65", "filename": "src/test/mir-opt/issue_49232.main.mir_map.0.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_49232.main.mir_map.0.mir?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -25,7 +25,7 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         _3 = const true;                 // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n         FakeRead(ForMatchedPlace(None), _3); // scope 0 at $DIR/issue-49232.rs:8:19: 8:23\n-        switchInt(_3) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/issue-49232.rs:9:17: 9:22\n+        switchInt(_3) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/issue-49232.rs:8:13: 8:23\n     }\n \n     bb3: {\n@@ -39,15 +39,15 @@ fn main() -> () {\n \n     bb5: {\n         _2 = const 4_i32;                // scope 0 at $DIR/issue-49232.rs:9:26: 9:27\n-        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n+        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:9:26: 9:27\n     }\n \n     bb6: {\n         unreachable;                     // scope 0 at $DIR/issue-49232.rs:10:25: 10:30\n     }\n \n     bb7: {\n-        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:8:13: 11:14\n+        goto -> bb8;                     // scope 0 at $DIR/issue-49232.rs:11:13: 11:14\n     }\n \n     bb8: {"}, {"sha": "95efa74289d85b6509f813638dea5abf1ad5d257", "filename": "src/test/mir-opt/issue_62289.test.ElaborateDrops.before.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_62289.test.ElaborateDrops.before.mir?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -37,8 +37,8 @@ fn test() -> Option<Box<u32>> {\n \n     bb1: {\n         StorageDead(_4);                 // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        _5 = discriminant(_3);           // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n-        switchInt(move _5) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/issue-62289.rs:9:19: 9:20\n+        _5 = discriminant(_3);           // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n+        switchInt(move _5) -> [0_isize: bb2, 1_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/issue-62289.rs:9:15: 9:20\n     }\n \n     bb2: {"}, {"sha": "a544f0f4b62a994fbd42ed79adc44ebef471752b", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -53,8 +53,8 @@\n           StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-          _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n-          goto -> bb2;                     // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n+          _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          goto -> bb2;                     // scope 0 at $DIR/issue-73223.rs:2:17: 2:30\n       }\n   \n       bb1: {"}, {"sha": "a544f0f4b62a994fbd42ed79adc44ebef471752b", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -53,8 +53,8 @@\n           StorageLive(_2);                 // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           ((_2 as Some).0: i32) = const 1_i32; // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n           discriminant(_2) = 1;            // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n-          _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n-          goto -> bb2;                     // scope 0 at $DIR/issue-73223.rs:3:9: 3:16\n+          _3 = const 1_isize;              // scope 0 at $DIR/issue-73223.rs:2:23: 2:30\n+          goto -> bb2;                     // scope 0 at $DIR/issue-73223.rs:2:17: 2:30\n       }\n   \n       bb1: {"}, {"sha": "0d19b3d459eb0cf8097af428c3723de9c930b554", "filename": "src/test/mir-opt/issues/issue_75439.foo.MatchBranchSimplification.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissues%2Fissue_75439.foo.MatchBranchSimplification.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -32,15 +32,15 @@\n   \n       bb1: {\n           StorageDead(_3);                 // scope 2 at $DIR/issue-75439.rs:7:52: 7:53\n-          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:9:13: 9:14\n+          switchInt(_2[0 of 4]) -> [0_u32: bb2, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb2: {\n-          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:9:16: 9:17\n+          switchInt(_2[1 of 4]) -> [0_u32: bb3, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb3: {\n-          switchInt(_2[2 of 4]) -> [0_u32: bb6, 4294901760_u32: bb7, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:9:19: 9:20\n+          switchInt(_2[2 of 4]) -> [0_u32: bb6, 4294901760_u32: bb7, otherwise: bb4]; // scope 1 at $DIR/issue-75439.rs:9:12: 9:30\n       }\n   \n       bb4: {"}, {"sha": "f756b6bbf3d5ceebcfe9c0dc53889eb19b35f262", "filename": "src/test/mir-opt/match_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_arm_scopes.complicated_match.SimplifyCfg-initial.after-ElaborateDrops.after.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -32,26 +32,26 @@\n   \n       bb0: {\n -         FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match-arm-scopes.rs:14:11: 14:16\n--         switchInt((_2.0: bool)) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n-+         switchInt((_2.0: bool)) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:15:10: 15:15\n+-         switchInt((_2.0: bool)) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:14:5: 14:16\n++         switchInt((_2.0: bool)) -> [false: bb5, otherwise: bb1]; // scope 0 at $DIR/match-arm-scopes.rs:14:5: 14:16\n       }\n   \n       bb1: {\n -         falseEdge -> [real: bb8, imaginary: bb3]; // scope 0 at $DIR/match-arm-scopes.rs:15:9: 15:22\n-+         switchInt((_2.1: bool)) -> [false: bb10, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:15:29: 15:34\n++         switchInt((_2.1: bool)) -> [false: bb10, otherwise: bb2]; // scope 0 at $DIR/match-arm-scopes.rs:14:5: 14:16\n       }\n   \n       bb2: {\n--         switchInt((_2.1: bool)) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:15:29: 15:34\n-+         switchInt((_2.0: bool)) -> [false: bb3, otherwise: bb17]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n+-         switchInt((_2.1: bool)) -> [false: bb3, otherwise: bb4]; // scope 0 at $DIR/match-arm-scopes.rs:14:5: 14:16\n++         switchInt((_2.0: bool)) -> [false: bb3, otherwise: bb17]; // scope 0 at $DIR/match-arm-scopes.rs:14:5: 14:16\n       }\n   \n       bb3: {\n -         falseEdge -> [real: bb13, imaginary: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:15:25: 15:38\n -     }\n - \n -     bb4: {\n--         switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:16:10: 16:14\n+-         switchInt((_2.0: bool)) -> [false: bb6, otherwise: bb5]; // scope 0 at $DIR/match-arm-scopes.rs:14:5: 14:16\n -     }\n - \n -     bb5: {\n@@ -192,8 +192,8 @@\n           StorageDead(_5);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_8);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n           StorageDead(_6);                 // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n--         goto -> bb22;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n-+         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb22;                    // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n++         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:15:77: 15:78\n       }\n   \n -     bb19: {\n@@ -217,8 +217,8 @@\n +     bb18: {\n           StorageDead(_16);                // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n           StorageDead(_15);                // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n--         goto -> bb22;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n-+         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:14:5: 17:6\n+-         goto -> bb22;                    // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n++         goto -> bb19;                    // scope 0 at $DIR/match-arm-scopes.rs:16:41: 16:42\n       }\n   \n -     bb22: {"}, {"sha": "a2fa39d365a0e3b03526611eaf0dac7bb4baf5ab", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -28,13 +28,13 @@ fn full_tested_match() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n-        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n-        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:16:9: 16:16\n+        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n+        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:15:13: 15:27\n     }\n \n     bb1: {\n         _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:18:17: 18:23\n     }\n \n     bb2: {\n@@ -83,7 +83,7 @@ fn full_tested_match() -> () {\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:16:36: 16:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:16:36: 16:37\n     }\n \n     bb8: {\n@@ -100,7 +100,7 @@ fn full_tested_match() -> () {\n         _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:17:20: 17:26\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:17:25: 17:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:17:25: 17:26\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:15:13: 19:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:17:25: 17:26\n     }\n \n     bb10: {"}, {"sha": "9913d179edde64a5fe1096cf5cbb386426fac02b", "filename": "src/test/mir-opt/match_false_edges.full_tested_match2.PromoteTemps.before.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match2.PromoteTemps.before.mir?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -27,8 +27,8 @@ fn full_tested_match2() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         _2 = Option::<i32>::Some(const 42_i32); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n         FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n-        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n-        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:27:9: 27:16\n+        _3 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:26:19: 26:27\n+        switchInt(move _3) -> [0_isize: bb1, 1_isize: bb2, otherwise: bb4]; // scope 0 at $DIR/match_false_edges.rs:26:13: 26:27\n     }\n \n     bb1: {\n@@ -47,7 +47,7 @@ fn full_tested_match2() -> () {\n         _1 = (const 2_i32, move _10);    // scope 3 at $DIR/match_false_edges.rs:29:20: 29:26\n         StorageDead(_10);                // scope 3 at $DIR/match_false_edges.rs:29:25: 29:26\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:29:25: 29:26\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:29:25: 29:26\n     }\n \n     bb4: {\n@@ -81,7 +81,7 @@ fn full_tested_match2() -> () {\n         StorageDead(_8);                 // scope 2 at $DIR/match_false_edges.rs:27:36: 27:37\n         StorageDead(_5);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:27:36: 27:37\n     }\n \n     bb8: {\n@@ -92,7 +92,7 @@ fn full_tested_match2() -> () {\n \n     bb9: {\n         _1 = (const 3_i32, const 3_i32); // scope 0 at $DIR/match_false_edges.rs:28:17: 28:23\n-        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:26:13: 30:6\n+        goto -> bb10;                    // scope 0 at $DIR/match_false_edges.rs:28:17: 28:23\n     }\n \n     bb10: {"}, {"sha": "9113d9d318941eed8d8c3c544c75656dfda92d88", "filename": "src/test/mir-opt/match_false_edges.main.PromoteTemps.before.mir", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.main.PromoteTemps.before.mir?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -38,8 +38,8 @@ fn main() -> () {\n         StorageLive(_2);                 // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         _2 = Option::<i32>::Some(const 1_i32); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n         FakeRead(ForMatchedPlace(None), _2); // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n-        _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n-        switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/match_false_edges.rs:36:9: 36:17\n+        _4 = discriminant(_2);           // scope 0 at $DIR/match_false_edges.rs:35:19: 35:26\n+        switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/match_false_edges.rs:35:13: 35:26\n     }\n \n     bb1: {\n@@ -55,7 +55,7 @@ fn main() -> () {\n         _14 = _2;                        // scope 0 at $DIR/match_false_edges.rs:39:9: 39:11\n         _1 = const 4_i32;                // scope 5 at $DIR/match_false_edges.rs:39:15: 39:16\n         StorageDead(_14);                // scope 0 at $DIR/match_false_edges.rs:39:15: 39:16\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:39:15: 39:16\n     }\n \n     bb4: {\n@@ -86,7 +86,7 @@ fn main() -> () {\n         _1 = const 1_i32;                // scope 2 at $DIR/match_false_edges.rs:36:32: 36:33\n         StorageDead(_6);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n         StorageDead(_7);                 // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:36:32: 36:33\n     }\n \n     bb8: {\n@@ -100,7 +100,7 @@ fn main() -> () {\n         _9 = _2;                         // scope 0 at $DIR/match_false_edges.rs:37:9: 37:11\n         _1 = const 2_i32;                // scope 3 at $DIR/match_false_edges.rs:37:15: 37:16\n         StorageDead(_9);                 // scope 0 at $DIR/match_false_edges.rs:37:15: 37:16\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:37:15: 37:16\n     }\n \n     bb10: {\n@@ -130,7 +130,7 @@ fn main() -> () {\n         _1 = const 3_i32;                // scope 4 at $DIR/match_false_edges.rs:38:33: 38:34\n         StorageDead(_10);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n         StorageDead(_11);                // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n-        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:35:13: 40:6\n+        goto -> bb14;                    // scope 0 at $DIR/match_false_edges.rs:38:33: 38:34\n     }\n \n     bb13: {"}, {"sha": "4dab5b4c1ef9e1da4850ac04f8d622ab15620394", "filename": "src/test/mir-opt/match_test.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_test.main.SimplifyCfg-initial.after.mir?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -42,7 +42,7 @@ fn main() -> () {\n \n     bb3: {\n         _3 = const 3_i32;                // scope 2 at $DIR/match_test.rs:16:14: 16:15\n-        goto -> bb14;                    // scope 2 at $DIR/match_test.rs:12:5: 17:6\n+        goto -> bb14;                    // scope 2 at $DIR/match_test.rs:16:14: 16:15\n     }\n \n     bb4: {\n@@ -60,7 +60,7 @@ fn main() -> () {\n     }\n \n     bb7: {\n-        switchInt(_1) -> [-1_i32: bb8, otherwise: bb3]; // scope 2 at $DIR/match_test.rs:15:9: 15:11\n+        switchInt(_1) -> [-1_i32: bb8, otherwise: bb3]; // scope 2 at $DIR/match_test.rs:12:5: 12:12\n     }\n \n     bb8: {\n@@ -78,7 +78,7 @@ fn main() -> () {\n         StorageDead(_9);                 // scope 2 at $DIR/match_test.rs:13:23: 13:24\n         FakeRead(ForMatchGuard, _8);     // scope 2 at $DIR/match_test.rs:13:18: 13:19\n         _3 = const 0_i32;                // scope 2 at $DIR/match_test.rs:13:23: 13:24\n-        goto -> bb14;                    // scope 2 at $DIR/match_test.rs:12:5: 17:6\n+        goto -> bb14;                    // scope 2 at $DIR/match_test.rs:13:23: 13:24\n     }\n \n     bb11: {\n@@ -88,12 +88,12 @@ fn main() -> () {\n \n     bb12: {\n         _3 = const 1_i32;                // scope 2 at $DIR/match_test.rs:14:20: 14:21\n-        goto -> bb14;                    // scope 2 at $DIR/match_test.rs:12:5: 17:6\n+        goto -> bb14;                    // scope 2 at $DIR/match_test.rs:14:20: 14:21\n     }\n \n     bb13: {\n         _3 = const 2_i32;                // scope 2 at $DIR/match_test.rs:15:15: 15:16\n-        goto -> bb14;                    // scope 2 at $DIR/match_test.rs:12:5: 17:6\n+        goto -> bb14;                    // scope 2 at $DIR/match_test.rs:15:15: 15:16\n     }\n \n     bb14: {"}, {"sha": "d164f62c580f72206b8cbfdd36cae25a26bb877e", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.32bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -10,7 +10,7 @@\n       let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:36:9: 36:10\n       let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:36:12: 36:13\n       let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:36:15: 36:16\n-+     let mut _11: i32;                    // in scope 0 at $DIR/matches_reduce_branches.rs:20:9: 20:10\n++     let mut _11: i32;                    // in scope 0 at $DIR/matches_reduce_branches.rs:19:5: 19:12\n       scope 1 {\n           debug a => _2;                   // in scope 1 at $DIR/matches_reduce_branches.rs:14:9: 14:10\n           let _3: bool;                    // in scope 1 at $DIR/matches_reduce_branches.rs:15:9: 15:10\n@@ -33,31 +33,31 @@\n           StorageLive(_4);                 // scope 2 at $DIR/matches_reduce_branches.rs:16:9: 16:10\n           StorageLive(_5);                 // scope 3 at $DIR/matches_reduce_branches.rs:17:9: 17:10\n           StorageLive(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:19:5: 34:6\n--         switchInt(_1) -> [7_i32: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:20:9: 20:10\n+-         switchInt(_1) -> [7_i32: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:19:5: 19:12\n -     }\n - \n -     bb1: {\n -         _2 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:28:13: 28:21\n -         _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:29:13: 29:22\n -         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:30:13: 30:22\n -         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:31:13: 31:21\n--         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:19:5: 34:6\n+-         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:32:13: 32:15\n -     }\n - \n -     bb2: {\n -         _2 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:22\n -         _3 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n-+         StorageLive(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:20:9: 20:10\n-+         _11 = _1;                        // scope 4 at $DIR/matches_reduce_branches.rs:20:9: 20:10\n++         StorageLive(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:19:5: 19:12\n++         _11 = _1;                        // scope 4 at $DIR/matches_reduce_branches.rs:19:5: 19:12\n +         _2 = Ne(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:22\n +         _3 = Eq(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n           _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:23:13: 23:22\n           _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:24:13: 24:21\n--         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:19:5: 34:6\n+-         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:25:13: 25:15\n -     }\n - \n -     bb3: {\n-+         StorageDead(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:20:9: 20:10\n++         StorageDead(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:19:5: 19:12\n           StorageDead(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:34:6: 34:7\n           StorageLive(_7);                 // scope 4 at $DIR/matches_reduce_branches.rs:36:6: 36:7\n           _7 = _2;                         // scope 4 at $DIR/matches_reduce_branches.rs:36:6: 36:7"}, {"sha": "d164f62c580f72206b8cbfdd36cae25a26bb877e", "filename": "src/test/mir-opt/matches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.bar.MatchBranchSimplification.64bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -10,7 +10,7 @@\n       let mut _8: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:36:9: 36:10\n       let mut _9: bool;                    // in scope 0 at $DIR/matches_reduce_branches.rs:36:12: 36:13\n       let mut _10: bool;                   // in scope 0 at $DIR/matches_reduce_branches.rs:36:15: 36:16\n-+     let mut _11: i32;                    // in scope 0 at $DIR/matches_reduce_branches.rs:20:9: 20:10\n++     let mut _11: i32;                    // in scope 0 at $DIR/matches_reduce_branches.rs:19:5: 19:12\n       scope 1 {\n           debug a => _2;                   // in scope 1 at $DIR/matches_reduce_branches.rs:14:9: 14:10\n           let _3: bool;                    // in scope 1 at $DIR/matches_reduce_branches.rs:15:9: 15:10\n@@ -33,31 +33,31 @@\n           StorageLive(_4);                 // scope 2 at $DIR/matches_reduce_branches.rs:16:9: 16:10\n           StorageLive(_5);                 // scope 3 at $DIR/matches_reduce_branches.rs:17:9: 17:10\n           StorageLive(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:19:5: 34:6\n--         switchInt(_1) -> [7_i32: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:20:9: 20:10\n+-         switchInt(_1) -> [7_i32: bb2, otherwise: bb1]; // scope 4 at $DIR/matches_reduce_branches.rs:19:5: 19:12\n -     }\n - \n -     bb1: {\n -         _2 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:28:13: 28:21\n -         _3 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:29:13: 29:22\n -         _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:30:13: 30:22\n -         _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:31:13: 31:21\n--         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:19:5: 34:6\n+-         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:32:13: 32:15\n -     }\n - \n -     bb2: {\n -         _2 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:22\n -         _3 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n-+         StorageLive(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:20:9: 20:10\n-+         _11 = _1;                        // scope 4 at $DIR/matches_reduce_branches.rs:20:9: 20:10\n++         StorageLive(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:19:5: 19:12\n++         _11 = _1;                        // scope 4 at $DIR/matches_reduce_branches.rs:19:5: 19:12\n +         _2 = Ne(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:21:13: 21:22\n +         _3 = Eq(_11, const 7_i32);       // scope 4 at $DIR/matches_reduce_branches.rs:22:13: 22:21\n           _4 = const false;                // scope 4 at $DIR/matches_reduce_branches.rs:23:13: 23:22\n           _5 = const true;                 // scope 4 at $DIR/matches_reduce_branches.rs:24:13: 24:21\n--         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:19:5: 34:6\n+-         goto -> bb3;                     // scope 4 at $DIR/matches_reduce_branches.rs:25:13: 25:15\n -     }\n - \n -     bb3: {\n-+         StorageDead(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:20:9: 20:10\n++         StorageDead(_11);                // scope 4 at $DIR/matches_reduce_branches.rs:19:5: 19:12\n           StorageDead(_6);                 // scope 4 at $DIR/matches_reduce_branches.rs:34:6: 34:7\n           StorageLive(_7);                 // scope 4 at $DIR/matches_reduce_branches.rs:36:6: 36:7\n           _7 = _2;                         // scope 4 at $DIR/matches_reduce_branches.rs:36:6: 36:7"}, {"sha": "29f66ceac981e75c6372b06688d9006954dbdc5f", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.32bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -5,11 +5,11 @@\n       debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:7:8: 7:11\n       let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:7:25: 7:25\n       let mut _2: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n-+     let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n++     let mut _3: isize;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n--         switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n+          _2 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:8:17: 8:20\n+-         switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     }\n - \n -     bb1: {\n@@ -21,9 +21,9 @@\n -     }\n - \n -     bb3: {\n-+         StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n-+         _3 = move _2;                    // scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n-+         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n++         StorageLive(_3);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         _3 = move _2;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         StorageDead(_3);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           return;                          // scope 0 at $DIR/matches_reduce_branches.rs:11:2: 11:2\n       }\n   }"}, {"sha": "29f66ceac981e75c6372b06688d9006954dbdc5f", "filename": "src/test/mir-opt/matches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.foo.MatchBranchSimplification.64bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -5,11 +5,11 @@\n       debug bar => _1;                     // in scope 0 at $DIR/matches_reduce_branches.rs:7:8: 7:11\n       let mut _0: ();                      // return place in scope 0 at $DIR/matches_reduce_branches.rs:7:25: 7:25\n       let mut _2: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n-+     let mut _3: isize;                   // in scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n++     let mut _3: isize;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n--         switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n+          _2 = discriminant(_1);           // scope 0 at $DIR/matches_reduce_branches.rs:8:17: 8:20\n+-         switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n -     }\n - \n -     bb1: {\n@@ -21,9 +21,9 @@\n -     }\n - \n -     bb3: {\n-+         StorageLive(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n-+         _3 = move _2;                    // scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n-+         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:8:22: 8:26\n++         StorageLive(_3);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         _3 = move _2;                    // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n++         StorageDead(_3);                 // scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           return;                          // scope 0 at $DIR/matches_reduce_branches.rs:11:2: 11:2\n       }\n   }"}, {"sha": "4ce1b57b9a3adbebdb19682eecd68e6b9d0d541e", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.32bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -90,13 +90,13 @@\n +         _10 = move _3;                   // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n           StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:48:9: 48:10\n -         _1 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:47:13: 47:17\n--         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 50:6\n+-         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:47:13: 47:17\n -     }\n - \n -     bb11: {\n -         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:48:9: 48:10\n -         _1 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n--         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 50:6\n+-         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n -     }\n - \n -     bb12: {"}, {"sha": "4ce1b57b9a3adbebdb19682eecd68e6b9d0d541e", "filename": "src/test/mir-opt/matches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_reduce_branches.match_nested_if.MatchBranchSimplification.64bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -90,13 +90,13 @@\n +         _10 = move _3;                   // scope 0 at $DIR/matches_reduce_branches.rs:41:15: 45:10\n           StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:48:9: 48:10\n -         _1 = const true;                 // scope 0 at $DIR/matches_reduce_branches.rs:47:13: 47:17\n--         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 50:6\n+-         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:47:13: 47:17\n -     }\n - \n -     bb11: {\n -         StorageDead(_3);                 // scope 0 at $DIR/matches_reduce_branches.rs:48:9: 48:10\n -         _1 = const false;                // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n--         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:40:15: 50:6\n+-         goto -> bb12;                    // scope 0 at $DIR/matches_reduce_branches.rs:49:14: 49:19\n -     }\n - \n -     bb12: {"}, {"sha": "711cc31f49f98cc7eea0e5e900e37abcb832e44d", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.32bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -7,18 +7,18 @@\n       let mut _2: isize;                   // in scope 0 at $DIR/matches_u8.rs:13:9: 13:13\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:13:9: 13:13\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:13:9: 13:13\n+          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:12:11: 12:12\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:12:5: 12:12\n       }\n   \n       bb1: {\n           _0 = const 1_u8;                 // scope 0 at $DIR/matches_u8.rs:14:17: 14:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:12:5: 15:6\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:14:17: 14:18\n       }\n   \n       bb2: {\n           _0 = const 0_u8;                 // scope 0 at $DIR/matches_u8.rs:13:17: 13:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:12:5: 15:6\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:13:17: 13:18\n       }\n   \n       bb3: {"}, {"sha": "711cc31f49f98cc7eea0e5e900e37abcb832e44d", "filename": "src/test/mir-opt/matches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match.MatchBranchSimplification.64bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -7,18 +7,18 @@\n       let mut _2: isize;                   // in scope 0 at $DIR/matches_u8.rs:13:9: 13:13\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:13:9: 13:13\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:13:9: 13:13\n+          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:12:11: 12:12\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:12:5: 12:12\n       }\n   \n       bb1: {\n           _0 = const 1_u8;                 // scope 0 at $DIR/matches_u8.rs:14:17: 14:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:12:5: 15:6\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:14:17: 14:18\n       }\n   \n       bb2: {\n           _0 = const 0_u8;                 // scope 0 at $DIR/matches_u8.rs:13:17: 13:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:12:5: 15:6\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:13:17: 13:18\n       }\n   \n       bb3: {"}, {"sha": "6bdeccbf913e65ce593cc233ed47feda300be2fe", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.32bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.32bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -7,18 +7,18 @@\n       let mut _2: isize;                   // in scope 0 at $DIR/matches_u8.rs:21:9: 21:13\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:21:9: 21:13\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:21:9: 21:13\n+          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:20:11: 20:12\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:20:5: 20:12\n       }\n   \n       bb1: {\n           _0 = const 1_i8;                 // scope 0 at $DIR/matches_u8.rs:22:17: 22:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:20:5: 23:6\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:22:17: 22:18\n       }\n   \n       bb2: {\n           _0 = const 0_i8;                 // scope 0 at $DIR/matches_u8.rs:21:17: 21:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:20:5: 23:6\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:21:17: 21:18\n       }\n   \n       bb3: {"}, {"sha": "6bdeccbf913e65ce593cc233ed47feda300be2fe", "filename": "src/test/mir-opt/matches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatches_u8.exhaustive_match_i8.MatchBranchSimplification.64bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -7,18 +7,18 @@\n       let mut _2: isize;                   // in scope 0 at $DIR/matches_u8.rs:21:9: 21:13\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:21:9: 21:13\n-          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:21:9: 21:13\n+          _2 = discriminant(_1);           // scope 0 at $DIR/matches_u8.rs:20:11: 20:12\n+          switchInt(move _2) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/matches_u8.rs:20:5: 20:12\n       }\n   \n       bb1: {\n           _0 = const 1_i8;                 // scope 0 at $DIR/matches_u8.rs:22:17: 22:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:20:5: 23:6\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:22:17: 22:18\n       }\n   \n       bb2: {\n           _0 = const 0_i8;                 // scope 0 at $DIR/matches_u8.rs:21:17: 21:18\n-          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:20:5: 23:6\n+          goto -> bb3;                     // scope 0 at $DIR/matches_u8.rs:21:17: 21:18\n       }\n   \n       bb3: {"}, {"sha": "cc4457cc5f3ff77f09a63da8662b46c568b323aa", "filename": "src/test/mir-opt/no_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fno_drop_for_inactive_variant.unwrap.SimplifyCfg-elaborate-drops.after.mir?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -14,8 +14,8 @@ fn unwrap(_1: Option<T>) -> T {\n     }\n \n     bb0: {\n-        _2 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n-        switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/no-drop-for-inactive-variant.rs:9:9: 9:16\n+        _2 = discriminant(_1);           // scope 0 at $DIR/no-drop-for-inactive-variant.rs:8:11: 8:14\n+        switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/no-drop-for-inactive-variant.rs:8:5: 8:14\n     }\n \n     bb1: {"}, {"sha": "52b5611e905fa9152edd20a6612ff73e1450a5d4", "filename": "src/test/mir-opt/remove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -15,17 +15,17 @@\n       bb0: {\n -         FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n-          _3 = discriminant(_1);           // scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n-          switchInt(move _3) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:8:9: 8:16\n+          _3 = discriminant(_1);           // scope 0 at $DIR/remove_fake_borrows.rs:7:11: 7:12\n+          switchInt(move _3) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:7:5: 7:12\n       }\n   \n       bb1: {\n           _0 = const 1_i32;                // scope 0 at $DIR/remove_fake_borrows.rs:9:14: 9:15\n-          goto -> bb7;                     // scope 0 at $DIR/remove_fake_borrows.rs:7:5: 10:6\n+          goto -> bb7;                     // scope 0 at $DIR/remove_fake_borrows.rs:9:14: 9:15\n       }\n   \n       bb2: {\n-          switchInt((*(*((_1 as Some).0: &&i32)))) -> [0_i32: bb3, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:8:14: 8:15\n+          switchInt((*(*((_1 as Some).0: &&i32)))) -> [0_i32: bb3, otherwise: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:7:5: 7:12\n       }\n   \n       bb3: {\n@@ -57,7 +57,7 @@\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n +         nop;                             // scope 0 at $DIR/remove_fake_borrows.rs:8:20: 8:21\n           _0 = const 0_i32;                // scope 0 at $DIR/remove_fake_borrows.rs:8:25: 8:26\n-          goto -> bb7;                     // scope 0 at $DIR/remove_fake_borrows.rs:7:5: 10:6\n+          goto -> bb7;                     // scope 0 at $DIR/remove_fake_borrows.rs:8:25: 8:26\n       }\n   \n       bb6: {"}, {"sha": "6d6c2721973f80374c489324889c8d7f2f9fb097", "filename": "src/test/mir-opt/remove_storage_markers.main.RemoveStorageMarkers.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_storage_markers.main.RemoveStorageMarkers.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -115,8 +115,8 @@\n       bb4: {\n -         StorageDead(_18);                // scope 7 at $DIR/remove_storage_markers.rs:8:14: 8:19\n -         StorageDead(_9);                 // scope 3 at $DIR/remove_storage_markers.rs:8:18: 8:19\n-          _11 = discriminant(_8);          // scope 3 at $DIR/remove_storage_markers.rs:8:9: 8:10\n-          switchInt(move _11) -> [0_isize: bb2, otherwise: bb3]; // scope 3 at $DIR/remove_storage_markers.rs:8:9: 8:10\n+          _11 = discriminant(_8);          // scope 3 at $DIR/remove_storage_markers.rs:8:14: 8:19\n+          switchInt(move _11) -> [0_isize: bb2, otherwise: bb3]; // scope 3 at $DIR/remove_storage_markers.rs:8:14: 8:19\n       }\n   }\n   "}, {"sha": "d5190cdb0c7def75efcfd47b5e4aef4e0baa81c2", "filename": "src/test/mir-opt/separate_const_switch.identity.ConstProp.diff", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -110,10 +110,10 @@\n           StorageDead(_13);                // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n--         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n--         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-+         _5 = const 1_isize;              // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-+         switchInt(const 1_isize) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+-         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+-         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n++         _5 = const 1_isize;              // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n++         switchInt(const 1_isize) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n       }\n   \n       bb4: {\n@@ -131,10 +131,10 @@\n           StorageDead(_11);                // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n--         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n--         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-+         _5 = const 0_isize;              // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-+         switchInt(const 0_isize) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+-         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+-         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n++         _5 = const 0_isize;              // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n++         switchInt(const 0_isize) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n       }\n   }\n   "}, {"sha": "69f3bec6fea25b4de91b4d303692d7221a2b71de", "filename": "src/test/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -64,8 +64,8 @@\n       bb1: {\n -         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n -         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n--         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n--         switchInt(move _5) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n+-         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n+-         switchInt(move _5) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n -     }\n - \n -     bb2: {\n@@ -121,8 +121,8 @@\n -         goto -> bb1;                     // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n +         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n +         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-+         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-+         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n++         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n++         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n       }\n   \n -     bb5: {\n@@ -143,8 +143,8 @@\n -         goto -> bb1;                     // scope 5 at $DIR/separate_const_switch.rs:29:8: 29:10\n +         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n +         StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-+         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n-+         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:9: 29:10\n++         _5 = discriminant(_3);           // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n++         switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/separate_const_switch.rs:29:8: 29:10\n       }\n   }\n   "}, {"sha": "5316c34fb37d1151377d85bc93c9d1f3dad0225d", "filename": "src/test/mir-opt/separate_const_switch.too_complex.ConstProp.diff", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.ConstProp.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -29,8 +29,8 @@\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:14:11: 19:6\n-          _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:16:13: 16:18\n-          switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/separate_const_switch.rs:16:13: 16:18\n+          _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:15:15: 15:16\n+          switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/separate_const_switch.rs:15:9: 15:16\n       }\n   \n       bb1: {\n@@ -42,10 +42,10 @@\n           discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n           StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:43: 17:44\n           StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:17:43: 17:44\n--         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:20:9: 20:33\n--         switchInt(move _8) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:20:9: 20:33\n-+         _8 = const 1_isize;              // scope 0 at $DIR/separate_const_switch.rs:20:9: 20:33\n-+         switchInt(const 1_isize) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:20:9: 20:33\n+-         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:14:11: 19:6\n+-         switchInt(move _8) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:14:5: 19:6\n++         _8 = const 1_isize;              // scope 0 at $DIR/separate_const_switch.rs:14:11: 19:6\n++         switchInt(const 1_isize) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:14:5: 19:6\n       }\n   \n       bb2: {\n@@ -57,18 +57,18 @@\n           discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n           StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:45: 16:46\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:16:45: 16:46\n--         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:20:9: 20:33\n--         switchInt(move _8) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:20:9: 20:33\n-+         _8 = const 0_isize;              // scope 0 at $DIR/separate_const_switch.rs:20:9: 20:33\n-+         switchInt(const 0_isize) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:20:9: 20:33\n+-         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:14:11: 19:6\n+-         switchInt(move _8) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:14:5: 19:6\n++         _8 = const 0_isize;              // scope 0 at $DIR/separate_const_switch.rs:14:11: 19:6\n++         switchInt(const 0_isize) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:14:5: 19:6\n       }\n   \n       bb3: {\n           StorageLive(_11);                // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n           _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n           discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n           StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n-          goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:14:5: 22:6\n+          goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n       }\n   \n       bb4: {\n@@ -80,7 +80,7 @@\n           discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n           StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:20:43: 20:44\n           StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:20:43: 20:44\n-          goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:14:5: 22:6\n+          goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:20:43: 20:44\n       }\n   \n       bb5: {"}, {"sha": "38ad12157e279cf1f1ca128c4cf3e632a37672d1", "filename": "src/test/mir-opt/separate_const_switch.too_complex.PreCodegen.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.PreCodegen.after.mir?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -27,8 +27,8 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n \n     bb0: {\n         StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:14:11: 19:6\n-        _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:16:13: 16:18\n-        switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/separate_const_switch.rs:16:13: 16:18\n+        _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:15:15: 15:16\n+        switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/separate_const_switch.rs:15:9: 15:16\n     }\n \n     bb1: {\n@@ -44,7 +44,7 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n         _10 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n         discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n         StorageDead(_10);                // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n-        goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:14:5: 22:6\n+        goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n     }\n \n     bb2: {\n@@ -64,7 +64,7 @@ fn too_complex(_1: Result<i32, usize>) -> Option<i32> {\n         discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n         StorageDead(_9);                 // scope 3 at $DIR/separate_const_switch.rs:20:43: 20:44\n         StorageDead(_8);                 // scope 0 at $DIR/separate_const_switch.rs:20:43: 20:44\n-        goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:14:5: 22:6\n+        goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:20:43: 20:44\n     }\n \n     bb3: {"}, {"sha": "0b5b9a490c62b07e7d8597633563e0aa9f36e1a9", "filename": "src/test/mir-opt/separate_const_switch.too_complex.SeparateConstSwitch.diff", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.too_complex.SeparateConstSwitch.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -29,8 +29,8 @@\n   \n       bb0: {\n           StorageLive(_2);                 // scope 0 at $DIR/separate_const_switch.rs:14:11: 19:6\n-          _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:16:13: 16:18\n-          switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/separate_const_switch.rs:16:13: 16:18\n+          _3 = discriminant(_1);           // scope 0 at $DIR/separate_const_switch.rs:15:15: 15:16\n+          switchInt(move _3) -> [0_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/separate_const_switch.rs:15:9: 15:16\n       }\n   \n       bb1: {\n@@ -42,9 +42,9 @@\n           discriminant(_2) = 1;            // scope 2 at $DIR/separate_const_switch.rs:17:23: 17:44\n           StorageDead(_7);                 // scope 2 at $DIR/separate_const_switch.rs:17:43: 17:44\n           StorageDead(_6);                 // scope 0 at $DIR/separate_const_switch.rs:17:43: 17:44\n--         goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:15:9: 18:10\n-+         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:20:9: 20:33\n-+         switchInt(move _8) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:20:9: 20:33\n+-         goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:17:43: 17:44\n++         _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:14:11: 19:6\n++         switchInt(move _8) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:14:5: 19:6\n       }\n   \n       bb2: {\n@@ -56,13 +56,13 @@\n           discriminant(_2) = 0;            // scope 1 at $DIR/separate_const_switch.rs:16:22: 16:46\n           StorageDead(_5);                 // scope 1 at $DIR/separate_const_switch.rs:16:45: 16:46\n           StorageDead(_4);                 // scope 0 at $DIR/separate_const_switch.rs:16:45: 16:46\n--         goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:15:9: 18:10\n+-         goto -> bb3;                     // scope 0 at $DIR/separate_const_switch.rs:16:45: 16:46\n -     }\n - \n -     bb3: {\n-          _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:20:9: 20:33\n--         switchInt(move _8) -> [0_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/separate_const_switch.rs:20:9: 20:33\n-+         switchInt(move _8) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:20:9: 20:33\n+          _8 = discriminant(_2);           // scope 0 at $DIR/separate_const_switch.rs:14:11: 19:6\n+-         switchInt(move _8) -> [0_isize: bb5, otherwise: bb4]; // scope 0 at $DIR/separate_const_switch.rs:14:5: 19:6\n++         switchInt(move _8) -> [0_isize: bb4, otherwise: bb3]; // scope 0 at $DIR/separate_const_switch.rs:14:5: 19:6\n       }\n   \n -     bb4: {\n@@ -71,8 +71,8 @@\n           _11 = ((_2 as Break).0: usize);  // scope 0 at $DIR/separate_const_switch.rs:21:28: 21:29\n           discriminant(_0) = 0;            // scope 4 at $DIR/separate_const_switch.rs:21:34: 21:38\n           StorageDead(_11);                // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n--         goto -> bb6;                     // scope 0 at $DIR/separate_const_switch.rs:14:5: 22:6\n-+         goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:14:5: 22:6\n+-         goto -> bb6;                     // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n++         goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:21:37: 21:38\n       }\n   \n -     bb5: {\n@@ -85,8 +85,8 @@\n           discriminant(_0) = 1;            // scope 3 at $DIR/separate_const_switch.rs:20:37: 20:44\n           StorageDead(_10);                // scope 3 at $DIR/separate_const_switch.rs:20:43: 20:44\n           StorageDead(_9);                 // scope 0 at $DIR/separate_const_switch.rs:20:43: 20:44\n--         goto -> bb6;                     // scope 0 at $DIR/separate_const_switch.rs:14:5: 22:6\n-+         goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:14:5: 22:6\n+-         goto -> bb6;                     // scope 0 at $DIR/separate_const_switch.rs:20:43: 20:44\n++         goto -> bb5;                     // scope 0 at $DIR/separate_const_switch.rs:20:43: 20:44\n       }\n   \n -     bb6: {"}, {"sha": "c189c18d2d0e741414580ee9ecb92907a77f27c3", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.32bit.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.32bit.mir?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -6,7 +6,7 @@ fn match_bool(_1: bool) -> usize {\n \n     bb0: {\n         FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n-        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:6:5: 6:12\n     }\n \n     bb1: {\n@@ -15,12 +15,12 @@ fn match_bool(_1: bool) -> usize {\n \n     bb2: {\n         _0 = const 20_usize;             // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n     }\n \n     bb3: {\n         _0 = const 10_usize;             // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n     }\n \n     bb4: {"}, {"sha": "c189c18d2d0e741414580ee9ecb92907a77f27c3", "filename": "src/test/mir-opt/simple_match.match_bool.mir_map.0.64bit.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimple_match.match_bool.mir_map.0.64bit.mir?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -6,7 +6,7 @@ fn match_bool(_1: bool) -> usize {\n \n     bb0: {\n         FakeRead(ForMatchedPlace(None), _1); // scope 0 at $DIR/simple-match.rs:6:11: 6:12\n-        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:7:9: 7:13\n+        switchInt(_1) -> [false: bb2, otherwise: bb1]; // scope 0 at $DIR/simple-match.rs:6:5: 6:12\n     }\n \n     bb1: {\n@@ -15,12 +15,12 @@ fn match_bool(_1: bool) -> usize {\n \n     bb2: {\n         _0 = const 20_usize;             // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:8:14: 8:16\n     }\n \n     bb3: {\n         _0 = const 10_usize;             // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n-        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:6:5: 9:6\n+        goto -> bb4;                     // scope 0 at $DIR/simple-match.rs:7:17: 7:19\n     }\n \n     bb4: {"}, {"sha": "ad47891294a08af16169a922fe78420aade20935", "filename": "src/test/mir-opt/simplify_arm.id.SimplifyArmIdentity.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyArmIdentity.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -13,13 +13,13 @@\n       }\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n-          switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:10:11: 10:12\n+          switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:10:5: 10:12\n       }\n   \n       bb1: {\n           discriminant(_0) = 0;            // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n       }\n   \n       bb2: {\n@@ -36,7 +36,7 @@\n -         StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:11:26: 11:27\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n +         _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n       }\n   \n       bb4: {"}, {"sha": "52c036a77007c31d3f458f6b4e1c6acce76890ee", "filename": "src/test/mir-opt/simplify_arm.id.SimplifyBranchSame.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id.SimplifyBranchSame.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -12,14 +12,14 @@\n       }\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n--         switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n-+         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:11:9: 11:16\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:10:11: 10:12\n+-         switchInt(move _2) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:10:5: 10:12\n++         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 10:12\n       }\n   \n       bb1: {\n -         discriminant(_0) = 0;            // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:12:17: 12:21\n -     }\n - \n -     bb2: {\n@@ -28,8 +28,8 @@\n - \n -     bb3: {\n           _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:11:20: 11:27\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n-+         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:10:5: 13:6\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n++         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:11:26: 11:27\n       }\n   \n -     bb4: {"}, {"sha": "b24bdea9b715d9f308ee6f07933085eda44cdf48", "filename": "src/test/mir-opt/simplify_arm.id_result.SimplifyArmIdentity.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyArmIdentity.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -19,8 +19,8 @@\n       }\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n-          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:17:11: 17:12\n+          switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:17:5: 17:12\n       }\n   \n       bb1: {\n@@ -33,7 +33,7 @@\n -         StorageDead(_6);                 // scope 2 at $DIR/simplify-arm.rs:19:24: 19:25\n -         StorageDead(_5);                 // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n +         _0 = move _1;                    // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n       }\n   \n       bb2: {\n@@ -50,7 +50,7 @@\n -         StorageDead(_4);                 // scope 1 at $DIR/simplify-arm.rs:18:22: 18:23\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n +         _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n-          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n+          goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n       }\n   \n       bb4: {"}, {"sha": "4d6a4edb08ae5f9070e905df0431e83933e1d29c", "filename": "src/test/mir-opt/simplify_arm.id_result.SimplifyBranchSame.diff", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_result.SimplifyBranchSame.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -17,14 +17,14 @@\n       }\n   \n       bb0: {\n-          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n--         switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n-+         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:18:9: 18:14\n+          _2 = discriminant(_1);           // scope 0 at $DIR/simplify-arm.rs:17:11: 17:12\n+-         switchInt(move _2) -> [0_isize: bb3, 1_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:17:5: 17:12\n++         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 17:12\n       }\n   \n       bb1: {\n -         _0 = move _1;                    // scope 2 at $DIR/simplify-arm.rs:19:19: 19:25\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:19:24: 19:25\n -     }\n - \n -     bb2: {\n@@ -33,8 +33,8 @@\n - \n -     bb3: {\n           _0 = move _1;                    // scope 1 at $DIR/simplify-arm.rs:18:18: 18:23\n--         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n-+         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:17:5: 20:6\n+-         goto -> bb4;                     // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n++         goto -> bb2;                     // scope 0 at $DIR/simplify-arm.rs:18:22: 18:23\n       }\n   \n -     bb4: {"}, {"sha": "272a6756f39f2e5852bfaf432ce5a2c07463faf8", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -45,8 +45,8 @@\n           _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n           _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:36:19: 36:33\n           StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:32: 36:33\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n-          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n+          switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:36:13: 36:33\n       }\n   \n       bb1: {"}, {"sha": "651a37f5a97223e4523618d8b8283037efff639c", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -40,9 +40,9 @@\n           _4 = _1;                         // scope 0 at $DIR/simplify-arm.rs:36:31: 36:32\n           _3 = move _4;                    // scope 4 at $DIR/simplify-arm.rs:36:19: 36:33\n           StorageDead(_4);                 // scope 0 at $DIR/simplify-arm.rs:36:32: 36:33\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n--         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n-+         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:37:9: 37:15\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify-arm.rs:36:19: 36:33\n+-         switchInt(move _5) -> [0_isize: bb1, 1_isize: bb3, otherwise: bb2]; // scope 0 at $DIR/simplify-arm.rs:36:13: 36:33\n++         goto -> bb1;                     // scope 0 at $DIR/simplify-arm.rs:36:13: 36:33\n       }\n   \n       bb1: {"}, {"sha": "512d9fe172b9fde0d1556aa0907ac270625b58a8", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.32bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -22,14 +22,14 @@\n           ((_1 as Foo).0: u8) = const 0_u8; // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n-          _3 = const 0_isize;              // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n-          goto -> bb3;                     // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n+          _3 = const 0_isize;              // scope 1 at $DIR/simplify-arm-identity.rs:19:24: 19:25\n+          goto -> bb3;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 19:25\n       }\n   \n       bb1: {\n           ((_2 as Foo).0: u8) = const 0_u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n-          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n+          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n       }\n   \n       bb2: {\n@@ -45,7 +45,7 @@\n           discriminant(_2) = 0;            // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           StorageDead(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:20:34: 20:35\n           StorageDead(_4);                 // scope 1 at $DIR/simplify-arm-identity.rs:20:34: 20:35\n-          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n+          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:20:34: 20:35\n       }\n   \n       bb4: {"}, {"sha": "512d9fe172b9fde0d1556aa0907ac270625b58a8", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.64bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -22,14 +22,14 @@\n           ((_1 as Foo).0: u8) = const 0_u8; // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           discriminant(_1) = 0;            // scope 0 at $DIR/simplify-arm-identity.rs:18:18: 18:29\n           StorageLive(_2);                 // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n-          _3 = const 0_isize;              // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n-          goto -> bb3;                     // scope 1 at $DIR/simplify-arm-identity.rs:20:9: 20:20\n+          _3 = const 0_isize;              // scope 1 at $DIR/simplify-arm-identity.rs:19:24: 19:25\n+          goto -> bb3;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 19:25\n       }\n   \n       bb1: {\n           ((_2 as Foo).0: u8) = const 0_u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n-          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n+          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n       }\n   \n       bb2: {\n@@ -45,7 +45,7 @@\n           discriminant(_2) = 0;            // scope 3 at $DIR/simplify-arm-identity.rs:20:24: 20:35\n           StorageDead(_5);                 // scope 3 at $DIR/simplify-arm-identity.rs:20:34: 20:35\n           StorageDead(_4);                 // scope 1 at $DIR/simplify-arm-identity.rs:20:34: 20:35\n-          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n+          goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:20:34: 20:35\n       }\n   \n       bb4: {"}, {"sha": "381f4056cc87d5273ca7f64b84536fcf4a1c49e5", "filename": "src/test/mir-opt/simplify_locals_fixedpoint.foo.SimplifyLocals.diff", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_fixedpoint.foo.SimplifyLocals.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -25,13 +25,13 @@\n           (_1.1: std::option::Option<T>) = move _3; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:30: 4:69\n           StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n           StorageDead(_2);                 // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:68: 4:69\n-          _5 = discriminant((_1.0: std::option::Option<u8>)); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n-          switchInt(move _5) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:13: 4:20\n+          _5 = discriminant((_1.0: std::option::Option<u8>)); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n+          switchInt(move _5) -> [1_isize: bb1, otherwise: bb3]; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n       }\n   \n       bb1: {\n-          _4 = discriminant((_1.1: std::option::Option<T>)); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n-          switchInt(move _4) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:22: 4:26\n+          _4 = discriminant((_1.1: std::option::Option<T>)); // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n+          switchInt(move _4) -> [0_isize: bb2, otherwise: bb3]; // scope 0 at $DIR/simplify-locals-fixedpoint.rs:4:12: 4:27\n       }\n   \n       bb2: {"}, {"sha": "e139eedf3a0d627df07506ee1c9334e7f35fa080", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.32bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -15,9 +15,9 @@\n       }\n   \n       bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n--         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+-         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n+-         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n+-         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n           _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n -         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2"}, {"sha": "e139eedf3a0d627df07506ee1c9334e7f35fa080", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.64bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -15,9 +15,9 @@\n       }\n   \n       bb0: {\n--         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n--         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n--         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:5:9: 5:13\n+-         _5 = const false;                // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n+-         _5 = const true;                 // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n+-         _2 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:4:11: 4:12\n           _0 = move _1;                    // scope 1 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:6:20: 6:27\n -         _6 = discriminant(_1);           // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:1: 8:2\n           return;                          // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:8:2: 8:2"}, {"sha": "1c8d043a6030c54a8d66762a6b655e4f7883694c", "filename": "src/test/mir-opt/simplify_match.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_match.main.ConstProp.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -16,13 +16,13 @@\n -         _1 = _2;                         // scope 1 at $DIR/simplify_match.rs:6:28: 6:29\n +         _1 = const false;                // scope 1 at $DIR/simplify_match.rs:6:28: 6:29\n           StorageDead(_2);                 // scope 0 at $DIR/simplify_match.rs:6:30: 6:31\n--         switchInt(_1) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:7:9: 7:13\n-+         switchInt(const false) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:7:9: 7:13\n+-         switchInt(_1) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:6:5: 6:31\n++         switchInt(const false) -> [false: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_match.rs:6:5: 6:31\n       }\n   \n       bb1: {\n           nop;                             // scope 0 at $DIR/simplify_match.rs:8:18: 8:20\n-          goto -> bb3;                     // scope 0 at $DIR/simplify_match.rs:6:5: 9:6\n+          goto -> bb3;                     // scope 0 at $DIR/simplify_match.rs:8:18: 8:20\n       }\n   \n       bb2: {"}, {"sha": "a6ea8cacfd2c5c375504c21e27e375baa6473beb", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -41,14 +41,14 @@\n -         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n -         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n -         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n--         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+-         _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n +         _0 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n +         nop;                             // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n +         nop;                             // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n-+         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n-          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n++         _5 = discriminant(_0);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+          goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:21:13: 21:33\n       }\n   \n       bb1: {"}, {"sha": "bef57548005ceee088373935c87fc62b53dbf0f7", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -45,8 +45,8 @@\n           _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n           _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n           StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n-          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n-          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+          _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+          switchInt(move _5) -> [0_isize: bb1, otherwise: bb2]; // scope 0 at $DIR/simplify_try.rs:21:13: 21:33\n       }\n   \n       bb1: {"}, {"sha": "aa19c479881aa83a98b42e6e719e88833a36b62f", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -39,8 +39,8 @@ fn try_identity(_1: Result<u32, i32>) -> Result<u32, i32> {\n         _4 = _1;                         // scope 0 at $DIR/simplify_try.rs:21:31: 21:32\n         _3 = move _4;                    // scope 4 at $DIR/simplify_try.rs:21:19: 21:33\n         StorageDead(_4);                 // scope 0 at $DIR/simplify_try.rs:21:32: 21:33\n-        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n-        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:22:9: 22:15\n+        _5 = discriminant(_3);           // scope 0 at $DIR/simplify_try.rs:21:19: 21:33\n+        goto -> bb1;                     // scope 0 at $DIR/simplify_try.rs:21:13: 21:33\n     }\n \n     bb1: {"}, {"sha": "bdcb9357308ec26fc7619b396b978e773f0be622", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -16,7 +16,7 @@ fn main() -> () {\n         StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n         discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n-        _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n+        _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n         StorageLive(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n         _5 = const \"C\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n                                          // ty::Const\n@@ -32,8 +32,8 @@ fn main() -> () {\n         StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n         StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n         discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n-        _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n-        switchInt(move _8) -> [4_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n+        _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+        switchInt(move _8) -> [4_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 26:19\n     }\n \n     bb1: {\n@@ -47,7 +47,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n         _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n         StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n-        goto -> bb3;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+        goto -> bb3;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n     }\n \n     bb2: {\n@@ -58,7 +58,7 @@ fn main() -> () {\n                                          // mir::Constant\n                                          // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n-        goto -> bb3;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+        goto -> bb3;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n     }\n \n     bb3: {"}, {"sha": "d8410caa7cd5621c524798a1af49fcc518762913", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -17,9 +17,9 @@\n           StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n           StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n           discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n-          _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n--         switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n-+         switchInt(move _3) -> bb1;       // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n+          _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+-         switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 20:19\n++         switchInt(move _3) -> bb1;       // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 20:19\n       }\n   \n       bb1: {\n@@ -33,7 +33,7 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n           _1 = &(*_5);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n           StorageDead(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n-          goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+          goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:23:23: 23:24\n       }\n   \n       bb2: {\n@@ -44,7 +44,7 @@\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n-          goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+          goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:21:24: 21:34\n       }\n   \n       bb3: {\n@@ -58,7 +58,7 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n           _1 = &(*_4);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:22:24: 22:34\n           StorageDead(_4);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:22:33: 22:34\n-          goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n+          goto -> bb4;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:22:33: 22:34\n       }\n   \n       bb4: {\n@@ -67,8 +67,8 @@\n           StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n           StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n           discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n-          _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n-          switchInt(move _8) -> [4_isize: bb6, otherwise: bb5]; // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n+          _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+          switchInt(move _8) -> [4_isize: bb6, otherwise: bb5]; // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 26:19\n       }\n   \n       bb5: {\n@@ -82,7 +82,7 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [69], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n           _6 = &(*_9);                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:21: 28:24\n           StorageDead(_9);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n-          goto -> bb7;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+          goto -> bb7;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:28:23: 28:24\n       }\n   \n       bb6: {\n@@ -93,7 +93,7 @@\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n-          goto -> bb7;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n+          goto -> bb7;                     // scope 0 at $DIR/uninhabited_enum_branching.rs:27:21: 27:24\n       }\n   \n       bb7: {"}, {"sha": "e20faa52474991f1039ae003c6dd13912de7d54d", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -29,8 +29,8 @@ fn main() -> () {\n         StorageLive(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 26:6\n         StorageLive(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:11: 21:22\n         _4 = &(_1.1: Test1);             // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:11: 21:22\n-        _5 = discriminant((*_4));        // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:9: 22:20\n-        switchInt(move _5) -> [2_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:9: 22:20\n+        _5 = discriminant((*_4));        // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:11: 21:22\n+        switchInt(move _5) -> [2_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 21:22\n     }\n \n     bb1: {\n@@ -44,7 +44,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n         _3 = &(*_8);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n         StorageDead(_8);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:23: 25:24\n-        goto -> bb3;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 26:6\n+        goto -> bb3;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:23: 25:24\n     }\n \n     bb2: {\n@@ -58,15 +58,15 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n         _3 = &(*_7);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n         StorageDead(_7);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:23: 24:24\n-        goto -> bb3;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 26:6\n+        goto -> bb3;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:23: 24:24\n     }\n \n     bb3: {\n         StorageDead(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:26:6: 26:7\n         StorageDead(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:26:6: 26:7\n         StorageLive(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n-        _10 = discriminant((_1.1: Test1)); // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:9: 29:20\n-        switchInt(move _10) -> [2_isize: bb5, otherwise: bb4]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:9: 29:20\n+        _10 = discriminant((_1.1: Test1)); // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:11: 28:21\n+        switchInt(move _10) -> [2_isize: bb5, otherwise: bb4]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 28:21\n     }\n \n     bb4: {\n@@ -80,7 +80,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n         _9 = &(*_13);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n         StorageDead(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:23: 32:24\n-        goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n+        goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:23: 32:24\n     }\n \n     bb5: {\n@@ -94,7 +94,7 @@ fn main() -> () {\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n         _9 = &(*_12);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n         StorageDead(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:23: 31:24\n-        goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n+        goto -> bb6;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:23: 31:24\n     }\n \n     bb6: {"}, {"sha": "77507ef1ee02dcaafc90f7d03ccd88f4dee112a4", "filename": "src/test/mir-opt/uninhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching2.main.UninhabitedEnumBranching.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -30,9 +30,9 @@\n           StorageLive(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 26:6\n           StorageLive(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:11: 21:22\n           _4 = &(_1.1: Test1);             // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:11: 21:22\n-          _5 = discriminant((*_4));        // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:9: 22:20\n--         switchInt(move _5) -> [0_isize: bb2, 1_isize: bb3, 2_isize: bb4, otherwise: bb1]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:9: 22:20\n-+         switchInt(move _5) -> [2_isize: bb4, otherwise: bb1]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:9: 22:20\n+          _5 = discriminant((*_4));        // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:11: 21:22\n+-         switchInt(move _5) -> [0_isize: bb2, 1_isize: bb3, 2_isize: bb4, otherwise: bb1]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 21:22\n++         switchInt(move _5) -> [2_isize: bb4, otherwise: bb1]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 21:22\n       }\n   \n       bb1: {\n@@ -46,7 +46,7 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n           _3 = &(*_8);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:21: 25:24\n           StorageDead(_8);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:23: 25:24\n-          goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 26:6\n+          goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:25:23: 25:24\n       }\n   \n       bb2: {\n@@ -57,7 +57,7 @@\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:22:24: 22:34\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n-          goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 26:6\n+          goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:22:24: 22:34\n       }\n   \n       bb3: {\n@@ -71,7 +71,7 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n           _3 = &(*_6);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:24: 23:34\n           StorageDead(_6);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:33: 23:34\n-          goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 26:6\n+          goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:23:33: 23:34\n       }\n   \n       bb4: {\n@@ -85,16 +85,16 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n           _3 = &(*_7);                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:21: 24:24\n           StorageDead(_7);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:23: 24:24\n-          goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:21:5: 26:6\n+          goto -> bb5;                     // scope 1 at $DIR/uninhabited_enum_branching2.rs:24:23: 24:24\n       }\n   \n       bb5: {\n           StorageDead(_4);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:26:6: 26:7\n           StorageDead(_3);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:26:6: 26:7\n           StorageLive(_9);                 // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n-          _10 = discriminant((_1.1: Test1)); // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:9: 29:20\n--         switchInt(move _10) -> [0_isize: bb7, 1_isize: bb8, 2_isize: bb9, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:9: 29:20\n-+         switchInt(move _10) -> [2_isize: bb9, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:9: 29:20\n+          _10 = discriminant((_1.1: Test1)); // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:11: 28:21\n+-         switchInt(move _10) -> [0_isize: bb7, 1_isize: bb8, 2_isize: bb9, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 28:21\n++         switchInt(move _10) -> [2_isize: bb9, otherwise: bb6]; // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 28:21\n       }\n   \n       bb6: {\n@@ -108,7 +108,7 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [68], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n           _9 = &(*_13);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:21: 32:24\n           StorageDead(_13);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:23: 32:24\n-          goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n+          goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:32:23: 32:24\n       }\n   \n       bb7: {\n@@ -119,7 +119,7 @@\n                                            // mir::Constant\n                                            // + span: $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [65, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n-          goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n+          goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:29:24: 29:34\n       }\n   \n       bb8: {\n@@ -133,7 +133,7 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [66, 40, 69, 109, 112, 116, 121, 41], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [255], len: Size { raw: 8 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 8 }) }\n           _9 = &(*_11);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:24: 30:34\n           StorageDead(_11);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:33: 30:34\n-          goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n+          goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:30:33: 30:34\n       }\n   \n       bb9: {\n@@ -147,7 +147,7 @@\n                                            // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [67], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [1], len: Size { raw: 1 } }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 1 }) }\n           _9 = &(*_12);                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:21: 31:24\n           StorageDead(_12);                // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:23: 31:24\n-          goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:28:5: 33:6\n+          goto -> bb10;                    // scope 1 at $DIR/uninhabited_enum_branching2.rs:31:23: 31:24\n       }\n   \n       bb10: {"}, {"sha": "c5a100fe3e50074303c7ed138cc5ece5e90e2bde", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.32bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -34,7 +34,7 @@\n       }\n   \n       bb2: {\n-          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb3, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:20: 7:24\n+          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb3, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n       }\n   \n       bb3: {"}, {"sha": "c5a100fe3e50074303c7ed138cc5ece5e90e2bde", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.64bit.diff?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -34,7 +34,7 @@\n       }\n   \n       bb2: {\n-          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb3, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:20: 7:24\n+          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb3, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n       }\n   \n       bb3: {"}, {"sha": "6e63de9136cb19a2f5c0aa23c983e33ffd39769b", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.rs?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -14,8 +14,8 @@ fn distinct_variant() {\n     // also used for the discriminant of `Foo`, which it would be if `a` was a\n     // reference.\n     let b = match y {\n-      Foo::Y(_, ref mut b) => b,\n       //~^ ERROR cannot use `y`\n+      Foo::Y(_, ref mut b) => b,\n       Foo::X => panic!()\n     };\n \n@@ -32,8 +32,9 @@ fn same_variant() {\n     };\n \n     let b = match y {\n-      Foo::Y(ref mut b, _) => b, //~ ERROR cannot use `y`\n-      //~| ERROR cannot borrow `y.0` as mutable\n+      //~^ ERROR cannot use `y`\n+      Foo::Y(ref mut b, _) => b,\n+      //~^ ERROR cannot borrow `y.0` as mutable\n       Foo::X => panic!()\n     };\n "}, {"sha": "98f6f00a7d48bbdb6a725d0af80d535854020fea", "filename": "src/test/ui/borrowck/borrowck-anon-fields-variant.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-anon-fields-variant.stderr?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -1,29 +1,29 @@\n error[E0503]: cannot use `y` because it was mutably borrowed\n-  --> $DIR/borrowck-anon-fields-variant.rs:17:7\n+  --> $DIR/borrowck-anon-fields-variant.rs:16:19\n    |\n LL |       Foo::Y(ref mut a, _) => a,\n    |              --------- borrow of `y.0` occurs here\n ...\n-LL |       Foo::Y(_, ref mut b) => b,\n-   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n+LL |     let b = match y {\n+   |                   ^ use of borrowed `y.0`\n ...\n LL |     *a += 1;\n    |     ------- borrow later used here\n \n error[E0503]: cannot use `y` because it was mutably borrowed\n-  --> $DIR/borrowck-anon-fields-variant.rs:35:7\n+  --> $DIR/borrowck-anon-fields-variant.rs:34:19\n    |\n LL |       Foo::Y(ref mut a, _) => a,\n    |              --------- borrow of `y.0` occurs here\n ...\n-LL |       Foo::Y(ref mut b, _) => b,\n-   |       ^^^^^^^^^^^^^^^^^^^^ use of borrowed `y.0`\n+LL |     let b = match y {\n+   |                   ^ use of borrowed `y.0`\n ...\n LL |     *a += 1;\n    |     ------- borrow later used here\n \n error[E0499]: cannot borrow `y.0` as mutable more than once at a time\n-  --> $DIR/borrowck-anon-fields-variant.rs:35:14\n+  --> $DIR/borrowck-anon-fields-variant.rs:36:14\n    |\n LL |       Foo::Y(ref mut a, _) => a,\n    |              --------- first mutable borrow occurs here"}, {"sha": "cdcff69d6e529293998ce23f69128630dd1aafec", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.rs?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -164,9 +164,9 @@ fn main() {\n         let mut e = E::A(3);\n         let x = &mut e;\n         match e {\n+            //~^ ERROR cannot use `e` because it was mutably borrowed\n             E::A(ref ax) =>\n                 //~^ ERROR cannot borrow `e.0` as immutable because it is also borrowed as mutable\n-                //~| ERROR cannot use `e` because it was mutably borrowed\n                 println!(\"e.ax: {:?}\", ax),\n             E::B { x: ref bx } =>\n                 //~^ ERROR cannot borrow `e.x` as immutable because it is also borrowed as mutable"}, {"sha": "4b9c5a2a98ff67861b63422e1116d0dfd996a081", "filename": "src/test/ui/borrowck/borrowck-describe-lvalue.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-describe-lvalue.stderr?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -238,23 +238,22 @@ LL |         drop(x);\n    |              - borrow later used here\n \n error[E0503]: cannot use `e` because it was mutably borrowed\n-  --> $DIR/borrowck-describe-lvalue.rs:167:13\n+  --> $DIR/borrowck-describe-lvalue.rs:166:15\n    |\n LL |         let x = &mut e;\n    |                 ------ borrow of `e` occurs here\n LL |         match e {\n-LL |             E::A(ref ax) =>\n-   |             ^^^^^^^^^^^^ use of borrowed `e`\n+   |               ^ use of borrowed `e`\n ...\n LL |         drop(x);\n    |              - borrow later used here\n \n error[E0502]: cannot borrow `e.0` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-describe-lvalue.rs:167:18\n+  --> $DIR/borrowck-describe-lvalue.rs:168:18\n    |\n LL |         let x = &mut e;\n    |                 ------ mutable borrow occurs here\n-LL |         match e {\n+...\n LL |             E::A(ref ax) =>\n    |                  ^^^^^^ immutable borrow occurs here\n ..."}, {"sha": "a925cbbf57b6d6ef0e90c11c19721ec127a15e46", "filename": "src/test/ui/borrowck/borrowck-match-already-borrowed.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.rs?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -6,8 +6,8 @@ enum Foo {\n fn match_enum() {\n     let mut foo = Foo::B;\n     let p = &mut foo;\n-    let _ = match foo {\n-        Foo::B => 1, //~ ERROR [E0503]\n+    let _ = match foo { //~ ERROR [E0503]\n+        Foo::B => 1,\n         _ => 2,\n         Foo::A(x) => x //~ ERROR [E0503]\n     };"}, {"sha": "39047be9de670e667bcd9517168ee5ad6140d64e", "filename": "src/test/ui/borrowck/borrowck-match-already-borrowed.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-match-already-borrowed.stderr?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -1,11 +1,10 @@\n error[E0503]: cannot use `foo` because it was mutably borrowed\n-  --> $DIR/borrowck-match-already-borrowed.rs:10:9\n+  --> $DIR/borrowck-match-already-borrowed.rs:9:19\n    |\n LL |     let p = &mut foo;\n    |             -------- borrow of `foo` occurs here\n LL |     let _ = match foo {\n-LL |         Foo::B => 1,\n-   |         ^^^^^^ use of borrowed `foo`\n+   |                   ^^^ use of borrowed `foo`\n ...\n LL |     drop(p);\n    |          - borrow later used here"}, {"sha": "4109c10e2e46bf6bb9a17a05ca048b65f4b1c641", "filename": "src/test/ui/borrowck/issue-27282-move-match-input-into-guard.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-move-match-input-into-guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-move-match-input-into-guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-move-match-input-into-guard.rs?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -10,11 +10,11 @@\n fn main() {\n     let b = &mut true;\n     match b {\n+        //~^ ERROR use of moved value: `b` [E0382]\n         &mut false => {},\n         _ if { (|| { let bar = b; *bar = false; })();\n                      false } => { },\n         &mut true => { println!(\"You might think we should get here\"); },\n-        //~^ ERROR use of moved value: `b` [E0382]\n         _ => panic!(\"surely we could never get here, since rustc warns it is unreachable.\"),\n     }\n }"}, {"sha": "9be1a9279992b813037fe28e38d492df4694d09f", "filename": "src/test/ui/borrowck/issue-27282-move-match-input-into-guard.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-move-match-input-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-move-match-input-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-27282-move-match-input-into-guard.stderr?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -1,16 +1,15 @@\n error[E0382]: use of moved value: `b`\n-  --> $DIR/issue-27282-move-match-input-into-guard.rs:16:14\n+  --> $DIR/issue-27282-move-match-input-into-guard.rs:12:5\n    |\n LL |     let b = &mut true;\n    |         - move occurs because `b` has type `&mut bool`, which does not implement the `Copy` trait\n+LL |     match b {\n+   |     ^^^^^^^ value used here after move\n ...\n LL |         _ if { (|| { let bar = b; *bar = false; })();\n    |                 --             - variable moved due to use in closure\n    |                 |\n    |                 value moved into closure here\n-LL |                      false } => { },\n-LL |         &mut true => { println!(\"You might think we should get here\"); },\n-   |              ^^^^ value used here after move\n \n error: aborting due to previous error\n "}, {"sha": "64d8540878ec227263adb6fe5116ddcedeb8a5c2", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.32bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.32bit.stderr?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -65,11 +65,11 @@ LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:51\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL | / const U8_MUT3: &u8 = {\n LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   | |                                                   ^^^^^^^^^^^ constant accesses static\n+   | |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n LL | |"}, {"sha": "8e793ab3f0d916394d6d67a96417745433e965f2", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static_cross_crate.64bit.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static_cross_crate.64bit.stderr?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -65,11 +65,11 @@ LL |         U8_MUT2 => true,\n    |         ^^^^^^^\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static_cross_crate.rs:32:51\n+  --> $DIR/const_refers_to_static_cross_crate.rs:32:20\n    |\n LL | / const U8_MUT3: &u8 = {\n LL | |     unsafe { match static_cross_crate::OPT_ZERO { Some(ref u) => u, None => panic!() } }\n-   | |                                                   ^^^^^^^^^^^ constant accesses static\n+   | |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n LL | |\n LL | |\n LL | |"}, {"sha": "7400aadb059f70ddd41c43e9e36003e427712014", "filename": "src/test/ui/issues/issue-17385.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fissues%2Fissue-17385.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fissues%2Fissue-17385.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17385.rs?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -15,8 +15,8 @@ impl Drop for Enum {\n fn main() {\n     let foo = X(1);\n     drop(foo);\n-    match foo {\n-        X(1) => (), //~ ERROR use of moved value\n+    match foo { //~ ERROR use of moved value\n+        X(1) => (),\n         _ => unreachable!()\n     }\n "}, {"sha": "77aa201b33564722dda46b25b58ed918a9941b80", "filename": "src/test/ui/issues/issue-17385.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fissues%2Fissue-17385.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fissues%2Fissue-17385.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17385.stderr?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -1,13 +1,12 @@\n error[E0382]: use of moved value: `foo`\n-  --> $DIR/issue-17385.rs:19:11\n+  --> $DIR/issue-17385.rs:18:5\n    |\n LL |     let foo = X(1);\n    |         --- move occurs because `foo` has type `X`, which does not implement the `Copy` trait\n LL |     drop(foo);\n    |          --- value moved here\n LL |     match foo {\n-LL |         X(1) => (),\n-   |           ^ value used here after move\n+   |     ^^^^^^^^^ value used here after move\n \n error[E0382]: use of moved value: `e`\n   --> $DIR/issue-17385.rs:25:11"}, {"sha": "978eeb868edc00bee3722edf62330d0cc720c0d3", "filename": "src/test/ui/nll/borrowed-match-issue-45045.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.rs?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -10,8 +10,8 @@ fn main() {\n     let f = &mut e;\n     let g = f;\n     match e {\n-        Xyz::A => println!(\"a\"),\n         //~^ cannot use `e` because it was mutably borrowed [E0503]\n+        Xyz::A => println!(\"a\"),\n         Xyz::B => println!(\"b\"),\n     };\n     *g = Xyz::B;"}, {"sha": "9d4682667dddddbfcf9032509fab39eed1badccf", "filename": "src/test/ui/nll/borrowed-match-issue-45045.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-match-issue-45045.stderr?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -1,11 +1,11 @@\n error[E0503]: cannot use `e` because it was mutably borrowed\n-  --> $DIR/borrowed-match-issue-45045.rs:13:9\n+  --> $DIR/borrowed-match-issue-45045.rs:12:11\n    |\n LL |     let f = &mut e;\n    |             ------ borrow of `e` occurs here\n-...\n-LL |         Xyz::A => println!(\"a\"),\n-   |         ^^^^^^ use of borrowed `e`\n+LL |     let g = f;\n+LL |     match e {\n+   |           ^ use of borrowed `e`\n ...\n LL |     *g = Xyz::B;\n    |     ----------- borrow later used here"}, {"sha": "e61db71220e8584776c07eaf24a336b36e889188", "filename": "src/test/ui/nll/match-cfg-fake-edges2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.rs?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -7,8 +7,8 @@ fn all_previous_tests_may_be_done(y: &mut (bool, bool)) {\n     let r = &mut y.1;\n     // We don't actually test y.1 to select the second arm, but we don't want\n     // borrowck results to be based on the order we match patterns.\n-    match y {\n-        (false, true) => 1, //~ ERROR cannot use `y.1` because it was mutably borrowed\n+    match y { //~ ERROR cannot use `y.1` because it was mutably borrowed\n+        (false, true) => 1,\n         (true, _) => {\n             r;\n             2"}, {"sha": "0ce83849b9f9421cedcc2db50a52d759e78b13bb", "filename": "src/test/ui/nll/match-cfg-fake-edges2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges2.stderr?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -1,12 +1,12 @@\n error[E0503]: cannot use `y.1` because it was mutably borrowed\n-  --> $DIR/match-cfg-fake-edges2.rs:11:17\n+  --> $DIR/match-cfg-fake-edges2.rs:10:5\n    |\n LL |     let r = &mut y.1;\n    |             -------- borrow of `y.1` occurs here\n ...\n-LL |         (false, true) => 1,\n-   |                 ^^^^ use of borrowed `y.1`\n-LL |         (true, _) => {\n+LL |     match y {\n+   |     ^^^^^^^ use of borrowed `y.1`\n+...\n LL |             r;\n    |             - borrow later used here\n "}, {"sha": "447dabeb47e598f619a5d916c1dd1b11853079cd", "filename": "src/test/ui/nll/match-on-borrowed.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.rs?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -45,8 +45,9 @@ fn enum_example(mut e: E) {\n         E::W => panic!(),\n     };\n     match e { // Don't know that E uses a tag for its discriminant\n+        //~^ ERROR\n         _ if false => (),\n-        E::V(_, r) => (), //~ ERROR\n+        E::V(_, r) => (),\n         E::W => (),\n     }\n     x;\n@@ -58,8 +59,9 @@ fn indirect_enum_example(mut f: &mut E) {\n         E::W => panic!(),\n     };\n     match f { // Don't know that E uses a tag for its discriminant\n+        //~^ ERROR\n         _ if false => (),\n-        E::V(_, r) => (), //~ ERROR\n+        E::V(_, r) => (),\n         E::W => (),\n     }\n     x;\n@@ -77,7 +79,8 @@ fn match_on_muatbly_borrowed_ref(mut p: &bool) {\n fn match_on_borrowed(mut t: bool) {\n     let x = &mut t;\n     match t {\n-        true => (), //~ ERROR\n+        //~^ ERROR\n+        true => (),\n         false => (),\n     }\n     x;"}, {"sha": "2121b59b02da375c2bd06a65609f6a3f0f4d29dd", "filename": "src/test/ui/nll/match-on-borrowed.stderr", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-on-borrowed.stderr?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -1,41 +1,40 @@\n error[E0503]: cannot use `e` because it was mutably borrowed\n-  --> $DIR/match-on-borrowed.rs:49:9\n+  --> $DIR/match-on-borrowed.rs:47:11\n    |\n LL |         E::V(ref mut x, _) => x,\n    |              --------- borrow of `e.0` occurs here\n ...\n-LL |         E::V(_, r) => (),\n-   |         ^^^^^^^^^^ use of borrowed `e.0`\n+LL |     match e { // Don't know that E uses a tag for its discriminant\n+   |           ^ use of borrowed `e.0`\n ...\n LL |     x;\n    |     - borrow later used here\n \n error[E0503]: cannot use `*f` because it was mutably borrowed\n-  --> $DIR/match-on-borrowed.rs:62:9\n+  --> $DIR/match-on-borrowed.rs:61:11\n    |\n LL |         E::V(ref mut x, _) => x,\n    |              --------- borrow of `f.0` occurs here\n ...\n-LL |         E::V(_, r) => (),\n-   |         ^^^^^^^^^^ use of borrowed `f.0`\n+LL |     match f { // Don't know that E uses a tag for its discriminant\n+   |           ^ use of borrowed `f.0`\n ...\n LL |     x;\n    |     - borrow later used here\n \n error[E0503]: cannot use `t` because it was mutably borrowed\n-  --> $DIR/match-on-borrowed.rs:80:9\n+  --> $DIR/match-on-borrowed.rs:81:5\n    |\n LL |     let x = &mut t;\n    |             ------ borrow of `t` occurs here\n LL |     match t {\n-LL |         true => (),\n-   |         ^^^^ use of borrowed `t`\n+   |     ^^^^^^^ use of borrowed `t`\n ...\n LL |     x;\n    |     - borrow later used here\n \n error[E0381]: use of possibly-uninitialized variable: `n`\n-  --> $DIR/match-on-borrowed.rs:90:11\n+  --> $DIR/match-on-borrowed.rs:93:11\n    |\n LL |     match n {}\n    |           ^ use of possibly-uninitialized `n`"}, {"sha": "2ad92b79444925ac56ba7d8affbb050b64d17a72", "filename": "src/test/ui/rfc-2008-non-exhaustive/borrowck-non-exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.rs?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -10,8 +10,8 @@ fn main() {\n     let mut x = NonExhaustiveMonovariant::Variant(1);\n     let y = &mut x;\n     match x {\n-        NonExhaustiveMonovariant::Variant(_) => {},\n         //~^ ERROR cannot use `x` because it was mutably borrowed\n+        NonExhaustiveMonovariant::Variant(_) => {},\n         _ => {},\n     }\n     drop(y);"}, {"sha": "de730ce1030f24bbab5699e3a644dc2acce470a5", "filename": "src/test/ui/rfc-2008-non-exhaustive/borrowck-non-exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2008-non-exhaustive%2Fborrowck-non-exhaustive.stderr?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -1,11 +1,10 @@\n error[E0503]: cannot use `x` because it was mutably borrowed\n-  --> $DIR/borrowck-non-exhaustive.rs:13:9\n+  --> $DIR/borrowck-non-exhaustive.rs:12:11\n    |\n LL |     let y = &mut x;\n    |             ------ borrow of `x` occurs here\n LL |     match x {\n-LL |         NonExhaustiveMonovariant::Variant(_) => {},\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ use of borrowed `x`\n+   |           ^ use of borrowed `x`\n ...\n LL |     drop(y);\n    |          - borrow later used here"}, {"sha": "318b00ddea94e703636a8f370d913bd025880b8c", "filename": "src/test/ui/union/union-unsafe.mir.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Funion%2Funion-unsafe.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f/src%2Ftest%2Fui%2Funion%2Funion-unsafe.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-unsafe.mir.stderr?ref=0a42dfc2fa2b373aedf7a169da3f0ec0e996fc9f", "patch": "@@ -55,10 +55,10 @@ LL |     let U1 { a } = u1;\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n \n error[E0133]: access to union field is unsafe and requires unsafe function or block\n-  --> $DIR/union-unsafe.rs:65:20\n+  --> $DIR/union-unsafe.rs:65:12\n    |\n LL |     if let U1 { a: 12 } = u1 {}\n-   |                    ^^ access to union field\n+   |            ^^^^^^^^^^^^ access to union field\n    |\n    = note: the field may not be properly initialized: using uninitialized data will cause undefined behavior\n "}]}