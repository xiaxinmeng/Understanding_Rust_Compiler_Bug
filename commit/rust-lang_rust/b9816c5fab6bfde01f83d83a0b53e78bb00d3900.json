{"sha": "b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ODE2YzVmYWI2YmZkZTAxZjgzZDgzYTBiNTNlNzhiYjAwZDM5MDA=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-13T12:59:10Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-09-18T09:26:11Z"}, "message": "incr.comp.: Already hash HIR bodies during metadata export so they don't have to be hashed in downstream crates.", "tree": {"sha": "508e8aaba83b6537fc14d3d1f86dc278c2cfcbdc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/508e8aaba83b6537fc14d3d1f86dc278c2cfcbdc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "html_url": "https://github.com/rust-lang/rust/commit/b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3f913167c0f232478b945aa236aab8340be62a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f913167c0f232478b945aa236aab8340be62a9", "html_url": "https://github.com/rust-lang/rust/commit/e3f913167c0f232478b945aa236aab8340be62a9"}], "stats": {"total": 218, "additions": 163, "deletions": 55}, "files": [{"sha": "bd3a35836762bd02f3a385c4bc0cb23b1ecde076", "filename": "src/librustc/ich/hcx.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fhcx.rs?ref=b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "patch": "@@ -202,6 +202,40 @@ impl<'a, 'gcx, 'lcx> StableHashingContextProvider for ty::TyCtxt<'a, 'gcx, 'lcx>\n     }\n }\n \n+impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for hir::HirId {\n+    #[inline]\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        match hcx.node_id_hashing_mode {\n+            NodeIdHashingMode::Ignore => {\n+                // Don't do anything.\n+            }\n+            NodeIdHashingMode::HashDefPath => {\n+                let hir::HirId {\n+                    owner,\n+                    local_id,\n+                } = *self;\n+\n+                hcx.tcx.hir.definitions().def_path_hash(owner).hash_stable(hcx, hasher);\n+                local_id.hash_stable(hcx, hasher);\n+            }\n+        }\n+    }\n+}\n+\n+impl<'a, 'gcx, 'tcx> ToStableHashKey<StableHashingContext<'a, 'gcx, 'tcx>> for hir::HirId {\n+    type KeyType = (DefPathHash, hir::ItemLocalId);\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self,\n+                          hcx: &StableHashingContext<'a, 'gcx, 'tcx>)\n+                          -> (DefPathHash, hir::ItemLocalId) {\n+        let def_path_hash = hcx.tcx().hir.definitions().def_path_hash(self.owner);\n+        (def_path_hash, self.local_id)\n+    }\n+}\n+\n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for ast::NodeId {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,"}, {"sha": "18a02ff5c58826f711b604662324df24b7500a7d", "filename": "src/librustc/ich/impls_cstore.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc%2Fich%2Fimpls_cstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_cstore.rs?ref=b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "patch": "@@ -11,6 +11,8 @@\n //! This module contains `HashStable` implementations for various data types\n //! from rustc::middle::cstore in no particular order.\n \n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher, StableHasherResult};\n+\n use middle;\n \n impl_stable_hash_for!(enum middle::cstore::DepKind {\n@@ -51,3 +53,29 @@ impl_stable_hash_for!(struct middle::cstore::CrateSource {\n     rlib,\n     rmeta\n });\n+\n+impl<HCX> HashStable<HCX> for middle::cstore::ExternBodyNestedBodies {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut HCX,\n+                                          hasher: &mut StableHasher<W>) {\n+        let middle::cstore::ExternBodyNestedBodies {\n+            nested_bodies: _,\n+            fingerprint,\n+        } = *self;\n+\n+        fingerprint.hash_stable(hcx, hasher);\n+    }\n+}\n+\n+impl<'a, HCX> HashStable<HCX> for middle::cstore::ExternConstBody<'a> {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut HCX,\n+                                          hasher: &mut StableHasher<W>) {\n+        let middle::cstore::ExternConstBody {\n+            body: _,\n+            fingerprint,\n+        } = *self;\n+\n+        fingerprint.hash_stable(hcx, hasher);\n+    }\n+}"}, {"sha": "3c89e10a0d2d97ab59c0bbbbfb06ca4191dc13a5", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 18, "deletions": 32, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "patch": "@@ -38,33 +38,6 @@ impl<'a, 'gcx, 'tcx> ToStableHashKey<StableHashingContext<'a, 'gcx, 'tcx>> for D\n     }\n }\n \n-impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for hir::HirId {\n-    #[inline]\n-    fn hash_stable<W: StableHasherResult>(&self,\n-                                          hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n-                                          hasher: &mut StableHasher<W>) {\n-        let hir::HirId {\n-            owner,\n-            local_id,\n-        } = *self;\n-\n-        hcx.tcx().hir.definitions().def_path_hash(owner).hash_stable(hcx, hasher);\n-        local_id.hash_stable(hcx, hasher);\n-    }\n-}\n-\n-impl<'a, 'gcx, 'tcx> ToStableHashKey<StableHashingContext<'a, 'gcx, 'tcx>> for hir::HirId {\n-    type KeyType = (DefPathHash, hir::ItemLocalId);\n-\n-    #[inline]\n-    fn to_stable_hash_key(&self,\n-                          hcx: &StableHashingContext<'a, 'gcx, 'tcx>)\n-                          -> (DefPathHash, hir::ItemLocalId) {\n-        let def_path_hash = hcx.tcx().hir.definitions().def_path_hash(self.owner);\n-        (def_path_hash, self.local_id)\n-    }\n-}\n-\n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for CrateNum {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -415,6 +388,7 @@ impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for hir::P\n             ref span\n         } = *self;\n \n+\n         node.hash_stable(hcx, hasher);\n         span.hash_stable(hcx, hasher);\n     }\n@@ -1003,11 +977,23 @@ impl_stable_hash_for!(struct hir::Arg {\n     hir_id\n });\n \n-impl_stable_hash_for!(struct hir::Body {\n-    arguments,\n-    value,\n-    is_generator\n-});\n+impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for hir::Body {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a, 'gcx, 'tcx>,\n+                                          hasher: &mut StableHasher<W>) {\n+        let hir::Body {\n+            ref arguments,\n+            ref value,\n+            is_generator,\n+        } = *self;\n+\n+        hcx.with_node_id_hashing_mode(NodeIdHashingMode::Ignore, |hcx| {\n+            arguments.hash_stable(hcx, hasher);\n+            value.hash_stable(hcx, hasher);\n+            is_generator.hash_stable(hcx, hasher);\n+        });\n+    }\n+}\n \n impl<'a, 'gcx, 'tcx> HashStable<StableHashingContext<'a, 'gcx, 'tcx>> for hir::BodyId {\n     fn hash_stable<W: StableHasherResult>(&self,"}, {"sha": "de647913f0f3baca3c67f67a70989ba907123466", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "patch": "@@ -22,6 +22,7 @@\n //! are *mostly* used as a part of that interface, but these should\n //! probably get a better home if someone can find one.\n \n+use hir;\n use hir::def;\n use hir::def_id::{CrateNum, DefId, DefIndex, LOCAL_CRATE};\n use hir::map as hir_map;\n@@ -34,6 +35,7 @@ use session::search_paths::PathKind;\n use util::nodemap::NodeSet;\n \n use std::any::Any;\n+use std::collections::BTreeMap;\n use std::path::{Path, PathBuf};\n use std::rc::Rc;\n use owning_ref::ErasedBoxRef;\n@@ -218,6 +220,26 @@ pub trait MetadataLoader {\n                           -> Result<ErasedBoxRef<[u8]>, String>;\n }\n \n+#[derive(Clone)]\n+pub struct ExternConstBody<'tcx> {\n+    pub body: &'tcx hir::Body,\n+\n+    // It would require a lot of infrastructure to enable stable-hashing Bodies\n+    // from other crates, so we hash on export and just store the fingerprint\n+    // with them.\n+    pub fingerprint: ich::Fingerprint,\n+}\n+\n+#[derive(Clone)]\n+pub struct ExternBodyNestedBodies {\n+    pub nested_bodies: Rc<BTreeMap<hir::BodyId, hir::Body>>,\n+\n+    // It would require a lot of infrastructure to enable stable-hashing Bodies\n+    // from other crates, so we hash on export and just store the fingerprint\n+    // with them.\n+    pub fingerprint: ich::Fingerprint,\n+}\n+\n /// A store of Rust crates, through with their metadata\n /// can be accessed.\n ///"}, {"sha": "5207aaa0c5b2ffc82fe5a05f7ec9a5ad24b6ea19", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "patch": "@@ -16,8 +16,9 @@ use hir::{self, TraitCandidate, ItemLocalId};\n use hir::svh::Svh;\n use lint;\n use middle::const_val;\n-use middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary};\n-use middle::cstore::{NativeLibraryKind, DepKind, CrateSource};\n+use middle::cstore::{ExternCrate, LinkagePreference, NativeLibrary,\n+                     ExternBodyNestedBodies};\n+use middle::cstore::{NativeLibraryKind, DepKind, CrateSource, ExternConstBody};\n use middle::privacy::AccessLevels;\n use middle::reachable::ReachableSet;\n use middle::region;\n@@ -50,7 +51,6 @@ use std::fmt::Debug;\n use std::hash::Hash;\n use std::marker::PhantomData;\n use std::mem;\n-use std::collections::BTreeMap;\n use std::ops::Deref;\n use std::rc::Rc;\n use std::sync::Arc;\n@@ -1321,8 +1321,7 @@ define_maps! { <'tcx>\n     [] fn impl_parent: ImplParent(DefId) -> Option<DefId>,\n     [] fn trait_of_item: TraitOfItem(DefId) -> Option<DefId>,\n     [] fn is_exported_symbol: IsExportedSymbol(DefId) -> bool,\n-    [] fn item_body_nested_bodies: ItemBodyNestedBodies(DefId)\n-        -> Rc<BTreeMap<hir::BodyId, hir::Body>>,\n+    [] fn item_body_nested_bodies: ItemBodyNestedBodies(DefId) -> ExternBodyNestedBodies,\n     [] fn const_is_rvalue_promotable_to_static: ConstIsRvaluePromotableToStatic(DefId) -> bool,\n     [] fn is_mir_available: IsMirAvailable(DefId) -> bool,\n \n@@ -1402,7 +1401,7 @@ define_maps! { <'tcx>\n     [] fn get_lang_items: get_lang_items_node(CrateNum) -> Rc<LanguageItems>,\n     [] fn defined_lang_items: DefinedLangItems(CrateNum) -> Rc<Vec<(DefId, usize)>>,\n     [] fn missing_lang_items: MissingLangItems(CrateNum) -> Rc<Vec<LangItem>>,\n-    [] fn extern_const_body: ExternConstBody(DefId) -> &'tcx hir::Body,\n+    [] fn extern_const_body: ExternConstBody(DefId) -> ExternConstBody<'tcx>,\n     [] fn visible_parent_map: visible_parent_map_node(CrateNum)\n         -> Rc<DefIdMap<DefId>>,\n     [] fn missing_extern_crate_item: MissingExternCrateItem(CrateNum) -> bool,"}, {"sha": "7520c6ac652baf44c2dc543a914d5f8a3895ad5c", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "patch": "@@ -34,7 +34,6 @@ use syntax_pos::Span;\n use std::cmp::Ordering;\n \n use rustc_const_math::*;\n-\n macro_rules! signal {\n     ($e:expr, $exn:expr) => {\n         return Err(ConstEvalErr { span: $e.span, kind: $exn })\n@@ -366,7 +365,7 @@ fn eval_const_expr_partial<'a, 'tcx>(cx: &ConstContext<'a, 'tcx>,\n             }\n           } else {\n             if tcx.is_const_fn(def_id) {\n-                tcx.extern_const_body(def_id)\n+                tcx.extern_const_body(def_id).body\n             } else {\n                 signal!(e, TypeckError)\n             }\n@@ -790,7 +789,7 @@ fn const_eval<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx.mir_const_qualif(def_id);\n         tcx.hir.body(tcx.hir.body_owned_by(id))\n     } else {\n-        tcx.extern_const_body(def_id)\n+        tcx.extern_const_body(def_id).body\n     };\n     ConstContext::new(tcx, key.param_env.and(substs), tables).eval(&body.value)\n }"}, {"sha": "7586ad5a75f818bbf2637fbccc55fc838b9abca8", "filename": "src/librustc_const_eval/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc_const_eval%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc_const_eval%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fpattern.rs?ref=b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "patch": "@@ -607,7 +607,7 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                         let body = if let Some(id) = self.tcx.hir.as_local_node_id(def_id) {\n                             self.tcx.hir.body(self.tcx.hir.body_owned_by(id))\n                         } else {\n-                            self.tcx.extern_const_body(def_id)\n+                            self.tcx.extern_const_body(def_id).body\n                         };\n                         let pat = self.lower_const_expr(&body.value, pat_id, span);\n                         self.tables = old_tables;"}, {"sha": "3bc281e5486a8e3e8609c99605d0113679abb7ad", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "patch": "@@ -16,26 +16,46 @@ use schema::*;\n use rustc::hir;\n use rustc::ty::{self, TyCtxt};\n \n+use rustc::ich::{StableHashingContext, Fingerprint};\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+\n #[derive(RustcEncodable, RustcDecodable)]\n pub struct Ast<'tcx> {\n     pub body: Lazy<hir::Body>,\n     pub tables: Lazy<ty::TypeckTables<'tcx>>,\n     pub nested_bodies: LazySeq<hir::Body>,\n     pub rvalue_promotable_to_static: bool,\n+    pub stable_bodies_hash: Fingerprint,\n }\n \n impl_stable_hash_for!(struct Ast<'tcx> {\n     body,\n     tables,\n     nested_bodies,\n-    rvalue_promotable_to_static\n+    rvalue_promotable_to_static,\n+    stable_bodies_hash\n });\n \n impl<'a, 'b, 'tcx> IsolatedEncoder<'a, 'b, 'tcx> {\n     pub fn encode_body(&mut self, body_id: hir::BodyId) -> Lazy<Ast<'tcx>> {\n         let body = self.tcx.hir.body(body_id);\n-        let lazy_body = self.lazy(body);\n \n+        // In order to avoid having to hash hir::Bodies from extern crates, we\n+        // hash them here, during export, and store the hash with metadata.\n+        let stable_bodies_hash = {\n+            let mut hcx = StableHashingContext::new(self.tcx);\n+            let mut hasher = StableHasher::new();\n+\n+            hcx.while_hashing_hir_bodies(true, |hcx| {\n+                hcx.while_hashing_spans(false, |hcx| {\n+                    body.hash_stable(hcx, &mut hasher);\n+                });\n+            });\n+\n+            hasher.finish()\n+        };\n+\n+        let lazy_body = self.lazy(body);\n         let tables = self.tcx.body_tables(body_id);\n         let lazy_tables = self.lazy(tables);\n \n@@ -54,6 +74,7 @@ impl<'a, 'b, 'tcx> IsolatedEncoder<'a, 'b, 'tcx> {\n             tables: lazy_tables,\n             nested_bodies: lazy_nested_bodies,\n             rvalue_promotable_to_static,\n+            stable_bodies_hash,\n         })\n     }\n }"}, {"sha": "78c44c7e45cdff125274b7062d7aa979fbeb8696", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "patch": "@@ -159,7 +159,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     is_exported_symbol => {\n         cdata.exported_symbols.contains(&def_id.index)\n     }\n-    item_body_nested_bodies => { Rc::new(cdata.item_body_nested_bodies(def_id.index)) }\n+    item_body_nested_bodies => { cdata.item_body_nested_bodies(def_id.index) }\n     const_is_rvalue_promotable_to_static => {\n         cdata.const_is_rvalue_promotable_to_static(def_id.index)\n     }"}, {"sha": "65cf15e5a0ec782e21acc47dfd458cb552acfe52", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 27, "deletions": 8, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "patch": "@@ -17,9 +17,11 @@ use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc::hir;\n \n use rustc::middle::const_val::ByteArray;\n-use rustc::middle::cstore::LinkagePreference;\n+use rustc::middle::cstore::{LinkagePreference, ExternConstBody,\n+                            ExternBodyNestedBodies};\n use rustc::hir::def::{self, Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::ich::Fingerprint;\n use rustc::middle::lang_items;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -775,12 +777,16 @@ impl<'a, 'tcx> CrateMetadata {\n     pub fn extern_const_body(&self,\n                              tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              id: DefIndex)\n-                             -> &'tcx hir::Body {\n+                             -> ExternConstBody<'tcx> {\n         assert!(!self.is_proc_macro(id));\n         let ast = self.entry(id).ast.unwrap();\n         let def_id = self.local_def_id(id);\n-        let body = ast.decode((self, tcx)).body.decode((self, tcx));\n-        tcx.hir.intern_inlined_body(def_id, body)\n+        let ast = ast.decode((self, tcx));\n+        let body = ast.body.decode((self, tcx));\n+        ExternConstBody {\n+            body: tcx.hir.intern_inlined_body(def_id, body),\n+            fingerprint: ast.stable_bodies_hash,\n+        }\n     }\n \n     pub fn item_body_tables(&self,\n@@ -791,10 +797,23 @@ impl<'a, 'tcx> CrateMetadata {\n         tcx.alloc_tables(ast.tables.decode((self, tcx)))\n     }\n \n-    pub fn item_body_nested_bodies(&self, id: DefIndex) -> BTreeMap<hir::BodyId, hir::Body> {\n-        self.entry(id).ast.into_iter().flat_map(|ast| {\n-            ast.decode(self).nested_bodies.decode(self).map(|body| (body.id(), body))\n-        }).collect()\n+    pub fn item_body_nested_bodies(&self, id: DefIndex) -> ExternBodyNestedBodies {\n+        if let Some(ref ast) = self.entry(id).ast {\n+            let ast = ast.decode(self);\n+            let nested_bodies: BTreeMap<_, _> = ast.nested_bodies\n+                                                   .decode(self)\n+                                                   .map(|body| (body.id(), body))\n+                                                   .collect();\n+            ExternBodyNestedBodies {\n+                nested_bodies: Rc::new(nested_bodies),\n+                fingerprint: ast.stable_bodies_hash,\n+            }\n+        } else {\n+            ExternBodyNestedBodies {\n+                nested_bodies: Rc::new(BTreeMap::new()),\n+                fingerprint: Fingerprint::zero(),\n+            }\n+        }\n     }\n \n     pub fn const_is_rvalue_promotable_to_static(&self, id: DefIndex) -> bool {"}, {"sha": "3a4dcc3217388706c32784990768c985521216e2", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9816c5fab6bfde01f83d83a0b53e78bb00d3900/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b9816c5fab6bfde01f83d83a0b53e78bb00d3900", "patch": "@@ -474,9 +474,9 @@ impl hir::print::PpAnn for InlinedConst {\n }\n \n pub fn print_inlined_const(cx: &DocContext, did: DefId) -> String {\n-    let body = cx.tcx.extern_const_body(did);\n+    let body = cx.tcx.extern_const_body(did).body;\n     let inlined = InlinedConst {\n-        nested_bodies: cx.tcx.item_body_nested_bodies(did)\n+        nested_bodies: cx.tcx.item_body_nested_bodies(did).nested_bodies\n     };\n     hir::print::to_string(&inlined, |s| s.print_expr(&body.value))\n }"}]}