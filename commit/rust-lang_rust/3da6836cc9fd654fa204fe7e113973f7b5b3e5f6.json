{"sha": "3da6836cc9fd654fa204fe7e113973f7b5b3e5f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYTY4MzZjYzlmZDY1NGZhMjA0ZmU3ZTExMzk3M2Y3YjViM2U1ZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-13T03:37:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-13T03:37:25Z"}, "message": "Auto merge of #65099 - pnkfelix:issue-63154-needed-more-normalize, r=nagisa\n\nMIR typeck needed more normalize\n\nAdd some missing normalization calls (@nagisa [was right](https://github.com/rust-lang/rust/issues/63154#issuecomment-517305589)).\n\nFix #63154", "tree": {"sha": "2b4a2f46d6e4a5bee73b128e6c4431eea91a57c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b4a2f46d6e4a5bee73b128e6c4431eea91a57c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3da6836cc9fd654fa204fe7e113973f7b5b3e5f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3da6836cc9fd654fa204fe7e113973f7b5b3e5f6", "html_url": "https://github.com/rust-lang/rust/commit/3da6836cc9fd654fa204fe7e113973f7b5b3e5f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3da6836cc9fd654fa204fe7e113973f7b5b3e5f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80b861bed17ba2ce001911f78a5316f56466642f", "url": "https://api.github.com/repos/rust-lang/rust/commits/80b861bed17ba2ce001911f78a5316f56466642f", "html_url": "https://github.com/rust-lang/rust/commit/80b861bed17ba2ce001911f78a5316f56466642f"}, {"sha": "00bf29bded074ee20460f620cad04205a33df499", "url": "https://api.github.com/repos/rust-lang/rust/commits/00bf29bded074ee20460f620cad04205a33df499", "html_url": "https://github.com/rust-lang/rust/commit/00bf29bded074ee20460f620cad04205a33df499"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "ed639e8eee7747efe171f506a731b0033d6d1b17", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3da6836cc9fd654fa204fe7e113973f7b5b3e5f6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da6836cc9fd654fa204fe7e113973f7b5b3e5f6/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=3da6836cc9fd654fa204fe7e113973f7b5b3e5f6", "patch": "@@ -1396,7 +1396,9 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 };\n \n                 let place_ty = place.ty(body, tcx).ty;\n+                let place_ty = self.normalize(place_ty, location);\n                 let rv_ty = rv.ty(body, tcx);\n+                let rv_ty = self.normalize(rv_ty, location);\n                 if let Err(terr) =\n                     self.sub_types_or_anon(rv_ty, place_ty, location.to_locations(), category)\n                 {\n@@ -1672,6 +1674,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         match *destination {\n             Some((ref dest, _target_block)) => {\n                 let dest_ty = dest.ty(body, tcx).ty;\n+                let dest_ty = self.normalize(dest_ty, term_location);\n                 let category = match *dest {\n                     Place {\n                         base: PlaceBase::Local(RETURN_PLACE),"}, {"sha": "484c12879d33ae50849aac68476ab450c04a3540", "filename": "src/test/ui/nll/issue-63154-normalize.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3da6836cc9fd654fa204fe7e113973f7b5b3e5f6/src%2Ftest%2Fui%2Fnll%2Fissue-63154-normalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3da6836cc9fd654fa204fe7e113973f7b5b3e5f6/src%2Ftest%2Fui%2Fnll%2Fissue-63154-normalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-63154-normalize.rs?ref=3da6836cc9fd654fa204fe7e113973f7b5b3e5f6", "patch": "@@ -0,0 +1,34 @@\n+// Regression test for rust-lang/rust#63154\n+//\n+// Before, we would ICE after failing to normalize the destination type\n+// when checking call destinations and also when checking MIR\n+// assignment statements.\n+\n+// check-pass\n+\n+trait HasAssocType {\n+    type Inner;\n+}\n+\n+impl HasAssocType for () {\n+    type Inner = ();\n+}\n+\n+trait Tr<I, T>: Fn(I) -> Option<T> {}\n+impl<I, T, Q: Fn(I) -> Option<T>> Tr<I, T> for Q {}\n+\n+fn f<T: HasAssocType>() -> impl Tr<T, T::Inner> {\n+    |_| None\n+}\n+\n+fn g<T, Y>(f: impl Tr<T, Y>) -> impl Tr<T, Y> {\n+    f\n+}\n+\n+fn h() {\n+    g(f())(());\n+}\n+\n+fn main() {\n+    h();\n+}"}]}