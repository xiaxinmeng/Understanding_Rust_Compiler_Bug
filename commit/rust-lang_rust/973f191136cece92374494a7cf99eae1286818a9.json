{"sha": "973f191136cece92374494a7cf99eae1286818a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3M2YxOTExMzZjZWNlOTIzNzQ0OTRhN2NmOTllYWUxMjg2ODE4YTk=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-10T17:43:01Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-08-10T17:43:01Z"}, "message": "Move more code to codegen_intrinsic_call", "tree": {"sha": "05f2133768278b14b748897c0f5ced55d8b0fc6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05f2133768278b14b748897c0f5ced55d8b0fc6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/973f191136cece92374494a7cf99eae1286818a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/973f191136cece92374494a7cf99eae1286818a9", "html_url": "https://github.com/rust-lang/rust/commit/973f191136cece92374494a7cf99eae1286818a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/973f191136cece92374494a7cf99eae1286818a9/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29ab744f6250c075456990439bf6b25608fbefe2", "url": "https://api.github.com/repos/rust-lang/rust/commits/29ab744f6250c075456990439bf6b25608fbefe2", "html_url": "https://github.com/rust-lang/rust/commit/29ab744f6250c075456990439bf6b25608fbefe2"}], "stats": {"total": 472, "additions": 238, "deletions": 234}, "files": [{"sha": "23e4d5b63a06a3edbb80bc81dc690e3f7277b30f", "filename": "src/abi.rs", "status": "modified", "additions": 238, "deletions": 234, "changes": 472, "blob_url": "https://github.com/rust-lang/rust/blob/973f191136cece92374494a7cf99eae1286818a9/src%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/973f191136cece92374494a7cf99eae1286818a9/src%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi.rs?ref=973f191136cece92374494a7cf99eae1286818a9", "patch": "@@ -342,42 +342,8 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n             .collect::<Vec<_>>()\n     };\n \n-    if let TypeVariants::TyFnDef(def_id, substs) = fn_ty.sty {\n-        if sig.abi == Abi::RustIntrinsic {\n-            let intrinsic = fx.tcx.item_name(def_id).as_str();\n-            let intrinsic = &intrinsic[..];\n-\n-            let ret = match destination {\n-                Some((place, _)) => trans_place(fx, place),\n-                None => {\n-                    println!(\n-                        \"codegen_call(fx, {:?}, {:?}, {:?})\",\n-                        func, args, destination\n-                    );\n-                    // Insert non returning intrinsics here\n-                    match intrinsic {\n-                        \"abort\" => {\n-                            fx.bcx.ins().trap(TrapCode::User(!0 - 1));\n-                        }\n-                        \"unreachable\" => {\n-                            fx.bcx.ins().trap(TrapCode::User(!0 - 1));\n-                        }\n-                        _ => unimplemented!(\"unsupported instrinsic {}\", intrinsic),\n-                    }\n-                    return;\n-                }\n-            };\n-\n-            codegen_intrinsic_call(fx, intrinsic, substs, args, ret);\n-\n-            if let Some((_, dest)) = *destination {\n-                let ret_ebb = fx.get_ebb(dest);\n-                fx.bcx.ins().jump(ret_ebb, &[]);\n-            } else {\n-                fx.bcx.ins().trap(TrapCode::User(!0));\n-            }\n-            return;\n-        }\n+    if codegen_intrinsic_call(fx, fn_ty, sig, &args, destination) {\n+        return;\n     }\n \n     let return_ptr = match destination {\n@@ -418,207 +384,245 @@ pub fn codegen_call<'a, 'tcx: 'a>(\n \n fn codegen_intrinsic_call<'a, 'tcx: 'a>(\n     fx: &mut FunctionCx<'a, 'tcx>,\n-    intrinsic: &str,\n-    substs: &Substs<'tcx>,\n-    args: Vec<CValue<'tcx>>,\n-    ret: CPlace<'tcx>,\n-) {\n-    let nil_ty = fx.tcx.mk_nil();\n-    let u64_layout = fx.layout_of(fx.tcx.types.u64);\n-    let usize_layout = fx.layout_of(fx.tcx.types.usize);\n+    fn_ty: Ty<'tcx>,\n+    sig: FnSig<'tcx>,\n+    args: &[CValue<'tcx>],\n+    destination: &Option<(Place<'tcx>, BasicBlock)>,\n+) -> bool {\n+    if let TypeVariants::TyFnDef(def_id, substs) = fn_ty.sty {\n+        if sig.abi == Abi::RustIntrinsic {\n+            let intrinsic = fx.tcx.item_name(def_id).as_str();\n+            let intrinsic = &intrinsic[..];\n \n-    match intrinsic {\n-        \"assume\" => {\n-            assert_eq!(args.len(), 1);\n-        }\n-        \"arith_offset\" => {\n-            assert_eq!(args.len(), 2);\n-            let base = args[0].load_value(fx);\n-            let offset = args[1].load_value(fx);\n-            let res = fx.bcx.ins().iadd(base, offset);\n-            let res = CValue::ByVal(res, ret.layout());\n-            ret.write_cvalue(fx, res);\n-        }\n-        \"likely\" | \"unlikely\" => {\n-            assert_eq!(args.len(), 1);\n-            ret.write_cvalue(fx, args[0]);\n-        }\n-        \"copy\" | \"copy_nonoverlapping\" => {\n-            let elem_ty = substs.type_at(0);\n-            let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n-            let elem_size = fx.bcx.ins().iconst(types::I64, elem_size as i64);\n-            assert_eq!(args.len(), 3);\n-            let src = args[0];\n-            let dst = args[1];\n-            let count = args[2].load_value(fx);\n-            let byte_amount = fx.bcx.ins().imul(count, elem_size);\n-            fx.easy_call(\n-                \"memmove\",\n-                &[dst, src, CValue::ByVal(byte_amount, usize_layout)],\n-                nil_ty,\n-            );\n-        }\n-        \"discriminant_value\" => {\n-            assert_eq!(args.len(), 1);\n-            let discr = crate::base::trans_get_discriminant(fx, args[0], ret.layout());\n-            ret.write_cvalue(fx, discr);\n-        }\n-        \"size_of\" => {\n-            assert_eq!(args.len(), 0);\n-            let size_of = fx.layout_of(substs.type_at(0)).size.bytes();\n-            let size_of = CValue::const_val(fx, usize_layout.ty, size_of as i64);\n-            ret.write_cvalue(fx, size_of);\n-        }\n-        \"type_id\" => {\n-            assert_eq!(args.len(), 0);\n-            let type_id = fx.tcx.type_id_hash(substs.type_at(0));\n-            let type_id = CValue::const_val(fx, u64_layout.ty, type_id as i64);\n-            ret.write_cvalue(fx, type_id);\n-        }\n-        \"min_align_of\" => {\n-            assert_eq!(args.len(), 0);\n-            let min_align = fx.layout_of(substs.type_at(0)).align.abi();\n-            let min_align = CValue::const_val(fx, usize_layout.ty, min_align as i64);\n-            ret.write_cvalue(fx, min_align);\n-        }\n-        _ if intrinsic.starts_with(\"unchecked_\") => {\n-            assert_eq!(args.len(), 2);\n-            let bin_op = match intrinsic {\n-                \"unchecked_div\" => BinOp::Div,\n-                \"unchecked_rem\" => BinOp::Rem,\n-                \"unchecked_shl\" => BinOp::Shl,\n-                \"unchecked_shr\" => BinOp::Shr,\n-                _ => unimplemented!(\"intrinsic {}\", intrinsic),\n-            };\n-            let res = match ret.layout().ty.sty {\n-                TypeVariants::TyUint(_) => crate::base::trans_int_binop(\n-                    fx,\n-                    bin_op,\n-                    args[0],\n-                    args[1],\n-                    ret.layout().ty,\n-                    false,\n-                ),\n-                TypeVariants::TyInt(_) => crate::base::trans_int_binop(\n-                    fx,\n-                    bin_op,\n-                    args[0],\n-                    args[1],\n-                    ret.layout().ty,\n-                    true,\n-                ),\n-                _ => panic!(),\n-            };\n-            ret.write_cvalue(fx, res);\n-        }\n-        _ if intrinsic.ends_with(\"_with_overflow\") => {\n-            assert_eq!(args.len(), 2);\n-            assert_eq!(args[0].layout().ty, args[1].layout().ty);\n-            let bin_op = match intrinsic {\n-                \"add_with_overflow\" => BinOp::Add,\n-                \"sub_with_overflow\" => BinOp::Sub,\n-                \"mul_with_overflow\" => BinOp::Mul,\n-                _ => unimplemented!(\"intrinsic {}\", intrinsic),\n-            };\n-            let res = match args[0].layout().ty.sty {\n-                TypeVariants::TyUint(_) => crate::base::trans_checked_int_binop(\n-                    fx,\n-                    bin_op,\n-                    args[0],\n-                    args[1],\n-                    ret.layout().ty,\n-                    false,\n-                ),\n-                TypeVariants::TyInt(_) => crate::base::trans_checked_int_binop(\n-                    fx,\n-                    bin_op,\n-                    args[0],\n-                    args[1],\n-                    ret.layout().ty,\n-                    true,\n-                ),\n-                _ => panic!(),\n-            };\n-            ret.write_cvalue(fx, res);\n-        }\n-        _ if intrinsic.starts_with(\"overflowing_\") => {\n-            assert_eq!(args.len(), 2);\n-            assert_eq!(args[0].layout().ty, args[1].layout().ty);\n-            let bin_op = match intrinsic {\n-                \"overflowing_add\" => BinOp::Add,\n-                \"overflowing_sub\" => BinOp::Sub,\n-                \"overflowing_mul\" => BinOp::Mul,\n-                _ => unimplemented!(\"intrinsic {}\", intrinsic),\n-            };\n-            let res = match args[0].layout().ty.sty {\n-                TypeVariants::TyUint(_) => crate::base::trans_int_binop(\n-                    fx,\n-                    bin_op,\n-                    args[0],\n-                    args[1],\n-                    ret.layout().ty,\n-                    false,\n-                ),\n-                TypeVariants::TyInt(_) => crate::base::trans_int_binop(\n-                    fx,\n-                    bin_op,\n-                    args[0],\n-                    args[1],\n-                    ret.layout().ty,\n-                    true,\n-                ),\n-                _ => panic!(),\n+            let ret = match destination {\n+                Some((place, _)) => trans_place(fx, place),\n+                None => {\n+                    println!(\n+                        \"codegen_call(fx, _, {:?}, {:?})\",\n+                        args, destination\n+                    );\n+                    // Insert non returning intrinsics here\n+                    match intrinsic {\n+                        \"abort\" => {\n+                            fx.bcx.ins().trap(TrapCode::User(!0 - 1));\n+                        }\n+                        \"unreachable\" => {\n+                            fx.bcx.ins().trap(TrapCode::User(!0 - 1));\n+                        }\n+                        _ => unimplemented!(\"unsupported instrinsic {}\", intrinsic),\n+                    }\n+                    return true;\n+                }\n             };\n-            ret.write_cvalue(fx, res);\n-        }\n-        \"offset\" => {\n-            assert_eq!(args.len(), 2);\n-            let base = args[0].load_value(fx);\n-            let offset = args[1].load_value(fx);\n-            let res = fx.bcx.ins().iadd(base, offset);\n-            ret.write_cvalue(fx, CValue::ByVal(res, args[0].layout()));\n-        }\n-        \"transmute\" => {\n-            assert_eq!(args.len(), 1);\n-            let src_ty = substs.type_at(0);\n-            let dst_ty = substs.type_at(1);\n-            assert_eq!(args[0].layout().ty, src_ty);\n-            let addr = args[0].force_stack(fx);\n-            let dst_layout = fx.layout_of(dst_ty);\n-            ret.write_cvalue(fx, CValue::ByRef(addr, dst_layout))\n-        }\n-        \"uninit\" => {\n-            assert_eq!(args.len(), 0);\n-            let ty = substs.type_at(0);\n-            let layout = fx.layout_of(ty);\n-            let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n-                kind: StackSlotKind::ExplicitSlot,\n-                size: layout.size.bytes() as u32,\n-                offset: None,\n-            });\n \n-            let uninit_place = CPlace::from_stack_slot(fx, stack_slot, ty);\n-            let uninit_val = uninit_place.to_cvalue(fx);\n-            ret.write_cvalue(fx, uninit_val);\n-        }\n-        \"ctlz\" | \"ctlz_nonzero\" => {\n-            assert_eq!(args.len(), 1);\n-            let arg = args[0].load_value(fx);\n-            let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n-            ret.write_cvalue(fx, res);\n-        }\n-        \"cttz\" | \"cttz_nonzero\" => {\n-            assert_eq!(args.len(), 1);\n-            let arg = args[0].load_value(fx);\n-            let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n-            ret.write_cvalue(fx, res);\n-        }\n-        \"ctpop\" => {\n-            assert_eq!(args.len(), 1);\n-            let arg = args[0].load_value(fx);\n-            let res = CValue::ByVal(fx.bcx.ins().popcnt(arg), args[0].layout());\n-            ret.write_cvalue(fx, res);\n+            let nil_ty = fx.tcx.mk_nil();\n+            let u64_layout = fx.layout_of(fx.tcx.types.u64);\n+            let usize_layout = fx.layout_of(fx.tcx.types.usize);\n+\n+            match intrinsic {\n+                \"assume\" => {\n+                    assert_eq!(args.len(), 1);\n+                }\n+                \"arith_offset\" => {\n+                    assert_eq!(args.len(), 2);\n+                    let base = args[0].load_value(fx);\n+                    let offset = args[1].load_value(fx);\n+                    let res = fx.bcx.ins().iadd(base, offset);\n+                    let res = CValue::ByVal(res, ret.layout());\n+                    ret.write_cvalue(fx, res);\n+                }\n+                \"likely\" | \"unlikely\" => {\n+                    assert_eq!(args.len(), 1);\n+                    ret.write_cvalue(fx, args[0]);\n+                }\n+                \"copy\" | \"copy_nonoverlapping\" => {\n+                    let elem_ty = substs.type_at(0);\n+                    let elem_size: u64 = fx.layout_of(elem_ty).size.bytes();\n+                    let elem_size = fx.bcx.ins().iconst(types::I64, elem_size as i64);\n+                    assert_eq!(args.len(), 3);\n+                    let src = args[0];\n+                    let dst = args[1];\n+                    let count = args[2].load_value(fx);\n+                    let byte_amount = fx.bcx.ins().imul(count, elem_size);\n+                    fx.easy_call(\n+                        \"memmove\",\n+                        &[dst, src, CValue::ByVal(byte_amount, usize_layout)],\n+                        nil_ty,\n+                    );\n+                }\n+                \"discriminant_value\" => {\n+                    assert_eq!(args.len(), 1);\n+                    let discr = crate::base::trans_get_discriminant(fx, args[0], ret.layout());\n+                    ret.write_cvalue(fx, discr);\n+                }\n+                \"size_of\" => {\n+                    assert_eq!(args.len(), 0);\n+                    let size_of = fx.layout_of(substs.type_at(0)).size.bytes();\n+                    let size_of = CValue::const_val(fx, usize_layout.ty, size_of as i64);\n+                    ret.write_cvalue(fx, size_of);\n+                }\n+                \"type_id\" => {\n+                    assert_eq!(args.len(), 0);\n+                    let type_id = fx.tcx.type_id_hash(substs.type_at(0));\n+                    let type_id = CValue::const_val(fx, u64_layout.ty, type_id as i64);\n+                    ret.write_cvalue(fx, type_id);\n+                }\n+                \"min_align_of\" => {\n+                    assert_eq!(args.len(), 0);\n+                    let min_align = fx.layout_of(substs.type_at(0)).align.abi();\n+                    let min_align = CValue::const_val(fx, usize_layout.ty, min_align as i64);\n+                    ret.write_cvalue(fx, min_align);\n+                }\n+                _ if intrinsic.starts_with(\"unchecked_\") => {\n+                    assert_eq!(args.len(), 2);\n+                    let bin_op = match intrinsic {\n+                        \"unchecked_div\" => BinOp::Div,\n+                        \"unchecked_rem\" => BinOp::Rem,\n+                        \"unchecked_shl\" => BinOp::Shl,\n+                        \"unchecked_shr\" => BinOp::Shr,\n+                        _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+                    };\n+                    let res = match ret.layout().ty.sty {\n+                        TypeVariants::TyUint(_) => crate::base::trans_int_binop(\n+                            fx,\n+                            bin_op,\n+                            args[0],\n+                            args[1],\n+                            ret.layout().ty,\n+                            false,\n+                        ),\n+                        TypeVariants::TyInt(_) => crate::base::trans_int_binop(\n+                            fx,\n+                            bin_op,\n+                            args[0],\n+                            args[1],\n+                            ret.layout().ty,\n+                            true,\n+                        ),\n+                        _ => panic!(),\n+                    };\n+                    ret.write_cvalue(fx, res);\n+                }\n+                _ if intrinsic.ends_with(\"_with_overflow\") => {\n+                    assert_eq!(args.len(), 2);\n+                    assert_eq!(args[0].layout().ty, args[1].layout().ty);\n+                    let bin_op = match intrinsic {\n+                        \"add_with_overflow\" => BinOp::Add,\n+                        \"sub_with_overflow\" => BinOp::Sub,\n+                        \"mul_with_overflow\" => BinOp::Mul,\n+                        _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+                    };\n+                    let res = match args[0].layout().ty.sty {\n+                        TypeVariants::TyUint(_) => crate::base::trans_checked_int_binop(\n+                            fx,\n+                            bin_op,\n+                            args[0],\n+                            args[1],\n+                            ret.layout().ty,\n+                            false,\n+                        ),\n+                        TypeVariants::TyInt(_) => crate::base::trans_checked_int_binop(\n+                            fx,\n+                            bin_op,\n+                            args[0],\n+                            args[1],\n+                            ret.layout().ty,\n+                            true,\n+                        ),\n+                        _ => panic!(),\n+                    };\n+                    ret.write_cvalue(fx, res);\n+                }\n+                _ if intrinsic.starts_with(\"overflowing_\") => {\n+                    assert_eq!(args.len(), 2);\n+                    assert_eq!(args[0].layout().ty, args[1].layout().ty);\n+                    let bin_op = match intrinsic {\n+                        \"overflowing_add\" => BinOp::Add,\n+                        \"overflowing_sub\" => BinOp::Sub,\n+                        \"overflowing_mul\" => BinOp::Mul,\n+                        _ => unimplemented!(\"intrinsic {}\", intrinsic),\n+                    };\n+                    let res = match args[0].layout().ty.sty {\n+                        TypeVariants::TyUint(_) => crate::base::trans_int_binop(\n+                            fx,\n+                            bin_op,\n+                            args[0],\n+                            args[1],\n+                            ret.layout().ty,\n+                            false,\n+                        ),\n+                        TypeVariants::TyInt(_) => crate::base::trans_int_binop(\n+                            fx,\n+                            bin_op,\n+                            args[0],\n+                            args[1],\n+                            ret.layout().ty,\n+                            true,\n+                        ),\n+                        _ => panic!(),\n+                    };\n+                    ret.write_cvalue(fx, res);\n+                }\n+                \"offset\" => {\n+                    assert_eq!(args.len(), 2);\n+                    let base = args[0].load_value(fx);\n+                    let offset = args[1].load_value(fx);\n+                    let res = fx.bcx.ins().iadd(base, offset);\n+                    ret.write_cvalue(fx, CValue::ByVal(res, args[0].layout()));\n+                }\n+                \"transmute\" => {\n+                    assert_eq!(args.len(), 1);\n+                    let src_ty = substs.type_at(0);\n+                    let dst_ty = substs.type_at(1);\n+                    assert_eq!(args[0].layout().ty, src_ty);\n+                    let addr = args[0].force_stack(fx);\n+                    let dst_layout = fx.layout_of(dst_ty);\n+                    ret.write_cvalue(fx, CValue::ByRef(addr, dst_layout))\n+                }\n+                \"uninit\" => {\n+                    assert_eq!(args.len(), 0);\n+                    let ty = substs.type_at(0);\n+                    let layout = fx.layout_of(ty);\n+                    let stack_slot = fx.bcx.create_stack_slot(StackSlotData {\n+                        kind: StackSlotKind::ExplicitSlot,\n+                        size: layout.size.bytes() as u32,\n+                        offset: None,\n+                    });\n+\n+                    let uninit_place = CPlace::from_stack_slot(fx, stack_slot, ty);\n+                    let uninit_val = uninit_place.to_cvalue(fx);\n+                    ret.write_cvalue(fx, uninit_val);\n+                }\n+                \"ctlz\" | \"ctlz_nonzero\" => {\n+                    assert_eq!(args.len(), 1);\n+                    let arg = args[0].load_value(fx);\n+                    let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n+                    ret.write_cvalue(fx, res);\n+                }\n+                \"cttz\" | \"cttz_nonzero\" => {\n+                    assert_eq!(args.len(), 1);\n+                    let arg = args[0].load_value(fx);\n+                    let res = CValue::ByVal(fx.bcx.ins().clz(arg), args[0].layout());\n+                    ret.write_cvalue(fx, res);\n+                }\n+                \"ctpop\" => {\n+                    assert_eq!(args.len(), 1);\n+                    let arg = args[0].load_value(fx);\n+                    let res = CValue::ByVal(fx.bcx.ins().popcnt(arg), args[0].layout());\n+                    ret.write_cvalue(fx, res);\n+                }\n+                _ => unimpl!(\"unsupported intrinsic {}\", intrinsic),\n+            }\n+\n+            if let Some((_, dest)) = *destination {\n+                let ret_ebb = fx.get_ebb(dest);\n+                fx.bcx.ins().jump(ret_ebb, &[]);\n+            } else {\n+                fx.bcx.ins().trap(TrapCode::User(!0));\n+            }\n+            return true;\n         }\n-        _ => unimpl!(\"unsupported intrinsic {}\", intrinsic),\n     }\n+\n+    false\n }"}]}