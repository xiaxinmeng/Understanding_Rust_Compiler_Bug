{"sha": "ec005ccf84e470a70f8bb8b5347ab8e793fb30a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMDA1Y2NmODRlNDcwYTcwZjhiYjhiNTM0N2FiOGU3OTNmYjMwYTM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-18T21:17:22Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-07-23T12:20:20Z"}, "message": "Separate the construction of a generic bound failure from its emission.", "tree": {"sha": "6c134a0e23961d1ae512404ea93be21f53ea4264", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c134a0e23961d1ae512404ea93be21f53ea4264"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec005ccf84e470a70f8bb8b5347ab8e793fb30a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec005ccf84e470a70f8bb8b5347ab8e793fb30a3", "html_url": "https://github.com/rust-lang/rust/commit/ec005ccf84e470a70f8bb8b5347ab8e793fb30a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec005ccf84e470a70f8bb8b5347ab8e793fb30a3/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "87e729f58a440c2b384f4871fb68f07afdbd3ba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/87e729f58a440c2b384f4871fb68f07afdbd3ba6", "html_url": "https://github.com/rust-lang/rust/commit/87e729f58a440c2b384f4871fb68f07afdbd3ba6"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "4ad60f2f85e2cf4c67829bc3a18d0f862056f776", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ec005ccf84e470a70f8bb8b5347ab8e793fb30a3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec005ccf84e470a70f8bb8b5347ab8e793fb30a3/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=ec005ccf84e470a70f8bb8b5347ab8e793fb30a3", "patch": "@@ -1086,6 +1086,23 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         bound_kind: GenericKind<'tcx>,\n         sub: Region<'tcx>,\n     ) {\n+        self.construct_generic_bound_failure(region_scope_tree,\n+                                             span,\n+                                             origin,\n+                                             bound_kind,\n+                                             sub)\n+            .emit()\n+    }\n+\n+    pub fn construct_generic_bound_failure(\n+        &self,\n+        region_scope_tree: &region::ScopeTree,\n+        span: Span,\n+        origin: Option<SubregionOrigin<'tcx>>,\n+        bound_kind: GenericKind<'tcx>,\n+        sub: Region<'tcx>,\n+    ) -> DiagnosticBuilder<'a>\n+    {\n         // Attempt to obtain the span of the parameter so we can\n         // suggest adding an explicit lifetime bound to it.\n         let type_param_span = match (self.in_progress_tables, bound_kind) {\n@@ -1139,14 +1156,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             trait_item_def_id,\n         }) = origin\n         {\n-            self.report_extra_impl_obligation(\n+            return self.report_extra_impl_obligation(\n                 span,\n                 item_name,\n                 impl_item_def_id,\n                 trait_item_def_id,\n                 &format!(\"`{}: {}`\", bound_kind, sub),\n-            ).emit();\n-            return;\n+            );\n         }\n \n         fn binding_suggestion<'tcx, S: fmt::Display>(\n@@ -1229,7 +1245,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         if let Some(origin) = origin {\n             self.note_region_origin(&mut err, &origin);\n         }\n-        err.emit();\n+        err\n     }\n \n     fn report_sub_sup_conflict("}]}