{"sha": "14caf7396d1875ff96268f48ea0d203fb989d77a", "node_id": "C_kwDOAAsO6NoAKDE0Y2FmNzM5NmQxODc1ZmY5NjI2OGY0OGVhMGQyMDNmYjk4OWQ3N2E", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-07T09:29:51Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-10-25T13:27:04Z"}, "message": "Pull opaque type handling out of the type relating delegate", "tree": {"sha": "a2cbca437dc3898e041ffc5fc4c006d22715b52d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2cbca437dc3898e041ffc5fc4c006d22715b52d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14caf7396d1875ff96268f48ea0d203fb989d77a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14caf7396d1875ff96268f48ea0d203fb989d77a", "html_url": "https://github.com/rust-lang/rust/commit/14caf7396d1875ff96268f48ea0d203fb989d77a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14caf7396d1875ff96268f48ea0d203fb989d77a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1481fd964bac3c750c7e1b21206fdaa60346c456", "url": "https://api.github.com/repos/rust-lang/rust/commits/1481fd964bac3c750c7e1b21206fdaa60346c456", "html_url": "https://github.com/rust-lang/rust/commit/1481fd964bac3c750c7e1b21206fdaa60346c456"}], "stats": {"total": 50, "additions": 19, "deletions": 31}, "files": [{"sha": "ca249938d04051b7567b77434d4f24f2a1fc33fe", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/14caf7396d1875ff96268f48ea0d203fb989d77a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14caf7396d1875ff96268f48ea0d203fb989d77a/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=14caf7396d1875ff96268f48ea0d203fb989d77a", "patch": "@@ -1,6 +1,6 @@\n use rustc_infer::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelatingDelegate};\n use rustc_infer::infer::NllRegionVariableOrigin;\n-use rustc_infer::traits::ObligationCause;\n+use rustc_infer::traits::PredicateObligations;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::TypeRelation;\n@@ -155,27 +155,16 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n         true\n     }\n \n-    fn register_opaque_type(\n+    fn register_opaque_type_obligations(\n         &mut self,\n-        a: Ty<'tcx>,\n-        b: Ty<'tcx>,\n-        a_is_expected: bool,\n+        obligations: PredicateObligations<'tcx>,\n     ) -> Result<(), TypeError<'tcx>> {\n-        let param_env = self.param_env();\n-        let span = self.span();\n-        let def_id = self.type_checker.body.source.def_id().expect_local();\n-        let body_id = self.type_checker.tcx().hir().local_def_id_to_hir_id(def_id);\n-        let cause = ObligationCause::misc(span, body_id);\n         self.type_checker\n             .fully_perform_op(\n                 self.locations,\n                 self.category,\n                 InstantiateOpaqueType {\n-                    obligations: self\n-                        .type_checker\n-                        .infcx\n-                        .handle_opaque_type(a, b, a_is_expected, &cause, param_env)?\n-                        .obligations,\n+                    obligations,\n                     // These fields are filled in during execution of the operation\n                     base_universe: None,\n                     region_constraints: None,"}, {"sha": "4d287988e33604a10d1ff6ff5f0d7c109bf71130", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 5, "deletions": 11, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/14caf7396d1875ff96268f48ea0d203fb989d77a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14caf7396d1875ff96268f48ea0d203fb989d77a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=14caf7396d1875ff96268f48ea0d203fb989d77a", "patch": "@@ -16,8 +16,8 @@ use crate::infer::nll_relate::{NormalizationStrategy, TypeRelating, TypeRelating\n use crate::infer::region_constraints::{Constraint, RegionConstraintData};\n use crate::infer::{InferCtxt, InferOk, InferResult, NllRegionVariableOrigin};\n use crate::traits::query::{Fallible, NoSolution};\n-use crate::traits::TraitEngine;\n use crate::traits::{Obligation, ObligationCause, PredicateObligation};\n+use crate::traits::{PredicateObligations, TraitEngine};\n use rustc_data_structures::captures::Captures;\n use rustc_index::vec::Idx;\n use rustc_index::vec::IndexVec;\n@@ -509,7 +509,7 @@ impl<'tcx> InferCtxt<'tcx> {\n         for &(a, b) in &query_response.value.opaque_types {\n             let a = substitute_value(self.tcx, &result_subst, a);\n             let b = substitute_value(self.tcx, &result_subst, b);\n-            obligations.extend(self.handle_opaque_type(a, b, true, cause, param_env)?.obligations);\n+            obligations.extend(self.at(cause, param_env).eq(a, b)?.obligations);\n         }\n \n         Ok(InferOk { value: result_subst, obligations })\n@@ -741,17 +741,11 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         true\n     }\n \n-    fn register_opaque_type(\n+    fn register_opaque_type_obligations(\n         &mut self,\n-        a: Ty<'tcx>,\n-        b: Ty<'tcx>,\n-        a_is_expected: bool,\n+        obligations: PredicateObligations<'tcx>,\n     ) -> Result<(), TypeError<'tcx>> {\n-        self.obligations.extend(\n-            self.infcx\n-                .handle_opaque_type(a, b, a_is_expected, &self.cause, self.param_env)?\n-                .obligations,\n-        );\n+        self.obligations.extend(obligations);\n         Ok(())\n     }\n }"}, {"sha": "529c72d266aeeb9f73c4bcb51f7050747fb1d4fe", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/14caf7396d1875ff96268f48ea0d203fb989d77a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14caf7396d1875ff96268f48ea0d203fb989d77a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=14caf7396d1875ff96268f48ea0d203fb989d77a", "patch": "@@ -25,7 +25,9 @@ use crate::infer::combine::ConstEquateRelation;\n use crate::infer::InferCtxt;\n use crate::infer::{ConstVarValue, ConstVariableValue};\n use crate::infer::{TypeVariableOrigin, TypeVariableOriginKind};\n+use crate::traits::PredicateObligation;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc_middle::traits::ObligationCause;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::visit::{TypeSuperVisitable, TypeVisitable, TypeVisitor};\n@@ -91,11 +93,9 @@ pub trait TypeRelatingDelegate<'tcx> {\n     );\n \n     fn const_equate(&mut self, a: ty::Const<'tcx>, b: ty::Const<'tcx>);\n-    fn register_opaque_type(\n+    fn register_opaque_type_obligations(\n         &mut self,\n-        a: Ty<'tcx>,\n-        b: Ty<'tcx>,\n-        a_is_expected: bool,\n+        obligations: Vec<PredicateObligation<'tcx>>,\n     ) -> Result<(), TypeError<'tcx>>;\n \n     /// Creates a new universe index. Used when instantiating placeholders.\n@@ -414,7 +414,12 @@ where\n             (_, &ty::Opaque(..)) => (generalize(a, true)?, b),\n             _ => unreachable!(),\n         };\n-        self.delegate.register_opaque_type(a, b, true)?;\n+        let cause = ObligationCause::dummy_with_span(self.delegate.span());\n+        let obligations = self\n+            .infcx\n+            .handle_opaque_type(a, b, true, &cause, self.delegate.param_env())?\n+            .obligations;\n+        self.delegate.register_opaque_type_obligations(obligations)?;\n         trace!(a = ?a.kind(), b = ?b.kind(), \"opaque type instantiated\");\n         Ok(a)\n     }"}]}