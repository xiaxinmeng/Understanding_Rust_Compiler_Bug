{"sha": "d560b50d87c05ea5a8e6186c05a50ecd828eaaae", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NjBiNTBkODdjMDVlYTVhOGU2MTg2YzA1YTUwZWNkODI4ZWFhYWU=", "commit": {"author": {"name": "Stefan Lankes", "email": "slankes@eonerc.rwth-aachen.de", "date": "2020-10-06T10:12:15Z"}, "committer": {"name": "Stefan Lankes", "email": "slankes@eonerc.rwth-aachen.de", "date": "2020-10-11T09:54:16Z"}, "message": "revise code to pass the format check", "tree": {"sha": "22dc0ee609f740355834eea8710892b0057a287b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22dc0ee609f740355834eea8710892b0057a287b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d560b50d87c05ea5a8e6186c05a50ecd828eaaae", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJSBAABCAA8FiEEGkIfPZjnqQD6B3IuKFeOu3ie9isFAl+C1kgeHHNsYW5rZXNA\nZW9uZXJjLnJ3dGgtYWFjaGVuLmRlAAoJEChXjrt4nvYrodIP/iXSvIGJeuUjlrVS\n/XVGc/x2JUF7g2sVJypOzHmvv78j7Jf5qgjkSfn2v1V2yfRR+uDmsFsC4kVSAlCX\nDmz3xcbx/SklbQoEQBIVE/6z/WYP7xYrvMtFKRUs6aChj2tptgfMgHnJe2+tAaQ/\nJ0iVqBCPOa/O6XDXQigntiVvEMk1Me56cG9TdAOQ+7OrW4f8y1YyaMTKQjFbtce1\nS94aigk9a44TrTSYoaxP/rbk78+BSWGgrTXYz9dZ0yaPdv9PYc5mgj6kQity2Y43\nnOXbsyrRBkoWytyTqwpTz/2A4RiFSjXz5YIAZ5spzvQYOKiWB+BGcM/eJq1qcXzu\nf9z1HmxvYoODbYGucM+GJRR5l43Ds3s0dxznijc6ugapOmC8f7Cb7Sqo+dbktz2+\nqqx51SYPWkCEbxaXybpMUr/VY4DdOFT59AtoB4EKJw6MDPoucnKa0j4VljhmMDn7\n7puIUWyBiUW1bQ27hTvS8Ajpazp5g88AsEgizPT79N838JiQ7GW1cSWcycnRVz7+\n3ZXFABsl60gsgZ+lDZdYTgDrsaRopd7W8t+Qi1Du6MqZrKsK0yal8fwgBhKT8MdN\nkTba6qC+3uUc39Tuh79JbxscImtwaCR7w6La2i5HTy/H+DTTUnZfs35PWvo55gNd\n0r0saYrWEKSfC5w5cdaMCy3MTw69\n=zXnL\n-----END PGP SIGNATURE-----", "payload": "tree 22dc0ee609f740355834eea8710892b0057a287b\nparent 98fcc3fbc7b2f3420d393b8916746002d501401c\nauthor Stefan Lankes <slankes@eonerc.rwth-aachen.de> 1601979135 +0200\ncommitter Stefan Lankes <slankes@eonerc.rwth-aachen.de> 1602410056 +0200\n\nrevise code to pass the format check\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d560b50d87c05ea5a8e6186c05a50ecd828eaaae", "html_url": "https://github.com/rust-lang/rust/commit/d560b50d87c05ea5a8e6186c05a50ecd828eaaae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d560b50d87c05ea5a8e6186c05a50ecd828eaaae/comments", "author": {"login": "stlankes", "id": 5888473, "node_id": "MDQ6VXNlcjU4ODg0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5888473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlankes", "html_url": "https://github.com/stlankes", "followers_url": "https://api.github.com/users/stlankes/followers", "following_url": "https://api.github.com/users/stlankes/following{/other_user}", "gists_url": "https://api.github.com/users/stlankes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlankes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlankes/subscriptions", "organizations_url": "https://api.github.com/users/stlankes/orgs", "repos_url": "https://api.github.com/users/stlankes/repos", "events_url": "https://api.github.com/users/stlankes/events{/privacy}", "received_events_url": "https://api.github.com/users/stlankes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stlankes", "id": 5888473, "node_id": "MDQ6VXNlcjU4ODg0NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/5888473?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stlankes", "html_url": "https://github.com/stlankes", "followers_url": "https://api.github.com/users/stlankes/followers", "following_url": "https://api.github.com/users/stlankes/following{/other_user}", "gists_url": "https://api.github.com/users/stlankes/gists{/gist_id}", "starred_url": "https://api.github.com/users/stlankes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stlankes/subscriptions", "organizations_url": "https://api.github.com/users/stlankes/orgs", "repos_url": "https://api.github.com/users/stlankes/repos", "events_url": "https://api.github.com/users/stlankes/events{/privacy}", "received_events_url": "https://api.github.com/users/stlankes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98fcc3fbc7b2f3420d393b8916746002d501401c", "url": "https://api.github.com/repos/rust-lang/rust/commits/98fcc3fbc7b2f3420d393b8916746002d501401c", "html_url": "https://github.com/rust-lang/rust/commit/98fcc3fbc7b2f3420d393b8916746002d501401c"}], "stats": {"total": 19, "additions": 5, "deletions": 14}, "files": [{"sha": "bd9a9023396b4c09706e97fe8fec4469abbb9caa", "filename": "library/std/src/sys/hermit/mutex.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d560b50d87c05ea5a8e6186c05a50ecd828eaaae/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d560b50d87c05ea5a8e6186c05a50ecd828eaaae/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fmutex.rs?ref=d560b50d87c05ea5a8e6186c05a50ecd828eaaae", "patch": "@@ -3,7 +3,7 @@ use crate::collections::VecDeque;\n use crate::ffi::c_void;\n use crate::ops::{Deref, DerefMut, Drop};\n use crate::ptr;\n-use crate::sync::atomic::{AtomicUsize, Ordering, spin_loop_hint};\n+use crate::sync::atomic::{spin_loop_hint, AtomicUsize, Ordering};\n use crate::sys::hermit::abi;\n \n /// This type provides a lock based on busy waiting to realize mutual exclusion\n@@ -50,10 +50,7 @@ impl<T> Spinlock<T> {\n     #[inline]\n     pub unsafe fn lock(&self) -> SpinlockGuard<'_, T> {\n         self.obtain_lock();\n-        SpinlockGuard {\n-            dequeue: &self.dequeue,\n-            data: &mut *self.data.get(),\n-        }\n+        SpinlockGuard { dequeue: &self.dequeue, data: &mut *self.data.get() }\n     }\n }\n \n@@ -147,10 +144,7 @@ struct MutexInner {\n \n impl MutexInner {\n     pub const fn new() -> MutexInner {\n-        MutexInner {\n-            locked: false,\n-            blocked_task: PriorityQueue::new(),\n-        }\n+        MutexInner { locked: false, blocked_task: PriorityQueue::new() }\n     }\n }\n \n@@ -163,9 +157,7 @@ unsafe impl Sync for Mutex {}\n \n impl Mutex {\n     pub const fn new() -> Mutex {\n-        Mutex {\n-            inner: Spinlock::new(MutexInner::new()),\n-        }\n+        Mutex { inner: Spinlock::new(MutexInner::new()) }\n     }\n \n     #[inline]\n@@ -211,8 +203,7 @@ impl Mutex {\n     }\n \n     #[inline]\n-    pub unsafe fn destroy(&self) {\n-    }\n+    pub unsafe fn destroy(&self) {}\n }\n \n pub struct ReentrantMutex {"}]}