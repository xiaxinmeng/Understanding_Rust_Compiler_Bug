{"sha": "509a56f72055ac8ec70702efa2c9b9dd97f5ac47", "node_id": "C_kwDOAAsO6NoAKDUwOWE1NmY3MjA1NWFjOGVjNzA3MDJlZmEyYzliOWRkOTdmNWFjNDc", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-07-10T09:52:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-10T09:52:18Z"}, "message": "Rollup merge of #99109 - WaffleLapkin:atomic_ti, r=Dylan-DPC\n\nfill new tracking issue for `feature(strict_provenance_atomic_ptr)`\n\nNew tracking issue: #99108.\n\nThe generic strict provenance issue has a lot of discussions on its own, so I think it's meaningful to have a separate issue for atomic ptr methods.", "tree": {"sha": "ed0dbfef32d94a3eed90fb693f40f1a2627aa55e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed0dbfef32d94a3eed90fb693f40f1a2627aa55e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/509a56f72055ac8ec70702efa2c9b9dd97f5ac47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiyqFSCRBK7hj4Ov3rIwAAGmcIADchHuMlJdYmlfMLq8agtONH\nLUZ2vAl4bphSF+ngmB3PELXZqVKevNbqe59FAQW91cJ9D/m3Xx7bo8GVIkFANe98\nzZy/OAnKaM1LjSIiya8b1p6n57qpM23KBnJNKat6nvk1VKo0yAkhZqfYxhYGjQAO\nKT8uvaSaw8MBxKb9IvTTCE/IAS0IfJwDF4BFzj7pUI1a/fVnCIn3NEFxCWG6hy/b\nlX9SBZ2XRE9oWIS2iL7GndvWGDwEpAytkslBSZCPXU0iyUTM04VsZ31cLFadxbTa\nvQceBBxDWtWw5DOdDD/Jotyq5iIs7ArSDgdFTQ1WLqOwXIkLNX9EnYGvRnHMY8M=\n=c+6C\n-----END PGP SIGNATURE-----\n", "payload": "tree ed0dbfef32d94a3eed90fb693f40f1a2627aa55e\nparent 86af7135aeb5cd326c4f181134d51b856876050c\nparent e9292b76525aaaaf3ad96b1231defdffc309fa03\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1657446738 +0200\ncommitter GitHub <noreply@github.com> 1657446738 +0200\n\nRollup merge of #99109 - WaffleLapkin:atomic_ti, r=Dylan-DPC\n\nfill new tracking issue for `feature(strict_provenance_atomic_ptr)`\n\nNew tracking issue: #99108.\n\nThe generic strict provenance issue has a lot of discussions on its own, so I think it's meaningful to have a separate issue for atomic ptr methods.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/509a56f72055ac8ec70702efa2c9b9dd97f5ac47", "html_url": "https://github.com/rust-lang/rust/commit/509a56f72055ac8ec70702efa2c9b9dd97f5ac47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/509a56f72055ac8ec70702efa2c9b9dd97f5ac47/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86af7135aeb5cd326c4f181134d51b856876050c", "url": "https://api.github.com/repos/rust-lang/rust/commits/86af7135aeb5cd326c4f181134d51b856876050c", "html_url": "https://github.com/rust-lang/rust/commit/86af7135aeb5cd326c4f181134d51b856876050c"}, {"sha": "e9292b76525aaaaf3ad96b1231defdffc309fa03", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9292b76525aaaaf3ad96b1231defdffc309fa03", "html_url": "https://github.com/rust-lang/rust/commit/e9292b76525aaaaf3ad96b1231defdffc309fa03"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "3780d330547b7dfd5f6bab63de08c06d94962dd0", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/509a56f72055ac8ec70702efa2c9b9dd97f5ac47/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/509a56f72055ac8ec70702efa2c9b9dd97f5ac47/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=509a56f72055ac8ec70702efa2c9b9dd97f5ac47", "patch": "@@ -1487,7 +1487,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[cfg(target_has_atomic = \"ptr\")]\n-    #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"95228\")]\n+    #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"99108\")]\n     pub fn fetch_ptr_add(&self, val: usize, order: Ordering) -> *mut T {\n         self.fetch_byte_add(val.wrapping_mul(core::mem::size_of::<T>()), order)\n     }\n@@ -1531,7 +1531,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[cfg(target_has_atomic = \"ptr\")]\n-    #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"95228\")]\n+    #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"99108\")]\n     pub fn fetch_ptr_sub(&self, val: usize, order: Ordering) -> *mut T {\n         self.fetch_byte_sub(val.wrapping_mul(core::mem::size_of::<T>()), order)\n     }\n@@ -1566,7 +1566,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[cfg(target_has_atomic = \"ptr\")]\n-    #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"95228\")]\n+    #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"99108\")]\n     pub fn fetch_byte_add(&self, val: usize, order: Ordering) -> *mut T {\n         #[cfg(not(bootstrap))]\n         // SAFETY: data races are prevented by atomic intrinsics.\n@@ -1609,7 +1609,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[cfg(target_has_atomic = \"ptr\")]\n-    #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"95228\")]\n+    #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"99108\")]\n     pub fn fetch_byte_sub(&self, val: usize, order: Ordering) -> *mut T {\n         #[cfg(not(bootstrap))]\n         // SAFETY: data races are prevented by atomic intrinsics.\n@@ -1667,7 +1667,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[cfg(target_has_atomic = \"ptr\")]\n-    #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"95228\")]\n+    #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"99108\")]\n     pub fn fetch_or(&self, val: usize, order: Ordering) -> *mut T {\n         #[cfg(not(bootstrap))]\n         // SAFETY: data races are prevented by atomic intrinsics.\n@@ -1724,7 +1724,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[cfg(target_has_atomic = \"ptr\")]\n-    #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"95228\")]\n+    #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"99108\")]\n     pub fn fetch_and(&self, val: usize, order: Ordering) -> *mut T {\n         #[cfg(not(bootstrap))]\n         // SAFETY: data races are prevented by atomic intrinsics.\n@@ -1779,7 +1779,7 @@ impl<T> AtomicPtr<T> {\n     /// ```\n     #[inline]\n     #[cfg(target_has_atomic = \"ptr\")]\n-    #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"95228\")]\n+    #[unstable(feature = \"strict_provenance_atomic_ptr\", issue = \"99108\")]\n     pub fn fetch_xor(&self, val: usize, order: Ordering) -> *mut T {\n         #[cfg(not(bootstrap))]\n         // SAFETY: data races are prevented by atomic intrinsics."}]}