{"sha": "2ee8b0e4c533dfa07e25a03a84b28452d68c52eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlZThiMGU0YzUzM2RmYTA3ZTI1YTAzYTg0YjI4NDUyZDY4YzUyZWI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-18T04:56:55Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-18T04:56:55Z"}, "message": "Remove `remove_blank_lines_at_start_or_end_of_block`\n\ncc #1974", "tree": {"sha": "a7d0a8c1b6d1947699fb44b8d62f15a7ade07eaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7d0a8c1b6d1947699fb44b8d62f15a7ade07eaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ee8b0e4c533dfa07e25a03a84b28452d68c52eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ee8b0e4c533dfa07e25a03a84b28452d68c52eb", "html_url": "https://github.com/rust-lang/rust/commit/2ee8b0e4c533dfa07e25a03a84b28452d68c52eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ee8b0e4c533dfa07e25a03a84b28452d68c52eb/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd9c15ad01f0412194ba670ec2a0b38fbecdf46f", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd9c15ad01f0412194ba670ec2a0b38fbecdf46f", "html_url": "https://github.com/rust-lang/rust/commit/dd9c15ad01f0412194ba670ec2a0b38fbecdf46f"}], "stats": {"total": 145, "additions": 50, "deletions": 95}, "files": [{"sha": "8c893f98d43e5b0a3306cb6ff120eaa1fa2fbe53", "filename": "Configurations.md", "status": "modified", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/2ee8b0e4c533dfa07e25a03a84b28452d68c52eb/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/2ee8b0e4c533dfa07e25a03a84b28452d68c52eb/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=2ee8b0e4c533dfa07e25a03a84b28452d68c52eb", "patch": "@@ -1991,45 +1991,6 @@ fn bar() {\n }\n ```\n \n-## `remove_blank_lines_at_start_or_end_of_block`\n-\n-Remove blank lines at the start or the end of a block.\n-\n-- **Default value**: `true`\n-- **Possible values**: `true`, `false`\n-- **Stable**: No\n-\n-#### `true`\n-\n-```rust\n-fn foo() {\n-    let msg = {\n-        let mut str = String::new();\n-        str.push_str(\"hello, \");\n-        str.push_str(\"world!\");\n-        str\n-    };\n-    println!(\"{}\", msg);\n-}\n-```\n-\n-#### `false`\n-\n-```rust\n-fn foo() {\n-\n-    let msg = {\n-\n-        let mut str = String::new();\n-        str.push_str(\"hello, \");\n-        str.push_str(\"world!\");\n-        str\n-\n-    };\n-    println!(\"{}\", msg);\n-\n-}\n-```\n \n ## `required_version`\n "}, {"sha": "e97a351a52a4de27f6fdecb36b8ffd0b99e05126", "filename": "src/config/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ee8b0e4c533dfa07e25a03a84b28452d68c52eb/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee8b0e4c533dfa07e25a03a84b28452d68c52eb/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=2ee8b0e4c533dfa07e25a03a84b28452d68c52eb", "patch": "@@ -83,8 +83,6 @@ create_config! {\n \n     // Misc.\n     remove_nested_parens: bool, true, true, \"Remove nested parens.\";\n-    remove_blank_lines_at_start_or_end_of_block: bool, true, false,\n-        \"Remove blank lines at start or end of a block\";\n     combine_control_expr: bool, true, false, \"Combine control expressions with function calls.\";\n     struct_field_align_threshold: usize, 0, false, \"Align struct fields if their diffs fits within \\\n                                              threshold.\";"}, {"sha": "a5f0c4441f6e464c3f445943fcf7e2acb20b325c", "filename": "src/visitor.rs", "status": "modified", "additions": 50, "deletions": 54, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/2ee8b0e4c533dfa07e25a03a84b28452d68c52eb/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ee8b0e4c533dfa07e25a03a84b28452d68c52eb/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=2ee8b0e4c533dfa07e25a03a84b28452d68c52eb", "patch": "@@ -128,45 +128,43 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         self.block_indent = self.block_indent.block_indent(self.config);\n         self.push_str(\"{\");\n \n-        if self.config.remove_blank_lines_at_start_or_end_of_block() {\n-            if let Some(first_stmt) = b.stmts.first() {\n-                let attr_lo = inner_attrs\n-                    .and_then(|attrs| inner_attributes(attrs).first().map(|attr| attr.span.lo()))\n-                    .or_else(|| {\n-                        // Attributes for an item in a statement position\n-                        // do not belong to the statement. (rust-lang/rust#34459)\n-                        if let ast::StmtKind::Item(ref item) = first_stmt.node {\n-                            item.attrs.first()\n-                        } else {\n-                            first_stmt.attrs().first()\n-                        }.and_then(|attr| {\n-                            // Some stmts can have embedded attributes.\n-                            // e.g. `match { #![attr] ... }`\n-                            let attr_lo = attr.span.lo();\n-                            if attr_lo < first_stmt.span.lo() {\n-                                Some(attr_lo)\n-                            } else {\n-                                None\n-                            }\n-                        })\n-                    });\n-\n-                let snippet = self.snippet(mk_sp(\n-                    self.last_pos,\n-                    attr_lo.unwrap_or_else(|| first_stmt.span.lo()),\n-                ));\n-                let len = CommentCodeSlices::new(snippet)\n-                    .nth(0)\n-                    .and_then(|(kind, _, s)| {\n-                        if kind == CodeCharKind::Normal {\n-                            s.rfind('\\n')\n+        if let Some(first_stmt) = b.stmts.first() {\n+            let attr_lo = inner_attrs\n+                .and_then(|attrs| inner_attributes(attrs).first().map(|attr| attr.span.lo()))\n+                .or_else(|| {\n+                    // Attributes for an item in a statement position\n+                    // do not belong to the statement. (rust-lang/rust#34459)\n+                    if let ast::StmtKind::Item(ref item) = first_stmt.node {\n+                        item.attrs.first()\n+                    } else {\n+                        first_stmt.attrs().first()\n+                    }.and_then(|attr| {\n+                        // Some stmts can have embedded attributes.\n+                        // e.g. `match { #![attr] ... }`\n+                        let attr_lo = attr.span.lo();\n+                        if attr_lo < first_stmt.span.lo() {\n+                            Some(attr_lo)\n                         } else {\n                             None\n                         }\n-                    });\n-                if let Some(len) = len {\n-                    self.last_pos = self.last_pos + BytePos::from_usize(len);\n-                }\n+                    })\n+                });\n+\n+            let snippet = self.snippet(mk_sp(\n+                self.last_pos,\n+                attr_lo.unwrap_or_else(|| first_stmt.span.lo()),\n+            ));\n+            let len = CommentCodeSlices::new(snippet)\n+                .nth(0)\n+                .and_then(|(kind, _, s)| {\n+                    if kind == CodeCharKind::Normal {\n+                        s.rfind('\\n')\n+                    } else {\n+                        None\n+                    }\n+                });\n+            if let Some(len) = len {\n+                self.last_pos = self.last_pos + BytePos::from_usize(len);\n             }\n         }\n \n@@ -195,24 +193,22 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         }\n \n         let mut remove_len = BytePos(0);\n-        if self.config.remove_blank_lines_at_start_or_end_of_block() {\n-            if let Some(stmt) = b.stmts.last() {\n-                let snippet = self.snippet(mk_sp(\n-                    stmt.span.hi(),\n-                    source!(self, b.span).hi() - brace_compensation,\n-                ));\n-                let len = CommentCodeSlices::new(snippet)\n-                    .last()\n-                    .and_then(|(kind, _, s)| {\n-                        if kind == CodeCharKind::Normal && s.trim().is_empty() {\n-                            Some(s.len())\n-                        } else {\n-                            None\n-                        }\n-                    });\n-                if let Some(len) = len {\n-                    remove_len = BytePos::from_usize(len);\n-                }\n+        if let Some(stmt) = b.stmts.last() {\n+            let snippet = self.snippet(mk_sp(\n+                stmt.span.hi(),\n+                source!(self, b.span).hi() - brace_compensation,\n+            ));\n+            let len = CommentCodeSlices::new(snippet)\n+                .last()\n+                .and_then(|(kind, _, s)| {\n+                    if kind == CodeCharKind::Normal && s.trim().is_empty() {\n+                        Some(s.len())\n+                    } else {\n+                        None\n+                    }\n+                });\n+            if let Some(len) = len {\n+                remove_len = BytePos::from_usize(len);\n             }\n         }\n "}]}