{"sha": "b205055c7bc92c0f873755996e6fac3e694c7e72", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMDUwNTVjN2JjOTJjMGY4NzM3NTU5OTZlNmZhYzNlNjk0YzdlNzI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-19T00:40:24Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-24T19:53:55Z"}, "message": "parser: better recovery for || in inner pats.", "tree": {"sha": "d08790b43bae6854a53e82b90f47fa7df1ba413c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d08790b43bae6854a53e82b90f47fa7df1ba413c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b205055c7bc92c0f873755996e6fac3e694c7e72", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b205055c7bc92c0f873755996e6fac3e694c7e72", "html_url": "https://github.com/rust-lang/rust/commit/b205055c7bc92c0f873755996e6fac3e694c7e72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b205055c7bc92c0f873755996e6fac3e694c7e72/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ffea18ddbe9ebaba4ff301a3c42e44a55741355", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ffea18ddbe9ebaba4ff301a3c42e44a55741355", "html_url": "https://github.com/rust-lang/rust/commit/1ffea18ddbe9ebaba4ff301a3c42e44a55741355"}], "stats": {"total": 143, "additions": 96, "deletions": 47}, "files": [{"sha": "b9871be229ce5529f974495eb26d8d1c0d4a7267", "filename": "src/libsyntax/parse/parser/pat.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b205055c7bc92c0f873755996e6fac3e694c7e72/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b205055c7bc92c0f873755996e6fac3e694c7e72/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fpat.rs?ref=b205055c7bc92c0f873755996e6fac3e694c7e72", "patch": "@@ -155,6 +155,25 @@ impl<'a> Parser<'a> {\n         Ok(())\n     }\n \n+    /// Recursive possibly-or-pattern parser with recovery for an erroneous leading `|`.\n+    /// See `parse_pat_with_or` for details on parsing or-patterns.\n+    fn parse_pat_with_or_inner(&mut self, expected: Expected) -> PResult<'a, P<Pat>> {\n+        // Recover if `|` or `||` is here.\n+        // The user is thinking that a leading `|` is allowed in this position.\n+        if let token::BinOp(token::Or) | token::OrOr = self.token.kind {\n+            let span = self.token.span;\n+            let rm_msg = format!(\"remove the `{}`\", pprust::token_to_string(&self.token));\n+\n+            self.struct_span_err(span, \"a leading `|` is only allowed in a top-level pattern\")\n+                .span_suggestion(span, &rm_msg, String::new(), Applicability::MachineApplicable)\n+                .emit();\n+\n+            self.bump();\n+        }\n+\n+        self.parse_pat_with_or(expected, true, false)\n+    }\n+\n     /// Parses a pattern, with a setting whether modern range patterns (e.g., `a..=b`, `a..b` are\n     /// allowed).\n     fn parse_pat_with_range_pat(\n@@ -173,7 +192,7 @@ impl<'a> Parser<'a> {\n                 // Parse `[pat, pat,...]` as a slice pattern.\n                 let (pats, _) = self.parse_delim_comma_seq(\n                     token::Bracket,\n-                    |p| p.parse_pat_with_or(None, true, false),\n+                    |p| p.parse_pat_with_or_inner(None),\n                 )?;\n                 PatKind::Slice(pats)\n             }\n@@ -303,7 +322,7 @@ impl<'a> Parser<'a> {\n     /// Parse a tuple or parenthesis pattern.\n     fn parse_pat_tuple_or_parens(&mut self) -> PResult<'a, PatKind> {\n         let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| {\n-            p.parse_pat_with_or(None, true, false)\n+            p.parse_pat_with_or_inner(None)\n         })?;\n \n         // Here, `(pat,)` is a tuple pattern.\n@@ -547,7 +566,7 @@ impl<'a> Parser<'a> {\n             err.span_label(self.token.span, msg);\n             return Err(err);\n         }\n-        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or(None, true, false))?;\n+        let (fields, _) = self.parse_paren_comma_seq(|p| p.parse_pat_with_or_inner(None))?;\n         Ok(PatKind::TupleStruct(path, fields))\n     }\n \n@@ -691,7 +710,7 @@ impl<'a> Parser<'a> {\n             // Parsing a pattern of the form \"fieldname: pat\"\n             let fieldname = self.parse_field_name()?;\n             self.bump();\n-            let pat = self.parse_pat_with_or(None, true, false)?;\n+            let pat = self.parse_pat_with_or_inner(None)?;\n             hi = pat.span;\n             (pat, fieldname, false)\n         } else {"}, {"sha": "7959812f5b39c18ba3dfa6c63860515e3f36f23b", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b205055c7bc92c0f873755996e6fac3e694c7e72/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b205055c7bc92c0f873755996e6fac3e694c7e72/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.rs?ref=b205055c7bc92c0f873755996e6fac3e694c7e72", "patch": "@@ -30,27 +30,20 @@ fn no_top_level_or_patterns() {\n \n // We also do not allow a leading `|` when not in a top level position:\n \n-#[cfg(FALSE)]\n-fn no_leading_parens() {\n-    let ( | A | B); //~ ERROR expected pattern, found `|`\n-}\n-\n-#[cfg(FALSE)]\n-fn no_leading_tuple() {\n-    let ( | A | B,); //~ ERROR expected pattern, found `|`\n-}\n-\n-#[cfg(FALSE)]\n-fn no_leading_slice() {\n-    let [ | A | B ]; //~ ERROR expected pattern, found `|`\n-}\n-\n-#[cfg(FALSE)]\n-fn no_leading_tuple_struct() {\n-    let TS( | A | B ); //~ ERROR expected pattern, found `|`\n-}\n-\n-#[cfg(FALSE)]\n-fn no_leading_struct() {\n-    let NS { f: | A | B }; //~ ERROR expected pattern, found `|`\n+fn no_leading_inner() {\n+    struct TS(E);\n+    struct NS { f: E }\n+\n+    let ( | A | B) = E::A; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let ( | A | B,) = (E::B,); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let [ | A | B ] = [E::A]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let TS( | A | B ); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let NS { f: | A | B }; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+\n+    let ( || A | B) = E::A; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let [ || A | B ] = [E::A]; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let TS( || A | B ); //~ ERROR a leading `|` is only allowed in a top-level pattern\n+    let NS { f: || A | B }; //~ ERROR a leading `|` is only allowed in a top-level pattern\n+\n+    let recovery_witness: String = 0; //~ ERROR mismatched types\n }"}, {"sha": "dd4c309ce85a3c3ff5ecbaa4fd90c3d0ff773892", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail.stderr", "status": "modified", "additions": 57, "deletions": 20, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/b205055c7bc92c0f873755996e6fac3e694c7e72/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b205055c7bc92c0f873755996e6fac3e694c7e72/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail.stderr?ref=b205055c7bc92c0f873755996e6fac3e694c7e72", "patch": "@@ -4,35 +4,59 @@ error: expected one of `:` or `@`, found `|`\n LL |     fn fun(A | B: E) {}\n    |              ^ expected one of `:` or `@` here\n \n-error: expected pattern, found `|`\n-  --> $DIR/or-patterns-syntactic-fail.rs:35:11\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:37:11\n    |\n-LL |     let ( | A | B);\n-   |           ^ expected pattern\n+LL |     let ( | A | B) = E::A;\n+   |           ^ help: remove the `|`\n \n-error: expected pattern, found `|`\n-  --> $DIR/or-patterns-syntactic-fail.rs:40:11\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:38:11\n    |\n-LL |     let ( | A | B,);\n-   |           ^ expected pattern\n+LL |     let ( | A | B,) = (E::B,);\n+   |           ^ help: remove the `|`\n \n-error: expected pattern, found `|`\n-  --> $DIR/or-patterns-syntactic-fail.rs:45:11\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:39:11\n    |\n-LL |     let [ | A | B ];\n-   |           ^ expected pattern\n+LL |     let [ | A | B ] = [E::A];\n+   |           ^ help: remove the `|`\n \n-error: expected pattern, found `|`\n-  --> $DIR/or-patterns-syntactic-fail.rs:50:13\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:40:13\n    |\n LL |     let TS( | A | B );\n-   |             ^ expected pattern\n+   |             ^ help: remove the `|`\n \n-error: expected pattern, found `|`\n-  --> $DIR/or-patterns-syntactic-fail.rs:55:17\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:41:17\n    |\n LL |     let NS { f: | A | B };\n-   |                 ^ expected pattern\n+   |                 ^ help: remove the `|`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:43:11\n+   |\n+LL |     let ( || A | B) = E::A;\n+   |           ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:44:11\n+   |\n+LL |     let [ || A | B ] = [E::A];\n+   |           ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:45:13\n+   |\n+LL |     let TS( || A | B );\n+   |             ^^ help: remove the `||`\n+\n+error: a leading `|` is only allowed in a top-level pattern\n+  --> $DIR/or-patterns-syntactic-fail.rs:46:17\n+   |\n+LL |     let NS { f: || A | B };\n+   |                 ^^ help: remove the `||`\n \n error: no rules expected the token `|`\n   --> $DIR/or-patterns-syntactic-fail.rs:14:15\n@@ -70,6 +94,19 @@ LL |     let _ = |A | B: E| ();\n    |\n    = note: an implementation of `std::ops::BitOr` might be missing for `E`\n \n-error: aborting due to 9 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/or-patterns-syntactic-fail.rs:48:36\n+   |\n+LL |     let recovery_witness: String = 0;\n+   |                                    ^\n+   |                                    |\n+   |                                    expected struct `std::string::String`, found integer\n+   |                                    help: try using a conversion method: `0.to_string()`\n+   |\n+   = note: expected type `std::string::String`\n+              found type `{integer}`\n+\n+error: aborting due to 14 previous errors\n \n-For more information about this error, try `rustc --explain E0369`.\n+Some errors have detailed explanations: E0308, E0369.\n+For more information about an error, try `rustc --explain E0308`."}]}