{"sha": "cc121828eed9636987493e77962b95cc187914de", "node_id": "C_kwDOAAsO6NoAKGNjMTIxODI4ZWVkOTYzNjk4NzQ5M2U3Nzk2MmI5NWNjMTg3OTE0ZGU", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-05-30T10:57:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-30T10:57:41Z"}, "message": "Rollup merge of #112100 - jieyouxu:issue-106929, r=oli-obk\n\nDon't typecheck recovered method call from suggestion\n\nOnly make the use-dot-operator-to-call-method suggestion, but do not double down and use the recovered type to perform method call typechecking as it will produce confusing diagnostics relevant for the *fixed* code.\n\n### Code Sample\n\n```rust\nstruct Client;\n\nimpl Client {\n    fn post<T: std::ops::Add>(&self, _: T, _: T) {}\n}\n\nfn f() {\n    let c = Client;\n    post(c, ());\n}\n```\n\n### Before This PR\n\n```\nerror[[E0277]](https://doc.rust-lang.org/stable/error_codes/E0277.html): cannot add `()` to `()`\n --> src/lib.rs:9:5\n  |\n9 |     post(c, ());\n  |     ^^^^^^^^^^^ no implementation for `() + ()`\n  |\n  = help: the trait `Add` is not implemented for `()`\nnote: required by a bound in `Client::post`\n --> src/lib.rs:4:16\n  |\n4 |     fn post<T: std::ops::Add>(&self, _: T, _: T) {}\n  |                ^^^^^^^^^^^^^ required by this bound in `Client::post`\n\nerror[[E0061]](https://doc.rust-lang.org/stable/error_codes/E0061.html): this function takes 2 arguments but 1 argument was supplied\n --> src/lib.rs:9:5\n  |\n9 |     post(c, ());\n  |     ^^^^ an argument of type `()` is missing\n  |\nnote: method defined here\n --> src/lib.rs:4:8\n  |\n4 |     fn post<T: std::ops::Add>(&self, _: T, _: T) {}\n  |        ^^^^                   -----  ----  ----\nhelp: provide the argument\n  |\n9 |     post((), ())(c, ());\n  |         ++++++++\n\nerror[[E0425]](https://doc.rust-lang.org/stable/error_codes/E0425.html): cannot find function `post` in this scope\n --> src/lib.rs:9:5\n  |\n9 |     post(c, ());\n  |     ^^^^ not found in this scope\n  |\nhelp: use the `.` operator to call the method `post` on `&Client`\n  |\n9 -     post(c, ());\n9 +     c.post(());\n  |\n\nSome errors have detailed explanations: E0061, E0277, E0425.\nFor more information about an error, try `rustc --explain E0061`.\n```\n\n### After This PR\n\n```\nerror[E0425]: cannot find function `post` in this scope\n --> tests/ui/typeck/issue-106929.rs:9:5\n  |\n9 |     post(c, ());\n  |     ^^^^ not found in this scope\n  |\nhelp: use the `.` operator to call the method `post` on `&Client`\n  |\n9 -     post(c, ());\n9 +     c.post(());\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n```\n\nFixes #106929.", "tree": {"sha": "0e32139706bb1874ba84e217de13cd0ee77cfa90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e32139706bb1874ba84e217de13cd0ee77cfa90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc121828eed9636987493e77962b95cc187914de", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkddalCRBK7hj4Ov3rIwAAoLsIABaM9dprP581TlexSvpkTJ7B\ngx1N20g/ZJL1qXEoEYZ0+Nv4+Br5OhjAe3fEfLgkaUT2pFOeXKBgdEM+sggdFEqi\nTYK0DTn7LlmoCEFaLkLtHc3cGw26IcNTCDphcCSU0jgUHYQwzfmeO8kuYbE+Tk9S\nXGOwmcVMoeeRFXwzjbUV4FsSQOTB4poisUQ4MdD9/c14/fqMioNMtvb0Xd1n+TdA\nV573L8/pK7+LDBHuLqJBB5kUF2PjE7EalXGCggUClYeLZJCmrTyyNbq4ODgGayDp\n0UKN3KgGcu9Myr1L9KXdx9P4Flnud9EQDWIW7fYUqrh/pO+L5zYmaKOnDMTRO2E=\n=wu+F\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e32139706bb1874ba84e217de13cd0ee77cfa90\nparent f4b20dac81ae2dfea100285dc6fc56928da4b700\nparent e11ffb62dfda4850b971310b6f721141ba29f267\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1685444261 +0200\ncommitter GitHub <noreply@github.com> 1685444261 +0200\n\nRollup merge of #112100 - jieyouxu:issue-106929, r=oli-obk\n\nDon't typecheck recovered method call from suggestion\n\nOnly make the use-dot-operator-to-call-method suggestion, but do not double down and use the recovered type to perform method call typechecking as it will produce confusing diagnostics relevant for the *fixed* code.\n\n### Code Sample\n\n```rust\nstruct Client;\n\nimpl Client {\n    fn post<T: std::ops::Add>(&self, _: T, _: T) {}\n}\n\nfn f() {\n    let c = Client;\n    post(c, ());\n}\n```\n\n### Before This PR\n\n```\nerror[[E0277]](https://doc.rust-lang.org/stable/error_codes/E0277.html): cannot add `()` to `()`\n --> src/lib.rs:9:5\n  |\n9 |     post(c, ());\n  |     ^^^^^^^^^^^ no implementation for `() + ()`\n  |\n  = help: the trait `Add` is not implemented for `()`\nnote: required by a bound in `Client::post`\n --> src/lib.rs:4:16\n  |\n4 |     fn post<T: std::ops::Add>(&self, _: T, _: T) {}\n  |                ^^^^^^^^^^^^^ required by this bound in `Client::post`\n\nerror[[E0061]](https://doc.rust-lang.org/stable/error_codes/E0061.html): this function takes 2 arguments but 1 argument was supplied\n --> src/lib.rs:9:5\n  |\n9 |     post(c, ());\n  |     ^^^^ an argument of type `()` is missing\n  |\nnote: method defined here\n --> src/lib.rs:4:8\n  |\n4 |     fn post<T: std::ops::Add>(&self, _: T, _: T) {}\n  |        ^^^^                   -----  ----  ----\nhelp: provide the argument\n  |\n9 |     post((), ())(c, ());\n  |         ++++++++\n\nerror[[E0425]](https://doc.rust-lang.org/stable/error_codes/E0425.html): cannot find function `post` in this scope\n --> src/lib.rs:9:5\n  |\n9 |     post(c, ());\n  |     ^^^^ not found in this scope\n  |\nhelp: use the `.` operator to call the method `post` on `&Client`\n  |\n9 -     post(c, ());\n9 +     c.post(());\n  |\n\nSome errors have detailed explanations: E0061, E0277, E0425.\nFor more information about an error, try `rustc --explain E0061`.\n```\n\n### After This PR\n\n```\nerror[E0425]: cannot find function `post` in this scope\n --> tests/ui/typeck/issue-106929.rs:9:5\n  |\n9 |     post(c, ());\n  |     ^^^^ not found in this scope\n  |\nhelp: use the `.` operator to call the method `post` on `&Client`\n  |\n9 -     post(c, ());\n9 +     c.post(());\n  |\n\nerror: aborting due to previous error\n\nFor more information about this error, try `rustc --explain E0425`.\n```\n\nFixes #106929.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc121828eed9636987493e77962b95cc187914de", "html_url": "https://github.com/rust-lang/rust/commit/cc121828eed9636987493e77962b95cc187914de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc121828eed9636987493e77962b95cc187914de/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f4b20dac81ae2dfea100285dc6fc56928da4b700", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4b20dac81ae2dfea100285dc6fc56928da4b700", "html_url": "https://github.com/rust-lang/rust/commit/f4b20dac81ae2dfea100285dc6fc56928da4b700"}, {"sha": "e11ffb62dfda4850b971310b6f721141ba29f267", "url": "https://api.github.com/repos/rust-lang/rust/commits/e11ffb62dfda4850b971310b6f721141ba29f267", "html_url": "https://github.com/rust-lang/rust/commit/e11ffb62dfda4850b971310b6f721141ba29f267"}], "stats": {"total": 74, "additions": 42, "deletions": 32}, "files": [{"sha": "4389ad6ef2678ebe83e5b8c3b1499b8f4aa592fe", "filename": "compiler/rustc_hir_typeck/src/callee.rs", "status": "modified", "additions": 14, "deletions": 32, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cc121828eed9636987493e77962b95cc187914de/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc121828eed9636987493e77962b95cc187914de/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcallee.rs?ref=cc121828eed9636987493e77962b95cc187914de", "patch": "@@ -420,20 +420,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .steal_diagnostic(segment.ident.span, StashKey::CallIntoMethod)\n                 {\n                     // Try suggesting `foo(a)` -> `a.foo()` if possible.\n-                    if let Some(ty) =\n-                        self.suggest_call_as_method(\n-                            &mut diag,\n-                            segment,\n-                            arg_exprs,\n-                            call_expr,\n-                            expected\n-                        )\n-                    {\n-                        diag.emit();\n-                        return ty;\n-                    } else {\n-                        diag.emit();\n-                    }\n+                    self.suggest_call_as_method(\n+                        &mut diag,\n+                        segment,\n+                        arg_exprs,\n+                        call_expr,\n+                        expected\n+                    );\n+                    diag.emit();\n                 }\n \n                 let err = self.report_invalid_callee(call_expr, callee_expr, callee_ty, arg_exprs);\n@@ -496,9 +490,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         arg_exprs: &'tcx [hir::Expr<'tcx>],\n         call_expr: &'tcx hir::Expr<'tcx>,\n         expected: Expectation<'tcx>,\n-    ) -> Option<Ty<'tcx>> {\n+    ) {\n         if let [callee_expr, rest @ ..] = arg_exprs {\n-            let callee_ty = self.typeck_results.borrow().expr_ty_adjusted_opt(callee_expr)?;\n+            let Some(callee_ty) = self.typeck_results.borrow().expr_ty_adjusted_opt(callee_expr) else {\n+                return;\n+            };\n \n             // First, do a probe with `IsSuggestion(true)` to avoid emitting\n             // any strange errors. If it's successful, then we'll do a true\n@@ -513,7 +509,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ProbeScope::AllTraits,\n                 expected.only_has_type(self),\n             ) else {\n-                return None;\n+                return;\n             };\n \n             let pick = self.confirm_method(\n@@ -525,7 +521,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 segment,\n             );\n             if pick.illegal_sized_bound.is_some() {\n-                return None;\n+                return;\n             }\n \n             let up_to_rcvr_span = segment.ident.span.until(callee_expr.span);\n@@ -567,22 +563,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     sugg,\n                     Applicability::MaybeIncorrect,\n                 );\n-\n-                // Let's check the method fully now\n-                let return_ty = self.check_method_argument_types(\n-                    segment.ident.span,\n-                    call_expr,\n-                    Ok(pick.callee),\n-                    rest,\n-                    TupleArgumentsFlag::DontTupleArguments,\n-                    expected,\n-                );\n-\n-                return Some(return_ty);\n             }\n         }\n-\n-        None\n     }\n \n     fn report_invalid_callee("}, {"sha": "91342229ae1a53f4eed5ba5d31ef80d82457a8cf", "filename": "tests/ui/typeck/issue-106929.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cc121828eed9636987493e77962b95cc187914de/tests%2Fui%2Ftypeck%2Fissue-106929.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc121828eed9636987493e77962b95cc187914de/tests%2Fui%2Ftypeck%2Fissue-106929.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-106929.rs?ref=cc121828eed9636987493e77962b95cc187914de", "patch": "@@ -0,0 +1,13 @@\n+struct Client;\n+\n+impl Client {\n+    fn post<T: std::ops::Add>(&self, _: T, _: T) {}\n+}\n+\n+fn f() {\n+    let c = Client;\n+    post(c, ());\n+    //~^ ERROR cannot find function `post` in this scope\n+}\n+\n+fn main() {}"}, {"sha": "f744e5a41f0cd29239dbb22cec586573b30bed19", "filename": "tests/ui/typeck/issue-106929.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cc121828eed9636987493e77962b95cc187914de/tests%2Fui%2Ftypeck%2Fissue-106929.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cc121828eed9636987493e77962b95cc187914de/tests%2Fui%2Ftypeck%2Fissue-106929.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fissue-106929.stderr?ref=cc121828eed9636987493e77962b95cc187914de", "patch": "@@ -0,0 +1,15 @@\n+error[E0425]: cannot find function `post` in this scope\n+  --> $DIR/issue-106929.rs:9:5\n+   |\n+LL |     post(c, ());\n+   |     ^^^^ not found in this scope\n+   |\n+help: use the `.` operator to call the method `post` on `&Client`\n+   |\n+LL -     post(c, ());\n+LL +     c.post(());\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}