{"sha": "bdb13cd887c9068262e230bd38730d360a7db0c5", "node_id": "C_kwDOAAsO6NoAKGJkYjEzY2Q4ODdjOTA2ODI2MmUyMzBiZDM4NzMwZDM2MGE3ZGIwYzU", "commit": {"author": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-09-10T08:39:51Z"}, "committer": {"name": "kraktus", "email": "kraktus@users.noreply.github.com", "date": "2022-09-10T08:39:51Z"}, "message": "refactor: move `has_debug_impl` to `clippy_utils::ty`", "tree": {"sha": "fac4a35c73b06b8003e0dc3c617822a1535e900e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fac4a35c73b06b8003e0dc3c617822a1535e900e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdb13cd887c9068262e230bd38730d360a7db0c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb13cd887c9068262e230bd38730d360a7db0c5", "html_url": "https://github.com/rust-lang/rust/commit/bdb13cd887c9068262e230bd38730d360a7db0c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdb13cd887c9068262e230bd38730d360a7db0c5/comments", "author": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kraktus", "id": 56031107, "node_id": "MDQ6VXNlcjU2MDMxMTA3", "avatar_url": "https://avatars.githubusercontent.com/u/56031107?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kraktus", "html_url": "https://github.com/kraktus", "followers_url": "https://api.github.com/users/kraktus/followers", "following_url": "https://api.github.com/users/kraktus/following{/other_user}", "gists_url": "https://api.github.com/users/kraktus/gists{/gist_id}", "starred_url": "https://api.github.com/users/kraktus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kraktus/subscriptions", "organizations_url": "https://api.github.com/users/kraktus/orgs", "repos_url": "https://api.github.com/users/kraktus/repos", "events_url": "https://api.github.com/users/kraktus/events{/privacy}", "received_events_url": "https://api.github.com/users/kraktus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd69d86c89a5f230f799ae4a52d2a0f6a9fdec45", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd69d86c89a5f230f799ae4a52d2a0f6a9fdec45", "html_url": "https://github.com/rust-lang/rust/commit/cd69d86c89a5f230f799ae4a52d2a0f6a9fdec45"}], "stats": {"total": 38, "additions": 12, "deletions": 26}, "files": [{"sha": "656dc5feeb57029d3023de76251e8ef341d70ea2", "filename": "clippy_lints/src/assertions_on_result_states.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bdb13cd887c9068262e230bd38730d360a7db0c5/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb13cd887c9068262e230bd38730d360a7db0c5/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs?ref=bdb13cd887c9068262e230bd38730d360a7db0c5", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::macros::{find_assert_args, root_macro_call_first_node, PanicExpn};\n use clippy_utils::source::snippet_with_context;\n-use clippy_utils::ty::{implements_trait, is_copy, is_type_diagnostic_item};\n+use clippy_utils::ty::{has_debug_impl, is_copy, is_type_diagnostic_item};\n use clippy_utils::usage::local_used_after_expr;\n use clippy_utils::{is_expr_final_block_expr, path_res};\n use rustc_errors::Applicability;\n@@ -97,13 +97,6 @@ impl<'tcx> LateLintPass<'tcx> for AssertionsOnResultStates {\n     }\n }\n \n-/// This checks whether a given type is known to implement Debug.\n-fn has_debug_impl<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n-    cx.tcx\n-        .get_diagnostic_item(sym::Debug)\n-        .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n-}\n-\n fn type_suitable_to_unwrap<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     has_debug_impl(cx, ty) && !ty.is_unit() && !ty.is_never()\n }"}, {"sha": "720d9a68c85ee81bf43e2f34ed7fe7042415110b", "filename": "clippy_lints/src/methods/err_expect.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bdb13cd887c9068262e230bd38730d360a7db0c5/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb13cd887c9068262e230bd38730d360a7db0c5/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs?ref=bdb13cd887c9068262e230bd38730d360a7db0c5", "patch": "@@ -1,6 +1,6 @@\n use super::ERR_EXPECT;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::ty::implements_trait;\n+use clippy_utils::ty::has_debug_impl;\n use clippy_utils::{meets_msrv, msrvs, ty::is_type_diagnostic_item};\n use rustc_errors::Applicability;\n use rustc_lint::LateContext;\n@@ -28,7 +28,7 @@ pub(super) fn check(\n         // Tests if the T type in a `Result<T, E>` is not None\n         if let Some(data_type) = get_data_type(cx, result_type);\n         // Tests if the T type in a `Result<T, E>` implements debug\n-        if has_debug_impl(data_type, cx);\n+        if has_debug_impl(cx, data_type);\n \n         then {\n             span_lint_and_sugg(\n@@ -51,10 +51,3 @@ fn get_data_type<'a>(cx: &LateContext<'_>, ty: Ty<'a>) -> Option<Ty<'a>> {\n         _ => None,\n     }\n }\n-\n-/// Given a type, very if the Debug trait has been impl'd\n-fn has_debug_impl<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {\n-    cx.tcx\n-        .get_diagnostic_item(sym::Debug)\n-        .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n-}"}, {"sha": "646fc4a7bcf37ce6fed29f76b91973ab4e731e96", "filename": "clippy_lints/src/methods/ok_expect.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bdb13cd887c9068262e230bd38730d360a7db0c5/clippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb13cd887c9068262e230bd38730d360a7db0c5/clippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs?ref=bdb13cd887c9068262e230bd38730d360a7db0c5", "patch": "@@ -1,5 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n+use clippy_utils::ty::{has_debug_impl, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -15,7 +15,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n         if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n         let result_type = cx.typeck_results().expr_ty(recv);\n         if let Some(error_type) = get_error_type(cx, result_type);\n-        if has_debug_impl(error_type, cx);\n+        if has_debug_impl(cx, error_type);\n \n         then {\n             span_lint_and_help(\n@@ -37,10 +37,3 @@ fn get_error_type<'a>(cx: &LateContext<'_>, ty: Ty<'a>) -> Option<Ty<'a>> {\n         _ => None,\n     }\n }\n-\n-/// This checks whether a given type is known to implement Debug.\n-fn has_debug_impl<'tcx>(ty: Ty<'tcx>, cx: &LateContext<'tcx>) -> bool {\n-    cx.tcx\n-        .get_diagnostic_item(sym::Debug)\n-        .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n-}"}, {"sha": "b3eb6d0554484658e9367c59d2c9edd676782efc", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bdb13cd887c9068262e230bd38730d360a7db0c5/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdb13cd887c9068262e230bd38730d360a7db0c5/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=bdb13cd887c9068262e230bd38730d360a7db0c5", "patch": "@@ -31,6 +31,13 @@ pub fn is_copy<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     ty.is_copy_modulo_regions(cx.tcx.at(DUMMY_SP), cx.param_env)\n }\n \n+/// This checks whether a given type is known to implement Debug.\n+pub fn has_debug_impl<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    cx.tcx\n+        .get_diagnostic_item(sym::Debug)\n+        .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n+}\n+\n /// Checks whether a type can be partially moved.\n pub fn can_partially_move_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     if has_drop(cx, ty) || is_copy(cx, ty) {"}]}