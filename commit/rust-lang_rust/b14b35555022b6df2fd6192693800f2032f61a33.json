{"sha": "b14b35555022b6df2fd6192693800f2032f61a33", "node_id": "C_kwDOAAsO6NoAKGIxNGIzNTU1NTAyMmI2ZGYyZmQ2MTkyNjkzODAwZjIwMzJmNjFhMzM", "commit": {"author": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-02T13:50:01Z"}, "committer": {"name": "Pietro Albini", "email": "pietro.albini@ferrous-systems.com", "date": "2023-03-02T15:33:56Z"}, "message": "add support for benchmarks", "tree": {"sha": "0d1454d8d021ffd78988202c45167d7ebaafc27c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d1454d8d021ffd78988202c45167d7ebaafc27c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b14b35555022b6df2fd6192693800f2032f61a33", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEMycKYjxLY0eb13b7zXazX3c0dp4FAmQAweQACgkQzXazX3c0\ndp5QtQ//Vlc9U92N+pP2ZfnoUgc8UCZ0IaWBhHhb4zHa4+4KvLQGieeYnp64oT2F\nRO7s6uwoEDPX2VHl1gbwiwpSQI5PZx/dJBauwHJVUJqcgN9MWVy0m1cY7xuGymXQ\nC2lFrSJI7F2ZAsw+JZTKEe4SqqaDNwA+WQ1roBVuRPv0ktMXX6LbIxl6t9DtTUUe\nPjrAUm2gCLQZSXgb1OTK3ee4zLJlH0Bfca3iXp6bMTmSUfrFNh7P/C2zLEUB03rB\nfxf0OP5tnQfQo4Bq0ARufSkWtLwaaRf/u7ru4/YBFdXfWUiYhbjrQshTfdfAicmS\nWnoyb1q96RpG/GAWzqGQlB9QjCk9PVXf8qsar9I7XKJggOTsB/WB6UIEi8QDG+b6\nRuBeLPxsw/vzheKh1RBbGpX4Ny7aNkkXx5ELnKK+O2LsYLr/thJdJ/+6+0WRbAys\nkIYQARErbmBYRNL0L80OjXmPvOiz+wGMwNjM70iLDARFacZAdrpamdxVvUByA3vN\nnZphyNSAym6nxrW+aC0ziiTdS26EDBAibdd7G2qvAwehizmiBQSxhMzA2UBCopp0\nVDQ1tP1k0aQhRdUA596TJ1ZXPEn31RzK7UXfpKmCIBSYKMSglEE3iS6cUXJE1sp3\nXXlr5XWWrp4PhxeOM9xsP+ydt9xk6D1fuMArr2gumIo5mrFUTxE=\n=n7OK\n-----END PGP SIGNATURE-----", "payload": "tree 0d1454d8d021ffd78988202c45167d7ebaafc27c\nparent 9388c8e420d780b95c1286d0b17eed9b5446ee9a\nauthor Pietro Albini <pietro.albini@ferrous-systems.com> 1677765001 +0100\ncommitter Pietro Albini <pietro.albini@ferrous-systems.com> 1677771236 +0100\n\nadd support for benchmarks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b14b35555022b6df2fd6192693800f2032f61a33", "html_url": "https://github.com/rust-lang/rust/commit/b14b35555022b6df2fd6192693800f2032f61a33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b14b35555022b6df2fd6192693800f2032f61a33/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9388c8e420d780b95c1286d0b17eed9b5446ee9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/9388c8e420d780b95c1286d0b17eed9b5446ee9a", "html_url": "https://github.com/rust-lang/rust/commit/9388c8e420d780b95c1286d0b17eed9b5446ee9a"}], "stats": {"total": 53, "additions": 49, "deletions": 4}, "files": [{"sha": "bc16ed9cbaf5aa7efbc940396349d1cc034c47ef", "filename": "src/bootstrap/render_tests.rs", "status": "modified", "additions": 49, "deletions": 4, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/b14b35555022b6df2fd6192693800f2032f61a33/src%2Fbootstrap%2Frender_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b14b35555022b6df2fd6192693800f2032f61a33/src%2Fbootstrap%2Frender_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frender_tests.rs?ref=b14b35555022b6df2fd6192693800f2032f61a33", "patch": "@@ -57,6 +57,7 @@ fn run_tests(builder: &Builder<'_>, cmd: &mut Command) -> bool {\n struct Renderer<'a> {\n     stdout: BufReader<ChildStdout>,\n     failures: Vec<TestOutcome>,\n+    benches: Vec<BenchOutcome>,\n     builder: &'a Builder<'a>,\n     tests_count: Option<usize>,\n     executed_tests: usize,\n@@ -67,6 +68,7 @@ impl<'a> Renderer<'a> {\n     fn new(stdout: ChildStdout, builder: &'a Builder<'a>) -> Self {\n         Self {\n             stdout: BufReader::new(stdout),\n+            benches: Vec::new(),\n             failures: Vec::new(),\n             builder,\n             tests_count: None,\n@@ -104,7 +106,7 @@ impl<'a> Renderer<'a> {\n         self.builder.metrics.record_test(\n             &test.name,\n             match outcome {\n-                Outcome::Ok => crate::metrics::TestOutcome::Passed,\n+                Outcome::Ok | Outcome::BenchOk => crate::metrics::TestOutcome::Passed,\n                 Outcome::Failed => crate::metrics::TestOutcome::Failed,\n                 Outcome::Ignored { reason } => crate::metrics::TestOutcome::Ignored {\n                     ignore_reason: reason.map(|s| s.to_string()),\n@@ -169,6 +171,26 @@ impl<'a> Renderer<'a> {\n             }\n         }\n \n+        if !self.benches.is_empty() {\n+            println!(\"\\nbenchmarks:\");\n+\n+            let mut rows = Vec::new();\n+            for bench in &self.benches {\n+                rows.push((\n+                    &bench.name,\n+                    format!(\"{:.2?}/iter\", Duration::from_nanos(bench.median)),\n+                    format!(\"+/- {:.2?}\", Duration::from_nanos(bench.deviation)),\n+                ));\n+            }\n+\n+            let max_0 = rows.iter().map(|r| r.0.len()).max().unwrap_or(0);\n+            let max_1 = rows.iter().map(|r| r.1.len()).max().unwrap_or(0);\n+            let max_2 = rows.iter().map(|r| r.2.len()).max().unwrap_or(0);\n+            for row in &rows {\n+                println!(\"    {:<max_0$} {:>max_1$} {:>max_2$}\", row.0, row.1, row.2);\n+            }\n+        }\n+\n         println!(\n             \"\\ntest result: {}. {} passed; {} failed; {} ignored; {} measured; \\\n              {} filtered out; finished in {:.2?}\\n\",\n@@ -196,6 +218,21 @@ impl<'a> Renderer<'a> {\n             Message::Suite(SuiteMessage::Failed(outcome)) => {\n                 self.render_suite_outcome(Outcome::Failed, &outcome);\n             }\n+            Message::Bench(outcome) => {\n+                // The formatting for benchmarks doesn't replicate 1:1 the formatting libtest\n+                // outputs, mostly because libtest's formatting is broken in terse mode, which is\n+                // the default used by our monorepo. We use a different formatting instead:\n+                // successful benchmarks are just showed as \"benchmarked\"/\"b\", and the details are\n+                // outputted at the bottom like failures.\n+                let fake_test_outcome = TestOutcome {\n+                    name: outcome.name.clone(),\n+                    exec_time: None,\n+                    stdout: None,\n+                    reason: None,\n+                };\n+                self.render_test_outcome(Outcome::BenchOk, &fake_test_outcome);\n+                self.benches.push(outcome);\n+            }\n             Message::Test(TestMessage::Ok(outcome)) => {\n                 self.render_test_outcome(Outcome::Ok, &outcome);\n             }\n@@ -210,13 +247,13 @@ impl<'a> Renderer<'a> {\n                 self.failures.push(outcome);\n             }\n             Message::Test(TestMessage::Started) => {} // Not useful\n-            Message::Test(TestMessage::Bench) => todo!(\"benchmarks are not supported yet\"),\n         }\n     }\n }\n \n enum Outcome<'a> {\n     Ok,\n+    BenchOk,\n     Failed,\n     Ignored { reason: Option<&'a str> },\n }\n@@ -225,6 +262,7 @@ impl Outcome<'_> {\n     fn short(&self, builder: &Builder<'_>) -> String {\n         match self {\n             Outcome::Ok => builder.color_for_stdout(Color::Green, \".\"),\n+            Outcome::BenchOk => builder.color_for_stdout(Color::Cyan, \"b\"),\n             Outcome::Failed => builder.color_for_stdout(Color::Red, \"F\"),\n             Outcome::Ignored { .. } => builder.color_for_stdout(Color::Yellow, \"i\"),\n         }\n@@ -233,6 +271,7 @@ impl Outcome<'_> {\n     fn long(&self, builder: &Builder<'_>) -> String {\n         match self {\n             Outcome::Ok => builder.color_for_stdout(Color::Green, \"ok\"),\n+            Outcome::BenchOk => builder.color_for_stdout(Color::Cyan, \"benchmarked\"),\n             Outcome::Failed => builder.color_for_stdout(Color::Red, \"FAILED\"),\n             Outcome::Ignored { reason: None } => builder.color_for_stdout(Color::Yellow, \"ignored\"),\n             Outcome::Ignored { reason: Some(reason) } => {\n@@ -247,6 +286,7 @@ impl Outcome<'_> {\n enum Message {\n     Suite(SuiteMessage),\n     Test(TestMessage),\n+    Bench(BenchOutcome),\n }\n \n #[derive(serde_derive::Deserialize)]\n@@ -273,11 +313,16 @@ enum TestMessage {\n     Ok(TestOutcome),\n     Failed(TestOutcome),\n     Ignored(TestOutcome),\n-    // Ignored messages:\n-    Bench,\n     Started,\n }\n \n+#[derive(serde_derive::Deserialize)]\n+struct BenchOutcome {\n+    name: String,\n+    median: u64,\n+    deviation: u64,\n+}\n+\n #[derive(serde_derive::Deserialize)]\n struct TestOutcome {\n     name: String,"}]}