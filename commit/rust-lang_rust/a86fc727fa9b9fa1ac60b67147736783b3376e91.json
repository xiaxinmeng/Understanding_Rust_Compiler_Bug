{"sha": "a86fc727fa9b9fa1ac60b67147736783b3376e91", "node_id": "C_kwDOAAsO6NoAKGE4NmZjNzI3ZmE5YjlmYTFhYzYwYjY3MTQ3NzM2NzgzYjMzNzZlOTE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-01T01:58:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-02-02T23:06:52Z"}, "message": "Rename `Cursor`/`CursorRef` as `TokenTreeCursor`/`RefTokenTreeCursor`.\n\nThis makes it clear they return token trees, and makes for a nice\ncomparison against `TokenCursor` which returns tokens.", "tree": {"sha": "209cdf6663964ae126c91a86717922a39db5a382", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/209cdf6663964ae126c91a86717922a39db5a382"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a86fc727fa9b9fa1ac60b67147736783b3376e91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a86fc727fa9b9fa1ac60b67147736783b3376e91", "html_url": "https://github.com/rust-lang/rust/commit/a86fc727fa9b9fa1ac60b67147736783b3376e91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a86fc727fa9b9fa1ac60b67147736783b3376e91/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5ecbbb998aae80541d70bf5c93be92e6c59a7a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5ecbbb998aae80541d70bf5c93be92e6c59a7a8", "html_url": "https://github.com/rust-lang/rust/commit/b5ecbbb998aae80541d70bf5c93be92e6c59a7a8"}], "stats": {"total": 63, "additions": 34, "deletions": 29}, "files": [{"sha": "f0a6a5e0725860b5f090f8f6a12223ad13b868f1", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/a86fc727fa9b9fa1ac60b67147736783b3376e91/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a86fc727fa9b9fa1ac60b67147736783b3376e91/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=a86fc727fa9b9fa1ac60b67147736783b3376e91", "patch": "@@ -389,12 +389,12 @@ impl TokenStream {\n         self.0.len()\n     }\n \n-    pub fn trees(&self) -> CursorRef<'_> {\n-        CursorRef::new(self)\n+    pub fn trees(&self) -> RefTokenTreeCursor<'_> {\n+        RefTokenTreeCursor::new(self)\n     }\n \n-    pub fn into_trees(self) -> Cursor {\n-        Cursor::new(self)\n+    pub fn into_trees(self) -> TokenTreeCursor {\n+        TokenTreeCursor::new(self)\n     }\n \n     /// Compares two `TokenStream`s, checking equality without regarding span information.\n@@ -552,24 +552,25 @@ impl TokenStream {\n     }\n }\n \n-/// By-reference iterator over a [`TokenStream`].\n+/// By-reference iterator over a [`TokenStream`], that produces `&TokenTree`\n+/// items.\n #[derive(Clone)]\n-pub struct CursorRef<'t> {\n+pub struct RefTokenTreeCursor<'t> {\n     stream: &'t TokenStream,\n     index: usize,\n }\n \n-impl<'t> CursorRef<'t> {\n+impl<'t> RefTokenTreeCursor<'t> {\n     fn new(stream: &'t TokenStream) -> Self {\n-        CursorRef { stream, index: 0 }\n+        RefTokenTreeCursor { stream, index: 0 }\n     }\n \n     pub fn look_ahead(&self, n: usize) -> Option<&TokenTree> {\n         self.stream.0.get(self.index + n)\n     }\n }\n \n-impl<'t> Iterator for CursorRef<'t> {\n+impl<'t> Iterator for RefTokenTreeCursor<'t> {\n     type Item = &'t TokenTree;\n \n     fn next(&mut self) -> Option<&'t TokenTree> {\n@@ -580,15 +581,16 @@ impl<'t> Iterator for CursorRef<'t> {\n     }\n }\n \n-/// Owning by-value iterator over a [`TokenStream`].\n+/// Owning by-value iterator over a [`TokenStream`], that produces `TokenTree`\n+/// items.\n // FIXME: Many uses of this can be replaced with by-reference iterator to avoid clones.\n #[derive(Clone)]\n-pub struct Cursor {\n+pub struct TokenTreeCursor {\n     pub stream: TokenStream,\n     index: usize,\n }\n \n-impl Iterator for Cursor {\n+impl Iterator for TokenTreeCursor {\n     type Item = TokenTree;\n \n     fn next(&mut self) -> Option<TokenTree> {\n@@ -599,9 +601,9 @@ impl Iterator for Cursor {\n     }\n }\n \n-impl Cursor {\n+impl TokenTreeCursor {\n     fn new(stream: TokenStream) -> Self {\n-        Cursor { stream, index: 0 }\n+        TokenTreeCursor { stream, index: 0 }\n     }\n \n     #[inline]"}, {"sha": "de34df0114a743c2f89327d94c2cd7f13fbad9a9", "filename": "compiler/rustc_expand/src/mbe/metavar_expr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a86fc727fa9b9fa1ac60b67147736783b3376e91/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a86fc727fa9b9fa1ac60b67147736783b3376e91/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmetavar_expr.rs?ref=a86fc727fa9b9fa1ac60b67147736783b3376e91", "patch": "@@ -1,5 +1,5 @@\n use rustc_ast::token::{self, Delimiter};\n-use rustc_ast::tokenstream::{CursorRef, TokenStream, TokenTree};\n+use rustc_ast::tokenstream::{RefTokenTreeCursor, TokenStream, TokenTree};\n use rustc_ast::{LitIntType, LitKind};\n use rustc_ast_pretty::pprust;\n use rustc_errors::{Applicability, PResult};\n@@ -72,7 +72,7 @@ impl MetaVarExpr {\n \n // Checks if there are any remaining tokens. For example, `${ignore(ident ... a b c ...)}`\n fn check_trailing_token<'sess>(\n-    iter: &mut CursorRef<'_>,\n+    iter: &mut RefTokenTreeCursor<'_>,\n     sess: &'sess ParseSess,\n ) -> PResult<'sess, ()> {\n     if let Some(tt) = iter.next() {\n@@ -88,7 +88,7 @@ fn check_trailing_token<'sess>(\n \n /// Parse a meta-variable `count` expression: `count(ident[, depth])`\n fn parse_count<'sess>(\n-    iter: &mut CursorRef<'_>,\n+    iter: &mut RefTokenTreeCursor<'_>,\n     sess: &'sess ParseSess,\n     span: Span,\n ) -> PResult<'sess, MetaVarExpr> {\n@@ -99,7 +99,7 @@ fn parse_count<'sess>(\n \n /// Parses the depth used by index(depth) and length(depth).\n fn parse_depth<'sess>(\n-    iter: &mut CursorRef<'_>,\n+    iter: &mut RefTokenTreeCursor<'_>,\n     sess: &'sess ParseSess,\n     span: Span,\n ) -> PResult<'sess, usize> {\n@@ -126,7 +126,7 @@ fn parse_depth<'sess>(\n \n /// Parses an generic ident\n fn parse_ident<'sess>(\n-    iter: &mut CursorRef<'_>,\n+    iter: &mut RefTokenTreeCursor<'_>,\n     sess: &'sess ParseSess,\n     span: Span,\n ) -> PResult<'sess, Ident> {\n@@ -152,7 +152,7 @@ fn parse_ident<'sess>(\n \n /// Tries to move the iterator forward returning `true` if there is a comma. If not, then the\n /// iterator is not modified and the result is `false`.\n-fn try_eat_comma(iter: &mut CursorRef<'_>) -> bool {\n+fn try_eat_comma(iter: &mut RefTokenTreeCursor<'_>) -> bool {\n     if let Some(TokenTree::Token(token::Token { kind: token::Comma, .. }, _)) = iter.look_ahead(0) {\n         let _ = iter.next();\n         return true;"}, {"sha": "2ea55f838a37e3f1022476a98a91205e51a6466d", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a86fc727fa9b9fa1ac60b67147736783b3376e91/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a86fc727fa9b9fa1ac60b67147736783b3376e91/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=a86fc727fa9b9fa1ac60b67147736783b3376e91", "patch": "@@ -19,9 +19,8 @@ pub use path::PathStyle;\n \n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, Delimiter, Nonterminal, Token, TokenKind};\n-use rustc_ast::tokenstream::AttributesData;\n-use rustc_ast::tokenstream::{self, DelimSpan, Spacing};\n-use rustc_ast::tokenstream::{TokenStream, TokenTree};\n+use rustc_ast::tokenstream::{AttributesData, DelimSpan, Spacing};\n+use rustc_ast::tokenstream::{TokenStream, TokenTree, TokenTreeCursor};\n use rustc_ast::util::case::Case;\n use rustc_ast::AttrId;\n use rustc_ast::DUMMY_NODE_ID;\n@@ -221,17 +220,21 @@ impl<'a> Drop for Parser<'a> {\n     }\n }\n \n+/// Iterator over a `TokenStream` that produces `Token`s. It's a bit odd that\n+/// we (a) lex tokens into a nice tree structure (`TokenStream`), and then (b)\n+/// use this type to emit them as a linear sequence. But a linear sequence is\n+/// what the parser expects, for the most part.\n #[derive(Clone)]\n struct TokenCursor {\n     // Cursor for the current (innermost) token stream. The delimiters for this\n     // token stream are found in `self.stack.last()`; when that is `None` then\n     // we are in the outermost token stream which never has delimiters.\n-    tree_cursor: tokenstream::Cursor,\n+    tree_cursor: TokenTreeCursor,\n \n     // Token streams surrounding the current one. The delimiters for stack[n]'s\n     // tokens are in `stack[n-1]`. `stack[0]` (when present) has no delimiters\n     // because it's the outermost token stream which never has delimiters.\n-    stack: Vec<(tokenstream::Cursor, Delimiter, DelimSpan)>,\n+    stack: Vec<(TokenTreeCursor, Delimiter, DelimSpan)>,\n \n     desugar_doc_comments: bool,\n "}, {"sha": "7978d8cba95412cb3ef9c51b8d1a40ec5b982294", "filename": "src/tools/rustfmt/src/macros.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a86fc727fa9b9fa1ac60b67147736783b3376e91/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a86fc727fa9b9fa1ac60b67147736783b3376e91/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmacros.rs?ref=a86fc727fa9b9fa1ac60b67147736783b3376e91", "patch": "@@ -13,7 +13,7 @@ use std::collections::HashMap;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n use rustc_ast::token::{BinOpToken, Delimiter, Token, TokenKind};\n-use rustc_ast::tokenstream::{Cursor, TokenStream, TokenTree};\n+use rustc_ast::tokenstream::{TokenStream, TokenTree, TokenTreeCursor};\n use rustc_ast::{ast, ptr};\n use rustc_ast_pretty::pprust;\n use rustc_span::{\n@@ -736,7 +736,7 @@ impl MacroArgParser {\n         self.buf.clear();\n     }\n \n-    fn add_meta_variable(&mut self, iter: &mut Cursor) -> Option<()> {\n+    fn add_meta_variable(&mut self, iter: &mut TokenTreeCursor) -> Option<()> {\n         match iter.next() {\n             Some(TokenTree::Token(\n                 Token {\n@@ -768,7 +768,7 @@ impl MacroArgParser {\n         &mut self,\n         inner: Vec<ParsedMacroArg>,\n         delim: Delimiter,\n-        iter: &mut Cursor,\n+        iter: &mut TokenTreeCursor,\n     ) -> Option<()> {\n         let mut buffer = String::new();\n         let mut first = true;\n@@ -1121,7 +1121,7 @@ pub(crate) fn macro_style(mac: &ast::MacCall, context: &RewriteContext<'_>) -> D\n // Currently we do not attempt to parse any further than that.\n #[derive(new)]\n struct MacroParser {\n-    toks: Cursor,\n+    toks: TokenTreeCursor,\n }\n \n impl MacroParser {"}]}