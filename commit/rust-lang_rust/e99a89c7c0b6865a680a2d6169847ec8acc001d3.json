{"sha": "e99a89c7c0b6865a680a2d6169847ec8acc001d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5OWE4OWM3YzBiNjg2NWE2ODBhMmQ2MTY5ODQ3ZWM4YWNjMDAxZDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-15T08:46:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-12-15T08:46:00Z"}, "message": "Auto merge of #73210 - wesleywiser:consts_in_debuginfo, r=oli-obk\n\n[mir-opt] Allow debuginfo to be generated for a constant or a Place\n\nPrior to this commit, debuginfo was always generated by mapping a name\nto a Place. This has the side-effect that `SimplifyLocals` cannot remove\nlocals that are only used for debuginfo because their other uses have\nbeen const-propagated.\n\nTo allow these locals to be removed, we now allow debuginfo to point to\na constant value. The `ConstProp` pass detects when debuginfo points to\na local with a known constant value and replaces it with the value. This\nallows the later `SimplifyLocals` pass to remove the local.", "tree": {"sha": "7924a9c9ef4585a7007f141e5994a9b0ceb00b49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7924a9c9ef4585a7007f141e5994a9b0ceb00b49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e99a89c7c0b6865a680a2d6169847ec8acc001d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e99a89c7c0b6865a680a2d6169847ec8acc001d3", "html_url": "https://github.com/rust-lang/rust/commit/e99a89c7c0b6865a680a2d6169847ec8acc001d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e99a89c7c0b6865a680a2d6169847ec8acc001d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e261649593cf9c2707f7b30a61c46c4469c67ebb", "url": "https://api.github.com/repos/rust-lang/rust/commits/e261649593cf9c2707f7b30a61c46c4469c67ebb", "html_url": "https://github.com/rust-lang/rust/commit/e261649593cf9c2707f7b30a61c46c4469c67ebb"}, {"sha": "0b18ed833c4406d8fc654b9f4990d2f80dc205c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b18ed833c4406d8fc654b9f4990d2f80dc205c4", "html_url": "https://github.com/rust-lang/rust/commit/0b18ed833c4406d8fc654b9f4990d2f80dc205c4"}], "stats": {"total": 477, "additions": 398, "deletions": 79}, "files": [{"sha": "31e43893ac8b11c9539ad3c9f0f08b5501c76571", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -1409,10 +1409,11 @@ fn generator_layout_and_saved_local_names(\n \n     let state_arg = mir::Local::new(1);\n     for var in &body.var_debug_info {\n-        if var.place.local != state_arg {\n+        let place = if let mir::VarDebugInfoContents::Place(p) = var.value { p } else { continue };\n+        if place.local != state_arg {\n             continue;\n         }\n-        match var.place.projection[..] {\n+        match place.projection[..] {\n             [\n                 // Deref of the `Pin<&mut Self>` state argument.\n                 mir::ProjectionElem::Field(..),"}, {"sha": "3a85c268e0ea94d5d130933fec586027331d9f79", "filename": "compiler/rustc_codegen_ssa/src/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fconstant.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -11,7 +11,7 @@ use super::FunctionCx;\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     pub fn eval_mir_constant_to_operand(\n-        &mut self,\n+        &self,\n         bx: &mut Bx,\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<OperandRef<'tcx, Bx::Value>, ErrorHandled> {\n@@ -21,7 +21,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     }\n \n     pub fn eval_mir_constant(\n-        &mut self,\n+        &self,\n         constant: &mir::Constant<'tcx>,\n     ) -> Result<ConstValue<'tcx>, ErrorHandled> {\n         match self.monomorphize(constant.literal).val {"}, {"sha": "d5b2cbaa558430107530c319d202dd399cc5ffb2", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 73, "deletions": 32, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -8,7 +8,7 @@ use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n use rustc_target::abi::{LayoutOf, Size};\n \n-use super::operand::OperandValue;\n+use super::operand::{OperandRef, OperandValue};\n use super::place::PlaceRef;\n use super::{FunctionCx, LocalRef};\n \n@@ -116,6 +116,24 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         span\n     }\n \n+    fn spill_operand_to_stack(\n+        operand: &OperandRef<'tcx, Bx::Value>,\n+        name: Option<String>,\n+        bx: &mut Bx,\n+    ) -> PlaceRef<'tcx, Bx::Value> {\n+        // \"Spill\" the value onto the stack, for debuginfo,\n+        // without forcing non-debuginfo uses of the local\n+        // to also load from the stack every single time.\n+        // FIXME(#68817) use `llvm.dbg.value` instead,\n+        // at least for the cases which LLVM handles correctly.\n+        let spill_slot = PlaceRef::alloca(bx, operand.layout);\n+        if let Some(name) = name {\n+            bx.set_var_name(spill_slot.llval, &(name + \".dbg.spill\"));\n+        }\n+        operand.val.store(bx, spill_slot);\n+        spill_slot\n+    }\n+\n     /// Apply debuginfo and/or name, after creating the `alloca` for a local,\n     /// or initializing the local with an operand (whichever applies).\n     pub fn debug_introduce_local(&self, bx: &mut Bx, local: mir::Local) {\n@@ -226,17 +244,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     return;\n                 }\n \n-                // \"Spill\" the value onto the stack, for debuginfo,\n-                // without forcing non-debuginfo uses of the local\n-                // to also load from the stack every single time.\n-                // FIXME(#68817) use `llvm.dbg.value` instead,\n-                // at least for the cases which LLVM handles correctly.\n-                let spill_slot = PlaceRef::alloca(bx, operand.layout);\n-                if let Some(name) = name {\n-                    bx.set_var_name(spill_slot.llval, &(name + \".dbg.spill\"));\n-                }\n-                operand.val.store(bx, spill_slot);\n-                spill_slot\n+                Self::spill_operand_to_stack(operand, name, bx)\n             }\n \n             LocalRef::Place(place) => *place,\n@@ -308,6 +316,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     /// Partition all `VarDebugInfo` in `self.mir`, by their base `Local`.\n     pub fn compute_per_local_var_debug_info(\n         &self,\n+        bx: &mut Bx,\n     ) -> Option<IndexVec<mir::Local, Vec<PerLocalVarDebugInfo<'tcx, Bx::DIVariable>>>> {\n         let full_debug_info = self.cx.sess().opts.debuginfo == DebugInfo::Full;\n \n@@ -322,31 +331,63 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             } else {\n                 None\n             };\n+\n             let dbg_var = dbg_scope_and_span.map(|(dbg_scope, _, span)| {\n-                let place = var.place;\n-                let var_ty = self.monomorphized_place_ty(place.as_ref());\n-                let var_kind = if self.mir.local_kind(place.local) == mir::LocalKind::Arg\n-                    && place.projection.is_empty()\n-                    && var.source_info.scope == mir::OUTERMOST_SOURCE_SCOPE\n-                {\n-                    let arg_index = place.local.index() - 1;\n-\n-                    // FIXME(eddyb) shouldn't `ArgumentVariable` indices be\n-                    // offset in closures to account for the hidden environment?\n-                    // Also, is this `+ 1` needed at all?\n-                    VariableKind::ArgumentVariable(arg_index + 1)\n-                } else {\n-                    VariableKind::LocalVariable\n+                let (var_ty, var_kind) = match var.value {\n+                    mir::VarDebugInfoContents::Place(place) => {\n+                        let var_ty = self.monomorphized_place_ty(place.as_ref());\n+                        let var_kind = if self.mir.local_kind(place.local) == mir::LocalKind::Arg\n+                            && place.projection.is_empty()\n+                            && var.source_info.scope == mir::OUTERMOST_SOURCE_SCOPE\n+                        {\n+                            let arg_index = place.local.index() - 1;\n+\n+                            // FIXME(eddyb) shouldn't `ArgumentVariable` indices be\n+                            // offset in closures to account for the hidden environment?\n+                            // Also, is this `+ 1` needed at all?\n+                            VariableKind::ArgumentVariable(arg_index + 1)\n+                        } else {\n+                            VariableKind::LocalVariable\n+                        };\n+                        (var_ty, var_kind)\n+                    }\n+                    mir::VarDebugInfoContents::Const(c) => {\n+                        let ty = self.monomorphize(c.literal.ty);\n+                        (ty, VariableKind::LocalVariable)\n+                    }\n                 };\n+\n                 self.cx.create_dbg_var(var.name, var_ty, dbg_scope, var_kind, span)\n             });\n \n-            per_local[var.place.local].push(PerLocalVarDebugInfo {\n-                name: var.name,\n-                source_info: var.source_info,\n-                dbg_var,\n-                projection: var.place.projection,\n-            });\n+            match var.value {\n+                mir::VarDebugInfoContents::Place(place) => {\n+                    per_local[place.local].push(PerLocalVarDebugInfo {\n+                        name: var.name,\n+                        source_info: var.source_info,\n+                        dbg_var,\n+                        projection: place.projection,\n+                    });\n+                }\n+                mir::VarDebugInfoContents::Const(c) => {\n+                    if let Some(dbg_var) = dbg_var {\n+                        let dbg_loc = match self.dbg_loc(var.source_info) {\n+                            Some(dbg_loc) => dbg_loc,\n+                            None => continue,\n+                        };\n+\n+                        if let Ok(operand) = self.eval_mir_constant_to_operand(bx, &c) {\n+                            let base = Self::spill_operand_to_stack(\n+                                &operand,\n+                                Some(var.name.to_string()),\n+                                bx,\n+                            );\n+\n+                            bx.dbg_var_addr(dbg_var, dbg_loc, base.llval, Size::ZERO, &[]);\n+                        }\n+                    }\n+                }\n+            }\n         }\n         Some(per_local)\n     }"}, {"sha": "285140060be45ad59cf9a03bc8311b44bec5f0a1", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -186,7 +186,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         caller_location: None,\n     };\n \n-    fx.per_local_var_debug_info = fx.compute_per_local_var_debug_info();\n+    fx.per_local_var_debug_info = fx.compute_per_local_var_debug_info(&mut bx);\n \n     for const_ in &mir.required_consts {\n         if let Err(err) = fx.eval_mir_constant(const_) {"}, {"sha": "b54930e8d59555c776f673b8e7d968fd20189025", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -1060,6 +1060,23 @@ impl<'tcx> LocalDecl<'tcx> {\n     }\n }\n \n+#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+pub enum VarDebugInfoContents<'tcx> {\n+    /// NOTE(eddyb) There's an unenforced invariant that this `Place` is\n+    /// based on a `Local`, not a `Static`, and contains no indexing.\n+    Place(Place<'tcx>),\n+    Const(Constant<'tcx>),\n+}\n+\n+impl<'tcx> Debug for VarDebugInfoContents<'tcx> {\n+    fn fmt(&self, fmt: &mut Formatter<'_>) -> fmt::Result {\n+        match self {\n+            VarDebugInfoContents::Const(c) => write!(fmt, \"{}\", c),\n+            VarDebugInfoContents::Place(p) => write!(fmt, \"{:?}\", p),\n+        }\n+    }\n+}\n+\n /// Debug information pertaining to a user variable.\n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n pub struct VarDebugInfo<'tcx> {\n@@ -1071,9 +1088,7 @@ pub struct VarDebugInfo<'tcx> {\n     pub source_info: SourceInfo,\n \n     /// Where the data for this user variable is to be found.\n-    /// NOTE(eddyb) There's an unenforced invariant that this `Place` is\n-    /// based on a `Local`, not a `Static`, and contains no indexing.\n-    pub place: Place<'tcx>,\n+    pub value: VarDebugInfoContents<'tcx>,\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "e281010eb06ec7bf16d28d8d14229326ff3e25a3", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -829,16 +829,20 @@ macro_rules! make_mir_visitor {\n                 let VarDebugInfo {\n                     name: _,\n                     source_info,\n-                    place,\n+                    value,\n                 } = var_debug_info;\n \n                 self.visit_source_info(source_info);\n                 let location = START_BLOCK.start_location();\n-                self.visit_place(\n-                    place,\n-                    PlaceContext::NonUse(NonUseContext::VarDebugInfo),\n-                    location,\n-                );\n+                match value {\n+                    VarDebugInfoContents::Const(c) => self.visit_constant(c, location),\n+                    VarDebugInfoContents::Place(place) =>\n+                        self.visit_place(\n+                            place,\n+                            PlaceContext::NonUse(NonUseContext::VarDebugInfo),\n+                            location\n+                        ),\n+                }\n             }\n \n             fn super_source_scope(&mut self,"}, {"sha": "44044d55532deb8b6578e20170ee6c954beacc46", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -12,7 +12,7 @@ use rustc_infer::infer::{InferCtxt, TyCtxtInferExt};\n use rustc_middle::hir::place::PlaceBase as HirPlaceBase;\n use rustc_middle::mir::{\n     traversal, Body, ClearCrossCrate, Local, Location, Mutability, Operand, Place, PlaceElem,\n-    PlaceRef,\n+    PlaceRef, VarDebugInfoContents,\n };\n use rustc_middle::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc_middle::mir::{Field, ProjectionElem, Promoted, Rvalue, Statement, StatementKind};\n@@ -135,19 +135,21 @@ fn do_mir_borrowck<'a, 'tcx>(\n \n     let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);\n     for var_debug_info in &input_body.var_debug_info {\n-        if let Some(local) = var_debug_info.place.as_local() {\n-            if let Some(prev_name) = local_names[local] {\n-                if var_debug_info.name != prev_name {\n-                    span_bug!(\n-                        var_debug_info.source_info.span,\n-                        \"local {:?} has many names (`{}` vs `{}`)\",\n-                        local,\n-                        prev_name,\n-                        var_debug_info.name\n-                    );\n+        if let VarDebugInfoContents::Place(place) = var_debug_info.value {\n+            if let Some(local) = place.as_local() {\n+                if let Some(prev_name) = local_names[local] {\n+                    if var_debug_info.name != prev_name {\n+                        span_bug!(\n+                            var_debug_info.source_info.span,\n+                            \"local {:?} has many names (`{}` vs `{}`)\",\n+                            local,\n+                            prev_name,\n+                            var_debug_info.name\n+                        );\n+                    }\n                 }\n+                local_names[local] = Some(var_debug_info.name);\n             }\n-            local_names[local] = Some(var_debug_info.name);\n         }\n     }\n "}, {"sha": "3cdaf4c7dcd47a5ef4458f9a501423457c93c019", "filename": "compiler/rustc_mir/src/transform/const_debuginfo.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_debuginfo.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -0,0 +1,102 @@\n+//! Finds locals which are assigned once to a const and unused except for debuginfo and converts\n+//! their debuginfo to use the const directly, allowing the local to be removed.\n+\n+use rustc_middle::{\n+    mir::{\n+        visit::{PlaceContext, Visitor},\n+        Body, Constant, Local, Location, Operand, Rvalue, StatementKind, VarDebugInfoContents,\n+    },\n+    ty::TyCtxt,\n+};\n+\n+use crate::transform::MirPass;\n+use rustc_index::{bit_set::BitSet, vec::IndexVec};\n+\n+pub struct ConstDebugInfo;\n+\n+impl<'tcx> MirPass<'tcx> for ConstDebugInfo {\n+    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        if !tcx.sess.opts.debugging_opts.unsound_mir_opts {\n+            return;\n+        }\n+\n+        trace!(\"running ConstDebugInfo on {:?}\", body.source);\n+\n+        for (local, constant) in find_optimization_oportunities(body) {\n+            for debuginfo in &mut body.var_debug_info {\n+                if let VarDebugInfoContents::Place(p) = debuginfo.value {\n+                    if p.local == local && p.projection.is_empty() {\n+                        trace!(\n+                            \"changing debug info for {:?} from place {:?} to constant {:?}\",\n+                            debuginfo.name,\n+                            p,\n+                            constant\n+                        );\n+                        debuginfo.value = VarDebugInfoContents::Const(constant);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+struct LocalUseVisitor {\n+    local_mutating_uses: IndexVec<Local, u8>,\n+    local_assignment_locations: IndexVec<Local, Option<Location>>,\n+}\n+\n+fn find_optimization_oportunities<'tcx>(body: &Body<'tcx>) -> Vec<(Local, Constant<'tcx>)> {\n+    let mut visitor = LocalUseVisitor {\n+        local_mutating_uses: IndexVec::from_elem(0, &body.local_decls),\n+        local_assignment_locations: IndexVec::from_elem(None, &body.local_decls),\n+    };\n+\n+    visitor.visit_body(body);\n+\n+    let mut locals_to_debuginfo = BitSet::new_empty(body.local_decls.len());\n+    for debuginfo in &body.var_debug_info {\n+        if let VarDebugInfoContents::Place(p) = debuginfo.value {\n+            if let Some(l) = p.as_local() {\n+                locals_to_debuginfo.insert(l);\n+            }\n+        }\n+    }\n+\n+    let mut eligable_locals = Vec::new();\n+    for (local, mutating_uses) in visitor.local_mutating_uses.drain_enumerated(..) {\n+        if mutating_uses != 1 || !locals_to_debuginfo.contains(local) {\n+            continue;\n+        }\n+\n+        if let Some(location) = visitor.local_assignment_locations[local] {\n+            let bb = &body[location.block];\n+\n+            // The value is assigned as the result of a call, not a constant\n+            if bb.statements.len() == location.statement_index {\n+                continue;\n+            }\n+\n+            if let StatementKind::Assign(box (p, Rvalue::Use(Operand::Constant(box c)))) =\n+                &bb.statements[location.statement_index].kind\n+            {\n+                if let Some(local) = p.as_local() {\n+                    eligable_locals.push((local, *c));\n+                }\n+            }\n+        }\n+    }\n+\n+    eligable_locals\n+}\n+\n+impl<'tcx> Visitor<'tcx> for LocalUseVisitor {\n+    fn visit_local(&mut self, local: &Local, context: PlaceContext, location: Location) {\n+        if context.is_mutating_use() {\n+            self.local_mutating_uses[*local] = self.local_mutating_uses[*local].saturating_add(1);\n+\n+            if context.is_place_assignment() {\n+                self.local_assignment_locations[*local] = Some(location);\n+            }\n+        }\n+    }\n+}"}, {"sha": "809e29fb982dd4e5a4beb4453e10ca8e2872df3c", "filename": "compiler/rustc_mir/src/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fmod.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -21,6 +21,7 @@ pub mod check_consts;\n pub mod check_packed_ref;\n pub mod check_unsafety;\n pub mod cleanup_post_borrowck;\n+pub mod const_debuginfo;\n pub mod const_prop;\n pub mod coverage;\n pub mod deaggregator;\n@@ -408,6 +409,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         &remove_noop_landing_pads::RemoveNoopLandingPads,\n         &simplify::SimplifyCfg::new(\"final\"),\n         &nrvo::RenameReturnPlace,\n+        &const_debuginfo::ConstDebugInfo,\n         &simplify::SimplifyLocals,\n         &multiple_return_terminators::MultipleReturnTerminators,\n     ];"}, {"sha": "bea95bf43d21eb3ac880fa31aed7d7fee1fa734b", "filename": "compiler/rustc_mir/src/transform/simplify_try.rs", "status": "modified", "additions": 27, "deletions": 14, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fsimplify_try.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -246,14 +246,19 @@ fn get_arm_identity_info<'a, 'tcx>(\n         tmp_assigned_vars.insert(*r);\n     }\n \n-    let dbg_info_to_adjust: Vec<_> =\n-        debug_info\n-            .iter()\n-            .enumerate()\n-            .filter_map(|(i, var_info)| {\n-                if tmp_assigned_vars.contains(var_info.place.local) { Some(i) } else { None }\n-            })\n-            .collect();\n+    let dbg_info_to_adjust: Vec<_> = debug_info\n+        .iter()\n+        .enumerate()\n+        .filter_map(|(i, var_info)| {\n+            if let VarDebugInfoContents::Place(p) = var_info.value {\n+                if tmp_assigned_vars.contains(p.local) {\n+                    return Some(i);\n+                }\n+            }\n+\n+            None\n+        })\n+        .collect();\n \n     Some(ArmIdentityInfo {\n         local_temp_0: local_tmp_s0,\n@@ -340,9 +345,11 @@ fn optimization_applies<'tcx>(\n     // Check that debug info only points to full Locals and not projections.\n     for dbg_idx in &opt_info.dbg_info_to_adjust {\n         let dbg_info = &var_debug_info[*dbg_idx];\n-        if !dbg_info.place.projection.is_empty() {\n-            trace!(\"NO: debug info for {:?} had a projection {:?}\", dbg_info.name, dbg_info.place);\n-            return false;\n+        if let VarDebugInfoContents::Place(p) = dbg_info.value {\n+            if !p.projection.is_empty() {\n+                trace!(\"NO: debug info for {:?} had a projection {:?}\", dbg_info.name, p);\n+                return false;\n+            }\n         }\n     }\n \n@@ -423,9 +430,15 @@ impl<'tcx> MirPass<'tcx> for SimplifyArmIdentity {\n                 // Fix the debug info to point to the right local\n                 for dbg_index in opt_info.dbg_info_to_adjust {\n                     let dbg_info = &mut debug_info[dbg_index];\n-                    assert!(dbg_info.place.projection.is_empty());\n-                    dbg_info.place.local = opt_info.local_0;\n-                    dbg_info.place.projection = opt_info.dbg_projection;\n+                    assert!(\n+                        matches!(dbg_info.value, VarDebugInfoContents::Place(_)),\n+                        \"value was not a Place\"\n+                    );\n+                    if let VarDebugInfoContents::Place(p) = &mut dbg_info.value {\n+                        assert!(p.projection.is_empty());\n+                        p.local = opt_info.local_0;\n+                        p.projection = opt_info.dbg_projection;\n+                    }\n                 }\n \n                 trace!(\"block is now {:?}\", bb.statements);"}, {"sha": "370010d65f0f0d712c906d66667104e84921f0cd", "filename": "compiler/rustc_mir/src/util/graphviz.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fgraphviz.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -220,7 +220,7 @@ fn write_graph_label<'tcx, W: Write>(\n             w,\n             r#\"debug {} =&gt; {};<br align=\"left\"/>\"#,\n             var_debug_info.name,\n-            escape(&var_debug_info.place)\n+            escape(&var_debug_info.value),\n         )?;\n     }\n "}, {"sha": "b6a1b652cf6a34830a9578e09f02b623adae56f4", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -495,7 +495,7 @@ fn write_scope_tree(\n \n         let indented_debug_info = format!(\n             \"{0:1$}debug {2} => {3:?};\",\n-            INDENT, indent, var_debug_info.name, var_debug_info.place,\n+            INDENT, indent, var_debug_info.name, var_debug_info.value,\n         );\n \n         writeln!("}, {"sha": "6d166bf37f97edcb72ba08d6fd79e31164854642", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -1925,7 +1925,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.var_debug_info.push(VarDebugInfo {\n             name,\n             source_info: debug_source_info,\n-            place: for_arm_body.into(),\n+            value: VarDebugInfoContents::Place(for_arm_body.into()),\n         });\n         let locals = if has_guard.0 {\n             let ref_for_guard = self.local_decls.push(LocalDecl::<'tcx> {\n@@ -1944,7 +1944,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             self.var_debug_info.push(VarDebugInfo {\n                 name,\n                 source_info: debug_source_info,\n-                place: ref_for_guard.into(),\n+                value: VarDebugInfoContents::Place(ref_for_guard.into()),\n             });\n             LocalsForNode::ForGuard { ref_for_guard, for_arm_body }\n         } else {"}, {"sha": "e041464381220c04af1a7962e3a13e7caa4009c8", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -809,7 +809,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     self.var_debug_info.push(VarDebugInfo {\n                         name: ident.name,\n                         source_info,\n-                        place: arg_local.into(),\n+                        value: VarDebugInfoContents::Place(arg_local.into()),\n                     });\n                 }\n             }\n@@ -882,10 +882,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     self.var_debug_info.push(VarDebugInfo {\n                         name,\n                         source_info: SourceInfo::outermost(tcx_hir.span(var_id)),\n-                        place: Place {\n+                        value: VarDebugInfoContents::Place(Place {\n                             local: closure_env_arg,\n                             projection: tcx.intern_place_elems(&projs),\n-                        },\n+                        }),\n                     });\n \n                     mutability"}, {"sha": "47c3239b8bf259445732914a9962bfd8d7ed457f", "filename": "src/test/mir-opt/const_debuginfo.main.ConstDebugInfo.diff", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.main.ConstDebugInfo.diff?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -0,0 +1,115 @@\n+- // MIR for `main` before ConstDebugInfo\n++ // MIR for `main` after ConstDebugInfo\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/const_debuginfo.rs:8:11: 8:11\n+      let _1: u8;                          // in scope 0 at $DIR/const_debuginfo.rs:9:9: 9:10\n+      let mut _5: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:12:15: 12:20\n+      let mut _6: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:12:15: 12:16\n+      let mut _7: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:12:19: 12:20\n+      let mut _8: u8;                      // in scope 0 at $DIR/const_debuginfo.rs:12:23: 12:24\n+      let mut _14: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:21:13: 21:16\n+      let mut _15: u32;                    // in scope 0 at $DIR/const_debuginfo.rs:21:19: 21:22\n+      scope 1 {\n+-         debug x => _1;                   // in scope 1 at $DIR/const_debuginfo.rs:9:9: 9:10\n++         debug x => const 1_u8;           // in scope 1 at $DIR/const_debuginfo.rs:9:9: 9:10\n+          let _2: u8;                      // in scope 1 at $DIR/const_debuginfo.rs:10:9: 10:10\n+          scope 2 {\n+-             debug y => _2;               // in scope 2 at $DIR/const_debuginfo.rs:10:9: 10:10\n++             debug y => const 2_u8;       // in scope 2 at $DIR/const_debuginfo.rs:10:9: 10:10\n+              let _3: u8;                  // in scope 2 at $DIR/const_debuginfo.rs:11:9: 11:10\n+              scope 3 {\n+-                 debug z => _3;           // in scope 3 at $DIR/const_debuginfo.rs:11:9: 11:10\n++                 debug z => const 3_u8;   // in scope 3 at $DIR/const_debuginfo.rs:11:9: 11:10\n+                  let _4: u8;              // in scope 3 at $DIR/const_debuginfo.rs:12:9: 12:12\n+                  scope 4 {\n+-                     debug sum => _4;     // in scope 4 at $DIR/const_debuginfo.rs:12:9: 12:12\n++                     debug sum => const 6_u8; // in scope 4 at $DIR/const_debuginfo.rs:12:9: 12:12\n+                      let _9: &str;        // in scope 4 at $DIR/const_debuginfo.rs:14:9: 14:10\n+                      scope 5 {\n+-                         debug s => _9;   // in scope 5 at $DIR/const_debuginfo.rs:14:9: 14:10\n++                         debug s => const \"hello, world!\"; // in scope 5 at $DIR/const_debuginfo.rs:14:9: 14:10\n+                          let _10: (bool, bool, u32); // in scope 5 at $DIR/const_debuginfo.rs:16:9: 16:10\n+                          scope 6 {\n+                              debug f => _10; // in scope 6 at $DIR/const_debuginfo.rs:16:9: 16:10\n+                              let _11: std::option::Option<u16>; // in scope 6 at $DIR/const_debuginfo.rs:18:9: 18:10\n+                              scope 7 {\n+                                  debug o => _11; // in scope 7 at $DIR/const_debuginfo.rs:18:9: 18:10\n+                                  let _12: Point; // in scope 7 at $DIR/const_debuginfo.rs:20:9: 20:10\n+                                  scope 8 {\n+                                      debug p => _12; // in scope 8 at $DIR/const_debuginfo.rs:20:9: 20:10\n+                                      let _13: u32; // in scope 8 at $DIR/const_debuginfo.rs:21:9: 21:10\n+                                      scope 9 {\n+-                                         debug a => _13; // in scope 9 at $DIR/const_debuginfo.rs:21:9: 21:10\n++                                         debug a => const 64_u32; // in scope 9 at $DIR/const_debuginfo.rs:21:9: 21:10\n+                                      }\n+                                  }\n+                              }\n+                          }\n+                      }\n+                  }\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/const_debuginfo.rs:9:9: 9:10\n+          _1 = const 1_u8;                 // scope 0 at $DIR/const_debuginfo.rs:9:13: 9:16\n+          StorageLive(_2);                 // scope 1 at $DIR/const_debuginfo.rs:10:9: 10:10\n+          _2 = const 2_u8;                 // scope 1 at $DIR/const_debuginfo.rs:10:13: 10:16\n+          StorageLive(_3);                 // scope 2 at $DIR/const_debuginfo.rs:11:9: 11:10\n+          _3 = const 3_u8;                 // scope 2 at $DIR/const_debuginfo.rs:11:13: 11:16\n+          StorageLive(_4);                 // scope 3 at $DIR/const_debuginfo.rs:12:9: 12:12\n+          StorageLive(_5);                 // scope 3 at $DIR/const_debuginfo.rs:12:15: 12:20\n+          StorageLive(_6);                 // scope 3 at $DIR/const_debuginfo.rs:12:15: 12:16\n+          _6 = const 1_u8;                 // scope 3 at $DIR/const_debuginfo.rs:12:15: 12:16\n+          StorageLive(_7);                 // scope 3 at $DIR/const_debuginfo.rs:12:19: 12:20\n+          _7 = const 2_u8;                 // scope 3 at $DIR/const_debuginfo.rs:12:19: 12:20\n+          _5 = const 3_u8;                 // scope 3 at $DIR/const_debuginfo.rs:12:15: 12:20\n+          StorageDead(_7);                 // scope 3 at $DIR/const_debuginfo.rs:12:19: 12:20\n+          StorageDead(_6);                 // scope 3 at $DIR/const_debuginfo.rs:12:19: 12:20\n+          StorageLive(_8);                 // scope 3 at $DIR/const_debuginfo.rs:12:23: 12:24\n+          _8 = const 3_u8;                 // scope 3 at $DIR/const_debuginfo.rs:12:23: 12:24\n+          _4 = const 6_u8;                 // scope 3 at $DIR/const_debuginfo.rs:12:15: 12:24\n+          StorageDead(_8);                 // scope 3 at $DIR/const_debuginfo.rs:12:23: 12:24\n+          StorageDead(_5);                 // scope 3 at $DIR/const_debuginfo.rs:12:23: 12:24\n+          StorageLive(_9);                 // scope 4 at $DIR/const_debuginfo.rs:14:9: 14:10\n+          _9 = const \"hello, world!\";      // scope 4 at $DIR/const_debuginfo.rs:14:13: 14:28\n+                                           // ty::Const\n+                                           // + ty: &str\n+                                           // + val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 })\n+                                           // mir::Constant\n+                                           // + span: $DIR/const_debuginfo.rs:14:13: 14:28\n+                                           // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 101, 108, 108, 111, 44, 32, 119, 111, 114, 108, 100, 33], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [8191], len: Size { raw: 13 } }, size: Size { raw: 13 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 13 }) }\n+          StorageLive(_10);                // scope 5 at $DIR/const_debuginfo.rs:16:9: 16:10\n+          (_10.0: bool) = const true;      // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n+          (_10.1: bool) = const false;     // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n+          (_10.2: u32) = const 123_u32;    // scope 5 at $DIR/const_debuginfo.rs:16:13: 16:34\n+          StorageLive(_11);                // scope 6 at $DIR/const_debuginfo.rs:18:9: 18:10\n+          ((_11 as Some).0: u16) = const 99_u16; // scope 6 at $DIR/const_debuginfo.rs:18:13: 18:24\n+          discriminant(_11) = 1;           // scope 6 at $DIR/const_debuginfo.rs:18:13: 18:24\n+          StorageLive(_12);                // scope 7 at $DIR/const_debuginfo.rs:20:9: 20:10\n+          (_12.0: u32) = const 32_u32;     // scope 7 at $DIR/const_debuginfo.rs:20:13: 20:35\n+          (_12.1: u32) = const 32_u32;     // scope 7 at $DIR/const_debuginfo.rs:20:13: 20:35\n+          StorageLive(_13);                // scope 8 at $DIR/const_debuginfo.rs:21:9: 21:10\n+          StorageLive(_14);                // scope 8 at $DIR/const_debuginfo.rs:21:13: 21:16\n+          _14 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:21:13: 21:16\n+          StorageLive(_15);                // scope 8 at $DIR/const_debuginfo.rs:21:19: 21:22\n+          _15 = const 32_u32;              // scope 8 at $DIR/const_debuginfo.rs:21:19: 21:22\n+          _13 = const 64_u32;              // scope 8 at $DIR/const_debuginfo.rs:21:13: 21:22\n+          StorageDead(_15);                // scope 8 at $DIR/const_debuginfo.rs:21:21: 21:22\n+          StorageDead(_14);                // scope 8 at $DIR/const_debuginfo.rs:21:21: 21:22\n+          _0 = const ();                   // scope 0 at $DIR/const_debuginfo.rs:8:11: 22:2\n+          StorageDead(_13);                // scope 8 at $DIR/const_debuginfo.rs:22:1: 22:2\n+          StorageDead(_12);                // scope 7 at $DIR/const_debuginfo.rs:22:1: 22:2\n+          StorageDead(_11);                // scope 6 at $DIR/const_debuginfo.rs:22:1: 22:2\n+          StorageDead(_10);                // scope 5 at $DIR/const_debuginfo.rs:22:1: 22:2\n+          StorageDead(_9);                 // scope 4 at $DIR/const_debuginfo.rs:22:1: 22:2\n+          StorageDead(_4);                 // scope 3 at $DIR/const_debuginfo.rs:22:1: 22:2\n+          StorageDead(_3);                 // scope 2 at $DIR/const_debuginfo.rs:22:1: 22:2\n+          StorageDead(_2);                 // scope 1 at $DIR/const_debuginfo.rs:22:1: 22:2\n+          StorageDead(_1);                 // scope 0 at $DIR/const_debuginfo.rs:22:1: 22:2\n+          return;                          // scope 0 at $DIR/const_debuginfo.rs:22:2: 22:2\n+      }\n+  }\n+  "}, {"sha": "a188da385262395087fabd2fc0d43b6e1d775a8d", "filename": "src/test/mir-opt/const_debuginfo.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e99a89c7c0b6865a680a2d6169847ec8acc001d3/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e99a89c7c0b6865a680a2d6169847ec8acc001d3/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_debuginfo.rs?ref=e99a89c7c0b6865a680a2d6169847ec8acc001d3", "patch": "@@ -0,0 +1,24 @@\n+// compile-flags: -C overflow-checks=no -Zunsound-mir-opts\n+\n+struct Point {\n+    x: u32,\n+    y: u32,\n+}\n+\n+fn main() {\n+    let x = 1u8;\n+    let y = 2u8;\n+    let z = 3u8;\n+    let sum = x + y + z;\n+\n+    let s = \"hello, world!\";\n+\n+    let f = (true, false, 123u32);\n+\n+    let o = Some(99u16);\n+\n+    let p = Point { x: 32, y: 32 };\n+    let a = p.x + p.y;\n+}\n+\n+// EMIT_MIR const_debuginfo.main.ConstDebugInfo.diff"}]}