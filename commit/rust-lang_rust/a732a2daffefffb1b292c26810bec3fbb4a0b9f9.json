{"sha": "a732a2daffefffb1b292c26810bec3fbb4a0b9f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3MzJhMmRhZmZlZmZmYjFiMjkyYzI2ODEwYmVjM2ZiYjRhMGI5Zjk=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-07-03T05:47:58Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-07-03T14:46:50Z"}, "message": "Convert vec::windowed to an external iterator, and add an n-at-a-time chunk iterator.", "tree": {"sha": "c90e668df26e037833b226646788ec63285449f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c90e668df26e037833b226646788ec63285449f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a732a2daffefffb1b292c26810bec3fbb4a0b9f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a732a2daffefffb1b292c26810bec3fbb4a0b9f9", "html_url": "https://github.com/rust-lang/rust/commit/a732a2daffefffb1b292c26810bec3fbb4a0b9f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a732a2daffefffb1b292c26810bec3fbb4a0b9f9/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "944d904ad4b4fdef90a2f2267fac206de205f3a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/944d904ad4b4fdef90a2f2267fac206de205f3a0", "html_url": "https://github.com/rust-lang/rust/commit/944d904ad4b4fdef90a2f2267fac206de205f3a0"}], "stats": {"total": 177, "additions": 132, "deletions": 45}, "files": [{"sha": "f19f917ee4749f971008983be08f56389160cb44", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 132, "deletions": 45, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/a732a2daffefffb1b292c26810bec3fbb4a0b9f9/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a732a2daffefffb1b292c26810bec3fbb4a0b9f9/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=a732a2daffefffb1b292c26810bec3fbb4a0b9f9", "patch": "@@ -452,27 +452,46 @@ pub fn each_permutation<T:Copy>(values: &[T], fun: &fn(perm : &[T]) -> bool) ->\n     }\n }\n \n-/**\n- * Iterate over all contiguous windows of length `n` of the vector `v`.\n- *\n- * # Example\n- *\n- * Print the adjacent pairs of a vector (i.e. `[1,2]`, `[2,3]`, `[3,4]`)\n- *\n- * ~~~ {.rust}\n- * for windowed(2, &[1,2,3,4]) |v| {\n- *     io::println(fmt!(\"%?\", v));\n- * }\n- * ~~~\n- *\n- */\n-pub fn windowed<'r, T>(n: uint, v: &'r [T], it: &fn(&'r [T]) -> bool) -> bool {\n-    assert!(1u <= n);\n-    if n > v.len() { return true; }\n-    for uint::range(0, v.len() - n + 1) |i| {\n-        if !it(v.slice(i, i + n)) { return false; }\n+/// An iterator over the (overlapping) slices of length `size` within\n+/// a vector.\n+pub struct VecWindowIter<'self, T> {\n+    priv v: &'self [T],\n+    priv size: uint\n+}\n+\n+impl<'self, T> Iterator<&'self [T]> for VecWindowIter<'self, T> {\n+    fn next(&mut self) -> Option<&'self [T]> {\n+        if self.size > self.v.len() {\n+            None\n+        } else {\n+            let ret = Some(self.v.slice(0, self.size));\n+            self.v = self.v.slice(1, self.v.len());\n+            ret\n+        }\n+    }\n+}\n+\n+/// An iterator over a vector in (non-overlapping) chunks (`size`\n+/// elements at a time).\n+pub struct VecChunkIter<'self, T> {\n+    priv v: &'self [T],\n+    priv size: uint\n+}\n+\n+impl<'self, T> Iterator<&'self [T]> for VecChunkIter<'self, T> {\n+    fn next(&mut self) -> Option<&'self [T]> {\n+        if self.size == 0 {\n+            None\n+        } else if self.size >= self.v.len() {\n+            // finished\n+            self.size = 0;\n+            Some(self.v)\n+        } else {\n+            let ret = Some(self.v.slice(0, self.size));\n+            self.v = self.v.slice(self.size, self.v.len());\n+            ret\n+        }\n     }\n-    return true;\n }\n \n /**\n@@ -728,6 +747,9 @@ pub trait ImmutableVector<'self, T> {\n     fn rsplit_iter(self, pred: &'self fn(&T) -> bool) -> VecRSplitIterator<'self, T>;\n     fn rsplitn_iter(self,  n: uint, pred: &'self fn(&T) -> bool) -> VecRSplitIterator<'self, T>;\n \n+    fn window_iter(self, size: uint) -> VecWindowIter<'self, T>;\n+    fn chunk_iter(self, size: uint) -> VecChunkIter<'self, T>;\n+\n     fn head(&self) -> &'self T;\n     fn head_opt(&self) -> Option<&'self T>;\n     fn tail(&self) -> &'self [T];\n@@ -817,6 +839,62 @@ impl<'self,T> ImmutableVector<'self, T> for &'self [T] {\n         }\n     }\n \n+    /**\n+     * Returns an iterator over all contiguous windows of length\n+     * `size`. The windows overlap. If the vector is shorter than\n+     * `size`, the iterator returns no values.\n+     *\n+     * # Failure\n+     *\n+     * Fails if `size` is 0.\n+     *\n+     * # Example\n+     *\n+     * Print the adjacent pairs of a vector (i.e. `[1,2]`, `[2,3]`,\n+     * `[3,4]`):\n+     *\n+     * ~~~ {.rust}\n+     * let v = &[1,2,3,4];\n+     * for v.window_iter().advance |win| {\n+     *     io::println(fmt!(\"%?\", win));\n+     * }\n+     * ~~~\n+     *\n+     */\n+    fn window_iter(self, size: uint) -> VecWindowIter<'self, T> {\n+        assert!(size != 0);\n+        VecWindowIter { v: self, size: size }\n+    }\n+\n+    /**\n+     *\n+     * Returns an iterator over `size` elements of the vector at a\n+     * time. The chunks do not overlap. If `size` does not divide the\n+     * length of the vector, then the last chunk will not have length\n+     * `size`.\n+     *\n+     * # Failure\n+     *\n+     * Fails if `size` is 0.\n+     *\n+     * # Example\n+     *\n+     * Print the vector two elements at a time (i.e. `[1,2]`,\n+     * `[3,4]`, `[5]`):\n+     *\n+     * ~~~ {.rust}\n+     * let v = &[1,2,3,4,5];\n+     * for v.chunk_iter().advance |win| {\n+     *     io::println(fmt!(\"%?\", win));\n+     * }\n+     * ~~~\n+     *\n+     */\n+    fn chunk_iter(self, size: uint) -> VecChunkIter<'self, T> {\n+        assert!(size != 0);\n+        VecChunkIter { v: self, size: size }\n+    }\n+\n     /// Returns the first element of a vector, failing if the vector is empty.\n     #[inline]\n     fn head(&self) -> &'self T {\n@@ -2663,31 +2741,6 @@ mod tests {\n         assert_eq!([&[1], &[2], &[3]].connect_vec(&0), ~[1, 0, 2, 0, 3]);\n     }\n \n-    #[test]\n-    fn test_windowed () {\n-        fn t(n: uint, expected: &[&[int]]) {\n-            let mut i = 0;\n-            for windowed(n, [1,2,3,4,5,6]) |v| {\n-                assert_eq!(v, expected[i]);\n-                i += 1;\n-            }\n-\n-            // check that we actually iterated the right number of times\n-            assert_eq!(i, expected.len());\n-        }\n-        t(3, &[&[1,2,3],&[2,3,4],&[3,4,5],&[4,5,6]]);\n-        t(4, &[&[1,2,3,4],&[2,3,4,5],&[3,4,5,6]]);\n-        t(7, &[]);\n-        t(8, &[]);\n-    }\n-\n-    #[test]\n-    #[should_fail]\n-    #[ignore(cfg(windows))]\n-    fn test_windowed_() {\n-        for windowed (0u, [1u,2u,3u,4u,5u,6u]) |_v| {}\n-    }\n-\n     #[test]\n     fn test_unshift() {\n         let mut x = ~[1, 2, 3];\n@@ -3035,6 +3088,40 @@ mod tests {\n         assert_eq!(xs.rsplitn_iter(1, |x| *x == 5).collect::<~[&[int]]>(), ~[&[]]);\n     }\n \n+    #[test]\n+    fn test_window_iterator() {\n+        let v = &[1i,2,3,4];\n+\n+        assert_eq!(v.window_iter(2).collect::<~[&[int]]>(), ~[&[1,2], &[2,3], &[3,4]]);\n+        assert_eq!(v.window_iter(3).collect::<~[&[int]]>(), ~[&[1i,2,3], &[2,3,4]]);\n+        assert!(v.window_iter(6).next().is_none());\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    #[ignore(cfg(windows))]\n+    fn test_window_iterator_0() {\n+        let v = &[1i,2,3,4];\n+        let _it = v.window_iter(0);\n+    }\n+\n+    #[test]\n+    fn test_chunk_iterator() {\n+        let v = &[1i,2,3,4,5];\n+\n+        assert_eq!(v.chunk_iter(2).collect::<~[&[int]]>(), ~[&[1i,2], &[3,4], &[5]]);\n+        assert_eq!(v.chunk_iter(3).collect::<~[&[int]]>(), ~[&[1i,2,3], &[4,5]]);\n+        assert_eq!(v.chunk_iter(6).collect::<~[&[int]]>(), ~[&[1i,2,3,4,5]]);\n+    }\n+\n+    #[test]\n+    #[should_fail]\n+    #[ignore(cfg(windows))]\n+    fn test_chunk_iterator_0() {\n+        let v = &[1i,2,3,4];\n+        let _it = v.chunk_iter(0);\n+    }\n+\n     #[test]\n     fn test_move_from() {\n         let mut a = [1,2,3,4,5];"}]}