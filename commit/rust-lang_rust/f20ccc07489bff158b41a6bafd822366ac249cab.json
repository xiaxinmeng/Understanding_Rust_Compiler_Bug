{"sha": "f20ccc07489bff158b41a6bafd822366ac249cab", "node_id": "C_kwDOAAsO6NoAKGYyMGNjYzA3NDg5YmZmMTU4YjQxYTZiYWZkODIyMzY2YWMyNDljYWI", "commit": {"author": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2021-12-31T12:32:03Z"}, "committer": {"name": "Daniel Henry-Mantilla", "email": "daniel.henry.mantilla@gmail.com", "date": "2022-01-03T19:43:16Z"}, "message": "Make the documentation of builtin macro attributes accessible\n\n  - Do not `#[doc(hidden)]` the `#[derive]` macro attribute\n\n  - Add a link to the reference section to `derive`'s inherent docs\n\n  - Do the same for `#[test]` and `#[global_allocator]`\n\n  - Fix `GlobalAlloc` link (why is it on `core` and not `alloc`?)\n\n  - Try `no_inline`-ing the `std` reexports from `core`\n\n  - Revert \"Try `no_inline`-ing the `std` reexports from `core`\"\n\n  - Address PR review\n\n  - Also document the unstable macros", "tree": {"sha": "760e557fdf6765fe2d58b0f43a53eb99ba1040e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/760e557fdf6765fe2d58b0f43a53eb99ba1040e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f20ccc07489bff158b41a6bafd822366ac249cab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f20ccc07489bff158b41a6bafd822366ac249cab", "html_url": "https://github.com/rust-lang/rust/commit/f20ccc07489bff158b41a6bafd822366ac249cab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f20ccc07489bff158b41a6bafd822366ac249cab/comments", "author": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danielhenrymantilla", "id": 9920355, "node_id": "MDQ6VXNlcjk5MjAzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/9920355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danielhenrymantilla", "html_url": "https://github.com/danielhenrymantilla", "followers_url": "https://api.github.com/users/danielhenrymantilla/followers", "following_url": "https://api.github.com/users/danielhenrymantilla/following{/other_user}", "gists_url": "https://api.github.com/users/danielhenrymantilla/gists{/gist_id}", "starred_url": "https://api.github.com/users/danielhenrymantilla/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danielhenrymantilla/subscriptions", "organizations_url": "https://api.github.com/users/danielhenrymantilla/orgs", "repos_url": "https://api.github.com/users/danielhenrymantilla/repos", "events_url": "https://api.github.com/users/danielhenrymantilla/events{/privacy}", "received_events_url": "https://api.github.com/users/danielhenrymantilla/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92", "url": "https://api.github.com/repos/rust-lang/rust/commits/ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92", "html_url": "https://github.com/rust-lang/rust/commit/ddabe0775c5f5b551d5eb54e3c4366fb8bec0c92"}], "stats": {"total": 47, "additions": 25, "deletions": 22}, "files": [{"sha": "d8f6c85e428cdf054e78afcdfa0f6cd1c7d66630", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f20ccc07489bff158b41a6bafd822366ac249cab/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f20ccc07489bff158b41a6bafd822366ac249cab/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=f20ccc07489bff158b41a6bafd822366ac249cab", "patch": "@@ -866,7 +866,6 @@ pub(crate) mod builtin {\n                   language use and is subject to change\"\n     )]\n     #[allow_internal_unstable(fmt_internals)]\n-    #[doc(hidden)]\n     #[rustc_builtin_macro]\n     #[macro_export]\n     macro_rules! format_args_nl {\n@@ -1428,13 +1427,21 @@ pub(crate) mod builtin {\n     }\n \n     /// Attribute macro used to apply derive macros.\n+    ///\n+    /// See [the reference] for more info.\n+    ///\n+    /// [the reference]: ../../../reference/attributes/derive.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     pub macro derive($item:item) {\n         /* compiler built-in */\n     }\n \n     /// Attribute macro applied to a function to turn it into a unit test.\n+    ///\n+    /// See [the reference] for more info.\n+    ///\n+    /// [the reference]: ../../../reference/attributes/testing.html#the-test-attribute\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[allow_internal_unstable(test, rustc_attrs)]\n     #[rustc_builtin_macro]\n@@ -1469,7 +1476,7 @@ pub(crate) mod builtin {\n \n     /// Attribute macro applied to a static to register it as a global allocator.\n     ///\n-    /// See also [`std::alloc::GlobalAlloc`](../std/alloc/trait.GlobalAlloc.html).\n+    /// See also [`std::alloc::GlobalAlloc`](../../../std/alloc/trait.GlobalAlloc.html).\n     #[stable(feature = \"global_allocator\", since = \"1.28.0\")]\n     #[allow_internal_unstable(rustc_attrs)]\n     #[rustc_builtin_macro]\n@@ -1507,6 +1514,7 @@ pub(crate) mod builtin {\n         since = \"1.52.0\",\n         reason = \"rustc-serialize is deprecated and no longer supported\"\n     )]\n+    #[doc(hidden)] // While technically stable, using it is unstable, and deprecated. Hide it.\n     pub macro RustcDecodable($item:item) {\n         /* compiler built-in */\n     }\n@@ -1519,6 +1527,7 @@ pub(crate) mod builtin {\n         since = \"1.52.0\",\n         reason = \"rustc-serialize is deprecated and no longer supported\"\n     )]\n+    #[doc(hidden)] // While technically stable, using it is unstable, and deprecated. Hide it.\n     pub macro RustcEncodable($item:item) {\n         /* compiler built-in */\n     }"}, {"sha": "0fb8846288bee7835f415a159ff0c369dbd017a8", "filename": "library/core/src/prelude/v1.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f20ccc07489bff158b41a6bafd822366ac249cab/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f20ccc07489bff158b41a6bafd822366ac249cab/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprelude%2Fv1.rs?ref=f20ccc07489bff158b41a6bafd822366ac249cab", "patch": "@@ -69,29 +69,26 @@ pub use crate::{\n #[doc(no_inline)]\n pub use crate::concat_bytes;\n \n+// Do not `doc(inline)` these `doc(hidden)` items.\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-#[allow(deprecated, deprecated_in_future)]\n-#[doc(no_inline)]\n-pub use crate::macros::builtin::{\n-    bench, global_allocator, test, test_case, RustcDecodable, RustcEncodable,\n-};\n+#[allow(deprecated)]\n+pub use crate::macros::builtin::{RustcDecodable, RustcEncodable};\n \n+// Do not `doc(no_inline)` so that they become doc items on their own\n+// (no public module for them to be re-exported from).\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-#[doc(no_inline)]\n-pub use crate::macros::builtin::derive;\n+pub use crate::macros::builtin::{bench, derive, global_allocator, test, test_case};\n \n #[unstable(\n     feature = \"cfg_accessible\",\n     issue = \"64797\",\n     reason = \"`cfg_accessible` is not fully implemented\"\n )]\n-#[doc(no_inline)]\n pub use crate::macros::builtin::cfg_accessible;\n \n #[unstable(\n     feature = \"cfg_eval\",\n     issue = \"82679\",\n     reason = \"`cfg_eval` is a recently implemented feature\"\n )]\n-#[doc(no_inline)]\n pub use crate::macros::builtin::cfg_eval;"}, {"sha": "b52bcdfca9e07152062fe44b3db98f7f6293c546", "filename": "library/std/src/prelude/v1.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f20ccc07489bff158b41a6bafd822366ac249cab/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f20ccc07489bff158b41a6bafd822366ac249cab/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fv1.rs?ref=f20ccc07489bff158b41a6bafd822366ac249cab", "patch": "@@ -54,33 +54,30 @@ pub use core::prelude::v1::{\n #[doc(no_inline)]\n pub use core::prelude::v1::concat_bytes;\n \n-// FIXME: Attribute and internal derive macros are not documented because for them rustdoc generates\n-// dead links which fail link checker testing.\n+// Do not `doc(inline)` these `doc(hidden)` items.\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-#[allow(deprecated, deprecated_in_future)]\n-#[doc(hidden)]\n-pub use core::prelude::v1::{\n-    bench, global_allocator, test, test_case, RustcDecodable, RustcEncodable,\n-};\n+#[allow(deprecated)]\n+pub use core::prelude::v1::{RustcDecodable, RustcEncodable};\n \n+// Do not `doc(no_inline)` so that they become doc items on their own\n+// (no public module for them to be re-exported from).\n #[stable(feature = \"builtin_macro_prelude\", since = \"1.38.0\")]\n-#[doc(hidden)]\n-pub use core::prelude::v1::derive;\n+pub use core::prelude::v1::{bench, derive, global_allocator, test, test_case};\n \n+// Do not `doc(no_inline)` either.\n #[unstable(\n     feature = \"cfg_accessible\",\n     issue = \"64797\",\n     reason = \"`cfg_accessible` is not fully implemented\"\n )]\n-#[doc(hidden)]\n pub use core::prelude::v1::cfg_accessible;\n \n+// Do not `doc(no_inline)` either.\n #[unstable(\n     feature = \"cfg_eval\",\n     issue = \"82679\",\n     reason = \"`cfg_eval` is a recently implemented feature\"\n )]\n-#[doc(hidden)]\n pub use core::prelude::v1::cfg_eval;\n \n // The file so far is equivalent to src/libcore/prelude/v1.rs,"}]}