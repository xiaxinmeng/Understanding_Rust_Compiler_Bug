{"sha": "060a84d1f7fee5585aa6ebc50c74b0b35f2c0283", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2MGE4NGQxZjdmZWU1NTg1YWE2ZWJjNTBjNzRiMGIzNWYyYzAyODM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-23T23:26:32Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-06-23T23:26:43Z"}, "message": "Refactor away duplicate method `ecx.block_all()`", "tree": {"sha": "8b862f5baa890e85f9c9a62a3a46d217ce759f84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b862f5baa890e85f9c9a62a3a46d217ce759f84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/060a84d1f7fee5585aa6ebc50c74b0b35f2c0283", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/060a84d1f7fee5585aa6ebc50c74b0b35f2c0283", "html_url": "https://github.com/rust-lang/rust/commit/060a84d1f7fee5585aa6ebc50c74b0b35f2c0283", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/060a84d1f7fee5585aa6ebc50c74b0b35f2c0283/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94479ad81fcdb275e9684b14bd6f4d418f7b6749", "url": "https://api.github.com/repos/rust-lang/rust/commits/94479ad81fcdb275e9684b14bd6f4d418f7b6749", "html_url": "https://github.com/rust-lang/rust/commit/94479ad81fcdb275e9684b14bd6f4d418f7b6749"}], "stats": {"total": 19, "additions": 7, "deletions": 12}, "files": [{"sha": "480a0894201806cf41ea8e9cdd73f6154267a9ce", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/060a84d1f7fee5585aa6ebc50c74b0b35f2c0283/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060a84d1f7fee5585aa6ebc50c74b0b35f2c0283/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=060a84d1f7fee5585aa6ebc50c74b0b35f2c0283", "patch": "@@ -100,7 +100,6 @@ pub trait AstBuilder {\n     // blocks\n     fn block(&self, span: Span, stmts: Vec<ast::Stmt>) -> P<ast::Block>;\n     fn block_expr(&self, expr: P<ast::Expr>) -> P<ast::Block>;\n-    fn block_all(&self, span: Span, stmts: Vec<ast::Stmt>) -> P<ast::Block>;\n \n     // expressions\n     fn expr(&self, span: Span, node: ast::ExprKind) -> P<ast::Expr>;\n@@ -553,22 +552,18 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         P(respan(sp, ast::StmtKind::Decl(P(decl), ast::DUMMY_NODE_ID)))\n     }\n \n-    fn block(&self, span: Span, stmts: Vec<ast::Stmt>) -> P<ast::Block> {\n-        self.block_all(span, stmts)\n-    }\n-\n     fn stmt_item(&self, sp: Span, item: P<ast::Item>) -> ast::Stmt {\n         let decl = respan(sp, ast::DeclKind::Item(item));\n         respan(sp, ast::StmtKind::Decl(P(decl), ast::DUMMY_NODE_ID))\n     }\n \n     fn block_expr(&self, expr: P<ast::Expr>) -> P<ast::Block> {\n-        self.block_all(expr.span, vec![Spanned {\n+        self.block(expr.span, vec![Spanned {\n             span: expr.span,\n             node: ast::StmtKind::Expr(expr, ast::DUMMY_NODE_ID),\n         }])\n     }\n-    fn block_all(&self, span: Span, stmts: Vec<ast::Stmt>) -> P<ast::Block> {\n+    fn block(&self, span: Span, stmts: Vec<ast::Stmt>) -> P<ast::Block> {\n         P(ast::Block {\n            stmts: stmts,\n            id: ast::DUMMY_NODE_ID,"}, {"sha": "74a88842d22c281f38dbc55be3ad0c2d2ee4cb68", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/060a84d1f7fee5585aa6ebc50c74b0b35f2c0283/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060a84d1f7fee5585aa6ebc50c74b0b35f2c0283/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=060a84d1f7fee5585aa6ebc50c74b0b35f2c0283", "patch": "@@ -513,7 +513,7 @@ pub fn expand_quote_matcher(cx: &mut ExtCtxt,\n     let mut vector = mk_stmts_let(cx, sp);\n     vector.extend(statements_mk_tts(cx, &tts[..], true));\n     vector.push(cx.stmt_expr(cx.expr_ident(sp, id_ext(\"tt\"))));\n-    let block = cx.expr_block(cx.block_all(sp, vector));\n+    let block = cx.expr_block(cx.block(sp, vector));\n \n     let expanded = expand_wrapper(cx, sp, cx_expr, block, &[&[\"syntax\", \"ext\", \"quote\", \"rt\"]]);\n     base::MacEager::expr(expanded)\n@@ -884,7 +884,7 @@ fn expand_tts(cx: &ExtCtxt, sp: Span, tts: &[TokenTree])\n     let mut vector = mk_stmts_let(cx, sp);\n     vector.extend(statements_mk_tts(cx, &tts[..], false));\n     vector.push(cx.stmt_expr(cx.expr_ident(sp, id_ext(\"tt\"))));\n-    let block = cx.expr_block(cx.block_all(sp, vector));\n+    let block = cx.expr_block(cx.block(sp, vector));\n \n     (cx_expr, block)\n }\n@@ -905,7 +905,7 @@ fn expand_wrapper(cx: &ExtCtxt,\n     }).chain(Some(stmt_let_ext_cx)).collect::<Vec<_>>();\n     stmts.push(cx.stmt_expr(expr));\n \n-    cx.expr_block(cx.block_all(sp, stmts))\n+    cx.expr_block(cx.block(sp, stmts))\n }\n \n fn expand_parse_call(cx: &ExtCtxt,"}, {"sha": "39d3599e106070980f04270cc5c029bf1a347613", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/060a84d1f7fee5585aa6ebc50c74b0b35f2c0283/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060a84d1f7fee5585aa6ebc50c74b0b35f2c0283/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=060a84d1f7fee5585aa6ebc50c74b0b35f2c0283", "patch": "@@ -474,7 +474,7 @@ fn mk_main(cx: &mut TestCtxt) -> P<ast::Item> {\n     let main_attr = ecx.attribute(sp, main_meta);\n     // pub fn main() { ... }\n     let main_ret_ty = ecx.ty(sp, ast::TyKind::Tup(vec![]));\n-    let main_body = ecx.block_all(sp, vec![call_test_main]);\n+    let main_body = ecx.block(sp, vec![call_test_main]);\n     let main = ast::ItemKind::Fn(ecx.fn_decl(vec![], main_ret_ty),\n                            ast::Unsafety::Normal,\n                            ast::Constness::NotConst,"}, {"sha": "635d9ee5516e04ba4c9dfbeb875d3dd6de21c1c5", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/060a84d1f7fee5585aa6ebc50c74b0b35f2c0283/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/060a84d1f7fee5585aa6ebc50c74b0b35f2c0283/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=060a84d1f7fee5585aa6ebc50c74b0b35f2c0283", "patch": "@@ -1333,7 +1333,7 @@ impl<'a> MethodDef<'a> {\n             let all_match = cx.expr_match(sp, match_arg, match_arms);\n             let arm_expr = cx.expr_if(sp, discriminant_test, all_match, Some(arm_expr));\n             index_let_stmts.push(cx.stmt_expr(arm_expr));\n-            cx.expr_block(cx.block_all(sp, index_let_stmts))\n+            cx.expr_block(cx.block(sp, index_let_stmts))\n         } else if variants.is_empty() {\n             // As an additional wrinkle, For a zero-variant enum A,\n             // currently the compiler"}]}