{"sha": "2c7bf41b97e1b2a4ad475dd8fb197ce7f0c5c805", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjN2JmNDFiOTdlMWIyYTRhZDQ3NWRkOGZiMTk3Y2U3ZjBjNWM4MDU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-05T15:52:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-05T15:52:28Z"}, "message": "Rollup merge of #84903 - hyd-dev:dead-check-in-alloc-msg, r=RalfJung\n\nRemove `rustc_middle::mir::interpret::CheckInAllocMsg::NullPointerTest`\n\nRemoving it per https://github.com/rust-lang/rust/pull/84842#discussion_r625589674: it's a dead enum variant.\n\nNote that `PointerArithmeticTest` also seems dead:\n```\n$ rg -F PointerArithmeticTest -C5\ncompiler/rustc_middle/src/mir/interpret/error.rs\n169-\n170-/// Details of why a pointer had to be in-bounds.\n171-#[derive(Debug, Copy, Clone, TyEncodable, TyDecodable, HashStable)]\n172-pub enum CheckInAllocMsg {\n173-    MemoryAccessTest,\n174:    PointerArithmeticTest,\n175-    InboundsTest,\n176-}\n177-\n178-impl fmt::Display for CheckInAllocMsg {\n179-    /// When this is printed as an error the context looks like this\n--\n182-        write!(\n183-            f,\n184-            \"{}\",\n185-            match *self {\n186-                CheckInAllocMsg::MemoryAccessTest => \"memory access\",\n187:                CheckInAllocMsg::PointerArithmeticTest => \"pointer arithmetic\",\n188-                CheckInAllocMsg::InboundsTest => \"inbounds test\",\n189-            }\n190-        )\n191-    }\n192-}\n```\nNot sure if that is also desirable to be removed, however.", "tree": {"sha": "356e48f6a839ca7a70fddcf94cd08a82625bfc35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/356e48f6a839ca7a70fddcf94cd08a82625bfc35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c7bf41b97e1b2a4ad475dd8fb197ce7f0c5c805", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgkr89CRBK7hj4Ov3rIwAAgaEIADKhjW9D0TbyXJuNzKo50gPd\nPVHa/L+m4ZxVDqiPR6B1GiBfsbpUPg/5wY6lZztJKqICFl7JI6ehX3UFTh0CxTBq\naq1grYcjqqypFNPKKfGRDRySIYYxtE0q9T36dklchXz8tALq73CuO+OvhG4E7mpw\ncZFBmHmqsPPxXD0pEb8KSOtAEPIJsVJvQ/r5hb57iMs9hKJdDoZDUESEgHdhde4G\n+pm4uG+bnWC0BucVWtQRBhqjBYRqYR0+OVPjyrlm9gab4hLsGPE5BMpby4vOWKEx\nN0myw6Ihvz3Nr4t9oNfojVMnPjCL6RWPZ7smGW7gyigoohEEVGrVl+UZvqiZMY4=\n=bSUJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 356e48f6a839ca7a70fddcf94cd08a82625bfc35\nparent 2cb9c6c2b453a1affbe56a7caaa7a00f8169d8a9\nparent ee7a6c6acc01560895796f2d5206f38955e3768c\nauthor Ralf Jung <post@ralfj.de> 1620229948 +0200\ncommitter GitHub <noreply@github.com> 1620229948 +0200\n\nRollup merge of #84903 - hyd-dev:dead-check-in-alloc-msg, r=RalfJung\n\nRemove `rustc_middle::mir::interpret::CheckInAllocMsg::NullPointerTest`\n\nRemoving it per https://github.com/rust-lang/rust/pull/84842#discussion_r625589674: it's a dead enum variant.\n\nNote that `PointerArithmeticTest` also seems dead:\n```\n$ rg -F PointerArithmeticTest -C5\ncompiler/rustc_middle/src/mir/interpret/error.rs\n169-\n170-/// Details of why a pointer had to be in-bounds.\n171-#[derive(Debug, Copy, Clone, TyEncodable, TyDecodable, HashStable)]\n172-pub enum CheckInAllocMsg {\n173-    MemoryAccessTest,\n174:    PointerArithmeticTest,\n175-    InboundsTest,\n176-}\n177-\n178-impl fmt::Display for CheckInAllocMsg {\n179-    /// When this is printed as an error the context looks like this\n--\n182-        write!(\n183-            f,\n184-            \"{}\",\n185-            match *self {\n186-                CheckInAllocMsg::MemoryAccessTest => \"memory access\",\n187:                CheckInAllocMsg::PointerArithmeticTest => \"pointer arithmetic\",\n188-                CheckInAllocMsg::InboundsTest => \"inbounds test\",\n189-            }\n190-        )\n191-    }\n192-}\n```\nNot sure if that is also desirable to be removed, however.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c7bf41b97e1b2a4ad475dd8fb197ce7f0c5c805", "html_url": "https://github.com/rust-lang/rust/commit/2c7bf41b97e1b2a4ad475dd8fb197ce7f0c5c805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c7bf41b97e1b2a4ad475dd8fb197ce7f0c5c805/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2cb9c6c2b453a1affbe56a7caaa7a00f8169d8a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cb9c6c2b453a1affbe56a7caaa7a00f8169d8a9", "html_url": "https://github.com/rust-lang/rust/commit/2cb9c6c2b453a1affbe56a7caaa7a00f8169d8a9"}, {"sha": "ee7a6c6acc01560895796f2d5206f38955e3768c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee7a6c6acc01560895796f2d5206f38955e3768c", "html_url": "https://github.com/rust-lang/rust/commit/ee7a6c6acc01560895796f2d5206f38955e3768c"}], "stats": {"total": 5, "additions": 0, "deletions": 5}, "files": [{"sha": "e452463fbf5de8beb1acf99bd5860e7b06da050f", "filename": "compiler/rustc_middle/src/mir/interpret/error.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2c7bf41b97e1b2a4ad475dd8fb197ce7f0c5c805/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c7bf41b97e1b2a4ad475dd8fb197ce7f0c5c805/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Ferror.rs?ref=2c7bf41b97e1b2a4ad475dd8fb197ce7f0c5c805", "patch": "@@ -171,7 +171,6 @@ impl fmt::Display for InvalidProgramInfo<'_> {\n #[derive(Debug, Copy, Clone, TyEncodable, TyDecodable, HashStable)]\n pub enum CheckInAllocMsg {\n     MemoryAccessTest,\n-    NullPointerTest,\n     PointerArithmeticTest,\n     InboundsTest,\n }\n@@ -185,7 +184,6 @@ impl fmt::Display for CheckInAllocMsg {\n             \"{}\",\n             match *self {\n                 CheckInAllocMsg::MemoryAccessTest => \"memory access\",\n-                CheckInAllocMsg::NullPointerTest => \"null pointer test\",\n                 CheckInAllocMsg::PointerArithmeticTest => \"pointer arithmetic\",\n                 CheckInAllocMsg::InboundsTest => \"inbounds test\",\n             }\n@@ -308,9 +306,6 @@ impl fmt::Display for UndefinedBehaviorInfo<'_> {\n                 ptr.alloc_id,\n                 allocation_size.bytes()\n             ),\n-            DanglingIntPointer(_, CheckInAllocMsg::NullPointerTest) => {\n-                write!(f, \"null pointer is not allowed for this operation\")\n-            }\n             DanglingIntPointer(i, msg) => {\n                 write!(f, \"{} failed: 0x{:x} is not a valid pointer\", msg, i)\n             }"}]}