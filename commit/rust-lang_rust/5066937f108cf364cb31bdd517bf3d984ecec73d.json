{"sha": "5066937f108cf364cb31bdd517bf3d984ecec73d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNjY5MzdmMTA4Y2YzNjRjYjMxYmRkNTE3YmYzZDk4NGVjZWM3M2Q=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-27T20:25:07Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-01-27T20:27:56Z"}, "message": "First step for supporting \"case (foo.bar(?zed))\": Change the ast of\npat_tag to hold a path.", "tree": {"sha": "d04e5f00286ef90700ee39a71932c8e255664cbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d04e5f00286ef90700ee39a71932c8e255664cbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5066937f108cf364cb31bdd517bf3d984ecec73d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5066937f108cf364cb31bdd517bf3d984ecec73d", "html_url": "https://github.com/rust-lang/rust/commit/5066937f108cf364cb31bdd517bf3d984ecec73d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5066937f108cf364cb31bdd517bf3d984ecec73d/comments", "author": null, "committer": null, "parents": [{"sha": "333924325463da96b54ac8b4b339a77c4f895eb7", "url": "https://api.github.com/repos/rust-lang/rust/commits/333924325463da96b54ac8b4b339a77c4f895eb7", "html_url": "https://github.com/rust-lang/rust/commit/333924325463da96b54ac8b4b339a77c4f895eb7"}], "stats": {"total": 44, "additions": 25, "deletions": 19}, "files": [{"sha": "2ae4c90734f822eb2588650864df23dc1d3d0786", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5066937f108cf364cb31bdd517bf3d984ecec73d/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5066937f108cf364cb31bdd517bf3d984ecec73d/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=5066937f108cf364cb31bdd517bf3d984ecec73d", "patch": "@@ -55,7 +55,7 @@ type pat = spanned[pat_];\n tag pat_ {\n     pat_wild(ann);\n     pat_bind(ident, def_id, ann);\n-    pat_tag(ident, vec[@pat], option.t[variant_def], ann);\n+    pat_tag(path, vec[@pat], option.t[variant_def], ann);\n }\n \n tag mutability {"}, {"sha": "5444e5fde962de61347b066af8964163a24e6e06", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5066937f108cf364cb31bdd517bf3d984ecec73d/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5066937f108cf364cb31bdd517bf3d984ecec73d/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=5066937f108cf364cb31bdd517bf3d984ecec73d", "patch": "@@ -1071,7 +1071,7 @@ impure fn parse_pat(parser p) -> @ast.pat {\n             }\n         }\n         case (token.IDENT(?id)) {\n-            p.bump();\n+            auto tag_path = parse_path(p, GREEDY);\n \n             let vec[@ast.pat] args;\n             alt (p.peek()) {\n@@ -1083,7 +1083,8 @@ impure fn parse_pat(parser p) -> @ast.pat {\n                 case (_) { args = vec(); }\n             }\n \n-            pat = ast.pat_tag(id, args, none[ast.variant_def], ast.ann_none);\n+            pat = ast.pat_tag(tag_path, args, none[ast.variant_def],\n+                              ast.ann_none);\n         }\n         case (?tok) {\n             p.err(\"expected pattern but found \" + token.to_str(tok));"}, {"sha": "8a6f82f2ddbc9efe0b746618dfcc0f513f766e7a", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5066937f108cf364cb31bdd517bf3d984ecec73d/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5066937f108cf364cb31bdd517bf3d984ecec73d/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=5066937f108cf364cb31bdd517bf3d984ecec73d", "patch": "@@ -160,7 +160,7 @@ type ast_fold[ENV] =\n          ident i, def_id did, ann a) -> @pat)     fold_pat_bind,\n \n      (fn(&ENV e, &span sp,\n-         ident i, vec[@pat] args,\n+         path p, vec[@pat] args,\n          option.t[ast.variant_def] d,\n          ann a) -> @pat)                          fold_pat_tag,\n \n@@ -400,12 +400,12 @@ fn fold_pat[ENV](&ENV env, ast_fold[ENV] fld, @ast.pat p) -> @ast.pat {\n         case (ast.pat_bind(?id, ?did, ?t)) {\n             ret fld.fold_pat_bind(env_, p.span, id, did, t);\n         }\n-        case (ast.pat_tag(?id, ?pats, ?d, ?t)) {\n+        case (ast.pat_tag(?path, ?pats, ?d, ?t)) {\n             let vec[@ast.pat] ppats = vec();\n             for (@ast.pat pat in pats) {\n                 ppats += vec(fold_pat(env_, fld, pat));\n             }\n-            ret fld.fold_pat_tag(env_, p.span, id, ppats, d, t);\n+            ret fld.fold_pat_tag(env_, p.span, path, ppats, d, t);\n         }\n     }\n }\n@@ -1040,9 +1040,9 @@ fn identity_fold_pat_bind[ENV](&ENV e, &span sp, ident i, def_id did, ann a)\n     ret @respan(sp, ast.pat_bind(i, did, a));\n }\n \n-fn identity_fold_pat_tag[ENV](&ENV e, &span sp, ident i, vec[@pat] args,\n+fn identity_fold_pat_tag[ENV](&ENV e, &span sp, path p, vec[@pat] args,\n                               option.t[ast.variant_def] d, ann a) -> @pat {\n-    ret @respan(sp, ast.pat_tag(i, args, d, a));\n+    ret @respan(sp, ast.pat_tag(p, args, d, a));\n }\n \n "}, {"sha": "76dcc9dca3874dcdcfbf777598399bab39acbb8c", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5066937f108cf364cb31bdd517bf3d984ecec73d/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5066937f108cf364cb31bdd517bf3d984ecec73d/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=5066937f108cf364cb31bdd517bf3d984ecec73d", "patch": "@@ -375,29 +375,31 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n     }\n }\n \n-fn fold_pat_tag(&env e, &span sp, ident i, vec[@ast.pat] args,\n+fn fold_pat_tag(&env e, &span sp, ast.path p, vec[@ast.pat] args,\n                 option.t[ast.variant_def] old_def,\n                 ann a) -> @ast.pat {\n+    auto len = _vec.len[ast.ident](p.node.idents);\n+    auto last_id = p.node.idents.(len - 1u);\n     auto new_def;\n-    alt (lookup_name(e, i)) {\n+    alt (lookup_name(e, last_id)) {\n         case (some[def](?d)) {\n             alt (d) {\n                 case (ast.def_variant(?did, ?vid)) {\n                     new_def = some[ast.variant_def](tup(did, vid));\n                 }\n                 case (_) {\n-                    e.sess.span_err(sp, \"not a tag variant: \" + i);\n+                    e.sess.span_err(sp, \"not a tag variant: \" + last_id);\n                     new_def = none[ast.variant_def];\n                 }\n             }\n         }\n         case (none[def]) {\n             new_def = none[ast.variant_def];\n-            e.sess.span_err(sp, \"unresolved name: \" + i);\n+            e.sess.span_err(sp, \"unresolved name: \" + last_id);\n         }\n     }\n \n-    ret @fold.respan[ast.pat_](sp, ast.pat_tag(i, args, new_def, a));\n+    ret @fold.respan[ast.pat_](sp, ast.pat_tag(p, args, new_def, a));\n }\n \n // We received a path expression of the following form:"}, {"sha": "c3ae8f5838473afcf91a5822cd3bd4cffb16d51b", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5066937f108cf364cb31bdd517bf3d984ecec73d/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5066937f108cf364cb31bdd517bf3d984ecec73d/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=5066937f108cf364cb31bdd517bf3d984ecec73d", "patch": "@@ -993,17 +993,19 @@ fn check_pat(&@fn_ctxt fcx, @ast.pat pat) -> @ast.pat {\n             auto ann = ast.ann_type(next_ty_var(fcx.ccx));\n             new_pat = ast.pat_bind(id, def_id, ann);\n         }\n-        case (ast.pat_tag(?id, ?subpats, ?vdef_opt, _)) {\n+        case (ast.pat_tag(?p, ?subpats, ?vdef_opt, _)) {\n             auto vdef = option.get[ast.variant_def](vdef_opt);\n-            auto t = fcx.ccx.item_types.get(vdef._1); \n+            auto t = fcx.ccx.item_types.get(vdef._1);\n+            auto len = _vec.len[ast.ident](p.node.idents);\n+            auto last_id = p.node.idents.(len - 1u);\n             alt (t.struct) {\n                 // N-ary variants have function types.\n                 case (ty.ty_fn(?args, ?tag_ty)) {\n                     auto arg_len = _vec.len[arg](args);\n                     auto subpats_len = _vec.len[@ast.pat](subpats);\n                     if (arg_len != subpats_len) {\n                         // TODO: pluralize properly\n-                        auto err_msg = \"tag type \" + id + \" has \" +\n+                        auto err_msg = \"tag type \" + last_id + \" has \" +\n                                        _uint.to_str(subpats_len, 10u) +\n                                        \" fields, but this pattern has \" +\n                                        _uint.to_str(arg_len, 10u) + \" fields\";\n@@ -1018,15 +1020,16 @@ fn check_pat(&@fn_ctxt fcx, @ast.pat pat) -> @ast.pat {\n                     }\n \n                     auto ann = ast.ann_type(tag_ty);\n-                    new_pat = ast.pat_tag(id, new_subpats, vdef_opt, ann);\n+                    new_pat = ast.pat_tag(p, new_subpats, vdef_opt, ann);\n                 }\n \n                 // Nullary variants have tag types.\n                 case (ty.ty_tag(?tid)) {\n                     auto subpats_len = _vec.len[@ast.pat](subpats);\n                     if (subpats_len > 0u) {\n                         // TODO: pluralize properly\n-                        auto err_msg = \"tag type \" + id + \" has no fields,\" +\n+                        auto err_msg = \"tag type \" + last_id +\n+                                       \" has no fields,\" +\n                                        \" but this pattern has \" +\n                                        _uint.to_str(subpats_len, 10u) +\n                                        \" fields\";\n@@ -1036,7 +1039,7 @@ fn check_pat(&@fn_ctxt fcx, @ast.pat pat) -> @ast.pat {\n                     }\n \n                     auto ann = ast.ann_type(plain_ty(ty.ty_tag(tid)));\n-                    new_pat = ast.pat_tag(id, subpats, vdef_opt, ann);\n+                    new_pat = ast.pat_tag(p, subpats, vdef_opt, ann);\n                 }\n             }\n         }"}]}