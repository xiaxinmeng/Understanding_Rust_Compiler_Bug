{"sha": "9a95b010e6b46d113228b67ef237b42868e7be8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhOTViMDEwZTZiNDZkMTEzMjI4YjY3ZWYyMzdiNDI4NjhlN2JlOGQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-08T22:28:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-11T18:44:23Z"}, "message": "generalize InvalidNullPointerUsage to InvalidIntPointerUsage", "tree": {"sha": "1b2da2c283d6d7a706a924c5f0a3666d4d1c9659", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b2da2c283d6d7a706a924c5f0a3666d4d1c9659"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a95b010e6b46d113228b67ef237b42868e7be8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a95b010e6b46d113228b67ef237b42868e7be8d", "html_url": "https://github.com/rust-lang/rust/commit/9a95b010e6b46d113228b67ef237b42868e7be8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a95b010e6b46d113228b67ef237b42868e7be8d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d02543a453f0381c92339301fc86bcc08c70abcd", "url": "https://api.github.com/repos/rust-lang/rust/commits/d02543a453f0381c92339301fc86bcc08c70abcd", "html_url": "https://github.com/rust-lang/rust/commit/d02543a453f0381c92339301fc86bcc08c70abcd"}], "stats": {"total": 58, "additions": 32, "deletions": 26}, "files": [{"sha": "9474f05b55df7e9bbf1d02c86f9ee7acf5aa1fc4", "filename": "src/librustc/mir/interpret/allocation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fallocation.rs?ref=9a95b010e6b46d113228b67ef237b42868e7be8d", "patch": "@@ -41,6 +41,7 @@ pub struct Allocation<Tag = (), Extra = ()> {\n     /// The size of the allocation. Currently, must always equal `bytes.len()`.\n     pub size: Size,\n     /// The alignment of the allocation to detect unaligned reads.\n+    /// (`Align` guarantees that this is a power of two.)\n     pub align: Align,\n     /// `true` if the allocation is mutable.\n     /// Also used by codegen to determine if a static should be put into mutable memory,"}, {"sha": "55112c23ef42870b0c69ee7ecdfafaf0b2fbd765", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=9a95b010e6b46d113228b67ef237b42868e7be8d", "patch": "@@ -342,8 +342,6 @@ pub enum UndefinedBehaviorInfo {\n     UnterminatedCString(Pointer),\n     /// Dereferencing a dangling pointer after it got freed.\n     PointerUseAfterFree(AllocId),\n-    /// Using a NULL pointer in the wrong way.\n-    InvalidNullPointerUsage,\n     /// Used a pointer outside the bounds it is valid for.\n     PointerOutOfBounds {\n         ptr: Pointer,\n@@ -355,6 +353,8 @@ pub enum UndefinedBehaviorInfo {\n         required: Align,\n         has: Align,\n     },\n+    /// Using an integer as a pointer in the wrong way.\n+    InvalidIntPointerUsage(u64),\n     /// Writing to read-only memory.\n     WriteToReadOnly(AllocId),\n     /// Using a pointer-not-to-a-function as function pointer.\n@@ -401,7 +401,6 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n             PointerUseAfterFree(a) => {\n                 write!(f, \"pointer to {:?} was dereferenced after this allocation got freed\", a)\n             }\n-            InvalidNullPointerUsage => write!(f, \"invalid use of NULL pointer\"),\n             PointerOutOfBounds { ptr, msg, allocation_size } => write!(\n                 f,\n                 \"{} failed: pointer must be in-bounds at offset {}, \\\n@@ -411,6 +410,8 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n                 ptr.alloc_id,\n                 allocation_size.bytes()\n             ),\n+            InvalidIntPointerUsage(0) => write!(f, \"invalid use of NULL pointer\"),\n+            InvalidIntPointerUsage(i) => write!(f, \"invalid use of {} as a pointer\", i),\n             AlignmentCheckFailed { required, has } => write!(\n                 f,\n                 \"accessing memory with alignment {}, but alignment {} is required\",\n@@ -450,24 +451,18 @@ impl fmt::Debug for UndefinedBehaviorInfo {\n pub enum UnsupportedOpInfo {\n     /// Free-form case. Only for errors that are never caught!\n     Unsupported(String),\n-\n     /// When const-prop encounters a situation it does not support, it raises this error.\n     /// This must not allocate for performance reasons (hence `str`, not `String`).\n     ConstPropUnsupported(&'static str),\n-\n     /// Accessing an unsupported foreign static.\n     ReadForeignStatic(DefId),\n-\n     /// Could not find MIR for a function.\n     NoMirFor(DefId),\n-\n     /// Modified a static during const-eval.\n     /// FIXME: move this to `ConstEvalErrKind` through a machine hook.\n     ModifiedStatic,\n-\n     /// Encountered a pointer where we needed raw bytes.\n     ReadPointerAsBytes,\n-\n     /// Encountered raw bytes where we needed a pointer.\n     ReadBytesAsPointer,\n }"}, {"sha": "b1210a47fd93d07686de1c303b7abebfef9e948b", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=9a95b010e6b46d113228b67ef237b42868e7be8d", "patch": "@@ -281,8 +281,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n         int: u64,\n     ) -> InterpResult<'tcx, Pointer<Self::PointerTag>> {\n         Err((if int == 0 {\n-            err_ub!(InvalidNullPointerUsage)\n+            // This is UB, seriously.\n+            err_ub!(InvalidIntPointerUsage(0))\n         } else {\n+            // This is just something we cannot support during const-eval.\n             err_unsup!(ReadBytesAsPointer)\n         })\n         .into())"}, {"sha": "7099c42ce7ac5cd26c00132f2e63a5f0a89a0eed", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=9a95b010e6b46d113228b67ef237b42868e7be8d", "patch": "@@ -369,7 +369,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 assert!(size.bytes() == 0);\n                 // Must be non-NULL.\n                 if bits == 0 {\n-                    throw_ub!(InvalidNullPointerUsage)\n+                    throw_ub!(InvalidIntPointerUsage(0))\n                 }\n                 // Must be aligned.\n                 if let Some(align) = align {"}, {"sha": "6fc7355fab38e40521d133c16665faf26f773b0e", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=9a95b010e6b46d113228b67ef237b42868e7be8d", "patch": "@@ -171,7 +171,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             return Ok(());\n         }\n         let caller_arg = caller_arg.next().ok_or_else(|| {\n-            err_ub_format!(\"calling a function passing fewer arguments than it requires\")\n+            err_ub_format!(\"calling a function with fewer arguments than it requires\")\n         })?;\n         if rust_abi {\n             assert!(!caller_arg.layout.is_zst(), \"ZSTs must have been already filtered out\");\n@@ -341,7 +341,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     // Now we should have no more caller args\n                     if caller_iter.next().is_some() {\n                         throw_ub_format!(\n-                            \"calling a function passing more arguments than it expected\"\n+                            \"calling a function with more arguments than it expected\"\n                         )\n                     }\n                     // Don't forget to check the return type!"}, {"sha": "620e4391ad6e4ed0223de48bdbc9ffb58c885c7e", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=9a95b010e6b46d113228b67ef237b42868e7be8d", "patch": "@@ -353,13 +353,16 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                     place.ptr, size, align\n                 );\n                 match err.kind {\n-                    err_ub!(InvalidNullPointerUsage) => {\n+                    err_ub!(InvalidIntPointerUsage(0)) => {\n                         throw_validation_failure!(format_args!(\"a NULL {}\", kind), self.path)\n                     }\n+                    err_ub!(InvalidIntPointerUsage(i)) => throw_validation_failure!(\n+                        format_args!(\"a {} to unallocated address {}\", kind, i),\n+                        self.path\n+                    ),\n                     err_ub!(AlignmentCheckFailed { required, has }) => throw_validation_failure!(\n                         format_args!(\n-                            \"an unaligned {} \\\n-                                    (required {} byte alignment but found {})\",\n+                            \"an unaligned {} (required {} byte alignment but found {})\",\n                             kind,\n                             required.bytes(),\n                             has.bytes()\n@@ -370,12 +373,17 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n                         format_args!(\"a dangling {} (created from integer)\", kind),\n                         self.path\n                     ),\n-                    err_ub!(PointerOutOfBounds { .. }) | err_ub!(PointerUseAfterFree(_)) => {\n-                        throw_validation_failure!(\n-                            format_args!(\"a dangling {} (not entirely in bounds)\", kind),\n-                            self.path\n-                        )\n-                    }\n+                    err_ub!(PointerOutOfBounds { .. }) => throw_validation_failure!(\n+                        format_args!(\n+                            \"a dangling {} (going beyond the bounds of its allocation)\",\n+                            kind\n+                        ),\n+                        self.path\n+                    ),\n+                    err_ub!(PointerUseAfterFree(_)) => throw_validation_failure!(\n+                        format_args!(\"a dangling {} (use-after-free)\", kind),\n+                        self.path\n+                    ),\n                     _ => bug!(\"Unexpected error during ptr inbounds test: {}\", err),\n                 }\n             }"}, {"sha": "80e60dbb58a5d6adf5f74cc191158f2a3b218c36", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=9a95b010e6b46d113228b67ef237b42868e7be8d", "patch": "@@ -2,7 +2,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:32:1\n    |\n LL | const STR_TOO_LONG: &str = unsafe { mem::transmute((&42u8, 999usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (not entirely in bounds)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -70,7 +70,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:62:1\n    |\n LL | const SLICE_TOO_LONG: &[u8] = unsafe { mem::transmute((&42u8, 999usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (not entirely in bounds)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n@@ -86,7 +86,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:68:1\n    |\n LL | const SLICE_TOO_LONG_BOX: Box<[u8]> = unsafe { mem::transmute((&42u8, 999usize)) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (not entirely in bounds)\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling box (going beyond the bounds of its allocation)\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}, {"sha": "90c8e95e8ebd61476ff474a9be8f4944864ca28c", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a95b010e6b46d113228b67ef237b42868e7be8d/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=9a95b010e6b46d113228b67ef237b42868e7be8d", "patch": "@@ -4,7 +4,7 @@ error: any use of this value will cause an error\n LL | const VALUE: u8 = unsafe { *REG_ADDR };\n    | ---------------------------^^^^^^^^^---\n    |                            |\n-   |                            a memory access tried to interpret some bytes as a pointer\n+   |                            unable to turn these bytes into a pointer\n    |\n    = note: `#[deny(const_err)]` on by default\n "}]}