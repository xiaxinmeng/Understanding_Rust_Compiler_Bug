{"sha": "8f9ca24f55cc74159d00c4691c464ced5d51a669", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmOWNhMjRmNTVjYzc0MTU5ZDAwYzQ2OTFjNDY0Y2VkNWQ1MWE2Njk=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-06-17T22:40:24Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-08-05T14:16:27Z"}, "message": "A few cosmetic improvements.", "tree": {"sha": "f2f1d09fe9e40f75e064b61ef9fad520851e3d9d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2f1d09fe9e40f75e064b61ef9fad520851e3d9d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f9ca24f55cc74159d00c4691c464ced5d51a669", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f9ca24f55cc74159d00c4691c464ced5d51a669", "html_url": "https://github.com/rust-lang/rust/commit/8f9ca24f55cc74159d00c4691c464ced5d51a669", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f9ca24f55cc74159d00c4691c464ced5d51a669/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4be067558962c004b638e4c6f162d50f7c0c98b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4be067558962c004b638e4c6f162d50f7c0c98b6", "html_url": "https://github.com/rust-lang/rust/commit/4be067558962c004b638e4c6f162d50f7c0c98b6"}], "stats": {"total": 75, "additions": 38, "deletions": 37}, "files": [{"sha": "3d049fe4ccdad71dc1efc8b9aca9d58c7ccc4c89", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=8f9ca24f55cc74159d00c4691c464ced5d51a669", "patch": "@@ -2234,7 +2234,7 @@ pub enum UseKind {\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n pub struct TraitRef {\n     pub path: P<Path>,\n-    // Don't hash the ref_id. It is tracked via the thing it is used to access\n+    // Don't hash the `ref_id`. It is tracked via the thing it is used to access.\n     #[stable_hasher(ignore)]\n     pub hir_ref_id: HirId,\n }"}, {"sha": "c6aadc598b7e1d1be8ad345fb82d0cac9a31457d", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=8f9ca24f55cc74159d00c4691c464ced5d51a669", "patch": "@@ -904,7 +904,7 @@ pub struct Generics {\n     pub parent_count: usize,\n     pub params: Vec<GenericParamDef>,\n \n-    /// Reverse map to the `index` field of each `GenericParamDef`\n+    /// Reverse map to the `index` field of each `GenericParamDef`.\n     #[stable_hasher(ignore)]\n     pub param_def_id_to_index: FxHashMap<DefId, u32>,\n \n@@ -1252,7 +1252,7 @@ impl<'tcx> TraitPredicate<'tcx> {\n \n impl<'tcx> PolyTraitPredicate<'tcx> {\n     pub fn def_id(&self) -> DefId {\n-        // Ok to skip binder since trait def-ID does not care about regions.\n+        // Ok to skip binder since trait `DefId` does not care about regions.\n         self.skip_binder().def_id()\n     }\n }\n@@ -1319,7 +1319,7 @@ impl<'tcx> PolyProjectionPredicate<'tcx> {\n     /// Note that this is not the `DefId` of the `TraitRef` containing this\n     /// associated type, which is in `tcx.associated_item(projection_def_id()).container`.\n     pub fn projection_def_id(&self) -> DefId {\n-        // Ok to skip binder since trait def-ID does not care about regions.\n+        // Ok to skip binder since trait `DefId` does not care about regions.\n         self.skip_binder().projection_ty.item_def_id\n     }\n }\n@@ -1646,10 +1646,10 @@ pub type PlaceholderConst = Placeholder<BoundVar>;\n /// particular point.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, HashStable)]\n pub struct ParamEnv<'tcx> {\n-    /// Obligations that the caller must satisfy. This is basically\n+    /// `Obligation`s that the caller must satisfy. This is basically\n     /// the set of bounds on the in-scope type parameters, translated\n-    /// into Obligations, and elaborated and normalized.\n-    pub caller_bounds: &'tcx List<ty::Predicate<'tcx>>,\n+    /// into `Obligation`s, and elaborated and normalized.\n+    pub caller_bounds: &'tcx List<(ty::Predicate<'tcx>, Span)>,\n \n     /// Typically, this is `Reveal::UserFacing`, but during codegen we\n     /// want `Reveal::All` -- note that this is always paired with an\n@@ -2796,7 +2796,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 _ => false,\n             }\n         } else {\n-            match self.def_kind(def_id).expect(\"no def for def-id\") {\n+            match self.def_kind(def_id).expect(\"no def for `DefId`\") {\n                 DefKind::AssocConst\n                 | DefKind::Method\n                 | DefKind::AssocTy => true,"}, {"sha": "820e9990b92c7414152724ca2ae3103df0339583", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=8f9ca24f55cc74159d00c4691c464ced5d51a669", "patch": "@@ -646,7 +646,7 @@ impl<'tcx> List<ExistentialPredicate<'tcx>> {\n     ///\n     /// A Rust trait object type consists (in addition to a lifetime bound)\n     /// of a set of trait bounds, which are separated into any number\n-    /// of auto-trait bounds, and at most 1 non-auto-trait bound. The\n+    /// of auto-trait bounds, and at most one non-auto-trait bound. The\n     /// non-auto-trait bound is called the \"principal\" of the trait\n     /// object.\n     ///\n@@ -680,7 +680,8 @@ impl<'tcx> List<ExistentialPredicate<'tcx>> {\n \n     #[inline]\n     pub fn projection_bounds<'a>(&'a self) ->\n-        impl Iterator<Item=ExistentialProjection<'tcx>> + 'a {\n+        impl Iterator<Item = ExistentialProjection<'tcx>> + 'a\n+    {\n         self.iter().filter_map(|predicate| {\n             match *predicate {\n                 ExistentialPredicate::Projection(p) => Some(p),\n@@ -690,7 +691,7 @@ impl<'tcx> List<ExistentialPredicate<'tcx>> {\n     }\n \n     #[inline]\n-    pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item=DefId> + 'a {\n+    pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {\n         self.iter().filter_map(|predicate| {\n             match *predicate {\n                 ExistentialPredicate::AutoTrait(d) => Some(d),\n@@ -711,17 +712,17 @@ impl<'tcx> Binder<&'tcx List<ExistentialPredicate<'tcx>>> {\n \n     #[inline]\n     pub fn projection_bounds<'a>(&'a self) ->\n-        impl Iterator<Item=PolyExistentialProjection<'tcx>> + 'a {\n+        impl Iterator<Item = PolyExistentialProjection<'tcx>> + 'a {\n         self.skip_binder().projection_bounds().map(Binder::bind)\n     }\n \n     #[inline]\n-    pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item=DefId> + 'a {\n+    pub fn auto_traits<'a>(&'a self) -> impl Iterator<Item = DefId> + 'a {\n         self.skip_binder().auto_traits()\n     }\n \n     pub fn iter<'a>(&'a self)\n-        -> impl DoubleEndedIterator<Item=Binder<ExistentialPredicate<'tcx>>> + 'tcx {\n+        -> impl DoubleEndedIterator<Item = Binder<ExistentialPredicate<'tcx>>> + 'tcx {\n         self.skip_binder().iter().cloned().map(Binder::bind)\n     }\n }"}, {"sha": "f52ad33b3d037d972dcccfb0f223e004ee9106b9", "filename": "src/librustc_codegen_llvm/debuginfo/metadata.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmetadata.rs?ref=8f9ca24f55cc74159d00c4691c464ced5d51a669", "patch": "@@ -450,11 +450,11 @@ fn subroutine_type_metadata(\n         false);\n }\n \n-// FIXME(1563) This is all a bit of a hack because 'trait pointer' is an ill-\n-// defined concept. For the case of an actual trait pointer (i.e., Box<Trait>,\n-// &Trait), trait_object_type should be the whole thing (e.g, Box<Trait>) and\n-// trait_type should be the actual trait (e.g., Trait). Where the trait is part\n-// of a DST struct, there is no trait_object_type and the results of this\n+// FIXME(1563): This is all a bit of a hack because 'trait pointer' is an ill-\n+// defined concept. For the case of an actual trait pointer (i.e., `Box<Trait>`,\n+// `&Trait`), `trait_object_type` should be the whole thing (e.g, `Box<Trait>`) and\n+// `trait_type` should be the actual trait (e.g., `Trait`). Where the trait is part\n+// of a DST struct, there is no `trait_object_type` and the results of this\n // function will be a little bit weird.\n fn trait_pointer_metadata(\n     cx: &CodegenCx<'ll, 'tcx>,\n@@ -464,13 +464,13 @@ fn trait_pointer_metadata(\n ) -> &'ll DIType {\n     // The implementation provided here is a stub. It makes sure that the trait\n     // type is assigned the correct name, size, namespace, and source location.\n-    // But it does not describe the trait's methods.\n+    // However, it does not describe the trait's methods.\n \n     let containing_scope = match trait_type.sty {\n         ty::Dynamic(ref data, ..) =>\n             data.principal_def_id().map(|did| get_namespace_for_item(cx, did)),\n         _ => {\n-            bug!(\"debuginfo: Unexpected trait-object type in \\\n+            bug!(\"debuginfo: unexpected trait-object type in \\\n                   trait_pointer_metadata(): {:?}\",\n                  trait_type);\n         }"}, {"sha": "05fbe07cac2a411c17cfbbd4500f7fab6d00ac5f", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=8f9ca24f55cc74159d00c4691c464ced5d51a669", "patch": "@@ -1056,8 +1056,9 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             }\n             for (poly_predicate, _) in bounds.projection_bounds {\n                 let tcx = self.tcx;\n-                if self.visit(poly_predicate.skip_binder().ty) ||\n-                   self.visit_trait(poly_predicate.skip_binder().projection_ty.trait_ref(tcx)) {\n+                if self.visit(poly_predicate.skip_binder().ty)\n+                    || self.visit_trait(poly_predicate.skip_binder().projection_ty.trait_ref(tcx))\n+                {\n                     return;\n                 }\n             }"}, {"sha": "9857dee05835ab7140cb3e16d4af9661edde82ad", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8f9ca24f55cc74159d00c4691c464ced5d51a669", "patch": "@@ -1515,7 +1515,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                    assoc_name: ast::Ident,\n                                    span: Span)\n         -> Result<ty::PolyTraitRef<'tcx>, ErrorReported>\n-        where I: Iterator<Item=ty::PolyTraitRef<'tcx>>\n+        where I: Iterator<Item = ty::PolyTraitRef<'tcx>>\n     {\n         let bound = match bounds.next() {\n             Some(bound) => bound,\n@@ -1524,8 +1524,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                  \"associated type `{}` not found for `{}`\",\n                                  assoc_name,\n                                  ty_param_name)\n-                  .span_label(span, format!(\"associated type `{}` not found\", assoc_name))\n-                  .emit();\n+                    .span_label(span, format!(\"associated type `{}` not found\", assoc_name))\n+                    .emit();\n                 return Err(ErrorReported);\n             }\n         };\n@@ -1544,7 +1544,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                     item.kind == ty::AssocKind::Type &&\n                         self.tcx().hygienic_eq(assoc_name, item.ident, bound.def_id())\n                 })\n-                .and_then(|item| self.tcx().hir().span_if_local(item.def_id));\n+                    .and_then(|item| self.tcx().hir().span_if_local(item.def_id));\n \n                 if let Some(span) = bound_span {\n                     err.span_label(span, format!(\"ambiguous `{}` from `{}`\","}, {"sha": "08033b46b800420f9b9fb35d46296207353f1261", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=8f9ca24f55cc74159d00c4691c464ced5d51a669", "patch": "@@ -2030,7 +2030,7 @@ fn report_unexpected_variant_res(tcx: TyCtxt<'_>, res: Res, span: Span, qpath: &\n impl<'a, 'tcx> AstConv<'tcx> for FnCtxt<'a, 'tcx> {\n     fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n         self.tcx\n-        }\n+    }\n \n     fn get_type_parameter_bounds(&self, _: Span, def_id: DefId)\n                                  -> &'tcx ty::GenericPredicates<'tcx>"}, {"sha": "44f9b82f8cd6e5eb0a201420ff41a1743135c788", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f9ca24f55cc74159d00c4691c464ced5d51a669/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=8f9ca24f55cc74159d00c4691c464ced5d51a669", "patch": "@@ -226,7 +226,7 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n         if let Some(trait_ref) = poly_trait_ref.no_bound_vars() {\n             self.tcx().mk_projection(item_def_id, trait_ref.substs)\n         } else {\n-            // no late-bound regions, we can just ignore the binder\n+            // There are no late-bound regions; we can just ignore the binder.\n             span_err!(\n                 self.tcx().sess,\n                 span,\n@@ -239,17 +239,16 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n     }\n \n     fn normalize_ty(&self, _span: Span, ty: Ty<'tcx>) -> Ty<'tcx> {\n-        // types in item signatures are not normalized, to avoid undue\n-        // dependencies.\n+        // Types in item signatures are not normalized to avoid undue dependencies.\n         ty\n     }\n \n     fn set_tainted_by_errors(&self) {\n-        // no obvious place to track this, so just let it go\n+        // There's no obvious place to track this, so just let it go.\n     }\n \n     fn record_ty(&self, _hir_id: hir::HirId, _ty: Ty<'tcx>, _span: Span) {\n-        // no place to record types from signatures?\n+        // There's no place to record types from signatures?\n     }\n }\n \n@@ -260,8 +259,8 @@ fn type_param_predicates(\n     use rustc::hir::*;\n \n     // In the AST, bounds can derive from two places. Either\n-    // written inline like `<T : Foo>` or in a where clause like\n-    // `where T : Foo`.\n+    // written inline like `<T: Foo>` or in a where-clause like\n+    // `where T: Foo`.\n \n     let param_id = tcx.hir().as_local_hir_id(def_id).unwrap();\n     let param_owner = tcx.hir().ty_param_owner(param_id);\n@@ -334,7 +333,7 @@ fn type_param_predicates(\n impl ItemCtxt<'tcx> {\n     /// Finds bounds from `hir::Generics`. This requires scanning through the\n     /// AST. We do this to avoid having to convert *all* the bounds, which\n-    /// would create artificial cycles. Instead we can only convert the\n+    /// would create artificial cycles. Instead, we can only convert the\n     /// bounds for a type parameter `X` if `X::Foo` is used.\n     fn type_parameter_bounds_in_generics(\n         &self,\n@@ -2292,7 +2291,7 @@ fn explicit_predicates_of(\n /// Converts a specific `GenericBound` from the AST into a set of\n /// predicates that apply to the self type. A vector is returned\n /// because this can be anywhere from zero predicates (`T: ?Sized` adds no\n-/// predicates) to one (`T: Foo`) to many (`T: Bar<X=i32>` adds `T: Bar`\n+/// predicates) to one (`T: Foo`) to many (`T: Bar<X = i32>` adds `T: Bar`\n /// and `<T as Bar>::X == i32`).\n fn predicates_from_bound<'tcx>(\n     astconv: &dyn AstConv<'tcx>,"}]}