{"sha": "acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZmNiZWU0YTJiMTBlNWEzYWMyZmUzZTI5ZTc5YTI4Mjg3MjBiNzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-21T09:43:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-02-21T09:43:55Z"}, "message": "Auto merge of #5202 - krishna-veerareddy:issue-5201-move-lossy-float-literal-restriction, r=flip1995\n\nMove check for lossy whole-number floats out of `excessive_precision`\n\nchangelog: Add new lint `lossy_float_literal` to detect lossy whole number float literals and move it out of `excessive_precision` again.\n\nFixes #5201", "tree": {"sha": "eb5462798e5ebd21a43490af9197d63d104f8732", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb5462798e5ebd21a43490af9197d63d104f8732"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "html_url": "https://github.com/rust-lang/rust/commit/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fbb23f2549e75b89967f09b9293607bd3bb96a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fbb23f2549e75b89967f09b9293607bd3bb96a6", "html_url": "https://github.com/rust-lang/rust/commit/8fbb23f2549e75b89967f09b9293607bd3bb96a6"}, {"sha": "219c94d02848c87db16c99ac2c6b30728713f58e", "url": "https://api.github.com/repos/rust-lang/rust/commits/219c94d02848c87db16c99ac2c6b30728713f58e", "html_url": "https://github.com/rust-lang/rust/commit/219c94d02848c87db16c99ac2c6b30728713f58e"}], "stats": {"total": 359, "additions": 214, "deletions": 145}, "files": [{"sha": "05ebe97d7b017ce78e8c4b5c43f6592a80f371cb", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "patch": "@@ -1207,6 +1207,7 @@ Released 2018-09-13\n [`let_unit_value`]: https://rust-lang.github.io/rust-clippy/master/index.html#let_unit_value\n [`linkedlist`]: https://rust-lang.github.io/rust-clippy/master/index.html#linkedlist\n [`logic_bug`]: https://rust-lang.github.io/rust-clippy/master/index.html#logic_bug\n+[`lossy_float_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#lossy_float_literal\n [`main_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#main_recursion\n [`manual_memcpy`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_memcpy\n [`manual_mul_add`]: https://rust-lang.github.io/rust-clippy/master/index.html#manual_mul_add"}, {"sha": "f2ffea7d23cf63f9c3bc53bc8e427ddd9164c6f1", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "patch": "@@ -5,7 +5,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 355 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 356 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "8707259a2c881b2118996f8b745028ad0b52e4cc", "filename": "clippy_lints/src/float_literal.rs", "status": "renamed", "additions": 54, "deletions": 25, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "patch": "@@ -13,30 +13,53 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for float literals with a precision greater\n     /// than that supported by the underlying type.\n     ///\n-    /// **Why is this bad?** Rust will silently lose precision during conversion\n-    /// to a float.\n+    /// **Why is this bad?** Rust will truncate the literal silently.\n     ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n     ///\n     /// ```rust\n     /// // Bad\n-    /// let a: f32 = 0.123_456_789_9; // 0.123_456_789\n-    /// let b: f32 = 16_777_217.0; // 16_777_216.0\n+    /// let v: f32 = 0.123_456_789_9;\n+    /// println!(\"{}\", v); //  0.123_456_789\n     ///\n     /// // Good\n-    /// let a: f64 = 0.123_456_789_9;\n-    /// let b: f64 = 16_777_216.0;\n+    /// let v: f64 = 0.123_456_789_9;\n+    /// println!(\"{}\", v); //  0.123_456_789_9\n     /// ```\n     pub EXCESSIVE_PRECISION,\n-    correctness,\n+    style,\n     \"excessive precision for float literal\"\n }\n \n-declare_lint_pass!(ExcessivePrecision => [EXCESSIVE_PRECISION]);\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for whole number float literals that\n+    /// cannot be represented as the underlying type without loss.\n+    ///\n+    /// **Why is this bad?** Rust will silently lose precision during\n+    /// conversion to a float.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// // Bad\n+    /// let _: f32 = 16_777_217.0; // 16_777_216.0\n+    ///\n+    /// // Good\n+    /// let _: f32 = 16_777_216.0;\n+    /// let _: f64 = 16_777_217.0;\n+    /// ```\n+    pub LOSSY_FLOAT_LITERAL,\n+    restriction,\n+    \"lossy whole number float literals\"\n+}\n+\n+declare_lint_pass!(FloatLiteral => [EXCESSIVE_PRECISION, LOSSY_FLOAT_LITERAL]);\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FloatLiteral {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<'_>) {\n         if_chain! {\n             let ty = cx.tables.expr_ty(expr);\n@@ -52,26 +75,41 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n                 // since we'll need the truncated string anyway.\n                 let digits = count_digits(&sym_str);\n                 let max = max_digits(fty);\n-                let float_str = match fty {\n-                    FloatTy::F32 => sym_str.parse::<f32>().map(|f| formatter.format(f)),\n-                    FloatTy::F64 => sym_str.parse::<f64>().map(|f| formatter.format(f)),\n-                }.unwrap();\n                 let type_suffix = match lit_float_ty {\n                     LitFloatType::Suffixed(FloatTy::F32) => Some(\"f32\"),\n                     LitFloatType::Suffixed(FloatTy::F64) => Some(\"f64\"),\n                     _ => None\n                 };\n+                let (is_whole, mut float_str) = match fty {\n+                    FloatTy::F32 => {\n+                        let value = sym_str.parse::<f32>().unwrap();\n+\n+                        (value.fract() == 0.0, formatter.format(value))\n+                    },\n+                    FloatTy::F64 => {\n+                        let value = sym_str.parse::<f64>().unwrap();\n+\n+                        (value.fract() == 0.0, formatter.format(value))\n+                    },\n+                };\n \n-                if is_whole_number(&sym_str, fty) {\n+                if is_whole && !sym_str.contains(|c| c == 'e' || c == 'E') {\n                     // Normalize the literal by stripping the fractional portion\n                     if sym_str.split('.').next().unwrap() != float_str {\n+                        // If the type suffix is missing the suggestion would be\n+                        // incorrectly interpreted as an integer so adding a `.0`\n+                        // suffix to prevent that.\n+                        if type_suffix.is_none() {\n+                            float_str.push_str(\".0\");\n+                        }\n+\n                         span_lint_and_sugg(\n                             cx,\n-                            EXCESSIVE_PRECISION,\n+                            LOSSY_FLOAT_LITERAL,\n                             expr.span,\n                             \"literal cannot be represented as the underlying type without loss of precision\",\n                             \"consider changing the type or replacing it with\",\n-                            format_numeric_literal(format!(\"{}.0\", float_str).as_str(), type_suffix, true),\n+                            format_numeric_literal(&float_str, type_suffix, true),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n@@ -91,15 +129,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExcessivePrecision {\n     }\n }\n \n-// Checks whether a float literal is a whole number\n-#[must_use]\n-fn is_whole_number(sym_str: &str, fty: FloatTy) -> bool {\n-    match fty {\n-        FloatTy::F32 => sym_str.parse::<f32>().unwrap().fract() == 0.0,\n-        FloatTy::F64 => sym_str.parse::<f64>().unwrap().fract() == 0.0,\n-    }\n-}\n-\n #[must_use]\n fn max_digits(fty: FloatTy) -> u32 {\n     match fty {", "previous_filename": "clippy_lints/src/excessive_precision.rs"}, {"sha": "325f07eb6cf6014f10da1f15c3dcbd38b2a3b9e8", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "patch": "@@ -205,10 +205,10 @@ pub mod escape;\n pub mod eta_reduction;\n pub mod eval_order_dependence;\n pub mod excessive_bools;\n-pub mod excessive_precision;\n pub mod exit;\n pub mod explicit_write;\n pub mod fallible_impl_from;\n+pub mod float_literal;\n pub mod format;\n pub mod formatting;\n pub mod functions;\n@@ -534,10 +534,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n         &excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS,\n         &excessive_bools::STRUCT_EXCESSIVE_BOOLS,\n-        &excessive_precision::EXCESSIVE_PRECISION,\n         &exit::EXIT,\n         &explicit_write::EXPLICIT_WRITE,\n         &fallible_impl_from::FALLIBLE_IMPL_FROM,\n+        &float_literal::EXCESSIVE_PRECISION,\n+        &float_literal::LOSSY_FLOAT_LITERAL,\n         &format::USELESS_FORMAT,\n         &formatting::POSSIBLE_MISSING_COMMA,\n         &formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING,\n@@ -836,7 +837,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box eq_op::EqOp);\n     store.register_late_pass(|| box enum_glob_use::EnumGlobUse);\n     store.register_late_pass(|| box enum_clike::UnportableVariant);\n-    store.register_late_pass(|| box excessive_precision::ExcessivePrecision);\n+    store.register_late_pass(|| box float_literal::FloatLiteral);\n     let verbose_bit_mask_threshold = conf.verbose_bit_mask_threshold;\n     store.register_late_pass(move || box bit_mask::BitMask::new(verbose_bit_mask_threshold));\n     store.register_late_pass(|| box ptr::Ptr);\n@@ -1016,6 +1017,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&dbg_macro::DBG_MACRO),\n         LintId::of(&else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n         LintId::of(&exit::EXIT),\n+        LintId::of(&float_literal::LOSSY_FLOAT_LITERAL),\n         LintId::of(&implicit_return::IMPLICIT_RETURN),\n         LintId::of(&indexing_slicing::INDEXING_SLICING),\n         LintId::of(&inherent_impl::MULTIPLE_INHERENT_IMPL),\n@@ -1160,8 +1162,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&eta_reduction::REDUNDANT_CLOSURE),\n         LintId::of(&eval_order_dependence::DIVERGING_SUB_EXPRESSION),\n         LintId::of(&eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n-        LintId::of(&excessive_precision::EXCESSIVE_PRECISION),\n         LintId::of(&explicit_write::EXPLICIT_WRITE),\n+        LintId::of(&float_literal::EXCESSIVE_PRECISION),\n         LintId::of(&format::USELESS_FORMAT),\n         LintId::of(&formatting::POSSIBLE_MISSING_COMMA),\n         LintId::of(&formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n@@ -1386,6 +1388,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&enum_variants::MODULE_INCEPTION),\n         LintId::of(&eq_op::OP_REF),\n         LintId::of(&eta_reduction::REDUNDANT_CLOSURE),\n+        LintId::of(&float_literal::EXCESSIVE_PRECISION),\n         LintId::of(&formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_ELSE_FORMATTING),\n         LintId::of(&formatting::SUSPICIOUS_UNARY_OP_FORMATTING),\n@@ -1565,7 +1568,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n         LintId::of(&eq_op::EQ_OP),\n         LintId::of(&erasing_op::ERASING_OP),\n-        LintId::of(&excessive_precision::EXCESSIVE_PRECISION),\n         LintId::of(&formatting::POSSIBLE_MISSING_COMMA),\n         LintId::of(&functions::NOT_UNSAFE_PTR_ARG_DEREF),\n         LintId::of(&indexing_slicing::OUT_OF_BOUNDS_INDEXING),"}, {"sha": "5fdcf08072db42f94e05b09b5943eb0268083e03", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 355] = [\n+pub const ALL_LINTS: [Lint; 356] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -492,10 +492,10 @@ pub const ALL_LINTS: [Lint; 355] = [\n     },\n     Lint {\n         name: \"excessive_precision\",\n-        group: \"correctness\",\n+        group: \"style\",\n         desc: \"excessive precision for float literal\",\n         deprecation: None,\n-        module: \"excessive_precision\",\n+        module: \"float_literal\",\n     },\n     Lint {\n         name: \"exit\",\n@@ -1001,6 +1001,13 @@ pub const ALL_LINTS: [Lint; 355] = [\n         deprecation: None,\n         module: \"booleans\",\n     },\n+    Lint {\n+        name: \"lossy_float_literal\",\n+        group: \"restriction\",\n+        desc: \"lossy whole number float literals\",\n+        deprecation: None,\n+        module: \"float_literal\",\n+    },\n     Lint {\n         name: \"main_recursion\",\n         group: \"style\","}, {"sha": "bf0325fec7923f9cf40b43b4ad2333e873891d94", "filename": "tests/ui/excessive_precision.fixed", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/tests%2Fui%2Fexcessive_precision.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/tests%2Fui%2Fexcessive_precision.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.fixed?ref=acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "patch": "@@ -60,26 +60,4 @@ fn main() {\n \n     // issue #2840\n     let num = 0.000_000_000_01e-10f64;\n-\n-    // Lossy whole-number float literals\n-    let _: f32 = 16_777_216.0;\n-    let _: f32 = 16_777_220.0;\n-    let _: f32 = 16_777_220.0;\n-    let _: f32 = 16_777_220.0;\n-    let _ = 16_777_220.0_f32;\n-    let _: f32 = -16_777_220.0;\n-    let _: f64 = 9_007_199_254_740_992.0;\n-    let _: f64 = 9_007_199_254_740_992.0;\n-    let _: f64 = 9_007_199_254_740_992.0;\n-    let _ = 9_007_199_254_740_992.0_f64;\n-    let _: f64 = -9_007_199_254_740_992.0;\n-\n-    // Lossless whole number float literals\n-    let _: f32 = 16_777_216.0;\n-    let _: f32 = 16_777_218.0;\n-    let _: f32 = 16_777_220.0;\n-    let _: f32 = -16_777_216.0;\n-    let _: f32 = -16_777_220.0;\n-    let _: f64 = 9_007_199_254_740_992.0;\n-    let _: f64 = -9_007_199_254_740_992.0;\n }"}, {"sha": "ce4722a90f9002edd571d1d2123861905f5726c3", "filename": "tests/ui/excessive_precision.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/tests%2Fui%2Fexcessive_precision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/tests%2Fui%2Fexcessive_precision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.rs?ref=acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "patch": "@@ -60,26 +60,4 @@ fn main() {\n \n     // issue #2840\n     let num = 0.000_000_000_01e-10f64;\n-\n-    // Lossy whole-number float literals\n-    let _: f32 = 16_777_217.0;\n-    let _: f32 = 16_777_219.0;\n-    let _: f32 = 16_777_219.;\n-    let _: f32 = 16_777_219.000;\n-    let _ = 16_777_219f32;\n-    let _: f32 = -16_777_219.0;\n-    let _: f64 = 9_007_199_254_740_993.0;\n-    let _: f64 = 9_007_199_254_740_993.;\n-    let _: f64 = 9_007_199_254_740_993.000;\n-    let _ = 9_007_199_254_740_993f64;\n-    let _: f64 = -9_007_199_254_740_993.0;\n-\n-    // Lossless whole number float literals\n-    let _: f32 = 16_777_216.0;\n-    let _: f32 = 16_777_218.0;\n-    let _: f32 = 16_777_220.0;\n-    let _: f32 = -16_777_216.0;\n-    let _: f32 = -16_777_220.0;\n-    let _: f64 = 9_007_199_254_740_992.0;\n-    let _: f64 = -9_007_199_254_740_992.0;\n }"}, {"sha": "599773f2f70c4378984b5c1720d56b36768cb264", "filename": "tests/ui/excessive_precision.stderr", "status": "modified", "additions": 1, "deletions": 67, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/tests%2Fui%2Fexcessive_precision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/tests%2Fui%2Fexcessive_precision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexcessive_precision.stderr?ref=acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "patch": "@@ -108,71 +108,5 @@ error: float has excessive precision\n LL |     let bad_bige32: f32 = 1.123_456_788_888E-10;\n    |                           ^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or truncating it to: `1.123_456_8E-10`\n \n-error: literal cannot be represented as the underlying type without loss of precision\n-  --> $DIR/excessive_precision.rs:65:18\n-   |\n-LL |     let _: f32 = 16_777_217.0;\n-   |                  ^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_216.0`\n-\n-error: literal cannot be represented as the underlying type without loss of precision\n-  --> $DIR/excessive_precision.rs:66:18\n-   |\n-LL |     let _: f32 = 16_777_219.0;\n-   |                  ^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220.0`\n-\n-error: literal cannot be represented as the underlying type without loss of precision\n-  --> $DIR/excessive_precision.rs:67:18\n-   |\n-LL |     let _: f32 = 16_777_219.;\n-   |                  ^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220.0`\n-\n-error: literal cannot be represented as the underlying type without loss of precision\n-  --> $DIR/excessive_precision.rs:68:18\n-   |\n-LL |     let _: f32 = 16_777_219.000;\n-   |                  ^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220.0`\n-\n-error: literal cannot be represented as the underlying type without loss of precision\n-  --> $DIR/excessive_precision.rs:69:13\n-   |\n-LL |     let _ = 16_777_219f32;\n-   |             ^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220.0_f32`\n-\n-error: literal cannot be represented as the underlying type without loss of precision\n-  --> $DIR/excessive_precision.rs:70:19\n-   |\n-LL |     let _: f32 = -16_777_219.0;\n-   |                   ^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220.0`\n-\n-error: literal cannot be represented as the underlying type without loss of precision\n-  --> $DIR/excessive_precision.rs:71:18\n-   |\n-LL |     let _: f64 = 9_007_199_254_740_993.0;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992.0`\n-\n-error: literal cannot be represented as the underlying type without loss of precision\n-  --> $DIR/excessive_precision.rs:72:18\n-   |\n-LL |     let _: f64 = 9_007_199_254_740_993.;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992.0`\n-\n-error: literal cannot be represented as the underlying type without loss of precision\n-  --> $DIR/excessive_precision.rs:73:18\n-   |\n-LL |     let _: f64 = 9_007_199_254_740_993.000;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992.0`\n-\n-error: literal cannot be represented as the underlying type without loss of precision\n-  --> $DIR/excessive_precision.rs:74:13\n-   |\n-LL |     let _ = 9_007_199_254_740_993f64;\n-   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992.0_f64`\n-\n-error: literal cannot be represented as the underlying type without loss of precision\n-  --> $DIR/excessive_precision.rs:75:19\n-   |\n-LL |     let _: f64 = -9_007_199_254_740_993.0;\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992.0`\n-\n-error: aborting due to 29 previous errors\n+error: aborting due to 18 previous errors\n "}, {"sha": "24e372354fc0517541ffe95684112d6cd08e55fe", "filename": "tests/ui/lossy_float_literal.fixed", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/tests%2Fui%2Flossy_float_literal.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/tests%2Fui%2Flossy_float_literal.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flossy_float_literal.fixed?ref=acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+#![warn(clippy::lossy_float_literal)]\n+\n+fn main() {\n+    // Lossy whole-number float literals\n+    let _: f32 = 16_777_216.0;\n+    let _: f32 = 16_777_220.0;\n+    let _: f32 = 16_777_220.0;\n+    let _: f32 = 16_777_220.0;\n+    let _ = 16_777_220_f32;\n+    let _: f32 = -16_777_220.0;\n+    let _: f64 = 9_007_199_254_740_992.0;\n+    let _: f64 = 9_007_199_254_740_992.0;\n+    let _: f64 = 9_007_199_254_740_992.0;\n+    let _ = 9_007_199_254_740_992_f64;\n+    let _: f64 = -9_007_199_254_740_992.0;\n+\n+    // Lossless whole number float literals\n+    let _: f32 = 16_777_216.0;\n+    let _: f32 = 16_777_218.0;\n+    let _: f32 = 16_777_220.0;\n+    let _: f32 = -16_777_216.0;\n+    let _: f32 = -16_777_220.0;\n+    let _: f64 = 16_777_217.0;\n+    let _: f64 = -16_777_217.0;\n+    let _: f64 = 9_007_199_254_740_992.0;\n+    let _: f64 = -9_007_199_254_740_992.0;\n+\n+    // Ignored whole number float literals\n+    let _: f32 = 1e25;\n+    let _: f32 = 1E25;\n+    let _: f64 = 1e99;\n+    let _: f64 = 1E99;\n+    let _: f32 = 0.1;\n+}"}, {"sha": "3dcf98fa0bddadd173477396c2d8a3f29f476302", "filename": "tests/ui/lossy_float_literal.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/tests%2Fui%2Flossy_float_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/tests%2Fui%2Flossy_float_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flossy_float_literal.rs?ref=acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "patch": "@@ -0,0 +1,35 @@\n+// run-rustfix\n+#![warn(clippy::lossy_float_literal)]\n+\n+fn main() {\n+    // Lossy whole-number float literals\n+    let _: f32 = 16_777_217.0;\n+    let _: f32 = 16_777_219.0;\n+    let _: f32 = 16_777_219.;\n+    let _: f32 = 16_777_219.000;\n+    let _ = 16_777_219f32;\n+    let _: f32 = -16_777_219.0;\n+    let _: f64 = 9_007_199_254_740_993.0;\n+    let _: f64 = 9_007_199_254_740_993.;\n+    let _: f64 = 9_007_199_254_740_993.00;\n+    let _ = 9_007_199_254_740_993f64;\n+    let _: f64 = -9_007_199_254_740_993.0;\n+\n+    // Lossless whole number float literals\n+    let _: f32 = 16_777_216.0;\n+    let _: f32 = 16_777_218.0;\n+    let _: f32 = 16_777_220.0;\n+    let _: f32 = -16_777_216.0;\n+    let _: f32 = -16_777_220.0;\n+    let _: f64 = 16_777_217.0;\n+    let _: f64 = -16_777_217.0;\n+    let _: f64 = 9_007_199_254_740_992.0;\n+    let _: f64 = -9_007_199_254_740_992.0;\n+\n+    // Ignored whole number float literals\n+    let _: f32 = 1e25;\n+    let _: f32 = 1E25;\n+    let _: f64 = 1e99;\n+    let _: f64 = 1E99;\n+    let _: f32 = 0.1;\n+}"}, {"sha": "d2193c0c819555f73b451f2959d234ca0afbb0a8", "filename": "tests/ui/lossy_float_literal.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/tests%2Fui%2Flossy_float_literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70/tests%2Fui%2Flossy_float_literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flossy_float_literal.stderr?ref=acfcbee4a2b10e5a3ac2fe3e29e79a2828720b70", "patch": "@@ -0,0 +1,70 @@\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/lossy_float_literal.rs:6:18\n+   |\n+LL |     let _: f32 = 16_777_217.0;\n+   |                  ^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_216.0`\n+   |\n+   = note: `-D clippy::lossy-float-literal` implied by `-D warnings`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/lossy_float_literal.rs:7:18\n+   |\n+LL |     let _: f32 = 16_777_219.0;\n+   |                  ^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/lossy_float_literal.rs:8:18\n+   |\n+LL |     let _: f32 = 16_777_219.;\n+   |                  ^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/lossy_float_literal.rs:9:18\n+   |\n+LL |     let _: f32 = 16_777_219.000;\n+   |                  ^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/lossy_float_literal.rs:10:13\n+   |\n+LL |     let _ = 16_777_219f32;\n+   |             ^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220_f32`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/lossy_float_literal.rs:11:19\n+   |\n+LL |     let _: f32 = -16_777_219.0;\n+   |                   ^^^^^^^^^^^^ help: consider changing the type or replacing it with: `16_777_220.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/lossy_float_literal.rs:12:18\n+   |\n+LL |     let _: f64 = 9_007_199_254_740_993.0;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/lossy_float_literal.rs:13:18\n+   |\n+LL |     let _: f64 = 9_007_199_254_740_993.;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/lossy_float_literal.rs:14:18\n+   |\n+LL |     let _: f64 = 9_007_199_254_740_993.00;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992.0`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/lossy_float_literal.rs:15:13\n+   |\n+LL |     let _ = 9_007_199_254_740_993f64;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992_f64`\n+\n+error: literal cannot be represented as the underlying type without loss of precision\n+  --> $DIR/lossy_float_literal.rs:16:19\n+   |\n+LL |     let _: f64 = -9_007_199_254_740_993.0;\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing the type or replacing it with: `9_007_199_254_740_992.0`\n+\n+error: aborting due to 11 previous errors\n+"}]}