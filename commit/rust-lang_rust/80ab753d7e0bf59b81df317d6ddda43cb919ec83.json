{"sha": "80ab753d7e0bf59b81df317d6ddda43cb919ec83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYWI3NTNkN2UwYmY1OWI4MWRmMzE3ZDZkZGRhNDNjYjkxOWVjODM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-02-05T17:18:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-05T17:18:02Z"}, "message": "Merge #7572\n\n7572: Add `find_or_create_impl_block` to assist utils r=matklad a=yoshuawuyts\n\nThis is another continuation of https://github.com/rust-analyzer/rust-analyzer/pull/7562, introducing a small util to either find an `impl` block, or create a new one if none exists. I copied this code from the `generate_new` assist into https://github.com/rust-analyzer/rust-analyzer/pull/7562, and this unifies both into a helper.\r\n\r\nIt doesn't feel super polished in its current state, but my hope is that this is enough of a starting point that it can be expanded on later. For example something that would be useful would be a flag which either returns the index of the start of the block, or the end of the block.\r\n\r\nAnyway, I hope this is useful. Thanks!\n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>", "tree": {"sha": "934a7ae2d8b549cd9d5d82a137156c0a71220973", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/934a7ae2d8b549cd9d5d82a137156c0a71220973"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80ab753d7e0bf59b81df317d6ddda43cb919ec83", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgHX3KCRBK7hj4Ov3rIwAAdHIIABnRzTUwn6uVAle02M5vasSa\nJDcEkXEwOy4gQI2tBd19ybBvAbU3l+KXVvlM/wJgpF19R7MxW5Uio9MBeNzskS1x\nfuEq7dl9E/MXp9fiz0AaEHe0BZpVxVoAZHQcOpj7RynVVxnWTEIBX/sX1QfAPUw+\nRqFp8qQ2pggujd1F4kte1YIZcEa5Tfm2cF9BC4PVnyoHwd6tdFbZCQChFFMVMxs8\nov/ddaRMAm5GAfuAXPXn8ov3k6OXxDLNg0kzNxa22txJHNFhREa7FuCN6qjGxO9g\nyRjE6u7exgA7nJfw7JzTsjdRBjc0cN8CVnkxgAdDFHsbRSUwKDlmEWP0G8KWOeU=\n=XYv9\n-----END PGP SIGNATURE-----\n", "payload": "tree 934a7ae2d8b549cd9d5d82a137156c0a71220973\nparent 941f9157f5561868c4683d54fdf98378383f64b8\nparent 2cf161266941eac300ae66a633ead26f5109ea16\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1612545482 +0000\ncommitter GitHub <noreply@github.com> 1612545482 +0000\n\nMerge #7572\n\n7572: Add `find_or_create_impl_block` to assist utils r=matklad a=yoshuawuyts\n\nThis is another continuation of https://github.com/rust-analyzer/rust-analyzer/pull/7562, introducing a small util to either find an `impl` block, or create a new one if none exists. I copied this code from the `generate_new` assist into https://github.com/rust-analyzer/rust-analyzer/pull/7562, and this unifies both into a helper.\r\n\r\nIt doesn't feel super polished in its current state, but my hope is that this is enough of a starting point that it can be expanded on later. For example something that would be useful would be a flag which either returns the index of the start of the block, or the end of the block.\r\n\r\nAnyway, I hope this is useful. Thanks!\n\nCo-authored-by: Yoshua Wuyts <yoshuawuyts@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80ab753d7e0bf59b81df317d6ddda43cb919ec83", "html_url": "https://github.com/rust-lang/rust/commit/80ab753d7e0bf59b81df317d6ddda43cb919ec83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80ab753d7e0bf59b81df317d6ddda43cb919ec83/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "941f9157f5561868c4683d54fdf98378383f64b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/941f9157f5561868c4683d54fdf98378383f64b8", "html_url": "https://github.com/rust-lang/rust/commit/941f9157f5561868c4683d54fdf98378383f64b8"}, {"sha": "2cf161266941eac300ae66a633ead26f5109ea16", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cf161266941eac300ae66a633ead26f5109ea16", "html_url": "https://github.com/rust-lang/rust/commit/2cf161266941eac300ae66a633ead26f5109ea16"}], "stats": {"total": 59, "additions": 30, "deletions": 29}, "files": [{"sha": "4cf66b5d5c12b149a6945426339d7f1fd2a8cd7a", "filename": "crates/assists/src/handlers/generate_enum_match_method.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/80ab753d7e0bf59b81df317d6ddda43cb919ec83/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ab753d7e0bf59b81df317d6ddda43cb919ec83/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_enum_match_method.rs?ref=80ab753d7e0bf59b81df317d6ddda43cb919ec83", "patch": "@@ -1,9 +1,12 @@\n use stdx::{format_to, to_lower_snake_case};\n+use syntax::ast::VisibilityOwner;\n use syntax::ast::{self, AstNode, NameOwner};\n-use syntax::{ast::VisibilityOwner, T};\n use test_utils::mark;\n \n-use crate::{utils::find_struct_impl, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{\n+    utils::{find_impl_block, find_struct_impl},\n+    AssistContext, AssistId, AssistKind, Assists,\n+};\n \n // Assist: generate_enum_match_method\n //\n@@ -63,7 +66,6 @@ pub(crate) fn generate_enum_match_method(acc: &mut Assists, ctx: &AssistContext)\n             }\n \n             let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n-\n             format_to!(\n                 buf,\n                 \"    /// Returns `true` if the {} is [`{}`].\n@@ -78,17 +80,7 @@ pub(crate) fn generate_enum_match_method(acc: &mut Assists, ctx: &AssistContext)\n             );\n \n             let start_offset = impl_def\n-                .and_then(|impl_def| {\n-                    buf.push('\\n');\n-                    let start = impl_def\n-                        .syntax()\n-                        .descendants_with_tokens()\n-                        .find(|t| t.kind() == T!['{'])?\n-                        .text_range()\n-                        .end();\n-\n-                    Some(start)\n-                })\n+                .and_then(|impl_def| find_impl_block(impl_def, &mut buf))\n                 .unwrap_or_else(|| {\n                     buf = generate_impl_text(&parent_enum, &buf);\n                     parent_enum.syntax().text_range().end()"}, {"sha": "307f2e228c92252564344bf171ad55ec6c1192bf", "filename": "crates/assists/src/handlers/generate_new.rs", "status": "modified", "additions": 7, "deletions": 14, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/80ab753d7e0bf59b81df317d6ddda43cb919ec83/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ab753d7e0bf59b81df317d6ddda43cb919ec83/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=80ab753d7e0bf59b81df317d6ddda43cb919ec83", "patch": "@@ -2,10 +2,13 @@ use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n     ast::{self, AstNode, GenericParamsOwner, NameOwner, StructKind, VisibilityOwner},\n-    SmolStr, T,\n+    SmolStr,\n };\n \n-use crate::{utils::find_struct_impl, AssistContext, AssistId, AssistKind, Assists};\n+use crate::{\n+    utils::{find_impl_block, find_struct_impl},\n+    AssistContext, AssistId, AssistKind, Assists,\n+};\n \n // Assist: generate_new\n //\n@@ -58,17 +61,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n         format_to!(buf, \"    {}fn new({}) -> Self {{ Self {{ {} }} }}\", vis, params, fields);\n \n         let start_offset = impl_def\n-            .and_then(|impl_def| {\n-                buf.push('\\n');\n-                let start = impl_def\n-                    .syntax()\n-                    .descendants_with_tokens()\n-                    .find(|t| t.kind() == T!['{'])?\n-                    .text_range()\n-                    .end();\n-\n-                Some(start)\n-            })\n+            .and_then(|impl_def| find_impl_block(impl_def, &mut buf))\n             .unwrap_or_else(|| {\n                 buf = generate_impl_text(&strukt, &buf);\n                 strukt.syntax().text_range().end()\n@@ -93,7 +86,7 @@ fn generate_impl_text(strukt: &ast::Struct, code: &str) -> String {\n     if let Some(type_params) = &type_params {\n         format_to!(buf, \"{}\", type_params.syntax());\n     }\n-    buf.push_str(\" \");\n+    buf.push(' ');\n     buf.push_str(strukt.name().unwrap().text());\n     if let Some(type_params) = type_params {\n         let lifetime_params = type_params"}, {"sha": "8045aac40cd44ccf57491c888b9e73dbfbe93b18", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/80ab753d7e0bf59b81df317d6ddda43cb919ec83/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80ab753d7e0bf59b81df317d6ddda43cb919ec83/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=80ab753d7e0bf59b81df317d6ddda43cb919ec83", "patch": "@@ -274,10 +274,11 @@ pub(crate) fn does_pat_match_variant(pat: &ast::Pat, var: &ast::Pat) -> bool {\n // Uses a syntax-driven approach to find any impl blocks for the struct that\n // exist within the module/file\n //\n-// Returns `None` if we've found an existing `new` fn\n+// Returns `None` if we've found an existing fn\n //\n // FIXME: change the new fn checking to a more semantic approach when that's more\n // viable (e.g. we process proc macros, etc)\n+// FIXME: this partially overlaps with `find_impl_block`\n pub(crate) fn find_struct_impl(\n     ctx: &AssistContext,\n     strukt: &ast::AdtDef,\n@@ -338,3 +339,18 @@ fn has_fn(imp: &ast::Impl, rhs_name: &str) -> bool {\n \n     false\n }\n+\n+/// Find the start of the `impl` block for the given `ast::Impl`.\n+//\n+// FIXME: add a way to find the end of the `impl` block.\n+// FIXME: this partially overlaps with `find_struct_impl`\n+pub(crate) fn find_impl_block(impl_def: ast::Impl, buf: &mut String) -> Option<TextSize> {\n+    buf.push('\\n');\n+    let start = impl_def\n+        .syntax()\n+        .descendants_with_tokens()\n+        .find(|t| t.kind() == T!['{'])?\n+        .text_range()\n+        .end();\n+    Some(start)\n+}"}]}