{"sha": "af3923bebc8ff67e1053b9e6e0ba282cf2834187", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMzkyM2JlYmM4ZmY2N2UxMDUzYjllNmUwYmEyODJjZjI4MzQxODc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-21T09:15:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-10-21T09:15:51Z"}, "message": "Auto merge of #991 - christianpoveda:errno-place, r=RalfJung\n\nChange the last OS error location to a place\n\nr? @RalfJung", "tree": {"sha": "0e76dc560d48ffc7fcc0c692c3fd5ebe4d784291", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e76dc560d48ffc7fcc0c692c3fd5ebe4d784291"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af3923bebc8ff67e1053b9e6e0ba282cf2834187", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af3923bebc8ff67e1053b9e6e0ba282cf2834187", "html_url": "https://github.com/rust-lang/rust/commit/af3923bebc8ff67e1053b9e6e0ba282cf2834187", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af3923bebc8ff67e1053b9e6e0ba282cf2834187/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f912a8b0540fbade8394068a264fb729c237ef3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f912a8b0540fbade8394068a264fb729c237ef3d", "html_url": "https://github.com/rust-lang/rust/commit/f912a8b0540fbade8394068a264fb729c237ef3d"}, {"sha": "9d50c5e75806bc27fc0b144be92b895c2f2a7339", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d50c5e75806bc27fc0b144be92b895c2f2a7339", "html_url": "https://github.com/rust-lang/rust/commit/9d50c5e75806bc27fc0b144be92b895c2f2a7339"}], "stats": {"total": 137, "additions": 76, "deletions": 61}, "files": [{"sha": "f4a8d176172d47908e0734a98c310e937a93c422", "filename": "src/eval.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/af3923bebc8ff67e1053b9e6e0ba282cf2834187/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3923bebc8ff67e1053b9e6e0ba282cf2834187/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=af3923bebc8ff67e1053b9e6e0ba282cf2834187", "patch": "@@ -183,8 +183,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     let errno_layout = ecx.layout_of(ecx.tcx.types.u32)?;\n     let errno_place = ecx.allocate(errno_layout, MiriMemoryKind::Static.into());\n     ecx.write_scalar(Scalar::from_u32(0), errno_place.into())?;\n-    let errno_ptr = ecx.check_mplace_access(errno_place.into(), Some(Size::from_bits(32)))?;\n-    ecx.machine.last_error = errno_ptr;\n+    ecx.machine.last_error = Some(errno_place);\n \n     Ok(ecx)\n }"}, {"sha": "16091bb242cdd60191d9723549863a9a7cee9eda", "filename": "src/helpers.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/af3923bebc8ff67e1053b9e6e0ba282cf2834187/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3923bebc8ff67e1053b9e6e0ba282cf2834187/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=af3923bebc8ff67e1053b9e6e0ba282cf2834187", "patch": "@@ -345,4 +345,68 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         Ok(())\n     }\n+\n+    /// Sets the last error variable.\n+    fn set_last_error(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx> {\n+        let this = self.eval_context_mut();\n+        let errno_place = this.machine.last_error.unwrap();\n+        this.write_scalar(scalar, errno_place.into())\n+    }\n+\n+    /// Gets the last error variable.\n+    fn get_last_error(&mut self) -> InterpResult<'tcx, Scalar<Tag>> {\n+        let this = self.eval_context_mut();\n+        let errno_place = this.machine.last_error.unwrap();\n+        this.read_scalar(errno_place.into())?.not_undef()\n+    }\n+\n+    /// Sets the last OS error using a `std::io::Error`. This function tries to produce the most\n+    /// similar OS error from the `std::io::ErrorKind` and sets it as the last OS error.\n+    fn set_last_error_from_io_error(&mut self, e: std::io::Error) -> InterpResult<'tcx> {\n+        use std::io::ErrorKind::*;\n+        let this = self.eval_context_mut();\n+        let target = &this.tcx.tcx.sess.target.target;\n+        let last_error = if target.options.target_family == Some(\"unix\".to_owned()) {\n+            this.eval_libc(match e.kind() {\n+                ConnectionRefused => \"ECONNREFUSED\",\n+                ConnectionReset => \"ECONNRESET\",\n+                PermissionDenied => \"EPERM\",\n+                BrokenPipe => \"EPIPE\",\n+                NotConnected => \"ENOTCONN\",\n+                ConnectionAborted => \"ECONNABORTED\",\n+                AddrNotAvailable => \"EADDRNOTAVAIL\",\n+                AddrInUse => \"EADDRINUSE\",\n+                NotFound => \"ENOENT\",\n+                Interrupted => \"EINTR\",\n+                InvalidInput => \"EINVAL\",\n+                TimedOut => \"ETIMEDOUT\",\n+                AlreadyExists => \"EEXIST\",\n+                WouldBlock => \"EWOULDBLOCK\",\n+                _ => throw_unsup_format!(\"The {} error cannot be transformed into a raw os error\", e)\n+            })?\n+        } else {\n+            // FIXME: we have to implement the windows' equivalent of this.\n+            throw_unsup_format!(\"Setting the last OS error from an io::Error is unsupported for {}.\", target.target_os)\n+        };\n+        this.set_last_error(last_error)\n+    }\n+\n+    /// Helper function that consumes an `std::io::Result<T>` and returns an\n+    /// `InterpResult<'tcx,T>::Ok` instead. In case the result is an error, this function returns\n+    /// `Ok(-1)` and sets the last OS error accordingly.\n+    ///\n+    /// This function uses `T: From<i32>` instead of `i32` directly because some IO related\n+    /// functions return different integer types (like `read`, that returns an `i64`)\n+    fn try_unwrap_io_result<T: From<i32>>(\n+        &mut self,\n+        result: std::io::Result<T>,\n+    ) -> InterpResult<'tcx, T> {\n+        match result {\n+            Ok(ok) => Ok(ok),\n+            Err(e) => {\n+                self.eval_context_mut().set_last_error_from_io_error(e)?;\n+                Ok((-1).into())\n+            }\n+        }\n+    }\n }"}, {"sha": "50f0ecf590936d2497343a624a2e4e0091bdf412", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3923bebc8ff67e1053b9e6e0ba282cf2834187/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3923bebc8ff67e1053b9e6e0ba282cf2834187/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=af3923bebc8ff67e1053b9e6e0ba282cf2834187", "patch": "@@ -91,8 +91,8 @@ pub struct Evaluator<'tcx> {\n     pub(crate) argv: Option<Pointer<Tag>>,\n     pub(crate) cmd_line: Option<Pointer<Tag>>,\n \n-    /// Last OS error.\n-    pub(crate) last_error: Option<Pointer<Tag>>,\n+    /// Last OS error location in memory. It is a 32-bit integer\n+    pub(crate) last_error: Option<MPlaceTy<'tcx, Tag>>,\n \n     /// TLS state.\n     pub(crate) tls: TlsData<'tcx>,"}, {"sha": "661e8bf209b1ed9e32d868b5f143d84d7f214875", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af3923bebc8ff67e1053b9e6e0ba282cf2834187/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3923bebc8ff67e1053b9e6e0ba282cf2834187/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=af3923bebc8ff67e1053b9e6e0ba282cf2834187", "patch": "@@ -146,7 +146,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let erange = this.eval_libc(\"ERANGE\")?;\n                 this.set_last_error(erange)?;\n             }\n-            Err(e) => this.consume_io_error(e)?,\n+            Err(e) => this.set_last_error_from_io_error(e)?,\n         }\n         Ok(Scalar::ptr_null(&*this.tcx))\n     }\n@@ -168,7 +168,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         match env::set_current_dir(path) {\n             Ok(()) => Ok(0),\n             Err(e) => {\n-                this.consume_io_error(e)?;\n+                this.set_last_error_from_io_error(e)?;\n                 Ok(-1)\n             }\n         }"}, {"sha": "1933aee1151dc3b3b4cef7b8a5a610ca1ff55b90", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 2, "deletions": 30, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/af3923bebc8ff67e1053b9e6e0ba282cf2834187/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3923bebc8ff67e1053b9e6e0ba282cf2834187/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=af3923bebc8ff67e1053b9e6e0ba282cf2834187", "patch": "@@ -414,8 +414,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             \"__errno_location\" | \"__error\" => {\n-                let errno_scalar: Scalar<Tag> = this.machine.last_error.unwrap().into();\n-                this.write_scalar(errno_scalar, dest)?;\n+                let errno_place = this.machine.last_error.unwrap();\n+                this.write_scalar(errno_place.to_ref().to_scalar()?, dest)?;\n             }\n \n             \"getenv\" => {\n@@ -977,34 +977,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         return Ok(None);\n     }\n-\n-    fn set_last_error(&mut self, scalar: Scalar<Tag>) -> InterpResult<'tcx> {\n-        let this = self.eval_context_mut();\n-        let errno_ptr = this.machine.last_error.unwrap();\n-        // We allocated this during machine initialziation so the bounds are fine.\n-        this.memory.get_mut(errno_ptr.alloc_id)?.write_scalar(\n-            &*this.tcx,\n-            errno_ptr,\n-            scalar.into(),\n-            Size::from_bits(32),\n-        )\n-    }\n-\n-    fn get_last_error(&mut self) -> InterpResult<'tcx, Scalar<Tag>> {\n-        let this = self.eval_context_mut();\n-        let errno_ptr = this.machine.last_error.unwrap();\n-        this.memory\n-            .get(errno_ptr.alloc_id)?\n-            .read_scalar(&*this.tcx, errno_ptr, Size::from_bits(32))?\n-            .not_undef()\n-    }\n-\n-    fn consume_io_error(&mut self, e: std::io::Error) -> InterpResult<'tcx> {\n-        self.eval_context_mut().set_last_error(Scalar::from_int(\n-            e.raw_os_error().unwrap(),\n-            Size::from_bits(32),\n-        ))\n-    }\n }\n \n // Shims the linux 'getrandom()' syscall."}, {"sha": "ffcfab10081a1046f2831406207bd68d269220fe", "filename": "src/shims/fs.rs", "status": "modified", "additions": 5, "deletions": 25, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/af3923bebc8ff67e1053b9e6e0ba282cf2834187/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af3923bebc8ff67e1053b9e6e0ba282cf2834187/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=af3923bebc8ff67e1053b9e6e0ba282cf2834187", "patch": "@@ -108,7 +108,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             fh.low\n         });\n \n-        this.consume_result(fd)\n+        this.try_unwrap_io_result(fd)\n     }\n \n     fn fcntl(\n@@ -144,7 +144,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let fd = this.read_scalar(fd_op)?.to_i32()?;\n \n         this.remove_handle_and(fd, |handle, this| {\n-            this.consume_result(handle.file.sync_all().map(|_| 0i32))\n+            this.try_unwrap_io_result(handle.file.sync_all().map(|_| 0i32))\n         })\n     }\n \n@@ -175,9 +175,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .get_bytes_mut(&*this.tcx, buf, Size::from_bytes(count))\n                     .map(|buffer| handle.file.read(buffer))\n             });\n-            // Reinsert the file handle\n             this.machine.file_handler.handles.insert(fd, handle).unwrap_none();\n-            this.consume_result(bytes?.map(|bytes| bytes as i64))\n+            this.try_unwrap_io_result(bytes?.map(|bytes| bytes as i64))\n         })\n     }\n \n@@ -206,7 +205,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .map(|bytes| handle.file.write(bytes).map(|bytes| bytes as i64))\n             });\n             this.machine.file_handler.handles.insert(fd, handle).unwrap_none();\n-            this.consume_result(bytes?)\n+            this.try_unwrap_io_result(bytes?)\n         })\n     }\n \n@@ -223,7 +222,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         let result = remove_file(path).map(|_| 0);\n \n-        this.consume_result(result)\n+        this.try_unwrap_io_result(result)\n     }\n \n     /// Helper function that gets a `FileHandle` immutable reference and allows to manipulate it\n@@ -271,23 +270,4 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             Ok((-1).into())\n         }\n     }\n-\n-    /// Helper function that consumes an `std::io::Result<T>` and returns an\n-    /// `InterpResult<'tcx,T>::Ok` instead. It is expected that the result can be converted to an\n-    /// OS error using `std::io::Error::raw_os_error`.\n-    ///\n-    /// This function uses `T: From<i32>` instead of `i32` directly because some IO related\n-    /// functions return different integer types (like `read`, that returns an `i64`)\n-    fn consume_result<T: From<i32>>(\n-        &mut self,\n-        result: std::io::Result<T>,\n-    ) -> InterpResult<'tcx, T> {\n-        match result {\n-            Ok(ok) => Ok(ok),\n-            Err(e) => {\n-                self.eval_context_mut().consume_io_error(e)?;\n-                Ok((-1).into())\n-            }\n-        }\n-    }\n }"}]}