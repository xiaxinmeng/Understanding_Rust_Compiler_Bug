{"sha": "a40124e01c4b10629c78b417a1fe524d929bcbe9", "node_id": "C_kwDOAAsO6NoAKGE0MDEyNGUwMWM0YjEwNjI5Yzc4YjQxN2ExZmU1MjRkOTI5YmNiZTk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-08-26T01:53:54Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-01T21:26:22Z"}, "message": "Box `CanonicalUserTypeAnnotation::CanonicalUserType`.\n\nThis shrinks `Ascription`, which shrinks `PatKind::AscribeUserType`,\nwhich shrinks `Pat`.", "tree": {"sha": "77b885027e72af432ea4b3a604711a554a02642f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77b885027e72af432ea4b3a604711a554a02642f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a40124e01c4b10629c78b417a1fe524d929bcbe9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a40124e01c4b10629c78b417a1fe524d929bcbe9", "html_url": "https://github.com/rust-lang/rust/commit/a40124e01c4b10629c78b417a1fe524d929bcbe9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a40124e01c4b10629c78b417a1fe524d929bcbe9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c4c8eb1a3add142c2380aecdd46ec32e42a9900", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4c8eb1a3add142c2380aecdd46ec32e42a9900", "html_url": "https://github.com/rust-lang/rust/commit/2c4c8eb1a3add142c2380aecdd46ec32e42a9900"}], "stats": {"total": 36, "additions": 18, "deletions": 18}, "files": [{"sha": "120fa787009dae23f6cb55cf66732eac35fdc1d6", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a40124e01c4b10629c78b417a1fe524d929bcbe9/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40124e01c4b10629c78b417a1fe524d929bcbe9/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=a40124e01c4b10629c78b417a1fe524d929bcbe9", "patch": "@@ -809,8 +809,8 @@ mod size_asserts {\n     static_assert_size!(Block, 56);\n     static_assert_size!(Expr<'_>, 64);\n     static_assert_size!(ExprKind<'_>, 40);\n-    static_assert_size!(Pat<'_>, 112);\n-    static_assert_size!(PatKind<'_>, 96);\n+    static_assert_size!(Pat<'_>, 80);\n+    static_assert_size!(PatKind<'_>, 64);\n     static_assert_size!(Stmt<'_>, 56);\n     static_assert_size!(StmtKind<'_>, 48);\n }"}, {"sha": "cd3201e77ce9c58feb338a484f361fa607595326", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a40124e01c4b10629c78b417a1fe524d929bcbe9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40124e01c4b10629c78b417a1fe524d929bcbe9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=a40124e01c4b10629c78b417a1fe524d929bcbe9", "patch": "@@ -874,7 +874,7 @@ pub type CanonicalUserTypeAnnotations<'tcx> =\n \n #[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct CanonicalUserTypeAnnotation<'tcx> {\n-    pub user_ty: CanonicalUserType<'tcx>,\n+    pub user_ty: Box<CanonicalUserType<'tcx>>,\n     pub span: Span,\n     pub inferred_ty: Ty<'tcx>,\n }"}, {"sha": "3549b47478cbded136bc85a399c75439531a12e3", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a40124e01c4b10629c78b417a1fe524d929bcbe9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40124e01c4b10629c78b417a1fe524d929bcbe9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=a40124e01c4b10629c78b417a1fe524d929bcbe9", "patch": "@@ -42,10 +42,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Constant { span, user_ty: None, literal }\n             }\n             ExprKind::NonHirLiteral { lit, ref user_ty } => {\n-                let user_ty = user_ty.as_ref().map(|box user_ty| {\n+                let user_ty = user_ty.as_ref().map(|user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span,\n-                        user_ty: *user_ty,\n+                        user_ty: user_ty.clone(),\n                         inferred_ty: ty,\n                     })\n                 });\n@@ -54,10 +54,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Constant { span, user_ty: user_ty, literal }\n             }\n             ExprKind::ZstLiteral { ref user_ty } => {\n-                let user_ty = user_ty.as_ref().map(|box user_ty| {\n+                let user_ty = user_ty.as_ref().map(|user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span,\n-                        user_ty: *user_ty,\n+                        user_ty: user_ty.clone(),\n                         inferred_ty: ty,\n                     })\n                 });\n@@ -66,10 +66,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 Constant { span, user_ty: user_ty, literal }\n             }\n             ExprKind::NamedConst { def_id, substs, ref user_ty } => {\n-                let user_ty = user_ty.as_ref().map(|box user_ty| {\n+                let user_ty = user_ty.as_ref().map(|user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span,\n-                        user_ty: *user_ty,\n+                        user_ty: user_ty.clone(),\n                         inferred_ty: ty,\n                     })\n                 });"}, {"sha": "46dbd8a136b52f1f10017e052c2bbcd68ffe0233", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a40124e01c4b10629c78b417a1fe524d929bcbe9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40124e01c4b10629c78b417a1fe524d929bcbe9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=a40124e01c4b10629c78b417a1fe524d929bcbe9", "patch": "@@ -522,11 +522,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                         fake_borrow_temps,\n                     )\n                 );\n-                if let Some(box user_ty) = user_ty {\n+                if let Some(user_ty) = user_ty {\n                     let annotation_index =\n                         this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                             span: source_info.span,\n-                            user_ty: *user_ty,\n+                            user_ty: user_ty.clone(),\n                             inferred_ty: expr.ty,\n                         });\n \n@@ -551,11 +551,11 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 let source = &this.thir[source];\n                 let temp =\n                     unpack!(block = this.as_temp(block, source.temp_lifetime, source, mutability));\n-                if let Some(box user_ty) = user_ty {\n+                if let Some(user_ty) = user_ty {\n                     let annotation_index =\n                         this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                             span: source_info.span,\n-                            user_ty: *user_ty,\n+                            user_ty: user_ty.clone(),\n                             inferred_ty: expr.ty,\n                         });\n                     this.cfg.push("}, {"sha": "74509646c17c698f6ca4dc810b2d84447123938b", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a40124e01c4b10629c78b417a1fe524d929bcbe9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40124e01c4b10629c78b417a1fe524d929bcbe9/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=a40124e01c4b10629c78b417a1fe524d929bcbe9", "patch": "@@ -378,10 +378,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 };\n \n                 let inferred_ty = expr.ty;\n-                let user_ty = user_ty.as_ref().map(|box user_ty| {\n+                let user_ty = user_ty.as_ref().map(|user_ty| {\n                     this.canonical_user_type_annotations.push(CanonicalUserTypeAnnotation {\n                         span: source_info.span,\n-                        user_ty: *user_ty,\n+                        user_ty: user_ty.clone(),\n                         inferred_ty,\n                     })\n                 });"}, {"sha": "321353ca20bae01f30992f1137fe109c582afd29", "filename": "compiler/rustc_mir_build/src/thir/cx/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a40124e01c4b10629c78b417a1fe524d929bcbe9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40124e01c4b10629c78b417a1fe524d929bcbe9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fblock.rs?ref=a40124e01c4b10629c78b417a1fe524d929bcbe9", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> Cx<'tcx> {\n                             {\n                                 debug!(\"mirror_stmts: user_ty={:?}\", user_ty);\n                                 let annotation = CanonicalUserTypeAnnotation {\n-                                    user_ty,\n+                                    user_ty: Box::new(user_ty),\n                                     span: ty.span,\n                                     inferred_ty: self.typeck_results.node_type(ty.hir_id),\n                                 };"}, {"sha": "21a2cb32aa76ec6c59485ba011765091a523eb7a", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a40124e01c4b10629c78b417a1fe524d929bcbe9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a40124e01c4b10629c78b417a1fe524d929bcbe9/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=a40124e01c4b10629c78b417a1fe524d929bcbe9", "patch": "@@ -443,7 +443,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         if let Some(user_ty) = self.user_substs_applied_to_ty_of_hir_id(hir_id) {\n             debug!(\"lower_variant_or_leaf: kind={:?} user_ty={:?} span={:?}\", kind, user_ty, span);\n             let annotation = CanonicalUserTypeAnnotation {\n-                user_ty,\n+                user_ty: Box::new(user_ty),\n                 span,\n                 inferred_ty: self.typeck_results.node_type(hir_id),\n             };\n@@ -512,7 +512,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 let user_provided_types = self.typeck_results().user_provided_types();\n                 if let Some(&user_ty) = user_provided_types.get(id) {\n                     let annotation = CanonicalUserTypeAnnotation {\n-                        user_ty,\n+                        user_ty: Box::new(user_ty),\n                         span,\n                         inferred_ty: self.typeck_results().node_type(id),\n                     };"}]}