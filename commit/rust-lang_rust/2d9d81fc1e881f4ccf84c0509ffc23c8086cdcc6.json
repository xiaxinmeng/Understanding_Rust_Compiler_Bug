{"sha": "2d9d81fc1e881f4ccf84c0509ffc23c8086cdcc6", "node_id": "C_kwDOAAsO6NoAKDJkOWQ4MWZjMWU4ODFmNGNjZjg0YzA1MDlmZmMyM2M4MDg2Y2RjYzY", "commit": {"author": {"name": "Renato Lochetti", "email": "renato.lochetti@gmail.com", "date": "2023-05-16T08:34:20Z"}, "committer": {"name": "Renato Lochetti", "email": "renato.lochetti@gmail.com", "date": "2023-05-16T08:36:22Z"}, "message": "Checking for proc_macro not only when local.init is Some", "tree": {"sha": "2a36bdb31c712dca262f6be5386839216ed9d4fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a36bdb31c712dca262f6be5386839216ed9d4fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d9d81fc1e881f4ccf84c0509ffc23c8086cdcc6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCAAdFiEEOoaYRk7omMQpHzExS3izSz3n68wFAmRjQIYACgkQS3izSz3n\n68xrLQv/QWtHO4p5egFwQ9HGo8H/uuQ8c534Nm4GRRn6Qv6VckJrgfsooFdWCpdq\naAiByGBb3PrHtLSnOV6GlK4tHSlL+ZW+PrMdnNYCa8nPNU/T6NENO6azeTG51wJZ\n6vlgmt3Wp+5fo1h1EFoWsoU7o+Z9oFM8/Ox4rktMABHXKldkBkULa9uVrgtvodv3\nmbSAqh6s7Z6p8vYTZJGWiPWwRyAWtkVXIbTGmqjQQRlArn5Vyk2+/wOxxtCYDtWj\nxQB1vkEF+Zom1Cg7wNj3YgoCtHtOeifMwt7rqBWWtTVQ+Bj82hdvSLdJOeAeJEHi\nMiTkpcwAIAzB4W7K7eDO8bH1WK/DahIawR+pslXpHKaj+CnwBV2eeOa59wqR13MT\nh1yjP9D93ZdBhn1p8ZMtjqQILPKsBRt5qNFxPNt3JMuQrc8RXcDbJX1PN4BgkHFI\nGSaDFa2TmMKfbkbSzNJHBizaAgSKnB6MGyPUPz37D7vOuViDQuPOYwKz1IO6C10S\no/5cFNnH\n=rMm4\n-----END PGP SIGNATURE-----", "payload": "tree 2a36bdb31c712dca262f6be5386839216ed9d4fc\nparent df200aaf39184258ad2fb5d2d9a4682fb069bbd5\nauthor Renato Lochetti <renato.lochetti@gmail.com> 1684226060 +0100\ncommitter Renato Lochetti <renato.lochetti@gmail.com> 1684226182 +0100\n\nChecking for proc_macro not only when local.init is Some\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d9d81fc1e881f4ccf84c0509ffc23c8086cdcc6", "html_url": "https://github.com/rust-lang/rust/commit/2d9d81fc1e881f4ccf84c0509ffc23c8086cdcc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d9d81fc1e881f4ccf84c0509ffc23c8086cdcc6/comments", "author": {"login": "lochetti", "id": 2541422, "node_id": "MDQ6VXNlcjI1NDE0MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/2541422?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lochetti", "html_url": "https://github.com/lochetti", "followers_url": "https://api.github.com/users/lochetti/followers", "following_url": "https://api.github.com/users/lochetti/following{/other_user}", "gists_url": "https://api.github.com/users/lochetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/lochetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lochetti/subscriptions", "organizations_url": "https://api.github.com/users/lochetti/orgs", "repos_url": "https://api.github.com/users/lochetti/repos", "events_url": "https://api.github.com/users/lochetti/events{/privacy}", "received_events_url": "https://api.github.com/users/lochetti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lochetti", "id": 2541422, "node_id": "MDQ6VXNlcjI1NDE0MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/2541422?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lochetti", "html_url": "https://github.com/lochetti", "followers_url": "https://api.github.com/users/lochetti/followers", "following_url": "https://api.github.com/users/lochetti/following{/other_user}", "gists_url": "https://api.github.com/users/lochetti/gists{/gist_id}", "starred_url": "https://api.github.com/users/lochetti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lochetti/subscriptions", "organizations_url": "https://api.github.com/users/lochetti/orgs", "repos_url": "https://api.github.com/users/lochetti/repos", "events_url": "https://api.github.com/users/lochetti/events{/privacy}", "received_events_url": "https://api.github.com/users/lochetti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df200aaf39184258ad2fb5d2d9a4682fb069bbd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/df200aaf39184258ad2fb5d2d9a4682fb069bbd5", "html_url": "https://github.com/rust-lang/rust/commit/df200aaf39184258ad2fb5d2d9a4682fb069bbd5"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "34a9d21760631bc040f240f32dfc585914a94f37", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2d9d81fc1e881f4ccf84c0509ffc23c8086cdcc6/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d9d81fc1e881f4ccf84c0509ffc23c8086cdcc6/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=2d9d81fc1e881f4ccf84c0509ffc23c8086cdcc6", "patch": "@@ -192,18 +192,18 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n             if local.pat.default_binding_modes && local.ty.is_none() {\n                 // When `default_binding_modes` is true, the `let` keyword is present.\n \n-\t\t\t\tif let Some(init) = local.init {\n-                    // Ignore function calls that return impl traits...\n-                    if matches!(init.kind, ExprKind::Call(_, _) | ExprKind::MethodCall(_, _, _, _)) {\n-                        let expr_ty = cx.typeck_results().expr_ty(init);\n-                        if expr_ty.is_impl_trait() {\n-                            return;\n-                        }\n-                    }\n-                    // Ignore if it is from a procedural macro...\n-                    if is_from_proc_macro(cx, init) {\n-                        return;\n-                    }\n+\t\t\t\t// Ignore function calls that return impl traits...\n+\t\t\t\tif let Some(init) = local.init &&\n+\t\t\t\tmatches!(init.kind, ExprKind::Call(_, _) | ExprKind::MethodCall(_, _, _, _)) {\n+\t\t\t\t\tlet expr_ty = cx.typeck_results().expr_ty(init);\n+\t\t\t\t\tif expr_ty.is_impl_trait() {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+                // Ignore if it is from a procedural macro...\n+                if is_from_proc_macro(cx, init) {\n+                    return;\n                 }\n \n \t\t\t\tspan_lint_and_help("}]}