{"sha": "111126ed3c4f6358e0c833f80226e5192778f749", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMTEyNmVkM2M0ZjYzNThlMGM4MzNmODAyMjZlNTE5Mjc3OGY3NDk=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-29T20:32:07Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-04T18:10:50Z"}, "message": "Type the self parameter", "tree": {"sha": "83ddf3395d8f8eb97323bb8581bef80fd9eda846", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83ddf3395d8f8eb97323bb8581bef80fd9eda846"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/111126ed3c4f6358e0c833f80226e5192778f749", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/111126ed3c4f6358e0c833f80226e5192778f749", "html_url": "https://github.com/rust-lang/rust/commit/111126ed3c4f6358e0c833f80226e5192778f749", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/111126ed3c4f6358e0c833f80226e5192778f749/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40", "html_url": "https://github.com/rust-lang/rust/commit/ae9530addc4c5e9bbfd5c0287d3c3adb2de95e40"}], "stats": {"total": 125, "additions": 116, "deletions": 9}, "files": [{"sha": "2419d256aa5fa75e37b59f1b67a0504ebeae6aeb", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/111126ed3c4f6358e0c833f80226e5192778f749/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111126ed3c4f6358e0c833f80226e5192778f749/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=111126ed3c4f6358e0c833f80226e5192778f749", "patch": "@@ -30,6 +30,10 @@ impl MockDatabase {\n         let file_id = db.add_file(&mut source_root, \"/main.rs\", text);\n         db.query_mut(ra_db::SourceRootQuery)\n             .set(WORKSPACE, Arc::new(source_root.clone()));\n+\n+        let mut crate_graph = CrateGraph::default();\n+        crate_graph.add_crate_root(file_id);\n+        db.set_crate_graph(crate_graph);\n         (db, source_root, file_id)\n     }\n "}, {"sha": "c762ec6068eac2a765333c1dd0baf7b55a3e124e", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/111126ed3c4f6358e0c833f80226e5192778f749/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111126ed3c4f6358e0c833f80226e5192778f749/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=111126ed3c4f6358e0c833f80226e5192778f749", "patch": "@@ -918,22 +918,46 @@ pub fn infer(db: &impl HirDatabase, def_id: DefId) -> Cancelable<Arc<InferenceRe\n     let node = syntax.borrowed();\n \n     if let Some(param_list) = node.param_list() {\n+        if let Some(self_param) = param_list.self_param() {\n+            let self_type = if let Some(impl_block) = function.impl_block(db)? {\n+                if let Some(type_ref) = self_param.type_ref() {\n+                    let ty = Ty::from_ast(db, &ctx.module, type_ref)?;\n+                    ctx.insert_type_vars(ty)\n+                } else {\n+                    let ty = Ty::from_hir(db, &ctx.module, impl_block.target())?;\n+                    let ty = match self_param.flavor() {\n+                        ast::SelfParamFlavor::Owned => ty,\n+                        ast::SelfParamFlavor::Ref => Ty::Ref(Arc::new(ty), Mutability::Shared),\n+                        ast::SelfParamFlavor::MutRef => Ty::Ref(Arc::new(ty), Mutability::Mut),\n+                    };\n+                    ctx.insert_type_vars(ty)\n+                }\n+            } else {\n+                log::debug!(\n+                    \"No impl block found, but self param for function {:?}\",\n+                    def_id\n+                );\n+                ctx.new_type_var()\n+            };\n+            if let Some(self_kw) = self_param.self_kw() {\n+                ctx.type_of\n+                    .insert(LocalSyntaxPtr::new(self_kw.syntax()), self_type);\n+            }\n+        }\n         for param in param_list.params() {\n             let pat = if let Some(pat) = param.pat() {\n                 pat\n             } else {\n                 continue;\n             };\n-            if let Some(type_ref) = param.type_ref() {\n+            let ty = if let Some(type_ref) = param.type_ref() {\n                 let ty = Ty::from_ast(db, &ctx.module, type_ref)?;\n-                let ty = ctx.insert_type_vars(ty);\n-                ctx.type_of.insert(LocalSyntaxPtr::new(pat.syntax()), ty);\n+                ctx.insert_type_vars(ty)\n             } else {\n-                // TODO self param\n-                let type_var = ctx.new_type_var();\n-                ctx.type_of\n-                    .insert(LocalSyntaxPtr::new(pat.syntax()), type_var);\n+                // missing type annotation\n+                ctx.new_type_var()\n             };\n+            ctx.type_of.insert(LocalSyntaxPtr::new(pat.syntax()), ty);\n         }\n     }\n "}, {"sha": "3d3c8b260994bcc9e1d08ba218a8b9aba087160a", "filename": "crates/ra_hir/src/ty/tests/data/0007_self.txt", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111126ed3c4f6358e0c833f80226e5192778f749/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0007_self.txt", "raw_url": "https://github.com/rust-lang/rust/raw/111126ed3c4f6358e0c833f80226e5192778f749/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0007_self.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0007_self.txt?ref=111126ed3c4f6358e0c833f80226e5192778f749", "patch": "@@ -1,4 +1,6 @@\n [50; 54) 'self': [unknown]\n+[34; 38) 'self': &S\n [40; 61) '{     ...     }': ()\n [88; 109) '{     ...     }': ()\n [98; 102) 'self': [unknown]\n+[75; 79) 'self': &[unknown]"}, {"sha": "2a3bd27e25fc09084e5b6ceab49e6c122ff75d0d", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/111126ed3c4f6358e0c833f80226e5192778f749/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111126ed3c4f6358e0c833f80226e5192778f749/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=111126ed3c4f6358e0c833f80226e5192778f749", "patch": "@@ -482,6 +482,37 @@ impl<'a> PrefixExpr<'a> {\n     }\n }\n \n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n+pub enum SelfParamFlavor {\n+    /// self\n+    Owned,\n+    /// &self\n+    Ref,\n+    /// &mut self\n+    MutRef,\n+}\n+\n+impl<'a> SelfParam<'a> {\n+    pub fn flavor(&self) -> SelfParamFlavor {\n+        let borrowed = self.syntax().children().any(|n| n.kind() == AMP);\n+        if borrowed {\n+            // check for a `mut` coming after the & -- `mut &self` != `&mut self`\n+            if self\n+                .syntax()\n+                .children()\n+                .skip_while(|n| n.kind() != AMP)\n+                .any(|n| n.kind() == MUT_KW)\n+            {\n+                SelfParamFlavor::MutRef\n+            } else {\n+                SelfParamFlavor::Ref\n+            }\n+        } else {\n+            SelfParamFlavor::Owned\n+        }\n+    }\n+}\n+\n #[test]\n fn test_doc_comment_of_items() {\n     let file = SourceFileNode::parse("}, {"sha": "7df6a9c4661fd2c6a982bef127d63b86779eacee", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/111126ed3c4f6358e0c833f80226e5192778f749/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111126ed3c4f6358e0c833f80226e5192778f749/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=111126ed3c4f6358e0c833f80226e5192778f749", "patch": "@@ -3488,6 +3488,43 @@ impl<'a> ReturnExpr<'a> {\n     }\n }\n \n+// SelfKw\n+#[derive(Debug, Clone, Copy,)]\n+pub struct SelfKwNode<R: TreeRoot<RaTypes> = OwnedRoot> {\n+    pub(crate) syntax: SyntaxNode<R>,\n+}\n+pub type SelfKw<'a> = SelfKwNode<RefRoot<'a>>;\n+\n+impl<R1: TreeRoot<RaTypes>, R2: TreeRoot<RaTypes>> PartialEq<SelfKwNode<R1>> for SelfKwNode<R2> {\n+    fn eq(&self, other: &SelfKwNode<R1>) -> bool { self.syntax == other.syntax }\n+}\n+impl<R: TreeRoot<RaTypes>> Eq for SelfKwNode<R> {}\n+impl<R: TreeRoot<RaTypes>> Hash for SelfKwNode<R> {\n+    fn hash<H: Hasher>(&self, state: &mut H) { self.syntax.hash(state) }\n+}\n+\n+impl<'a> AstNode<'a> for SelfKw<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            SELF_KW => Some(SelfKw { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<R: TreeRoot<RaTypes>> SelfKwNode<R> {\n+    pub fn borrowed(&self) -> SelfKw {\n+        SelfKwNode { syntax: self.syntax.borrowed() }\n+    }\n+    pub fn owned(&self) -> SelfKwNode {\n+        SelfKwNode { syntax: self.syntax.owned() }\n+    }\n+}\n+\n+\n+impl<'a> SelfKw<'a> {}\n+\n // SelfParam\n #[derive(Debug, Clone, Copy,)]\n pub struct SelfParamNode<R: TreeRoot<RaTypes> = OwnedRoot> {\n@@ -3523,7 +3560,15 @@ impl<R: TreeRoot<RaTypes>> SelfParamNode<R> {\n }\n \n \n-impl<'a> SelfParam<'a> {}\n+impl<'a> SelfParam<'a> {\n+    pub fn type_ref(self) -> Option<TypeRef<'a>> {\n+        super::child_opt(self)\n+    }\n+\n+    pub fn self_kw(self) -> Option<SelfKw<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n \n // SlicePat\n #[derive(Debug, Clone, Copy,)]"}, {"sha": "c55e9e07a83b7ee88013a83201b106c3857cfa3c", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/111126ed3c4f6358e0c833f80226e5192778f749/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/111126ed3c4f6358e0c833f80226e5192778f749/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=111126ed3c4f6358e0c833f80226e5192778f749", "patch": "@@ -534,7 +534,8 @@ Grammar(\n                 [\"params\", \"Param\"]\n             ]\n         ),\n-        \"SelfParam\": (),\n+        \"SelfParam\": (options: [\"TypeRef\", \"SelfKw\"]),\n+        \"SelfKw\": (),\n         \"Param\": (\n             options: [ \"Pat\", \"TypeRef\" ],\n         ),"}]}