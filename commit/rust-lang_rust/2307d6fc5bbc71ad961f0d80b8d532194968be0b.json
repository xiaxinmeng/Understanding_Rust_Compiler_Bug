{"sha": "2307d6fc5bbc71ad961f0d80b8d532194968be0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMDdkNmZjNWJiYzcxYWQ5NjFmMGQ4MGI4ZDUzMjE5NDk2OGJlMGI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-08-26T11:51:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-26T11:51:13Z"}, "message": "Merge branch 'master' into memory", "tree": {"sha": "59879e3607352a5fbd38fd0c411872b21d15e236", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59879e3607352a5fbd38fd0c411872b21d15e236"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2307d6fc5bbc71ad961f0d80b8d532194968be0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2307d6fc5bbc71ad961f0d80b8d532194968be0b", "html_url": "https://github.com/rust-lang/rust/commit/2307d6fc5bbc71ad961f0d80b8d532194968be0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2307d6fc5bbc71ad961f0d80b8d532194968be0b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ce6b06d52e6b0792d9f6c3bc192cbcfb21842f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ce6b06d52e6b0792d9f6c3bc192cbcfb21842f1", "html_url": "https://github.com/rust-lang/rust/commit/8ce6b06d52e6b0792d9f6c3bc192cbcfb21842f1"}, {"sha": "54a1f079b8bbde11cf9690452430448515743bb5", "url": "https://api.github.com/repos/rust-lang/rust/commits/54a1f079b8bbde11cf9690452430448515743bb5", "html_url": "https://github.com/rust-lang/rust/commit/54a1f079b8bbde11cf9690452430448515743bb5"}], "stats": {"total": 144, "additions": 104, "deletions": 40}, "files": [{"sha": "9e41c3010879083fc327126fea04a456e160fe9a", "filename": "Cargo.lock", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/2307d6fc5bbc71ad961f0d80b8d532194968be0b/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/2307d6fc5bbc71ad961f0d80b8d532194968be0b/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=2307d6fc5bbc71ad961f0d80b8d532194968be0b", "patch": "@@ -41,6 +41,11 @@ dependencies = [\n  \"libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"bitflags\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"byteorder\"\n version = \"1.1.0\"\n@@ -63,13 +68,26 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"compiletest_rs\"\n-version = \"0.2.8\"\n+version = \"0.2.9\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"conv\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"custom_derive 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"custom_derive\"\n+version = \"0.1.7\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"dbghelp-sys\"\n version = \"0.2.0\"\n@@ -135,6 +153,23 @@ dependencies = [\n  \"lazy_static 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"magenta\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"conv 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"magenta-sys 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"magenta-sys\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"memchr\"\n version = \"1.0.1\"\n@@ -149,11 +184,12 @@ version = \"0.1.0\"\n dependencies = [\n  \"byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"compiletest_rs 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiletest_rs 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_miri 0.1.0\",\n+ \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -166,6 +202,15 @@ name = \"quote\"\n version = \"0.3.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"rand\"\n+version = \"0.3.16\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"magenta 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"regex\"\n version = \"0.2.2\"\n@@ -246,6 +291,14 @@ dependencies = [\n  \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"tempdir\"\n+version = \"0.3.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"rand 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"thread_local\"\n version = \"0.3.4\"\n@@ -292,10 +345,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"500909c4f87a9e52355b26626d890833e9e1d53ac566db76c36faa984b889699\"\n \"checksum backtrace 0.3.2 (git+https://github.com/alexcrichton/backtrace-rs)\" = \"<none>\"\n \"checksum backtrace-sys 0.1.12 (git+https://github.com/alexcrichton/backtrace-rs)\" = \"<none>\"\n+\"checksum bitflags 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aad18937a628ec6abcd26d1489012cc0e18c21798210f491af69ded9b881106d\"\n \"checksum byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff81738b726f5d099632ceaffe7fb65b90212e8dce59d518729e7e8634032d3d\"\n \"checksum cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be1057b8462184f634c3a208ee35b0f935cfd94b694b26deadccd98732088d7b\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n-\"checksum compiletest_rs 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"617b23d0ed4f57b3bcff6b5fe0a78f0010f1efb636298317665a960b6dbc0533\"\n+\"checksum compiletest_rs 0.2.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3dc4720203de7b490e2808cad3e9090e8850eed4ecd4176b246551a952f4ead7\"\n+\"checksum conv 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"78ff10625fd0ac447827aa30ea8b861fead473bb60aeb73af6c1c58caf0d1299\"\n+\"checksum custom_derive 0.1.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ef8ae57c4978a2acd8b869ce6b9ca1dfe817bff704c220209fdef2c0b75a01b9\"\n \"checksum dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97590ba53bcb8ac28279161ca943a924d1fd4a8fb3fa63302591647c4fc5b850\"\n \"checksum dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80c8b71fd71146990a9742fc06dcbbde19161a267e0ad4e572c35162f4578c90\"\n \"checksum env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ddf21e73e016298f5cb37d6ef8e8da8e39f91f9ec8b0df44b7deb16a9f8cd5b\"\n@@ -306,9 +362,12 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum libc 0.2.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb7b49972ee23d8aa1026c365a5b440ba08e35075f18c459980c7395c221ec48\"\n \"checksum log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"880f77541efa6e5cc74e76910c9884d9859683118839d6a1dc3b11e63512565b\"\n \"checksum log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d382732ea0fbc09790c4899db3255bdea0fc78b54bf234bd18a63bb603915b6\"\n+\"checksum magenta 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4bf0336886480e671965f794bc9b6fce88503563013d1bfb7a502c81fe3ac527\"\n+\"checksum magenta-sys 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"40d014c7011ac470ae28e2f76a02bfea4a8480f73e701353b49ad7a8d75f4699\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n \"checksum num-traits 0.1.40 (registry+https://github.com/rust-lang/crates.io-index)\" = \"99843c856d68d8b4313b03a17e33c4bb42ae8f6610ea81b28abe076ac721b9b0\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n+\"checksum rand 0.3.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb250fd207a4729c976794d03db689c9be1d634ab5a1c9da9492a13d8fecbcdf\"\n \"checksum regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1731164734096285ec2a5ec7fea5248ae2f5485b3feeb0115af4fda2183b2d1b\"\n \"checksum regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad890a5eef7953f55427c50575c680c42841653abd2b028b68cd223d157f62db\"\n \"checksum rustc-demangle 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3058a43ada2c2d0b92b3ae38007a2d0fa5e9db971be260e0171408a4ff471c95\"\n@@ -319,6 +378,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48b04779552e92037212c3615370f6bd57a40ebba7f20e554ff9f55e41a69a7b\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n+\"checksum tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"87974a6f5c1dfb344d733055601650059a3363de2a6104819293baff662132d6\"\n \"checksum thread_local 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1697c4b57aeeb7a536b647165a2825faddffb1d3bad386d507709bd51a90bb14\"\n \"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n \"checksum unreachable 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"382810877fe448991dfc7f0dd6e3ae5d58088fd0ea5e35189655f84e6814fa56\""}, {"sha": "0985c15aece9704dbfc940b35be735dbc3f56e4a", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2307d6fc5bbc71ad961f0d80b8d532194968be0b/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2307d6fc5bbc71ad961f0d80b8d532194968be0b/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=2307d6fc5bbc71ad961f0d80b8d532194968be0b", "patch": "@@ -37,6 +37,7 @@ cargo_miri = [\"cargo_metadata\"]\n \n [dev-dependencies]\n compiletest_rs = \"0.2.6\"\n+tempdir = \"0.3\"\n \n [workspace]\n exclude = [\"xargo\", \"cargo-miri-test\", \"rustc_tests\"]"}, {"sha": "6596cf951fd9eb99433a7ad582160d72234035a2", "filename": "src/librustc_mir/interpret/terminator/drop.rs", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2307d6fc5bbc71ad961f0d80b8d532194968be0b/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2307d6fc5bbc71ad961f0d80b8d532194968be0b/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fdrop.rs?ref=2307d6fc5bbc71ad961f0d80b8d532194968be0b", "patch": "@@ -1,8 +1,8 @@\n-use rustc::mir;\n+use rustc::mir::BasicBlock;\n use rustc::ty::{self, Ty};\n use syntax::codemap::Span;\n \n-use interpret::{EvalResult, EvalContext, StackPopCleanup, Lvalue, LvalueExtra, PrimVal, Value,\n+use interpret::{EvalResult, EvalContext, Lvalue, LvalueExtra, PrimVal, Value,\n                 Machine, ValTy};\n \n impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n@@ -12,6 +12,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         instance: ty::Instance<'tcx>,\n         ty: Ty<'tcx>,\n         span: Span,\n+        target: BasicBlock,\n     ) -> EvalResult<'tcx> {\n         trace!(\"drop_lvalue: {:#?}\", lval);\n         // We take the address of the object.  This may well be unaligned, which is fine for us here.\n@@ -32,57 +33,51 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             } => ptr.ptr.to_value(),\n             _ => bug!(\"force_allocation broken\"),\n         };\n-        self.drop(val, instance, ty, span)\n+        self.drop(val, instance, ty, span, target)\n     }\n-    pub(crate) fn drop(\n+\n+    fn drop(\n         &mut self,\n         arg: Value,\n-        mut instance: ty::Instance<'tcx>,\n+        instance: ty::Instance<'tcx>,\n         ty: Ty<'tcx>,\n         span: Span,\n+        target: BasicBlock,\n     ) -> EvalResult<'tcx> {\n         trace!(\"drop: {:#?}, {:?}, {:?}\", arg, ty.sty, instance.def);\n \n-        if let ty::InstanceDef::DropGlue(_, None) = instance.def {\n-            trace!(\"nothing to do, aborting\");\n-            // we don't actually need to drop anything\n-            return Ok(());\n-        }\n-        let mir = match ty.sty {\n+        let instance = match ty.sty {\n             ty::TyDynamic(..) => {\n                 let vtable = match arg {\n                     Value::ByValPair(_, PrimVal::Ptr(vtable)) => vtable,\n                     _ => bug!(\"expected fat ptr, got {:?}\", arg),\n                 };\n                 match self.read_drop_type_from_vtable(vtable)? {\n-                    Some(func) => {\n-                        instance = func;\n-                        self.load_mir(func.def)?\n-                    }\n+                    Some(func) => func,\n                     // no drop fn -> bail out\n-                    None => return Ok(()),\n+                    None => {\n+                        self.goto_block(target);\n+                        return Ok(())\n+                    },\n                 }\n             }\n-            _ => self.load_mir(instance.def)?,\n+            _ => instance,\n         };\n \n-        self.push_stack_frame(\n-            instance,\n-            span,\n-            mir,\n-            Lvalue::undef(),\n-            StackPopCleanup::None,\n-        )?;\n-\n-        let mut arg_locals = self.frame().mir.args_iter();\n-        assert_eq!(self.frame().mir.arg_count, 1);\n-        let arg_local = arg_locals.next().unwrap();\n-        let dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n-        let arg_ty = self.tcx.mk_mut_ptr(ty);\n+        // the drop function expects a reference to the value\n         let valty = ValTy {\n             value: arg,\n-            ty: arg_ty,\n+            ty: self.tcx.mk_mut_ptr(ty),\n         };\n-        self.write_value(valty, dest)\n+\n+        let fn_sig = self.tcx.fn_sig(instance.def_id()).skip_binder().clone();\n+\n+        self.eval_fn_call(\n+            instance,\n+            Some((Lvalue::undef(), target)),\n+            &vec![valty],\n+            span,\n+            fn_sig,\n+        )\n     }\n }"}, {"sha": "60893fcec18b3102134afe424f7e34b966cf1b05", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2307d6fc5bbc71ad961f0d80b8d532194968be0b/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2307d6fc5bbc71ad961f0d80b8d532194968be0b/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=2307d6fc5bbc71ad961f0d80b8d532194968be0b", "patch": "@@ -111,19 +111,19 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n                 target,\n                 ..\n             } => {\n-                trace!(\"TerminatorKind::drop: {:?}, {:?}\", location, self.substs());\n                 // FIXME(CTFE): forbid drop in const eval\n                 let lval = self.eval_lvalue(location)?;\n                 let ty = self.lvalue_ty(location);\n-                self.goto_block(target);\n                 let ty = eval_context::apply_param_substs(self.tcx, self.substs(), &ty);\n+                trace!(\"TerminatorKind::drop: {:?}, type {}\", location, ty);\n \n                 let instance = eval_context::resolve_drop_in_place(self.tcx, ty);\n                 self.drop_lvalue(\n                     lval,\n                     instance,\n                     ty,\n                     terminator.source_info.span,\n+                    target,\n                 )?;\n             }\n "}, {"sha": "7a220ec76276824ac25341289c99e3c36df6e961", "filename": "tests/compiletest.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2307d6fc5bbc71ad961f0d80b8d532194968be0b/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2307d6fc5bbc71ad961f0d80b8d532194968be0b/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=2307d6fc5bbc71ad961f0d80b8d532194968be0b", "patch": "@@ -1,10 +1,12 @@\n #![feature(slice_concat_ext)]\n \n extern crate compiletest_rs as compiletest;\n+extern crate tempdir;\n \n use std::slice::SliceConcatExt;\n use std::path::{PathBuf, Path};\n use std::io::Write;\n+use tempdir::TempDir;\n \n macro_rules! eprintln {\n     ($($arg:tt)*) => {\n@@ -35,8 +37,10 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: b\n         path,\n         target\n     );\n-    let mut config = compiletest::default_config();\n+    let build_dir = TempDir::new(\"miri-tests\").unwrap();\n+    let mut config = compiletest::Config::default();\n     config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n+    config.build_base = build_dir.path().to_owned();\n     config.rustc_path = miri_path();\n     let mut flags = Vec::new();\n     if rustc_test_suite().is_some() {\n@@ -66,8 +70,10 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: b\n \n fn run_pass(path: &str) {\n     eprintln!(\"## Running run-pass tests in {} against rustc\", path);\n-    let mut config = compiletest::default_config();\n+    let build_dir = TempDir::new(\"miri-tests\").unwrap();\n+    let mut config = compiletest::Config::default();\n     config.mode = \"run-pass\".parse().expect(\"Invalid mode\");\n+    config.build_base = build_dir.path().to_owned();\n     config.src_base = PathBuf::from(path);\n     if let Some(rustc_path) = rustc_test_suite() {\n         config.rustc_path = rustc_path;\n@@ -89,8 +95,10 @@ fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool, opt: bool) {\n         target,\n         opt_str\n     );\n-    let mut config = compiletest::default_config();\n+    let build_dir = TempDir::new(\"miri-tests\").unwrap();\n+    let mut config = compiletest::Config::default();\n     config.mode = \"mir-opt\".parse().expect(\"Invalid mode\");\n+    config.build_base = build_dir.path().to_owned();\n     config.src_base = PathBuf::from(path);\n     config.target = target.to_owned();\n     config.host = host.to_owned();"}]}