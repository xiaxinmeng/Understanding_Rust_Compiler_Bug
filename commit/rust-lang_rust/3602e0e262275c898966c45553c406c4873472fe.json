{"sha": "3602e0e262275c898966c45553c406c4873472fe", "node_id": "C_kwDOAAsO6NoAKDM2MDJlMGUyNjIyNzVjODk4OTY2YzQ1NTUzYzQwNmM0ODczNDcyZmU", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-01-15T01:51:30Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-02-07T19:54:40Z"}, "message": "Don't match any projection predicates when the obligation has inference types or consts in GAT substs", "tree": {"sha": "d5c160e725fc0fa6c1e52cbb49209ab63847aeb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d5c160e725fc0fa6c1e52cbb49209ab63847aeb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3602e0e262275c898966c45553c406c4873472fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3602e0e262275c898966c45553c406c4873472fe", "html_url": "https://github.com/rust-lang/rust/commit/3602e0e262275c898966c45553c406c4873472fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3602e0e262275c898966c45553c406c4873472fe/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5e414843ebfe25674d8e18a5369d6249fdee741", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5e414843ebfe25674d8e18a5369d6249fdee741", "html_url": "https://github.com/rust-lang/rust/commit/c5e414843ebfe25674d8e18a5369d6249fdee741"}], "stats": {"total": 66, "additions": 64, "deletions": 2}, "files": [{"sha": "9a7d06ef6406d7e50c59b13be3f58456228814ed", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3602e0e262275c898966c45553c406c4873472fe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3602e0e262275c898966c45553c406c4873472fe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=3602e0e262275c898966c45553c406c4873472fe", "patch": "@@ -2470,8 +2470,8 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let projection_ty = ty::ProjectionTy {\n                     // `T`\n                     substs: self.tcx.mk_substs_trait(\n-                        trait_pred.self_ty().skip_binder(),\n-                        self.fresh_substs_for_item(span, item_def_id),\n+                        trait_ref.self_ty().skip_binder(),\n+                        &self.fresh_substs_for_item(span, item_def_id)[1..],\n                     ),\n                     // `Future::Output`\n                     item_def_id,"}, {"sha": "562535b0fea397c4ceee50b44791a1a6288970be", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3602e0e262275c898966c45553c406c4873472fe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3602e0e262275c898966c45553c406c4873472fe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=3602e0e262275c898966c45553c406c4873472fe", "patch": "@@ -1521,6 +1521,16 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             infer_predicate.projection_ty\n         };\n \n+        // If the obligation contains any inference types or consts in associated\n+        // type substs, then we don't match any projection candidates against it.\n+        // This isn't really correct, but otherwise we can end up in a case where\n+        // we constrain inference variables by selecting a single predicate, when\n+        // we need to stay general. See issue #91762.\n+        let (_, predicate_own_substs) =\n+            obligation.predicate.trait_ref_and_own_substs(self.infcx.tcx);\n+        if predicate_own_substs.iter().any(|g| g.has_infer_types_or_consts()) {\n+            return false;\n+        }\n         self.infcx\n             .at(&obligation.cause, obligation.param_env)\n             .sup(obligation.predicate, infer_projection)"}, {"sha": "e39a127abfd819407b13f85a9974a328b4dbaaf8", "filename": "src/test/ui/generic-associated-types/issue-91762.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3602e0e262275c898966c45553c406c4873472fe/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3602e0e262275c898966c45553c406c4873472fe/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.rs?ref=3602e0e262275c898966c45553c406c4873472fe", "patch": "@@ -0,0 +1,30 @@\n+// check-fail\n+\n+// FIXME(generic_associated_types): We almost certaintly want this to pass, but\n+// it's particularly difficult currently, because we need a way of specifying\n+// that `<Self::Base as Functor>::With<T> = Self` without using that when we have\n+// a `U`. See `https://github.com/rust-lang/rust/pull/92728` for a (hacky)\n+// solution. This might be better to just wait for Chalk.\n+\n+#![feature(generic_associated_types)]\n+\n+pub trait Functor {\n+    type With<T>;\n+\n+    fn fmap<T, U>(this: Self::With<T>) -> Self::With<U>;\n+}\n+\n+pub trait FunctorExt<T>: Sized {\n+    type Base: Functor<With<T> = Self>;\n+\n+    fn fmap<U>(self) {\n+        let arg: <Self::Base as Functor>::With<T>;\n+        let ret: <Self::Base as Functor>::With<U>;\n+\n+        arg = self;\n+        ret = <Self::Base as Functor>::fmap(arg);\n+        //~^ mismatched types\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "e177e151d8aac87511cf70d6c39023a1454a95b9", "filename": "src/test/ui/generic-associated-types/issue-91762.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3602e0e262275c898966c45553c406c4873472fe/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3602e0e262275c898966c45553c406c4873472fe/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-91762.stderr?ref=3602e0e262275c898966c45553c406c4873472fe", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-91762.rs:25:45\n+   |\n+LL | / pub trait FunctorExt<T>: Sized {\n+LL | |     type Base: Functor<With<T> = Self>;\n+LL | |\n+LL | |     fn fmap<U>(self) {\n+...  |\n+LL | |         ret = <Self::Base as Functor>::fmap(arg);\n+   | |                                             ^^^ expected associated type, found type parameter `Self`\n+LL | |\n+LL | |     }\n+LL | | }\n+   | |_- this type parameter\n+   |\n+   = note: expected associated type `<<Self as FunctorExt<T>>::Base as Functor>::With<_>`\n+               found type parameter `Self`\n+   = note: you might be missing a type parameter or trait bound\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}