{"sha": "deeb025f39a39fc58fc87900d62550dada849e1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZWIwMjVmMzlhMzlmYzU4ZmM4NzkwMGQ2MjU1MGRhZGE4NDllMWI=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-10T08:05:50Z"}, "committer": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-11-11T01:58:58Z"}, "message": "Address review comments 2", "tree": {"sha": "74ffba5a278a75b8f4592a723dc811a5b5830b12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74ffba5a278a75b8f4592a723dc811a5b5830b12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deeb025f39a39fc58fc87900d62550dada849e1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deeb025f39a39fc58fc87900d62550dada849e1b", "html_url": "https://github.com/rust-lang/rust/commit/deeb025f39a39fc58fc87900d62550dada849e1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deeb025f39a39fc58fc87900d62550dada849e1b/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43423f67a0f260c41181c5b2c1d25757f6b6babe", "url": "https://api.github.com/repos/rust-lang/rust/commits/43423f67a0f260c41181c5b2c1d25757f6b6babe", "html_url": "https://github.com/rust-lang/rust/commit/43423f67a0f260c41181c5b2c1d25757f6b6babe"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "87365de90470df51b42e92f9fbcb0240cf108c22", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deeb025f39a39fc58fc87900d62550dada849e1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deeb025f39a39fc58fc87900d62550dada849e1b/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=deeb025f39a39fc58fc87900d62550dada849e1b", "patch": "@@ -938,7 +938,7 @@ fn var_name(tcx: TyCtxt<'_>, var_hir_id: hir::HirId) -> Symbol {\n /// }\n /// ```\n /// `CaptureKind` associated with both `E1` and `E2` will be ByRef(MutBorrow),\n-/// and both have an expression associated, however for diagnostics we prfer reporting\n+/// and both have an expression associated, however for diagnostics we prefer reporting\n /// `E1` since it appears earlier in the closure body. When `E2` is being processed we\n /// would've already handled `E1`, and have an existing capture_information for it.\n /// Calling `determine_capture_info(existing_info_e1, current_info_e2)` will return"}, {"sha": "01c28aa29fb8eab02f73a8711d88d8768ea38c6e", "filename": "src/test/ui/closures/2229_closure_analysis/arrays-completely-captured.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Farrays-completely-captured.rs?ref=deeb025f39a39fc58fc87900d62550dada849e1b", "patch": "@@ -11,7 +11,7 @@ fn main() {\n     || {\n         m[0] += 10;\n         //~^ ERROR: Capturing m[] -> MutBorrow\n-        //~^^ ERROR: Min Capture m[] -> MutBorrow\n+        //~| ERROR: Min Capture m[] -> MutBorrow\n         m[1] += 40;\n     };\n "}, {"sha": "b50c2d66d94b470f11ef60add741d93afa5e66ce", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-struct.rs?ref=deeb025f39a39fc58fc87900d62550dada849e1b", "patch": "@@ -17,7 +17,7 @@ fn main() {\n     || {\n         println!(\"{}\", p.x);\n         //~^ ERROR: Capturing p[(0, 0)] -> ImmBorrow\n-        //~^^ ERROR: Min Capture p[(0, 0)] -> ImmBorrow\n+        //~| ERROR: Min Capture p[(0, 0)] -> ImmBorrow\n     };\n \n     // `c` should only capture `p.x`, therefore mutating `p.y` is allowed."}, {"sha": "99095c71986638681246060ed3d81dd3aba00471", "filename": "src/test/ui/closures/2229_closure_analysis/capture-disjoint-field-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fcapture-disjoint-field-tuple.rs?ref=deeb025f39a39fc58fc87900d62550dada849e1b", "patch": "@@ -12,7 +12,7 @@ fn main() {\n     || {\n         println!(\"{}\", t.0);\n         //~^ ERROR: Capturing t[(0, 0)] -> ImmBorrow\n-        //~^^ ERROR: Min Capture t[(0, 0)] -> ImmBorrow\n+        //~| ERROR: Min Capture t[(0, 0)] -> ImmBorrow\n     };\n \n     // `c` only captures t.0, therefore mutating t.1 is allowed."}, {"sha": "eef8fd6e55748aab3f37f82d5adbaa522c6bbac7", "filename": "src/test/ui/closures/2229_closure_analysis/destructure_patterns.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fdestructure_patterns.rs?ref=deeb025f39a39fc58fc87900d62550dada849e1b", "patch": "@@ -12,7 +12,7 @@ fn arrays() {\n     || {\n         let [a, b, .., e] = arr;\n         //~^ ERROR: Capturing arr[Index] -> ByValue\n-        //~^^ ERROR: Min Capture arr[] -> ByValue\n+        //~| ERROR: Min Capture arr[] -> ByValue\n         assert_eq!(a, \"A\");\n         assert_eq!(b, \"B\");\n         assert_eq!(e, \"E\");\n@@ -35,9 +35,9 @@ fn structs() {\n     || {\n         let Point { x: ref mut x, y: _, id: moved_id } = p;\n         //~^ ERROR: Capturing p[(0, 0)] -> MutBorrow\n-        //~^^ ERROR: Capturing p[(2, 0)] -> ByValue\n-        //~^^^ ERROR: Min Capture p[(0, 0)] -> MutBorrow\n-        //~^^^^ ERROR: Min Capture p[(2, 0)] -> ByValue\n+        //~| ERROR: Capturing p[(2, 0)] -> ByValue\n+        //~| ERROR: Min Capture p[(0, 0)] -> MutBorrow\n+        //~| ERROR: Min Capture p[(2, 0)] -> ByValue\n \n         println!(\"{}, {}\", x, moved_id);\n     };\n@@ -52,11 +52,11 @@ fn tuples() {\n     || {\n         let (ref mut x, ref ref_str, (moved_s, _)) = t;\n         //~^ ERROR: Capturing t[(0, 0)] -> MutBorrow\n-        //~^^ ERROR: Capturing t[(1, 0)] -> ImmBorrow\n-        //~^^^ ERROR: Capturing t[(2, 0),(0, 0)] -> ByValue\n-        //~^^^^ ERROR: Min Capture t[(0, 0)] -> MutBorrow\n-        //~^^^^^ ERROR: Min Capture t[(1, 0)] -> ImmBorrow\n-        //~^^^^^^ ERROR: Min Capture t[(2, 0),(0, 0)] -> ByValue\n+        //~| ERROR: Capturing t[(1, 0)] -> ImmBorrow\n+        //~| ERROR: Capturing t[(2, 0),(0, 0)] -> ByValue\n+        //~| ERROR: Min Capture t[(0, 0)] -> MutBorrow\n+        //~| ERROR: Min Capture t[(1, 0)] -> ImmBorrow\n+        //~| ERROR: Min Capture t[(2, 0),(0, 0)] -> ByValue\n \n         println!(\"{}, {} {}\", x, ref_str, moved_s);\n     };"}, {"sha": "ee55e3a3f2181265a6384d3ee8184c9a24608f05", "filename": "src/test/ui/closures/2229_closure_analysis/feature-gate-capture_disjoint_fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffeature-gate-capture_disjoint_fields.rs?ref=deeb025f39a39fc58fc87900d62550dada849e1b", "patch": "@@ -10,6 +10,6 @@ fn main() {\n     || {\n         println!(\"This uses new capture analyysis to capture s={}\", s);\n         //~^ ERROR: Capturing s[] -> ImmBorrow\n-        //~^^ ERROR: Min Capture s[] -> ImmBorrow\n+        //~| ERROR: Min Capture s[] -> ImmBorrow\n     };\n }"}, {"sha": "d526934271c4b05c0d15b647ef894ae5dda34041", "filename": "src/test/ui/closures/2229_closure_analysis/filter-on-struct-member.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Ffilter-on-struct-member.rs?ref=deeb025f39a39fc58fc87900d62550dada849e1b", "patch": "@@ -25,7 +25,7 @@ impl Data {\n             #[rustc_capture_analysis]\n             |v| self.filter.allowed(*v),\n             //~^ ERROR: Capturing self[Deref,(0, 0)] -> ImmBorrow\n-            //~^^ ERROR: Min Capture self[Deref,(0, 0)] -> ImmBorrow\n+            //~| ERROR: Min Capture self[Deref,(0, 0)] -> ImmBorrow\n         );\n     }\n }"}, {"sha": "08c9aa8eff84936db744a32a06d84a88d22f7c77", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-1.rs?ref=deeb025f39a39fc58fc87900d62550dada849e1b", "patch": "@@ -24,7 +24,7 @@ fn main() {\n     || {\n         let wp = &w.p;\n         //~^ ERROR: Capturing w[(0, 0)] -> ImmBorrow\n-        //~^^ ERROR: Min Capture w[(0, 0)] -> ImmBorrow\n+        //~| ERROR: Min Capture w[(0, 0)] -> ImmBorrow\n         println!(\"{}\", wp.x);\n     };\n "}, {"sha": "020753a71bf3f88682ac82d1ce03167a73522bb2", "filename": "src/test/ui/closures/2229_closure_analysis/multilevel-path-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fmultilevel-path-2.rs?ref=deeb025f39a39fc58fc87900d62550dada849e1b", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     || {\n         println!(\"{}\", w.p.x);\n         //~^ ERROR: Capturing w[(0, 0),(0, 0)] -> ImmBorrow\n-        //~^^ ERROR: Min Capture w[(0, 0),(0, 0)] -> ImmBorrow\n+        //~| ERROR: Min Capture w[(0, 0),(0, 0)] -> ImmBorrow\n     };\n \n     // `c` only captures `w.p.x`, therefore it's safe to mutate `w.p.y`."}, {"sha": "d2e99fe4accf6f164478372d259dda16c8c784f0", "filename": "src/test/ui/closures/2229_closure_analysis/nested-closure.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fnested-closure.rs?ref=deeb025f39a39fc58fc87900d62550dada849e1b", "patch": "@@ -23,17 +23,17 @@ fn main() {\n     || {\n         println!(\"{}\", p.x);\n         //~^ ERROR: Capturing p[(0, 0)] -> ImmBorrow\n-        //~^^ ERROR: Min Capture p[(0, 0)] -> ImmBorrow\n+        //~| ERROR: Min Capture p[(0, 0)] -> ImmBorrow\n         let incr = 10;\n         let mut c2 = #[rustc_capture_analysis]\n         //~^ ERROR: attributes on expressions are experimental\n         || p.y += incr;\n         //~^ ERROR: Capturing p[(1, 0)] -> MutBorrow\n-        //~^^ ERROR: Capturing incr[] -> ImmBorrow\n-        //~^^^ ERROR: Min Capture p[(1, 0)] -> MutBorrow\n-        //~^^^^ ERROR: Min Capture incr[] -> ImmBorrow\n-        //~^^^^^ ERROR: Capturing p[(1, 0)] -> MutBorrow\n-        //~^^^^^^ ERROR: Min Capture p[(1, 0)] -> MutBorrow\n+        //~| ERROR: Capturing incr[] -> ImmBorrow\n+        //~| ERROR: Min Capture p[(1, 0)] -> MutBorrow\n+        //~| ERROR: Min Capture incr[] -> ImmBorrow\n+        //~| ERROR: Capturing p[(1, 0)] -> MutBorrow\n+        //~| ERROR: Min Capture p[(1, 0)] -> MutBorrow\n         c2();\n         println!(\"{}\", p.y);\n     };"}, {"sha": "4a42970137ffffe2697490d29edc6ed235fd3045", "filename": "src/test/ui/closures/2229_closure_analysis/path-with-array-access.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fpath-with-array-access.rs?ref=deeb025f39a39fc58fc87900d62550dada849e1b", "patch": "@@ -25,6 +25,6 @@ fn main() {\n     || {\n         println!(\"{}\", pent.points[5].x);\n         //~^ ERROR: Capturing pent[(0, 0)] -> ImmBorrow\n-        //~^^ ERROR: Min Capture pent[(0, 0)] -> ImmBorrow\n+        //~| ERROR: Min Capture pent[(0, 0)] -> ImmBorrow\n     };\n }"}, {"sha": "68c18eac8048e1d2066f1afba90988a51702441d", "filename": "src/test/ui/closures/2229_closure_analysis/simple-struct-min-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fsimple-struct-min-capture.rs?ref=deeb025f39a39fc58fc87900d62550dada849e1b", "patch": "@@ -27,7 +27,7 @@ fn main() {\n     || {\n         p.x += 10;\n         //~^ ERROR: Capturing p[(0, 0)] -> MutBorrow\n-        //~^^ ERROR: Min Capture p[] -> MutBorrow\n+        //~| ERROR: Min Capture p[] -> MutBorrow\n         println!(\"{:?}\", p);\n         //~^ ERROR: Capturing p[] -> ImmBorrow\n     };"}, {"sha": "889836c11ce8891094dde4c855f8ca081b135743", "filename": "src/test/ui/closures/2229_closure_analysis/wild_patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deeb025f39a39fc58fc87900d62550dada849e1b/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2F2229_closure_analysis%2Fwild_patterns.rs?ref=deeb025f39a39fc58fc87900d62550dada849e1b", "patch": "@@ -23,7 +23,7 @@ fn wild_struct() {\n         // FIXME(arora-aman): Change `_x` to `_`\n         let Point { x: _x, y: _ } = p;\n         //~^ ERROR: Capturing p[(0, 0)] -> ImmBorrow\n-        //~^^ ERROR: Min Capture p[(0, 0)] -> ImmBorrow\n+        //~| ERROR: Min Capture p[(0, 0)] -> ImmBorrow\n     };\n \n     c();\n@@ -38,7 +38,7 @@ fn wild_tuple() {\n         // FIXME(arora-aman): Change `_x` to `_`\n         let (_x, _) = t;\n         //~^ ERROR: Capturing t[(0, 0)] -> ByValue\n-        //~^^ ERROR: Min Capture t[(0, 0)] -> ByValue\n+        //~| ERROR: Min Capture t[(0, 0)] -> ByValue\n     };\n \n     c();\n@@ -53,7 +53,7 @@ fn wild_arr() {\n         // FIXME(arora-aman): Change `_x` to `_`\n         let [_x, _] = arr;\n         //~^ ERROR: Capturing arr[Index] -> ByValue\n-        //~^^ ERROR: Min Capture arr[] -> ByValue\n+        //~| ERROR: Min Capture arr[] -> ByValue\n     };\n \n     c();"}]}