{"sha": "4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiOTdiNGU3OWRiNzBjYTRlZDZiOTAyNmM4Nzg1OGU5N2U5MmNjNjc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-07-26T22:20:13Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-07-26T22:22:21Z"}, "message": "Move the test suite to the \"as\" form for casts. XFAIL a few tests for LLVM.", "tree": {"sha": "91e35aeb9f5d0f179d2af7e21894bd555a515f0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e35aeb9f5d0f179d2af7e21894bd555a515f0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "html_url": "https://github.com/rust-lang/rust/commit/4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ec5efd25778e64ca273edd650d7606675aaba208", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec5efd25778e64ca273edd650d7606675aaba208", "html_url": "https://github.com/rust-lang/rust/commit/ec5efd25778e64ca273edd650d7606675aaba208"}], "stats": {"total": 154, "additions": 79, "deletions": 75}, "files": [{"sha": "8e88f0052818830cc94035e81b58344bfc4df82f", "filename": "src/Makefile", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -468,6 +468,10 @@ TEST_XFAILS_LLVM := $(addprefix test/run-pass/, \\\n                       task-comm-5.rs \\\n                       threads.rs \\\n                       type-sizes.rs \\\n+                      u8-incr.rs \\\n+                      u8-incr-decr.rs \\\n+                      u32-decr.rs \\\n+                      uint.rs \\\n                       unit.rs \\\n                       use-import-export.rs \\\n                       user.rs \\"}, {"sha": "cd455fb4ba7813a80c166c5b8470537117a6ea16", "filename": "src/test/run-fail/str-overrun.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-fail%2Fstr-overrun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-fail%2Fstr-overrun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fstr-overrun.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -5,12 +5,12 @@\n fn main() {\n   let str s = \"hello\";\n   let int x = 0;\n-  check (s.(x) == u8(0x68));\n+  check (s.(x) == (0x68 as u8));\n \n   // NB: at the moment a string always has a trailing NULL,\n   // so the largest index value on the string above is 5, not\n   // 4. Possibly change this.\n \n   // Bounds-check failure.\n-  check (s.(x + 6) == u8(0x0));\n+  check (s.(x + 6) == (0x0 as u8));\n }"}, {"sha": "e04ad62939d213da5d6bd988b7034bdad50ed939", "filename": "src/test/run-pass/cast.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -2,15 +2,15 @@\n \n \n fn main() {\n-  let int i = int('Q');\n+  let int i = 'Q' as int;\n   check (i == 0x51);\n-  let u32 u = u32(i);\n-  check (u == u32(0x51));\n-  check (u == u32('Q'));\n-  check (i8(i) == i8('Q'));\n-  check (i8(u8(i)) == i8(u8('Q')));\n-  check (char(0x51) == 'Q');\n+  let u32 u = i as u32;\n+  check (u == (0x51 as u32));\n+  check (u == ('Q' as u32));\n+  check ((i as u8) == ('Q' as u8));\n+  check (((i as u8) as i8) == (('Q' as u8) as i8));\n+  check ((0x51 as char) == 'Q');\n \n-  check (true == bool(1));\n-  check (u32(0) == u32(false));\n+  check (true == (1 as bool));\n+  check ((0 as u32) == (false as u32));\n }"}, {"sha": "2a50ccd2bb175cd9dad662f4985af9f47445c492", "filename": "src/test/run-pass/generic-obj-with-derived-type.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-obj-with-derived-type.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -6,12 +6,12 @@ obj handle[T](T data) {\n \n fn main() {\n   type rgb = tup(u8,u8,u8);\n-  let handle[rgb] h = handle[rgb](tup(u8(1), u8(2), u8(3)));\n+  let handle[rgb] h = handle[rgb](tup(1 as u8, 2 as u8, 3 as u8));\n   log \"constructed object\";\n   log h.get()._0;\n   log h.get()._1;\n   log h.get()._2;\n-  check (h.get()._0 == u8(1));\n-  check (h.get()._1 == u8(2));\n-  check (h.get()._2 == u8(3));\n+  check (h.get()._0 == (1 as u8));\n+  check (h.get()._1 == (2 as u8));\n+  check (h.get()._2 == (3 as u8));\n }"}, {"sha": "8bb1a5d94014484accc4524371b755976b52caf7", "filename": "src/test/run-pass/linear-for-loop.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flinear-for-loop.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -12,23 +12,23 @@ fn main() {\n   let int i = 0;\n   for (u8 c in s) {\n     if (i == 0) {\n-      check (c == u8('h'));\n+      check (c == ('h' as u8));\n     }\n     if (i == 1) {\n-      check (c == u8('e'));\n+      check (c == ('e' as u8));\n     }\n     if (i == 2) {\n-      check (c == u8('l'));\n+      check (c == ('l' as u8));\n     }\n     if (i == 3) {\n-      check (c == u8('l'));\n+      check (c == ('l' as u8));\n     }\n     if (i == 4) {\n-      check (c == u8('o'));\n+      check (c == ('o' as u8));\n     }\n     // ...\n     if (i == 12) {\n-      check (c == u8(0));\n+      check (c == (0 as u8));\n     }\n     i += 1;\n     log i;"}, {"sha": "887fb39125eef28d8b5ca28f70d544008f87bf78", "filename": "src/test/run-pass/mutable-alias-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-alias-vec.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -13,5 +13,5 @@ fn main() {\n   grow(v);\n   auto len = std._vec.len[int](v);\n   log len;\n-  check (len == uint(3));\n+  check (len == (3 as uint));\n }"}, {"sha": "85143c7924dd60077e123dc9c72f3a29361f6f2f", "filename": "src/test/run-pass/obj-with-vec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-with-vec.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -5,7 +5,7 @@ fn main() {\n       ret data.(i);\n     }\n   }\n-  auto b = buf(vec(u8(1), u8(2), u8(3)));\n+  auto b = buf(vec(1 as u8, 2 as u8, 3 as u8));\n   log b.get(1);\n-  check (b.get(1) == u8(2));\n-}\n\\ No newline at end of file\n+  check (b.get(1) == (2 as u8));\n+}"}, {"sha": "1bd052155d5e63c8e5e54d1d4fa2539eaa41a107", "filename": "src/test/run-pass/str-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fstr-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fstr-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-append.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -4,5 +4,5 @@ fn main() {\n   let str s = \"hello\";\n   s += \"world\";\n   log s;\n-  check(s.(9) == u8('d'));\n+  check(s.(9) == ('d' as u8));\n }"}, {"sha": "c906a23ef6b008b03b0a47bcef045e1d8790301c", "filename": "src/test/run-pass/str-concat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fstr-concat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-concat.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -5,5 +5,5 @@ fn main() {\n   let str b = \"world\";\n   let str s = a + b;\n   log s;\n-  check(s.(9) == u8('d'));\n+  check(s.(9) == ('d' as u8));\n }"}, {"sha": "9793799a97c7a8477f5a1413acdc14846ff2254f", "filename": "src/test/run-pass/str-idx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fstr-idx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstr-idx.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -3,5 +3,5 @@ fn main() {\n   auto s = \"hello\";\n   let u8 c = s.(4);\n   log c;\n-  check (c == u8(0x6f));\n+  check (c == (0x6f as u8));\n }"}, {"sha": "a257ee0930e65f0213c71c5ac1c9d5c93f0c3e2f", "filename": "src/test/run-pass/type-sizes.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-sizes.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -4,15 +4,15 @@ import size_of = std.sys.rustrt.size_of;\n use std;\n \n fn main() {\n-  check (size_of[u8]() == uint(1));\n-  check (size_of[u32]() == uint(4));\n-  check (size_of[char]() == uint(4));\n-  check (size_of[i8]() == uint(1));\n-  check (size_of[i32]() == uint(4));\n-  check (size_of[tup(u8,i8)]() == uint(2));\n-  check (size_of[tup(u8,i8,u8)]() == uint(3));\n+  check (size_of[u8]() == (1 as uint));\n+  check (size_of[u32]() == (4 as uint));\n+  check (size_of[char]() == (4 as uint));\n+  check (size_of[i8]() == (1 as uint));\n+  check (size_of[i32]() == (4 as uint));\n+  check (size_of[tup(u8,i8)]() == (2 as uint));\n+  check (size_of[tup(u8,i8,u8)]() == (3 as uint));\n   // Alignment causes padding before the char and the u32.\n-  check (size_of[tup(u8,i8,tup(char,u8),u32)]() == uint(16));\n+  check (size_of[tup(u8,i8,tup(char,u8),u32)]() == (16 as uint));\n   check (size_of[int]() == size_of[uint]());\n   check (size_of[tup(int,())]() == size_of[int]());\n   check (size_of[tup(int,(),())]() == size_of[int]());"}, {"sha": "cdafa0bf803dc5e189525286f8d7b6b653930903", "filename": "src/test/run-pass/u32-decr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fu32-decr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fu32-decr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu32-decr.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -1,8 +1,8 @@\n // -*- rust -*-\n \n fn main() {\n-    let u32 word = u32(200000);\n-    word = word - u32(1);\n-    check(word == u32(199999));\n+    let u32 word = (200000 as u32);\n+    word = word - (1 as u32);\n+    check(word == (199999 as u32));\n }\n "}, {"sha": "b4028f50db7a05dadada1a7de65b6ac53a3a1ef6", "filename": "src/test/run-pass/u8-incr-decr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fu8-incr-decr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fu8-incr-decr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu8-incr-decr.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -4,9 +4,9 @@\n // in the rest of the generated code so they're easily grep-able.\n \n fn main() {\n-  let u8 x = u8(19); // 0x13\n-  let u8 y = u8(35); // 0x23\n-  x = x + u8(7);     // 0x7\n-  y = y - u8(9);     // 0x9\n+  let u8 x = 19 as u8;  // 0x13\n+  let u8 y = 35 as u8;  // 0x23\n+  x = x + (7 as u8);    // 0x7\n+  y = y - (9 as u8);    // 0x9\n   check(x == y);\n }"}, {"sha": "146801e94514ab7d8becfdde04819fadf77eeee4", "filename": "src/test/run-pass/u8-incr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fu8-incr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fu8-incr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu8-incr.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -1,12 +1,12 @@\n // -*- rust -*-\n \n fn main() {\n-  let u8 x = u8(12);\n-  let u8 y = u8(12);\n-  x = x + u8(1);\n-  x = x - u8(1);\n+  let u8 x = 12 as u8;\n+  let u8 y = 12 as u8;\n+  x = x + (1 as u8);\n+  x = x - (1 as u8);\n   check(x == y);\n-  //x = u8(14);\n-  //x = x + u8(1);\n+  //x = 14 as u8;\n+  //x = x + 1 as u8;\n }\n "}, {"sha": "1b94483182730367b24fc63c51b0bc3c32c99643", "filename": "src/test/run-pass/uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuint.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -2,5 +2,5 @@\n \n \n fn main() {\n-  let uint x = uint(10);\n+  let uint x = 10 as uint;\n }"}, {"sha": "e72d0bca7c37552bd3eab880b4b3e52ad3bedcdb", "filename": "src/test/run-pass/user.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fuser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fuser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuser.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -5,10 +5,10 @@ use std (name = \"std\",\n          uuid = _, ver = _);\n \n fn main() {\n-  auto s = std._str.alloc(uint(10));\n+  auto s = std._str.alloc(10 as uint);\n   s += \"hello \";\n   log s;\n   s += \"there\";\n   log s;\n-  auto z = std._vec.alloc[int](uint(10));\n+  auto z = std._vec.alloc[int](10 as uint);\n }"}, {"sha": "5fd4dcfe96c07af5673fdc6516634a708dce8d18", "filename": "src/test/run-pass/utf8.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Futf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Futf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -5,14 +5,14 @@ fn main() {\n   let char y_diaeresis = '\u00ff'; // 0xff\n   let char pi = '\u03a0';          // 0x3a0\n \n-  check (int(yen) == 0xa5);\n-  check (int(c_cedilla) == 0xe7);\n-  check (int(thorn) == 0xfe);\n-  check (int(y_diaeresis) == 0xff);\n-  check (int(pi) == 0x3a0);\n+  check ((yen as int) == 0xa5);\n+  check ((c_cedilla as int) == 0xe7);\n+  check ((thorn as int) == 0xfe);\n+  check ((y_diaeresis as int) == 0xff);\n+  check ((pi as int) == 0x3a0);\n \n-  check (int(pi) == int('\\u03a0'));\n-  check (int('\\x0a') == int('\\n'));\n+  check ((pi as int) == ('\\u03a0' as int));\n+  check (('\\x0a' as int) == ('\\n' as int));\n \n   let str bhutan = \"\u0f60\u0f56\u0fb2\u0f74\u0f42\u0f0b\u0f61\u0f74\u0f63\u0f0d\";\n   let str japan = \"\u65e5\u672c\";\n@@ -27,7 +27,7 @@ fn main() {\n   let str austria_e = \"\\u00d6sterreich\";\n \n   let char oo = '\u00d6';\n-  check (int(oo) == 0xd6);\n+  check ((oo as int) == 0xd6);\n \n   fn check_str_eq(str a, str b) {\n     let int i = 0;\n@@ -45,4 +45,4 @@ fn main() {\n   check_str_eq(japan, japan_e);\n   check_str_eq(uzbekistan, uzbekistan_e);\n   check_str_eq(austria, austria_e);\n-}\n\\ No newline at end of file\n+}"}, {"sha": "8dba98120bbebc905d2a34e791d11375209a4a72", "filename": "src/test/run-pass/vec-alloc-append.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fvec-alloc-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fvec-alloc-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-alloc-append.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -3,7 +3,7 @@\n use std;\n \n fn slice[T](vec[T] e) {\n-  let vec[T] result = std._vec.alloc[T](uint(1));\n+  let vec[T] result = std._vec.alloc[T](1 as uint);\n   log \"alloced\";\n   result += e;\n   log \"appended\";"}, {"sha": "90a95ff9a2633d56b1095e1e244c7fd05039eb00", "filename": "src/test/run-pass/vec-lib.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fvec-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b97b4e79db70ca4ed6b9026c87858e97e92cc67/src%2Ftest%2Frun-pass%2Fvec-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-lib.rs?ref=4b97b4e79db70ca4ed6b9026c87858e97e92cc67", "patch": "@@ -1,31 +1,31 @@\n use std;\n \n fn test_init_elt() {\n-  let vec[uint] v = std._vec.init_elt[uint](uint(5), uint(3));\n-  check (std._vec.len[uint](v) == uint(3));\n-  check (v.(0) == uint(5));\n-  check (v.(1) == uint(5));\n-  check (v.(2) == uint(5));\n+  let vec[uint] v = std._vec.init_elt[uint](5 as uint, 3 as uint);\n+  check (std._vec.len[uint](v) == (3 as uint));\n+  check (v.(0) == (5 as uint));\n+  check (v.(1) == (5 as uint));\n+  check (v.(2) == (5 as uint));\n }\n \n fn id(uint x) -> uint {\n   ret x;\n }\n fn test_init_fn() {\n   let fn(uint)->uint op = id;\n-  let vec[uint] v = std._vec.init_fn[uint](op, uint(5));\n-  check (std._vec.len[uint](v) == uint(5));\n-  check (v.(0) == uint(0));\n-  check (v.(1) == uint(1));\n-  check (v.(2) == uint(2));\n-  check (v.(3) == uint(3));\n-  check (v.(4) == uint(4));\n+  let vec[uint] v = std._vec.init_fn[uint](op, (5 as uint));\n+  check (std._vec.len[uint](v) == (5 as uint));\n+  check (v.(0) == (0 as uint));\n+  check (v.(1) == (1 as uint));\n+  check (v.(2) == (2 as uint));\n+  check (v.(3) == (3 as uint));\n+  check (v.(4) == (4 as uint));\n }\n \n fn test_slice() {\n   let vec[int] v = vec(1,2,3,4,5);\n   auto v2 = std._vec.slice[int](v, 2, 4);\n-  check (std._vec.len[int](v2) == uint(2));\n+  check (std._vec.len[int](v2) == (2 as uint));\n   check (v2.(0) == 3);\n   check (v2.(1) == 4);\n }"}]}