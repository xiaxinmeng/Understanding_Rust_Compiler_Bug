{"sha": "e8c17de11d02eb25b768d6c8da342d50db864711", "node_id": "C_kwDOAAsO6NoAKGU4YzE3ZGUxMWQwMmViMjViNzY4ZDZjOGRhMzQyZDUwZGI4NjQ3MTE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-26T14:02:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-26T14:02:20Z"}, "message": "Rollup merge of #106978 - mejrs:mir_build3, r=davidtwco\n\nMigrate mir_build's borrow conflicts\n\nThis also changes the error message slightly, for two reasons:\n\n- I'm not a fan of saying \"value borrowed, by `x`, here\"\n- it simplifies the error implementation significantly.", "tree": {"sha": "d365133eb8070b1e402b4ffd7049d3ad2ea48a10", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d365133eb8070b1e402b4ffd7049d3ad2ea48a10"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e8c17de11d02eb25b768d6c8da342d50db864711", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj0ofsCRBK7hj4Ov3rIwAAlUUIAJyknwUf5UZPx7opYSH1L5c9\naiDXrRvvcUKsO2Qa0lY15hPWMJi0d0WebMvxWYkttYxK/hSsioIHrCyOn+29fR5K\najS4dRIO5w2m0unItev4Dq9zUs96J3q1YqN0vOyX1Q7psiNDYGSq45FR8erq3cDM\nIGCdTZRH214d/CQgU/Gy1/VWLZgukxSQ8URuLSprhgU0JRSB9NN3J6xdh2rhzVaN\n7gRCw5Zij4U8nDdrXZlJHRod5G+1sQSMzEbNjV2acn06yN/wxhDvF+2mxPPcXKoR\n1Wp2OOM72fZx2/YD6cUL435sdRl07LvnGxwuiqkGrViEhoJMnQiVeJYB0oHIS0c=\n=2wDX\n-----END PGP SIGNATURE-----\n", "payload": "tree d365133eb8070b1e402b4ffd7049d3ad2ea48a10\nparent 4b97f075342c0597cedd36d8d901c6ac84651f73\nparent 6fe4cf795bb50e2168f9bc3f12391febc83a54c7\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1674741740 +0100\ncommitter GitHub <noreply@github.com> 1674741740 +0100\n\nRollup merge of #106978 - mejrs:mir_build3, r=davidtwco\n\nMigrate mir_build's borrow conflicts\n\nThis also changes the error message slightly, for two reasons:\n\n- I'm not a fan of saying \"value borrowed, by `x`, here\"\n- it simplifies the error implementation significantly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e8c17de11d02eb25b768d6c8da342d50db864711", "html_url": "https://github.com/rust-lang/rust/commit/e8c17de11d02eb25b768d6c8da342d50db864711", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e8c17de11d02eb25b768d6c8da342d50db864711/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b97f075342c0597cedd36d8d901c6ac84651f73", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b97f075342c0597cedd36d8d901c6ac84651f73", "html_url": "https://github.com/rust-lang/rust/commit/4b97f075342c0597cedd36d8d901c6ac84651f73"}, {"sha": "6fe4cf795bb50e2168f9bc3f12391febc83a54c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fe4cf795bb50e2168f9bc3f12391febc83a54c7", "html_url": "https://github.com/rust-lang/rust/commit/6fe4cf795bb50e2168f9bc3f12391febc83a54c7"}], "stats": {"total": 575, "additions": 302, "deletions": 273}, "files": [{"sha": "f9bda721df34dcb30830c092aa5dd918691c8b9b", "filename": "compiler/rustc_error_messages/locales/en-US/mir_build.ftl", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e8c17de11d02eb25b768d6c8da342d50db864711/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e8c17de11d02eb25b768d6c8da342d50db864711/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fmir_build.ftl?ref=e8c17de11d02eb25b768d6c8da342d50db864711", "patch": "@@ -299,10 +299,18 @@ mir_build_borrow_of_moved_value = borrow of moved value\n     .suggestion = borrow this binding in the pattern to avoid moving the value\n \n mir_build_multiple_mut_borrows = cannot borrow value as mutable more than once at a time\n-    .label = first mutable borrow, by `{$name}`, occurs here\n-    .mutable_borrow = another mutable borrow, by `{$name_mut}`, occurs here\n-    .immutable_borrow = also borrowed as immutable, by `{$name_immut}`, here\n-    .moved = also moved into `{$name_moved}` here\n+\n+mir_build_already_borrowed = cannot borrow value as mutable because it is also borrowed as immutable\n+\n+mir_build_already_mut_borrowed = cannot borrow value as immutable because it is also borrowed as mutable\n+\n+mir_build_moved_while_borrowed = cannot move out of value because it is borrowed\n+\n+mir_build_mutable_borrow = value is mutably borrowed by `{$name}` here\n+\n+mir_build_borrow = value is borrowed by `{$name}` here\n+\n+mir_build_moved = value is moved into `{$name}` here\n \n mir_build_union_pattern = cannot use unions in constant patterns\n "}, {"sha": "ced251267d36f9deb95438e76ca848604a6b8b3a", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 37, "deletions": 13, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e8c17de11d02eb25b768d6c8da342d50db864711/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c17de11d02eb25b768d6c8da342d50db864711/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=e8c17de11d02eb25b768d6c8da342d50db864711", "patch": "@@ -600,32 +600,56 @@ pub struct BorrowOfMovedValue<'tcx> {\n pub struct MultipleMutBorrows {\n     #[primary_span]\n     pub span: Span,\n-    #[label]\n-    pub binding_span: Span,\n     #[subdiagnostic]\n-    pub occurences: Vec<MultipleMutBorrowOccurence>,\n-    pub name: Ident,\n+    pub occurences: Vec<Conflict>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(mir_build_already_borrowed)]\n+pub struct AlreadyBorrowed {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub occurences: Vec<Conflict>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(mir_build_already_mut_borrowed)]\n+pub struct AlreadyMutBorrowed {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub occurences: Vec<Conflict>,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(mir_build_moved_while_borrowed)]\n+pub struct MovedWhileBorrowed {\n+    #[primary_span]\n+    pub span: Span,\n+    #[subdiagnostic]\n+    pub occurences: Vec<Conflict>,\n }\n \n #[derive(Subdiagnostic)]\n-pub enum MultipleMutBorrowOccurence {\n-    #[label(mutable_borrow)]\n-    Mutable {\n+pub enum Conflict {\n+    #[label(mir_build_mutable_borrow)]\n+    Mut {\n         #[primary_span]\n         span: Span,\n-        name_mut: Ident,\n+        name: Ident,\n     },\n-    #[label(immutable_borrow)]\n-    Immutable {\n+    #[label(mir_build_borrow)]\n+    Ref {\n         #[primary_span]\n         span: Span,\n-        name_immut: Ident,\n+        name: Ident,\n     },\n-    #[label(moved)]\n+    #[label(mir_build_moved)]\n     Moved {\n         #[primary_span]\n         span: Span,\n-        name_moved: Ident,\n+        name: Ident,\n     },\n }\n "}, {"sha": "64a47c5cc8edfe564636fb10563c1fe83ab4ad7c", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 37, "deletions": 40, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/e8c17de11d02eb25b768d6c8da342d50db864711/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e8c17de11d02eb25b768d6c8da342d50db864711/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=e8c17de11d02eb25b768d6c8da342d50db864711", "patch": "@@ -926,58 +926,55 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_, '_>, pat: &Pa\n     sub.each_binding(|_, hir_id, span, name| {\n         match typeck_results.extract_binding_mode(sess, hir_id, span) {\n             Some(ty::BindByReference(mut_inner)) => match (mut_outer, mut_inner) {\n-                (Mutability::Not, Mutability::Not) => {} // Both sides are `ref`.\n-                (Mutability::Mut, Mutability::Mut) => conflicts_mut_mut.push((span, name)), // 2x `ref mut`.\n-                _ => conflicts_mut_ref.push((span, name)), // `ref` + `ref mut` in either direction.\n+                // Both sides are `ref`.\n+                (Mutability::Not, Mutability::Not) => {}\n+                // 2x `ref mut`.\n+                (Mutability::Mut, Mutability::Mut) => {\n+                    conflicts_mut_mut.push(Conflict::Mut { span, name })\n+                }\n+                (Mutability::Not, Mutability::Mut) => {\n+                    conflicts_mut_ref.push(Conflict::Mut { span, name })\n+                }\n+                (Mutability::Mut, Mutability::Not) => {\n+                    conflicts_mut_ref.push(Conflict::Ref { span, name })\n+                }\n             },\n             Some(ty::BindByValue(_)) if is_binding_by_move(cx, hir_id) => {\n-                conflicts_move.push((span, name)) // `ref mut?` + by-move conflict.\n+                conflicts_move.push(Conflict::Moved { span, name }) // `ref mut?` + by-move conflict.\n             }\n             Some(ty::BindByValue(_)) | None => {} // `ref mut?` + by-copy is fine.\n         }\n     });\n \n+    let report_mut_mut = !conflicts_mut_mut.is_empty();\n+    let report_mut_ref = !conflicts_mut_ref.is_empty();\n+    let report_move_conflict = !conflicts_move.is_empty();\n+\n+    let mut occurences = match mut_outer {\n+        Mutability::Mut => vec![Conflict::Mut { span: binding_span, name }],\n+        Mutability::Not => vec![Conflict::Ref { span: binding_span, name }],\n+    };\n+    occurences.extend(conflicts_mut_mut);\n+    occurences.extend(conflicts_mut_ref);\n+    occurences.extend(conflicts_move);\n+\n     // Report errors if any.\n-    if !conflicts_mut_mut.is_empty() {\n+    if report_mut_mut {\n         // Report mutability conflicts for e.g. `ref mut x @ Some(ref mut y)`.\n-        let mut occurences = vec![];\n-\n-        for (span, name_mut) in conflicts_mut_mut {\n-            occurences.push(MultipleMutBorrowOccurence::Mutable { span, name_mut });\n-        }\n-        for (span, name_immut) in conflicts_mut_ref {\n-            occurences.push(MultipleMutBorrowOccurence::Immutable { span, name_immut });\n-        }\n-        for (span, name_moved) in conflicts_move {\n-            occurences.push(MultipleMutBorrowOccurence::Moved { span, name_moved });\n-        }\n-        sess.emit_err(MultipleMutBorrows { span: pat.span, binding_span, occurences, name });\n-    } else if !conflicts_mut_ref.is_empty() {\n+        sess.emit_err(MultipleMutBorrows { span: pat.span, occurences });\n+    } else if report_mut_ref {\n         // Report mutability conflicts for e.g. `ref x @ Some(ref mut y)` or the converse.\n-        let (primary, also) = match mut_outer {\n-            Mutability::Mut => (\"mutable\", \"immutable\"),\n-            Mutability::Not => (\"immutable\", \"mutable\"),\n+        match mut_outer {\n+            Mutability::Mut => {\n+                sess.emit_err(AlreadyMutBorrowed { span: pat.span, occurences });\n+            }\n+            Mutability::Not => {\n+                sess.emit_err(AlreadyBorrowed { span: pat.span, occurences });\n+            }\n         };\n-        let msg =\n-            format!(\"cannot borrow value as {} because it is also borrowed as {}\", also, primary);\n-        let mut err = sess.struct_span_err(pat.span, &msg);\n-        err.span_label(binding_span, format!(\"{} borrow, by `{}`, occurs here\", primary, name));\n-        for (span, name) in conflicts_mut_ref {\n-            err.span_label(span, format!(\"{} borrow, by `{}`, occurs here\", also, name));\n-        }\n-        for (span, name) in conflicts_move {\n-            err.span_label(span, format!(\"also moved into `{}` here\", name));\n-        }\n-        err.emit();\n-    } else if !conflicts_move.is_empty() {\n+    } else if report_move_conflict {\n         // Report by-ref and by-move conflicts, e.g. `ref x @ y`.\n-        let mut err =\n-            sess.struct_span_err(pat.span, \"cannot move out of value because it is borrowed\");\n-        err.span_label(binding_span, format!(\"value borrowed, by `{}`, here\", name));\n-        for (span, name) in conflicts_move {\n-            err.span_label(span, format!(\"value moved into `{}` here\", name));\n-        }\n-        err.emit();\n+        sess.emit_err(MovedWhileBorrowed { span: pat.span, occurences });\n     }\n }\n "}, {"sha": "5835f06753bb11242967e095fead9a0a55b747b6", "filename": "tests/ui/borrowck/bindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fbindings-after-at-or-patterns-slice-patterns-box-patterns.stderr?ref=e8c17de11d02eb25b768d6c8da342d50db864711", "patch": "@@ -4,17 +4,17 @@ error: cannot borrow value as mutable because it is also borrowed as immutable\n LL |         ref foo @ [.., ref mut bar] => (),\n    |         -------^^^^^^^^-----------^\n    |         |              |\n-   |         |              mutable borrow, by `bar`, occurs here\n-   |         immutable borrow, by `foo`, occurs here\n+   |         |              value is mutably borrowed by `bar` here\n+   |         value is borrowed by `foo` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:120:9\n    |\n LL |         ref foo @ Some(box ref mut s) => (),\n    |         -------^^^^^^^^^^^^---------^\n    |         |                  |\n-   |         |                  mutable borrow, by `s`, occurs here\n-   |         immutable borrow, by `foo`, occurs here\n+   |         |                  value is mutably borrowed by `s` here\n+   |         value is borrowed by `foo` here\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/bindings-after-at-or-patterns-slice-patterns-box-patterns.rs:18:5"}, {"sha": "29cd6c45c34b58410d02148ea7ca9b83754a7ae4", "filename": "tests/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=e8c17de11d02eb25b768d6c8da342d50db864711", "patch": "@@ -4,8 +4,8 @@ error: cannot move out of value because it is borrowed\n LL |         Some(ref _y @ _z) => {}\n    |              ------^^^--\n    |              |        |\n-   |              |        value moved into `_z` here\n-   |              value borrowed, by `_y`, here\n+   |              |        value is moved into `_z` here\n+   |              value is borrowed by `_y` here\n \n error: borrow of moved value\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:19:14\n@@ -28,8 +28,8 @@ error: cannot move out of value because it is borrowed\n LL |         Some(ref mut _y @ _z) => {}\n    |              ----------^^^--\n    |              |            |\n-   |              |            value moved into `_z` here\n-   |              value borrowed, by `_y`, here\n+   |              |            value is moved into `_z` here\n+   |              value is mutably borrowed by `_y` here\n \n error: borrow of moved value\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:33:14"}, {"sha": "2c123b01e173e7c12f5217aebd80ef72001692f2", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=e8c17de11d02eb25b768d6c8da342d50db864711", "patch": "@@ -4,71 +4,71 @@ error: cannot move out of value because it is borrowed\n LL |     let ref a @ box b = Box::new(NC);\n    |         -----^^^^^^^-\n    |         |           |\n-   |         |           value moved into `b` here\n-   |         value borrowed, by `a`, here\n+   |         |           value is moved into `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-at-and-box.rs:34:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(nc());\n    |         -----^^^^^^^---------\n    |         |           |\n-   |         |           mutable borrow, by `b`, occurs here\n-   |         immutable borrow, by `a`, occurs here\n+   |         |           value is mutably borrowed by `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-at-and-box.rs:36:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n    |         |           |\n-   |         |           mutable borrow, by `b`, occurs here\n-   |         immutable borrow, by `a`, occurs here\n+   |         |           value is mutably borrowed by `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-at-and-box.rs:38:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n    |         |           |\n-   |         |           mutable borrow, by `b`, occurs here\n-   |         immutable borrow, by `a`, occurs here\n+   |         |           value is mutably borrowed by `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-at-and-box.rs:42:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n    |         |           |\n-   |         |           mutable borrow, by `b`, occurs here\n-   |         immutable borrow, by `a`, occurs here\n+   |         |           value is mutably borrowed by `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-at-and-box.rs:48:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ---------^^^^^^^-----\n    |         |               |\n-   |         |               immutable borrow, by `b`, occurs here\n-   |         mutable borrow, by `a`, occurs here\n+   |         |               value is borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-at-and-box.rs:62:9\n    |\n LL |         ref mut a @ box ref b => {\n    |         ---------^^^^^^^-----\n    |         |               |\n-   |         |               immutable borrow, by `b`, occurs here\n-   |         mutable borrow, by `a`, occurs here\n+   |         |               value is borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-at-and-box.rs:54:11\n    |\n LL |     fn f5(ref mut a @ box ref b: Box<NC>) {\n    |           ---------^^^^^^^-----\n    |           |               |\n-   |           |               immutable borrow, by `b`, occurs here\n-   |           mutable borrow, by `a`, occurs here\n+   |           |               value is borrowed by `b` here\n+   |           value is mutably borrowed by `a` here\n \n error[E0382]: borrow of moved value\n   --> $DIR/borrowck-pat-at-and-box.rs:31:9"}, {"sha": "4f7fbc9e04b04591f7f3bf967ef57fbd64ffa8ec", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.stderr", "status": "modified", "additions": 60, "deletions": 60, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.stderr?ref=e8c17de11d02eb25b768d6c8da342d50db864711", "patch": "@@ -4,234 +4,234 @@ error: cannot move out of value because it is borrowed\n LL |     let ref a @ b = U;\n    |         -----^^^-\n    |         |       |\n-   |         |       value moved into `b` here\n-   |         value borrowed, by `a`, here\n+   |         |       value is moved into `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:26:9\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n    |         |                |              |\n-   |         |                |              value moved into `e` here\n-   |         |                value moved into `c` here\n-   |         value borrowed, by `a`, here\n+   |         |                |              value is moved into `e` here\n+   |         |                value is moved into `c` here\n+   |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:26:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                  -----^^^-----\n    |                  |       |\n-   |                  |       value moved into `c` here\n-   |                  value borrowed, by `b`, here\n+   |                  |       value is moved into `c` here\n+   |                  value is borrowed by `b` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:26:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (U, U);\n    |                                 -----^^^-\n    |                                 |       |\n-   |                                 |       value moved into `e` here\n-   |                                 value borrowed, by `d`, here\n+   |                                 |       value is moved into `e` here\n+   |                                 value is borrowed by `d` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:30:9\n    |\n LL |     let ref mut a @ [b, mut c] = [U, U];\n    |         ---------^^^^-^^-----^\n    |         |            |  |\n-   |         |            |  value moved into `c` here\n-   |         |            value moved into `b` here\n-   |         value borrowed, by `a`, here\n+   |         |            |  value is moved into `c` here\n+   |         |            value is moved into `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:33:9\n    |\n LL |     let ref a @ b = u();\n    |         -----^^^-\n    |         |       |\n-   |         |       value moved into `b` here\n-   |         value borrowed, by `a`, here\n+   |         |       value is moved into `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:36:9\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |         -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n    |         |                |              |\n-   |         |                |              value moved into `e` here\n-   |         |                value moved into `c` here\n-   |         value borrowed, by `a`, here\n+   |         |                |              value is moved into `e` here\n+   |         |                value is moved into `c` here\n+   |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:36:18\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                  -----^^^-----\n    |                  |       |\n-   |                  |       value moved into `c` here\n-   |                  value borrowed, by `b`, here\n+   |                  |       value is moved into `c` here\n+   |                  value is borrowed by `b` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:36:33\n    |\n LL |     let ref a @ (ref b @ mut c, ref d @ e) = (u(), u());\n    |                                 -----^^^-\n    |                                 |       |\n-   |                                 |       value moved into `e` here\n-   |                                 value borrowed, by `d`, here\n+   |                                 |       value is moved into `e` here\n+   |                                 value is borrowed by `d` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:42:9\n    |\n LL |     let ref mut a @ [b, mut c] = [u(), u()];\n    |         ---------^^^^-^^-----^\n    |         |            |  |\n-   |         |            |  value moved into `c` here\n-   |         |            value moved into `b` here\n-   |         value borrowed, by `a`, here\n+   |         |            |  value is moved into `c` here\n+   |         |            value is moved into `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:47:9\n    |\n LL |         ref a @ Some(b) => {}\n    |         -----^^^^^^^^-^\n    |         |            |\n-   |         |            value moved into `b` here\n-   |         value borrowed, by `a`, here\n+   |         |            value is moved into `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:52:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n    |         |                     |              |\n-   |         |                     |              value moved into `e` here\n-   |         |                     value moved into `c` here\n-   |         value borrowed, by `a`, here\n+   |         |                     |              value is moved into `e` here\n+   |         |                     value is moved into `c` here\n+   |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:52:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       -----^^^-----\n    |                       |       |\n-   |                       |       value moved into `c` here\n-   |                       value borrowed, by `b`, here\n+   |                       |       value is moved into `c` here\n+   |                       value is borrowed by `b` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:52:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      -----^^^-\n    |                                      |       |\n-   |                                      |       value moved into `e` here\n-   |                                      value borrowed, by `d`, here\n+   |                                      |       value is moved into `e` here\n+   |                                      value is borrowed by `d` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:59:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n    |         ---------^^^^^^^^^-^^-----^^\n    |         |                 |  |\n-   |         |                 |  value moved into `c` here\n-   |         |                 value moved into `b` here\n-   |         value borrowed, by `a`, here\n+   |         |                 |  value is moved into `c` here\n+   |         |                 value is moved into `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:64:9\n    |\n LL |         ref a @ Some(b) => {}\n    |         -----^^^^^^^^-^\n    |         |            |\n-   |         |            value moved into `b` here\n-   |         value borrowed, by `a`, here\n+   |         |            value is moved into `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:69:9\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |         -----^^^^^^^^^^^^^^^^^-----^^^^^^^^^^-^^\n    |         |                     |              |\n-   |         |                     |              value moved into `e` here\n-   |         |                     value moved into `c` here\n-   |         value borrowed, by `a`, here\n+   |         |                     |              value is moved into `e` here\n+   |         |                     value is moved into `c` here\n+   |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:69:23\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                       -----^^^-----\n    |                       |       |\n-   |                       |       value moved into `c` here\n-   |                       value borrowed, by `b`, here\n+   |                       |       value is moved into `c` here\n+   |                       value is borrowed by `b` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:69:38\n    |\n LL |         ref a @ Some((ref b @ mut c, ref d @ e)) => {}\n    |                                      -----^^^-\n    |                                      |       |\n-   |                                      |       value moved into `e` here\n-   |                                      value borrowed, by `d`, here\n+   |                                      |       value is moved into `e` here\n+   |                                      value is borrowed by `d` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:78:9\n    |\n LL |         ref mut a @ Some([b, mut c]) => {}\n    |         ---------^^^^^^^^^-^^-----^^\n    |         |                 |  |\n-   |         |                 |  value moved into `c` here\n-   |         |                 value moved into `b` here\n-   |         value borrowed, by `a`, here\n+   |         |                 |  value is moved into `c` here\n+   |         |                 value is moved into `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:11:11\n    |\n LL |     fn f1(ref a @ b: U) {}\n    |           -----^^^-\n    |           |       |\n-   |           |       value moved into `b` here\n-   |           value borrowed, by `a`, here\n+   |           |       value is moved into `b` here\n+   |           value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:14:11\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |           -----^^^^^^^^^^^^-----^^^^^^^^^^-^\n    |           |                |              |\n-   |           |                |              value moved into `e` here\n-   |           |                value moved into `c` here\n-   |           value borrowed, by `a`, here\n+   |           |                |              value is moved into `e` here\n+   |           |                value is moved into `c` here\n+   |           value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:14:20\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                    -----^^^-----\n    |                    |       |\n-   |                    |       value moved into `c` here\n-   |                    value borrowed, by `b`, here\n+   |                    |       value is moved into `c` here\n+   |                    value is borrowed by `b` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:14:35\n    |\n LL |     fn f2(ref a @ (ref b @ mut c, ref d @ e): (U, U)) {}\n    |                                   -----^^^-\n    |                                   |       |\n-   |                                   |       value moved into `e` here\n-   |                                   value borrowed, by `d`, here\n+   |                                   |       value is moved into `e` here\n+   |                                   value is borrowed by `d` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:20:11\n    |\n LL |     fn f3(ref mut a @ [b, mut c]: [U; 2]) {}\n    |           ---------^^^^-^^-----^\n    |           |            |  |\n-   |           |            |  value moved into `c` here\n-   |           |            value moved into `b` here\n-   |           value borrowed, by `a`, here\n+   |           |            |  value is moved into `c` here\n+   |           |            value is moved into `b` here\n+   |           value is mutably borrowed by `a` here\n \n error[E0382]: borrow of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref.rs:30:9"}, {"sha": "f51b5041858c6ac43f01a7811839e925e8119791", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 72, "deletions": 72, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=e8c17de11d02eb25b768d6c8da342d50db864711", "patch": "@@ -4,295 +4,295 @@ error: cannot borrow value as immutable because it is also borrowed as mutable\n LL |         ref mut z @ &mut Some(ref a) => {\n    |         ---------^^^^^^^^^^^^^-----^\n    |         |                     |\n-   |         |                     immutable borrow, by `a`, occurs here\n-   |         mutable borrow, by `z`, occurs here\n+   |         |                     value is borrowed by `a` here\n+   |         value is mutably borrowed by `z` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:33:9\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |         ---------^^^^-----------------^\n    |         |            |       |\n-   |         |            |       another mutable borrow, by `c`, occurs here\n-   |         |            also borrowed as immutable, by `b`, here\n-   |         first mutable borrow, by `a`, occurs here\n+   |         |            |       value is mutably borrowed by `c` here\n+   |         |            value is borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:33:22\n    |\n LL |     let ref mut a @ (ref b @ ref mut c) = u(); // sub-in-sub\n    |                      -----^^^---------\n    |                      |       |\n-   |                      |       mutable borrow, by `c`, occurs here\n-   |                      immutable borrow, by `b`, occurs here\n+   |                      |       value is mutably borrowed by `c` here\n+   |                      value is borrowed by `b` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:37:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n    |         |       |\n-   |         |       mutable borrow, by `b`, occurs here\n-   |         immutable borrow, by `a`, occurs here\n+   |         |       value is mutably borrowed by `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n    |         |           |\n-   |         |           immutable borrow, by `b`, occurs here\n-   |         mutable borrow, by `a`, occurs here\n+   |         |           value is borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n    |         |        |          |\n-   |         |        |          mutable borrow, by `c`, occurs here\n-   |         |        mutable borrow, by `b`, occurs here\n-   |         immutable borrow, by `a`, occurs here\n+   |         |        |          value is mutably borrowed by `c` here\n+   |         |        value is mutably borrowed by `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:43:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n    |         |            |      |\n-   |         |            |      immutable borrow, by `c`, occurs here\n-   |         |            immutable borrow, by `b`, occurs here\n-   |         mutable borrow, by `a`, occurs here\n+   |         |            |      value is borrowed by `c` here\n+   |         |            value is borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:46:9\n    |\n LL |     let ref mut a @ ref b = u();\n    |         ---------^^^-----\n    |         |           |\n-   |         |           immutable borrow, by `b`, occurs here\n-   |         mutable borrow, by `a`, occurs here\n+   |         |           value is borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:51:9\n    |\n LL |     let ref a @ ref mut b = u();\n    |         -----^^^---------\n    |         |       |\n-   |         |       mutable borrow, by `b`, occurs here\n-   |         immutable borrow, by `a`, occurs here\n+   |         |       value is mutably borrowed by `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:57:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n    |         |           |\n-   |         |           immutable borrow, by `b`, occurs here\n-   |         mutable borrow, by `a`, occurs here\n+   |         |           value is borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:61:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n    |         |       |\n-   |         |       mutable borrow, by `b`, occurs here\n-   |         immutable borrow, by `a`, occurs here\n+   |         |       value is mutably borrowed by `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:67:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         ---------^^^^^^-----^\n    |         |              |\n-   |         |              immutable borrow, by `b`, occurs here\n-   |         mutable borrow, by `a`, occurs here\n+   |         |              value is borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:67:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 ---------^^^^^^^-----^\n    |                                 |               |\n-   |                                 |               immutable borrow, by `b`, occurs here\n-   |                                 mutable borrow, by `a`, occurs here\n+   |                                 |               value is borrowed by `b` here\n+   |                                 value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----^^^^^^---------^\n    |         |          |\n-   |         |          mutable borrow, by `b`, occurs here\n-   |         immutable borrow, by `a`, occurs here\n+   |         |          value is mutably borrowed by `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:76:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 -----^^^^^^^---------^\n    |                                 |           |\n-   |                                 |           mutable borrow, by `b`, occurs here\n-   |                                 immutable borrow, by `a`, occurs here\n+   |                                 |           value is mutably borrowed by `b` here\n+   |                                 value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |         -----^^^^^^---------^\n    |         |          |\n-   |         |          mutable borrow, by `b`, occurs here\n-   |         immutable borrow, by `a`, occurs here\n+   |         |          value is mutably borrowed by `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:87:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                 -----^^^^^^^---------^\n    |                                 |           |\n-   |                                 |           mutable borrow, by `b`, occurs here\n-   |                                 immutable borrow, by `a`, occurs here\n+   |                                 |           value is mutably borrowed by `b` here\n+   |                                 value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |         ---------^^^^^^-----^\n    |         |              |\n-   |         |              immutable borrow, by `b`, occurs here\n-   |         mutable borrow, by `a`, occurs here\n+   |         |              value is borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                 ---------^^^^^^^-----^\n    |                                 |               |\n-   |                                 |               immutable borrow, by `b`, occurs here\n-   |                                 mutable borrow, by `a`, occurs here\n+   |                                 |               value is borrowed by `b` here\n+   |                                 value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |         -----^^^^^^---------^\n    |         |          |\n-   |         |          mutable borrow, by `b`, occurs here\n-   |         immutable borrow, by `a`, occurs here\n+   |         |          value is mutably borrowed by `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                 -----^^^^^^^---------^\n    |                                 |           |\n-   |                                 |           mutable borrow, by `b`, occurs here\n-   |                                 immutable borrow, by `a`, occurs here\n+   |                                 |           value is mutably borrowed by `b` here\n+   |                                 value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:109:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |         ---------^^^^^^-----^\n    |         |              |\n-   |         |              immutable borrow, by `b`, occurs here\n-   |         mutable borrow, by `a`, occurs here\n+   |         |              value is borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:109:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                 ---------^^^^^^^-----^\n    |                                 |               |\n-   |                                 |               immutable borrow, by `b`, occurs here\n-   |                                 mutable borrow, by `a`, occurs here\n+   |                                 |               value is borrowed by `b` here\n+   |                                 value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:117:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n    |         |        |          |\n-   |         |        |          mutable borrow, by `c`, occurs here\n-   |         |        mutable borrow, by `b`, occurs here\n-   |         immutable borrow, by `a`, occurs here\n+   |         |        |          value is mutably borrowed by `c` here\n+   |         |        value is mutably borrowed by `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:123:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n    |         |        |          |\n-   |         |        |          mutable borrow, by `c`, occurs here\n-   |         |        mutable borrow, by `b`, occurs here\n-   |         immutable borrow, by `a`, occurs here\n+   |         |        |          value is mutably borrowed by `c` here\n+   |         |        value is mutably borrowed by `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:129:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n    |         |        |          |\n-   |         |        |          mutable borrow, by `c`, occurs here\n-   |         |        mutable borrow, by `b`, occurs here\n-   |         immutable borrow, by `a`, occurs here\n+   |         |        |          value is mutably borrowed by `c` here\n+   |         |        value is mutably borrowed by `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:134:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n    |         |            |      |\n-   |         |            |      immutable borrow, by `c`, occurs here\n-   |         |            immutable borrow, by `b`, occurs here\n-   |         mutable borrow, by `a`, occurs here\n+   |         |            |      value is borrowed by `c` here\n+   |         |            value is borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:22:11\n    |\n LL |     fn f1(ref a @ ref mut b: U) {}\n    |           -----^^^---------\n    |           |       |\n-   |           |       mutable borrow, by `b`, occurs here\n-   |           immutable borrow, by `a`, occurs here\n+   |           |       value is mutably borrowed by `b` here\n+   |           value is borrowed by `a` here\n \n error: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:11\n    |\n LL |     fn f2(ref mut a @ ref b: U) {}\n    |           ---------^^^-----\n    |           |           |\n-   |           |           immutable borrow, by `b`, occurs here\n-   |           mutable borrow, by `a`, occurs here\n+   |           |           value is borrowed by `b` here\n+   |           value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:11\n    |\n LL |     fn f3(ref a @ [ref b, ref mut mid @ .., ref c]: [U; 4]) {}\n    |           -----^^^^^^^^^^^----------------^^^^^^^^\n    |           |               |\n-   |           |               mutable borrow, by `mid`, occurs here\n-   |           immutable borrow, by `a`, occurs here\n+   |           |               value is mutably borrowed by `mid` here\n+   |           value is borrowed by `a` here\n \n error: cannot borrow value as mutable because it is also borrowed as immutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:22\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                      -----^^^-------------\n    |                      |       |           |\n-   |                      |       |           also moved into `c` here\n-   |                      |       mutable borrow, by `b`, occurs here\n-   |                      immutable borrow, by `a`, occurs here\n+   |                      |       |           value is moved into `c` here\n+   |                      |       value is mutably borrowed by `b` here\n+   |                      value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:30\n    |\n LL |     fn f4_also_moved(ref a @ ref mut b @ c: U) {}\n    |                              ---------^^^-\n    |                              |           |\n-   |                              |           value moved into `c` here\n-   |                              value borrowed, by `b`, here\n+   |                              |           value is moved into `c` here\n+   |                              value is mutably borrowed by `b` here\n \n error[E0502]: cannot borrow value as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-pat-ref-mut-and-ref.rs:8:31"}, {"sha": "a0cb04a064e06dd05796771dedeafd28b6cea917", "filename": "tests/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=e8c17de11d02eb25b768d6c8da342d50db864711", "patch": "@@ -4,63 +4,63 @@ error: cannot borrow value as mutable more than once at a time\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n    |         |           |\n-   |         |           another mutable borrow, by `b`, occurs here\n-   |         first mutable borrow, by `a`, occurs here\n+   |         |           value is mutably borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n    |         |           |\n-   |         |           another mutable borrow, by `b`, occurs here\n-   |         first mutable borrow, by `a`, occurs here\n+   |         |           value is mutably borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:33:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n    |         |           |\n-   |         |           another mutable borrow, by `b`, occurs here\n-   |         first mutable borrow, by `a`, occurs here\n+   |         |           value is mutably borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:36:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n    |         |           |\n-   |         |           another mutable borrow, by `b`, occurs here\n-   |         first mutable borrow, by `a`, occurs here\n+   |         |           value is mutably borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:39:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n    |         |           |\n-   |         |           another mutable borrow, by `b`, occurs here\n-   |         first mutable borrow, by `a`, occurs here\n+   |         |           value is mutably borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:44:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n    |           |\n-   |  _________first mutable borrow, by `a`, occurs here\n+   |  _________value is mutably borrowed by `a` here\n    | |\n LL | |\n LL | |         ref mut b,\n-   | |         --------- another mutable borrow, by `b`, occurs here\n+   | |         --------- value is mutably borrowed by `b` here\n LL | |         [\n LL | |             ref mut c,\n-   | |             --------- another mutable borrow, by `c`, occurs here\n+   | |             --------- value is mutably borrowed by `c` here\n LL | |             ref mut d,\n-   | |             --------- another mutable borrow, by `d`, occurs here\n+   | |             --------- value is mutably borrowed by `d` here\n LL | |             ref e,\n-   | |             ----- also borrowed as immutable, by `e`, here\n+   | |             ----- value is borrowed by `e` here\n LL | |         ]\n LL | |     ) = (U, [U, U, U]);\n    | |_____^\n@@ -71,18 +71,18 @@ error: cannot borrow value as mutable more than once at a time\n LL |       let ref mut a @ (\n    |           ^--------\n    |           |\n-   |  _________first mutable borrow, by `a`, occurs here\n+   |  _________value is mutably borrowed by `a` here\n    | |\n LL | |\n LL | |             ref mut b,\n-   | |             --------- another mutable borrow, by `b`, occurs here\n+   | |             --------- value is mutably borrowed by `b` here\n LL | |             [\n LL | |                 ref mut c,\n-   | |                 --------- another mutable borrow, by `c`, occurs here\n+   | |                 --------- value is mutably borrowed by `c` here\n LL | |                 ref mut d,\n-   | |                 --------- another mutable borrow, by `d`, occurs here\n+   | |                 --------- value is mutably borrowed by `d` here\n LL | |                 ref e,\n-   | |                 ----- also borrowed as immutable, by `e`, here\n+   | |                 ----- value is borrowed by `e` here\n LL | |             ]\n LL | |         ) = (u(), [u(), u(), u()]);\n    | |_________^\n@@ -157,103 +157,103 @@ error: cannot borrow value as mutable more than once at a time\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n    |         |              |\n-   |         |              another mutable borrow, by `b`, occurs here\n-   |         first mutable borrow, by `a`, occurs here\n+   |         |              value is mutably borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:76:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n    |                                     |               |\n-   |                                     |               another mutable borrow, by `b`, occurs here\n-   |                                     first mutable borrow, by `a`, occurs here\n+   |                                     |               value is mutably borrowed by `b` here\n+   |                                     value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:82:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n    |         |              |\n-   |         |              another mutable borrow, by `b`, occurs here\n-   |         first mutable borrow, by `a`, occurs here\n+   |         |              value is mutably borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:82:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n    |                                     |               |\n-   |                                     |               another mutable borrow, by `b`, occurs here\n-   |                                     first mutable borrow, by `a`, occurs here\n+   |                                     |               value is mutably borrowed by `b` here\n+   |                                     value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:89:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n    |         |              |\n-   |         |              another mutable borrow, by `b`, occurs here\n-   |         first mutable borrow, by `a`, occurs here\n+   |         |              value is mutably borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:89:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n    |                                     |               |\n-   |                                     |               another mutable borrow, by `b`, occurs here\n-   |                                     first mutable borrow, by `a`, occurs here\n+   |                                     |               value is mutably borrowed by `b` here\n+   |                                     value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:101:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n    |         |              |\n-   |         |              another mutable borrow, by `b`, occurs here\n-   |         first mutable borrow, by `a`, occurs here\n+   |         |              value is mutably borrowed by `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:101:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n    |                                     |               |\n-   |                                     |               another mutable borrow, by `b`, occurs here\n-   |                                     first mutable borrow, by `a`, occurs here\n+   |                                     |               value is mutably borrowed by `b` here\n+   |                                     value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:8:11\n    |\n LL |     fn f1(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n    |           |           |\n-   |           |           another mutable borrow, by `b`, occurs here\n-   |           first mutable borrow, by `a`, occurs here\n+   |           |           value is mutably borrowed by `b` here\n+   |           value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:10:11\n    |\n LL |     fn f2(ref mut a @ ref mut b: U) {}\n    |           ---------^^^---------\n    |           |           |\n-   |           |           another mutable borrow, by `b`, occurs here\n-   |           first mutable borrow, by `a`, occurs here\n+   |           |           value is mutably borrowed by `b` here\n+   |           value is mutably borrowed by `a` here\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:13:9\n    |\n LL |           ref mut a @ [\n    |           ^--------\n    |           |\n-   |  _________first mutable borrow, by `a`, occurs here\n+   |  _________value is mutably borrowed by `a` here\n    | |\n LL | |\n LL | |             [ref b @ .., _],\n-   | |              ---------- also borrowed as immutable, by `b`, here\n+   | |              ---------- value is borrowed by `b` here\n LL | |             [_, ref mut mid @ ..],\n-   | |                 ---------------- another mutable borrow, by `mid`, occurs here\n+   | |                 ---------------- value is mutably borrowed by `mid` here\n LL | |             ..,\n LL | |             [..],\n LL | |         ] : [[U; 4]; 5]\n@@ -265,18 +265,18 @@ error: cannot borrow value as mutable more than once at a time\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                      ---------^^^-------------\n    |                      |           |           |\n-   |                      |           |           also moved into `c` here\n-   |                      |           another mutable borrow, by `b`, occurs here\n-   |                      first mutable borrow, by `a`, occurs here\n+   |                      |           |           value is moved into `c` here\n+   |                      |           value is mutably borrowed by `b` here\n+   |                      value is mutably borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:21:34\n    |\n LL |     fn f4_also_moved(ref mut a @ ref mut b @ c: U) {}\n    |                                  ---------^^^-\n    |                                  |           |\n-   |                                  |           value moved into `c` here\n-   |                                  value borrowed, by `b`, here\n+   |                                  |           value is moved into `c` here\n+   |                                  value is mutably borrowed by `b` here\n \n error[E0499]: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9"}, {"sha": "73ebbf48118daebf4cdd798f82374b856a949f5a", "filename": "tests/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=e8c17de11d02eb25b768d6c8da342d50db864711", "patch": "@@ -4,26 +4,26 @@ error: cannot move out of value because it is borrowed\n LL |     let ref a @ b = NotCopy;\n    |         -----^^^-\n    |         |       |\n-   |         |       value moved into `b` here\n-   |         value borrowed, by `a`, here\n+   |         |       value is moved into `b` here\n+   |         value is borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/default-binding-modes-both-sides-independent.rs:29:9\n    |\n LL |     let ref mut a @ b = NotCopy;\n    |         ---------^^^-\n    |         |           |\n-   |         |           value moved into `b` here\n-   |         value borrowed, by `a`, here\n+   |         |           value is moved into `b` here\n+   |         value is mutably borrowed by `a` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/default-binding-modes-both-sides-independent.rs:34:12\n    |\n LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |            -----^^^-\n    |            |       |\n-   |            |       value moved into `b` here\n-   |            value borrowed, by `a`, here\n+   |            |       value is moved into `b` here\n+   |            value is borrowed by `a` here\n \n error: borrow of moved value\n   --> $DIR/default-binding-modes-both-sides-independent.rs:34:29\n@@ -46,8 +46,8 @@ error: cannot move out of value because it is borrowed\n LL |         ref a @ b => {\n    |         -----^^^-\n    |         |       |\n-   |         |       value moved into `b` here\n-   |         value borrowed, by `a`, here\n+   |         |       value is moved into `b` here\n+   |         value is borrowed by `a` here\n \n error[E0382]: borrow of moved value\n   --> $DIR/default-binding-modes-both-sides-independent.rs:29:9"}, {"sha": "7b194259349b8c090f5d82d463fde2ad62897b80", "filename": "tests/ui/suggestions/ref-pattern-binding.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fsuggestions%2Fref-pattern-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e8c17de11d02eb25b768d6c8da342d50db864711/tests%2Fui%2Fsuggestions%2Fref-pattern-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fref-pattern-binding.stderr?ref=e8c17de11d02eb25b768d6c8da342d50db864711", "patch": "@@ -19,17 +19,17 @@ error: cannot move out of value because it is borrowed\n LL |     let ref _moved @ _from = String::from(\"foo\");\n    |         ----------^^^-----\n    |         |            |\n-   |         |            value moved into `_from` here\n-   |         value borrowed, by `_moved`, here\n+   |         |            value is moved into `_from` here\n+   |         value is borrowed by `_moved` here\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/ref-pattern-binding.rs:15:9\n    |\n LL |     let ref _moved @ S { f } = S { f: String::from(\"foo\") };\n    |         ----------^^^^^^^-^^\n    |         |                |\n-   |         |                value moved into `f` here\n-   |         value borrowed, by `_moved`, here\n+   |         |                value is moved into `f` here\n+   |         value is borrowed by `_moved` here\n \n error: borrow of moved value\n   --> $DIR/ref-pattern-binding.rs:18:9"}]}