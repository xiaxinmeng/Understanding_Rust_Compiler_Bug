{"sha": "f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a", "node_id": "C_kwDOAAsO6NoAKGY1MGQxNzEzZmQ0YWFiMWZmOWQxNjBlOWZhNGIyMGNkMmY3MWU2OGE", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-08-23T10:48:14Z"}, "committer": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-08-23T11:47:08Z"}, "message": "Migrate note_region_origin function", "tree": {"sha": "b15eab684af22ec6b2fcd86921ec239426bbab81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b15eab684af22ec6b2fcd86921ec239426bbab81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEAWou4Gq79HasRseDspeR1Nh440UFAmMEvjwACgkQspeR1Nh4\n40V7DA//UoSgoDVGmkfr0fhGlQz/He3EIgBCs2Qsv5yA+syh+Taggp2/ChzOFlPG\nlnZiBpvywdl2ONf5hjFCfkzLvky8dTTLKfU/WJ6gMARaFy498CVV30wdzlOtX7IL\nfQjKUpD9NOY+NOQ1lEFcK3Vvu2Eo3+kmUxfsqoIUJfKoVOf0D9WJTAAqjNDVAuJu\nqJx1CmjHjkHGHFSiwZeCR1N4f56tsvnbQTRA9FNRNh8tSItIvPIbXr83kAHoURrp\nqnKnGdfR1WzBhwo5eVRzz1x7Dog4gtZfOPNMK4R940Wrg3PQgf5y0ojj0RXMGJeF\n5heHn1UZ/VC+N6AR8j9lDniGSHXMq72Ijn+fH3TYml/WwEhyeSsHsWHaX273E+ft\nhW4bFHgFSeONdlWbojJuxBZNDpB+I66sruXqCtLB+ZGGlOy1BDOfBgb++HRiisaE\nj3jk7vkqLRsYx9WUMx/OkW8HrGGdf+Tr22+nGtzw0bL/78uZpYXaAkvJYeXucKDx\nCze0P2JbHOxy6HE/wYk7Bob2XIpxerY/R+NFy+fmZlO5HhcMxx+8DTEEzPj2gncq\nlQg6QbjxHIiBnsDJxKJaK1iA2/wWn5DWz/JHsTAQpAUKAmw1JOXFJ6QD0z3cRC8H\nJZlq4+kiS6EtkgOjBo9SNjG8gesoweicEPN9GJqdZU17g0Vp4Nw=\n=F6fA\n-----END PGP SIGNATURE-----", "payload": "tree b15eab684af22ec6b2fcd86921ec239426bbab81\nparent 3f6cb475f7aa1f4475fdb313316a7df644113376\nauthor Nikita Tomashevich <quant3234@gmail.com> 1661251694 +0300\ncommitter Nikita Tomashevich <quant3234@gmail.com> 1661255228 +0300\n\nMigrate note_region_origin function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a", "html_url": "https://github.com/rust-lang/rust/commit/f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f6cb475f7aa1f4475fdb313316a7df644113376", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6cb475f7aa1f4475fdb313316a7df644113376", "html_url": "https://github.com/rust-lang/rust/commit/3f6cb475f7aa1f4475fdb313316a7df644113376"}], "stats": {"total": 226, "additions": 173, "deletions": 53}, "files": [{"sha": "770eaa62b4118b82d47ded7d056105078e711846", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a", "patch": "@@ -61,5 +61,48 @@ infer_source_kind_fully_qualified =\n infer_source_kind_closure_return =\n     try giving this closure an explicit return type\n \n+# generator_kind  may need to be translated\n infer_need_type_info_in_generator =\n     type inside {$generator_kind} must be known in this context\n+\n+\n+infer_subtype = ...so that the {$requirement ->\n+    [method_compat] method type is compatible with trait\n+    [type_compat] associated type is compatible with trait\n+    [const_compat] const is compatible with trait\n+    [expr_assignable] expression is assignable\n+    [if_else_different] `if` and `else` have incompatible types\n+    [no_else] `if` missing an `else` returns `()`\n+    [fn_main_correct_type] `main` function has the correct type\n+    [fn_start_correct_type] #[start]` function has the correct type\n+    [intristic_correct_type] intrinsic has the correct type\n+    [method_correct_type] method receiver has the correct type\n+    *[other] types are compatible\n+}\n+infer_subtype_2 = ...so that {$requirement ->\n+    [method_compat] method type is compatible with trait\n+    [type_compat] associated type is compatible with trait\n+    [const_compat] const is compatible with trait\n+    [expr_assignable] expression is assignable\n+    [if_else_different] `if` and `else` have incompatible types\n+    [no_else] `if` missing an `else` returns `()`\n+    [fn_main_correct_type] `main` function has the correct type\n+    [fn_start_correct_type] #[start]` function has the correct type\n+    [intristic_correct_type] intrinsic has the correct type\n+    [method_correct_type] method receiver has the correct type\n+    *[other] types are compatible\n+}\n+\n+infer_reborrow = ...so that reference does not outlive borrowed content\n+infer_reborrow_upvar = ...so that closure can access `{$name}`\n+infer_relate_object_bound = ...so that it can be closed over into an object\n+infer_data_borrowed = ...so that the type `{$name}` is not borrowed for too long\n+infer_reference_outlives_referent = ...so that the reference type `{$name}` does not outlive the data it points at\n+infer_relate_param_bound = ...so that the type `{$name}` will meet its required lifetime bounds{$continues ->\n+[true] ...\n+*[false] {\"\"}\n+}\n+infer_relate_param_bound_2 = ...that is required by this bound\n+infer_relate_region_param_bound = ...so that the declared lifetime parameter bounds are satisfied\n+infer_compare_impl_item_obligation = ...so that the definition in impl matches the definition from the trait\n+"}, {"sha": "1db8763e4996d241a9840133a1c08336b7697ea2", "filename": "compiler/rustc_infer/src/errors.rs", "status": "modified", "additions": 63, "deletions": 1, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a/compiler%2Frustc_infer%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a/compiler%2Frustc_infer%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors.rs?ref=f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a", "patch": "@@ -1,4 +1,4 @@\n-use rustc_errors::{fluent, AddSubdiagnostic};\n+use rustc_errors::{fluent, AddSubdiagnostic, DiagnosticMessage, DiagnosticStyledString};\n use rustc_hir::FnRetTy;\n use rustc_macros::SessionDiagnostic;\n use rustc_span::{BytePos, Span};\n@@ -185,3 +185,65 @@ impl AddSubdiagnostic for SourceKindMultiSuggestion<'_> {\n         }\n     }\n }\n+\n+pub enum RegionOriginNote<'a> {\n+    Plain {\n+        span: Span,\n+        msg: DiagnosticMessage,\n+    },\n+    WithName {\n+        span: Span,\n+        msg: DiagnosticMessage,\n+        name: &'a str,\n+        continues: bool,\n+    },\n+    WithRequirement {\n+        span: Span,\n+        requirement: &'static str,\n+        expected_found: Option<(DiagnosticStyledString, DiagnosticStyledString)>,\n+    },\n+}\n+\n+impl AddSubdiagnostic for RegionOriginNote<'_> {\n+    fn add_to_diagnostic(self, diag: &mut rustc_errors::Diagnostic) {\n+        let mut label_or_note = |span, msg: DiagnosticMessage| {\n+            let sub_count = diag.children.iter().filter(|d| d.span.is_dummy()).count();\n+            let expanded_sub_count = diag.children.iter().filter(|d| !d.span.is_dummy()).count();\n+            let span_is_primary = diag.span.primary_spans().iter().all(|&sp| sp == span);\n+            if span_is_primary && sub_count == 0 && expanded_sub_count == 0 {\n+                diag.span_label(span, msg);\n+            } else if span_is_primary && expanded_sub_count == 0 {\n+                diag.note(msg);\n+            } else {\n+                diag.span_note(span, msg);\n+            }\n+        };\n+        match self {\n+            RegionOriginNote::Plain { span, msg } => {\n+                label_or_note(span, msg);\n+            }\n+            RegionOriginNote::WithName { span, msg, name, continues } => {\n+                label_or_note(span, msg);\n+                diag.set_arg(\"name\", name);\n+                diag.set_arg(\"continues\", continues);\n+            }\n+            RegionOriginNote::WithRequirement {\n+                span,\n+                requirement,\n+                expected_found: Some((expected, found)),\n+            } => {\n+                label_or_note(span, fluent::infer::subtype);\n+                diag.set_arg(\"requirement\", requirement);\n+\n+                diag.note_expected_found(&\"\", expected, &\"\", found);\n+            }\n+            RegionOriginNote::WithRequirement { span, requirement, expected_found: None } => {\n+                // FIXME: this really should be handled at some earlier stage. Our\n+                // handling of region checking when type errors are present is\n+                // *terrible*.\n+                label_or_note(span, fluent::infer::subtype_2);\n+                diag.set_arg(\"requirement\", requirement);\n+            }\n+        };\n+    }\n+}"}, {"sha": "13951326665d7790e1a3c9e07f31e71c490fce49", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a", "patch": "@@ -2811,6 +2811,7 @@ pub enum FailureCode {\n pub trait ObligationCauseExt<'tcx> {\n     fn as_failure_code(&self, terr: TypeError<'tcx>) -> FailureCode;\n     fn as_requirement_str(&self) -> &'static str;\n+    fn as_requirement_localised(&self) -> &'static str;\n }\n \n impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n@@ -2879,6 +2880,23 @@ impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n             _ => \"types are compatible\",\n         }\n     }\n+\n+    fn as_requirement_localised(&self) -> &'static str {\n+        use crate::traits::ObligationCauseCode::*;\n+        match self.code() {\n+            CompareImplItemObligation { kind: ty::AssocKind::Fn, .. } => \"method_compat\",\n+            CompareImplItemObligation { kind: ty::AssocKind::Type, .. } => \"type_compat\",\n+            CompareImplItemObligation { kind: ty::AssocKind::Const, .. } => \"const_compat\",\n+            ExprAssignable => \"expr_assignable\",\n+            IfExpression { .. } => \"if_else_different\",\n+            IfExpressionWithNoElse => \"no_else\",\n+            MainFunctionType => \"fn_main_correct_type\",\n+            StartFunctionType => \"fn_start_correct_type\",\n+            IntrinsicType => \"intristic_correct_type\",\n+            MethodReceiver => \"method_correct_type\",\n+            _ => \"other\",\n+        }\n+    }\n }\n \n /// This is a bare signal of what kind of type we're dealing with. `ty::TyKind` tracks"}, {"sha": "36efbd6824a77c46b816662d4bd34a02bf55d411", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 49, "deletions": 52, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=f50d1713fd4aab1ff9d160e9fa4b20cd2f71e68a", "patch": "@@ -1,13 +1,17 @@\n+use crate::errors::RegionOriginNote;\n use crate::infer::error_reporting::{note_and_explain_region, ObligationCauseExt};\n use crate::infer::{self, InferCtxt, SubregionOrigin};\n-use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, ErrorGuaranteed};\n+use rustc_errors::{\n+    fluent, struct_span_err, AddSubdiagnostic, Diagnostic, DiagnosticBuilder, DiagnosticMessage,\n+    ErrorGuaranteed,\n+};\n use rustc_middle::traits::ObligationCauseCode;\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::{self, Region};\n \n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub(super) fn note_region_origin(&self, err: &mut Diagnostic, origin: &SubregionOrigin<'tcx>) {\n-        let mut label_or_note = |span, msg: &str| {\n+        let mut label_or_note = |span, msg: DiagnosticMessage| {\n             let sub_count = err.children.iter().filter(|d| d.span.is_dummy()).count();\n             let expanded_sub_count = err.children.iter().filter(|d| !d.span.is_dummy()).count();\n             let span_is_primary = err.span.primary_spans().iter().all(|&sp| sp == span);\n@@ -20,77 +24,70 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n         };\n         match *origin {\n-            infer::Subtype(ref trace) => {\n-                if let Some((expected, found)) = self.values_str(trace.values) {\n-                    label_or_note(\n-                        trace.cause.span,\n-                        &format!(\"...so that the {}\", trace.cause.as_requirement_str()),\n-                    );\n-\n-                    err.note_expected_found(&\"\", expected, &\"\", found);\n-                } else {\n-                    // FIXME: this really should be handled at some earlier stage. Our\n-                    // handling of region checking when type errors are present is\n-                    // *terrible*.\n-\n-                    label_or_note(\n-                        trace.cause.span,\n-                        &format!(\"...so that {}\", trace.cause.as_requirement_str()),\n-                    );\n-                }\n+            infer::Subtype(ref trace) => RegionOriginNote::WithRequirement {\n+                span: trace.cause.span,\n+                requirement: trace.cause.as_requirement_localised(),\n+                expected_found: self.values_str(trace.values),\n             }\n+            .add_to_diagnostic(err),\n             infer::Reborrow(span) => {\n-                label_or_note(span, \"...so that reference does not outlive borrowed content\");\n+                label_or_note(span, fluent::infer::reborrow);\n+                RegionOriginNote::Plain { span, msg: fluent::infer::reborrow }\n+                    .add_to_diagnostic(err)\n             }\n             infer::ReborrowUpvar(span, ref upvar_id) => {\n                 let var_name = self.tcx.hir().name(upvar_id.var_path.hir_id);\n-                label_or_note(span, &format!(\"...so that closure can access `{}`\", var_name));\n+                RegionOriginNote::WithName {\n+                    span,\n+                    msg: fluent::infer::reborrow,\n+                    name: &var_name.to_string(),\n+                    continues: false,\n+                }\n+                .add_to_diagnostic(err);\n             }\n             infer::RelateObjectBound(span) => {\n-                label_or_note(span, \"...so that it can be closed over into an object\");\n+                label_or_note(span, fluent::infer::relate_object_bound);\n+                RegionOriginNote::Plain { span, msg: fluent::infer::relate_object_bound }\n+                    .add_to_diagnostic(err);\n             }\n             infer::DataBorrowed(ty, span) => {\n-                label_or_note(\n+                RegionOriginNote::WithName {\n                     span,\n-                    &format!(\n-                        \"...so that the type `{}` is not borrowed for too long\",\n-                        self.ty_to_string(ty)\n-                    ),\n-                );\n+                    msg: fluent::infer::data_borrowed,\n+                    name: &self.ty_to_string(ty),\n+                    continues: false,\n+                }\n+                .add_to_diagnostic(err);\n             }\n             infer::ReferenceOutlivesReferent(ty, span) => {\n-                label_or_note(\n+                RegionOriginNote::WithName {\n                     span,\n-                    &format!(\n-                        \"...so that the reference type `{}` does not outlive the data it points at\",\n-                        self.ty_to_string(ty)\n-                    ),\n-                );\n+                    msg: fluent::infer::reference_outlives_referent,\n+                    name: &self.ty_to_string(ty),\n+                    continues: false,\n+                }\n+                .add_to_diagnostic(err);\n             }\n-            infer::RelateParamBound(span, t, opt_span) => {\n-                label_or_note(\n+            infer::RelateParamBound(span, ty, opt_span) => {\n+                RegionOriginNote::WithName {\n                     span,\n-                    &format!(\n-                        \"...so that the type `{}` will meet its required lifetime bounds{}\",\n-                        self.ty_to_string(t),\n-                        if opt_span.is_some() { \"...\" } else { \"\" },\n-                    ),\n-                );\n+                    msg: fluent::infer::relate_param_bound,\n+                    name: &self.ty_to_string(ty),\n+                    continues: opt_span.is_some(),\n+                }\n+                .add_to_diagnostic(err);\n                 if let Some(span) = opt_span {\n-                    err.span_note(span, \"...that is required by this bound\");\n+                    RegionOriginNote::Plain { span, msg: fluent::infer::relate_param_bound_2 }\n+                        .add_to_diagnostic(err);\n                 }\n             }\n             infer::RelateRegionParamBound(span) => {\n-                label_or_note(\n-                    span,\n-                    \"...so that the declared lifetime parameter bounds are satisfied\",\n-                );\n+                RegionOriginNote::Plain { span, msg: fluent::infer::relate_region_param_bound }\n+                    .add_to_diagnostic(err);\n             }\n             infer::CompareImplItemObligation { span, .. } => {\n-                label_or_note(\n-                    span,\n-                    \"...so that the definition in impl matches the definition from the trait\",\n-                );\n+                RegionOriginNote::Plain { span, msg: fluent::infer::compare_impl_item_obligation }\n+                    .add_to_diagnostic(err);\n             }\n             infer::CheckAssociatedTypeBounds { ref parent, .. } => {\n                 self.note_region_origin(err, &parent);"}]}