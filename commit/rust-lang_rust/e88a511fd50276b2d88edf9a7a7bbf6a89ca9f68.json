{"sha": "e88a511fd50276b2d88edf9a7a7bbf6a89ca9f68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OGE1MTFmZDUwMjc2YjJkODhlZGY5YTdhN2JiZjZhODljYTlmNjg=", "commit": {"author": {"name": "lukaramu", "email": "lukaramu@gmail.com", "date": "2017-04-06T20:32:51Z"}, "committer": {"name": "lukaramu", "email": "lukaramu@gmail.com", "date": "2017-04-06T20:32:51Z"}, "message": "improved std::hash::BuildHasher docs\n\nPart of #29357.\n* split summary and explanation more clearly, while expanding the\n  explanation to make the reason for `BuildHasher` existing more clear\n* added an example illustrating that `Hasher`s created by one `BuildHasher`\n  should be identical\n* added links\n* repeated the fact that hashers produced should be identical in\n  `build_hasher`s method docs", "tree": {"sha": "8d4d2e5de618c78aa99f2df2ac95e7d864dfbe01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d4d2e5de618c78aa99f2df2ac95e7d864dfbe01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e88a511fd50276b2d88edf9a7a7bbf6a89ca9f68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e88a511fd50276b2d88edf9a7a7bbf6a89ca9f68", "html_url": "https://github.com/rust-lang/rust/commit/e88a511fd50276b2d88edf9a7a7bbf6a89ca9f68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e88a511fd50276b2d88edf9a7a7bbf6a89ca9f68/comments", "author": {"login": "chordowl", "id": 3811822, "node_id": "MDQ6VXNlcjM4MTE4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3811822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordowl", "html_url": "https://github.com/chordowl", "followers_url": "https://api.github.com/users/chordowl/followers", "following_url": "https://api.github.com/users/chordowl/following{/other_user}", "gists_url": "https://api.github.com/users/chordowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordowl/subscriptions", "organizations_url": "https://api.github.com/users/chordowl/orgs", "repos_url": "https://api.github.com/users/chordowl/repos", "events_url": "https://api.github.com/users/chordowl/events{/privacy}", "received_events_url": "https://api.github.com/users/chordowl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chordowl", "id": 3811822, "node_id": "MDQ6VXNlcjM4MTE4MjI=", "avatar_url": "https://avatars.githubusercontent.com/u/3811822?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chordowl", "html_url": "https://github.com/chordowl", "followers_url": "https://api.github.com/users/chordowl/followers", "following_url": "https://api.github.com/users/chordowl/following{/other_user}", "gists_url": "https://api.github.com/users/chordowl/gists{/gist_id}", "starred_url": "https://api.github.com/users/chordowl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chordowl/subscriptions", "organizations_url": "https://api.github.com/users/chordowl/orgs", "repos_url": "https://api.github.com/users/chordowl/repos", "events_url": "https://api.github.com/users/chordowl/events{/privacy}", "received_events_url": "https://api.github.com/users/chordowl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c199d253867085dae44f6946d7085a991abe17c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c199d253867085dae44f6946d7085a991abe17c8", "html_url": "https://github.com/rust-lang/rust/commit/c199d253867085dae44f6946d7085a991abe17c8"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "b24938b908a6f7467adab0c0a9c0c4d4326ef341", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e88a511fd50276b2d88edf9a7a7bbf6a89ca9f68/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e88a511fd50276b2d88edf9a7a7bbf6a89ca9f68/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=e88a511fd50276b2d88edf9a7a7bbf6a89ca9f68", "patch": "@@ -258,12 +258,35 @@ pub trait Hasher {\n     }\n }\n \n-/// A `BuildHasher` is typically used as a factory for instances of `Hasher`\n-/// which a `HashMap` can then use to hash keys independently.\n+/// A trait for creating instances of [`Hasher`].\n ///\n-/// Note that for each instance of `BuildHasher`, the created hashers should be\n-/// identical. That is, if the same stream of bytes is fed into each hasher, the\n-/// same output will also be generated.\n+/// A `BuildHasher` is typically used (e.g. by [`HashMap`]) to create\n+/// [`Hasher`]s for each key such that they are hashed independently of one\n+/// another, since [`Hasher`]s contain state.\n+///\n+/// For each instance of `BuildHasher`, the [`Hasher`]s created by\n+/// [`build_hasher`] should be identical. That is, if the same stream of bytes\n+/// is fed into each hasher, the same output will also be generated.\n+///\n+/// # Examples\n+///\n+/// ```\n+/// use std::collections::hash_map::RandomState;\n+/// use std::hash::{BuildHasher, Hasher};\n+///\n+/// let s = RandomState::new();\n+/// let mut hasher_1 = s.build_hasher();\n+/// let mut hasher_2 = s.build_hasher();\n+///\n+/// hasher_1.write_u32(8128);\n+/// hasher_2.write_u32(8128);\n+///\n+/// assert_eq!(hasher_1.finish(), hasher_2.finish());\n+/// ```\n+///\n+/// [`build_hasher`]: #method.build_hasher\n+/// [`Hasher`]: trait.Hasher.html\n+/// [`HashMap`]: ../../std/collections/struct.HashMap.html\n #[stable(since = \"1.7.0\", feature = \"build_hasher\")]\n pub trait BuildHasher {\n     /// Type of the hasher that will be created.\n@@ -272,6 +295,9 @@ pub trait BuildHasher {\n \n     /// Creates a new hasher.\n     ///\n+    /// Each call to `build_hasher` on the same instance should produce identical\n+    /// [`Hasher`]s.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -281,6 +307,8 @@ pub trait BuildHasher {\n     /// let s = RandomState::new();\n     /// let new_s = s.build_hasher();\n     /// ```\n+    ///\n+    /// [`Hasher`]: trait.Hasher.html\n     #[stable(since = \"1.7.0\", feature = \"build_hasher\")]\n     fn build_hasher(&self) -> Self::Hasher;\n }"}]}