{"sha": "9a592e61ff36640eb8898724a55aa893454ec7d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhNTkyZTYxZmYzNjY0MGViODg5ODcyNGE1NWFhODkzNDU0ZWM3ZDM=", "commit": {"author": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-05T19:53:31Z"}, "committer": {"name": "Michael Hewson", "email": "michael@michaelhewson.ca", "date": "2017-11-07T18:36:10Z"}, "message": "Improve feature gate error, and return after emitting errors instead of looping forever", "tree": {"sha": "ea229740aeb59a42a863b9f0db44bf38e8e4738a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea229740aeb59a42a863b9f0db44bf38e8e4738a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a592e61ff36640eb8898724a55aa893454ec7d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a592e61ff36640eb8898724a55aa893454ec7d3", "html_url": "https://github.com/rust-lang/rust/commit/9a592e61ff36640eb8898724a55aa893454ec7d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a592e61ff36640eb8898724a55aa893454ec7d3/comments", "author": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikeyhew", "id": 6751033, "node_id": "MDQ6VXNlcjY3NTEwMzM=", "avatar_url": "https://avatars.githubusercontent.com/u/6751033?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikeyhew", "html_url": "https://github.com/mikeyhew", "followers_url": "https://api.github.com/users/mikeyhew/followers", "following_url": "https://api.github.com/users/mikeyhew/following{/other_user}", "gists_url": "https://api.github.com/users/mikeyhew/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikeyhew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikeyhew/subscriptions", "organizations_url": "https://api.github.com/users/mikeyhew/orgs", "repos_url": "https://api.github.com/users/mikeyhew/repos", "events_url": "https://api.github.com/users/mikeyhew/events{/privacy}", "received_events_url": "https://api.github.com/users/mikeyhew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a3f5866fe87a02254a3d4ab1debaa9e1ee460990", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3f5866fe87a02254a3d4ab1debaa9e1ee460990", "html_url": "https://github.com/rust-lang/rust/commit/a3f5866fe87a02254a3d4ab1debaa9e1ee460990"}], "stats": {"total": 17, "additions": 13, "deletions": 4}, "files": [{"sha": "048733f837c50d1b15602f108be9be73dd6985bf", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9a592e61ff36640eb8898724a55aa893454ec7d3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a592e61ff36640eb8898724a55aa893454ec7d3/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=9a592e61ff36640eb8898724a55aa893454ec7d3", "patch": "@@ -20,6 +20,7 @@ use rustc::util::nodemap::{FxHashSet, FxHashMap};\n use rustc::middle::lang_items;\n \n use syntax::ast;\n+use syntax::feature_gate::{self, GateIssue};\n use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n \n@@ -481,18 +482,26 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n                 if let Ok(InferOk { obligations, value: () }) = eq(self_ty, potential_self_ty) {\n                     fcx.register_predicates(obligations);\n                     autoderef.finalize();\n-                    break;\n+                    break\n                 }\n \n             } else {\n-                span_err!(fcx.tcx.sess, span, E0307, \"invalid `self` type: {:?}\", self_arg_ty);\n-                return;\n+                fcx.tcx.sess.diagnostic().mut_span_err(span, &format!(\"invalid `self` type: {:?}\", self_arg_ty))\n+                .note(&format!(\"type must be `{:?}` or a type that dereferences to it`\", self_ty))\n+                .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n+                .code(\"E0307\".into())\n+                .emit();\n+                return\n             }\n         }\n \n         if let ExplicitSelf::Other = ExplicitSelf::determine(fcx, fcx.param_env, self_ty, self_arg_ty) {\n             if !fcx.tcx.sess.features.borrow().arbitrary_self_types {\n-                fcx.tcx.sess.span_err(span, \"Arbitrary `self` types are experimental\");\n+                feature_gate::feature_err(&fcx.tcx.sess.parse_sess, \"arbitrary_self_types\", span,\n+                    GateIssue::Language, \"arbitrary `self` types are unstable\")\n+                .help(\"consider changing to `self`, `&self`, `&mut self`, or `self: Box<Self>`\")\n+                .emit();\n+                return\n             }\n         }\n     }"}]}