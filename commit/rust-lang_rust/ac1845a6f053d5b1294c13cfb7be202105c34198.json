{"sha": "ac1845a6f053d5b1294c13cfb7be202105c34198", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjMTg0NWE2ZjA1M2Q1YjEyOTRjMTNjZmI3YmUyMDIxMDVjMzQxOTg=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-24T20:04:44Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-27T14:23:52Z"}, "message": "Fix super_predicates_that_define_assoc_type API doc", "tree": {"sha": "a95152d52b6379b220c95cdb33c57ac49d0f1e94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a95152d52b6379b220c95cdb33c57ac49d0f1e94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac1845a6f053d5b1294c13cfb7be202105c34198", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl/BC/gACgkQgTGiTgx5\n768F4g//SxX8WUnoevKZ6lLNW+RR9EVQL1pHehOeCXA7Qbnjdorw9dxwKwlQw5ap\nBNaY27vIFmvwibEQagsTycTsxumUwhNaroQanymrh8/Hm90ApNHzJSTvGfJ0EfKK\n+p77om68Tgn4HkyZh6a0m22ok77a4gQTqdC1vP/TOxWRW6KEeQmK4kIKd9TD29KO\nomok8GtRukHA+Ag4zO+Q4IHVqeIbodCGVJNOl79/NPdANy4GCQDn9NcR3iYXbC+l\nlEGAe4slklhSVaMkpHJgNcA1B5bewE6VuEWKiYMuv4bWlHp49PfmQrc1Ircuy8nV\nIsSx2omTJhgEerxVimNdIvVIx6z6GqcfJ6jdB2XzztLUuxzYczXFIe5ekAVu2QYa\nNq+zNbBDLjOv7Ygm1Fb+XgkZ4/wlynEUVbfSyHru9l33Yp+mrsWWOyNtAkzQgb3Z\nJ+fY9KjkxgEKExy+80b3+d7Qf9i2Ue+x9Vh4v4a92MDXzKbWWwl3D3DjYb2NkMkQ\nXCBUVj5z7WflxPxcbbn8/gwMQUL9uqCcIh6IDKdyNkipSi6RfB6W5iYGcjPcxhA9\n1ZGdTmXo04Wc+Bz1aeeictHo0v2mtXfwDrLDZLKdTwwLxupQRZWyEuhbalYuLpp4\nTpC8OtZiYEtVXf0ICLxf0g2EW5qSaBmHwtpNv8xYrORoniGQ23E=\n=9N2U\n-----END PGP SIGNATURE-----", "payload": "tree a95152d52b6379b220c95cdb33c57ac49d0f1e94\nparent 28446ef19eebaee31bbbd2706fed29632ee7b7f9\nauthor Santiago Pastorino <spastorino@gmail.com> 1606248284 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1606487032 -0300\n\nFix super_predicates_that_define_assoc_type API doc\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac1845a6f053d5b1294c13cfb7be202105c34198", "html_url": "https://github.com/rust-lang/rust/commit/ac1845a6f053d5b1294c13cfb7be202105c34198", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac1845a6f053d5b1294c13cfb7be202105c34198/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28446ef19eebaee31bbbd2706fed29632ee7b7f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/28446ef19eebaee31bbbd2706fed29632ee7b7f9", "html_url": "https://github.com/rust-lang/rust/commit/28446ef19eebaee31bbbd2706fed29632ee7b7f9"}], "stats": {"total": 10, "additions": 4, "deletions": 6}, "files": [{"sha": "925a05c879bd99f1bc9da5fdb86550b87c0f3e59", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ac1845a6f053d5b1294c13cfb7be202105c34198/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac1845a6f053d5b1294c13cfb7be202105c34198/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=ac1845a6f053d5b1294c13cfb7be202105c34198", "patch": "@@ -442,12 +442,10 @@ rustc_queries! {\n             desc { |tcx| \"computing the super traits of `{}`\", tcx.def_path_str(key) }\n         }\n \n-        /// Maps from the `DefId` of a trait to the list of\n-        /// super-predicates. This is a subset of the full list of\n-        /// predicates. We store these in a separate map because we must\n-        /// evaluate them even during type conversion, often before the\n-        /// full predicates are available (note that supertraits have\n-        /// additional acyclicity requirements).\n+        /// The `Option<Ident>` is the name of an associated type. If it is `None`, then this query\n+        /// returns the full set of predicates. If `Some<Ident>`, then the query returns only the\n+        /// subset of super-predicates that reference traits that define the given associated type.\n+        /// This is used to avoid cycles in resolving types like `T::Item`.\n         query super_predicates_that_define_assoc_type(key: (DefId, Option<rustc_span::symbol::Ident>)) -> ty::GenericPredicates<'tcx> {\n             desc { |tcx| \"computing the super traits of `{}`{}\",\n                 tcx.def_path_str(key.0),"}]}