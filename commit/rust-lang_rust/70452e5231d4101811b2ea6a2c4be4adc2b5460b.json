{"sha": "70452e5231d4101811b2ea6a2c4be4adc2b5460b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNDUyZTUyMzFkNDEwMTgxMWIyZWE2YTJjNGJlNGFkYzJiNTQ2MGI=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-04-07T02:52:35Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-04-22T15:49:56Z"}, "message": "Consider nullability for equivalence of monomorphized fns.", "tree": {"sha": "e35e224fe084b820622c6ed52419bf20ee488afa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e35e224fe084b820622c6ed52419bf20ee488afa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70452e5231d4101811b2ea6a2c4be4adc2b5460b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70452e5231d4101811b2ea6a2c4be4adc2b5460b", "html_url": "https://github.com/rust-lang/rust/commit/70452e5231d4101811b2ea6a2c4be4adc2b5460b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70452e5231d4101811b2ea6a2c4be4adc2b5460b/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f45ae54ea6609febda24a116e8c30b8fcda466b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f45ae54ea6609febda24a116e8c30b8fcda466b", "html_url": "https://github.com/rust-lang/rust/commit/7f45ae54ea6609febda24a116e8c30b8fcda466b"}], "stats": {"total": 52, "additions": 40, "deletions": 12}, "files": [{"sha": "2d9f834040a8e70f642af308d8174ac72014c52e", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/70452e5231d4101811b2ea6a2c4be4adc2b5460b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70452e5231d4101811b2ea6a2c4be4adc2b5460b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=70452e5231d4101811b2ea6a2c4be4adc2b5460b", "patch": "@@ -2007,6 +2007,11 @@ pub fn trans_enum_variant(ccx: @CrateContext,\n     // XXX is there a better way to reconstruct the ty::t?\n     let repr = adt::represent_type(ccx, enum_ty);\n \n+    debug!(\"trans_enum_variant: name=%s tps=%s repr=%? enum_ty=%s\",\n+           unsafe { str::raw::from_c_str(llvm::LLVMGetValueName(llfndecl)) },\n+           ~\"[\" + str::connect(ty_param_substs.map(|&t| ty_to_str(ccx.tcx, t)), \", \") + ~\"]\",\n+           repr, ty_to_str(ccx.tcx, enum_ty));\n+\n     adt::trans_start_init(bcx, repr, fcx.llretptr.get(), disr);\n     for vec::eachi(args) |i, va| {\n         let lldestptr = adt::trans_field_ptr(bcx,"}, {"sha": "faf7ddd4ff7c1810f60c1dc0ba5fdb7b3fde14b5", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/70452e5231d4101811b2ea6a2c4be4adc2b5460b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70452e5231d4101811b2ea6a2c4be4adc2b5460b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=70452e5231d4101811b2ea6a2c4be4adc2b5460b", "patch": "@@ -1311,10 +1311,35 @@ pub enum mono_param_id {\n     mono_any,\n     mono_repr(uint /* size */,\n               uint /* align */,\n-              bool /* is_float */,\n+              MonoDataClass,\n               datum::DatumMode),\n }\n \n+#[deriving(Eq)]\n+pub enum MonoDataClass {\n+    MonoBits,    // Anything not treated differently from arbitrary integer data\n+    MonoNonNull, // Non-null pointers (used for optional-pointer optimization)\n+    // FIXME(#3547)---scalars and floats are\n+    // treated differently in most ABIs.  But we\n+    // should be doing something more detailed\n+    // here.\n+    MonoFloat\n+}\n+\n+pub fn mono_data_classify(t: ty::t) -> MonoDataClass {\n+    match ty::get(t).sty {\n+        ty::ty_float(_) => MonoFloat,\n+        ty::ty_rptr(*) | ty::ty_uniq(*) |\n+        ty::ty_box(*) | ty::ty_opaque_box(*) |\n+        ty::ty_estr(ty::vstore_uniq) | ty::ty_evec(_, ty::vstore_uniq) |\n+        ty::ty_estr(ty::vstore_box) | ty::ty_evec(_, ty::vstore_box) |\n+        ty::ty_bare_fn(*) => MonoNonNull,\n+        // Is that everything?  Would closures or slices qualify?\n+        _ => MonoBits\n+    }\n+}\n+\n+\n #[deriving(Eq)]\n pub struct mono_id_ {\n     def: ast::def_id,\n@@ -1338,6 +1363,12 @@ impl to_bytes::IterBytes for mono_param_id {\n     }\n }\n \n+impl to_bytes::IterBytes for MonoDataClass {\n+    fn iter_bytes(&self, lsb0: bool, f:to_bytes::Cb) {\n+        (*self as u8).iter_bytes(lsb0, f)\n+    }\n+}\n+\n impl to_bytes::IterBytes for mono_id_ {\n     fn iter_bytes(&self, lsb0: bool, f: to_bytes::Cb) {\n         to_bytes::iter_bytes_2(&self.def, &self.params, lsb0, f);"}, {"sha": "a0fcdf7fde8bd1e0f705c6f8556a0fd353060c5f", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70452e5231d4101811b2ea6a2c4be4adc2b5460b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70452e5231d4101811b2ea6a2c4be4adc2b5460b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=70452e5231d4101811b2ea6a2c4be4adc2b5460b", "patch": "@@ -395,22 +395,14 @@ pub fn make_mono_id(ccx: @CrateContext,\n                             let size = machine::llbitsize_of_real(ccx, llty);\n                             let align = machine::llalign_of_pref(ccx, llty);\n                             let mode = datum::appropriate_mode(subst);\n-\n-                            // FIXME(#3547)---scalars and floats are\n-                            // treated differently in most ABIs.  But we\n-                            // should be doing something more detailed\n-                            // here.\n-                            let is_float = match ty::get(subst).sty {\n-                                ty::ty_float(_) => true,\n-                                _ => false\n-                            };\n+                            let data_class = mono_data_classify(subst);\n \n                             // Special value for nil to prevent problems\n                             // with undef return pointers.\n                             if size <= 8u && ty::type_is_nil(subst) {\n-                                mono_repr(0u, 0u, is_float, mode)\n+                                mono_repr(0u, 0u, data_class, mode)\n                             } else {\n-                                mono_repr(size, align, is_float, mode)\n+                                mono_repr(size, align, data_class, mode)\n                             }\n                         } else {\n                             mono_precise(subst, None)"}]}