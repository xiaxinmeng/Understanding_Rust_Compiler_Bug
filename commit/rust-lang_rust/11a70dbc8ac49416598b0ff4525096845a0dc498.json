{"sha": "11a70dbc8ac49416598b0ff4525096845a0dc498", "node_id": "C_kwDOAAsO6NoAKDExYTcwZGJjOGFjNDk0MTY1OThiMGZmNDUyNTA5Njg0NWEwZGM0OTg", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-22T15:13:28Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-22T15:13:28Z"}, "message": "erase region in ParamEnvAnd and make ConstUnifyCtxt private", "tree": {"sha": "36b737cbba04d95e13a41c5ab1060821f597fe23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36b737cbba04d95e13a41c5ab1060821f597fe23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11a70dbc8ac49416598b0ff4525096845a0dc498", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11a70dbc8ac49416598b0ff4525096845a0dc498", "html_url": "https://github.com/rust-lang/rust/commit/11a70dbc8ac49416598b0ff4525096845a0dc498", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11a70dbc8ac49416598b0ff4525096845a0dc498/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe69a5cf0cba9943311b350af0bc800f52c6adbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe69a5cf0cba9943311b350af0bc800f52c6adbd", "html_url": "https://github.com/rust-lang/rust/commit/fe69a5cf0cba9943311b350af0bc800f52c6adbd"}], "stats": {"total": 25, "additions": 12, "deletions": 13}, "files": [{"sha": "2886d921c705dcd42afb50279c474feb95a8c482", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/11a70dbc8ac49416598b0ff4525096845a0dc498/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a70dbc8ac49416598b0ff4525096845a0dc498/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=11a70dbc8ac49416598b0ff4525096845a0dc498", "patch": "@@ -702,11 +702,11 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             return false;\n         }\n \n-        let erased_args = self.tcx.erase_regions((a, b));\n-        let erased_param_env = self.tcx.erase_regions(param_env);\n-        debug!(\"after erase_regions args: {:?}, param_env: {:?}\", erased_args, param_env);\n+        let param_env_and = param_env.and((a, b));\n+        let erased = self.tcx.erase_regions(param_env_and);\n+        debug!(\"after erase_regions: {:?}\", erased);\n \n-        self.tcx.try_unify_abstract_consts(erased_param_env.and(erased_args))\n+        self.tcx.try_unify_abstract_consts(erased)\n     }\n \n     pub fn is_in_snapshot(&self) -> bool {"}, {"sha": "7e5989b4112cff868e76f7e7f6da8fcb991365ad", "filename": "compiler/rustc_middle/src/mir/interpret/queries.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/11a70dbc8ac49416598b0ff4525096845a0dc498/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a70dbc8ac49416598b0ff4525096845a0dc498/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fqueries.rs?ref=11a70dbc8ac49416598b0ff4525096845a0dc498", "patch": "@@ -41,7 +41,10 @@ impl<'tcx> TyCtxt<'tcx> {\n     ) -> EvalToConstValueResult<'tcx> {\n         // Cannot resolve `Unevaluated` constants that contain inference\n         // variables. We reject those here since `resolve_opt_const_arg`\n-        // would fail otherwise\n+        // would fail otherwise.\n+        //\n+        // When trying to evaluate constants containing inference variables,\n+        // use `Infcx::const_eval_resolve` instead.\n         if ct.substs.has_infer_types_or_consts() {\n             bug!(\"did not expect inference variables here\");\n         }"}, {"sha": "4fb186ab0efe8ae0c4e85cc0057354a3d4637b44", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/11a70dbc8ac49416598b0ff4525096845a0dc498/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a70dbc8ac49416598b0ff4525096845a0dc498/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=11a70dbc8ac49416598b0ff4525096845a0dc498", "patch": "@@ -195,7 +195,7 @@ fn satisfied_from_param_env<'tcx>(\n         match pred.kind().skip_binder() {\n             ty::PredicateKind::ConstEvaluatable(uv) => {\n                 if let Some(b_ct) = AbstractConst::new(tcx, uv)? {\n-                    let const_unify_ctxt = ConstUnifyCtxt::new(tcx, param_env);\n+                    let const_unify_ctxt = ConstUnifyCtxt { tcx, param_env };\n \n                     // Try to unify with each subtree in the AbstractConst to allow for\n                     // `N + 1` being const evaluatable even if theres only a `ConstEvaluatable`\n@@ -579,7 +579,7 @@ pub(super) fn try_unify_abstract_consts<'tcx>(\n     (|| {\n         if let Some(a) = AbstractConst::new(tcx, a)? {\n             if let Some(b) = AbstractConst::new(tcx, b)? {\n-                let const_unify_ctxt = ConstUnifyCtxt::new(tcx, param_env);\n+                let const_unify_ctxt = ConstUnifyCtxt { tcx, param_env };\n                 return Ok(const_unify_ctxt.try_unify(a, b));\n             }\n         }\n@@ -625,22 +625,18 @@ where\n     recurse(tcx, ct, &mut f)\n }\n \n-pub(super) struct ConstUnifyCtxt<'tcx> {\n+struct ConstUnifyCtxt<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n impl<'tcx> ConstUnifyCtxt<'tcx> {\n-    pub(super) fn new(tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Self {\n-        ConstUnifyCtxt { tcx, param_env }\n-    }\n-\n     // Substitutes generics repeatedly to allow AbstractConsts to unify where a\n     // ConstKind::Unevalated could be turned into an AbstractConst that would unify e.g.\n     // Param(N) should unify with Param(T), substs: [Unevaluated(\"T2\", [Unevaluated(\"T3\", [Param(N)])])]\n     #[inline]\n     #[instrument(skip(self), level = \"debug\")]\n-    pub(super) fn try_replace_substs_in_root(\n+    fn try_replace_substs_in_root(\n         &self,\n         mut abstr_const: AbstractConst<'tcx>,\n     ) -> Option<AbstractConst<'tcx>> {"}]}