{"sha": "71f4658c14c63be2c9e6dbf85e46c10cf20fed71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxZjQ2NThjMTRjNjNiZTJjOWU2ZGJmODVlNDZjMTBjZjIwZmVkNzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-06T15:10:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-06T15:10:44Z"}, "message": "Auto merge of #32048 - bluss:overloaded-assign-op, r=eddyb\n\nDo not trigger unused_assignments for overloaded AssignOps\n\nIf `v` were a type with some kind of indirection, so that `v += 1` would\nhave an effect even if `v` were not used anymore, the unused_assignments lint\nwould mark a false positive.\n\nThis exempts overloaded (non-primitive) assign ops from being treated as\nassignments (they are method calls).\n\nThe previous compile-fail tests that ensure x += 1 can trigger for\nprimitive types continue to pass. Added a representative test for the\n\"view\" indirection.\n\nFixes #31895", "tree": {"sha": "3735bc58e00addda52b6f5ffc4193a85a54151c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3735bc58e00addda52b6f5ffc4193a85a54151c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/71f4658c14c63be2c9e6dbf85e46c10cf20fed71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/71f4658c14c63be2c9e6dbf85e46c10cf20fed71", "html_url": "https://github.com/rust-lang/rust/commit/71f4658c14c63be2c9e6dbf85e46c10cf20fed71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/71f4658c14c63be2c9e6dbf85e46c10cf20fed71/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80922a7ad8dfc2a774233a190d36f895d655a83c", "url": "https://api.github.com/repos/rust-lang/rust/commits/80922a7ad8dfc2a774233a190d36f895d655a83c", "html_url": "https://github.com/rust-lang/rust/commit/80922a7ad8dfc2a774233a190d36f895d655a83c"}, {"sha": "cfe4efd0523cd8106b20ba732f7d7677548f8157", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfe4efd0523cd8106b20ba732f7d7677548f8157", "html_url": "https://github.com/rust-lang/rust/commit/cfe4efd0523cd8106b20ba732f7d7677548f8157"}], "stats": {"total": 84, "additions": 78, "deletions": 6}, "files": [{"sha": "04240bf2875746dc6644f5cc73ae16c87fee23a0", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/71f4658c14c63be2c9e6dbf85e46c10cf20fed71/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f4658c14c63be2c9e6dbf85e46c10cf20fed71/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=71f4658c14c63be2c9e6dbf85e46c10cf20fed71", "patch": "@@ -1086,11 +1086,17 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           }\n \n           hir::ExprAssignOp(_, ref l, ref r) => {\n-            // see comment on lvalues in\n-            // propagate_through_lvalue_components()\n-            let succ = self.write_lvalue(&l, succ, ACC_WRITE|ACC_READ);\n-            let succ = self.propagate_through_expr(&r, succ);\n-            self.propagate_through_lvalue_components(&l, succ)\n+            // an overloaded assign op is like a method call\n+            if self.ir.tcx.is_method_call(expr.id) {\n+                let succ = self.propagate_through_expr(&l, succ);\n+                self.propagate_through_expr(&r, succ)\n+            } else {\n+                // see comment on lvalues in\n+                // propagate_through_lvalue_components()\n+                let succ = self.write_lvalue(&l, succ, ACC_WRITE|ACC_READ);\n+                let succ = self.propagate_through_expr(&r, succ);\n+                self.propagate_through_lvalue_components(&l, succ)\n+            }\n           }\n \n           // Uninteresting cases: just propagate in rev exec order\n@@ -1410,7 +1416,9 @@ fn check_expr(this: &mut Liveness, expr: &Expr) {\n       }\n \n       hir::ExprAssignOp(_, ref l, _) => {\n-        this.check_lvalue(&l);\n+        if !this.ir.tcx.is_method_call(expr.id) {\n+            this.check_lvalue(&l);\n+        }\n \n         intravisit::walk_expr(this, expr);\n       }"}, {"sha": "3aab953eb7940bc6d2a33c3e73ce5b78d30d53aa", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/71f4658c14c63be2c9e6dbf85e46c10cf20fed71/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f4658c14c63be2c9e6dbf85e46c10cf20fed71/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=71f4658c14c63be2c9e6dbf85e46c10cf20fed71", "patch": "@@ -12,6 +12,8 @@\n #![deny(unused_assignments)]\n #![allow(dead_code, non_camel_case_types, trivial_numeric_casts)]\n \n+use std::ops::AddAssign;\n+\n fn f1(x: isize) {\n     //~^ ERROR unused variable: `x`\n }\n@@ -100,5 +102,49 @@ fn f5c() {\n     }\n }\n \n+struct View<'a>(&'a mut [i32]);\n+\n+impl<'a> AddAssign<i32> for View<'a> {\n+    fn add_assign(&mut self, rhs: i32) {\n+        for lhs in self.0.iter_mut() {\n+            *lhs += rhs;\n+        }\n+    }\n+}\n+\n+fn f6() {\n+    let mut array = [1, 2, 3];\n+    let mut v = View(&mut array);\n+\n+    // ensure an error shows up for x even if lhs of an overloaded add assign\n+\n+    let x;\n+    //~^ ERROR variable `x` is assigned to, but never used\n+\n+    *({\n+        x = 0;  //~ ERROR value assigned to `x` is never read\n+        &mut v\n+    }) += 1;\n+}\n+\n+\n+struct MutRef<'a>(&'a mut i32);\n+\n+impl<'a> AddAssign<i32> for MutRef<'a> {\n+    fn add_assign(&mut self, rhs: i32) {\n+        *self.0 += rhs;\n+    }\n+}\n+\n+fn f7() {\n+    let mut a = 1;\n+    {\n+        // `b` does not trigger unused_variables\n+        let mut b = MutRef(&mut a);\n+        b += 1;\n+    }\n+    drop(a);\n+}\n+\n fn main() {\n }"}, {"sha": "3ed9e8548dcbc05d693d888f49e4d651998c3963", "filename": "src/test/run-pass/augmented-assignments.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/71f4658c14c63be2c9e6dbf85e46c10cf20fed71/src%2Ftest%2Frun-pass%2Faugmented-assignments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/71f4658c14c63be2c9e6dbf85e46c10cf20fed71/src%2Ftest%2Frun-pass%2Faugmented-assignments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Faugmented-assignments.rs?ref=71f4658c14c63be2c9e6dbf85e46c10cf20fed71", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![deny(unused_assignments)]\n+\n use std::mem;\n use std::ops::{\n     AddAssign, BitAndAssign, BitOrAssign, BitXorAssign, DivAssign, Index, MulAssign, RemAssign,\n@@ -27,6 +29,8 @@ impl Slice {\n     }\n }\n \n+struct View<'a>(&'a mut [i32]);\n+\n fn main() {\n     let mut x = Int(1);\n \n@@ -78,6 +82,12 @@ fn main() {\n     assert_eq!(array[0], 1);\n     assert_eq!(array[1], 2);\n     assert_eq!(array[2], 3);\n+\n+    // sized indirection\n+    // check that this does *not* trigger the unused_assignments lint\n+    let mut array = [0, 1, 2];\n+    let mut view = View(&mut array);\n+    view += 1;\n }\n \n impl AddAssign for Int {\n@@ -159,3 +169,11 @@ impl AddAssign<i32> for Slice {\n         }\n     }\n }\n+\n+impl<'a> AddAssign<i32> for View<'a> {\n+    fn add_assign(&mut self, rhs: i32) {\n+        for lhs in self.0.iter_mut() {\n+            *lhs += rhs;\n+        }\n+    }\n+}"}]}