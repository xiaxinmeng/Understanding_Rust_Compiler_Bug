{"sha": "7ecddb2771922bcd0f117a3a3f681da9bcb8b70c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlY2RkYjI3NzE5MjJiY2QwZjExN2EzYTNmNjgxZGE5YmNiOGI3MGM=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-24T19:11:29Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-07-25T19:12:25Z"}, "message": "More purity to make it easier to borrow strings in format strings.", "tree": {"sha": "b801d3c113a7b783fcbef7e9a508cc31bf47e7ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b801d3c113a7b783fcbef7e9a508cc31bf47e7ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ecddb2771922bcd0f117a3a3f681da9bcb8b70c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ecddb2771922bcd0f117a3a3f681da9bcb8b70c", "html_url": "https://github.com/rust-lang/rust/commit/7ecddb2771922bcd0f117a3a3f681da9bcb8b70c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ecddb2771922bcd0f117a3a3f681da9bcb8b70c/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5be06fa1fed6d9f9467bc644e78292bf94b30f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5be06fa1fed6d9f9467bc644e78292bf94b30f4", "html_url": "https://github.com/rust-lang/rust/commit/f5be06fa1fed6d9f9467bc644e78292bf94b30f4"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "87ec11c876e88badf0f08733f24987b09f8380bb", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ecddb2771922bcd0f117a3a3f681da9bcb8b70c/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ecddb2771922bcd0f117a3a3f681da9bcb8b70c/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=7ecddb2771922bcd0f117a3a3f681da9bcb8b70c", "patch": "@@ -1616,7 +1616,7 @@ fn cmd_sources(c: cargo) {\n     if vec::len(c.opts.free) < 3u {\n         for c.sources.each_value |v| {\n             info(#fmt(\"%s (%s) via %s\",\n-                      copy v.name, copy v.url, copy v.method));\n+                      v.name, v.url, v.method));\n         }\n         ret;\n     }"}, {"sha": "ec5e9602e19f2e4ff99200353a4c7fc5f2822ed5", "filename": "src/libcore/extfmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ecddb2771922bcd0f117a3a3f681da9bcb8b70c/src%2Flibcore%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ecddb2771922bcd0f117a3a3f681da9bcb8b70c/src%2Flibcore%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fextfmt.rs?ref=7ecddb2771922bcd0f117a3a3f681da9bcb8b70c", "patch": "@@ -312,7 +312,7 @@ mod rt {\n         let mut s = str::from_char(c);\n         ret pad(cv, s, pad_nozero);\n     }\n-    fn conv_str(cv: conv, s: &str) -> ~str {\n+    pure fn conv_str(cv: conv, s: &str) -> ~str {\n         // For strings, precision is the maximum characters\n         // displayed\n         let mut unpadded = alt cv.precision {\n@@ -323,7 +323,7 @@ mod rt {\n             } else { s.to_unique() }\n           }\n         };\n-        ret pad(cv, unpadded, pad_nozero);\n+        ret unchecked { pad(cv, unpadded, pad_nozero) };\n     }\n     fn conv_float(cv: conv, f: float) -> ~str {\n         let (to_str, digits) = alt cv.precision {\n@@ -398,7 +398,7 @@ mod rt {\n           pad_float {   {might_zero_pad:true,  signed:true } }\n           pad_unsigned { {might_zero_pad:true,  signed:false} }\n         };\n-        fn have_precision(cv: conv) -> bool {\n+        pure fn have_precision(cv: conv) -> bool {\n             ret alt cv.precision { count_implied { false } _ { true } };\n         }\n         let zero_padding = {\n@@ -428,7 +428,7 @@ mod rt {\n         }\n         ret padstr + s;\n     }\n-    fn have_flag(flags: u32, f: u32) -> bool {\n+    pure fn have_flag(flags: u32, f: u32) -> bool {\n         flags & f != 0\n     }\n }"}, {"sha": "9b142adf165b2bfcb19ba8681b357a574fa2a997", "filename": "src/libcore/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7ecddb2771922bcd0f117a3a3f681da9bcb8b70c/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ecddb2771922bcd0f117a3a3f681da9bcb8b70c/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=7ecddb2771922bcd0f117a3a3f681da9bcb8b70c", "patch": "@@ -1934,7 +1934,7 @@ trait str_slice {\n     fn is_whitespace() -> bool;\n     fn is_alphanumeric() -> bool;\n     pure fn len() -> uint;\n-    fn slice(begin: uint, end: uint) -> ~str;\n+    pure fn slice(begin: uint, end: uint) -> ~str;\n     fn split(sepfn: fn(char) -> bool) -> ~[~str];\n     fn split_char(sep: char) -> ~[~str];\n     fn split_str(sep: &a/str) -> ~[~str];\n@@ -1944,7 +1944,7 @@ trait str_slice {\n     fn to_upper() -> ~str;\n     fn escape_default() -> ~str;\n     fn escape_unicode() -> ~str;\n-    fn to_unique() -> ~str;\n+    pure fn to_unique() -> ~str;\n }\n \n /// Extension methods for strings\n@@ -2013,7 +2013,7 @@ impl extensions/& of str_slice for &str {\n      * beyond the last character of the string\n      */\n     #[inline]\n-    fn slice(begin: uint, end: uint) -> ~str { slice(self, begin, end) }\n+    pure fn slice(begin: uint, end: uint) -> ~str { slice(self, begin, end) }\n     /// Splits a string into substrings using a character function\n     #[inline]\n     fn split(sepfn: fn(char) -> bool) -> ~[~str] { split(self, sepfn) }\n@@ -2053,7 +2053,7 @@ impl extensions/& of str_slice for &str {\n     fn escape_unicode() -> ~str { escape_unicode(self) }\n \n     #[inline]\n-    fn to_unique() -> ~str { self.slice(0, self.len()) }\n+    pure fn to_unique() -> ~str { self.slice(0, self.len()) }\n }\n \n #[cfg(test)]"}]}