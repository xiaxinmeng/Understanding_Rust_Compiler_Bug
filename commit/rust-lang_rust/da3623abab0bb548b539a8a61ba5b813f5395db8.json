{"sha": "da3623abab0bb548b539a8a61ba5b813f5395db8", "node_id": "C_kwDOAAsO6NoAKGRhMzYyM2FiYWIwYmI1NDhiNTM5YThhNjFiYTViODEzZjUzOTVkYjg", "commit": {"author": {"name": "Andr\u00e9 Vennberg", "email": "andre.vennberg@gmail.com", "date": "2023-01-14T16:34:59Z"}, "committer": {"name": "Andr\u00e9 Vennberg", "email": "andre.vennberg@gmail.com", "date": "2023-01-14T16:34:59Z"}, "message": "Removed various double spaces in compiler source comments.", "tree": {"sha": "6c682248d65f6e27b11861b691384b17cf374a7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c682248d65f6e27b11861b691384b17cf374a7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da3623abab0bb548b539a8a61ba5b813f5395db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da3623abab0bb548b539a8a61ba5b813f5395db8", "html_url": "https://github.com/rust-lang/rust/commit/da3623abab0bb548b539a8a61ba5b813f5395db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da3623abab0bb548b539a8a61ba5b813f5395db8/comments", "author": {"login": "anden3", "id": 1500580, "node_id": "MDQ6VXNlcjE1MDA1ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1500580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anden3", "html_url": "https://github.com/anden3", "followers_url": "https://api.github.com/users/anden3/followers", "following_url": "https://api.github.com/users/anden3/following{/other_user}", "gists_url": "https://api.github.com/users/anden3/gists{/gist_id}", "starred_url": "https://api.github.com/users/anden3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anden3/subscriptions", "organizations_url": "https://api.github.com/users/anden3/orgs", "repos_url": "https://api.github.com/users/anden3/repos", "events_url": "https://api.github.com/users/anden3/events{/privacy}", "received_events_url": "https://api.github.com/users/anden3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anden3", "id": 1500580, "node_id": "MDQ6VXNlcjE1MDA1ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/1500580?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anden3", "html_url": "https://github.com/anden3", "followers_url": "https://api.github.com/users/anden3/followers", "following_url": "https://api.github.com/users/anden3/following{/other_user}", "gists_url": "https://api.github.com/users/anden3/gists{/gist_id}", "starred_url": "https://api.github.com/users/anden3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anden3/subscriptions", "organizations_url": "https://api.github.com/users/anden3/orgs", "repos_url": "https://api.github.com/users/anden3/repos", "events_url": "https://api.github.com/users/anden3/events{/privacy}", "received_events_url": "https://api.github.com/users/anden3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "44a500c8c187b245638684748f54bd6ec67e0b25", "url": "https://api.github.com/repos/rust-lang/rust/commits/44a500c8c187b245638684748f54bd6ec67e0b25", "html_url": "https://github.com/rust-lang/rust/commit/44a500c8c187b245638684748f54bd6ec67e0b25"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "b48654d1ac36a44fa39aa059709b4b9dcbfd5dac", "filename": "compiler/rustc_abi/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da3623abab0bb548b539a8a61ba5b813f5395db8/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3623abab0bb548b539a8a61ba5b813f5395db8/compiler%2Frustc_abi%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_abi%2Fsrc%2Flib.rs?ref=da3623abab0bb548b539a8a61ba5b813f5395db8", "patch": "@@ -1100,7 +1100,7 @@ pub enum FieldsShape {\n         /// named `inverse_memory_index`.\n         ///\n         // FIXME(eddyb) build a better abstraction for permutations, if possible.\n-        // FIXME(camlorn) also consider small vector  optimization here.\n+        // FIXME(camlorn) also consider small vector optimization here.\n         memory_index: Vec<u32>,\n     },\n }"}, {"sha": "918fb2d69237e4cb48b125a85daab2a60f8635dc", "filename": "compiler/rustc_borrowck/src/places_conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da3623abab0bb548b539a8a61ba5b813f5395db8/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3623abab0bb548b539a8a61ba5b813f5395db8/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fplaces_conflict.rs?ref=da3623abab0bb548b539a8a61ba5b813f5395db8", "patch": "@@ -209,7 +209,7 @@ fn place_components_conflict<'tcx>(\n             match (elem, &base_ty.kind(), access) {\n                 (_, _, Shallow(Some(ArtificialField::ArrayLength)))\n                 | (_, _, Shallow(Some(ArtificialField::ShallowBorrow))) => {\n-                    // The array length is like  additional fields on the\n+                    // The array length is like additional fields on the\n                     // type; it does not overlap any existing data there.\n                     // Furthermore, if cannot actually be a prefix of any\n                     // borrowed place (at least in MIR as it is currently.)"}, {"sha": "c8cda0dc90c6daf39095057859453ec164196609", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da3623abab0bb548b539a8a61ba5b813f5395db8/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3623abab0bb548b539a8a61ba5b813f5395db8/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=da3623abab0bb548b539a8a61ba5b813f5395db8", "patch": "@@ -417,7 +417,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                                 // Named constants have to be equated with the value\n                                 // being matched, so that's a read of the value being matched.\n                                 //\n-                                // FIXME: We don't actually  reads for ZSTs.\n+                                // FIXME: We don't actually reads for ZSTs.\n                                 needs_to_be_read = true;\n                             }\n                             _ => {"}, {"sha": "3a3080b2c967d9228dd096090f4f955f6acab53d", "filename": "compiler/rustc_hir_typeck/src/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da3623abab0bb548b539a8a61ba5b813f5395db8/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3623abab0bb548b539a8a61ba5b813f5395db8/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fprobe.rs?ref=da3623abab0bb548b539a8a61ba5b813f5395db8", "patch": "@@ -232,7 +232,7 @@ pub type PickResult<'tcx> = Result<Pick<'tcx>, MethodError<'tcx>>;\n pub enum Mode {\n     // An expression of the form `receiver.method_name(...)`.\n     // Autoderefs are performed on `receiver`, lookup is done based on the\n-    // `self` argument  of the method, and static methods aren't considered.\n+    // `self` argument of the method, and static methods aren't considered.\n     MethodCall,\n     // An expression of the form `Type::item` or `<T>::item`.\n     // No autoderefs are performed, lookup is done based on the type each"}, {"sha": "55576b4e0d19df06c04f03cba652af8852faffbf", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da3623abab0bb548b539a8a61ba5b813f5395db8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3623abab0bb548b539a8a61ba5b813f5395db8/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=da3623abab0bb548b539a8a61ba5b813f5395db8", "patch": "@@ -2091,7 +2091,7 @@ fn parse_libs(matches: &getopts::Matches, error_format: ErrorOutputType) -> Vec<\n         .map(|s| {\n             // Parse string of the form \"[KIND[:MODIFIERS]=]lib[:new_name]\",\n             // where KIND is one of \"dylib\", \"framework\", \"static\", \"link-arg\" and\n-            // where MODIFIERS are  a comma separated list of supported modifiers\n+            // where MODIFIERS are a comma separated list of supported modifiers\n             // (bundle, verbatim, whole-archive, as-needed). Each modifier is prefixed\n             // with either + or - to indicate whether it is enabled or disabled.\n             // The last value specified for a given modifier wins."}, {"sha": "e5fbf981beda0117cd89a198fe3b5c1eac9e11b8", "filename": "compiler/rustc_trait_selection/src/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da3623abab0bb548b539a8a61ba5b813f5395db8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da3623abab0bb548b539a8a61ba5b813f5395db8/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fmod.rs?ref=da3623abab0bb548b539a8a61ba5b813f5395db8", "patch": "@@ -308,7 +308,7 @@ pub fn normalize_param_env_or_error<'tcx>(\n     // the `TypeOutlives` predicates first inside the unnormalized parameter environment, and\n     // then we normalize the `TypeOutlives` bounds inside the normalized parameter environment.\n     //\n-    // This works fairly well because trait matching  does not actually care about param-env\n+    // This works fairly well because trait matching does not actually care about param-env\n     // TypeOutlives predicates - these are normally used by regionck.\n     let outlives_predicates: Vec<_> = predicates\n         .drain_filter(|predicate| {"}]}