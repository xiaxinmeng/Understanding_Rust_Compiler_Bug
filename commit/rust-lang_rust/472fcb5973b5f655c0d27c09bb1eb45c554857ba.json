{"sha": "472fcb5973b5f655c0d27c09bb1eb45c554857ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MmZjYjU5NzNiNWY2NTVjMGQyN2MwOWJiMWViNDVjNTU0ODU3YmE=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-01T09:28:42Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-03-02T23:50:19Z"}, "message": "Fix the search paths for macro-expanded non-inline modules", "tree": {"sha": "1b2ba23b02bde8950cf472774daecebd2ac502a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b2ba23b02bde8950cf472774daecebd2ac502a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/472fcb5973b5f655c0d27c09bb1eb45c554857ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/472fcb5973b5f655c0d27c09bb1eb45c554857ba", "html_url": "https://github.com/rust-lang/rust/commit/472fcb5973b5f655c0d27c09bb1eb45c554857ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/472fcb5973b5f655c0d27c09bb1eb45c554857ba/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cccc0880d9301aa8a6b154a26e5c102d53f1a771", "url": "https://api.github.com/repos/rust-lang/rust/commits/cccc0880d9301aa8a6b154a26e5c102d53f1a771", "html_url": "https://github.com/rust-lang/rust/commit/cccc0880d9301aa8a6b154a26e5c102d53f1a771"}], "stats": {"total": 63, "additions": 60, "deletions": 3}, "files": [{"sha": "c0306b8494be222b174e760f1638946fdb124dea", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/472fcb5973b5f655c0d27c09bb1eb45c554857ba/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472fcb5973b5f655c0d27c09bb1eb45c554857ba/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=472fcb5973b5f655c0d27c09bb1eb45c554857ba", "patch": "@@ -552,6 +552,10 @@ pub struct ExtCtxt<'a> {\n \n     pub syntax_env: SyntaxEnv,\n     pub recursion_count: usize,\n+\n+    pub filename: Option<String>,\n+    pub mod_path_stack: Vec<InternedString>,\n+    pub in_block: bool,\n }\n \n impl<'a> ExtCtxt<'a> {\n@@ -570,6 +574,10 @@ impl<'a> ExtCtxt<'a> {\n             exported_macros: Vec::new(),\n             syntax_env: env,\n             recursion_count: 0,\n+\n+            filename: None,\n+            mod_path_stack: Vec::new(),\n+            in_block: false,\n         }\n     }\n "}, {"sha": "e8098cfff457db3c500b6d637f26136b360b3e8c", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 45, "deletions": 2, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/472fcb5973b5f655c0d27c09bb1eb45c554857ba/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472fcb5973b5f655c0d27c09bb1eb45c554857ba/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=472fcb5973b5f655c0d27c09bb1eb45c554857ba", "patch": "@@ -1183,6 +1183,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n }\n \n impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n+    fn fold_crate(&mut self, c: Crate) -> Crate {\n+        self.cx.filename = Some(self.cx.parse_sess.codemap().span_to_filename(c.span));\n+        noop_fold_crate(c, self)\n+    }\n+\n     fn fold_expr(&mut self, expr: P<ast::Expr>) -> P<ast::Expr> {\n         expand_expr(expr, self)\n     }\n@@ -1192,7 +1197,27 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n     }\n \n     fn fold_item(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n-        expand_item(item, self)\n+        use std::mem::replace;\n+        let result;\n+        if let ast::ItemKind::Mod(ast::Mod { inner, .. }) = item.node {\n+            if item.span.contains(inner) {\n+                self.push_mod_path(item.ident, &item.attrs);\n+                result = expand_item(item, self);\n+                self.pop_mod_path();\n+            } else {\n+                let filename = if inner != codemap::DUMMY_SP {\n+                    Some(self.cx.parse_sess.codemap().span_to_filename(inner))\n+                } else { None };\n+                let orig_filename = replace(&mut self.cx.filename, filename);\n+                let orig_mod_path_stack = replace(&mut self.cx.mod_path_stack, Vec::new());\n+                result = expand_item(item, self);\n+                self.cx.filename = orig_filename;\n+                self.cx.mod_path_stack = orig_mod_path_stack;\n+            }\n+        } else {\n+            result = expand_item(item, self);\n+        }\n+        result\n     }\n \n     fn fold_item_kind(&mut self, item: ast::ItemKind) -> ast::ItemKind {\n@@ -1204,7 +1229,10 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n     }\n \n     fn fold_block(&mut self, block: P<Block>) -> P<Block> {\n-        expand_block(block, self)\n+        let was_in_block = ::std::mem::replace(&mut self.cx.in_block, true);\n+        let result = expand_block(block, self);\n+        self.cx.in_block = was_in_block;\n+        result\n     }\n \n     fn fold_arm(&mut self, arm: ast::Arm) -> ast::Arm {\n@@ -1230,6 +1258,21 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n     }\n }\n \n+impl<'a, 'b> MacroExpander<'a, 'b> {\n+    fn push_mod_path(&mut self, id: Ident, attrs: &[ast::Attribute]) {\n+        let default_path = id.name.as_str();\n+        let file_path = match ::attr::first_attr_value_str_by_name(attrs, \"path\") {\n+            Some(d) => d,\n+            None => default_path,\n+        };\n+        self.cx.mod_path_stack.push(file_path)\n+    }\n+\n+    fn pop_mod_path(&mut self) {\n+        self.cx.mod_path_stack.pop().unwrap();\n+    }\n+}\n+\n fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n     /* this discards information in the case of macro-defining macros */\n     Span {"}, {"sha": "77bae4cb3f6c45b99789e9452b139043f051b11f", "filename": "src/libsyntax/ext/tt/macro_rules.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/472fcb5973b5f655c0d27c09bb1eb45c554857ba/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/472fcb5973b5f655c0d27c09bb1eb45c554857ba/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_rules.rs?ref=472fcb5973b5f655c0d27c09bb1eb45c554857ba", "patch": "@@ -16,7 +16,7 @@ use ext::tt::macro_parser::{Success, Error, Failure};\n use ext::tt::macro_parser::{MatchedSeq, MatchedNonterminal};\n use ext::tt::macro_parser::parse;\n use parse::lexer::new_tt_reader;\n-use parse::parser::Parser;\n+use parse::parser::{Parser, Restrictions};\n use parse::token::{self, special_idents, gensym_ident, NtTT, Token};\n use parse::token::Token::*;\n use print;\n@@ -195,6 +195,12 @@ fn generic_extension<'cx>(cx: &'cx ExtCtxt,\n                                            imported_from,\n                                            rhs);\n                 let mut p = Parser::new(cx.parse_sess(), cx.cfg(), Box::new(trncbr));\n+                p.filename = cx.filename.clone();\n+                p.mod_path_stack = cx.mod_path_stack.clone();\n+                p.restrictions = match cx.in_block {\n+                    true => Restrictions::NO_NONINLINE_MOD,\n+                    false => Restrictions::empty(),\n+                };\n                 p.check_unknown_macro_variable();\n                 // Let the context choose how to interpret the result.\n                 // Weird, but useful for X-macros."}]}