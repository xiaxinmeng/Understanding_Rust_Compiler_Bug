{"sha": "8e256b19d529ebf9021030e17791e23a1212ff1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMjU2YjE5ZDUyOWViZjkwMjEwMzBlMTc3OTFlMjNhMTIxMmZmMWU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-04-18T18:26:10Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-07-02T17:35:49Z"}, "message": "parser: Break float tokens into parts in tuple field positions", "tree": {"sha": "fbd0367a1dd5a6366a39afa53a5ed21228851da6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbd0367a1dd5a6366a39afa53a5ed21228851da6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e256b19d529ebf9021030e17791e23a1212ff1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e256b19d529ebf9021030e17791e23a1212ff1e", "html_url": "https://github.com/rust-lang/rust/commit/8e256b19d529ebf9021030e17791e23a1212ff1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e256b19d529ebf9021030e17791e23a1212ff1e/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a6d4342be6a6acbade8e7ef65e73d27ee8c9144", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a6d4342be6a6acbade8e7ef65e73d27ee8c9144", "html_url": "https://github.com/rust-lang/rust/commit/8a6d4342be6a6acbade8e7ef65e73d27ee8c9144"}], "stats": {"total": 551, "additions": 492, "deletions": 59}, "files": [{"sha": "d52cea74520bd8a7202b1f4f1cc09e530c3fac9a", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 81, "deletions": 38, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/8e256b19d529ebf9021030e17791e23a1212ff1e/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e256b19d529ebf9021030e17791e23a1212ff1e/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=8e256b19d529ebf9021030e17791e23a1212ff1e", "patch": "@@ -770,10 +770,10 @@ impl<'a> Parser<'a> {\n         match self.token.uninterpolate().kind {\n             token::Ident(..) => self.parse_dot_suffix(base, lo),\n             token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) => {\n-                Ok(self.parse_tuple_field_access_expr(lo, base, symbol, suffix))\n+                Ok(self.parse_tuple_field_access_expr(lo, base, symbol, suffix, None))\n             }\n-            token::Literal(token::Lit { kind: token::Float, symbol, .. }) => {\n-                self.recover_field_access_by_float_lit(lo, base, symbol)\n+            token::Literal(token::Lit { kind: token::Float, symbol, suffix }) => {\n+                Ok(self.parse_tuple_field_access_expr_float(lo, base, symbol, suffix))\n             }\n             _ => {\n                 self.error_unexpected_after_dot();\n@@ -788,45 +788,84 @@ impl<'a> Parser<'a> {\n         self.struct_span_err(self.token.span, &format!(\"unexpected token: `{}`\", actual)).emit();\n     }\n \n-    fn recover_field_access_by_float_lit(\n+    // We need and identifier or integer, but the next token is a float.\n+    // Break the float into components to extract the identifier or integer.\n+    // FIXME: With current `TokenCursor` it's hard to break tokens into more than 2\n+    // parts unless those parts are processed immediately. `TokenCursor` should either\n+    // support pushing \"future tokens\" (would be also helpful to `break_and_eat`), or\n+    // we should break everything including floats into more basic proc-macro style\n+    // tokens in the lexer (probably preferable).\n+    fn parse_tuple_field_access_expr_float(\n         &mut self,\n         lo: Span,\n         base: P<Expr>,\n-        sym: Symbol,\n-    ) -> PResult<'a, P<Expr>> {\n-        self.bump();\n-\n-        let fstr = sym.as_str();\n-        let msg = format!(\"unexpected token: `{}`\", sym);\n-\n-        let mut err = self.struct_span_err(self.prev_token.span, &msg);\n-        err.span_label(self.prev_token.span, \"unexpected token\");\n-\n-        if fstr.chars().all(|x| \"0123456789.\".contains(x)) {\n-            let float = match fstr.parse::<f64>() {\n-                Ok(f) => f,\n-                Err(_) => {\n-                    err.emit();\n-                    return Ok(base);\n+        float: Symbol,\n+        suffix: Option<Symbol>,\n+    ) -> P<Expr> {\n+        #[derive(Debug)]\n+        enum FloatComponent {\n+            IdentLike(String),\n+            Punct(char),\n+        }\n+        use FloatComponent::*;\n+\n+        let mut components = Vec::new();\n+        let mut ident_like = String::new();\n+        for c in float.as_str().chars() {\n+            if c == '_' || c.is_ascii_alphanumeric() {\n+                ident_like.push(c);\n+            } else if matches!(c, '.' | '+' | '-') {\n+                if !ident_like.is_empty() {\n+                    components.push(IdentLike(mem::take(&mut ident_like)));\n                 }\n-            };\n-            let sugg = pprust::to_string(|s| {\n-                s.popen();\n-                s.print_expr(&base);\n-                s.s.word(\".\");\n-                s.print_usize(float.trunc() as usize);\n-                s.pclose();\n-                s.s.word(\".\");\n-                s.s.word(fstr.splitn(2, '.').last().unwrap().to_string())\n-            });\n-            err.span_suggestion(\n-                lo.to(self.prev_token.span),\n-                \"try parenthesizing the first index\",\n-                sugg,\n-                Applicability::MachineApplicable,\n-            );\n+                components.push(Punct(c));\n+            } else {\n+                panic!(\"unexpected character in a float token: {:?}\", c)\n+            }\n+        }\n+        if !ident_like.is_empty() {\n+            components.push(IdentLike(ident_like));\n+        }\n+\n+        // FIXME: Make the span more precise.\n+        let span = self.token.span;\n+        match &*components {\n+            // 1e2\n+            [IdentLike(i)] => {\n+                self.parse_tuple_field_access_expr(lo, base, Symbol::intern(&i), suffix, None)\n+            }\n+            // 1.\n+            [IdentLike(i), Punct('.')] => {\n+                assert!(suffix.is_none());\n+                let symbol = Symbol::intern(&i);\n+                self.token = Token::new(token::Ident(symbol, false), span);\n+                let next_token = Token::new(token::Dot, span);\n+                self.parse_tuple_field_access_expr(lo, base, symbol, None, Some(next_token))\n+            }\n+            // 1.2 | 1.2e3\n+            [IdentLike(i1), Punct('.'), IdentLike(i2)] => {\n+                let symbol1 = Symbol::intern(&i1);\n+                self.token = Token::new(token::Ident(symbol1, false), span);\n+                let next_token1 = Token::new(token::Dot, span);\n+                let base1 =\n+                    self.parse_tuple_field_access_expr(lo, base, symbol1, None, Some(next_token1));\n+                let symbol2 = Symbol::intern(&i2);\n+                let next_token2 = Token::new(token::Ident(symbol2, false), span);\n+                self.bump_with(next_token2); // `.`\n+                self.parse_tuple_field_access_expr(lo, base1, symbol2, suffix, None)\n+            }\n+            // 1e+ | 1e- (recovered)\n+            [IdentLike(_), Punct('+' | '-')] |\n+            // 1e+2 | 1e-2\n+            [IdentLike(_), Punct('+' | '-'), IdentLike(_)] |\n+            // 1.2e+3 | 1.2e-3\n+            [IdentLike(_), Punct('.'), IdentLike(_), Punct('+' | '-'), IdentLike(_)] => {\n+                // See the FIXME about `TokenCursor` above.\n+                self.error_unexpected_after_dot();\n+                base\n+            }\n+            _ => panic!(\"unexpected components in a float token: {:?}\", components),\n         }\n-        Err(err)\n     }\n \n     fn parse_tuple_field_access_expr(\n@@ -835,8 +874,12 @@ impl<'a> Parser<'a> {\n         base: P<Expr>,\n         field: Symbol,\n         suffix: Option<Symbol>,\n+        next_token: Option<Token>,\n     ) -> P<Expr> {\n-        self.bump();\n+        match next_token {\n+            Some(next_token) => self.bump_with(next_token),\n+            None => self.bump(),\n+        }\n         let span = self.prev_token.span;\n         let field = ExprKind::Field(base, Ident::new(field, span));\n         self.expect_no_suffix(span, \"a tuple index\", suffix);"}, {"sha": "eaa7465dc4d06f66a792d31ff0f1acc29bf21a32", "filename": "src/test/ui/parser/float-field.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/8e256b19d529ebf9021030e17791e23a1212ff1e/src%2Ftest%2Fui%2Fparser%2Ffloat-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e256b19d529ebf9021030e17791e23a1212ff1e/src%2Ftest%2Fui%2Fparser%2Ffloat-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffloat-field.rs?ref=8e256b19d529ebf9021030e17791e23a1212ff1e", "patch": "@@ -0,0 +1,62 @@\n+struct S(u8, (u8, u8));\n+\n+fn main() {\n+    let s = S(0, (0, 0));\n+\n+    s.1e1; //~ ERROR no field `1e1` on type `S`\n+    s.1.; //~ ERROR unexpected token: `;`\n+    s.1.1;\n+    s.1.1e1; //~ ERROR no field `1e1` on type `(u8, u8)`\n+    { s.1e+; } //~ ERROR unexpected token: `1e+`\n+               //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+`\n+               //~| ERROR expected at least one digit in exponent\n+    { s.1e-; } //~ ERROR unexpected token: `1e-`\n+               //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-`\n+               //~| ERROR expected at least one digit in exponent\n+    { s.1e+1; } //~ ERROR unexpected token: `1e+1`\n+                //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+1`\n+    { s.1e-1; } //~ ERROR unexpected token: `1e-1`\n+                //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-1`\n+    { s.1.1e+1; } //~ ERROR unexpected token: `1.1e+1`\n+                  //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e+1`\n+    { s.1.1e-1; } //~ ERROR unexpected token: `1.1e-1`\n+                  //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e-1`\n+    s.0x1e1;  //~ ERROR no field `0x1e1` on type `S`\n+    s.0x1.; //~ ERROR no field `0x1` on type `S`\n+            //~| ERROR hexadecimal float literal is not supported\n+            //~| ERROR unexpected token: `;`\n+    s.0x1.1; //~ ERROR no field `0x1` on type `S`\n+             //~| ERROR hexadecimal float literal is not supported\n+    s.0x1.1e1; //~ ERROR no field `0x1` on type `S`\n+               //~| ERROR hexadecimal float literal is not supported\n+    { s.0x1e+; } //~ ERROR expected expression, found `;`\n+    { s.0x1e-; } //~ ERROR expected expression, found `;`\n+    s.0x1e+1; //~ ERROR no field `0x1e` on type `S`\n+    s.0x1e-1; //~ ERROR no field `0x1e` on type `S`\n+    { s.0x1.1e+1; } //~ ERROR unexpected token: `0x1.1e+1`\n+                    //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `0x1.1e+1`\n+                    //~| ERROR hexadecimal float literal is not supported\n+    { s.0x1.1e-1; } //~ ERROR unexpected token: `0x1.1e-1`\n+                    //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `0x1.1e-1`\n+                    //~| ERROR hexadecimal float literal is not supported\n+    s.1e1f32; //~ ERROR no field `1e1` on type `S`\n+              //~| ERROR suffixes on a tuple index are invalid\n+    s.1.f32; //~ ERROR no field `f32` on type `(u8, u8)`\n+    s.1.1f32; //~ ERROR suffixes on a tuple index are invalid\n+    s.1.1e1f32; //~ ERROR no field `1e1` on type `(u8, u8)`\n+                //~| ERROR suffixes on a tuple index are invalid\n+    { s.1e+f32; } //~ ERROR unexpected token: `1e+f32`\n+                  //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+f32`\n+                  //~| ERROR expected at least one digit in exponent\n+    { s.1e-f32; } //~ ERROR unexpected token: `1e-f32`\n+                  //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-f32`\n+                  //~| ERROR expected at least one digit in exponent\n+    { s.1e+1f32; } //~ ERROR unexpected token: `1e+1f32`\n+                   //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+1f32`\n+    { s.1e-1f32; } //~ ERROR unexpected token: `1e-1f32`\n+                   //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-1f32`\n+    { s.1.1e+1f32; } //~ ERROR unexpected token: `1.1e+1f32`\n+                    //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e+1f32`\n+    { s.1.1e-1f32; } //~ ERROR unexpected token: `1.1e-1f32`\n+                    //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e-1f32`\n+}"}, {"sha": "62202b999648d1417b1e4f1455f165d5debba228", "filename": "src/test/ui/parser/float-field.stderr", "status": "added", "additions": 349, "deletions": 0, "changes": 349, "blob_url": "https://github.com/rust-lang/rust/blob/8e256b19d529ebf9021030e17791e23a1212ff1e/src%2Ftest%2Fui%2Fparser%2Ffloat-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8e256b19d529ebf9021030e17791e23a1212ff1e/src%2Ftest%2Fui%2Fparser%2Ffloat-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffloat-field.stderr?ref=8e256b19d529ebf9021030e17791e23a1212ff1e", "patch": "@@ -0,0 +1,349 @@\n+error: expected at least one digit in exponent\n+  --> $DIR/float-field.rs:10:9\n+   |\n+LL |     { s.1e+; }\n+   |         ^^^\n+\n+error: expected at least one digit in exponent\n+  --> $DIR/float-field.rs:13:9\n+   |\n+LL |     { s.1e-; }\n+   |         ^^^\n+\n+error: hexadecimal float literal is not supported\n+  --> $DIR/float-field.rs:25:7\n+   |\n+LL |     s.0x1.;\n+   |       ^^^^\n+\n+error: hexadecimal float literal is not supported\n+  --> $DIR/float-field.rs:28:7\n+   |\n+LL |     s.0x1.1;\n+   |       ^^^^^\n+\n+error: hexadecimal float literal is not supported\n+  --> $DIR/float-field.rs:30:7\n+   |\n+LL |     s.0x1.1e1;\n+   |       ^^^^^^^\n+\n+error: hexadecimal float literal is not supported\n+  --> $DIR/float-field.rs:36:9\n+   |\n+LL |     { s.0x1.1e+1; }\n+   |         ^^^^^^^^\n+\n+error: hexadecimal float literal is not supported\n+  --> $DIR/float-field.rs:39:9\n+   |\n+LL |     { s.0x1.1e-1; }\n+   |         ^^^^^^^^\n+\n+error: expected at least one digit in exponent\n+  --> $DIR/float-field.rs:48:9\n+   |\n+LL |     { s.1e+f32; }\n+   |         ^^^^^^\n+\n+error: expected at least one digit in exponent\n+  --> $DIR/float-field.rs:51:9\n+   |\n+LL |     { s.1e-f32; }\n+   |         ^^^^^^\n+\n+error: unexpected token: `;`\n+  --> $DIR/float-field.rs:7:9\n+   |\n+LL |     s.1.;\n+   |         ^\n+\n+error: unexpected token: `1e+`\n+  --> $DIR/float-field.rs:10:9\n+   |\n+LL |     { s.1e+; }\n+   |         ^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+`\n+  --> $DIR/float-field.rs:10:9\n+   |\n+LL |     { s.1e+; }\n+   |         ^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1e-`\n+  --> $DIR/float-field.rs:13:9\n+   |\n+LL |     { s.1e-; }\n+   |         ^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-`\n+  --> $DIR/float-field.rs:13:9\n+   |\n+LL |     { s.1e-; }\n+   |         ^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1e+1`\n+  --> $DIR/float-field.rs:16:9\n+   |\n+LL |     { s.1e+1; }\n+   |         ^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+1`\n+  --> $DIR/float-field.rs:16:9\n+   |\n+LL |     { s.1e+1; }\n+   |         ^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1e-1`\n+  --> $DIR/float-field.rs:18:9\n+   |\n+LL |     { s.1e-1; }\n+   |         ^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-1`\n+  --> $DIR/float-field.rs:18:9\n+   |\n+LL |     { s.1e-1; }\n+   |         ^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1.1e+1`\n+  --> $DIR/float-field.rs:20:9\n+   |\n+LL |     { s.1.1e+1; }\n+   |         ^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e+1`\n+  --> $DIR/float-field.rs:20:9\n+   |\n+LL |     { s.1.1e+1; }\n+   |         ^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1.1e-1`\n+  --> $DIR/float-field.rs:22:9\n+   |\n+LL |     { s.1.1e-1; }\n+   |         ^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e-1`\n+  --> $DIR/float-field.rs:22:9\n+   |\n+LL |     { s.1.1e-1; }\n+   |         ^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `;`\n+  --> $DIR/float-field.rs:25:11\n+   |\n+LL |     s.0x1.;\n+   |           ^\n+\n+error: expected expression, found `;`\n+  --> $DIR/float-field.rs:32:14\n+   |\n+LL |     { s.0x1e+; }\n+   |              ^ expected expression\n+\n+error: expected expression, found `;`\n+  --> $DIR/float-field.rs:33:14\n+   |\n+LL |     { s.0x1e-; }\n+   |              ^ expected expression\n+\n+error: unexpected token: `0x1.1e+1`\n+  --> $DIR/float-field.rs:36:9\n+   |\n+LL |     { s.0x1.1e+1; }\n+   |         ^^^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `0x1.1e+1`\n+  --> $DIR/float-field.rs:36:9\n+   |\n+LL |     { s.0x1.1e+1; }\n+   |         ^^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `0x1.1e-1`\n+  --> $DIR/float-field.rs:39:9\n+   |\n+LL |     { s.0x1.1e-1; }\n+   |         ^^^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `0x1.1e-1`\n+  --> $DIR/float-field.rs:39:9\n+   |\n+LL |     { s.0x1.1e-1; }\n+   |         ^^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: suffixes on a tuple index are invalid\n+  --> $DIR/float-field.rs:42:7\n+   |\n+LL |     s.1e1f32;\n+   |       ^^^^^^ invalid suffix `f32`\n+\n+error: suffixes on a tuple index are invalid\n+  --> $DIR/float-field.rs:45:7\n+   |\n+LL |     s.1.1f32;\n+   |       ^^^^^^ invalid suffix `f32`\n+\n+error: suffixes on a tuple index are invalid\n+  --> $DIR/float-field.rs:46:7\n+   |\n+LL |     s.1.1e1f32;\n+   |       ^^^^^^^^ invalid suffix `f32`\n+\n+error: unexpected token: `1e+f32`\n+  --> $DIR/float-field.rs:48:9\n+   |\n+LL |     { s.1e+f32; }\n+   |         ^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+f32`\n+  --> $DIR/float-field.rs:48:9\n+   |\n+LL |     { s.1e+f32; }\n+   |         ^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1e-f32`\n+  --> $DIR/float-field.rs:51:9\n+   |\n+LL |     { s.1e-f32; }\n+   |         ^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-f32`\n+  --> $DIR/float-field.rs:51:9\n+   |\n+LL |     { s.1e-f32; }\n+   |         ^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1e+1f32`\n+  --> $DIR/float-field.rs:54:9\n+   |\n+LL |     { s.1e+1f32; }\n+   |         ^^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+1f32`\n+  --> $DIR/float-field.rs:54:9\n+   |\n+LL |     { s.1e+1f32; }\n+   |         ^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1e-1f32`\n+  --> $DIR/float-field.rs:56:9\n+   |\n+LL |     { s.1e-1f32; }\n+   |         ^^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-1f32`\n+  --> $DIR/float-field.rs:56:9\n+   |\n+LL |     { s.1e-1f32; }\n+   |         ^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1.1e+1f32`\n+  --> $DIR/float-field.rs:58:9\n+   |\n+LL |     { s.1.1e+1f32; }\n+   |         ^^^^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e+1f32`\n+  --> $DIR/float-field.rs:58:9\n+   |\n+LL |     { s.1.1e+1f32; }\n+   |         ^^^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1.1e-1f32`\n+  --> $DIR/float-field.rs:60:9\n+   |\n+LL |     { s.1.1e-1f32; }\n+   |         ^^^^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e-1f32`\n+  --> $DIR/float-field.rs:60:9\n+   |\n+LL |     { s.1.1e-1f32; }\n+   |         ^^^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error[E0609]: no field `1e1` on type `S`\n+  --> $DIR/float-field.rs:6:7\n+   |\n+LL |     s.1e1;\n+   |       ^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `1e1` on type `(u8, u8)`\n+  --> $DIR/float-field.rs:9:7\n+   |\n+LL |     s.1.1e1;\n+   |       ^^^^^\n+\n+error[E0609]: no field `0x1e1` on type `S`\n+  --> $DIR/float-field.rs:24:7\n+   |\n+LL |     s.0x1e1;\n+   |       ^^^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `0x1` on type `S`\n+  --> $DIR/float-field.rs:25:7\n+   |\n+LL |     s.0x1.;\n+   |       ^^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `0x1` on type `S`\n+  --> $DIR/float-field.rs:28:7\n+   |\n+LL |     s.0x1.1;\n+   |       ^^^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `0x1` on type `S`\n+  --> $DIR/float-field.rs:30:7\n+   |\n+LL |     s.0x1.1e1;\n+   |       ^^^^^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `0x1e` on type `S`\n+  --> $DIR/float-field.rs:34:7\n+   |\n+LL |     s.0x1e+1;\n+   |       ^^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `0x1e` on type `S`\n+  --> $DIR/float-field.rs:35:7\n+   |\n+LL |     s.0x1e-1;\n+   |       ^^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `1e1` on type `S`\n+  --> $DIR/float-field.rs:42:7\n+   |\n+LL |     s.1e1f32;\n+   |       ^^^^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `f32` on type `(u8, u8)`\n+  --> $DIR/float-field.rs:44:9\n+   |\n+LL |     s.1.f32;\n+   |         ^^^\n+\n+error[E0609]: no field `1e1` on type `(u8, u8)`\n+  --> $DIR/float-field.rs:46:7\n+   |\n+LL |     s.1.1e1f32;\n+   |       ^^^^^^^^\n+\n+error: aborting due to 55 previous errors\n+\n+For more information about this error, try `rustc --explain E0609`."}, {"sha": "cd1a85a9d2442805413880f8f992a284604ed71e", "filename": "src/test/ui/tuple/tuple-float-index.fixed", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a6d4342be6a6acbade8e7ef65e73d27ee8c9144/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8a6d4342be6a6acbade8e7ef65e73d27ee8c9144/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.fixed?ref=8a6d4342be6a6acbade8e7ef65e73d27ee8c9144", "patch": "@@ -1,5 +0,0 @@\n-// run-rustfix\n-\n-fn main () {\n-    ((1, (2, 3)).1).1; //~ ERROR unexpected token: `1.1`\n-}"}, {"sha": "1faabac2bcdac3b21b8c9ef8dd3889066441c2a8", "filename": "src/test/ui/tuple/tuple-float-index.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8a6d4342be6a6acbade8e7ef65e73d27ee8c9144/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a6d4342be6a6acbade8e7ef65e73d27ee8c9144/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.rs?ref=8a6d4342be6a6acbade8e7ef65e73d27ee8c9144", "patch": "@@ -1,5 +0,0 @@\n-// run-rustfix\n-\n-fn main () {\n-    (1, (2, 3)).1.1; //~ ERROR unexpected token: `1.1`\n-}"}, {"sha": "a0ea0e0a30a725796e190c08369068ab4fee1684", "filename": "src/test/ui/tuple/tuple-float-index.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8a6d4342be6a6acbade8e7ef65e73d27ee8c9144/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a6d4342be6a6acbade8e7ef65e73d27ee8c9144/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.stderr?ref=8a6d4342be6a6acbade8e7ef65e73d27ee8c9144", "patch": "@@ -1,11 +0,0 @@\n-error: unexpected token: `1.1`\n-  --> $DIR/tuple-float-index.rs:4:17\n-   |\n-LL |     (1, (2, 3)).1.1;\n-   |     ------------^^^\n-   |     |           |\n-   |     |           unexpected token\n-   |     help: try parenthesizing the first index: `((1, (2, 3)).1).1`\n-\n-error: aborting due to previous error\n-"}]}