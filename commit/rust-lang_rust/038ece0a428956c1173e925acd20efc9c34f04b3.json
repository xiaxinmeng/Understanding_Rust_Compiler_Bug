{"sha": "038ece0a428956c1173e925acd20efc9c34f04b3", "node_id": "C_kwDOAAsO6NoAKDAzOGVjZTBhNDI4OTU2YzExNzNlOTI1YWNkMjBlZmM5YzM0ZjA0YjM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-04-05T11:47:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-05T11:47:24Z"}, "message": "Rollup merge of #109956 - compiler-errors:tweak-debug-outputs, r=oli-obk\n\nTweak debug outputs to make debugging new solver easier\n\n1. Move the fields that are \"most important\" (I know this is subjective) to the beginning of the structs.\n\nFor goals, I typically care more about the predicate than the param-env (which is significantly longer in debug output).\nFor canonicalized things, I typically care more about what is *being* canonicalized.\nFor a canonical response, I typically care about the response -- or at least, it's typically useful to put it first since it's short and affects the whether the solver recurses or not...\n\n2. Add some more debug and instrument calls to functions to add more structure to tracing lines.\n\nr? `@oli-obk` or `@BoxyUwU` (since I think `@lcnr` is on holiday)", "tree": {"sha": "c68ee4276968caca0de78a79926fa573b364da92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c68ee4276968caca0de78a79926fa573b364da92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/038ece0a428956c1173e925acd20efc9c34f04b3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkLV/MCRBK7hj4Ov3rIwAA+EcIAEulDQV/KfizdWkxdHkMvcxQ\nUWOuKPbJvOaRhBg5KqN11p+9UGMJ2esiVV4RhcUg6rjvN5DcJhjrQezjbszBf0mp\nEE3EFw+NFniqAe8MeeUd/IZ62vouBpbaK6KxxEpVOLOMqu77AdWHD292K94ObR7f\nL/QMmwf96BYnaVR7SiU7IZnqaA32CuA/aKYVARiPPXeN29sJNic6/M87Jy5TyujD\naFdGkro0MvcOK68wz0hCw1Xr23/C+Q9xLsq6nXsv8NpmmxwkI52suem6EynWwWlL\na6dtqINtfD15t7CvfQIZ4+6kkl8Tu7Xm0GDXQ8404neqiAvlIbOlals+NnQcNbk=\n=uI9b\n-----END PGP SIGNATURE-----\n", "payload": "tree c68ee4276968caca0de78a79926fa573b364da92\nparent 616dde1d4e6aa540a28e961608ba8277e8f53b49\nparent 786fc90855a368a90cdbad3163a2993efd793da4\nauthor Yuki Okushi <jtitor@2k36.org> 1680695244 +0900\ncommitter GitHub <noreply@github.com> 1680695244 +0900\n\nRollup merge of #109956 - compiler-errors:tweak-debug-outputs, r=oli-obk\n\nTweak debug outputs to make debugging new solver easier\n\n1. Move the fields that are \"most important\" (I know this is subjective) to the beginning of the structs.\n\nFor goals, I typically care more about the predicate than the param-env (which is significantly longer in debug output).\nFor canonicalized things, I typically care more about what is *being* canonicalized.\nFor a canonical response, I typically care about the response -- or at least, it's typically useful to put it first since it's short and affects the whether the solver recurses or not...\n\n2. Add some more debug and instrument calls to functions to add more structure to tracing lines.\n\nr? `@oli-obk` or `@BoxyUwU` (since I think `@lcnr` is on holiday)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/038ece0a428956c1173e925acd20efc9c34f04b3", "html_url": "https://github.com/rust-lang/rust/commit/038ece0a428956c1173e925acd20efc9c34f04b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/038ece0a428956c1173e925acd20efc9c34f04b3/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "616dde1d4e6aa540a28e961608ba8277e8f53b49", "url": "https://api.github.com/repos/rust-lang/rust/commits/616dde1d4e6aa540a28e961608ba8277e8f53b49", "html_url": "https://github.com/rust-lang/rust/commit/616dde1d4e6aa540a28e961608ba8277e8f53b49"}, {"sha": "786fc90855a368a90cdbad3163a2993efd793da4", "url": "https://api.github.com/repos/rust-lang/rust/commits/786fc90855a368a90cdbad3163a2993efd793da4", "html_url": "https://github.com/rust-lang/rust/commit/786fc90855a368a90cdbad3163a2993efd793da4"}], "stats": {"total": 128, "additions": 76, "deletions": 52}, "files": [{"sha": "2f42849f390b6474af7a13f20726dea542a8b5fb", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/038ece0a428956c1173e925acd20efc9c34f04b3/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038ece0a428956c1173e925acd20efc9c34f04b3/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=038ece0a428956c1173e925acd20efc9c34f04b3", "patch": "@@ -35,9 +35,9 @@ use std::ops::Index;\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyDecodable, TyEncodable)]\n #[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct Canonical<'tcx, V> {\n+    pub value: V,\n     pub max_universe: ty::UniverseIndex,\n     pub variables: CanonicalVarInfos<'tcx>,\n-    pub value: V,\n }\n \n pub type CanonicalVarInfos<'tcx> = &'tcx List<CanonicalVarInfo<'tcx>>;"}, {"sha": "0d6f9813e767375048a6b83bf04cb8b8fa51a471", "filename": "compiler/rustc_middle/src/traits/solve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/038ece0a428956c1173e925acd20efc9c34f04b3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038ece0a428956c1173e925acd20efc9c34f04b3/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fsolve.rs?ref=038ece0a428956c1173e925acd20efc9c34f04b3", "patch": "@@ -20,8 +20,8 @@ pub type EvaluationCache<'tcx> = Cache<CanonicalGoal<'tcx>, QueryResult<'tcx>>;\n /// we're currently typechecking while the `predicate` is some trait bound.\n #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, TypeFoldable, TypeVisitable)]\n pub struct Goal<'tcx, P> {\n-    pub param_env: ty::ParamEnv<'tcx>,\n     pub predicate: P,\n+    pub param_env: ty::ParamEnv<'tcx>,\n }\n \n impl<'tcx, P> Goal<'tcx, P> {\n@@ -41,10 +41,10 @@ impl<'tcx, P> Goal<'tcx, P> {\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, TypeFoldable, TypeVisitable)]\n pub struct Response<'tcx> {\n+    pub certainty: Certainty,\n     pub var_values: CanonicalVarValues<'tcx>,\n     /// Additional constraints returned by this query.\n     pub external_constraints: ExternalConstraints<'tcx>,\n-    pub certainty: Certainty,\n }\n \n #[derive(Debug, PartialEq, Eq, Clone, Copy, Hash, TypeFoldable, TypeVisitable)]"}, {"sha": "f8a54f73a33e43c26476acdbccc6003bfad743e9", "filename": "compiler/rustc_trait_selection/src/solve/assembly.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/038ece0a428956c1173e925acd20efc9c34f04b3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038ece0a428956c1173e925acd20efc9c34f04b3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fassembly.rs?ref=038ece0a428956c1173e925acd20efc9c34f04b3", "patch": "@@ -270,6 +270,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     /// To deal with this, we first try to normalize the self type and add the candidates for the normalized\n     /// self type to the list of candidates in case that succeeds. We also have to consider candidates with the\n     /// projection as a self type as well\n+    #[instrument(level = \"debug\", skip_all)]\n     fn assemble_candidates_after_normalizing_self_ty<G: GoalKind<'tcx>>(\n         &mut self,\n         goal: Goal<'tcx, G>,\n@@ -315,6 +316,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip_all)]\n     fn assemble_impl_candidates<G: GoalKind<'tcx>>(\n         &mut self,\n         goal: Goal<'tcx, G>,\n@@ -333,6 +335,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         );\n     }\n \n+    #[instrument(level = \"debug\", skip_all)]\n     fn assemble_builtin_impl_candidates<G: GoalKind<'tcx>>(\n         &mut self,\n         goal: Goal<'tcx, G>,\n@@ -390,6 +393,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip_all)]\n     fn assemble_param_env_candidates<G: GoalKind<'tcx>>(\n         &mut self,\n         goal: Goal<'tcx, G>,\n@@ -405,6 +409,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip_all)]\n     fn assemble_alias_bound_candidates<G: GoalKind<'tcx>>(\n         &mut self,\n         goal: Goal<'tcx, G>,\n@@ -452,6 +457,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip_all)]\n     fn assemble_object_bound_candidates<G: GoalKind<'tcx>>(\n         &mut self,\n         goal: Goal<'tcx, G>,\n@@ -514,6 +520,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         }\n     }\n \n+    #[instrument(level = \"debug\", skip_all)]\n     fn assemble_coherence_unknowable_candidates<G: GoalKind<'tcx>>(\n         &mut self,\n         goal: Goal<'tcx, G>,"}, {"sha": "cdbab5bd8d27c7a69b048e20cc8191840f5c1b12", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/038ece0a428956c1173e925acd20efc9c34f04b3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038ece0a428956c1173e925acd20efc9c34f04b3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=038ece0a428956c1173e925acd20efc9c34f04b3", "patch": "@@ -106,7 +106,7 @@ pub trait InferCtxtEvalExt<'tcx> {\n }\n \n impl<'tcx> InferCtxtEvalExt<'tcx> for InferCtxt<'tcx> {\n-    #[instrument(level = \"debug\", skip(self))]\n+    #[instrument(level = \"debug\", skip(self), ret)]\n     fn evaluate_root_goal(\n         &self,\n         goal: Goal<'tcx, ty::Predicate<'tcx>>,\n@@ -552,7 +552,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n     ///\n     /// If possible, try using `eq` instead which automatically handles nested\n     /// goals correctly.\n-    #[instrument(level = \"debug\", skip(self, param_env), ret)]\n+    #[instrument(level = \"trace\", skip(self, param_env), ret)]\n     pub(super) fn eq_and_get_goals<T: ToTrace<'tcx>>(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "9ddae8f8dcd474cf06bee11a7af79190c1c83573", "filename": "compiler/rustc_trait_selection/src/solve/mod.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/038ece0a428956c1173e925acd20efc9c34f04b3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038ece0a428956c1173e925acd20efc9c34f04b3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fmod.rs?ref=038ece0a428956c1173e925acd20efc9c34f04b3", "patch": "@@ -153,13 +153,22 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n     ) -> QueryResult<'tcx> {\n         let tcx = self.tcx();\n         // We may need to invert the alias relation direction if dealing an alias on the RHS.\n+        #[derive(Debug)]\n         enum Invert {\n             No,\n             Yes,\n         }\n         let evaluate_normalizes_to =\n             |ecx: &mut EvalCtxt<'_, 'tcx>, alias, other, direction, invert| {\n-                debug!(\"evaluate_normalizes_to(alias={:?}, other={:?})\", alias, other);\n+                let span = tracing::span!(\n+                    tracing::Level::DEBUG,\n+                    \"compute_alias_relate_goal(evaluate_normalizes_to)\",\n+                    ?alias,\n+                    ?other,\n+                    ?direction,\n+                    ?invert\n+                );\n+                let _enter = span.enter();\n                 let result = ecx.probe(|ecx| {\n                     let other = match direction {\n                         // This is purely an optimization.\n@@ -184,7 +193,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                     ));\n                     ecx.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 });\n-                debug!(\"evaluate_normalizes_to({alias}, {other}, {direction:?}) -> {result:?}\");\n+                debug!(?result);\n                 result\n             };\n \n@@ -210,7 +219,7 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n             }\n \n             (Some(alias_lhs), Some(alias_rhs)) => {\n-                debug!(\"compute_alias_relate_goal: both sides are aliases\");\n+                debug!(\"both sides are aliases\");\n \n                 let candidates = vec![\n                     // LHS normalizes-to RHS\n@@ -219,9 +228,14 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                     evaluate_normalizes_to(self, alias_rhs, lhs, direction, Invert::Yes),\n                     // Relate via substs\n                     self.probe(|ecx| {\n-                        debug!(\n-                            \"compute_alias_relate_goal: alias defids are equal, equating substs\"\n+                        let span = tracing::span!(\n+                            tracing::Level::DEBUG,\n+                            \"compute_alias_relate_goal(relate_via_substs)\",\n+                            ?alias_lhs,\n+                            ?alias_rhs,\n+                            ?direction\n                         );\n+                        let _enter = span.enter();\n \n                         match direction {\n                             ty::AliasRelationDirection::Equate => {\n@@ -275,6 +289,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         debug!(\"added_goals={:?}\", &self.nested_goals.goals[current_len..]);\n     }\n \n+    #[instrument(level = \"debug\", skip(self, responses))]\n     fn try_merge_responses(\n         &mut self,\n         responses: impl Iterator<Item = QueryResult<'tcx>>,\n@@ -304,6 +319,7 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         });\n         // FIXME(-Ztrait-solver=next): We should take the intersection of the constraints on all the\n         // responses and use that for the constraints of this ambiguous response.\n+        debug!(\">1 response, bailing with {certainty:?}\");\n         let response = self.evaluate_added_goals_and_make_canonical_response(certainty);\n         if let Ok(response) = &response {\n             assert!(response.has_no_inference_or_external_constraints());"}, {"sha": "42c28686f5c14ec3d692eb8cc2f9fc0cdd38e199", "filename": "compiler/rustc_trait_selection/src/solve/search_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/038ece0a428956c1173e925acd20efc9c34f04b3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/038ece0a428956c1173e925acd20efc9c34f04b3/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fsearch_graph%2Fmod.rs?ref=038ece0a428956c1173e925acd20efc9c34f04b3", "patch": "@@ -209,6 +209,7 @@ impl<'tcx> SearchGraph<'tcx> {\n     ) -> QueryResult<'tcx> {\n         if self.should_use_global_cache() {\n             if let Some(result) = tcx.new_solver_evaluation_cache.get(&canonical_goal, tcx) {\n+                debug!(?canonical_goal, ?result, \"cache hit\");\n                 return result;\n             }\n         }"}, {"sha": "b1d34a1962ec7948e45bf9207e8d36fcf15455e8", "filename": "tests/mir-opt/address_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/038ece0a428956c1173e925acd20efc9c34f04b3/tests%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/038ece0a428956c1173e925acd20efc9c34f04b3/tests%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Faddress_of.address_of_reborrow.SimplifyCfg-initial.after.mir?ref=038ece0a428956c1173e925acd20efc9c34f04b3", "patch": "@@ -1,36 +1,36 @@\n // MIR for `address_of_reborrow` after SimplifyCfg-initial\n \n | User Type Annotations\n-| 0: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address_of.rs:7:5: 7:18, inferred_ty: *const [i32; 10]\n-| 1: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address_of.rs:9:5: 9:25, inferred_ty: *const dyn std::marker::Send\n-| 2: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address_of.rs:13:12: 13:20, inferred_ty: *const [i32; 10]\n-| 3: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address_of.rs:13:12: 13:20, inferred_ty: *const [i32; 10]\n-| 4: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address_of.rs:14:12: 14:28, inferred_ty: *const [i32; 10]\n-| 5: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address_of.rs:14:12: 14:28, inferred_ty: *const [i32; 10]\n-| 6: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address_of.rs:15:12: 15:27, inferred_ty: *const dyn std::marker::Send\n-| 7: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address_of.rs:15:12: 15:27, inferred_ty: *const dyn std::marker::Send\n-| 8: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address_of.rs:16:12: 16:24, inferred_ty: *const [i32]\n-| 9: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address_of.rs:16:12: 16:24, inferred_ty: *const [i32]\n-| 10: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address_of.rs:18:5: 18:18, inferred_ty: *const [i32; 10]\n-| 11: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address_of.rs:20:5: 20:25, inferred_ty: *const dyn std::marker::Send\n-| 12: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address_of.rs:23:12: 23:20, inferred_ty: *const [i32; 10]\n-| 13: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*const ^0) }, span: $DIR/address_of.rs:23:12: 23:20, inferred_ty: *const [i32; 10]\n-| 14: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address_of.rs:24:12: 24:28, inferred_ty: *const [i32; 10]\n-| 15: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32; 10]) }, span: $DIR/address_of.rs:24:12: 24:28, inferred_ty: *const [i32; 10]\n-| 16: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address_of.rs:25:12: 25:27, inferred_ty: *const dyn std::marker::Send\n-| 17: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*const dyn std::marker::Send) }, span: $DIR/address_of.rs:25:12: 25:27, inferred_ty: *const dyn std::marker::Send\n-| 18: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address_of.rs:26:12: 26:24, inferred_ty: *const [i32]\n-| 19: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*const [i32]) }, span: $DIR/address_of.rs:26:12: 26:24, inferred_ty: *const [i32]\n-| 20: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) }, span: $DIR/address_of.rs:28:5: 28:16, inferred_ty: *mut [i32; 10]\n-| 21: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) }, span: $DIR/address_of.rs:30:5: 30:23, inferred_ty: *mut dyn std::marker::Send\n-| 22: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) }, span: $DIR/address_of.rs:33:12: 33:18, inferred_ty: *mut [i32; 10]\n-| 23: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }], value: Ty(*mut ^0) }, span: $DIR/address_of.rs:33:12: 33:18, inferred_ty: *mut [i32; 10]\n-| 24: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32; 10]) }, span: $DIR/address_of.rs:34:12: 34:26, inferred_ty: *mut [i32; 10]\n-| 25: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32; 10]) }, span: $DIR/address_of.rs:34:12: 34:26, inferred_ty: *mut [i32; 10]\n-| 26: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) }, span: $DIR/address_of.rs:35:12: 35:25, inferred_ty: *mut dyn std::marker::Send\n-| 27: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }], value: Ty(*mut dyn std::marker::Send) }, span: $DIR/address_of.rs:35:12: 35:25, inferred_ty: *mut dyn std::marker::Send\n-| 28: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32]) }, span: $DIR/address_of.rs:36:12: 36:22, inferred_ty: *mut [i32]\n-| 29: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut [i32]) }, span: $DIR/address_of.rs:36:12: 36:22, inferred_ty: *mut [i32]\n+| 0: user_ty: Canonical { value: Ty(*const ^0), max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }] }, span: $DIR/address_of.rs:7:5: 7:18, inferred_ty: *const [i32; 10]\n+| 1: user_ty: Canonical { value: Ty(*const dyn std::marker::Send), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }] }, span: $DIR/address_of.rs:9:5: 9:25, inferred_ty: *const dyn std::marker::Send\n+| 2: user_ty: Canonical { value: Ty(*const ^0), max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }] }, span: $DIR/address_of.rs:13:12: 13:20, inferred_ty: *const [i32; 10]\n+| 3: user_ty: Canonical { value: Ty(*const ^0), max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }] }, span: $DIR/address_of.rs:13:12: 13:20, inferred_ty: *const [i32; 10]\n+| 4: user_ty: Canonical { value: Ty(*const [i32; 10]), max_universe: U0, variables: [] }, span: $DIR/address_of.rs:14:12: 14:28, inferred_ty: *const [i32; 10]\n+| 5: user_ty: Canonical { value: Ty(*const [i32; 10]), max_universe: U0, variables: [] }, span: $DIR/address_of.rs:14:12: 14:28, inferred_ty: *const [i32; 10]\n+| 6: user_ty: Canonical { value: Ty(*const dyn std::marker::Send), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }] }, span: $DIR/address_of.rs:15:12: 15:27, inferred_ty: *const dyn std::marker::Send\n+| 7: user_ty: Canonical { value: Ty(*const dyn std::marker::Send), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }] }, span: $DIR/address_of.rs:15:12: 15:27, inferred_ty: *const dyn std::marker::Send\n+| 8: user_ty: Canonical { value: Ty(*const [i32]), max_universe: U0, variables: [] }, span: $DIR/address_of.rs:16:12: 16:24, inferred_ty: *const [i32]\n+| 9: user_ty: Canonical { value: Ty(*const [i32]), max_universe: U0, variables: [] }, span: $DIR/address_of.rs:16:12: 16:24, inferred_ty: *const [i32]\n+| 10: user_ty: Canonical { value: Ty(*const ^0), max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }] }, span: $DIR/address_of.rs:18:5: 18:18, inferred_ty: *const [i32; 10]\n+| 11: user_ty: Canonical { value: Ty(*const dyn std::marker::Send), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }] }, span: $DIR/address_of.rs:20:5: 20:25, inferred_ty: *const dyn std::marker::Send\n+| 12: user_ty: Canonical { value: Ty(*const ^0), max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }] }, span: $DIR/address_of.rs:23:12: 23:20, inferred_ty: *const [i32; 10]\n+| 13: user_ty: Canonical { value: Ty(*const ^0), max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }] }, span: $DIR/address_of.rs:23:12: 23:20, inferred_ty: *const [i32; 10]\n+| 14: user_ty: Canonical { value: Ty(*const [i32; 10]), max_universe: U0, variables: [] }, span: $DIR/address_of.rs:24:12: 24:28, inferred_ty: *const [i32; 10]\n+| 15: user_ty: Canonical { value: Ty(*const [i32; 10]), max_universe: U0, variables: [] }, span: $DIR/address_of.rs:24:12: 24:28, inferred_ty: *const [i32; 10]\n+| 16: user_ty: Canonical { value: Ty(*const dyn std::marker::Send), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }] }, span: $DIR/address_of.rs:25:12: 25:27, inferred_ty: *const dyn std::marker::Send\n+| 17: user_ty: Canonical { value: Ty(*const dyn std::marker::Send), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }] }, span: $DIR/address_of.rs:25:12: 25:27, inferred_ty: *const dyn std::marker::Send\n+| 18: user_ty: Canonical { value: Ty(*const [i32]), max_universe: U0, variables: [] }, span: $DIR/address_of.rs:26:12: 26:24, inferred_ty: *const [i32]\n+| 19: user_ty: Canonical { value: Ty(*const [i32]), max_universe: U0, variables: [] }, span: $DIR/address_of.rs:26:12: 26:24, inferred_ty: *const [i32]\n+| 20: user_ty: Canonical { value: Ty(*mut ^0), max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }] }, span: $DIR/address_of.rs:28:5: 28:16, inferred_ty: *mut [i32; 10]\n+| 21: user_ty: Canonical { value: Ty(*mut dyn std::marker::Send), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }] }, span: $DIR/address_of.rs:30:5: 30:23, inferred_ty: *mut dyn std::marker::Send\n+| 22: user_ty: Canonical { value: Ty(*mut ^0), max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }] }, span: $DIR/address_of.rs:33:12: 33:18, inferred_ty: *mut [i32; 10]\n+| 23: user_ty: Canonical { value: Ty(*mut ^0), max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }] }, span: $DIR/address_of.rs:33:12: 33:18, inferred_ty: *mut [i32; 10]\n+| 24: user_ty: Canonical { value: Ty(*mut [i32; 10]), max_universe: U0, variables: [] }, span: $DIR/address_of.rs:34:12: 34:26, inferred_ty: *mut [i32; 10]\n+| 25: user_ty: Canonical { value: Ty(*mut [i32; 10]), max_universe: U0, variables: [] }, span: $DIR/address_of.rs:34:12: 34:26, inferred_ty: *mut [i32; 10]\n+| 26: user_ty: Canonical { value: Ty(*mut dyn std::marker::Send), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }] }, span: $DIR/address_of.rs:35:12: 35:25, inferred_ty: *mut dyn std::marker::Send\n+| 27: user_ty: Canonical { value: Ty(*mut dyn std::marker::Send), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }] }, span: $DIR/address_of.rs:35:12: 35:25, inferred_ty: *mut dyn std::marker::Send\n+| 28: user_ty: Canonical { value: Ty(*mut [i32]), max_universe: U0, variables: [] }, span: $DIR/address_of.rs:36:12: 36:22, inferred_ty: *mut [i32]\n+| 29: user_ty: Canonical { value: Ty(*mut [i32]), max_universe: U0, variables: [] }, span: $DIR/address_of.rs:36:12: 36:22, inferred_ty: *mut [i32]\n |\n fn address_of_reborrow() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/address_of.rs:+0:26: +0:26"}, {"sha": "6d1c7bd18dce130a026fd6774273b7ec24f0af90", "filename": "tests/mir-opt/basic_assignment.main.SimplifyCfg-initial.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/038ece0a428956c1173e925acd20efc9c34f04b3/tests%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/038ece0a428956c1173e925acd20efc9c34f04b3/tests%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbasic_assignment.main.SimplifyCfg-initial.after.mir?ref=038ece0a428956c1173e925acd20efc9c34f04b3", "patch": "@@ -1,8 +1,8 @@\n // MIR for `main` after SimplifyCfg-initial\n \n | User Type Annotations\n-| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<std::boxed::Box<u32>>) }, span: $DIR/basic_assignment.rs:20:17: 20:33, inferred_ty: std::option::Option<std::boxed::Box<u32>>\n-| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<std::boxed::Box<u32>>) }, span: $DIR/basic_assignment.rs:20:17: 20:33, inferred_ty: std::option::Option<std::boxed::Box<u32>>\n+| 0: user_ty: Canonical { value: Ty(std::option::Option<std::boxed::Box<u32>>), max_universe: U0, variables: [] }, span: $DIR/basic_assignment.rs:20:17: 20:33, inferred_ty: std::option::Option<std::boxed::Box<u32>>\n+| 1: user_ty: Canonical { value: Ty(std::option::Option<std::boxed::Box<u32>>), max_universe: U0, variables: [] }, span: $DIR/basic_assignment.rs:20:17: 20:33, inferred_ty: std::option::Option<std::boxed::Box<u32>>\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/basic_assignment.rs:+0:11: +0:11"}, {"sha": "44c25ce673b88bd1b990f87de05d491c87495396", "filename": "tests/mir-opt/building/issue_101867.main.built.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/038ece0a428956c1173e925acd20efc9c34f04b3/tests%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/038ece0a428956c1173e925acd20efc9c34f04b3/tests%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Fissue_101867.main.built.after.mir?ref=038ece0a428956c1173e925acd20efc9c34f04b3", "patch": "@@ -1,8 +1,8 @@\n // MIR for `main` after built\n \n | User Type Annotations\n-| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<u8>) }, span: $DIR/issue_101867.rs:3:12: 3:22, inferred_ty: std::option::Option<u8>\n-| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(std::option::Option<u8>) }, span: $DIR/issue_101867.rs:3:12: 3:22, inferred_ty: std::option::Option<u8>\n+| 0: user_ty: Canonical { value: Ty(std::option::Option<u8>), max_universe: U0, variables: [] }, span: $DIR/issue_101867.rs:3:12: 3:22, inferred_ty: std::option::Option<u8>\n+| 1: user_ty: Canonical { value: Ty(std::option::Option<u8>), max_universe: U0, variables: [] }, span: $DIR/issue_101867.rs:3:12: 3:22, inferred_ty: std::option::Option<u8>\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue_101867.rs:+0:11: +0:11"}, {"sha": "7a6944dee03a11d3068353ec97b0a0d5fb5a5de5", "filename": "tests/mir-opt/building/receiver_ptr_mutability.main.built.after.mir", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/038ece0a428956c1173e925acd20efc9c34f04b3/tests%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/038ece0a428956c1173e925acd20efc9c34f04b3/tests%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbuilding%2Freceiver_ptr_mutability.main.built.after.mir?ref=038ece0a428956c1173e925acd20efc9c34f04b3", "patch": "@@ -1,10 +1,10 @@\n // MIR for `main` after built\n \n | User Type Annotations\n-| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut Test) }, span: $DIR/receiver_ptr_mutability.rs:14:14: 14:23, inferred_ty: *mut Test\n-| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(*mut Test) }, span: $DIR/receiver_ptr_mutability.rs:14:14: 14:23, inferred_ty: *mut Test\n-| 2: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(&&&&*mut Test) }, span: $DIR/receiver_ptr_mutability.rs:18:18: 18:31, inferred_ty: &&&&*mut Test\n-| 3: user_ty: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }], value: Ty(&&&&*mut Test) }, span: $DIR/receiver_ptr_mutability.rs:18:18: 18:31, inferred_ty: &&&&*mut Test\n+| 0: user_ty: Canonical { value: Ty(*mut Test), max_universe: U0, variables: [] }, span: $DIR/receiver_ptr_mutability.rs:14:14: 14:23, inferred_ty: *mut Test\n+| 1: user_ty: Canonical { value: Ty(*mut Test), max_universe: U0, variables: [] }, span: $DIR/receiver_ptr_mutability.rs:14:14: 14:23, inferred_ty: *mut Test\n+| 2: user_ty: Canonical { value: Ty(&&&&*mut Test), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }] }, span: $DIR/receiver_ptr_mutability.rs:18:18: 18:31, inferred_ty: &&&&*mut Test\n+| 3: user_ty: Canonical { value: Ty(&&&&*mut Test), max_universe: U0, variables: [CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }, CanonicalVarInfo { kind: Region(U0) }] }, span: $DIR/receiver_ptr_mutability.rs:18:18: 18:31, inferred_ty: &&&&*mut Test\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/receiver_ptr_mutability.rs:+0:11: +0:11"}, {"sha": "e1d896cbcfbe3a0de4d7e12d6381a9143811843d", "filename": "tests/mir-opt/issue_72181_1.main.built.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/038ece0a428956c1173e925acd20efc9c34f04b3/tests%2Fmir-opt%2Fissue_72181_1.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/038ece0a428956c1173e925acd20efc9c34f04b3/tests%2Fmir-opt%2Fissue_72181_1.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_72181_1.main.built.after.mir?ref=038ece0a428956c1173e925acd20efc9c34f04b3", "patch": "@@ -1,8 +1,8 @@\n // MIR for `main` after built\n \n | User Type Annotations\n-| 0: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(Void) }, span: $DIR/issue_72181_1.rs:16:12: 16:16, inferred_ty: Void\n-| 1: user_ty: Canonical { max_universe: U0, variables: [], value: Ty(Void) }, span: $DIR/issue_72181_1.rs:16:12: 16:16, inferred_ty: Void\n+| 0: user_ty: Canonical { value: Ty(Void), max_universe: U0, variables: [] }, span: $DIR/issue_72181_1.rs:16:12: 16:16, inferred_ty: Void\n+| 1: user_ty: Canonical { value: Ty(Void), max_universe: U0, variables: [] }, span: $DIR/issue_72181_1.rs:16:12: 16:16, inferred_ty: Void\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue_72181_1.rs:+0:11: +0:11"}, {"sha": "c08f03deeafad0fb6aaea58217a4052912c2a168", "filename": "tests/mir-opt/issue_99325.main.built.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/038ece0a428956c1173e925acd20efc9c34f04b3/tests%2Fmir-opt%2Fissue_99325.main.built.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/038ece0a428956c1173e925acd20efc9c34f04b3/tests%2Fmir-opt%2Fissue_99325.main.built.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_99325.main.built.after.mir?ref=038ece0a428956c1173e925acd20efc9c34f04b3", "patch": "@@ -1,8 +1,8 @@\n // MIR for `main` after built\n \n | User Type Annotations\n-| 0: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Value(Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)])) }], user_self_ty: None }) }, span: $DIR/issue_99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n-| 1: user_ty: Canonical { max_universe: U0, variables: [], value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated(UnevaluatedConst { def: WithOptConstParam { did: DefId(0:8 ~ issue_99325[8f58]::main::{constant#1}), const_param_did: Some(DefId(0:4 ~ issue_99325[8f58]::function_with_bytes::BYTES)) }, substs: [] }) }], user_self_ty: None }) }, span: $DIR/issue_99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n+| 0: user_ty: Canonical { value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Value(Branch([Leaf(0x41), Leaf(0x41), Leaf(0x41), Leaf(0x41)])) }], user_self_ty: None }), max_universe: U0, variables: [] }, span: $DIR/issue_99325.rs:10:16: 10:46, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n+| 1: user_ty: Canonical { value: TypeOf(DefId(0:3 ~ issue_99325[8f58]::function_with_bytes), UserSubsts { substs: [Const { ty: &'static [u8; 4], kind: Unevaluated(UnevaluatedConst { def: WithOptConstParam { did: DefId(0:8 ~ issue_99325[8f58]::main::{constant#1}), const_param_did: Some(DefId(0:4 ~ issue_99325[8f58]::function_with_bytes::BYTES)) }, substs: [] }) }], user_self_ty: None }), max_universe: U0, variables: [] }, span: $DIR/issue_99325.rs:11:16: 11:68, inferred_ty: fn() -> &'static [u8] {function_with_bytes::<&*b\"AAAA\">}\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/issue_99325.rs:+0:15: +0:15"}]}