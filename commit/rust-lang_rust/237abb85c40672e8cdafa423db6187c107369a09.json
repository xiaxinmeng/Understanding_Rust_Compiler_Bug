{"sha": "237abb85c40672e8cdafa423db6187c107369a09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzN2FiYjg1YzQwNjcyZThjZGFmYTQyM2RiNjE4N2MxMDczNjlhMDk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-12-30T18:36:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-30T18:36:34Z"}, "message": "Merge #2692\n\n2692: Move expand macro to the new context r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "7c1c6f94918bbb4343f0a2122c8989978ff5b9ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c1c6f94918bbb4343f0a2122c8989978ff5b9ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/237abb85c40672e8cdafa423db6187c107369a09", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeCkOyCRBK7hj4Ov3rIwAAdHIIAElznfaebN2cw+pIo2nkDKAW\nMAzcT+U1OhjlWXar4N+0DTCiG0L0MtXTaGBKXf8n7zfQsckkMTbEc83QqEzrX1xV\nFkCAdBdWq32fQill1iB8fcXJAPWtggwnho0AjO2l3sz2hcpdn6rZjwgVXynzfg3y\nEj2OUKDzDEXIu3xhww0cXkdRIFCpKJyqSoa4wiyiSRzR4jKGorIjWQ511PM182nY\n4I26mYt1qsHdQtO5ylBHIzTunfcHPrpPx2EQEMzhkCLk6pTsQ39AWIxF8CerWUx1\n7AwD2vNsMyegnertaJz6FagHh45YgmqeVqJMhELe3hOcz4J2O3dgsKLX7PnRtK0=\n=sJgf\n-----END PGP SIGNATURE-----\n", "payload": "tree 7c1c6f94918bbb4343f0a2122c8989978ff5b9ac\nparent 7c1634a9c2d76ea8c152c368775391090d62db8f\nparent 94be27fc44763afbf67d36010d4aa05639191e4b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1577730994 +0000\ncommitter GitHub <noreply@github.com> 1577730994 +0000\n\nMerge #2692\n\n2692: Move expand macro to the new context r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/237abb85c40672e8cdafa423db6187c107369a09", "html_url": "https://github.com/rust-lang/rust/commit/237abb85c40672e8cdafa423db6187c107369a09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/237abb85c40672e8cdafa423db6187c107369a09/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c1634a9c2d76ea8c152c368775391090d62db8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1634a9c2d76ea8c152c368775391090d62db8f", "html_url": "https://github.com/rust-lang/rust/commit/7c1634a9c2d76ea8c152c368775391090d62db8f"}, {"sha": "94be27fc44763afbf67d36010d4aa05639191e4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/94be27fc44763afbf67d36010d4aa05639191e4b", "html_url": "https://github.com/rust-lang/rust/commit/94be27fc44763afbf67d36010d4aa05639191e4b"}], "stats": {"total": 142, "additions": 60, "deletions": 82}, "files": [{"sha": "2c8362286d0b1aaa1323c244acad2d596777bb97", "filename": "editors/code/src/commands/analyzer_status.ts", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/237abb85c40672e8cdafa423db6187c107369a09/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/237abb85c40672e8cdafa423db6187c107369a09/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fanalyzer_status.ts?ref=237abb85c40672e8cdafa423db6187c107369a09", "patch": "@@ -1,8 +1,8 @@\n import * as vscode from 'vscode';\n \n import { Ctx, Cmd } from '../ctx';\n-// Shows status of rust-analyzer (for debugging)\n \n+// Shows status of rust-analyzer (for debugging)\n export function analyzerStatus(ctx: Ctx): Cmd {\n     let poller: NodeJS.Timer | null = null;\n     const tdcp = new TextDocumentContentProvider(ctx);\n@@ -37,7 +37,7 @@ export function analyzerStatus(ctx: Ctx): Cmd {\n \n class TextDocumentContentProvider\n     implements vscode.TextDocumentContentProvider {\n-    ctx: Ctx;\n+    private ctx: Ctx;\n     uri = vscode.Uri.parse('rust-analyzer-status://status');\n     eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n "}, {"sha": "da208257a2a2389cca9f014ac1e7c809359116d9", "filename": "editors/code/src/commands/expand_macro.ts", "status": "modified", "additions": 47, "deletions": 55, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/237abb85c40672e8cdafa423db6187c107369a09/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "raw_url": "https://github.com/rust-lang/rust/raw/237abb85c40672e8cdafa423db6187c107369a09/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fexpand_macro.ts?ref=237abb85c40672e8cdafa423db6187c107369a09", "patch": "@@ -1,60 +1,23 @@\n import * as vscode from 'vscode';\n-import { Position, TextDocumentIdentifier } from 'vscode-languageclient';\n-import { Server } from '../server';\n+import * as lc from 'vscode-languageclient';\n \n-export const expandMacroUri = vscode.Uri.parse(\n-    'rust-analyzer://expandMacro/[EXPANSION].rs',\n-);\n-\n-export class ExpandMacroContentProvider\n-    implements vscode.TextDocumentContentProvider {\n-    public eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n-\n-    public provideTextDocumentContent(\n-        _uri: vscode.Uri,\n-    ): vscode.ProviderResult<string> {\n-        async function handle() {\n-            const editor = vscode.window.activeTextEditor;\n-            if (editor == null) {\n-                return '';\n-            }\n-\n-            const position = editor.selection.active;\n-            const request: MacroExpandParams = {\n-                textDocument: { uri: editor.document.uri.toString() },\n-                position,\n-            };\n-            const expanded = await Server.client.sendRequest<ExpandedMacro>(\n-                'rust-analyzer/expandMacro',\n-                request,\n-            );\n-\n-            if (expanded == null) {\n-                return 'Not available';\n-            }\n-\n-            return code_format(expanded);\n-        }\n-\n-        return handle();\n-    }\n-\n-    get onDidChange(): vscode.Event<vscode.Uri> {\n-        return this.eventEmitter.event;\n-    }\n-}\n+import { Ctx, Cmd } from '../ctx';\n \n // Opens the virtual file that will show the syntax tree\n //\n // The contents of the file come from the `TextDocumentContentProvider`\n-export function createHandle(provider: ExpandMacroContentProvider) {\n-    return async () => {\n-        const uri = expandMacroUri;\n-\n-        const document = await vscode.workspace.openTextDocument(uri);\n-\n-        provider.eventEmitter.fire(uri);\n+export function expandMacro(ctx: Ctx): Cmd {\n+    const tdcp = new TextDocumentContentProvider(ctx);\n+    ctx.pushCleanup(\n+        vscode.workspace.registerTextDocumentContentProvider(\n+            'rust-analyzer',\n+            tdcp,\n+        ),\n+    );\n \n+    return async () => {\n+        const document = await vscode.workspace.openTextDocument(tdcp.uri);\n+        tdcp.eventEmitter.fire(tdcp.uri);\n         return vscode.window.showTextDocument(\n             document,\n             vscode.ViewColumn.Two,\n@@ -63,11 +26,6 @@ export function createHandle(provider: ExpandMacroContentProvider) {\n     };\n }\n \n-interface MacroExpandParams {\n-    textDocument: TextDocumentIdentifier;\n-    position: Position;\n-}\n-\n interface ExpandedMacro {\n     name: string;\n     expansion: string;\n@@ -81,3 +39,37 @@ function code_format(expanded: ExpandedMacro): string {\n \n     return result;\n }\n+\n+class TextDocumentContentProvider\n+    implements vscode.TextDocumentContentProvider {\n+    private ctx: Ctx;\n+    uri = vscode.Uri.parse('rust-analyzer://expandMacro/[EXPANSION].rs');\n+    eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n+\n+    constructor(ctx: Ctx) {\n+        this.ctx = ctx;\n+    }\n+\n+    async provideTextDocumentContent(_uri: vscode.Uri): Promise<string> {\n+        const editor = vscode.window.activeTextEditor;\n+        if (editor == null) return '';\n+\n+        const position = editor.selection.active;\n+        const request: lc.TextDocumentPositionParams = {\n+            textDocument: { uri: editor.document.uri.toString() },\n+            position,\n+        };\n+        const expanded = await this.ctx.client.sendRequest<ExpandedMacro>(\n+            'rust-analyzer/expandMacro',\n+            request,\n+        );\n+\n+        if (expanded == null) return 'Not available';\n+\n+        return code_format(expanded);\n+    }\n+\n+    get onDidChange(): vscode.Event<vscode.Uri> {\n+        return this.eventEmitter.event;\n+    }\n+}"}, {"sha": "325ae3da84f430513c3ff094d9155573fecace0f", "filename": "editors/code/src/commands/index.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/237abb85c40672e8cdafa423db6187c107369a09/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "raw_url": "https://github.com/rust-lang/rust/raw/237abb85c40672e8cdafa423db6187c107369a09/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Findex.ts?ref=237abb85c40672e8cdafa423db6187c107369a09", "patch": "@@ -6,7 +6,7 @@ import { joinLines } from './join_lines';\n import { onEnter } from './on_enter';\n import { parentModule } from './parent_module';\n import { syntaxTree } from './syntax_tree';\n-import * as expandMacro from './expand_macro';\n+import { expandMacro } from './expand_macro';\n import * as inlayHints from './inlay_hints';\n import * as runnables from './runnables';\n "}, {"sha": "20ff7e5ca047487472f27c287e91500ba0ab3f61", "filename": "editors/code/src/commands/syntax_tree.ts", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/237abb85c40672e8cdafa423db6187c107369a09/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "raw_url": "https://github.com/rust-lang/rust/raw/237abb85c40672e8cdafa423db6187c107369a09/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fsyntax_tree.ts?ref=237abb85c40672e8cdafa423db6187c107369a09", "patch": "@@ -7,28 +7,28 @@ import { Ctx, Cmd } from '../ctx';\n //\n // The contents of the file come from the `TextDocumentContentProvider`\n export function syntaxTree(ctx: Ctx): Cmd {\n-    const stcp = new SyntaxTreeContentProvider(ctx);\n+    const tdcp = new TextDocumentContentProvider(ctx);\n \n     ctx.pushCleanup(\n         vscode.workspace.registerTextDocumentContentProvider(\n             'rust-analyzer',\n-            stcp,\n+            tdcp,\n         ),\n     );\n \n     vscode.workspace.onDidChangeTextDocument(\n         (event: vscode.TextDocumentChangeEvent) => {\n             const doc = event.document;\n             if (doc.languageId !== 'rust') return;\n-            afterLs(() => stcp.eventEmitter.fire(stcp.uri));\n+            afterLs(() => tdcp.eventEmitter.fire(tdcp.uri));\n         },\n         ctx.subscriptions,\n     );\n \n     vscode.window.onDidChangeActiveTextEditor(\n         (editor: vscode.TextEditor | undefined) => {\n             if (!editor || editor.document.languageId !== 'rust') return;\n-            stcp.eventEmitter.fire(stcp.uri);\n+            tdcp.eventEmitter.fire(tdcp.uri);\n         },\n         ctx.subscriptions,\n     );\n@@ -38,12 +38,12 @@ export function syntaxTree(ctx: Ctx): Cmd {\n         const rangeEnabled = !!(editor && !editor.selection.isEmpty);\n \n         const uri = rangeEnabled\n-            ? vscode.Uri.parse(`${stcp.uri.toString()}?range=true`)\n-            : stcp.uri;\n+            ? vscode.Uri.parse(`${tdcp.uri.toString()}?range=true`)\n+            : tdcp.uri;\n \n         const document = await vscode.workspace.openTextDocument(uri);\n \n-        stcp.eventEmitter.fire(uri);\n+        tdcp.eventEmitter.fire(uri);\n \n         return vscode.window.showTextDocument(\n             document,\n@@ -64,12 +64,11 @@ interface SyntaxTreeParams {\n     range?: lc.Range;\n }\n \n-export class SyntaxTreeContentProvider\n+class TextDocumentContentProvider\n     implements vscode.TextDocumentContentProvider {\n-    ctx: Ctx;\n+    private ctx: Ctx;\n     uri = vscode.Uri.parse('rust-analyzer://syntaxtree');\n     eventEmitter = new vscode.EventEmitter<vscode.Uri>();\n-    syntaxTree: string = 'Not available';\n \n     constructor(ctx: Ctx) {\n         this.ctx = ctx;"}, {"sha": "b8e3396a6e6aee198207e3b215b6353fa4337eb9", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/237abb85c40672e8cdafa423db6187c107369a09/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/237abb85c40672e8cdafa423db6187c107369a09/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=237abb85c40672e8cdafa423db6187c107369a09", "patch": "@@ -2,7 +2,6 @@ import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import * as commands from './commands';\n-import { ExpandMacroContentProvider } from './commands/expand_macro';\n import { HintsUpdater } from './commands/inlay_hints';\n import { StatusDisplay } from './commands/watch_status';\n import * as events from './events';\n@@ -20,6 +19,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('joinLines', commands.joinLines);\n     ctx.registerCommand('parentModule', commands.parentModule);\n     ctx.registerCommand('syntaxTree', commands.syntaxTree);\n+    ctx.registerCommand('expandMacro', commands.expandMacro);\n \n     function disposeOnDeactivation(disposable: vscode.Disposable) {\n         context.subscriptions.push(disposable);\n@@ -65,25 +65,12 @@ export async function activate(context: vscode.ExtensionContext) {\n             params => watchStatus.handleProgressNotification(params),\n         ],\n     ];\n-    const expandMacroContentProvider = new ExpandMacroContentProvider();\n \n     // The events below are plain old javascript events, triggered and handled by vscode\n     vscode.window.onDidChangeActiveTextEditor(\n         events.changeActiveTextEditor.makeHandler(),\n     );\n \n-    disposeOnDeactivation(\n-        vscode.workspace.registerTextDocumentContentProvider(\n-            'rust-analyzer',\n-            expandMacroContentProvider,\n-        ),\n-    );\n-\n-    registerCommand(\n-        'rust-analyzer.expandMacro',\n-        commands.expandMacro.createHandle(expandMacroContentProvider),\n-    );\n-\n     const startServer = () => Server.start(allNotifications);\n     const reloadCommand = () => reloadServer(startServer);\n "}]}