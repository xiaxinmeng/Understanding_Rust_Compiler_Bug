{"sha": "f2b84788fb01ffec92d3b6eac5908bd892fc1576", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyYjg0Nzg4ZmIwMWZmZWM5MmQzYjZlYWM1OTA4YmQ4OTJmYzE1NzY=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2019-09-29T05:52:32Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2019-09-29T18:22:30Z"}, "message": "libtest: encapsulate time-related logic and avoid unnecessary allocations", "tree": {"sha": "a0cb154dda0b32e992a4772dc9f6c21f9cfc8239", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a0cb154dda0b32e992a4772dc9f6c21f9cfc8239"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f2b84788fb01ffec92d3b6eac5908bd892fc1576", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b84788fb01ffec92d3b6eac5908bd892fc1576", "html_url": "https://github.com/rust-lang/rust/commit/f2b84788fb01ffec92d3b6eac5908bd892fc1576", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f2b84788fb01ffec92d3b6eac5908bd892fc1576/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75a297573f4dea4bc6c6898f36d8cecb212ef8e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/75a297573f4dea4bc6c6898f36d8cecb212ef8e7", "html_url": "https://github.com/rust-lang/rust/commit/75a297573f4dea4bc6c6898f36d8cecb212ef8e7"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "8a8ea7452932f4be012ec78a5b5536f1795dbdf2", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 39, "deletions": 19, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f2b84788fb01ffec92d3b6eac5908bd892fc1576/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f2b84788fb01ffec92d3b6eac5908bd892fc1576/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=f2b84788fb01ffec92d3b6eac5908bd892fc1576", "patch": "@@ -490,7 +490,7 @@ impl TimeThreshold {\n         let durations_str = env::var(env_var_name).ok()?;\n \n         // Split string into 2 substrings by comma and try to parse numbers.\n-        let durations: Vec<u64> = durations_str\n+        let mut durations = durations_str\n             .splitn(2, ',')\n             .map(|v| {\n                 u64::from_str(v).unwrap_or_else(|_| {\n@@ -499,18 +499,20 @@ impl TimeThreshold {\n                         env_var_name, v\n                     )\n                 })\n-            })\n-            .collect();\n+            });\n \n-        // Check that we have exactly 2 numbers.\n-        if durations.len() != 2 {\n+        // Callback to be called if the environment variable has unexpected structure.\n+        let panic_on_incorrect_value = || {\n             panic!(\n                 \"Duration variable {} expected to have 2 numbers separated by comma, but got {}\",\n-                env_var_name, durations.len()\n+                env_var_name, durations_str\n             );\n-        }\n+        };\n \n-        let (warn, critical) = (durations[0], durations[1]);\n+        let (warn, critical) = (\n+            durations.next().unwrap_or_else(panic_on_incorrect_value),\n+            durations.next().unwrap_or_else(panic_on_incorrect_value)\n+        );\n \n         Some(Self::new(Duration::from_millis(warn), Duration::from_millis(critical)))\n     }\n@@ -519,6 +521,8 @@ impl TimeThreshold {\n /// Structure with parameters for calculating test execution time.\n #[derive(Copy, Clone, Debug, Default, PartialEq, Eq)]\n pub struct TestTimeOptions {\n+    /// Denotes if the test critical execution time limit excess should be considered\n+    /// a test failure.\n     pub error_on_excess: bool,\n     pub colored: bool,\n     pub unit_threshold: TimeThreshold,\n@@ -609,6 +613,8 @@ pub struct TestOpts {\n \n /// Result of parsing the options.\n pub type OptRes = Result<TestOpts, String>;\n+/// Result of parsing the option part.\n+type OptPartRes<T> = Result<Option<T>, String>;\n \n fn optgroups() -> getopts::Options {\n     let mut opts = getopts::Options::new();\n@@ -772,6 +778,27 @@ macro_rules! unstable_optflag {\n     }};\n }\n \n+// Gets the CLI options assotiated with `report-time` feature.\n+fn get_time_options(\n+    matches: &getopts::Matches,\n+    allow_unstable: bool)\n+-> Option<OptPartRes<TestTimeOptions>> {\n+    let report_time = unstable_optflag!(matches, allow_unstable, \"report-time\");\n+    let colored_opt_str = matches.opt_str(\"report-time\");\n+    let report_time_colored = report_time && colored_opt_str == Some(\"colored\".into());\n+    let ensure_test_time = unstable_optflag!(matches, allow_unstable, \"ensure-test-time\");\n+\n+    // If `ensure-test-time` option is provided, time output is enforced,\n+    // so user won't be confused if any of tests will silently fail.\n+    let options = if report_time || ensure_test_time {\n+        Some(TestTimeOptions::new_from_env(ensure_test_time, report_time_colored))\n+    } else {\n+        None\n+    };\n+\n+    Some(Ok(options))\n+}\n+\n // Parses command line arguments into test options\n pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n     let mut allow_unstable = false;\n@@ -842,17 +869,10 @@ pub fn parse_opts(args: &[String]) -> Option<OptRes> {\n         };\n     }\n \n-    let report_time = unstable_optflag!(matches, allow_unstable, \"report-time\");\n-    let colored_opt_str = matches.opt_str(\"report-time\");\n-    let report_time_colored = report_time && colored_opt_str == Some(\"colored\".into());\n-    let ensure_test_time = unstable_optflag!(matches, allow_unstable, \"ensure-test-time\");\n-\n-    // If `ensure-test-time` option is provided, time output is enforced,\n-    // so user won't be confused if any of tests will silently fail.\n-    let time_options = if report_time || ensure_test_time {\n-        Some(TestTimeOptions::new_from_env(ensure_test_time, report_time_colored))\n-    } else {\n-        None\n+    let time_options = match get_time_options(&matches, allow_unstable) {\n+        Some(Ok(val)) => val,\n+        Some(Err(e)) => return Some(Err(e)),\n+        x => panic!(\"Unexpected output from `get_time_options`: {:?}\", x),\n     };\n \n     let test_threads = match matches.opt_str(\"test-threads\") {"}]}