{"sha": "0f4b616a08eda85247e6123120b8cba01dc4383b", "node_id": "C_kwDOAAsO6NoAKDBmNGI2MTZhMDhlZGE4NTI0N2U2MTIzMTIwYjhjYmEwMWRjNDM4M2I", "commit": {"author": {"name": "antoyo", "email": "antoyo@users.noreply.github.com", "date": "2021-09-26T04:06:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-26T04:06:42Z"}, "message": "Add notes for cross-compilation to gcc-only targets (#68)", "tree": {"sha": "7f21dd8270211ce917f750a8af710ce3fe7b88b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f21dd8270211ce917f750a8af710ce3fe7b88b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f4b616a08eda85247e6123120b8cba01dc4383b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhT/HSCRBK7hj4Ov3rIwAAaZUIAElqC02lcJqlWy/QLEhKSXSF\nLW9MS8GzA3Gpu2SPuCULoMTgnP58yuUSZT36b7xFAY2MwjJ1izweJ2H7fCSUpARD\nwIvJMvWDqrurvRxwsp55DXRRgHOHn8StENBvgszM2RwRD5GzRl6bqU7BzXcshMyz\nZWM9Hh0ijwDpcwaxh0QVoqNqYAGpNVX+LDVQPt/eq8npLUMQTlAVpSp0ZEqoH0V2\nQwu3dcIqAm9SJswcWrtDr40rQdcE8iIBhp/e/69/bXpwI+E/t8gz5n2u6deMq1Jg\nAAF5J1bwGmAHOmjS/JtGTiICUf+2CSMD4XDQOGOG2JpwI4nXaTHWOdTs98mMGM0=\n=nlaV\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f21dd8270211ce917f750a8af710ce3fe7b88b4\nparent 48d60ab7c505c6c1ebb042eacaafd8dc9f7a9267\nauthor antoyo <antoyo@users.noreply.github.com> 1632629202 -0400\ncommitter GitHub <noreply@github.com> 1632629202 -0400\n\nAdd notes for cross-compilation to gcc-only targets (#68)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f4b616a08eda85247e6123120b8cba01dc4383b", "html_url": "https://github.com/rust-lang/rust/commit/0f4b616a08eda85247e6123120b8cba01dc4383b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f4b616a08eda85247e6123120b8cba01dc4383b/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48d60ab7c505c6c1ebb042eacaafd8dc9f7a9267", "url": "https://api.github.com/repos/rust-lang/rust/commits/48d60ab7c505c6c1ebb042eacaafd8dc9f7a9267", "html_url": "https://github.com/rust-lang/rust/commit/48d60ab7c505c6c1ebb042eacaafd8dc9f7a9267"}], "stats": {"total": 25, "additions": 23, "deletions": 2}, "files": [{"sha": "709d93c6edb054f384fd2c9a4823597e827753e9", "filename": "Readme.md", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f4b616a08eda85247e6123120b8cba01dc4383b/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f4b616a08eda85247e6123120b8cba01dc4383b/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=0f4b616a08eda85247e6123120b8cba01dc4383b", "patch": "@@ -115,3 +115,21 @@ p loc->m_line\n \n  * Build the stage2 compiler (`rustup toolchain link debug-current build/x86_64-unknown-linux-gnu/stage2`).\n  * Clean and rebuild the codegen with `debug-current` in the file `rust-toolchain`.\n+\n+### How to build a cross-compiling libgccjit\n+\n+#### Building libgccjit\n+\n+ * Follow these instructions: https://preshing.com/20141119/how-to-build-a-gcc-cross-compiler/ with the following changes:\n+ * Configure gcc with `../gcc/configure --enable-host-shared --disable-multilib --enable-languages=c,jit,c++ --disable-bootstrap --enable-checking=release --prefix=/opt/m68k-gcc/ --target=m68k-linux --without-headers`.\n+ * Some shells, like fish, don't define the environment variable `$MACHTYPE`.\n+ * Add `CFLAGS=\"-Wno-error=attributes -g -O2\"` at the end of the configure command for building glibc (`CFLAGS=\"-Wno-error=attributes -Wno-error=array-parameter -Wno-error=stringop-overflow -Wno-error=array-bounds -g -O2\"` for glibc 2.31, which is useful for Debian).\n+\n+#### Configuring rustc_codegen_gcc\n+\n+ * Set `TARGET_TRIPLE=\"m68k-unknown-linux-gnu\"` in config.sh.\n+ * Since rustc doesn't support this architecture yet, set it back to `TARGET_TRIPLE=\"mips-unknown-linux-gnu\"` (or another target having the same attributes). Alternatively, create a [target specification file](https://book.avr-rust.com/005.1-the-target-specification-json-file.html) (note that the `arch` specified in this file must be supported by the rust compiler).\n+ * Set `linker='-Clinker=m68k-linux-gcc'`.\n+ * Set the path to the cross-compiling libgccjit in `gcc_path`.\n+ * Disable the 128-bit integer types if the target doesn't support them by using `let i128_type = context.new_type::<i64>();` in `context.rs` (same for u128_type).\n+ * (might not be necessary) Disable the compilation of libstd.so (and possibly libcore.so?)."}, {"sha": "d022371eebed47a4658ec2c7be3d3575dfe06ff3", "filename": "config.sh", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0f4b616a08eda85247e6123120b8cba01dc4383b/config.sh", "raw_url": "https://github.com/rust-lang/rust/raw/0f4b616a08eda85247e6123120b8cba01dc4383b/config.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.sh?ref=0f4b616a08eda85247e6123120b8cba01dc4383b", "patch": "@@ -21,12 +21,15 @@ fi\n \n HOST_TRIPLE=$(rustc -vV | grep host | cut -d: -f2 | tr -d \" \")\n TARGET_TRIPLE=$HOST_TRIPLE\n-#TARGET_TRIPLE=\"aarch64-unknown-linux-gnu\"\n+#TARGET_TRIPLE=\"m68k-unknown-linux-gnu\"\n \n linker=''\n RUN_WRAPPER=''\n if [[ \"$HOST_TRIPLE\" != \"$TARGET_TRIPLE\" ]]; then\n-   if [[ \"$TARGET_TRIPLE\" == \"aarch64-unknown-linux-gnu\" ]]; then\n+   if [[ \"$TARGET_TRIPLE\" == \"m68k-unknown-linux-gnu\" ]]; then\n+       TARGET_TRIPLE=\"mips-unknown-linux-gnu\"\n+       linker='-Clinker=m68k-linux-gcc'\n+   elif [[ \"$TARGET_TRIPLE\" == \"aarch64-unknown-linux-gnu\" ]]; then\n       # We are cross-compiling for aarch64. Use the correct linker and run tests in qemu.\n       linker='-Clinker=aarch64-linux-gnu-gcc'\n       RUN_WRAPPER='qemu-aarch64 -L /usr/aarch64-linux-gnu'"}]}