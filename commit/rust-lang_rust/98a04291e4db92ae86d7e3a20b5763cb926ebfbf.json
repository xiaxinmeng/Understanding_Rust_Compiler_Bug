{"sha": "98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4YTA0MjkxZTRkYjkyYWU4NmQ3ZTNhMjBiNTc2M2NiOTI2ZWJmYmY=", "commit": {"author": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-05-19T21:52:24Z"}, "committer": {"name": "Zack M. Davis", "email": "code@zackmdavis.net", "date": "2018-05-20T21:13:25Z"}, "message": "suggestion applicabilities for libsyntax and librustc, run-rustfix tests\n\nConsider this a down payment on #50723. To recap, an `Applicability`\nenum was recently (#50204) added, to convey to Rustfix and other tools\nwhether we think it's OK for them to blindly apply the suggestion, or\nwhether to prompt a human for guidance (because the suggestion might\ncontain placeholders that we can't infer, or because we think it has a\nsufficiently high probability of being wrong even though it's\u2014\npresumably\u2014right often enough to be worth emitting in the first place).\n\nWhen a suggestion is marked as `MaybeIncorrect`, we try to use comments\nto indicate precisely why (although there are a few places where we just\nsay `// speculative` because the present author's subjective judgement\nbalked at the idea that the suggestion has no false positives).\n\nThe `run-rustfix` directive is opporunistically set on some relevant UI\ntests (and a couple tests that were in the `test/ui/suggestions`\ndirectory, even if the suggestions didn't originate in librustc or\nlibsyntax). This is less trivial than it sounds, because a surprising\nnumber of test files aren't equipped to be tested as fixed even when\nthey contain successfully fixable errors, because, e.g., there are more,\nnot-directly-related errors after fixing. Some test files need an\nattribute or underscore to avoid unused warnings tripping up the \"fixed\ncode is still producing diagnostics\" check despite the fixes being\ncorrect; this is an interesting contrast-to/inconsistency-with the\nbehavior of UI tests (which secretly pass `-A unused`), a behavior which\nwe probably ought to resolve one way or the other (filed issue #50926).\n\nA few suggestion labels are reworded (e.g., to avoid phrasing it as a\nquestion, which which is discouraged by the style guidelines listed in\n`.span_suggestion`'s doc-comment).", "tree": {"sha": "be6bad72d6042b9d58445f51a0862d7c40c73b3f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be6bad72d6042b9d58445f51a0862d7c40c73b3f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "html_url": "https://github.com/rust-lang/rust/commit/98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/comments", "author": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackmdavis", "id": 1076988, "node_id": "MDQ6VXNlcjEwNzY5ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1076988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackmdavis", "html_url": "https://github.com/zackmdavis", "followers_url": "https://api.github.com/users/zackmdavis/followers", "following_url": "https://api.github.com/users/zackmdavis/following{/other_user}", "gists_url": "https://api.github.com/users/zackmdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackmdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackmdavis/subscriptions", "organizations_url": "https://api.github.com/users/zackmdavis/orgs", "repos_url": "https://api.github.com/users/zackmdavis/repos", "events_url": "https://api.github.com/users/zackmdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/zackmdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bb4aad51f40536447cd7603ab5be7792bab0a3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb4aad51f40536447cd7603ab5be7792bab0a3d", "html_url": "https://github.com/rust-lang/rust/commit/6bb4aad51f40536447cd7603ab5be7792bab0a3d"}], "stats": {"total": 541, "additions": 424, "deletions": 117}, "files": [{"sha": "4bde363672dcc68f4f08b845e4d75fe3dc0644b2", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -70,7 +70,7 @@ use ty::{self, Region, Ty, TyCtxt, TypeFoldable, TypeVariants};\n use ty::error::TypeError;\n use syntax::ast::DUMMY_NODE_ID;\n use syntax_pos::{Pos, Span};\n-use errors::{DiagnosticBuilder, DiagnosticStyledString};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticStyledString};\n \n use rustc_data_structures::indexed_vec::Idx;\n \n@@ -1097,7 +1097,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             if let Some((sp, has_lifetimes)) = type_param_span {\n                 let tail = if has_lifetimes { \" + \" } else { \"\" };\n                 let suggestion = format!(\"{}: {}{}\", bound_kind, sub, tail);\n-                err.span_suggestion_short(sp, consider, suggestion);\n+                err.span_suggestion_short_with_applicability(\n+                    sp, consider, suggestion,\n+                    Applicability::MaybeIncorrect // Issue #41966\n+                );\n             } else {\n                 err.help(consider);\n             }"}, {"sha": "3393a2bf89d4b41408108d3a636a88fdf75c6b2f", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -10,7 +10,7 @@\n \n use std::cmp;\n \n-use errors::DiagnosticBuilder;\n+use errors::{Applicability, DiagnosticBuilder};\n use hir::HirId;\n use ich::StableHashingContext;\n use lint::builtin;\n@@ -265,10 +265,11 @@ impl<'a> LintLevelsBuilder<'a> {\n                                     store.check_lint_name(&name_lower) {\n                                 db.emit();\n                             } else {\n-                                db.span_suggestion(\n+                                db.span_suggestion_with_applicability(\n                                     li.span,\n                                     \"lowercase the lint name\",\n-                                    name_lower\n+                                    name_lower,\n+                                    Applicability::MachineApplicable\n                                 ).emit();\n                             }\n                         } else {"}, {"sha": "0ac0fdd79cbb882eb384d71b7bec34ad7eeb2a00", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -109,6 +109,7 @@ use self::VarKind::*;\n use hir::def::*;\n use ty::{self, TyCtxt};\n use lint;\n+use errors::Applicability;\n use util::nodemap::{NodeMap, NodeSet};\n \n use std::collections::VecDeque;\n@@ -1541,11 +1542,15 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                     let mut err = self.ir.tcx\n                         .struct_span_lint_node(lint::builtin::UNUSED_VARIABLES, id, sp, &msg);\n                     if self.ir.variable_is_shorthand(var) {\n-                        err.span_suggestion(sp, \"try ignoring the field\",\n-                                            format!(\"{}: _\", name));\n+                        err.span_suggestion_with_applicability(sp, \"try ignoring the field\",\n+                                                               format!(\"{}: _\", name),\n+                                                               Applicability::MachineApplicable);\n                     } else {\n-                        err.span_suggestion_short(sp, &suggest_underscore_msg,\n-                                                  format!(\"_{}\", name));\n+                        err.span_suggestion_short_with_applicability(\n+                            sp, &suggest_underscore_msg,\n+                            format!(\"_{}\", name),\n+                            Applicability::MachineApplicable,\n+                        );\n                     }\n                     err.emit()\n                 }"}, {"sha": "66eee3e7c1ac87bb1370d2414ef0427b86ab84d1", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 22, "deletions": 13, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -27,7 +27,7 @@ use super::{\n     Overflow,\n };\n \n-use errors::DiagnosticBuilder;\n+use errors::{Applicability, DiagnosticBuilder};\n use hir;\n use hir::def_id::DefId;\n use infer::{self, InferCtxt};\n@@ -856,9 +856,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 if let Some(ref expr) = local.init {\n                     if let hir::ExprIndex(_, _) = expr.node {\n                         if let Ok(snippet) = self.tcx.sess.codemap().span_to_snippet(expr.span) {\n-                            err.span_suggestion(expr.span,\n-                                                \"consider borrowing here\",\n-                                                format!(\"&{}\", snippet));\n+                            err.span_suggestion_with_applicability(\n+                                expr.span,\n+                                \"consider borrowing here\",\n+                                format!(\"&{}\", snippet),\n+                                Applicability::MachineApplicable\n+                            );\n                         }\n                     }\n                 }\n@@ -901,7 +904,9 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         let format_str = format!(\"consider removing {} leading `&`-references\",\n                                                  remove_refs);\n \n-                        err.span_suggestion_short(sp, &format_str, String::from(\"\"));\n+                        err.span_suggestion_short_with_applicability(\n+                            sp, &format_str, String::from(\"\"), Applicability::MachineApplicable\n+                        );\n                         break;\n                     }\n                 } else {\n@@ -1046,10 +1051,11 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     let sugg = fields.iter()\n                         .map(|(name, _)| name.to_owned())\n                         .collect::<Vec<String>>().join(\", \");\n-                    err.span_suggestion(found_span,\n-                                        \"change the closure to take multiple arguments instead of \\\n-                                         a single tuple\",\n-                                        format!(\"|{}|\", sugg));\n+                    err.span_suggestion_with_applicability(found_span,\n+                                                           \"change the closure to take multiple \\\n+                                                            arguments instead of a single tuple\",\n+                                                           format!(\"|{}|\", sugg),\n+                                                           Applicability::MachineApplicable);\n                 }\n             }\n             if let &[ArgKind::Tuple(_, ref fields)] = &expected_args[..] {\n@@ -1077,10 +1083,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             \"\".to_owned()\n                         },\n                     );\n-                    err.span_suggestion(found_span,\n-                                        \"change the closure to accept a tuple instead of \\\n-                                         individual arguments\",\n-                                        sugg);\n+                    err.span_suggestion_with_applicability(\n+                        found_span,\n+                        \"change the closure to accept a tuple instead of \\\n+                         individual arguments\",\n+                        sugg,\n+                        Applicability::MachineApplicable\n+                    );\n                 }\n             }\n         }"}, {"sha": "076b6d1765848104aecc0fe2e6fae18eb0aa2c05", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -20,7 +20,7 @@ use ast::{MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use ast::{Lit, LitKind, Expr, ExprKind, Item, Local, Stmt, StmtKind};\n use codemap::{BytePos, Spanned, respan, dummy_spanned};\n use syntax_pos::Span;\n-use errors::Handler;\n+use errors::{Applicability, Handler};\n use feature_gate::{Features, GatedCfg};\n use parse::lexer::comments::{doc_comment_style, strip_doc_comment_decoration};\n use parse::parser::Parser;\n@@ -1067,14 +1067,20 @@ pub fn find_repr_attrs(diagnostic: &Handler, attr: &Attribute) -> Vec<ReprAttr>\n                                     \"incorrect `repr(align)` attribute format\");\n                                 match value.node {\n                                     ast::LitKind::Int(int, ast::LitIntType::Unsuffixed) => {\n-                                        err.span_suggestion(item.span,\n-                                                            \"use parentheses instead\",\n-                                                            format!(\"align({})\", int));\n+                                        err.span_suggestion_with_applicability(\n+                                            item.span,\n+                                            \"use parentheses instead\",\n+                                            format!(\"align({})\", int),\n+                                            Applicability::MachineApplicable\n+                                        );\n                                     }\n                                     ast::LitKind::Str(s, _) => {\n-                                        err.span_suggestion(item.span,\n-                                                            \"use parentheses instead\",\n-                                                            format!(\"align({})\", s));\n+                                        err.span_suggestion_with_applicability(\n+                                            item.span,\n+                                            \"use parentheses instead\",\n+                                            format!(\"align({})\", s),\n+                                            Applicability::MachineApplicable\n+                                        );\n                                     }\n                                     _ => {}\n                                 }"}, {"sha": "0bee8e20009a6662e669652676034834d4eb7466", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -13,7 +13,7 @@ use ast::{MacStmtStyle, StmtKind, ItemKind};\n use attr::{self, HasAttrs};\n use codemap::{ExpnInfo, NameAndSpan, MacroBang, MacroAttribute, dummy_spanned, respan};\n use config::{is_test_or_bench, StripUnconfigured};\n-use errors::FatalError;\n+use errors::{Applicability, FatalError};\n use ext::base::*;\n use ext::derive::{add_derived_markers, collect_derives};\n use ext::hygiene::{self, Mark, SyntaxContext};\n@@ -331,7 +331,11 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                             let trait_list = traits.iter()\n                                 .map(|t| format!(\"{}\", t)).collect::<Vec<_>>();\n                             let suggestion = format!(\"#[derive({})]\", trait_list.join(\", \"));\n-                            err.span_suggestion(span, \"try an outer attribute\", suggestion);\n+                            err.span_suggestion_with_applicability(\n+                                span, \"try an outer attribute\", suggestion,\n+                                // We don't \ud835\udc58\ud835\udc5b\ud835\udc5c\ud835\udc64 that the following item is an ADT\n+                                Applicability::MaybeIncorrect\n+                            );\n                         }\n                         err.emit();\n                     }"}, {"sha": "b665f528cfc030662c308c144acb383b0715fec8", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -11,7 +11,7 @@\n use ast::{self, Ident};\n use syntax_pos::{self, BytePos, CharPos, Pos, Span, NO_EXPANSION};\n use codemap::{CodeMap, FilePathMapping};\n-use errors::{FatalError, DiagnosticBuilder};\n+use errors::{Applicability, FatalError, DiagnosticBuilder};\n use parse::{token, ParseSess};\n use str::char_at;\n use symbol::{Symbol, keywords};\n@@ -1345,11 +1345,12 @@ impl<'a> StringReader<'a> {\n                             self.sess.span_diagnostic\n                                 .struct_span_err(span,\n                                                  \"character literal may only contain one codepoint\")\n-                                .span_suggestion(span,\n-                                                 \"if you meant to write a `str` literal, \\\n-                                                  use double quotes\",\n-                                                 format!(\"\\\"{}\\\"\", &self.src[start..end]))\n-                                .emit();\n+                                .span_suggestion_with_applicability(\n+                                    span,\n+                                    \"if you meant to write a `str` literal, use double quotes\",\n+                                    format!(\"\\\"{}\\\"\", &self.src[start..end]),\n+                                    Applicability::MachineApplicable\n+                                ).emit();\n                             return Ok(token::Literal(token::Str_(Symbol::intern(\"??\")), None))\n                         }\n                         if self.ch_is('\\n') || self.is_eof() || self.ch_is('/') {"}, {"sha": "1a7f897802aa901083acb292f4eecac6386d0297", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 140, "deletions": 52, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -43,7 +43,7 @@ use ast::{RangeEnd, RangeSyntax};\n use {ast, attr};\n use codemap::{self, CodeMap, Spanned, respan};\n use syntax_pos::{self, Span, MultiSpan, BytePos, FileName, DUMMY_SP};\n-use errors::{self, DiagnosticBuilder};\n+use errors::{self, Applicability, DiagnosticBuilder};\n use parse::{self, classify, token};\n use parse::common::SeqSep;\n use parse::lexer::TokenAndSpan;\n@@ -1648,8 +1648,12 @@ impl<'a> Parser<'a> {\n         if !allow_plus && impl_dyn_multi {\n             let sum_with_parens = format!(\"({})\", pprust::ty_to_string(&ty));\n             self.struct_span_err(ty.span, \"ambiguous `+` in a type\")\n-                .span_suggestion(ty.span, \"use parentheses to disambiguate\", sum_with_parens)\n-                .emit();\n+                .span_suggestion_with_applicability(\n+                    ty.span,\n+                    \"use parentheses to disambiguate\",\n+                    sum_with_parens,\n+                    Applicability::MachineApplicable\n+                ).emit();\n         }\n     }\n \n@@ -1679,7 +1683,12 @@ impl<'a> Parser<'a> {\n                     s.print_bounds(\" +\", &bounds)?;\n                     s.pclose()\n                 });\n-                err.span_suggestion(sum_span, \"try adding parentheses\", sum_with_parens);\n+                err.span_suggestion_with_applicability(\n+                    sum_span,\n+                    \"try adding parentheses\",\n+                    sum_with_parens,\n+                    Applicability::MachineApplicable\n+                );\n             }\n             TyKind::Ptr(..) | TyKind::BareFn(..) => {\n                 err.span_label(sum_span, \"perhaps you forgot parentheses?\");\n@@ -1714,7 +1723,9 @@ impl<'a> Parser<'a> {\n \n         self.diagnostic()\n             .struct_span_err(span, \"missing angle brackets in associated item path\")\n-            .span_suggestion(span, \"try\", recovered.to_string()).emit();\n+            .span_suggestion_with_applicability( // this is a best-effort recovery\n+                span, \"try\", recovered.to_string(), Applicability::MaybeIncorrect\n+            ).emit();\n \n         Ok(recovered)\n     }\n@@ -2465,7 +2476,12 @@ impl<'a> Parser<'a> {\n                         exp_span.to(self.prev_span),\n                         \"cannot use a comma after the base struct\",\n                     );\n-                    err.span_suggestion_short(self.span, \"remove this comma\", \"\".to_owned());\n+                    err.span_suggestion_short_with_applicability(\n+                        self.span,\n+                        \"remove this comma\",\n+                        \"\".to_owned(),\n+                        Applicability::MachineApplicable\n+                    );\n                     err.note(\"the base struct must always be the last field\");\n                     err.emit();\n                     self.recover_stmt();\n@@ -2638,10 +2654,12 @@ impl<'a> Parser<'a> {\n                             s.s.word(\".\")?;\n                             s.s.word(fstr.splitn(2, \".\").last().unwrap())\n                         });\n-                        err.span_suggestion(\n+                        err.span_suggestion_with_applicability(\n                             lo.to(self.prev_span),\n                             \"try parenthesizing the first index\",\n-                            sugg);\n+                            sugg,\n+                            Applicability::MachineApplicable\n+                        );\n                     }\n                     return Err(err);\n \n@@ -2781,9 +2799,12 @@ impl<'a> Parser<'a> {\n                 let span_of_tilde = lo;\n                 let mut err = self.diagnostic().struct_span_err(span_of_tilde,\n                         \"`~` cannot be used as a unary operator\");\n-                err.span_suggestion_short(span_of_tilde,\n-                                          \"use `!` to perform bitwise negation\",\n-                                          \"!\".to_owned());\n+                err.span_suggestion_short_with_applicability(\n+                    span_of_tilde,\n+                    \"use `!` to perform bitwise negation\",\n+                    \"!\".to_owned(),\n+                    Applicability::MachineApplicable\n+                );\n                 err.emit();\n                 (lo.to(span), self.mk_unary(UnOp::Not, e))\n             }\n@@ -2840,9 +2861,12 @@ impl<'a> Parser<'a> {\n                     // trailing whitespace after the `!` in our suggestion\n                     let to_replace = self.sess.codemap()\n                         .span_until_non_whitespace(lo.to(self.span));\n-                    err.span_suggestion_short(to_replace,\n-                                              \"use `!` to perform logical negation\",\n-                                              \"!\".to_owned());\n+                    err.span_suggestion_short_with_applicability(\n+                        to_replace,\n+                        \"use `!` to perform logical negation\",\n+                        \"!\".to_owned(),\n+                        Applicability::MachineApplicable\n+                    );\n                     err.emit();\n                     // \u2014and recover! (just as if we were in the block\n                     // for the `token::Not` arm)\n@@ -2937,9 +2961,12 @@ impl<'a> Parser<'a> {\n                         let cur_pos = cm.lookup_char_pos(self.span.lo());\n                         let op_pos = cm.lookup_char_pos(cur_op_span.hi());\n                         if cur_pos.line != op_pos.line {\n-                            err.span_suggestion_short(cur_op_span,\n-                                                      \"did you mean to use `;` here?\",\n-                                                      \";\".to_string());\n+                            err.span_suggestion_with_applicability(\n+                                cur_op_span,\n+                                \"try using a semicolon\",\n+                                \";\".to_string(),\n+                                Applicability::MaybeIncorrect // speculative\n+                            );\n                         }\n                         return Err(err);\n                     }\n@@ -3091,9 +3118,12 @@ impl<'a> Parser<'a> {\n \n                         let expr_str = self.sess.codemap().span_to_snippet(expr.span)\n                                                 .unwrap_or(pprust::expr_to_string(&expr));\n-                        err.span_suggestion(expr.span,\n-                                            &format!(\"try {} the cast value\", op_verb),\n-                                            format!(\"({})\", expr_str));\n+                        err.span_suggestion_with_applicability(\n+                            expr.span,\n+                            &format!(\"try {} the cast value\", op_verb),\n+                            format!(\"({})\", expr_str),\n+                            Applicability::MachineApplicable\n+                        );\n                         err.emit();\n \n                         Ok(expr)\n@@ -3301,7 +3331,11 @@ impl<'a> Parser<'a> {\n             let in_span = self.prev_span.between(self.span);\n             let mut err = self.sess.span_diagnostic\n                 .struct_span_err(in_span, \"missing `in` in `for` loop\");\n-            err.span_suggestion_short(in_span, \"try adding `in` here\", \" in \".into());\n+            err.span_suggestion_short_with_applicability(\n+                in_span, \"try adding `in` here\", \" in \".into(),\n+                // has been misleading, at least in the past (closed Issue #48492)\n+                Applicability::MaybeIncorrect\n+            );\n             err.emit();\n         }\n         let expr = self.parse_expr_res(Restrictions::NO_STRUCT_LITERAL, None)?;\n@@ -3367,7 +3401,12 @@ impl<'a> Parser<'a> {\n                                                None)?;\n         if let Err(mut e) = self.expect(&token::OpenDelim(token::Brace)) {\n             if self.token == token::Token::Semi {\n-                e.span_suggestion_short(match_span, \"try removing this `match`\", \"\".to_owned());\n+                e.span_suggestion_short_with_applicability(\n+                    match_span,\n+                    \"try removing this `match`\",\n+                    \"\".to_owned(),\n+                    Applicability::MaybeIncorrect // speculative\n+                );\n             }\n             return Err(e)\n         }\n@@ -3439,10 +3478,11 @@ impl<'a> Parser<'a> {\n                             //   |      - ^^ self.span\n                             //   |      |\n                             //   |      parsed until here as `\"y\" & X`\n-                            err.span_suggestion_short(\n+                            err.span_suggestion_short_with_applicability(\n                                 cm.next_point(arm_start_span),\n                                 \"missing a comma here to end this `match` arm\",\n-                                \",\".to_owned()\n+                                \",\".to_owned(),\n+                                Applicability::MachineApplicable\n                             );\n                         }\n                         _ => {\n@@ -3511,9 +3551,12 @@ impl<'a> Parser<'a> {\n             if self.token == token::OrOr {\n                 let mut err = self.struct_span_err(self.span,\n                                                    \"unexpected token `||` after pattern\");\n-                err.span_suggestion(self.span,\n-                                    \"use a single `|` to specify multiple patterns\",\n-                                    \"|\".to_owned());\n+                err.span_suggestion_with_applicability(\n+                    self.span,\n+                    \"use a single `|` to specify multiple patterns\",\n+                    \"|\".to_owned(),\n+                    Applicability::MachineApplicable\n+                );\n                 err.emit();\n                 self.bump();\n             } else if self.check(&token::BinOp(token::Or)) {\n@@ -3643,9 +3686,12 @@ impl<'a> Parser<'a> {\n                 if self.token == token::DotDotDot { // Issue #46718\n                     let mut err = self.struct_span_err(self.span,\n                                                        \"expected field pattern, found `...`\");\n-                    err.span_suggestion(self.span,\n-                                        \"to omit remaining fields, use one fewer `.`\",\n-                                        \"..\".to_owned());\n+                    err.span_suggestion_with_applicability(\n+                        self.span,\n+                        \"to omit remaining fields, use one fewer `.`\",\n+                        \"..\".to_owned(),\n+                        Applicability::MachineApplicable\n+                    );\n                     err.emit();\n                 }\n \n@@ -3776,8 +3822,12 @@ impl<'a> Parser<'a> {\n             let mut err = self.struct_span_err(comma_span,\n                                                \"unexpected `,` in pattern\");\n             if let Ok(seq_snippet) = self.sess.codemap().span_to_snippet(seq_span) {\n-                err.span_suggestion(seq_span, \"try adding parentheses\",\n-                                    format!(\"({})\", seq_snippet));\n+                err.span_suggestion_with_applicability(\n+                    seq_span,\n+                    \"try adding parentheses\",\n+                    format!(\"({})\", seq_snippet),\n+                    Applicability::MachineApplicable\n+                );\n             }\n             return Err(err);\n         }\n@@ -3836,8 +3886,12 @@ impl<'a> Parser<'a> {\n                 let binding_mode = if self.eat_keyword(keywords::Ref) {\n                     self.diagnostic()\n                         .struct_span_err(mutref_span, \"the order of `mut` and `ref` is incorrect\")\n-                        .span_suggestion(mutref_span, \"try switching the order\", \"ref mut\".into())\n-                        .emit();\n+                        .span_suggestion_with_applicability(\n+                            mutref_span,\n+                            \"try switching the order\",\n+                            \"ref mut\".into(),\n+                            Applicability::MachineApplicable\n+                        ).emit();\n                     BindingMode::ByRef(Mutability::Mutable)\n                 } else {\n                     BindingMode::ByValue(Mutability::Mutable)\n@@ -3962,10 +4016,12 @@ impl<'a> Parser<'a> {\n                         pat.span,\n                         \"the range pattern here has ambiguous interpretation\",\n                     );\n-                    err.span_suggestion(\n+                    err.span_suggestion_with_applicability(\n                         pat.span,\n                         \"add parentheses to clarify the precedence\",\n                         format!(\"({})\", pprust::pat_to_string(&pat)),\n+                        // \"ambiguous interpretation\" implies that we have to be guessing\n+                        Applicability::MaybeIncorrect\n                     );\n                     return Err(err);\n                 }\n@@ -4036,9 +4092,12 @@ impl<'a> Parser<'a> {\n             (Ok(init), Some((_, colon_sp, mut err))) => {  // init parsed, ty error\n                 // Could parse the type as if it were the initializer, it is likely there was a\n                 // typo in the code: `:` instead of `=`. Add suggestion and emit the error.\n-                err.span_suggestion_short(colon_sp,\n-                                          \"use `=` if you meant to assign\",\n-                                          \"=\".to_string());\n+                err.span_suggestion_short_with_applicability(\n+                    colon_sp,\n+                    \"use `=` if you meant to assign\",\n+                    \"=\".to_string(),\n+                    Applicability::MachineApplicable\n+                );\n                 err.emit();\n                 // As this was parsed successfully, continue as if the code has been fixed for the\n                 // rest of the file. It will still fail due to the emitted error, but we avoid\n@@ -4526,7 +4585,13 @@ impl<'a> Parser<'a> {\n                         s.print_stmt(&stmt)?;\n                         s.bclose_maybe_open(stmt.span, INDENT_UNIT, false)\n                     });\n-                    e.span_suggestion(stmt_span, \"try placing this code inside a block\", sugg);\n+                    e.span_suggestion_with_applicability(\n+                        stmt_span,\n+                        \"try placing this code inside a block\",\n+                        sugg,\n+                        // speculative, has been misleading in the past (closed Issue #46836)\n+                        Applicability::MaybeIncorrect\n+                    );\n                 }\n                 Err(mut e) => {\n                     self.recover_stmt_(SemiColonMode::Break, BlockMode::Ignore);\n@@ -5370,9 +5435,12 @@ impl<'a> Parser<'a> {\n                 if is_macro_rules {\n                     let mut err = self.diagnostic()\n                         .struct_span_err(sp, \"can't qualify macro_rules invocation with `pub`\");\n-                    err.span_suggestion(sp,\n-                                        \"try exporting the macro\",\n-                                        \"#[macro_export]\".to_owned());\n+                    err.span_suggestion_with_applicability(\n+                        sp,\n+                        \"try exporting the macro\",\n+                        \"#[macro_export]\".to_owned(),\n+                        Applicability::MaybeIncorrect // speculative\n+                    );\n                     Err(err)\n                 } else {\n                     let mut err = self.diagnostic()\n@@ -5793,7 +5861,12 @@ impl<'a> Parser<'a> {\n                 } else {\n                     if seen_comma == false {\n                         let sp = self.sess.codemap().next_point(previous_span);\n-                        err.span_suggestion(sp, \"missing comma here\", \",\".into());\n+                        err.span_suggestion_with_applicability(\n+                            sp,\n+                            \"missing comma here\",\n+                            \",\".into(),\n+                            Applicability::MachineApplicable\n+                        );\n                     }\n                     return Err(err);\n                 }\n@@ -5883,7 +5956,9 @@ impl<'a> Parser<'a> {\n                 let help_msg = format!(\"make this visible only to module `{}` with `in`\", path);\n                 self.expect(&token::CloseDelim(token::Paren))?;  // `)`\n                 let mut err = self.span_fatal_help(path_span, msg, suggestion);\n-                err.span_suggestion(path_span, &help_msg, format!(\"in {}\", path));\n+                err.span_suggestion_with_applicability(\n+                    path_span, &help_msg, format!(\"in {}\", path), Applicability::MachineApplicable\n+                );\n                 err.emit();  // emit diagnostic, but continue with public visibility\n             }\n         }\n@@ -5921,7 +5996,9 @@ impl<'a> Parser<'a> {\n             let mut err = self.fatal(&format!(\"expected item, found `{}`\", token_str));\n             if token_str == \";\" {\n                 let msg = \"consider removing this semicolon\";\n-                err.span_suggestion_short(self.span, msg, \"\".to_string());\n+                err.span_suggestion_short_with_applicability(\n+                    self.span, msg, \"\".to_string(), Applicability::MachineApplicable\n+                );\n             } else {\n                 err.span_label(self.span, \"expected item\");\n             }\n@@ -6735,7 +6812,9 @@ impl<'a> Parser<'a> {\n                                   ident);\n                 let mut err = self.diagnostic()\n                     .struct_span_err(sp, \"missing `struct` for struct definition\");\n-                err.span_suggestion_short(sp, &msg, \" struct \".into());\n+                err.span_suggestion_short_with_applicability(\n+                    sp, &msg, \" struct \".into(), Applicability::MaybeIncorrect // speculative\n+                );\n                 return Err(err);\n             } else if self.look_ahead(1, |t| *t == token::OpenDelim(token::Paren)) {\n                 let ident = self.parse_ident().unwrap();\n@@ -6758,13 +6837,18 @@ impl<'a> Parser<'a> {\n                                              kw,\n                                              ident,\n                                              kw_name);\n-                    err.span_suggestion_short(sp, &suggestion, format!(\" {} \", kw));\n+                    err.span_suggestion_short_with_applicability(\n+                        sp, &suggestion, format!(\" {} \", kw), Applicability::MachineApplicable\n+                    );\n                 } else {\n                     if let Ok(snippet) = self.sess.codemap().span_to_snippet(ident_sp) {\n-                        err.span_suggestion(\n+                        err.span_suggestion_with_applicability(\n                             full_sp,\n-                            \"if you meant to call a macro, write instead\",\n-                            format!(\"{}!\", snippet));\n+                            \"if you meant to call a macro, try\",\n+                            format!(\"{}!\", snippet),\n+                            // this is the `ambiguous` conditional branch\n+                            Applicability::MaybeIncorrect\n+                        );\n                     } else {\n                         err.help(\"if you meant to call a macro, remove the `pub` \\\n                                   and add a trailing `!` after the identifier\");\n@@ -6790,8 +6874,12 @@ impl<'a> Parser<'a> {\n             if self.token.is_keyword(keywords::Const) {\n                 self.diagnostic()\n                     .struct_span_err(self.span, \"extern items cannot be `const`\")\n-                    .span_suggestion(self.span, \"instead try using\", \"static\".to_owned())\n-                    .emit();\n+                    .span_suggestion_with_applicability(\n+                        self.span,\n+                        \"try using a static value\",\n+                        \"static\".to_owned(),\n+                        Applicability::MachineApplicable\n+                    ).emit();\n             }\n             self.bump(); // `static` or `const`\n             return Ok(Some(self.parse_item_foreign_static(visibility, lo, attrs)?));"}, {"sha": "6e131ca41aa97d92995c4909dd13a7bf549fe86e", "filename": "src/test/ui/extern-const.fixed", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fextern-const.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fextern-const.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-const.fixed?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+// compile-flags: -Z continue-parse-after-error\n+\n+extern \"C\" {\n+    static C: u8; //~ ERROR extern items cannot be `const`\n+}\n+\n+fn main() {\n+    // We suggest turning the (illegal) extern `const` into an extern `static`,\n+    // but this also requires `unsafe` (a deny-by-default lint at comment time,\n+    // future error; Issue #36247)\n+    unsafe {\n+        let _x = C;\n+    }\n+}"}, {"sha": "4a766b9724dc2754486f6b512f256360eac1dd8b", "filename": "src/test/ui/extern-const.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fextern-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fextern-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-const.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -8,12 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n // compile-flags: -Z continue-parse-after-error\n \n extern \"C\" {\n     const C: u8; //~ ERROR extern items cannot be `const`\n }\n \n fn main() {\n-    let x = C;\n+    // We suggest turning the (illegal) extern `const` into an extern `static`,\n+    // but this also requires `unsafe` (a deny-by-default lint at comment time,\n+    // future error; Issue #36247)\n+    unsafe {\n+        let _x = C;\n+    }\n }"}, {"sha": "cbed5e56c76c4523c42e39712d30cfc575bd2416", "filename": "src/test/ui/extern-const.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fextern-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fextern-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern-const.stderr?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -1,8 +1,8 @@\n error: extern items cannot be `const`\n-  --> $DIR/extern-const.rs:14:5\n+  --> $DIR/extern-const.rs:15:5\n    |\n LL |     const C: u8; //~ ERROR extern items cannot be `const`\n-   |     ^^^^^ help: instead try using: `static`\n+   |     ^^^^^ help: try using a static value: `static`\n \n error: aborting due to previous error\n "}, {"sha": "d05996fb8b91b5289848ff6fd3fd17c6d5d23391", "filename": "src/test/ui/issue-42954.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fissue-42954.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fissue-42954.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42954.fixed?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![allow(unused_must_use, unused_comparisons)]\n+\n+macro_rules! is_plainly_printable {\n+    ($i: ident) => {\n+        ($i as u32) < 0 //~ `<` is interpreted as a start of generic arguments\n+    };\n+}\n+\n+fn main() {\n+    let c = 'a';\n+    is_plainly_printable!(c);\n+}"}, {"sha": "8226cedc0c42199aa24bb2ba527832b1af7b2c57", "filename": "src/test/ui/issue-42954.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fissue-42954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fissue-42954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42954.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n+#![allow(unused_must_use, unused_comparisons)]\n+\n macro_rules! is_plainly_printable {\n     ($i: ident) => {\n         $i as u32 < 0 //~ `<` is interpreted as a start of generic arguments"}, {"sha": "aa332602f9e8fbd50b36751b65eb91faa3d755e1", "filename": "src/test/ui/issue-42954.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fissue-42954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fissue-42954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42954.stderr?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -1,5 +1,5 @@\n error: `<` is interpreted as a start of generic arguments for `u32`, not a comparison\n-  --> $DIR/issue-42954.rs:13:19\n+  --> $DIR/issue-42954.rs:17:19\n    |\n LL |         $i as u32 < 0 //~ `<` is interpreted as a start of generic arguments\n    |         --------- ^ - interpreted as generic arguments"}, {"sha": "5cd9b3f065eb8fbc07ce3bd341ebe60154da0c04", "filename": "src/test/ui/issue-44406.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fissue-44406.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fissue-44406.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-44406.stderr?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -8,7 +8,7 @@ error: expected type, found keyword `true`\n   --> $DIR/issue-44406.rs:18:10\n    |\n LL |         bar(baz: $rest)\n-   |                - help: did you mean to use `;` here?\n+   |                - help: try using a semicolon: `;`\n ...\n LL |     foo!(true); //~ ERROR expected type, found keyword\n    |          ^^^^ expecting a type here because of type ascription"}, {"sha": "0ff33c42b1c82ff80f3850dbb4470eddbfa84bfc", "filename": "src/test/ui/issue-48636.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fissue-48636.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fissue-48636.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-48636.fixed?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+struct S {\n+    x: u8,\n+    /// The id of the parent core\n+    y: u8,\n+}\n+//~^^^ ERROR found a documentation comment that doesn't document anything\n+fn main() {}"}, {"sha": "2ac41211347b5ccbeab613142185f92e0b0a3172", "filename": "src/test/ui/issue-48636.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fissue-48636.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fissue-48636.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-48636.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n struct S {\n     x: u8\n     /// The id of the parent core"}, {"sha": "c4706f982ed74ff2cb201c49f0ddf5bca1cf1f43", "filename": "src/test/ui/issue-48636.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fissue-48636.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fissue-48636.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-48636.stderr?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -1,5 +1,5 @@\n error[E0585]: found a documentation comment that doesn't document anything\n-  --> $DIR/issue-48636.rs:13:5\n+  --> $DIR/issue-48636.rs:17:5\n    |\n LL |     x: u8\n    |          - help: missing comma here: `,`"}, {"sha": "1a7608fea6e27bc7de22bf24b098a1b53e9fee96", "filename": "src/test/ui/mismatched_types/closure-arg-count-expected-type-issue-47244.fixed", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.fixed?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #47244: in this specific scenario, when the\n+// expected type indicated 1 argument but the closure takes two, we\n+// would (early on) create type variables for the type of `b`. If the\n+// user then attempts to invoke a method on `b`, we would get an error\n+// saying that the type of `b` must be known, which was not very\n+// helpful.\n+\n+// run-rustfix\n+\n+use std::collections::HashMap;\n+\n+fn main() {\n+    let mut m = HashMap::new();\n+    m.insert(\"foo\", \"bar\");\n+\n+    let _n = m.iter().map(|(_, b)| {\n+        //~^ ERROR closure is expected to take a single 2-tuple\n+        b.to_string()\n+    });\n+}"}, {"sha": "0ca0753490a2ffdf7a949ab4d6a4c2e43ddb4c82", "filename": "src/test/ui/mismatched_types/closure-arg-count-expected-type-issue-47244.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -15,15 +15,16 @@\n // saying that the type of `b` must be known, which was not very\n // helpful.\n \n+// run-rustfix\n+\n use std::collections::HashMap;\n-fn main() {\n \n-    let m = HashMap::new();\n-    m.insert( \"foo\", \"bar\" );\n+fn main() {\n+    let mut m = HashMap::new();\n+    m.insert(\"foo\", \"bar\");\n \n-    m.iter().map( |_, b| {\n+    let _n = m.iter().map(|_, b| {\n         //~^ ERROR closure is expected to take a single 2-tuple\n-\n         b.to_string()\n     });\n }"}, {"sha": "c95d8157b0ce1b7638366ea9f5b4105565de2bc9", "filename": "src/test/ui/mismatched_types/closure-arg-count-expected-type-issue-47244.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count-expected-type-issue-47244.stderr?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -1,14 +1,14 @@\n error[E0593]: closure is expected to take a single 2-tuple as argument, but it takes 2 distinct arguments\n-  --> $DIR/closure-arg-count-expected-type-issue-47244.rs:24:14\n+  --> $DIR/closure-arg-count-expected-type-issue-47244.rs:26:23\n    |\n-LL |     m.iter().map( |_, b| {\n-   |              ^^^  ------ takes 2 distinct arguments\n-   |              |\n-   |              expected closure that takes a single 2-tuple as argument\n+LL |     let _n = m.iter().map(|_, b| {\n+   |                       ^^^ ------ takes 2 distinct arguments\n+   |                       |\n+   |                       expected closure that takes a single 2-tuple as argument\n help: change the closure to accept a tuple instead of individual arguments\n    |\n-LL |     m.iter().map( |(_, b)| {\n-   |                   ^^^^^^^^\n+LL |     let _n = m.iter().map(|(_, b)| {\n+   |                           ^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "62147e7625eb2f3f733bc0e6dbb36789647be1e6", "filename": "src/test/ui/repr-align-assign.fixed", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Frepr-align-assign.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Frepr-align-assign.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr-align-assign.fixed?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+#[repr(align(8))] //~ ERROR incorrect `repr(align)` attribute format\n+struct A(u64);\n+\n+#[repr(align(8))] //~ ERROR incorrect `repr(align)` attribute format\n+struct B(u64);\n+\n+fn main() {}"}, {"sha": "3bc3b5c64ce251cec6f5f63cbd0f0319428086dd", "filename": "src/test/ui/repr-align-assign.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Frepr-align-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Frepr-align-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr-align-assign.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n #[repr(align=8)] //~ ERROR incorrect `repr(align)` attribute format\n struct A(u64);\n "}, {"sha": "c325b6968fe438ccd68c504163b3d8752a16600d", "filename": "src/test/ui/repr-align-assign.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Frepr-align-assign.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Frepr-align-assign.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepr-align-assign.stderr?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -1,11 +1,11 @@\n error[E0693]: incorrect `repr(align)` attribute format\n-  --> $DIR/repr-align-assign.rs:11:8\n+  --> $DIR/repr-align-assign.rs:15:8\n    |\n LL | #[repr(align=8)] //~ ERROR incorrect `repr(align)` attribute format\n    |        ^^^^^^^ help: use parentheses instead: `align(8)`\n \n error[E0693]: incorrect `repr(align)` attribute format\n-  --> $DIR/repr-align-assign.rs:14:8\n+  --> $DIR/repr-align-assign.rs:18:8\n    |\n LL | #[repr(align=\"8\")] //~ ERROR incorrect `repr(align)` attribute format\n    |        ^^^^^^^^^ help: use parentheses instead: `align(8)`"}, {"sha": "251f7eb9a24878d1c49a3fdc902e331c0672a9ef", "filename": "src/test/ui/suggestions/issue-32354-suggest-import-rename.fixed", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.fixed?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+\n+pub mod extension1 {\n+    pub trait ConstructorExtension {}\n+}\n+\n+pub mod extension2 {\n+    pub trait ConstructorExtension {}\n+}\n+\n+use extension1::ConstructorExtension;\n+use extension2::ConstructorExtension as OtherConstructorExtension; //~ ERROR is defined multiple times\n+\n+fn main() {}"}, {"sha": "57cbeb47a1e0492a41aa02bb43c662667a016c54", "filename": "src/test/ui/suggestions/issue-32354-suggest-import-rename.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// run-rustfix\n+\n+#![allow(unused_imports)]\n+\n pub mod extension1 {\n     pub trait ConstructorExtension {}\n }"}, {"sha": "f45a5f7dd619ba168ec5079af74afb934051afbb", "filename": "src/test/ui/suggestions/issue-32354-suggest-import-rename.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-32354-suggest-import-rename.stderr?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -1,5 +1,5 @@\n error[E0252]: the name `ConstructorExtension` is defined multiple times\n-  --> $DIR/issue-32354-suggest-import-rename.rs:20:5\n+  --> $DIR/issue-32354-suggest-import-rename.rs:24:5\n    |\n LL | use extension1::ConstructorExtension;\n    |     -------------------------------- previous import of the trait `ConstructorExtension` here"}, {"sha": "e492a8c47567e214c639be39f3bab802e9e925ff", "filename": "src/test/ui/suggestions/pub-ident-fn-or-struct-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct-2.stderr?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -2,7 +2,7 @@ error: missing `fn` or `struct` for method or struct definition\n   --> $DIR/pub-ident-fn-or-struct-2.rs:11:4\n    |\n LL | pub S();\n-   | ---^- help: if you meant to call a macro, write instead: `S!`\n+   | ---^- help: if you meant to call a macro, try: `S!`\n \n error: aborting due to previous error\n "}, {"sha": "c1bff34cec3e61695bac530d29774369124012be", "filename": "src/test/ui/suggestions/pub-ident-fn-or-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn-or-struct.stderr?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -2,7 +2,7 @@ error: missing `fn` or `struct` for method or struct definition\n   --> $DIR/pub-ident-fn-or-struct.rs:11:4\n    |\n LL | pub S (foo) bar\n-   | ---^- help: if you meant to call a macro, write instead: `S!`\n+   | ---^- help: if you meant to call a macro, try: `S!`\n \n error: aborting due to previous error\n "}, {"sha": "f2d0c6c3e1d3fbaf22fe3b9b9574b3bb9f7c2d53", "filename": "src/test/ui/suggestions/pub-ident-fn.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.fixed?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// run-rustfix\n+\n+pub fn foo(_s: usize) -> bool { true }\n+//~^ ERROR missing `fn` for method definition\n+\n+fn main() {\n+    foo(2);\n+}"}, {"sha": "82c32f57eeae0f30df70d7712137bc0e2b01ddbf", "filename": "src/test/ui/suggestions/pub-ident-fn.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.rs?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub   foo(s: usize) -> bool { true }\n+// run-rustfix\n+\n+pub   foo(_s: usize) -> bool { true }\n //~^ ERROR missing `fn` for method definition\n \n fn main() {"}, {"sha": "f7c96b8b9f4bb951c8b9e087d193245d226a4398", "filename": "src/test/ui/suggestions/pub-ident-fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fpub-ident-fn.stderr?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -1,11 +1,11 @@\n error: missing `fn` for method definition\n-  --> $DIR/pub-ident-fn.rs:11:4\n+  --> $DIR/pub-ident-fn.rs:13:4\n    |\n-LL | pub   foo(s: usize) -> bool { true }\n+LL | pub   foo(_s: usize) -> bool { true }\n    |    ^^^\n help: add `fn` here to parse `foo` as a public method\n    |\n-LL | pub fn foo(s: usize) -> bool { true }\n+LL | pub fn foo(_s: usize) -> bool { true }\n    |     ^^\n \n error: aborting due to previous error"}, {"sha": "314c9060d4f7dc68a5d2469623c96a230bbbe472", "filename": "src/test/ui/suggestions/type-ascription-instead-of-statement-end.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-statement-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/98a04291e4db92ae86d7e3a20b5763cb926ebfbf/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-statement-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Ftype-ascription-instead-of-statement-end.stderr?ref=98a04291e4db92ae86d7e3a20b5763cb926ebfbf", "patch": "@@ -2,7 +2,7 @@ error: expected type, found `0`\n   --> $DIR/type-ascription-instead-of-statement-end.rs:15:5\n    |\n LL |     println!(\"test\"):\n-   |                     - help: did you mean to use `;` here?\n+   |                     - help: try using a semicolon: `;`\n LL |     0; //~ ERROR expected type, found `0`\n    |     ^ expecting a type here because of type ascription\n "}]}