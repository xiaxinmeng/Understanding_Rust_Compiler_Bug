{"sha": "6463d3ac63a479e33d923593e720696b38a1a54c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NjNkM2FjNjNhNDc5ZTMzZDkyMzU5M2U3MjA2OTZiMzhhMWE1NGM=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-09T16:47:14Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-10T10:38:58Z"}, "message": "symbol_index: allow querying a single crate", "tree": {"sha": "b7ba6f485573ce39ab7b5494732875240a703840", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7ba6f485573ce39ab7b5494732875240a703840"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6463d3ac63a479e33d923593e720696b38a1a54c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6463d3ac63a479e33d923593e720696b38a1a54c", "html_url": "https://github.com/rust-lang/rust/commit/6463d3ac63a479e33d923593e720696b38a1a54c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6463d3ac63a479e33d923593e720696b38a1a54c/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4bcf8c8c68bd791f295aa06ef7903c006be3f356", "url": "https://api.github.com/repos/rust-lang/rust/commits/4bcf8c8c68bd791f295aa06ef7903c006be3f356", "html_url": "https://github.com/rust-lang/rust/commit/4bcf8c8c68bd791f295aa06ef7903c006be3f356"}], "stats": {"total": 43, "additions": 34, "deletions": 9}, "files": [{"sha": "c974891eaefac23dedf6dd9ed37f65d4d37a822c", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6463d3ac63a479e33d923593e720696b38a1a54c/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6463d3ac63a479e33d923593e720696b38a1a54c/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=6463d3ac63a479e33d923593e720696b38a1a54c", "patch": "@@ -29,9 +29,10 @@ use std::{\n };\n \n use fst::{self, Streamer};\n+use hir::db::DefDatabase;\n use ra_db::{\n     salsa::{self, ParallelDatabase},\n-    FileId, SourceDatabaseExt, SourceRootId,\n+    CrateId, FileId, SourceDatabaseExt, SourceRootId,\n };\n use ra_syntax::{\n     ast::{self, NameOwner},\n@@ -110,6 +111,14 @@ fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex>\n     Arc::new(SymbolIndex::new(symbols))\n }\n \n+/// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n+struct Snap(salsa::Snapshot<RootDatabase>);\n+impl Clone for Snap {\n+    fn clone(&self) -> Snap {\n+        Snap(self.0.snapshot())\n+    }\n+}\n+\n // Feature: Workspace Symbol\n //\n // Uses fuzzy-search to find types, modules and functions by name across your\n@@ -134,14 +143,6 @@ fn file_symbols(db: &impl SymbolsDatabase, file_id: FileId) -> Arc<SymbolIndex>\n pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n     let _p = ra_prof::profile(\"world_symbols\").detail(|| query.query.clone());\n \n-    /// Need to wrap Snapshot to provide `Clone` impl for `map_with`\n-    struct Snap(salsa::Snapshot<RootDatabase>);\n-    impl Clone for Snap {\n-        fn clone(&self) -> Snap {\n-            Snap(self.0.snapshot())\n-        }\n-    }\n-\n     let buf: Vec<Arc<SymbolIndex>> = if query.libs {\n         let snap = Snap(db.snapshot());\n         #[cfg(not(feature = \"wasm\"))]\n@@ -175,6 +176,30 @@ pub fn world_symbols(db: &RootDatabase, query: Query) -> Vec<FileSymbol> {\n     query.search(&buf)\n }\n \n+pub fn crate_symbols(db: &RootDatabase, krate: CrateId, query: Query) -> Vec<FileSymbol> {\n+    let def_map = db.crate_def_map(krate);\n+    let mut files = Vec::new();\n+    let mut modules = vec![def_map.root];\n+    while let Some(module) = modules.pop() {\n+        let data = &def_map[module];\n+        files.extend(data.origin.file_id());\n+        modules.extend(data.children.values());\n+    }\n+\n+    let snap = Snap(db.snapshot());\n+\n+    #[cfg(not(feature = \"wasm\"))]\n+    let buf = files\n+        .par_iter()\n+        .map_with(snap, |db, &file_id| db.0.file_symbols(file_id))\n+        .collect::<Vec<_>>();\n+\n+    #[cfg(feature = \"wasm\")]\n+    let buf = files.iter().map(|&file_id| snap.0.file_symbols(file_id)).collect::<Vec<_>>();\n+\n+    query.search(&buf)\n+}\n+\n pub fn index_resolve(db: &RootDatabase, name_ref: &ast::NameRef) -> Vec<FileSymbol> {\n     let name = name_ref.text();\n     let mut query = Query::new(name.to_string());"}]}