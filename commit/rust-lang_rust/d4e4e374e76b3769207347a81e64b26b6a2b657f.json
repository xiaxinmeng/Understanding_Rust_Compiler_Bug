{"sha": "d4e4e374e76b3769207347a81e64b26b6a2b657f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZTRlMzc0ZTc2YjM3NjkyMDczNDdhODFlNjRiMjZiNmEyYjY1N2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-03T14:07:16Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-27T13:06:03Z"}, "message": "apply minimum bounds when checking closure signature\n\nRequired for test expect-fn-supply-fn.rs to pass; otherwise we have\nunconstrained inference variables that get inferred to `'empty`.", "tree": {"sha": "f7543ec2f1a38fdd6f1379c7b8aa60446e5f98ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7543ec2f1a38fdd6f1379c7b8aa60446e5f98ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4e4e374e76b3769207347a81e64b26b6a2b657f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4e4e374e76b3769207347a81e64b26b6a2b657f", "html_url": "https://github.com/rust-lang/rust/commit/d4e4e374e76b3769207347a81e64b26b6a2b657f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4e4e374e76b3769207347a81e64b26b6a2b657f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf51840952b701606fa6aa5e076b4e27fb8d9ee8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf51840952b701606fa6aa5e076b4e27fb8d9ee8", "html_url": "https://github.com/rust-lang/rust/commit/bf51840952b701606fa6aa5e076b4e27fb8d9ee8"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "cdc7e3656d4dd7606a20a10753f3ddf6eeac00db", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4e4e374e76b3769207347a81e64b26b6a2b657f/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e4e374e76b3769207347a81e64b26b6a2b657f/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=d4e4e374e76b3769207347a81e64b26b6a2b657f", "patch": "@@ -3666,8 +3666,14 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         closure_def_id: DefId,\n         substs: ty::ClosureSubsts<'tcx>,\n     ) -> ty::PolyTraitRef<'tcx> {\n+        debug!(\n+            \"closure_trait_ref_unnormalized(obligation={:?}, closure_def_id={:?}, substs={:?})\",\n+            obligation, closure_def_id, substs,\n+        );\n         let closure_type = self.infcx.closure_sig(closure_def_id, substs);\n \n+        debug!(\"closure_trait_ref_unnormalized: closure_type = {:?}\", closure_type);\n+\n         // (1) Feels icky to skip the binder here, but OTOH we know\n         // that the self-type is an unboxed closure type and hence is\n         // in fact unparameterized (or at least does not reference any"}, {"sha": "fb7c237a536bdd70cb1be8fae07dd5a82f67d452", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d4e4e374e76b3769207347a81e64b26b6a2b657f/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4e4e374e76b3769207347a81e64b26b6a2b657f/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=d4e4e374e76b3769207347a81e64b26b6a2b657f", "patch": "@@ -13,10 +13,12 @@\n use super::{check_fn, Expectation, FnCtxt, GeneratorTypes};\n \n use astconv::AstConv;\n+use middle::region;\n use rustc::hir::def_id::DefId;\n use rustc::infer::{InferOk, InferResult};\n use rustc::infer::LateBoundRegionConversionTime;\n use rustc::infer::type_variable::TypeVariableOrigin;\n+use rustc::traits::Obligation;\n use rustc::traits::error_reporting::ArgKind;\n use rustc::ty::{self, ToPolyTraitRef, Ty, GenericParamDefKind};\n use rustc::ty::fold::TypeFoldable;\n@@ -479,7 +481,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // Along the way, it also writes out entries for types that the user\n         // wrote into our tables, which are then later used by the privacy\n         // check.\n-        match self.check_supplied_sig_against_expectation(expr_def_id, decl, &closure_sigs) {\n+        match self.check_supplied_sig_against_expectation(expr_def_id, decl, body, &closure_sigs) {\n             Ok(infer_ok) => self.register_infer_ok_obligations(infer_ok),\n             Err(_) => return self.sig_of_closure_no_expectation(expr_def_id, decl, body),\n         }\n@@ -523,6 +525,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         &self,\n         expr_def_id: DefId,\n         decl: &hir::FnDecl,\n+        body: &hir::Body,\n         expected_sigs: &ClosureSignatures<'tcx>,\n     ) -> InferResult<'tcx, ()> {\n         // Get the signature S that the user gave.\n@@ -575,6 +578,31 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 } = self.at(cause, self.param_env)\n                     .eq(*expected_ty, supplied_ty)?;\n                 all_obligations.extend(obligations);\n+\n+                // Also, require that the supplied type must outlive\n+                // the closure body.\n+                let closure_body_region = self.tcx.mk_region(\n+                    ty::ReScope(\n+                        region::Scope {\n+                            id: body.value.hir_id.local_id,\n+                            data: region::ScopeData::Node,\n+                        },\n+                    ),\n+                );\n+                all_obligations.push(\n+                    Obligation::new(\n+                        cause.clone(),\n+                        self.param_env,\n+                        ty::Predicate::TypeOutlives(\n+                            ty::Binder::dummy(\n+                                ty::OutlivesPredicate(\n+                                    supplied_ty,\n+                                    closure_body_region,\n+                                ),\n+                            ),\n+                        ),\n+                    ),\n+                );\n             }\n \n             let (supplied_output_ty, _) = self.infcx.replace_late_bound_regions_with_fresh_var("}]}