{"sha": "d9b9f00109aefcaf565c9da3c6fdf9e446f4876c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5YjlmMDAxMDlhZWZjYWY1NjVjOWRhM2M2ZmRmOWU0NDZmNDg3NmM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-26T21:16:28Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-14T22:40:02Z"}, "message": "Infer opaque type regions in borrow checking\n\nWe want type checking for function bodies to ignore/erase regions. As\nsuch, we need to infer the regions in opaque types in borrow check\ninstead.", "tree": {"sha": "d49a7dc86e527252b1bdca172585c148a39340ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d49a7dc86e527252b1bdca172585c148a39340ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9b9f00109aefcaf565c9da3c6fdf9e446f4876c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9b9f00109aefcaf565c9da3c6fdf9e446f4876c", "html_url": "https://github.com/rust-lang/rust/commit/d9b9f00109aefcaf565c9da3c6fdf9e446f4876c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9b9f00109aefcaf565c9da3c6fdf9e446f4876c/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75ac0cca3678d5d309c737f1bd8ef237628a278b", "url": "https://api.github.com/repos/rust-lang/rust/commits/75ac0cca3678d5d309c737f1bd8ef237628a278b", "html_url": "https://github.com/rust-lang/rust/commit/75ac0cca3678d5d309c737f1bd8ef237628a278b"}], "stats": {"total": 86, "additions": 83, "deletions": 3}, "files": [{"sha": "e4e5fe35d7f92ec38558267d5941f9bbf875ea4c", "filename": "src/librustc_mir/borrow_check/nll.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d9b9f00109aefcaf565c9da3c6fdf9e446f4876c/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b9f00109aefcaf565c9da3c6fdf9e446f4876c/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll.rs?ref=d9b9f00109aefcaf565c9da3c6fdf9e446f4876c", "patch": "@@ -282,9 +282,11 @@ pub(in crate::borrow_check) fn compute_regions<'cx, 'tcx>(\n     let (closure_region_requirements, nll_errors) =\n         regioncx.solve(infcx, &body, def_id, polonius_output.clone());\n \n+    let remapped_opaque_tys = regioncx.infer_opaque_types(&infcx, opaque_type_values, body.span);\n+\n     NllOutput {\n         regioncx,\n-        opaque_type_values,\n+        opaque_type_values: remapped_opaque_tys,\n         polonius_output,\n         opt_closure_req: closure_region_requirements,\n         nll_errors,"}, {"sha": "4a2f398c6d5087b54732b93a3e0a40c16f1a3b89", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d9b9f00109aefcaf565c9da3c6fdf9e446f4876c/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b9f00109aefcaf565c9da3c6fdf9e446f4876c/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=d9b9f00109aefcaf565c9da3c6fdf9e446f4876c", "patch": "@@ -36,6 +36,7 @@ use crate::borrow_check::{\n \n mod dump_mir;\n mod graphviz;\n+mod opaque_types;\n \n pub mod values;\n "}, {"sha": "e16a2c838ebe9ad4e86ce696b61ae8c3d7ba2ed3", "filename": "src/librustc_mir/borrow_check/region_infer/opaque_types.rs", "status": "added", "additions": 72, "deletions": 0, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/d9b9f00109aefcaf565c9da3c6fdf9e446f4876c/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b9f00109aefcaf565c9da3c6fdf9e446f4876c/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fopaque_types.rs?ref=d9b9f00109aefcaf565c9da3c6fdf9e446f4876c", "patch": "@@ -0,0 +1,72 @@\n+use rustc::hir::def_id::DefId;\n+use rustc::infer::InferCtxt;\n+use rustc::ty;\n+use rustc_data_structures::fx::FxHashMap;\n+use rustc_span::Span;\n+\n+use super::RegionInferenceContext;\n+\n+impl<'tcx> RegionInferenceContext<'tcx> {\n+    /// Resolve any opaque types that were encountered while borrow checking\n+    /// this item. This is then used to get the type in the `type_of` query.\n+    pub(in crate::borrow_check) fn infer_opaque_types(\n+        &self,\n+        infcx: &InferCtxt<'_, 'tcx>,\n+        opaque_ty_decls: FxHashMap<DefId, ty::ResolvedOpaqueTy<'tcx>>,\n+        span: Span,\n+    ) -> FxHashMap<DefId, ty::ResolvedOpaqueTy<'tcx>> {\n+        opaque_ty_decls\n+            .into_iter()\n+            .map(|(opaque_def_id, ty::ResolvedOpaqueTy { concrete_type, substs })| {\n+                debug!(\n+                    \"infer_opaque_types(concrete_type = {:?}, substs = {:?})\",\n+                    concrete_type, substs\n+                );\n+\n+                // Map back to \"concrete\" regions so that errors in\n+                // `infer_opaque_definition_from_instantiation` can show\n+                // sensible region names.\n+                let universal_concrete_type =\n+                    infcx.tcx.fold_regions(&concrete_type, &mut false, |region, _| match region {\n+                        &ty::ReVar(vid) => {\n+                            let universal_bound = self.universal_upper_bound(vid);\n+                            self.definitions[universal_bound]\n+                                .external_name\n+                                .filter(|_| self.eval_equal(universal_bound, vid))\n+                                .unwrap_or(infcx.tcx.lifetimes.re_empty)\n+                        }\n+                        concrete => concrete,\n+                    });\n+                let universal_substs =\n+                    infcx.tcx.fold_regions(&substs, &mut false, |region, _| match region {\n+                        ty::ReVar(vid) => {\n+                            self.definitions[*vid].external_name.unwrap_or_else(|| {\n+                                infcx.tcx.sess.delay_span_bug(\n+                                    span,\n+                                    \"opaque type with non-universal region substs\",\n+                                );\n+                                infcx.tcx.lifetimes.re_static\n+                            })\n+                        }\n+                        concrete => concrete,\n+                    });\n+\n+                debug!(\n+                    \"infer_opaque_types(universal_concrete_type = {:?}, universal_substs = {:?})\",\n+                    universal_concrete_type, universal_substs\n+                );\n+\n+                let remapped_type = infcx.infer_opaque_definition_from_instantiation(\n+                    opaque_def_id,\n+                    universal_substs,\n+                    universal_concrete_type,\n+                    span,\n+                );\n+                (\n+                    opaque_def_id,\n+                    ty::ResolvedOpaqueTy { concrete_type: remapped_type, substs: universal_substs },\n+                )\n+            })\n+            .collect()\n+    }\n+}"}, {"sha": "5c6f3a0ffa9754c621637fa5611f8a45c49efa3a", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d9b9f00109aefcaf565c9da3c6fdf9e446f4876c/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9b9f00109aefcaf565c9da3c6fdf9e446f4876c/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=d9b9f00109aefcaf565c9da3c6fdf9e446f4876c", "patch": "@@ -1267,8 +1267,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                                     .at(&ObligationCause::dummy(), param_env)\n                                     .eq(opaque_decl.concrete_ty, renumbered_opaque_defn_ty)?,\n                             );\n-                            opaque_type_values\n-                                .push((opaque_def_id, ty::ResolvedOpaqueTy { ..*opaque_defn_ty }));\n+                            opaque_type_values.push((\n+                                opaque_def_id,\n+                                ty::ResolvedOpaqueTy {\n+                                    concrete_type: renumbered_opaque_defn_ty,\n+                                    substs: opaque_decl.substs,\n+                                },\n+                            ));\n                         } else {\n                             // We're using an opaque `impl Trait` type without\n                             // 'revealing' it. For example, code like this:"}]}