{"sha": "65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "node_id": "C_kwDOAAsO6NoAKDY1YmQyYTZhNzNkNmE3NGZiMTI2NmExZDk2YjIzZGU4ODEwYTVmYjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T13:58:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-20T13:58:08Z"}, "message": "Auto merge of #105951 - matthiaskrgr:rollup-aqxz888, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #105835 (Refactor post borrowck cleanup passes)\n - #105930 (Disable `NormalizeArrayLen`)\n - #105938 (Update coerce_unsized tracking issue from #27732 to #18598)\n - #105939 (Improve description of struct-fields GUI test)\n - #105943 (Add regression test for #102206)\n - #105944 (Add regression test for #80816)\n - #105945 (Add regression test for #57404)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "6d8890ea02b4e081f670c45d95809c568a502875", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d8890ea02b4e081f670c45d95809c568a502875"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "html_url": "https://github.com/rust-lang/rust/commit/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a746f4ac3a489efb724cde813607f3b96c2df7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a746f4ac3a489efb724cde813607f3b96c2df7b", "html_url": "https://github.com/rust-lang/rust/commit/8a746f4ac3a489efb724cde813607f3b96c2df7b"}, {"sha": "8db5dd49834d197de3db7d0a201df5bc493833cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8db5dd49834d197de3db7d0a201df5bc493833cb", "html_url": "https://github.com/rust-lang/rust/commit/8db5dd49834d197de3db7d0a201df5bc493833cb"}], "stats": {"total": 331, "additions": 207, "deletions": 124}, "files": [{"sha": "d435d3ee69b76a94eda4fe73a4ff40d60eb8aa0d", "filename": "compiler/rustc_mir_transform/src/cleanup_post_borrowck.rs", "status": "modified", "additions": 27, "deletions": 38, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcleanup_post_borrowck.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -1,59 +1,48 @@\n-//! This module provides a pass to replacing the following statements with\n-//! [`Nop`]s\n+//! This module provides a pass that removes parts of MIR that are no longer relevant after\n+//! analysis phase and borrowck. In particular, it removes false edges, user type annotations and\n+//! replaces following statements with [`Nop`]s:\n //!\n //!   - [`AscribeUserType`]\n //!   - [`FakeRead`]\n //!   - [`Assign`] statements with a [`Shallow`] borrow\n //!\n-//! The `CleanFakeReadsAndBorrows` \"pass\" is actually implemented as two\n-//! traversals (aka visits) of the input MIR. The first traversal,\n-//! `DeleteAndRecordFakeReads`, deletes the fake reads and finds the\n-//! temporaries read by [`ForMatchGuard`] reads, and `DeleteFakeBorrows`\n-//! deletes the initialization of those temporaries.\n-//!\n //! [`AscribeUserType`]: rustc_middle::mir::StatementKind::AscribeUserType\n-//! [`Shallow`]: rustc_middle::mir::BorrowKind::Shallow\n-//! [`FakeRead`]: rustc_middle::mir::StatementKind::FakeRead\n //! [`Assign`]: rustc_middle::mir::StatementKind::Assign\n-//! [`ForMatchGuard`]: rustc_middle::mir::FakeReadCause::ForMatchGuard\n+//! [`FakeRead`]: rustc_middle::mir::StatementKind::FakeRead\n //! [`Nop`]: rustc_middle::mir::StatementKind::Nop\n+//! [`Shallow`]: rustc_middle::mir::BorrowKind::Shallow\n \n use crate::MirPass;\n-use rustc_middle::mir::visit::MutVisitor;\n-use rustc_middle::mir::{Body, BorrowKind, Location, Rvalue};\n-use rustc_middle::mir::{Statement, StatementKind};\n+use rustc_middle::mir::{Body, BorrowKind, Rvalue, StatementKind, TerminatorKind};\n use rustc_middle::ty::TyCtxt;\n \n-pub struct CleanupNonCodegenStatements;\n+pub struct CleanupPostBorrowck;\n \n-pub struct DeleteNonCodegenStatements<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-}\n+impl<'tcx> MirPass<'tcx> for CleanupPostBorrowck {\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        for basic_block in body.basic_blocks.as_mut() {\n+            for statement in basic_block.statements.iter_mut() {\n+                match statement.kind {\n+                    StatementKind::AscribeUserType(..)\n+                    | StatementKind::Assign(box (_, Rvalue::Ref(_, BorrowKind::Shallow, _)))\n+                    | StatementKind::FakeRead(..) => statement.make_nop(),\n+                    _ => (),\n+                }\n+            }\n+            let terminator = basic_block.terminator_mut();\n+            match terminator.kind {\n+                TerminatorKind::FalseEdge { real_target, .. }\n+                | TerminatorKind::FalseUnwind { real_target, .. } => {\n+                    terminator.kind = TerminatorKind::Goto { target: real_target };\n+                }\n+                _ => {}\n+            }\n+        }\n \n-impl<'tcx> MirPass<'tcx> for CleanupNonCodegenStatements {\n-    fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let mut delete = DeleteNonCodegenStatements { tcx };\n-        delete.visit_body_preserves_cfg(body);\n         body.user_type_annotations.raw.clear();\n \n         for decl in &mut body.local_decls {\n             decl.user_ty = None;\n         }\n     }\n }\n-\n-impl<'tcx> MutVisitor<'tcx> for DeleteNonCodegenStatements<'tcx> {\n-    fn tcx(&self) -> TyCtxt<'tcx> {\n-        self.tcx\n-    }\n-\n-    fn visit_statement(&mut self, statement: &mut Statement<'tcx>, location: Location) {\n-        match statement.kind {\n-            StatementKind::AscribeUserType(..)\n-            | StatementKind::Assign(box (_, Rvalue::Ref(_, BorrowKind::Shallow, _)))\n-            | StatementKind::FakeRead(..) => statement.make_nop(),\n-            _ => (),\n-        }\n-        self.super_statement(statement, location);\n-    }\n-}"}, {"sha": "aba5a8580f19485b78da4a3b034659ef63b1fefc", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -77,8 +77,6 @@ mod match_branches;\n mod multiple_return_terminators;\n mod normalize_array_len;\n mod nrvo;\n-// This pass is public to allow external drivers to perform MIR cleanup\n-pub mod remove_false_edges;\n mod remove_noop_landing_pads;\n mod remove_storage_markers;\n mod remove_uninit_drops;\n@@ -494,10 +492,9 @@ fn run_analysis_to_runtime_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>\n /// After this series of passes, no lifetime analysis based on borrowing can be done.\n fn run_analysis_cleanup_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n     let passes: &[&dyn MirPass<'tcx>] = &[\n-        &remove_false_edges::RemoveFalseEdges,\n+        &cleanup_post_borrowck::CleanupPostBorrowck,\n         &simplify_branches::SimplifyConstCondition::new(\"initial\"),\n         &remove_noop_landing_pads::RemoveNoopLandingPads,\n-        &cleanup_post_borrowck::CleanupNonCodegenStatements,\n         &simplify::SimplifyCfg::new(\"early-opt\"),\n         &deref_separator::Derefer,\n     ];"}, {"sha": "1708b287e56f25bca285136fca3a92649a0bafd6", "filename": "compiler/rustc_mir_transform/src/normalize_array_len.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fnormalize_array_len.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -16,7 +16,8 @@ pub struct NormalizeArrayLen;\n \n impl<'tcx> MirPass<'tcx> for NormalizeArrayLen {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n-        sess.mir_opt_level() >= 4\n+        // See #105929\n+        sess.mir_opt_level() >= 4 && sess.opts.unstable_opts.unsound_mir_opts\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {"}, {"sha": "71f5ccf7e2465330252f0f48a69ee033f109c86e", "filename": "compiler/rustc_mir_transform/src/remove_false_edges.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8a746f4ac3a489efb724cde813607f3b96c2df7b/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a746f4ac3a489efb724cde813607f3b96c2df7b/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_false_edges.rs?ref=8a746f4ac3a489efb724cde813607f3b96c2df7b", "patch": "@@ -1,29 +0,0 @@\n-use rustc_middle::mir::{Body, TerminatorKind};\n-use rustc_middle::ty::TyCtxt;\n-\n-use crate::MirPass;\n-\n-/// Removes `FalseEdge` and `FalseUnwind` terminators from the MIR.\n-///\n-/// These are only needed for borrow checking, and can be removed afterwards.\n-///\n-/// FIXME: This should probably have its own MIR phase.\n-pub struct RemoveFalseEdges;\n-\n-impl<'tcx> MirPass<'tcx> for RemoveFalseEdges {\n-    fn run_pass(&self, _: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        for block in body.basic_blocks_mut() {\n-            let terminator = block.terminator_mut();\n-            terminator.kind = match terminator.kind {\n-                TerminatorKind::FalseEdge { real_target, .. } => {\n-                    TerminatorKind::Goto { target: real_target }\n-                }\n-                TerminatorKind::FalseUnwind { real_target, .. } => {\n-                    TerminatorKind::Goto { target: real_target }\n-                }\n-\n-                _ => continue,\n-            }\n-        }\n-    }\n-}"}, {"sha": "b154688fb087b94626f87e0a1f7af57d3f507ebb", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -2033,7 +2033,7 @@ impl<Args: Tuple, F: Fn<Args> + ?Sized, A: Allocator> Fn<Args> for Box<F, A> {\n     }\n }\n \n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized, A: Allocator> CoerceUnsized<Box<U, A>> for Box<T, A> {}\n \n #[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]"}, {"sha": "80a5913daa6e032720e832141d4105c6d8311106", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -336,7 +336,7 @@ impl<T: RefUnwindSafe + ?Sized> UnwindSafe for Rc<T> {}\n #[stable(feature = \"rc_ref_unwind_safe\", since = \"1.58.0\")]\n impl<T: RefUnwindSafe + ?Sized> RefUnwindSafe for Rc<T> {}\n \n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Rc<U>> for Rc<T> {}\n \n #[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n@@ -2190,7 +2190,7 @@ impl<T: ?Sized> !marker::Send for Weak<T> {}\n #[stable(feature = \"rc_weak\", since = \"1.4.0\")]\n impl<T: ?Sized> !marker::Sync for Weak<T> {}\n \n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n \n #[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]"}, {"sha": "ddcd863aa3e338352b8d0a5ff9956e42cdfb0b10", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -254,7 +254,7 @@ unsafe impl<T: ?Sized + Sync + Send> Sync for Arc<T> {}\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T: RefUnwindSafe + ?Sized> UnwindSafe for Arc<T> {}\n \n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Arc<U>> for Arc<T> {}\n \n #[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n@@ -306,7 +306,7 @@ unsafe impl<T: ?Sized + Sync + Send> Send for Weak<T> {}\n #[stable(feature = \"arc_weak\", since = \"1.4.0\")]\n unsafe impl<T: ?Sized + Sync + Send> Sync for Weak<T> {}\n \n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Weak<U>> for Weak<T> {}\n #[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Weak<U>> for Weak<T> {}"}, {"sha": "b4e173ce03d8a6b5ca911005712ab8daf4d217da", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -568,7 +568,7 @@ impl<T: Default> Cell<T> {\n     }\n }\n \n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<Cell<U>> for Cell<T> {}\n \n impl<T> Cell<[T]> {\n@@ -1266,7 +1266,7 @@ impl<T> const From<T> for RefCell<T> {\n     }\n }\n \n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<RefCell<U>> for RefCell<T> {}\n \n struct BorrowRef<'b> {\n@@ -1492,7 +1492,7 @@ impl<'b, T: ?Sized> Ref<'b, T> {\n     }\n }\n \n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<Ref<'b, U>> for Ref<'b, T> {}\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n@@ -1738,7 +1738,7 @@ impl<T: ?Sized> DerefMut for RefMut<'_, T> {\n     }\n }\n \n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<'b, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<RefMut<'b, U>> for RefMut<'b, T> {}\n \n #[stable(feature = \"std_guard_impls\", since = \"1.20.0\")]\n@@ -2074,7 +2074,7 @@ impl<T> const From<T> for UnsafeCell<T> {\n     }\n }\n \n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<UnsafeCell<U>> for UnsafeCell<T> {}\n \n /// [`UnsafeCell`], but [`Sync`].\n@@ -2164,7 +2164,7 @@ impl<T> const From<T> for SyncUnsafeCell<T> {\n     }\n }\n \n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n //#[unstable(feature = \"sync_unsafe_cell\", issue = \"95439\")]\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<SyncUnsafeCell<U>> for SyncUnsafeCell<T> {}\n "}, {"sha": "4b85c1112b94096b8132b7607fc4c05368ff7196", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -126,7 +126,7 @@ pub trait Sized {\n /// [`Rc`]: ../../std/rc/struct.Rc.html\n /// [RFC982]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\n /// [nomicon-coerce]: ../../nomicon/coercions.html\n-#[unstable(feature = \"unsize\", issue = \"27732\")]\n+#[unstable(feature = \"unsize\", issue = \"18598\")]\n #[lang = \"unsize\"]\n #[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait Unsize<T: ?Sized> {"}, {"sha": "97d9b750d92f9f3abc04cc742e93031101306092", "filename": "library/core/src/ops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Fcore%2Fsrc%2Fops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fmod.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -201,7 +201,7 @@ pub(crate) use self::try_trait::{ChangeOutputType, NeverShortCircuit};\n #[unstable(feature = \"generator_trait\", issue = \"43122\")]\n pub use self::generator::{Generator, GeneratorState};\n \n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n pub use self::unsize::CoerceUnsized;\n \n #[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]"}, {"sha": "b51f12580ea4f6e7cf36a49ad27f4f307560095e", "filename": "library/core/src/ops/unsize.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Fcore%2Fsrc%2Fops%2Funsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Fcore%2Fsrc%2Fops%2Funsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Funsize.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -31,41 +31,41 @@ use crate::marker::Unsize;\n /// [dst-coerce]: https://github.com/rust-lang/rfcs/blob/master/text/0982-dst-coercion.md\n /// [unsize]: crate::marker::Unsize\n /// [nomicon-coerce]: ../../nomicon/coercions.html\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n #[lang = \"coerce_unsized\"]\n pub trait CoerceUnsized<T: ?Sized> {\n     // Empty.\n }\n \n // &mut T -> &mut U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a mut U> for &'a mut T {}\n // &mut T -> &U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b mut T {}\n // &mut T -> *mut U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for &'a mut T {}\n // &mut T -> *const U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for &'a mut T {}\n \n // &T -> &U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<'a, 'b: 'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<&'a U> for &'b T {}\n // &T -> *const U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for &'a T {}\n \n // *mut T -> *mut U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n // *mut T -> *const U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *mut T {}\n \n // *const T -> *const U\n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*const U> for *const T {}\n \n /// `DispatchFromDyn` is used in the implementation of object safety checks (specifically allowing"}, {"sha": "af79d4bbd836c027e8037ed1808afd6e762b07d6", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -712,7 +712,7 @@ impl<T: ?Sized> const Clone for NonNull<T> {\n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<T: ?Sized> Copy for NonNull<T> {}\n \n-#[unstable(feature = \"coerce_unsized\", issue = \"27732\")]\n+#[unstable(feature = \"coerce_unsized\", issue = \"18598\")]\n impl<T: ?Sized, U: ?Sized> CoerceUnsized<NonNull<U>> for NonNull<T> where T: Unsize<U> {}\n \n #[unstable(feature = \"dispatch_from_dyn\", issue = \"none\")]"}, {"sha": "44445731e72090a365113c15b0fac97251217604", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -12,7 +12,6 @@\n       let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n@@ -25,16 +24,14 @@\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n           StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n -         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n +         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       }"}, {"sha": "44445731e72090a365113c15b0fac97251217604", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -12,7 +12,6 @@\n       let mut _7: usize;                   // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       let mut _8: bool;                    // in scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       let mut _9: &[u32; 3];               // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-      let mut _10: &[u32; 3];              // in scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n@@ -25,16 +24,14 @@\n                                            // + literal: Const { ty: &[u32; 3], val: Unevaluated(main, [], Some(promoted[0])) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n-          _10 = _3;                        // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           _2 = move _3 as &[u32] (Pointer(Unsize)); // scope 0 at $DIR/slice_len.rs:+1:6: +1:19\n           StorageDead(_3);                 // scope 0 at $DIR/slice_len.rs:+1:18: +1:19\n           StorageLive(_6);                 // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n           _6 = const 1_usize;              // scope 0 at $DIR/slice_len.rs:+1:31: +1:32\n-          _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n-          StorageDead(_10);                // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n+-         _7 = Len((*_2));                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n -         _8 = Lt(_6, _7);                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n -         assert(move _8, \"index out of bounds: the length is {} but the index is {}\", move _7, _6) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n++         _7 = const 3_usize;              // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n +         _8 = const true;                 // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n +         assert(const true, \"index out of bounds: the length is {} but the index is {}\", const 3_usize, const 1_usize) -> bb1; // scope 0 at $DIR/slice_len.rs:+1:5: +1:33\n       }"}, {"sha": "e97b46f6ecc82b19b29ccddcdd162afb07801192", "filename": "src/test/mir-opt/issue_76432.test.SimplifyComparisonIntegral.diff", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_76432.test.SimplifyComparisonIntegral.diff?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -22,7 +22,6 @@\n       let mut _20: *const T;               // in scope 0 at $DIR/issue_76432.rs:+3:70: +3:84\n       let mut _21: *const T;               // in scope 0 at $DIR/issue_76432.rs:+3:70: +3:84\n       let mut _22: !;                      // in scope 0 at $SRC_DIR/core/src/panic.rs:LL:COL\n-      let mut _23: &[T; 3];                // in scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n       scope 1 {\n           debug v => _2;                   // in scope 1 at $DIR/issue_76432.rs:+1:9: +1:10\n           let _13: &T;                     // in scope 1 at $DIR/issue_76432.rs:+3:10: +3:16\n@@ -52,17 +51,16 @@\n           StorageDead(_6);                 // scope 0 at $DIR/issue_76432.rs:+1:28: +1:29\n           _4 = &_5;                        // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n           _3 = _4;                         // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n-          StorageLive(_23);                // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n-          _23 = _3;                        // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n           _2 = move _3 as &[T] (Pointer(Unsize)); // scope 0 at $DIR/issue_76432.rs:+1:19: +1:29\n           StorageDead(_3);                 // scope 0 at $DIR/issue_76432.rs:+1:28: +1:29\n           StorageDead(_4);                 // scope 0 at $DIR/issue_76432.rs:+1:29: +1:30\n           StorageLive(_9);                 // scope 1 at $DIR/issue_76432.rs:+2:5: +5:6\n-          _10 = const 3_usize;             // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n-          StorageDead(_23);                // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n+          _10 = Len((*_2));                // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n           _11 = const 3_usize;             // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n-          _12 = const true;                // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n-          goto -> bb2;                     // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n+-         _12 = Eq(move _10, const 3_usize); // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n+-         switchInt(move _12) -> [0: bb1, otherwise: bb2]; // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n++         nop;                             // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n++         switchInt(move _10) -> [3: bb2, otherwise: bb1]; // scope 1 at $DIR/issue_76432.rs:+3:9: +3:33\n       }\n   \n       bb1: {"}, {"sha": "d8e4e521ee6820b91fb3dc9ee41f8f5310bebb71", "filename": "src/test/mir-opt/lower_array_len_e2e.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_array_len_e2e.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Z mir-opt-level=4\n+// compile-flags: -Z mir-opt-level=4 -Zunsound-mir-opts\n \n // EMIT_MIR lower_array_len_e2e.array_bound.PreCodegen.after.mir\n pub fn array_bound<const N: usize>(index: usize, slice: &[u8; N]) -> u8 {"}, {"sha": "0b3da98a5a19255c2ba8979142c3df20c9f53468", "filename": "src/test/mir-opt/remove_fake_borrows.match_guard.CleanupPostBorrowck.diff", "status": "renamed", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupPostBorrowck.diff", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupPostBorrowck.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.match_guard.CleanupPostBorrowck.diff?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `match_guard` before CleanupNonCodegenStatements\n-+ // MIR for `match_guard` after CleanupNonCodegenStatements\n+- // MIR for `match_guard` before CleanupPostBorrowck\n++ // MIR for `match_guard` after CleanupPostBorrowck\n   \n   fn match_guard(_1: Option<&&i32>, _2: bool) -> i32 {\n       debug x => _1;                       // in scope 0 at $DIR/remove_fake_borrows.rs:+0:16: +0:17\n@@ -29,7 +29,8 @@\n       }\n   \n       bb3: {\n-          goto -> bb4;                     // scope 0 at $DIR/remove_fake_borrows.rs:+2:9: +2:16\n+-         falseEdge -> [real: bb4, imaginary: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:+2:9: +2:16\n++         goto -> bb4;                     // scope 0 at $DIR/remove_fake_borrows.rs:+2:9: +2:16\n       }\n   \n       bb4: {\n@@ -62,15 +63,12 @@\n   \n       bb6: {\n           StorageDead(_8);                 // scope 0 at $DIR/remove_fake_borrows.rs:+2:20: +2:21\n-          goto -> bb1;                     // scope 0 at $DIR/remove_fake_borrows.rs:+2:20: +2:21\n+-         falseEdge -> [real: bb1, imaginary: bb1]; // scope 0 at $DIR/remove_fake_borrows.rs:+2:20: +2:21\n++         goto -> bb1;                     // scope 0 at $DIR/remove_fake_borrows.rs:+2:20: +2:21\n       }\n   \n       bb7: {\n           return;                          // scope 0 at $DIR/remove_fake_borrows.rs:+5:2: +5:2\n       }\n-  \n-      bb8 (cleanup): {\n-          resume;                          // scope 0 at $DIR/remove_fake_borrows.rs:+0:1: +5:2\n-      }\n   }\n   ", "previous_filename": "src/test/mir-opt/remove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff"}, {"sha": "d26c6f5d7e51bff1a9b462e1bc392892cfbe92df", "filename": "src/test/mir-opt/remove_fake_borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_fake_borrows.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -2,7 +2,7 @@\n \n // ignore-wasm32-bare compiled with panic=abort by default\n \n-// EMIT_MIR remove_fake_borrows.match_guard.CleanupNonCodegenStatements.diff\n+// EMIT_MIR remove_fake_borrows.match_guard.CleanupPostBorrowck.diff\n fn match_guard(x: Option<&&i32>, c: bool) -> i32 {\n     match x {\n         Some(0) if c => 0,"}, {"sha": "fa3e16cb81ef8240675de6416be3e2007131a935", "filename": "src/test/rustdoc-gui/struct-fields.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Frustdoc-gui%2Fstruct-fields.goml", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Frustdoc-gui%2Fstruct-fields.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fstruct-fields.goml?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -1,5 +1,5 @@\n+// This test ensures that each field is on its own line (In other words, they have display: block).\n goto: \"file://\" + |DOC_PATH| + \"/test_docs/struct.StructWithPublicUndocumentedFields.html\"\n \n-// Both fields must be on their own line. In other words, they have display: block.\n store-property: (first_top, \"//*[@id='structfield.first']\", \"offsetTop\")\n assert-property-false: (\"//*[@id='structfield.second']\", { \"offsetTop\": |first_top| })"}, {"sha": "a3a2ebc58961b63a3af257da584607eef8c62199", "filename": "src/test/ui/async-await/issues/issue-102206.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-102206.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-102206.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-102206.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -0,0 +1,8 @@\n+// edition:2021\n+\n+async fn foo() {}\n+\n+fn main() {\n+    std::mem::size_of_val(foo());\n+    //~^ ERROR: mismatched types\n+}"}, {"sha": "2ab790ac761a04f7a7d0bf3fe521c55475a262ba", "filename": "src/test/ui/async-await/issues/issue-102206.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-102206.stderr?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -0,0 +1,23 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-102206.rs:6:27\n+   |\n+LL |     std::mem::size_of_val(foo());\n+   |     --------------------- ^^^^^\n+   |     |                     |\n+   |     |                     expected reference, found opaque type\n+   |     |                     help: consider borrowing here: `&foo()`\n+   |     arguments to this function are incorrect\n+   |\n+note: while checking the return type of the `async fn`\n+  --> $DIR/issue-102206.rs:3:16\n+   |\n+LL | async fn foo() {}\n+   |                ^ checked the `Output` of this `async fn`, found opaque type\n+   = note: expected reference `&_`\n+            found opaque type `impl Future<Output = ()>`\n+note: function defined here\n+  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "ead320a4fe42c66d688158928eb0ab46597bc7be", "filename": "src/test/ui/inference/issue-80816.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fui%2Finference%2Fissue-80816.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fui%2Finference%2Fissue-80816.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-80816.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -0,0 +1,54 @@\n+#![allow(unreachable_code)]\n+\n+use std::marker::PhantomData;\n+use std::ops::Deref;\n+use std::sync::Arc;\n+\n+pub struct Guard<T> {\n+    _phantom: PhantomData<T>,\n+}\n+impl<T> Deref for Guard<T> {\n+    type Target = T;\n+    fn deref(&self) -> &T {\n+        unimplemented!()\n+    }\n+}\n+\n+pub struct DirectDeref<T>(T);\n+impl<T> Deref for DirectDeref<Arc<T>> {\n+    type Target = T;\n+    fn deref(&self) -> &T {\n+        unimplemented!()\n+    }\n+}\n+\n+pub trait Access<T> {\n+    type Guard: Deref<Target = T>;\n+    fn load(&self) -> Self::Guard {\n+        unimplemented!()\n+    }\n+}\n+impl<T, A: Access<T>, P: Deref<Target = A>> Access<T> for P {\n+    //~^ NOTE: required for `Arc<ArcSwapAny<Arc<usize>>>` to implement `Access<_>`\n+    type Guard = A::Guard;\n+}\n+impl<T> Access<T> for ArcSwapAny<T> {\n+    //~^ NOTE: multiple `impl`s satisfying `ArcSwapAny<Arc<usize>>: Access<_>` found\n+    type Guard = Guard<T>;\n+}\n+impl<T> Access<T> for ArcSwapAny<Arc<T>> {\n+    type Guard = DirectDeref<Arc<T>>;\n+}\n+\n+pub struct ArcSwapAny<T> {\n+    _phantom_arc: PhantomData<T>,\n+}\n+\n+pub fn foo() {\n+    let s: Arc<ArcSwapAny<Arc<usize>>> = unimplemented!();\n+    let guard: Guard<Arc<usize>> = s.load();\n+    //~^ ERROR: type annotations needed\n+    //~| HELP: try using a fully qualified path to specify the expected types\n+}\n+\n+fn main() {}"}, {"sha": "bd833340df4ce7fbc5eddba88592c15bc603b7a5", "filename": "src/test/ui/inference/issue-80816.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fui%2Finference%2Fissue-80816.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fui%2Finference%2Fissue-80816.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fissue-80816.stderr?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -0,0 +1,27 @@\n+error[E0283]: type annotations needed\n+  --> $DIR/issue-80816.rs:49:38\n+   |\n+LL |     let guard: Guard<Arc<usize>> = s.load();\n+   |                                      ^^^^\n+   |\n+note: multiple `impl`s satisfying `ArcSwapAny<Arc<usize>>: Access<_>` found\n+  --> $DIR/issue-80816.rs:35:1\n+   |\n+LL | impl<T> Access<T> for ArcSwapAny<T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | impl<T> Access<T> for ArcSwapAny<Arc<T>> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required for `Arc<ArcSwapAny<Arc<usize>>>` to implement `Access<_>`\n+  --> $DIR/issue-80816.rs:31:45\n+   |\n+LL | impl<T, A: Access<T>, P: Deref<Target = A>> Access<T> for P {\n+   |                                             ^^^^^^^^^     ^\n+help: try using a fully qualified path to specify the expected types\n+   |\n+LL |     let guard: Guard<Arc<usize>> = <Arc<ArcSwapAny<Arc<usize>>> as Access<T>>::load(&s);\n+   |                                    ++++++++++++++++++++++++++++++++++++++++++++++++++ ~\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0283`."}, {"sha": "ecabca66a00cf7e37d845eaa189f359d979b2a16", "filename": "src/test/ui/typeck/issue-57404.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fui%2Ftypeck%2Fissue-57404.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fui%2Ftypeck%2Fissue-57404.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-57404.rs?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -0,0 +1,7 @@\n+#![feature(unboxed_closures)]\n+#![feature(fn_traits)]\n+\n+fn main() {\n+    let handlers: Option<Box<dyn for<'a> FnMut<&'a mut (), Output=()>>> = None;\n+    handlers.unwrap().as_mut().call_mut(&mut ()); //~ ERROR: `&mut ()` is not a tuple\n+}"}, {"sha": "5065ac32ad2b013e94adda0b90e7c6b52224a27b", "filename": "src/test/ui/typeck/issue-57404.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fui%2Ftypeck%2Fissue-57404.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2/src%2Ftest%2Fui%2Ftypeck%2Fissue-57404.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-57404.stderr?ref=65bd2a6a73d6a74fb1266a1d96b23de8810a5fb2", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: `&mut ()` is not a tuple\n+  --> $DIR/issue-57404.rs:6:41\n+   |\n+LL |     handlers.unwrap().as_mut().call_mut(&mut ());\n+   |                                -------- -^^^^^^\n+   |                                |        |\n+   |                                |        the trait `Tuple` is not implemented for `&mut ()`\n+   |                                |        help: consider removing the leading `&`-reference\n+   |                                required by a bound introduced by this call\n+   |\n+note: required by a bound in `call_mut`\n+  --> $SRC_DIR/core/src/ops/function.rs:LL:COL\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}