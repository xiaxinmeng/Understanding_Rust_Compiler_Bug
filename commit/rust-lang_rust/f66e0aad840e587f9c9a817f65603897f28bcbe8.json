{"sha": "f66e0aad840e587f9c9a817f65603897f28bcbe8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NmUwYWFkODQwZTU4N2Y5YzlhODE3ZjY1NjAzODk3ZjI4YmNiZTg=", "commit": {"author": {"name": "Enrico Schmitz", "email": "enrico@schmitz.link", "date": "2017-03-01T12:24:19Z"}, "committer": {"name": "Enrico Schmitz", "email": "es@mdtm.de", "date": "2017-03-01T12:24:19Z"}, "message": "Fix for rustc 1.17.0-nightly (be760566c 2017-02-28)", "tree": {"sha": "77b5d71a8f892321aecb045a423cf95f82f13b45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77b5d71a8f892321aecb045a423cf95f82f13b45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f66e0aad840e587f9c9a817f65603897f28bcbe8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f66e0aad840e587f9c9a817f65603897f28bcbe8", "html_url": "https://github.com/rust-lang/rust/commit/f66e0aad840e587f9c9a817f65603897f28bcbe8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f66e0aad840e587f9c9a817f65603897f28bcbe8/comments", "author": {"login": "ensch", "id": 180274, "node_id": "MDQ6VXNlcjE4MDI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/180274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ensch", "html_url": "https://github.com/ensch", "followers_url": "https://api.github.com/users/ensch/followers", "following_url": "https://api.github.com/users/ensch/following{/other_user}", "gists_url": "https://api.github.com/users/ensch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ensch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ensch/subscriptions", "organizations_url": "https://api.github.com/users/ensch/orgs", "repos_url": "https://api.github.com/users/ensch/repos", "events_url": "https://api.github.com/users/ensch/events{/privacy}", "received_events_url": "https://api.github.com/users/ensch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ensch", "id": 180274, "node_id": "MDQ6VXNlcjE4MDI3NA==", "avatar_url": "https://avatars.githubusercontent.com/u/180274?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ensch", "html_url": "https://github.com/ensch", "followers_url": "https://api.github.com/users/ensch/followers", "following_url": "https://api.github.com/users/ensch/following{/other_user}", "gists_url": "https://api.github.com/users/ensch/gists{/gist_id}", "starred_url": "https://api.github.com/users/ensch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ensch/subscriptions", "organizations_url": "https://api.github.com/users/ensch/orgs", "repos_url": "https://api.github.com/users/ensch/repos", "events_url": "https://api.github.com/users/ensch/events{/privacy}", "received_events_url": "https://api.github.com/users/ensch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a39b5f95b83efdb8202956b0f4514b6459046be5", "url": "https://api.github.com/repos/rust-lang/rust/commits/a39b5f95b83efdb8202956b0f4514b6459046be5", "html_url": "https://github.com/rust-lang/rust/commit/a39b5f95b83efdb8202956b0f4514b6459046be5"}], "stats": {"total": 112, "additions": 47, "deletions": 65}, "files": [{"sha": "f5902747d4f9e72c0993ef9073ea00d27188503b", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -1,7 +1,6 @@\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n-use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::ConstContext;\n use rustc_const_math::ConstInt;\n use rustc::hir;\n@@ -61,11 +60,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n             // Array with known size can be checked statically\n             let ty = cx.tables.expr_ty(array);\n             if let ty::TyArray(_, size) = ty.sty {\n-                let size = ConstInt::Infer(size as u128);\n+                let size = ConstInt::U128(size as u128);\n                 let constcx = ConstContext::with_tables(cx.tcx, cx.tables);\n \n                 // Index is a constant uint\n-                let const_index = constcx.eval(index, ExprTypeChecked);\n+                let const_index = constcx.eval(index);\n                 if let Ok(ConstVal::Integral(const_index)) = const_index {\n                     if size <= const_index {\n                         utils::span_lint(cx, OUT_OF_BOUNDS_INDEXING, e.span, \"const index is out of bounds\");\n@@ -77,10 +76,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ArrayIndexing {\n                 // Index is a constant range\n                 if let Some(range) = higher::range(index) {\n                     let start = range.start\n-                        .map(|start| constcx.eval(start, ExprTypeChecked))\n+                        .map(|start| constcx.eval(start))\n                         .map(|v| v.ok());\n                     let end = range.end\n-                        .map(|end| constcx.eval(end, ExprTypeChecked))\n+                        .map(|end| constcx.eval(end))\n                         .map(|v| v.ok());\n \n                     if let Some((start, end)) = to_const_range(&start, &end, range.limits, size) {\n@@ -117,13 +116,13 @@ fn to_const_range(\n     let start = match *start {\n         Some(Some(ConstVal::Integral(x))) => x,\n         Some(_) => return None,\n-        None => ConstInt::Infer(0),\n+        None => ConstInt::U8(0),\n     };\n \n     let end = match *end {\n         Some(Some(ConstVal::Integral(x))) => {\n             if limits == RangeLimits::Closed {\n-                (x + ConstInt::Infer(1)).expect(\"such a big array is not realistic\")\n+                (x + ConstInt::U8(1)).expect(\"such a big array is not realistic\")\n             } else {\n                 x\n             }"}, {"sha": "789de240d732943b168a5dfab6b9013b22078d23", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -237,6 +237,7 @@ fn check_ineffective_gt(cx: &LateContext, span: Span, m: u128, c: u128, op: &str\n }\n \n fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u128> {\n+    use rustc::ty::subst::Substs;\n     match lit.node {\n         ExprLit(ref lit_ptr) => {\n             if let LitKind::Int(value, _) = lit_ptr.node {\n@@ -248,7 +249,7 @@ fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u128> {\n         ExprPath(ref qpath) => {\n             let def = cx.tables.qpath_def(qpath, lit.id);\n             if let Def::Const(def_id) = def {\n-                lookup_const_by_id(cx.tcx, def_id, None).and_then(|(l, _tab, _ty)| fetch_int_literal(cx, l))\n+                lookup_const_by_id(cx.tcx, def_id, Substs::empty()).and_then(|(l, _ty)| fetch_int_literal(cx, l))\n             } else {\n                 None\n             }"}, {"sha": "f8e9cff80dfe742e3ba3785f40cb38ee6bfe790e", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -180,7 +180,7 @@ pub fn lit_to_constant(lit: &LitKind) -> Constant {\n         LitKind::Byte(b) => Constant::Int(ConstInt::U8(b)),\n         LitKind::ByteStr(ref s) => Constant::Binary(s.clone()),\n         LitKind::Char(c) => Constant::Char(c),\n-        LitKind::Int(value, LitIntType::Unsuffixed) => Constant::Int(ConstInt::Infer(value)),\n+        LitKind::Int(value, LitIntType::Unsuffixed) => Constant::Int(ConstInt::U128(value as u128)),\n         LitKind::Int(value, LitIntType::Unsigned(UintTy::U8)) => Constant::Int(ConstInt::U8(value as u8)),\n         LitKind::Int(value, LitIntType::Unsigned(UintTy::U16)) => Constant::Int(ConstInt::U16(value as u16)),\n         LitKind::Int(value, LitIntType::Unsigned(UintTy::U32)) => Constant::Int(ConstInt::U32(value as u32)),\n@@ -297,10 +297,10 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n             match def {\n                 Def::Const(def_id) |\n                 Def::AssociatedConst(def_id) => {\n-                    let substs = Some(lcx.tables\n+                    let substs = lcx.tables\n                         .node_id_item_substs(id)\n-                        .unwrap_or_else(|| lcx.tcx.intern_substs(&[])));\n-                    if let Some((const_expr, _tab, _ty)) = lookup_const_by_id(lcx.tcx, def_id, substs) {\n+                        .unwrap_or_else(|| lcx.tcx.intern_substs(&[]));\n+                    if let Some((const_expr, _ty)) = lookup_const_by_id(lcx.tcx, def_id, substs) {\n                         let ret = self.expr(const_expr);\n                         if ret.is_some() {\n                             self.needed_resolution = true;"}, {"sha": "33c27b53b835e8a905a6afa88875343a152891ea", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -136,7 +136,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CCHelper<'a, 'tcx> {\n                 let ty = self.cx.tables.node_id_to_type(callee.id);\n                 match ty.sty {\n                     ty::TyFnDef(_, _, ty) |\n-                    ty::TyFnPtr(ty) if ty.sig.skip_binder().output().sty == ty::TyNever => {\n+                    ty::TyFnPtr(ty) if ty.skip_binder().output().sty == ty::TyNever => {\n                         self.divergence += 1;\n                     },\n                     _ => (),"}, {"sha": "4032234ac5cb71607b5b273fed73eb66ccb7ab26", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnportableVariant {\n                 if let Some(body_id) = variant.disr_expr {\n                     use rustc_const_eval::*;\n                     let constcx = ConstContext::new(cx.tcx, body_id);\n-                    let bad = match constcx.eval(&cx.tcx.hir.body(body_id).value, EvalHint::ExprTypeChecked) {\n+                    let bad = match constcx.eval(&cx.tcx.hir.body(body_id).value) {\n                         Ok(ConstVal::Integral(Usize(Us64(i)))) => i as u32 as u64 != i,\n                         Ok(ConstVal::Integral(Isize(Is64(i)))) => i as i32 as i64 != i,\n                         _ => false,"}, {"sha": "8230fe7313033bb839e05eed1229b1743d5bb184", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -66,7 +66,7 @@ fn check_closure(cx: &LateContext, expr: &Expr) {\n                 // Is it an unsafe function? They don't implement the closure traits\n                 ty::TyFnDef(_, _, fn_ty) |\n                 ty::TyFnPtr(fn_ty) => {\n-                    if fn_ty.unsafety == Unsafety::Unsafe || fn_ty.sig.skip_binder().output().sty == ty::TyNever {\n+                    if fn_ty.skip_binder().unsafety == Unsafety::Unsafe || fn_ty.skip_binder().output().sty == ty::TyNever {\n                         return;\n                     }\n                 },"}, {"sha": "f07ec7de52b2b7fff971813dc0ace5c1799bdfdf", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -129,7 +129,7 @@ impl<'a, 'tcx> Visitor<'tcx> for DivergenceVisitor<'a, 'tcx> {\n                 match self.cx.tables.expr_ty(func).sty {\n                     ty::TyFnDef(_, _, fn_ty) |\n                     ty::TyFnPtr(fn_ty) => {\n-                        if let ty::TyNever = self.cx.tcx.erase_late_bound_regions(&fn_ty.sig).output().sty {\n+                        if let ty::TyNever = self.cx.tcx.erase_late_bound_regions(&fn_ty).output().sty {\n                             self.report_diverging_sub_expr(e);\n                         }\n                     },"}, {"sha": "58a0ba4c9e9833a1a4f6706154735f44719d4c2a", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -62,9 +62,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IdentityOp {\n fn check(cx: &LateContext, e: &Expr, m: i8, span: Span, arg: Span) {\n     if let Some(v @ Constant::Int(_)) = constant_simple(e) {\n         if match m {\n-            0 => v == Constant::Int(ConstInt::Infer(0)),\n-            -1 => v == Constant::Int(ConstInt::InferSigned(-1)),\n-            1 => v == Constant::Int(ConstInt::Infer(1)),\n+            0 => v == Constant::Int(ConstInt::U8(0)),\n+            -1 => v == Constant::Int(ConstInt::I8(-1)),\n+            1 => v == Constant::Int(ConstInt::U8(1)),\n             _ => unreachable!(),\n         } {\n             span_lint(cx,"}, {"sha": "03522cc02cd53b12260324e31b77df520291c181", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -186,7 +186,8 @@ fn has_is_empty(cx: &LateContext, expr: &Expr) -> bool {\n     fn is_is_empty(cx: &LateContext, item: &ty::AssociatedItem) -> bool {\n         if let ty::AssociatedKind::Method = item.kind {\n             if &*item.name.as_str() == \"is_empty\" {\n-                let ty = cx.tcx.item_type(item.def_id).fn_sig().skip_binder();\n+                let sig = cx.tcx.item_type(item.def_id).fn_sig();\n+                let ty = sig.skip_binder();\n                 ty.inputs().len() == 1\n             } else {\n                 false\n@@ -198,7 +199,7 @@ fn has_is_empty(cx: &LateContext, expr: &Expr) -> bool {\n \n     /// Check the inherent impl's items for an `is_empty(self)` method.\n     fn has_is_empty_impl(cx: &LateContext, id: DefId) -> bool {\n-        cx.tcx.inherent_impls.borrow().get(&id).map_or(false, |impls| {\n+        cx.tcx.maps.inherent_impls.borrow().get(&id).map_or(false, |impls| {\n             impls.iter().any(|imp| cx.tcx.associated_items(*imp).any(|item| is_is_empty(cx, &item)))\n         })\n     }"}, {"sha": "1571372cefbd9dccd076cdebb936f21c7ac08e4a", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -257,7 +257,7 @@ impl<'v, 't> RefVisitor<'v, 't> {\n                         }\n                     },\n                     Def::Trait(def_id) => {\n-                        let trait_def = self.cx.tcx.trait_defs.borrow()[&def_id];\n+                        let trait_def = self.cx.tcx.maps.trait_def.borrow()[&def_id];\n                         for _ in &self.cx.tcx.item_generics(trait_def.def_id).regions {\n                             self.record(&None);\n                         }"}, {"sha": "8c1f47a2187d4accfe2246a478ba9441216abefd", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -8,7 +8,6 @@ use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::middle::region::CodeExtent;\n use rustc::ty;\n-use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::ConstContext;\n use std::collections::HashMap;\n use syntax::ast;\n@@ -596,8 +595,8 @@ fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n     if let Some(higher::Range { start: Some(start), end: Some(end), limits }) = higher::range(arg) {\n         // ...and both sides are compile-time constant integers...\n         let constcx = ConstContext::with_tables(cx.tcx, cx.tables);\n-        if let Ok(start_idx) = constcx.eval(start, ExprTypeChecked) {\n-            if let Ok(end_idx) = constcx.eval(end, ExprTypeChecked) {\n+        if let Ok(start_idx) = constcx.eval(start) {\n+            if let Ok(end_idx) = constcx.eval(end) {\n                 // ...and the start index is greater than the end index,\n                 // this loop will never run. This is often confusing for developers\n                 // who think that this will iterate from the larger value to the"}, {"sha": "c4132c4881ab1a9d7ac9e31081f56ec7d3156516", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -2,7 +2,6 @@ use rustc::hir::*;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n-use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::ConstContext;\n use rustc_const_math::ConstInt;\n use std::cmp::Ordering;\n@@ -415,7 +414,7 @@ fn check_match_ref_pats(cx: &LateContext, ex: &Expr, arms: &[Arm], source: Match\n }\n \n /// Get all arms that are unbounded `PatRange`s.\n-fn all_ranges(cx: &LateContext, arms: &[Arm]) -> Vec<SpannedRange<ConstVal>> {\n+fn all_ranges<'a>(cx: &'a LateContext, arms: &'a [Arm]) -> Vec<SpannedRange<ConstVal<'a>>> {\n     let constcx = ConstContext::with_tables(cx.tcx, cx.tables);\n     arms.iter()\n         .flat_map(|arm| {\n@@ -427,8 +426,8 @@ fn all_ranges(cx: &LateContext, arms: &[Arm]) -> Vec<SpannedRange<ConstVal>> {\n                 .filter_map(|pat| {\n                     if_let_chain! {[\n                     let PatKind::Range(ref lhs, ref rhs, ref range_end) = pat.node,\n-                    let Ok(lhs) = constcx.eval(lhs, ExprTypeChecked),\n-                    let Ok(rhs) = constcx.eval(rhs, ExprTypeChecked)\n+                    let Ok(lhs) = constcx.eval(lhs),\n+                    let Ok(rhs) = constcx.eval(rhs)\n                 ], {\n                     let rhs = match *range_end {\n                         RangeEnd::Included => Bound::Included(rhs),\n@@ -439,7 +438,7 @@ fn all_ranges(cx: &LateContext, arms: &[Arm]) -> Vec<SpannedRange<ConstVal>> {\n \n                     if_let_chain! {[\n                     let PatKind::Lit(ref value) = pat.node,\n-                    let Ok(value) = constcx.eval(value, ExprTypeChecked)\n+                    let Ok(value) = constcx.eval(value)\n                 ], {\n                     return Some(SpannedRange { span: pat.span, node: (value.clone(), Bound::Included(value)) });\n                 }}"}, {"sha": "b43a2473f0df6dfbf18c68344cce5d8dda04337f", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -36,7 +36,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemForget {\n                     let forgot_ty = cx.tables.expr_ty(&args[0]);\n \n                     if match forgot_ty.ty_adt_def() {\n-                        Some(def) => def.has_dtor(),\n+                        Some(def) => def.has_dtor(cx.tcx),\n                         _ => false,\n                     } {\n                         span_lint(cx, MEM_FORGET, e.span, \"usage of mem::forget on Drop type\");"}, {"sha": "b7416630963bd74ff0cb0f9cf5c4f3b21b4d2e06", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -3,7 +3,6 @@ use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n use rustc::hir::def::Def;\n-use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::ConstContext;\n use std::borrow::Cow;\n use std::fmt;\n@@ -1240,7 +1239,7 @@ fn lint_chars_next(cx: &LateContext, expr: &hir::Expr, chain: &hir::Expr, other:\n \n /// lint for length-1 `str`s for methods in `PATTERN_METHODS`\n fn lint_single_char_pattern(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr) {\n-    if let Ok(ConstVal::Str(r)) = ConstContext::with_tables(cx.tcx, cx.tables).eval(arg, ExprTypeChecked) {\n+    if let Ok(ConstVal::Str(r)) = ConstContext::with_tables(cx.tcx, cx.tables).eval(arg) {\n         if r.len() == 1 {\n             let hint = snippet(cx, expr.span, \"..\").replace(&format!(\"\\\"{}\\\"\", r), &format!(\"'{}'\", r));\n             span_lint_and_then(cx,"}, {"sha": "2e38bcd39eb63e674b20fce5b6361abb79638755", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -4,7 +4,6 @@ use rustc::hir::intravisit::FnKind;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n use rustc::ty;\n-use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::ConstContext;\n use rustc_const_math::ConstFloat;\n use syntax::codemap::{Span, Spanned, ExpnFormat};\n@@ -360,24 +359,16 @@ fn check_nan(cx: &LateContext, path: &Path, span: Span) {\n }\n \n fn is_allowed(cx: &LateContext, expr: &Expr) -> bool {\n-    let res = ConstContext::with_tables(cx.tcx, cx.tables).eval(expr, ExprTypeChecked);\n+    let res = ConstContext::with_tables(cx.tcx, cx.tables).eval(expr);\n     if let Ok(ConstVal::Float(val)) = res {\n         use std::cmp::Ordering;\n \n-        let zero = ConstFloat::FInfer {\n-            f32: 0.0,\n-            f64: 0.0,\n-        };\n+        let zero = ConstFloat::F64(0.0);\n \n-        let infinity = ConstFloat::FInfer {\n-            f32: ::std::f32::INFINITY,\n-            f64: ::std::f64::INFINITY,\n-        };\n+        let infinity = ConstFloat::F64(::std::f64::INFINITY);\n \n-        let neg_infinity = ConstFloat::FInfer {\n-            f32: ::std::f32::NEG_INFINITY,\n-            f64: ::std::f64::NEG_INFINITY,\n-        };\n+\n+        let neg_infinity = ConstFloat::F64(::std::f64::NEG_INFINITY);\n \n         val.try_cmp(zero) == Ok(Ordering::Equal) || val.try_cmp(infinity) == Ok(Ordering::Equal) ||\n         val.try_cmp(neg_infinity) == Ok(Ordering::Equal)"}, {"sha": "07c941ecee6b1270d427e7a0635e0c05ed5cc7f1", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -62,7 +62,7 @@ fn check_arguments(cx: &LateContext, arguments: &[Expr], type_definition: &TyS,\n     match type_definition.sty {\n         TypeVariants::TyFnDef(_, _, fn_type) |\n         TypeVariants::TyFnPtr(fn_type) => {\n-            let parameters = fn_type.sig.skip_binder().inputs();\n+            let parameters = fn_type.skip_binder().inputs();\n             for (argument, parameter) in arguments.iter().zip(parameters.iter()) {\n                 match parameter.sty {\n                     TypeVariants::TyRef(_, TypeAndMut { mutbl: MutImmutable, .. }) |"}, {"sha": "d7e7a0bdb476fe72616904b8f69e8f246e547166", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -85,7 +85,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         let fn_def_id = cx.tcx.hir.local_def_id(node_id);\n         let param_env = ty::ParameterEnvironment::for_item(cx.tcx, node_id);\n         let fn_sig = cx.tcx.item_type(fn_def_id).fn_sig();\n-        let fn_sig = cx.tcx.liberate_late_bound_regions(param_env.free_id_outlive, fn_sig);\n+        let fn_sig = cx.tcx.liberate_late_bound_regions(param_env.free_id_outlive, &fn_sig);\n \n         for ((input, ty), arg) in decl.inputs.iter().zip(fn_sig.inputs()).zip(&body.arguments) {\n "}, {"sha": "279996bfabe77240c8816217097e1f6a07229f1c", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -113,7 +113,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PointerPass {\n \n fn check_fn(cx: &LateContext, decl: &FnDecl, fn_id: NodeId) {\n     let fn_def_id = cx.tcx.hir.local_def_id(fn_id);\n-    let fn_ty = cx.tcx.item_type(fn_def_id).fn_sig().skip_binder();\n+    let sig = cx.tcx.item_type(fn_def_id).fn_sig();\n+    let fn_ty = sig.skip_binder();\n \n     for (arg, ty) in decl.inputs.iter().zip(fn_ty.inputs()) {\n         if let ty::TyRef(_, ty::TypeAndMut { ty, mutbl: MutImmutable }) = ty.sty {"}, {"sha": "6f22c3cfc7f65adc99b54904b1000c90c712f730", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -2,7 +2,6 @@ use regex_syntax;\n use rustc::hir::*;\n use rustc::lint::*;\n use rustc::middle::const_val::ConstVal;\n-use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::ConstContext;\n use std::collections::HashSet;\n use std::error::Error;\n@@ -151,7 +150,7 @@ fn str_span(base: Span, s: &str, c: usize) -> Span {\n }\n \n fn const_str(cx: &LateContext, e: &Expr) -> Option<InternedString> {\n-    match ConstContext::with_tables(cx.tcx, cx.tables).eval(e, ExprTypeChecked) {\n+    match ConstContext::with_tables(cx.tcx, cx.tables).eval(e) {\n         Ok(ConstVal::Str(r)) => Some(r),\n         _ => None,\n     }"}, {"sha": "0ec2e80338c5787f046e7d9b15925b5fe9a42898", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -907,7 +907,6 @@ fn detect_absurd_comparison<'a>(\n fn detect_extreme_expr<'a>(cx: &LateContext, expr: &'a Expr) -> Option<ExtremeExpr<'a>> {\n     use rustc::middle::const_val::ConstVal::*;\n     use rustc_const_math::*;\n-    use rustc_const_eval::EvalHint::ExprTypeChecked;\n     use rustc_const_eval::*;\n     use types::ExtremeType::*;\n \n@@ -918,7 +917,7 @@ fn detect_extreme_expr<'a>(cx: &LateContext, expr: &'a Expr) -> Option<ExtremeEx\n         _ => return None,\n     };\n \n-    let cv = match ConstContext::with_tables(cx.tcx, cx.tables).eval(expr, ExprTypeChecked) {\n+    let cv = match ConstContext::with_tables(cx.tcx, cx.tables).eval(expr) {\n         Ok(val) => val,\n         Err(_) => return None,\n     };\n@@ -1107,18 +1106,13 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(\n \n fn node_as_const_fullint(cx: &LateContext, expr: &Expr) -> Option<FullInt> {\n     use rustc::middle::const_val::ConstVal::*;\n-    use rustc_const_eval::EvalHint::ExprTypeChecked;\n     use rustc_const_eval::ConstContext;\n     use rustc_const_math::ConstInt;\n \n-    match ConstContext::with_tables(cx.tcx, cx.tables).eval(expr, ExprTypeChecked) {\n+    match ConstContext::with_tables(cx.tcx, cx.tables).eval(expr) {\n         Ok(val) => {\n             if let Integral(const_int) = val {\n-                Some(match const_int.erase_type() {\n-                    ConstInt::InferSigned(x) => FullInt::S(x as i128),\n-                    ConstInt::Infer(x) => FullInt::U(x as u128),\n-                    _ => unreachable!(),\n-                })\n+                Some(FullInt::U(const_int.to_u128_unchecked()))\n             } else {\n                 None\n             }"}, {"sha": "e1c09992ce26aabb959e003f88a190e66dc6b20c", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -781,7 +781,7 @@ pub fn return_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, fn_item: NodeId) -> ty::T\n     let parameter_env = ty::ParameterEnvironment::for_item(cx.tcx, fn_item);\n     let fn_def_id = cx.tcx.hir.local_def_id(fn_item);\n     let fn_sig = cx.tcx.item_type(fn_def_id).fn_sig();\n-    let fn_sig = cx.tcx.liberate_late_bound_regions(parameter_env.free_id_outlive, fn_sig);\n+    let fn_sig = cx.tcx.liberate_late_bound_regions(parameter_env.free_id_outlive, &fn_sig);\n     fn_sig.output()\n }\n \n@@ -806,7 +806,7 @@ pub fn same_tys<'a, 'tcx>(\n pub fn type_is_unsafe_function(ty: ty::Ty) -> bool {\n     match ty.sty {\n         ty::TyFnDef(_, _, f) |\n-        ty::TyFnPtr(f) => f.unsafety == Unsafety::Unsafe,\n+        ty::TyFnPtr(f) => f.skip_binder().unsafety == Unsafety::Unsafe,\n         _ => false,\n     }\n }"}, {"sha": "3b9e38cb66bf113e139ff55d6a9f496e85eda12f", "filename": "clippy_lints/src/vec.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f66e0aad840e587f9c9a817f65603897f28bcbe8/clippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec.rs?ref=f66e0aad840e587f9c9a817f65603897f28bcbe8", "patch": "@@ -1,7 +1,6 @@\n use rustc::hir::*;\n use rustc::lint::*;\n use rustc::ty;\n-use rustc_const_eval::EvalHint::ExprTypeChecked;\n use rustc_const_eval::ConstContext;\n use syntax::codemap::Span;\n use utils::{higher, is_copy, snippet, span_lint_and_then};\n@@ -60,7 +59,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n fn check_vec_macro(cx: &LateContext, vec_args: &higher::VecArgs, span: Span) {\n     let snippet = match *vec_args {\n         higher::VecArgs::Repeat(elem, len) => {\n-            if ConstContext::with_tables(cx.tcx, cx.tables).eval(len, ExprTypeChecked).is_ok() {\n+            if ConstContext::with_tables(cx.tcx, cx.tables).eval(len).is_ok() {\n                 format!(\"&[{}; {}]\", snippet(cx, elem.span, \"elem\"), snippet(cx, len.span, \"len\")).into()\n             } else {\n                 return;"}]}