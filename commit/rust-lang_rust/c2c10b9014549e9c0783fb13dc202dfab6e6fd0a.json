{"sha": "c2c10b9014549e9c0783fb13dc202dfab6e6fd0a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYzEwYjkwMTQ1NDllOWMwNzgzZmIxM2RjMjAyZGZhYjZlNmZkMGE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-30T20:23:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-30T20:23:31Z"}, "message": ":arrow_up: crossbeam\n\ncloses #189", "tree": {"sha": "d4b2a47910df5effb14271ab72a1602b5f77ee81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4b2a47910df5effb14271ab72a1602b5f77ee81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a", "html_url": "https://github.com/rust-lang/rust/commit/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "effc1eae8be338ea949058cc89c39950c25858c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/effc1eae8be338ea949058cc89c39950c25858c5", "html_url": "https://github.com/rust-lang/rust/commit/effc1eae8be338ea949058cc89c39950c25858c5"}], "stats": {"total": 122, "additions": 51, "deletions": 71}, "files": [{"sha": "0d63ec639d6682b4102a7cf670f6ec1fda182b25", "filename": "Cargo.lock", "status": "modified", "additions": 3, "deletions": 36, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c2c10b9014549e9c0783fb13dc202dfab6e6fd0a", "patch": "@@ -164,18 +164,6 @@ dependencies = [\n  \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"crossbeam-channel\"\n-version = \"0.2.6\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"crossbeam-epoch 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crossbeam-utils 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rand 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"smallvec 0.6.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"crossbeam-channel\"\n version = \"0.3.6\"\n@@ -210,19 +198,6 @@ dependencies = [\n  \"scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"crossbeam-epoch\"\n-version = \"0.6.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-dependencies = [\n- \"arrayvec 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crossbeam-utils 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"memoffset 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n-]\n-\n [[package]]\n name = \"crossbeam-utils\"\n version = \"0.2.2\"\n@@ -231,11 +206,6 @@ dependencies = [\n  \"cfg-if 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n-[[package]]\n-name = \"crossbeam-utils\"\n-version = \"0.5.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-\n [[package]]\n name = \"crossbeam-utils\"\n version = \"0.6.3\"\n@@ -775,7 +745,7 @@ name = \"ra_lsp_server\"\n version = \"0.1.0\"\n dependencies = [\n  \"cargo_metadata 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"crossbeam-channel 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-channel 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"drop_bomb 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -835,7 +805,7 @@ dependencies = [\n name = \"ra_vfs\"\n version = \"0.1.0\"\n dependencies = [\n- \"crossbeam-channel 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-channel 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"relative-path 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1319,7 +1289,7 @@ dependencies = [\n name = \"thread_worker\"\n version = \"0.1.0\"\n dependencies = [\n- \"crossbeam-channel 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"crossbeam-channel 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"drop_bomb 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1554,13 +1524,10 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum chrono 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"45912881121cb26fad7c38c17ba7daa18764771836b34fab7d3fbd93ed633878\"\n \"checksum clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b957d88f4b6a63b9d70d5f454ac8011819c6efa7727858f458ab71c756ce2d3e\"\n \"checksum cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ddfc5b9aa5d4507acaf872de71051dfd0e309860e88966e1051e462a077aac4f\"\n-\"checksum crossbeam-channel 0.2.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7b85741761b7f160bc5e7e0c14986ef685b7f8bf9b7ad081c60c604bb4649827\"\n \"checksum crossbeam-channel 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"137bc235f622ffaa0428e3854e24acb53291fc0b3ff6fb2cb75a8be6fb02f06b\"\n \"checksum crossbeam-deque 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f739f8c5363aca78cfb059edf753d8f0d36908c348f3d8d1503f03d8b75d9cf3\"\n \"checksum crossbeam-epoch 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"927121f5407de9956180ff5e936fe3cf4324279280001cd56b669d28ee7e9150\"\n-\"checksum crossbeam-epoch 0.6.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2449aaa4ec7ef96e5fb24db16024b935df718e9ae1cec0a1e68feeca2efca7b8\"\n \"checksum crossbeam-utils 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2760899e32a1d58d5abb31129f8fae5de75220bc2176e77ff7c627ae45c918d9\"\n-\"checksum crossbeam-utils 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"677d453a17e8bd2b913fa38e8b9cf04bcdbb5be790aa294f2389661d72036015\"\n \"checksum crossbeam-utils 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41ee4864f4797060e52044376f7d107429ce1fb43460021b126424b7180ee21a\"\n \"checksum derive-new 0.5.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6ca414e896ae072546f4d789f452daaecf60ddee4c9df5dc6d5936d769e3d87c\"\n \"checksum deunicode 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"850878694b7933ca4c9569d30a34b55031b9b139ee1fc7b94a527c4ef960d690\""}, {"sha": "b1e8987fe7702689083741d9a91dd7d518a57861", "filename": "crates/ra_lsp_server/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fra_lsp_server%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fra_lsp_server%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2FCargo.toml?ref=c2c10b9014549e9c0783fb13dc202dfab6e6fd0a", "patch": "@@ -13,7 +13,7 @@ failure_derive = \"0.1.2\"\n serde_json = \"1.0.24\"\n serde = \"1.0.83\"\n drop_bomb = \"0.1.0\"\n-crossbeam-channel = \"0.2.4\"\n+crossbeam-channel = \"0.3.5\"\n flexi_logger = \"0.10.0\"\n log = \"0.4.3\"\n url_serde = \"0.2.0\""}, {"sha": "3ebae4ecd303810345dcc6440b47db4be2d74852", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=c2c10b9014549e9c0783fb13dc202dfab6e6fd0a", "patch": "@@ -7,7 +7,7 @@ use std::{\n     sync::Arc,\n };\n \n-use crossbeam_channel::{unbounded, select, Receiver, Sender};\n+use crossbeam_channel::{unbounded, select, Receiver, Sender, RecvError};\n use gen_lsp_server::{\n     handle_shutdown, ErrorCode, RawMessage, RawNotification, RawRequest, RawResponse,\n };\n@@ -62,7 +62,7 @@ pub fn main_loop(\n     let (task_sender, task_receiver) = unbounded::<Task>();\n     let (ws_worker, ws_watcher) = workspace_loader();\n \n-    ws_worker.send(ws_root.clone());\n+    ws_worker.send(ws_root.clone()).unwrap();\n     // FIXME: support dynamic workspace loading.\n     let workspaces = match ws_worker.recv().unwrap() {\n         Ok(ws) => vec![ws],\n@@ -95,7 +95,9 @@ pub fn main_loop(\n     );\n \n     log::info!(\"waiting for tasks to finish...\");\n-    task_receiver.for_each(|task| on_task(task, msg_sender, &mut pending_requests));\n+    task_receiver\n+        .into_iter()\n+        .for_each(|task| on_task(task, msg_sender, &mut pending_requests));\n     log::info!(\"...tasks have finished\");\n     log::info!(\"joining threadpool...\");\n     drop(pool);\n@@ -170,16 +172,16 @@ fn main_loop_inner(\n     loop {\n         log::trace!(\"selecting\");\n         let event = select! {\n-            recv(msg_receiver, msg) => match msg {\n-                Some(msg) => Event::Msg(msg),\n-                None => bail!(\"client exited without shutdown\"),\n+            recv(msg_receiver) -> msg => match msg {\n+                Ok(msg) => Event::Msg(msg),\n+                Err(RecvError) => bail!(\"client exited without shutdown\"),\n             },\n-            recv(task_receiver, task) => Event::Task(task.unwrap()),\n-            recv(state.vfs.read().task_receiver(), task) => match task {\n-                None => bail!(\"vfs died\"),\n-                Some(task) => Event::Vfs(task),\n-            }\n-            recv(libdata_receiver, data) => Event::Lib(data.unwrap())\n+            recv(task_receiver) -> task => Event::Task(task.unwrap()),\n+            recv(state.vfs.read().task_receiver()) -> task => match task {\n+                Ok(task) => Event::Vfs(task),\n+                Err(RecvError) => bail!(\"vfs died\"),\n+            },\n+            recv(libdata_receiver) -> data => Event::Lib(data.unwrap())\n         };\n         log::info!(\"loop_turn = {:?}\", event);\n         let start = std::time::Instant::now();\n@@ -209,7 +211,7 @@ fn main_loop_inner(\n                                 ErrorCode::MethodNotFound as i32,\n                                 \"unknown request\".to_string(),\n                             );\n-                            msg_sender.send(RawMessage::Response(resp))\n+                            msg_sender.send(RawMessage::Response(resp)).unwrap()\n                         }\n                     }\n                 }\n@@ -229,7 +231,7 @@ fn main_loop_inner(\n                 log::info!(\"indexing {:?} ... \", root);\n                 let data = LibraryData::prepare(root, files);\n                 log::info!(\"indexed {:?} {:?}\", start.elapsed(), root);\n-                sender.send(data);\n+                sender.send(data).unwrap();\n             });\n         }\n         if state.roots_to_scan == 0 {\n@@ -253,10 +255,12 @@ fn on_task(task: Task, msg_sender: &Sender<RawMessage>, pending_requests: &mut F\n     match task {\n         Task::Respond(response) => {\n             if pending_requests.remove(&response.id) {\n-                msg_sender.send(RawMessage::Response(response))\n+                msg_sender.send(RawMessage::Response(response)).unwrap();\n             }\n         }\n-        Task::Notify(n) => msg_sender.send(RawMessage::Notification(n)),\n+        Task::Notify(n) => {\n+            msg_sender.send(RawMessage::Notification(n)).unwrap();\n+        }\n     }\n }\n \n@@ -328,7 +332,7 @@ fn on_notification(\n                     ErrorCode::RequestCancelled as i32,\n                     \"canceled by client\".to_string(),\n                 );\n-                msg_sender.send(RawMessage::Response(response))\n+                msg_sender.send(RawMessage::Response(response)).unwrap()\n             }\n             return Ok(());\n         }\n@@ -381,7 +385,7 @@ fn on_notification(\n                 diagnostics: Vec::new(),\n             };\n             let not = RawNotification::new::<req::PublishDiagnostics>(&params);\n-            msg_sender.send(RawMessage::Notification(not));\n+            msg_sender.send(RawMessage::Notification(not)).unwrap();\n             return Ok(());\n         }\n         Err(not) => not,\n@@ -441,7 +445,7 @@ impl<'a> PoolDispatcher<'a> {\n                         },\n                     };\n                     let task = Task::Respond(resp);\n-                    sender.send(task);\n+                    sender.send(task).unwrap();\n                 });\n                 self.res = Some(id);\n             }\n@@ -476,7 +480,7 @@ fn update_file_notifications_on_threadpool(\n                 }\n                 Ok(params) => {\n                     let not = RawNotification::new::<req::PublishDiagnostics>(&params);\n-                    sender.send(Task::Notify(not));\n+                    sender.send(Task::Notify(not)).unwrap();\n                 }\n             }\n             if publish_decorations {\n@@ -488,7 +492,7 @@ fn update_file_notifications_on_threadpool(\n                     }\n                     Ok(params) => {\n                         let not = RawNotification::new::<req::PublishDecorations>(&params);\n-                        sender.send(Task::Notify(not))\n+                        sender.send(Task::Notify(not)).unwrap();\n                     }\n                 }\n             }\n@@ -501,7 +505,7 @@ fn feedback(intrnal_mode: bool, msg: &str, sender: &Sender<RawMessage>) {\n         return;\n     }\n     let not = RawNotification::new::<req::InternalFeedback>(&msg.to_string());\n-    sender.send(RawMessage::Notification(not));\n+    sender.send(RawMessage::Notification(not)).unwrap();\n }\n \n fn is_canceled(e: &failure::Error) -> bool {"}, {"sha": "ae2149463344269234f48eae8a91c82a1d462c8e", "filename": "crates/ra_lsp_server/src/project_model.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fproject_model.rs?ref=c2c10b9014549e9c0783fb13dc202dfab6e6fd0a", "patch": "@@ -204,8 +204,10 @@ pub fn workspace_loader() -> (Worker<PathBuf, Result<CargoWorkspace>>, WorkerHan\n         1,\n         |input_receiver, output_sender| {\n             input_receiver\n+                .into_iter()\n                 .map(|path| CargoWorkspace::from_cargo_metadata(path.as_path()))\n-                .for_each(|it| output_sender.send(it))\n+                .try_for_each(|it| output_sender.send(it))\n+                .unwrap()\n         },\n     )\n }"}, {"sha": "82ba12f876ce5bd33bd9f100960061342ef05ee0", "filename": "crates/ra_lsp_server/tests/heavy_tests/support.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=c2c10b9014549e9c0783fb13dc202dfab6e6fd0a", "patch": "@@ -118,7 +118,11 @@ impl Server {\n     }\n     fn send_request_(&self, r: RawRequest) -> Value {\n         let id = r.id;\n-        self.worker.as_ref().unwrap().send(RawMessage::Request(r));\n+        self.worker\n+            .as_ref()\n+            .unwrap()\n+            .send(RawMessage::Request(r))\n+            .unwrap();\n         while let Some(msg) = self.recv() {\n             match msg {\n                 RawMessage::Request(req) => panic!(\"unexpected request: {:?}\", req),\n@@ -167,7 +171,8 @@ impl Server {\n         self.worker\n             .as_ref()\n             .unwrap()\n-            .send(RawMessage::Notification(not));\n+            .send(RawMessage::Notification(not))\n+            .unwrap();\n     }\n }\n \n@@ -185,7 +190,7 @@ impl Drop for Server {\n fn recv_timeout(receiver: &Receiver<RawMessage>) -> Option<RawMessage> {\n     let timeout = Duration::from_secs(5);\n     select! {\n-        recv(receiver, msg) => msg,\n-        recv(after(timeout)) => panic!(\"timed out\"),\n+        recv(receiver) -> msg => msg.ok(),\n+        recv(after(timeout)) -> _ => panic!(\"timed out\"),\n     }\n }"}, {"sha": "7c170cdfcdaaaae6384128d36dd3cd6ad67245ea", "filename": "crates/ra_vfs/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fra_vfs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fra_vfs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2FCargo.toml?ref=c2c10b9014549e9c0783fb13dc202dfab6e6fd0a", "patch": "@@ -8,7 +8,7 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n walkdir = \"2.2.7\"\n relative-path = \"0.4.0\"\n rustc-hash = \"1.0\"\n-crossbeam-channel = \"0.2.4\"\n+crossbeam-channel = \"0.3.5\"\n log = \"0.4.6\"\n \n thread_worker = { path = \"../thread_worker\" }"}, {"sha": "80328ad186b472eae037b03e6761895d6fb9703e", "filename": "crates/ra_vfs/src/io.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fra_vfs%2Fsrc%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fra_vfs%2Fsrc%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Fio.rs?ref=c2c10b9014549e9c0783fb13dc202dfab6e6fd0a", "patch": "@@ -32,8 +32,10 @@ pub(crate) type Worker = thread_worker::Worker<Task, TaskResult>;\n pub(crate) fn start() -> (Worker, WorkerHandle) {\n     thread_worker::spawn(\"vfs\", 128, |input_receiver, output_sender| {\n         input_receiver\n+            .into_iter()\n             .map(handle_task)\n-            .for_each(|it| output_sender.send(it))\n+            .try_for_each(|it| output_sender.send(it))\n+            .unwrap()\n     })\n }\n "}, {"sha": "757eac95bb232ce993ea064a79c5ad1062955768", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=c2c10b9014549e9c0783fb13dc202dfab6e6fd0a", "patch": "@@ -148,7 +148,7 @@ impl Vfs {\n                 path: path.clone(),\n                 filter: Box::new(filter),\n             };\n-            res.worker.inp.send(task);\n+            res.worker.inp.send(task).unwrap();\n         }\n         let roots = res.roots.iter().map(|(id, _)| id).collect();\n         (res, roots)"}, {"sha": "c74b376e22dbfb0f396eec63ae028cf97810de55", "filename": "crates/thread_worker/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fthread_worker%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fthread_worker%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fthread_worker%2FCargo.toml?ref=c2c10b9014549e9c0783fb13dc202dfab6e6fd0a", "patch": "@@ -6,6 +6,6 @@ authors = [\"Aleksey Kladov <aleksey.kladov@gmail.com>\"]\n \n [dependencies]\n drop_bomb = \"0.1.0\"\n-crossbeam-channel = \"0.2.4\"\n+crossbeam-channel = \"0.3.5\"\n log = \"0.4.3\"\n "}, {"sha": "5e46f62fe9d28291963d45d5273f144c198c030d", "filename": "crates/thread_worker/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fthread_worker%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2c10b9014549e9c0783fb13dc202dfab6e6fd0a/crates%2Fthread_worker%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fthread_worker%2Fsrc%2Flib.rs?ref=c2c10b9014549e9c0783fb13dc202dfab6e6fd0a", "patch": "@@ -2,7 +2,7 @@\n \n use std::thread;\n \n-use crossbeam_channel::{bounded, unbounded, Receiver, Sender};\n+use crossbeam_channel::{bounded, unbounded, Receiver, Sender, RecvError, SendError};\n use drop_bomb::DropBomb;\n \n pub struct Worker<I, O> {\n@@ -34,10 +34,10 @@ impl<I, O> Worker<I, O> {\n         self.out\n     }\n \n-    pub fn send(&self, item: I) {\n+    pub fn send(&self, item: I) -> Result<(), SendError<I>> {\n         self.inp.send(item)\n     }\n-    pub fn recv(&self) -> Option<O> {\n+    pub fn recv(&self) -> Result<O, RecvError> {\n         self.out.recv()\n     }\n }"}]}