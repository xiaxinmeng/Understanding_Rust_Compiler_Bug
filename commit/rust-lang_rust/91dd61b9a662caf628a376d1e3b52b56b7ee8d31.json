{"sha": "91dd61b9a662caf628a376d1e3b52b56b7ee8d31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZGQ2MWI5YTY2MmNhZjYyOGEzNzZkMWUzYjUyYjU2YjdlZThkMzE=", "commit": {"author": {"name": "Sahandevs", "email": "sahandevs@gmail.com", "date": "2021-02-09T14:12:46Z"}, "committer": {"name": "Sahandevs", "email": "sahandevs@gmail.com", "date": "2021-02-09T14:12:46Z"}, "message": "use await instead", "tree": {"sha": "22d5ec3c2abd8058ce97ca9102075427cea02e4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22d5ec3c2abd8058ce97ca9102075427cea02e4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91dd61b9a662caf628a376d1e3b52b56b7ee8d31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91dd61b9a662caf628a376d1e3b52b56b7ee8d31", "html_url": "https://github.com/rust-lang/rust/commit/91dd61b9a662caf628a376d1e3b52b56b7ee8d31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91dd61b9a662caf628a376d1e3b52b56b7ee8d31/comments", "author": {"login": "sahandevs", "id": 1113944, "node_id": "MDQ6VXNlcjExMTM5NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1113944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sahandevs", "html_url": "https://github.com/sahandevs", "followers_url": "https://api.github.com/users/sahandevs/followers", "following_url": "https://api.github.com/users/sahandevs/following{/other_user}", "gists_url": "https://api.github.com/users/sahandevs/gists{/gist_id}", "starred_url": "https://api.github.com/users/sahandevs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sahandevs/subscriptions", "organizations_url": "https://api.github.com/users/sahandevs/orgs", "repos_url": "https://api.github.com/users/sahandevs/repos", "events_url": "https://api.github.com/users/sahandevs/events{/privacy}", "received_events_url": "https://api.github.com/users/sahandevs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sahandevs", "id": 1113944, "node_id": "MDQ6VXNlcjExMTM5NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1113944?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sahandevs", "html_url": "https://github.com/sahandevs", "followers_url": "https://api.github.com/users/sahandevs/followers", "following_url": "https://api.github.com/users/sahandevs/following{/other_user}", "gists_url": "https://api.github.com/users/sahandevs/gists{/gist_id}", "starred_url": "https://api.github.com/users/sahandevs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sahandevs/subscriptions", "organizations_url": "https://api.github.com/users/sahandevs/orgs", "repos_url": "https://api.github.com/users/sahandevs/repos", "events_url": "https://api.github.com/users/sahandevs/events{/privacy}", "received_events_url": "https://api.github.com/users/sahandevs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f82a84d2a06e24296bdbc4e8f50131539d5a749", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f82a84d2a06e24296bdbc4e8f50131539d5a749", "html_url": "https://github.com/rust-lang/rust/commit/2f82a84d2a06e24296bdbc4e8f50131539d5a749"}], "stats": {"total": 52, "additions": 21, "deletions": 31}, "files": [{"sha": "3729a71dea2e77b5f1b65b3cafeeb031f746409a", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/91dd61b9a662caf628a376d1e3b52b56b7ee8d31/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/91dd61b9a662caf628a376d1e3b52b56b7ee8d31/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=91dd61b9a662caf628a376d1e3b52b56b7ee8d31", "patch": "@@ -125,12 +125,11 @@ export function joinLines(ctx: Ctx): Cmd {\n             ranges: editor.selections.map((it) => client.code2ProtocolConverter.asRange(it)),\n             textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n         });\n-        editor.edit((builder) => {\n+        await editor.edit((builder) => {\n             client.protocol2CodeConverter.asTextEdits(items).forEach((edit: any) => {\n                 builder.replace(edit.range, edit.newText);\n             });\n-        })\n-            .then(() => { }, console.error);\n+        });\n     };\n }\n \n@@ -237,7 +236,7 @@ export function ssr(ctx: Ctx): Cmd {\n         const request = await vscode.window.showInputBox(options);\n         if (!request) return;\n \n-        vscode.window.withProgress({\n+        await vscode.window.withProgress({\n             location: vscode.ProgressLocation.Notification,\n             title: \"Structured search replace in progress...\",\n             cancellable: false,\n@@ -247,8 +246,7 @@ export function ssr(ctx: Ctx): Cmd {\n             });\n \n             await vscode.workspace.applyEdit(client.protocol2CodeConverter.asWorkspaceEdit(edit));\n-        })\n-            .then(() => { }, console.error);\n+        });\n     };\n }\n \n@@ -459,16 +457,15 @@ export function reloadWorkspace(ctx: Ctx): Cmd {\n }\n \n export function showReferences(ctx: Ctx): Cmd {\n-    return (uri: string, position: lc.Position, locations: lc.Location[]) => {\n+    return async (uri: string, position: lc.Position, locations: lc.Location[]) => {\n         const client = ctx.client;\n         if (client) {\n-            vscode.commands.executeCommand(\n+            await vscode.commands.executeCommand(\n                 'editor.action.showReferences',\n                 vscode.Uri.parse(uri),\n                 client.protocol2CodeConverter.asPosition(position),\n                 locations.map(client.protocol2CodeConverter.asLocation),\n-            )\n-                .then(() => { }, console.error);\n+            );\n         }\n     };\n }\n@@ -477,11 +474,10 @@ export function applyActionGroup(_ctx: Ctx): Cmd {\n     return async (actions: { label: string; arguments: lc.CodeAction }[]) => {\n         const selectedAction = await vscode.window.showQuickPick(actions);\n         if (!selectedAction) return;\n-        vscode.commands.executeCommand(\n+        await vscode.commands.executeCommand(\n             'rust-analyzer.resolveCodeAction',\n             selectedAction.arguments,\n-        )\n-            .then(() => { }, console.error);\n+        );\n     };\n }\n \n@@ -514,8 +510,7 @@ export function openDocs(ctx: Ctx): Cmd {\n         const doclink = await client.sendRequest(ra.openDocs, { position, textDocument });\n \n         if (doclink != null) {\n-            vscode.commands.executeCommand(\"vscode.open\", vscode.Uri.parse(doclink))\n-                .then(() => { }, console.error);\n+            await vscode.commands.executeCommand(\"vscode.open\", vscode.Uri.parse(doclink));\n         }\n     };\n "}, {"sha": "3889a2773045349bc44dd5d3b494f25736bc9c17", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91dd61b9a662caf628a376d1e3b52b56b7ee8d31/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/91dd61b9a662caf628a376d1e3b52b56b7ee8d31/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=91dd61b9a662caf628a376d1e3b52b56b7ee8d31", "patch": "@@ -77,9 +77,8 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n     }\n \n     if (!debugEngine) {\n-        vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)`\n-            + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension for debugging.`)\n-            .then(() => { }, console.error);\n+        await vscode.window.showErrorMessage(`Install [CodeLLDB](https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb)`\n+            + ` or [MS C++ tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) extension for debugging.`);\n         return;\n     }\n "}, {"sha": "5c0b0be26373eb905cc1489512bae99cf1d72cde", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/91dd61b9a662caf628a376d1e3b52b56b7ee8d31/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/91dd61b9a662caf628a376d1e3b52b56b7ee8d31/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=91dd61b9a662caf628a376d1e3b52b56b7ee8d31", "patch": "@@ -76,8 +76,7 @@ async function tryActivate(context: vscode.ExtensionContext) {\n     // This a horribly, horribly wrong way to deal with this problem.\n     ctx = await Ctx.create(config, context, serverPath, workspaceFolder.uri.fsPath);\n \n-    setContextValue(RUST_PROJECT_CONTEXT_NAME, true)\n-        .then(() => { }, console.error);\n+    await setContextValue(RUST_PROJECT_CONTEXT_NAME, true);\n \n     // Commands which invokes manually via command palette, shortcut, etc.\n \n@@ -143,8 +142,7 @@ async function tryActivate(context: vscode.ExtensionContext) {\n }\n \n export async function deactivate() {\n-    setContextValue(RUST_PROJECT_CONTEXT_NAME, undefined)\n-        .then(() => { }, console.error);\n+    await setContextValue(RUST_PROJECT_CONTEXT_NAME, undefined);\n     await ctx?.client.stop();\n     ctx = undefined;\n }\n@@ -185,11 +183,10 @@ async function bootstrapExtension(config: Config, state: PersistentState): Promi\n \n     const release = await downloadWithRetryDialog(state, async () => {\n         return await fetchRelease(\"nightly\", state.githubToken);\n-    }).catch((e) => {\n+    }).catch(async (e) => {\n         log.error(e);\n         if (state.releaseId === undefined) { // Show error only for the initial download\n-            vscode.window.showErrorMessage(`Failed to download rust-analyzer nightly ${e}`)\n-                .then(() => { }, console.error);\n+            await vscode.window.showErrorMessage(`Failed to download rust-analyzer nightly ${e}`);\n         }\n         return undefined;\n     });\n@@ -301,14 +298,14 @@ async function getServer(config: Config, state: PersistentState): Promise<string\n     };\n     const platform = platforms[`${process.arch} ${process.platform}`];\n     if (platform === undefined) {\n-        vscode.window.showErrorMessage(\n+        await vscode.window.showErrorMessage(\n             \"Unfortunately we don't ship binaries for your platform yet. \" +\n             \"You need to manually clone rust-analyzer repository and \" +\n             \"run `cargo xtask install --server` to build the language server from sources. \" +\n             \"If you feel that your platform should be supported, please create an issue \" +\n             \"about that [here](https://github.com/rust-analyzer/rust-analyzer/issues) and we \" +\n             \"will consider it.\"\n-        ).then(() => { }, console.error);\n+        );\n         return undefined;\n     }\n     const ext = platform.indexOf(\"-windows-\") !== -1 ? \".exe\" : \"\";"}, {"sha": "7ac7ca3cbd4b05ca272554f4b020ab5fa2724501", "filename": "editors/code/src/run.ts", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/91dd61b9a662caf628a376d1e3b52b56b7ee8d31/editors%2Fcode%2Fsrc%2Frun.ts", "raw_url": "https://github.com/rust-lang/rust/raw/91dd61b9a662caf628a376d1e3b52b56b7ee8d31/editors%2Fcode%2Fsrc%2Frun.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Frun.ts?ref=91dd61b9a662caf628a376d1e3b52b56b7ee8d31", "patch": "@@ -45,8 +45,7 @@ export async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick,\n     if (items.length === 0) {\n         // it is the debug case, run always has at least 'cargo check ...'\n         // see crates\\rust-analyzer\\src\\main_loop\\handlers.rs, handle_runnables\n-        vscode.window.showErrorMessage(\"There's no debug target!\")\n-            .then(() => { }, console.error);\n+        await vscode.window.showErrorMessage(\"There's no debug target!\");\n         return;\n     }\n \n@@ -66,8 +65,8 @@ export async function selectRunnable(ctx: Ctx, prevRunnable?: RunnableQuickPick,\n         disposables.push(\n             quickPick.onDidHide(() => close()),\n             quickPick.onDidAccept(() => close(quickPick.selectedItems[0])),\n-            quickPick.onDidTriggerButton((_button) => {\n-                makeDebugConfig(ctx, quickPick.activeItems[0].runnable).catch(console.error);\n+            quickPick.onDidTriggerButton(async (_button) => {\n+                await makeDebugConfig(ctx, quickPick.activeItems[0].runnable);\n                 close();\n             }),\n             quickPick.onDidChangeActive((active) => {"}]}