{"sha": "5446a52b4bcdca0938f6393732de6e0c13305d9b", "node_id": "C_kwDOAAsO6NoAKDU0NDZhNTJiNGJjZGNhMDkzOGY2MzkzNzMyZGU2ZTBjMTMzMDVkOWI", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-07T10:48:40Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-11-25T08:40:03Z"}, "message": "Add a `because` to errors derived from fields", "tree": {"sha": "0aab55332c1b377713a29dbcced7dfccd2388649", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aab55332c1b377713a29dbcced7dfccd2388649"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5446a52b4bcdca0938f6393732de6e0c13305d9b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5446a52b4bcdca0938f6393732de6e0c13305d9b", "html_url": "https://github.com/rust-lang/rust/commit/5446a52b4bcdca0938f6393732de6e0c13305d9b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5446a52b4bcdca0938f6393732de6e0c13305d9b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b6f8e500c2d2dedfa838b18b93952486c12b6f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6f8e500c2d2dedfa838b18b93952486c12b6f5", "html_url": "https://github.com/rust-lang/rust/commit/9b6f8e500c2d2dedfa838b18b93952486c12b6f5"}], "stats": {"total": 67, "additions": 33, "deletions": 34}, "files": [{"sha": "3aee97e790863266344234cfef5b90df6c0b62bf", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/5446a52b4bcdca0938f6393732de6e0c13305d9b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5446a52b4bcdca0938f6393732de6e0c13305d9b/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=5446a52b4bcdca0938f6393732de6e0c13305d9b", "patch": "@@ -2410,7 +2410,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n         /// Information about why a type cannot be initialized this way.\n         struct InitError {\n             message: String,\n-            /// Spans from struct fields and similar can be obtained from just the type.\n+            /// Spans from struct fields and similar that can be obtained from just the type.\n             span: Option<Span>,\n             /// Used to report a trace through adts.\n             nested: Option<Box<InitError>>,\n@@ -2497,7 +2497,7 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n             descr: &str,\n             init: InitKind,\n         ) -> Option<InitError> {\n-            let field_err = variant.fields.iter().find_map(|field| {\n+            let mut field_err = variant.fields.iter().find_map(|field| {\n                 ty_find_init_error(cx, field.ty(cx.tcx, substs), init).map(|mut err| {\n                     if !field.did.is_local() {\n                         err\n@@ -2515,28 +2515,27 @@ impl<'tcx> LateLintPass<'tcx> for InvalidValue {\n \n             // Check if this ADT has a constrained layout (like `NonNull` and friends).\n             if let Ok(layout) = cx.tcx.layout_of(cx.param_env.and(ty)) {\n-                match &layout.abi {\n-                    Abi::Scalar(scalar) | Abi::ScalarPair(scalar, _) => {\n-                        let range = scalar.valid_range(cx);\n-                        if !range.contains(0) {\n-                            return Some(\n-                                InitError::from(format!(\"`{}` must be non-null\", ty))\n-                                    .nested(field_err),\n-                            );\n-                        } else if init == InitKind::Uninit && !scalar.is_always_valid(cx) {\n-                            // Prefer reporting on the fields over the entire struct for uninit,\n-                            // as the information bubbles out and it may be unclear why the type can't\n-                            // be null from just its outside signature.\n-                            return Some(\n-                                InitError::from(format!(\n-                                    \"`{}` must be initialized inside its custom valid range\",\n-                                    ty,\n-                                ))\n-                                .nested(field_err),\n-                            );\n+                if let Abi::Scalar(scalar) | Abi::ScalarPair(scalar, _) = &layout.abi {\n+                    let range = scalar.valid_range(cx);\n+                    let msg = if !range.contains(0) {\n+                        \"must be non-null\"\n+                    } else if init == InitKind::Uninit && !scalar.is_always_valid(cx) {\n+                        // Prefer reporting on the fields over the entire struct for uninit,\n+                        // as the information bubbles out and it may be unclear why the type can't\n+                        // be null from just its outside signature.\n+\n+                        \"must be initialized inside its custom valid range\"\n+                    } else {\n+                        return field_err;\n+                    };\n+                    if let Some(field_err) = &mut field_err {\n+                        // Most of the time, if the field error is the same as the struct error,\n+                        // the struct error only happens because of the field error.\n+                        if field_err.message.contains(msg) {\n+                            field_err.message = format!(\"because {}\", field_err.message);\n                         }\n                     }\n-                    _ => {}\n+                    return Some(InitError::from(format!(\"`{ty}` {msg}\")).nested(field_err));\n                 }\n             }\n             field_err"}, {"sha": "afa09a074ecf1e684f48782bfe511347867f4168", "filename": "src/test/ui/lint/invalid_value.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5446a52b4bcdca0938f6393732de6e0c13305d9b/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5446a52b4bcdca0938f6393732de6e0c13305d9b/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Finvalid_value.stderr?ref=5446a52b4bcdca0938f6393732de6e0c13305d9b", "patch": "@@ -35,7 +35,7 @@ LL |         let _val: Wrap<&'static T> = mem::zeroed();\n    |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `Wrap<&T>` must be non-null\n-note: references must be non-null (in this struct field)\n+note: because references must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:17:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n@@ -51,7 +51,7 @@ LL |         let _val: Wrap<&'static T> = mem::uninitialized();\n    |                                      help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `Wrap<&T>` must be non-null\n-note: references must be non-null (in this struct field)\n+note: because references must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:17:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n@@ -163,7 +163,7 @@ LL |         let _val: Ref = mem::zeroed();\n    |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `Ref` must be non-null\n-note: references must be non-null (in this struct field)\n+note: because references must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:14:12\n    |\n LL | struct Ref(&'static i32);\n@@ -179,7 +179,7 @@ LL |         let _val: Ref = mem::uninitialized();\n    |                         help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `Ref` must be non-null\n-note: references must be non-null (in this struct field)\n+note: because references must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:14:12\n    |\n LL | struct Ref(&'static i32);\n@@ -217,7 +217,7 @@ LL |         let _val: Wrap<fn()> = mem::zeroed();\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `Wrap<fn()>` must be non-null\n-note: function pointers must be non-null (in this struct field)\n+note: because function pointers must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:17:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n@@ -233,7 +233,7 @@ LL |         let _val: Wrap<fn()> = mem::uninitialized();\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `Wrap<fn()>` must be non-null\n-note: function pointers must be non-null (in this struct field)\n+note: because function pointers must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:17:18\n    |\n LL | struct Wrap<T> { wrapped: T }\n@@ -249,7 +249,7 @@ LL |         let _val: WrapEnum<fn()> = mem::zeroed();\n    |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `WrapEnum<fn()>` must be non-null\n-note: function pointers must be non-null (in this field of the only potentially inhabited enum variant)\n+note: because function pointers must be non-null (in this field of the only potentially inhabited enum variant)\n   --> $DIR/invalid_value.rs:18:28\n    |\n LL | enum WrapEnum<T> { Wrapped(T) }\n@@ -265,7 +265,7 @@ LL |         let _val: WrapEnum<fn()> = mem::uninitialized();\n    |                                    help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `WrapEnum<fn()>` must be non-null\n-note: function pointers must be non-null (in this field of the only potentially inhabited enum variant)\n+note: because function pointers must be non-null (in this field of the only potentially inhabited enum variant)\n   --> $DIR/invalid_value.rs:18:28\n    |\n LL | enum WrapEnum<T> { Wrapped(T) }\n@@ -285,7 +285,7 @@ note: `RefPair` must be non-null (in this struct field)\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n-note: references must be non-null (in this struct field)\n+note: because references must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:15:16\n    |\n LL | struct RefPair((&'static i32, i32));\n@@ -305,7 +305,7 @@ note: `RefPair` must be non-null (in this struct field)\n    |\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n-note: references must be non-null (in this struct field)\n+note: because references must be non-null (in this struct field)\n   --> $DIR/invalid_value.rs:15:16\n    |\n LL | struct RefPair((&'static i32, i32));\n@@ -441,7 +441,7 @@ LL |         let _val: OneFruitNonZero = mem::zeroed();\n    |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `OneFruitNonZero` must be non-null\n-note: `std::num::NonZeroU32` must be non-null (in this field of the only potentially inhabited enum variant)\n+note: because `std::num::NonZeroU32` must be non-null (in this field of the only potentially inhabited enum variant)\n   --> $DIR/invalid_value.rs:39:12\n    |\n LL |     Banana(NonZeroU32),\n@@ -457,7 +457,7 @@ LL |         let _val: OneFruitNonZero = mem::uninitialized();\n    |                                     help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n    = note: `OneFruitNonZero` must be non-null\n-note: `std::num::NonZeroU32` must be non-null (in this field of the only potentially inhabited enum variant)\n+note: because `std::num::NonZeroU32` must be non-null (in this field of the only potentially inhabited enum variant)\n   --> $DIR/invalid_value.rs:39:12\n    |\n LL |     Banana(NonZeroU32),"}]}