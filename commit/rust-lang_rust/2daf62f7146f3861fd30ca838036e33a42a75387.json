{"sha": "2daf62f7146f3861fd30ca838036e33a42a75387", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYWY2MmY3MTQ2ZjM4NjFmZDMwY2E4MzgwMzZlMzNhNDJhNzUzODc=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-06-08T19:34:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-08T19:34:31Z"}, "message": "Merge pull request #188 from RalfJung/overflow\n\nBail out on overflow", "tree": {"sha": "ceece95a2f8cf7707ac912d49f889102ccaca989", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ceece95a2f8cf7707ac912d49f889102ccaca989"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2daf62f7146f3861fd30ca838036e33a42a75387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2daf62f7146f3861fd30ca838036e33a42a75387", "html_url": "https://github.com/rust-lang/rust/commit/2daf62f7146f3861fd30ca838036e33a42a75387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2daf62f7146f3861fd30ca838036e33a42a75387/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cad0188c720a939dc6e10b05f555fe46e538e5b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cad0188c720a939dc6e10b05f555fe46e538e5b0", "html_url": "https://github.com/rust-lang/rust/commit/cad0188c720a939dc6e10b05f555fe46e538e5b0"}, {"sha": "3a5abf031bd576e791464365fec154bfb1d9b794", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5abf031bd576e791464365fec154bfb1d9b794", "html_url": "https://github.com/rust-lang/rust/commit/3a5abf031bd576e791464365fec154bfb1d9b794"}], "stats": {"total": 35, "additions": 21, "deletions": 14}, "files": [{"sha": "1a8ca2d03ca6c133fba2a8201ec9066c5ac17ea9", "filename": "src/error.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2daf62f7146f3861fd30ca838036e33a42a75387/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2daf62f7146f3861fd30ca838036e33a42a75387/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=2daf62f7146f3861fd30ca838036e33a42a75387", "patch": "@@ -23,7 +23,6 @@ pub enum EvalError<'tcx> {\n     },\n     ReadPointerAsBytes,\n     InvalidPointerMath,\n-    OverflowingPointerMath,\n     ReadUndefBytes,\n     DeadLocal,\n     InvalidBoolOp(mir::BinOp),\n@@ -32,6 +31,7 @@ pub enum EvalError<'tcx> {\n     ExecuteMemory,\n     ArrayIndexOutOfBounds(Span, u64, u64),\n     Math(Span, ConstMathErr),\n+    OverflowingMath,\n     InvalidChar(u128),\n     OutOfMemory {\n         allocation_size: u64,\n@@ -83,8 +83,6 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"a raw memory access tried to access part of a pointer value as raw bytes\",\n             EvalError::InvalidPointerMath =>\n                 \"attempted to do math or a comparison on pointers into different allocations\",\n-            EvalError::OverflowingPointerMath =>\n-                \"attempted to do overflowing math on a pointer\",\n             EvalError::ReadUndefBytes =>\n                 \"attempted to read undefined bytes\",\n             EvalError::DeadLocal =>\n@@ -100,6 +98,8 @@ impl<'tcx> Error for EvalError<'tcx> {\n                 \"array index out of bounds\",\n             EvalError::Math(..) =>\n                 \"mathematical operation failed\",\n+            EvalError::OverflowingMath =>\n+                \"attempted to do overflowing math\",\n             EvalError::NoMirFor(..) =>\n                 \"mir not found\",\n             EvalError::InvalidChar(..) =>"}, {"sha": "e358b98911a1e24ff35101eeca68eb2366a51269", "filename": "src/eval_context.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2daf62f7146f3861fd30ca838036e33a42a75387/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2daf62f7146f3861fd30ca838036e33a42a75387/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=2daf62f7146f3861fd30ca838036e33a42a75387", "patch": "@@ -452,8 +452,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             BinaryOp(bin_op, ref left, ref right) => {\n-                // ignore overflow bit, rustc inserts check branches for us\n-                self.intrinsic_overflowing(bin_op, left, right, dest, dest_ty)?;\n+                if self.intrinsic_overflowing(bin_op, left, right, dest, dest_ty)? {\n+                    // There was an overflow in an unchecked binop.  Right now, we consider this an error and bail out.\n+                    // The rationale is that the reason rustc emits unchecked binops in release mode (vs. the checked binops\n+                    // it emits in debug mode) is performance, but it doesn't cost us any performance in miri.\n+                    // If, however, the compiler ever starts transforming unchecked intrinsics into unchecked binops,\n+                    // we have to go back to just ignoring the overflow here.\n+                    return Err(EvalError::OverflowingMath);\n+                }\n             }\n \n             CheckedBinaryOp(bin_op, ref left, ref right) => {\n@@ -869,7 +875,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             self.memory.check_bounds(ptr, false)?;\n             Ok(ptr)\n         } else {\n-            Err(EvalError::OverflowingPointerMath)\n+            Err(EvalError::OverflowingMath)\n         }\n     }\n "}, {"sha": "f106f9d088c00d73741237857998e567aaa08f03", "filename": "src/memory.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2daf62f7146f3861fd30ca838036e33a42a75387/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2daf62f7146f3861fd30ca838036e33a42a75387/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=2daf62f7146f3861fd30ca838036e33a42a75387", "patch": "@@ -73,7 +73,7 @@ impl Pointer {\n             if let Some(res) = self.offset.checked_sub(n) {\n                 Ok(Pointer::new(self.alloc_id, res))\n             } else {\n-                Err(EvalError::OverflowingPointerMath)\n+                Err(EvalError::OverflowingMath)\n             }\n         } else {\n             self.offset(i as u64, layout)\n@@ -83,12 +83,12 @@ impl Pointer {\n     pub fn offset<'tcx>(self, i: u64, layout: &TargetDataLayout) -> EvalResult<'tcx, Self> {\n         if let Some(res) = self.offset.checked_add(i) {\n             if res as u128 >= (1u128 << layout.pointer_size.bits()) {\n-                Err(EvalError::OverflowingPointerMath)\n+                Err(EvalError::OverflowingMath)\n             } else {\n                 Ok(Pointer::new(self.alloc_id, res))\n             }\n         } else {\n-            Err(EvalError::OverflowingPointerMath)\n+            Err(EvalError::OverflowingMath)\n         }\n     }\n \n@@ -166,7 +166,8 @@ pub struct Memory<'a, 'tcx> {\n     /// We mark memory as \"packed\" or \"unaligned\" for a single statement, and clear the marking\n     /// afterwards. In the case where no packed structs are present, it's just a single emptyness\n     /// check of a set instead of heavily influencing all memory access code as other solutions\n-    /// would.\n+    /// would. This is simpler than the alternative of passing a \"packed\" parameter to every\n+    /// load/store method.\n     ///\n     /// One disadvantage of this solution is the fact that you can cast a pointer to a packed\n     /// struct to a pointer to a normal struct and if you access a field of both in the same MIR"}, {"sha": "ce3216f00153a8c74a494fb14a58e283549cfa3f", "filename": "src/terminator/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2daf62f7146f3861fd30ca838036e33a42a75387/src%2Fterminator%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2daf62f7146f3861fd30ca838036e33a42a75387/src%2Fterminator%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fintrinsic.rs?ref=2daf62f7146f3861fd30ca838036e33a42a75387", "patch": "@@ -43,7 +43,6 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n \n             \"arith_offset\" => {\n-                // FIXME: Switch to non-checked, wrapped version of pointer_offset\n                 let offset = self.value_to_primval(arg_vals[1], isize)?.to_i128()? as i64;\n                 let ptr = arg_vals[0].read_ptr(&self.memory)?;\n                 let result_ptr = self.wrapping_pointer_offset(ptr, substs.type_at(0), offset)?;"}, {"sha": "f7546494574b0d67f907c72d4d7cef416a997b2e", "filename": "tests/compile-fail/out_of_bounds_ptr_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2daf62f7146f3861fd30ca838036e33a42a75387/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2daf62f7146f3861fd30ca838036e33a42a75387/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_ptr_2.rs?ref=2daf62f7146f3861fd30ca838036e33a42a75387", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: overflowing math on a pointer\n+// error-pattern: overflowing math\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;"}, {"sha": "578468c3399bbd42ff48a8414c30646d868d6634", "filename": "tests/compile-fail/ptr_offset_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2daf62f7146f3861fd30ca838036e33a42a75387/tests%2Fcompile-fail%2Fptr_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2daf62f7146f3861fd30ca838036e33a42a75387/tests%2Fcompile-fail%2Fptr_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fptr_offset_overflow.rs?ref=2daf62f7146f3861fd30ca838036e33a42a75387", "patch": "@@ -1,4 +1,4 @@\n-//error-pattern: overflowing math on a pointer\n+//error-pattern: overflowing math\n fn main() {\n     let v = [1i8, 2];\n     let x = &v[1] as *const i8;"}, {"sha": "4ab121d121031031746b41381ff981f410108092", "filename": "tests/run-pass/aux_test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2daf62f7146f3861fd30ca838036e33a42a75387/tests%2Frun-pass%2Faux_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2daf62f7146f3861fd30ca838036e33a42a75387/tests%2Frun-pass%2Faux_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Faux_test.rs?ref=2daf62f7146f3861fd30ca838036e33a42a75387", "patch": "@@ -1,6 +1,7 @@\n // aux-build:dep.rs\n-// This ignores the test against rustc, but runs it against miri:\n+\n // ignore-cross-compile\n+// TODO: The above accidentally also ignores this test against rustc even when are are not cross-compiling.\n \n extern crate dep;\n "}]}