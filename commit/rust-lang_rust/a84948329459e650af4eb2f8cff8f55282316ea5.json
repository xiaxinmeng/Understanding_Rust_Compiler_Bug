{"sha": "a84948329459e650af4eb2f8cff8f55282316ea5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NDk0ODMyOTQ1OWU2NTBhZjRlYjJmOGNmZjhmNTUyODIzMTZlYTU=", "commit": {"author": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-07-23T16:44:44Z"}, "committer": {"name": "JarredAllen", "email": "jarredallen73@gmail.com", "date": "2020-08-03T04:34:17Z"}, "message": "Fix formatting and dogfood fallout", "tree": {"sha": "e1e75411b570a7e4ce7a507508f694c16a07a99f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1e75411b570a7e4ce7a507508f694c16a07a99f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a84948329459e650af4eb2f8cff8f55282316ea5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a84948329459e650af4eb2f8cff8f55282316ea5", "html_url": "https://github.com/rust-lang/rust/commit/a84948329459e650af4eb2f8cff8f55282316ea5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a84948329459e650af4eb2f8cff8f55282316ea5/comments", "author": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JarredAllen", "id": 19656507, "node_id": "MDQ6VXNlcjE5NjU2NTA3", "avatar_url": "https://avatars.githubusercontent.com/u/19656507?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JarredAllen", "html_url": "https://github.com/JarredAllen", "followers_url": "https://api.github.com/users/JarredAllen/followers", "following_url": "https://api.github.com/users/JarredAllen/following{/other_user}", "gists_url": "https://api.github.com/users/JarredAllen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JarredAllen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JarredAllen/subscriptions", "organizations_url": "https://api.github.com/users/JarredAllen/orgs", "repos_url": "https://api.github.com/users/JarredAllen/repos", "events_url": "https://api.github.com/users/JarredAllen/events{/privacy}", "received_events_url": "https://api.github.com/users/JarredAllen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f", "html_url": "https://github.com/rust-lang/rust/commit/c86f4109fdd83fef1ea69c0f3c878ace0aa7c56f"}], "stats": {"total": 67, "additions": 41, "deletions": 26}, "files": [{"sha": "2181304f0064df296f2621a5cc95affce01248f7", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a84948329459e650af4eb2f8cff8f55282316ea5/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84948329459e650af4eb2f8cff8f55282316ea5/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=a84948329459e650af4eb2f8cff8f55282316ea5", "patch": "@@ -2359,7 +2359,10 @@ impl<'a, 'tcx> Visitor<'tcx> for VarCollectorVisitor<'a, 'tcx> {\n const NEEDLESS_COLLECT_MSG: &str = \"avoid using `collect()` when not needed\";\n \n fn check_needless_collect<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) {\n-    // Check for direct, immediate usage\n+    check_needless_collect_direct_usage(expr, cx);\n+    check_needless_collect_indirect_usage(expr, cx);\n+}\n+fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) {\n     if_chain! {\n         if let ExprKind::MethodCall(ref method, _, ref args, _) = expr.kind;\n         if let ExprKind::MethodCall(ref chain_method, _, _, _) = args[0].kind;\n@@ -2425,7 +2428,9 @@ fn check_needless_collect<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) {\n             }\n         }\n     }\n-    // Check for collecting it and then turning it back into an iterator later\n+}\n+\n+fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) {\n     if let ExprKind::Block(ref block, _) = expr.kind {\n         for ref stmt in block.stmts {\n             if_chain! {\n@@ -2484,10 +2489,18 @@ impl IterFunction {\n     }\n     fn get_suggestion_text(&self) -> &'static str {\n         match &self.func {\n-            IterFunctionKind::IntoIter => \"Use the original Iterator instead of collecting it and then producing a new one\",\n-            IterFunctionKind::Len => \"Take the original Iterator's count instead of collecting it and finding the length\",\n-            IterFunctionKind::IsEmpty => \"Check if the original Iterator has anything instead of collecting it and seeing if it's empty\",\n-            IterFunctionKind::Contains(_) => \"Check if the original Iterator contains an element instead of collecting then checking\",\n+            IterFunctionKind::IntoIter => {\n+                \"Use the original Iterator instead of collecting it and then producing a new one\"\n+            },\n+            IterFunctionKind::Len => {\n+                \"Take the original Iterator's count instead of collecting it and finding the length\"\n+            },\n+            IterFunctionKind::IsEmpty => {\n+                \"Check if the original Iterator has anything instead of collecting it and seeing if it's empty\"\n+            },\n+            IterFunctionKind::Contains(_) => {\n+                \"Check if the original Iterator contains an element instead of collecting then checking\"\n+            },\n         }\n     }\n }\n@@ -2505,6 +2518,8 @@ struct IterFunctionVisitor {\n }\n impl<'tcx> Visitor<'tcx> for IterFunctionVisitor {\n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n+        // TODO Check if the target identifier is being used in something other\n+        // than a function call\n         if_chain! {\n             if let ExprKind::MethodCall(method_name, _, ref args, _) = &expr.kind;\n             if let Some(Expr { kind: ExprKind::Path(QPath::Resolved(_, ref path)), .. }) = args.get(0);\n@@ -2515,10 +2530,18 @@ impl<'tcx> Visitor<'tcx> for IterFunctionVisitor {\n                 let is_empty = sym!(is_empty);\n                 let contains = sym!(contains);\n                 match method_name.ident.name {\n-                    name if name == into_iter => self.uses.push(IterFunction { func: IterFunctionKind::IntoIter, span: expr.span }),\n-                    name if name == len => self.uses.push(IterFunction { func: IterFunctionKind::Len, span: expr.span }),\n-                    name if name == is_empty => self.uses.push(IterFunction { func: IterFunctionKind::IsEmpty, span: expr.span }),\n-                    name if name == contains => self.uses.push(IterFunction { func: IterFunctionKind::Contains(args[1].span), span: expr.span }),\n+                    name if name == into_iter => self.uses.push(\n+                        IterFunction { func: IterFunctionKind::IntoIter, span: expr.span }\n+                    ),\n+                    name if name == len => self.uses.push(\n+                        IterFunction { func: IterFunctionKind::Len, span: expr.span }\n+                    ),\n+                    name if name == is_empty => self.uses.push(\n+                        IterFunction { func: IterFunctionKind::IsEmpty, span: expr.span }\n+                    ),\n+                    name if name == contains => self.uses.push(\n+                        IterFunction { func: IterFunctionKind::Contains(args[1].span), span: expr.span }\n+                    ),\n                     _ => self.seen_other = true,\n                 }\n             }"}, {"sha": "163eaf965dd6ac4cbc55c4c5390b5fa114334363", "filename": "tests/ui/needless_collect_indirect.fixed", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a84948329459e650af4eb2f8cff8f55282316ea5/tests%2Fui%2Fneedless_collect_indirect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a84948329459e650af4eb2f8cff8f55282316ea5/tests%2Fui%2Fneedless_collect_indirect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.fixed?ref=a84948329459e650af4eb2f8cff8f55282316ea5", "patch": "@@ -1,16 +1,12 @@\n // run-rustfix\n \n #[allow(unused)]\n-\n use std::collections::{HashMap, VecDeque};\n \n fn main() {\n     let sample = [1; 5];\n     let indirect_iter = sample.iter().collect::<Vec<_>>();\n-    indirect_iter\n-        .into_iter()\n-        .map(|x| (x, x + 1))\n-        .collect::<HashMap<_, _>>();\n+    indirect_iter.into_iter().map(|x| (x, x + 1)).collect::<HashMap<_, _>>();\n     let indirect_len = sample.iter().collect::<VecDeque<_>>();\n     indirect_len.len();\n     let indirect_empty = sample.iter().collect::<VecDeque<_>>();"}, {"sha": "163eaf965dd6ac4cbc55c4c5390b5fa114334363", "filename": "tests/ui/needless_collect_indirect.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a84948329459e650af4eb2f8cff8f55282316ea5/tests%2Fui%2Fneedless_collect_indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84948329459e650af4eb2f8cff8f55282316ea5/tests%2Fui%2Fneedless_collect_indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.rs?ref=a84948329459e650af4eb2f8cff8f55282316ea5", "patch": "@@ -1,16 +1,12 @@\n // run-rustfix\n \n #[allow(unused)]\n-\n use std::collections::{HashMap, VecDeque};\n \n fn main() {\n     let sample = [1; 5];\n     let indirect_iter = sample.iter().collect::<Vec<_>>();\n-    indirect_iter\n-        .into_iter()\n-        .map(|x| (x, x + 1))\n-        .collect::<HashMap<_, _>>();\n+    indirect_iter.into_iter().map(|x| (x, x + 1)).collect::<HashMap<_, _>>();\n     let indirect_len = sample.iter().collect::<VecDeque<_>>();\n     indirect_len.len();\n     let indirect_empty = sample.iter().collect::<VecDeque<_>>();"}, {"sha": "700c73b0b223dffebd66c7e065116c666b106ce1", "filename": "tests/ui/needless_collect_indirect.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a84948329459e650af4eb2f8cff8f55282316ea5/tests%2Fui%2Fneedless_collect_indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a84948329459e650af4eb2f8cff8f55282316ea5/tests%2Fui%2Fneedless_collect_indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_collect_indirect.stderr?ref=a84948329459e650af4eb2f8cff8f55282316ea5", "patch": "@@ -1,19 +1,19 @@\n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect_indirect.rs:9:5\n+  --> $DIR/needless_collect_indirect.rs:8:5\n    |\n LL | /     let indirect_iter = sample.iter().collect::<Vec<_>>();\n-LL | |     indirect_iter\n+LL | |     indirect_iter.into_iter().map(|x| (x, x + 1)).collect::<HashMap<_, _>>();\n    | |____^\n    |\n    = note: `-D clippy::needless-collect` implied by `-D warnings`\n help: Use the original Iterator instead of collecting it and then producing a new one\n    |\n LL |     \n-LL |     sample.iter()\n+LL |     sample.iter().map(|x| (x, x + 1)).collect::<HashMap<_, _>>();\n    |\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect_indirect.rs:14:5\n+  --> $DIR/needless_collect_indirect.rs:10:5\n    |\n LL | /     let indirect_len = sample.iter().collect::<VecDeque<_>>();\n LL | |     indirect_len.len();\n@@ -26,7 +26,7 @@ LL |     sample.iter().count();\n    |\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect_indirect.rs:16:5\n+  --> $DIR/needless_collect_indirect.rs:12:5\n    |\n LL | /     let indirect_empty = sample.iter().collect::<VecDeque<_>>();\n LL | |     indirect_empty.is_empty();\n@@ -39,7 +39,7 @@ LL |     sample.iter().next().is_none();\n    |\n \n error: avoid using `collect()` when not needed\n-  --> $DIR/needless_collect_indirect.rs:18:5\n+  --> $DIR/needless_collect_indirect.rs:14:5\n    |\n LL | /     let indirect_contains = sample.iter().collect::<VecDeque<_>>();\n LL | |     indirect_contains.contains(&&5);"}]}