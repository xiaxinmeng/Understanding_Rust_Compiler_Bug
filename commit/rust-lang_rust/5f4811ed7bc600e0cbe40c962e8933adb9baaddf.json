{"sha": "5f4811ed7bc600e0cbe40c962e8933adb9baaddf", "node_id": "C_kwDOAAsO6NoAKDVmNDgxMWVkN2JjNjAwZTBjYmU0MGM5NjJlODkzM2FkYjliYWFkZGY", "commit": {"author": {"name": "Yacin Tmimi", "email": "ytmimi@horizonmedia.com", "date": "2021-10-14T21:16:28Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-10-17T21:27:05Z"}, "message": "Handle DefinitiveListTactic::SpecialMacro when writing pre-comments\n\nResolves 4615\n\nPreviously only Vertical and Mixed enum variants of DefinitiveListTactic\nwere considered when rewriting pre-comments for inner items in\nlists::write_list.\n\nBecause we failed to considering the SpecialMacro variant we ended up in\na scenario where a ListItem with a pre_comment and a pre_comment_style\nof ListItemCommentStyle::DifferentLine was written on the same line as the\nlist item itself.\n\nNow we apply the same pre-comment formatting to SpecialMacro, Vertical,\nand Mixed variants of DefinitiveListTactic.", "tree": {"sha": "b21523a63c23b31f38ebcc9cc93a949976b5d0d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b21523a63c23b31f38ebcc9cc93a949976b5d0d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f4811ed7bc600e0cbe40c962e8933adb9baaddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4811ed7bc600e0cbe40c962e8933adb9baaddf", "html_url": "https://github.com/rust-lang/rust/commit/5f4811ed7bc600e0cbe40c962e8933adb9baaddf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f4811ed7bc600e0cbe40c962e8933adb9baaddf/comments", "author": {"login": "ytmimi", "id": 29028348, "node_id": "MDQ6VXNlcjI5MDI4MzQ4", "avatar_url": "https://avatars.githubusercontent.com/u/29028348?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ytmimi", "html_url": "https://github.com/ytmimi", "followers_url": "https://api.github.com/users/ytmimi/followers", "following_url": "https://api.github.com/users/ytmimi/following{/other_user}", "gists_url": "https://api.github.com/users/ytmimi/gists{/gist_id}", "starred_url": "https://api.github.com/users/ytmimi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ytmimi/subscriptions", "organizations_url": "https://api.github.com/users/ytmimi/orgs", "repos_url": "https://api.github.com/users/ytmimi/repos", "events_url": "https://api.github.com/users/ytmimi/events{/privacy}", "received_events_url": "https://api.github.com/users/ytmimi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cff306b61922ed5f460a4f6cbd4134498a3c42f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cff306b61922ed5f460a4f6cbd4134498a3c42f", "html_url": "https://github.com/rust-lang/rust/commit/0cff306b61922ed5f460a4f6cbd4134498a3c42f"}], "stats": {"total": 55, "additions": 33, "deletions": 22}, "files": [{"sha": "f0c2ae1499f019744330f8975f5046da78be4de9", "filename": "src/lists.rs", "status": "modified", "additions": 24, "deletions": 22, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5f4811ed7bc600e0cbe40c962e8933adb9baaddf/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4811ed7bc600e0cbe40c962e8933adb9baaddf/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=5f4811ed7bc600e0cbe40c962e8933adb9baaddf", "patch": "@@ -367,29 +367,31 @@ where\n             result.push_str(&comment);\n \n             if !inner_item.is_empty() {\n-                if tactic == DefinitiveListTactic::Vertical || tactic == DefinitiveListTactic::Mixed\n-                {\n-                    // We cannot keep pre-comments on the same line if the comment if normalized.\n-                    let keep_comment = if formatting.config.normalize_comments()\n-                        || item.pre_comment_style == ListItemCommentStyle::DifferentLine\n-                    {\n-                        false\n-                    } else {\n-                        // We will try to keep the comment on the same line with the item here.\n-                        // 1 = ` `\n-                        let total_width = total_item_width(item) + item_sep_len + 1;\n-                        total_width <= formatting.shape.width\n-                    };\n-                    if keep_comment {\n-                        result.push(' ');\n-                    } else {\n-                        result.push('\\n');\n-                        result.push_str(indent_str);\n-                        // This is the width of the item (without comments).\n-                        line_len = item.item.as_ref().map_or(0, |s| unicode_str_width(&s));\n+                match tactic {\n+                    DefinitiveListTactic::SpecialMacro(_)\n+                    | DefinitiveListTactic::Vertical\n+                    | DefinitiveListTactic::Mixed => {\n+                        // We cannot keep pre-comments on the same line if the comment is normalized\n+                        let keep_comment = if formatting.config.normalize_comments()\n+                            || item.pre_comment_style == ListItemCommentStyle::DifferentLine\n+                        {\n+                            false\n+                        } else {\n+                            // We will try to keep the comment on the same line with the item here.\n+                            // 1 = ` `\n+                            let total_width = total_item_width(item) + item_sep_len + 1;\n+                            total_width <= formatting.shape.width\n+                        };\n+                        if keep_comment {\n+                            result.push(' ');\n+                        } else {\n+                            result.push('\\n');\n+                            result.push_str(indent_str);\n+                            // This is the width of the item (without comments).\n+                            line_len = item.item.as_ref().map_or(0, |s| unicode_str_width(&s));\n+                        }\n                     }\n-                } else {\n-                    result.push(' ');\n+                    _ => result.push(' '),\n                 }\n             }\n             item_max_width = None;"}, {"sha": "89af5d1239dd07db1b06d2ff5d1b862d2a7e52b5", "filename": "tests/source/issue-4615/minimum_example.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f4811ed7bc600e0cbe40c962e8933adb9baaddf/tests%2Fsource%2Fissue-4615%2Fminimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4811ed7bc600e0cbe40c962e8933adb9baaddf/tests%2Fsource%2Fissue-4615%2Fminimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-4615%2Fminimum_example.rs?ref=5f4811ed7bc600e0cbe40c962e8933adb9baaddf", "patch": "@@ -0,0 +1,4 @@\n+info!(//debug\n+    \"{}: sending function_code={:04x} data={:04x} crc=0x{:04X} data={:02X?}\",\n+    self.name, function_code, data, crc, output_cmd\n+);"}, {"sha": "223b89b812d3d67eb047cf8ec39a6ac62f7ca44e", "filename": "tests/target/issue-4615/minimum_example.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5f4811ed7bc600e0cbe40c962e8933adb9baaddf/tests%2Ftarget%2Fissue-4615%2Fminimum_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f4811ed7bc600e0cbe40c962e8933adb9baaddf/tests%2Ftarget%2Fissue-4615%2Fminimum_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-4615%2Fminimum_example.rs?ref=5f4811ed7bc600e0cbe40c962e8933adb9baaddf", "patch": "@@ -0,0 +1,5 @@\n+info!(\n+    //debug\n+    \"{}: sending function_code={:04x} data={:04x} crc=0x{:04X} data={:02X?}\",\n+    self.name, function_code, data, crc, output_cmd\n+);"}]}