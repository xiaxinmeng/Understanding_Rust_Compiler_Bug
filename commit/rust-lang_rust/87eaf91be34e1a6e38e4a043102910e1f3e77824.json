{"sha": "87eaf91be34e1a6e38e4a043102910e1f3e77824", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3ZWFmOTFiZTM0ZTFhNmUzOGU0YTA0MzEwMjkxMGUxZjNlNzc4MjQ=", "commit": {"author": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-28T22:00:03Z"}, "committer": {"name": "Eric Holk", "email": "eric.holk@gmail.com", "date": "2012-06-28T22:11:09Z"}, "message": "Replaced almost all vector+ in rustc (#2719)\n\nDidn't update shape because the changes were causing segfaults.", "tree": {"sha": "9aba96871ad4d79524b1339364603df966073c2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9aba96871ad4d79524b1339364603df966073c2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87eaf91be34e1a6e38e4a043102910e1f3e77824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87eaf91be34e1a6e38e4a043102910e1f3e77824", "html_url": "https://github.com/rust-lang/rust/commit/87eaf91be34e1a6e38e4a043102910e1f3e77824", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87eaf91be34e1a6e38e4a043102910e1f3e77824/comments", "author": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eholk", "id": 105766, "node_id": "MDQ6VXNlcjEwNTc2Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/105766?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eholk", "html_url": "https://github.com/eholk", "followers_url": "https://api.github.com/users/eholk/followers", "following_url": "https://api.github.com/users/eholk/following{/other_user}", "gists_url": "https://api.github.com/users/eholk/gists{/gist_id}", "starred_url": "https://api.github.com/users/eholk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eholk/subscriptions", "organizations_url": "https://api.github.com/users/eholk/orgs", "repos_url": "https://api.github.com/users/eholk/repos", "events_url": "https://api.github.com/users/eholk/events{/privacy}", "received_events_url": "https://api.github.com/users/eholk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54713afa20a9e3cb09ffe678aeb7d32630ef7b59", "url": "https://api.github.com/repos/rust-lang/rust/commits/54713afa20a9e3cb09ffe678aeb7d32630ef7b59", "html_url": "https://github.com/rust-lang/rust/commit/54713afa20a9e3cb09ffe678aeb7d32630ef7b59"}], "stats": {"total": 329, "additions": 182, "deletions": 147}, "files": [{"sha": "ac68287f8b74522f6eb2478b094085c6d3857b2b", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -490,7 +490,9 @@ fn mangle(ss: path) -> str {\n }\n \n fn exported_name(path: path, hash: @str, vers: @str) -> str {\n-    ret mangle(path + [path_name(hash)]/~ + [path_name(vers)]/~);\n+    ret mangle(\n+        vec::append_one(vec::append_one(path, path_name(hash)),\n+                        path_name(vers)));\n }\n \n fn mangle_exported_name(ccx: @crate_ctxt, path: path, t: ty::t) -> str {\n@@ -508,7 +510,7 @@ fn mangle_internal_name_by_type_only(ccx: @crate_ctxt,\n \n fn mangle_internal_name_by_path_and_seq(ccx: @crate_ctxt, path: path,\n                                         flav: @str) -> str {\n-    ret mangle(path + [path_name(@ccx.names(*flav))]/~);\n+    ret mangle(vec::append_one(path, path_name(@ccx.names(*flav))));\n }\n \n fn mangle_internal_name_by_path(_ccx: @crate_ctxt, path: path) -> str {\n@@ -577,8 +579,10 @@ fn link_binary(sess: session,\n     // The invocations of cc share some flags across platforms\n \n     let mut cc_args =\n-        [stage]/~ + sess.targ_cfg.target_strs.cc_args +\n-        [\"-o\", output, obj_filename]/~;\n+        vec::append([stage]/~, sess.targ_cfg.target_strs.cc_args);\n+    vec::push(cc_args, \"-o\");\n+    vec::push(cc_args, output);\n+    vec::push(cc_args, obj_filename);\n \n     let mut lib_cmd;\n     let os = sess.targ_cfg.os;"}, {"sha": "d0a36d3ad5a02c3512af17aebe9d2f16d85efca4", "filename": "src/rustc/back/rpath.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Frpath.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -29,18 +29,18 @@ fn get_rpath_flags(sess: session::session, out_filename: str) -> [str]/~ {\n     let libs = cstore::get_used_crate_files(sess.cstore);\n     // We don't currently rpath native libraries, but we know\n     // where rustrt is and we know every rust program needs it\n-    let libs = libs + [get_sysroot_absolute_rt_lib(sess)]/~;\n+    let libs = vec::append_one(libs, get_sysroot_absolute_rt_lib(sess));\n \n     let target_triple = sess.opts.target_triple;\n     let rpaths = get_rpaths(os, cwd, sysroot, output, libs, target_triple);\n     rpaths_to_flags(rpaths)\n }\n \n fn get_sysroot_absolute_rt_lib(sess: session::session) -> path::path {\n-    let path = [sess.filesearch.sysroot()]/~\n-        + filesearch::relative_target_lib_path(\n-            sess.opts.target_triple)\n-        + [os::dll_filename(\"rustrt\")]/~;\n+    let mut path = vec::append([sess.filesearch.sysroot()]/~,\n+                           filesearch::relative_target_lib_path(\n+                               sess.opts.target_triple));\n+    vec::push(path, os::dll_filename(\"rustrt\"));\n     path::connect_many(path)\n }\n \n@@ -83,7 +83,9 @@ fn get_rpaths(os: session::os, cwd: path::path, sysroot: path::path,\n     log_rpaths(\"absolute\", abs_rpaths);\n     log_rpaths(\"fallback\", fallback_rpaths);\n \n-    let rpaths = rel_rpaths + abs_rpaths + fallback_rpaths;\n+    let mut rpaths = rel_rpaths;\n+    vec::push_all(rpaths, abs_rpaths);\n+    vec::push_all(rpaths, fallback_rpaths);\n \n     // Remove duplicates\n     let rpaths = minimize_rpaths(rpaths);\n@@ -142,7 +144,7 @@ fn get_relative_to(abs1: path::path, abs2: path::path) -> path::path {\n     let mut path = []/~;\n     for uint::range(start_idx, len1 - 1u) {|_i| vec::push(path, \"..\"); };\n \n-    path += vec::slice(split2, start_idx, len2 - 1u);\n+    vec::push_all(path, vec::view(split2, start_idx, len2 - 1u));\n \n     if check vec::is_not_empty(path) {\n         ret path::connect_many(path);\n@@ -174,8 +176,9 @@ fn get_install_prefix_rpath(cwd: path::path, target_triple: str) -> str {\n         fail \"rustc compiled without CFG_PREFIX environment variable\";\n     }\n \n-    let path = [install_prefix]/~\n-        + filesearch::relative_target_lib_path(target_triple);\n+    let path = vec::append(\n+        [install_prefix]/~,\n+        filesearch::relative_target_lib_path(target_triple));\n     get_absolute(cwd, path::connect_many(path))\n }\n \n@@ -184,7 +187,7 @@ fn minimize_rpaths(rpaths: [str]/~) -> [str]/~ {\n     let mut minimized = []/~;\n     for rpaths.each {|rpath|\n         if !set.contains_key(rpath) {\n-            minimized += [rpath]/~;\n+            vec::push(minimized, rpath);\n             set.insert(rpath, ());\n         }\n     }"}, {"sha": "eb2fe10a821087f401342f9fbd9ab8629d2a0387", "filename": "src/rustc/back/upcall.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fupcall.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -36,7 +36,7 @@ fn declare_upcalls(targ_cfg: @session::config,\n             tys: [TypeRef]/~, rv: TypeRef) ->\n        ValueRef {\n         let mut arg_tys: [TypeRef]/~ = []/~;\n-        for tys.each {|t| arg_tys += [t]/~; }\n+        for tys.each {|t| vec::push(arg_tys, t); }\n         let fn_ty = T_fn(arg_tys, rv);\n         ret base::decl_cdecl_fn(llmod, prefix + name, fn_ty);\n     }"}, {"sha": "16c043aa74b8d2f1b6f270f289e551854a2630d2", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -73,7 +73,7 @@ fn build_configuration(sess: session, argv0: str, input: input) ->\n                 [attr::mk_word_item(@\"test\")]/~\n             } else { []/~ }\n         };\n-    ret user_cfg + gen_cfg + default_cfg;\n+    ret vec::append(vec::append(user_cfg, gen_cfg), default_cfg);\n }\n \n // Convert strings provided as --cfg [cfgspec] into a crate_cfg\n@@ -414,8 +414,8 @@ fn build_session_options(match: getopts::match,\n     let parse_only = opt_present(match, \"parse-only\");\n     let no_trans = opt_present(match, \"no-trans\");\n \n-    let lint_flags = (getopts::opt_strs(match, \"W\")\n-                      + getopts::opt_strs(match, \"warn\"));\n+    let lint_flags = vec::append(getopts::opt_strs(match, \"W\"),\n+                                 getopts::opt_strs(match, \"warn\"));\n     let lint_dict = lint::get_lint_dict();\n     let lint_opts = vec::map(lint_flags) {|flag|\n         alt lint::lookup_lint(lint_dict, flag) {"}, {"sha": "35e633573ce1acd5562bdbdbe0336020c55c2001", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -131,8 +131,8 @@ fn run_compiler(args: [str]/~, demitter: diagnostic::emitter) {\n         ret;\n     }\n \n-    let lint_flags = (getopts::opt_strs(match, \"W\")\n-                      + getopts::opt_strs(match, \"warn\"));\n+    let lint_flags = vec::append(getopts::opt_strs(match, \"W\"),\n+                                 getopts::opt_strs(match, \"warn\"));\n     if lint_flags.contains(\"help\") {\n         describe_warnings();\n         ret;"}, {"sha": "f042c6c9e1b904c9898a970bea4f13887a58d33c", "filename": "src/rustc/front/core_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fcore_inject.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -41,7 +41,7 @@ fn inject_libcore_ref(sess: session,\n                 vis: ast::public,\n                 span: dummy_sp()};\n \n-    let vis = [vi1, vi2]/~ + crate.node.module.view_items;\n+    let vis = vec::append([vi1, vi2]/~, crate.node.module.view_items);\n \n     ret @{node: {module: { view_items: vis with crate.node.module }\n                  with crate.node} with *crate }"}, {"sha": "f215d95e2dec19dbbf526984756db21ba9683fc7", "filename": "src/rustc/front/intrinsic_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Ffront%2Fintrinsic_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Ffront%2Fintrinsic_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Fintrinsic_inject.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -22,7 +22,7 @@ fn inject_intrinsic(sess: session,\n           }\n         };\n \n-    let items = [item]/~ + crate.node.module.items;\n+    let items = vec::append([item]/~, crate.node.module.items);\n \n     ret @{node: {module: { items: items with crate.node.module }\n                  with crate.node} with *crate }"}, {"sha": "2e80d248de978f3fd948ac0cd40db2e3a6ce7b52", "filename": "src/rustc/front/test.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Ftest.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -98,7 +98,7 @@ fn fold_crate(cx: test_ctxt, c: ast::crate_, fld: fold::ast_fold) ->\n fn fold_item(cx: test_ctxt, &&i: @ast::item, fld: fold::ast_fold) ->\n    @ast::item {\n \n-    cx.path += [i.ident]/~;\n+    vec::push(cx.path, i.ident);\n     #debug(\"current path: %s\", ast_util::path_name_i(cx.path));\n \n     if is_test_fn(i) {\n@@ -161,7 +161,7 @@ fn should_fail(i: @ast::item) -> bool {\n \n fn add_test_module(cx: test_ctxt, m: ast::_mod) -> ast::_mod {\n     let testmod = mk_test_module(cx);\n-    ret {items: m.items + [testmod]/~ with m};\n+    ret {items: vec::append_one(m.items, testmod) with m};\n }\n \n /*\n@@ -252,7 +252,8 @@ fn mk_path(cx: test_ctxt, path: [ast::ident]/~) -> [ast::ident]/~ {\n           _ { false }\n         }\n     };\n-    (if is_std { []/~ } else { [@\"std\"]/~ }) + path\n+    if is_std { path }\n+    else { vec::append([@\"std\"]/~, path) }\n }\n \n // The ast::ty of [std::test::test_desc]/~\n@@ -278,7 +279,7 @@ fn mk_test_desc_vec(cx: test_ctxt) -> @ast::expr {\n     #debug(\"building test vector from %u tests\", cx.testfns.len());\n     let mut descs = []/~;\n     for cx.testfns.each {|test|\n-        descs += [mk_test_desc_rec(cx, test)]/~;\n+        vec::push(descs, mk_test_desc_rec(cx, test));\n     }\n \n     let inner_expr = @{id: cx.sess.next_node_id(),"}, {"sha": "dec7d363155fd6c329f7439405bd1c5fc1de2ac4", "filename": "src/rustc/lib/llvm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Flib%2Fllvm.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -991,7 +991,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef]/~, ty: TypeRef) ->\n       _ {}\n     }\n \n-    let outer = outer0 + [ty]/~;\n+    let outer = vec::append_one(outer0, ty);\n \n     let kind = llvm::LLVMGetTypeKind(ty);\n "}, {"sha": "aa02bb84c8cb3d87e95a97ea3bb2c38d1091bedf", "filename": "src/rustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcreader.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -164,7 +164,7 @@ fn metas_with(ident: ast::ident, key: ast::ident,\n                     metas: [@ast::meta_item]/~) -> [@ast::meta_item]/~ {\n     let name_items = attr::find_meta_items_by_name(metas, *key);\n     if name_items.is_empty() {\n-        metas + [attr::mk_name_value_item_str(key, *ident)]/~\n+        vec::append_one(metas, attr::mk_name_value_item_str(key, *ident))\n     } else {\n         metas\n     }"}, {"sha": "6b30bf3090b316ebd3b49cf54ed187579f5408a2", "filename": "src/rustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcsearch.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -88,7 +88,7 @@ fn get_item_path(tcx: ty::ctxt, def: ast::def_id) -> ast_map::path {\n \n     // FIXME #1920: This path is not always correct if the crate is not linked\n     // into the root namespace.\n-    [ast_map::path_mod(@cdata.name)]/~ + path\n+    vec::append([ast_map::path_mod(@cdata.name)]/~, path)\n }\n \n enum found_ast {"}, {"sha": "8d828aed69d23086a444aebc2bc27c280409ae8f", "filename": "src/rustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fcstore.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -134,7 +134,7 @@ fn get_used_libraries(cstore: cstore) -> [str]/~ {\n }\n \n fn add_used_link_args(cstore: cstore, args: str) {\n-    p(cstore).used_link_args += str::split_char(args, ' ');\n+    vec::push_all(p(cstore).used_link_args, str::split_char(args, ' '));\n }\n \n fn get_used_link_args(cstore: cstore) -> [str]/~ {"}, {"sha": "b738f1988c23df8a6aa8535873513899b3892f0b", "filename": "src/rustc/metadata/decoder.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fdecoder.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -611,9 +611,9 @@ fn get_attributes(md: ebml::doc) -> [ast::attribute]/~ {\n             // an attribute\n             assert (vec::len(meta_items) == 1u);\n             let meta_item = meta_items[0];\n-            attrs +=\n-                [{node: {style: ast::attr_outer, value: *meta_item},\n-                  span: ast_util::dummy_sp()}]/~;\n+            vec::push(attrs,\n+                      {node: {style: ast::attr_outer, value: *meta_item},\n+                       span: ast_util::dummy_sp()});\n         };\n       }\n       option::none { }"}, {"sha": "1e4521276d2aec5c79f6f8c8e1baf706955b8294", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 26, "deletions": 18, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -119,9 +119,11 @@ fn encode_enum_variant_paths(ebml_w: ebml::writer, variants: [variant]/~,\n     }\n }\n \n-fn add_to_index(ebml_w: ebml::writer, path: [ident]/~, &index: [entry<str>]/~,\n+fn add_to_index(ebml_w: ebml::writer, path: [ident]/&, &index: [entry<str>]/~,\n                 name: ident) {\n-    let full_path = path + [name]/~;\n+    let mut full_path = []/~;\n+    vec::push_all(full_path, path);\n+    vec::push(full_path, name);\n     vec::push(index, {val: ast_util::path_name_i(full_path),\n                       pos: ebml_w.writer.tell()});\n }\n@@ -171,15 +173,16 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n             ebml_w.wr_tag(tag_paths_data_mod) {||\n                encode_name_and_def_id(ebml_w, it.ident, it.id);\n                encode_module_item_paths(ebml_w, ecx, _mod,\n-                                        path + [it.ident]/~,\n+                                        vec::append_one(path, it.ident),\n                                         index);\n             }\n           }\n           item_foreign_mod(nmod) {\n             ebml_w.wr_tag(tag_paths_data_mod) {||\n               encode_name_and_def_id(ebml_w, it.ident, it.id);\n-              encode_foreign_module_item_paths(ebml_w, nmod,\n-                   path + [it.ident]/~, index);\n+              encode_foreign_module_item_paths(\n+                  ebml_w, nmod,\n+                  vec::append_one(path, it.ident), index);\n             }\n           }\n           item_ty(_, tps, _) {\n@@ -197,7 +200,8 @@ fn encode_module_item_paths(ebml_w: ebml::writer, ecx: @encode_ctxt,\n                 add_to_index(ebml_w, path, index, it.ident);\n                 encode_named_def_id(ebml_w, it.ident,\n                                     local_def(ctor.node.id));\n-                encode_class_item_paths(ebml_w, items, path + [it.ident]/~,\n+                encode_class_item_paths(ebml_w, items,\n+                                        vec::append_one(path, it.ident),\n                                         index);\n             }\n           }\n@@ -451,11 +455,12 @@ fn encode_info_for_class(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                 vec::push(*index, {val: m.id, pos: ebml_w.writer.tell()});\n                 vec::push(*global_index,\n                           {val: m.id, pos: ebml_w.writer.tell()});\n-                let impl_path = path + [ast_map::path_name(m.ident)]/~;\n+                let impl_path = vec::append_one(path,\n+                                                ast_map::path_name(m.ident));\n                 #debug(\"encode_info_for_class: doing %s %d\", *m.ident, m.id);\n                 encode_info_for_method(ecx, ebml_w, impl_path,\n                                        should_inline(m.attrs), id, m,\n-                                       class_tps + m.tps);\n+                                       vec::append(class_tps, m.tps));\n             }\n             _ { /* don't encode private methods */ }\n           }\n@@ -709,11 +714,13 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_path(ebml_w, path, ast_map::path_name(item.ident));\n         ebml_w.end_tag();\n \n-        let impl_path = path + [ast_map::path_name(item.ident)]/~;\n+        let impl_path = vec::append_one(path,\n+                                        ast_map::path_name(item.ident));\n         for methods.each {|m|\n             vec::push(*index, {val: m.id, pos: ebml_w.writer.tell()});\n             encode_info_for_method(ecx, ebml_w, impl_path,\n-                   should_inline(m.attrs), item.id, m, tps + m.tps);\n+                                   should_inline(m.attrs), item.id, m,\n+                                   vec::append(tps, m.tps));\n         }\n       }\n       item_iface(tps, rp, ms) {\n@@ -786,8 +793,8 @@ fn encode_info_for_items(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                    item_class(tps, _, _, ctor, m_dtor, _) {\n                    #debug(\"encoding info for ctor %s %d\", *i.ident,\n                           ctor.node.id);\n-                   *index +=\n-                       [{val: ctor.node.id, pos: ebml_w.writer.tell()}]/~;\n+                   vec::push(*index,\n+                             {val: ctor.node.id, pos: ebml_w.writer.tell()});\n                    encode_info_for_fn(ecx, ebml_w, ctor.node.id, i.ident,\n                       *pt, if tps.len() > 0u {\n                              some(ii_ctor(ctor, i.ident, tps,\n@@ -933,7 +940,7 @@ fn synthesize_crate_attrs(ecx: @encode_ctxt, crate: @crate) -> [attribute]/~ {\n                 attr::remove_meta_items_by_name(tmp, @\"vers\")\n             };\n \n-        let meta_items = [name_item, vers_item]/~ + other_items;\n+        let meta_items = vec::append([name_item, vers_item]/~, other_items);\n         let link_item = attr::mk_list_item(@\"link\", meta_items);\n \n         ret attr::mk_attr(link_item);\n@@ -942,18 +949,19 @@ fn synthesize_crate_attrs(ecx: @encode_ctxt, crate: @crate) -> [attribute]/~ {\n     let mut attrs: [attribute]/~ = []/~;\n     let mut found_link_attr = false;\n     for crate.node.attrs.each {|attr|\n-        attrs +=\n+        vec::push(\n+            attrs,\n             if *attr::get_attr_name(attr) != \"link\" {\n-                [attr]/~\n+                attr\n             } else {\n                 alt attr.node.value.node {\n                   meta_list(n, l) {\n                     found_link_attr = true;;\n-                    [synthesize_link_attr(ecx, l)]/~\n+                    synthesize_link_attr(ecx, l)\n                   }\n-                  _ { [attr]/~ }\n+                  _ { attr }\n                 }\n-            };\n+            });\n     }\n \n     if !found_link_attr { vec::push(attrs, synthesize_link_attr(ecx, []/~)); }"}, {"sha": "9d382467214da2b0a2e05cf29a957776fbd63e8f", "filename": "src/rustc/metadata/filesearch.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ffilesearch.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -39,16 +39,19 @@ fn mk_filesearch(maybe_sysroot: option<path>,\n     impl of filesearch for filesearch_impl {\n         fn sysroot() -> path { self.sysroot }\n         fn lib_search_paths() -> [path]/~ {\n-            self.addl_lib_search_paths\n-                + [make_target_lib_path(self.sysroot, self.target_triple)]/~\n-                + alt get_cargo_lib_path_nearest() {\n-                  result::ok(p) { [p]/~ }\n-                  result::err(p) { []/~ }\n-                }\n-                + alt get_cargo_lib_path() {\n-                  result::ok(p) { [p]/~ }\n-                  result::err(p) { []/~ }\n-                }\n+            let mut paths = self.addl_lib_search_paths;\n+\n+            vec::push(paths,\n+                      make_target_lib_path(self.sysroot, self.target_triple));\n+            alt get_cargo_lib_path_nearest() {\n+              result::ok(p) { vec::push(paths, p) }\n+              result::err(p) { }\n+            }\n+            alt get_cargo_lib_path() {\n+              result::ok(p) { vec::push(paths, p) }\n+              result::err(p) { }\n+            }\n+            paths\n         }\n         fn get_target_lib_path() -> path {\n             make_target_lib_path(self.sysroot, self.target_triple)\n@@ -91,7 +94,8 @@ fn relative_target_lib_path(target_triple: str) -> [path]/~ {\n \n fn make_target_lib_path(sysroot: path,\n                         target_triple: str) -> path {\n-    let path = [sysroot]/~ + relative_target_lib_path(target_triple);\n+    let path = vec::append([sysroot]/~,\n+                           relative_target_lib_path(target_triple));\n     let path = path::connect_many(path);\n     ret path;\n }"}, {"sha": "76084576ee8556a8cbf1df9f793578d09c3fcc82", "filename": "src/rustc/middle/check_alt.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcheck_alt.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -47,7 +47,7 @@ fn check_arms(tcx: ty::ctxt, arms: [arm]/~) {\n               }\n               _ {}\n             }\n-            if option::is_none(arm.guard) { seen += [v]/~; }\n+            if option::is_none(arm.guard) { vec::push(seen, v); }\n         }\n     }\n }\n@@ -220,7 +220,7 @@ fn missing_ctor(tcx: ty::ctxt, m: matrix, left_ty: ty::t) -> option<ctor> {\n         let mut found = []/~;\n         for m.each {|r|\n             option::iter(pat_ctor_id(tcx, r[0])) {|id|\n-                if !vec::contains(found, id) { found += [id]/~; }\n+                if !vec::contains(found, id) { vec::push(found, id); }\n             }\n         }\n         let variants = ty::enum_variants(tcx, eid);\n@@ -274,14 +274,15 @@ fn specialize(tcx: ty::ctxt, r: [@pat]/~, ctor_id: ctor, arity: uint,\n               left_ty: ty::t) -> option<[@pat]/~> {\n     let r0 = raw_pat(r[0]);\n     alt r0.node {\n-      pat_wild { some(vec::from_elem(arity, wild()) + vec::tail(r)) }\n+      pat_wild { some(vec::append(vec::from_elem(arity, wild()),\n+                                  vec::tail(r))) }\n       pat_ident(_, _) {\n         alt tcx.def_map.find(r0.id) {\n           some(def_variant(_, id)) {\n             if variant(id) == ctor_id { some(vec::tail(r)) }\n             else { none }\n           }\n-          _ { some(vec::from_elem(arity, wild()) + vec::tail(r)) }\n+          _ { some(vec::append(vec::from_elem(arity, wild()), vec::tail(r))) }\n         }\n       }\n       pat_enum(_, args) {\n@@ -291,7 +292,7 @@ fn specialize(tcx: ty::ctxt, r: [@pat]/~, ctor_id: ctor, arity: uint,\n               some(args) { args }\n               none { vec::from_elem(arity, wild()) }\n             };\n-            some(args + vec::tail(r))\n+            some(vec::append(args, vec::tail(r)))\n           }\n           def_variant(_, _) { none }\n         }\n@@ -305,10 +306,10 @@ fn specialize(tcx: ty::ctxt, r: [@pat]/~, ctor_id: ctor, arity: uint,\n               some(f) { f.pat } _ { wild() }\n             }\n         });\n-        some(args + vec::tail(r))\n+        some(vec::append(args, vec::tail(r)))\n       }\n-      pat_tup(args) { some(args + vec::tail(r)) }\n-      pat_box(a) | pat_uniq(a) { some([a]/~ + vec::tail(r)) }\n+      pat_tup(args) { some(vec::append(args, vec::tail(r))) }\n+      pat_box(a) | pat_uniq(a) { some(vec::append([a]/~, vec::tail(r))) }\n       pat_lit(expr) {\n         let e_v = eval_const_expr(tcx, expr);\n         let match = alt check ctor_id {"}, {"sha": "9ebf4d13970d1d38e757091564ceb7a195ff8fd7", "filename": "src/rustc/middle/freevars.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ffreevars.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -64,8 +64,8 @@ fn collect_freevars(def_map: resolve::def_map, blk: ast::blk)\n                       if i == depth { // Made it to end of loop\n                         let dnum = ast_util::def_id_of_def(def).node;\n                         if !seen.contains_key(dnum) {\n-                           *refs += [@{def:def, span:expr.span}]/~;\n-                           seen.insert(dnum, ());\n+                            vec::push(*refs, @{def:def, span:expr.span});\n+                            seen.insert(dnum, ());\n                         }\n                       }\n                     }"}, {"sha": "d3bd8e753168fedee03507f0564a54ccf58add07", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -274,7 +274,7 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n                     let ifce_bounds =\n                         ty::lookup_item_type(cx.tcx, ifce_id).bounds;\n                     let mth = ty::iface_methods(cx.tcx, ifce_id)[n_mth];\n-                    @(*ifce_bounds + *mth.tps)\n+                    @(vec::append(*ifce_bounds, *mth.tps))\n                   }\n                 }\n               }"}, {"sha": "54467207c51806cccbd988093548dc79cf1da979", "filename": "src/rustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Flint.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -358,7 +358,7 @@ fn check_item_ctypes(cx: ty::ctxt, it: @ast::item) {\n     fn check_foreign_fn(cx: ty::ctxt, fn_id: ast::node_id,\n                        decl: ast::fn_decl) {\n         let tys = vec::map(decl.inputs) {|a| a.ty };\n-        for vec::each(tys + [decl.output]/~) {|ty|\n+        for vec::each(vec::append_one(tys, decl.output)) {|ty|\n             alt ty.node {\n               ast::ty_path(_, id) {\n                 alt cx.def_map.get(id) {"}, {"sha": "436443d15389015dd759d5071612426f232435c6", "filename": "src/rustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fliveness.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -242,7 +242,7 @@ class ir_maps {\n \n     fn add_live_node(lnk: live_node_kind) -> live_node {\n         let ln = live_node(self.num_live_nodes);\n-        self.lnks += [lnk]/~;\n+        vec::push(self.lnks, lnk);\n         self.num_live_nodes += 1u;\n \n         #debug[\"%s is of kind %?\", ln.to_str(), lnk];\n@@ -259,7 +259,7 @@ class ir_maps {\n \n     fn add_variable(vk: var_kind) -> variable {\n         let v = variable(self.num_vars);\n-        self.var_kinds += [vk]/~;\n+        vec::push(self.var_kinds, vk);\n         self.num_vars += 1u;\n \n         alt vk {\n@@ -444,7 +444,7 @@ fn visit_expr(expr: @expr, &&self: @ir_maps, vt: vt<@ir_maps>) {\n                   cap_move | cap_drop {true} // var must be dead afterwards\n                   cap_copy | cap_ref {false} // var can still be used\n                 };\n-                call_caps += [{ln: cv_ln, is_move: is_move, rv: rv}]/~;\n+                vec::push(call_caps, {ln: cv_ln, is_move: is_move, rv: rv});\n               }\n               none {}\n             }"}, {"sha": "ba463ace91d12517656c87810c3a720847ca33f9", "filename": "src/rustc/middle/pat_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fpat_util.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -51,6 +51,6 @@ fn pat_bindings(dm: resolve::def_map, pat: @pat,\n \n fn pat_binding_ids(dm: resolve::def_map, pat: @pat) -> [node_id]/~ {\n     let mut found = []/~;\n-    pat_bindings(dm, pat) {|b_id, _sp, _pt| found += [b_id]/~; };\n+    pat_bindings(dm, pat) {|b_id, _sp, _pt| vec::push(found, b_id); };\n     ret found;\n }"}, {"sha": "37959b51fd5d825897b818f2e498c1b3da2fdd6b", "filename": "src/rustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fregion.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -221,7 +221,7 @@ fn nearest_common_ancestor(region_map: region_map, scope_a: ast::node_id,\n             alt region_map.find(scope) {\n                 none { ret result; }\n                 some(superscope) {\n-                    result += [superscope]/~;\n+                    vec::push(result, superscope);\n                     scope = superscope;\n                 }\n             }"}, {"sha": "a2ea60379b9fa42bc8adda6c399ac96be0f7bf12", "filename": "src/rustc/middle/resolve.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fresolve.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -243,7 +243,8 @@ fn map_crate(e: @env, c: @ast::crate) {\n               ast::view_path_list(mod_path, idents, _) {\n                 for idents.each {|ident|\n                     let t = todo(ident.node.name,\n-                                 @(mod_path.idents + [ident.node.name]/~),\n+                                 @(vec::append_one(mod_path.idents,\n+                                                   ident.node.name)),\n                                  ident.span, sc);\n                     e.imports.insert(ident.node.id, t);\n                 }\n@@ -305,7 +306,7 @@ fn map_crate(e: @env, c: @ast::crate) {\n                       }\n                       scope_block(b, _, _) {\n                         let globs = alt e.block_map.find(b.node.id) {\n-                          some(globs) { globs + [glob]/~ }\n+                          some(globs) { vec::append_one(globs, glob) }\n                           none { [glob]/~ }\n                         };\n                         e.block_map.insert(b.node.id, globs);\n@@ -557,7 +558,8 @@ fn visit_item_with_scope(e: @env, i: @ast::item,\n         v.visit_ty(sty, sc, v);\n         for methods.each {|m|\n             v.visit_ty_params(m.tps, sc, v);\n-            let msc = @cons(scope_method(m.self_id, tps + m.tps), sc);\n+            let msc = @cons(scope_method(m.self_id, vec::append(tps, m.tps)),\n+                            sc);\n             v.visit_fn(visit::fk_method(m.ident, []/~, m),\n                        m.decl, m.body, m.span, m.id, msc, v);\n         }\n@@ -567,7 +569,7 @@ fn visit_item_with_scope(e: @env, i: @ast::item,\n         let isc = @cons(scope_method(i.id, tps), sc);\n         for methods.each {|m|\n             v.visit_ty_params(m.tps, isc, v);\n-            let msc = @cons(scope_method(i.id, tps + m.tps), sc);\n+            let msc = @cons(scope_method(i.id, vec::append(tps, m.tps)), sc);\n             for m.decl.inputs.each {|a| v.visit_ty(a.ty, msc, v); }\n             v.visit_ty(m.decl.output, msc, v);\n         }\n@@ -600,7 +602,8 @@ fn visit_item_with_scope(e: @env, i: @ast::item,\n         for members.each {|cm|\n             alt cm.node {\n               class_method(m) {\n-                  let msc = @cons(scope_method(m.self_id, tps + m.tps),\n+                  let msc = @cons(scope_method(m.self_id,\n+                                               vec::append(tps, m.tps)),\n                                   class_scope);\n                   visit_fn_with_scope(e,\n                      visit::fk_item_fn(m.ident, tps), m.decl, m.body,\n@@ -911,7 +914,8 @@ fn unresolved_err(e: env, cx: ctxt, sp: span, name: ident, kind: str) {\n             path = @(e.mod_map.get(did.node).path + *path);\n         } else if did.node != ast::crate_node_id {\n             let paths = e.ext_map.get(did);\n-            path = @str::connect((paths + [path]/~).map({|x|*x}), \"::\");\n+            path = @str::connect(vec::append_one(paths, path).map({|x|*x}),\n+                                 \"::\");\n         }\n       }\n     }\n@@ -1372,7 +1376,7 @@ fn lookup_in_mod(e: env, m: def, sp: span, name: ident, ns: namespace,\n         if !is_none(cached) { ret cached; }\n         let mut path = [name]/~;\n         if defid.node != ast::crate_node_id {\n-            path = cstore::get_path(e.cstore, defid) + path;\n+            path = vec::append(cstore::get_path(e.cstore, defid), path);\n         }\n         alt lookup_external(e, defid.crate, path, ns) {\n            some(df) {\n@@ -1990,7 +1994,8 @@ fn check_exports(e: @env) {\n           some(f) { f } none { []/~ }\n         };\n         e.exp_map.insert(export_id,\n-                         found + [{reexp: reexp, id: target_id}]/~);\n+                         vec::append_one(found,\n+                                         {reexp: reexp, id: target_id}));\n     }\n \n     fn check_export(e: @env, ident: ident, _mod: @indexed_mod,\n@@ -2186,7 +2191,9 @@ fn find_impls_in_view_item(e: env, vi: @ast::view_item,\n                                               @{ident: name with *imp});\n                                 }\n                             }\n-                            if vec::len(found) > 0u { impls += found; }\n+                            if vec::len(found) > 0u {\n+                                vec::push_all(impls, found);\n+                            }\n                         }\n                     }\n                 }\n@@ -2201,7 +2208,9 @@ fn find_impls_in_view_item(e: env, vi: @ast::view_item,\n \n           ast::view_path_list(base, names, _) {\n             for names.each {|nm|\n-                lookup_imported_impls(e, nm.node.id) {|is| impls += *is; }\n+                lookup_imported_impls(e, nm.node.id) {|is|\n+                    vec::push_all(impls, *is);\n+                }\n             }\n           }\n "}, {"sha": "7c75b9b3ae4098146df120de9c8fff1beb574727", "filename": "src/rustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -101,7 +101,7 @@ fn update_cache(cache: metadata_cache, mdtag: int, val: debug_metadata) {\n     } else {\n         []/~\n     };\n-    cache.insert(mdtag, existing + [val]/~);\n+    cache.insert(mdtag, vec::append_one(existing, val));\n }\n \n type metadata<T> = {node: ValueRef, data: T};"}, {"sha": "c7f5d1932b73faab24756868691a56993acdd34c", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -382,11 +382,11 @@ fn x86_64_tys(atys: [TypeRef]/~,\n                                        StructRetAttribute);\n     let sret = option::is_some(ret_attr);\n     if sret {\n-        arg_tys = [ret_ty]/~ + arg_tys;\n+        arg_tys = vec::append([ret_ty]/~, arg_tys);\n         ret_ty = { cast:  false,\n                    ty: T_void()\n                  };\n-        attrs = [ret_attr]/~ + attrs;\n+        attrs = vec::append([ret_attr]/~, attrs);\n     } else if !ret_def {\n         ret_ty = { cast: false,\n                    ty: T_void()\n@@ -450,7 +450,7 @@ fn c_arg_and_ret_lltys(ccx: @crate_ctxt,\n fn c_stack_tys(ccx: @crate_ctxt,\n                id: ast::node_id) -> @c_stack_tys {\n     let (llargtys, llretty, ret_ty) = c_arg_and_ret_lltys(ccx, id);\n-    let bundle_ty = T_struct(llargtys + [T_ptr(llretty)]/~);\n+    let bundle_ty = T_struct(vec::append_one(llargtys, T_ptr(llretty)));\n     let ret_def = !ty::type_is_bot(ret_ty) && !ty::type_is_nil(ret_ty);\n     let x86_64 = if ccx.sess.targ_cfg.arch == arch_x86_64 {\n         option::some(x86_64_tys(llargtys, llretty, ret_def))\n@@ -933,7 +933,7 @@ fn trans_extern_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n         let _icx = ccx.insn_ctxt(\"foreign::extern::build_rust_fn\");\n         let t = ty::node_id_to_type(ccx.tcx, id);\n         let ps = link::mangle_internal_name_by_path(\n-            ccx, path + [ast_map::path_name(@\"__rust_abi\")]/~);\n+            ccx, vec::append_one(path, ast_map::path_name(@\"__rust_abi\")));\n         let llty = type_of_fn_from_ty(ccx, t);\n         let llfndecl = decl_internal_cdecl_fn(ccx.llmod, ps, llty);\n         trans_fn(ccx, path, decl, body, llfndecl, no_self, none, id);\n@@ -970,7 +970,8 @@ fn trans_extern_fn(ccx: @crate_ctxt, path: ast_map::path, decl: ast::fn_decl,\n         }\n \n         let shim_name = link::mangle_internal_name_by_path(\n-            ccx, path + [ast_map::path_name(@\"__rust_stack_shim\")]/~);\n+            ccx, vec::append_one(path,\n+                                 ast_map::path_name(@\"__rust_stack_shim\")));\n         ret build_shim_fn_(ccx, shim_name, llrustfn, tys,\n                            lib::llvm::CCallConv,\n                            build_args, build_ret);"}, {"sha": "b00eb7b5dc55343d4303e800f6b5d14f5413fadd", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -77,15 +77,17 @@ impl methods for reflector {\n \n     fn bracketed_mt(bracket_name: str, mt: ty::mt, extra: [ValueRef]/~) {\n         self.bracketed_t(bracket_name, mt.ty,\n-                         [self.c_uint(mt.mutbl as uint)]/~ + extra);\n+                         vec::append([self.c_uint(mt.mutbl as uint)]/~,\n+                                     extra));\n     }\n \n     fn vstore_name_and_extra(t: ty::t,\n                              vstore: ty::vstore,\n                              f: fn(str,[ValueRef]/~)) {\n         alt vstore {\n           ty::vstore_fixed(n) {\n-            let extra = [self.c_uint(n)]/~ + self.c_size_and_align(t);\n+            let extra = vec::append([self.c_uint(n)]/~,\n+                                    self.c_size_and_align(t));\n             f(\"fixed\", extra)\n           }\n           ty::vstore_slice(_) { f(\"slice\", []/~) }\n@@ -142,8 +144,8 @@ impl methods for reflector {\n           ty::ty_rptr(_, mt) { self.bracketed_mt(\"rptr\", mt, []/~) }\n \n           ty::ty_rec(fields) {\n-            let extra = ([self.c_uint(vec::len(fields))]/~\n-                         + self.c_size_and_align(t));\n+            let extra = (vec::append([self.c_uint(vec::len(fields))]/~,\n+                                     self.c_size_and_align(t)));\n             self.visit(\"enter_rec\", extra);\n             for fields.eachi {|i, field|\n                 self.bracketed_mt(\"rec_field\", field.mt,\n@@ -154,8 +156,8 @@ impl methods for reflector {\n           }\n \n           ty::ty_tup(tys) {\n-            let extra = ([self.c_uint(vec::len(tys))]/~\n-                         + self.c_size_and_align(t));\n+            let extra = (vec::append([self.c_uint(vec::len(tys))]/~,\n+                                     self.c_size_and_align(t)));\n             self.visit(\"enter_tup\", extra);\n             for tys.eachi {|i, t|\n                 self.bracketed_t(\"tup_field\", t, [self.c_uint(i)]/~);\n@@ -214,8 +216,8 @@ impl methods for reflector {\n             let bcx = self.bcx;\n             let tcx = bcx.ccx().tcx;\n             let fields = ty::class_items_as_fields(tcx, did, substs);\n-            let extra = ([self.c_uint(vec::len(fields))]/~\n-                         + self.c_size_and_align(t));\n+            let extra = vec::append([self.c_uint(vec::len(fields))]/~,\n+                                    self.c_size_and_align(t));\n \n             self.visit(\"enter_class\", extra);\n             for fields.eachi {|i, field|\n@@ -234,8 +236,8 @@ impl methods for reflector {\n             let bcx = self.bcx;\n             let tcx = bcx.ccx().tcx;\n             let variants = ty::substd_enum_variants(tcx, did, substs);\n-            let extra = ([self.c_uint(vec::len(variants))]/~\n-                         + self.c_size_and_align(t));\n+            let extra = vec::append([self.c_uint(vec::len(variants))]/~,\n+                                    self.c_size_and_align(t));\n \n             self.visit(\"enter_enum\", extra);\n             for variants.eachi {|i, v|"}, {"sha": "42b6e90b4d8bbb0ac3d2f44291a2a1b9b451f28c", "filename": "src/rustc/middle/tstate/annotate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftstate%2Fannotate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftstate%2Fannotate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fannotate.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -24,7 +24,7 @@ fn collect_ids_stmt(s: @stmt, rs: @mut [node_id]/~) {\n }\n \n fn collect_ids_local(tcx: ty::ctxt, l: @local, rs: @mut [node_id]/~) {\n-    *rs += pat_binding_ids(tcx.def_map, l.node.pat);\n+    vec::push_all(*rs, pat_binding_ids(tcx.def_map, l.node.pat));\n }\n \n fn node_ids_in_fn(tcx: ty::ctxt, body: blk, rs: @mut [node_id]/~) {"}, {"sha": "23ea039d2c058b1fbf20c0e63e775b559f20296f", "filename": "src/rustc/middle/tstate/auxiliary.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -474,11 +474,11 @@ fn node_id_to_def(ccx: crate_ctxt, id: node_id) -> option<def> {\n fn norm_a_constraint(id: def_id, c: constraint) -> [norm_constraint]/~ {\n     let mut rslt: [norm_constraint]/~ = []/~;\n     for (*c.descs).each {|pd|\n-        rslt +=\n-            [{bit_num: pd.node.bit_num,\n-              c: respan(pd.span, {path: c.path,\n-                                  def_id: id,\n-                                  args: pd.node.args})}]/~;\n+        vec::push(rslt,\n+                  {bit_num: pd.node.bit_num,\n+                   c: respan(pd.span, {path: c.path,\n+                                       def_id: id,\n+                                       args: pd.node.args})});\n     }\n     ret rslt;\n }\n@@ -489,7 +489,7 @@ fn norm_a_constraint(id: def_id, c: constraint) -> [norm_constraint]/~ {\n fn constraints(fcx: fn_ctxt) -> [norm_constraint]/~ {\n     let mut rslt: [norm_constraint]/~ = []/~;\n     for fcx.enclosing.constrs.each {|key, val|\n-        rslt += norm_a_constraint(key, val);\n+        vec::push_all(rslt, norm_a_constraint(key, val));\n     };\n     ret rslt;\n }\n@@ -887,22 +887,23 @@ fn args_to_constr_args(tcx: ty::ctxt, args: [arg]/~,\n     let mut actuals: [@constr_arg_use]/~ = []/~;\n     let num_args = vec::len(args);\n     for indices.each {|a|\n-        actuals +=\n-            [@respan(a.span,\n-                     alt a.node {\n-                       carg_base { carg_base }\n-                       carg_ident(i) {\n-                         if i < num_args {\n-                             carg_ident({ident: args[i].ident,\n-                                         node: args[i].id})\n-                         } else {\n-                             tcx.sess.span_bug(a.span,\n-                                               \"index out of bounds in \\\n-                  constraint arg\");\n-                         }\n-                       }\n-                       carg_lit(l) { carg_lit(l) }\n-                     })]/~;\n+        vec::push(\n+            actuals,\n+            @respan(a.span,\n+                    alt a.node {\n+                        carg_base { carg_base }\n+                        carg_ident(i) {\n+                            if i < num_args {\n+                                carg_ident({ident: args[i].ident,\n+                                            node: args[i].id})\n+                            } else {\n+                                tcx.sess.span_bug(a.span,\n+                                                  \"index out of bounds in \\\n+                                                   constraint arg\");\n+                            }\n+                        }\n+                        carg_lit(l) { carg_lit(l) }\n+                    }));\n     }\n     ret actuals;\n }"}, {"sha": "7f1ba5f0db8c853b828146a0007fc345ea6f3dec", "filename": "src/rustc/middle/tstate/tritv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftstate%2Ftritv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftstate%2Ftritv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftstate%2Ftritv.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -253,12 +253,12 @@ fn to_vec(v: t) -> [uint]/~ {\n     let mut i: uint = 0u;\n     let mut rslt: [uint]/~ = []/~;\n     while i < v.nbits {\n-        rslt +=\n-            [alt tritv_get(v, i) {\n-               dont_care { 2u }\n-               ttrue { 1u }\n-               tfalse { 0u }\n-             }]/~;\n+        vec::push(rslt,\n+                  alt tritv_get(v, i) {\n+                      dont_care { 2u }\n+                      ttrue { 1u }\n+                      tfalse { 0u }\n+                  });\n         i += 1u;\n     }\n     ret rslt;"}, {"sha": "be490f98fe4a1de71bc2b1bdd82ba6c9a28787e7", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -2188,7 +2188,7 @@ fn is_fn_ty(fty: t) -> bool {\n \n // Returns a vec of all the input and output types of fty.\n fn tys_in_fn_ty(fty: fn_ty) -> [t]/~ {\n-    fty.inputs.map({|a| a.ty}) + [fty.output]/~\n+    vec::append_one(fty.inputs.map({|a| a.ty}), fty.output)\n }\n \n // Just checks whether it's a fn that returns bool,\n@@ -2624,26 +2624,27 @@ fn item_path(cx: ctxt, id: ast::def_id) -> ast_map::path {\n                 ast_map::path_name(item.ident)\n               }\n             };\n-            *path + [item_elt]/~\n+            vec::append_one(*path, item_elt)\n           }\n \n           ast_map::node_foreign_item(nitem, _, path) {\n-            *path + [ast_map::path_name(nitem.ident)]/~\n+            vec::append_one(*path, ast_map::path_name(nitem.ident))\n           }\n \n           ast_map::node_method(method, _, path) {\n-            *path + [ast_map::path_name(method.ident)]/~\n+            vec::append_one(*path, ast_map::path_name(method.ident))\n           }\n \n           ast_map::node_variant(variant, _, path) {\n-            vec::init(*path) + [ast_map::path_name(variant.node.name)]/~\n+            vec::append_one(vec::init(*path),\n+                            ast_map::path_name(variant.node.name))\n           }\n \n           ast_map::node_ctor(nm, _, _, _, path) {\n-              *path + [ast_map::path_name(nm)]/~\n+            vec::append_one(*path, ast_map::path_name(nm))\n           }\n           ast_map::node_dtor(_, _, _, path) {\n-              *path + [ast_map::path_name(@\"dtor\")]/~\n+            vec::append_one(*path, ast_map::path_name(@\"dtor\"))\n           }\n \n "}, {"sha": "bf3f4b1f3b649301a826e1b31242ff2d30390eb0", "filename": "src/rustc/middle/typeck/check/method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmethod.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -403,7 +403,7 @@ class lookup {\n             }\n         };\n \n-        let all_substs = {tps: cand.self_substs.tps + m_substs\n+        let all_substs = {tps: vec::append(cand.self_substs.tps, m_substs)\n                           with cand.self_substs};\n \n         self.fcx.write_ty_substs(self.node_id, cand.fty, all_substs);"}, {"sha": "6e4b7a370abb687f8b9ff87e5875dde90fb05e57", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -204,7 +204,7 @@ fn compare_impl_method(tcx: ty::ctxt, sp: span,\n         let substs = {\n             self_r: some(dummy_self_r),\n             self_ty: some(self_ty),\n-            tps: if_substs.tps + dummy_tps\n+            tps: vec::append(if_substs.tps, dummy_tps)\n         };\n         let if_fty = ty::mk_fn(tcx, if_m.fty);\n         ty::subst(tcx, substs, if_fty)\n@@ -286,7 +286,7 @@ fn convert_methods(ccx: @crate_ctxt,\n \n             // n.b.: the type of a method is parameterized by both\n             // the tps on the receiver and those on the method itself\n-            {bounds: @(*rcvr_bounds + *bounds), rp: rp, ty: fty});\n+            {bounds: @(vec::append(*rcvr_bounds, *bounds)), rp: rp, ty: fty});\n         write_ty_to_tcx(tcx, m.id, fty);\n         {mty: mty, id: m.id, span: m.span}\n     }"}, {"sha": "d7a25fabfa6d8bd85d3a6a14342341c49b351746", "filename": "src/rustc/util/ppaux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87eaf91be34e1a6e38e4a043102910e1f3e77824/src%2Frustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Futil%2Fppaux.rs?ref=87eaf91be34e1a6e38e4a043102910e1f3e77824", "patch": "@@ -133,7 +133,7 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n         alt ident { some(i) { s += \" \"; s += *i; } _ { } }\n         s += \"(\";\n         let mut strs = []/~;\n-        for inputs.each {|a| strs += [fn_input_to_str(cx, a)]/~; }\n+        for inputs.each {|a| vec::push(strs, fn_input_to_str(cx, a)); }\n         s += str::connect(strs, \", \");\n         s += \")\";\n         if ty::get(output).struct != ty_nil {\n@@ -190,12 +190,12 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n       ty_type { \"type\" }\n       ty_rec(elems) {\n         let mut strs: [str]/~ = []/~;\n-        for elems.each {|fld| strs += [field_to_str(cx, fld)]/~; }\n+        for elems.each {|fld| vec::push(strs, field_to_str(cx, fld)); }\n         \"{\" + str::connect(strs, \",\") + \"}\"\n       }\n       ty_tup(elems) {\n         let mut strs = []/~;\n-        for elems.each {|elem| strs += [ty_to_str(cx, elem)]/~; }\n+        for elems.each {|elem| vec::push(strs, ty_to_str(cx, elem)); }\n         \"(\" + str::connect(strs, \",\") + \")\"\n       }\n       ty_fn(f) {"}]}