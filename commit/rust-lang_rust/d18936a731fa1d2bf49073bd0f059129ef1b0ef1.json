{"sha": "d18936a731fa1d2bf49073bd0f059129ef1b0ef1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxODkzNmE3MzFmYTFkMmJmNDkwNzNiZDBmMDU5MTI5ZWYxYjBlZjE=", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-22T00:24:49Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-08-22T00:24:49Z"}, "message": "Use `write!`", "tree": {"sha": "5f4aaac1cc2b95e22de724fc8179cf980ca08435", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f4aaac1cc2b95e22de724fc8179cf980ca08435"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d18936a731fa1d2bf49073bd0f059129ef1b0ef1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d18936a731fa1d2bf49073bd0f059129ef1b0ef1", "html_url": "https://github.com/rust-lang/rust/commit/d18936a731fa1d2bf49073bd0f059129ef1b0ef1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d18936a731fa1d2bf49073bd0f059129ef1b0ef1/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74147b86c50ebdaa7d8420fcbf82fa647a6db394", "url": "https://api.github.com/repos/rust-lang/rust/commits/74147b86c50ebdaa7d8420fcbf82fa647a6db394", "html_url": "https://github.com/rust-lang/rust/commit/74147b86c50ebdaa7d8420fcbf82fa647a6db394"}], "stats": {"total": 8, "additions": 2, "deletions": 6}, "files": [{"sha": "2b47033744fdd2d61885add3860fb10d80decf41", "filename": "src/librustdoc/html/length_limit.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d18936a731fa1d2bf49073bd0f059129ef1b0ef1/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d18936a731fa1d2bf49073bd0f059129ef1b0ef1/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flength_limit.rs?ref=d18936a731fa1d2bf49073bd0f059129ef1b0ef1", "patch": "@@ -79,17 +79,13 @@ impl HtmlWithLimit {\n     /// Close the most recently opened HTML tag.\n     pub(super) fn close_tag(&mut self) {\n         let tag_name = self.unclosed_tags.pop().unwrap();\n-        self.buf.push_str(\"</\");\n-        self.buf.push_str(tag_name);\n-        self.buf.push('>');\n+        write!(self.buf, \"</{}>\", tag_name).unwrap();\n     }\n \n     /// Write all queued tags and add them to the `unclosed_tags` list.\n     fn flush_queue(&mut self) {\n         for tag_name in self.queued_tags.drain(..) {\n-            self.buf.push('<');\n-            self.buf.push_str(tag_name);\n-            self.buf.push('>');\n+            write!(self.buf, \"<{}>\", tag_name).unwrap();\n \n             self.unclosed_tags.push(tag_name);\n         }"}]}