{"sha": "1730d2e037fc41f31d0a90b2fde477f02f0fc798", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MzBkMmUwMzdmYzQxZjMxZDBhOTBiMmZkZTQ3N2YwMmYwZmM3OTg=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-07-23T00:47:32Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-07-23T00:47:32Z"}, "message": "Notify copy glue of dst-initialization and fix _vec.alloc issues in lib and runtime.  Closes #109.", "tree": {"sha": "4e920841841b4cbf35862f3db41db7f688ffffa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e920841841b4cbf35862f3db41db7f688ffffa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1730d2e037fc41f31d0a90b2fde477f02f0fc798", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1730d2e037fc41f31d0a90b2fde477f02f0fc798", "html_url": "https://github.com/rust-lang/rust/commit/1730d2e037fc41f31d0a90b2fde477f02f0fc798", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1730d2e037fc41f31d0a90b2fde477f02f0fc798/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11", "url": "https://api.github.com/repos/rust-lang/rust/commits/ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11", "html_url": "https://github.com/rust-lang/rust/commit/ede42cf931dc9cb7c7f4c78d7f9521985c2a8e11"}], "stats": {"total": 57, "additions": 41, "deletions": 16}, "files": [{"sha": "08992377974f11c88e1d3fa1f29a64320098296a", "filename": "src/Makefile", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1730d2e037fc41f31d0a90b2fde477f02f0fc798/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/1730d2e037fc41f31d0a90b2fde477f02f0fc798/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=1730d2e037fc41f31d0a90b2fde477f02f0fc798", "patch": "@@ -364,7 +364,6 @@ TEST_XFAILS_X86 :=  test/run-pass/bind-obj-ctor.rs \\\n                     test/run-pass/mutable-vec-drop.rs \\\n                     test/run-pass/obj-as.rs \\\n                     test/run-pass/task-comm.rs \\\n-                    test/run-pass/vec-alloc-append.rs \\\n                     test/run-pass/vec-slice.rs \\\n                     test/run-pass/task-comm-2.rs \\\n                     test/run-pass/task-comm-3.rs \\"}, {"sha": "8084c7cfc05f495fbd618c5d16c7d987f0fb00de", "filename": "src/boot/be/abi.ml", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1730d2e037fc41f31d0a90b2fde477f02f0fc798/src%2Fboot%2Fbe%2Fabi.ml", "raw_url": "https://github.com/rust-lang/rust/raw/1730d2e037fc41f31d0a90b2fde477f02f0fc798/src%2Fboot%2Fbe%2Fabi.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fbe%2Fabi.ml?ref=1730d2e037fc41f31d0a90b2fde477f02f0fc798", "patch": "@@ -77,8 +77,9 @@ let tydesc_field_free_glue = 5;;\n let tydesc_field_sever_glue = 6;;\n let tydesc_field_mark_glue = 7;;\n let tydesc_field_obj_drop_glue = 8;;\n-let tydesc_field_cmp_glue = 9;;\n-let tydesc_field_hash_glue = 10;;\n+let tydesc_field_cmp_glue = 9;;   (* FIXME these two aren't in the *)\n+let tydesc_field_hash_glue = 10;; (* runtime's type_desc struct.   *)\n+let tydesc_field_stateflag = 11;;\n \n let vec_elt_rc = 0;;\n let vec_elt_alloc = 1;;"}, {"sha": "78a3257e3f4725004d064e43fe718022b0e6b6ad", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1730d2e037fc41f31d0a90b2fde477f02f0fc798/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/1730d2e037fc41f31d0a90b2fde477f02f0fc798/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=1730d2e037fc41f31d0a90b2fde477f02f0fc798", "patch": "@@ -1112,8 +1112,9 @@ let trans_visitor\n           let fix fixup =\n             fixup_rel_word tydesc_fixup fixup\n           in\n-          log cx \"tydesc for %a has sz=%Ld, align=%Ld\"\n-            Ast.sprintf_ty t sz align;\n+          let is_stateful = if type_has_state t then 1L else 0L in\n+          log cx \"tydesc for %a has sz=%Ld, align=%Ld, is_stateful=%Ld\"\n+            Ast.sprintf_ty t sz align is_stateful;\n             Asm.DEF\n               (tydesc_fixup,\n                Asm.SEQ\n@@ -1145,6 +1146,7 @@ let trans_visitor\n                                      Asm.WORD (word_ty_mach, Asm.IMM 0L);\n                            end\n                    end;\n+                   Asm.WORD (word_ty_mach, Asm.IMM is_stateful);\n                  |])\n       end\n \n@@ -1715,13 +1717,23 @@ let trans_visitor\n       let dst = deref out_ptr in\n       let ty_params = deref (get_element_ptr args 0) in\n       let src = deref (get_element_ptr args 1) in\n-        trans_copy_ty ty_params false dst ty src ty curr_iso\n+\n+      (* Translate copy code for the dst-initializing and\n+       * dst-non-initializing cases and branch accordingly. *)\n+      let initflag = get_element_ptr args 2 in\n+      let jmps = trans_compare_simple Il.JNE (Il.Cell initflag) one in\n+        trans_copy_ty ty_params true dst ty src ty curr_iso;\n+        let skip_noninit_jmp = mark() in\n+          emit (Il.jmp Il.JMP Il.CodeNone);\n+          List.iter patch jmps;          \n+          trans_copy_ty ty_params false dst ty src ty curr_iso;\n+          patch skip_noninit_jmp;\n     in\n     let ty_params_ptr = ty_params_covering ty in\n     let fty =\n       mk_ty_fn\n         (local_slot ty)\n-        [| ty_params_ptr; alias_slot ty |]\n+        [| ty_params_ptr; alias_slot ty; word_slot |]\n     in\n       get_typed_mem_glue g fty inner\n \n@@ -3198,6 +3210,8 @@ let trans_visitor\n               iflog\n                 (fun _ -> annotate\n                    (Printf.sprintf \"copy_ty: parametric copy %#d\" i));\n+              let initflag = if initializing then one else zero in\n+              let initflag = Il.Reg (force_to_reg initflag) in\n               aliasing false src\n                 begin\n                   fun src ->\n@@ -3206,7 +3220,7 @@ let trans_visitor\n                       trans_call_dynamic_glue\n                         td Abi.tydesc_field_copy_glue\n                         (Some dst)\n-                        [| ty_params_ptr; src; |]\n+                        [| ty_params_ptr; src; initflag |]\n                         None\n                 end\n \n@@ -4299,7 +4313,12 @@ let trans_visitor\n         [| vr; fp |]\n         None\n \n-  and trans_vec_append dst_cell dst_ty src_oper src_ty =\n+  and trans_vec_append\n+      (dst_cell:Il.cell)\n+      (dst_ty:Ast.ty)\n+      (src_oper:Il.operand)\n+      (src_ty:Ast.ty)\n+      : unit =\n     let elt_ty = seq_unit_ty dst_ty in\n     let trim_trailing_null = dst_ty = Ast.TY_str in\n       assert (simplified_ty src_ty = simplified_ty dst_ty);"}, {"sha": "849e750a4ca76fcb0f9dcd07680ac07637c3d0fc", "filename": "src/lib/_vec.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1730d2e037fc41f31d0a90b2fde477f02f0fc798/src%2Flib%2F_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1730d2e037fc41f31d0a90b2fde477f02f0fc798/src%2Flib%2F_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2F_vec.rs?ref=1730d2e037fc41f31d0a90b2fde477f02f0fc798", "patch": "@@ -5,12 +5,15 @@ native \"rust\" mod rustrt {\n   type vbuf;\n   fn vec_buf[T](vec[T] v) -> vbuf;\n   fn vec_len[T](vec[T] v) -> uint;\n-  fn vec_alloc[T](uint n_elts) -> vec[T];\n+  /* The T in vec_alloc[T, U] is the type of the vec to allocate.  The\n+   * U is the type of an element in the vec.  So to allocate a vec[U] we\n+   * want to invoke this as vec_alloc[vec[U], U]. */\n+  fn vec_alloc[T, U](uint n_elts) -> vec[U];\n   fn refcount[T](vec[T] v) -> uint;\n }\n \n fn alloc[T](uint n_elts) -> vec[T] {\n-  ret rustrt.vec_alloc[T](n_elts);\n+  ret rustrt.vec_alloc[vec[T], T](n_elts);\n }\n \n type init_op[T] = fn(uint i) -> T;"}, {"sha": "99fa953580c597669103f8f5df4303bb0306688c", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1730d2e037fc41f31d0a90b2fde477f02f0fc798/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/1730d2e037fc41f31d0a90b2fde477f02f0fc798/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=1730d2e037fc41f31d0a90b2fde477f02f0fc798", "patch": "@@ -92,15 +92,15 @@ unsupervise(rust_task *task) {\n }\n \n extern \"C\" CDECL rust_vec*\n-vec_alloc(rust_task *task, type_desc *t, size_t n_elts)\n+vec_alloc(rust_task *task, type_desc *t, type_desc *elem_t, size_t n_elts)\n {\n     rust_dom *dom = task->dom;\n     task->log(rust_log::MEM,\n-            \"vec_alloc %\" PRIdPTR \" elements of size %\" PRIdPTR,\n-             n_elts, t->size);\n-    size_t fill = n_elts * t->size;\n+              \"vec_alloc %\" PRIdPTR \" elements of size %\" PRIdPTR,\n+              n_elts, elem_t->size);\n+    size_t fill = n_elts * elem_t->size;\n     size_t alloc = next_power_of_two(sizeof(rust_vec) + fill);\n-    void *mem = dom->malloc(alloc);\n+    void *mem = task->malloc(alloc, t->is_stateful ? t : NULL);\n     if (!mem) {\n         task->fail(3);\n         return NULL;"}, {"sha": "78ba85e885957db66b9cc8a57cc1b3f9395eca73", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1730d2e037fc41f31d0a90b2fde477f02f0fc798/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/1730d2e037fc41f31d0a90b2fde477f02f0fc798/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=1730d2e037fc41f31d0a90b2fde477f02f0fc798", "patch": "@@ -274,6 +274,7 @@ struct type_desc {\n     uintptr_t sever_glue_off;    // For GC.\n     uintptr_t mark_glue_off;     // For GC.\n     uintptr_t obj_drop_glue_off; // For custom destructors.\n+    uintptr_t is_stateful;\n \n     // Residual fields past here are known only to runtime.\n     UT_hash_handle hh;"}, {"sha": "63d0ee98fd5b2ca5a42f609af7e953f6ef18b770", "filename": "src/test/run-pass/vec-alloc-append.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1730d2e037fc41f31d0a90b2fde477f02f0fc798/src%2Ftest%2Frun-pass%2Fvec-alloc-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1730d2e037fc41f31d0a90b2fde477f02f0fc798/src%2Ftest%2Frun-pass%2Fvec-alloc-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-alloc-append.rs?ref=1730d2e037fc41f31d0a90b2fde477f02f0fc798", "patch": "@@ -4,7 +4,9 @@ use std;\n \n fn slice[T](vec[T] e) {\n   let vec[T] result = std._vec.alloc[T](uint(1));\n+  log \"alloced\";\n   result += e;\n+  log \"appended\";\n }\n \n fn main() {"}]}