{"sha": "b88c152784f36825a2a75b062db6cc55ff02297f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4OGMxNTI3ODRmMzY4MjVhMmE3NWIwNjJkYjZjYzU1ZmYwMjI5N2Y=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-30T17:18:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-30T17:18:36Z"}, "message": "Rollup merge of #50233 - mark-i-m:const_vec, r=kennytm\n\nMake `Vec::new` a `const fn`\n\n`RawVec::empty/_in` are a hack. They're there because `if size_of::<T> == 0 { !0 } else { 0 }` is not allowed in `const` yet. However, because `RawVec` is unstable, the `empty/empty_in` constructors can be removed when #49146 is done...", "tree": {"sha": "d46a6974a13307856ecbbfd711ac1be5c3032893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d46a6974a13307856ecbbfd711ac1be5c3032893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b88c152784f36825a2a75b062db6cc55ff02297f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa50/sCRBK7hj4Ov3rIwAAdHIIADLJQJv0Zjb1ZYeC8NZ+qkWJ\nejSUYWBa4GASiEvvSXGoKiRhZqQqKkOPLAJzGqn2zPQ1ennaU1sy8AkT+ik0h4oT\nlvrjehpmyhCrV+iLrb4ai9SGfA4mCVqWGnuq0w8+kMMKn/76mOxPwsszWLcCizBn\nTJuV5Ui5VZKkP6BBWcW2EVZ4quP31YHaTs0eXDLvhdTBJUhWTQVyT9uuXiy7u5aD\n+jbtzpMlSYQbPAzPs13aAqYwtqrgGSyIulXFoCJgOww9aqzXqh3MDmQUsztHi1Xh\ntc7wgciB7BIphIu6PY1diZV2G7syI4Hb/ks0U/HimYzF0bHrnXrhqiNqfqjZCPM=\n=Cryy\n-----END PGP SIGNATURE-----\n", "payload": "tree d46a6974a13307856ecbbfd711ac1be5c3032893\nparent 64e6dda0bce96da47e52f7f3e278d05f7a09473c\nparent f9f992379de4a82637ec4bf717ff42f27872bc48\nauthor kennytm <kennytm@gmail.com> 1525108716 +0800\ncommitter GitHub <noreply@github.com> 1525108716 +0800\n\nRollup merge of #50233 - mark-i-m:const_vec, r=kennytm\n\nMake `Vec::new` a `const fn`\n\n`RawVec::empty/_in` are a hack. They're there because `if size_of::<T> == 0 { !0 } else { 0 }` is not allowed in `const` yet. However, because `RawVec` is unstable, the `empty/empty_in` constructors can be removed when #49146 is done...\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b88c152784f36825a2a75b062db6cc55ff02297f", "html_url": "https://github.com/rust-lang/rust/commit/b88c152784f36825a2a75b062db6cc55ff02297f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b88c152784f36825a2a75b062db6cc55ff02297f/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64e6dda0bce96da47e52f7f3e278d05f7a09473c", "url": "https://api.github.com/repos/rust-lang/rust/commits/64e6dda0bce96da47e52f7f3e278d05f7a09473c", "html_url": "https://github.com/rust-lang/rust/commit/64e6dda0bce96da47e52f7f3e278d05f7a09473c"}, {"sha": "f9f992379de4a82637ec4bf717ff42f27872bc48", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f992379de4a82637ec4bf717ff42f27872bc48", "html_url": "https://github.com/rust-lang/rust/commit/f9f992379de4a82637ec4bf717ff42f27872bc48"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "0493f92bc520d1747432fec5e60ab9e6f0410a33", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b88c152784f36825a2a75b062db6cc55ff02297f/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88c152784f36825a2a75b062db6cc55ff02297f/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=b88c152784f36825a2a75b062db6cc55ff02297f", "patch": "@@ -124,6 +124,7 @@\n #![feature(pointer_methods)]\n #![feature(inclusive_range_fields)]\n #![cfg_attr(stage0, feature(generic_param_attrs))]\n+#![feature(rustc_const_unstable)]\n \n #![cfg_attr(not(test), feature(fn_traits, i128))]\n #![cfg_attr(test, feature(test))]"}, {"sha": "eb25ae17511707064c110b2dfca3ea2b439faede", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b88c152784f36825a2a75b062db6cc55ff02297f/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88c152784f36825a2a75b062db6cc55ff02297f/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=b88c152784f36825a2a75b062db6cc55ff02297f", "patch": "@@ -56,14 +56,16 @@ pub struct RawVec<T, A: Alloc = Global> {\n impl<T, A: Alloc> RawVec<T, A> {\n     /// Like `new` but parameterized over the choice of allocator for\n     /// the returned RawVec.\n-    pub fn new_in(a: A) -> Self {\n+    pub const fn new_in(a: A) -> Self {\n         // !0 is usize::MAX. This branch should be stripped at compile time.\n-        let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n+        // FIXME(mark-i-m): use this line when `if`s are allowed in `const`\n+        //let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n \n         // Unique::empty() doubles as \"unallocated\" and \"zero-sized allocation\"\n         RawVec {\n             ptr: Unique::empty(),\n-            cap,\n+            // FIXME(mark-i-m): use `cap` when ifs are allowed in const\n+            cap: [0, !0][(mem::size_of::<T>() == 0) as usize],\n             a,\n         }\n     }\n@@ -120,7 +122,7 @@ impl<T> RawVec<T, Global> {\n     /// RawVec with capacity 0. If T has 0 size, then it makes a\n     /// RawVec with capacity `usize::MAX`. Useful for implementing\n     /// delayed allocation.\n-    pub fn new() -> Self {\n+    pub const fn new() -> Self {\n         Self::new_in(Global)\n     }\n "}, {"sha": "35d0a69a05abe846942a0caad8d47b5bf08a48e6", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b88c152784f36825a2a75b062db6cc55ff02297f/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88c152784f36825a2a75b062db6cc55ff02297f/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=b88c152784f36825a2a75b062db6cc55ff02297f", "patch": "@@ -322,7 +322,8 @@ impl<T> Vec<T> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    pub fn new() -> Vec<T> {\n+    #[rustc_const_unstable(feature = \"const_vec_new\")]\n+    pub const fn new() -> Vec<T> {\n         Vec {\n             buf: RawVec::new(),\n             len: 0,"}, {"sha": "5d0b675e8e4c53639b95e6eae1fa7f0305ca0a43", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b88c152784f36825a2a75b062db6cc55ff02297f/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88c152784f36825a2a75b062db6cc55ff02297f/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=b88c152784f36825a2a75b062db6cc55ff02297f", "patch": "@@ -2552,10 +2552,9 @@ impl<T: Sized> Unique<T> {\n     /// This is useful for initializing types which lazily allocate, like\n     /// `Vec::new` does.\n     // FIXME: rename to dangling() to match NonNull?\n-    pub fn empty() -> Self {\n+    pub const fn empty() -> Self {\n         unsafe {\n-            let ptr = mem::align_of::<T>() as *mut T;\n-            Unique::new_unchecked(ptr)\n+            Unique::new_unchecked(mem::align_of::<T>() as *mut T)\n         }\n     }\n }"}, {"sha": "62e2a36d7cc77d5ea874b79b92ec7b4d2d01bb1a", "filename": "src/test/run-pass/vec-const-new.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b88c152784f36825a2a75b062db6cc55ff02297f/src%2Ftest%2Frun-pass%2Fvec-const-new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b88c152784f36825a2a75b062db6cc55ff02297f/src%2Ftest%2Frun-pass%2Fvec-const-new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-const-new.rs?ref=b88c152784f36825a2a75b062db6cc55ff02297f", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that Vec::new() can be used for constants\n+\n+#![feature(const_vec_new)]\n+\n+const MY_VEC: Vec<usize> = Vec::new();\n+\n+pub fn main() {}"}]}