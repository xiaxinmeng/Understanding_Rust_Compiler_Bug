{"sha": "ae42e537dbfabafb1f1e36d975b1fed33032c6c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlNDJlNTM3ZGJmYWJhZmIxZjFlMzZkOTc1YjFmZWQzMzAzMmM2YzE=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-09-19T20:53:12Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-09-19T20:54:24Z"}, "message": "Add regression test for thread local static mut borrows", "tree": {"sha": "04128dfc8b32976180b2ce84c779ce8bba294e69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04128dfc8b32976180b2ce84c779ce8bba294e69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae42e537dbfabafb1f1e36d975b1fed33032c6c1", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAluit4EACgkQiMlBzaHU\nZDIY0A/8DaEIlOXDJ1WjXTA+3wHMh72mhEQGO/HFIBX7Jlz7ciWcPGustA+uuNmz\n1cNxxGm8t/YTGk3CFBHLgjgS1G2DAPWcEPIOVs6A0/x1isM2YVPem9fHKNLTa67Q\nc/BOq2ABiUkwtb2WB4DaES3G1uOCL9dz+rgSNTHsNfIy03MUfwWwVo318fh4FaDo\nbX75zm0AH+NVRqgd60In6+FI26XnvFcePZJggIqSxWXypcij6BvtRySQDiQ5HKUF\nDy4BONTEXkkJ9GFL4PnylUH8h/9vVAPe/RS5ikke2i/r6e2v1XovNoeTxSw0Igah\n25e+kUjofSv+L83gAmDdV91SxNp9v+1urXw/OEbRyJUnDQY5ViN/9Xd3g6j/uO75\nMwFL1/EUIioA1mwDKjizb2fkNRUAIZ8U1G4y1Petqb/3xz2m9QmyBQmZl446ok0H\nFoC2OI3dd2A1OOd+eV1J7zeAoT9dccCwIY3tKhUanQSsYe66NV/7Aly4xw1SWt0h\ny+8bz/FPnYaM6+bsDsD4F2R0HzqlKk8SeAR8rrQQgkZe5x9UgKpgv/auNfCcX1E6\nSJlX2Hr89d38cYI5FtYX2mxHyeYVWHk4em5smGKvywtOLaHnb+YQbOQKqgu33R9V\ndQPMHuspkcA5DGkOBnkCHogAkqEGFGjZYVDsUNqRUsnwsENc4I0=\n=yolP\n-----END PGP SIGNATURE-----", "payload": "tree 04128dfc8b32976180b2ce84c779ce8bba294e69\nparent 79fcc58b24d85743d025fd880fca55748662ed3e\nauthor Santiago Pastorino <spastorino@gmail.com> 1537390392 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1537390464 -0300\n\nAdd regression test for thread local static mut borrows\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae42e537dbfabafb1f1e36d975b1fed33032c6c1", "html_url": "https://github.com/rust-lang/rust/commit/ae42e537dbfabafb1f1e36d975b1fed33032c6c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae42e537dbfabafb1f1e36d975b1fed33032c6c1/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79fcc58b24d85743d025fd880fca55748662ed3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/79fcc58b24d85743d025fd880fca55748662ed3e", "html_url": "https://github.com/rust-lang/rust/commit/79fcc58b24d85743d025fd880fca55748662ed3e"}], "stats": {"total": 35, "additions": 35, "deletions": 0}, "files": [{"sha": "e35c8095fa15d9edb8b7076c9568627ca7da4bea", "filename": "src/test/ui/nll/borrowck-thread-local-static-mut-borrow-outlives-fn.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/ae42e537dbfabafb1f1e36d975b1fed33032c6c1/src%2Ftest%2Fui%2Fnll%2Fborrowck-thread-local-static-mut-borrow-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae42e537dbfabafb1f1e36d975b1fed33032c6c1/src%2Ftest%2Fui%2Fnll%2Fborrowck-thread-local-static-mut-borrow-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowck-thread-local-static-mut-borrow-outlives-fn.rs?ref=ae42e537dbfabafb1f1e36d975b1fed33032c6c1", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+//\n+// run-pass\n+//\n+// FIXME(#54366) - We probably shouldn't allow #[thread_local] static mut to get a 'static lifetime.\n+\n+#![feature(nll)]\n+#![feature(thread_local)]\n+\n+#[thread_local]\n+static mut X1: u64 = 0;\n+\n+struct S1 {\n+    a: &'static mut u64,\n+}\n+\n+impl S1 {\n+    fn new(_x: u64) -> S1 {\n+        S1 {\n+            a: unsafe { &mut X1 },\n+        }\n+    }\n+}\n+\n+fn main() {\n+    S1::new(0).a;\n+}"}]}