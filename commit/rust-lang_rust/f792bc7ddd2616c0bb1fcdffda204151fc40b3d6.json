{"sha": "f792bc7ddd2616c0bb1fcdffda204151fc40b3d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3OTJiYzdkZGQyNjE2YzBiYjFmY2RmZmRhMjA0MTUxZmM0MGIzZDY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-16T15:26:16Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-09-16T15:26:51Z"}, "message": "Add annotation-based nameres diagnostic tests", "tree": {"sha": "247c78b6b4792a55fa638edafdc97d262fab6124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/247c78b6b4792a55fa638edafdc97d262fab6124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f792bc7ddd2616c0bb1fcdffda204151fc40b3d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f792bc7ddd2616c0bb1fcdffda204151fc40b3d6", "html_url": "https://github.com/rust-lang/rust/commit/f792bc7ddd2616c0bb1fcdffda204151fc40b3d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f792bc7ddd2616c0bb1fcdffda204151fc40b3d6/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "603613a3028d7d385195f03f626ce00e1968191e", "url": "https://api.github.com/repos/rust-lang/rust/commits/603613a3028d7d385195f03f626ce00e1968191e", "html_url": "https://github.com/rust-lang/rust/commit/603613a3028d7d385195f03f626ce00e1968191e"}], "stats": {"total": 188, "additions": 150, "deletions": 38}, "files": [{"sha": "11d84f8082ebaa211e6ede6e3af10ffe83707f36", "filename": "crates/hir_def/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f792bc7ddd2616c0bb1fcdffda204151fc40b3d6/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f792bc7ddd2616c0bb1fcdffda204151fc40b3d6/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=f792bc7ddd2616c0bb1fcdffda204151fc40b3d6", "patch": "@@ -2,6 +2,7 @@ mod globs;\n mod incremental;\n mod macros;\n mod mod_resolution;\n+mod diagnostics;\n mod primitives;\n \n use std::sync::Arc;"}, {"sha": "cd0eb1a4bef20852a43637de05530fd70991b127", "filename": "crates/hir_def/src/nameres/tests/diagnostics.rs", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/f792bc7ddd2616c0bb1fcdffda204151fc40b3d6/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f792bc7ddd2616c0bb1fcdffda204151fc40b3d6/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fdiagnostics.rs?ref=f792bc7ddd2616c0bb1fcdffda204151fc40b3d6", "patch": "@@ -0,0 +1,107 @@\n+use base_db::fixture::WithFixture;\n+use base_db::FileId;\n+use base_db::SourceDatabaseExt;\n+use hir_expand::db::AstDatabase;\n+use rustc_hash::FxHashMap;\n+use syntax::TextRange;\n+use syntax::TextSize;\n+\n+use crate::test_db::TestDB;\n+\n+fn check_diagnostics(ra_fixture: &str) {\n+    let db: TestDB = TestDB::with_files(ra_fixture);\n+    let annotations = db.extract_annotations();\n+    assert!(!annotations.is_empty());\n+\n+    let mut actual: FxHashMap<FileId, Vec<(TextRange, String)>> = FxHashMap::default();\n+    db.diagnostics(|d| {\n+        let src = d.display_source();\n+        let root = db.parse_or_expand(src.file_id).unwrap();\n+        // FIXME: macros...\n+        let file_id = src.file_id.original_file(&db);\n+        let range = src.value.to_node(&root).text_range();\n+        let message = d.message().to_owned();\n+        actual.entry(file_id).or_default().push((range, message));\n+    });\n+\n+    for (file_id, diags) in actual.iter_mut() {\n+        diags.sort_by_key(|it| it.0.start());\n+        let text = db.file_text(*file_id);\n+        // For multiline spans, place them on line start\n+        for (range, content) in diags {\n+            if text[*range].contains('\\n') {\n+                *range = TextRange::new(range.start(), range.start() + TextSize::from(1));\n+                *content = format!(\"... {}\", content);\n+            }\n+        }\n+    }\n+\n+    assert_eq!(annotations, actual);\n+}\n+\n+#[test]\n+fn unresolved_import() {\n+    check_diagnostics(\n+        r\"\n+        use does_exist;\n+        use does_not_exist;\n+          //^^^^^^^^^^^^^^ unresolved import\n+\n+        mod does_exist {}\n+        \",\n+    );\n+}\n+\n+#[test]\n+fn unresolved_import_in_use_tree() {\n+    // Only the relevant part of a nested `use` item should be highlighted.\n+    check_diagnostics(\n+        r\"\n+        use does_exist::{Exists, DoesntExist};\n+                               //^^^^^^^^^^^ unresolved import\n+\n+        use {does_not_exist::*, does_exist};\n+           //^^^^^^^^^^^^^^^^^ unresolved import\n+\n+        use does_not_exist::{\n+            a,\n+          //^ unresolved import\n+            b,\n+          //^ unresolved import\n+            c,\n+          //^ unresolved import\n+        };\n+\n+        mod does_exist {\n+            pub struct Exists;\n+        }\n+        \",\n+    );\n+}\n+\n+#[test]\n+fn unresolved_extern_crate() {\n+    check_diagnostics(\n+        r\"\n+        //- /main.rs crate:main deps:core\n+        extern crate core;\n+          extern crate doesnotexist;\n+        //^^^^^^^^^^^^^^^^^^^^^^^^^^ unresolved extern crate\n+        //- /lib.rs crate:core\n+        \",\n+    );\n+}\n+\n+#[test]\n+fn unresolved_module() {\n+    check_diagnostics(\n+        r\"\n+        //- /lib.rs\n+        mod foo;\n+          mod bar;\n+        //^^^^^^^^ unresolved module\n+        mod baz {}\n+        //- /foo.rs\n+        \",\n+    );\n+}"}, {"sha": "f93337a6ea767ae7c5e38c051bccf39da6b82868", "filename": "crates/hir_def/src/nameres/tests/mod_resolution.rs", "status": "modified", "additions": 0, "deletions": 38, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f792bc7ddd2616c0bb1fcdffda204151fc40b3d6/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f792bc7ddd2616c0bb1fcdffda204151fc40b3d6/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Ftests%2Fmod_resolution.rs?ref=f792bc7ddd2616c0bb1fcdffda204151fc40b3d6", "patch": "@@ -671,44 +671,6 @@ pub struct Baz;\n     );\n }\n \n-#[test]\n-fn unresolved_module_diagnostics() {\n-    let db = TestDB::with_files(\n-        r\"\n-        //- /lib.rs\n-        mod foo;\n-        mod bar;\n-        mod baz {}\n-        //- /foo.rs\n-        \",\n-    );\n-    let krate = db.test_crate();\n-\n-    let crate_def_map = db.crate_def_map(krate);\n-\n-    expect![[r#\"\n-        [\n-            DefDiagnostic {\n-                in_module: Idx::<ModuleData>(0),\n-                kind: UnresolvedModule {\n-                    declaration: InFile {\n-                        file_id: HirFileId(\n-                            FileId(\n-                                FileId(\n-                                    0,\n-                                ),\n-                            ),\n-                        ),\n-                        value: FileAstId::<syntax::ast::generated::nodes::Module>(1),\n-                    },\n-                    candidate: \"bar.rs\",\n-                },\n-            },\n-        ]\n-    \"#]]\n-    .assert_debug_eq(&crate_def_map.diagnostics);\n-}\n-\n #[test]\n fn module_resolution_decl_inside_module_in_non_crate_root_2() {\n     check("}, {"sha": "fb1d3c974353bcbf2cd9a96f488cad2ea0f2d0f4", "filename": "crates/hir_def/src/test_db.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f792bc7ddd2616c0bb1fcdffda204151fc40b3d6/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f792bc7ddd2616c0bb1fcdffda204151fc40b3d6/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftest_db.rs?ref=f792bc7ddd2616c0bb1fcdffda204151fc40b3d6", "patch": "@@ -5,9 +5,15 @@ use std::{\n     sync::{Arc, Mutex},\n };\n \n+use base_db::SourceDatabase;\n use base_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, Upcast};\n use hir_expand::db::AstDatabase;\n+use hir_expand::diagnostics::Diagnostic;\n+use hir_expand::diagnostics::DiagnosticSinkBuilder;\n+use rustc_hash::FxHashMap;\n use rustc_hash::FxHashSet;\n+use syntax::TextRange;\n+use test_utils::extract_annotations;\n \n use crate::db::DefDatabase;\n \n@@ -98,4 +104,40 @@ impl TestDB {\n             })\n             .collect()\n     }\n+\n+    pub fn extract_annotations(&self) -> FxHashMap<FileId, Vec<(TextRange, String)>> {\n+        let mut files = Vec::new();\n+        let crate_graph = self.crate_graph();\n+        for krate in crate_graph.iter() {\n+            let crate_def_map = self.crate_def_map(krate);\n+            for (module_id, _) in crate_def_map.modules.iter() {\n+                let file_id = crate_def_map[module_id].origin.file_id();\n+                files.extend(file_id)\n+            }\n+        }\n+        assert!(!files.is_empty());\n+        files\n+            .into_iter()\n+            .filter_map(|file_id| {\n+                let text = self.file_text(file_id);\n+                let annotations = extract_annotations(&text);\n+                if annotations.is_empty() {\n+                    return None;\n+                }\n+                Some((file_id, annotations))\n+            })\n+            .collect()\n+    }\n+\n+    pub fn diagnostics<F: FnMut(&dyn Diagnostic)>(&self, mut cb: F) {\n+        let crate_graph = self.crate_graph();\n+        for krate in crate_graph.iter() {\n+            let crate_def_map = self.crate_def_map(krate);\n+\n+            let mut sink = DiagnosticSinkBuilder::new().build(&mut cb);\n+            for (module_id, _) in crate_def_map.modules.iter() {\n+                crate_def_map.add_diagnostics(self, module_id, &mut sink);\n+            }\n+        }\n+    }\n }"}]}