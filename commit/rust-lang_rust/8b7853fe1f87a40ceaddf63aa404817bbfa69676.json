{"sha": "8b7853fe1f87a40ceaddf63aa404817bbfa69676", "node_id": "C_kwDOAAsO6NoAKDhiNzg1M2ZlMWY4N2E0MGNlYWRkZjYzYWE0MDQ4MTdiYmZhNjk2NzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-03T12:46:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-03T12:46:02Z"}, "message": "Auto merge of #92932 - ouz-a:master, r=oli-obk\n\nTemporary fix for the layout of aligned enums\n\nFix for the issue #92464\n\n~~I was after this issue for quite some time now, I have a temporary fix for it.\nI think the current problem is [here](https://github.com/ouz-a/rust/blob/e75f96763f99d56d03ada939fe05cbeb2254888d/compiler/rustc_middle/src/ty/layout.rs#L1305-L1310) created `tag` value might be wrong, because when I checked `min` and `max` values it's always between 0..1, which results in wrong size comparison in a few lines down below.\nI think `min` and `max` values don't take `#[repr(aligned(8))]` into consideration and just act from base values assigned inside the enum. If what I am saying is true, aligned enums were created with the wrong layout for some time.~~\n\n~~As stated in the title this is only a temporary fix and I think this needs further investigation, if someone wants to mentor it I would like to work on that too.~~ \ud83d\ude38\n\n**Edit: Weird some tests fail now going to close this for now...**\n\n**Edit2: I made it work again.**\n\nI think I figured out the main problem of the issue, layout types of aligned enums with custom discriminant types were not handled, which resulted in confusing(such as this issue) behavior down the line, this is a kinda hacky fix for the issue.", "tree": {"sha": "50f563e57cb1672245225b9113a139e8a8ea3ab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50f563e57cb1672245225b9113a139e8a8ea3ab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b7853fe1f87a40ceaddf63aa404817bbfa69676", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b7853fe1f87a40ceaddf63aa404817bbfa69676", "html_url": "https://github.com/rust-lang/rust/commit/8b7853fe1f87a40ceaddf63aa404817bbfa69676", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b7853fe1f87a40ceaddf63aa404817bbfa69676/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "796bf14f2e129283d9daee7f05d14c2dfa76d643", "url": "https://api.github.com/repos/rust-lang/rust/commits/796bf14f2e129283d9daee7f05d14c2dfa76d643", "html_url": "https://github.com/rust-lang/rust/commit/796bf14f2e129283d9daee7f05d14c2dfa76d643"}, {"sha": "fd5be23a96274cb1d1f83acdd8f7370ee15e00fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd5be23a96274cb1d1f83acdd8f7370ee15e00fa", "html_url": "https://github.com/rust-lang/rust/commit/fd5be23a96274cb1d1f83acdd8f7370ee15e00fa"}], "stats": {"total": 20, "additions": 19, "deletions": 1}, "files": [{"sha": "ad817e185a3cfd5abe10610c5f3d06a4c681557e", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8b7853fe1f87a40ceaddf63aa404817bbfa69676/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7853fe1f87a40ceaddf63aa404817bbfa69676/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=8b7853fe1f87a40ceaddf63aa404817bbfa69676", "patch": "@@ -1310,7 +1310,10 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     },\n                 };\n                 let mut abi = Abi::Aggregate { sized: true };\n-                if tag.value.size(dl) == size {\n+\n+                // Without latter check aligned enums with custom discriminant values\n+                // Would result in ICE see the issue #92464 for more info\n+                if tag.value.size(dl) == size || variants.iter().all(|layout| layout.is_empty()) {\n                     abi = Abi::Scalar(tag);\n                 } else {\n                     // Try to use a ScalarPair for all tagged enums."}, {"sha": "4b5776a6aa8ee2c09d09d7eb6ac21c2c214abaf1", "filename": "src/test/ui/aligned_enum_cast.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8b7853fe1f87a40ceaddf63aa404817bbfa69676/src%2Ftest%2Fui%2Faligned_enum_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b7853fe1f87a40ceaddf63aa404817bbfa69676/src%2Ftest%2Fui%2Faligned_enum_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Faligned_enum_cast.rs?ref=8b7853fe1f87a40ceaddf63aa404817bbfa69676", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+// allows aligned custom discriminant enums to cast into other types\n+// See the issue #92464 for more info\n+#[allow(dead_code)]\n+#[repr(align(8))]\n+enum Aligned {\n+    Zero = 0,\n+    One = 1,\n+}\n+\n+fn main() {\n+    let aligned = Aligned::Zero;\n+    let fo = aligned as u8;\n+    println!(\"foo {}\",fo);\n+}"}]}