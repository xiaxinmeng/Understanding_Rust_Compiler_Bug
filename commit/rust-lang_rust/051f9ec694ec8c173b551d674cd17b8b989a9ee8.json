{"sha": "051f9ec694ec8c173b551d674cd17b8b989a9ee8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MWY5ZWM2OTRlYzhjMTczYjU1MWQ2NzRjZDE3YjhiOTg5YTllZTg=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2021-04-24T01:20:48Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2021-04-30T04:10:14Z"}, "message": "Add --run flag to compiletest\n\nThis controls whether run-* tests actually get run.", "tree": {"sha": "fc17e7b7dda2b512d5167defba18b64b833fee75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc17e7b7dda2b512d5167defba18b64b833fee75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/051f9ec694ec8c173b551d674cd17b8b989a9ee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/051f9ec694ec8c173b551d674cd17b8b989a9ee8", "html_url": "https://github.com/rust-lang/rust/commit/051f9ec694ec8c173b551d674cd17b8b989a9ee8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/051f9ec694ec8c173b551d674cd17b8b989a9ee8/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb491ed23937aef876622e4beb68ae95938b3bf9", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb491ed23937aef876622e4beb68ae95938b3bf9", "html_url": "https://github.com/rust-lang/rust/commit/bb491ed23937aef876622e4beb68ae95938b3bf9"}], "stats": {"total": 31, "additions": 26, "deletions": 5}, "files": [{"sha": "9a2166675d8ab07c62da7949a9e87fe1321da3bc", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/051f9ec694ec8c173b551d674cd17b8b989a9ee8/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051f9ec694ec8c173b551d674cd17b8b989a9ee8/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=051f9ec694ec8c173b551d674cd17b8b989a9ee8", "patch": "@@ -249,6 +249,9 @@ pub struct Config {\n     /// Force the pass mode of a check/build/run-pass test to this mode.\n     pub force_pass_mode: Option<PassMode>,\n \n+    /// Explicitly enable or disable running.\n+    pub run: Option<bool>,\n+\n     /// Write out a parseable log of tests that were run\n     pub logfile: Option<PathBuf>,\n "}, {"sha": "5bf1b55e45b4abcf81373573890c56ad609c57db", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/051f9ec694ec8c173b551d674cd17b8b989a9ee8/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051f9ec694ec8c173b551d674cd17b8b989a9ee8/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=051f9ec694ec8c173b551d674cd17b8b989a9ee8", "patch": "@@ -87,6 +87,7 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             \"force {check,build,run}-pass tests to this mode.\",\n             \"check | build | run\",\n         )\n+        .optopt(\"\", \"run\", \"whether to execute run-* tests\", \"auto | always | never\")\n         .optflag(\"\", \"ignored\", \"run tests marked as ignored\")\n         .optflag(\"\", \"exact\", \"filters match exactly\")\n         .optopt(\n@@ -234,6 +235,12 @@ pub fn parse_config(args: Vec<String>) -> Config {\n             mode.parse::<PassMode>()\n                 .unwrap_or_else(|_| panic!(\"unknown `--pass` option `{}` given\", mode))\n         }),\n+        run: matches.opt_str(\"run\").and_then(|mode| match mode.as_str() {\n+            \"auto\" => None,\n+            \"always\" => Some(true),\n+            \"never\" => Some(false),\n+            _ => panic!(\"unknown `--run` option `{}` given\", mode),\n+        }),\n         logfile: matches.opt_str(\"logfile\").map(|s| PathBuf::from(&s)),\n         runtool: matches.opt_str(\"runtool\"),\n         host_rustcflags: matches.opt_str(\"host-rustcflags\"),"}, {"sha": "c758b977573aea0ec85a3eb7240b944539870ac2", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/051f9ec694ec8c173b551d674cd17b8b989a9ee8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/051f9ec694ec8c173b551d674cd17b8b989a9ee8/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=051f9ec694ec8c173b551d674cd17b8b989a9ee8", "patch": "@@ -317,6 +317,7 @@ enum TestOutput {\n enum WillExecute {\n     Yes,\n     No,\n+    Disabled,\n }\n \n /// Should `--emit metadata` be used?\n@@ -357,13 +358,22 @@ impl<'test> TestCx<'test> {\n     }\n \n     fn should_run(&self, pm: Option<PassMode>) -> WillExecute {\n-        match self.config.mode {\n+        let test_should_run = match self.config.mode {\n             Ui if pm == Some(PassMode::Run) || self.props.fail_mode == Some(FailMode::Run) => {\n-                WillExecute::Yes\n+                true\n             }\n-            MirOpt if pm == Some(PassMode::Run) => WillExecute::Yes,\n-            Ui | MirOpt => WillExecute::No,\n+            MirOpt if pm == Some(PassMode::Run) => true,\n+            Ui | MirOpt => false,\n             mode => panic!(\"unimplemented for mode {:?}\", mode),\n+        };\n+        let enabled = self.config.run.unwrap_or_else(|| {\n+            // Auto-detect whether to run based on the platform.\n+            !self.config.target.ends_with(\"-fuchsia\")\n+        });\n+        match (test_should_run, enabled) {\n+            (false, _) => WillExecute::No,\n+            (true, true) => WillExecute::Yes,\n+            (true, false) => WillExecute::Disabled,\n         }\n     }\n \n@@ -1531,7 +1541,8 @@ impl<'test> TestCx<'test> {\n         // Only use `make_exe_name` when the test ends up being executed.\n         let output_file = match will_execute {\n             WillExecute::Yes => TargetLocation::ThisFile(self.make_exe_name()),\n-            WillExecute::No => TargetLocation::ThisDirectory(self.output_base_dir()),\n+            WillExecute::No | WillExecute::Disabled =>\n+                TargetLocation::ThisDirectory(self.output_base_dir()),\n         };\n \n         let allow_unused = match self.config.mode {"}]}