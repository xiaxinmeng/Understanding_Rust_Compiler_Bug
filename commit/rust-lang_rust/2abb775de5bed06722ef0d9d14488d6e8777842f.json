{"sha": "2abb775de5bed06722ef0d9d14488d6e8777842f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhYmI3NzVkZTViZWQwNjcyMmVmMGQ5ZDE0NDg4ZDZlODc3Nzg0MmY=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-06T13:10:04Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-03-06T13:10:04Z"}, "message": "Fix dogfood", "tree": {"sha": "213d3d1061fcd1ab16c9bb7441f701b385a5c72a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/213d3d1061fcd1ab16c9bb7441f701b385a5c72a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2abb775de5bed06722ef0d9d14488d6e8777842f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2abb775de5bed06722ef0d9d14488d6e8777842f", "html_url": "https://github.com/rust-lang/rust/commit/2abb775de5bed06722ef0d9d14488d6e8777842f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2abb775de5bed06722ef0d9d14488d6e8777842f/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a", "html_url": "https://github.com/rust-lang/rust/commit/f69e09ab0e2cde4a84eb8413f16fb03094dc7a2a"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "60e175d63826436adf42082b3053f4d224e0f61d", "filename": "src/misc_early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2abb775de5bed06722ef0d9d14488d6e8777842f/src%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2abb775de5bed06722ef0d9d14488d6e8777842f/src%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc_early.rs?ref=2abb775de5bed06722ef0d9d14488d6e8777842f", "patch": "@@ -134,7 +134,7 @@ impl EarlyLintPass for MiscEarly {\n                                        expr.span,\n                                        \"Try not to call a closure in the expression where it is declared.\",\n                                        |db| {\n-                                            if decl.inputs.len() == 0 {\n+                                            if decl.inputs.is_empty() {\n                                                 let hint = format!(\"{}\", snippet(cx, block.span, \"..\"));\n                                                 db.span_suggestion(expr.span, \"Try doing something like: \", hint);\n                                             }"}]}