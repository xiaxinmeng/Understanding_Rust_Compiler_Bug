{"sha": "0a3619c9e51a16d08cfd9a825cb89c6a49f80ffc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhMzYxOWM5ZTUxYTE2ZDA4Y2ZkOWE4MjVjYjg5YzZhNDlmODBmZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-09T21:01:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-05-09T21:01:19Z"}, "message": "Auto merge of #69530 - Aaron1011:perf/skip-coerce-var, r=nikomatsakis\n\n[perf] Skip attempting to run coerce_unsized on an inference variable\n\nSee the included comment for a detailed explanation of why this is\nsound.", "tree": {"sha": "97ca6f473890d6bac407b65247791bba850f4532", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97ca6f473890d6bac407b65247791bba850f4532"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a3619c9e51a16d08cfd9a825cb89c6a49f80ffc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a3619c9e51a16d08cfd9a825cb89c6a49f80ffc", "html_url": "https://github.com/rust-lang/rust/commit/0a3619c9e51a16d08cfd9a825cb89c6a49f80ffc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a3619c9e51a16d08cfd9a825cb89c6a49f80ffc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bad3bf622bded50a97c0a54e29350eada2a3a169", "url": "https://api.github.com/repos/rust-lang/rust/commits/bad3bf622bded50a97c0a54e29350eada2a3a169", "html_url": "https://github.com/rust-lang/rust/commit/bad3bf622bded50a97c0a54e29350eada2a3a169"}, {"sha": "ff6e4ee7ad9b61d1ac1ae85fff14c4dacb66034f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff6e4ee7ad9b61d1ac1ae85fff14c4dacb66034f", "html_url": "https://github.com/rust-lang/rust/commit/ff6e4ee7ad9b61d1ac1ae85fff14c4dacb66034f"}], "stats": {"total": 36, "additions": 35, "deletions": 1}, "files": [{"sha": "4ac3f2625ab8699a5a51deca6d9f750c0a1666ca", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/0a3619c9e51a16d08cfd9a825cb89c6a49f80ffc/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a3619c9e51a16d08cfd9a825cb89c6a49f80ffc/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=0a3619c9e51a16d08cfd9a825cb89c6a49f80ffc", "patch": "@@ -452,9 +452,43 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n     // &[T; n] or &mut [T; n] -> &[T]\n     // or &mut [T; n] -> &mut [T]\n     // or &Concrete -> &Trait, etc.\n-    fn coerce_unsized(&self, source: Ty<'tcx>, target: Ty<'tcx>) -> CoerceResult<'tcx> {\n+    fn coerce_unsized(&self, mut source: Ty<'tcx>, mut target: Ty<'tcx>) -> CoerceResult<'tcx> {\n         debug!(\"coerce_unsized(source={:?}, target={:?})\", source, target);\n \n+        source = self.shallow_resolve(source);\n+        target = self.shallow_resolve(target);\n+        debug!(\"coerce_unsized: resolved source={:?} target={:?}\", source, target);\n+\n+        // These 'if' statements require some explanation.\n+        // The `CoerceUnsized` trait is special - it is only\n+        // possible to write `impl CoerceUnsized<B> for A` where\n+        // A and B have 'matching' fields. This rules out the following\n+        // two types of blanket impls:\n+        //\n+        // `impl<T> CoerceUnsized<T> for SomeType`\n+        // `impl<T> CoerceUnsized<SomeType> for T`\n+        //\n+        // Both of these trigger a special `CoerceUnsized`-related error (E0376)\n+        //\n+        // We can take advantage of this fact to avoid performing unecessary work.\n+        // If either `source` or `target` is a type variable, then any applicable impl\n+        // would need to be generic over the self-type (`impl<T> CoerceUnsized<SomeType> for T`)\n+        // or generic over the `CoerceUnsized` type parameter (`impl<T> CoerceUnsized<T> for\n+        // SomeType`).\n+        //\n+        // However, these are exactly the kinds of impls which are forbidden by\n+        // the compiler! Therefore, we can be sure that coercion will always fail\n+        // when either the source or target type is a type variable. This allows us\n+        // to skip performing any trait selection, and immediately bail out.\n+        if source.is_ty_var() {\n+            debug!(\"coerce_unsized: source is a TyVar, bailing out\");\n+            return Err(TypeError::Mismatch);\n+        }\n+        if target.is_ty_var() {\n+            debug!(\"coerce_unsized: target is a TyVar, bailing out\");\n+            return Err(TypeError::Mismatch);\n+        }\n+\n         let traits =\n             (self.tcx.lang_items().unsize_trait(), self.tcx.lang_items().coerce_unsized_trait());\n         let (unsize_did, coerce_unsized_did) = if let (Some(u), Some(cu)) = traits {"}]}