{"sha": "d0e9cd2bc655f13392c6687afa72e4dca706abbe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZTljZDJiYzY1NWYxMzM5MmM2Njg3YWZhNzJlNGRjYTcwNmFiYmU=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-07-05T03:41:53Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2019-07-05T03:45:58Z"}, "message": "Fix clippy::redundant_clone", "tree": {"sha": "eb325b0b466a9267755c3e457727f63d86c65257", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb325b0b466a9267755c3e457727f63d86c65257"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0e9cd2bc655f13392c6687afa72e4dca706abbe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0e9cd2bc655f13392c6687afa72e4dca706abbe", "html_url": "https://github.com/rust-lang/rust/commit/d0e9cd2bc655f13392c6687afa72e4dca706abbe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0e9cd2bc655f13392c6687afa72e4dca706abbe/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21f70a7293e7b24dedeec9a504763a1a3ef57675", "url": "https://api.github.com/repos/rust-lang/rust/commits/21f70a7293e7b24dedeec9a504763a1a3ef57675", "html_url": "https://github.com/rust-lang/rust/commit/21f70a7293e7b24dedeec9a504763a1a3ef57675"}], "stats": {"total": 11, "additions": 5, "deletions": 6}, "files": [{"sha": "7d5d9b995bc7b1493107abe6eed7c670c044deb4", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e9cd2bc655f13392c6687afa72e4dca706abbe/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e9cd2bc655f13392c6687afa72e4dca706abbe/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=d0e9cd2bc655f13392c6687afa72e4dca706abbe", "patch": "@@ -169,7 +169,7 @@ impl ModuleSource {\n             (None, Some(item_id)) => {\n                 let module = item_id.to_node(db);\n                 assert!(module.item_list().is_some(), \"expected inline module\");\n-                ModuleSource::Module(module.to_owned())\n+                ModuleSource::Module(module)\n             }\n             (None, None) => panic!(),\n         }"}, {"sha": "f47f4c5deb9b85cd2bbf79c2d1cc43dbe1751cfb", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d0e9cd2bc655f13392c6687afa72e4dca706abbe/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e9cd2bc655f13392c6687afa72e4dca706abbe/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=d0e9cd2bc655f13392c6687afa72e4dca706abbe", "patch": "@@ -895,8 +895,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             None => (receiver_ty, Ty::Unknown, None),\n         };\n-        let substs =\n-            self.substs_for_method_call(def_generics.clone(), generic_args, &derefed_receiver_ty);\n+        let substs = self.substs_for_method_call(def_generics, generic_args, &derefed_receiver_ty);\n         let method_ty = method_ty.apply_substs(substs);\n         let method_ty = self.insert_type_vars(method_ty);\n         self.register_obligations_for_call(&method_ty);"}, {"sha": "48f1f49c937ff9b9116d4f0b6d26505f3c127e3c", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d0e9cd2bc655f13392c6687afa72e4dca706abbe/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e9cd2bc655f13392c6687afa72e4dca706abbe/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=d0e9cd2bc655f13392c6687afa72e4dca706abbe", "patch": "@@ -88,7 +88,7 @@ impl HoverResult {\n fn hover_text(docs: Option<String>, desc: Option<String>) -> Option<String> {\n     match (desc, docs) {\n         (Some(desc), docs) => Some(rust_code_markup_with_doc(desc, docs)),\n-        (None, Some(docs)) => Some(docs.to_string()),\n+        (None, Some(docs)) => Some(docs),\n         _ => None,\n     }\n }"}, {"sha": "132f6f875b7eebff692374d57dc636116c059b4d", "filename": "crates/ra_ide_api/src/mock_analysis.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0e9cd2bc655f13392c6687afa72e4dca706abbe/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e9cd2bc655f13392c6687afa72e4dca706abbe/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fmock_analysis.rs?ref=d0e9cd2bc655f13392c6687afa72e4dca706abbe", "patch": "@@ -62,13 +62,13 @@ impl MockAnalysis {\n     pub fn add_file_with_position(&mut self, path: &str, text: &str) -> FilePosition {\n         let (offset, text) = extract_offset(text);\n         let file_id = FileId((self.files.len() + 1) as u32);\n-        self.files.push((path.to_string(), text.to_string()));\n+        self.files.push((path.to_string(), text));\n         FilePosition { file_id, offset }\n     }\n     pub fn add_file_with_range(&mut self, path: &str, text: &str) -> FileRange {\n         let (range, text) = extract_range(text);\n         let file_id = FileId((self.files.len() + 1) as u32);\n-        self.files.push((path.to_string(), text.to_string()));\n+        self.files.push((path.to_string(), text));\n         FileRange { file_id, range }\n     }\n     pub fn id_of(&self, path: &str) -> FileId {"}]}