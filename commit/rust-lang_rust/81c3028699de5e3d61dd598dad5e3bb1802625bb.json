{"sha": "81c3028699de5e3d61dd598dad5e3bb1802625bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxYzMwMjg2OTlkZTVlM2Q2MWRkNTk4ZGFkNWUzYmIxODAyNjI1YmI=", "commit": {"author": {"name": "Roland Tanglao", "email": "roland@rolandtanglao.com", "date": "2012-01-12T06:02:38Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-12T06:37:25Z"}, "message": "make rustdocs more terse for bool.rs where it is obvious to programmers as per feedback from graydon", "tree": {"sha": "a2de7f005583a7fc450ea16213f2374fee6bb047", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2de7f005583a7fc450ea16213f2374fee6bb047"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81c3028699de5e3d61dd598dad5e3bb1802625bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81c3028699de5e3d61dd598dad5e3bb1802625bb", "html_url": "https://github.com/rust-lang/rust/commit/81c3028699de5e3d61dd598dad5e3bb1802625bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81c3028699de5e3d61dd598dad5e3bb1802625bb/comments", "author": {"login": "rtanglao", "id": 45195, "node_id": "MDQ6VXNlcjQ1MTk1", "avatar_url": "https://avatars.githubusercontent.com/u/45195?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rtanglao", "html_url": "https://github.com/rtanglao", "followers_url": "https://api.github.com/users/rtanglao/followers", "following_url": "https://api.github.com/users/rtanglao/following{/other_user}", "gists_url": "https://api.github.com/users/rtanglao/gists{/gist_id}", "starred_url": "https://api.github.com/users/rtanglao/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rtanglao/subscriptions", "organizations_url": "https://api.github.com/users/rtanglao/orgs", "repos_url": "https://api.github.com/users/rtanglao/repos", "events_url": "https://api.github.com/users/rtanglao/events{/privacy}", "received_events_url": "https://api.github.com/users/rtanglao/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "350e87eaae66811cebf8ab6535c69984473d1b08", "url": "https://api.github.com/repos/rust-lang/rust/commits/350e87eaae66811cebf8ab6535c69984473d1b08", "html_url": "https://github.com/rust-lang/rust/commit/350e87eaae66811cebf8ab6535c69984473d1b08"}], "stats": {"total": 58, "additions": 13, "deletions": 45}, "files": [{"sha": "4b673c79f8106133e7ae4114b73a84ecd2c030b7", "filename": "src/libcore/bool.rs", "status": "modified", "additions": 13, "deletions": 45, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/81c3028699de5e3d61dd598dad5e3bb1802625bb/src%2Flibcore%2Fbool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c3028699de5e3d61dd598dad5e3bb1802625bb/src%2Flibcore%2Fbool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fbool.rs?ref=81c3028699de5e3d61dd598dad5e3bb1802625bb", "patch": "@@ -11,78 +11,52 @@ export from_str, to_str, all_values, to_bit;\n type t = bool;\n \n #[doc(\n-  brief = \"Negation/Inverse\",\n-  args(v = \"Value to Negate/Invert\"),\n-  return = \"Negated/Inverted Value\"\n+  brief = \"Negation/Inverse\"\n )]\n pure fn not(v: t) -> t { !v }\n \n #[doc(\n-  brief = \"Conjunction\",\n-  args(a = \"value `a`\",\n-       b = \"value `b`\"),\n-  return = \"`a` AND `b`\"\n+  brief = \"Conjunction\"\n )]\n pure fn and(a: t, b: t) -> t { a && b }\n \n #[doc(\n-  brief = \"Disjunction\",\n-  args(a = \"value `a`\",\n-       b = \"value `b`\"),\n-  return = \"`a` OR `b`\"\n+  brief = \"Disjunction\"\n )]\n pure fn or(a: t, b: t) -> t { a || b }\n \n #[doc(\n-  brief = \"Exclusive or, i.e. `or(and(a, not(b)), and(not(a), b))`\",\n-  args(a = \"value `a`\",\n-       b = \"value `b`\"),\n-  return = \"`a` XOR `b`\"\n+  brief = \"Exclusive or, i.e. `or(and(a, not(b)), and(not(a), b))`\"\n )]\n pure fn xor(a: t, b: t) -> t { (a && !b) || (!a && b) }\n \n #[doc(\n-  brief = \"Implication in the logic, i.e. from `a` follows `b`\",\n-  args(a = \"value `a`\",\n-       b = \"value `b`\"),\n-  return = \"`a` IMPLIES `b`\"\n+  brief = \"Implication in the logic, i.e. from `a` follows `b`\"\n )]\n pure fn implies(a: t, b: t) -> t { !a || b }\n \n #[doc(\n-  brief = \"true if truth values `a` and `b` are indistinguishable in the logic\",\n-  args(a = \"value `a`\",\n-       b = \"value `b`\"),\n-  return = \"`a` == `b`\"\n+  brief = \"true if truth values `a` and `b` are indistinguishable in the logic\"\n )]\n pure fn eq(a: t, b: t) -> bool { a == b }\n \n #[doc(\n-  brief = \"true if truth values `a` and `b` are distinguishable in the logic\",\n-  args(a = \"value `a`\",\n-       b = \"value `b`\"),\n-  return = \"`a` != `b`\"\n+  brief = \"true if truth values `a` and `b` are distinguishable in the logic\"\n )]\n pure fn ne(a: t, b: t) -> bool { a != b }\n \n #[doc(\n-  brief = \"true if `v` represents truth in the logic\",\n-  args(v = \"value `v`\"),\n-  return = \"bool(`v`)\"\n+  brief = \"true if `v` represents truth in the logic\"\n )]\n pure fn is_true(v: t) -> bool { v }\n \n #[doc(\n-  brief = \"true if `v` represents falsehood in the logic\",\n-  args(v = \"value `v`\"),\n-  return = \"bool(!`v`)\"\n+  brief = \"true if `v` represents falsehood in the logic\"\n )]\n pure fn is_false(v: t) -> bool { !v }\n \n #[doc(\n-  brief = \"Parse logic value from `s`\",\n-  args(v = \"string value `s`\"),\n-  return = \"true if `s` equals \\\"true\\\", else false\"\n+  brief = \"Parse logic value from `s`\"\n )]\n pure fn from_str(s: str) -> t {\n     alt s {\n@@ -92,26 +66,20 @@ pure fn from_str(s: str) -> t {\n }\n \n #[doc(\n-  brief = \"Convert `v` into a string\",\n-  args(v = \"truth value `v`\"),\n-  return = \"\\\"true\\\" if value `v` is true, else \\\"false\\\"\"\n+  brief = \"Convert `v` into a string\"\n )]\n pure fn to_str(v: t) -> str { if v { \"true\" } else { \"false\" } }\n \n #[doc(\n-  brief = \"Iterates over all truth values by passing them to `blk` in an unspecified order\",\n-  args(v = \"block value `v`\"),\n-  return = \"Undefined return value\"\n+  brief = \"Iterates over all truth values by passing them to `blk` in an unspecified order\"\n )]\n fn all_values(blk: block(v: t)) {\n     blk(true);\n     blk(false);\n }\n \n #[doc(\n-  brief = \"converts truth value to an 8 bit byte\",\n-  args(v = \"value `v`\"),\n-  return = \"returns byte with value 1 if `v` has truth value of true, else 0\"\n+  brief = \"converts truth value to an 8 bit byte\"\n )]\n pure fn to_bit(v: t) -> u8 { if v { 1u8 } else { 0u8 } }\n "}]}