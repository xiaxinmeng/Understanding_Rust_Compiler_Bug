{"sha": "2c0aa257e293dde91042a8045100d9923d139a04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMGFhMjU3ZTI5M2RkZTkxMDQyYTgwNDUxMDBkOTkyM2QxMzlhMDQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-09T23:01:07Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-09T23:29:25Z"}, "message": "rustc: Switch over to resolve3", "tree": {"sha": "995daa19d33e0ea82b4bf5930d0abd96e033c224", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/995daa19d33e0ea82b4bf5930d0abd96e033c224"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c0aa257e293dde91042a8045100d9923d139a04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c0aa257e293dde91042a8045100d9923d139a04", "html_url": "https://github.com/rust-lang/rust/commit/2c0aa257e293dde91042a8045100d9923d139a04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c0aa257e293dde91042a8045100d9923d139a04/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2edc4195d5b919e0c4d96996b63d661fca9dfb35", "url": "https://api.github.com/repos/rust-lang/rust/commits/2edc4195d5b919e0c4d96996b63d661fca9dfb35", "html_url": "https://github.com/rust-lang/rust/commit/2edc4195d5b919e0c4d96996b63d661fca9dfb35"}], "stats": {"total": 41, "additions": 11, "deletions": 30}, "files": [{"sha": "9a7bcc0e171b8ba3e50ba7bb3a00b69f545cb168", "filename": "src/libsyntax/ext/pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c0aa257e293dde91042a8045100d9923d139a04/src%2Flibsyntax%2Fext%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0aa257e293dde91042a8045100d9923d139a04/src%2Flibsyntax%2Fext%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fpipes.rs?ref=2c0aa257e293dde91042a8045100d9923d139a04", "patch": "@@ -8,7 +8,7 @@ import parse::common::parser_common;\n \n import pipes::parse_proto::proto_parser;\n \n-import pipes::pipec::*;\n+import pipes::pipec::methods;\n \n fn expand_proto(cx: ext_ctxt, _sp: span, id: ast::ident, tt: ast::token_tree)\n     -> @ast::item\n@@ -26,4 +26,4 @@ fn expand_proto(cx: ext_ctxt, _sp: span, id: ast::ident, tt: ast::token_tree)\n     let proto = rust_parser.parse_proto(id);\n \n     proto.compile(cx)\n-}\n\\ No newline at end of file\n+}"}, {"sha": "4d6bd53d8df7ae27ff63756db6a4cb6d52645fa1", "filename": "src/libsyntax/parse.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2c0aa257e293dde91042a8045100d9923d139a04/src%2Flibsyntax%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0aa257e293dde91042a8045100d9923d139a04/src%2Flibsyntax%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse.rs?ref=2c0aa257e293dde91042a8045100d9923d139a04", "patch": "@@ -12,17 +12,14 @@ export parse_crate_from_source_str;\n export parse_expr_from_source_str, parse_item_from_source_str;\n export parse_from_source_str;\n \n-// this used to be `import common::parser_common`, but it was causing\n-// unresolved import errors. Maybe resolve3 will fix it.\n-import common::*;\n import parser::parser;\n import attr::parser_attr;\n import common::parser_common;\n import ast::node_id;\n import util::interner;\n-// FIXME (#1935): resolve badness\n-import lexer::*;\n import diagnostic::{span_handler, mk_span_handler, mk_handler, emitter};\n+import lexer::{reader, string_reader, string_reader_as_reader};\n+import lexer::{tt_reader_as_reader};\n \n type parse_sess = @{\n     cm: codemap::codemap,"}, {"sha": "31069225c03e7186dc2fad8269fada55ac4bb947", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2c0aa257e293dde91042a8045100d9923d139a04/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0aa257e293dde91042a8045100d9923d139a04/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=2c0aa257e293dde91042a8045100d9923d139a04", "patch": "@@ -1,8 +1,8 @@\n import io::reader_util;\n import io::println;//XXXXXXXXxxx\n import util::interner;\n-import lexer::{ string_reader, bump, is_eof, nextch,\n-               is_whitespace, get_str_from, string_reader_as_reader };\n+import lexer::{string_reader, bump, is_eof, nextch,\n+               is_whitespace, get_str_from, string_reader_as_reader, reader};\n \n export cmnt;\n export lit;"}, {"sha": "6f11f18540a75282b4e95be54f3ac7f9ee7a38a2", "filename": "src/libsyntax/parse/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c0aa257e293dde91042a8045100d9923d139a04/src%2Flibsyntax%2Fparse%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0aa257e293dde91042a8045100d9923d139a04/src%2Flibsyntax%2Fparse%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcommon.rs?ref=2c0aa257e293dde91042a8045100d9923d139a04", "patch": "@@ -1,6 +1,7 @@\n import std::map::{hashmap};\n import ast_util::spanned;\n import parser::parser;\n+import lexer::reader;\n \n type seq_sep = {\n     sep: option<token::token>,"}, {"sha": "882957ade5b6ad3e1aa6e42c0ac854b68d201d9e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c0aa257e293dde91042a8045100d9923d139a04/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0aa257e293dde91042a8045100d9923d139a04/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=2c0aa257e293dde91042a8045100d9923d139a04", "patch": "@@ -5,7 +5,7 @@ import token::{can_begin_expr, is_ident, is_plain_ident, ACTUALLY};\n import codemap::{span,fss_none};\n import util::interner;\n import ast_util::{spanned, respan, mk_sp, ident_to_path, operator_prec};\n-import lexer::reader;\n+import lexer::{reader, tt_reader_as_reader};\n import prec::{as_prec, token_to_binop};\n import attr::parser_attr;\n import common::{seq_sep_trailing_disallowed, seq_sep_trailing_allowed,"}, {"sha": "606bcd77e1a3138e67f1eb40d2ec23cb9b25f87e", "filename": "src/rustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 20, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2c0aa257e293dde91042a8045100d9923d139a04/src%2Frustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c0aa257e293dde91042a8045100d9923d139a04/src%2Frustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fdriver.rs?ref=2c0aa257e293dde91042a8045100d9923d139a04", "patch": "@@ -168,26 +168,9 @@ fn compile_upto(sess: session, cfg: ast::crate_cfg,\n                              session::sess_os_to_meta_os(sess.targ_cfg.os),\n                              sess.opts.static));\n \n-    let mut def_map;\n-    let mut impl_map;\n-    let mut exp_map;\n-    if sess.fast_resolve() {\n-        let { def_map: fast_dm, exp_map: fast_em, impl_map: fast_im } =\n-            time(time_passes, \"fast resolution\", ||\n-                 middle::resolve3::resolve_crate(sess, ast_map, crate));\n-\n-        def_map = fast_dm;\n-        impl_map = fast_im;\n-        exp_map = fast_em;\n-    } else {\n-        let { def_map: normal_dm, exp_map: normal_em, impl_map: normal_im } =\n-            time(time_passes, \"resolution\", ||\n-                 resolve::resolve_crate(sess, ast_map, crate));\n-\n-        def_map = normal_dm;\n-        impl_map = normal_im;\n-        exp_map = normal_em;\n-    }\n+    let { def_map: def_map, exp_map: exp_map, impl_map: impl_map } =\n+        time(time_passes, \"resolution\", ||\n+             middle::resolve3::resolve_crate(sess, ast_map, crate));\n \n     let freevars = time(time_passes, \"freevar finding\", ||\n         freevars::annotate_freevars(def_map, crate));"}]}