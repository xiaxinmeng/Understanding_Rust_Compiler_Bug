{"sha": "7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhNmEyNWViMmUwNzI2N2YxOWFiZmNmOTNhMGUyMGMyMzI0YzBiMWM=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-05-15T15:56:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-05-15T15:56:49Z"}, "message": "Rollup merge of #85324 - FabianWolff:issue-85255, r=varkor\n\nWarn about unused `pub` fields in non-`pub` structs\n\nThis pull request fixes #85255. The current implementation of dead code analysis is too prudent because it marks all `pub` fields of structs as live, even though they cannot be accessed from outside of the current crate if the struct itself only has restricted or private visibility.\n\nI have changed this behavior to take the containing struct's visibility into account when looking at field visibility and liveness. This also makes dead code warnings more consistent; consider the example given in #85255:\n```rust\nstruct Foo {\n    a: i32,\n    pub b: i32,\n}\n\nstruct Bar;\n\nimpl Bar {\n    fn a(&self) -> i32 { 5 }\n    pub fn b(&self) -> i32 { 6 }\n}\n\nfn main() {\n    let _ = Foo { a: 1, b: 2 };\n    let _ = Bar;\n}\n```\nCurrent nightly already warns about `Bar::b()`, even though it is `pub` (but `Bar` is not). It should therefore also warn about `Foo::b`, which it does with the changes in this PR.", "tree": {"sha": "4ba12fa84caa8ea18002a6c59064bca11eb2d16c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ba12fa84caa8ea18002a6c59064bca11eb2d16c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgn+9CCRBK7hj4Ov3rIwAAZ3cIADdL+9T9j5AvM/WmMp7iIIzy\nXQvzzthJkFgc7cNq8V0D4cfzzrxT6YrxQbp9KmaYqrX4jllhcmthlUrPh2Vy4OIR\nIcUHUGes6aylyOGdHRDSFhlDikzu4gCmrRQpqk1Vi1mA0iGyNqVDTCcm4xEG0Ym3\n5Kt4H74nPkTywrBFQFOIhtZx6ABMxLNZQyUDQsADRJfNPY4qAgx6+rucvFPLJTt1\n+21ohbQnEAfSzvtFHUZR/6NJRk5P8+VmBRKwKtDdUTDEic8JXD5q9CgeSMF1pGKl\nAsBPEGFYePa2s/e2D5OdVn8Z810dWJgAOP3SkZlcxhxBsXoDigow4Xay4CCbET0=\n=3/TJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ba12fa84caa8ea18002a6c59064bca11eb2d16c\nparent f851f97e8734203a062eb6282fa6314401769c5d\nparent 46d55d65491ab57e6373d6424f432295eb2eb672\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1621094209 +0200\ncommitter GitHub <noreply@github.com> 1621094209 +0200\n\nRollup merge of #85324 - FabianWolff:issue-85255, r=varkor\n\nWarn about unused `pub` fields in non-`pub` structs\n\nThis pull request fixes #85255. The current implementation of dead code analysis is too prudent because it marks all `pub` fields of structs as live, even though they cannot be accessed from outside of the current crate if the struct itself only has restricted or private visibility.\n\nI have changed this behavior to take the containing struct's visibility into account when looking at field visibility and liveness. This also makes dead code warnings more consistent; consider the example given in #85255:\n```rust\nstruct Foo {\n    a: i32,\n    pub b: i32,\n}\n\nstruct Bar;\n\nimpl Bar {\n    fn a(&self) -> i32 { 5 }\n    pub fn b(&self) -> i32 { 6 }\n}\n\nfn main() {\n    let _ = Foo { a: 1, b: 2 };\n    let _ = Bar;\n}\n```\nCurrent nightly already warns about `Bar::b()`, even though it is `pub` (but `Bar` is not). It should therefore also warn about `Foo::b`, which it does with the changes in this PR.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c", "html_url": "https://github.com/rust-lang/rust/commit/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f851f97e8734203a062eb6282fa6314401769c5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f851f97e8734203a062eb6282fa6314401769c5d", "html_url": "https://github.com/rust-lang/rust/commit/f851f97e8734203a062eb6282fa6314401769c5d"}, {"sha": "46d55d65491ab57e6373d6424f432295eb2eb672", "url": "https://api.github.com/repos/rust-lang/rust/commits/46d55d65491ab57e6373d6424f432295eb2eb672", "html_url": "https://github.com/rust-lang/rust/commit/46d55d65491ab57e6373d6424f432295eb2eb672"}], "stats": {"total": 109, "additions": 87, "deletions": 22}, "files": [{"sha": "bd142677cf9ed9596a0feee0b56f23eab71d5c60", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 29, "deletions": 20, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c", "patch": "@@ -44,6 +44,7 @@ struct MarkSymbolVisitor<'tcx> {\n     repr_has_repr_c: bool,\n     in_pat: bool,\n     inherited_pub_visibility: bool,\n+    pub_visibility: bool,\n     ignore_variant_stack: Vec<DefId>,\n     // maps from tuple struct constructors to tuple struct items\n     struct_constructors: FxHashMap<hir::HirId, hir::HirId>,\n@@ -188,27 +189,33 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n \n     fn visit_node(&mut self, node: Node<'tcx>) {\n         let had_repr_c = self.repr_has_repr_c;\n-        self.repr_has_repr_c = false;\n         let had_inherited_pub_visibility = self.inherited_pub_visibility;\n+        let had_pub_visibility = self.pub_visibility;\n+        self.repr_has_repr_c = false;\n         self.inherited_pub_visibility = false;\n+        self.pub_visibility = false;\n         match node {\n-            Node::Item(item) => match item.kind {\n-                hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {\n-                    let def = self.tcx.adt_def(item.def_id);\n-                    self.repr_has_repr_c = def.repr.c();\n+            Node::Item(item) => {\n+                self.pub_visibility = item.vis.node.is_pub();\n \n-                    intravisit::walk_item(self, &item);\n-                }\n-                hir::ItemKind::Enum(..) => {\n-                    self.inherited_pub_visibility = item.vis.node.is_pub();\n+                match item.kind {\n+                    hir::ItemKind::Struct(..) | hir::ItemKind::Union(..) => {\n+                        let def = self.tcx.adt_def(item.def_id);\n+                        self.repr_has_repr_c = def.repr.c();\n \n-                    intravisit::walk_item(self, &item);\n-                }\n-                hir::ItemKind::ForeignMod { .. } => {}\n-                _ => {\n-                    intravisit::walk_item(self, &item);\n+                        intravisit::walk_item(self, &item);\n+                    }\n+                    hir::ItemKind::Enum(..) => {\n+                        self.inherited_pub_visibility = self.pub_visibility;\n+\n+                        intravisit::walk_item(self, &item);\n+                    }\n+                    hir::ItemKind::ForeignMod { .. } => {}\n+                    _ => {\n+                        intravisit::walk_item(self, &item);\n+                    }\n                 }\n-            },\n+            }\n             Node::TraitItem(trait_item) => {\n                 intravisit::walk_trait_item(self, trait_item);\n             }\n@@ -220,8 +227,9 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n             }\n             _ => {}\n         }\n-        self.repr_has_repr_c = had_repr_c;\n+        self.pub_visibility = had_pub_visibility;\n         self.inherited_pub_visibility = had_inherited_pub_visibility;\n+        self.repr_has_repr_c = had_repr_c;\n     }\n \n     fn mark_as_used_if_union(&mut self, adt: &ty::AdtDef, fields: &[hir::ExprField<'_>]) {\n@@ -259,10 +267,10 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n     ) {\n         let has_repr_c = self.repr_has_repr_c;\n         let inherited_pub_visibility = self.inherited_pub_visibility;\n-        let live_fields = def\n-            .fields()\n-            .iter()\n-            .filter(|f| has_repr_c || inherited_pub_visibility || f.vis.node.is_pub());\n+        let pub_visibility = self.pub_visibility;\n+        let live_fields = def.fields().iter().filter(|f| {\n+            has_repr_c || (pub_visibility && (inherited_pub_visibility || f.vis.node.is_pub()))\n+        });\n         self.live_symbols.extend(live_fields.map(|f| f.hir_id));\n \n         intravisit::walk_struct_def(self, def);\n@@ -500,6 +508,7 @@ fn find_live<'tcx>(\n         repr_has_repr_c: false,\n         in_pat: false,\n         inherited_pub_visibility: false,\n+        pub_visibility: false,\n         ignore_variant_stack: vec![],\n         struct_constructors,\n     };"}, {"sha": "b5c4a775296648a051fc29c20e782ed698958452", "filename": "src/test/ui/cast/issue-84213.fixed", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c/src%2Ftest%2Fui%2Fcast%2Fissue-84213.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c/src%2Ftest%2Fui%2Fcast%2Fissue-84213.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-84213.fixed?ref=7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c", "patch": "@@ -6,6 +6,7 @@ struct Something {\n \n fn main() {\n     let mut something = Something { field: 1337 };\n+    let _ = something.field;\n \n     let _pointer_to_something = &something as *const Something;\n     //~^ ERROR: non-primitive cast"}, {"sha": "6eb81291abc7fb3292336934776bc59d9ae24b8a", "filename": "src/test/ui/cast/issue-84213.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c/src%2Ftest%2Fui%2Fcast%2Fissue-84213.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c/src%2Ftest%2Fui%2Fcast%2Fissue-84213.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-84213.rs?ref=7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c", "patch": "@@ -6,6 +6,7 @@ struct Something {\n \n fn main() {\n     let mut something = Something { field: 1337 };\n+    let _ = something.field;\n \n     let _pointer_to_something = something as *const Something;\n     //~^ ERROR: non-primitive cast"}, {"sha": "1b71d4db511b5a3c3d46ead8834ecc6d5875859d", "filename": "src/test/ui/cast/issue-84213.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcast%2Fissue-84213.stderr?ref=7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c", "patch": "@@ -1,5 +1,5 @@\n error[E0605]: non-primitive cast: `Something` as `*const Something`\n-  --> $DIR/issue-84213.rs:10:33\n+  --> $DIR/issue-84213.rs:11:33\n    |\n LL |     let _pointer_to_something = something as *const Something;\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast\n@@ -10,7 +10,7 @@ LL |     let _pointer_to_something = &something as *const Something;\n    |                                 ^\n \n error[E0605]: non-primitive cast: `Something` as `*mut Something`\n-  --> $DIR/issue-84213.rs:13:37\n+  --> $DIR/issue-84213.rs:14:37\n    |\n LL |     let _mut_pointer_to_something = something as *mut Something;\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ invalid cast"}, {"sha": "9a4d9fbad35ba603d3a0067f021dbae1ed78b30a", "filename": "src/test/ui/lint/dead-code/issue-85255.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.rs?ref=7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c", "patch": "@@ -0,0 +1,22 @@\n+// Unused `pub` fields in non-`pub` structs should also trigger dead code warnings.\n+// check-pass\n+\n+#![warn(dead_code)]\n+\n+struct Foo {\n+    a: i32, //~ WARNING: field is never read\n+    pub b: i32, //~ WARNING: field is never read\n+}\n+\n+struct Bar;\n+\n+impl Bar {\n+    fn a(&self) -> i32 { 5 } //~ WARNING: associated function is never used\n+    pub fn b(&self) -> i32 { 6 } //~ WARNING: associated function is never used\n+}\n+\n+\n+fn main() {\n+    let _ = Foo { a: 1, b: 2 };\n+    let _ = Bar;\n+}"}, {"sha": "73646439295338f1220860cbf2d4cc63bbae6507", "filename": "src/test/ui/lint/dead-code/issue-85255.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fdead-code%2Fissue-85255.stderr?ref=7a6a25eb2e07267f19abfcf93a0e20c2324c0b1c", "patch": "@@ -0,0 +1,32 @@\n+warning: field is never read: `a`\n+  --> $DIR/issue-85255.rs:7:5\n+   |\n+LL |     a: i32,\n+   |     ^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-85255.rs:4:9\n+   |\n+LL | #![warn(dead_code)]\n+   |         ^^^^^^^^^\n+\n+warning: field is never read: `b`\n+  --> $DIR/issue-85255.rs:8:5\n+   |\n+LL |     pub b: i32,\n+   |     ^^^^^^^^^^\n+\n+warning: associated function is never used: `a`\n+  --> $DIR/issue-85255.rs:14:8\n+   |\n+LL |     fn a(&self) -> i32 { 5 }\n+   |        ^\n+\n+warning: associated function is never used: `b`\n+  --> $DIR/issue-85255.rs:15:12\n+   |\n+LL |     pub fn b(&self) -> i32 { 6 }\n+   |            ^\n+\n+warning: 4 warnings emitted\n+"}]}