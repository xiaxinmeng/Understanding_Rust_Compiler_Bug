{"sha": "1f10ee365c840cb5d54fe4eb32659f09d29ace38", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMTBlZTM2NWM4NDBjYjVkNTRmZTRlYjMyNjU5ZjA5ZDI5YWNlMzg=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2012-01-05T16:11:34Z"}, "committer": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2012-01-05T16:11:34Z"}, "message": "Moved generic float::min, max to core::math and cleaned up some imports", "tree": {"sha": "f0b1124f234420be8db4bb39b32333f3c85f35c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0b1124f234420be8db4bb39b32333f3c85f35c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f10ee365c840cb5d54fe4eb32659f09d29ace38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f10ee365c840cb5d54fe4eb32659f09d29ace38", "html_url": "https://github.com/rust-lang/rust/commit/1f10ee365c840cb5d54fe4eb32659f09d29ace38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f10ee365c840cb5d54fe4eb32659f09d29ace38/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "494ad4e601834f1b28e58c1c0ba579c2972c9a27", "url": "https://api.github.com/repos/rust-lang/rust/commits/494ad4e601834f1b28e58c1c0ba579c2972c9a27", "html_url": "https://github.com/rust-lang/rust/commit/494ad4e601834f1b28e58c1c0ba579c2972c9a27"}], "stats": {"total": 68, "additions": 41, "deletions": 27}, "files": [{"sha": "cb00fd080027ac76ead3279ef069b556e52ddf4b", "filename": "src/comp/back/rpath.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Fcomp%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Fcomp%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Frpath.rs?ref=1f10ee365c840cb5d54fe4eb32659f09d29ace38", "patch": "@@ -129,7 +129,7 @@ fn get_relative_to(abs1: fs::path, abs2: fs::path) -> fs::path {\n     assert len1 > 0u;\n     assert len2 > 0u;\n \n-    let max_common_path = float::min(len1, len2) - 1u;\n+    let max_common_path = math::min(len1, len2) - 1u;\n     let start_idx = 0u;\n     while start_idx < max_common_path\n         && split1[start_idx] == split2[start_idx] {"}, {"sha": "1466d4cf0302d215087cc17e31d982f750e9e470", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=1f10ee365c840cb5d54fe4eb32659f09d29ace38", "patch": "@@ -1765,7 +1765,7 @@ mod unify {\n         let vb = alt cx.st {\n             in_bindings(vb) { vb }\n         };\n-        ufind::grow(vb.sets, float::max(set_a, set_b) + 1u);\n+        ufind::grow(vb.sets, math::max(set_a, set_b) + 1u);\n         let root_a = ufind::find(vb.sets, set_a);\n         let root_b = ufind::find(vb.sets, set_b);\n "}, {"sha": "ba2d39ba2ec61e21ba370d098a7ece40cddaba45", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=1f10ee365c840cb5d54fe4eb32659f09d29ace38", "patch": "@@ -1,5 +1,4 @@\n-import core::{str, option};\n-import core::float::{max, min};\n+import math::{max, min};\n import std::map::hashmap;\n import option::{some};\n import syntax::ast;"}, {"sha": "515ddba7d35fc0636cb1f9f0047af465e55628d5", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=1f10ee365c840cb5d54fe4eb32659f09d29ace38", "patch": "@@ -1,4 +1,3 @@\n-import core::{vec, str, int, uint, option, result};\n import std::{fs, io};\n \n import rustc::syntax::{ast, ast_util, fold, visit, codemap};\n@@ -241,9 +240,9 @@ fn check_variants_T<copy T>(\n     let L = vec::len(things);\n \n     if L < 100u {\n-        under(float::min(L, 20u)) {|i|\n+        under(math::min(L, 20u)) {|i|\n             log(error, \"Replacing... #\" + uint::str(i));\n-            under(float::min(L, 30u)) {|j|\n+            under(math::min(L, 30u)) {|j|\n                 log(error, \"With... \" + stringifier(@things[j]));\n                 let crate2 = @replacer(crate, i, things[j], cx.mode);\n                 // It would be best to test the *crate* for stability, but testing the"}, {"sha": "d1732352d9674a08bbafe0655ede35a4d8404935", "filename": "src/libcore/core.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=1f10ee365c840cb5d54fe4eb32659f09d29ace38", "patch": "@@ -12,6 +12,7 @@ export uint, u8, u32, u64, vec, bool;\n export either, option, result;\n export ctypes, sys, unsafe, comm, task;\n export extfmt;\n+export math;\n \n // Built-in-type support modules\n \n@@ -45,6 +46,7 @@ mod result;\n // Runtime and language-primitive support\n \n mod ctypes;\n+mod math;\n mod cmath;\n mod sys;\n mod unsafe;"}, {"sha": "c59dd252fff2b32550a62f1e8969600e0d0428ac", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=1f10ee365c840cb5d54fe4eb32659f09d29ace38", "patch": "@@ -224,10 +224,16 @@ mod consts {\n     const ln_10: f32 = 2.30258509299404568401799145468436421_f32;\n }\n \n+pure fn signbit(x: f32) -> int {\n+    if is_negative(x) { ret 1; } else { ret 0; }\n+}\n+\n #[cfg(target_os=\"linux\")]\n #[cfg(target_os=\"macos\")]\n #[cfg(target_os=\"win32\")]\n pure fn logarithm(n: f32, b: f32) -> f32 {\n+    // FIXME check if it is good to use log2 instead of ln here;\n+    // in theory should be faster since the radix is 2\n     ret log2(n) / log2(b);\n }\n "}, {"sha": "e6813f1429de122977301e0559f3dbd85e6ee268", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=1f10ee365c840cb5d54fe4eb32659f09d29ace38", "patch": "@@ -241,10 +241,16 @@ mod consts {\n     const ln_10: f64 = 2.30258509299404568401799145468436421_f64;\n }\n \n+pure fn signbit(x: f64) -> int {\n+    if is_negative(x) { ret 1; } else { ret 0; }\n+}\n+\n #[cfg(target_os=\"linux\")]\n #[cfg(target_os=\"macos\")]\n #[cfg(target_os=\"win32\")]\n pure fn logarithm(n: f64, b: f64) -> f64 {\n+    // FIXME check if it is good to use log2 instead of ln here;\n+    // in theory should be faster since the radix is 2\n     ret log2(n) / log2(b);\n }\n "}, {"sha": "17d5fb1f7f63f43ed26534b9028fa69caf26275f", "filename": "src/libcore/float.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=1f10ee365c840cb5d54fe4eb32659f09d29ace38", "patch": "@@ -4,7 +4,7 @@ Module: float\n \n // FIXME find out why these have to be exported explicitly\n \n-export to_str_common, to_str_exact, to_str, from_str, min, max;\n+export to_str_common, to_str_exact, to_str, from_str;\n export add, sub, mul, div, rem, lt, le, gt, eq, eq, ne;\n export is_positive, is_negative, is_nonpositive, is_nonnegative;\n export is_zero, is_infinite, is_finite;\n@@ -16,6 +16,7 @@ export erf, erfc, exp, expm1, exp2, abs, abs_sub;\n export mul_add, fmax, fmin, nextafter, frexp, hypot, ldexp;\n export lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix;\n export modf, pow, round, sin, sinh, sqrt, tan, tanh, tgamma, trunc;\n+export signbit;\n \n // export when m_float == c_double\n \n@@ -280,20 +281,6 @@ fn pow_uint_to_uint_as_float(x: uint, pow: uint) -> float {\n }\n \n \n-/*\n-Function: min\n-\n-Returns the minimum of two values\n-*/\n-pure fn min<copy T>(x: T, y: T) -> T { x < y ? x : y }\n-\n-/*\n-Function: max\n-\n-Returns the maximum of two values\n-*/\n-pure fn max<copy T>(x: T, y: T) -> T { x < y ? y : x }\n-\n //\n // Local Variables:\n // mode: rust"}, {"sha": "cfd1ec4ca4ca2a00848bf2dbefeec8635ee388ba", "filename": "src/libcore/math.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Flibcore%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Flibcore%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmath.rs?ref=1f10ee365c840cb5d54fe4eb32659f09d29ace38", "patch": "@@ -0,0 +1,18 @@\n+// Generic functions that have been defined for all numeric types\n+//\n+// (may very well go away again soon)\n+\n+/*\n+Function: min\n+\n+Returns the minimum of two values\n+*/\n+pure fn min<copy T>(x: T, y: T) -> T { x < y ? x : y }\n+\n+/*\n+Function: max\n+\n+Returns the maximum of two values\n+*/\n+pure fn max<copy T>(x: T, y: T) -> T { x < y ? y : x }\n+"}, {"sha": "8071ee7284760c48b20bf762c26e56c3a50f0875", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=1f10ee365c840cb5d54fe4eb32659f09d29ace38", "patch": "@@ -26,10 +26,6 @@ The following operations are algorithmically faster in ropes:\n  */\n \n \n-import core::option;\n-\n-\n-\n /*\n  Type: rope\n \n@@ -1103,7 +1099,7 @@ mod node {\n                      right   : right,\n              char_len: char_len(left) + char_len(right),\n                      byte_len: byte_len(left) + byte_len(right),\n-             height: float::max(height(left), height(right)) + 1u\n+             height: math::max(height(left), height(right)) + 1u\n                     })\n     }\n "}, {"sha": "c8335718da9af2e1dbeb14035bf435f06466b686", "filename": "src/test/stdtest/math.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Ftest%2Fstdtest%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f10ee365c840cb5d54fe4eb32659f09d29ace38/src%2Ftest%2Fstdtest%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fmath.rs?ref=1f10ee365c840cb5d54fe4eb32659f09d29ace38", "patch": "@@ -2,6 +2,7 @@ import core::*;\n \n use std;\n \n+import math::{min, max};\n import float::*;\n import float;\n import c_int = ctypes::c_int;"}]}