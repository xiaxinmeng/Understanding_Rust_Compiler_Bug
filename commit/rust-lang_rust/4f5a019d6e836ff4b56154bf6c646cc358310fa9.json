{"sha": "4f5a019d6e836ff4b56154bf6c646cc358310fa9", "node_id": "C_kwDOAAsO6NoAKDRmNWEwMTlkNmU4MzZmZjRiNTYxNTRiZjZjNjQ2Y2MzNTgzMTBmYTk", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2023-03-29T07:12:20Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2023-03-29T08:47:32Z"}, "message": "Update clippy_lints/src/large_futures.rs\n\nCo-authored-by: Fridtjof Stoldt <xFrednet@gmail.com>", "tree": {"sha": "3d96b5bed37752105f526bb8b10bfa7c15a93c7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d96b5bed37752105f526bb8b10bfa7c15a93c7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4f5a019d6e836ff4b56154bf6c646cc358310fa9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4f5a019d6e836ff4b56154bf6c646cc358310fa9", "html_url": "https://github.com/rust-lang/rust/commit/4f5a019d6e836ff4b56154bf6c646cc358310fa9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4f5a019d6e836ff4b56154bf6c646cc358310fa9/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "html_url": "https://github.com/rust-lang/rust/commit/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c"}], "stats": {"total": 199, "additions": 93, "deletions": 106}, "files": [{"sha": "1b0544813718abe08f58d6abf48f3c44012f6944", "filename": "clippy_lints/src/large_futures.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/4f5a019d6e836ff4b56154bf6c646cc358310fa9/clippy_lints%2Fsrc%2Flarge_futures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5a019d6e836ff4b56154bf6c646cc358310fa9/clippy_lints%2Fsrc%2Flarge_futures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_futures.rs?ref=4f5a019d6e836ff4b56154bf6c646cc358310fa9", "patch": "@@ -59,31 +59,28 @@ impl_lint_pass!(LargeFuture => [LARGE_FUTURES]);\n \n impl<'tcx> LateLintPass<'tcx> for LargeFuture {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n+        if matches!(expr.span.ctxt().outer_expn_data().kind, rustc_span::ExpnKind::Macro(..)) {\n+            return;\n+        }\n         if let ExprKind::Match(expr, _, MatchSource::AwaitDesugar) = expr.kind {\n-            if let ExprKind::Call(func, [expr, ..]) = expr.kind {\n-                if matches!(\n-                    func.kind,\n-                    ExprKind::Path(QPath::LangItem(LangItem::IntoFutureIntoFuture, ..))\n-                ) {\n-                    let ty = cx.typeck_results().expr_ty(expr);\n-                    if let Some(future_trait_def_id) = cx.tcx.lang_items().future_trait()\n-                        && implements_trait(cx, ty, future_trait_def_id, &[]) {\n-                            if let Ok(layout) = cx.tcx.layout_of(cx.param_env.and(ty)) {\n-                                let size = layout.layout.size();\n-                                if size >= Size::from_bytes(self.future_size_threshold) {\n-                                    span_lint_and_sugg(\n-                                        cx,\n-                                        LARGE_FUTURES,\n-                                        expr.span,\n-                                        &format!(\"large future with a size of {} bytes\", size.bytes()),\n-                                        \"consider `Box::pin` on it\",\n-                                        format!(\"Box::pin({})\", snippet(cx, expr.span, \"..\")),\n-                                        Applicability::MachineApplicable,\n-                                    );\n-                                }\n-                            }\n-                        }\n-                }\n+            if let ExprKind::Call(func, [expr, ..]) = expr.kind\n+                && let ExprKind::Path(QPath::LangItem(LangItem::IntoFutureIntoFuture, ..)) = func.kind\n+                && let ty = cx.typeck_results().expr_ty(expr)\n+                && let Some(future_trait_def_id) = cx.tcx.lang_items().future_trait()\n+                && implements_trait(cx, ty, future_trait_def_id, &[])\n+                && let Ok(layout) = cx.tcx.layout_of(cx.param_env.and(ty))\n+                && let size = layout.layout.size()\n+                && size >= Size::from_bytes(self.future_size_threshold)\n+            {\n+                span_lint_and_sugg(\n+                    cx,\n+                    LARGE_FUTURES,\n+                    expr.span,\n+                    &format!(\"large future with a size of {} bytes\", size.bytes()),\n+                    \"consider `Box::pin` on it\",\n+                    format!(\"Box::pin({})\", snippet(cx, expr.span, \"..\")),\n+                    Applicability::Unspecified,\n+                );\n             }\n         }\n     }"}, {"sha": "1238c512b0fa2a2d507a768f07693d8acdf0a6f8", "filename": "tests/ui-toml/large_futures/large_futures.fixed", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.fixed?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -1,29 +0,0 @@\n-// run-rustfix\n-\n-#![warn(clippy::large_futures)]\n-\n-fn main() {}\n-\n-pub async fn should_warn() {\n-    let x = [0u8; 1024];\n-    async {}.await;\n-    dbg!(x);\n-}\n-\n-pub async fn should_not_warn() {\n-    let x = [0u8; 1020];\n-    async {}.await;\n-    dbg!(x);\n-}\n-\n-pub async fn bar() {\n-    Box::pin(should_warn()).await;\n-\n-    async {\n-        let x = [0u8; 1024];\n-        dbg!(x);\n-    }\n-    .await;\n-\n-    should_not_warn().await;\n-}"}, {"sha": "4158df8b5ff55ad8f1acc72f8fb022d19f015668", "filename": "tests/ui-toml/large_futures/large_futures.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5a019d6e836ff4b56154bf6c646cc358310fa9/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5a019d6e836ff4b56154bf6c646cc358310fa9/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.rs?ref=4f5a019d6e836ff4b56154bf6c646cc358310fa9", "patch": "@@ -1,5 +1,3 @@\n-// run-rustfix\n-\n #![warn(clippy::large_futures)]\n \n fn main() {}"}, {"sha": "b92734de2f08c7ff93861caf8b8e1d30e32ecd3d", "filename": "tests/ui-toml/large_futures/large_futures.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4f5a019d6e836ff4b56154bf6c646cc358310fa9/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f5a019d6e836ff4b56154bf6c646cc358310fa9/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Flarge_futures%2Flarge_futures.stderr?ref=4f5a019d6e836ff4b56154bf6c646cc358310fa9", "patch": "@@ -1,5 +1,5 @@\n error: large future with a size of 1026 bytes\n-  --> $DIR/large_futures.rs:20:5\n+  --> $DIR/large_futures.rs:18:5\n    |\n LL |     should_warn().await;\n    |     ^^^^^^^^^^^^^ help: consider `Box::pin` on it: `Box::pin(should_warn())`"}, {"sha": "9d839998afd7b4e14d3086290ec9de71d7b006db", "filename": "tests/ui/large_futures.fixed", "status": "removed", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui%2Flarge_futures.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4fdae81c70bfa1481eebc7ebec09f121c6eaf53c/tests%2Fui%2Flarge_futures.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_futures.fixed?ref=4fdae81c70bfa1481eebc7ebec09f121c6eaf53c", "patch": "@@ -1,41 +0,0 @@\n-// run-rustfix\n-\n-#![feature(generators)]\n-#![warn(clippy::large_futures)]\n-#![allow(clippy::future_not_send)]\n-#![allow(clippy::manual_async_fn)]\n-\n-async fn big_fut(_arg: [u8; 1024 * 16]) {}\n-\n-async fn wait() {\n-    let f = async {\n-        Box::pin(big_fut([0u8; 1024 * 16])).await;\n-    };\n-    Box::pin(f).await\n-}\n-async fn calls_fut(fut: impl std::future::Future<Output = ()>) {\n-    loop {\n-        Box::pin(wait()).await;\n-        if true {\n-            return fut.await;\n-        } else {\n-            Box::pin(wait()).await;\n-        }\n-    }\n-}\n-\n-pub async fn test() {\n-    let fut = big_fut([0u8; 1024 * 16]);\n-    Box::pin(foo()).await;\n-    Box::pin(calls_fut(fut)).await;\n-}\n-\n-pub fn foo() -> impl std::future::Future<Output = ()> {\n-    async {\n-        let x = [0i32; 1024 * 16];\n-        async {}.await;\n-        dbg!(x);\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "4a8ba995da556f0546b526b987f6f4a44a80d4f2", "filename": "tests/ui/large_futures.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4f5a019d6e836ff4b56154bf6c646cc358310fa9/tests%2Fui%2Flarge_futures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4f5a019d6e836ff4b56154bf6c646cc358310fa9/tests%2Fui%2Flarge_futures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_futures.rs?ref=4f5a019d6e836ff4b56154bf6c646cc358310fa9", "patch": "@@ -1,5 +1,3 @@\n-// run-rustfix\n-\n #![feature(generators)]\n #![warn(clippy::large_futures)]\n #![allow(clippy::future_not_send)]\n@@ -38,4 +36,26 @@ pub fn foo() -> impl std::future::Future<Output = ()> {\n     }\n }\n \n+pub async fn lines() {\n+    async {\n+        let x = [0i32; 1024 * 16];\n+        async {}.await;\n+        println!(\"{:?}\", x);\n+    }\n+    .await;\n+}\n+\n+pub async fn macro_expn() {\n+    macro_rules! macro_ {\n+        () => {\n+            async {\n+                let x = [0i32; 1024 * 16];\n+                async {}.await;\n+                println!(\"macro: {:?}\", x);\n+            }\n+        };\n+    }\n+    macro_!().await\n+}\n+\n fn main() {}"}, {"sha": "67e0fceff6ef313f8d527564385a9ed8a3a6a3f2", "filename": "tests/ui/large_futures.stderr", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4f5a019d6e836ff4b56154bf6c646cc358310fa9/tests%2Fui%2Flarge_futures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4f5a019d6e836ff4b56154bf6c646cc358310fa9/tests%2Fui%2Flarge_futures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flarge_futures.stderr?ref=4f5a019d6e836ff4b56154bf6c646cc358310fa9", "patch": "@@ -1,40 +1,82 @@\n error: large future with a size of 16385 bytes\n-  --> $DIR/large_futures.rs:12:9\n+  --> $DIR/large_futures.rs:10:9\n    |\n LL |         big_fut([0u8; 1024 * 16]).await;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider `Box::pin` on it: `Box::pin(big_fut([0u8; 1024 * 16]))`\n    |\n    = note: `-D clippy::large-futures` implied by `-D warnings`\n \n error: large future with a size of 16386 bytes\n-  --> $DIR/large_futures.rs:14:5\n+  --> $DIR/large_futures.rs:12:5\n    |\n LL |     f.await\n    |     ^ help: consider `Box::pin` on it: `Box::pin(f)`\n \n error: large future with a size of 16387 bytes\n-  --> $DIR/large_futures.rs:18:9\n+  --> $DIR/large_futures.rs:16:9\n    |\n LL |         wait().await;\n    |         ^^^^^^ help: consider `Box::pin` on it: `Box::pin(wait())`\n \n error: large future with a size of 16387 bytes\n-  --> $DIR/large_futures.rs:22:13\n+  --> $DIR/large_futures.rs:20:13\n    |\n LL |             wait().await;\n    |             ^^^^^^ help: consider `Box::pin` on it: `Box::pin(wait())`\n \n error: large future with a size of 65540 bytes\n-  --> $DIR/large_futures.rs:29:5\n+  --> $DIR/large_futures.rs:27:5\n    |\n LL |     foo().await;\n    |     ^^^^^ help: consider `Box::pin` on it: `Box::pin(foo())`\n \n error: large future with a size of 49159 bytes\n-  --> $DIR/large_futures.rs:30:5\n+  --> $DIR/large_futures.rs:28:5\n    |\n LL |     calls_fut(fut).await;\n    |     ^^^^^^^^^^^^^^ help: consider `Box::pin` on it: `Box::pin(calls_fut(fut))`\n \n-error: aborting due to 6 previous errors\n+error: large future with a size of 65540 bytes\n+  --> $DIR/large_futures.rs:40:5\n+   |\n+LL | /     async {\n+LL | |         let x = [0i32; 1024 * 16];\n+LL | |         async {}.await;\n+LL | |         println!(\"{:?}\", x);\n+LL | |     }\n+   | |_____^\n+   |\n+help: consider `Box::pin` on it\n+   |\n+LL ~     Box::pin(async {\n+LL +         let x = [0i32; 1024 * 16];\n+LL +         async {}.await;\n+LL +         println!(\"{:?}\", x);\n+LL +     })\n+   |\n+\n+error: large future with a size of 65540 bytes\n+  --> $DIR/large_futures.rs:51:13\n+   |\n+LL | /             async {\n+LL | |                 let x = [0i32; 1024 * 16];\n+LL | |                 async {}.await;\n+LL | |                 println!(\"macro: {:?}\", x);\n+LL | |             }\n+   | |_____________^\n+...\n+LL |       macro_!().await\n+   |       --------- in this macro invocation\n+   |\n+   = note: this error originates in the macro `macro_` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider `Box::pin` on it\n+   |\n+LL ~             Box::pin(async {\n+LL +                 let x = [0i32; 1024 * 16];\n+LL +                 async {}.await;\n+LL +                 println!(\"macro: {:?}\", x);\n+LL +             })\n+   |\n+\n+error: aborting due to 8 previous errors\n "}]}