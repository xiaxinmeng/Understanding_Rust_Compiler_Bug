{"sha": "ad74480cb209eec4d09b12d5810c221d6b2f2d4c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNzQ0ODBjYjIwOWVlYzRkMDliMTJkNTgxMGMyMjFkNmIyZjJkNGM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-31T14:53:00Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-31T15:58:14Z"}, "message": "avoid an unreachable fallback", "tree": {"sha": "2a3c8811d5aad882180f992bb05df2c8607e127b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a3c8811d5aad882180f992bb05df2c8607e127b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad74480cb209eec4d09b12d5810c221d6b2f2d4c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad74480cb209eec4d09b12d5810c221d6b2f2d4c", "html_url": "https://github.com/rust-lang/rust/commit/ad74480cb209eec4d09b12d5810c221d6b2f2d4c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad74480cb209eec4d09b12d5810c221d6b2f2d4c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8a0600f566ce2c6bea667ecac6a013203b86e6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8a0600f566ce2c6bea667ecac6a013203b86e6f", "html_url": "https://github.com/rust-lang/rust/commit/d8a0600f566ce2c6bea667ecac6a013203b86e6f"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "f7e264b01d16df1d27f10ac7e1caf5f608cdcf54", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ad74480cb209eec4d09b12d5810c221d6b2f2d4c/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad74480cb209eec4d09b12d5810c221d6b2f2d4c/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=ad74480cb209eec4d09b12d5810c221d6b2f2d4c", "patch": "@@ -12,21 +12,21 @@ use crate::interpret::{\n \n impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     /// Walks up the callstack from the intrinsic's callsite, searching for the first callsite in a\n-    /// frame which is not `#[track_caller]`. If the first frame found lacks `#[track_caller]`, then\n-    /// `None` is returned and the callsite of the function invocation itself should be used.\n+    /// frame which is not `#[track_caller]`.\n     crate fn find_closest_untracked_caller_location(&self) -> Span {\n         self.stack\n             .iter()\n             .rev()\n-            // Skip `#[track_caller]` frames.\n-            .skip_while(|frame| frame.instance.def.requires_caller_location(*self.tcx))\n-            // Find next frame with source info.\n-            .find_map(|frame| frame.current_source_info())\n-            .map(|si| si.span)\n-            // Fallback to current frame. That one has to have source_info as only\n-            // currently unwinding frames without cleanup do *not* have it -- and those\n-            // frames do not call this intrinsic.\n-            .unwrap_or_else(|| self.frame().current_source_info().unwrap().span)\n+            // Find first non-`#[track_caller]` frame.\n+            .find(|frame| !frame.instance.def.requires_caller_location(*self.tcx))\n+            // Assert that there is always such a frame.\n+            .unwrap()\n+            .current_source_info()\n+            // Assert that the frame we look at is actually executing code currently\n+            // (`current_source_info` is None when we are unwinding and the frame does\n+            // not require cleanup).\n+            .unwrap()\n+            .span\n     }\n \n     /// Allocate a `const core::panic::Location` with the provided filename and line/column numbers."}]}