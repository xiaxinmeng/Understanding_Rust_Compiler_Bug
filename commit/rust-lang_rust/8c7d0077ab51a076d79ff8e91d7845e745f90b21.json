{"sha": "8c7d0077ab51a076d79ff8e91d7845e745f90b21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjN2QwMDc3YWI1MWEwNzZkNzlmZjhlOTFkNzg0NWU3NDVmOTBiMjE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-02-18T21:15:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-02-18T21:34:08Z"}, "message": "Avoid ICE in Self::Assoc in impl headers", "tree": {"sha": "b80631fafb19fd72158b79f920d1c171232febf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b80631fafb19fd72158b79f920d1c171232febf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c7d0077ab51a076d79ff8e91d7845e745f90b21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c7d0077ab51a076d79ff8e91d7845e745f90b21", "html_url": "https://github.com/rust-lang/rust/commit/8c7d0077ab51a076d79ff8e91d7845e745f90b21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c7d0077ab51a076d79ff8e91d7845e745f90b21/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf95c29c98320a36a0b87be30c308e2737061030", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf95c29c98320a36a0b87be30c308e2737061030", "html_url": "https://github.com/rust-lang/rust/commit/bf95c29c98320a36a0b87be30c308e2737061030"}], "stats": {"total": 17, "additions": 16, "deletions": 1}, "files": [{"sha": "ab1897101eb6ffe683c7b1d69f4be3a956d8b147", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8c7d0077ab51a076d79ff8e91d7845e745f90b21/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7d0077ab51a076d79ff8e91d7845e745f90b21/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=8c7d0077ab51a076d79ff8e91d7845e745f90b21", "patch": "@@ -918,7 +918,19 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             (_, Def::SelfTy(Some(_), Some(impl_def_id))) => {\n                 // `Self` in an impl of a trait - we have a concrete self type and a\n                 // trait reference.\n-                let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n+                // FIXME: Self type is not always computed when we are here because type parameter\n+                // bounds may affect Self type and have to be converted before it.\n+                let trait_ref = if impl_def_id.is_local() {\n+                    tcx.impl_trait_refs.borrow().get(&impl_def_id).cloned().and_then(|x| x)\n+                } else {\n+                    tcx.impl_trait_ref(impl_def_id)\n+                };\n+                let trait_ref = if let Some(trait_ref) = trait_ref {\n+                    trait_ref\n+                } else {\n+                    tcx.sess.span_err(span, \"`Self` type is used before it's determined\");\n+                    return (tcx.types.err, Def::Err);\n+                };\n                 let trait_ref = if let Some(free_substs) = self.get_free_substs() {\n                     trait_ref.subst(tcx, free_substs)\n                 } else {"}, {"sha": "04f98c7ab329faa751bddadfe4598d3ac6974b39", "filename": "src/test/compile-fail/resolve-self-in-impl.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8c7d0077ab51a076d79ff8e91d7845e745f90b21/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c7d0077ab51a076d79ff8e91d7845e745f90b21/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-self-in-impl.rs?ref=8c7d0077ab51a076d79ff8e91d7845e745f90b21", "patch": "@@ -18,9 +18,12 @@ impl<T: Tr<Self>> Tr<T> for S {} //~ ERROR `Self` type is used before it's deter\n impl<T = Self> Tr<T> for S {} //~ ERROR `Self` type is used before it's determined\n impl Tr for S where Self: Copy {} //~ ERROR `Self` type is used before it's determined\n impl Tr for S where S<Self>: Copy {} //~ ERROR `Self` type is used before it's determined\n+impl Tr for S where Self::Assoc: Copy {} //~ ERROR `Self` type is used before it's determined\n+                                         //~^ ERROR `Self` type is used before it's determined\n impl Tr for Self {} //~ ERROR `Self` type is used before it's determined\n impl Tr for S<Self> {} //~ ERROR `Self` type is used before it's determined\n impl Self {} //~ ERROR `Self` type is used before it's determined\n impl S<Self> {} //~ ERROR `Self` type is used before it's determined\n+impl Tr<Self::Assoc> for S {} //~ ERROR `Self` type is used before it's determined\n \n fn main() {}"}]}