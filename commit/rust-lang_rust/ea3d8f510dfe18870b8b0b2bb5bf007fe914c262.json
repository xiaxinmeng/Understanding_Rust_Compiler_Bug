{"sha": "ea3d8f510dfe18870b8b0b2bb5bf007fe914c262", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhM2Q4ZjUxMGRmZTE4ODcwYjhiMGIyYmI1YmYwMDdmZTkxNGMyNjI=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-10-04T13:48:32Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-10-04T13:48:32Z"}, "message": "Ignore desugarings when comparing duplicate trait error messages", "tree": {"sha": "15c1694e69551b68394a3c0bb87b80f59f4ccdb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15c1694e69551b68394a3c0bb87b80f59f4ccdb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea3d8f510dfe18870b8b0b2bb5bf007fe914c262", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea3d8f510dfe18870b8b0b2bb5bf007fe914c262", "html_url": "https://github.com/rust-lang/rust/commit/ea3d8f510dfe18870b8b0b2bb5bf007fe914c262", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea3d8f510dfe18870b8b0b2bb5bf007fe914c262/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "113141b6f5d10946f8a66442af3e2b0e2f454745", "url": "https://api.github.com/repos/rust-lang/rust/commits/113141b6f5d10946f8a66442af3e2b0e2f454745", "html_url": "https://github.com/rust-lang/rust/commit/113141b6f5d10946f8a66442af3e2b0e2f454745"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "bf421da61e4437ce8868e47e53a6bbdf5c71a421", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea3d8f510dfe18870b8b0b2bb5bf007fe914c262/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3d8f510dfe18870b8b0b2bb5bf007fe914c262/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=ea3d8f510dfe18870b8b0b2bb5bf007fe914c262", "patch": "@@ -4060,7 +4060,7 @@ impl<'a> LoweringContext<'a> {\n                 let head_sp = head.span;\n                 let desugared_span = self.allow_internal_unstable(\n                     CompilerDesugaringKind::ForLoop,\n-                    head.span,\n+                    head_sp,\n                 );\n \n                 let iter = self.str_to_ident(\"iter\");"}, {"sha": "3ba31e229e13ab8afb4f0ab4bf7c34968d3a2914", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ea3d8f510dfe18870b8b0b2bb5bf007fe914c262/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea3d8f510dfe18870b8b0b2bb5bf007fe914c262/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=ea3d8f510dfe18870b8b0b2bb5bf007fe914c262", "patch": "@@ -46,7 +46,7 @@ use ty::subst::Subst;\n use ty::SubtypePredicate;\n use util::nodemap::{FxHashMap, FxHashSet};\n \n-use syntax_pos::{DUMMY_SP, Span};\n+use syntax_pos::{DUMMY_SP, Span, ExpnInfo, ExpnFormat};\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     pub fn report_fulfillment_errors(&self,\n@@ -68,18 +68,30 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             }).collect();\n \n         for (index, error) in errors.iter().enumerate() {\n-            error_map.entry(error.obligation.cause.span).or_default().push(\n+            // We want to ignore desugarings here: spans are equivalent even\n+            // if one is the result of a desugaring and the other is not.\n+            let mut span = error.obligation.cause.span;\n+            if let Some(ExpnInfo {\n+                format: ExpnFormat::CompilerDesugaring(_),\n+                def_site: Some(def_span),\n+                ..\n+            }) = span.ctxt().outer().expn_info() {\n+                span = def_span;\n+            }\n+\n+            error_map.entry(span).or_default().push(\n                 ErrorDescriptor {\n                     predicate: error.obligation.predicate.clone(),\n                     index: Some(index)\n-                });\n+                }\n+            );\n \n             self.reported_trait_errors.borrow_mut()\n-                .entry(error.obligation.cause.span).or_default()\n+                .entry(span).or_default()\n                 .push(error.obligation.predicate.clone());\n         }\n \n-        // We do this in 2 passes because we want to display errors in order, tho\n+        // We do this in 2 passes because we want to display errors in order, though\n         // maybe it *is* better to sort errors by span or something.\n         let mut is_suppressed = vec![false; errors.len()];\n         for (_, error_set) in error_map.iter() {"}]}