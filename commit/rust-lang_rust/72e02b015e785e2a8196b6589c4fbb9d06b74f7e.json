{"sha": "72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyZTAyYjAxNWU3ODVlMmE4MTk2YjY1ODljNGZiYjlkMDZiNzRmN2U=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-25T09:43:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-25T09:43:40Z"}, "message": "Rollup merge of #78208 - liketechnik:issue-69399, r=oli-obk\n\nreplace `#[allow_internal_unstable]` with `#[rustc_allow_const_fn_unstable]` for `const fn`s\n\n`#[allow_internal_unstable]` is currently used to side-step feature gate and stability checks.\nWhile it was originally only meant to be used only on macros, its use was expanded to `const fn`s.\n\nThis pr adds stricter checks for the usage of `#[allow_internal_unstable]` (only on macros) and introduces the `#[rustc_allow_const_fn_unstable]` attribute for usage on `const fn`s.\n\nThis pr does not change any of the functionality associated with the use of `#[allow_internal_unstable]` on macros or the usage of `#[rustc_allow_const_fn_unstable]` (instead of `#[allow_internal_unstable]`) on `const fn`s (see https://github.com/rust-lang/rust/issues/69399#issuecomment-712911540).\n\nNote: The check for `#[rustc_allow_const_fn_unstable]` currently only validates that the attribute is used on a function, because I don't know how I would check if the function is a `const fn` at the place of the check. I therefore openend this as a 'draft pull request'.\n\nCloses rust-lang/rust#69399\n\nr? @oli-obk", "tree": {"sha": "12a1b078eb53f1845064603fe25cd25f62c72b4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12a1b078eb53f1845064603fe25cd25f62c72b4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflUjMCRBK7hj4Ov3rIwAAdHIIAJq+b+CKvQqTWDvbOtAybRcW\nvqQFKLoeo2PY6NQQGW1XDl+LgWGOocB0oSqvKTZ20Lhj4Lqq+YG80AbsbVAPb5sD\nwivunz7MqjQgP0bOieXgo9N6qvCD3bI7c5BMs86uJZ08RHaoBCcE4WFD2IaFbWX5\nczosv8B0UcgJaJWuhBwLmuEt5QlS+x3R71SrKYAkGzMQFX+uhh5YHVwBA9IhSec1\nI1QNXghKNXb7P6LzhOlE5mlPa3OLqjnf1qGinMPILxGQA1+FTCQnZ27jj2Ee586R\n/Vuo8n1sEWh4vAONh6Og9ED2zk5YyD1Qp1+YiKQrM0Jd8sTAH4n5DmMh59RCmvU=\n=hkrL\n-----END PGP SIGNATURE-----\n", "payload": "tree 12a1b078eb53f1845064603fe25cd25f62c72b4c\nparent dbdc61f9f91e39003cf18131c9eb3dfa5eccfd50\nparent ac2c599f23d6c8b5d3413febde4c6febff68062e\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603619020 +0900\ncommitter GitHub <noreply@github.com> 1603619020 +0900\n\nRollup merge of #78208 - liketechnik:issue-69399, r=oli-obk\n\nreplace `#[allow_internal_unstable]` with `#[rustc_allow_const_fn_unstable]` for `const fn`s\n\n`#[allow_internal_unstable]` is currently used to side-step feature gate and stability checks.\nWhile it was originally only meant to be used only on macros, its use was expanded to `const fn`s.\n\nThis pr adds stricter checks for the usage of `#[allow_internal_unstable]` (only on macros) and introduces the `#[rustc_allow_const_fn_unstable]` attribute for usage on `const fn`s.\n\nThis pr does not change any of the functionality associated with the use of `#[allow_internal_unstable]` on macros or the usage of `#[rustc_allow_const_fn_unstable]` (instead of `#[allow_internal_unstable]`) on `const fn`s (see https://github.com/rust-lang/rust/issues/69399#issuecomment-712911540).\n\nNote: The check for `#[rustc_allow_const_fn_unstable]` currently only validates that the attribute is used on a function, because I don't know how I would check if the function is a `const fn` at the place of the check. I therefore openend this as a 'draft pull request'.\n\nCloses rust-lang/rust#69399\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "html_url": "https://github.com/rust-lang/rust/commit/72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbdc61f9f91e39003cf18131c9eb3dfa5eccfd50", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbdc61f9f91e39003cf18131c9eb3dfa5eccfd50", "html_url": "https://github.com/rust-lang/rust/commit/dbdc61f9f91e39003cf18131c9eb3dfa5eccfd50"}, {"sha": "ac2c599f23d6c8b5d3413febde4c6febff68062e", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2c599f23d6c8b5d3413febde4c6febff68062e", "html_url": "https://github.com/rust-lang/rust/commit/ac2c599f23d6c8b5d3413febde4c6febff68062e"}], "stats": {"total": 218, "additions": 177, "deletions": 41}, "files": [{"sha": "218a9b229e0df0fb2605606c0d609b9edd4d6e60", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -1013,13 +1013,28 @@ pub fn allow_internal_unstable<'a>(\n     sess: &'a Session,\n     attrs: &'a [Attribute],\n ) -> Option<impl Iterator<Item = Symbol> + 'a> {\n-    let attrs = sess.filter_by_name(attrs, sym::allow_internal_unstable);\n+    allow_unstable(sess, attrs, sym::allow_internal_unstable)\n+}\n+\n+pub fn rustc_allow_const_fn_unstable<'a>(\n+    sess: &'a Session,\n+    attrs: &'a [Attribute],\n+) -> Option<impl Iterator<Item = Symbol> + 'a> {\n+    allow_unstable(sess, attrs, sym::rustc_allow_const_fn_unstable)\n+}\n+\n+fn allow_unstable<'a>(\n+    sess: &'a Session,\n+    attrs: &'a [Attribute],\n+    symbol: Symbol,\n+) -> Option<impl Iterator<Item = Symbol> + 'a> {\n+    let attrs = sess.filter_by_name(attrs, symbol);\n     let list = attrs\n         .filter_map(move |attr| {\n             attr.meta_item_list().or_else(|| {\n                 sess.diagnostic().span_err(\n                     attr.span,\n-                    \"`allow_internal_unstable` expects a list of feature names\",\n+                    &format!(\"`{}` expects a list of feature names\", symbol.to_ident_string()),\n                 );\n                 None\n             })\n@@ -1029,8 +1044,10 @@ pub fn allow_internal_unstable<'a>(\n     Some(list.into_iter().filter_map(move |it| {\n         let name = it.ident().map(|ident| ident.name);\n         if name.is_none() {\n-            sess.diagnostic()\n-                .span_err(it.span(), \"`allow_internal_unstable` expects feature names\");\n+            sess.diagnostic().span_err(\n+                it.span(),\n+                &format!(\"`{}` expects feature names\", symbol.to_ident_string()),\n+            );\n         }\n         name\n     }))"}, {"sha": "d111ce7abb4c0f00dfcf32ad7aaff03ef0d520ae", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -210,6 +210,11 @@ declare_features! (\n     /// it is not on path for eventual stabilization).\n     (active, no_niche, \"1.42.0\", None, None),\n \n+    /// Allows using `#[rustc_allow_const_fn_unstable]`.\n+    /// This is an attribute on `const fn` for the same\n+    /// purpose as `#[allow_internal_unstable]`.\n+    (active, rustc_allow_const_fn_unstable, \"1.49.0\", Some(69399), None),\n+\n     // no-tracking-issue-end\n \n     // -------------------------------------------------------------------------"}, {"sha": "f73363cbccc25808e91f19c42c76118002277ae5", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -379,6 +379,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         allow_internal_unstable, AssumedUsed, template!(Word, List: \"feat1, feat2, ...\"),\n         \"allow_internal_unstable side-steps feature gating and stability checks\",\n     ),\n+    gated!(\n+        rustc_allow_const_fn_unstable, AssumedUsed, template!(Word, List: \"feat1, feat2, ...\"),\n+        \"rustc_allow_const_fn_unstable side-steps feature gating and stability checks\"\n+    ),\n     gated!(\n         allow_internal_unsafe, Normal, template!(Word),\n         \"allow_internal_unsafe side-steps the unsafe_code lint\","}, {"sha": "ba7bea4ac54e15b1a206055a7ae9d1c26c43f462", "filename": "compiler/rustc_mir/src/transform/check_consts/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -79,9 +79,13 @@ pub fn is_lang_panic_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n         || Some(def_id) == tcx.lang_items().begin_panic_fn()\n }\n \n-pub fn allow_internal_unstable(tcx: TyCtxt<'tcx>, def_id: DefId, feature_gate: Symbol) -> bool {\n+pub fn rustc_allow_const_fn_unstable(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    feature_gate: Symbol,\n+) -> bool {\n     let attrs = tcx.get_attrs(def_id);\n-    attr::allow_internal_unstable(&tcx.sess, attrs)\n+    attr::rustc_allow_const_fn_unstable(&tcx.sess, attrs)\n         .map_or(false, |mut features| features.any(|name| name == feature_gate))\n }\n "}, {"sha": "4139b544998faeb724ce2ff79596e7ea5495aeb8", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -292,7 +292,11 @@ impl Validator<'mir, 'tcx> {\n \n             Status::Unstable(gate) if self.tcx.features().enabled(gate) => {\n                 let unstable_in_stable = self.ccx.is_const_stable_const_fn()\n-                    && !super::allow_internal_unstable(self.tcx, self.def_id().to_def_id(), gate);\n+                    && !super::rustc_allow_const_fn_unstable(\n+                        self.tcx,\n+                        self.def_id().to_def_id(),\n+                        gate,\n+                    );\n                 if unstable_in_stable {\n                     emit_unstable_in_stable_error(self.ccx, span, gate);\n                 }\n@@ -807,7 +811,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n                     }\n \n                     // Calling an unstable function *always* requires that the corresponding gate\n-                    // be enabled, even if the function has `#[allow_internal_unstable(the_gate)]`.\n+                    // be enabled, even if the function has `#[rustc_allow_const_fn_unstable(the_gate)]`.\n                     if !tcx.features().declared_lib_features.iter().any(|&(sym, _)| sym == gate) {\n                         self.check_op(ops::FnCallUnstable(callee, Some(gate)));\n                         return;\n@@ -821,7 +825,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n \n                     // Otherwise, we are something const-stable calling a const-unstable fn.\n \n-                    if super::allow_internal_unstable(tcx, caller, gate) {\n+                    if super::rustc_allow_const_fn_unstable(tcx, caller, gate) {\n                         return;\n                     }\n \n@@ -967,8 +971,8 @@ fn emit_unstable_in_stable_error(ccx: &ConstCx<'_, '_>, span: Span, gate: Symbol\n         )\n         .span_suggestion(\n             attr_span,\n-            \"otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\",\n-            format!(\"#[allow_internal_unstable({})]\\n\", gate),\n+            \"otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\",\n+            format!(\"#[rustc_allow_const_fn_unstable({})]\\n\", gate),\n             Applicability::MaybeIncorrect,\n         )\n         .emit();"}, {"sha": "7679582f8811e39b2534d0f79f4e8ab1d7f46188", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -85,6 +85,10 @@ impl CheckAttrVisitor<'tcx> {\n                 self.check_export_name(&attr, span, target)\n             } else if self.tcx.sess.check_name(attr, sym::rustc_args_required_const) {\n                 self.check_rustc_args_required_const(&attr, span, target, item)\n+            } else if self.tcx.sess.check_name(attr, sym::allow_internal_unstable) {\n+                self.check_allow_internal_unstable(&attr, span, target, &attrs)\n+            } else if self.tcx.sess.check_name(attr, sym::rustc_allow_const_fn_unstable) {\n+                self.check_rustc_allow_const_fn_unstable(hir_id, &attr, span, target)\n             } else {\n                 // lint-only checks\n                 if self.tcx.sess.check_name(attr, sym::cold) {\n@@ -719,6 +723,55 @@ impl CheckAttrVisitor<'tcx> {\n             }\n         }\n     }\n+\n+    /// Outputs an error for `#[allow_internal_unstable]` which can only be applied to macros.\n+    /// (Allows proc_macro functions)\n+    fn check_allow_internal_unstable(\n+        &self,\n+        attr: &Attribute,\n+        span: &Span,\n+        target: Target,\n+        attrs: &[Attribute],\n+    ) -> bool {\n+        debug!(\"Checking target: {:?}\", target);\n+        if target == Target::Fn {\n+            for attr in attrs {\n+                if self.tcx.sess.is_proc_macro_attr(attr) {\n+                    debug!(\"Is proc macro attr\");\n+                    return true;\n+                }\n+            }\n+            debug!(\"Is not proc macro attr\");\n+        }\n+        self.tcx\n+            .sess\n+            .struct_span_err(attr.span, \"attribute should be applied to a macro\")\n+            .span_label(*span, \"not a macro\")\n+            .emit();\n+        false\n+    }\n+\n+    /// Outputs an error for `#[allow_internal_unstable]` which can only be applied to macros.\n+    /// (Allows proc_macro functions)\n+    fn check_rustc_allow_const_fn_unstable(\n+        &self,\n+        hir_id: HirId,\n+        attr: &Attribute,\n+        span: &Span,\n+        target: Target,\n+    ) -> bool {\n+        if let Target::Fn | Target::Method(_) = target {\n+            if self.tcx.is_const_fn_raw(self.tcx.hir().local_def_id(hir_id)) {\n+                return true;\n+            }\n+        }\n+        self.tcx\n+            .sess\n+            .struct_span_err(attr.span, \"attribute should be applied to `const fn`\")\n+            .span_label(*span, \"not a `const fn`\")\n+            .emit();\n+        false\n+    }\n }\n \n impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {"}, {"sha": "b24c62b971a468a31ca5e32b36a8051cb68b1dc1", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n \n         let is_feature_allowed = |feature_gate| {\n             // All features require that the corresponding gate be enabled,\n-            // even if the function has `#[allow_internal_unstable(the_gate)]`.\n+            // even if the function has `#[rustc_allow_const_fn_unstable(the_gate)]`.\n             if !tcx.features().enabled(feature_gate) {\n                 return false;\n             }\n@@ -105,8 +105,8 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n             }\n \n             // However, we cannot allow stable `const fn`s to use unstable features without an explicit\n-            // opt-in via `allow_internal_unstable`.\n-            attr::allow_internal_unstable(&tcx.sess, &tcx.get_attrs(def_id))\n+            // opt-in via `rustc_allow_const_fn_unstable`.\n+            attr::rustc_allow_const_fn_unstable(&tcx.sess, &tcx.get_attrs(def_id))\n                 .map_or(false, |mut features| features.any(|name| name == feature_gate))\n         };\n "}, {"sha": "bae1e4f314c01e3360e4c4653e7da12c47063adc", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -894,6 +894,7 @@ symbols! {\n         rustc,\n         rustc_allocator,\n         rustc_allocator_nounwind,\n+        rustc_allow_const_fn_unstable,\n         rustc_args_required_const,\n         rustc_attrs,\n         rustc_builtin_macro,"}, {"sha": "0fe15958076c53ad1b1054083bcdad4c9ffdaa88", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -72,6 +72,7 @@\n #![allow(explicit_outlives_requirements)]\n #![allow(incomplete_features)]\n #![deny(unsafe_op_in_unsafe_fn)]\n+#![cfg_attr(not(bootstrap), feature(rustc_allow_const_fn_unstable))]\n #![cfg_attr(not(test), feature(generator_trait))]\n #![cfg_attr(test, feature(test))]\n #![cfg_attr(test, feature(new_uninit))]"}, {"sha": "657b568e7f6f6b5cd35770f85334fe9128ad87d3", "filename": "library/alloc/src/raw_vec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Falloc%2Fsrc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Falloc%2Fsrc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fraw_vec.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -150,7 +150,8 @@ impl<T> RawVec<T, Global> {\n impl<T, A: AllocRef> RawVec<T, A> {\n     /// Like `new`, but parameterized over the choice of allocator for\n     /// the returned `RawVec`.\n-    #[allow_internal_unstable(const_fn)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n     pub const fn new_in(alloc: A) -> Self {\n         // `cap: 0` means \"unallocated\". zero-sized types are ignored.\n         Self { ptr: Unique::dangling(), cap: 0, alloc }"}, {"sha": "6cb240d1730edf4a1797fae4d98571c66065bba6", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -63,6 +63,7 @@\n #![warn(missing_debug_implementations)]\n #![allow(explicit_outlives_requirements)]\n #![allow(incomplete_features)]\n+#![cfg_attr(not(bootstrap), feature(rustc_allow_const_fn_unstable))]\n #![feature(allow_internal_unstable)]\n #![feature(arbitrary_self_types)]\n #![feature(asm)]"}, {"sha": "295a876773c48779255894975912de187d5b6c16", "filename": "library/core/src/num/int_macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fint_macros.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -2045,7 +2045,8 @@ assert_eq!(\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n-            #[allow_internal_unstable(const_fn_transmute)]\n+            #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -2193,7 +2194,8 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n-            #[allow_internal_unstable(const_fn_transmute)]\n+            #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them"}, {"sha": "bdea0ea3b08c026aaf518462aa941c96987544b9", "filename": "library/core/src/num/uint_macros.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fuint_macros.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -1803,7 +1803,8 @@ assert_eq!(\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute them to arrays of bytes\n-            #[allow_internal_unstable(const_fn_transmute)]\n+            #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n             #[inline]\n             pub const fn to_ne_bytes(self) -> [u8; mem::size_of::<Self>()] {\n                 // SAFETY: integers are plain old datatypes so we can always transmute them to\n@@ -1951,7 +1952,8 @@ fn read_ne_\", stringify!($SelfT), \"(input: &mut &[u8]) -> \", stringify!($SelfT),\n             #[rustc_const_stable(feature = \"const_int_conversion\", since = \"1.44.0\")]\n             // SAFETY: const sound because integers are plain old datatypes so we can always\n             // transmute to them\n-            #[allow_internal_unstable(const_fn_transmute)]\n+            #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n+            #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n             #[inline]\n             pub const fn from_ne_bytes(bytes: [u8; mem::size_of::<Self>()]) -> Self {\n                 // SAFETY: integers are plain old datatypes so we can always transmute to them"}, {"sha": "b6fd0c4986b64b59ec5b4c73d257fc91c0edccf5", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -88,7 +88,8 @@ impl<T> [T] {\n     #[rustc_const_stable(feature = \"const_slice_len\", since = \"1.32.0\")]\n     #[inline]\n     // SAFETY: const sound because we transmute out the length field as a usize (which it must be)\n-    #[allow_internal_unstable(const_fn_union)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_union))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_union))]\n     pub const fn len(&self) -> usize {\n         // SAFETY: this is safe because `&[T]` and `FatPtr<T>` have the same layout.\n         // Only `std` can make this guarantee."}, {"sha": "952d0598a7c5b961366bb3aceda9a66b1c37edb8", "filename": "library/core/src/str/converts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fconverts.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -157,7 +157,8 @@ pub fn from_utf8_mut(v: &mut [u8]) -> Result<&mut str, Utf8Error> {\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_str_from_utf8_unchecked\", issue = \"75196\")]\n-#[allow_internal_unstable(const_fn_transmute)]\n+#[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n+#[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n pub const unsafe fn from_utf8_unchecked(v: &[u8]) -> &str {\n     // SAFETY: the caller must guarantee that the bytes `v` are valid UTF-8.\n     // Also relies on `&str` and `&[u8]` having the same layout."}, {"sha": "ee9c09fe186c7491e9864bc4f70146c0610222ce", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -219,7 +219,8 @@ impl str {\n     #[rustc_const_stable(feature = \"str_as_bytes\", since = \"1.32.0\")]\n     #[inline(always)]\n     #[allow(unused_attributes)]\n-    #[allow_internal_unstable(const_fn_transmute)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n     pub const fn as_bytes(&self) -> &[u8] {\n         // SAFETY: const sound because we transmute two types with the same layout\n         unsafe { mem::transmute(self) }"}, {"sha": "d3c0d9b784139c08974ba0c9e0cce3aa27f7257b", "filename": "library/core/src/task/wake.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftask%2Fwake.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -130,7 +130,8 @@ impl RawWakerVTable {\n     #[rustc_promotable]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     #[rustc_const_stable(feature = \"futures_api\", since = \"1.36.0\")]\n-    #[allow_internal_unstable(const_fn_fn_ptr_basics)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_fn_ptr_basics))]\n     pub const fn new(\n         clone: unsafe fn(*const ()) -> RawWaker,\n         wake: unsafe fn(*const ()),"}, {"sha": "dfe5df965cfacc043d518f9ddcaa509f7a5cfd5c", "filename": "library/proc_macro/src/bridge/client.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fclient.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -401,7 +401,8 @@ fn run_client<A: for<'a, 's> DecodeMut<'a, 's, ()>, R: Encode<()>>(\n }\n \n impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n-    #[allow_internal_unstable(const_fn)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n     pub const fn expand1(f: fn(crate::TokenStream) -> crate::TokenStream) -> Self {\n         extern \"C\" fn run(\n             bridge: Bridge<'_>,\n@@ -414,7 +415,8 @@ impl Client<fn(crate::TokenStream) -> crate::TokenStream> {\n }\n \n impl Client<fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream> {\n-    #[allow_internal_unstable(const_fn)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n     pub const fn expand2(\n         f: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n@@ -459,7 +461,8 @@ impl ProcMacro {\n         }\n     }\n \n-    #[allow_internal_unstable(const_fn)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n     pub const fn custom_derive(\n         trait_name: &'static str,\n         attributes: &'static [&'static str],\n@@ -468,15 +471,17 @@ impl ProcMacro {\n         ProcMacro::CustomDerive { trait_name, attributes, client: Client::expand1(expand) }\n     }\n \n-    #[allow_internal_unstable(const_fn)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n     pub const fn attr(\n         name: &'static str,\n         expand: fn(crate::TokenStream, crate::TokenStream) -> crate::TokenStream,\n     ) -> Self {\n         ProcMacro::Attr { name, client: Client::expand2(expand) }\n     }\n \n-    #[allow_internal_unstable(const_fn)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n     pub const fn bang(\n         name: &'static str,\n         expand: fn(crate::TokenStream) -> crate::TokenStream,"}, {"sha": "e7c32b10384d4afdcbafad435a220c92f6df50be", "filename": "library/proc_macro/src/bridge/scoped_cell.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Fbridge%2Fscoped_cell.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -35,7 +35,8 @@ impl<'a, 'b, T: LambdaL> DerefMut for RefMutL<'a, 'b, T> {\n pub struct ScopedCell<T: LambdaL>(Cell<<T as ApplyL<'static>>::Out>);\n \n impl<T: LambdaL> ScopedCell<T> {\n-    #[allow_internal_unstable(const_fn)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn))]\n     pub const fn new(value: <T as ApplyL<'static>>::Out) -> Self {\n         ScopedCell(Cell::new(value))\n     }"}, {"sha": "5a4b69cf6fc1b294b2380ad70f630b813dec1682", "filename": "library/proc_macro/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fproc_macro%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fproc_macro%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fproc_macro%2Fsrc%2Flib.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -18,6 +18,7 @@\n     test(no_crate_inject, attr(deny(warnings))),\n     test(attr(allow(dead_code, deprecated, unused_variables, unused_mut)))\n )]\n+#![cfg_attr(not(bootstrap), feature(rustc_allow_const_fn_unstable))]\n #![feature(nll)]\n #![feature(staged_api)]\n #![feature(const_fn)]"}, {"sha": "96a7755c688219d6a1a30c1448e21745e1273cbb", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -206,6 +206,7 @@\n #![needs_panic_runtime]\n // std may use features in a platform-specific way\n #![allow(unused_features)]\n+#![cfg_attr(not(bootstrap), feature(rustc_allow_const_fn_unstable))]\n #![cfg_attr(test, feature(print_internals, set_stdio, update_panic_count))]\n #![cfg_attr(\n     all(target_vendor = \"fortanix\", target_env = \"sgx\"),"}, {"sha": "bb3ece4c2739f239883ffe5402fa81d66baf3fe2", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -1043,7 +1043,8 @@ impl Ipv6Addr {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_const_stable(feature = \"const_ipv6\", since = \"1.32.0\")]\n-    #[allow_internal_unstable(const_fn_transmute)]\n+    #[cfg_attr(not(bootstrap), rustc_allow_const_fn_unstable(const_fn_transmute))]\n+    #[cfg_attr(bootstrap, allow_internal_unstable(const_fn_transmute))]\n     pub const fn new(a: u16, b: u16, c: u16, d: u16, e: u16, f: u16, g: u16, h: u16) -> Ipv6Addr {\n         let addr16 = [\n             a.to_be(),"}, {"sha": "53ade85bfd2e7de6adf302a250744b365a5a7f4f", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -1,4 +1,4 @@\n-#![feature(rustc_attrs, staged_api, allow_internal_unstable)]\n+#![feature(rustc_attrs, staged_api, rustc_allow_const_fn_unstable)]\n #![feature(const_fn_fn_ptr_basics)]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -8,7 +8,7 @@ const fn error(_: fn()) {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n-#[allow_internal_unstable(const_fn_fn_ptr_basics)]\n+#[rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics)]\n const fn compiles(_: fn()) {}\n \n fn main() {}"}, {"sha": "6f89225719f842ba9f8277981ea3ae0781fe079b", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr.stderr?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -8,9 +8,9 @@ help: if it is not part of the public API, make this function unstably const\n    |\n LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n    |\n-help: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n+help: otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n    |\n-LL | #[allow_internal_unstable(const_fn_fn_ptr_basics)]\n+LL | #[rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics)]\n    |\n \n error: aborting due to previous error"}, {"sha": "430e911aacdee7fb09785b067fd9e0fd906337f3", "filename": "src/test/ui/consts/min_const_fn/allow_const_fn_ptr_run_pass.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fallow_const_fn_ptr_run_pass.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -1,13 +1,13 @@\n // run-pass\n-#![feature(allow_internal_unstable)]\n+#![feature(rustc_allow_const_fn_unstable)]\n #![feature(const_fn_fn_ptr_basics)]\n \n #![feature(rustc_attrs, staged_api)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(since=\"1.0.0\", feature = \"mep\")]\n-#[allow_internal_unstable(const_fn_fn_ptr_basics)]\n+#[rustc_allow_const_fn_unstable(const_fn_fn_ptr_basics)]\n const fn takes_fn_ptr(_: fn()) {}\n \n const FN: fn() = || ();"}, {"sha": "d3017c5602a8c1ece32329c85158e957bdaad127", "filename": "src/test/ui/consts/min_const_fn/min_const_fn_libstd_stability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_fn_libstd_stability.stderr?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -24,9 +24,9 @@ help: if it is not part of the public API, make this function unstably const\n    |\n LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n    |\n-help: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n+help: otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n    |\n-LL | #[allow_internal_unstable(const_fn_floating_point_arithmetic)]\n+LL | #[rustc_allow_const_fn_unstable(const_fn_floating_point_arithmetic)]\n    |\n \n error: `foo2_gated` is not yet stable as a const fn"}, {"sha": "53a59467e3d20bcb0e6deaa4f599b49d3b7ced2c", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -24,9 +24,9 @@ help: if it is not part of the public API, make this function unstably const\n    |\n LL | #[rustc_const_unstable(feature = \"...\", issue = \"...\")]\n    |\n-help: otherwise `#[allow_internal_unstable]` can be used to bypass stability checks\n+help: otherwise `#[rustc_allow_const_fn_unstable]` can be used to bypass stability checks\n    |\n-LL | #[allow_internal_unstable(const_fn_floating_point_arithmetic)]\n+LL | #[rustc_allow_const_fn_unstable(const_fn_floating_point_arithmetic)]\n    |\n \n error: `foo2_gated` is not yet stable as a const fn"}, {"sha": "8b13f1bf2788e60868d6498c516dd80b0e95813e", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable-struct.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -2,6 +2,7 @@\n // this needs a different test since this is done after expansion\n \n #[allow_internal_unstable()] //~ ERROR allow_internal_unstable side-steps\n+//~| ERROR attribute should\n struct S;\n \n fn main() {}"}, {"sha": "df7773ba4fb65a7ccb23b9041244d52412d1c092", "filename": "src/test/ui/feature-gates/feature-gate-allow-internal-unstable-struct.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-allow-internal-unstable-struct.stderr?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -6,6 +6,15 @@ LL | #[allow_internal_unstable()]\n    |\n    = help: add `#![feature(allow_internal_unstable)]` to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: attribute should be applied to a macro\n+  --> $DIR/feature-gate-allow-internal-unstable-struct.rs:4:1\n+   |\n+LL | #[allow_internal_unstable()]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | struct S;\n+   | --------- not a macro\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "19d8fa87f55365646623c3692e82e59b7e5762ed", "filename": "src/test/ui/feature-gates/feature-gate-rustc-allow-const-fn-unstable.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-allow-const-fn-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-allow-const-fn-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-allow-const-fn-unstable.rs?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -0,0 +1,6 @@\n+#![allow(unused_macros)]\n+\n+#[rustc_allow_const_fn_unstable()] //~ ERROR rustc_allow_const_fn_unstable side-steps\n+const fn foo() { }\n+\n+fn main() {}"}, {"sha": "a549cb64e0cb63bf9c444e7e4b7689da92a35dd1", "filename": "src/test/ui/feature-gates/feature-gate-rustc-allow-const-fn-unstable.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-allow-const-fn-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72e02b015e785e2a8196b6589c4fbb9d06b74f7e/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-allow-const-fn-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-rustc-allow-const-fn-unstable.stderr?ref=72e02b015e785e2a8196b6589c4fbb9d06b74f7e", "patch": "@@ -0,0 +1,12 @@\n+error[E0658]: rustc_allow_const_fn_unstable side-steps feature gating and stability checks\n+  --> $DIR/feature-gate-rustc-allow-const-fn-unstable.rs:3:1\n+   |\n+LL | #[rustc_allow_const_fn_unstable()]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #69399 <https://github.com/rust-lang/rust/issues/69399> for more information\n+   = help: add `#![feature(rustc_allow_const_fn_unstable)]` to the crate attributes to enable\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0658`."}]}