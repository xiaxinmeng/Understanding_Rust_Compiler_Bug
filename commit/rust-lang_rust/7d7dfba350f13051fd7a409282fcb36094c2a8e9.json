{"sha": "7d7dfba350f13051fd7a409282fcb36094c2a8e9", "node_id": "C_kwDOAAsO6NoAKDdkN2RmYmEzNTBmMTMwNTFmZDdhNDA5MjgyZmNiMzYwOTRjMmE4ZTk", "commit": {"author": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-10-20T20:14:16Z"}, "committer": {"name": "pierwill", "email": "pierwill@users.noreply.github.com", "date": "2021-12-13T16:24:05Z"}, "message": "Include rustc version in `rustc_span::StableCrateId`\n\nNormalize symbol hashes in compiletest.\n\nRemove DefId sorting", "tree": {"sha": "d07eadd07dfa309c444959bd72b58f0dc4ab8879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d07eadd07dfa309c444959bd72b58f0dc4ab8879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d7dfba350f13051fd7a409282fcb36094c2a8e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7dfba350f13051fd7a409282fcb36094c2a8e9", "html_url": "https://github.com/rust-lang/rust/commit/7d7dfba350f13051fd7a409282fcb36094c2a8e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d7dfba350f13051fd7a409282fcb36094c2a8e9/comments", "author": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pierwill", "id": 19642016, "node_id": "MDQ6VXNlcjE5NjQyMDE2", "avatar_url": "https://avatars.githubusercontent.com/u/19642016?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pierwill", "html_url": "https://github.com/pierwill", "followers_url": "https://api.github.com/users/pierwill/followers", "following_url": "https://api.github.com/users/pierwill/following{/other_user}", "gists_url": "https://api.github.com/users/pierwill/gists{/gist_id}", "starred_url": "https://api.github.com/users/pierwill/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pierwill/subscriptions", "organizations_url": "https://api.github.com/users/pierwill/orgs", "repos_url": "https://api.github.com/users/pierwill/repos", "events_url": "https://api.github.com/users/pierwill/events{/privacy}", "received_events_url": "https://api.github.com/users/pierwill/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a737592a3d8f0f5ec76524c880d226f28bef2c84", "url": "https://api.github.com/repos/rust-lang/rust/commits/a737592a3d8f0f5ec76524c880d226f28bef2c84", "html_url": "https://github.com/rust-lang/rust/commit/a737592a3d8f0f5ec76524c880d226f28bef2c84"}], "stats": {"total": 465, "additions": 261, "deletions": 204}, "files": [{"sha": "ac1a89245b6549cd6dc58c1b21b0adf37e0ad7b8", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -2009,7 +2009,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n         };\n \n-        let mut def_ids: Vec<_> = defined_by\n+        let def_ids: Vec<_> = defined_by\n             .values()\n             .flat_map(|region| match region {\n                 Region::EarlyBound(_, def_id, _)\n@@ -2020,9 +2020,6 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             })\n             .collect();\n \n-        // ensure that we issue lints in a repeatable order\n-        def_ids.sort_by_cached_key(|&def_id| self.tcx.def_path_hash(def_id));\n-\n         'lifetimes: for def_id in def_ids {\n             debug!(\"check_uses_for_lifetimes_defined_by_scope: def_id = {:?}\", def_id);\n "}, {"sha": "fe5f70f4fd9202e1d576a288aabcee9a0a2957bf", "filename": "compiler/rustc_span/src/def_id.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fdef_id.rs?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -126,12 +126,12 @@ impl Borrow<Fingerprint> for DefPathHash {\n     }\n }\n \n-/// A [StableCrateId] is a 64 bit hash of the crate name combined with all\n-/// `-Cmetadata` arguments. It is to [CrateNum] what [DefPathHash] is to\n-/// [DefId]. It is stable across compilation sessions.\n+/// A [`StableCrateId`] is a 64 bit hash of the crate name combined with all\n+/// `-Cmetadata` arguments. It is to [`CrateNum`] what [`DefPathHash`] is to\n+/// [`DefId`]. It is stable across compilation sessions.\n ///\n /// Since the ID is a hash value there is a (very small) chance that two crates\n-/// end up with the same [StableCrateId]. The compiler will check for such\n+/// end up with the same [`StableCrateId`]. The compiler will check for such\n /// collisions when loading crates and abort compilation in order to avoid\n /// further trouble.\n #[derive(Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord, Debug)]\n@@ -152,7 +152,7 @@ impl StableCrateId {\n         let mut hasher = StableHasher::new();\n         crate_name.hash(&mut hasher);\n \n-        // We don't want the stable crate id to dependent on the order\n+        // We don't want the stable crate ID to depend on the order of\n         // -C metadata arguments, so sort them:\n         metadata.sort();\n         // Every distinct -C metadata value is only incorporated once:\n@@ -171,6 +171,12 @@ impl StableCrateId {\n         // linking against a library of the same name, if this is an executable.\n         hasher.write(if is_exe { b\"exe\" } else { b\"lib\" });\n \n+        // Also incorporate the rustc version. Otherwise, with -Zsymbol-mangling-version=v0\n+        // and no -Cmetadata, symbols from the same crate compiled with different versions of\n+        // rustc are named the same.\n+        let rustc_version = option_env!(\"CFG_VERSION\").unwrap_or(\"unknown version\").as_bytes();\n+        hasher.write(rustc_version);\n+\n         StableCrateId(hasher.finish())\n     }\n }"}, {"sha": "4ae783a7f46ff7fcbd4002d33e5c819f2d83e3ae", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -30,7 +30,7 @@\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n +                                          // + span: $DIR/const-promotion-extern-static.rs:9:31: 9:44\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[55e6]::BAR), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[HASH]::BAR), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n -         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:34: 9:35"}, {"sha": "705c2ed06b3824fb17b6a677e02f61a4cce81bb8", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -32,7 +32,7 @@\n -         _3 = [move _4];                  // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n -         _2 = &_3;                        // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n +                                          // + span: $DIR/const-promotion-extern-static.rs:13:31: 13:55\n-+                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[55e6]::FOO), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[HASH]::FOO), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n -         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:45: 13:46"}, {"sha": "7fb954b8356cd28cfe7927c880ca9f0637c8ef61", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.32bit.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -31,7 +31,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[8240]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "7fb954b8356cd28cfe7927c880ca9f0637c8ef61", "filename": "src/test/mir-opt/const_prop/bad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fbad_op_unsafe_oob_for_slices.main.ConstProp.64bit.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -31,7 +31,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n-                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[8240]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[i32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ bad_op_unsafe_oob_for_slices[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n           _3 = _9;                         // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _2 = &raw const (*_3);           // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35\n           _1 = move _2 as *const [i32] (Pointer(Unsize)); // scope 0 at $DIR/bad_op_unsafe_oob_for_slices.rs:5:25: 5:35"}, {"sha": "827a86c2376e8b5a61b7e7ef7b34286285c13e8e", "filename": "src/test/mir-opt/const_prop/const_prop_fails_gracefully.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fconst_prop_fails_gracefully.main.ConstProp.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -22,7 +22,7 @@\n                                            // + val: Unevaluated(FOO, [], None)\n                                            // mir::Constant\n                                            // + span: $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[2706]::main::FOO), const_param_did: None }, substs_: Some([]), promoted: None }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ const_prop_fails_gracefully[HASH]::main::FOO), const_param_did: None }, substs_: Some([]), promoted: None }) }\n           _2 = &raw const (*_3);           // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:16\n           _1 = move _2 as usize (Misc);    // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:13: 7:39\n           StorageDead(_2);                 // scope 0 at $DIR/const_prop_fails_gracefully.rs:7:38: 7:39"}, {"sha": "496b9718c6ad9b100dcd93b142c3148e475c91cc", "filename": "src/test/mir-opt/const_prop/ref_deref.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.ConstProp.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -17,7 +17,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref.rs:5:6: 5:10\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[cb9b]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n           _2 = _4;                         // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n -         _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n +         _1 = const 4_i32;                // scope 0 at $DIR/ref_deref.rs:5:5: 5:10"}, {"sha": "07c3b0cd58f2d59bfd09a8bcae3a72c6d032d6f1", "filename": "src/test/mir-opt/const_prop/ref_deref.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref.main.PromoteTemps.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -20,7 +20,7 @@\n +                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref.rs:5:6: 5:10\n-+                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[cb9b]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n +         _2 = &(*_4);                     // scope 0 at $DIR/ref_deref.rs:5:6: 5:10\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref.rs:5:5: 5:10\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref.rs:5:10: 5:11"}, {"sha": "2545b89c1d3ee9194900abecfe70f91a4eb060aa", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.ConstProp.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -17,7 +17,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[e8c3]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n           _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n           StorageDead(_2);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "f728d55ba6ede0bf6be71244e033a10ddeef3393", "filename": "src/test/mir-opt/const_prop/ref_deref_project.main.PromoteTemps.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fref_deref_project.main.PromoteTemps.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -20,7 +20,7 @@\n +                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n +                                          // mir::Constant\n +                                          // + span: $DIR/ref_deref_project.rs:5:6: 5:17\n-+                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[e8c3]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n++                                          // + literal: Const { ty: &(i32, i32), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ ref_deref_project[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n +         _2 = &((*_4).1: i32);            // scope 0 at $DIR/ref_deref_project.rs:5:6: 5:17\n           _1 = (*_2);                      // scope 0 at $DIR/ref_deref_project.rs:5:5: 5:17\n -         StorageDead(_3);                 // scope 0 at $DIR/ref_deref_project.rs:5:17: 5:18"}, {"sha": "12c77e0b042a3b514db56b4e17fa0563f6b571c0", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.32bit.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -25,7 +25,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[6547]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "12c77e0b042a3b514db56b4e17fa0563f6b571c0", "filename": "src/test/mir-opt/const_prop/slice_len.main.ConstProp.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fslice_len.main.ConstProp.64bit.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -25,7 +25,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/slice_len.rs:5:6: 5:19\n-                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[6547]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &[u32; 3], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ slice_len[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n           _4 = _9;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           _3 = _4;                         // scope 0 at $DIR/slice_len.rs:5:6: 5:19\n           StorageLive(_10);                // scope 0 at $DIR/slice_len.rs:5:6: 5:19"}, {"sha": "37f6fc91cf95f69efb4f3d3d85c780aa5c9acf76", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -38,7 +38,7 @@ fn bar() -> bool {\n                                          // + val: Unevaluated(bar, [], Some(promoted[1]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:7: 12:9\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[a78c]::bar), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[1]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[HASH]::bar), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[1]) }) }\n         Retag(_10);                      // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         _4 = &(*_10);                    // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n         Retag(_4);                       // scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n@@ -52,7 +52,7 @@ fn bar() -> bool {\n                                          // + val: Unevaluated(bar, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/inline-retag.rs:12:11: 12:14\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[a78c]::bar), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:4 ~ inline_retag[HASH]::bar), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n         Retag(_9);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         _7 = &(*_9);                     // scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         Retag(_7);                       // scope 1 at $DIR/inline-retag.rs:12:11: 12:14"}, {"sha": "20e5191310cafb68b0bfe65774cd5ca15c260f5b", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -66,7 +66,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[2d0f]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "20e5191310cafb68b0bfe65774cd5ca15c260f5b", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -66,7 +66,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[2d0f]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n           _8 = _20;                        // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.0: &i32) = move _7;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_6.1: &i32) = move _8;          // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "04e4af70bb75e4fc77eb8e08f96a69b1ee296038", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -87,7 +87,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[2d0f]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "04e4af70bb75e4fc77eb8e08f96a69b1ee296038", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -87,7 +87,7 @@\n                                            // + val: Unevaluated(main, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[2d0f]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:3 ~ issue_73223[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n           _11 = _28;                       // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.0: &i32) = move _10;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           (_9.1: &i32) = move _11;         // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "b8f44b7672a200561751085ed4f866762b5f7a2f", "filename": "src/test/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -50,7 +50,7 @@\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[2]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:75:42: 75:44\n-                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[2872]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[2]) }) }\n+                                           // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[HASH]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[2]) }) }\n           _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n           _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:75:42: 75:44\n -         _5 = discriminant_value::<i32>(move _6) -> bb2; // scope 0 at $DIR/lower_intrinsics.rs:75:5: 75:45\n@@ -74,7 +74,7 @@\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[1]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:76:42: 76:45\n-                                           // + literal: Const { ty: &(), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[2872]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[1]) }) }\n+                                           // + literal: Const { ty: &(), val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[HASH]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[1]) }) }\n           _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n           _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:76:42: 76:45\n -         _9 = discriminant_value::<()>(move _10) -> bb3; // scope 0 at $DIR/lower_intrinsics.rs:76:5: 76:46\n@@ -98,7 +98,7 @@\n                                            // + val: Unevaluated(discriminant, [T], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $DIR/lower_intrinsics.rs:77:42: 77:47\n-                                           // + literal: Const { ty: &E, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[2872]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[0]) }) }\n+                                           // + literal: Const { ty: &E, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:29 ~ lower_intrinsics[HASH]::discriminant), const_param_did: None }, substs_: Some([T]), promoted: Some(promoted[0]) }) }\n           _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n           _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:77:42: 77:47\n -         _13 = discriminant_value::<E>(move _14) -> bb4; // scope 0 at $DIR/lower_intrinsics.rs:77:5: 77:48"}, {"sha": "0ef06da0cb758ae97d0d5a421073cae996c57a86", "filename": "src/test/mir-opt/match_false_edges.full_tested_match.PromoteTemps.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.full_tested_match.PromoteTemps.after.mir?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -57,7 +57,7 @@ fn full_tested_match() -> () {\n                                          // + val: Unevaluated(full_tested_match, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/match_false_edges.rs:16:14: 16:15\n-                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ match_false_edges[4011]::full_tested_match), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &std::option::Option<i32>, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:5 ~ match_false_edges[HASH]::full_tested_match), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n         _6 = &(((*_11) as Some).0: i32); // scope 0 at $DIR/match_false_edges.rs:16:14: 16:15\n         _4 = &shallow _2;                // scope 0 at $DIR/match_false_edges.rs:15:19: 15:27\n         StorageLive(_7);                 // scope 0 at $DIR/match_false_edges.rs:16:20: 16:27"}, {"sha": "defb04db7decec41e2b6d45d036119e7c2bd78db", "filename": "src/test/mir-opt/retag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.array_casts.SimplifyCfg-elaborate-drops.after.mir?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -127,7 +127,7 @@ fn array_casts() -> () {\n                                          // + val: Unevaluated(array_casts, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                                         // + literal: Const { ty: &usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:15 ~ retag[13e7]::array_casts), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &usize, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:15 ~ retag[HASH]::array_casts), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n         Retag(_35);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         _18 = &(*_35);                   // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n         Retag(_18);                      // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "3f35f15a56d76d78bf4335c7cc452ba26a5c3a40", "filename": "src/test/mir-opt/retag.main.SimplifyCfg-elaborate-drops.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fretag.main.SimplifyCfg-elaborate-drops.after.mir?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -113,7 +113,7 @@ fn main() -> () {\n         StorageLive(_14);                // scope 1 at $DIR/retag.rs:40:31: 43:6\n         _14 = [closure@main::{closure#0}]; // scope 1 at $DIR/retag.rs:40:31: 43:6\n                                          // closure\n-                                         // + def_id: DefId(0:14 ~ retag[13e7]::main::{closure#0})\n+                                         // + def_id: DefId(0:14 ~ retag[HASH]::main::{closure#0})\n                                          // + substs: [\n                                          //     i8,\n                                          //     for<'r> extern \"rust-call\" fn((&'r i32,)) -> &'r i32,\n@@ -153,7 +153,7 @@ fn main() -> () {\n                                          // + val: Unevaluated(main, [], Some(promoted[0]))\n                                          // mir::Constant\n                                          // + span: $DIR/retag.rs:47:21: 47:23\n-                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:13 ~ retag[13e7]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n+                                         // + literal: Const { ty: &i32, val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:13 ~ retag[HASH]::main), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }\n         Retag(_28);                      // scope 7 at $DIR/retag.rs:47:21: 47:23\n         _23 = &(*_28);                   // scope 7 at $DIR/retag.rs:47:21: 47:23\n         Retag(_23);                      // scope 7 at $DIR/retag.rs:47:21: 47:23"}, {"sha": "ebe20348830819ac477d076683126044247692d9", "filename": "src/test/ui/consts/miri_unleashed/tls.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Ftls.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -2,13 +2,13 @@ error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:12:25\n    |\n LL |     unsafe { let _val = A; }\n-   |                         ^ cannot access thread local static (DefId(0:6 ~ tls[f423]::A))\n+   |                         ^ cannot access thread local static (DefId(0:6 ~ tls[HASH]::A))\n \n error[E0080]: could not evaluate static initializer\n   --> $DIR/tls.rs:19:26\n    |\n LL |     unsafe { let _val = &A; }\n-   |                          ^ cannot access thread local static (DefId(0:6 ~ tls[f423]::A))\n+   |                          ^ cannot access thread local static (DefId(0:6 ~ tls[HASH]::A))\n \n warning: skipping const checks\n    |"}, {"sha": "2b9bcb1bf8a25825359c7a600cfb3a813ccda8ab", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -9,7 +9,7 @@ note: generator is not `Send` as this value is used across a yield\n   --> $DIR/generator-print-verbose-1.rs:35:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n-   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[70c9]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n+   |             ------------- has type `Opaque(DefId(0:34 ~ generator_print_verbose_1[HASH]::make_non_send_generator::{opaque#0}), [])` which is not `Send`\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n LL |     };\n@@ -29,10 +29,10 @@ LL |     require_send(send_gen);\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n    = note: required because it appears within the type `[make_gen2<Arc<RefCell<i32>>>::{closure#0} upvar_tys=(Arc<RefCell<i32>>) {()}]`\n-   = note: required because it appears within the type `Opaque(DefId(0:39 ~ generator_print_verbose_1[70c9]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n-   = note: required because it appears within the type `Opaque(DefId(0:42 ~ generator_print_verbose_1[70c9]::make_non_send_generator2::{opaque#0}), [])`\n-   = note: required because it appears within the type `{Opaque(DefId(0:42 ~ generator_print_verbose_1[70c9]::make_non_send_generator2::{opaque#0}), []), ()}`\n-   = note: required because it appears within the type `[test2::{closure#0} upvar_tys=() {Opaque(DefId(0:42 ~ generator_print_verbose_1[70c9]::make_non_send_generator2::{opaque#0}), []), ()}]`\n+   = note: required because it appears within the type `Opaque(DefId(0:39 ~ generator_print_verbose_1[HASH]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n+   = note: required because it appears within the type `Opaque(DefId(0:42 ~ generator_print_verbose_1[HASH]::make_non_send_generator2::{opaque#0}), [])`\n+   = note: required because it appears within the type `{Opaque(DefId(0:42 ~ generator_print_verbose_1[HASH]::make_non_send_generator2::{opaque#0}), []), ()}`\n+   = note: required because it appears within the type `[test2::{closure#0} upvar_tys=() {Opaque(DefId(0:42 ~ generator_print_verbose_1[HASH]::make_non_send_generator2::{opaque#0}), []), ()}]`\n note: required by a bound in `require_send`\n   --> $DIR/generator-print-verbose-1.rs:26:25\n    |"}, {"sha": "e540094a3ece8f66da0663bab6b0ef218ac84008", "filename": "src/test/ui/lto/lto-duplicate-symbols.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Flto%2Flto-duplicate-symbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Flto%2Flto-duplicate-symbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flto%2Flto-duplicate-symbols.rs?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -4,7 +4,7 @@\n // error-pattern:Linking globals named 'foo': symbol multiply defined!\n // compile-flags: -C lto\n // no-prefer-dynamic\n-\n+// normalize-stderr-test: \"lto-duplicate-symbols2\\.lto_duplicate_symbols2\\.[0-9a-zA-Z]+-cgu\" -> \"lto-duplicate-symbols2.lto_duplicate_symbols2.HASH-cgu\"\n extern crate lto_duplicate_symbols1;\n extern crate lto_duplicate_symbols2;\n "}, {"sha": "50e6b81dcf4b4a62a95111d230bb6a7b061638af", "filename": "src/test/ui/lto/lto-duplicate-symbols.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Flto%2Flto-duplicate-symbols.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Flto%2Flto-duplicate-symbols.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flto%2Flto-duplicate-symbols.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,6 +1,6 @@\n warning: Linking globals named 'foo': symbol multiply defined!\n \n-error: failed to load bc of \"lto-duplicate-symbols2.lto_duplicate_symbols2.693a75b4-cgu.0.rcgu.o\": \n+error: failed to load bc of \"lto-duplicate-symbols2.lto_duplicate_symbols2.HASH-cgu.0.rcgu.o\": \n \n error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "bc02eb82dd94802d38b1f6f314a080206dec3422", "filename": "src/test/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -4,11 +4,11 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n    |                  --     ^^^^^^^^^^^^\n    |                  |\n-   |                  hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[e9f4]::foo), BrAnon(0)) T` captures the anonymous lifetime defined here\n+   |                  hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0)) T` captures the anonymous lifetime defined here\n    |\n-help: to declare that the `impl Trait` captures ReFree(DefId(0:8 ~ impl_trait_captures[e9f4]::foo), BrAnon(0)), you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[e9f4]::foo), BrAnon(0))` lifetime bound\n+help: to declare that the `impl Trait` captures ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0)), you can add an explicit `ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0))` lifetime bound\n    |\n-LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[e9f4]::foo), BrAnon(0)) {\n+LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> + ReFree(DefId(0:8 ~ impl_trait_captures[HASH]::foo), BrAnon(0)) {\n    |                                      ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n \n error: aborting due to previous error"}, {"sha": "07d194476a5db50a98e7333fa51eac7ca3d2f622", "filename": "src/test/ui/specialization/min_specialization/repeated_projection_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fmin_specialization%2Frepeated_projection_type.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,4 +1,4 @@\n-error: cannot specialize on `Binder(ProjectionPredicate(ProjectionTy { substs: [V], item_def_id: DefId(0:6 ~ repeated_projection_type[b09c]::Id::This) }, (I,)), [])`\n+error: cannot specialize on `Binder(ProjectionPredicate(ProjectionTy { substs: [V], item_def_id: DefId(0:6 ~ repeated_projection_type[HASH]::Id::This) }, (I,)), [])`\n   --> $DIR/repeated_projection_type.rs:19:1\n    |\n LL | / impl<I, V: Id<This = (I,)>> X for V {"}, {"sha": "e0e798dac40f14e63f6eb8dddaca6ea571f27b03", "filename": "src/test/ui/symbol-names/basic.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.legacy.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5basic4main17hd75b915511563828E)\n+error: symbol-name(_ZN5basic4main17h<SYMBOL_HASH>)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic::main::hd75b915511563828)\n+error: demangling(basic::main::h<SYMBOL_HASH>)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "a6fbe98e6ed4194d3e851e3f24fbf9776ca5ebaf", "filename": "src/test/ui/symbol-names/basic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.rs?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -9,8 +9,8 @@\n //[legacy]~^ ERROR symbol-name(_ZN5basic4main\n //[legacy]~| ERROR demangling(basic::main\n //[legacy]~| ERROR demangling-alt(basic::main)\n- //[v0]~^^^^ ERROR symbol-name(_RNvCsj6j3mjPNGKx_5basic4main)\n-    //[v0]~| ERROR demangling(basic[de7d5b6b69c71f37]::main)\n+ //[v0]~^^^^ ERROR symbol-name(_RNv\n+    //[v0]~| ERROR demangling(basic[\n     //[v0]~| ERROR demangling-alt(basic::main)\n #[rustc_def_path]\n //[legacy]~^ ERROR def-path(main)"}, {"sha": "27308fc5ec33ed4a0f9a2aa6fdd37151cee60e15", "filename": "src/test/ui/symbol-names/basic.v0.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fbasic.v0.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_RNvCsj6j3mjPNGKx_5basic4main)\n+error: symbol-name(_RNvCsCRATE_HASH_5basic4main)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(basic[de7d5b6b69c71f37]::main)\n+error: demangling(basic[HASH]::main)\n   --> $DIR/basic.rs:8:1\n    |\n LL | #[rustc_symbol_name]"}, {"sha": "d44c8f0abaec81d10b4c71b4db398b718b43782f", "filename": "src/test/ui/symbol-names/const-generics-demangling.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.rs?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,36 +1,37 @@\n // build-fail\n // compile-flags: -Z symbol-mangling-version=v0 --crate-name=c\n+// normalize-stderr-test: \"c\\[.*?\\]\" -> \"c[HASH]\"\n #![feature(rustc_attrs)]\n \n pub struct Unsigned<const F: u8>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMCsno73SFvQKx_1cINtB0_8UnsignedKhb_E)\n-//~| ERROR demangling(<c[464da6a86cb672f]::Unsigned<11u8>>)\n+//~^ ERROR symbol-name(_RMCs\n+//~| ERROR demangling(<c[\n //~| ERROR demangling-alt(<c::Unsigned<11>>)\n impl Unsigned<11> {}\n \n pub struct Signed<const F: i16>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs_Csno73SFvQKx_1cINtB2_6SignedKsn98_E)\n-//~| ERROR demangling(<c[464da6a86cb672f]::Signed<-152i16>>)\n+//~^ ERROR symbol-name(_RMs_Cs\n+//~| ERROR demangling(<c[\n //~| ERROR demangling-alt(<c::Signed<-152>>)\n impl Signed<-152> {}\n \n pub struct Bool<const F: bool>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs0_Csno73SFvQKx_1cINtB3_4BoolKb1_E)\n-//~| ERROR demangling(<c[464da6a86cb672f]::Bool<true>>)\n+//~^ ERROR symbol-name(_RMs0_Cs\n+//~| ERROR demangling(<c[\n //~| ERROR demangling-alt(<c::Bool<true>>)\n impl Bool<true> {}\n \n pub struct Char<const F: char>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs1_Csno73SFvQKx_1cINtB3_4CharKc2202_E)\n-//~| ERROR demangling(<c[464da6a86cb672f]::Char<'\u2202'>>)\n+//~^ ERROR symbol-name(_RMs1_Cs\n+//~| ERROR demangling(<c[\n //~| ERROR demangling-alt(<c::Char<'\u2202'>>)\n impl Char<'\u2202'> {}\n "}, {"sha": "1a8794e6d14b288937b92b68bb1a499f9d110a0a", "filename": "src/test/ui/symbol-names/const-generics-demangling.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-demangling.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,71 +1,71 @@\n-error: symbol-name(_RMCsno73SFvQKx_1cINtB0_8UnsignedKhb_E)\n-  --> $DIR/const-generics-demangling.rs:7:1\n+error: symbol-name(_RMCsCRATE_HASH_1cINtB0_8UnsignedKhb_E)\n+  --> $DIR/const-generics-demangling.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::Unsigned<11u8>>)\n-  --> $DIR/const-generics-demangling.rs:7:1\n+error: demangling(<c[HASH]::Unsigned<11u8>>)\n+  --> $DIR/const-generics-demangling.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::Unsigned<11>>)\n-  --> $DIR/const-generics-demangling.rs:7:1\n+  --> $DIR/const-generics-demangling.rs:8:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs_Csno73SFvQKx_1cINtB2_6SignedKsn98_E)\n-  --> $DIR/const-generics-demangling.rs:15:1\n+error: symbol-name(_RMs_CsCRATE_HASH_1cINtB2_6SignedKsn98_E)\n+  --> $DIR/const-generics-demangling.rs:16:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::Signed<-152i16>>)\n-  --> $DIR/const-generics-demangling.rs:15:1\n+error: demangling(<c[HASH]::Signed<-152i16>>)\n+  --> $DIR/const-generics-demangling.rs:16:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::Signed<-152>>)\n-  --> $DIR/const-generics-demangling.rs:15:1\n+  --> $DIR/const-generics-demangling.rs:16:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs0_Csno73SFvQKx_1cINtB3_4BoolKb1_E)\n-  --> $DIR/const-generics-demangling.rs:23:1\n+error: symbol-name(_RMs0_CsCRATE_HASH_1cINtB3_4BoolKb1_E)\n+  --> $DIR/const-generics-demangling.rs:24:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::Bool<true>>)\n-  --> $DIR/const-generics-demangling.rs:23:1\n+error: demangling(<c[HASH]::Bool<true>>)\n+  --> $DIR/const-generics-demangling.rs:24:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::Bool<true>>)\n-  --> $DIR/const-generics-demangling.rs:23:1\n+  --> $DIR/const-generics-demangling.rs:24:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs1_Csno73SFvQKx_1cINtB3_4CharKc2202_E)\n-  --> $DIR/const-generics-demangling.rs:31:1\n+error: symbol-name(_RMs1_CsCRATE_HASH_1cINtB3_4CharKc2202_E)\n+  --> $DIR/const-generics-demangling.rs:32:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::Char<'\u2202'>>)\n-  --> $DIR/const-generics-demangling.rs:31:1\n+error: demangling(<c[HASH]::Char<'\u2202'>>)\n+  --> $DIR/const-generics-demangling.rs:32:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::Char<'\u2202'>>)\n-  --> $DIR/const-generics-demangling.rs:31:1\n+  --> $DIR/const-generics-demangling.rs:32:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "300f6510380f416876bdf7fd907a2b7f26804bd4", "filename": "src/test/ui/symbol-names/const-generics-str-demangling.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.rs?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,43 +1,44 @@\n // build-fail\n // compile-flags: -Z symbol-mangling-version=v0 --crate-name=c\n+// normalize-stderr-test: \"c\\[.*?\\]\" -> \"c[HASH]\"\n #![feature(adt_const_params, rustc_attrs)]\n #![allow(incomplete_features)]\n \n pub struct Str<const S: &'static str>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMCsno73SFvQKx_1cINtB0_3StrKRe616263_E)\n-//~| ERROR demangling(<c[464da6a86cb672f]::Str<\"abc\">>)\n+//~^ ERROR symbol-name\n+//~| ERROR demangling\n //~| ERROR demangling-alt(<c::Str<\"abc\">>)\n impl Str<\"abc\"> {}\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs_Csno73SFvQKx_1cINtB2_3StrKRe27_E)\n-//~| ERROR demangling(<c[464da6a86cb672f]::Str<\"'\">>)\n+//~^ ERROR symbol-name\n+//~| ERROR demangling\n //~| ERROR demangling-alt(<c::Str<\"'\">>)\n impl Str<\"'\"> {}\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs0_Csno73SFvQKx_1cINtB3_3StrKRe090a_E)\n-//~| ERROR demangling(<c[464da6a86cb672f]::Str<\"\\t\\n\">>)\n+//~^ ERROR symbol-name\n+//~| ERROR demangling\n //~| ERROR demangling-alt(<c::Str<\"\\t\\n\">>)\n impl Str<\"\\t\\n\"> {}\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs1_Csno73SFvQKx_1cINtB3_3StrKRee28882c3bc_E)\n-//~| ERROR demangling(<c[464da6a86cb672f]::Str<\"\u2202\u00fc\">>)\n+//~^ ERROR symbol-name\n+//~| ERROR demangling\n //~| ERROR demangling-alt(<c::Str<\"\u2202\u00fc\">>)\n impl Str<\"\u2202\u00fc\"> {}\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs2_Csno73SFvQKx_1cINtB3_3StrKRee183a1e18390e183ade1839be18394e1839ae18390e183935fe18392e18394e1839be183a0e18398e18394e1839ae183985fe183a1e18390e18393e18398e1839ae18398_E)\n-//~| ERROR demangling(<c[464da6a86cb672f]::Str<\"\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\">>)\n+//~^ ERROR symbol-name\n+//~| ERROR demangling\n //~| ERROR demangling-alt(<c::Str<\"\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\">>)\n impl Str<\"\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\"> {}\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs3_Csno73SFvQKx_1cINtB3_3StrKRef09f908af09fa688f09fa686f09f90ae20c2a720f09f90b6f09f9192e29895f09f94a520c2a720f09fa7a1f09f929bf09f929af09f9299f09f929c_E)\n-//~| ERROR demangling(<c[464da6a86cb672f]::Str<\"\ud83d\udc0a\ud83e\udd88\ud83e\udd86\ud83d\udc2e \u00a7 \ud83d\udc36\ud83d\udc52\u2615\ud83d\udd25 \u00a7 \ud83e\udde1\ud83d\udc9b\ud83d\udc9a\ud83d\udc99\ud83d\udc9c\">>)\n+//~^ ERROR symbol-name\n+//~| ERROR demangling\n //~| ERROR demangling-alt(<c::Str<\"\ud83d\udc0a\ud83e\udd88\ud83e\udd86\ud83d\udc2e \u00a7 \ud83d\udc36\ud83d\udc52\u2615\ud83d\udd25 \u00a7 \ud83e\udde1\ud83d\udc9b\ud83d\udc9a\ud83d\udc99\ud83d\udc9c\">>)\n impl Str<\"\ud83d\udc0a\ud83e\udd88\ud83e\udd86\ud83d\udc2e \u00a7 \ud83d\udc36\ud83d\udc52\u2615\ud83d\udd25 \u00a7 \ud83e\udde1\ud83d\udc9b\ud83d\udc9a\ud83d\udc99\ud83d\udc9c\"> {}\n "}, {"sha": "fa69c2a3d72b3ede3419cb59981136a12a34d3b7", "filename": "src/test/ui/symbol-names/const-generics-str-demangling.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-str-demangling.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,107 +1,107 @@\n-error: symbol-name(_RMCsno73SFvQKx_1cINtB0_3StrKRe616263_E)\n-  --> $DIR/const-generics-str-demangling.rs:8:1\n+error: symbol-name(_RMCsCRATE_HASH_1cINtB0_3StrKRe616263_E)\n+  --> $DIR/const-generics-str-demangling.rs:9:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::Str<\"abc\">>)\n-  --> $DIR/const-generics-str-demangling.rs:8:1\n+error: demangling(<c[HASH]::Str<\"abc\">>)\n+  --> $DIR/const-generics-str-demangling.rs:9:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::Str<\"abc\">>)\n-  --> $DIR/const-generics-str-demangling.rs:8:1\n+  --> $DIR/const-generics-str-demangling.rs:9:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs_Csno73SFvQKx_1cINtB2_3StrKRe27_E)\n-  --> $DIR/const-generics-str-demangling.rs:14:1\n+error: symbol-name(_RMs_CsCRATE_HASH_1cINtB2_3StrKRe27_E)\n+  --> $DIR/const-generics-str-demangling.rs:15:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::Str<\"'\">>)\n-  --> $DIR/const-generics-str-demangling.rs:14:1\n+error: demangling(<c[HASH]::Str<\"'\">>)\n+  --> $DIR/const-generics-str-demangling.rs:15:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::Str<\"'\">>)\n-  --> $DIR/const-generics-str-demangling.rs:14:1\n+  --> $DIR/const-generics-str-demangling.rs:15:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs0_Csno73SFvQKx_1cINtB3_3StrKRe090a_E)\n-  --> $DIR/const-generics-str-demangling.rs:20:1\n+error: symbol-name(_RMs0_CsCRATE_HASH_1cINtB3_3StrKRe090a_E)\n+  --> $DIR/const-generics-str-demangling.rs:21:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::Str<\"\\t\\n\">>)\n-  --> $DIR/const-generics-str-demangling.rs:20:1\n+error: demangling(<c[HASH]::Str<\"\\t\\n\">>)\n+  --> $DIR/const-generics-str-demangling.rs:21:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::Str<\"\\t\\n\">>)\n-  --> $DIR/const-generics-str-demangling.rs:20:1\n+  --> $DIR/const-generics-str-demangling.rs:21:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs1_Csno73SFvQKx_1cINtB3_3StrKRee28882c3bc_E)\n-  --> $DIR/const-generics-str-demangling.rs:26:1\n+error: symbol-name(_RMs1_CsCRATE_HASH_1cINtB3_3StrKRee28882c3bc_E)\n+  --> $DIR/const-generics-str-demangling.rs:27:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::Str<\"\u2202\u00fc\">>)\n-  --> $DIR/const-generics-str-demangling.rs:26:1\n+error: demangling(<c[HASH]::Str<\"\u2202\u00fc\">>)\n+  --> $DIR/const-generics-str-demangling.rs:27:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::Str<\"\u2202\u00fc\">>)\n-  --> $DIR/const-generics-str-demangling.rs:26:1\n+  --> $DIR/const-generics-str-demangling.rs:27:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs2_Csno73SFvQKx_1cINtB3_3StrKRee183a1e18390e183ade1839be18394e1839ae18390e183935fe18392e18394e1839be183a0e18398e18394e1839ae183985fe183a1e18390e18393e18398e1839ae18398_E)\n-  --> $DIR/const-generics-str-demangling.rs:32:1\n+error: symbol-name(_RMs2_CsCRATE_HASH_1cINtB3_3StrKRee183a1e18390e183ade1839be18394e1839ae18390e183935fe18392e18394e1839be183a0e18398e18394e1839ae183985fe183a1e18390e18393e18398e1839ae18398_E)\n+  --> $DIR/const-generics-str-demangling.rs:33:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::Str<\"\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\">>)\n-  --> $DIR/const-generics-str-demangling.rs:32:1\n+error: demangling(<c[HASH]::Str<\"\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\">>)\n+  --> $DIR/const-generics-str-demangling.rs:33:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::Str<\"\u10e1\u10d0\u10ed\u10db\u10d4\u10da\u10d0\u10d3_\u10d2\u10d4\u10db\u10e0\u10d8\u10d4\u10da\u10d8_\u10e1\u10d0\u10d3\u10d8\u10da\u10d8\">>)\n-  --> $DIR/const-generics-str-demangling.rs:32:1\n+  --> $DIR/const-generics-str-demangling.rs:33:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs3_Csno73SFvQKx_1cINtB3_3StrKRef09f908af09fa688f09fa686f09f90ae20c2a720f09f90b6f09f9192e29895f09f94a520c2a720f09fa7a1f09f929bf09f929af09f9299f09f929c_E)\n-  --> $DIR/const-generics-str-demangling.rs:38:1\n+error: symbol-name(_RMs3_CsCRATE_HASH_1cINtB3_3StrKRef09f908af09fa688f09fa686f09f90ae20c2a720f09f90b6f09f9192e29895f09f94a520c2a720f09fa7a1f09f929bf09f929af09f9299f09f929c_E)\n+  --> $DIR/const-generics-str-demangling.rs:39:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::Str<\"\ud83d\udc0a\ud83e\udd88\ud83e\udd86\ud83d\udc2e \u00a7 \ud83d\udc36\ud83d\udc52\u2615\ud83d\udd25 \u00a7 \ud83e\udde1\ud83d\udc9b\ud83d\udc9a\ud83d\udc99\ud83d\udc9c\">>)\n-  --> $DIR/const-generics-str-demangling.rs:38:1\n+error: demangling(<c[HASH]::Str<\"\ud83d\udc0a\ud83e\udd88\ud83e\udd86\ud83d\udc2e \u00a7 \ud83d\udc36\ud83d\udc52\u2615\ud83d\udd25 \u00a7 \ud83e\udde1\ud83d\udc9b\ud83d\udc9a\ud83d\udc99\ud83d\udc9c\">>)\n+  --> $DIR/const-generics-str-demangling.rs:39:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<c::Str<\"\ud83d\udc0a\ud83e\udd88\ud83e\udd86\ud83d\udc2e \u00a7 \ud83d\udc36\ud83d\udc52\u2615\ud83d\udd25 \u00a7 \ud83e\udde1\ud83d\udc9b\ud83d\udc9a\ud83d\udc99\ud83d\udc9c\">>)\n-  --> $DIR/const-generics-str-demangling.rs:38:1\n+  --> $DIR/const-generics-str-demangling.rs:39:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "73de48fed6c60cbd50002af0e2d98682a72e88e4", "filename": "src/test/ui/symbol-names/const-generics-structural-demangling.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.rs?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -3,17 +3,17 @@\n \n // NOTE(eddyb) we need `core` for `core::option::Option`, normalize away its\n // disambiguator hash, which can/should change (including between stage{1,2}).\n-// normalize-stderr-test: \"Cs[0-9a-zA-Z]+_4core\" -> \"Cs$$HASH_4core\"\n-// normalize-stderr-test: \"core\\[[0-9a-f]+\\]\" -> \"core[$$HASH_HEX]\"\n+// normalize-stderr-test: \"core\\[[0-9a-f]+\\]\" -> \"core[HASH]\"\n+// normalize-stderr-test: \"c\\[[0-9a-f]+\\]\" -> \"c[HASH]\"\n \n #![feature(adt_const_params, decl_macro, rustc_attrs)]\n #![allow(incomplete_features)]\n \n pub struct RefByte<const RB: &'static u8>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMCsno73SFvQKx_1cINtB0_7RefByteKRh7b_E)\n-//~| ERROR demangling(<c[464da6a86cb672f]::RefByte<{&123u8}>>)\n+//~^ ERROR symbol-name\n+//~| ERROR demangling\n //~| ERROR demangling-alt(<c::RefByte<{&123}>>)\n impl RefByte<{&123}> {}\n \n@@ -22,24 +22,24 @@ impl RefByte<{&123}> {}\n pub struct RefZst<const RMZ: &'static [u8; 0]>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs_Csno73SFvQKx_1cINtB2_6RefZstKRAEE)\n-//~| ERROR demangling(<c[464da6a86cb672f]::RefZst<{&[]}>>)\n+//~^ ERROR symbol-name\n+//~| ERROR demangling\n //~| ERROR demangling-alt(<c::RefZst<{&[]}>>)\n impl RefZst<{&[]}> {}\n \n pub struct Array3Bytes<const A3B: [u8; 3]>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs0_Csno73SFvQKx_1cINtB3_11Array3BytesKAh1_h2_h3_EE)\n-//~| ERROR demangling(<c[464da6a86cb672f]::Array3Bytes<{[1u8, 2u8, 3u8]}>>)\n+//~^ ERROR symbol-name\n+//~| ERROR demangling\n //~| ERROR demangling-alt(<c::Array3Bytes<{[1, 2, 3]}>>)\n impl Array3Bytes<{[1, 2, 3]}> {}\n \n pub struct TupleByteBool<const TBB: (u8, bool)>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs1_Csno73SFvQKx_1cINtB3_13TupleByteBoolKTh1_b0_EE)\n-//~| ERROR demangling(<c[464da6a86cb672f]::TupleByteBool<{(1u8, false)}>>)\n+//~^ ERROR symbol-name\n+//~| ERROR demangling\n //~| ERROR demangling-alt(<c::TupleByteBool<{(1, false)}>>)\n impl TupleByteBool<{(1, false)}> {}\n \n@@ -48,16 +48,16 @@ pub struct OptionUsize<const OU: Option<usize>>;\n // HACK(eddyb) the full mangling is only in `.stderr` because we can normalize\n // the `core` disambiguator hash away there, but not here.\n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs2_Csno73SFvQKx_1cINtB3_11OptionUsizeKVNtINtNtCs\n-//~| ERROR demangling(<c[464da6a86cb672f]::OptionUsize<{core[\n+//~^ ERROR symbol-name\n+//~| ERROR demangling\n //~| ERROR demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::None}>>)\n impl OptionUsize<{None}> {}\n \n // HACK(eddyb) the full mangling is only in `.stderr` because we can normalize\n // the `core` disambiguator hash away there, but not here.\n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs3_Csno73SFvQKx_1cINtB3_11OptionUsizeKVNtINtNtCs\n-//~| ERROR demangling(<c[464da6a86cb672f]::OptionUsize<{core[\n+//~^ ERROR symbol-name\n+//~| ERROR demangling\n //~| ERROR demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::Some(0)}>>)\n impl OptionUsize<{Some(0)}> {}\n \n@@ -70,8 +70,8 @@ pub struct Foo {\n pub struct Foo_<const F: Foo>;\n \n #[rustc_symbol_name]\n-//~^ ERROR symbol-name(_RMs4_Csno73SFvQKx_1cINtB3_4Foo_KVNtB3_3FooS1sRe616263_2chc78_5sliceRAh1_h2_h3_EEE)\n-//~| ERROR demangling(<c[464da6a86cb672f]::Foo_<{c[464da6a86cb672f]::Foo { s: \"abc\", ch: 'x', slice: &[1u8, 2u8, 3u8] }}>>)\n+//~^ ERROR symbol-name\n+//~| ERROR demangling\n //~| ERROR demangling-alt(<c::Foo_<{c::Foo { s: \"abc\", ch: 'x', slice: &[1, 2, 3] }}>>)\n impl Foo_<{Foo { s: \"abc\", ch: 'x', slice: &[1, 2, 3] }}> {}\n \n@@ -86,8 +86,8 @@ macro duplicate_field_name_test($x:ident) {\n     pub struct Bar_<const B: Bar>;\n \n     #[rustc_symbol_name]\n-    //~^ ERROR symbol-name(_RMs9_Csno73SFvQKx_1cINtB3_4Bar_KVNtB3_3BarS1xh7b_s_1xt1000_EE)\n-    //~| ERROR demangling(<c[464da6a86cb672f]::Bar_<{c[464da6a86cb672f]::Bar { x: 123u8, x: 4096u16 }}>>)\n+    //~^ ERROR symbol-name\n+    //~| ERROR demangling\n     //~| ERROR demangling-alt(<c::Bar_<{c::Bar { x: 123, x: 4096 }}>>)\n     impl Bar_<{Bar { $x: 123, x: 4096 }}> {}\n }"}, {"sha": "f38342427b18c61c90f7f409a68be8be7e801907", "filename": "src/test/ui/symbol-names/const-generics-structural-demangling.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fconst-generics-structural-demangling.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_RMCsno73SFvQKx_1cINtB0_7RefByteKRh7b_E)\n+error: symbol-name(_RMCsCRATE_HASH_1cINtB0_7RefByteKRh7b_E)\n   --> $DIR/const-generics-structural-demangling.rs:14:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::RefByte<{&123u8}>>)\n+error: demangling(<c[HASH]::RefByte<{&123u8}>>)\n   --> $DIR/const-generics-structural-demangling.rs:14:1\n    |\n LL | #[rustc_symbol_name]\n@@ -16,13 +16,13 @@ error: demangling-alt(<c::RefByte<{&123}>>)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs_Csno73SFvQKx_1cINtB2_6RefZstKRAEE)\n+error: symbol-name(_RMs_CsCRATE_HASH_1cINtB2_6RefZstKRAEE)\n   --> $DIR/const-generics-structural-demangling.rs:24:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::RefZst<{&[]}>>)\n+error: demangling(<c[HASH]::RefZst<{&[]}>>)\n   --> $DIR/const-generics-structural-demangling.rs:24:1\n    |\n LL | #[rustc_symbol_name]\n@@ -34,13 +34,13 @@ error: demangling-alt(<c::RefZst<{&[]}>>)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs0_Csno73SFvQKx_1cINtB3_11Array3BytesKAh1_h2_h3_EE)\n+error: symbol-name(_RMs0_CsCRATE_HASH_1cINtB3_11Array3BytesKAh1_h2_h3_EE)\n   --> $DIR/const-generics-structural-demangling.rs:32:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::Array3Bytes<{[1u8, 2u8, 3u8]}>>)\n+error: demangling(<c[HASH]::Array3Bytes<{[1u8, 2u8, 3u8]}>>)\n   --> $DIR/const-generics-structural-demangling.rs:32:1\n    |\n LL | #[rustc_symbol_name]\n@@ -52,13 +52,13 @@ error: demangling-alt(<c::Array3Bytes<{[1, 2, 3]}>>)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs1_Csno73SFvQKx_1cINtB3_13TupleByteBoolKTh1_b0_EE)\n+error: symbol-name(_RMs1_CsCRATE_HASH_1cINtB3_13TupleByteBoolKTh1_b0_EE)\n   --> $DIR/const-generics-structural-demangling.rs:40:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::TupleByteBool<{(1u8, false)}>>)\n+error: demangling(<c[HASH]::TupleByteBool<{(1u8, false)}>>)\n   --> $DIR/const-generics-structural-demangling.rs:40:1\n    |\n LL | #[rustc_symbol_name]\n@@ -70,13 +70,13 @@ error: demangling-alt(<c::TupleByteBool<{(1, false)}>>)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs2_Csno73SFvQKx_1cINtB3_11OptionUsizeKVNtINtNtCs$HASH_4core6option6OptionjE4NoneUE)\n+error: symbol-name(_RMs2_CsCRATE_HASH_1cINtB3_11OptionUsizeKVNtINtNtCsCRATE_HASH_4core6option6OptionjE4NoneUE)\n   --> $DIR/const-generics-structural-demangling.rs:50:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::OptionUsize<{core[$HASH_HEX]::option::Option::<usize>::None}>>)\n+error: demangling(<c[HASH]::OptionUsize<{core[HASH]::option::Option::<usize>::None}>>)\n   --> $DIR/const-generics-structural-demangling.rs:50:1\n    |\n LL | #[rustc_symbol_name]\n@@ -88,13 +88,13 @@ error: demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::None}>>)\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs3_Csno73SFvQKx_1cINtB3_11OptionUsizeKVNtINtNtCs$HASH_4core6option6OptionjE4SomeTj0_EE)\n+error: symbol-name(_RMs3_CsCRATE_HASH_1cINtB3_11OptionUsizeKVNtINtNtCsCRATE_HASH_4core6option6OptionjE4SomeTj0_EE)\n   --> $DIR/const-generics-structural-demangling.rs:58:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::OptionUsize<{core[$HASH_HEX]::option::Option::<usize>::Some(0usize)}>>)\n+error: demangling(<c[HASH]::OptionUsize<{core[HASH]::option::Option::<usize>::Some(0usize)}>>)\n   --> $DIR/const-generics-structural-demangling.rs:58:1\n    |\n LL | #[rustc_symbol_name]\n@@ -106,13 +106,13 @@ error: demangling-alt(<c::OptionUsize<{core::option::Option::<usize>::Some(0)}>>\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs4_Csno73SFvQKx_1cINtB3_4Foo_KVNtB3_3FooS1sRe616263_2chc78_5sliceRAh1_h2_h3_EEE)\n+error: symbol-name(_RMs4_CsCRATE_HASH_1cINtB3_4Foo_KVNtB3_3FooS1sRe616263_2chc78_5sliceRAh1_h2_h3_EEE)\n   --> $DIR/const-generics-structural-demangling.rs:72:1\n    |\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<c[464da6a86cb672f]::Foo_<{c[464da6a86cb672f]::Foo { s: \"abc\", ch: 'x', slice: &[1u8, 2u8, 3u8] }}>>)\n+error: demangling(<c[HASH]::Foo_<{c[HASH]::Foo { s: \"abc\", ch: 'x', slice: &[1u8, 2u8, 3u8] }}>>)\n   --> $DIR/const-generics-structural-demangling.rs:72:1\n    |\n LL | #[rustc_symbol_name]\n@@ -124,7 +124,7 @@ error: demangling-alt(<c::Foo_<{c::Foo { s: \"abc\", ch: 'x', slice: &[1, 2, 3] }}\n LL | #[rustc_symbol_name]\n    | ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RMs9_Csno73SFvQKx_1cINtB3_4Bar_KVNtB3_3BarS1xh7b_s_1xt1000_EE)\n+error: symbol-name(_RMs9_CsCRATE_HASH_1cINtB3_4Bar_KVNtB3_3BarS1xh7b_s_1xt1000_EE)\n   --> $DIR/const-generics-structural-demangling.rs:88:5\n    |\n LL |     #[rustc_symbol_name]\n@@ -135,7 +135,7 @@ LL | duplicate_field_name_test!(x);\n    |\n    = note: this error originates in the macro `duplicate_field_name_test` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: demangling(<c[464da6a86cb672f]::Bar_<{c[464da6a86cb672f]::Bar { x: 123u8, x: 4096u16 }}>>)\n+error: demangling(<c[HASH]::Bar_<{c[HASH]::Bar { x: 123u8, x: 4096u16 }}>>)\n   --> $DIR/const-generics-structural-demangling.rs:88:5\n    |\n LL |     #[rustc_symbol_name]"}, {"sha": "b17a073ee496a5535244c4d19f6d961d52297fb8", "filename": "src/test/ui/symbol-names/impl1.legacy.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.legacy.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN5impl13foo3Foo3bar17<SYMBOL_HASH>)\n+error: symbol-name(_ZN5impl13foo3Foo3bar17h<SYMBOL_HASH>)\n   --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(impl1::foo::Foo::bar::<SYMBOL_HASH>)\n+error: demangling(impl1::foo::Foo::bar::h<SYMBOL_HASH>)\n   --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -22,13 +22,13 @@ error: def-path(foo::Foo::bar)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17<SYMBOL_HASH>)\n+error: symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz17h<SYMBOL_HASH>)\n   --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(impl1::bar::<impl impl1::foo::Foo>::baz::<SYMBOL_HASH>)\n+error: demangling(impl1::bar::<impl impl1::foo::Foo>::baz::h<SYMBOL_HASH>)\n   --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -46,13 +46,13 @@ error: def-path(bar::<impl foo::Foo>::baz)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$3$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17<SYMBOL_HASH>)\n+error: symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$3$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method17h<SYMBOL_HASH>)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method::<SYMBOL_HASH>)\n+error: demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method::h<SYMBOL_HASH>)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]"}, {"sha": "f20cb1c01fd7350df3a39fa50d2f3c4fe99ca2d1", "filename": "src/test/ui/symbol-names/impl1.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.rs?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -15,8 +15,8 @@ mod foo {\n         //[legacy]~^ ERROR symbol-name(_ZN5impl13foo3Foo3bar\n         //[legacy]~| ERROR demangling(impl1::foo::Foo::bar\n         //[legacy]~| ERROR demangling-alt(impl1::foo::Foo::bar)\n-         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs2qSCrjELJET_5impl13fooNtB2_3Foo3bar)\n-            //[v0]~| ERROR demangling(<impl1[1c5860ab79c9e305]::foo::Foo>::bar)\n+         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs\n+            //[v0]~| ERROR demangling(<impl1[\n             //[v0]~| ERROR demangling-alt(<impl1::foo::Foo>::bar)\n         #[rustc_def_path]\n         //[legacy]~^ ERROR def-path(foo::Foo::bar)\n@@ -33,8 +33,8 @@ mod bar {\n         //[legacy]~^ ERROR symbol-name(_ZN5impl13bar33_$LT$impl$u20$impl1..foo..Foo$GT$3baz\n         //[legacy]~| ERROR demangling(impl1::bar::<impl impl1::foo::Foo>::baz\n         //[legacy]~| ERROR demangling-alt(impl1::bar::<impl impl1::foo::Foo>::baz)\n-         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs2qSCrjELJET_5impl13barNtNtB4_3foo3Foo3baz)\n-            //[v0]~| ERROR demangling(<impl1[1c5860ab79c9e305]::foo::Foo>::baz)\n+         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs\n+            //[v0]~| ERROR demangling(<impl1[\n             //[v0]~| ERROR demangling-alt(<impl1::foo::Foo>::baz)\n         #[rustc_def_path]\n         //[legacy]~^ ERROR def-path(bar::<impl foo::Foo>::baz)\n@@ -63,8 +63,8 @@ fn main() {\n             //[legacy]~^ ERROR symbol-name(_ZN209_$LT$$u5b$$RF$dyn$u20$impl1..Foo$u2b$Assoc$u20$$u3d$$u20$extern$u20$$u22$C$u22$$u20$fn$LP$$RF$u8$C$$u20$...$RP$$u2b$impl1..AutoTrait$u3b$$u20$3$u5d$$u20$as$u20$impl1..main..$u7b$$u7b$closure$u7d$$u7d$..Bar$GT$6method\n             //[legacy]~| ERROR demangling(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method\n             //[legacy]~| ERROR demangling-alt(<[&dyn impl1::Foo+Assoc = extern \"C\" fn(&u8, ::.)+impl1::AutoTrait; 3] as impl1::main::{{closure}}::Bar>::method)\n-             //[v0]~^^^^ ERROR symbol-name(_RNvXNCNvCs2qSCrjELJET_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n-                //[v0]~| ERROR demangling(<[&dyn impl1[1c5860ab79c9e305]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[1c5860ab79c9e305]::AutoTrait; 3usize] as impl1[1c5860ab79c9e305]::main::{closure#1}::Bar>::method)\n+             //[v0]~^^^^ ERROR symbol-name(_RNvXNCNvCs\n+                //[v0]~| ERROR demangling(<[&dyn\n                 //[v0]~| ERROR demangling-alt(<[&dyn impl1::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1::AutoTrait; 3] as impl1::main::{closure#1}::Bar>::method)\n             #[rustc_def_path]\n             //[legacy]~^ ERROR def-path(<[&dyn Foo<Assoc = for<'r> extern \"C\" fn(&'r u8, ...)> + AutoTrait; 3] as main::{closure#1}::Bar>::method)"}, {"sha": "c9a448f82654d7e21546ccbbfd38f625ed63c12b", "filename": "src/test/ui/symbol-names/impl1.v0.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fimpl1.v0.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_RNvMNtCs2qSCrjELJET_5impl13fooNtB2_3Foo3bar)\n+error: symbol-name(_RNvMNtCsCRATE_HASH_5impl13fooNtB2_3Foo3bar)\n   --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<impl1[1c5860ab79c9e305]::foo::Foo>::bar)\n+error: demangling(<impl1[HASH]::foo::Foo>::bar)\n   --> $DIR/impl1.rs:14:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -22,13 +22,13 @@ error: def-path(foo::Foo::bar)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RNvMNtCs2qSCrjELJET_5impl13barNtNtB4_3foo3Foo3baz)\n+error: symbol-name(_RNvMNtCsCRATE_HASH_5impl13barNtNtB4_3foo3Foo3baz)\n   --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<impl1[1c5860ab79c9e305]::foo::Foo>::baz)\n+error: demangling(<impl1[HASH]::foo::Foo>::baz)\n   --> $DIR/impl1.rs:32:9\n    |\n LL |         #[rustc_symbol_name]\n@@ -46,13 +46,13 @@ error: def-path(bar::<impl foo::Foo>::baz)\n LL |         #[rustc_def_path]\n    |         ^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RNvXNCNvCs2qSCrjELJET_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n+error: symbol-name(_RNvXNCNvCsCRATE_HASH_5impl14mains_0ARDNtB6_3Foop5AssocFG_KCRL0_hvEuNtB6_9AutoTraitEL_j3_NtB2_3Bar6method)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]\n    |             ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<[&dyn impl1[1c5860ab79c9e305]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[1c5860ab79c9e305]::AutoTrait; 3usize] as impl1[1c5860ab79c9e305]::main::{closure#1}::Bar>::method)\n+error: demangling(<[&dyn impl1[HASH]::Foo<Assoc = for<'a> extern \"C\" fn(&'a u8, ...)> + impl1[HASH]::AutoTrait; 3usize] as impl1[HASH]::main::{closure#1}::Bar>::method)\n   --> $DIR/impl1.rs:62:13\n    |\n LL |             #[rustc_symbol_name]"}, {"sha": "46cb84e57bf1c72751b2a979aeca0a6d770ee8e5", "filename": "src/test/ui/symbol-names/issue-60925.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.legacy.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h18eaa05e22e59176E)\n+error: symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo17h<SYMBOL_HASH>)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h18eaa05e22e59176)\n+error: demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo::h<SYMBOL_HASH>)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "57114ca1f15822308d5814de83361a9589f4a942", "filename": "src/test/ui/symbol-names/issue-60925.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.rs?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -22,8 +22,8 @@ mod foo {\n         //[legacy]~^ ERROR symbol-name(_ZN11issue_609253foo37Foo$LT$issue_60925..llv$u6d$..Foo$GT$3foo\n         //[legacy]~| ERROR demangling(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo\n         //[legacy]~| ERROR demangling-alt(issue_60925::foo::Foo<issue_60925::llvm::Foo>::foo)\n-         //[v0]~^^^^ ERROR symbol-name(_RNvMNtCs8dUWfuENynB_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n-            //[v0]~| ERROR demangling(<issue_60925[5fcbb46c6fac4139]::foo::Foo<issue_60925[5fcbb46c6fac4139]::llvm::Foo>>::foo)\n+         //[v0]~^^^^ ERROR symbol-name\n+            //[v0]~| ERROR demangling\n             //[v0]~| ERROR demangling-alt(<issue_60925::foo::Foo<issue_60925::llvm::Foo>>::foo)\n         pub(crate) fn foo() {\n             for _ in 0..0 {"}, {"sha": "dd95612d8c830494dcc3395e2c9e7a235b0a00b4", "filename": "src/test/ui/symbol-names/issue-60925.v0.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-60925.v0.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_RNvMNtCs8dUWfuENynB_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n+error: symbol-name(_RNvMNtCsCRATE_HASH_11issue_609253fooINtB2_3FooNtNtB4_4llvm3FooE3foo)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<issue_60925[5fcbb46c6fac4139]::foo::Foo<issue_60925[5fcbb46c6fac4139]::llvm::Foo>>::foo)\n+error: demangling(<issue_60925[HASH]::foo::Foo<issue_60925[HASH]::llvm::Foo>>::foo)\n   --> $DIR/issue-60925.rs:21:9\n    |\n LL |         #[rustc_symbol_name]"}, {"sha": "74e481badb0650982b322beea461adfa09a5f913", "filename": "src/test/ui/symbol-names/issue-75326.legacy.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.legacy.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_ZN72_$LT$issue_75326..Foo$LT$I$C$E$GT$$u20$as$u20$issue_75326..Iterator2$GT$4next17SYMBOL_HASH)\n+error: symbol-name(_ZN72_$LT$issue_75326..Foo$LT$I$C$E$GT$$u20$as$u20$issue_75326..Iterator2$GT$4next17h<SYMBOL_HASH>)\n   --> $DIR/issue-75326.rs:41:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next::SYMBOL_HASH)\n+error: demangling(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next::h<SYMBOL_HASH>)\n   --> $DIR/issue-75326.rs:41:5\n    |\n LL |     #[rustc_symbol_name]"}, {"sha": "d1bc152af5c609c6c672efcbb00ccd2c2d8efa35", "filename": "src/test/ui/symbol-names/issue-75326.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.rs?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -42,8 +42,8 @@ where\n     //[legacy]~^ ERROR symbol-name(_ZN72_$LT$issue_75326..Foo$LT$I$C$E$GT$$u20$as$u20$issue_75326..Iterator2$GT$4next\n     //[legacy]~| ERROR demangling(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next\n     //[legacy]~| ERROR demangling-alt(<issue_75326::Foo<I,E> as issue_75326::Iterator2>::next)\n-    //[v0]~^^^^  ERROR symbol-name(_RNvXINICsiMBouZZ1iuD_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n-    //[v0]~|     ERROR demangling(<issue_75326[dac9b7624645f95d]::Foo<_, _> as issue_75326[dac9b7624645f95d]::Iterator2>::next)\n+    //[v0]~^^^^  ERROR symbol-name\n+    //[v0]~|     ERROR demangling\n     //[v0]~|     ERROR demangling-alt(<issue_75326::Foo<_, _> as issue_75326::Iterator2>::next)\n     fn next(&mut self) -> Option<Self::Item> {\n         self.find(|_| true)"}, {"sha": "c691b11a28f144b86fc9d0ed0971a29ebee4991f", "filename": "src/test/ui/symbol-names/issue-75326.v0.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Fissue-75326.v0.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,10 +1,10 @@\n-error: symbol-name(_RNvXINICsiMBouZZ1iuD_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n+error: symbol-name(_RNvXINICsCRATE_HASH_11issue_75326s_0pppEINtB5_3FooppENtB5_9Iterator24nextB5_)\n   --> $DIR/issue-75326.rs:41:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<issue_75326[dac9b7624645f95d]::Foo<_, _> as issue_75326[dac9b7624645f95d]::Iterator2>::next)\n+error: demangling(<issue_75326[HASH]::Foo<_, _> as issue_75326[HASH]::Iterator2>::next)\n   --> $DIR/issue-75326.rs:41:5\n    |\n LL |     #[rustc_symbol_name]"}, {"sha": "502afebcb5ae8ea69c252312fb8672e5cb7b2394", "filename": "src/test/ui/symbol-names/trait-objects.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.rs?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -3,7 +3,6 @@\n // build-fail\n // revisions: v0\n //[v0]compile-flags: -Z symbol-mangling-version=v0\n-//[v0]normalize-stderr-test: \"Cs.*?_\" -> \"CRATE_HASH\"\n //[v0]normalize-stderr-test: \"core\\[.*?\\]\" -> \"core[HASH]\"\n \n #![feature(rustc_attrs)]"}, {"sha": "8d55f42a419f28d4618325e2ed72d36f714b0dab", "filename": "src/test/ui/symbol-names/trait-objects.v0.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsymbol-names%2Ftrait-objects.v0.stderr?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,53 +1,53 @@\n-error: symbol-name(_RNvXCRATE_HASH13trait_objectsRDG_INtNtNtCRATE_HASH4core3ops8function5FnMutTRL0_hEEp6OutputuEL_NtB2_3Bar6method)\n-  --> $DIR/trait-objects.rs:16:5\n+error: symbol-name(_RNvXCsCRATE_HASH_13trait_objectsRDG_INtNtNtCsCRATE_HASH_4core3ops8function5FnMutTRL0_hEEp6OutputuEL_NtB2_3Bar6method)\n+  --> $DIR/trait-objects.rs:15:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects[3f8b57f879016e18]::Bar>::method)\n-  --> $DIR/trait-objects.rs:16:5\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects[HASH]::Bar>::method)\n+  --> $DIR/trait-objects.rs:15:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<&dyn for<'a> core::ops::function::FnMut<(&'a u8,), Output = ()> as trait_objects::Bar>::method)\n-  --> $DIR/trait-objects.rs:16:5\n+  --> $DIR/trait-objects.rs:15:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RNvXs_CRATE_HASH13trait_objectsRDG_INtNtNtCRATE_HASH4core3ops8function5FnMutTRL0_hEEp6OutputuNtNtBI_6marker4SendEL_NtB4_3Foo6method)\n-  --> $DIR/trait-objects.rs:28:5\n+error: symbol-name(_RNvXs_CsCRATE_HASH_13trait_objectsRDG_INtNtNtCsCRATE_HASH_4core3ops8function5FnMutTRL0_hEEp6OutputuNtNtBI_6marker4SendEL_NtB4_3Foo6method)\n+  --> $DIR/trait-objects.rs:27:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[3f8b57f879016e18]::Foo>::method)\n-  --> $DIR/trait-objects.rs:28:5\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[HASH]::Foo>::method)\n+  --> $DIR/trait-objects.rs:27:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<&dyn for<'a> core::ops::function::FnMut<(&'a u8,), Output = ()> + core::marker::Send as trait_objects::Foo>::method)\n-  --> $DIR/trait-objects.rs:28:5\n+  --> $DIR/trait-objects.rs:27:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: symbol-name(_RNvXs0_CRATE_HASH13trait_objectsRDG_INtNtNtCRATE_HASH4core3ops8function5FnMutTRL0_hEEp6OutputuNtNtBJ_6marker4SendEL_NtB5_3Baz6method)\n-  --> $DIR/trait-objects.rs:40:5\n+error: symbol-name(_RNvXs0_CsCRATE_HASH_13trait_objectsRDG_INtNtNtCsCRATE_HASH_4core3ops8function5FnMutTRL0_hEEp6OutputuNtNtBJ_6marker4SendEL_NtB5_3Baz6method)\n+  --> $DIR/trait-objects.rs:39:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n-error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[3f8b57f879016e18]::Baz>::method)\n-  --> $DIR/trait-objects.rs:40:5\n+error: demangling(<&dyn for<'a> core[HASH]::ops::function::FnMut<(&'a u8,), Output = ()> + core[HASH]::marker::Send as trait_objects[HASH]::Baz>::method)\n+  --> $DIR/trait-objects.rs:39:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: demangling-alt(<&dyn for<'a> core::ops::function::FnMut<(&'a u8,), Output = ()> + core::marker::Send as trait_objects::Baz>::method)\n-  --> $DIR/trait-objects.rs:40:5\n+  --> $DIR/trait-objects.rs:39:5\n    |\n LL |     #[rustc_symbol_name]\n    |     ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a732eb68a2bca3e7fcd5add1671a9a724b7dece8", "filename": "src/test/ui/thir-tree.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fthir-tree.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftest%2Fui%2Fthir-tree.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fthir-tree.stdout?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -1,4 +1,4 @@\n-DefId(0:3 ~ thir_tree[348d]::main):\n+DefId(0:3 ~ thir_tree[HASH]::main):\n Thir {\n     arms: [],\n     exprs: [\n@@ -30,7 +30,7 @@ Thir {\n                 region_scope: Node(2),\n                 lint_level: Explicit(\n                     HirId {\n-                        owner: DefId(0:3 ~ thir_tree[348d]::main),\n+                        owner: DefId(0:3 ~ thir_tree[HASH]::main),\n                         local_id: 2,\n                     },\n                 ),"}, {"sha": "ae97df583a36d901e8518ef1b61a29f7a2f9224c", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d7dfba350f13051fd7a409282fcb36094c2a8e9/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=7d7dfba350f13051fd7a409282fcb36094c2a8e9", "patch": "@@ -3501,6 +3501,59 @@ impl<'test> TestCx<'test> {\n         normalized =\n             Regex::new(\"\\\\s*//(\\\\[.*\\\\])?~.*\").unwrap().replace_all(&normalized, \"\").into_owned();\n \n+        // This code normalizes various hashes in both\n+        // v0 and legacy symbol names that are emitted in\n+        // the ui and mir-opt tests.\n+        //\n+        // Some tests still require normalization with headers.\n+        const DEFID_HASH_REGEX: &str = r\"\\[[0-9a-z]{4}\\]\";\n+        const DEFID_HASH_PLACEHOLDER: &str = r\"[HASH]\";\n+        const V0_DEMANGLING_HASH_REGEX: &str = r\"\\[[0-9a-z]+\\]\";\n+        const V0_DEMANGLING_HASH_PLACEHOLDER: &str = r\"[HASH]\";\n+        const V0_CRATE_HASH_PREFIX_REGEX: &str = r\"_R.*?Cs[0-9a-zA-Z]+_\";\n+        const V0_CRATE_HASH_REGEX: &str = r\"Cs[0-9a-zA-Z]+_\";\n+        const V0_CRATE_HASH_PLACEHOLDER: &str = r\"CsCRATE_HASH_\";\n+        const LEGACY_SYMBOL_HASH_REGEX: &str = r\"h[\\w]{16}E?\\)\";\n+        const LEGACY_SYMBOL_HASH_PLACEHOLDER: &str = r\"h<SYMBOL_HASH>)\";\n+        let test_name = self\n+            .output_testname_unique()\n+            .into_os_string()\n+            .into_string()\n+            .unwrap()\n+            .split('.')\n+            .next()\n+            .unwrap()\n+            .replace(\"-\", \"_\");\n+        // Normalize `DefId` hashes\n+        let defid_regex = format!(\"{}{}\", test_name, DEFID_HASH_REGEX);\n+        let defid_placeholder = format!(\"{}{}\", test_name, DEFID_HASH_PLACEHOLDER);\n+        normalized = Regex::new(&defid_regex)\n+            .unwrap()\n+            .replace_all(&normalized, defid_placeholder)\n+            .into_owned();\n+        // Normalize v0 demangling hashes\n+        let demangling_regex = format!(\"{}{}\", test_name, V0_DEMANGLING_HASH_REGEX);\n+        let demangling_placeholder = format!(\"{}{}\", test_name, V0_DEMANGLING_HASH_PLACEHOLDER);\n+        normalized = Regex::new(&demangling_regex)\n+            .unwrap()\n+            .replace_all(&normalized, demangling_placeholder)\n+            .into_owned();\n+        // Normalize v0 crate hashes (see RFC 2603)\n+        let symbol_mangle_prefix_re = Regex::new(V0_CRATE_HASH_PREFIX_REGEX).unwrap();\n+        if symbol_mangle_prefix_re.is_match(&normalized) {\n+            // Normalize crate hash\n+            normalized = Regex::new(V0_CRATE_HASH_REGEX)\n+                .unwrap()\n+                .replace_all(&normalized, V0_CRATE_HASH_PLACEHOLDER)\n+                .into_owned();\n+        }\n+        // Normalize legacy mangled symbols\n+        normalized = Regex::new(LEGACY_SYMBOL_HASH_REGEX)\n+            .unwrap()\n+            .replace_all(&normalized, LEGACY_SYMBOL_HASH_PLACEHOLDER)\n+            .into_owned();\n+\n+        // Custom normalization rules\n         for rule in custom_rules {\n             let re = Regex::new(&rule.0).expect(\"bad regex in custom normalization rule\");\n             normalized = re.replace_all(&normalized, &rule.1[..]).into_owned();"}]}