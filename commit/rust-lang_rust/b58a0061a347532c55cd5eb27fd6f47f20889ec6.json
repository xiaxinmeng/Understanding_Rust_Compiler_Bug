{"sha": "b58a0061a347532c55cd5eb27fd6f47f20889ec6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1OGEwMDYxYTM0NzUzMmM1NWNkNWViMjdmZDZmNDdmMjA4ODllYzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-08T08:39:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-03-08T08:39:13Z"}, "message": "Auto merge of #58903 - estebank:forgetful-delims, r=petrochenkov\n\nAlways emit unclosed delimiter diagnostics\n\nFix #58886.", "tree": {"sha": "09b21029e3a3e07fcab1a73aa9a3bc0e4483c677", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09b21029e3a3e07fcab1a73aa9a3bc0e4483c677"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b58a0061a347532c55cd5eb27fd6f47f20889ec6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b58a0061a347532c55cd5eb27fd6f47f20889ec6", "html_url": "https://github.com/rust-lang/rust/commit/b58a0061a347532c55cd5eb27fd6f47f20889ec6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b58a0061a347532c55cd5eb27fd6f47f20889ec6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0547ceb200f0385ba437e1808b468ec81e683c64", "url": "https://api.github.com/repos/rust-lang/rust/commits/0547ceb200f0385ba437e1808b468ec81e683c64", "html_url": "https://github.com/rust-lang/rust/commit/0547ceb200f0385ba437e1808b468ec81e683c64"}, {"sha": "551ea65c87ef567cb22856a769df2a75f2cbb235", "url": "https://api.github.com/repos/rust-lang/rust/commits/551ea65c87ef567cb22856a769df2a75f2cbb235", "html_url": "https://github.com/rust-lang/rust/commit/551ea65c87ef567cb22856a769df2a75f2cbb235"}], "stats": {"total": 251, "additions": 181, "deletions": 70}, "files": [{"sha": "67a249e605ecc8e4ddb002df2ed1edbd8cfd7930", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -439,8 +439,8 @@ impl cstore::CStore {\n \n         let source_file = sess.parse_sess.source_map().new_source_file(source_name, def.body);\n         let local_span = Span::new(source_file.start_pos, source_file.end_pos, NO_EXPANSION);\n-        let (body, errors) = source_file_to_stream(&sess.parse_sess, source_file, None);\n-        emit_unclosed_delims(&errors, &sess.diagnostic());\n+        let (body, mut errors) = source_file_to_stream(&sess.parse_sess, source_file, None);\n+        emit_unclosed_delims(&mut errors, &sess.diagnostic());\n \n         // Mark the attrs as used\n         let attrs = data.get_item_attrs(id.index, sess);"}, {"sha": "1a419e7fadaa0228e884595b824cc5e32f328ad7", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -761,7 +761,7 @@ pub fn parse(\n         else if bb_items.is_empty() && next_items.is_empty() {\n             return Failure(\n                 parser.span,\n-                parser.token,\n+                parser.token.clone(),\n                 \"no rules expected this token in macro call\",\n             );\n         }"}, {"sha": "6583458b4469494c55ff2a653d0493de1cbc8b6d", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -6,6 +6,7 @@ use crate::source_map::{SourceMap, FilePathMapping};\n use crate::feature_gate::UnstableFeatures;\n use crate::parse::parser::Parser;\n use crate::symbol::Symbol;\n+use crate::syntax::parse::parser::emit_unclosed_delims;\n use crate::tokenstream::{TokenStream, TokenTree};\n use crate::diagnostics::plugin::ErrorMap;\n use crate::print::pprust::token_to_string;\n@@ -141,8 +142,14 @@ pub fn parse_stream_from_source_str(\n     source: String,\n     sess: &ParseSess,\n     override_span: Option<Span>,\n-) -> (TokenStream, Vec<lexer::UnmatchedBrace>) {\n-    source_file_to_stream(sess, sess.source_map().new_source_file(name, source), override_span)\n+) -> TokenStream {\n+    let (stream, mut errors) = source_file_to_stream(\n+        sess,\n+        sess.source_map().new_source_file(name, source),\n+        override_span,\n+    );\n+    emit_unclosed_delims(&mut errors, &sess.span_diagnostic);\n+    stream\n }\n \n /// Creates a new parser from a source string."}, {"sha": "7e63da27049967cd931de9850f4302d5a3e30e02", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 34, "deletions": 9, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -46,7 +46,7 @@ use crate::ThinVec;\n use crate::tokenstream::{self, DelimSpan, TokenTree, TokenStream, TreeAndJoint};\n use crate::symbol::{Symbol, keywords};\n \n-use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n+use errors::{Applicability, DiagnosticBuilder, DiagnosticId, FatalError};\n use rustc_target::spec::abi::{self, Abi};\n use syntax_pos::{Span, MultiSpan, BytePos, FileName};\n use log::{debug, trace};\n@@ -256,8 +256,15 @@ pub struct Parser<'a> {\n     /// it gets removed from here. Every entry left at the end gets emitted as an independent\n     /// error.\n     crate unclosed_delims: Vec<UnmatchedBrace>,\n+    last_unexpected_token_span: Option<Span>,\n }\n \n+impl<'a> Drop for Parser<'a> {\n+    fn drop(&mut self) {\n+        let diag = self.diagnostic();\n+        emit_unclosed_delims(&mut self.unclosed_delims, diag);\n+    }\n+}\n \n #[derive(Clone)]\n struct TokenCursor {\n@@ -582,6 +589,7 @@ impl<'a> Parser<'a> {\n             unmatched_angle_bracket_count: 0,\n             max_angle_bracket_count: 0,\n             unclosed_delims: Vec::new(),\n+            last_unexpected_token_span: None,\n         };\n \n         let tok = parser.next_tok();\n@@ -775,6 +783,8 @@ impl<'a> Parser<'a> {\n         } else if inedible.contains(&self.token) {\n             // leave it in the input\n             Ok(false)\n+        } else if self.last_unexpected_token_span == Some(self.span) {\n+            FatalError.raise();\n         } else {\n             let mut expected = edible.iter()\n                 .map(|x| TokenType::Token(x.clone()))\n@@ -802,6 +812,7 @@ impl<'a> Parser<'a> {\n                  (self.sess.source_map().next_point(self.prev_span),\n                   format!(\"expected {} here\", expect)))\n             };\n+            self.last_unexpected_token_span = Some(self.span);\n             let mut err = self.fatal(&msg_exp);\n             if self.token.is_ident_named(\"and\") {\n                 err.span_suggestion_short(\n@@ -1497,9 +1508,13 @@ impl<'a> Parser<'a> {\n     pub fn parse_trait_item(&mut self, at_end: &mut bool) -> PResult<'a, TraitItem> {\n         maybe_whole!(self, NtTraitItem, |x| x);\n         let attrs = self.parse_outer_attributes()?;\n+        let mut unclosed_delims = vec![];\n         let (mut item, tokens) = self.collect_tokens(|this| {\n-            this.parse_trait_item_(at_end, attrs)\n+            let item = this.parse_trait_item_(at_end, attrs);\n+            unclosed_delims.append(&mut this.unclosed_delims);\n+            item\n         })?;\n+        self.unclosed_delims.append(&mut unclosed_delims);\n         // See `parse_item` for why this clause is here.\n         if !item.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n             item.tokens = Some(tokens);\n@@ -6333,7 +6348,10 @@ impl<'a> Parser<'a> {\n                 fn_inputs.append(&mut input);\n                 (fn_inputs, recovered)\n             } else {\n-                return self.unexpected();\n+                match self.expect_one_of(&[], &[]) {\n+                    Err(err) => return Err(err),\n+                    Ok(recovered) => (vec![self_arg], recovered),\n+                }\n             }\n         } else {\n             self.parse_seq_to_before_end(&token::CloseDelim(token::Paren), sep, parse_arg_fn)?\n@@ -6459,9 +6477,13 @@ impl<'a> Parser<'a> {\n     pub fn parse_impl_item(&mut self, at_end: &mut bool) -> PResult<'a, ImplItem> {\n         maybe_whole!(self, NtImplItem, |x| x);\n         let attrs = self.parse_outer_attributes()?;\n+        let mut unclosed_delims = vec![];\n         let (mut item, tokens) = self.collect_tokens(|this| {\n-            this.parse_impl_item_(at_end, attrs)\n+            let item = this.parse_impl_item_(at_end, attrs);\n+            unclosed_delims.append(&mut this.unclosed_delims);\n+            item\n         })?;\n+        self.unclosed_delims.append(&mut unclosed_delims);\n \n         // See `parse_item` for why this clause is here.\n         if !item.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n@@ -7781,9 +7803,13 @@ impl<'a> Parser<'a> {\n         macros_allowed: bool,\n         attributes_allowed: bool,\n     ) -> PResult<'a, Option<P<Item>>> {\n+        let mut unclosed_delims = vec![];\n         let (ret, tokens) = self.collect_tokens(|this| {\n-            this.parse_item_implementation(attrs, macros_allowed, attributes_allowed)\n+            let item = this.parse_item_implementation(attrs, macros_allowed, attributes_allowed);\n+            unclosed_delims.append(&mut this.unclosed_delims);\n+            item\n         })?;\n+        self.unclosed_delims.append(&mut unclosed_delims);\n \n         // Once we've parsed an item and recorded the tokens we got while\n         // parsing we may want to store `tokens` into the item we're about to\n@@ -8539,8 +8565,6 @@ impl<'a> Parser<'a> {\n             module: self.parse_mod_items(&token::Eof, lo)?,\n             span: lo.to(self.span),\n         });\n-        emit_unclosed_delims(&self.unclosed_delims, self.diagnostic());\n-        self.unclosed_delims.clear();\n         krate\n     }\n \n@@ -8571,8 +8595,8 @@ impl<'a> Parser<'a> {\n     }\n }\n \n-pub fn emit_unclosed_delims(unclosed_delims: &[UnmatchedBrace], handler: &errors::Handler) {\n-    for unmatched in unclosed_delims {\n+pub fn emit_unclosed_delims(unclosed_delims: &mut Vec<UnmatchedBrace>, handler: &errors::Handler) {\n+    for unmatched in unclosed_delims.iter() {\n         let mut err = handler.struct_span_err(unmatched.found_span, &format!(\n             \"incorrect close delimiter: `{}`\",\n             pprust::token_to_string(&token::Token::CloseDelim(unmatched.found_delim)),\n@@ -8586,4 +8610,5 @@ pub fn emit_unclosed_delims(unclosed_delims: &[UnmatchedBrace], handler: &errors\n         }\n         err.emit();\n     }\n+    unclosed_delims.clear();\n }"}, {"sha": "2fa4f5263fbc581b951d2aeddf3b49e638846860", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -10,7 +10,6 @@ use crate::print::pprust;\n use crate::ptr::P;\n use crate::symbol::keywords;\n use crate::syntax::parse::parse_stream_from_source_str;\n-use crate::syntax::parse::parser::emit_unclosed_delims;\n use crate::tokenstream::{self, DelimSpan, TokenStream, TokenTree};\n \n use syntax_pos::symbol::{self, Symbol};\n@@ -675,9 +674,7 @@ impl Nonterminal {\n         // FIXME(#43081): Avoid this pretty-print + reparse hack\n         let source = pprust::nonterminal_to_string(self);\n         let filename = FileName::macro_expansion_source_code(&source);\n-        let (tokens_for_real, errors) =\n-            parse_stream_from_source_str(filename, source, sess, Some(span));\n-        emit_unclosed_delims(&errors, &sess.span_diagnostic);\n+        let tokens_for_real = parse_stream_from_source_str(filename, source, sess, Some(span));\n \n         // During early phases of the compiler the AST could get modified\n         // directly (e.g., attributes added or removed) and the internal cache\n@@ -740,13 +737,7 @@ fn prepend_attrs(sess: &ParseSess,\n         let source = pprust::attr_to_string(attr);\n         let macro_filename = FileName::macro_expansion_source_code(&source);\n         if attr.is_sugared_doc {\n-            let (stream, errors) = parse_stream_from_source_str(\n-                macro_filename,\n-                source,\n-                sess,\n-                Some(span),\n-            );\n-            emit_unclosed_delims(&errors, &sess.span_diagnostic);\n+            let stream = parse_stream_from_source_str(macro_filename, source, sess, Some(span));\n             builder.push(stream);\n             continue\n         }\n@@ -763,13 +754,7 @@ fn prepend_attrs(sess: &ParseSess,\n         // ... and for more complicated paths, fall back to a reparse hack that\n         // should eventually be removed.\n         } else {\n-            let (stream, errors) = parse_stream_from_source_str(\n-                macro_filename,\n-                source,\n-                sess,\n-                Some(span),\n-            );\n-            emit_unclosed_delims(&errors, &sess.span_diagnostic);\n+            let stream = parse_stream_from_source_str(macro_filename, source, sess, Some(span));\n             brackets.push(stream);\n         }\n "}, {"sha": "a7ac95ba9ef504c3d882e35874182cb5ff1734bc", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -12,7 +12,6 @@ use syntax::ast;\n use syntax::ext::base::ExtCtxt;\n use syntax::parse::lexer::comments;\n use syntax::parse::{self, token, ParseSess};\n-use syntax::parse::parser::emit_unclosed_delims;\n use syntax::tokenstream::{self, DelimSpan, IsJoint::*, TokenStream, TreeAndJoint};\n use syntax_pos::hygiene::{SyntaxContext, Transparency};\n use syntax_pos::symbol::{keywords, Symbol};\n@@ -410,14 +409,12 @@ impl server::TokenStream for Rustc<'_> {\n         stream.is_empty()\n     }\n     fn from_str(&mut self, src: &str) -> Self::TokenStream {\n-        let (tokens, errors) = parse::parse_stream_from_source_str(\n+        parse::parse_stream_from_source_str(\n             FileName::proc_macro_source_code(src.clone()),\n             src.to_string(),\n             self.sess,\n             Some(self.call_site),\n-        );\n-        emit_unclosed_delims(&errors, &self.sess.span_diagnostic);\n-        tokens\n+        )\n     }\n     fn to_string(&mut self, stream: &Self::TokenStream) -> String {\n         stream.to_string()"}, {"sha": "db3984cd18987a55a042c6bd1181b3ff40004d0f", "filename": "src/test/ui/issues/issue-58856-1.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.rs?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -0,0 +1,6 @@\n+impl A {\n+    fn b(self>\n+    //~^ ERROR expected one of `)`, `,`, or `:`, found `>`\n+}\n+\n+fn main() {}"}, {"sha": "20cdf55365fc77a4b57d40e340875f3ddc457158", "filename": "src/test/ui/issues/issue-58856-1.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -0,0 +1,11 @@\n+error: expected one of `)`, `,`, or `:`, found `>`\n+  --> $DIR/issue-58856-1.rs:2:14\n+   |\n+LL |     fn b(self>\n+   |         -    ^\n+   |         |    |\n+   |         |    help: `)` may belong here\n+   |         unclosed delimiter\n+\n+error: aborting due to previous error\n+"}, {"sha": "acc38e4c20163ee9f626d52a0a23b86a91fb6fa8", "filename": "src/test/ui/issues/issue-58856-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.rs?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -0,0 +1,14 @@\n+struct Empty;\n+\n+trait Howness {}\n+\n+impl Howness for () {\n+    fn how_are_you(&self -> Empty {\n+    //~^ ERROR expected one of `)` or `,`, found `->`\n+    //~| ERROR method `how_are_you` is not a member of trait `Howness`\n+        Empty\n+    }\n+}\n+//~^ ERROR expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`,\n+\n+fn main() {}"}, {"sha": "55a9e9d5cb863004d18983f07c573ae5adc359c9", "filename": "src/test/ui/issues/issue-58856-2.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-2.stderr?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -0,0 +1,30 @@\n+error: expected one of `)` or `,`, found `->`\n+  --> $DIR/issue-58856-2.rs:6:26\n+   |\n+LL |     fn how_are_you(&self -> Empty {\n+   |                   -     -^^\n+   |                   |     |\n+   |                   |     help: `)` may belong here\n+   |                   unclosed delimiter\n+\n+error: expected one of `async`, `const`, `crate`, `default`, `existential`, `extern`, `fn`, `pub`, `type`, `unsafe`, or `}`, found `)`\n+  --> $DIR/issue-58856-2.rs:11:1\n+   |\n+LL |     }\n+   |      - expected one of 11 possible tokens here\n+LL | }\n+   | ^ unexpected token\n+\n+error[E0407]: method `how_are_you` is not a member of trait `Howness`\n+  --> $DIR/issue-58856-2.rs:6:5\n+   |\n+LL | /     fn how_are_you(&self -> Empty {\n+LL | |     //~^ ERROR expected one of `)` or `,`, found `->`\n+LL | |     //~| ERROR method `how_are_you` is not a member of trait `Howness`\n+LL | |         Empty\n+LL | |     }\n+   | |_____^ not a member of trait `Howness`\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0407`."}, {"sha": "7f2f2cc7ab039b8897de9b75a0f34e3fb51414a8", "filename": "src/test/ui/parser/recover-enum2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.rs?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -25,9 +25,6 @@ fn main() {\n         // fail again\n         enum Test4 {\n             Nope(i32 {}) //~ ERROR: found `{`\n-                         //~^ ERROR: found `{`\n         }\n     }\n-    // still recover later\n-    let bad_syntax = _; //~ ERROR: expected expression, found reserved identifier `_`\n }"}, {"sha": "315bfde77c73c6d80e39646f2baaae4fe3af55a8", "filename": "src/test/ui/parser/recover-enum2.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-enum2.stderr?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -10,17 +10,5 @@ error: expected one of `!`, `(`, `)`, `+`, `,`, `::`, or `<`, found `{`\n LL |             Nope(i32 {}) //~ ERROR: found `{`\n    |                      ^ expected one of 7 possible tokens here\n \n-error: expected one of `!`, `&&`, `&`, `(`, `)`, `*`, `+`, `,`, `...`, `::`, `<`, `?`, `[`, `_`, `crate`, `dyn`, `extern`, `fn`, `for`, `impl`, `pub`, `unsafe`, `}`, or lifetime, found `{`\n-  --> $DIR/recover-enum2.rs:27:22\n-   |\n-LL |             Nope(i32 {}) //~ ERROR: found `{`\n-   |                      ^ expected one of 24 possible tokens here\n-\n-error: expected expression, found reserved identifier `_`\n-  --> $DIR/recover-enum2.rs:32:22\n-   |\n-LL |     let bad_syntax = _; //~ ERROR: expected expression, found reserved identifier `_`\n-   |                      ^ expected expression\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "6db1b66e9f78551da6cdb6f1be3f72566044fc30", "filename": "src/test/ui/parser/unclosed-delimiter-in-dep.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.rs?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -0,0 +1,6 @@\n+mod unclosed_delim_mod;\n+\n+fn main() {\n+    let _: usize = unclosed_delim_mod::new();\n+    //~^ ERROR mismatched types\n+}"}, {"sha": "633c63bea91054ff58a64547c366c171cd576ebd", "filename": "src/test/ui/parser/unclosed-delimiter-in-dep.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed-delimiter-in-dep.stderr?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -0,0 +1,23 @@\n+error: incorrect close delimiter: `}`\n+  --> $DIR/unclosed_delim_mod.rs:5:1\n+   |\n+LL | pub fn new() -> Result<Value, ()> {\n+   |                                   - close delimiter possibly meant for this\n+LL |     Ok(Value {\n+   |       - un-closed delimiter\n+LL |     }\n+LL | }\n+   | ^ incorrect close delimiter\n+\n+error[E0308]: mismatched types\n+  --> $DIR/unclosed-delimiter-in-dep.rs:4:20\n+   |\n+LL |     let _: usize = unclosed_delim_mod::new();\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^ expected usize, found enum `std::result::Result`\n+   |\n+   = note: expected type `usize`\n+              found type `std::result::Result<unclosed_delim_mod::Value, ()>`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "b1664f49dc59158155b33e2189ca270ed3017295", "filename": "src/test/ui/parser/unclosed_delim_mod.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.rs?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -0,0 +1,6 @@\n+pub struct Value {}\n+pub fn new() -> Result<Value, ()> {\n+    Ok(Value {\n+    }\n+}\n+//~^ ERROR incorrect close delimiter"}, {"sha": "cc04eb531cbeab328c6dc088b0cc4f8180f04dbc", "filename": "src/test/ui/parser/unclosed_delim_mod.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funclosed_delim_mod.stderr?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -0,0 +1,18 @@\n+error: incorrect close delimiter: `}`\n+  --> $DIR/unclosed_delim_mod.rs:5:1\n+   |\n+LL | pub fn new() -> Result<Value, ()> {\n+   |                                   - close delimiter possibly meant for this\n+LL |     Ok(Value {\n+   |       - un-closed delimiter\n+LL |     }\n+LL | }\n+   | ^ incorrect close delimiter\n+\n+error[E0601]: `main` function not found in crate `unclosed_delim_mod`\n+   |\n+   = note: consider adding a `main` function to `$DIR/unclosed_delim_mod.rs`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "212b88ac8b05f3845787196cb5d6950772b2c22b", "filename": "src/test/ui/resolve/token-error-correct-3.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -10,16 +10,14 @@ pub mod raw {\n     pub fn ensure_dir_exists<P: AsRef<Path>, F: FnOnce(&Path)>(path: P,\n                                                                callback: F)\n                                                                -> io::Result<bool> {\n-        if !is_directory(path.as_ref()) { //~ ERROR: cannot find function `is_directory`\n-            callback(path.as_ref(); //~ ERROR expected one of\n-            fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n-            //~^ expected (), found enum `std::result::Result`\n-            //~| expected type `()`\n-            //~| found type `std::result::Result<bool, std::io::Error>`\n-            //~| expected one of\n+        if !is_directory(path.as_ref()) {\n+            //~^ ERROR cannot find function `is_directory`\n+            callback(path.as_ref();\n+            //~^ ERROR expected one of\n+            fs::create_dir_all(path.as_ref()).map(|()| true)\n+            //~^ ERROR mismatched types\n         } else {\n-            //~^ ERROR: expected one of\n-            //~| unexpected token\n+            //~^ ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `)`\n             Ok(false);\n         }\n "}, {"sha": "035a5ede4538467cd478b9c56c07a2b5195c22dd", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b58a0061a347532c55cd5eb27fd6f47f20889ec6/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=b58a0061a347532c55cd5eb27fd6f47f20889ec6", "patch": "@@ -1,31 +1,31 @@\n error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n-  --> $DIR/token-error-correct-3.rs:14:35\n+  --> $DIR/token-error-correct-3.rs:15:35\n    |\n-LL |             callback(path.as_ref(); //~ ERROR expected one of\n+LL |             callback(path.as_ref();\n    |                     -             ^\n    |                     |             |\n    |                     |             help: `)` may belong here\n    |                     unclosed delimiter\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `)`\n-  --> $DIR/token-error-correct-3.rs:20:9\n+  --> $DIR/token-error-correct-3.rs:19:9\n    |\n-LL |             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n+LL |             fs::create_dir_all(path.as_ref()).map(|()| true)\n    |                                                             - expected one of `.`, `;`, `?`, `}`, or an operator here\n-...\n+LL |             //~^ ERROR mismatched types\n LL |         } else {\n    |         ^ unexpected token\n \n error[E0425]: cannot find function `is_directory` in this scope\n   --> $DIR/token-error-correct-3.rs:13:13\n    |\n-LL |         if !is_directory(path.as_ref()) { //~ ERROR: cannot find function `is_directory`\n+LL |         if !is_directory(path.as_ref()) {\n    |             ^^^^^^^^^^^^ not found in this scope\n \n error[E0308]: mismatched types\n-  --> $DIR/token-error-correct-3.rs:15:13\n+  --> $DIR/token-error-correct-3.rs:17:13\n    |\n-LL |             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n+LL |             fs::create_dir_all(path.as_ref()).map(|()| true)\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^- help: try adding a semicolon: `;`\n    |             |\n    |             expected (), found enum `std::result::Result`"}]}