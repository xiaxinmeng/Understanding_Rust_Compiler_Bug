{"sha": "e37ff5a5c739d4852761daa42272e0ff69772a4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzN2ZmNWE1YzczOWQ0ODUyNzYxZGFhNDIyNzJlMGZmNjk3NzJhNGY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-26T21:14:25Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-26T21:16:36Z"}, "message": "Fix ICE with relating late bound regions", "tree": {"sha": "4d57c1962436fb609c153cb9340467a803439eca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d57c1962436fb609c153cb9340467a803439eca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e37ff5a5c739d4852761daa42272e0ff69772a4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e37ff5a5c739d4852761daa42272e0ff69772a4f", "html_url": "https://github.com/rust-lang/rust/commit/e37ff5a5c739d4852761daa42272e0ff69772a4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e37ff5a5c739d4852761daa42272e0ff69772a4f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "deb0f3120d61ca948d3ef8982cc565b2547cebca", "url": "https://api.github.com/repos/rust-lang/rust/commits/deb0f3120d61ca948d3ef8982cc565b2547cebca", "html_url": "https://github.com/rust-lang/rust/commit/deb0f3120d61ca948d3ef8982cc565b2547cebca"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "81761695eb8aa7ad6a2b287843ecb506f7892eef", "filename": "src/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff5a5c739d4852761daa42272e0ff69772a4f/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff5a5c739d4852761daa42272e0ff69772a4f/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=e37ff5a5c739d4852761daa42272e0ff69772a4f", "patch": "@@ -402,8 +402,8 @@ impl LateLintPass for MethodsPass {\n                         }\n                     }\n \n-                    let ret_ty = return_ty(cx.tcx.node_id_to_type(implitem.id));\n-                    if &name.as_str() == &\"new\" && !ret_ty.map_or(false, |ret_ty| ret_ty.walk().any(|t| same_tys(cx, t, ty))) {\n+                    let ret_ty = return_ty(cx, implitem.id);\n+                    if &name.as_str() == &\"new\" && !ret_ty.map_or(false, |ret_ty| ret_ty.walk().any(|t| same_tys(cx, t, ty, implitem.id))) {\n                         span_lint(cx,\n                                   NEW_RET_NO_SELF,\n                                   sig.explicit_self.span,"}, {"sha": "395d69138e13756ff26c5480024b63c4eba7b20e", "filename": "src/new_without_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff5a5c739d4852761daa42272e0ff69772a4f/src%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff5a5c739d4852761daa42272e0ff69772a4f/src%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fnew_without_default.rs?ref=e37ff5a5c739d4852761daa42272e0ff69772a4f", "patch": "@@ -52,8 +52,8 @@ impl LateLintPass for NewWithoutDefault {\n \n                 if_let_chain!{[\n                     self_ty.walk_shallow().next().is_none(), // implements_trait does not work with generics\n-                    let Some(ret_ty) = return_ty(cx.tcx.node_id_to_type(id)),\n-                    same_tys(cx, self_ty, ret_ty),\n+                    let Some(ret_ty) = return_ty(cx, id),\n+                    same_tys(cx, self_ty, ret_ty, id),\n                     let Some(default_trait_id) = get_trait_def_id(cx, &DEFAULT_TRAIT_PATH),\n                     !implements_trait(cx, self_ty, default_trait_id, Vec::new())\n                 ], {"}, {"sha": "09fb1475b0cfecd1413e4a9dbcd74d2880dd813c", "filename": "src/utils/mod.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e37ff5a5c739d4852761daa42272e0ff69772a4f/src%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e37ff5a5c739d4852761daa42272e0ff69772a4f/src%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils%2Fmod.rs?ref=e37ff5a5c739d4852761daa42272e0ff69772a4f", "patch": "@@ -4,6 +4,7 @@ use rustc::lint::{LintContext, LateContext, Level, Lint};\n use rustc::middle::def_id::DefId;\n use rustc::middle::traits::ProjectionMode;\n use rustc::middle::{cstore, def, infer, ty, traits};\n+use rustc::middle::subst::Subst;\n use rustc::session::Session;\n use rustc_front::hir::*;\n use std::borrow::Cow;\n@@ -764,8 +765,13 @@ pub fn unsugar_range(expr: &Expr) -> Option<UnsugaredRange> {\n }\n \n /// Convenience function to get the return type of a function or `None` if the function diverges.\n-pub fn return_ty(fun: ty::Ty) -> Option<ty::Ty> {\n-    if let ty::FnConverging(ret_ty) = fun.fn_sig().skip_binder().output {\n+pub fn return_ty<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, fn_item: NodeId) -> Option<ty::Ty<'tcx>> {\n+    let parameter_env = ty::ParameterEnvironment::for_item(cx.tcx, fn_item);\n+    let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, Some(parameter_env), ProjectionMode::Any);\n+\n+    let fn_sig = cx.tcx.node_id_to_type(fn_item).fn_sig().subst(infcx.tcx, &infcx.parameter_environment.free_substs);\n+    let fn_sig = infcx.tcx.liberate_late_bound_regions(infcx.parameter_environment.free_id_outlive, &fn_sig);\n+    if let ty::FnConverging(ret_ty) = fn_sig.output {\n         Some(ret_ty)\n     } else {\n         None\n@@ -775,7 +781,10 @@ pub fn return_ty(fun: ty::Ty) -> Option<ty::Ty> {\n /// Check if two types are the same.\n // FIXME: this works correctly for lifetimes bounds (`for <'a> Foo<'a>` == `for <'b> Foo<'b>` but\n // not for type parameters.\n-pub fn same_tys<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, a: ty::Ty<'tcx>, b: ty::Ty<'tcx>) -> bool {\n-    let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, None, ProjectionMode::Any);\n-    infcx.can_equate(&cx.tcx.erase_regions(&a), &cx.tcx.erase_regions(&b)).is_ok()\n+pub fn same_tys<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, a: ty::Ty<'tcx>, b: ty::Ty<'tcx>, parameter_item: NodeId) -> bool {\n+    let parameter_env = ty::ParameterEnvironment::for_item(cx.tcx, parameter_item);\n+    let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, Some(parameter_env), ProjectionMode::Any);\n+    let new_a = a.subst(infcx.tcx, &infcx.parameter_environment.free_substs);\n+    let new_b = b.subst(infcx.tcx, &infcx.parameter_environment.free_substs);\n+    infcx.can_equate(&new_a, &new_b).is_ok()\n }"}]}