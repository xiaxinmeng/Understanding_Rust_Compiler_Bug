{"sha": "080d498af224ac4b60efe6e92aed08db3f247bc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA4MGQ0OThhZjIyNGFjNGI2MGVmZTZlOTJhZWQwOGRiM2YyNDdiYzU=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-06-21T15:05:05Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-06-23T08:23:00Z"}, "message": "std::hashmap: Implement external iterator for HashMap and HashSet", "tree": {"sha": "4fc127615adf42ac73455458e726a12bb01fb9c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fc127615adf42ac73455458e726a12bb01fb9c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/080d498af224ac4b60efe6e92aed08db3f247bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/080d498af224ac4b60efe6e92aed08db3f247bc5", "html_url": "https://github.com/rust-lang/rust/commit/080d498af224ac4b60efe6e92aed08db3f247bc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/080d498af224ac4b60efe6e92aed08db3f247bc5/comments", "author": null, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b126e4d6dda1eac3881b8ca19772071997a7992", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b126e4d6dda1eac3881b8ca19772071997a7992", "html_url": "https://github.com/rust-lang/rust/commit/3b126e4d6dda1eac3881b8ca19772071997a7992"}], "stats": {"total": 91, "additions": 79, "deletions": 12}, "files": [{"sha": "c275e8a99ff5855e6110efba4bf11afa12634658", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 79, "deletions": 12, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/080d498af224ac4b60efe6e92aed08db3f247bc5/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/080d498af224ac4b60efe6e92aed08db3f247bc5/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=080d498af224ac4b60efe6e92aed08db3f247bc5", "patch": "@@ -20,13 +20,13 @@ use cmp::{Eq, Equiv};\n use hash::Hash;\n use old_iter::BaseIter;\n use old_iter;\n-use iterator::IteratorUtil;\n+use iterator::{Iterator, IteratorUtil};\n use option::{None, Option, Some};\n use rand::RngUtil;\n use rand;\n use uint;\n use vec;\n-use vec::ImmutableVector;\n+use vec::{ImmutableVector, MutableVector};\n use kinds::Copy;\n use util::{replace, unreachable};\n \n@@ -311,24 +311,17 @@ impl<K:Hash + Eq,V> Map<K, V> for HashMap<K, V> {\n \n     /// Visit all key-value pairs\n     fn each<'a>(&'a self, blk: &fn(&K, &'a V) -> bool) -> bool {\n-        for self.buckets.iter().advance |bucket| {\n-            for bucket.iter().advance |pair| {\n-                if !blk(&pair.key, &pair.value) {\n-                    return false;\n-                }\n-            }\n-        }\n-        return true;\n+        self.iter().advance(|(k, v)| blk(k, v))\n     }\n \n     /// Visit all keys\n     fn each_key(&self, blk: &fn(k: &K) -> bool) -> bool {\n-        self.each(|k, _| blk(k))\n+        self.iter().advance(|(k, _)| blk(k))\n     }\n \n     /// Visit all values\n     fn each_value<'a>(&'a self, blk: &fn(v: &'a V) -> bool) -> bool {\n-        self.each(|_, v| blk(v))\n+        self.iter().advance(|(_, v)| blk(v))\n     }\n \n     /// Iterate over the map and mutate the contained values\n@@ -524,6 +517,19 @@ impl<K: Hash + Eq, V> HashMap<K, V> {\n             TableFull | FoundHole(_) => None,\n         }\n     }\n+\n+    /// An iterator visiting all key-value pairs in arbitrary order.\n+    /// Iterator element type is (&'a K, &'a V).\n+    pub fn iter<'a>(&'a self) -> HashMapIterator<'a, K, V> {\n+        HashMapIterator { iter: self.buckets.iter() }\n+    }\n+\n+    /// An iterator visiting all key-value pairs in arbitrary order,\n+    /// with mutable references to the values.\n+    /// Iterator element type is (&'a K, &'a mut V).\n+    pub fn mut_iter<'a>(&'a mut self) -> HashMapMutIterator<'a, K, V> {\n+        HashMapMutIterator { iter: self.buckets.mut_iter() }\n+    }\n }\n \n impl<K: Hash + Eq, V: Copy> HashMap<K, V> {\n@@ -555,6 +561,61 @@ impl<K:Hash + Eq,V:Eq> Eq for HashMap<K, V> {\n     fn ne(&self, other: &HashMap<K, V>) -> bool { !self.eq(other) }\n }\n \n+/// HashMap iterator\n+pub struct HashMapIterator<'self, K, V> {\n+    priv iter: vec::VecIterator<'self, Option<Bucket<K, V>>>,\n+}\n+\n+/// HashMap mutable values iterator\n+pub struct HashMapMutIterator<'self, K, V> {\n+    priv iter: vec::VecMutIterator<'self, Option<Bucket<K, V>>>,\n+}\n+\n+/// HashSet iterator\n+pub struct HashSetIterator<'self, K> {\n+    priv iter: vec::VecIterator<'self, Option<Bucket<K, ()>>>,\n+}\n+\n+impl<'self, K, V> Iterator<(&'self K, &'self V)> for HashMapIterator<'self, K, V> {\n+    #[inline]\n+    fn next(&mut self) -> Option<(&'self K, &'self V)> {\n+        for self.iter.advance |elt| {\n+            match elt {\n+                &Some(ref bucket) => return Some((&bucket.key, &bucket.value)),\n+                &None => {},\n+            }\n+        }\n+        None\n+    }\n+}\n+\n+impl<'self, K, V> Iterator<(&'self K, &'self mut V)> for HashMapMutIterator<'self, K, V> {\n+    #[inline]\n+    fn next(&mut self) -> Option<(&'self K, &'self mut V)> {\n+        for self.iter.advance |elt| {\n+            match elt {\n+                &Some(ref mut bucket) => return Some((&bucket.key, &mut bucket.value)),\n+                &None => {},\n+            }\n+        }\n+        None\n+    }\n+}\n+\n+impl<'self, K> Iterator<&'self K> for HashSetIterator<'self, K> {\n+    #[inline]\n+    fn next(&mut self) -> Option<&'self K> {\n+        for self.iter.advance |elt| {\n+            match elt {\n+                &Some(ref bucket) => return Some(&bucket.key),\n+                &None => {},\n+            }\n+        }\n+        None\n+    }\n+}\n+\n+\n /// An implementation of a hash set using the underlying representation of a\n /// HashMap where the value is (). As with the `HashMap` type, a `HashSet`\n /// requires that the elements implement the `Eq` and `Hash` traits.\n@@ -664,6 +725,12 @@ impl<T:Hash + Eq> HashSet<T> {\n     pub fn contains_equiv<Q:Hash + Equiv<T>>(&self, value: &Q) -> bool {\n       self.map.contains_key_equiv(value)\n     }\n+\n+    /// An iterator visiting all elements in arbitrary order.\n+    /// Iterator element type is &'a T.\n+    pub fn iter<'a>(&'a self) -> HashSetIterator<'a, T> {\n+        HashSetIterator { iter: self.map.buckets.iter() }\n+    }\n }\n \n #[cfg(test)]"}]}