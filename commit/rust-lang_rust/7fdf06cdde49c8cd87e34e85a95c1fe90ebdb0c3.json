{"sha": "7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZGYwNmNkZGU0OWM4Y2Q4N2UzNGU4NWE5NWMxZmU5MGViZGIwYzM=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-08-26T13:19:34Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-25T14:46:19Z"}, "message": "Report const eval error inside the query", "tree": {"sha": "659449f68fb00da4052dd67ba6725b17d6aaf26d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/659449f68fb00da4052dd67ba6725b17d6aaf26d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "html_url": "https://github.com/rust-lang/rust/commit/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3476ac0bee4042653ecb00207ceb9e02d2b647d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3476ac0bee4042653ecb00207ceb9e02d2b647d0", "html_url": "https://github.com/rust-lang/rust/commit/3476ac0bee4042653ecb00207ceb9e02d2b647d0"}], "stats": {"total": 2558, "additions": 1470, "deletions": 1088}, "files": [{"sha": "61996b5a8a75c46d7983472214bb4277ce5a4b36", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -530,6 +530,7 @@ define_dep_nodes!( <'tcx>\n     [] UsedTraitImports(DefId),\n     [] HasTypeckTables(DefId),\n     [] ConstEval { param_env: ParamEnvAnd<'tcx, GlobalId<'tcx>> },\n+    [] ConstEvalRaw { param_env: ParamEnvAnd<'tcx, GlobalId<'tcx>> },\n     [] CheckMatch(DefId),\n     [] SymbolName(DefId),\n     [] InstanceSymbolName { instance: Instance<'tcx> },"}, {"sha": "72a45ebd8e4c0e9d72a73b27caa3f4c81d8bcd0d", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -74,6 +74,7 @@ pub enum Def {\n     SelfCtor(DefId /* impl */),  // DefId refers to the impl\n     Method(DefId),\n     AssociatedConst(DefId),\n+    Closure(hir::BodyId),\n \n     Local(ast::NodeId),\n     Upvar(ast::NodeId,  // node id of closed over local\n@@ -281,6 +282,7 @@ impl Def {\n                 id\n             }\n \n+            Def::Closure(_) |\n             Def::Local(..) |\n             Def::Upvar(..) |\n             Def::Label(..)  |\n@@ -319,6 +321,7 @@ impl Def {\n             Def::Trait(..) => \"trait\",\n             Def::ForeignTy(..) => \"foreign type\",\n             Def::Method(..) => \"method\",\n+            Def::Closure(_) => \"closure\",\n             Def::Const(..) => \"constant\",\n             Def::AssociatedConst(..) => \"associated constant\",\n             Def::TyParam(..) => \"type parameter\","}, {"sha": "d36268cfe3a4f89ea52a7058909f758d251646cc", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -340,9 +340,14 @@ impl<'hir> Map<'hir> {\n                 let def_id = self.local_def_id(variant.node.data.id());\n                 Some(Def::Variant(def_id))\n             }\n+            Node::Expr(expr) => {\n+                match expr.node {\n+                    ExprKind::Closure(_, _, body_id, _, _) => Some(Def::Closure(body_id)),\n+                    _ => None,\n+                }\n+            }\n             Node::Field(_) |\n             Node::AnonConst(_) |\n-            Node::Expr(_) |\n             Node::Stmt(_) |\n             Node::Ty(_) |\n             Node::TraitRef(_) |"}, {"sha": "4b64591029c3f930d780a95be2321f534d00d80f", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1044,6 +1044,7 @@ impl_stable_hash_for!(enum hir::def::Def {\n     SelfCtor(impl_def_id),\n     VariantCtor(def_id, ctor_kind),\n     Method(def_id),\n+    Closure(body_id),\n     AssociatedConst(def_id),\n     Local(def_id),\n     Upvar(def_id, index, expr_id),"}, {"sha": "7e5d19850f48dd325a56e9a5b8df3a2cb35acdbb", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -483,10 +483,9 @@ impl_stable_hash_for!(struct ty::Const<'tcx> {\n     val\n });\n \n-impl_stable_hash_for!(struct ::mir::interpret::ConstEvalErr<'tcx> {\n-    span,\n-    stacktrace,\n-    error\n+impl_stable_hash_for!(enum mir::interpret::ErrorHandled {\n+    Reported,\n+    TooGeneric\n });\n \n impl_stable_hash_for!(struct ::mir::interpret::FrameInfo {\n@@ -503,8 +502,6 @@ impl_stable_hash_for!(struct ty::GenericPredicates<'tcx> {\n     predicates\n });\n \n-impl_stable_hash_for!(struct ::mir::interpret::EvalError<'tcx> { kind });\n-\n impl<'a, 'gcx, O: HashStable<StableHashingContext<'a>>> HashStable<StableHashingContext<'a>>\n for ::mir::interpret::EvalErrorKind<'gcx, O> {\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -543,14 +540,14 @@ for ::mir::interpret::EvalErrorKind<'gcx, O> {\n             UnimplementedTraitSelection |\n             TypeckError |\n             TooGeneric |\n-            CheckMatchError |\n             DerefFunctionPointer |\n             ExecuteMemory |\n             OverflowNeg |\n             RemainderByZero |\n             DivisionByZero |\n             GeneratorResumedAfterReturn |\n             GeneratorResumedAfterPanic |\n+            ReferencedConstant |\n             InfiniteLoop => {}\n             ReadUndefBytes(offset) => offset.hash_stable(hcx, hasher),\n             InvalidDiscriminant(val) => val.hash_stable(hcx, hasher),\n@@ -560,7 +557,6 @@ for ::mir::interpret::EvalErrorKind<'gcx, O> {\n                 line.hash_stable(hcx, hasher);\n                 col.hash_stable(hcx, hasher);\n             },\n-            ReferencedConstant(ref err) => err.hash_stable(hcx, hasher),\n             MachineError(ref err) => err.hash_stable(hcx, hasher),\n             FunctionAbiMismatch(a, b) => {\n                 a.hash_stable(hcx, hasher);"}, {"sha": "f7f4c50b96d40bf6acc9d75c777c11a5297e36a9", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 42, "deletions": 23, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -13,7 +13,6 @@ use std::{fmt, env};\n use mir;\n use ty::{Ty, layout};\n use ty::layout::{Size, Align};\n-use rustc_data_structures::sync::Lrc;\n use rustc_target::spec::abi::Abi;\n \n use super::{\n@@ -30,7 +29,26 @@ use syntax_pos::Span;\n use syntax::ast;\n use syntax::symbol::Symbol;\n \n-pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, Lrc<ConstEvalErr<'tcx>>>;\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum ErrorHandled {\n+    /// Already reported a lint or an error for this evaluation\n+    Reported,\n+    /// Don't emit an error, the evaluation failed because the MIR was generic\n+    /// and the substs didn't fully monomorphize it.\n+    TooGeneric,\n+}\n+\n+impl ErrorHandled {\n+    pub fn assert_reported(self) {\n+        match self {\n+            ErrorHandled::Reported => {},\n+            ErrorHandled::TooGeneric => bug!(\"MIR interpretation failed without reporting an error \\\n+                                              even though it was fully monomorphized\"),\n+        }\n+    }\n+}\n+\n+pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, ErrorHandled>;\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct ConstEvalErr<'tcx> {\n@@ -50,33 +68,41 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n     pub fn struct_error(&self,\n         tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n         message: &str)\n-        -> Option<DiagnosticBuilder<'tcx>>\n+        -> Result<DiagnosticBuilder<'tcx>, ErrorHandled>\n     {\n         self.struct_generic(tcx, message, None)\n     }\n \n     pub fn report_as_error(&self,\n         tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n         message: &str\n-    ) {\n+    ) -> ErrorHandled {\n         let err = self.struct_error(tcx, message);\n-        if let Some(mut err) = err {\n-            err.emit();\n+        match err {\n+            Ok(mut err) => {\n+                err.emit();\n+                ErrorHandled::Reported\n+            },\n+            Err(err) => err,\n         }\n     }\n \n     pub fn report_as_lint(&self,\n         tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n         message: &str,\n         lint_root: ast::NodeId,\n-    ) {\n+    ) -> ErrorHandled {\n         let lint = self.struct_generic(\n             tcx,\n             message,\n             Some(lint_root),\n         );\n-        if let Some(mut lint) = lint {\n-            lint.emit();\n+        match lint {\n+            Ok(mut lint) => {\n+                lint.emit();\n+                ErrorHandled::Reported\n+            },\n+            Err(err) => err,\n         }\n     }\n \n@@ -85,15 +111,11 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n         message: &str,\n         lint_root: Option<ast::NodeId>,\n-    ) -> Option<DiagnosticBuilder<'tcx>> {\n+    ) -> Result<DiagnosticBuilder<'tcx>, ErrorHandled> {\n         match self.error.kind {\n-            ::mir::interpret::EvalErrorKind::TypeckError |\n-            ::mir::interpret::EvalErrorKind::TooGeneric |\n-            ::mir::interpret::EvalErrorKind::CheckMatchError |\n-            ::mir::interpret::EvalErrorKind::Layout(_) => return None,\n-            ::mir::interpret::EvalErrorKind::ReferencedConstant(ref inner) => {\n-                inner.struct_generic(tcx, \"referenced constant has errors\", lint_root)?.emit();\n-            },\n+            EvalErrorKind::TooGeneric => return Err(ErrorHandled::TooGeneric),\n+            EvalErrorKind::TypeckError |\n+            EvalErrorKind::Layout(_) => return Err(ErrorHandled::Reported),\n             _ => {},\n         }\n         trace!(\"reporting const eval failure at {:?}\", self.span);\n@@ -117,7 +139,7 @@ impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n         for FrameInfo { span, location, .. } in &self.stacktrace {\n             err.span_label(*span, format!(\"inside call to `{}`\", location));\n         }\n-        Some(err)\n+        Ok(err)\n     }\n }\n \n@@ -279,10 +301,9 @@ pub enum EvalErrorKind<'tcx, O> {\n     TypeckError,\n     /// Resolution can fail if we are in a too generic context\n     TooGeneric,\n-    CheckMatchError,\n     /// Cannot compute this constant because it depends on another one\n     /// which already produced an error\n-    ReferencedConstant(Lrc<ConstEvalErr<'tcx>>),\n+    ReferencedConstant,\n     GeneratorResumedAfterReturn,\n     GeneratorResumedAfterPanic,\n     InfiniteLoop,\n@@ -407,9 +428,7 @@ impl<'tcx, O> EvalErrorKind<'tcx, O> {\n                 \"encountered constants with type errors, stopping evaluation\",\n             TooGeneric =>\n                 \"encountered overly generic constant\",\n-            CheckMatchError =>\n-                \"match checking failed\",\n-            ReferencedConstant(_) =>\n+            ReferencedConstant =>\n                 \"referenced constant has errors\",\n             Overflow(mir::BinOp::Add) => \"attempt to add with overflow\",\n             Overflow(mir::BinOp::Sub) => \"attempt to subtract with overflow\","}, {"sha": "40a4b8b375a2027af768ba6d95ca6c9062802676", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -20,7 +20,7 @@ mod value;\n \n pub use self::error::{\n     EvalError, EvalResult, EvalErrorKind, AssertMessage, ConstEvalErr, struct_error,\n-    FrameInfo, ConstEvalResult,\n+    FrameInfo, ConstEvalResult, ErrorHandled,\n };\n \n pub use self::value::{Scalar, ConstValue};"}, {"sha": "a7513b325fe6dd8f0821c59876aed373f1420a3b", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -880,18 +880,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 self.tcx.report_object_safety_error(span, did, violations)\n             }\n \n-            ConstEvalFailure(ref err) => {\n-                match err.struct_error(\n-                    self.tcx.at(span),\n-                    \"could not evaluate constant expression\",\n-                ) {\n-                    Some(err) => err,\n-                    None => {\n-                        self.tcx.sess.delay_span_bug(span,\n-                            &format!(\"constant in type had an ignored error: {:?}\", err));\n-                        return;\n-                    }\n-                }\n+            // already reported in the query\n+            ConstEvalFailure => {\n+                self.tcx.sess.delay_span_bug(span, \"constant in type had an ignored error\");\n+                return;\n             }\n \n             Overflow => {"}, {"sha": "320902263af61a5ec32cc6c322f9d12aed49acc4", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -16,8 +16,6 @@ use rustc_data_structures::obligation_forest::{Error, ForestObligation, Obligati\n use rustc_data_structures::obligation_forest::{ObligationProcessor, ProcessResult};\n use std::marker::PhantomData;\n use hir::def_id::DefId;\n-use mir::interpret::ConstEvalErr;\n-use mir::interpret::EvalErrorKind;\n \n use super::CodeAmbiguity;\n use super::CodeProjectionError;\n@@ -491,17 +489,11 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n                                     match self.selcx.tcx().at(obligation.cause.span)\n                                                           .const_eval(param_env.and(cid)) {\n                                         Ok(_) => ProcessResult::Changed(vec![]),\n-                                        Err(err) => ProcessResult::Error(\n-                                            CodeSelectionError(ConstEvalFailure(err)))\n+                                        Err(_) => ProcessResult::Error(\n+                                            CodeSelectionError(ConstEvalFailure))\n                                     }\n                                 } else {\n-                                    ProcessResult::Error(\n-                                        CodeSelectionError(ConstEvalFailure(ConstEvalErr {\n-                                            span: obligation.cause.span,\n-                                            error: EvalErrorKind::TooGeneric.into(),\n-                                            stacktrace: vec![],\n-                                        }.into()))\n-                                    )\n+                                    ProcessResult::Error(CodeSelectionError(ConstEvalFailure))\n                                 }\n                             },\n                             None => {"}, {"sha": "c809c94f4449de949cb2992d57e5c8f867242685", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -23,7 +23,6 @@ use hir::def_id::DefId;\n use infer::SuppressRegionErrors;\n use infer::outlives::env::OutlivesEnvironment;\n use middle::region;\n-use mir::interpret::ConstEvalErr;\n use ty::subst::Substs;\n use ty::{self, AdtKind, List, Ty, TyCtxt, GenericParamDefKind, ToPredicate};\n use ty::error::{ExpectedFound, TypeError};\n@@ -438,7 +437,7 @@ pub enum SelectionError<'tcx> {\n                                 ty::PolyTraitRef<'tcx>,\n                                 ty::error::TypeError<'tcx>),\n     TraitNotObjectSafe(DefId),\n-    ConstEvalFailure(Lrc<ConstEvalErr<'tcx>>),\n+    ConstEvalFailure,\n     Overflow,\n }\n "}, {"sha": "e7cb9ff06234f1fb0ee3e5a2059325ad760b0b11", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -172,9 +172,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::SelectionError<'a> {\n                 )\n             }\n             super::TraitNotObjectSafe(def_id) => Some(super::TraitNotObjectSafe(def_id)),\n-            super::ConstEvalFailure(ref err) => tcx.lift(&**err).map(|err| super::ConstEvalFailure(\n-                err.into(),\n-            )),\n+            super::ConstEvalFailure(ref err) => Some(super::ConstEvalFailure),\n             super::Overflow => Some(super::Overflow),\n         }\n     }"}, {"sha": "6a6d111fb3bff130cdce3efe9c31d4efe9da2cb9", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -27,7 +27,7 @@ use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangIte\n use middle::privacy::AccessLevels;\n use middle::resolve_lifetime::ObjectLifetimeDefault;\n use mir::Mir;\n-use mir::interpret::GlobalId;\n+use mir::interpret::{GlobalId, ErrorHandled};\n use mir::GeneratorLayout;\n use session::CrateDisambiguator;\n use traits::{self, Reveal};\n@@ -2191,18 +2191,18 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                     None\n                 }\n             }\n-            Err(err) => {\n-                err.report_as_error(\n-                    tcx.at(tcx.def_span(expr_did)),\n-                    \"could not evaluate enum discriminant\",\n-                );\n+            Err(ErrorHandled::Reported) => {\n                 if !expr_did.is_local() {\n                     span_bug!(tcx.def_span(expr_did),\n                         \"variant discriminant evaluation succeeded \\\n                          in its crate but failed locally\");\n                 }\n                 None\n             }\n+            Err(ErrorHandled::TooGeneric) => span_bug!(\n+                tcx.def_span(expr_did),\n+                \"enum discriminant depends on generic arguments\",\n+            ),\n         }\n     }\n "}, {"sha": "bb33def51cc3bd6fcbd6917066e49c2c2b729911", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -296,6 +296,30 @@ impl<'tcx> QueryDescription<'tcx> for queries::reachable_set<'tcx> {\n }\n \n impl<'tcx> QueryDescription<'tcx> for queries::const_eval<'tcx> {\n+    fn describe(\n+        tcx: TyCtxt<'_, '_, '_>,\n+        key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n+    ) -> Cow<'static, str> {\n+        format!(\n+            \"const-evaluating + checking `{}`\",\n+            tcx.item_path_str(key.value.instance.def.def_id()),\n+        ).into()\n+    }\n+\n+    #[inline]\n+    fn cache_on_disk(_key: Self::Key) -> bool {\n+        true\n+    }\n+\n+    #[inline]\n+    fn try_load_from_disk<'a>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                              id: SerializedDepNodeIndex)\n+                              -> Option<Self::Value> {\n+        tcx.queries.on_disk_cache.try_load_query_result(tcx, id).map(Ok)\n+    }\n+}\n+\n+impl<'tcx> QueryDescription<'tcx> for queries::const_eval_raw<'tcx> {\n     fn describe(tcx: TyCtxt<'_, '_, '_>, key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n         -> Cow<'static, str>\n     {"}, {"sha": "ed7b2cffc46f6b689f22c9954eb0314ea1c08e06", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -301,6 +301,14 @@ define_queries! { <'tcx>\n     },\n \n     Other {\n+        /// Evaluate a constant without running sanity checks\n+        ///\n+        /// DO NOT USE THIS outside const eval. Const eval uses this to break query cycles during\n+        /// validation. Please add a comment to every use site explaining why using `const_eval`\n+        /// isn't sufficient\n+        [] fn const_eval_raw: const_eval_raw_dep_node(ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n+            -> ConstEvalResult<'tcx>,\n+\n         /// Results of evaluating const items or constants embedded in\n         /// other items (such as enum variant explicit discriminants).\n         [] fn const_eval: const_eval_dep_node(ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n@@ -776,6 +784,10 @@ fn const_eval_dep_node<'tcx>(param_env: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n                              -> DepConstructor<'tcx> {\n     DepConstructor::ConstEval { param_env }\n }\n+fn const_eval_raw_dep_node<'tcx>(param_env: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n+                             -> DepConstructor<'tcx> {\n+    DepConstructor::ConstEvalRaw { param_env }\n+}\n \n fn mir_keys<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::MirKeys"}, {"sha": "8bbfd92d688edd5581d6e2dfc3a0720c63de0259", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1063,6 +1063,7 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::NeedsDrop |\n         DepKind::Layout |\n         DepKind::ConstEval |\n+        DepKind::ConstEvalRaw |\n         DepKind::InstanceSymbolName |\n         DepKind::MirShim |\n         DepKind::BorrowCheckKrate |"}, {"sha": "a93dca4af426ba812b9564b5566972ca5c060a62", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 159, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -13,7 +13,7 @@\n //! hand, though we've recently added some macros (e.g.,\n //! `BraceStructLiftImpl!`) to help with the tedium.\n \n-use mir::interpret::{ConstValue, ConstEvalErr};\n+use mir::interpret::ConstValue;\n use ty::{self, Lift, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n@@ -460,164 +460,6 @@ impl<'a, 'tcx> Lift<'tcx> for ty::error::TypeError<'a> {\n     }\n }\n \n-impl<'a, 'tcx> Lift<'tcx> for ConstEvalErr<'a> {\n-    type Lifted = ConstEvalErr<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        tcx.lift(&self.error).map(|error| {\n-            ConstEvalErr {\n-                span: self.span,\n-                stacktrace: self.stacktrace.clone(),\n-                error,\n-            }\n-        })\n-    }\n-}\n-\n-impl<'a, 'tcx> Lift<'tcx> for interpret::EvalError<'a> {\n-    type Lifted = interpret::EvalError<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        Some(interpret::EvalError {\n-            kind: tcx.lift(&self.kind)?,\n-        })\n-    }\n-}\n-\n-impl<'a, 'tcx, O: Lift<'tcx>> Lift<'tcx> for interpret::EvalErrorKind<'a, O> {\n-    type Lifted = interpret::EvalErrorKind<'tcx, <O as Lift<'tcx>>::Lifted>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        use ::mir::interpret::EvalErrorKind::*;\n-        Some(match *self {\n-            MachineError(ref err) => MachineError(err.clone()),\n-            FunctionAbiMismatch(a, b) => FunctionAbiMismatch(a, b),\n-            FunctionArgMismatch(a, b) => FunctionArgMismatch(\n-                tcx.lift(&a)?,\n-                tcx.lift(&b)?,\n-            ),\n-            FunctionRetMismatch(a, b) => FunctionRetMismatch(\n-                tcx.lift(&a)?,\n-                tcx.lift(&b)?,\n-            ),\n-            FunctionArgCountMismatch => FunctionArgCountMismatch,\n-            NoMirFor(ref s) => NoMirFor(s.clone()),\n-            UnterminatedCString(ptr) => UnterminatedCString(ptr),\n-            DanglingPointerDeref => DanglingPointerDeref,\n-            DoubleFree => DoubleFree,\n-            InvalidMemoryAccess => InvalidMemoryAccess,\n-            InvalidFunctionPointer => InvalidFunctionPointer,\n-            InvalidBool => InvalidBool,\n-            InvalidDiscriminant(val) => InvalidDiscriminant(val),\n-            PointerOutOfBounds {\n-                ptr,\n-                access,\n-                allocation_size,\n-            } => PointerOutOfBounds { ptr, access, allocation_size },\n-            InvalidNullPointerUsage => InvalidNullPointerUsage,\n-            ReadPointerAsBytes => ReadPointerAsBytes,\n-            ReadBytesAsPointer => ReadBytesAsPointer,\n-            ReadForeignStatic => ReadForeignStatic,\n-            InvalidPointerMath => InvalidPointerMath,\n-            ReadUndefBytes(offset) => ReadUndefBytes(offset),\n-            DeadLocal => DeadLocal,\n-            InvalidBoolOp(bop) => InvalidBoolOp(bop),\n-            Unimplemented(ref s) => Unimplemented(s.clone()),\n-            DerefFunctionPointer => DerefFunctionPointer,\n-            ExecuteMemory => ExecuteMemory,\n-            BoundsCheck { ref len, ref index } => BoundsCheck {\n-                len: tcx.lift(len)?,\n-                index: tcx.lift(index)?,\n-            },\n-            Intrinsic(ref s) => Intrinsic(s.clone()),\n-            InvalidChar(c) => InvalidChar(c),\n-            StackFrameLimitReached => StackFrameLimitReached,\n-            OutOfTls => OutOfTls,\n-            TlsOutOfBounds => TlsOutOfBounds,\n-            AbiViolation(ref s) => AbiViolation(s.clone()),\n-            AlignmentCheckFailed {\n-                required,\n-                has,\n-            } => AlignmentCheckFailed { required, has },\n-            MemoryLockViolation {\n-                ptr,\n-                len,\n-                frame,\n-                access,\n-                ref lock,\n-            } => MemoryLockViolation { ptr, len, frame, access, lock: lock.clone() },\n-            MemoryAcquireConflict {\n-                ptr,\n-                len,\n-                kind,\n-                ref lock,\n-            } => MemoryAcquireConflict { ptr, len, kind, lock: lock.clone() },\n-            InvalidMemoryLockRelease {\n-                ptr,\n-                len,\n-                frame,\n-                ref lock,\n-            } => InvalidMemoryLockRelease { ptr, len, frame, lock: lock.clone() },\n-            DeallocatedLockedMemory {\n-                ptr,\n-                ref lock,\n-            } => DeallocatedLockedMemory { ptr, lock: lock.clone() },\n-            ValidationFailure(ref s) => ValidationFailure(s.clone()),\n-            CalledClosureAsFunction => CalledClosureAsFunction,\n-            VtableForArgumentlessMethod => VtableForArgumentlessMethod,\n-            ModifiedConstantMemory => ModifiedConstantMemory,\n-            AssumptionNotHeld => AssumptionNotHeld,\n-            InlineAsm => InlineAsm,\n-            TypeNotPrimitive(ty) => TypeNotPrimitive(tcx.lift(&ty)?),\n-            ReallocatedWrongMemoryKind(ref a, ref b) => {\n-                ReallocatedWrongMemoryKind(a.clone(), b.clone())\n-            },\n-            DeallocatedWrongMemoryKind(ref a, ref b) => {\n-                DeallocatedWrongMemoryKind(a.clone(), b.clone())\n-            },\n-            ReallocateNonBasePtr => ReallocateNonBasePtr,\n-            DeallocateNonBasePtr => DeallocateNonBasePtr,\n-            IncorrectAllocationInformation(a, b, c, d) => {\n-                IncorrectAllocationInformation(a, b, c, d)\n-            },\n-            Layout(lay) => Layout(tcx.lift(&lay)?),\n-            HeapAllocZeroBytes => HeapAllocZeroBytes,\n-            HeapAllocNonPowerOfTwoAlignment(n) => HeapAllocNonPowerOfTwoAlignment(n),\n-            Unreachable => Unreachable,\n-            Panic { ref msg, ref file, line, col } => Panic {\n-                msg: msg.clone(),\n-                file: file.clone(),\n-                line, col,\n-            },\n-            ReadFromReturnPointer => ReadFromReturnPointer,\n-            PathNotFound(ref v) => PathNotFound(v.clone()),\n-            UnimplementedTraitSelection => UnimplementedTraitSelection,\n-            TypeckError => TypeckError,\n-            TooGeneric => TooGeneric,\n-            CheckMatchError => CheckMatchError,\n-            ReferencedConstant(ref err) => ReferencedConstant(tcx.lift(&**err)?.into()),\n-            OverflowNeg => OverflowNeg,\n-            Overflow(op) => Overflow(op),\n-            DivisionByZero => DivisionByZero,\n-            RemainderByZero => RemainderByZero,\n-            GeneratorResumedAfterReturn => GeneratorResumedAfterReturn,\n-            GeneratorResumedAfterPanic => GeneratorResumedAfterPanic,\n-            InfiniteLoop => InfiniteLoop,\n-        })\n-    }\n-}\n-\n-impl<'a, 'tcx> Lift<'tcx> for ty::layout::LayoutError<'a> {\n-    type Lifted = ty::layout::LayoutError<'tcx>;\n-    fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n-        match *self {\n-            ty::layout::LayoutError::Unknown(ref ty) => {\n-                tcx.lift(ty).map(ty::layout::LayoutError::Unknown)\n-            }\n-            ty::layout::LayoutError::SizeOverflow(ref ty) => {\n-                tcx.lift(ty).map(ty::layout::LayoutError::SizeOverflow)\n-            }\n-        }\n-    }\n-}\n-\n impl<'a, 'tcx> Lift<'tcx> for ty::InstanceDef<'a> {\n     type Lifted = ty::InstanceDef<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {"}, {"sha": "1f66ee36170dc510d119e536ba3fa0925930f107", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -9,12 +9,11 @@\n // except according to those terms.\n \n use llvm;\n-use rustc::mir::interpret::{ConstEvalErr, read_target_uint};\n+use rustc::mir::interpret::{ErrorHandled, read_target_uint};\n use rustc_mir::const_eval::const_field;\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n use rustc_data_structures::indexed_vec::Idx;\n-use rustc_data_structures::sync::Lrc;\n use rustc::mir::interpret::{GlobalId, Pointer, Scalar, Allocation, ConstValue, AllocType};\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::{self, HasDataLayout, LayoutOf, Size};\n@@ -124,7 +123,7 @@ pub fn const_alloc_to_llvm(cx: &CodegenCx<'ll, '_>, alloc: &Allocation) -> &'ll\n pub fn codegen_static_initializer(\n     cx: &CodegenCx<'ll, 'tcx>,\n     def_id: DefId,\n-) -> Result<(&'ll Value, &'tcx Allocation), Lrc<ConstEvalErr<'tcx>>> {\n+) -> Result<(&'ll Value, &'tcx Allocation), ErrorHandled> {\n     let instance = ty::Instance::mono(cx.tcx, def_id);\n     let cid = GlobalId {\n         instance,\n@@ -145,7 +144,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n         &mut self,\n         bx: &Builder<'a, 'll, 'tcx>,\n         constant: &'tcx ty::Const<'tcx>,\n-    ) -> Result<&'tcx ty::Const<'tcx>, Lrc<ConstEvalErr<'tcx>>> {\n+    ) -> Result<&'tcx ty::Const<'tcx>, ErrorHandled> {\n         match constant.val {\n             ConstValue::Unevaluated(def_id, ref substs) => {\n                 let tcx = bx.tcx();\n@@ -165,7 +164,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n         &mut self,\n         bx: &Builder<'a, 'll, 'tcx>,\n         constant: &mir::Constant<'tcx>,\n-    ) -> Result<&'tcx ty::Const<'tcx>, Lrc<ConstEvalErr<'tcx>>> {\n+    ) -> Result<&'tcx ty::Const<'tcx>, ErrorHandled> {\n         let c = self.monomorphize(&constant.literal);\n         self.fully_evaluate(bx, c)\n     }\n@@ -176,7 +175,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n         bx: &Builder<'a, 'll, 'tcx>,\n         span: Span,\n         ty: Ty<'tcx>,\n-        constant: Result<&'tcx ty::Const<'tcx>, Lrc<ConstEvalErr<'tcx>>>,\n+        constant: Result<&'tcx ty::Const<'tcx>, ErrorHandled>,\n     ) -> (&'ll Value, Ty<'tcx>) {\n         constant\n             .and_then(|c| {\n@@ -185,7 +184,7 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                     ty::Array(_, n) => n.unwrap_usize(bx.tcx()),\n                     ref other => bug!(\"invalid simd shuffle type: {}\", other),\n                 };\n-                let values: Result<Vec<_>, Lrc<_>> = (0..fields).map(|field| {\n+                let values: Result<Vec<_>, ErrorHandled> = (0..fields).map(|field| {\n                     let field = const_field(\n                         bx.tcx(),\n                         ty::ParamEnv::reveal_all(),\n@@ -211,9 +210,9 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                 let llval = C_struct(bx.cx, &values?, false);\n                 Ok((llval, c.ty))\n             })\n-            .unwrap_or_else(|e| {\n-                e.report_as_error(\n-                    bx.tcx().at(span),\n+            .unwrap_or_else(|_| {\n+                bx.tcx().sess.span_err(\n+                    span,\n                     \"could not evaluate shuffle_indices at compile time\",\n                 );\n                 // We've errored, so we don't have to produce working code."}, {"sha": "25f03cbe97075e5e5d23b753621fc04e9f4b54f1", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -8,11 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::mir::interpret::{ConstValue, ConstEvalErr};\n+use rustc::mir::interpret::{ConstValue, ErrorHandled};\n use rustc::mir;\n use rustc::ty;\n use rustc::ty::layout::{self, Align, LayoutOf, TyLayout};\n use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::indexed_vec::Idx;\n \n use base;\n use common::{CodegenCx, C_undef, C_usize};\n@@ -79,7 +80,7 @@ impl OperandRef<'ll, 'tcx> {\n \n     pub fn from_const(bx: &Builder<'a, 'll, 'tcx>,\n                       val: &'tcx ty::Const<'tcx>)\n-                      -> Result<OperandRef<'ll, 'tcx>, Lrc<ConstEvalErr<'tcx>>> {\n+                      -> Result<OperandRef<'ll, 'tcx>, ErrorHandled> {\n         let layout = bx.cx.layout_of(val.ty);\n \n         if layout.is_zst() {\n@@ -424,10 +425,13 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                 self.eval_mir_constant(bx, constant)\n                     .and_then(|c| OperandRef::from_const(bx, c))\n                     .unwrap_or_else(|err| {\n-                        err.report_as_error(\n-                            bx.tcx().at(constant.span),\n-                            \"could not evaluate constant operand\",\n-                        );\n+                        match err {\n+                            // errored or at least linted\n+                            ErrorHandled::Reported => {},\n+                            ErrorHandled::TooGeneric => {\n+                                bug!(\"codgen encountered polymorphic constant\")\n+                            },\n+                        }\n                         // Allow RalfJ to sleep soundly knowing that even refactorings that remove\n                         // the above error (or silence it under some conditions) will not cause UB\n                         let fnname = bx.cx.get_intrinsic(&(\"llvm.trap\"));"}, {"sha": "597b6ae236676263a352f5e2858c90e788f65b61", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1590,7 +1590,7 @@ fn validate_const<'a, 'tcx>(\n     }\n }\n \n-fn check_const(cx: &LateContext, body_id: hir::BodyId, what: &str) {\n+fn check_const(cx: &LateContext, body_id: hir::BodyId) {\n     let def_id = cx.tcx.hir.body_owner_def_id(body_id);\n     let is_static = cx.tcx.is_static(def_id).is_some();\n     let param_env = if is_static {\n@@ -1603,27 +1603,15 @@ fn check_const(cx: &LateContext, body_id: hir::BodyId, what: &str) {\n         instance: ty::Instance::mono(cx.tcx, def_id),\n         promoted: None\n     };\n-    match cx.tcx.const_eval(param_env.and(cid)) {\n-        Ok(val) => validate_const(cx.tcx, val, param_env, cid, what),\n-        Err(err) => {\n-            // errors for statics are already reported directly in the query, avoid duplicates\n-            if !is_static {\n-                let span = cx.tcx.def_span(def_id);\n-                err.report_as_lint(\n-                    cx.tcx.at(span),\n-                    &format!(\"this {} cannot be used\", what),\n-                    cx.current_lint_root(),\n-                );\n-            }\n-        },\n-    }\n+    // trigger the query once for all constants since that will already report the errors\n+    let _ = cx.tcx.const_eval(param_env.and(cid));\n }\n \n struct UnusedBrokenConstVisitor<'a, 'tcx: 'a>(&'a LateContext<'a, 'tcx>);\n \n impl<'a, 'tcx, 'v> hir::intravisit::Visitor<'v> for UnusedBrokenConstVisitor<'a, 'tcx> {\n     fn visit_nested_body(&mut self, id: hir::BodyId) {\n-        check_const(self.0, id, \"array length\");\n+        check_const(self.0, id);\n     }\n     fn nested_visit_map<'this>(&'this mut self) -> hir::intravisit::NestedVisitorMap<'this, 'v> {\n         hir::intravisit::NestedVisitorMap::None\n@@ -1634,10 +1622,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedBrokenConst {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n         match it.node {\n             hir::ItemKind::Const(_, body_id) => {\n-                check_const(cx, body_id, \"constant\");\n+                check_const(cx, body_id);\n             },\n             hir::ItemKind::Static(_, _, body_id) => {\n-                check_const(cx, body_id, \"static\");\n+                check_const(cx, body_id);\n             },\n             hir::ItemKind::Ty(ref ty, _) => hir::intravisit::walk_ty(\n                 &mut UnusedBrokenConstVisitor(cx),"}, {"sha": "211b8471115cc458ac976bc78a3da4cf805a66ce", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -152,7 +152,6 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         UnreachablePub: UnreachablePub,\n         UnnameableTestItems: UnnameableTestItems::new(),\n         TypeAliasBounds: TypeAliasBounds,\n-        UnusedBrokenConst: UnusedBrokenConst,\n         TrivialConstraints: TrivialConstraints,\n         TypeLimits: TypeLimits::new(),\n         MissingDoc: MissingDoc::new(),"}, {"sha": "6ad1536a63052412e5f1a87cb00c5ab5db6f7480", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 100, "deletions": 44, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -17,13 +17,16 @@ use std::hash::Hash;\n use std::collections::hash_map::Entry;\n \n use rustc::hir::{self, def_id::DefId};\n-use rustc::mir::interpret::ConstEvalErr;\n+use rustc::hir::def::Def;\n+use rustc::mir::interpret::{ConstEvalErr, ErrorHandled};\n use rustc::mir;\n use rustc::ty::{self, Ty, TyCtxt, Instance, query::TyCtxtAt};\n use rustc::ty::layout::{self, Size, LayoutOf, TyLayout};\n use rustc::ty::subst::Subst;\n+use rustc::util::nodemap::FxHashSet;\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::fx::FxHashMap;\n+use rustc::util::common::ErrorReported;\n \n use syntax::ast::Mutability;\n use syntax::source_map::{Span, DUMMY_SP};\n@@ -509,13 +512,11 @@ pub fn const_field<'a, 'tcx>(\n         // this is not called for statics.\n         op_to_const(&ecx, field, true)\n     })();\n-    result.map_err(|err| {\n-        let (trace, span) = ecx.generate_stacktrace(None);\n-        ConstEvalErr {\n-            error: err,\n-            stacktrace: trace,\n-            span,\n-        }.into()\n+    result.map_err(|error| {\n+        let stacktrace = ecx.generate_stacktrace(None);\n+        let err = ::rustc::mir::interpret::ConstEvalErr { error, stacktrace, span: ecx.tcx.span };\n+        err.report_as_error(ecx.tcx, \"could not access field of constant\");\n+        ErrorHandled::Reported\n     })\n }\n \n@@ -531,41 +532,69 @@ pub fn const_variant_index<'a, 'tcx>(\n     Ok(ecx.read_discriminant(op)?.1)\n }\n \n-pub fn const_to_allocation_provider<'a, 'tcx>(\n-    _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    val: &'tcx ty::Const<'tcx>,\n-) -> &'tcx Allocation {\n-    // FIXME: This really does not need to be a query.  Instead, we should have a query for statics\n-    // that returns an allocation directly (or an `AllocId`?), after doing a sanity check of the\n-    // value and centralizing error reporting.\n-    match val.val {\n-        ConstValue::ByRef(_, alloc, offset) => {\n-            assert_eq!(offset.bytes(), 0);\n-            return alloc;\n-        },\n-        _ => bug!(\"const_to_allocation called on non-static\"),\n-    }\n+fn validate_const<'a, 'tcx>(\n+    tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n+    constant: &'tcx ty::Const<'tcx>,\n+    key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n+) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n+    let cid = key.value;\n+    let ecx = mk_eval_cx(tcx, cid.instance, key.param_env).unwrap();\n+    let val = (|| {\n+        let op = ecx.const_to_op(constant)?;\n+        let mut todo = vec![(op, Vec::new())];\n+        let mut seen = FxHashSet();\n+        seen.insert(op);\n+        while let Some((op, mut path)) = todo.pop() {\n+            ecx.validate_operand(\n+                op,\n+                &mut path,\n+                &mut seen,\n+                &mut todo,\n+            )?;\n+        }\n+        Ok(constant)\n+    })();\n+\n+    val.map_err(|error| {\n+        let stacktrace = ecx.generate_stacktrace(None);\n+        let err = ::rustc::mir::interpret::ConstEvalErr { error, stacktrace, span: ecx.tcx.span };\n+        match err.struct_error(ecx.tcx, \"it is undefined behavior to use this value\") {\n+            Ok(mut diag) => {\n+                diag.note(\"The rules on what exactly is undefined behavior aren't clear, \\\n+                    so this check might be overzealous. Please open an issue on the rust compiler \\\n+                    repository if you believe it should not be considered undefined behavior\",\n+                );\n+                diag.emit();\n+                ErrorHandled::Reported\n+            }\n+            Err(err) => err,\n+        }\n+    })\n }\n \n pub fn const_eval_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n+) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n+    tcx.const_eval_raw(key).and_then(|val| {\n+        validate_const(tcx, val, key)\n+    })\n+}\n+\n+pub fn const_eval_raw_provider<'a, 'tcx>(\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n ) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n     trace!(\"const eval: {:?}\", key);\n     let cid = key.value;\n     let def_id = cid.instance.def.def_id();\n \n     if let Some(id) = tcx.hir.as_local_node_id(def_id) {\n         let tables = tcx.typeck_tables_of(def_id);\n-        let span = tcx.def_span(def_id);\n \n         // Do match-check before building MIR\n-        if tcx.check_match(def_id).is_err() {\n-            return Err(ConstEvalErr {\n-                error: EvalErrorKind::CheckMatchError.into(),\n-                stacktrace: vec![],\n-                span,\n-            }.into());\n+        if let Err(ErrorReported) = tcx.check_match(def_id) {\n+            return Err(ErrorHandled::Reported)\n         }\n \n         if let hir::BodyOwnerKind::Const = tcx.hir.body_owner_kind(id) {\n@@ -574,11 +603,7 @@ pub fn const_eval_provider<'a, 'tcx>(\n \n         // Do not continue into miri if typeck errors occurred; it will fail horribly\n         if tables.tainted_by_errors {\n-            return Err(ConstEvalErr {\n-                error: EvalErrorKind::CheckMatchError.into(),\n-                stacktrace: vec![],\n-                span,\n-            }.into());\n+            return Err(ErrorHandled::Reported)\n         }\n     };\n \n@@ -593,19 +618,50 @@ pub fn const_eval_provider<'a, 'tcx>(\n             }\n         }\n         op_to_const(&ecx, op, normalize)\n-    }).map_err(|err| {\n-        let (trace, span) = ecx.generate_stacktrace(None);\n-        let err = ConstEvalErr {\n-            error: err,\n-            stacktrace: trace,\n-            span,\n-        };\n+    }).map_err(|error| {\n+        let stacktrace = ecx.generate_stacktrace(None);\n+        let err = ConstEvalErr { error, stacktrace, span: ecx.tcx.span };\n         if tcx.is_static(def_id).is_some() {\n-            err.report_as_error(ecx.tcx, \"could not evaluate static initializer\");\n+            let err = err.report_as_error(ecx.tcx, \"could not evaluate static initializer\");\n             if tcx.sess.err_count() == 0 {\n-                span_bug!(span, \"static eval failure didn't emit an error: {:#?}\", err);\n+                span_bug!(ecx.tcx.span, \"static eval failure didn't emit an error: {:#?}\", err);\n+            }\n+            err\n+        } else if def_id.is_local() {\n+            // constant defined in this crate, we can figure out a lint level!\n+            match tcx.describe_def(def_id) {\n+                Some(Def::Const(_)) | Some(Def::AssociatedConst(_)) => {\n+                    let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n+                    err.report_as_lint(\n+                        tcx.at(tcx.def_span(def_id)),\n+                        \"any use of this value will cause an error\",\n+                        node_id,\n+                    )\n+                },\n+                _ => if let Some(p) = cid.promoted {\n+                    let span = tcx.optimized_mir(def_id).promoted[p].span;\n+                    if let EvalErrorKind::ReferencedConstant = err.error.kind {\n+                        err.report_as_error(\n+                            tcx.at(span),\n+                            \"evaluation of constant expression failed\",\n+                        )\n+                    } else {\n+                        err.report_as_lint(\n+                            tcx.at(span),\n+                            \"reaching this expression at runtime will panic or abort\",\n+                            tcx.hir.as_local_node_id(def_id).unwrap(),\n+                        )\n+                    }\n+                } else {\n+                    err.report_as_error(\n+                        ecx.tcx,\n+                        \"evaluation of constant value failed\",\n+                    )\n+                },\n             }\n+        } else {\n+            // use of constant from other crate\n+            err.report_as_error(ecx.tcx, \"could not evaluate constant\")\n         }\n-        err.into()\n     })\n }"}, {"sha": "48fcdd42ff5e0b3ecf4419aa18c171d5d58045f2", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -15,7 +15,7 @@ use hair::cx::block;\n use hair::cx::to_ref::ToRef;\n use hair::util::UserAnnotatedTyHelpers;\n use rustc::hir::def::{Def, CtorKind};\n-use rustc::mir::interpret::GlobalId;\n+use rustc::mir::interpret::{GlobalId, ErrorHandled};\n use rustc::ty::{self, AdtKind, Ty};\n use rustc::ty::adjustment::{Adjustment, Adjust, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::cast::CastKind as TyCastKind;\n@@ -571,8 +571,9 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let span = cx.tcx.def_span(def_id);\n             let count = match cx.tcx.at(span).const_eval(cx.param_env.and(global_id)) {\n                 Ok(cv) => cv.unwrap_usize(cx.tcx),\n-                Err(e) => {\n-                    e.report_as_error(cx.tcx.at(span), \"could not evaluate array length\");\n+                Err(ErrorHandled::Reported) => 0,\n+                Err(ErrorHandled::TooGeneric) => {\n+                    cx.tcx.sess.span_err(span, \"array lengths can't depend on generic parameters\");\n                     0\n                 },\n             };"}, {"sha": "4649c28aff518b0e29f1bd94fd946c86a891820d", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -732,13 +732,13 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                             Ok(value) => {\n                                 return self.const_to_pat(instance, value, id, span)\n                             },\n-                            Err(err) => {\n-                                err.report_as_error(\n-                                    self.tcx.at(span),\n+                            Err(_) => {\n+                                self.tcx.sess.span_err(\n+                                    span,\n                                     \"could not evaluate constant pattern\",\n                                 );\n                                 PatternKind::Wild\n-                            },\n+                            }\n                         }\n                     },\n                     None => {"}, {"sha": "ce991c50330bb79ca64ad9adccb502fd85088dde", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -611,8 +611,9 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         } else {\n             self.param_env\n         };\n-        self.tcx.const_eval(param_env.and(gid))\n-            .map_err(|err| EvalErrorKind::ReferencedConstant(err).into())\n+        self.tcx.const_eval(param_env.and(gid)).map_err(|_| {\n+            EvalErrorKind::ReferencedConstant.into()\n+        })\n     }\n \n     pub fn dump_place(&self, place: Place<M::PointerTag>) {\n@@ -679,7 +680,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n         }\n     }\n \n-    pub fn generate_stacktrace(&self, explicit_span: Option<Span>) -> (Vec<FrameInfo>, Span) {\n+    pub fn generate_stacktrace(&self, explicit_span: Option<Span>) -> Vec<FrameInfo> {\n         let mut last_span = None;\n         let mut frames = Vec::new();\n         // skip 1 because the last frame is just the environment of the constant\n@@ -716,7 +717,7 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tc\n             frames.push(FrameInfo { span, location, lint_root });\n         }\n         trace!(\"generate stacktrace: {:#?}, {:?}\", frames, explicit_span);\n-        (frames, self.tcx.span)\n+        frames\n     }\n \n     #[inline(always)]"}, {"sha": "b46e914133aad9089388069985127585eeaae673", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -368,10 +368,12 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             instance,\n             promoted: None,\n         };\n-        tcx.const_eval(ty::ParamEnv::reveal_all().and(gid)).map_err(|err| {\n+        // use the raw query here to break validation cycles. Later uses of the static will call the\n+        // full query anyway\n+        tcx.const_eval_raw(ty::ParamEnv::reveal_all().and(gid)).map_err(|_| {\n             // no need to report anything, the const_eval call takes care of that for statics\n             assert!(tcx.is_static(def_id).is_some());\n-            EvalErrorKind::ReferencedConstant(err).into()\n+            EvalErrorKind::ReferencedConstant.into()\n         }).map(|const_val| {\n             if let ConstValue::ByRef(_, allocation, _) = const_val.val {\n                 // We got tcx memory. Let the machine figure out whether and how to"}, {"sha": "d4495d3085d31425212240ed40604ee93fa24288", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -94,6 +94,7 @@ pub fn provide(providers: &mut Providers) {\n     shim::provide(providers);\n     transform::provide(providers);\n     providers.const_eval = const_eval::const_eval_provider;\n+    providers.const_eval_raw = const_eval::const_eval_raw_provider;\n     providers.check_match = hair::pattern::check_match;\n }\n "}, {"sha": "e8c482e836ff4e04ea179b1e33682790c0d75b77", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -202,7 +202,7 @@ use rustc::session::config;\n use rustc::mir::{self, Location, Promoted};\n use rustc::mir::visit::Visitor as MirVisitor;\n use rustc::mir::mono::MonoItem;\n-use rustc::mir::interpret::{Scalar, GlobalId, AllocType};\n+use rustc::mir::interpret::{Scalar, GlobalId, AllocType, ErrorHandled};\n \n use monomorphize::{self, Instance};\n use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n@@ -988,6 +988,20 @@ impl<'b, 'a, 'v> ItemLikeVisitor<'v> for RootCollector<'b, 'a, 'v> {\n             hir::ItemKind::Const(..) => {\n                 // const items only generate mono items if they are\n                 // actually used somewhere. Just declaring them is insufficient.\n+\n+                // but even just declaring them must collect the items they refer to\n+                let def_id = self.tcx.hir.local_def_id(item.id);\n+\n+                let instance = Instance::mono(self.tcx, def_id);\n+                let cid = GlobalId {\n+                    instance,\n+                    promoted: None,\n+                };\n+                let param_env = ty::ParamEnv::reveal_all();\n+\n+                if let Ok(val) = self.tcx.const_eval(param_env.and(cid)) {\n+                    collect_const(self.tcx, val, instance.substs, &mut self.output);\n+                }\n             }\n             hir::ItemKind::Fn(..) => {\n                 let def_id = self.tcx.hir.local_def_id(item.id);\n@@ -1198,15 +1212,10 @@ fn collect_neighbours<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         };\n         match tcx.const_eval(param_env.and(cid)) {\n             Ok(val) => collect_const(tcx, val, instance.substs, output),\n-            Err(err) => {\n-                use rustc::mir::interpret::EvalErrorKind;\n-                if let EvalErrorKind::ReferencedConstant(_) = err.error.kind {\n-                    err.report_as_error(\n-                        tcx.at(mir.promoted[i].span),\n-                        \"erroneous constant used\",\n-                    );\n-                }\n-            },\n+            Err(ErrorHandled::Reported) => {},\n+            Err(ErrorHandled::TooGeneric) => span_bug!(\n+                mir.promoted[i].span, \"collection encountered polymorphic constant\",\n+            ),\n         }\n     }\n }\n@@ -1247,14 +1256,10 @@ fn collect_const<'a, 'tcx>(\n             };\n             match tcx.const_eval(param_env.and(cid)) {\n                 Ok(val) => val.val,\n-                Err(err) => {\n-                    let span = tcx.def_span(def_id);\n-                    err.report_as_error(\n-                        tcx.at(span),\n-                        \"constant evaluation error\",\n-                    );\n-                    return;\n-                }\n+                Err(ErrorHandled::Reported) => return,\n+                Err(ErrorHandled::TooGeneric) => span_bug!(\n+                    tcx.def_span(def_id), \"collection encountered polymorphic constant\",\n+                ),\n             }\n         },\n         _ => constant.val,"}, {"sha": "6da40aa4a116bc7c5076904d0a50b6535a6a2da9", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 19, "deletions": 20, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -18,7 +18,7 @@ use rustc::mir::{NullOp, UnOp, StatementKind, Statement, BasicBlock, LocalKind};\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext};\n use rustc::mir::interpret::{\n-    ConstEvalErr, EvalErrorKind, Scalar, GlobalId, EvalResult\n+    ConstEvalErr, EvalErrorKind, Scalar, GlobalId, EvalResult,\n };\n use rustc::ty::{TyCtxt, self, Instance};\n use interpret::{self, EvalContext, Value, OpTy, MemoryKind, ScalarMaybeUndef};\n@@ -45,12 +45,17 @@ impl MirPass for ConstProp {\n             return;\n         }\n         match tcx.describe_def(source.def_id) {\n-            // skip statics/consts because they'll be evaluated by miri anyway\n-            Some(Def::Const(..)) |\n-            Some(Def::Static(..)) => return,\n-            // we still run on associated constants, because they might not get evaluated\n-            // within the current crate\n-            _ => {},\n+            // Only run const prop on functions, methods, closures and associated constants\n+            | Some(Def::Fn(_))\n+            | Some(Def::Method(_))\n+            | Some(Def::AssociatedConst(_))\n+            | Some(Def::Closure(_))\n+            => {}\n+            // skip anon_const/statics/consts because they'll be evaluated by miri anyway\n+            def => {\n+                trace!(\"ConstProp skipped for {:?} ({:?})\", source.def_id, def);\n+                return\n+            },\n         }\n         trace!(\"ConstProp starting for {:?}\", source.def_id);\n \n@@ -144,8 +149,8 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n         let r = match f(self) {\n             Ok(val) => Some(val),\n             Err(error) => {\n-                let (stacktrace, span) = self.ecx.generate_stacktrace(None);\n-                let diagnostic = ConstEvalErr { span, error, stacktrace };\n+                let stacktrace = self.ecx.generate_stacktrace(None);\n+                let diagnostic = ConstEvalErr { span: source_info.span, error, stacktrace };\n                 use rustc::mir::interpret::EvalErrorKind::*;\n                 match diagnostic.error.kind {\n                     // don't report these, they make no sense in a const prop context\n@@ -208,7 +213,7 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                     | ReadFromReturnPointer\n                     | GeneratorResumedAfterReturn\n                     | GeneratorResumedAfterPanic\n-                    | ReferencedConstant(_)\n+                    | ReferencedConstant\n                     | InfiniteLoop\n                     => {\n                         // FIXME: report UB here\n@@ -223,7 +228,6 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                     | UnimplementedTraitSelection\n                     | TypeckError\n                     | TooGeneric\n-                    | CheckMatchError\n                     // these are just noise\n                     => {},\n \n@@ -264,16 +268,11 @@ impl<'a, 'mir, 'tcx> ConstPropagator<'a, 'mir, 'tcx> {\n                 Some((op, c.span))\n             },\n             Err(error) => {\n-                let (stacktrace, span) = self.ecx.generate_stacktrace(None);\n-                let err = ConstEvalErr {\n-                    span,\n-                    error,\n-                    stacktrace,\n+                let stacktrace = self.ecx.generate_stacktrace(None);\n+                let err = ::rustc::mir::interpret::ConstEvalErr {\n+                    error, stacktrace, span: source_info.span,\n                 };\n-                err.report_as_error(\n-                    self.tcx.at(source_info.span),\n-                    \"could not evaluate constant\",\n-                );\n+                err.report_as_error(self.ecx.tcx, \"erroneous constant used\");\n                 None\n             },\n         }"}, {"sha": "cdd25b8aa7acc59c5f264a807f1678a20886974d", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -827,6 +827,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                     ref_id: id_from_def_id(def_id),\n                 })\n             }\n+            HirDef::Closure(_) |\n             HirDef::PrimTy(..) |\n             HirDef::SelfTy(..) |\n             HirDef::Label(..) |"}, {"sha": "55cfac20e9410771e5c1b99d52d37e001d2d5022", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -4238,13 +4238,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 };\n                 let count = tcx.const_eval(param_env.and(global_id));\n \n-                if let Err(ref err) = count {\n-                    err.report_as_error(\n-                        tcx.at(tcx.def_span(count_def_id)),\n-                        \"could not evaluate repeat length\",\n-                    );\n-                }\n-\n                 let uty = match expected {\n                     ExpectHasType(uty) => {\n                         match uty.sty {"}, {"sha": "0eee0b4c7b89de609e3fb6e0fb2c910cc2bd129b", "filename": "src/test/compile-fail/const-fn-error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-error.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -16,7 +16,7 @@ const fn f(x: usize) -> usize {\n     let mut sum = 0;\n     //~^ let bindings in constant functions are unstable\n     //~| statements in constant functions are unstable\n-    for i in 0..x {\n+    for i in 0..x { //~ ERROR E0080\n         //~^ ERROR E0015\n         //~| ERROR E0019\n         sum += i;\n@@ -26,5 +26,5 @@ const fn f(x: usize) -> usize {\n \n #[allow(unused_variables)]\n fn main() {\n-    let a : [i32; f(X)]; //~ ERROR E0080\n+    let a : [i32; f(X)];\n }"}, {"sha": "1ed513033fd5d34f34644abd70d560d0fb750d02", "filename": "src/test/compile-fail/issue-52443.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-52443.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -14,5 +14,5 @@ fn main() {\n     [(); {while true {break}; 0}]; //~ ERROR constant contains unimplemented expression type\n     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n     //~^ ERROR constant contains unimplemented expression type\n-    //~| ERROR could not evaluate repeat length\n+    //~| ERROR evaluation of constant value failed\n }"}, {"sha": "2403d50db39536cae4225c1c22f61c91f774249e", "filename": "src/test/ui/array_const_index-0.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Farray_const_index-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Farray_const_index-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-0.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -11,8 +11,9 @@\n const A: &'static [i32] = &[];\n const B: i32 = (&A)[1];\n //~^ index out of bounds: the len is 0 but the index is 1\n-//~| ERROR this constant cannot be used\n+//~| ERROR any use of this value will cause an error\n+//~| ERROR any use of this value will cause an error\n \n fn main() {\n-    let _ = B;\n+    let _ = B; //~ ERROR erroneous constant used\n }"}, {"sha": "95ed88bde108c4dd9d3432aba3ae5d4376ca8cb7", "filename": "src/test/ui/array_const_index-0.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Farray_const_index-0.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-0.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,4 +1,4 @@\n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/array_const_index-0.rs:12:1\n    |\n LL | const B: i32 = (&A)[1];\n@@ -8,5 +8,20 @@ LL | const B: i32 = (&A)[1];\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: aborting due to previous error\n+error: any use of this value will cause an error\n+  --> $DIR/array_const_index-0.rs:12:1\n+   |\n+LL | const B: i32 = (&A)[1];\n+   | ^^^^^^^^^^^^^^^-------^\n+   |                |\n+   |                index out of bounds: the len is 0 but the index is 1\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/array_const_index-0.rs:18:13\n+   |\n+LL |     let _ = B; //~ ERROR erroneous constant used\n+   |             ^ referenced constant has errors\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "0a49348761c08bbd32d465e3fba47d84905e26c1", "filename": "src/test/ui/array_const_index-1.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Farray_const_index-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Farray_const_index-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-1.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -11,8 +11,9 @@\n const A: [i32; 0] = [];\n const B: i32 = A[1];\n //~^ index out of bounds: the len is 0 but the index is 1\n-//~| ERROR this constant cannot be used\n+//~| ERROR any use of this value will cause an error\n+//~| ERROR any use of this value will cause an error\n \n fn main() {\n-    let _ = B;\n+    let _ = B; //~ ERROR erroneous constant used\n }"}, {"sha": "5fcfc14e2c0d005a1680d86900a38ac6ff9dcf24", "filename": "src/test/ui/array_const_index-1.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Farray_const_index-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray_const_index-1.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,4 +1,4 @@\n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/array_const_index-1.rs:12:1\n    |\n LL | const B: i32 = A[1];\n@@ -8,5 +8,20 @@ LL | const B: i32 = A[1];\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: aborting due to previous error\n+error: any use of this value will cause an error\n+  --> $DIR/array_const_index-1.rs:12:1\n+   |\n+LL | const B: i32 = A[1];\n+   | ^^^^^^^^^^^^^^^----^\n+   |                |\n+   |                index out of bounds: the len is 0 but the index is 1\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/array_const_index-1.rs:18:13\n+   |\n+LL |     let _ = B; //~ ERROR erroneous constant used\n+   |             ^ referenced constant has errors\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "227364cffd1159ad0e0609f9a7c87ece8d1a6359", "filename": "src/test/ui/consts/const-array-oob.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -16,7 +16,7 @@ const FOO: [usize; 3] = [1, 2, 3];\n const BAR: usize = FOO[5]; // no error, because the error below occurs before regular const eval\n \n const BLUB: [u32; FOO[4]] = [5, 6];\n-//~^ ERROR could not evaluate constant expression [E0080]\n+//~^ ERROR evaluation of constant value failed [E0080]\n //~| index out of bounds: the len is 3 but the index is 4\n \n fn main() {"}, {"sha": "5986376938b9094217a65d68ad4ab13cfe3c5c4f", "filename": "src/test/ui/consts/const-array-oob.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-array-oob.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,19 +1,9 @@\n-error: index out of bounds: the len is 3 but the index is 4\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const-array-oob.rs:18:19\n    |\n LL | const BLUB: [u32; FOO[4]] = [5, 6];\n-   |                   ^^^^^^\n-   |\n-   = note: #[deny(const_err)] on by default\n-\n-error[E0080]: could not evaluate constant expression\n-  --> $DIR/const-array-oob.rs:18:13\n-   |\n-LL | const BLUB: [u32; FOO[4]] = [5, 6];\n-   |             ^^^^^^------^\n-   |                   |\n-   |                   index out of bounds: the len is 3 but the index is 4\n+   |                   ^^^^^^ index out of bounds: the len is 3 but the index is 4\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "e0427d0d04c9a9cc3bf6166997b4cbd0d5bbf7cd", "filename": "src/test/ui/consts/const-call.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-call.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -4,6 +4,12 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL |     let _ = [0; f(2)];\n    |                 ^^^^\n \n-error: aborting due to previous error\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-call.rs:16:17\n+   |\n+LL |     let _ = [0; f(2)];\n+   |                 ^^^^ calling non-const fn `f`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0015`."}, {"sha": "488e6f49e14bbb5cb1f578a22e13c75b5f370c51", "filename": "src/test/ui/consts/const-err-early.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -11,16 +11,17 @@\n #![deny(const_err)]\n \n pub const A: i8 = -std::i8::MIN; //~ ERROR const_err\n+//~^ ERROR const_err\n pub const B: u8 = 200u8 + 200u8; //~ ERROR const_err\n pub const C: u8 = 200u8 * 4; //~ ERROR const_err\n pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR const_err\n pub const E: u8 = [5u8][1]; //~ ERROR const_err\n \n fn main() {\n-    let _a = A;\n-    let _b = B;\n-    let _c = C;\n-    let _d = D;\n-    let _e = E;\n-    let _e = [6u8][1];\n+    let _a = A; //~ ERROR erroneous constant used\n+    let _b = B; //~ ERROR erroneous constant used\n+    let _c = C; //~ ERROR erroneous constant used\n+    let _d = D; //~ ERROR erroneous constant used\n+    let _e = E; //~ ERROR erroneous constant used\n+    let _e = [6u8][1]; //~ ERROR index out of bounds\n }"}, {"sha": "21c7bf0a70a498e324786c14264595a1f3b180eb", "filename": "src/test/ui/consts/const-err-early.stderr", "status": "modified", "additions": 55, "deletions": 10, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-early.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,4 +1,4 @@\n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-err-early.rs:13:1\n    |\n LL | pub const A: i8 = -std::i8::MIN; //~ ERROR const_err\n@@ -12,37 +12,82 @@ note: lint level defined here\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n-error: this constant cannot be used\n-  --> $DIR/const-err-early.rs:14:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:15:1\n    |\n LL | pub const B: u8 = 200u8 + 200u8; //~ ERROR const_err\n    | ^^^^^^^^^^^^^^^^^^-------------^\n    |                   |\n    |                   attempt to add with overflow\n \n-error: this constant cannot be used\n-  --> $DIR/const-err-early.rs:15:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:16:1\n    |\n LL | pub const C: u8 = 200u8 * 4; //~ ERROR const_err\n    | ^^^^^^^^^^^^^^^^^^---------^\n    |                   |\n    |                   attempt to multiply with overflow\n \n-error: this constant cannot be used\n-  --> $DIR/const-err-early.rs:16:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:17:1\n    |\n LL | pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR const_err\n    | ^^^^^^^^^^^^^^^^^^-----------------^\n    |                   |\n    |                   attempt to subtract with overflow\n \n-error: this constant cannot be used\n-  --> $DIR/const-err-early.rs:17:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:18:1\n    |\n LL | pub const E: u8 = [5u8][1]; //~ ERROR const_err\n    | ^^^^^^^^^^^^^^^^^^--------^\n    |                   |\n    |                   index out of bounds: the len is 1 but the index is 1\n \n-error: aborting due to 5 previous errors\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-early.rs:13:1\n+   |\n+LL | pub const A: i8 = -std::i8::MIN; //~ ERROR const_err\n+   | ^^^^^^^^^^^^^^^^^^-------------^\n+   |                   |\n+   |                   attempt to negate with overflow\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-err-early.rs:21:14\n+   |\n+LL |     let _a = A; //~ ERROR erroneous constant used\n+   |              ^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-err-early.rs:22:14\n+   |\n+LL |     let _b = B; //~ ERROR erroneous constant used\n+   |              ^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-err-early.rs:23:14\n+   |\n+LL |     let _c = C; //~ ERROR erroneous constant used\n+   |              ^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-err-early.rs:24:14\n+   |\n+LL |     let _d = D; //~ ERROR erroneous constant used\n+   |              ^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-err-early.rs:25:14\n+   |\n+LL |     let _e = E; //~ ERROR erroneous constant used\n+   |              ^ referenced constant has errors\n+\n+error: index out of bounds: the len is 1 but the index is 1\n+  --> $DIR/const-err-early.rs:26:14\n+   |\n+LL |     let _e = [6u8][1]; //~ ERROR index out of bounds\n+   |              ^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "c3960b839925f11171f53f3a60d109b40e4fb1c9", "filename": "src/test/ui/consts/const-err-multi.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -11,17 +11,16 @@\n #![deny(const_err)]\n \n pub const A: i8 = -std::i8::MIN;\n-//~^ ERROR this constant cannot be used\n-pub const B: i8 = A;\n //~^ ERROR const_err\n //~| ERROR const_err\n+pub const B: i8 = A;\n+//~^ ERROR const_err\n pub const C: u8 = A as u8;\n //~^ ERROR const_err\n-//~| ERROR const_err\n pub const D: i8 = 50 - A;\n //~^ ERROR const_err\n-//~| ERROR const_err\n \n fn main() {\n     let _ = (A, B, C, D);\n+    //~^ ERROR erroneous constant used\n }"}, {"sha": "0717302dbf9aa4b3adc6a66741d1004a160b550c", "filename": "src/test/ui/consts/const-err-multi.stderr", "status": "modified", "additions": 22, "deletions": 34, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err-multi.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,4 +1,4 @@\n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-err-multi.rs:13:1\n    |\n LL | pub const A: i8 = -std::i8::MIN;\n@@ -12,56 +12,44 @@ note: lint level defined here\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n-error: referenced constant has errors\n-  --> $DIR/const-err-multi.rs:15:1\n-   |\n-LL | pub const A: i8 = -std::i8::MIN;\n-   |                   ------------- attempt to negate with overflow\n-LL | //~^ ERROR this constant cannot be used\n-LL | pub const B: i8 = A;\n-   | ^^^^^^^^^^^^^^^^^^^^\n-\n-error: this constant cannot be used\n-  --> $DIR/const-err-multi.rs:15:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-multi.rs:16:1\n    |\n LL | pub const B: i8 = A;\n    | ^^^^^^^^^^^^^^^^^^-^\n    |                   |\n    |                   referenced constant has errors\n \n-error: referenced constant has errors\n-  --> $DIR/const-err-multi.rs:18:1\n-   |\n-LL | pub const A: i8 = -std::i8::MIN;\n-   |                   ------------- attempt to negate with overflow\n-...\n-LL | pub const C: u8 = A as u8;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-err-multi.rs:18:1\n    |\n LL | pub const C: u8 = A as u8;\n    | ^^^^^^^^^^^^^^^^^^-------^\n    |                   |\n    |                   referenced constant has errors\n \n-error: referenced constant has errors\n-  --> $DIR/const-err-multi.rs:21:1\n-   |\n-LL | pub const A: i8 = -std::i8::MIN;\n-   |                   ------------- attempt to negate with overflow\n-...\n-LL | pub const D: i8 = 50 - A;\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: this constant cannot be used\n-  --> $DIR/const-err-multi.rs:21:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-multi.rs:20:1\n    |\n LL | pub const D: i8 = 50 - A;\n    | ^^^^^^^^^^^^^^^^^^------^\n    |                   |\n    |                   referenced constant has errors\n \n-error: aborting due to 7 previous errors\n+error: any use of this value will cause an error\n+  --> $DIR/const-err-multi.rs:13:1\n+   |\n+LL | pub const A: i8 = -std::i8::MIN;\n+   | ^^^^^^^^^^^^^^^^^^-------------^\n+   |                   |\n+   |                   attempt to negate with overflow\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-err-multi.rs:24:13\n+   |\n+LL |     let _ = (A, B, C, D);\n+   |             ^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 6 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "7c59e8b953596d2d4b4683849532beb33ef17b90", "filename": "src/test/ui/consts/const-err.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -10,23 +10,18 @@\n \n // compile-flags: -Zforce-overflow-checks=on\n \n-// these errors are not actually \"const_err\", they occur in codegen/consts\n-// and are unconditional warnings that can't be denied or allowed\n-\n #![allow(exceeding_bitshifts)]\n-#![allow(const_err)]\n+#![warn(const_err)]\n \n fn black_box<T>(_: T) {\n     unimplemented!()\n }\n \n-// Make sure that the two uses get two errors.\n const FOO: u8 = [5u8][1];\n-//~^ ERROR constant evaluation error\n-//~| index out of bounds: the len is 1 but the index is 1\n+//~^ WARN any use of this value will cause an error\n+//~| WARN any use of this value will cause an error\n \n fn main() {\n     black_box((FOO, FOO));\n-    //~^ ERROR referenced constant has errors\n-    //~| ERROR could not evaluate constant\n+    //~^ ERROR erroneous constant used\n }"}, {"sha": "b46277f4b019fe99592a88f4745787d8fd431ac3", "filename": "src/test/ui/consts/const-err.stderr", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,26 +1,31 @@\n-error[E0080]: referenced constant has errors\n-  --> $DIR/const-err.rs:29:15\n+warning: any use of this value will cause an error\n+  --> $DIR/const-err.rs:20:1\n    |\n LL | const FOO: u8 = [5u8][1];\n-   |                 -------- index out of bounds: the len is 1 but the index is 1\n-...\n-LL |     black_box((FOO, FOO));\n-   |               ^^^^^^^^^^\n-\n-error[E0080]: could not evaluate constant\n-  --> $DIR/const-err.rs:29:15\n+   | ^^^^^^^^^^^^^^^^--------^\n+   |                 |\n+   |                 index out of bounds: the len is 1 but the index is 1\n    |\n-LL |     black_box((FOO, FOO));\n-   |               ^^^^^^^^^^ referenced constant has errors\n+note: lint level defined here\n+  --> $DIR/const-err.rs:14:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n \n-error[E0080]: constant evaluation error\n-  --> $DIR/const-err.rs:24:1\n+warning: any use of this value will cause an error\n+  --> $DIR/const-err.rs:20:1\n    |\n LL | const FOO: u8 = [5u8][1];\n    | ^^^^^^^^^^^^^^^^--------^\n    |                 |\n    |                 index out of bounds: the len is 1 but the index is 1\n \n-error: aborting due to 3 previous errors\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-err.rs:25:15\n+   |\n+LL |     black_box((FOO, FOO));\n+   |               ^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "0bbc254453cff6b20b91bc50e7be15ea7247c1f8", "filename": "src/test/ui/consts/const-err4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -16,7 +16,7 @@ union Foo {\n \n enum Bar {\n     Boo = [unsafe { Foo { b: () }.a }; 4][3],\n-    //~^ ERROR could not evaluate enum discriminant\n+    //~^ ERROR evaluation of constant value failed\n }\n \n fn main() {"}, {"sha": "bb50f38062ee995349ad340781c69f73f408eac3", "filename": "src/test/ui/consts/const-err4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err4.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: could not evaluate enum discriminant\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const-err4.rs:18:11\n    |\n LL |     Boo = [unsafe { Foo { b: () }.a }; 4][3],"}, {"sha": "b6c35b8ebbd9353368b1b598d37178c87ebcdc73", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.nll.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.nll.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -0,0 +1,29 @@\n+warning: any use of this value will cause an error\n+  --> $DIR/conditional_array_execution.rs:15:1\n+   |\n+LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n+   | ^^^^^^^^^^^^^^^^^^-----^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                   |\n+   |                   attempt to subtract with overflow\n+   |\n+note: lint level defined here\n+  --> $DIR/conditional_array_execution.rs:11:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/conditional_array_execution.rs:19:14\n+   |\n+LL |     println!(\"{}\", FOO);\n+   |              ^^^^  --- referenced constant has errors\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/conditional_array_execution.rs:19:20\n+   |\n+LL |     println!(\"{}\", FOO);\n+   |                    ^^^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "4e245c6b9e8cf665adc01fac20da87b085d992db", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -13,10 +13,9 @@\n const X: u32 = 5;\n const Y: u32 = 6;\n const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-//~^ WARN this constant cannot be used\n+//~^ WARN any use of this value will cause an error\n \n fn main() {\n     println!(\"{}\", FOO);\n     //~^ ERROR\n-    //~| ERROR\n }"}, {"sha": "90131080ed16b55bbd4ff0f219e52c9d3bfa260a", "filename": "src/test/ui/consts/const-eval/conditional_array_execution.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconditional_array_execution.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,4 +1,4 @@\n-warning: this constant cannot be used\n+warning: any use of this value will cause an error\n   --> $DIR/conditional_array_execution.rs:15:1\n    |\n LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n@@ -12,21 +12,12 @@ note: lint level defined here\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n-error[E0080]: referenced constant has errors\n-  --> $DIR/conditional_array_execution.rs:19:20\n-   |\n-LL | const FOO: u32 = [X - Y, Y - X][(X < Y) as usize];\n-   |                   ----- attempt to subtract with overflow\n-...\n-LL |     println!(\"{}\", FOO);\n-   |                    ^^^\n-\n-error[E0080]: erroneous constant used\n+error[E0080]: evaluation of constant expression failed\n   --> $DIR/conditional_array_execution.rs:19:20\n    |\n LL |     println!(\"{}\", FOO);\n    |                    ^^^ referenced constant has errors\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "70c98977301a93a32b8ffff5f9f43eb43b9ef15c", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-2.stderr", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-2.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,12 +1,8 @@\n-error[E0080]: could not evaluate constant pattern\n+error: could not evaluate constant pattern\n   --> $DIR/const-eval-overflow-2.rs:25:9\n    |\n-LL | const NEG_NEG_128: i8 = -NEG_128;\n-   |                         -------- attempt to negate with overflow\n-...\n LL |         NEG_NEG_128 => println!(\"A\"),\n    |         ^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0080`."}, {"sha": "bcef9eff2f899d9907a9e6b1be0943ba1e3cdb37", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-3.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-3.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,19 +1,9 @@\n-error: attempt to add with overflow\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const-eval-overflow-3.rs:30:11\n    |\n LL |     = [0; (i8::MAX + 1) as usize];\n-   |           ^^^^^^^^^^^^^\n-   |\n-   = note: #[deny(const_err)] on by default\n-\n-error[E0080]: could not evaluate repeat length\n-  --> $DIR/const-eval-overflow-3.rs:30:11\n-   |\n-LL |     = [0; (i8::MAX + 1) as usize];\n-   |           -------------^^^^^^^^^\n-   |           |\n-   |           attempt to add with overflow\n+   |           ^^^^^^^^^^^^^ attempt to add with overflow\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "5d692d9d7fc9e86bee58f5b8335dd8e135ef6c09", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -21,8 +21,7 @@ use std::{u8, u16, u32, u64, usize};\n \n const A_I8_T\n     : [u32; (i8::MAX as i8 + 1i8) as usize]\n-    //~^ ERROR attempt to add with overflow\n-    //~| ERROR could not evaluate constant expression\n+    //~^ ERROR evaluation of constant value failed\n     = [0; (i8::MAX as usize) + 1];\n \n fn main() {"}, {"sha": "fd186dc719cd5b20a2a174586ceaa60faf799a1a", "filename": "src/test/ui/consts/const-eval/const-eval-overflow-4.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow-4.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,19 +1,9 @@\n-error: attempt to add with overflow\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const-eval-overflow-4.rs:23:13\n    |\n LL |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n-   |             ^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: #[deny(const_err)] on by default\n-\n-error[E0080]: could not evaluate constant expression\n-  --> $DIR/const-eval-overflow-4.rs:23:7\n-   |\n-LL |     : [u32; (i8::MAX as i8 + 1i8) as usize]\n-   |       ^^^^^^---------------------^^^^^^^^^^\n-   |             |\n-   |             attempt to add with overflow\n+   |             ^^^^^^^^^^^^^^^^^^^^^ attempt to add with overflow\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "ee29423a90cde84070ee5e67ac805fb9d2568bff", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -21,62 +21,55 @@ use std::fmt;\n use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n-const VALS_I8: (i8,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+     //~^ const_err\n     (\n      i8::MIN - 1,\n      );\n \n-const VALS_I16: (i16,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n     (\n      i16::MIN - 1,\n      );\n \n-const VALS_I32: (i32,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n     (\n      i32::MIN - 1,\n      );\n \n-const VALS_I64: (i64,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n     (\n      i64::MIN - 1,\n      );\n \n-const VALS_U8: (u8,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n     (\n      u8::MIN - 1,\n      );\n \n-const VALS_U16: (u16,) = (\n-     //~^ ERROR this constant cannot be used\n+const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n      u16::MIN - 1,\n      );\n \n-const VALS_U32: (u32,) = (\n-     //~^ ERROR this constant cannot be used\n+const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n      u32::MIN - 1,\n      );\n \n-const VALS_U64: (u64,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n     (\n      u64::MIN - 1,\n      );\n \n fn main() {\n-    foo(VALS_I8);\n-    foo(VALS_I16);\n-    foo(VALS_I32);\n-    foo(VALS_I64);\n+    foo(VALS_I8); //~ ERROR erroneous constant used\n+    foo(VALS_I16); //~ ERROR erroneous constant used\n+    foo(VALS_I32); //~ ERROR erroneous constant used\n+    foo(VALS_I64); //~ ERROR erroneous constant used\n \n-    foo(VALS_U8);\n-    foo(VALS_U16);\n-    foo(VALS_U32);\n-    foo(VALS_U64);\n+    foo(VALS_U8); //~ ERROR erroneous constant used\n+    foo(VALS_U16); //~ ERROR erroneous constant used\n+    foo(VALS_U32); //~ ERROR erroneous constant used\n+    foo(VALS_U64); //~ ERROR erroneous constant used\n }\n \n fn foo<T>(_: T) {"}, {"sha": "f10a6eee6de9c66cfc7452f9f9a05158db5405be", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2.stderr", "status": "modified", "additions": 84, "deletions": 31, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,8 +1,8 @@\n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:24:1\n    |\n-LL | / const VALS_I8: (i8,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+LL | |      //~^ const_err\n LL | |     (\n LL | |      i8::MIN - 1,\n    | |      ----------- attempt to subtract with overflow\n@@ -15,80 +15,133 @@ note: lint level defined here\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2.rs:30:1\n    |\n-LL | / const VALS_I16: (i16,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      i16::MIN - 1,\n    | |      ------------ attempt to subtract with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2.rs:36:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:35:1\n    |\n-LL | / const VALS_I32: (i32,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      i32::MIN - 1,\n    | |      ------------ attempt to subtract with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2.rs:42:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:40:1\n    |\n-LL | / const VALS_I64: (i64,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      i64::MIN - 1,\n    | |      ------------ attempt to subtract with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2.rs:48:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:45:1\n    |\n-LL | / const VALS_U8: (u8,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      u8::MIN - 1,\n    | |      ----------- attempt to subtract with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2.rs:54:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:50:1\n    |\n-LL | / const VALS_U16: (u16,) = (\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n LL | |      u16::MIN - 1,\n    | |      ------------ attempt to subtract with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2.rs:59:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:54:1\n    |\n-LL | / const VALS_U32: (u32,) = (\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n LL | |      u32::MIN - 1,\n    | |      ------------ attempt to subtract with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2.rs:64:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:58:1\n    |\n-LL | / const VALS_U64: (u64,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      u64::MIN - 1,\n    | |      ------------ attempt to subtract with overflow\n LL | |      );\n    | |_______^\n \n-error: aborting due to 8 previous errors\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2.rs:24:1\n+   |\n+LL | / const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+LL | |      //~^ const_err\n+LL | |     (\n+LL | |      i8::MIN - 1,\n+   | |      ----------- attempt to subtract with overflow\n+LL | |      );\n+   | |_______^\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2.rs:64:5\n+   |\n+LL |     foo(VALS_I8); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2.rs:65:5\n+   |\n+LL |     foo(VALS_I16); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2.rs:66:5\n+   |\n+LL |     foo(VALS_I32); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2.rs:67:5\n+   |\n+LL |     foo(VALS_I64); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2.rs:69:5\n+   |\n+LL |     foo(VALS_U8); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2.rs:70:5\n+   |\n+LL |     foo(VALS_U16); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2.rs:71:5\n+   |\n+LL |     foo(VALS_U32); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2.rs:72:5\n+   |\n+LL |     foo(VALS_U64); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 17 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "55dc2a894054a44025bbb69b41fcca854c279fd7", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -21,62 +21,55 @@ use std::fmt;\n use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n-const VALS_I8: (i8,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+     //~^ const_err\n     (\n      i8::MAX + 1,\n      );\n \n-const VALS_I16: (i16,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n     (\n      i16::MAX + 1,\n      );\n \n-const VALS_I32: (i32,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n     (\n      i32::MAX + 1,\n      );\n \n-const VALS_I64: (i64,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n     (\n      i64::MAX + 1,\n      );\n \n-const VALS_U8: (u8,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n     (\n      u8::MAX + 1,\n      );\n \n-const VALS_U16: (u16,) = (\n-     //~^ ERROR this constant cannot be used\n+const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n      u16::MAX + 1,\n      );\n \n-const VALS_U32: (u32,) = (\n-     //~^ ERROR this constant cannot be used\n+const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n      u32::MAX + 1,\n      );\n \n-const VALS_U64: (u64,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n     (\n      u64::MAX + 1,\n      );\n \n fn main() {\n-    foo(VALS_I8);\n-    foo(VALS_I16);\n-    foo(VALS_I32);\n-    foo(VALS_I64);\n+    foo(VALS_I8); //~ ERROR erroneous constant used\n+    foo(VALS_I16); //~ ERROR erroneous constant used\n+    foo(VALS_I32); //~ ERROR erroneous constant used\n+    foo(VALS_I64); //~ ERROR erroneous constant used\n \n-    foo(VALS_U8);\n-    foo(VALS_U16);\n-    foo(VALS_U32);\n-    foo(VALS_U64);\n+    foo(VALS_U8); //~ ERROR erroneous constant used\n+    foo(VALS_U16); //~ ERROR erroneous constant used\n+    foo(VALS_U32); //~ ERROR erroneous constant used\n+    foo(VALS_U64); //~ ERROR erroneous constant used\n }\n \n fn foo<T>(_: T) {"}, {"sha": "3b78fb51a623a1352b641572b3f08b97b60d0850", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2b.stderr", "status": "modified", "additions": 84, "deletions": 31, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2b.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,8 +1,8 @@\n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:24:1\n    |\n-LL | / const VALS_I8: (i8,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+LL | |      //~^ const_err\n LL | |     (\n LL | |      i8::MAX + 1,\n    | |      ----------- attempt to add with overflow\n@@ -15,80 +15,133 @@ note: lint level defined here\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2b.rs:30:1\n    |\n-LL | / const VALS_I16: (i16,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      i16::MAX + 1,\n    | |      ------------ attempt to add with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2b.rs:36:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:35:1\n    |\n-LL | / const VALS_I32: (i32,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      i32::MAX + 1,\n    | |      ------------ attempt to add with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2b.rs:42:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:40:1\n    |\n-LL | / const VALS_I64: (i64,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      i64::MAX + 1,\n    | |      ------------ attempt to add with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2b.rs:48:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:45:1\n    |\n-LL | / const VALS_U8: (u8,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      u8::MAX + 1,\n    | |      ----------- attempt to add with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2b.rs:54:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:50:1\n    |\n-LL | / const VALS_U16: (u16,) = (\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n LL | |      u16::MAX + 1,\n    | |      ------------ attempt to add with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2b.rs:59:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:54:1\n    |\n-LL | / const VALS_U32: (u32,) = (\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n LL | |      u32::MAX + 1,\n    | |      ------------ attempt to add with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2b.rs:64:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:58:1\n    |\n-LL | / const VALS_U64: (u64,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      u64::MAX + 1,\n    | |      ------------ attempt to add with overflow\n LL | |      );\n    | |_______^\n \n-error: aborting due to 8 previous errors\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2b.rs:24:1\n+   |\n+LL | / const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+LL | |      //~^ const_err\n+LL | |     (\n+LL | |      i8::MAX + 1,\n+   | |      ----------- attempt to add with overflow\n+LL | |      );\n+   | |_______^\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2b.rs:64:5\n+   |\n+LL |     foo(VALS_I8); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2b.rs:65:5\n+   |\n+LL |     foo(VALS_I16); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2b.rs:66:5\n+   |\n+LL |     foo(VALS_I32); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2b.rs:67:5\n+   |\n+LL |     foo(VALS_I64); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2b.rs:69:5\n+   |\n+LL |     foo(VALS_U8); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2b.rs:70:5\n+   |\n+LL |     foo(VALS_U16); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2b.rs:71:5\n+   |\n+LL |     foo(VALS_U32); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2b.rs:72:5\n+   |\n+LL |     foo(VALS_U64); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 17 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "93ba11efc59987277bd3cf8fa8b3b6e210a97616", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -21,62 +21,55 @@ use std::fmt;\n use std::{i8, i16, i32, i64, isize};\n use std::{u8, u16, u32, u64, usize};\n \n-const VALS_I8: (i8,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+     //~^ const_err\n     (\n      i8::MIN * 2,\n      );\n \n-const VALS_I16: (i16,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n     (\n      i16::MIN * 2,\n      );\n \n-const VALS_I32: (i32,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n     (\n      i32::MIN * 2,\n      );\n \n-const VALS_I64: (i64,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n     (\n      i64::MIN * 2,\n      );\n \n-const VALS_U8: (u8,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n     (\n      u8::MAX * 2,\n      );\n \n-const VALS_U16: (u16,) = (\n-     //~^ ERROR this constant cannot be used\n+const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n      u16::MAX * 2,\n      );\n \n-const VALS_U32: (u32,) = (\n-     //~^ ERROR this constant cannot be used\n+const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n      u32::MAX * 2,\n      );\n \n-const VALS_U64: (u64,) =\n-     //~^ ERROR this constant cannot be used\n+const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n     (\n      u64::MAX * 2,\n      );\n \n fn main() {\n-    foo(VALS_I8);\n-    foo(VALS_I16);\n-    foo(VALS_I32);\n-    foo(VALS_I64);\n+    foo(VALS_I8); //~ ERROR erroneous constant used\n+    foo(VALS_I16); //~ ERROR erroneous constant used\n+    foo(VALS_I32); //~ ERROR erroneous constant used\n+    foo(VALS_I64); //~ ERROR erroneous constant used\n \n-    foo(VALS_U8);\n-    foo(VALS_U16);\n-    foo(VALS_U32);\n-    foo(VALS_U64);\n+    foo(VALS_U8); //~ ERROR erroneous constant used\n+    foo(VALS_U16); //~ ERROR erroneous constant used\n+    foo(VALS_U32); //~ ERROR erroneous constant used\n+    foo(VALS_U64); //~ ERROR erroneous constant used\n }\n \n fn foo<T>(_: T) {"}, {"sha": "abaae4bd54227c87f5e4f802be9045ecfddfeddd", "filename": "src/test/ui/consts/const-eval/const-eval-overflow2c.stderr", "status": "modified", "additions": 84, "deletions": 31, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-eval-overflow2c.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,8 +1,8 @@\n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:24:1\n    |\n-LL | / const VALS_I8: (i8,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+LL | |      //~^ const_err\n LL | |     (\n LL | |      i8::MIN * 2,\n    | |      ----------- attempt to multiply with overflow\n@@ -15,80 +15,133 @@ note: lint level defined here\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-eval-overflow2c.rs:30:1\n    |\n-LL | / const VALS_I16: (i16,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_I16: (i16,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      i16::MIN * 2,\n    | |      ------------ attempt to multiply with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2c.rs:36:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:35:1\n    |\n-LL | / const VALS_I32: (i32,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_I32: (i32,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      i32::MIN * 2,\n    | |      ------------ attempt to multiply with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2c.rs:42:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:40:1\n    |\n-LL | / const VALS_I64: (i64,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_I64: (i64,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      i64::MIN * 2,\n    | |      ------------ attempt to multiply with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2c.rs:48:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:45:1\n    |\n-LL | / const VALS_U8: (u8,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_U8: (u8,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      u8::MAX * 2,\n    | |      ----------- attempt to multiply with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2c.rs:54:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:50:1\n    |\n-LL | / const VALS_U16: (u16,) = (\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_U16: (u16,) = ( //~ ERROR any use of this value will cause an error\n LL | |      u16::MAX * 2,\n    | |      ------------ attempt to multiply with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2c.rs:59:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:54:1\n    |\n-LL | / const VALS_U32: (u32,) = (\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_U32: (u32,) = ( //~ ERROR any use of this value will cause an error\n LL | |      u32::MAX * 2,\n    | |      ------------ attempt to multiply with overflow\n LL | |      );\n    | |_______^\n \n-error: this constant cannot be used\n-  --> $DIR/const-eval-overflow2c.rs:64:1\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:58:1\n    |\n-LL | / const VALS_U64: (u64,) =\n-LL | |      //~^ ERROR this constant cannot be used\n+LL | / const VALS_U64: (u64,) = //~ ERROR any use of this value will cause an error\n LL | |     (\n LL | |      u64::MAX * 2,\n    | |      ------------ attempt to multiply with overflow\n LL | |      );\n    | |_______^\n \n-error: aborting due to 8 previous errors\n+error: any use of this value will cause an error\n+  --> $DIR/const-eval-overflow2c.rs:24:1\n+   |\n+LL | / const VALS_I8: (i8,) = //~ ERROR any use of this value will cause an error\n+LL | |      //~^ const_err\n+LL | |     (\n+LL | |      i8::MIN * 2,\n+   | |      ----------- attempt to multiply with overflow\n+LL | |      );\n+   | |_______^\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2c.rs:64:5\n+   |\n+LL |     foo(VALS_I8); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2c.rs:65:5\n+   |\n+LL |     foo(VALS_I16); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2c.rs:66:5\n+   |\n+LL |     foo(VALS_I32); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2c.rs:67:5\n+   |\n+LL |     foo(VALS_I64); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2c.rs:69:5\n+   |\n+LL |     foo(VALS_U8); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2c.rs:70:5\n+   |\n+LL |     foo(VALS_U16); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2c.rs:71:5\n+   |\n+LL |     foo(VALS_U32); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-eval-overflow2c.rs:72:5\n+   |\n+LL |     foo(VALS_U64); //~ ERROR erroneous constant used\n+   |     ^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 17 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "05d79a7d63393f1a07d6e6ac0821f185bc95a01d", "filename": "src/test/ui/consts/const-eval/const-pointer-values-in-various-types.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst-pointer-values-in-various-types.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -25,86 +25,86 @@ fn main() {\n     //~^ ERROR this constant likely exhibits undefined behavior\n \n     const I32_REF_U8_UNION: u8 = unsafe { Nonsense { int_32_ref: &3 }.uint_8 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const I32_REF_U16_UNION: u16 = unsafe { Nonsense { int_32_ref: &3 }.uint_16 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const I32_REF_U32_UNION: u32 = unsafe { Nonsense { int_32_ref: &3 }.uint_32 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const I32_REF_U64_UNION: u64 = unsafe { Nonsense { int_32_ref: &3 }.uint_64 };\n     //~^ ERROR this constant likely exhibits undefined behavior\n \n     const I32_REF_U128_UNION: u128 = unsafe { Nonsense { int_32_ref: &3 }.uint_128 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const I32_REF_I8_UNION: i8 = unsafe { Nonsense { int_32_ref: &3 }.int_8 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const I32_REF_I16_UNION: i16 = unsafe { Nonsense { int_32_ref: &3 }.int_16 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const I32_REF_I32_UNION: i32 = unsafe { Nonsense { int_32_ref: &3 }.int_32 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const I32_REF_I64_UNION: i64 = unsafe { Nonsense { int_32_ref: &3 }.int_64 };\n     //~^ ERROR this constant likely exhibits undefined behavior\n \n     const I32_REF_I128_UNION: i128 = unsafe { Nonsense { int_32_ref: &3 }.int_128 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const I32_REF_F32_UNION: f32 = unsafe { Nonsense { int_32_ref: &3 }.float_32 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const I32_REF_F64_UNION: f64 = unsafe { Nonsense { int_32_ref: &3 }.float_64 };\n     //~^ ERROR this constant likely exhibits undefined behavior\n \n     const I32_REF_BOOL_UNION: bool = unsafe { Nonsense { int_32_ref: &3 }.truthy_falsey };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const I32_REF_CHAR_UNION: char = unsafe { Nonsense { int_32_ref: &3 }.character };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const STR_U8_UNION: u8 = unsafe { Nonsense { stringy: \"3\" }.uint_8 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const STR_U16_UNION: u16 = unsafe { Nonsense { stringy: \"3\" }.uint_16 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const STR_U32_UNION: u32 = unsafe { Nonsense { stringy: \"3\" }.uint_32 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const STR_U64_UNION: u64 = unsafe { Nonsense { stringy: \"3\" }.uint_64 };\n     //~^ ERROR this constant likely exhibits undefined behavior\n \n     const STR_U128_UNION: u128 = unsafe { Nonsense { stringy: \"3\" }.uint_128 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const STR_I8_UNION: i8 = unsafe { Nonsense { stringy: \"3\" }.int_8 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const STR_I16_UNION: i16 = unsafe { Nonsense { stringy: \"3\" }.int_16 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const STR_I32_UNION: i32 = unsafe { Nonsense { stringy: \"3\" }.int_32 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const STR_I64_UNION: i64 = unsafe { Nonsense { stringy: \"3\" }.int_64 };\n     //~^ ERROR this constant likely exhibits undefined behavior\n \n     const STR_I128_UNION: i128 = unsafe { Nonsense { stringy: \"3\" }.int_128 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const STR_F32_UNION: f32 = unsafe { Nonsense { stringy: \"3\" }.float_32 };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const STR_F64_UNION: f64 = unsafe { Nonsense { stringy: \"3\" }.float_64 };\n     //~^ ERROR this constant likely exhibits undefined behavior\n \n     const STR_BOOL_UNION: bool = unsafe { Nonsense { stringy: \"3\" }.truthy_falsey };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n \n     const STR_CHAR_UNION: char = unsafe { Nonsense { stringy: \"3\" }.character };\n-    //~^ ERROR this constant cannot be used\n+    //~^ ERROR any use of this value will cause an error\n }"}, {"sha": "9af631afed4ffd3c8591351362c845a54f8b0562", "filename": "src/test/ui/consts/const-eval/const_panic.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -9,14 +9,13 @@\n // except according to those terms.\n \n #![feature(const_panic)]\n+#![crate_type = \"lib\"]\n \n-fn main() {}\n+pub const Z: () = panic!(\"cheese\");\n+//~^ ERROR any use of this value will cause an error\n \n-const Z: () = panic!(\"cheese\");\n-//~^ ERROR this constant cannot be used\n+pub const Y: () = unreachable!();\n+//~^ ERROR any use of this value will cause an error\n \n-const Y: () = unreachable!();\n-//~^ ERROR this constant cannot be used\n-\n-const X: () = unimplemented!();\n-//~^ ERROR this constant cannot be used\n+pub const X: () = unimplemented!();\n+//~^ ERROR any use of this value will cause an error"}, {"sha": "fcdbcbf5bfa69cc6933573dd9544406b64e105f5", "filename": "src/test/ui/consts/const-eval/const_panic.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,31 +1,31 @@\n-error: this constant cannot be used\n-  --> $DIR/const_panic.rs:15:1\n+error: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:14:1\n    |\n-LL | const Z: () = panic!(\"cheese\");\n-   | ^^^^^^^^^^^^^^----------------^\n-   |               |\n-   |               the evaluated program panicked at 'cheese', $DIR/const_panic.rs:15:15\n+LL | pub const Z: () = panic!(\"cheese\");\n+   | ^^^^^^^^^^^^^^^^^^----------------^\n+   |                   |\n+   |                   the evaluated program panicked at 'cheese', $DIR/const_panic.rs:14:19\n    |\n    = note: #[deny(const_err)] on by default\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: this constant cannot be used\n-  --> $DIR/const_panic.rs:18:1\n+error: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:17:1\n    |\n-LL | const Y: () = unreachable!();\n-   | ^^^^^^^^^^^^^^--------------^\n-   |               |\n-   |               the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:18:15\n+LL | pub const Y: () = unreachable!();\n+   | ^^^^^^^^^^^^^^^^^^--------------^\n+   |                   |\n+   |                   the evaluated program panicked at 'internal error: entered unreachable code', $DIR/const_panic.rs:17:19\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: this constant cannot be used\n-  --> $DIR/const_panic.rs:21:1\n+error: any use of this value will cause an error\n+  --> $DIR/const_panic.rs:20:1\n    |\n-LL | const X: () = unimplemented!();\n-   | ^^^^^^^^^^^^^^----------------^\n-   |               |\n-   |               the evaluated program panicked at 'not yet implemented', $DIR/const_panic.rs:21:15\n+LL | pub const X: () = unimplemented!();\n+   | ^^^^^^^^^^^^^^^^^^----------------^\n+   |                   |\n+   |                   the evaluated program panicked at 'not yet implemented', $DIR/const_panic.rs:20:19\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n "}, {"sha": "11da8742b10f6ad0c0b01a55a8ea2a4e262d4751", "filename": "src/test/ui/consts/const-eval/const_panic_libcore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -13,10 +13,10 @@\n #![feature(const_panic)]\n \n const Z: () = panic!(\"cheese\");\n-//~^ ERROR this constant cannot be used\n+//~^ ERROR any use of this value will cause an error\n \n const Y: () = unreachable!();\n-//~^ ERROR this constant cannot be used\n+//~^ ERROR any use of this value will cause an error\n \n const X: () = unimplemented!();\n-//~^ ERROR this constant cannot be used\n+//~^ ERROR any use of this value will cause an error"}, {"sha": "a8f04b96a8b1fb9fd3844ccf065455271c7cc5d1", "filename": "src/test/ui/consts/const-eval/const_panic_libcore.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,4 +1,4 @@\n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore.rs:15:1\n    |\n LL | const Z: () = panic!(\"cheese\");\n@@ -9,7 +9,7 @@ LL | const Z: () = panic!(\"cheese\");\n    = note: #[deny(const_err)] on by default\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore.rs:18:1\n    |\n LL | const Y: () = unreachable!();\n@@ -19,7 +19,7 @@ LL | const Y: () = unreachable!();\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const_panic_libcore.rs:21:1\n    |\n LL | const X: () = unimplemented!();"}, {"sha": "03365ae46abaf872c134b9b08a2e216fbf5a4d21", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_main.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -17,13 +17,13 @@\n use core::panic::PanicInfo;\n \n const Z: () = panic!(\"cheese\");\n-//~^ ERROR this constant cannot be used\n+//~^ ERROR any use of this value will cause an error\n \n const Y: () = unreachable!();\n-//~^ ERROR this constant cannot be used\n+//~^ ERROR any use of this value will cause an error\n \n const X: () = unimplemented!();\n-//~^ ERROR this constant cannot be used\n+//~^ ERROR any use of this value will cause an error\n \n #[lang = \"eh_personality\"]\n fn eh() {}"}, {"sha": "9a7c510029cbc7fc5c256908eb0dd117463a42dd", "filename": "src/test/ui/consts/const-eval/const_panic_libcore_main.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_panic_libcore_main.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,5 +1,5 @@\n-error: this constant cannot be used\n-  --> $DIR/const_panic_libcore_main.rs:19:1\n+error: any use of this value will cause an error\n+  --> $DIR/const_panic_libcore_main.rs:20:1\n    |\n LL | const Z: () = panic!(\"cheese\");\n    | ^^^^^^^^^^^^^^----------------^\n@@ -9,8 +9,8 @@ LL | const Z: () = panic!(\"cheese\");\n    = note: #[deny(const_err)] on by default\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: this constant cannot be used\n-  --> $DIR/const_panic_libcore_main.rs:22:1\n+error: any use of this value will cause an error\n+  --> $DIR/const_panic_libcore_main.rs:23:1\n    |\n LL | const Y: () = unreachable!();\n    | ^^^^^^^^^^^^^^--------------^\n@@ -19,8 +19,8 @@ LL | const Y: () = unreachable!();\n    |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: this constant cannot be used\n-  --> $DIR/const_panic_libcore_main.rs:25:1\n+error: any use of this value will cause an error\n+  --> $DIR/const_panic_libcore_main.rs:26:1\n    |\n LL | const X: () = unimplemented!();\n    | ^^^^^^^^^^^^^^----------------^"}, {"sha": "3cd2c04c9f1f496d8f297bba4d484a8605fd51d9", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -13,15 +13,15 @@\n fn main() {}\n \n // unconst and bad, will thus error in miri\n-const X: bool = &1 as *const i32 == &2 as *const i32; //~ ERROR cannot be used\n+const X: bool = &1 as *const i32 == &2 as *const i32; //~ ERROR any use of this value will cause\n // unconst and fine\n const X2: bool = 42 as *const i32 == 43 as *const i32;\n // unconst and fine\n const Y: usize = 42usize as *const i32 as usize + 1;\n // unconst and bad, will thus error in miri\n-const Y2: usize = &1 as *const i32 as usize + 1; //~ ERROR cannot be used\n+const Y2: usize = &1 as *const i32 as usize + 1; //~ ERROR any use of this value will cause\n // unconst and fine\n const Z: i32 = unsafe { *(&1 as *const i32) };\n // unconst and bad, will thus error in miri\n-const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR cannot be used\n-const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR cannot be used\n+const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR any use of this value will cause\n+const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR any use of this value will cause"}, {"sha": "72bbdeb0183d644e2c977c9d3449249a4bfcac89", "filename": "src/test/ui/consts/const-eval/const_raw_ptr_ops.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fconst_raw_ptr_ops.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,33 +1,33 @@\n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const_raw_ptr_ops.rs:16:1\n    |\n-LL | const X: bool = &1 as *const i32 == &2 as *const i32; //~ ERROR cannot be used\n+LL | const X: bool = &1 as *const i32 == &2 as *const i32; //~ ERROR any use of this value will cause\n    | ^^^^^^^^^^^^^^^^------------------------------------^\n    |                 |\n    |                 \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const_raw_ptr_ops.rs:22:1\n    |\n-LL | const Y2: usize = &1 as *const i32 as usize + 1; //~ ERROR cannot be used\n+LL | const Y2: usize = &1 as *const i32 as usize + 1; //~ ERROR any use of this value will cause\n    | ^^^^^^^^^^^^^^^^^^-----------------------------^\n    |                   |\n    |                   \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const_raw_ptr_ops.rs:26:1\n    |\n-LL | const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR cannot be used\n+LL | const Z2: i32 = unsafe { *(42 as *const i32) }; //~ ERROR any use of this value will cause\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^-------------------^^^\n    |                          |\n    |                          a memory access tried to interpret some bytes as a pointer\n \n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const_raw_ptr_ops.rs:27:1\n    |\n-LL | const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR cannot be used\n+LL | const Z3: i32 = unsafe { *(44 as *const i32) }; //~ ERROR any use of this value will cause\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^-------------------^^^\n    |                          |\n    |                          a memory access tried to interpret some bytes as a pointer"}, {"sha": "9dd7570232d37f13102901c953bebd71fcd0bed7", "filename": "src/test/ui/consts/const-eval/double_check2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fdouble_check2.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: this static likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/double_check2.rs:25:1\n    |\n LL | / static FOO: (&Foo, &Bar) = unsafe {( //~ undefined behavior"}, {"sha": "d23b6250b4df2e8830042120b1498c8f4c29f2e7", "filename": "src/test/ui/consts/const-eval/infinite_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -15,10 +15,10 @@ fn main() {\n     // The value of `n` will loop indefinitely (4 - 2 - 1 - 4).\n     let _ = [(); {\n         //~^ WARNING Constant evaluating a complex constant, this might take some time\n-        //~| ERROR could not evaluate repeat length\n         let mut n = 113383; // #20 in https://oeis.org/A006884\n         while n != 0 { //~ ERROR constant contains unimplemented expression type\n             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n+            //~^ ERROR evaluation of constant value failed\n         }\n         n\n     }];"}, {"sha": "2ff80e5efb57d49852b91cf4d0e71e924dc1f6b3", "filename": "src/test/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,8 +1,9 @@\n error[E0019]: constant contains unimplemented expression type\n-  --> $DIR/infinite_loop.rs:20:9\n+  --> $DIR/infinite_loop.rs:19:9\n    |\n LL | /         while n != 0 { //~ ERROR constant contains unimplemented expression type\n LL | |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n+LL | |             //~^ ERROR evaluation of constant value failed\n LL | |         }\n    | |_________^\n \n@@ -12,28 +13,18 @@ warning: Constant evaluating a complex constant, this might take some time\n LL |       let _ = [(); {\n    |  __________________^\n LL | |         //~^ WARNING Constant evaluating a complex constant, this might take some time\n-LL | |         //~| ERROR could not evaluate repeat length\n LL | |         let mut n = 113383; // #20 in https://oeis.org/A006884\n+LL | |         while n != 0 { //~ ERROR constant contains unimplemented expression type\n ...  |\n LL | |         n\n LL | |     }];\n    | |_____^\n \n-error[E0080]: could not evaluate repeat length\n-  --> $DIR/infinite_loop.rs:16:18\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/infinite_loop.rs:20:20\n    |\n-LL |       let _ = [(); {\n-   |  __________________^\n-LL | |         //~^ WARNING Constant evaluating a complex constant, this might take some time\n-LL | |         //~| ERROR could not evaluate repeat length\n-LL | |         let mut n = 113383; // #20 in https://oeis.org/A006884\n-LL | |         while n != 0 { //~ ERROR constant contains unimplemented expression type\n-LL | |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n-   | |                    ---------- duplicate interpreter state observed here, const evaluation will never terminate\n-LL | |         }\n-LL | |         n\n-LL | |     }];\n-   | |_____^\n+LL |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n+   |                    ^^^^^^^^^^ duplicate interpreter state observed here, const evaluation will never terminate\n \n error: aborting due to 2 previous errors\n "}, {"sha": "86a86922d3b792417967fe7496380c77a32955bd", "filename": "src/test/ui/consts/const-eval/issue-43197.nll.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.nll.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -0,0 +1,43 @@\n+warning: any use of this value will cause an error\n+  --> $DIR/issue-43197.rs:20:5\n+   |\n+LL |     const X: u32 = 0-1;\n+   |     ^^^^^^^^^^^^^^^---^\n+   |                    |\n+   |                    attempt to subtract with overflow\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-43197.rs:11:9\n+   |\n+LL | #![warn(const_err)]\n+   |         ^^^^^^^^^\n+\n+warning: any use of this value will cause an error\n+  --> $DIR/issue-43197.rs:22:5\n+   |\n+LL |     const Y: u32 = foo(0-1);\n+   |     ^^^^^^^^^^^^^^^^^^^---^^\n+   |                        |\n+   |                        attempt to subtract with overflow\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/issue-43197.rs:24:14\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |              ^^^^^^^  - referenced constant has errors\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/issue-43197.rs:24:26\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |                          ^ referenced constant has errors\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/issue-43197.rs:24:23\n+   |\n+LL |     println!(\"{} {}\", X, Y);\n+   |                       ^ referenced constant has errors\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "125b5e4d208ccc234f400f1d50fc02fd7fbbdab3", "filename": "src/test/ui/consts/const-eval/issue-43197.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -16,12 +16,10 @@ const fn foo(x: u32) -> u32 {\n \n fn main() {\n     const X: u32 = 0-1;\n-    //~^ WARN this constant cannot be used\n+    //~^ WARN any use of this value will cause\n     const Y: u32 = foo(0-1);\n-    //~^ WARN this constant cannot be used\n+    //~^ WARN any use of this value will cause\n     println!(\"{} {}\", X, Y);\n-    //~^ ERROR erroneous constant used\n-    //~| ERROR erroneous constant used\n-    //~| ERROR E0080\n-    //~| ERROR E0080\n+    //~^ ERROR evaluation of constant expression failed\n+    //~| ERROR evaluation of constant expression failed\n }"}, {"sha": "95d435818303b5fc0f4095ad4b927aa76c00f47b", "filename": "src/test/ui/consts/const-eval/issue-43197.stderr", "status": "modified", "additions": 9, "deletions": 27, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-43197.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,5 +1,5 @@\n-warning: this constant cannot be used\n-  --> $DIR/issue-43197.rs:18:5\n+warning: any use of this value will cause an error\n+  --> $DIR/issue-43197.rs:20:5\n    |\n LL |     const X: u32 = 0-1;\n    |     ^^^^^^^^^^^^^^^---^\n@@ -12,44 +12,26 @@ note: lint level defined here\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n-warning: this constant cannot be used\n-  --> $DIR/issue-43197.rs:20:5\n+warning: any use of this value will cause an error\n+  --> $DIR/issue-43197.rs:22:5\n    |\n LL |     const Y: u32 = foo(0-1);\n    |     ^^^^^^^^^^^^^^^^^^^---^^\n    |                        |\n    |                        attempt to subtract with overflow\n \n-error[E0080]: referenced constant has errors\n-  --> $DIR/issue-43197.rs:22:26\n-   |\n-LL |     const Y: u32 = foo(0-1);\n-   |                        --- attempt to subtract with overflow\n-LL |     //~^ WARN this constant cannot be used\n-LL |     println!(\"{} {}\", X, Y);\n-   |                          ^\n-\n-error[E0080]: erroneous constant used\n-  --> $DIR/issue-43197.rs:22:26\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/issue-43197.rs:24:26\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                          ^ referenced constant has errors\n \n-error[E0080]: referenced constant has errors\n-  --> $DIR/issue-43197.rs:22:23\n-   |\n-LL |     const X: u32 = 0-1;\n-   |                    --- attempt to subtract with overflow\n-...\n-LL |     println!(\"{} {}\", X, Y);\n-   |                       ^\n-\n-error[E0080]: erroneous constant used\n-  --> $DIR/issue-43197.rs:22:23\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/issue-43197.rs:24:23\n    |\n LL |     println!(\"{} {}\", X, Y);\n    |                       ^ referenced constant has errors\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "71e06e36361e869d15b75f9e43f8c22fa6cf5305", "filename": "src/test/ui/consts/const-eval/issue-44578.nll.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.nll.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -0,0 +1,15 @@\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/issue-44578.rs:35:14\n+   |\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |              ^^^^  -------------------------- referenced constant has errors\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/issue-44578.rs:35:20\n+   |\n+LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "9bd84b91d7f024771bb0d584a8dd637168abcad3", "filename": "src/test/ui/consts/const-eval/issue-44578.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -33,6 +33,5 @@ impl Foo for u16 {\n \n fn main() {\n     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-    //~^ ERROR erroneous constant used\n-    //~| ERROR E0080\n+    //~^ ERROR E0080\n }"}, {"sha": "570a8960164c02ac3475e007b418604bdcaea9cb", "filename": "src/test/ui/consts/const-eval/issue-44578.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-44578.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,18 +1,9 @@\n-error[E0080]: referenced constant has errors\n-  --> $DIR/issue-44578.rs:35:20\n-   |\n-LL |     const AMT: usize = [A::AMT][(A::AMT > B::AMT) as usize];\n-   |                        ------------------------------------ index out of bounds: the len is 1 but the index is 1\n-...\n-LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n-   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0080]: erroneous constant used\n+error[E0080]: evaluation of constant expression failed\n   --> $DIR/issue-44578.rs:35:20\n    |\n LL |     println!(\"{}\", <Bar<u16, u8> as Foo>::AMT);\n    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ referenced constant has errors\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "9a59ffd65ac2139ee48c287e2ad224d81e895429", "filename": "src/test/ui/consts/const-eval/issue-50814-2.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -19,12 +19,11 @@ trait Foo<T> {\n struct A<T>(T);\n \n impl<T: C> Foo<T> for A<T> {\n-    const BAR: usize = [5, 6, 7][T::BOO];\n+    const BAR: usize = [5, 6, 7][T::BOO]; //~ ERROR any use of this value will cause an error\n }\n \n fn foo<T: C>() -> &'static usize {\n-    &<A<T> as Foo<T>>::BAR //~ ERROR erroneous constant used\n-//~| ERROR E0080\n+    &<A<T> as Foo<T>>::BAR //~ ERROR E0080\n }\n \n impl C for () {"}, {"sha": "b36b3cf526c68ff930926a03eee810c9be5331db", "filename": "src/test/ui/consts/const-eval/issue-50814-2.stderr", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814-2.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,16 +1,17 @@\n-error[E0080]: referenced constant has errors\n-  --> $DIR/issue-50814-2.rs:26:5\n+error: any use of this value will cause an error\n+  --> $DIR/issue-50814-2.rs:22:5\n+   |\n+LL |     const BAR: usize = [5, 6, 7][T::BOO]; //~ ERROR any use of this value will cause an error\n+   |     ^^^^^^^^^^^^^^^^^^^-----------------^\n+   |                        |\n+   |                        index out of bounds: the len is 3 but the index is 42\n    |\n-LL |     const BAR: usize = [5, 6, 7][T::BOO];\n-   |                        ----------------- index out of bounds: the len is 3 but the index is 42\n-...\n-LL |     &<A<T> as Foo<T>>::BAR //~ ERROR erroneous constant used\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: #[deny(const_err)] on by default\n \n-error[E0080]: erroneous constant used\n+error[E0080]: evaluation of constant expression failed\n   --> $DIR/issue-50814-2.rs:26:5\n    |\n-LL |     &<A<T> as Foo<T>>::BAR //~ ERROR erroneous constant used\n+LL |     &<A<T> as Foo<T>>::BAR //~ ERROR E0080\n    |     ^---------------------\n    |      |\n    |      referenced constant has errors"}, {"sha": "3c7f182644942834ffb35310c62224c2549a5997", "filename": "src/test/ui/consts/const-eval/issue-50814.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -20,12 +20,11 @@ impl Unsigned for U8 {\n struct Sum<A,B>(A,B);\n \n impl<A: Unsigned, B: Unsigned> Unsigned for Sum<A,B> {\n-    const MAX: u8 = A::MAX + B::MAX;\n+    const MAX: u8 = A::MAX + B::MAX; //~ ERROR any use of this value will cause an error\n }\n \n fn foo<T>(_: T) -> &'static u8 {\n-    &Sum::<U8,U8>::MAX //~ ERROR erroneous constant used\n-//~| ERROR E0080\n+    &Sum::<U8,U8>::MAX //~ ERROR E0080\n }\n \n fn main() {"}, {"sha": "ebd0e34ab7e5f015c37dce1db11e385f362ca58a", "filename": "src/test/ui/consts/const-eval/issue-50814.stderr", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-50814.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,16 +1,17 @@\n-error[E0080]: referenced constant has errors\n-  --> $DIR/issue-50814.rs:27:5\n+error: any use of this value will cause an error\n+  --> $DIR/issue-50814.rs:23:5\n+   |\n+LL |     const MAX: u8 = A::MAX + B::MAX; //~ ERROR any use of this value will cause an error\n+   |     ^^^^^^^^^^^^^^^^---------------^\n+   |                     |\n+   |                     attempt to add with overflow\n    |\n-LL |     const MAX: u8 = A::MAX + B::MAX;\n-   |                     --------------- attempt to add with overflow\n-...\n-LL |     &Sum::<U8,U8>::MAX //~ ERROR erroneous constant used\n-   |     ^^^^^^^^^^^^^^^^^^\n+   = note: #[deny(const_err)] on by default\n \n-error[E0080]: erroneous constant used\n+error[E0080]: evaluation of constant expression failed\n   --> $DIR/issue-50814.rs:27:5\n    |\n-LL |     &Sum::<U8,U8>::MAX //~ ERROR erroneous constant used\n+LL |     &Sum::<U8,U8>::MAX //~ ERROR E0080\n    |     ^-----------------\n    |      |\n    |      referenced constant has errors"}, {"sha": "807a70dd2014fbae2c7db51fa0577e923b2c255b", "filename": "src/test/ui/consts/const-eval/issue-52443.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52443.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52443.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-52443.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -0,0 +1,49 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52443.rs:12:10\n+   |\n+LL |     [(); & { loop { continue } } ]; //~ ERROR mismatched types\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^\n+   |          |\n+   |          expected usize, found reference\n+   |          help: consider removing the borrow: `{ loop { continue } }`\n+   |\n+   = note: expected type `usize`\n+              found type `&_`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52443.rs:13:17\n+   |\n+LL |     [(); loop { break }]; //~ ERROR mismatched types\n+   |                 ^^^^^ expected (), found usize\n+   |\n+   = note: expected type `()`\n+              found type `usize`\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/issue-52443.rs:14:11\n+   |\n+LL |     [(); {while true {break}; 0}]; //~ ERROR constant contains unimplemented expression type\n+   |           ^^^^^^^^^^^^^^^^^^\n+\n+error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/issue-52443.rs:15:21\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n+   |                     ^^^^^^^^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/issue-52443.rs:15:21\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n+   |                     ^^^^^^^^\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-52443.rs:15:21\n+   |\n+LL |     [(); { for _ in 0usize.. {}; 0}]; //~ ERROR calls in constants are limited to constant functions\n+   |                     ^^^^^^^^ calling non-const fn `<I as std::iter::IntoIterator><std::ops::RangeFrom<usize>>::into_iter`\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0015, E0019, E0080, E0308.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "1a3164b0b03f60c7175173d93e8cf1a8d0aeb37d", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -12,10 +12,11 @@ fn main() {\n     // Make sure match uses the usual pointer comparison code path -- i.e., it should complain\n     // that pointer comparison is disallowed, not that parts of a pointer are accessed as raw\n     // bytes.\n-    let _: [u8; 0] = [4; { //~ ERROR could not evaluate repeat length\n+    let _: [u8; 0] = [4; {\n         match &1 as *const i32 as usize { //~ ERROR casting pointers to integers in constants\n             0 => 42, //~ ERROR constant contains unimplemented expression type\n             //~^ NOTE \"pointer arithmetic or comparison\" needs an rfc before being allowed\n+            //~| ERROR evaluation of constant value failed\n             n => n,\n         }\n     }];"}, {"sha": "86812b6c493a1e5fec5c274aea48f5f29436d44a", "filename": "src/test/ui/consts/const-eval/match-test-ptr-null.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fmatch-test-ptr-null.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -12,19 +12,11 @@ error[E0019]: constant contains unimplemented expression type\n LL |             0 => 42, //~ ERROR constant contains unimplemented expression type\n    |             ^\n \n-error[E0080]: could not evaluate repeat length\n-  --> $DIR/match-test-ptr-null.rs:15:26\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/match-test-ptr-null.rs:17:13\n    |\n-LL |       let _: [u8; 0] = [4; { //~ ERROR could not evaluate repeat length\n-   |  __________________________^\n-LL | |         match &1 as *const i32 as usize { //~ ERROR casting pointers to integers in constants\n-LL | |             0 => 42, //~ ERROR constant contains unimplemented expression type\n-   | |             - \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n-LL | |             //~^ NOTE \"pointer arithmetic or comparison\" needs an rfc before being allowed\n-LL | |             n => n,\n-LL | |         }\n-LL | |     }];\n-   | |_____^\n+LL |             0 => 42, //~ ERROR constant contains unimplemented expression type\n+   |             ^ \"pointer arithmetic or comparison\" needs an rfc before being allowed inside constants\n \n error: aborting due to 3 previous errors\n "}, {"sha": "aa6cd888018f4d06874bddd86035e95c258f176f", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(const_fn, const_fn_union)]\n \n-#![deny(const_err)]\n+#![allow(const_err)]\n \n union Bar {\n     a: &'static u8,"}, {"sha": "9f19e68f2a82ff332010de7209b9f5cbbbbd8293", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn, const_fn_union)]\n+\n+#![deny(const_err)]\n+\n+union Bar {\n+    a: &'static u8,\n+    b: usize,\n+}\n+\n+const fn bar() -> u8 {\n+    unsafe {\n+        // this will error as long as this test\n+        // is run on a system whose pointers need more\n+        // than 8 bits\n+        Bar { a: &42 }.b as u8\n+    }\n+}\n+\n+fn main() {\n+    // FIXME(oli-obk): this should panic at runtime\n+    // this will actually compile, but then\n+    // abort at runtime (not panic, hard abort).\n+    let x: &'static u8 = &(bar() + 1);\n+    let y = *x;\n+    unreachable!();\n+}"}, {"sha": "3eeacbf842a4c2c7f6e4073f9a25856fb9963582", "filename": "src/test/ui/consts/const-eval/promoted_const_fn_fail_deny_const_err.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_const_fn_fail_deny_const_err.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -0,0 +1,19 @@\n+error: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_const_fn_fail_deny_const_err.rs:33:26\n+   |\n+LL |         Bar { a: &42 }.b as u8\n+   |         ---------------------- a raw memory access tried to access part of a pointer value as raw bytes\n+...\n+LL |     let x: &'static u8 = &(bar() + 1);\n+   |                          ^^-----^^^^^\n+   |                            |\n+   |                            inside call to `bar`\n+   |\n+note: lint level defined here\n+  --> $DIR/promoted_const_fn_fail_deny_const_err.rs:13:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "26499fcb9b5551a83563b6e3d671be5fed869705", "filename": "src/test/ui/consts/const-eval/promoted_errors.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -46,3 +46,15 @@ warning: this expression will panic at runtime\n LL |     let _x = 1/(false as u32);\n    |              ^^^^^^^^^^^^^^^^ attempt to divide by zero\n \n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:24:20\n+   |\n+LL |     println!(\"{}\", 1/(false as u32));\n+   |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+warning: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors.rs:19:20\n+   |\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^ attempt to divide by zero\n+"}, {"sha": "48c172b5e31646ebc00fcc371714b3b3abc0acda", "filename": "src/test/ui/consts/const-eval/pub_const_err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -14,7 +14,7 @@\n #![crate_type = \"lib\"]\n \n pub const Z: u32 = 0 - 1;\n-//~^ WARN this constant cannot be used\n+//~^ WARN any use of this value will cause an error\n \n pub type Foo = [i32; 0 - 1];\n //~^ WARN attempt to subtract with overflow"}, {"sha": "2194180c2efdf03ddb3f18a69921db7325d6b238", "filename": "src/test/ui/consts/const-eval/pub_const_err.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,4 +1,4 @@\n-warning: this constant cannot be used\n+warning: any use of this value will cause an error\n   --> $DIR/pub_const_err.rs:16:1\n    |\n LL | pub const Z: u32 = 0 - 1;\n@@ -12,15 +12,3 @@ note: lint level defined here\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n-warning: attempt to subtract with overflow\n-  --> $DIR/pub_const_err.rs:19:22\n-   |\n-LL | pub type Foo = [i32; 0 - 1];\n-   |                      ^^^^^\n-\n-warning: this array length cannot be used\n-  --> $DIR/pub_const_err.rs:19:22\n-   |\n-LL | pub type Foo = [i32; 0 - 1];\n-   |                      ^^^^^ attempt to subtract with overflow\n-"}, {"sha": "849d40cf107b7a4a100a86f72527fab8e8e291b7", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -12,7 +12,7 @@\n #![warn(const_err)]\n \n pub const Z: u32 = 0 - 1;\n-//~^ WARN this constant cannot be used\n+//~^ WARN any use of this value will cause an error\n \n pub type Foo = [i32; 0 - 1];\n //~^ WARN attempt to subtract with overflow"}, {"sha": "60834e006503c9f1a09f8f3336f15183acd1c0c2", "filename": "src/test/ui/consts/const-eval/pub_const_err_bin.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpub_const_err_bin.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,4 +1,4 @@\n-warning: this constant cannot be used\n+warning: any use of this value will cause an error\n   --> $DIR/pub_const_err_bin.rs:14:1\n    |\n LL | pub const Z: u32 = 0 - 1;\n@@ -12,15 +12,3 @@ note: lint level defined here\n LL | #![warn(const_err)]\n    |         ^^^^^^^^^\n \n-warning: attempt to subtract with overflow\n-  --> $DIR/pub_const_err_bin.rs:17:22\n-   |\n-LL | pub type Foo = [i32; 0 - 1];\n-   |                      ^^^^^\n-\n-warning: this array length cannot be used\n-  --> $DIR/pub_const_err_bin.rs:17:22\n-   |\n-LL | pub type Foo = [i32; 0 - 1];\n-   |                      ^^^^^ attempt to subtract with overflow\n-"}, {"sha": "f1d30394d380ef87116f514aee668600b7a4b9dc", "filename": "src/test/ui/consts/const-eval/shift_overflow.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fshift_overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fshift_overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fshift_overflow.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: could not evaluate enum discriminant\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/shift_overflow.rs:13:9\n    |\n LL |     X = 1 << ((u32::max_value() as u64) + 1), //~ ERROR E0080"}, {"sha": "2f7a5dda9ffcbd4d52355a26e530a6e1ccc9a69b", "filename": "src/test/ui/consts/const-eval/ub-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -20,7 +20,7 @@ union TransmuteEnum {\n \n // A pointer is guaranteed non-null\n const BAD_ENUM: Enum = unsafe { TransmuteEnum { a: &1 }.b };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR is undefined behavior\n \n // Invalid enum discriminant\n #[repr(usize)]\n@@ -33,7 +33,7 @@ union TransmuteEnum2 {\n     b: Enum2,\n }\n const BAD_ENUM2 : Enum2 = unsafe { TransmuteEnum2 { a: 0 }.b };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR is undefined behavior\n \n // Invalid enum field content (mostly to test printing of apths for enum tuple\n // variants and tuples).\n@@ -43,7 +43,7 @@ union TransmuteChar {\n }\n // Need to create something which does not clash with enum layout optimizations.\n const BAD_ENUM_CHAR : Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR is undefined behavior\n \n fn main() {\n }"}, {"sha": "4cbaa2f3a906fe9319fe0e72f00469b39db2a2d7", "filename": "src/test/ui/consts/const-eval/ub-enum.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-enum.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,20 +1,20 @@\n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:22:1\n    |\n LL | const BAD_ENUM: Enum = unsafe { TransmuteEnum { a: &1 }.b };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer enum discriminant\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:35:1\n    |\n LL | const BAD_ENUM2 : Enum2 = unsafe { TransmuteEnum2 { a: 0 }.b };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid enum discriminant 0\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-enum.rs:45:1\n    |\n LL | const BAD_ENUM_CHAR : Option<(char, char)> = Some(('x', unsafe { TransmuteChar { a: !0 }.b }));"}, {"sha": "40d1f97a807579f5dca19b1528005ad38d50e052", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -34,12 +34,15 @@ const fn read_field2() -> Field2 {\n }\n \n const fn read_field3() -> Field3 {\n-    const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR cannot be used\n+    const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR any use of this value\n+    //~^ ERROR any use of this value\n     FIELD3\n+    //~^ erroneous constant used\n }\n \n fn main() {\n     assert_eq!(read_field1(), FLOAT1_AS_I32);\n     assert_eq!(read_field2(), 1.0);\n     assert_eq!(read_field3(), unsafe { UNION.field3 });\n+    //~^ ERROR evaluation of constant expression failed\n }"}, {"sha": "39320791a3fd0cc2c8655f825049990f5a5ecbc3", "filename": "src/test/ui/consts/const-eval/union-const-eval-field.stderr", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-const-eval-field.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,10 +1,36 @@\n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/union-const-eval-field.rs:37:5\n    |\n-LL |     const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR cannot be used\n+LL |     const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR any use of this value\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: aborting due to previous error\n+error: any use of this value will cause an error\n+  --> $DIR/union-const-eval-field.rs:37:5\n+   |\n+LL |     const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR any use of this value\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/union-const-eval-field.rs:39:5\n+   |\n+LL |     FIELD3\n+   |     ^^^^^^ referenced constant has errors\n+\n+error[E0080]: evaluation of constant expression failed\n+  --> $DIR/union-const-eval-field.rs:46:5\n+   |\n+LL |     FIELD3\n+   |     ------ referenced constant has errors\n+...\n+LL |     assert_eq!(read_field3(), unsafe { UNION.field3 });\n+   |     ^^^^^^^^^^^-------------^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                |\n+   |                inside call to `read_field3`\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "5a8ea711d86bec114702038dfe99254819c862e9", "filename": "src/test/ui/consts/const-eval/union-ice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -20,9 +20,9 @@ union DummyUnion {\n \n const UNION: DummyUnion = DummyUnion { field1: 1065353216 };\n \n-const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR this constant cannot be used\n+const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR will cause an error\n \n-const FIELD_PATH: Struct = Struct { //~ ERROR this constant likely exhibits undefined behavior\n+const FIELD_PATH: Struct = Struct { //~ ERROR any use of this value will cause an error\n     a: 42,\n     b: unsafe { UNION.field3 },\n };\n@@ -32,7 +32,7 @@ struct Struct {\n     b: Field3,\n }\n \n-const FIELD_PATH2: Struct2 = Struct2 { //~ ERROR this constant likely exhibits undefined behavior\n+const FIELD_PATH2: Struct2 = Struct2 { //~ ERROR it is undefined behavior to use this value\n     b: [\n         21,\n         unsafe { UNION.field3 },"}, {"sha": "7f5cb731c8eee2a324fb33b33789a0ba05513a47", "filename": "src/test/ui/consts/const-eval/union-ice.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ice.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,26 +1,26 @@\n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/union-ice.rs:23:1\n    |\n-LL | const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR this constant cannot be used\n+LL | const FIELD3: Field3 = unsafe { UNION.field3 }; //~ ERROR will cause an error\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attempted to read undefined bytes\n    |\n    = note: #[deny(const_err)] on by default\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error: any use of this value will cause an error\n   --> $DIR/union-ice.rs:25:1\n    |\n-LL | / const FIELD_PATH: Struct = Struct { //~ ERROR this constant likely exhibits undefined behavior\n+LL | / const FIELD_PATH: Struct = Struct { //~ ERROR any use of this value will cause an error\n LL | |     a: 42,\n LL | |     b: unsafe { UNION.field3 },\n LL | | };\n    | |__^ type validation failed: encountered uninitialized bytes at .b, but expected initialized plain bits\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ice.rs:35:1\n    |\n-LL | / const FIELD_PATH2: Struct2 = Struct2 { //~ ERROR this constant likely exhibits undefined behavior\n+LL | / const FIELD_PATH2: Struct2 = Struct2 { //~ ERROR it is undefined behavior to use this value\n LL | |     b: [\n LL | |         21,\n LL | |         unsafe { UNION.field3 },"}, {"sha": "479cee92b94b375258f9060998dda38d97d79676", "filename": "src/test/ui/consts/const-eval/union-ub-fat-ptr.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -85,55 +85,56 @@ type MySliceBool = MySlice<[bool]>;\n const A: &str = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 1 } }.str};\n // bad str\n const B: &str = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.str};\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n // bad str\n const C: &str = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.str};\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n // bad str in user-defined unsized type\n const C2: &MyStr = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.my_str};\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n // OK\n const A2: &[u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 1 } }.slice};\n // bad slice\n const B2: &[u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.slice};\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n // bad slice\n const C3: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.slice};\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n // bad trait object\n const D: &Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n // bad trait object\n const E: &Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n // bad trait object\n const F: &Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n // bad data *inside* the trait object\n const G: &Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n+\n // bad data *inside* the slice\n const H: &[bool] = &[unsafe { BoolTransmute { val: 3 }.bl }];\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n // good MySliceBool\n const I1: &MySliceBool = &MySlice(true, [false]);\n // bad: sized field is not okay\n const I2: &MySliceBool = &MySlice(unsafe { BoolTransmute { val: 3 }.bl }, [false]);\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n // bad: unsized part is not okay\n const I3: &MySliceBool = &MySlice(true, [unsafe { BoolTransmute { val: 3 }.bl }]);\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n // invalid UTF-8\n const J1: &str = unsafe { SliceTransmute { slice: &[0xFF] }.str };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n // invalid UTF-8 in user-defined str-like\n const J2: &MyStr = unsafe { SliceTransmute { slice: &[0xFF] }.my_str };\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n fn main() {\n }"}, {"sha": "b61ea9ca6f95b3f482333c03c32da9ab3d2992f2", "filename": "src/test/ui/consts/const-eval/union-ub-fat-ptr.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub-fat-ptr.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,109 +1,109 @@\n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:87:1\n    |\n LL | const B: &str = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.str};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling (not entirely in bounds) reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:90:1\n    |\n LL | const C: &str = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.str};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in fat pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:93:1\n    |\n LL | const C2: &MyStr = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.my_str};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in fat pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:99:1\n    |\n LL | const B2: &[u8] = unsafe { SliceTransmute { repr: SliceRepr { ptr: &42, len: 999 } }.slice};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered dangling (not entirely in bounds) reference\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:102:1\n    |\n LL | const C3: &[u8] = unsafe { SliceTransmute { bad: BadSliceRepr { ptr: &42, len: &3 } }.slice};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-integer slice length in fat pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:106:1\n    |\n LL | const D: &Trait = unsafe { DynTransmute { repr: DynRepr { ptr: &92, vtable: &3 } }.rust};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:109:1\n    |\n LL | const E: &Trait = unsafe { DynTransmute { repr2: DynRepr2 { ptr: &92, vtable: &3 } }.rust};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered invalid drop fn in vtable\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:112:1\n    |\n LL | const F: &Trait = unsafe { DynTransmute { bad: BadDynRepr { ptr: &92, vtable: 3 } }.rust};\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered non-pointer vtable in fat pointer\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub-fat-ptr.rs:116:1\n    |\n LL | const G: &Trait = &unsafe { BoolTransmute { val: 3 }.bl };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>, but expected something in the range 0..=1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n-  --> $DIR/union-ub-fat-ptr.rs:119:1\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/union-ub-fat-ptr.rs:120:1\n    |\n LL | const H: &[bool] = &[unsafe { BoolTransmute { val: 3 }.bl }];\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>[0], but expected something in the range 0..=1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n-  --> $DIR/union-ub-fat-ptr.rs:125:1\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/union-ub-fat-ptr.rs:126:1\n    |\n LL | const I2: &MySliceBool = &MySlice(unsafe { BoolTransmute { val: 3 }.bl }, [false]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.0, but expected something in the range 0..=1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n-  --> $DIR/union-ub-fat-ptr.rs:128:1\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/union-ub-fat-ptr.rs:129:1\n    |\n LL | const I3: &MySliceBool = &MySlice(true, [unsafe { BoolTransmute { val: 3 }.bl }]);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered 3 at .<deref>.1[0], but expected something in the range 0..=1\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n-  --> $DIR/union-ub-fat-ptr.rs:132:1\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/union-ub-fat-ptr.rs:133:1\n    |\n LL | const J1: &str = unsafe { SliceTransmute { slice: &[0xFF] }.str };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n \n-error[E0080]: this constant likely exhibits undefined behavior\n-  --> $DIR/union-ub-fat-ptr.rs:135:1\n+error[E0080]: it is undefined behavior to use this value\n+  --> $DIR/union-ub-fat-ptr.rs:136:1\n    |\n LL | const J2: &MyStr = unsafe { SliceTransmute { slice: &[0xFF] }.my_str };\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>.0"}, {"sha": "008f1f2364866b7d2bbca736190c0fad24c9a17d", "filename": "src/test/ui/consts/const-eval/union-ub.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -34,7 +34,7 @@ union Bar {\n \n // the value is not valid for bools\n const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};\n-//~^ ERROR this constant likely exhibits undefined behavior\n+//~^ ERROR it is undefined behavior to use this value\n \n // The value is not valid for any union variant, but that's fine\n // unions are just a convenient way to transmute bits around"}, {"sha": "bb916ddbbcfd797eda1e48984b7786172949fd19", "filename": "src/test/ui/consts/const-eval/union-ub.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Funion-ub.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,4 +1,4 @@\n-error[E0080]: this constant likely exhibits undefined behavior\n+error[E0080]: it is undefined behavior to use this value\n   --> $DIR/union-ub.rs:36:1\n    |\n LL | const BAD_BOOL: bool = unsafe { DummyUnion { u8: 42 }.bool};"}, {"sha": "a7b757f2d000066777b264214721270923268900", "filename": "src/test/ui/consts/const-fn-error.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-error.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -0,0 +1,41 @@\n+error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n+  --> $DIR/const-fn-error.rs:16:19\n+   |\n+LL |     let mut sum = 0;\n+   |                   ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constant functions are unstable (see issue #48821)\n+  --> $DIR/const-fn-error.rs:16:19\n+   |\n+LL |     let mut sum = 0;\n+   |                   ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n+  --> $DIR/const-fn-error.rs:19:14\n+   |\n+LL |     for i in 0..x { //~ ERROR E0080\n+   |              ^^^^\n+\n+error[E0019]: constant function contains unimplemented expression type\n+  --> $DIR/const-fn-error.rs:19:14\n+   |\n+LL |     for i in 0..x { //~ ERROR E0080\n+   |              ^^^^\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-fn-error.rs:19:14\n+   |\n+LL |     for i in 0..x { //~ ERROR E0080\n+   |              ^^^^ calling non-const fn `<I as std::iter::IntoIterator><std::ops::Range<usize>>::into_iter`\n+...\n+LL |     let a : [i32; f(X)];\n+   |                   ---- inside call to `f`\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors occurred: E0015, E0019, E0080, E0658.\n+For more information about an error, try `rustc --explain E0015`."}, {"sha": "5f0829eb35874c27143d530c5a2b8bd9df84d193", "filename": "src/test/ui/consts/const-integer-bool-ops.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -16,6 +16,7 @@ const X: usize = 42 && 39;\n //~| ERROR mismatched types\n //~| expected usize, found bool\n const ARR: [i32; X] = [99; 34];\n+//~^ ERROR evaluation of constant value failed\n \n const X1: usize = 42 || 39;\n //~^ ERROR mismatched types\n@@ -25,6 +26,7 @@ const X1: usize = 42 || 39;\n //~| ERROR mismatched types\n //~| expected usize, found bool\n const ARR1: [i32; X1] = [99; 47];\n+//~^ ERROR evaluation of constant value failed\n \n const X2: usize = -42 || -39;\n //~^ ERROR mismatched types\n@@ -34,6 +36,7 @@ const X2: usize = -42 || -39;\n //~| ERROR mismatched types\n //~| expected usize, found bool\n const ARR2: [i32; X2] = [99; 18446744073709551607];\n+//~^ ERROR evaluation of constant value failed\n \n const X3: usize = -42 && -39;\n //~^ ERROR mismatched types\n@@ -43,36 +46,43 @@ const X3: usize = -42 && -39;\n //~| ERROR mismatched types\n //~| expected usize, found bool\n const ARR3: [i32; X3] = [99; 6];\n+//~^ ERROR evaluation of constant value failed\n \n const Y: usize = 42.0 == 42.0;\n //~^ ERROR mismatched types\n //~| expected usize, found bool\n const ARRR: [i32; Y] = [99; 1];\n+//~^ ERROR evaluation of constant value failed\n \n const Y1: usize = 42.0 >= 42.0;\n //~^ ERROR mismatched types\n //~| expected usize, found bool\n const ARRR1: [i32; Y1] = [99; 1];\n+//~^ ERROR evaluation of constant value failed\n \n const Y2: usize = 42.0 <= 42.0;\n //~^ ERROR mismatched types\n //~| expected usize, found bool\n const ARRR2: [i32; Y2] = [99; 1];\n+//~^ ERROR evaluation of constant value failed\n \n const Y3: usize = 42.0 > 42.0;\n //~^ ERROR mismatched types\n //~| expected usize, found bool\n const ARRR3: [i32; Y3] = [99; 0];\n+//~^ ERROR evaluation of constant value failed\n \n const Y4: usize = 42.0 < 42.0;\n //~^ ERROR mismatched types\n //~| expected usize, found bool\n const ARRR4: [i32; Y4] = [99; 0];\n+//~^ ERROR evaluation of constant value failed\n \n const Y5: usize = 42.0 != 42.0;\n //~^ ERROR mismatched types\n //~| expected usize, found bool\n const ARRR5: [i32; Y5] = [99; 0];\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {\n     let _ = ARR;"}, {"sha": "1bcb3ea719d1aa6068bbcb6f8e8714efe94874c5", "filename": "src/test/ui/consts/const-integer-bool-ops.stderr", "status": "modified", "additions": 78, "deletions": 17, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-integer-bool-ops.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -22,8 +22,14 @@ error[E0308]: mismatched types\n LL | const X: usize = 42 && 39;\n    |                  ^^^^^^^^ expected usize, found bool\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:18:18\n+   |\n+LL | const ARR: [i32; X] = [99; 34];\n+   |                  ^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:20:19\n+  --> $DIR/const-integer-bool-ops.rs:21:19\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^ expected bool, found integral variable\n@@ -32,7 +38,7 @@ LL | const X1: usize = 42 || 39;\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:20:25\n+  --> $DIR/const-integer-bool-ops.rs:21:25\n    |\n LL | const X1: usize = 42 || 39;\n    |                         ^^ expected bool, found integral variable\n@@ -41,13 +47,19 @@ LL | const X1: usize = 42 || 39;\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:20:19\n+  --> $DIR/const-integer-bool-ops.rs:21:19\n    |\n LL | const X1: usize = 42 || 39;\n    |                   ^^^^^^^^ expected usize, found bool\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:28:19\n+   |\n+LL | const ARR1: [i32; X1] = [99; 47];\n+   |                   ^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:29:19\n+  --> $DIR/const-integer-bool-ops.rs:31:19\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^ expected bool, found integral variable\n@@ -56,7 +68,7 @@ LL | const X2: usize = -42 || -39;\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:29:26\n+  --> $DIR/const-integer-bool-ops.rs:31:26\n    |\n LL | const X2: usize = -42 || -39;\n    |                          ^^^ expected bool, found integral variable\n@@ -65,22 +77,28 @@ LL | const X2: usize = -42 || -39;\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:29:19\n+  --> $DIR/const-integer-bool-ops.rs:31:19\n    |\n LL | const X2: usize = -42 || -39;\n    |                   ^^^^^^^^^^ expected usize, found bool\n \n-error[E0308]: mismatched types\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const-integer-bool-ops.rs:38:19\n    |\n+LL | const ARR2: [i32; X2] = [99; 18446744073709551607];\n+   |                   ^^ referenced constant has errors\n+\n+error[E0308]: mismatched types\n+  --> $DIR/const-integer-bool-ops.rs:41:19\n+   |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^ expected bool, found integral variable\n    |\n    = note: expected type `bool`\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:38:26\n+  --> $DIR/const-integer-bool-ops.rs:41:26\n    |\n LL | const X3: usize = -42 && -39;\n    |                          ^^^ expected bool, found integral variable\n@@ -89,47 +107,90 @@ LL | const X3: usize = -42 && -39;\n               found type `{integer}`\n \n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:38:19\n+  --> $DIR/const-integer-bool-ops.rs:41:19\n    |\n LL | const X3: usize = -42 && -39;\n    |                   ^^^^^^^^^^ expected usize, found bool\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:48:19\n+   |\n+LL | const ARR3: [i32; X3] = [99; 6];\n+   |                   ^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:47:18\n+  --> $DIR/const-integer-bool-ops.rs:51:18\n    |\n LL | const Y: usize = 42.0 == 42.0;\n    |                  ^^^^^^^^^^^^ expected usize, found bool\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:54:19\n+   |\n+LL | const ARRR: [i32; Y] = [99; 1];\n+   |                   ^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:52:19\n+  --> $DIR/const-integer-bool-ops.rs:57:19\n    |\n LL | const Y1: usize = 42.0 >= 42.0;\n    |                   ^^^^^^^^^^^^ expected usize, found bool\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:60:20\n+   |\n+LL | const ARRR1: [i32; Y1] = [99; 1];\n+   |                    ^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:57:19\n+  --> $DIR/const-integer-bool-ops.rs:63:19\n    |\n LL | const Y2: usize = 42.0 <= 42.0;\n    |                   ^^^^^^^^^^^^ expected usize, found bool\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:66:20\n+   |\n+LL | const ARRR2: [i32; Y2] = [99; 1];\n+   |                    ^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:62:19\n+  --> $DIR/const-integer-bool-ops.rs:69:19\n    |\n LL | const Y3: usize = 42.0 > 42.0;\n    |                   ^^^^^^^^^^^ expected usize, found bool\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:72:20\n+   |\n+LL | const ARRR3: [i32; Y3] = [99; 0];\n+   |                    ^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:67:19\n+  --> $DIR/const-integer-bool-ops.rs:75:19\n    |\n LL | const Y4: usize = 42.0 < 42.0;\n    |                   ^^^^^^^^^^^ expected usize, found bool\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:78:20\n+   |\n+LL | const ARRR4: [i32; Y4] = [99; 0];\n+   |                    ^^ referenced constant has errors\n+\n error[E0308]: mismatched types\n-  --> $DIR/const-integer-bool-ops.rs:72:19\n+  --> $DIR/const-integer-bool-ops.rs:81:19\n    |\n LL | const Y5: usize = 42.0 != 42.0;\n    |                   ^^^^^^^^^^^^ expected usize, found bool\n \n-error: aborting due to 18 previous errors\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-integer-bool-ops.rs:84:20\n+   |\n+LL | const ARRR5: [i32; Y5] = [99; 0];\n+   |                    ^^ referenced constant has errors\n+\n+error: aborting due to 28 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors occurred: E0080, E0308.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "68452082ef333b01e499baaed78e4d8dc89ada03", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -15,11 +15,9 @@\n const ONE: usize = 1;\n const TWO: usize = 2;\n const LEN: usize = ONE - TWO;\n+//~^ ERROR any use of this value will cause an error\n \n fn main() {\n     let a: [i8; LEN] = unimplemented!();\n //~^ ERROR E0080\n-//~| ERROR E0080\n-//~| ERROR E0080\n-//~| ERROR E0080\n }"}, {"sha": "da39fa2e6f22c8525d03091c321ad51f2fd7c3e0", "filename": "src/test/ui/consts/const-len-underflow-separate-spans.stderr", "status": "modified", "additions": 10, "deletions": 26, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-separate-spans.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,35 +1,19 @@\n-error[E0080]: referenced constant has errors\n-  --> $DIR/const-len-underflow-separate-spans.rs:20:17\n+error: any use of this value will cause an error\n+  --> $DIR/const-len-underflow-separate-spans.rs:17:1\n    |\n LL | const LEN: usize = ONE - TWO;\n-   |                    --------- attempt to subtract with overflow\n-...\n-LL |     let a: [i8; LEN] = unimplemented!();\n-   |                 ^^^\n-\n-error[E0080]: could not evaluate constant\n-  --> $DIR/const-len-underflow-separate-spans.rs:20:17\n+   | ^^^^^^^^^^^^^^^^^^^---------^\n+   |                    |\n+   |                    attempt to subtract with overflow\n    |\n-LL |     let a: [i8; LEN] = unimplemented!();\n-   |                 ^^^ referenced constant has errors\n+   = note: #[deny(const_err)] on by default\n \n-error[E0080]: referenced constant has errors\n-  --> $DIR/const-len-underflow-separate-spans.rs:20:12\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-len-underflow-separate-spans.rs:21:17\n    |\n-LL | const LEN: usize = ONE - TWO;\n-   |                    --------- attempt to subtract with overflow\n-...\n LL |     let a: [i8; LEN] = unimplemented!();\n-   |            ^^^^^^^^^\n-\n-error[E0080]: could not evaluate constant expression\n-  --> $DIR/const-len-underflow-separate-spans.rs:20:12\n-   |\n-LL |     let a: [i8; LEN] = unimplemented!();\n-   |            ^^^^^---^\n-   |                 |\n-   |                 referenced constant has errors\n+   |                 ^^^ referenced constant has errors\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "10180f3648998efccb007823b031a7f65bbe21ea", "filename": "src/test/ui/consts/const-len-underflow-subspans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -16,6 +16,6 @@ const TWO: usize = 2;\n \n fn main() {\n     let a: [i8; ONE - TWO] = unimplemented!();\n-    //~^ ERROR could not evaluate constant expression\n+    //~^ ERROR evaluation of constant value failed\n     //~| attempt to subtract with overflow\n }"}, {"sha": "3fca7ecb19a52c10a52244a034eeebbfe641b68b", "filename": "src/test/ui/consts/const-len-underflow-subspans.stderr", "status": "modified", "additions": 3, "deletions": 13, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-len-underflow-subspans.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,19 +1,9 @@\n-error: attempt to subtract with overflow\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/const-len-underflow-subspans.rs:18:17\n    |\n LL |     let a: [i8; ONE - TWO] = unimplemented!();\n-   |                 ^^^^^^^^^\n-   |\n-   = note: #[deny(const_err)] on by default\n-\n-error[E0080]: could not evaluate constant expression\n-  --> $DIR/const-len-underflow-subspans.rs:18:12\n-   |\n-LL |     let a: [i8; ONE - TWO] = unimplemented!();\n-   |            ^^^^^---------^\n-   |                 |\n-   |                 attempt to subtract with overflow\n+   |                 ^^^^^^^^^ attempt to subtract with overflow\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "ea5d7c176ffb9dbe06e2af3391a524acf78bbd47", "filename": "src/test/ui/consts/const-size_of-cycle.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-size_of-cycle.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,6 +1,11 @@\n error[E0391]: cycle detected when computing layout of `Foo`\n    |\n note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: [u8; _] }`...\n+note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}`...\n+  --> $DIR/const-size_of-cycle.rs:16:17\n+   |\n+LL |     bytes: [u8; std::mem::size_of::<Foo>()]\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n note: ...which requires const-evaluating `Foo::bytes::{{constant}}`...\n   --> $SRC_DIR/libcore/mem.rs:LL:COL\n    |"}, {"sha": "b71556735d9f60c7994451ce3b97decde4cfcb40", "filename": "src/test/ui/consts/const-slice-oob.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -13,8 +13,10 @@\n const FOO: &'static[u32] = &[1, 2, 3];\n const BAR: u32 = FOO[5];\n //~^ index out of bounds: the len is 3 but the index is 5\n-//~| ERROR this constant cannot be used\n+//~| ERROR any use of this value will cause an error\n+//~| ERROR any use of this value will cause an error\n \n fn main() {\n     let _ = BAR;\n+    //~^ ERROR erroneous constant used\n }"}, {"sha": "8fd298a18d22cefb827a13ebc359fe65130cabc2", "filename": "src/test/ui/consts/const-slice-oob.stderr", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-slice-oob.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,4 +1,4 @@\n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/const-slice-oob.rs:14:1\n    |\n LL | const BAR: u32 = FOO[5];\n@@ -8,5 +8,20 @@ LL | const BAR: u32 = FOO[5];\n    |\n    = note: #[deny(const_err)] on by default\n \n-error: aborting due to previous error\n+error: any use of this value will cause an error\n+  --> $DIR/const-slice-oob.rs:14:1\n+   |\n+LL | const BAR: u32 = FOO[5];\n+   | ^^^^^^^^^^^^^^^^^------^\n+   |                  |\n+   |                  index out of bounds: the len is 3 but the index is 5\n+\n+error[E0080]: erroneous constant used\n+  --> $DIR/const-slice-oob.rs:20:13\n+   |\n+LL |     let _ = BAR;\n+   |             ^^^ referenced constant has errors\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "e1d5811648185e14a4ba55dc06aa96d34a10cdc7", "filename": "src/test/ui/consts/const-tup-index-span.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -14,6 +14,7 @@ const TUP: (usize,) = 5usize << 64;\n //~^ ERROR mismatched types\n //~| expected tuple, found usize\n const ARR: [i32; TUP.0] = [];\n+//~^ ERROR evaluation of constant value failed\n \n fn main() {\n }"}, {"sha": "3018baac5a586ccba805abd951c6ed361d05d2b9", "filename": "src/test/ui/consts/const-tup-index-span.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-tup-index-span.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -7,6 +7,13 @@ LL | const TUP: (usize,) = 5usize << 64;\n    = note: expected type `(usize,)`\n               found type `usize`\n \n-error: aborting due to previous error\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/const-tup-index-span.rs:16:18\n+   |\n+LL | const ARR: [i32; TUP.0] = [];\n+   |                  ^^^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0308`.\n+Some errors occurred: E0080, E0308.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "2ab15dfedcaaae4ea6147e6afdf26658380e5677", "filename": "src/test/ui/error-codes/E0080.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -12,9 +12,6 @@ enum Enum {\n     X = (1 << 500), //~ ERROR E0080\n     //~| shift left with overflow\n     Y = (1 / 0) //~ ERROR E0080\n-    //~| const_err\n-    //~| const_err\n-    //~| const_err\n }\n \n fn main() {"}, {"sha": "e60c905587de81113e1e17380705e9a165628a06", "filename": "src/test/ui/error-codes/E0080.stderr", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0080.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,37 +1,15 @@\n-error: attempt to shift left with overflow\n-  --> $DIR/E0080.rs:12:9\n-   |\n-LL |     X = (1 << 500), //~ ERROR E0080\n-   |         ^^^^^^^^^^\n-   |\n-   = note: #[deny(exceeding_bitshifts)] on by default\n-\n-error[E0080]: could not evaluate enum discriminant\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/E0080.rs:12:9\n    |\n LL |     X = (1 << 500), //~ ERROR E0080\n    |         ^^^^^^^^^^ attempt to shift left with overflow\n \n-error: attempt to divide by zero\n-  --> $DIR/E0080.rs:14:9\n-   |\n-LL |     Y = (1 / 0) //~ ERROR E0080\n-   |         ^^^^^^^\n-   |\n-   = note: #[deny(const_err)] on by default\n-\n-error: this expression will panic at runtime\n-  --> $DIR/E0080.rs:14:9\n-   |\n-LL |     Y = (1 / 0) //~ ERROR E0080\n-   |         ^^^^^^^ attempt to divide by zero\n-\n-error[E0080]: could not evaluate enum discriminant\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/E0080.rs:14:9\n    |\n LL |     Y = (1 / 0) //~ ERROR E0080\n    |         ^^^^^^^ attempt to divide by zero\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "005f2c366889284ebe84a78a8cb5b9b34146c993", "filename": "src/test/ui/error-codes/E0396-fixed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -13,7 +13,7 @@\n const REG_ADDR: *const u8 = 0x5f3759df as *const u8;\n \n const VALUE: u8 = unsafe { *REG_ADDR };\n-//~^ ERROR this constant cannot be used\n+//~^ ERROR any use of this value will cause an error\n \n fn main() {\n }"}, {"sha": "e868d5a33fa4567b256372eae39fd5251a354d97", "filename": "src/test/ui/error-codes/E0396-fixed.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0396-fixed.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,4 +1,4 @@\n-error: this constant cannot be used\n+error: any use of this value will cause an error\n   --> $DIR/E0396-fixed.rs:15:1\n    |\n LL | const VALUE: u8 = unsafe { *REG_ADDR };"}, {"sha": "f8a87db88b13cca1386f0ac31adf457aa9b80373", "filename": "src/test/ui/eval-enum.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Feval-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Feval-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feval-enum.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -11,12 +11,10 @@\n enum Test {\n     DivZero = 1/0,\n     //~^ attempt to divide by zero\n-    //~| ERROR could not evaluate enum discriminant\n-    //~| ERROR this expression will panic at runtime\n+    //~| ERROR evaluation of constant value failed\n     RemZero = 1%0,\n     //~^ attempt to calculate the remainder with a divisor of zero\n-    //~| ERROR could not evaluate enum discriminant\n-    //~| ERROR this expression will panic at runtime\n+    //~| ERROR evaluation of constant value failed\n }\n \n fn main() {}"}, {"sha": "59c5ec10f6a866e12f6d21b246c61c3c64cc52d8", "filename": "src/test/ui/eval-enum.stderr", "status": "modified", "additions": 4, "deletions": 30, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Feval-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Feval-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feval-enum.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,41 +1,15 @@\n-error: attempt to divide by zero\n-  --> $DIR/eval-enum.rs:12:15\n-   |\n-LL |     DivZero = 1/0,\n-   |               ^^^\n-   |\n-   = note: #[deny(const_err)] on by default\n-\n-error: this expression will panic at runtime\n+error[E0080]: evaluation of constant value failed\n   --> $DIR/eval-enum.rs:12:15\n    |\n LL |     DivZero = 1/0,\n    |               ^^^ attempt to divide by zero\n \n-error[E0080]: could not evaluate enum discriminant\n-  --> $DIR/eval-enum.rs:12:15\n-   |\n-LL |     DivZero = 1/0,\n-   |               ^^^ attempt to divide by zero\n-\n-error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/eval-enum.rs:16:15\n-   |\n-LL |     RemZero = 1%0,\n-   |               ^^^\n-\n-error: this expression will panic at runtime\n-  --> $DIR/eval-enum.rs:16:15\n-   |\n-LL |     RemZero = 1%0,\n-   |               ^^^ attempt to calculate the remainder with a divisor of zero\n-\n-error[E0080]: could not evaluate enum discriminant\n-  --> $DIR/eval-enum.rs:16:15\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/eval-enum.rs:15:15\n    |\n LL |     RemZero = 1%0,\n    |               ^^^ attempt to calculate the remainder with a divisor of zero\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0080`."}, {"sha": "ccf67ca3138ffcf3d6f8f3530f837c51d060e199", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -10,8 +10,8 @@\n \n //https://github.com/rust-lang/rust/issues/31364\n \n-const fn a() -> usize { b() }\n+const fn a() -> usize { b() } //~ ERROR evaluation of constant value failed\n const fn b() -> usize { a() }\n-const ARR: [i32; a()] = [5; 6]; //~ ERROR could not evaluate constant expression\n+const ARR: [i32; a()] = [5; 6];\n \n fn main(){}"}, {"sha": "82da89f1aa702b7fe808b2a87916005f0b044fcb", "filename": "src/test/ui/infinite/infinite-recursion-const-fn.stderr", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-recursion-const-fn.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,8 +1,8 @@\n-error[E0080]: could not evaluate constant expression\n-  --> $DIR/infinite-recursion-const-fn.rs:15:12\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/infinite-recursion-const-fn.rs:14:25\n    |\n-LL | const fn a() -> usize { b() }\n-   |                         ---\n+LL | const fn a() -> usize { b() } //~ ERROR evaluation of constant value failed\n+   |                         ^^^\n    |                         |\n    |                         reached the configured maximum number of stack frames\n    |                         inside call to `b`\n@@ -58,10 +58,8 @@ LL | const fn b() -> usize { a() }\n    |                         inside call to `a`\n    |                         inside call to `a`\n    |                         inside call to `a`\n-LL | const ARR: [i32; a()] = [5; 6]; //~ ERROR could not evaluate constant expression\n-   |            ^^^^^^---^\n-   |                  |\n-   |                  inside call to `a`\n+LL | const ARR: [i32; a()] = [5; 6];\n+   |                  --- inside call to `a`\n \n error: aborting due to previous error\n "}, {"sha": "d7efcc524948696656fba8f2bc2d01d6dfc79297", "filename": "src/test/ui/issues/issue-39559-2.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39559-2.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -4,12 +4,24 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL |     let array: [usize; Dim3::dim()]\n    |                        ^^^^^^^^^^^\n \n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-39559-2.rs:24:24\n+   |\n+LL |     let array: [usize; Dim3::dim()]\n+   |                        ^^^^^^^^^^^ calling non-const fn `<Dim3 as Dim>::dim`\n+\n error[E0015]: calls in constants are limited to constant functions, tuple structs and tuple variants\n   --> $DIR/issue-39559-2.rs:26:15\n    |\n LL |         = [0; Dim3::dim()];\n    |               ^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-39559-2.rs:27:15\n+   |\n+LL |         = [0; Dim3::dim()];\n+   |               ^^^^^^^^^^^ calling non-const fn `<Dim3 as Dim>::dim`\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0015`."}, {"sha": "539b8d2aab3da26d2c9689eb071e67543ea1da14", "filename": "src/test/ui/issues/issue-41394.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -15,6 +15,7 @@ enum Foo {\n \n enum Bar {\n     A = Foo::A as isize\n+    //~^ ERROR evaluation of constant value failed\n }\n \n fn main() {}"}, {"sha": "4f170f0ce3d45c5ae095630d538edcd82666af6b", "filename": "src/test/ui/issues/issue-41394.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41394.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -6,6 +6,13 @@ LL |     A = \"\" + 1\n    |\n    = note: an implementation of `std::ops::Add` might be missing for `&str`\n \n-error: aborting due to previous error\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-41394.rs:17:9\n+   |\n+LL |     A = Foo::A as isize\n+   |         ^^^^^^^^^^^^^^^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0369`.\n+Some errors occurred: E0080, E0369.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "2b0eb68549795f529a01f4ded5844285f6801a95", "filename": "src/test/ui/issues/issue-43105.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43105.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -12,10 +12,11 @@ fn xyz() -> u8 { 42 }\n \n const NUM: u8 = xyz();\n //~^ ERROR calls in constants are limited to constant functions, tuple structs and tuple variants\n+//~| ERROR any use of this value will cause an error\n \n fn main() {\n     match 1 {\n-        NUM => unimplemented!(),\n+        NUM => unimplemented!(), //~ ERROR could not evaluate constant pattern\n         _ => unimplemented!(),\n     }\n }"}, {"sha": "aba8351186bd97f07c96220db14a07aaeffef131", "filename": "src/test/ui/issues/issue-43105.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43105.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -4,6 +4,22 @@ error[E0015]: calls in constants are limited to constant functions, tuple struct\n LL | const NUM: u8 = xyz();\n    |                 ^^^^^\n \n-error: aborting due to previous error\n+error: any use of this value will cause an error\n+  --> $DIR/issue-43105.rs:13:1\n+   |\n+LL | const NUM: u8 = xyz();\n+   | ^^^^^^^^^^^^^^^^-----^\n+   |                 |\n+   |                 calling non-const fn `xyz`\n+   |\n+   = note: #[deny(const_err)] on by default\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/issue-43105.rs:19:9\n+   |\n+LL |         NUM => unimplemented!(), //~ ERROR could not evaluate constant pattern\n+   |         ^^^\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0015`."}, {"sha": "f20c2c733591bb3c916f277d24b353599fafbde1", "filename": "src/test/ui/issues/issue-44415.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-44415.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -1,6 +1,11 @@\n error[E0391]: cycle detected when computing layout of `Foo`\n    |\n note: ...which requires normalizing `ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: All }, value: [u8; _] }`...\n+note: ...which requires const-evaluating + checking `Foo::bytes::{{constant}}`...\n+  --> $DIR/issue-44415.rs:19:17\n+   |\n+LL |     bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n+   |                 ^^^^^^\n note: ...which requires const-evaluating `Foo::bytes::{{constant}}`...\n   --> $DIR/issue-44415.rs:19:26\n    |"}, {"sha": "417f8c8848ea3c8d31a76b2a1472e733b98f000a", "filename": "src/test/ui/issues/issue-50599.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-50599.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-50599.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50599.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -12,4 +12,5 @@ fn main() {\n     const N: u32 = 1_000;\n     const M: usize = (f64::from(N) * std::f64::LOG10_2) as usize; //~ ERROR cannot find value\n     let mut digits = [0u32; M];\n+    //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "5338f333d21fa55d5ff1ac1e09e0ba31b3736a93", "filename": "src/test/ui/issues/issue-50599.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-50599.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Fissues%2Fissue-50599.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50599.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -10,6 +10,13 @@ LL | use std::f32::consts::LOG10_2;\n LL | use std::f64::consts::LOG10_2;\n    |\n \n-error: aborting due to previous error\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/issue-50599.rs:14:29\n+   |\n+LL |     let mut digits = [0u32; M];\n+   |                             ^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0425`.\n+Some errors occurred: E0080, E0425.\n+For more information about an error, try `rustc --explain E0080`."}, {"sha": "5bd0f90afbcae6e0f3030b39ab9f798c37dbca9d", "filename": "src/test/ui/recursion/recursive-static-definition.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursive-static-definition.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -5,6 +5,11 @@ LL | pub static FOO: u32 = FOO;\n    |                       ^^^\n    |\n    = note: ...which again requires const-evaluating `FOO`, completing the cycle\n+note: cycle used when const-evaluating + checking `FOO`\n+  --> $DIR/recursive-static-definition.rs:11:1\n+   |\n+LL | pub static FOO: u32 = FOO;\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "e479701492657e1f15529efd5d2caf39052cecb2", "filename": "src/test/ui/type/type-dependent-def-issue-49241.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.rs?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -12,4 +12,5 @@ fn main() {\n     let v = vec![0];\n     const l: usize = v.count(); //~ ERROR can't capture dynamic environment in a fn item\n     let s: [u32; l] = v.into_iter().collect();\n+    //~^ ERROR evaluation of constant value failed\n }"}, {"sha": "361c3c0c3d5d9758089d5c30d94d13bf032cccbb", "filename": "src/test/ui/type/type-dependent-def-issue-49241.stderr", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-dependent-def-issue-49241.stderr?ref=7fdf06cdde49c8cd87e34e85a95c1fe90ebdb0c3", "patch": "@@ -6,6 +6,13 @@ LL |     const l: usize = v.count(); //~ ERROR can't capture dynamic environment\n    |\n    = help: use the `|| { ... }` closure form instead\n \n-error: aborting due to previous error\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/type-dependent-def-issue-49241.rs:14:18\n+   |\n+LL |     let s: [u32; l] = v.into_iter().collect();\n+   |                  ^ referenced constant has errors\n+\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0434`.\n+Some errors occurred: E0080, E0434.\n+For more information about an error, try `rustc --explain E0080`."}]}