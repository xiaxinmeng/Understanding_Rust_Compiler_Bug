{"sha": "fea1d765033eada386ffc1684d47c00a48d104f1", "node_id": "C_kwDOAAsO6NoAKGZlYTFkNzY1MDMzZWFkYTM4NmZmYzE2ODRkNDdjMDBhNDhkMTA0ZjE", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-05-05T16:44:54Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2022-05-05T16:45:39Z"}, "message": " make `compare_generic_param_kinds` errors consistent", "tree": {"sha": "fef19174b45842ee05a51064217311a101fed588", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fef19174b45842ee05a51064217311a101fed588"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fea1d765033eada386ffc1684d47c00a48d104f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fea1d765033eada386ffc1684d47c00a48d104f1", "html_url": "https://github.com/rust-lang/rust/commit/fea1d765033eada386ffc1684d47c00a48d104f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fea1d765033eada386ffc1684d47c00a48d104f1/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4208c53ed695ddb822b6510e3faa0a46e591060e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4208c53ed695ddb822b6510e3faa0a46e591060e", "html_url": "https://github.com/rust-lang/rust/commit/4208c53ed695ddb822b6510e3faa0a46e591060e"}], "stats": {"total": 308, "additions": 142, "deletions": 166}, "files": [{"sha": "590131e4f6ae172cb9a5a7dad0fe05463140012c", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 48, "deletions": 118, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/fea1d765033eada386ffc1684d47c00a48d104f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea1d765033eada386ffc1684d47c00a48d104f1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=fea1d765033eada386ffc1684d47c00a48d104f1", "patch": "@@ -7,10 +7,10 @@ use rustc_hir::intravisit;\n use rustc_hir::{GenericParamKind, ImplItemKind, TraitItemKind};\n use rustc_infer::infer::{self, InferOk, TyCtxtInferExt};\n use rustc_infer::traits::util;\n-use rustc_middle::ty;\n use rustc_middle::ty::error::{ExpectedFound, TypeError};\n use rustc_middle::ty::subst::{InternalSubsts, Subst};\n use rustc_middle::ty::util::ExplicitSelf;\n+use rustc_middle::ty::{self, DefIdTree};\n use rustc_middle::ty::{GenericParamDefKind, ToPredicate, TyCtxt};\n use rustc_span::Span;\n use rustc_trait_selection::traits::error_reporting::InferCtxtExt;\n@@ -48,7 +48,7 @@ crate fn compare_impl_method<'tcx>(\n         return;\n     }\n \n-    if let Err(_) = compare_generic_param_kinds(tcx, impl_m, trait_m, trait_item_span) {\n+    if let Err(_) = compare_generic_param_kinds(tcx, impl_m, trait_m) {\n         return;\n     }\n \n@@ -973,7 +973,6 @@ fn compare_generic_param_kinds<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_item: &ty::AssocItem,\n     trait_item: &ty::AssocItem,\n-    trait_item_span: Option<Span>,\n ) -> Result<(), ErrorGuaranteed> {\n     assert_eq!(impl_item.kind, trait_item.kind);\n \n@@ -986,123 +985,54 @@ fn compare_generic_param_kinds<'tcx>(\n         })\n     };\n \n-    let get_param_span = |param: &ty::GenericParamDef| match tcx.hir().get_if_local(param.def_id) {\n-        Some(hir::Node::GenericParam(hir::GenericParam { span, .. })) => Some(span),\n-        _ => None,\n-    };\n+    for (param_impl, param_trait) in\n+        iter::zip(ty_const_params_of(impl_item.def_id), ty_const_params_of(trait_item.def_id))\n+    {\n+        use GenericParamDefKind::*;\n+        if match (&param_impl.kind, &param_trait.kind) {\n+            (Const { .. }, Const { .. })\n+                if tcx.type_of(param_impl.def_id) != tcx.type_of(param_trait.def_id) =>\n+            {\n+                true\n+            }\n+            (Const { .. }, Type { .. }) | (Type { .. }, Const { .. }) => true,\n+            // this is exhaustive so that anyone adding new generic param kinds knows\n+            // to make sure this error is reported for them.\n+            (Const { .. }, Const { .. }) | (Type { .. }, Type { .. }) => false,\n+            (Lifetime { .. }, _) | (_, Lifetime { .. }) => unreachable!(),\n+        } {\n+            let make_param_message = |prefix: &str, param: &ty::GenericParamDef| match param.kind {\n+                Const { .. } => {\n+                    format!(\"{} const parameter with type `{}`\", prefix, tcx.type_of(param.def_id))\n+                }\n+                Type { .. } => format!(\"{} type parameter\", prefix),\n+                Lifetime { .. } => unreachable!(),\n+            };\n \n-    let get_param_ident = |param: &ty::GenericParamDef| match tcx.hir().get_if_local(param.def_id) {\n-        Some(hir::Node::GenericParam(hir::GenericParam { name, .. })) => match name {\n-            hir::ParamName::Plain(ident) => Some(ident),\n-            _ => None,\n-        },\n-        other => bug!(\n-            \"expected GenericParam, found {:?}\",\n-            other.map_or_else(|| \"nothing\".to_string(), |n| format!(\"{:?}\", n))\n-        ),\n-    };\n+            let param_impl_span = tcx.def_span(param_impl.def_id);\n+            let param_trait_span = tcx.def_span(param_trait.def_id);\n \n-    let ty_const_params_impl = ty_const_params_of(impl_item.def_id);\n-    let ty_const_params_trait = ty_const_params_of(trait_item.def_id);\n-    let assoc_item_str = assoc_item_kind_str(&impl_item);\n+            let mut err = struct_span_err!(\n+                tcx.sess,\n+                param_impl_span,\n+                E0053,\n+                \"{} `{}` has an incompatible generic parameter for trait: `{}`\",\n+                assoc_item_kind_str(&impl_item),\n+                trait_item.name,\n+                &tcx.def_path_str(tcx.parent(trait_item.def_id))\n+            );\n \n-    for (param_impl, param_trait) in iter::zip(ty_const_params_impl, ty_const_params_trait) {\n-        use GenericParamDefKind::*;\n-        match (&param_impl.kind, &param_trait.kind) {\n-            (Const { .. }, Const { .. }) => {\n-                let impl_ty = tcx.type_of(param_impl.def_id);\n-                let trait_ty = tcx.type_of(param_trait.def_id);\n-                if impl_ty != trait_ty {\n-                    let param_impl_span = get_param_span(param_impl).unwrap();\n-                    let param_impl_ident = get_param_ident(param_impl);\n-                    let param_trait_span = get_param_span(param_trait);\n-\n-                    let mut err = struct_span_err!(\n-                        tcx.sess,\n-                        *param_impl_span,\n-                        E0053,\n-                        \"{} `{}` has an incompatible const parameter type for trait\",\n-                        assoc_item_str,\n-                        trait_item.name,\n-                    );\n-                    err.span_note(\n-                        param_trait_span.map_or_else(\n-                            || trait_item_span.unwrap_or(*param_impl_span),\n-                            |span| *span,\n-                        ),\n-                        &format!(\n-                            \"the const parameter{} has type `{}`, but the declaration \\\n-                                      in trait `{}` has type `{}`\",\n-                            &param_impl_ident\n-                                .map_or_else(|| \"\".to_string(), |ident| format!(\" `{ident}`\")),\n-                            impl_ty,\n-                            tcx.def_path_str(trait_item.def_id),\n-                            trait_ty\n-                        ),\n-                    );\n-                    let reported = err.emit();\n-                    return Err(reported);\n-                }\n-            }\n-            (Const { .. }, Type { .. }) => {\n-                let impl_ty = tcx.type_of(param_impl.def_id);\n-                let param_impl_span = get_param_span(param_impl).unwrap();\n-                let param_impl_ident = get_param_ident(param_impl);\n-                let param_trait_span = get_param_span(param_trait);\n-\n-                let mut err = struct_span_err!(\n-                    tcx.sess,\n-                    *param_impl_span,\n-                    E0053,\n-                    \"{} `{}` has an incompatible generic parameter for trait\",\n-                    assoc_item_str,\n-                    trait_item.name,\n-                );\n-                err.span_note(\n-                    param_trait_span\n-                        .map_or_else(|| trait_item_span.unwrap_or(*param_impl_span), |span| *span),\n-                    &format!(\n-                        \"the trait impl specifies{} a const parameter of type `{}`, but the declaration \\\n-                                       in trait `{}` requires it is a type parameter\",\n-                        &param_impl_ident\n-                            .map_or_else(|| \"\".to_string(), |ident| format!(\" `{ident}` is\")),\n-                        impl_ty,\n-                        tcx.def_path_str(trait_item.def_id),\n-                    ),\n-                );\n-                let reported = err.emit();\n-                return Err(reported);\n-            }\n-            (Type { .. }, Const { .. }) => {\n-                let trait_ty = tcx.type_of(param_trait.def_id);\n-                let param_impl_span = get_param_span(param_impl).unwrap();\n-                let param_impl_ident = get_param_ident(param_impl);\n-                let param_trait_span = get_param_span(param_trait);\n-\n-                let mut err = struct_span_err!(\n-                    tcx.sess,\n-                    *param_impl_span,\n-                    E0053,\n-                    \"{} `{}` has an incompatible generic parameter for trait\",\n-                    assoc_item_str,\n-                    trait_item.name,\n-                );\n-                err.span_note(\n-                    param_trait_span\n-                        .map_or_else(|| trait_item_span.unwrap_or(*param_impl_span), |span| *span),\n-                    &format!(\n-                        \"the trait impl specifies{} a type parameter, but the declaration \\\n-                                       in trait `{}` requires it is a const parameter of type `{}`\",\n-                        &param_impl_ident\n-                            .map_or_else(|| \"\".to_string(), |ident| format!(\" `{ident}` is\")),\n-                        tcx.def_path_str(trait_item.def_id),\n-                        trait_ty,\n-                    ),\n-                );\n-                let reported = err.emit();\n-                return Err(reported);\n-            }\n-            _ => (),\n+            let trait_header_span = tcx.def_ident_span(tcx.parent(trait_item.def_id)).unwrap();\n+            err.span_label(trait_header_span, \"\");\n+            err.span_label(param_trait_span, make_param_message(\"expected\", param_trait));\n+\n+            let impl_header_span =\n+                tcx.sess.source_map().guess_head_span(tcx.def_span(tcx.parent(impl_item.def_id)));\n+            err.span_label(impl_header_span, \"\");\n+            err.span_label(param_impl_span, make_param_message(\"found\", param_impl));\n+\n+            let reported = err.emit();\n+            return Err(reported);\n         }\n     }\n \n@@ -1228,7 +1158,7 @@ crate fn compare_ty_impl<'tcx>(\n     let _: Result<(), ErrorGuaranteed> = (|| {\n         compare_number_of_generics(tcx, impl_ty, impl_ty_span, trait_ty, trait_item_span)?;\n \n-        compare_generic_param_kinds(tcx, impl_ty, trait_ty, trait_item_span)?;\n+        compare_generic_param_kinds(tcx, impl_ty, trait_ty)?;\n \n         let sp = tcx.def_span(impl_ty.def_id);\n         compare_type_predicate_entailment(tcx, impl_ty, sp, trait_ty, impl_trait_ref)?;"}, {"sha": "5c9323261a973622d2bcaa4da320a13d948bf5f5", "filename": "src/test/ui/const-generics/defaults/mismatched_ty_const_in_trait_impl.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fea1d765033eada386ffc1684d47c00a48d104f1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea1d765033eada386ffc1684d47c00a48d104f1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.rs?ref=fea1d765033eada386ffc1684d47c00a48d104f1", "patch": "@@ -19,7 +19,23 @@ trait Uwu {\n }\n impl Uwu for () {\n     fn baz<const N: i32>() {}\n-    //~^ error: method `baz` has an incompatible const parameter type for trait\n+    //~^ error: method `baz` has an incompatible generic parameter for trait\n+}\n+\n+trait Aaaaaa {\n+    fn bbbb<const N: u32, T>() {}\n+}\n+impl Aaaaaa for () {\n+    fn bbbb<T, const N: u32>() {}\n+    //~^ error: method `bbbb` has an incompatible generic parameter for trait\n+}\n+\n+trait Names {\n+    fn abcd<T, const N: u32>() {}\n+}\n+impl Names for () {\n+    fn abcd<const N: u32, T>() {}\n+    //~^ error: method `abcd` has an incompatible generic parameter for trait\n }\n \n fn main() {}"}, {"sha": "a1ec8adec76a3ec4f2c0a62c0eb37a5ded376cdc", "filename": "src/test/ui/const-generics/defaults/mismatched_ty_const_in_trait_impl.stderr", "status": "modified", "additions": 52, "deletions": 23, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/fea1d765033eada386ffc1684d47c00a48d104f1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea1d765033eada386ffc1684d47c00a48d104f1/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fdefaults%2Fmismatched_ty_const_in_trait_impl.stderr?ref=fea1d765033eada386ffc1684d47c00a48d104f1", "patch": "@@ -1,39 +1,68 @@\n-error[E0053]: method `foo` has an incompatible generic parameter for trait\n+error[E0053]: method `foo` has an incompatible generic parameter for trait: `Trait`\n   --> $DIR/mismatched_ty_const_in_trait_impl.rs:5:12\n    |\n-LL |     fn foo<const M: u64>() {}\n-   |            ^^^^^^^^^^^^\n-   |\n-note: the trait impl specifies `M` is a const parameter of type `u64`, but the declaration in trait `Trait::foo` requires it is a type parameter\n-  --> $DIR/mismatched_ty_const_in_trait_impl.rs:2:12\n-   |\n+LL | trait Trait {\n+   |       -----\n LL |     fn foo<U>() {}\n-   |            ^\n+   |            - expected type parameter\n+LL | }\n+LL | impl Trait for () {\n+   | -----------------\n+LL |     fn foo<const M: u64>() {}\n+   |            ^^^^^^^^^^^^ found const parameter with type `u64`\n \n-error[E0053]: method `bar` has an incompatible generic parameter for trait\n+error[E0053]: method `bar` has an incompatible generic parameter for trait: `Other`\n   --> $DIR/mismatched_ty_const_in_trait_impl.rs:13:12\n    |\n-LL |     fn bar<T>() {}\n-   |            ^\n-   |\n-note: the trait impl specifies `T` is a type parameter, but the declaration in trait `Other::bar` requires it is a const parameter of type `u8`\n-  --> $DIR/mismatched_ty_const_in_trait_impl.rs:10:12\n-   |\n+LL | trait Other {\n+   |       -----\n LL |     fn bar<const M: u8>() {}\n-   |            ^^^^^^^^^^^\n+   |            ----------- expected const parameter with type `u8`\n+LL | }\n+LL | impl Other for () {\n+   | -----------------\n+LL |     fn bar<T>() {}\n+   |            ^ found type parameter\n \n-error[E0053]: method `baz` has an incompatible const parameter type for trait\n+error[E0053]: method `baz` has an incompatible generic parameter for trait: `Uwu`\n   --> $DIR/mismatched_ty_const_in_trait_impl.rs:21:12\n    |\n+LL | trait Uwu {\n+   |       ---\n+LL |     fn baz<const N: u32>() {}\n+   |            ------------ expected const parameter with type `u32`\n+LL | }\n+LL | impl Uwu for () {\n+   | ---------------\n LL |     fn baz<const N: i32>() {}\n-   |            ^^^^^^^^^^^^\n+   |            ^^^^^^^^^^^^ found const parameter with type `i32`\n+\n+error[E0053]: method `bbbb` has an incompatible generic parameter for trait: `Aaaaaa`\n+  --> $DIR/mismatched_ty_const_in_trait_impl.rs:29:13\n    |\n-note: the const parameter `N` has type `i32`, but the declaration in trait `Uwu::baz` has type `u32`\n-  --> $DIR/mismatched_ty_const_in_trait_impl.rs:18:12\n+LL | trait Aaaaaa {\n+   |       ------\n+LL |     fn bbbb<const N: u32, T>() {}\n+   |             ------------ expected const parameter with type `u32`\n+LL | }\n+LL | impl Aaaaaa for () {\n+   | ------------------\n+LL |     fn bbbb<T, const N: u32>() {}\n+   |             ^ found type parameter\n+\n+error[E0053]: method `abcd` has an incompatible generic parameter for trait: `Names`\n+  --> $DIR/mismatched_ty_const_in_trait_impl.rs:37:13\n    |\n-LL |     fn baz<const N: u32>() {}\n-   |            ^^^^^^^^^^^^\n+LL | trait Names {\n+   |       -----\n+LL |     fn abcd<T, const N: u32>() {}\n+   |             - expected type parameter\n+LL | }\n+LL | impl Names for () {\n+   | -----------------\n+LL |     fn abcd<const N: u32, T>() {}\n+   |             ^^^^^^^^^^^^ found const parameter with type `u32`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0053`."}, {"sha": "9bcb8e1aeed396f8b6b94514bb845f687e88bb43", "filename": "src/test/ui/const-generics/issues/issue-86820.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fea1d765033eada386ffc1684d47c00a48d104f1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea1d765033eada386ffc1684d47c00a48d104f1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.rs?ref=fea1d765033eada386ffc1684d47c00a48d104f1", "patch": "@@ -1,6 +1,6 @@\n // Regression test for the ICE described in #86820.\n \n-#![allow(unused,dead_code)]\n+#![allow(unused, dead_code)]\n use std::ops::BitAnd;\n \n const C: fn() = || is_set();\n@@ -9,13 +9,12 @@ fn is_set() {\n }\n \n trait Bits {\n-    fn bit<const I : u8>(self) -> bool;\n-    //~^ NOTE: the const parameter `I` has type `usize`, but the declaration in trait `Bits::bit` has type `u8`\n+    fn bit<const I: u8>(self) -> bool;\n }\n \n impl Bits for u8 {\n-    fn bit<const I : usize>(self) -> bool {\n-    //~^ ERROR: method `bit` has an incompatible const parameter type for trait [E0053]\n+    fn bit<const I: usize>(self) -> bool {\n+        //~^ ERROR: method `bit` has an incompatible generic parameter for trait: `Bits` [E0053]\n         let i = 1 << I;\n         let mask = u8::from(i);\n         mask & self == mask"}, {"sha": "4d54d654c12d13b89f87bf9ac0b1ef3476ab35da", "filename": "src/test/ui/const-generics/issues/issue-86820.stderr", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/fea1d765033eada386ffc1684d47c00a48d104f1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea1d765033eada386ffc1684d47c00a48d104f1/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86820.stderr?ref=fea1d765033eada386ffc1684d47c00a48d104f1", "patch": "@@ -1,14 +1,15 @@\n-error[E0053]: method `bit` has an incompatible const parameter type for trait\n-  --> $DIR/issue-86820.rs:17:12\n+error[E0053]: method `bit` has an incompatible generic parameter for trait: `Bits`\n+  --> $DIR/issue-86820.rs:16:12\n    |\n-LL |     fn bit<const I : usize>(self) -> bool {\n-   |            ^^^^^^^^^^^^^^^\n-   |\n-note: the const parameter `I` has type `usize`, but the declaration in trait `Bits::bit` has type `u8`\n-  --> $DIR/issue-86820.rs:12:12\n-   |\n-LL |     fn bit<const I : u8>(self) -> bool;\n-   |            ^^^^^^^^^^^^\n+LL | trait Bits {\n+   |       ----\n+LL |     fn bit<const I: u8>(self) -> bool;\n+   |            ----------- expected const parameter with type `u8`\n+...\n+LL | impl Bits for u8 {\n+   | ----------------\n+LL |     fn bit<const I: usize>(self) -> bool {\n+   |            ^^^^^^^^^^^^^^ found const parameter with type `usize`\n \n error: aborting due to previous error\n "}, {"sha": "6bed8e3aff9754832a89037db7becddd51d6f8d6", "filename": "src/test/ui/generic-associated-types/const_params_have_right_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fea1d765033eada386ffc1684d47c00a48d104f1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fea1d765033eada386ffc1684d47c00a48d104f1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.rs?ref=fea1d765033eada386ffc1684d47c00a48d104f1", "patch": "@@ -6,7 +6,7 @@ trait Trait {\n \n impl Trait for () {\n     type Foo<const N: u64> = u32;\n-    //~^ error: type `Foo` has an incompatible const parameter type\n+    //~^ error: type `Foo` has an incompatible generic parameter for trait\n }\n \n fn main() {}"}, {"sha": "9b8eddaff41bc41d80ee87a84ccc1db984f798ec", "filename": "src/test/ui/generic-associated-types/const_params_have_right_type.stderr", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fea1d765033eada386ffc1684d47c00a48d104f1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fea1d765033eada386ffc1684d47c00a48d104f1/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fconst_params_have_right_type.stderr?ref=fea1d765033eada386ffc1684d47c00a48d104f1", "patch": "@@ -1,14 +1,15 @@\n-error[E0053]: type `Foo` has an incompatible const parameter type for trait\n+error[E0053]: type `Foo` has an incompatible generic parameter for trait: `Trait`\n   --> $DIR/const_params_have_right_type.rs:8:14\n    |\n-LL |     type Foo<const N: u64> = u32;\n-   |              ^^^^^^^^^^^^\n-   |\n-note: the const parameter `N` has type `u64`, but the declaration in trait `Trait::Foo` has type `u8`\n-  --> $DIR/const_params_have_right_type.rs:4:14\n-   |\n+LL | trait Trait {\n+   |       -----\n LL |     type Foo<const N: u8>;\n-   |              ^^^^^^^^^^^\n+   |              ----------- expected const parameter with type `u8`\n+...\n+LL | impl Trait for () {\n+   | -----------------\n+LL |     type Foo<const N: u64> = u32;\n+   |              ^^^^^^^^^^^^ found const parameter with type `u64`\n \n error: aborting due to previous error\n "}]}